BACKGROUND
recent advances in microarray technologies have led to an avalanche of gene expression data from a variety of organisms. many of these microarray experiments have been deposited in array databases and are available for public scrutinizing and data mining purposes  <cit> . initially, microarray experiments involved comparison of one or a small number of treatments to a control. there is now a trend to more complex experiments, consisting of time-course  or dose-response studies. as an increasing number of data sets are deposited in the public domain, it is also becoming important to compare large numbers of treatments that are putatively similar, or that may share common components.

given the initial limitation of only a few arrays per experiment, tools were first developed to visualize data on a one-experiment-at-a-time basis . tools have also been developed that focus on the response of one  genes through multiple time points/experiments with a limited ontology structure  <cit> . there is still a need for visualization tools that allow data sets from multiple experimental conditions to be integrated and condensed into a single graphic display.

one common way to get an overview of a given microarray experiment is by using biological ontology structures. for example, many tools exist that utilize go  <cit> , kegg, or mips functional categories to provide an overview of changes in expression using overrepresentation  reviewed by  <cit>  or other approaches  <cit> . as a complement to pre-defined annotations, ad hoc manual annotations or groupings of genes that are differentially expressed can be used for presentation and/or interpretation. in these approaches the functional ontology is often displayed as a tree-like graph, and the individual results are usually represented in tabular format.

in this paper we describe pageman, a software tool which facilitates an ontologically-defined overview of the global response of the transcriptome. it provides a statistically-based overview of the enriched functional categories from global transcriptome responses, and can be viewed either in tabular form, or via a false color heat-map like display. this data-condensation allows the main global features of a single treatment to be rapidly identified, and facilitates the comparison of large numbers of treatments. pageman can be used with various functional ontologies. it implements a wilcoxon analysis to directly infer the contribution of individual categories to the response of the whole experiment  <cit> . it also implements an over/under representation analysis using either fisher's exact test, or a χ <dig> test combined with thresholds that the user can set individually. furthermore, for convenience, a web based ora analysis is offered on the pageman website. pageman generates direct-to-use, editable figures, which display both the hierarchy tree, as well as the changes within the individual experiments.

implementation
overview
pageman is a standalone desktop application with graphical user interface  implemented in java using the java swing libraries and parts of the mapman source tree. thus, pageman should run on any java enabled platform. it has been tested on microsoft windows xp, various linux systems and on apple's os x operating system. using a standard installation, pageman can handle between 30– <dig> experiments at one time. however, by increasing the available java heap space to  <dig> gibyte enables pageman to deal with hundreds of arrays.

the analysis algorithm for the wilcoxon test has been described earlier  <cit> . for the ora analysis a fisher's exact or a χ <dig> test is performed using a newly written java class. the output of this class has been tested by performing the same tests in r  <cit> . this class can also be used independently of pageman. in addition to the standard java libraries, pageman uses a number of third party libraries as support for specific operations. it relies on freehep libraries for graphical export, on jexcelapi library for import of excel files, which are one of the most widely used file formats of data representation in the biological sciences, and makes use of the dom4j libraries for parsing xml files.

inputs
pageman requires a mapping file, which assigns each probe identifier on the array into at least one functional category. in the examples presented here, the mapping file is based on the mapman ontology for arabidopsis genes described in the user's manual and elsewhere  <cit> . we provide a gui tool to translate mips, kegg, or go hierarchies into this format thus enabling the user to choose the most appropriate ontology or compare the different ontologies.

pageman can use several different types of input for the experimental data, depending on the operation desired e.g. log <dig> fold change or p-values of differential expression obtained by freely available, standard array handling software such as bioconductor  <cit> . alternatively, if the user requires only data visualization it is possible to generate a pageman native file . using this format it is possible to display any kind of data as false-color boxes, thus enabling the use of pageman for a multitude of other applications.

computation within pageman
over/under-representation analysis
for over-representation analysis, pageman uses fisher's exact or a χ <dig> test to calculate the likelihood for each category to contain the number of objects exceeding a user-definable threshold that is actually observed, given the total number of objects and the total number of objects exceeding this threshold. this threshold depends on an analysis previously performed. for example, one could analyze which genes surpass a certain fold-change value, or which genes are below a certain p-value, if differential expression has already been calculated. to facilitate interpretation, pageman applies the same procedure for objects below the negative value of the threshold and adds the tags "up" or "down" to the experiment names respectively.

unlike the χ <dig> test, fisher's exact test is also applicable for extreme cases of test situations, such as only observing a small number of objects per class or small classes. however, a χ <dig> test with yates continuity correction is offered as an alternative for testing; in this a case, ontological groups with too few items are omitted. the calculations are based upon the approximation of the gamma function by lanczos  <cit>  as implemented in the gnu scientific library which has been ported to java  <cit> .

wilcoxon test statistic
pageman uses an internal routine to compute an unpaired wilcoxon rank sum test statistic . if a table of fold-change values was given as an input, this feature would test whether the median fold-change within a particular ontological group was the same as the median fold-change of all genes not in that ontological group. unlike ora based tests, the wilcoxon test does not require setting a sometimes subjective threshold.

multiple hypothesis testing correction
pageman allows the user to not only test one hypothesis  but to test up to hundreds of hypotheses at once . it is therefore necessary to implement multiple-hypothesis-testing correction methods. this is achieved using three different methods: the conservative bonferroni correction that controls the family wise error rate, and the false discovery rate control methods by benjamini, hochberg  <cit>  and benjamini,yekutieli  <cit> . after correcting for multiple testing, "adjusted" p-values are computed according to the correction method specified. in the case of the false discovery rate controlling corrections, these new values actually represent the false discovery rate level e.g. using a value of  <dig>  as a cut-off would mean accepting a false discovery rate level of 5%. none of these testing corrections takes the nested hierarchy into account and may therefore lead to slightly biased results.

conversion for display
in order to display  p-values in pageman, they are transformed into their respective z-values. all p-values above  <dig>  are set to a z-value of  <dig> to avoid misinterpretation. the resulting values are then false color coded in a user-adjustable two color scale. here, a highly saturated color indicates a high absolute value, whereas smaller values are indicated by a lower color saturation. for the wilcoxon's test p-values, two different colors  can be selected to distinguish between categories where the average of the signals for all the genes in a category increases or decreases.

the pageman gui
pageman was designed with ease of use in mind: for this reason the user is guided through the analysis by a wizard. once the analysis has finished, the user is presented with a heat map  with representation of the differently enriched/differently behaving functional categories within the various experiments by false color coded boxes. this view can be overlaid with a tree representing the hierarchical information among different functional categories . for flexible visualization, individual nodes of the hierarchy tree can be collapsed to remove areas of the tree that are uninteresting . alternatively, all parents having only non-significant nodes can be collapsed or all non-significant nodes can be hidden. the boxes of the false color display can be identified and annotated by clicking or by using the command to "annotate all significant nodes"; this allows an editable, moveable annotation arrow to be added directly opposite the heat map feature. annotations that are not required can be manually removed. finally, experiments can be deleted from the display, and spacers can be added to separate groups of experiments to optimize the visual appearance.

for the layout, several different options are accessible via the options menu. for example, the dimensions of the boxes as well as the color intensities for the boxes can be set according to the user's choice. for depicting differential expression, several different color schemes  are available. finally, sub-categories can be opened in a separate window for closer inspection.

graphical output
pageman comes with various graphical export capabilities, which support the production of suitable graphics for viewing or even for pre-publication stages. the visualization display can be exported in standard bitmapped formats , and in vector formats such as svg, ps, pdf and the windows specific emf format. this allows the visualization to be imported into various downstream applications such as microsoft powerpoint or corel draw, where the individual elements can be further edited without loss of quality for final manuscript preparation and/or presentation. as indicated above, it is possible in advance to collapse or expand nodes while preparing the visualization display, in order to focus on selected features of the response.

documentation
help is available directly from the program itself by simply selecting the help menu item from within pageman. moreover, on our website we offer a step-by-step tutorial that guides one through the use of pageman.

RESULTS
exemplary comparison of multiple experiments
to demonstrate the use of pageman for multiple experiments, arabidopsis cold stress experiments were downloaded from nasc arrays  <cit>  and evaluated. the rma expression values for the samples were calculated  <cit>  and a linear model was fitted using bioconductor  <cit> . the resulting log <dig> fold change values at each time point were calculated and used for pageman. the data was processed in pageman using ora analysis with fisher's exact test, setting a threshold of  <dig> . all categories that have more/less genes than expected that exceed this threshold are colored with increasing intensity. an example from the pageman visualization is shown in figure  <dig>  where categories for transcription factors have been magnified using pageman's "extract and enlarge" function. ap2/erebp and constans-like transcription factors are consistently over-represented amongst the up-regulated genes. over-representation of myb related genes amongst the down-regulated genes can be seen in most experiments. these responses are in accordance with earlier meta-analysis of cold acclimation using mapman ontologies performed by hannah et al.  <dig> . however, the earlier analysis was time-consuming, requiring either manual bin counts or scripting based on customized mapping files. pageman performs this type of analysis in a few minutes, including annotation and layout, resulting in a graph like that shown in figure  <dig>  it also allows equally rapid analysis using the other three enrichment-based statistical tests included in the package. thus, pageman provides a quick integration at the ontology level across multiple similar experiments, and allows comparison of their similarities and differences. as exemplified, the pageman graphical interface provides an intuitive visualization overview representing "hot-spot pathways" activated during arabidopsis cold stress across experiments performed by different labs.

comparison of pageman with related tools
most currently available tools are limited to a few  statistical models such as either the hypergeometric or the binomial distribution. within the  <dig> tools reviewed by khatri and draghici, only one, namely the onto-express tool, supported four different enrichment-based statistical tests. pageman supports the use of fisher's exact test and χ <dig> statistics as well as wilcoxon's test. unlike the web-based tool jprogo  <cit>  it allows use of the non-enrichment based wilcoxon test, without the web-based limitations. also, many tools are limited to a few experiments at a time, whereas using pageman evaluating hundreds of experiments at once is possible.

most available tools only support the go ontology, or go and kegg in the case of amda. to the best of our knowledge, pageman is the only tool supporting the use of mapman, kegg, mips, and go ontologies. by providing a parser to automatically format these ontologies, pageman offers the user unprecedented flexibility to use whatever ontology is strongest or most advanced in their particular field of study. thus using pageman it is also possible to classify metabolite data, which is not possible based on the go ontology. as discussed by khatri and draghici  <cit> , most tools that use the go ontology are not able to use a higher level of abstraction because they can only use the lowest level of the hierarchy. pageman allows the user to flexibly collapse nodes that are of no interest for the user, and by default analyze all levels of abstraction.

also, many tools are limited to a few experiments at a time, whereas using pageman evaluating hundreds of experiments at once is possible. further, pageman supports the subsequent introduction of more array data  for comparison. among the tools having a user interface, this represents a rather novel feature. although this is also possible by using r/bioconductor, substantial programming skills are required. as manoli et al. point out, group testing helps in comparing different datasets  <cit> .

in terms of graphical capabilities and the ability to upload multiple experiments, high-throughput go-miner  <cit>  and amda  <cit>  are most similar to pageman, as they also offer heat-map like graphics. however, unlike pageman, these tools are not interactive. high-throughput go-miner sometimes requires manual editing of configuration files, and the installation requires connecting to an sql server or for the user to install their own sql server. this is typically beyond the means of most users. further, although a database approach offers more flexibility, the use of dumped files for classification  offers a significant speed improvement because the time intensive step of connecting to a remote database or a web-service only needs to happen once. amda, while offering a widget based interface still requires the installation of tcl/tk on top of r and bioconductor, which can be cumbersome on windows. pageman, on the other hand, is packaged with an installer and the user can download necessary files from the internet and thus remain totally anonymous and independent of internet connections for analyses. further, unlike pageman, the heat-maps generated by high-through put go miner or amda are static and annotations can not be easily edited.

CONCLUSIONS
we have developed a novel, platform-independent tool, pageman, which is available free of charge. it aids in interpreting individual microarray experiments and in exploring large sets of microarray experiments by analyzing and summarizing the data, and then visualizing it in an ontological context. with this tool it is possible to quickly compare given data to published results and/or to pinpoint special biological processes or pathways that may need to be investigated more thoroughly. pageman also allows comparison of the global response to analogous treatments in different species, provided that a comparable ontology is possible . it is planned to extend the mapman ontology to further crop plants and wild plant species, as large scale array sets become available for them. moreover, pageman will be adapted to include p-value corrections that take nested hierarchies into account, once these become widely accepted.

even though many tools have been generated over the years that use ontological categories to statistically assess and summarize data, pageman offers the unique possibility to layout, visualize, and annotate information from large transcriptome series experiments in an integrated manner using a single tool. furthermore, it is generic, and can be applied to other large quantitative data sets obtained from enzymatic, metabolomics, or proteomic approaches. this offers the research community a tool to both globally analyze and identify "hot-spot regulated pathways" and immediately export publication ready pictures.

availability and requirements
• project name: pageman

• project home page: 

• operating system: platform independent

• programming language: java

• other requirements: java  <dig>  or higher

• license: freely available. the software uses libraries covered by the lgpl  and others .

• any restrictions to use by non-academics: none

authors' contributions
bu designed the software, implemented the visualization, and tested and improved the statistics. an implemented data loading, foreign ontology parsing, document handling as well as parts of the user interfaces, an streamlined the whole code, and fixed bugs. ms presented the problem and came up with an initial concept, discussed additional users' needs and presented ui improvements. hr identified the wilcoxon test as a possible tool and mh tested and discussed ora analysis. yg, ob, and ms brought up the concept of data condensation. fp discussed ui improvements. arf contributed tomato ontologies, ns contributed barley ontologies. yg, ob, arf, ns, ds, hr, lk, fp and ms located mistakes in the software. all authors have read and approved the final manuscript.

