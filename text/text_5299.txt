BACKGROUND
the health care and life science sectors have been some of the most enthusiastic adopters of semantic web technologies. the benefits of the rdf/owl data model are well-understood by bioinformaticians who have too long had to deal with the problem of integrating data from multiple sources with wildly different underlying schema. these benefits are less obvious, however, to clinicians and researchers who merely see one mysterious query language  exchanged for another . even a semantic web-savvy informatician can be daunted when faced with the challenge of querying an unfamiliar data source whose particular rdf vocabulary is initially unknown.

the issue is compounded by the growing use of opaque, semantic-free uris for ontological classes and properties . while the meaning of rdf:type or dc:title is relatively clear to the human reader, the meaning of, for example, sio:sio_ <dig> is considerably harder to glean without looking up its ontological definition. this becomes particularly acute in the context of sparql queries. while often the subject and object portions of a sparql where clause contain variables, and therefore are inherently human-readable, the predicates are usually explicitly specified in the query. thus while:

?gene sio:is_homologous_to ?gene

is quite clear to both the query composer and the human reader, the opaque equivalent

?gene sio: <dig> ?gene

is effectively meaningless to the reader, and absurdly difficult for the query composer to remember. nevertheless, there are many valid reasons for designing ontologies using opaque identifiers, not the least of which is language neutrality.

rdf/xml provides built-in language neutrality by way of the xml:lang attribute; an ontology can therefore easily be internationalized by providing multiple rdfs:label or rdfs:comment properties with appropriate xml:lang attributes. however, even those projects who have, in principle, adopted language neutrality for their classes , most have not done so for their properties . this is no-doubt due, at least in part, to the already discussed difficulty of composing sparql queries in which predicates have opaque identifiers. nevertheless, it is crucial that we do not allow convenience to direct the development of a core global resource  and thus the problem should be solved at the level of the tools provided, rather than the resources themselves.

sparql assist is a web application that facilitates the construction of sparql queries by providing context-sensitive type-ahead completion. in addition to assistance with basic syntax, ontological terms are indexed by their labels, using the xml:lang attribute to record the language of each label for each term. ontological terms and their labels, are read on-the-fly from any ontology specified in a sparql from clause, but sparql assist can also be configured to pre-load terms from particular ontologies or sparql endpoints, reducing the burden on the user to know the existence and location of all relevant vocabularies.

the entire query, as it is being constructed, is used to provide context for the type-ahead suggestions. previously declared variables or known individuals  are suggested during type-ahead for the subject or object position of the where clause. in the predicate position, indexed ontological predicates are suggested, with preference given to properties that an individual is known to have if this information is available from ontological indexing and/or other query clauses. similarly, if a clause contains a variable that can ultimately be connected to a known individual in another part of the query, that connection is used to find the most likely properties in the current clause.

together, these functionalities should simplify the manual construction of sparql queries by  making the query more similar to natural language, and  supporting any language in which the required terms have been labeled. moreover, in so doing, sparql assist also provides ontology designers more freedom to follow best-practices in ontology design and internationalization by reducing the barrier to query construction using opaque terms. sparql assist thus represents one alternative, alongside visual query builders and faceted browsers, for helping unfamiliar users explore semantic data.

implementation
sparql assist is implemented in javascript  and is intended to be accessed through a browser. in its simplest configuration, sparql assist preloads properties, individuals and namespaces that have been indexed in json format. it can also be deployed with a server-side java component that will index owl ontologies directly. these ontologies may be parsed a priori as part of the sparql assist installation/configuration, or may be referred to in the from clause of a sparql query, in which case they are parsed dynamically at query time. in the future, as much computation as possible will be transferred to the client side to improve both performance and flexibility of deployment, but at present the limited support for owl in javascript requires a server-side component for ontology parsing.

our initial implementation of sparql assist was undertaken in the context of creating queries that will be resolved by the semantic health and research environment , and we present here both the core sparql assist software, as well as the extension specific to share. share is an advanced sparql query client built on top of the sadi framework  <cit>  for semantic web services. sadi services attach properties to input owl instances and these services are indexed in a central registry based on the properties they attach. share maps the triple patterns presented in the where clauses of a sparql query onto these indexed properties, in order to discover sadi web services capable of generating the required triples. the rdf data required to answer a given query is thus dynamically generated through the invocation of sadi services in response to the query being posed.

in the context of sparql assist, the fact that properties do not exist at query composition time might be considered a barrier, since there is no pre-existing rdf store to inspect for candidate properties and individuals. to compensate for this, the sadi extension to sparql assist uses the sadi registry, in addition to any loaded ontologies, to suggest properties to be used in a query. as in the generic case, if a clause contains a named individual or a variable previously connected to an individual, this information is used to further refine the suggestions; in this case by filtering out properties generated by services that cannot accept a particular individual as input and highlighting properties generated by services that can. thus, not only is the lack of a static triple store not a barrier to query composition, but the ability to construct a likely-successful query is, in fact, enhanced by utilization of the underlying sadi infrastructure.

although it was designed with share in mind, sparql assist can be used with any sparql endpoint that can be queried from client-side javascript. due to the limitations of cross-domain javascript requests, the endpoint must reside at the same domain name as the sparql assist query form, or the endpoint must be able to deliver query results in jsonp format, or a suitable proxy must be configured. sample configurations for common situations are available on the web  <cit> .

RESULTS
the results of this software engineering project are best described by a demonstrative walk-through using our public sparql assist interface available at  <cit> . in this demonstration we will be answering the question:

select the genes that participate in the human caffeine metabolism pathway and the proteins that they encode.

sparql assist helps query construction at all points, both with respect to correct sparql syntax, as well as the content of the query itself. this includes the specification of prefixes. begin typing "prefix" and a type-ahead prompt appears indicating that prefix is the only valid option at this point . knowing that we are going to be using kegg pathways, but not knowing what the correct uri prefix is, we then begin typing "path..." and are prompted with several options, one of which is the uri prefix for identifiers from the kyoto encyclopedia of genes and genomes .

several steps later, after specification of the select variables , sparql assist has a number of features aimed at simplifying the construction of the where clause. first, previously-typed variables are prompted. for example, typing "?g" prompts the user with their previously entered "?gene" variable . knowing  the vernacular that genes "participate in" metabolic pathways, typing "parti..." results in two choices of predicate "has participant", and "is participant in", along with their human-readable descriptions to help determine which predicate would be the correct one . in this case, "is participant in" is selected, since genes are participants in pathways. the opaque uri of the corresponding predicate  is added to the sparql query as a result of this selection .

with an interest in genes involved in caffeine metabolism, and not knowing which kegg pathway this corresponds to, we then begin typing "caff..." in the object-position of the where clause. sparql assist has pre-indexed the names and definitions of kegg pathway uris, and thus prompts us with "human caffeine metabolism pathway" as a type-ahead option . selecting this option inserts the uri kegg:hsa <dig> in the object position, corresponding to the identifier for this pathway, and the first where clause is complete .

in constructing the second where clause, we will reveal some limitations of the approach. after being prompted for "?protein" in response to "?pro..."  we then want to determine which genes code for these proteins. typing "code" reveals two, seemingly identical, options, neither of which has a definition - "is encoded by" and "isencodedby" . this is because these two predicates appeared in the ontologies pre-indexed by sparql assist and had no further description. since it is not possible to determine with any certainty if they are truly redundant, or which online resources will use which predicate, both are presented, and the user must make a choice. in figure  <dig> we have selected "is encoded by", and the corresponding uri http://semanticscience.org/resource/sio_ <dig> has been added to the query. we complete the query by adding the final ?gene variable, and the query results are shown in the same figure.

three additional features of the sparql assist software, and its sadi extension -- internationalization, dynamic ontology indexing, and dynamic predicate-validation -- will be demonstrated by a second walk-through. in this example, we attempt to resolve the same query as above, but will construct the query clauses slightly differently to allow these additional features to be revealed .

we complete the first clause and continue to the next, where we wish to find the proteins that are encoded by a given gene. we begin the second where clause with "?gene", and then  attempt to find the proteins that the genes "codiert für" . importantly, sparql assist is able to suggest predicates based on the semantic type of the data that will fill the ?gene variable. it is able to do this because, during the previous sadi registry query for the "has participant" predicate, it determined the output data-type of that sadi service and assigned that data-type to ?gene. as such, sparql assist is now able to indicate  that there is a sadi service that attaches the "codiert für" predicate to the individuals that will, at execution-time, fill the ?gene variable. finally, the "codiert für" predicate is selected and replaced by the appropriate uri, and query construction continues through to resolution .

discussion
the two walk-through scenarios above reveal the behaviours of the sparql assist software and demonstrate what we believe is an environment that assists query construction not only by "naïve" end-users, but also by experienced informaticians already comfortable with the sparql language. while these behaviours  are not themselves novel, the utility comes in the way they have been applied, particularly with respect to dynamic indexing of ontological terms, predicates, and individuals, and explicit support for internationalization.

we are aware that it may seem unsustainable and/or excessive to index individuals, such that "real things"  can be referred-to during construction of the query and resolved by sparql assist to their native identifiers, but we don't think this is necessarily the case. first, we believe it is crucial to do so since  we cannot and should not expect users to know or remember the uri of their data-of-interest. second, the amount of storage required to achieve this  is minimal and lookups over this data can be quite rapid. third, we anticipate that sparql assist will be deployed by specific communities or on specific portals, where the individuals of greatest interest to that community can be anticipated and selectively indexed to minimize lookup time and index size.

sparql assist does not aim to be a query interface that understands natural language. it relies on ontology authors creating "obvious" labels for their predicates and, even in that case, a user will often need to try several "words" before discovering the phrase that the ontology author used. however, we believe that this is nevertheless better than the status quo and, moreover, makes it easier for ontology authors to justify following best-practices of ontology design and internationalization by reducing the resulting burden of complexity placed on their end-users.

there are some areas where the sparql assist interface can be further improved. in particular, while the query construction process itself is guided by "natural language", the interface immediately converts this into sparql clauses with opaque identifiers; thus, the final query in sparql assist is just as unreadable as any traditional sparql query. this implementation barrier results from limitations in the javascript language: the content of a web text-box cannot be marked-up and thus sparql query clauses cannot be individually referenced and linked to an external, non-sparql representation. we would welcome participation of any community members who might have a solution to this problem!

CONCLUSIONS
sparql assist provides prototype solutions for two important problems. first, to hasten the uptake of semantic web technologies, it is important to improve access to, and usability of, semantic web resources for the lay-end-user while still maintaining best-practices in the way these resources are modeled. opaque identifiers for both classes and properties are important, as they allow us to avoid "churn" as an ontology evolves over time. we must therefore support the end-user in constructing queries over resources formatted in this way. second, the semantic web is intended to be a global resource, of use to all. as such, a respect for internationalization is also critical, even at these early stages in semantic web evolution. we believe that sparql assist provides motivation to more widely adopt what are clearly best-practices in semantic web data provision.

availability and requirements
project name: sparql assist

project home page: http://code.google.com/p/sadi/

operating system: platform independent

programming language: java

license: new bsd

list of abbreviations
cwa: concept web alliance; json: javascript object notation; jsonp: javascript with padding; kegg: kyoto encyclopaedia of genes and genomes; obo: open biomedical ontologies; owl: web ontology language; rdf: resource description framework; sadi: semantic automated discovery and integration; share: semantic health and research environment; sio: semantic science integrated ontology; sparql: sparql protocol and rdf query language; sql: structured query language; uri: uniform resource identifier; url: uniform resource locator; xml: extensible markup language.

competing interests
the authors declare that they have no competing interests.

authors' contributions
lm wrote the sparql assist software and wrote significant portions of this manuscript. bv invented and implemented the optimizer algorithm of share allowing sparql queries to be efficiently converted to web service workflows for this software demonstration and assisted with portions of this manuscript. mw conceived of the sadi project, together with lm conceived of the sparql assist concept, and wrote the majority of this manuscript.

