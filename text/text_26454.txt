BACKGROUND
the web has become one of the most important sources of information, opening access to a vast range of research resources hosted throughout the world. unfortunately, for bioinformatics resources at least, this pleasant vision of the web as a gallery of resources that can be discovered, combined and exploited to enhance our capacity to produce new knowledge, has a dark side. the current situation of bioinformatics services reflects a structure-chaotic set of resources, publicly available, but through a variety of mechanisms. in practical terms, each institution deploys software using its own access and invocations mechanisms and interfaces. not only do the final users need to learn how to use the different services interfaces, but software developers spend their resources adjusting formats and protocols when combining different services.

the most promising solution for these problems is based on the notion of web services . ws are applications deployed over the internet providing a given functionality, to other applications. ws technology resides in a stack of xml-based protocols such as wsdl  and soap  to allow automatic access to software running on different platforms and implemented in different programming languages. ws differ from web applications in that they generally involve application-to-application communication, and are not intended to be accessed via a web browser. instead, clients must be written in a language that supports http and soap, and issue a message or remote method call a ws, etc, which in turn processes the message and returns a response to the client. in the context of bioinformatics, web services promises easier integration and interoperability between bioinformatics applications.

however, even when ws represent a step forward in process intercommunication, it is not mandatory to use soap in the ws implementation. for example, other ws use xml-rpc  <cit>  based on a simpler communication mechanism although it does not cover all soap functionality; and rest  <cit>  does not define the structure, composition or content of the data interchanged. to overcome this problem, the bioinformatics provider community has proposed complementary solutions.

one specialized approach which aims to improve metadata service annotation in bioinformatics is biomoby  <cit> . this standard aims to facilitate the integration of services by using a metadata repository  with service descriptions defined using a service ontology. in this system, all the services use the same format, and so the outputs can be directly connected to other services.

one example of a successful service repository in bioinformatics is the repository for biomoby services. a repository stores definitions of ws entities and related objects , but does not usually provide more functionality beyond making the discovering of new services easier. clients are still responsible for tasks such as processing the inputs to meet the needs of each service.

in this sense, data integration in bioinformatics remains a problem, partly because many services declare inputs and outputs as plain strings. in the discussion section, we will give an example of how this can produce problems when trying to integrate services.

therefore, the problem of service integration and interoperability remains unsolved and it is not difficult to predict that new protocols are still appearing.

as a contribution towards solving the limitations of working over specific repositories and service technologies, we have developed mapi, which is a programmatic framework that integrates different repositories schemas through a virtual definition and can be easily extended to include different web service invocation protocols.

the versatility and strength of mapi has been demonstrated by the implementation of different clients such as jorca  <cit> , and magallanes  <cit>  which are able to access repositories such as moby central at the university of calgary that uses the biomoby-based repository http://moby.ucalgary.ca/moby/moby-central.pl, the national institute for bioinformatics in spain which uses an extended biomoby repository http://www.inab.org/mowserv, the tool-metadata repository used in the advancing clinico genomic trials eu-project http://www.eu-acgt.org/, ebi web services  <cit> , biocatalogue  <cit> , embrace  <cit> , wabi-japan  <cit>  and others.

implementation
modularity
one of the most relevant challenges that the developers have to face when developing software clients is the diversity of types, such as clients, browsers, file explorers, execution systems and catalogues. this perception has driven the modular design of mapi ; gathering in each module a closely related set of capabilities, e.g. service handling, execution, data conversion, security. one benefit is to install exclusively the modules the programmer needs  for each specific environment, avoiding the full library. the core modules of mapi manage the execution of distributed services, including: handling tools  and their functional categories or user data.

general functionality
a core set of functions is always attached to each module to support retrieval, query, editing and management of the specific resources the module handles. consequently, the module related with data types is able to retrieve i/o compatible services, the user module provides privacy and user authentication; the tasks module can invoke services, etcetera. worthy of mention are the "filter lists", which modules return. the contents of these lists can vary depending on the filters defined by the software developers, providing an extensible and customizable method to query the data sources. this is more flexible than platforms which only provide fixed and pre-established searches.

all mapi components are available to system developers through a configuration file, yielding the access to multiple data sources without any change in the application  code. two different configuration levels can be devised related to "where and how" the information is. that is to say, the client can switch between biomoby-like repositories wherever it is located, but also can switch to work with wsdl definition of ws, such as the wabi collection. in the line of customization, the configuration file can also be used to define the behaviour of each module to fit specific requirements. in this sense, it is possible to define some aspects such as delayed writing, the usage of a cache system or the possibility of modifying the information.

accesses
in order to make each module independent of external resources and their internal organization, each module has a component, called access, that defines the metadata resources and how they will be accessed, allocated and connected according to the module functionality. therefore, one of the most important tasks covered by the access components is the mapping of ws description into the internal data model used by mapi.

the content of the internal data model was decided by an exhaustive review of current implementations, such as biomoby, wsdl, grid systems, etc. naturally, this data model can also become incomplete or obsolete when new functionalities offered by ws would need additional descriptors. to prevent against this problem, we devise three different ways for rapid extension of functionality by:  adding new modules with the new functionality ;  for existing modules, the extension is accomplished by inheritance of the basic functionality and incorporating new methods, attributes, information, etc.; and  the resource's attributes in any module can be extended by adding 'type-label-value' fields .

at the same time that mapi can be extended to cover new aspects in integration, it is imperative to ensure backward compatibility, that is to say, existing clients will continue to be valid, and new clients would exploit the new functionality.

workers
in the same way as the different descriptions of resources are homogenized by access modules, we also have to take care of the different invocation methods for ws new simple pieces of software named workers performing the uniform invocation of services. in this case, different workers can be plugged into the system and therefore the system is able to invoke services with different calling protocol . this ability makes mapi suitable to run different types of services, which allows the creation of new and more complex workflows, for instance to be able to combine biomoby and ebi services. in this way, in order to make it possible to launch new types of services, such as rest, for example, only the implementation of a new worker is necessary.

the specific task of the workers is to deal with the different invocation protocols and formats in which the data can be coded. the latter is provided by the data module which is able to handle a set of plug-ins  aimed at translating the data from their native format to the generic one expected by the workers.

in figure  <dig>  all elements described in this section are shown to give an overview of the mapi architecture.

RESULTS
for more in-depth exploration of mapi's capabilities, we will walk you through the typical developer steps when building integration software. detailed information on this exercise is available in the supplementary material  and comprehensive material for training is available on the mapi web page.

repository homogenization
the first integration requirement is to resolve heterogeneity in the web services definition. this is achieved through access, which recovers all necessary functionality from the specific repositories. thanks to this, in mapi, the type of system, the specific functionality provided or the way to access to the information are not important. the developer only has to learn how to use a single interface to access all these systems.

typically, writing an access will demand the mapping of the original data model into the one used by mapi. this task may require different times, depending on the differences between the modules, for example it took one person one week to complete the mapping of wsdl services . it is noteworthy to observe that once the code for accessing information in wsdl descriptions has been developed, any ws described using wsdl will be accessible via mapi. for example, we are able to access web-services from european bioinformatics institute  and the web api for biology  using the same accesses.

the access implementation uses the api of the resource in question. for example, if the api of the biomoby registry  changes, it is obviously necessary to modify also the access code. however, in general, software api specifications are stable and changes are minor. so far, we have not needed to do major rewrites of the access code on account of changes in repository apis.

the developers can choose the access to use by using the function toolmodule tools = new toolmodule , where "x" is the path to the configuration file which defines the repository for use. at this point, the differences between repositories are hidden, and the developers can query the information in the same way, independently of the type of repository.

currently, mapi is able to integrate the following repositories:

• several biomoby repositories 

• the national institute for bioinformatics spain at http://www.inab.org/mowserv using an extended version of biomoby central system, with additional documentation and input/output examples.

• the acgt grid services developed in the framework of the acgt project at http://www.bitlab-es.com/acgtrepository

• wabi japanese web services  at http://xml.nig.ac.jp/index.html

• ebi wsdl services at http://www.ebi.ac.uk/tools/webservices

finding the right resource
browsing and searching for resources, such as services, are typical functionalities offered by clients. mapi provides multiple supports for querying the metadata to identify the right resource. in this way, it is possible to search, for example, by identifier , by name  or even create customized filters to fit the requirements of each client:

tool tool = moby_tools.gettool;//search by id

tool tool = moby_tools.searchtool;//search by name

filterlist<tool> tools = moby_tools.gettoollist();//custom filters

tools.addfilter {

   public boolean test {

      return element.getname().startswith;

   }

});

tools.clearfilters();//remove the filters

as can be seen in the code, the first lines show how to retrieve tools by 'id' or by 'name'  and also how to create a customized filter; in this case to return all the tools whose name begins with "analyze".

the power of these simple functions becomes evident when clients implement complex search algorithms based on them. for instance, magallanes; an application for the discovery of services and datatypes, uses the primitives provided by mapi to develop google-style 'did you mean?' methods.

another service that is increasingly in demand is the 'searching for compatible services' . to create a workflow it is necessary to find those tools which accept the output from another tool as input. mapi provides the searchtoolscompatiblewith function, that returns a list of tools, compatible directly  or indirectly  with a given datatype. for instance, magallanes creates workflows automatically, based on the initial and the final datatypes of the workflow. this feature is also used by jorca to provide the user with a list of the tools that can accept a specific file as input data.

invoking tools
heterogeneity is not only a problem of repositories, but it is also present in the service's invocation procedures. the execution module -that contains the mechanisms to invoke the tools defined in the tools module- includes the addtask function to create a new task associated to the appropriate worker .

using a simple function such as task t <dig> = em.addtask, input, output) the developer does not have to worry about the type of service or the underlying protocol. clients such jorca exploit this functionality.

handling data
however the homogeneous invocation of tools is not enough to ensure tool integration, since services may require data in different formats. mapi handles user data with a common model, regardless of the format in which they come.

the data module -in charge of the uniform handling of datatypes- provides the functions to change the format of data. since these functions are coded in the formatters, the ability to extend the scope of data translation is always available. functions such as 'data data = datamodule.newdata' are able to understand the data stored in a file in a given format and transform the same data into a new target format using data.getrawcontent. using this strategy, the format of data can be modified as it is needed by the service to be invoked.

in the cases in which the source format is unknown, mapi has also "heuristics" components which include different algorithms for managing in automatic way the format of the information  <cit> .

data integration in bioinformatics remains a problem, partly because many services declare inputs and outputs as plain strings. in our opinion, the use of structured information should be promoted, to simplify service integration.

cache
in the management of remote services, care must be taken not only with the availability of the repositories, but also in the response time of the web. a cache is a local copy of metadata that prevents against repositories' availability and seriously reduces starting time and speeds up access.

the configuration file is used to specify if a cache is used or not. this means that the same source code can be used in either case.

discussion
in this section, the scope and efficiency of mapi is compared against different solutions for the integration of internet resources in the field of bioinformatics.

biobroker  <cit>  makes use of mediators to build up a uniform view of data from different sources. this program can be extended to use new data sources and programs, but its rigid architecture and built-in definitions do not allow the addition of new types of resource handlers.

the mygrid  <cit>  project provides a technology stack for service oriented architectures with support for essential tasks such as workflow editing and enactment , workflow sharing  and service registration . taverna is able to create workflows using services from multiples sources; but the user has to provide an additional code to convert the structure and format of the data returned from a service into the format required by the next service in the workflow. this is similar to formatters, but in mapi, they are used automatically without user intervention.

biomoby offers a solution to the integration of services, based on the use of a taxonomy of data types, shared by all the services registered on the same server, which supports the identification of compatible services and their interoperability. these solutions provide a mechanism for the rapid discovery of services, but do not support other kinds of resources or extend to other kinds of services.

on the other hand, wsmx  <cit>  allows the transparent execution of different types of services and homogeneous access to data. however, wsmx is limited to web-based technology and is consequently unable to combine services implemented with other technologies such as grid services, local scripts, etc. unless a wsdl definition has been provided.

finally we must talk about cactus  <cit> . this framework is quite similar to mapi, offering functional modularity, configuration options and access to multiples data sources. however, each change in the configuration implies a re-compilation of the program and, with it, the need to distribute the application source code, which may not be possible in all situations. furthermore, unlike mapi, the framework does not show a strong architecture that allows identifying the components and the dependencies among them.

as we can see, these solutions offer so many or so few features focusing on solving very specific problems. they do not provide the flexibility and extension features than the modular architecture of mapi. also, mapi does not force the use of any format or particular data source, and the developer can adapt the behaviour of each independent module to his particular requirements and combine them in multiple ways to obtain the desired functionality.

in any case, mapi does not solve all of the problems deriving from heterogeneity. one important limitation is due to the existence of unilateral formats. some formats lose information during the transformation process. this means that the original format cannot be recovered, at least in its entirety. take for example the case in which a sequence is extracted from a genbank  <cit>  file. we can obtain the sequence, but cannot retrieve the entire file because the rest of the information is lost. for further details, please see the additional material where we have included a detailed example to illustrate the concept of data mapping in mapi.

another example is the case of the use of different datatypes structures in several repositories. all the compatibility functions are based on the existence of two resources which share the same datatype; but identifying two different datatypes as the same one is no easy task. features such as the name or the identifier can vary through multiples sources and have different meanings. for example, a sequence is not the same in biology  as in multimedia . in the same way, neither is the structure of a datatype an identifying element. each user could define every entity with a different datatype; this does not have to agree with that of another user. moreover, two datatypes with an identical structure could represent two completely different entities.

a practical example which illustrates the need for structured information and semantic descriptions of services is the set of services from wabi. those services declare strings as inputs and output and only provide human-readable descriptions. after a careful analysis, we mapped, by hand, the inputs/outputs of those services to the structured data model used in mapi. in our opinion, if the service provider maps/links the service inputs/outputs with semantic information, service integration is greatly simplified.

in all of these situations, human intervention is needed in order to identify the similarities. mapi provides mechanisms  to integrate two repositories once the differences have been determined. these mechanisms allow changing the structure of a datatype with the purpose of fitting user requirements. for example, hiding some attributes which can be calculated from others, or more importantly, changing the structure of one datatype to fit that of another.

the current version of mapi is more focused on reducing the problems with syntactic heterogeneity. the semantic heterogeneity is addressed manually in the implementation of access and formatters, by for example mapping the information to the appropriate fields in the data model used in mapi or by loading the information to the correct structure.

the support for semantics is limited in mapi at this moment but we plan to develop new modules to express semantic relationships between the metadata used in mapi.

despite these limitations, mapi provides a flexible and adaptable solution to most problems arising from information heterogeneity.

CONCLUSIONS
considering the diversity and multitude of web services for bioinformatics, it is becoming increasingly complicated to develop efficient and generic client software to take advantage of these important web resources. the reason is that these web services are made available using different web-service styles and consume/produce different data formats. moreover, metadata for discovering and exploiting web services are registered in different types of metadata repositories. in this scenario, the need for a unifying software framework for client development is clear.

this paper reports a software framework, called mapi, which aims specifically at simplifying client software development in bioinformatics. the framework provides functionality to connect to various metadata repositories, invoke web tools and translate between various data formats.

client development is simplified since mapi provides a unified view of different web resources . by dividing functionality in modules, it is also possible to combine these modules to only include the functionality required by the client in question.

each module is divided into several layers: the top layer, which is the layer which software developers use, and one or more access layers, which contain the specific instructions for accessing the web-resource . in some cases, the access layer uses other components. for example, communication with web services is accomplished through software components called workers and data format translation is done using formatters.

mapi thereby provides a stable base for developing client software  which, at the same time, can be extended to deal with new service protocols or metadata repositories . the framework is complete in the sense that developers obtain abstractions of all crucial client-related tasks when using bioinformatics services. although other, specialized solutions are available which, in some senses, provide more advanced functionality than the current implementation of mapi does, it is important to note that the top layer is abstract, meaning that the underlying software code, which performs the actual work  can, in most cases, be modified or even completely replaced with improved versions without affecting top level client software.

the support for several existing web service architectures is included by default within the framework. this allows client software to discover resources and invoke web-services from several important architectures in bioinformatics, including biomoby, simple soap-services described using wsdl and grid-services . a clear indication of the usefulness of mapi is that it has already been used as a basis for developing several novel clients in bioinformatics; see for example jorca, magallanes and the acgt grid architecture.

in summary, we believe that this software framework is an important step towards the integrated exploitation of bioinformatics web services.

availability and requirements
mapi, including the complete installation procedures, user manuals and tutorials is freely available at http://chirimoyo.ac.uma.es/mapi/ and http://www.bitlab-es.com/mapi/

the code requires java version  <dig> or above to compile.

authors' contributions
sr has designed the complete mapi framework and has implemented the execution module and the workers. jk has advised on mapi design and coordinated acgt implementation. ot has coordinated and organized the entire development process. he has support the development by providing ideas and making development decisions. all authors have read, participated in and approved the final manuscript.

supplementary material
additional file 1
supplementary material. the file contains extended explanation of the features that mapi provides including schemas about how the information is modelled, code examples and a section answering the most frequently asked questions.

click here for file

 acknowledgements
this work has been partially supported by the national institute of bioinformatics , spain  and the riraaf network . we would also like to thank our colleagues for their contributions and comments which have helped to improve mapi, in particular javier rios, maximiliano garcia and victoria martin requena.
