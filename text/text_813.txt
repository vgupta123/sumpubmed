BACKGROUND
hidden markov models  have been extensively used for modelling genes. ab initio hmm gene finders for eukaryotes include genscan  <cit> , augustus  <cit> , hmmgene  <cit> , genemark.hmm-e  <cit> , genie  <cit> , tigrscan and glimmerhmm  <cit> , unveil and exonomy  <cit> , snap  <cit> , and others. examples of non-hmm approaches are geneid  <cit> , glimmerm  <cit> , and mzef  <cit> . geneld applies markov models to score sequence content and signal in a hierarchical manner. glimmerm uses decision trees and interpolated markov models. mzef uses quadratic discriminant analysis to predict internal exons. these predictors all use a single genomic sequence. examples of approaches using two genomic sequences are slam  <cit> , sgp- <dig>  <cit> , twinscan  <cit> , and doublescan  <cit> . these use homology information in alignments that improves prediction accuracy relative to single genome predictors. ehmm  <cit> , phylo-hmm  <cit> , and n-scan  <cit>  use more than two genomic sequences, taking advantage of the fact that the molecular evolution of a sequence position is governed by its function. gene finders using multiple genomes have a higher accuracy but training sets with species of an appropriate evolutionary distance may be hard to come by. single-genome approaches have the advantage that they do not require complex training material and can predict non-conserved genes.

ab initio gene finders are trained and customised for one or a few organisms and may perform well on other organisms that share characteristics such as sequence signals, length distributions of gene elements, and overall sequence composition. these gene characteristics, however, vary substantially between species. establishing to what extent this is the case requires extensive knowledge of gene structure that is not available in the early stages of genome exploration.

the creation of a gene finder for a novel genome includes two laborious and non-trivial tasks. first a training set of reliable gene structures must be generated. secondly, a gene model must be built, customised, and trained. tigrscan, snap, glimmerhmm, glimmerm, unveil, and exonomy include tools to ease the task of re-training model parameters. for tigrscan this involves some expertise because individual parts of the model must be trained separately. snap, glimmerhmm, glimmerm, unveil, and exonomy have automated much of this task, but creating a training set is still left to the user. in addition, none of the existing methods allow for easy adjustment of the gene model. this is necessary in cases where the available training material only supports a less detailed model.

the work involved in obtaining a training set as well as the limited modelling expertise of most end users are in our view the main obstacles to producing gene predictors for novel genomes. as a result, genome projects often do not have species-specialised gene finders. apart from a novel approach to length modeling of gene features, the approach presented here is unique in the respect that it is the only gene prediction package that fully integrates the task of creating a training set, as well as adjusting the detail of the model to the quality of the training material. this allows a non-expert to produce a gene finder for a novel genome directly from a set of mrnas from the same organism. our implementation, agene, thus fully automates the task of building and training a species-specialised gene finder from mrna evidence. for the majority of genomes the resulting gene finders do as well or better than manually tuned gene finders. automatic gene annotation has already been implemented for prokaryotic organisms. these methods include easygene  <cit> , glimmer  <cit> , and versions of genemark  <cit> .

methods
an hmm consists of a hidden layer of states that emit observable events. in gene finding, the states in the hidden markov chain correspond to intergenic regions and gene structure elements, e.g. coding regions and introns. each state emits nucleotides that constitute the dna sequence in corresponding regions. the emissions of bases may be conditional on the occurrence of neighbouring bases within the sequence. this enables the hmm to model higher order dependencies of base frequencies. a second order model will thus model the frequencies of base triplets in the sequence.

when applying an hmm to find genes, the task is to find the most likely annotation of the sequence given the model. this process is called decoding. estimation of the model parameters from known gene structures is referred to as training. here the parameters are optimised in an iterative procedure. in each iteration the sequences of the training set are decoded and all parameters are then assigned the maximum likelihood estimates given the sequences. this process is stopped when the change in overall likelihood of the model becomes sufficiently small. the theoretical aspects of hmms are well covered elsewhere  <cit> .

gene model
agene generates a suitable gene model by automatically customising hmm state structure to fit the information supplied by the training set. firstly, a gene model is assembled by dynamically combining an array of different sub-models. the automation of this task means that only gene elements generally featured by eukaryotes are considered. the model shown in figure  <dig> is an outline of the most detailed gene model generated by agene. each block shown represents a sub-model of a gene feature. the sub-models for initial, internal, last, and single coding exons are obligatory whereas the sub-models for utr elements are not. in many cases the available training set does not support all feature sub-models. utrs are often not reliably annotated and in these cases the gene model is dynamically adjusted so that utr exons and utr introns are modelled as part of the intergenic region. in cases where only the coding regions are annotated the utr-parts of first and last exons are treated this way as well.

secondly, sub-models of variable length gene features include a length distribution of the modelled gene feature. this length distribution is implemented as state structure customised for each feature . in some cases one or more of the obligatory sub-models are not sufficiently represented in the training set to fit separate length distributions. to remedy this situation agene fits a shared length distribution for one or more types of exons by pooling length statistics. a shared distribution for internal and single exons are fitted if either of these are insufficient in number. this will happen in cases where single exon genes are rare or when the majority of genes have at most two exons. if all types of exons are insufficient in number, as when the training set is small, a shared distribution is fitted for all types of exons. in cases where only a small fraction of genes have more than one exon the number of introns may be insufficient to fit a detailed distribution. in this case agene uses a less detailed length distribution with only four phases . in order to be able to detect overlapping genes on the opposite strand, genes are modelled one strand at a time.

content modelling
the coding regions are modelled as inhomogeneous markov models with a three-periodicity and fourth order emissions to capture information in codon statistics of the three reading frames. the intergenic model and the intron models share fourth order emission probabilities. not doing this will make the algorithm tend to predict genes around regions in intergenic sequence with a sequence composition similar to that of introns. this is not a severe compromise assuming that the amount of gene related information in deep intron sequence is small. eight intron models that share both transition and emission parameters are synchronously trained. two are used to model introns in 5' and 3' utrs, three are used to keep track of reading frames across introns. as in snap  <cit>  it is ensured that splice sites in coding regions are not predicted in such a way that splicing generates stop codons. this is achieved by special branching in the splice sites and an additional three intron models not shown in figure  <dig> 

exons in utrs are modelled by two sub-models in each utr. the non-coding part of coding exons and fully non-coding exons are modelled separately. all utr exon models are homogeneous hmms with shared third order emissions. n-scan and doublescan also predict utrs but use homology information and thus require cross-species alignments for training and decoding. agene uses the same intron length distribution in utrs as in coding regions, whereas n-scan uses separate distributions. in addition n-scan has separate models for first, internal, last, and single exons in utrs. we have chosen the simpler utr model because the amount of training material is often limited.

signal modelling
splice sites are modelled with the hmm equivalent of first order weight array matrices  - <dig> to + <dig> nucleotides from the donor site and - <dig> to + <dig> nucleotides from the acceptor site. this includes the cytosine and thymine rich region  upsteam of the acceptor splice site. for maximal flexibility, no assumptions about splice site consensus are used to prime the weight matrices. the splice sites in utrs seem to be very similar to the ones in the coding region  <cit> . for this reason the intron parts of these models share parameters with the splice site models in coding regions. the exon parts of the splice sites are modelled separately. transcription start, cds start, and cds end are modelled as first order weight array matrices of length  <dig>   <dig>  and  <dig> respectively. the six bases that constitute the poly-a signal are modelled by a wam with order increasing from  <dig> to  <dig>  for a few species including a branch point would strengthen the model. to capture this information, however, a wam must be primed with a species-specific consensus motif, a step that is not easily automated.

length modelling
length modelling of gene structure blocks contributes significantly to gene finder performance. hmm gene finders use geometric or explicit duration  modelling  <cit>  or a combination of both. geometric modelling is computationally cheap but ignores modality in length distributions of gene structure blocks. ed modelling can capture arbitrary length distributions but is computationally expensive. as opposed to geometric modelling where the computation time is proportional to the sequence length l, ), the computation time of ed modelling is at least proportional to the square of the sequence length ). for this reason it is practically infeasible to model long sequences unless the length distributions can be bounded somehow. one solution is to truncate the length distribution not allowing lengths above some reasonable cutoff. genscan uses ed modelling for coding exons which are naturally bounded by the stop codons in the reading frame. even with a truncated distribution it is not practically possible to use ed modelling for introns. many species, however, have a modal distribution of intron lengths, with introns clustering around a certain typical length. augustus uses ed modelling for a first fixed part of the intron and geometric modelling for the rest. this allows for modality in the distribution of relatively short introns.

in contrast to existing gene finders agene models the full length distribution for all gene structure elements, including introns. the approach we take is to implement this generalised hmm  functionality within the standard hmm framework. this is achieved by fitting an hmm state structure to the length distribution of each gene structure element. for this purpose we take advantage of newly developed theory for acyclic discrete phase type  distributions  <cit> . an adph distribution describes the probability of moving through a directed acyclic graph with a number of phases  in a specified number of steps. for a special subset of sparse graphs there is a one to one correspondence between graph and adph distribution. an example of such a graph and its distribution is shown in figure  <dig>  these graphs conform to the following constraints: phases are sequentially connected and only the first phase has edges to all other phases. all phases except the last absorbing phase has a loop edge to itself. if the probability associated with the loop edge of phase i is denoted qi then the relation q <dig> ≥ ... ≥ qi ≥ ... ≥ qn must apply for all n phases. for each variable-sized gene element an adph distribution with  <dig> phases is fitted to the length distribution of the element. the graph underlying the fitted adph distribution is then used as hmm state structure for the gene element. the transition probabilities associated with the  <dig> states  are fixed and not part of the subsequent training. the fitting is done using phfit  <cit> . a set of example fittings for d. melanogaster genes are shown in figure  <dig>  

ed modelling is implemented as drawing from a parametric fitting to a distribution. this means that no matter how many or few parameters the function has, the complexity of the ghmm will be o because all possible sequence lengths must be considered for each sequence position. when the parametric function is implemented as an adph distribution directly in the hmm structure the complexity is reflected by the number of parameters  of the fitted function. since the number of phases is a constant this allows for ghmm functionality with a linear computational complexity in sequence length ).

in theory, an adph distribution can accommodate any distribution given enough states. with l states it is equivalent to fully-fledged ed modelling ). in practice, however, it is not feasible to fit an adph with so many phases. adphs can give a good fit to a distribution if it ultimately has an exponentially decaying tail and if the modalities in the distribution is located in the first part of the distribution. the non-geometric features modelled, however, are not confined to a fixed interval as in an augustus type approach. these characteristics are well in line with the nature of sequence length distributions and we have been able to fit all sequence length distributions encountered.

in some training sets there may not be enough examples to fit length distributions for both single, first internal, and last coding exons. there may be too few examples of single coding exons in complex organisms and there may be too few first and last coding exons in simple organisms. in the first case we pool single and internal coding exons in the fitting. in the second case all coding exons are pooled. in cases with few intron examples we use only four phases to model the distribution to avoid over-fitting.

generation of training sets
a training set of reliable gene structures is crucial for a machine learning approach to gene finding. it is often unclear to what extent the gene structure annotation submitted to the various databases is based on prediction, inference, or experimental validation. in addition, the degree of curation and confirmation is not always obvious. for these reasons reliable training sets are hard to come by for most organisms. to overcome some of these issues, we generate our own set of gene structure annotations by mapping experimentally obtained mrnas to the genome. for this study we have used refseq mrna entries with curation label "provisional" or better  <cit> . the mrnas are mapped to the genome using blat  <cit> . blat is fast and accurate, and makes an effort to pick, among large equivalently scoring gaps, the one conforming to the gt-ag splice-site consensus. in cases where only one possible gap allows alignment of all surrounding mrna bases the gt-ag consensus is not required. for each mrna only the best match is considered and this is discarded unless it accounts for 98% of the mrna sequence allowing for 1% mismatches and  <dig> % bases inserted in the mrna.

donor and acceptor splice site pairs across introns are analysed to make sure that each pair constitute the only possible set that accounts for the mrna sequence. this will not be the case if the donor and acceptor site can be shifted in parallel to another g -ag position producing the same coding sequence. these unambiguous splice sites are found using a tailored smith-waterman algorithm similar to est_genome  <cit>  but allowing gc-ag splice sites as well. this flexibility is relevant in at least c. elegans  <cit>  and h. sapiens  <cit> . coding start and end are obtained from cds annotation of the refseq mrnas. it is checked that start and stop codons conform to the atg and  consensus and that each annotated cds in both the mrna and the gene structure are open reading frames. finally, the resulting set of gene structures is similarity reduced using the hobohm  <dig> algorithm  <cit> . this reduction is based on wu-blast  <cit>  dna level homologies with an e-value of at most le- <dig>  to contain sufficient information for training, the homology reduced set must contain at least  <dig> gene structures, and preferably  <dig> or more .

training and decoding
the final model is trained as a class hidden markov model  <cit> . this allows training of the entire model in one single step by specifying the sequence parts each state is allowed to train on. this has the advantage that transitions between sub-models and non-additive effects of individual sub-models is also trained. 

for many new genomes, not enough full-length mrnas are available to generate a utr annotated training set of sufficient size. in these cases the training set is supplemented with gene structures without utr annotation. this presents a problem in training because unspecific training on un-annotated utr sequence pollutes the signal contributed by annotated utrs. to solve this problem two parallel utr sub-models are introduced . these parallel sub-models mirror the true utr models and allows the un-annotated utrs to be parsed without contributing to the training of the actual utr sub-models. this way the un-annotated utr sequence does not interfere with training of utrs. transitions from the mirror models to the actual models allow each utr to contribute to the extent it is annotated. 

training is done using the standard baum-welch algorithm. for decoding we use an n-best algorithm  <cit> . this finds the most probable prediction summed over all paths yielding the same prediction. this is crucial to our length modelling approach, since the phase type distributions arise as a sum of probabilities of paths returning the same length.

some genomes such as h. sapiens and m. musculus are so heterogeneous in gc content that parallel models must be trained on subsets of the training set with different gc content. this procedure is also automated in agene. the gene model is initially pre-trained on the entire training set. the training set is then split into subsets according to gc content and the pre-trained model is trained again on each subset. before decoding it is established which gc subset the sequence belongs to and the corresponding model is used for prediction.

RESULTS
to assess the performance of agene we have tested it on a diverse set of eukaryotes. for a subset of these species-specific ab initio gene finders exist. a thorough evaluation of the existing gene finders is not within the scope of this paper. we have chosen augustus, genscan and geneid and tested these on the species they have been customised for. genscan, however, was tested on all vertebrates using the human/vertebrate version. the performance of the most accurate predictor for each species is reported together with the performance of agene in table  <dig>  the h. sapiens version is trained and decoded on the same gc content subsets as genscan . for the m. musculus version the subsets 0% ≤ 42% ≤ 46% ≤ 51% ≤ 100% are used. genscan was run locally with default settings. augustus and geneld where run on their respective web servers with "forward strand only" settings. table  <dig> also reflects how gene models and use of training material differ for the listed organisms. each version of agene was evaluated using six-fold cross validation. to make the evaluation reflect to what extent agene offers an alternative to non-experts we have not attempted to re-train existing gene finders to the relevant species.

the set of species listed in table  <dig> represents a diverse selection of gene structures. these vary with respect sequence signals, overall sequence composition, and length of gene elements. the mean gc content of the genes in our training sets ranges from 36% for c. glabrata to 53% for u. maydis. to illustrate the variation of sequence signals, sequence logos  <cit>  for donor and acceptor splice sites are shown in figure  <dig>  it is evident that species-specific training of a flexible model is required to accommodate this level of diversity. to further emphasise the importance of species-specificity we have tested the c. elegans version of agene on a few of the other test species. the differences in performance between the c. elegans version and the versions created for each species are shown in table  <dig> 

the sizes of the training sets used range from  <dig> for d. rerio and  <dig> for u. maydis to  <dig> for n. crassa and  <dig> for a. nidulans. the training sets are available as additional files . to investigate how training set size influences performance the u. maydis version of agene was generated using different sized training sets. performance as a function of training set size is shown in figure  <dig>  a size of at least  <dig> gene structures is required to accommodate the large number of parameters in the model. the performance benefits strongly from larger training sets up to a size of about  <dig> gene structures. larger training sets only improve performance slightly. these relationships may vary depending on the heterogeneity of gene structures of the species in question. agene is accessible through our web interface  <cit> .

discussion
for the majority of test species the performance of agene is comparable or slightly better than the alternative gene finders we have tested. we have aimed at developing a method as flexible as possible to accommodate a large variety of genome characteristics and to work with typical sized training sets. this choice, however, does not seem to allow for an effective modelling of gene structures in species with very long introns like h. sapiens and m. musculus. our specificity for these species is comparable to that of the remaining test species but the sensitivity is lower. though important, this category of species does not represent the type of species where automated gene finder generation is most in demand. species such as h. sapiens and m. musculus are subject to so much attention that several high quality gene finders already exist. our focus is on the large number of eukaryotes that do not receive the same attention. the performance of our gene finders are much higher for the genomes they are customised to than for other genomes. these results emphasise the value of a species-specific approach.

the fact that ab initio gene prediction methods require a training set limits their use in cases where no mrna has been sequenced yet. the snap gene finder  <cit>  addresses this problem applying a bootstrapping approach that uses a gene finder for a foreign species to create a first prediction. this is then used as virtual training set for the final gene finder. in order to reliably choose a suitable foreign gene finder for bootstrapping extensive information on genome and gene structures is required. this amount of information is often not available for newly sequenced genomes. genemark.hmm-es  <cit>  uses an iterative self-training procedure where the predictions from a previous round serve as training material for the next. short of species-specific training data these are valid approaches, but bootstrapping methods suffer from the drawback that it is difficult if not impossible to establish what confidence to put in predictions when a reliable and representative test set for the target species is not available.

it has been reported that 40% of h. sapiens genes have at least one completely non-coding first exon  <cit> . among the other species used in this study utr exons are common in both a. thaliana, d. malanogaster, and m. musculus. for this reason, agene returns utr predictions as an integral part of the gene predictions. this is only possible, however, if the training set used to generate the gene finder contains sufficient utr annotation. the modelling of the utr component of the first and last coding exons improves predictions slightly by helping to delineate the start and end of the coding region. we expected that including utr exons in the model would improve predictions by ensuring that the model does not wrongly predict utr exons as coding exons. we have tested to what extent this is the case  and found the effect on performance is not significant.

the length modelling approach taken in this paper has proved to be an effective way to implement the powers of ghmms. by integrating length modelling into the hmm state structure computational complexity is linear in the sequence length. this allows for full length modelling of all gene structure elements, including introns.

a problem in evaluating gene predictions stems from the fact that gene finders only predict one full transcript at a time whereas the majority of genes have multiple transcripts. this may account for many of the inconsistencies in predictions. the n-best algorithm, used by agene, is able to return a number of sub-optimally scoring paths together with the optimal one. it is likely that alternative transcripts are among these sub-optimal predictions. for genes with many alternative exon borders, however, the number of combinations of these is so large that only a subset of these are likely to be be real transcripts. in considering such suboptimal paths a post-processing step is required where the biological sensibility is evaluated.

CONCLUSIONS
a procedure to automatically generate species-specific gene finders for novel genomes is presented. this includes generation of a training set from a set of mrnas as well as dynamic building and training of an hmm that fits the organism gene structure and the amount annotation available in the training set. acyclic discrete phase type distributions implemented as hmm state structure are well suited to model sequence length distributions and are very cost effective in terms of complexity. the automatically customised gene finders perform as well or better than most existing manually customised gene finders.

supplementary material
additional file 1
the sequence part of the training set for a. gambiae. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 2
the annotation part of the training set for a. gambiae. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 3
the sequence part of the training set for a. nidulans. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 4
the annotation part of the training set for a. nidulans. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 5
the sequence part of the training set for a. thaliana. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 6
the annotation part of the training set for a. thaliana. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 7
the sequence part of the training set for c. elegans. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 8
the annotation part of the training set for c. elegans. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 9
the sequence part of the training set for c. glabrata. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 10
the annotation part of the training set for c. glabrata. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 11
the sequence part of the training set for d. hansenii. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 12
the annotation part of the training set for d. hansenii. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 13
the sequence part of the training set for d. melanogaster. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 14
the annotation part of the training set for d. melanogaster. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 15
the sequence part of the training set for d. rerio. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 16
the annotation part of the training set for d. rerio. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 17
the annotation part of the training set for h. sapiens. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 18
the sequence part  of the training set for h. sapiens. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 19
the sequence part  of the training set for h. sapiens. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 20
the annotation part  of the training set for h. sapiens. the file is in fasta format and packed using bz <dig> 

click here for file

 additional file 21
the sequence part of the training set for k. lactis. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 22
the annotation part of the training set for k. lactis. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 23
the sequence part of the training set for m. musculus. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 24
the annotation part of the training set for m. musculus. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 25
the sequence part of the training set for n. crassa. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 26
the annotation part of the training set for n. crassa. the file is in gff format and packed using bzip <dig> 

click here for file

 additional file 27
the sequence part of the training set for u. maydis. the file is in fasta format and packed using bzip <dig> 

click here for file

 additional file 28
the annotation part of the training set for u. maydis. the file is in gff format and packed using bzip <dig> 

click here for file

 figures and tables
c. elegans23
d. melanogaster11
a. thaliana11
n. crassa14
a. nidulans24
h. sapiens11
m. musculus12
d. rerio23
a. gambiae13
d. hansenii24
k. lactis34
c. glabrata34
u. maydis14
