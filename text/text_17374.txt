BACKGROUND
the availability of cross-domain data has increased dramatically over the last decade, driven by forces including systems biology, imaging for phenomics, and high-throughput technologies such as next-generation sequencing . as a consequence, the life sciences have become one of the most data-intensive sciences and a major player in the “big data” and “e-science” age  <cit> . roos remarked over  <dig> years ago that “we are swimming in a rapidly rising sea of data” and there is hardly any way to “keep from drowning”  <cit> . considering the thousands of life-science databases that have been created  <cit> , that pessimistic view has not become reality, although there are many areas  where problems in handling the constantly increasing amounts of data exist. in some areas, international consortia have taken control of data maintenance and management  <cit> .

scientists can choose from dozens of information retrieval systems  <cit>  to search for data resources. metadata standards  <cit>  and data-exchange formats have been developed  <cit> , and data warehouse infrastructures have been implemented  <cit> . for example, the datacite consortium  <cit>  was founded to support data citation, providing a means to increase the acceptance of research data as legitimate contributions to scholarly records. those promising technologies only handle the tip of the “data iceberg”, however  <cit> . the gap between the rate of scholarly publication and the availability of long-term research data preservation remains an open issue  <cit> .

a previous publication underpinned this motivation by summarizing the basic requirements for primary data management  <cit> . in the absence of such management, a scientific staff usually collects a lot of data and then reduces them to a number of theories and conclusions supported by aggregated graphics, tables, or selected materials. publications contain links that refer to externally managed, supplemental resources where data may be found. anderson et al.  <cit>  showed, however, that the older an article is, the lower is the chance that the links are still accessible.

relationship between data publication and long-term data preservation
the data life cycle, from experiments to scientific publications, generally follows the schema in figure  <dig>  several billion dollars have been invested in the bottom level, the collection of “primary data”. the definition of primary data is not clearly fixed. for some, it is only the raw data from a device, also called “level 0” data, and for others, it also includes preprocessed raw data without additional analytic processing steps. still others do not differentiate among the degrees of processing but consider primary data to be all data that is used for scientific publications  <cit> . here, we consider primary data to include all of the aforementioned categories. it is important to consider primary data as an investment in order to guarantee its long-term preservation and prevent its being lost, and to ensure that it can be processed in future works including, but not limited to, ad-hoc data-analysis workflows.

condensed and enriched with metadata, primary data is more valuable than data that is “re-extracted” from articles  <cit> . this argument is the basis for efforts like the open archival information system , which aims to preserve primary data and provide associated information to designated communities  <cit> . such comprehensive models are very expensive, however, for short-term and mid-term research projects. one promising alternative is data publication as a separate research result in a “data paper”  <cit> . in this context, it becomes essential to change the handling and acceptance of primary data within the scientific community. nelson et al.  <cit>  argued that data publications and data publishers should be honored with a high degree of attention and status.

in general, most scientists are willing to share their primary data, but few actually provide their data to others  <cit> . data access is often restricted to project-associated users, or else the original data sets frequently remain in the hands of the scientist who created them. another issue is the deficiency of metadata annotation. scientists tend to use personal metadata in the form of remarks or smart file naming if they are not forced to use a standard metadata format by journal or project policies. technical aspects, such as proper backup and disaster-recovery systems, also affect the prevention of data loss. besides preserving data files, it is essential to preserve file-access procedures. here, data format migration and data format emulation are widely used methods.

data sharing
there are already many public primary data repositories available free of charge, but they are very domain specific   <cit>  and the gene expression omnibus   <cit>  for raw ngs-sequencing data and gene expression data, respectively). the common concept is user-controlled data upload and maintenance, but the shortcomings are the dedicated data domains and content. the acceptance rate is quite high, particularly if a journal forces authors to upload the primary data to a repository to get a paper published. the major drawback of the central repositories is clearly the limited number of supported data domains.

besides the dedicated repositories, free data-sharing platforms and cloud storage  are becoming very popular as economical alternatives to project level data infrastructure. these platforms often have limited security management and do not often support metadata management. more comprehensive data-sharing and publication services are available through data-file archives  <cit> . examples of well-accepted scientific data repositories are dryad  <cit>  and figshare.com  <cit> , which not only provide professional support for file sharing, maintenance, and publication by also support persistent identifiers . they are, however, centrally hosted by companies that require data-publishing charges, and they do not support tool binding or use as an in-house repository on top of one’s own storage backend.

more flexible and enterprise-sized data repositories that provide long-term, durable access to digital assets are dspace  <cit>  and fedora  <cit> . both include a variety of preservation and management functionalities as well as support workflows for uploading, approval, and web publication. fedora is a digital asset-management architecture. its flexibility carries with it the expectation that users will invest more up-front effort in creating specialized object models and applications. dspace is aimed to be deployed as an “out-of-the-box” institutional repository  and supports little to no customization.

there are also some mid-sized and lightweight data repositories like tranche  <cit>  and ckan  <cit> . tranche is a very flexible repository api for java, and ckan is a web-based management system for any kind of data. both can be integrated into existing infrastructures, but they provide no persistent identifiers.

another alternative is publicly hosted version-tracking systems  <cit> . for an in-house service, there are a number of commercial and open-source systems available . those are excellent for tracking file histories and preventing accidental deletions, but their support for information retrieval and their facilities for citable data publication are limited. in addition, they are not suited to storing and sharing large binary files, because it is much more difficult to compress and calculate the differences between binary files compared with simple text files, which can strongly influence performance and increase the required storage capacity.

much more popular and easy to handle, but also very risky, are private file storage, exchange via email attachments, and uploading directly to partners’ in-house file servers. here, the major problems are unregulated data distribution with the danger of inconsistencies, limited support for persistent identifiers, and potential unauthorized access, data loss, and mess caused by missing metadata. more reliable solutions for data storage and exchange are laboratory information systems   <cit>  like labkey  <cit>  and nautilus lims  <cit> . in general, lims support the case-specific design of interlab and intralab collaborations. their tight integration with lab processes make them as useful as electronic lab books, but their focus on managing lab processes and their implementation as a closed software system make them difficult to use as a stand-alone, public, citable storage infrastructure.

data annotation and citation
the metadata annotation of research data is an important prerequisite for the interpretation and reuse of data sets. this is reflected in the manifold metadata schemata that are used in the life sciences. in general, we differentiate between technical and semantic metadata. the latter type has a tight relationship to the particular research domain and comprises its own universe of several hundred metadata schemata. for instance, a systems-biology review summarized  <dig> standards for metadata and data-exchange formats  <cit> . technical metadata covers aspects of the management and processing of digital research resources. widely used schema for technical metadata are the dublin core metadata element set   <cit>  and the closely related datacite metadata schema  <cit> . the dcmes was developed by scientists and librarians to homogeneously describe digital objects using  <dig> elements.

because of the missing metadata-aware file systems, the most popular method of metadata annotation is still the coding into file names and folder structures; and the application of information-retrieval and search-engine technologies is one of the most preferred methods to find relevant data  <cit> . desktop search tools like google desktop  <cit>  are therefore frequently installed on the scientists’ computers. furthermore, frameworks like apache solr  <cit>  allow embedding a full-text search into data repositories. such indices are increasingly important in information systems for life sciences, and they are often available in primary data repositories .

data publication
the motivation for publishing research data is not limited to the need to evaluate and appraise scientific results. data sharing in general is an essential resource for scientific research. research groups, straddling scientific cooperation and the public, depend crucially on data sharing and public data access. uris and proprietary database identifiers are frequently used to reference data or supplemental material in manuscripts. because uris  are short-lived in practice, they are not considered to be reliable references. the same is true for proprietary database identifiers . besides such archive-specific identifiers, long-term resolvable identifiers are used in the life sciences. examples are international standardized identifiers such as the life sciences identifier   <cit>  and the digital object identifier   <cit> . international initiatives like oai  <cit> , elixir  <cit> , and datacite  <cit>  were founded to develop sustainable research networks and infrastructures. their common aim is to coordinate the development of technologies in conjunction with standards and policies that incorporate the major aspects of data publication: 

 <dig>  controlled data formats

 <dig>  globally persistent identifiers

 <dig>  minimal commonly accepted metadata

minimal requirements for primary-data management
the aforementioned challenges in the long-term preservation of primary data and the need for a consistent data-publication process highlight the need for a universal software system for primary-data management and publication. the minimal requirements of such a system are summarized in six tasks:

version management
in order to track the history of data files and associated metadata, an infrastructure for long-term data preservation should support a version-control mechanism. in particular, this affects deletion policy. primary data is not allowed to be deleted.

metadata
to support future data access, readability, and use, annotation with technical metadata is necessary. furthermore, metadata is essential for information retrieval, data seeking, and filtering. the intension of technical metadata is to support the automatic processing not featuring semantic interpretation and data analysis.

information retrieval
because a large number of files is expected, data archives should feature an efficient search function over metadata. this should be supplemented by a text index that supports enhanced search functions and faceted queries.

data publication and citation
in general, primary data cannot be included directly in an article. therefore, authors add links. in order to make those links stable and resolvable in the long term, support for persistent identifiers that fulfill international standards is essential. this will ensure that digital objects are citable, even if the url moves or becomes obsolete.

data security
in order to consolidate primary-data management, data sharing, private archiving, and public access should be supported in one platform. this requires permission control, secure authentication, and data-transfer systems.

generality
a system for storing research data has to be generic in order to be universally usable. the system should be sustainable in the sense that it can be maintained and applied across project, infrastructure, and institutional borders. by having a user-friendly design and the capability to be easily integrated into existing workflows and tools, a standardized system should motivate users to publish primary data.

implementation
e!dal is an implementation of a lightweight software framework for publishing and sharing research data. e!dal stands for 
e
lectronic
d
ata
a
rchive
l
ibrary. it is a combined open framework and out-of-the-box system for storing, sharing, and publishing research data. the software combines classical file-system concepts with concepts from research-data publication. e!dal is delivered as an api, to be easily usable in existing data frontends, and as a standalone data-repository server. this enables tight integration into existing infrastructures and tools as well as standalone installation as a research-data repository.

design and concept
the e!dal core modules and data structure are shown in figure  <dig>  the object-oriented design makes it possible to keep the implementation scalable and easily maintainable. twelve java classes implement the core api. accordingly to the six previously described, minimal requirements for primary-data management, their implementation is described below.

version management
the central element of the data structure is the class primarydataentity, which is a generalization of the sub-classes directory and file. it provides methods comparable to those of a file system. to implement the data life cycle, all data and metadata updates are recorded as individual versions. when a file is deleted, a last version is created and tagged as “deleted”, representing the end of the version chain. it is not possible to create a new version for the deleted object or to undelete the last version, but all previous versions are still accessible.

metadata
an iso-accepted minimal set of mandatory technical metadata  was defined by the dublin core metadata standard  <cit> . e!dal implements this standard and the suitable data types for each element.

information retrieval
besides support for navigable access to the hierarchically organized data structure, a full text index over the metadata was applied to provide a keyword search, which features fuzzy queries like phonetic or partial string matching. selected metadata elements as well as the entire set of metadata can be searched.

data publication and citation
the publicreference component binds to services, which provide persistent identifiers. because the identifiers represent scientific publications, the assignments must be permitted by the responsible parties. therefore, e!dal provides a flexible approval workflow, illustrated in figure  <dig>  and allows the evaluation of data publication requests by a hierarchy of reviewer decisions. each request triggers a notification for the reviewers, who then exclusively or collaboratively decide to permit or reject it. this system is based on an asynchronous email notification system with reminder and default decisions for unresponsive reviewers.

data security
e!dal features a fine-grained access control to sensible api methodsa, which is monitored by the java authentication and authorization service   <cit> . the concept is that the executing code  is owned by a particular subject , which is assigned by an authentication process when a connection to e!dal is requested. the java-embedded jaas authentication module enables the transparent use of standard authentication services  as well as customized user management.

generality
e!dal supports stand-alone and client-server architectures. it can be integrated into java applications as an embedded local archive or as a central archiving system. with support for java remote method invocation   <cit> , several application-specific or even project-specific central repositories can be easily operated.

technology
the system architecture of the e!dal implementation is shown in figure  <dig>  the persistence of the data structure is implemented by the h <dig>  <cit>  relational database management system with hibernate  <cit>  as an object-relational mapper and ehcache  <cit>  as an offloading database cache. this storage-layer implementation holds all the technical metadata, permissions, version information, and publication metadata. apache lucene  <cit>  is applied as an implementation of the information-retrieval interface, integrated on top of the hibernate persistence layer by the hibernate search package  <cit> .

the data-byte stream is stored as a file in a mounted file system. in order reduce file-system load, data files are grouped into chunks, which are distributed into a self-tuning directory structure. another feature of the storage backend implementation is easy maintainability . thus, it is sufficient for the administrator to use file-system backup and maintenance tools. the registration and assignment of citable persistent identifiers to data entities  is implemented by a generic interface, which includes the data publication-service connectors. the flexible interface supports an extensible number of data citation services. currently, the reference implementation supports the generation of urls and dois. the latter are provided by the datacite consortium  <cit>  and handled by the e!dal-datacite connector. for a particular data object, the interface: 

 <dig>  migrates the e!dal metadata to the metadata format of datacite,

 <dig>  generates a landing page in the e!dal http module,

 <dig>  assigns the doi to the e!dal url, and

 <dig>  submits all information as xml to the datacite web service.before the doi-registration workflow is executed, the approval process checks whether the publication is allowed . in the implementation, three reviewers are configured by registering their email addresses as either a legal, scientific, or master reviewer with veto permissions. for each publication request, emails are sent with “accept” and “reject” links. after the doi or url assignment has been accepted or rejected, the user is informed by email.

jaas is used to implement the api-level permission-control system, enabling each session to run in a dedicated user context where each relevant security method is encapsulated into an authorization check. a list of user method-permission rules is persisted in the h <dig> database backend. as a default, the user who created an object is the object’s owner and gets all permissions. directory permissions are inherited by all newly created files. further user permissions can be granted by the object owner or by users who have the right to set permissions. permissions can be set for individual users and also for user groups or different users roles.

the user runtime context is set by calling the login method in a jaas-supported login module. three default modules are available: native windows and unix logins as well as the ldap kerberos authentication service. further customized login modules can be added. a template is provided in the java class sampleloginmodule. to minimize the effort required to check the permissions of dozens of api methods and to make the code robust, we applied aspect-oriented programming using the aspectj framework  <cit> . the permission code is defined once as a security aspect and weaved into the source code for every public api method.

RESULTS
e!dal offers a flexible and efficient lightweight framework that transparently incorporates features for research data management, such as storage, data sharing, and data citation, into existing tools and storage infrastructures. we released a multi-module system that can act as: 

• a direct-linked api for a local non-shared storage,

• a remote api to enable applications transparent access to distributed data,

• an out-of-the-box data repository server for hosting shareable data repository, and

• a remote file system with enhanced features for metadata and version control.

features
the java api
to feature java applications with e!dal, the apib needs to be imported into the java source. for an automatic import of the suitable dependencies, it is available as a maven  <cit>  artifactc and mirrored in the maven central repositories. for manual dependency management, fat jar archives are available for download.

the e!dal api is designed like the jdk file-system api with additional classes and methods for versioning, metadata annotation, information retrieval, and data publication. like an ordinary file system, the e!dal backend needs to be mounted and parameterized with: 

 <dig>  storage-backend implementation ,

 <dig>  the jaas-authenticated login context, and

 <dig>  parameters for the data-publication process  proxy).

standalone data-repository server
in order to support shared and collaborative access, e!dal has a server module, which provides an rmi service to handle native java clients, a webdav server to offer access as a network file system, and an http server to support access by any web browser. according to the client capabilities, the supported e!dal features range from browsing and downloading published data , to providing a metadata-aware and version-aware remote file system , to providing full-featured api access . this wide range of functionality has been implemented to support application scenarios and desktop users that need data access in a file browser. the implemented webdav interface  <cit>  allows users to mount a connection to e!dal repositories as a network drive. desktop tools, such as windows explorer, linux kde dolphin, or any other webdav-compatible browser, are supported.

webdav provides functionality for versioning and metadata, but its visualization and handling are commonly not implemented in file browsers. this is overcome by virtual folders and files. in doing so, an e!dal file is mapped as a virtual webdav folder, which includes the files of all versions. each version is linked to a virtual xml file, which makes it possible to inspect and edit metadata.

software quality
primary data is a major research asset, and any data-managing software must fulfill basic quality criteria. hence, software quality was a major aspect while developing e!dal.

development, scalability and code-quality control
besides platform independence, the major advantage to implementing e!dal in java is the availability of open-source standard frameworks, like authentication services , persistence frameworks , code-weaving tools , and build-management and dependency-management systems . furthermore, java is widely used in bioinformatics to develop graphical user interfaces, data management infrastructures, and web applications.

following lessons learned in the past decade of active software development in research projects, published studies  <cit> , and guidelines for agile software development  <cit>  and consequent automated testing , we focused our development on the core code and performance optimization. on the one hand, this guaranteed the use of modern, best-performing frameworks, and on the other hand, it prevented us from wasting time on developing proprietary, error-prone code for components such as security, database connection, and user management.

performance benchmarking
we ran several performance tests to evaluate the efficiency of the example implementation. here, we explain two tests and compare the results of e!dal with those of a native file system. the benchmarks show the performance of e!dal while storing and reading objects and while searching for a fixed number of objects, depending on the number of stored objects. all results are summarized in figure  <dig>  all tests were executed with a local embedded e!dal system as well as with the server-client architecture.

in the first test, the time the api needed to store and read  <dig>  objects was nearly linear and depended only on the file size, because the read and write operations of the file system needed more time. in general, the read function is faster than the write function, as there are fewer database operations necessary. furthermore, it is clear that all the tests over the server-client architecture needed a bit more time, because all the data had to be serialized and transferred over a network connection. while supporting more features than an ordinary file system, finished the storage of  <dig>  files, each about  <dig>  mb in size, in about  <dig> minutes, which is close to the performance of a windows ntfs or linux ext <dig> file system. the performance in client-server mode was comparable to that of network-based file transfer protocols such as cifs or nfs.

the second test showed the performance of the e!dal search functions, which clearly outperformed those of local or network file systems. as expected, the performance was independent of the number of stored objects, thanks to the use of the text index. the small differences between the values for the local tests and the tests over the server-client architecture were caused by fluctuations in the network latency.

use cases
although e!dal is a generic framework for research-data management, some specific use cases demonstrate its manifold applicability.

gui support and demo
in order to support seamless integration into graphical java user interfaces, a file-chooser dialog was implemented, with functionality and handling like the default file open/save dialog, but with enhanced features. as illustrated in figure  <dig>  it behaves like a basic file explorer, allowing users to browse and select e!dal objects, edit metadata, and manage permissions for stored objects, and it features a search box to use e!dal’s information-retrieval functionality.

for the purpose of demonstrating e!dal’s features and supporting a quick-start guide for the api, a multipurpose “e!dal-installer” webstart application is available at the project website. the initial wizard panel makes it possible to either install an e!dal server and generate startup scripts or run through a demo, allowing users to test the different modules and functions like the edalfilechooser dialog or the publication process. the e!dal demo includes an ngs dataset, giving an impression of the importance of metadata handling. e!dal uses the dublin core to provide metadata for stored files. that allows users not only to provide information such as the title or the author but also to provide useful information like taxonomic identifiers or file descriptions that help users to find data. an example for an ngs metadata set is given in table  <dig> 
e!dal 
 managed next generation sequencing test data set of shortened sequence files 

systems biology
to enable the community-based development and sharing of biological models, a sustainable data-sharing infrastructure must be provided. several approaches exist. for example, biomodels  <cit>  reflects the need for an integrated repository of curated models. that approach does not, however, support community-based editing and versioning. the combine archive  <cit>  is a data format for storing models, associated data, and procedures, but it does not provide a storage infrastructure for collaborative data sharing or publication. wikipathways  <cit>  is a collaborative platform for curating biological pathways, but it focuses on graphical pathway representation and not on sbml  <cit>  models.

to address those shortcomings, we applied e!dal as a repository for systems biology data that supports collaborative editing and access to models among different partners. in doing so, we developed a plug-in for the systems biology framework vanted  <cit> . the ordinary sbml file-storage dialog has been enhanced towards being an extended model-sharing infrastructure. the user has the option to select a local or shared e!dal repository. version control, technical metadata, as well as a within-model searches are supported.

doi resolving and http server
finally, data can be published as urls using the embedded http service or as dois using the datacite infrastructure. the embedded http server provides direct access to published e!dal objects via a browser by rendering landing pages that comprise all relevant metadata and download links. to get an impression of the service and how it looks, we set up a test instance of the api over a secured web server and provided some of the ngs data sets that we used for the demo application. the dataset is available under the doi:  <dig> /ipk/test/2013/ <dig>  which can be directly accessed over the doi resolver .

delimitation to existing software
in table  <dig>  a comparison to a popular primary data-management system is given. the focus of e!dal was to meet a set of minimal requirements for primary-data management but not to create a comprehensive repository or information system. this principle enables e!dal to serve as a component of full-feature data repositories or as an embedded module in single tools. in summary, the major benefits of e!dal compared with existing systems are its lightweight embeddable design, customizable data publication and doi registration workflow, and the seamless integration of data storage, sharing, and publication in one thin, reusable api.
e!dal 
 with selected primary data management system

this overview summarize the implementation of the minimal requirements for primary data management in those systems that are mentioned in section data sharing. when a system fullfill a requirement completely, it is marked by ✓. if basic features are implemented the field is marked by . if no concrete information is available or the requirement is not met, the field is left blank.

outlook
planned future development of new features
currently, e!dal has limited support for remote api access for programming languages other than java. in the current release, only java-rmi is supported. the extension towards a restful api is planned for the next release. the support of this platform-independent protocol will enable direct access to the e!dal-api for a wide spectrum of programing languages and infrastructures. another future e!dal extension will be the use of scalable, distributed architectures, such as java clustering solutions, and distributed file systems like apache hdfs  <cit> . for this, the next release will virtualize the backend file-system access. one promising framework is the apache commons virtual file system  <cit> . using the high number of available drivers, e!dal will be able to support cloud storage and distributed file systems as well as local file systems as the storage backend.

hosting data repositories
besides e!dal’s application to sharing systems biology data, the aim is to use the e!dal technology platform as a host for data repositories. an example is its application in the german plant phenotyping network. the consortium is developing novel concepts and technologies in the field of high-throughput plant phenotyping. one task is to find a standardized exchange format that comprises primary data, analysis results, and technical and semantic descriptions. one promising solution is the isa-tab  <cit>  format, which is a general format for the annotation of experiments that supports several ontologies. e!dal is planned for use as a repository for published isa-tab formatted dppn experiments. a first data set was published under the doi http://dx.doi.org/ <dig> /dppn/2014/ <dig>  more e!dal-hosted data repositories are underway and will be announced at the e!dal project web site.

CONCLUSIONS
e!dal is a lightweight software framework for the management, publication, and sharing of research data. it is designed to turn sets of primary data into citable data publications. this is particularly important for the life sciences, where there is a big gap between the rate of data collection and the rate of data publication. e!dal is available as a local api, a remote file system, or a server for individual data repositories. its well-defined api supports seamless integration into existing data-management software and infrastructures. in addition, e!dal can be used as a supplement to manage primary data; for instance, the examples presented showed its application to systems biology, genomics, and phenotyping. furthermore, e!dal’s modular architecture and incorporated standards ensure version management, documentation, information retrieval, persistent identification, data security, and data publication. developed within a context for the life sciences, e!dal has many generic features that make it easily and readily applicable to other areas of science faced with similar needs.

availability and requirements
• project name:e!dal

• project home page:http://edal.ipk-gatersleben.de

• operating system: platform independent

• programming language: java

• other requirements: java  <dig>  or higher

• license: gnu general public license  v2

• any restrictions to use by non-academics: none

endnotes
a sensible api methods are those related to actions for creation, modification, read, store, metadata change, permission change, and publication. details are listed in the documentation for the java class grantablemethods.

b for the most recent versions and documentation, please refer to http://edal.ipk-gatersleben.de/.

c the maven artifacts for e!dal are published in maven central with the group id de.ipk-gatersleben. a template for project integration is available at http://edal.ipk-gatersleben.de/download/maven.html.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
ml initiated the project. da, ml, sf, and cc designed the data structure and tested the software. da and ml implemented the core api. da implemented the server and client api as well as the demo showcase, http handler, and installer. dh designed the approval workflow for the data publication. jc implemented the edalfilechooser gui. ml and da drafted the manuscript. us supplied the use cases and ngs test data sets and supervised the project. all authors read and approved the final manuscript.

