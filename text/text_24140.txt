BACKGROUND
genomic sequence alignment tools have been playing an important role in comparative genomics and phylogenetic reconstruction. however, traditional sequence alignment algorithms based on dynamic programming are very inefficient when long genome sequences needed to be aligned. to tackle this problem several heuristic based methods have been proposed. the most popular progressive multiple sequence alignment  method is clustalw  <cit> , to which access is provided by a number of web portals. other methods like t-coffee  <cit> , dialign  <cit> , muscle  <cit> , mlagan  <cit> , mavid  <cit> , and mauve  <cit>  are also widely used. despite the fact that these tools are heuristic based and sometimes lead to poor biologically plausible alignments, they were also developed to deal only with linear genomic sequences. when applied to circular genomes, the results become extremely sensitive to the exact place where the genomic sequence begins.

this limitation is very important since circular dna sequence alignments are central to a number of biological problems. every cell has some kind of genome that is circular. prokaryotic genomes are circular and many bacteria possess extra circular dna molecules, the plasmids. eukaryotic cells also contain organelles which possess circular dna molecules: the mitochondrial dna  inside mitochondria in all cells; and chloroplast dna inside chloroplasts in plant cells.

mtdna has long been used for phylogenetic analyses. in fact, the absence of recombination in this genome enables an easy and direct inference of the phylogenetic evolution and its fast mutation rate leads to a high discriminative power. until recently, phylogenetic reconstructions were based on certain regions of the mtdna molecule, mainly the protein-coding gene cytochrome b when comparing different species  <cit>  and hypervariable regions on d-loop when comparing human populations . but the high recent throughput of automatic sequencing techniques is offering the possibility to study complete mtdna genomes in humans  and in other species . by the end of april  <dig> there were around  <dig>  human mtdna complete genomes in genbank  <cit>  and  <dig>  complete mtdna which should be used as reference sequence for the diverse species in refseq  <cit> . the blind application of standard phylogenetic analyses in these massive datasets without concern to the circularity of these molecules will lead to the overestimation of genetic distances between species.

sequencing, the technique employed to determine bases constituting the dna molecule is performed in fragments, generally overlapping in the ends so that an order can be inferred for constructing the map of the molecule. but the place where a circular genome begins is totally irrelevant and arbitrary. for instance, the first team sequencing the human mtdna  <cit>  decided to begin numbering more or less in the middle of a region designated control region or d-loop; however, the chimpanzee mtdna sequence has position number one placed in trna phenylalanine, which will be position  <dig> in human mtdna. due to this arbitrarily first position definition, a false high genetic distance would be obtained from the alignment between human and its closest species, by using available sequence alignment tools. a total of  <dig> gaps would be added to the beginning of the chimpanzee sequence and around  <dig> gaps would be added to the end of the human sequence.

algorithms for the problem of cyclic sequence alignment have already been proposed in the computer science research field. however, like optimal msa methods, most existing optimal methods that handle this kind of sequences are very time consuming and seldom used. a simple extension of a general msa dynamic programming algorithm can be used to compute the edit distance between two cyclic sequences, but requires a quadratic time computation complexity  <cit> . several other algorithms that explore suboptimal solutions have also been proposed  <cit> , reducing the practical execution time. however, these works present experiments that consider only the cyclic use of the levenshtein metric  <cit> .

based on algorithms closely related to the ideas described above, two software packages have been recently proposed to align circular dna genome sequences: the circal package  <cit>  and the cyclope package  <cit> . the algorithm implemented in the circal package uses a complex gap cost function and can only deal with short sequences, less than a thousand characters, due to its time complexity. the cyclope package includes an implementation of an exact and a heuristic method with time complexities that are prohibitive if it is used to align several sequences with several thousands of base pairs. for this particular package, the authors claim that it should be used only to obtain a rough first solution of the multiple alignment and that the sequences should be realigned with a standard linear alignment package like clustalw.

in this paper, we present the csa tool , a very efficient algorithm that finds the best rotation for a set of circular genome sequences that are to be aligned. firstly, the genomic sequences are circularized. in a second stage the best rotation is calculated based on the largest chain of non-repeated blocks that belongs to all the sequences. these maximum common blocks are obtained with the help of a generalized cyclic suffix tree, which is a new concept introduced in this work. at the end of the process, the users can visualize all the identified common blocks, obtaining a precise idea on how these regions are conserved along the genomic sequences. the new rotated sequences are made available for download and can be submitted to public available msa tools. at the developed website, several commonly used msa and visualizations tools are proposed.

implementation
the purpose of the proposed algorithm is to find the best rotation among all the possible rotations of each circular genome sequence, in order to improve subsequent multiple sequence genome alignment. unlike previous algorithms that pursued the same goal, the proposed algorithm is, to the best of our knowledge, the first one that is able to do this task in linear time. this was accomplished by employing the highly efficient suffix tree data structure  <cit> .

suffix trees
in general terms, a suffix tree for a given string is an advanced data structure shaped like an upside down tree that stores all the suffixes of the string and that can be used to efficiently solve many complex string problems. an in-depth explanation of this data structure is outside the scope of this article, but a detailed overview of suffix trees including construction methods and applications can be found in a number of sources . in this work we follow many of the definitions presented in that reference. in particular, strings will be denoted as sequences, which correspond to dna sequences.

cyclic suffix trees
to be able to represent all the rotations of a cyclic sequence s of length n, we introduce the concept of cyclic suffix tree. a cyclic suffix tree is a suffix-tree-like structure which represents all the rotations of the sequence . the construction algorithm follows ukkonen's suffix tree construction method  <cit>  but with some subtle modifications, namely in the implementation of suffix links and open leaves . in our case, suffix links at leaves are treated as connecting successive rotations instead of successive suffixes. the role of the open leaves is also changed so that the resulting path label from the root to the end of the leaf has always the same length, n. in this way, if a new leaf for the character at position i is created at depth d, the right pointer of that leaf will be i + . the result is that all the leaves are at the same depth in the tree, which corresponds to the size of the original sequence. when accessing characters from the edge labels, if a pointer indicates a position k that reaches beyond the end of the original sequence , then we must subtract from that position the size of the sequence .

the construction algorithm
based on the previous definitions, the construction algorithm proceeds as originally proposed in  <cit> , producing all the n rotations of the sequence in linear time with no additional effort. in some cases, as a final step, we still need to perform an additional pass through s. take for example the sequence aaaba. the construction algorithm, as proposed in  <cit> , would stop at the internal node with path label a, and would not report the rotation aaaab. so, we need to match again all the characters from the beginning of the sequence until the -th position to create the last missing rotation. this can easily be done by constructing the cyclic suffix tree of the sequence concatenated with itself . using this technique, the algorithm runs in time proportional to  <dig> n, and we obtain a linear time complexity.

the example presented in figure  <dig> shows all the steps for the construction of the cyclic suffix tree for the sequence acacg. the current node/position is marked in red and the newly created nodes/edges are coloured in blue. for the sake of simplicity, only the suffix links connecting leaves are shown. figure  <dig> presents the same construction but gives a deeper look at the node pointers, showing some of the implementation details of the algorithm.

generalized cyclic suffix trees
we have so far presented the algorithm to build a cyclic suffix tree for a single sequence, in linear time. however what we want is to efficiently obtain the best rotation for an entire set of cyclic sequences. for this we build a tree called a generalized cyclic suffix tree. a generalized cyclic suffix tree is a tree that stores all the rotations of a set of sequences. in this representation, a node can belong to several different sequences at the same time. each node in the tree is marked, using a bit vector, with the identifiers of all the sequences that contain that node. a linear time algorithm for the construction of a generalized suffix tree for a set of sequences can be found in  <cit> . the implementation used in this work is a generalization to deal with cyclic sequences.

finding the best rotation
the general idea to obtain the best rotation for each sequence based on all the others is to find the largest chain of longest common subsequences that belongs to all the sequences and then use the position of that highly conserved block chain in each sequence to establish the cutting point. we start by retrieving all the nodes that belong simultaneously to all the sequences. the tree nodes carry a bit vector with this information, so we only need to perform a depth-first search on the tree starting at the root and count the number of sequences in each node. when the sequence count, in a node, falls bellow the total number of sequences, we don't need to search the children of that node because their count will only be lower or equal to the count of the father. using the suffix links of those nodes, it is now possible to discard all the nodes whose path label corresponds to a suffix of the path label of another node. the result is the set of all maximal blocks common to all the sequences.

to improve the results three other steps were included. one step removes the nodes that appear more than once in at least one of the sequences. this is important because a repeated subsequence that appears in multiple positions inside a sequence could lead to wrong alignments. at this stage, we are left with all the unique maximal common blocks to all the sequences. next, the second step groups together the blocks that appear consecutively and in the same order in all the sequences. the third and last step consists of taking the largest chain of these blocks and set its start position on each circular sequence as the start position of the new linear sequence.

for the identification of close related regions the minimum block size is not limited. however, since all the suffixes of common subsequences are automatically excluded when the suffix tree is analysed, it is usual that the longest common subsequences have size not inferior to  <dig> or  <dig> nucleotides. the only restriction that was included limits the maximum distance between two consecutive blocks in a chain to  <dig> nucleotides. since the algorithm purpose is to identify the best rotation for all the sequences based on a similar region, we tried, with this distance restriction, to avoid that other more complex biological events, like gene inversions, deletions or insertions could play a role at this stage. these events will be detected at the final multiple alignment. the length of the chain, or common region, is the sum of the lengths of each one of the intervening blocks.

consider the example represented in figure  <dig> where sequences acacg, cgtga and tgac correspond to a linearization of three dna cyclic sequences. there are three common blocks to all these sequences: gac, ac and c. since ac and c are both suffixes of gac, they are removed. the remaining block does not occur more than once in the same sequence, so repetitions are not observed. at the end, the single sequence gac is reported as the largest block chain, leading to the following rotated and linear set of sequences: gacac, gacgt and gact.

multiple sequence alignment
after finding the largest chain of unique common blocks belonging to all the sequences that were circularized, they are again made linear by cutting these sequences at the starting position of the first block from that common chain. the multiple alignment itself can then be easily performed by any linear multiple alignment algorithm. at the csa tool web site several multiple alignment methods and visualization tools are suggested for further sequence analysis.

the csa tool interfaces
the csa tool is available through a friendly and easy to use web interface. figure  <dig> presents the tool's main page and the output results after pre-processing a set of mtdna primate sequences.

the genomic sequences can be submitted in the multi-fasta format by uploading a file or by pasting the sequences in a text window. the size of the chain of blocks displayed in the output can be specified by the user. by default chains with size higher than fifteen bases are selected and displayed. the minimum size allowed for a chain with only one block is eight since finding conserved blocks of this size in genomic sequences with several thousand base pairs is still statistically significant.

the output page is divided in three main areas where data are displayed. at the beginning the user can find tool execution statistics, including the size and description of each input sequence, the algorithm running time, information about the  <dig> first longest blocks, and eventually any processing errors. after this general information, the alignment map of the blocks in all the sequences after their optimal rotation is presented, together with a table with all the blocks lengths and positions, following the same colour schema as the alignment map. the colour of the blocks in the results page is not related to their length. the blocks are coloured in a rainbow-like fashion by their positions relative to the first  sequence. this position-based colouring is more interesting than a length based colouring because it allows, in a much more easy way, the detection of block transpositions among sequences. before clicking on the alignment image, the table on the right shows the blocks sorted by their length. by left-clicking over a specific section of one of the sequences in the alignment map, the positions table automatically sorts its rows to reflect the correct order of the blocks inside that sequence and it automatically scrolls itself to show the information of the blocks from the selected region/sequence. all the previous described data are available for download at the end of the page.

at the csa tool web page the user can also find a user manual, the algorithm source code and some example sequences.

RESULTS
in order to evaluate the efficiency of the proposed tool and the adequacy to perform the circularization and rotation prior to the alignment, we conducted tests in three sets of mtdna sequences. the first set includes sequences of  <dig> primates, the second set includes sequences of  <dig> mammals and the last set is a set of distantly related sequences including  <dig> mtdna sequences  . these datasets are available, as supplementary material, at the tool's web site. multiple sequence alignments with and without csa pre-processing were performed using two well known msa tools: clustalw  <cit>  and mavid  <cit> . alignment quality was compared in two ways:  by evaluating genetic standard measures in the software arlequin  <cit> ;  by using the tool sinicview  <cit> , a visualization environment for comparison of multiple nucleotide sequence alignment tools.

in order to get a sense of the statistical significance of the csa improvement relative to the random situation, tests with  <dig> sets of control sequences with random cuts  were also conducted. for these sets, the alignment scores and the consensus length obtained when using the clustalw tool with and without the csa algorithm were compared.

we also tried to compare the results obtained with the csa tool followed by a linear dna multiple sequence aligner, with the results obtained by the algorithms available at the cyclope package  <cit> . however, this comparison could not be performed because this software package is not able to deal with sequences with a few thousand bases pairs as the mtdna sequences. the recommendation obtained by the tool's authors was to perform a manual rotation based on the genes positions and then use a linear dna multiple sequence alignment algorithm.

the circularization and rotation in csa
after pre-processing the set of primate sequences with csa,  <dig> homologous chains of blocks with size  <dig> or bigger were observed, with the biggest one consisting in a block of  <dig> bp followed by a gap of one base, a second block of  <dig> bp followed by a gap of  <dig> bp and a third block of  <dig> bp, which matches perfectly the trna-met . those homologous chains of blocks are shortened when enlarging the analysis to the mammal set. a total of  <dig> homologous chains of blocks with size  <dig> or bigger were still observed, being the biggest one constituted by a block of  <dig> bp followed by a gap of one base and another block of  <dig> bp, located at the gene  <dig> s rrna . the third set, including the  <dig> primates and the outgroup species, reduced the homologous chains of blocks to four unique blocks with size  <dig> or bigger, the biggest one being a unique block of  <dig> bp located in the trna-trp . as expected, the bigger homologous chains of blocks are located in regions where the secondary structure must be maintained as it is essential for functionality. protein-coding genes do not have such high mutation-constraint as the rrna and trna genes due to the property of redundancy of the genetic code: most aminoacids are coded by several codons, the third-codon position being quite irrelevant.

note, however, that when more distantly related sequences are considered, the common blocks correspond to single blocks of small sizes  that are still statistical significant if mitochondrial dna is being considered but not true for dna sequences of bacterial genomes with million base pairs. in this way, additional care must be taken in the analysis of the sizes of the identified common blocks, when using this algorithmic approach with larger circular genomes from distantly related organisms. in these cases we are dealing with the multiple sequence alignment problem of distantly related genomes that is still an open problem.

comparing alignment results between alignment tools and with or without csa
some biological properties can help in the evaluation of the alignment results:  unique deletion of multiple bases instead of multiple deletions interspersing individual nucleotides;  higher ratio transition/transversion, as substitutions between the same type of bases are commonest than between different types;  the triplet-constraint in protein-coding genes making it more probable to have deletion in multiples of three than other.

as can be observed in table  <dig>  the genetic diversity standard measures showed lower levels of diversity  when circularizing and rotating the mtdna molecules in csa prior to the alignment, in both alignment tools tested. this fact is stronger in the set of primates with outgroups than in mammals and still than in primates, as phylogenetic distance between compared species decreases. the main difference between circularization and rotation or not of the mtdna molecules with csa is in the number of insertion/deletions , which reduces about  <dig>  events when applying this pre-processing step.

when comparing different alignment tools, clustalw adds considerable lower amounts of indels than mavid. a probable cause for this is that mavid was especially designed for the alignment of large genomes, while clustalw is much more conservative and takes longer to achieve results.

we tried to investigate where indels were being introduced. this can be visually checked in the tool sinicview, as displayed in figures  <dig> and  <dig>  prior to the csa application , huge gaps are included in the original tips, which coincide with the most heterogeneous mtdna region, the control region. after the circularization and rotation , gaps are mainly included in the control region, and a big difference can be found between the alignment tools. outside the control region, the biggest gap is inserted in a small fragment which is non-coding, being placed between gene cox <dig> and trna-lys. all the alignment tools allow for non-multiples of three in protein-coding genes to be included, and, for instance, when counting deletions inserted in human protein-coding genes for the primate set, the ratio of multiple/non-multiple of three deletions is higher in clustalw than in mavid . mavid is the less restrictive in having multiple deletions interspersing individual nucleotides.

comparing alignment results in the  <dig> sets of control sequences with random cuts
when the third set was used so that each sequence was cut each time in different random positions, resulting in  <dig> test sets of  <dig> sequences each, the efficiency improvement of csa was also evident. it was shown that when using the csa tool on these sets, they all resulted in the same alignment and its score greatly outperformed the scores of each not csa-processed test set. figure  <dig> presents in blue the consensus length, in bp, versus the alignment score for the  <dig> test sets when using the clustalw tool for the multiple sequence alignment. when using the csa tool as a pre-processing step the alignment score is always the same and the length of the consensus sequence is much smaller .

CONCLUSIONS
we have demonstrated that the essential step of circularizing and rotating the mtdna molecules prior to its alignment can significantly improve the efficiency of current multiple sequence alignment tools, developed for the alignment of linear dna molecules. this pre-processing step leads to more accurate phylogenetic comparisons between species.

to the best of our knowledge the csa tool is the only web based tool that obtains the best rotation of a set of circular dna sequences in a very efficient way. the new rotated sequences are made available for further processing and a picture of all conserved block for all the sequences can be found at the result page and can be viewed as a first draft of a future multiple sequence alignment.

future developments of alignment tools should include more real biological mutation constraints, enabling the use of different assumptions in the different parts of the molecules. it is clear that as sequencing strategies advance further, more information will be obtained for complete genomes, which have necessarily a diverse composition. this is clearly the case of the circular molecules of mtdna and bacterial genomes being rapidly characterized. for instance, non-coding regions could have a less restrictive rate of gap opening; protein-coding genes should incorporate the rule of multiple of three gaps and be less restrictive for substitution at the third-codon position; third-dimension structure can give additional information for the rrna and trna genes alignment.

availability and requirements
project name: csa: cyclic dna sequence aligner

project home page: 

operating system: platform independent

programming language: c

other requirements: none

license: none

any restrictions to use by non-academics: free downloads and usage for academics only

authors' contributions
lp and atf specified the problem and supervised the system implementation. ff implemented the algorithm and coded the application and the web interface. all authors contributed for the writing, read and approved the final manuscript.

