BACKGROUND
ontologies have grown to be one of the great enabling technologies of modern bioinformatics, particularly in areas like model organism database curation, where they have facilitated large-scale linking of genomic data across organisms, but also in fields like analysis of high-throughput data
 <cit>  and protein function prediction
 <cit> . ontologies have also played an important role in the development of natural language processing systems in the biomedical domain, which can use ontologies both as terminological resources and as resources that provide important semantic constraints on biological entities and events
 <cit> . ontologies provide such systems with a target conceptual representation that abstracts over variations in the surface realization of terms. this conceptual representation of the content of documents in turn enables development of sophisticated information retrieval tools that organize documents based on categories of information in the documents
 <cit> .

finally, ontologies themselves can benefit from concept recognition in text. yao et al.
 <cit>  propose new ontology quality metrics that are based on the goodness of fit of an ontology with a domain-relevant corpus. they note that a limitation of their approach is the dependency on tools that establish linkages between ontology concepts and their textual representations.

however, a general approach to recognition of terms from any ontology in text remains a very open research problem. while there exist sophisticated named entity recognition tools that address specific categories of terms, such as genes or gene products
 <cit> , protein mutations
 <cit> , or diseases
 <cit> , these tools require targeted training material and cannot generically be applied to recognize arbitrary terms from large, fine-grained vocabularies
 <cit> . furthermore, as brewster et al.
 <cit>  point out, there is often a disconnect between what is captured in an ontology and what can be expected to be explicitly stated in text. this is particularly true for relations among concepts, but it is also the case that concepts themselves can be expressed in text with a huge amount of variability and potentially ambiguity and underspecification
 <cit> .

the work reported here aims to advance the state of the art in recognizing terms from ontologies with a wide variety of differences in both the structure and content of the ontologies and in the surface characteristics of terms associated with concepts in the ontology. in the course of the work reported in this paper, we evaluate a number of hypotheses related to the general task of finding references to concepts from widely varying ontologies in text. these include the following: 

• not all concept recognition systems perform equally on natural language texts.

• the best concept recognition system varies from ontology to ontology.

• parameter settings for a concept recognition system can be optimized to improve performance on a given ontology.

• linguistic analysis, in particular morphological analysis, affects the performance of concept recognition systems.

to test these hypotheses, we apply a variety of dictionary-based tools for recognizing concepts in text to a corpus in which nearly all of the concepts from a variety of ontologies have been manually annotated. we perform an exhaustive exploration of the parameter spaces for each of these tools and report the performance of thousands of combinations of parameter settings. we experiment with the addition of tools for linguistic analysis, in particular morphological analysis. along with reporting quantitative results, we give the results of manual error analysis for each combination of concept recognition system and ontology.

the gold standard used is the colorado richly annotated full-text  corpus
 <cit> . the full craft corpus consists of  <dig> completely annotated biomedical journal articles, while the “public release” set, which consists of  <dig> documents, was used for this evaluation. craft includes over  <dig>  concept annotations from eight different biomedical ontologies. without craft, this large-scale evaluation of concept annotation would not have been possible, due to lack of corpora annotated with a large number of concepts from multiple ontologies.

related work
a number of tools and strategies have been proposed for concept annotation in text. these include both tools that are generally applicable to a wide range of terminology resources, and strategies that have been designed specifically for one or a few terminologies. the two most widely used generic tools are the national library of medicine’s metamap
 <cit>  and nbco’s open biomedical annotator 
 <cit> , based on a tool from the university of michigan called mgrep. other tools, including whatizit
 <cit> , knowledgemap
 <cit> , conann
 <cit> , indexfinder
 <cit> , terminizer
 <cit> , and peregrine
 <cit>  have been created but are not publicly available or appear not to be in widespread use. we therefore focus our analysis in this paper on the ncbo annotator and metamap. in addition, we include conceptmapper
 <cit> , a tool that was not specifically developed for biomedical term recognition but rather for flexible look up of terms from a dictionary or controlled vocabulary.

the tools mgrep and metamap have been directly compared on several term recognition tasks
 <cit> . these studies indicate that mgrep outperforms metamap in terms of precision of matching. both studies also note that metamap returns many more annotations than mgrep. recall is not calculated in either study because the document collections used as input were not fully annotated. by using a completely annotated corpus such as craft, we are able to generate not only precision but recall, which gives a complete picture of the performance of the system.

the gene ontology
 <cit>  has been the target of several customized methods that take advantage of the specific structure and characteristics of that ontology to facilitate recognition of its constituent terms in text
 <cit> . in this work, we will not specifically compare these methods to the more generic tools identified above, as they are not applicable to the full range of ontologies that are reflected in the craft annotations.

the craft corpus has been utilized previously in the context of evaluating the recognition of specific categories of terms. verspoor et al.
 <cit>  provide a detailed assessment of named entity recognition tool performance for recognition of genes and gene products. as with the work mentionned in the previous paragraph, these are specialized tools with a more targeted approach than we explore in this work, typically requiring substantial amounts of training material tailored to the specific named entity category. we do not repeat those experiments here as they are not relevant to the general problem of recognition of terms from large controlled vocabularies.

a note on “concepts”
we are aware of the controversies associated with the use of the word “concept” with respect to biomedical ontologies, but the content of the paper is not affected by the conflicting positions on this issue; we use the word to refer to the tuple of namespace, identifier, term, definition, synonym, and metadata that make up an entry in an ontology.

methods
corpus
we used version  <dig> , released october  <dig>   <dig>  of the colorado richly annotated full text corpus  data set
 <cit> . the full corpus consists of  <dig> full-text documents selected from the pubmed central open access subset. each document in the collection serves as evidence for at least one mouse functional annotation. for this paper we used the “public release” subsection, which consists of  <dig>  sentences from  <dig> articles. there are over  <dig>  concept annotations from eight different biomedical ontologies in this public subset. each annotation specifies the identifier of the concept from the respective ontology along with the beginning and end points of the text span of the annotation.

to fully understand the results presented, it is important to understand how craft was annotated
 <cit> . here we present three guidelines. first, the text associated with each annotation in craft must be semantically equivalent to the term from the ontology with which it is annotated. in other words, the text, in its context, has the same meaning as the concept used to annotate it. second, annotations are made to a specific ontology and not to a domain; that is, annotations are created only for concepts explicitly represented in the given ontology and not to concepts that “should” be in the ontology but are not explicitly represented. for example, if the ontology contains a concept representing vesicles, but nothing more specific, a mention of “microvesicles” would not be annotated: even though it is a type of vesicle, it is not annotated because microvesicles are not explicitly represented in the ontology and annotating this text with the more general vesicle concept would not be semantically equivalent, i.e., information would be lost. third, only text directly corresponding to a concept is tagged; for example, if the text “mutant vesicles” is seen, “vesicles” is tagged by itself  with the vesicle concept. because only the most specific concept is annotated, there are no subsuming annotations; that is, given an annotation of a text span with a particular concept, no annotations are made within this text span with a more general concept even if they appear in the term. for an example from the cell type ontology, given the text “mesenchymal cell”, this phrase is annotated with “cl: <dig> - mesenchymal cell” but the nested “cell” is not additionally annotated with “cl: <dig> - cell”, as the latter is an ancestor of the former and therefore redundant. there are very specific guidelines as to what text is included in an annotation set out in bada et al.
 <cit> .

ontologies
the annotations of eight ontologies, representing a wide variety of biomedical terminology, were used for this evaluation: 1–3) the three sub-ontologies of the gene ontology 
 <cit>  4) the cell type ontology
 <cit>  5) chemical entities of biological interest ontology
 <cit>  6) the ncbi taxonomy
 <cit>  7) the sequence ontology
 <cit>  and 8) the protein ontology
 <cit> . versions of ontologies used along with descriptive statistics can be seen in table
 <dig>  craft also contains entrez gene annotations, but these were analyzed in previous work
 <cit> . the gene ontology  aims to standardize the representation of gene and gene product attributes; it consists of three distinct sub-ontologies, which are evaluated separately: molecular function, biological process, and cellular component. the cell type ontology  provides a structured vocabulary for cell types. chemical entities of biological interest  is focused on molecular entities, molecular parts, atoms, subatomic particles, and biochemical roles and applications. ncbi taxonomy  provides classification and nomenclature of all organisms and types of biological taxa in the public sequence database. the sequence ontology  aims to describe the features and attributes of biological sequences. the protein ontology  provides a representation of protein-related entities.

structure of ontology entries
the ontologies used are from the open biomedical ontologies 
 <cit>  flat file format. to help to understand the structure of the file, an entry of a concept from cl is shown below. the only parts of an entry used in our systems are the id, name, and synonym rows. alternative ways to refer to terms are expressed as synonyms; there are many types of synonyms that can be specified with different levels of relatedness to the concept . an ontology contain a hierarchy among its terms; these are expressed in the “is_a” entry. terms described as “ancestors”, “less specific”, or “more general” lie above the specified concept in the hierarchy, while terms described as “more specific” are below the specified concept.

id: cl:0000560

name: band form neutrophil

def: “a late neutrophilic metamyelocyte in which the nucleus is in the form of a curved or coiled band, not having acquired the typical multi lobar shape of the mature neutrophil.”

synonym: “band cell” exact

synonym: “rod neutrophil” exact

synonym: “band” narrow

is_a: cl: <dig> ! immature neutrophil

relationship: develops_from cl: <dig> neutrophilic metamyelocyte

a note on obsolete terms
ontologies are ever changing: new terms are added, modifications are made to others, and others are made obsolete. this poses a problem because obsolete terms are not removed from the ontology, but only marked as obsolete in the obo flat file. the dictionary-based methods used in our analysis do not distinguish between valid or obsolete terms when creating their dictionaries, so obsolete terms may be returned by the systems. a filter was incorporated to remove obsolete terms returned . not filtering obsolete terms introduces many false positives. for example, the terms “go: <dig> - dna” and “go: <dig> - protein” are both obsolete in the cellular component branch of the gene ontology and are mentioned very frequently within the biomedical literature.

concept recognition systems
we evaluated three concept recognition systems, ncbo annotator 
 <cit> , metamap
 <cit> , and conceptmapper
 <cit> . all three systems are publicly available and able to produce annotations for many different ontologies but differ in their underlying implementation and amount of configurable parameters. the full evaluation results are available for download at http://bionlp.sourceforge.net/.

ncbo annotator is a web service provided by the national center for biomedical ontology  that annotates textual data with ontology terms from the umls and bioportal ontologies. the input text is fed into a concept recognition tool  and annotations are produced. a wrapper
 <cit>  programmatically converts annotations produced by ncbo into xml, which is then imported into our evaluation pipeline. the evaluations from ncbo annotator were performed in october and november  <dig> 

metamap  is a highly configurable program created to map biomedical text to the umls metathesaurus. mm parses input text into noun phrases and generates variants  from these. a candidate set of metathesaurus terms containing one of the variants is formed, and scores are computed on the strength of mapping from the variants to each candidate term. in contrast to a web service, mm runs locally; we installed mm v. <dig> on a local linux server. mm natively works with umls ontologies, but not all ontologies that we have evaluated are a part of the umls. the optional data file builder
 <cit>  allows mm to use any ontology as long as they can be formatted as umls database tables; therefore, a perl script was written to convert the ontology obo files to umls database tables following the specification in the data file builder overview.

conceptmapper  is part of the apache uima
 <cit>  sandbox and is available at http://uima.apache.org/d/uima-addons-current/conceptmapper. version  <dig> . <dig> was used for these experiments. cm is a highly configurable dictionary lookup tool implemented as a uima component. ontologies are mapped to the appropriate dictionary format required by conceptmapper. the input text is processed as tokens; all tokens within a span  are looked up in the dictionary using a configurable lookup algorithm.

parameter exploration
each system’s parameters were examined and configurable parameters were chosen. table
 <dig> gives a list of each system with the chosen parameters along with a brief description and possible values. the list of stop words used is provided in additional file
 <dig> 

parameters that were evaluated for each system along with a description and possible values are listed in all capital letters. for the most part, parameters are self-explanatory, but for more information see documentation for each system. cm
 <cit> , ncbo annotator
 <cit> , mm
 <cit> .

evaluation pipeline
an evaluation pipeline for each system was constructed and run in uima
 <cit> . mm produces annotations separate from the evaluation pipeline; uima components were created to load the annotations before evaluation. ncbo annotator is able to produce annotations and evaluate them within the same pipeline, but ncbo annotator annotations were cached to avoid hitting the web service continually. like mm, a separate analysis engine was created to load annotations before evaluation. cm produces annotations and evaluates them in a single pipeline.

evaluation pipelines for each system have a similar structure. first, the gold standard is loaded; then, the system’s annotations are loaded, obsolete annotations are removed, and finally a comparison is made. craft was not annotated with obsolete terms, so the obsolete terms filtered out are those that are obsolete in the version of the ontology used to annotate craft.

cm and mm dictionaries were created with the versions of the ontologies that were used to annotate craft. since ncbo annotator is a web service, we do not have control over the versions of ontologies used; it uses newer versions with more terms. to remove spurious terms not present in the ontologies used to annotate craft, a filter was added to the ncbo annotator evaluation pipeline. the ncbo annotator specific filter removes terms not present in the version used to annotate craft and ensures that the term is not obsolete in the version used to annotate craft. because the versions of the ontologies used in craft are older, it may be the case that some terms annotated in craft are obsolete in the current versions. all systems were restricted to only using valid terms from the versions of the ontology used to annotate craft.

all comparisons were performed using a strict comparator, which means that ontology id and span of a given annotation must match the gold-standard annotation exactly to be counted correct. a strict comparator was chosen because it was our desire to see how well automated methods can recreate exact human annotations. a pitfall of the using a strict comparator is that a distinction cannot be made between erroneous terms vs. those along the same hierarchical lineage; both are counted as fully incorrect in our analysis. for example, if the gold standard annotation is “go: <dig> - protein binding” and “go: <dig> - binding” is returned by a system, partial credit should be given because “binding” is an ancestor of “protein binding”. future comparisons could address this limitation by accounting for the hierarchical relationship in the ontology by counting those less specific terms as partially correct by using hierarchical precision/recall/f-measure as seen in verspoor et al.
 <cit> .

the output is a text file for each parameter combination listing true positives , false positives , and false negatives  for each document as well as precision , recall , and f-measure  . precision, recall, and f-measure are calculated over all annotations across all documents in craft, i.e. as a micro-average.

  p=tptp+fp 

  r=tptp+fn 

  f=2∗p∗rp+r 

statistical analysis
the kruskal-wallis statistical method was chosen to test significance for all our comparisons because it is a non-parametric test that identifies differences between ranked group of variables. it is appropriate for our experiments because we do not assume our data follows any particular distribution and desire to determine if the distribution of scores from a particular experimental condition, such as tool or parameters, are different from the others. the implementation built into r was used . kruskal-wallis was applied in three different ways: 

 <dig>  for each ontology, kruskal-wallis was used to determine if there is a significant difference in f-measure performance between tools. the mean and variance was computed across all parameter combinations for a given tool, calculated at the corpus level using the micro-average f-measure and provided as input to kruskal-wallis.

 <dig>  for each tool, kruskal-wallis was used to determine if there is a difference in performance between parameter values for each parameter. the mean and variance was computed across all parameter values for a given parameter, calculated at the corpus level using the micro-average f-measure.

 <dig>  results from kruskal-wallis only determine if there is a difference between the groups but does not provide insight into how many differences or between which groups a difference exists. when a significant difference was seen between three or more groups, kruskal-wallis was used between a post hoc test to identify the significantly different group.

significance is determined at a 99% level, α= <dig> ; because there are multiple comparisons, a bonferroni correction was used, and the new significance level is α= <dig> .

analysis of results files
for each ontology-system pair, an analysis was performed on the maximum f-measure parameter combination. we did not analyze every annotation produced by all systems but made sure to account for ∼70–80% of them. by performing the analysis this way, we are concentrating on the general errors and terms missed rather than rare errors.

for each maximum f-measure parameter combination file, the top 50– <dig>  of each true positive , false positive , and false negative  were analyzed by separating them into groups of like annotations. for example, the types of bins that fps fall into are: “errors from variants”, “errors from ambiguous synonyms”, “errors due to identifying less specific concepts”, etc., and are different than the bins into which tps or fns are categorized.

because we evaluated all parameter combinations, we were able to examine the impact of single parameters by holding all other parameters constant. the maximum f-measure producing parameter combination result file and the complementary result file with varied parameter were run through a graphical difference program, diffmerge, to examine the annotations found/lost by varying the parameter. examples mentioned in the results and discussion are from this comparison.

RESULTS
results and discussion are broken down by ontology and then by tool. for each ontology we present three different levels of analysis: 

 <dig>  at the ontology level. this provides a synopsis of overall performance for each system with comments about common terms correct , errors , and categories missed . specific examples are taken from the top-performing, highest f-measure parameter combination.

 <dig>  a high-level parameter analysis, performed over all parameter combinations. this allows for observation about impact on performance seen by manipulating parameter values, presented as ranges of impact. .

 <dig>  a low-level analysis obtained from examining individual result files gives insight into specific terms or categories of terms that are affected by manipulating parameters. .

within a particular ontology, each system’s performance is described. the most impactful parameters are explored further and examples from variations on maximum f-measure combination are provided to show the effect they have on matching. results presented as numbers of annotations are of this type of analysis. we end the results and discussion section with overall parameter analysis and suggestions for parameters on any ontology.

the best-performing result for each system-ontology pair is presented in figure
 <dig>  there is a wide range of f-measures for all ontologies, from <  <dig>  to  <dig> . not only is there a wide range when looking at all ontologies, but a wide range can be seen within each ontology. two of our hypotheses are supported by this analysis: we can see that not all concept recognition systems perform equally, and the best concept recognition system varies from ontology to ontology.

best parameters
based on analysis, the suggested parameters for maximum performance for each ontology-system pair can be seen in tables
 <dig> and
 <dig> 

suggested parameters to use that correspond to best score on craft. parameters where choices don’t seem to make a difference in performance are represented as “any”.

suggested parameters to use that correspond to best score on craft. parameters where choices don’t seem to make a difference in performance are represented as “any”.

cell type ontology
the cell type ontology  was designed to provide a controlled vocabulary for cell types from many different prokaryotic, fungal, and eukaryotic organisms. out of all ontologies annotated in craft, it is the smallest, terms are the simplest, and there are very few synonyms . the highest f-measure seen on any ontology is on cl. cm is the top performer , mm performs second best , and ncbo annotator is the worst performer . statistics for the best scores can be seen in table
 <dig>  all parameter combinations for each system on cl can be seen in figure
 <dig> 

maximum f-measure for each system on each ontology. bolded systems produced the highest f-measure.

annotations from cl in craft are heavily weighted towards the root node, “cl: <dig> - cell”; it is annotated over  <dig>  times and makes up ∼44% of all annotations. to test whether annotations of “cell” introduced a bias, all annotations of cl: <dig> were removed and re-evaluated.  we see a decrease in f-measure of  <dig>  for all systems and are able to identify similar trends in the effect of parameters when “cell” is not included. we can conclude that “cell” annotations do not introduce any bias.

precision on cl is good overall, the highest being cm  and the lowest being mm , with ncbo annotator in the middle . most of the fps found are due to partial term matching. “cl: <dig> - cell” makes up more than 50% of total fps because it is contained in many terms and is mistakenly annotated when a more specific term cannot be found. besides “cell”, terms recognized that are less specific than the gold standard are “cl: <dig> - epithelial cell” instead of “cl: <dig> - lung epithelial cell” and “cl: <dig> - blood cell” instead of “cl: <dig> - red blood cell”. mm finds more fps than the other systems, many of these due to abbreviations. for example, mm incorrectly annotates the span “es cells” with “cl: <dig> - epiblast cell” and “cl:0000034: stem cell”. by utilizing abbreviations, mm correctly annotates “ncc” with “cl: <dig> - neural crest cell”, which the other two systems do not find.

recall for cm and mm are over  <dig>  while ncbo annotator is  <dig> . the low recall seen from ncbo annotator is due to the fact that it is unable to recognize plurals of terms unless they are explicitly stated in the ontology; it correctly finds “melanocyte” but does not recognize “melanocytes”, for example. because cl is small and its terms are quite simple, there are only two main categories of terms missed: missing synonyms and conjunctions. the biggest category is insufficient synonyms. we find “cone” and “cone photoreceptor” annotated with “cl: <dig> - retinal cone cell” and “photoreceptor” annotated with “cl: <dig> - photoreceptor cell”; these two examples make up 33%  of annotations missed by all systems. no systems found any annotations that contained conjunctions. for example, for the text span “retinal bipolar, ganglion, and rod cells”, three cell types are annotated in craft: “cl: <dig> - retinal bipolar neuron”, “cl: <dig> - retinal ganglion cell”, and “cl: <dig> - retinal rod cell”.

gene ontology - cellular component
the cellular component branch of the gene ontology describes locations at the levels of subcellular structures and macromolecular complexes. it is useful for annotating where gene products have been found to be localized. go_cc is similar to cl in that it is a smaller ontology and contains very few synonyms, but the terms are slightly longer and more complex than cl . performance from cm  is the best, with mm  second, and ncbo annotator  third . all parameter combinations for each system on go_cc can be seen in figure
 <dig> 

just as in cl, there are many annotations to “go: <dig> - cell”,  <dig>  or 44% of all  <dig>  annotations. we removed annotations of “cell” and saw a decrease in performance. unlike cl, removal of these annotations does not affect all systems consistently. cm sees a large decrease in f-measure , while mm and ncbo annotator see decreases of  <dig>  and  <dig> , respectively.

precision for all parameter combinations of cm and mm are over  <dig> , with the highest being cm at  <dig> . ncbo annotator widely varies from <  <dig>  to  <dig> . because precision is high, there are very few fps that are found. the fps in common by all systems are due to less specific terms being found and ambiguous terms; ncbo annotator also finds fps from broad synonyms and mm specific errors are from abbreviations. most of the common fps are mentions that are less specific than the gold standard, due to higher-level terms contained within lower-level ones. for instance, “go: <dig> - membrane” is found instead of a more specific type of membrane such as “vesicle membrane”, “plasma membrane”, or “cellular membrane”. all systems find ∼ <dig> annotations of “go: <dig> - capsule” when none are seen in craft; this is due to overloaded terms from different biomedical domains. because ncbo annotator is a web service, we have no control over versions of ontologies used, so it used a newer version of the ontology than that which was used to annotate craft and as inputted into cm and mm. ∼42% of ncbo annotator fps were because “go: <dig> - immunoglobulin complex, circulating” has a broad synonym “antibody” added. because mm generates variants and incorporates synonyms, we see an interesting error produced from mm: “hair” get annotated with “go: <dig> - pilus”. it is not understandable why mm would assume this because “hair” is not a synonym, but in the go definition, pilus is described as a “hair-like appendage”.

mm achieves the highest recall of  <dig>  with cm slightly lower at  <dig>  and ncbo annotator the lowest . ncbo annotator’s inability to recognize plurals and generate variants significantly hurts recall. ncbo annotator can annotate neither “vesicles” with “go: <dig> - vesicle” nor “autosomal” with “go: <dig> - autosome”, which both cm and mm correctly annotate. the largest category of missed annotations represents other ways to refer to terms not in the synonym list. in craft, “complex” is annotated with “go: <dig> - macromolecular complex”, and “antibody”, “antibodies”, “immune complex”, and “immunoglobulin” are all annotated with “go: <dig> - immunoglobulin complex”, but no systems are able to identify these annotations because these synonyms do not exist in the ontology. mm achieves highest recall because it identifies abbreviations that other systems are unable to find. for example, “chr” is correctly annotated with “go: <dig> - chromosome”, “er” with “go: <dig> - endoplasmic reticulum”, and “ecm” with “go: <dig> - extracellular matrix”.

gene ontology - biological process
terms from go_bp are complex; they have the longest average length, contain many words, and almost half contain stop words . the longest annotations from go_bp in craft contain five tokens. distribution of annotations broken down by number of words along with performance can be seen in table
 <dig>  when dealing with longer and more complex terms, it is unlikely to see them expressed exactly in text as they are seen in the ontology. for these reasons, none of the systems performed very well. the maximum f-measures seen by each system can be seen in table
 <dig>  all parameter combinations for each system on go_bp can be seen in figure
 <dig>  examining mean f-measures for all parameter combinations, there is no difference in performance between cm  and mm , but considering only the top 25% of combinations there is a difference between the two. a statistical difference exists between ncbo annotator  and all others, under all comparison conditions.

performance by all parameter combinations for all systems are grouped tightly along the dimension of recall. precision for all systems is in the range of  <dig> – <dig> , with ncbo annotator situated on the extremes of the range and cm/mm distributed throughout. common categories of fps encountered by all three systems are recognizing parts of longer/more specific terms and having different annotation guidelines. as seen in the previous ontologies, high-level terms are seen in lower level terms, which introduces errors in systems that find all matches. for example, we see ncbo annotator incorrectly annotate “go: <dig> - death” within “cell death”, and both cm and mm annotate “development” with “go: <dig> - developmental process” within the span “limb development”. different annotation guidelines also cause errors to be introduced, e.g. all systems annotate “formation” with “go: <dig> - biosynthetic process” because it has a synonym “formation”, but in craft “formation” may be annotated with “go: <dig> - developmental process”, “go: <dig> - biosynthetic process”, or “go: <dig> - cellular component assembly”, depending on the context. most of the fps common to both cm and mm are due to variant generation, for example, cm annotates “region” with “go: <dig> - regionalization” and mm annotates “regular” and “regulator” with “go: <dig> - biological regulation”. even though we see errors introduced through generating variants, many more correct annotations are produced.

in the grouping of all systems performance, recall lies between  <dig> – <dig> , which is low in comparison to most all other ontologies. more than ∼ <dig>   of the fns are due to different ways to refer to terms not in the synonym list. the most missed annotation, with over  <dig>  mentions, are those of “go: <dig> - gene expression”; different surface variants seen in text are “expressed”, “express”, “expressing”, and “expression”. there are ∼ <dig> discontiguous annotations that no systems are able to find. an example of a discontiguous annotation is seen in the following span: the textitd text from “localization of the ptdsr protein” gets annotated with “go: <dig> - protein localization”. many of the annotations in craft cannot be identified using the ontology alone so improvements in recall can be made by analyzing disparities between term name and the way they are expressed in text.

gene ontology - molecular function
the molecular function branch of the gene ontology describes molecular-level functionalities that gene products possess. it is useful in the protein function prediction field and serves as the standard way to describe functions of gene products. like go_bp, terms from go_mf are complex, long, and contain numerous words with  <dig> % containing punctuation and  <dig> % containing numerals . all parameter combinations for each system on go_mf can be seen in figure
 <dig>  performance on go_mf is poor; the highest f-measure seen is  <dig> . besides terms being complex, another nuance of go_mf that makes their recognition in text difficult is the fact that nearly all terms, with the primary exception of binding terms, end in “activity”. this was done to differentiate the activity of a gene product from the gene product itself, for example, “nuclease activity” versus “nuclease”. however, the large majority of go_mf annotations of terms other than those denoting binding are of mentions of gene products rather than their activities.

a majority of true positives found by all systems  are binding terms such as “go: <dig> - binding”, “go: <dig> - dna binding”, and “go: <dig> - small molecule binding”. these terms are the easiest to find because they are short and do not end in “activity”. ncbo annotator only finds binding terms while cm and mm are able to identify other types. cm identifies exact synonym matches; in particular, “fgfr” is correctly annotated with “go: <dig> - fibroblast growth factor-activated receptor activity”, which has an exact synonym “fgfr”. mm correctly annotates “taste receptor” with “go: <dig> - taste receptor activity”. these annotations are correctly found because the terms have synonyms that refer to the gene products as well as the activity. the only category of fps seen between all systems is nested or less specific matches, but there are system-specific errors: ncbo annotator finds activity terms that are incorrect, while mm finds many errors pertaining to synonyms. example of incorrect nested annotations found by all systems are “go: <dig> - binding” annotated within “transcription factor binding” and “go: <dig> - esterase activity” within “acetylcholine esterase”. because the craft annotation guidelines purposely never included the term “activity”, some instances of annotating activity along with the preceding word is incorrect; for example, ncbo annotator incorrectly annotates the span “recombinase activity” with “go: <dig> - recombinase activity”. fps seen only by mm are due to broad, narrow, and related synonyms. we see mm incorrectly annotate “neurotrophin” with “go: <dig> - neurotrophin receptor binding” and “go: <dig> nerve growth factor receptor binding” because both terms have “neurotrophin” as a narrow synonym.

recall for go_mf is low; at best only 10% of total annotations are found. most of the annotations missed can be classified into three categories: activity terms, insufficient synonyms, and abbreviations. the category of activity terms is an overarching group that contains almost all of the annotations missed; we show performance can be improved significantly by ignoring the word activity in the next section. terms that fall into the category of insufficient synonyms  are not only missed because they are seen without “activity”. for instance, “hybridization”, “hybridized”, “hybridizing”, and “annealing” in craft are annotated with both “go: <dig> - rna strand annealing activity” and “go: <dig> - dna strand annealing activity”. these mentions are annotated as such because it is sometimes difficult to determine if the text is referring to dna and/or rna hybridization/annealing; thus, to simplify the task, these mentions are annotated with both terms, indicating ambiguity. another example of insufficient synonyms is the inability of all systems to recognize “k + channel” as “go: <dig> - potassium channel activity”, due to the fact that the former is not listed as a synonym of the latter in the ontology. a smaller category of terms missed are those due to abbreviations, some of which are mentioned earlier in the paper. for instance, in craft, “dhcr7” is annotated with “go: <dig> - 7-dehydrocholesterol reductase activity” and “neo” is annotated with “go: <dig> - kanamycin kinase activity”. overall, there is much room for improvement in recall for go_mf; ignoring “activity” at the end of terms during matching alone leads to an increase in r of  <dig> .

improving performance on go_mf
as suggested in previous work on the go, since the word “activity” is present in most terms, its information content is very low
 <cit> . also, when adding “activity” to the end of the top  <dig> most common other words in go_mf terms , over half are terms themselves
 <cit> . an experiment was performed to evaluate the impact of removing “activity” from all terms in go_mf. for each term with “activity” in the name, a synonym was added to the ontology obo file with the token “activity” removed; for example, for “go: <dig> - receptor activity”, a synonym of “receptor” was added. we tested this only with cm; the same evaluation pipeline was run but the new obo file used to create the dictionary. using the new dictionary, f-measure is increased from  <dig>  to  <dig>  and a maximum recall of  <dig>  is seen . these synonyms should not be added to the official ontology because it contradicts the specific guidelines the go curators established
 <cit> , but should be added to dictionaries provided as input to concept recognition systems.

sequence ontology
the sequence ontology describes features and attributes of biological sequences. the so is one of the smaller ontologies evaluated, ∼ <dig>  terms, but contains the highest number of annotations in craft, ∼ <dig> . ∼92% of so terms contain punctuation, which is due to the fact that the words of the primary labels are demarcated not by spaces but by underscores. many, but not all, of the terms have an exact synonym identical to the official name, but with spaces instead of underscores. cm is the top performer  with mm middle  and ncbo annotator at the bottom . statistically, looking at all parameter combinations mean f-measures, there is a difference between cm and the rest, while a difference cannot be determined between mm and ncbo annotator. when looking at the top 25% of combinations, a difference can be seen between all three systems. all parameter combinations for each system on so can be seen in figure
 <dig> 

most of the fps can be grouped into four main categories: contextual dependence of so, partial term matching, broad synonyms, and variants generated. in all three systems, we see the first three types, but errors from variants are specific to cm and mm. the so is sequence specific, meaning that terms are to be understood in relation to biological sequences. when the ontology is separated from the domain, terms can become ambiguous. for example, “so: <dig> - single” and “so: <dig> - double” refer to the number of strands in a sequence, but can also be used in other contexts, obviously. synonyms can also become ambiguous when taken out of context. for example, “so: <dig> - chromosomal_deletion” has a synonym “deficiency”. in the biomedical literature, “deficiency” is commonly used when discussing lack of a protein, but as a synonym of “chromosomal_deletion” it refers to a deletion at the end of a chromosome; these are not semantically incorrect, but incorrect in terms of craft concept annotation guidelines. because of the hierarchical relationships in the ontology we find the high level term “so: <dig> - region” within other terms; when the more specific terms are unable to be recognized, “region” can still be recognized. for instance, we find “region” incorrectly annotated inside the span “coding region”, when in the gold standard the span is annotated with “so: <dig> - cds_region”. besides being ambiguous, synonyms can also be too broad. for instance, “so: <dig> - non_covalent_binding_site” and “so: <dig> - polypeptide_binding_motif” both have a synonym of “binding”; as seen in go_mf above, there are many annotations of binding in craft. the last category of errors are only seen in cm and mm because they are able to generate variants. examples of erroneous variants are mm incorrectly annotating “based”, “foundation”, and “fundamental” with “so: <dig> - base” and cm incorrectly annotating “probing” and “probed” with “so: <dig> - probe”.

recall on so is close between cm  and mm , while recall for ncbo annotator is  <dig> . the ∼ <dig>  annotations found by both cm and mm that are missed by ncbo annotator are composed of plurals and variants. the three categories that a majority of the fns fall into are insufficient synonyms, abbreviations, and multi-span annotations. more than half of the fns are due to insufficient synonyms or other ways to express a term. in craft, “so: <dig> - sequence_alteration” is annotated to “mutation”, “mutant”, “alteration”, “changes”, “modification”, and “variation”. it may not be the most intuitive annotation, but because of the structure of the so version used in craft, it is the most specific annotation that can be made for mutating/changing a sequence. another example of insufficient synonyms can be seen from the annotation of “chromosomal region”, “chromosomal loci”, “locus on chromosome” and “chromosomal segment” with“so: <dig> - chromosome_part”. these are more intuitive than the previous example; if different “parts” of a chromosome are explicitly enumerated the ability to find them increases. abbreviations or symbols are another category missed. for example, “so: <dig> - wild_type” can be expressed as “wt” or “+” and “so: <dig> - base_pair” is commonly seen as “bp”. these abbreviations are more commonly seen in biomedical text than the longer terms are. there are also some multi-span annotations that no systems are able to find; for example, “homologous human mcoln <dig> region” is annotated with “so: <dig> - homologous_region”.

protein ontology
the protein ontology  represents evolutionarily defined proteins and their natural variants. it is important to note that although the pro technically represents proteins strictly, the terms of the pro were used to annotate genes, transcripts, and proteins in craft. terms from pro contain the most words, have the most synonyms, and ∼75% of terms contain numerals . even though term names are complex, in text, many gene and gene product references are expressed as abbreviations or short names. these references are mostly seen as synonyms in pro. recognizing and normalizing gene and gene product mentions is the first step in many natural language processing pipelines and is one of the most fundamental steps. cm produces the highest f-measure , followed by ncbo annotator , and lastly mm  produces the lowest. all parameter combinations for each system on pro can be seen in figure
 <dig>  unlike most of the ontologies covered above, stemming terms from pro does not result in the highest performance. the best parameter combination for cm does not use any stemmer, which is why ncbo annotator performs better than mm.

all systems are able to find some references to the long names of genes and gene products, such as “pr: <dig> - neurotrophin-3” and “pr: <dig> - annexin a7”. as stated previously, a majority of the annotations in craft are short names of genes and gene products. for example, the long name of pr: <dig> is “atp-binding cassette sub-family g member 8”, which is not seen, but the short name “abcg8” is seen numerous times. the errors introduced by all systems can be grouped into misleading synonyms and different annotation guidelines, while mm also introduces errors from abbreviations and variants. of errors common to all systems, the largest category is from misleading synonyms . for example, ∼ <dig>  incorrect annotations of “pr: <dig> - caspase-14”, which has synonym “mice”, are seen, along with mentions of the word “male” incorrectly annotated with “pr: <dig> - maltose-binding periplasmic protein”, which has the synonym “male”. as seen in these errors, capitalization is important when dealing with short names. differing annotation guidelines also result in matching errors, but because all systems are at the same disadvantage a bias isn’t introduced. the word “protein” is only annotated with the chebi ontology term “protein”, but there are many mentions of the word “protein” incorrectly annotated with a high-level term of pro, “pr: <dig> - protein”. this term was purposely not used to annotate “protein” and “proteins”, as this would have conflicted with the use of the terms of pro to annotate not only proteins but also genes and transcripts. mm generates abbreviations and acronyms, but they are not always helpful. for example, due to abbreviations, “mtf-1” is incorrectly annotated with “pr: <dig> - histidine triad nucleotide-binding protein 2”; because mm is a black box, it is unclear how or why this abbreviation is generated. morphological variants of synonyms are also causes of errors. for example, “finding” and “found” are incorrectly annotated because they are variants of “find”, which is a synonym of “pr: <dig> - transmembrane  <dig> superfamily member 4”.

all systems are able to achieve recall of > <dig>  on at least one parameter combination, with cm and mm achieving  <dig>  by sacrificing precision. when balancing p and r, the maximum r seen is from cm . gene and gene product names are difficult to recognize because there is so much variation in the terms — not morphological variation as seen in most other ontologies, but differences in symbols, punctuation, and capitalization. the main categories of missed annotations are due to these differences. symbols and greek letters are a problem encountered many times when dealing with gene and gene product names
 <cit> . these tools offer no translation between symbols so, for example, “tgf- β2” is unable to be annotated with “pr: <dig> - tgf-beta2” by any systems. along the same lines, capitalization and punctuation are important. the hard part is knowing when and when not to ignore them; any of the fps seen in the previous paragraph are found because capitalization is ignored. both capitalization and punctuation must be ignored to correctly annotate the spans “mr-s” and “mrs” with “pr: <dig> - sterile alpha motif domain-containing protein 11”, which has a synonym “mr-s”. as seen above, there are many ways to refer to a gene/gene product. in addition, an author can define one by any abbreviation desired and then refer to the protein in that way throughout the rest of the paper, so attempting to capture all variation in synonyms is a difficult task. in craft, for instance, “snail” refers to “pr: <dig> - zinc finger protein snai1” and “moonshine” or “mon” refers to “pr: <dig> - e <dig> ubiquitin-protein ligase trim33”.

removing fp pro annotations
in order to show that performance improvements can be made easily, we examined and removed the top five fps from each system on pro. the top five errors only affect precision and can be removed without any impact in recall; the impact can be seen in figure
 <dig>  a simple process produces a change in f-measure of  <dig> – <dig> . a common category of fps removed from all systems are annotations made with “pr: <dig> - protein”, as the term was found ∼ <dig> – <dig>  times. three out of the top five errors common to mm and ncbo annotator were found because synonym capitalization was ignored. for example, “mice” is a synonym of “pr: <dig> - caspase-14”, “find” is a synonym of “pr: <dig> - transmembrane  <dig> superfamily member 4”, and “age” is a synonym of “pr: <dig> - n-acylglucosamine 2-epimerase”. the second largest error seen in cm is from an ambiguous synonym: “pr: <dig> - gastricsin” has an exact synonym “pgc”; this specific protein is not seen in craft, but the abbreviation “pgc” is seen ∼ <dig> times referring to the protein peroxisome proliferator-activated receptor-gamma. by addressing just these few categories of fps, we can increase the performance of all systems.

ncbi taxonomy
the ncbi taxonomy is a curated set of nomenclature and classification for all the organisms represented in the ncbi databases. it is by far the largest ontology evaluated, at almost  <dig>  terms, but with only  <dig>  total ncbitaxon annotations in craft. performance on ncbitaxon varies widely for each system: ncbo annotator performs poorly , mm performers better  and cm performs best . when looking at all parameter combinations for each system, there is generally a dimension  that varies widely among the systems and another that is more constrained .

in craft, text is annotated with the most closely matching explicitly represented concept. for many organismal mentions, the closest match to an ncbi taxonomy concept is a genus or higher-level taxon. for example, “mice” and “mouse” are annotated with the genus “ncbitaxon: <dig> - mus”. cm and mm both find mentions of “mice”, but ncbo annotator does not.  all systems are able to find annotations to specific species; for example, “takifugu rubripes” is correctly annotated with “ncbitaxon: <dig> - takifugu rubripes”. the fps found by all systems are from ambiguous terms and terms that are too specific. since the ontology is large and names of taxa are diverse, the overlap between terms in the ontology and common words in english and biomedical text introduces these ambiguous fps. for example, “ncbitaxon: <dig> - this” is a genus of flies, and “ncbitaxon: <dig> - iris germanica”, a species of monocots, has the common name “flag”. throughout biomedical text there are many references to figures that are incorrectly annotated with “ncbitaxon: <dig> - ficus”, which has a common name of “figs”. a more biologically relevant example is “ncbitaxon: <dig> - codon” which is a genus of eudicots but also refers to a set of three adjacent nucleotides. besides ambiguous terms, annotations are produced that are more specific than those in craft. for example, “rat” in craft is annotated at the genus level “ncbitaxon: <dig> - rattus”; while all systems incorrectly annotate “rat” with more specific terms such as, “ncbitaxon: <dig> - rattus norvegicus” and “ncbitaxon: <dig> - rattus sp.”. one way to reduce some of these false positives is to limit the domains in which matching is allowed, however, this assumes some previous knowledge of what the input will be.

recall of >  <dig>  is achieved by some parameter combinations of cm and mm, while the maximum f-measure combinations are lower . ncbo annotator produces very low recall  and performs poorly due to a combination of: the way craft is annotated and the way ncbo annotator handles linking between ontologies. in ncbo annotator, for example, the link between “mice” and “mus” is not inferred directly, but goes through the mahco ontology
 <cit> , an ontology of major histocompatibility complexes. because we limited ncbo annotator to only using ontology directly tested, the link between “mice” and “mus” is not used, and therefore are not found. for this reason, ncbo annotator is unable to find many of the ncbitaxon annotations in craft. on the other hand, cm and mm are able to find most annotations, the annotations missed are due to different annotation guidelines or specific species with a single-letter genus abbreviation. in craft, there are ∼ <dig> annotations of the ontology root, with text such as “individual” and “organism”; these are annotated because the root was interpreted as the foundational type of organism. an example of a single-letter genus abbreviation seen in craft is “d. melanogaster” annotated with “ncbitaxon: <dig> - drosophila melanogaster”. these types of missed annotations are easy to correct for through some synonym management or post-processing step. overall, most of the terms in ncbitaxon are able to be found and focus should be on increasing precision without losing recall.

chebi
the chemical entities of biological interest  ontology focuses on the representation of molecular entities, molecular parts, atoms, subatomic particles, and biochemical rules and applications. the complexity of terms in chebi varies from the simple single-word compound “chebi: <dig> - water” to very complex chemicals that contain numerals and punctuation, e.g., “chebi: <dig> - luteolin 7-o- 4’-o-beta-d-glucosiduronic acid”. the maximum f-measure on chebi is produced by cm and ncbo annotator  with mm  not performing as well. cm and mm both find ∼ <dig>  tps, but because mm finds ∼ <dig>  more fps its overall performance suffers . all parameter combinations for each system on chebi can be seen in figure
 <dig> 

there are many terms that all systems correctly find, such as “protein” with “chebi: <dig> - protein” and “cholesterol” with “chebi: <dig> - cholesterol”. errors seen from all systems are due to differing annotation guidelines and ambiguous synonyms. errors from both cm and mm come from generating variants while mm produces some unexplained errors. different annotation guidelines lead to the introduction of both fps and fns. for example, in craft, “nucleotide” is annotated with “chebi: <dig> - nucleotidyl group”, but all systems incorrectly annotate “nucleotide” with “chebi: <dig> - nucleotide” because they exactly match. ” that refer to nucleotides within nucleic acids are not annotated with “chebi: <dig> - nucleotide” because this term specifically represents free nucleotides, not those as parts of nucleic acids.) many fps and fns are produced by a single nested annotation; four gold-standard annotations are seen within “amino acid”. of these four annotations, two are found by all systems, “chebi: <dig> - acid” and “chebi: <dig> - amino”, while one introduces a fp: “chebi: <dig> - amino acid” incorrectly annotated instead of “chebi: <dig> - amino-acid residue”, while “chebi: <dig> - amine” is not found by any system. ambiguous synonyms also lead to errors; for example, “lead” is a common verb but also a synonym of “chebi: <dig> - lead atom” and “chebi: <dig> - lead”. variants generated by cm and mm do not always carry the same semantic meaning as the original term, such as “based” and “basis” from “chebi: <dig> - base”. mm also produces some interesting unexplainable errors. for example, “disease” is incorrectly annotated with “chebi: <dig> - maleoyl group”, “chebi: <dig> - -3-carboxyprop-2-enoyl group”, and “chebi: <dig> - malate”; all three terms have a synonym of “mal”, but we could find no further explanations.

recall for maximum f-measure combinations are in a similar range,  <dig> – <dig> . the two most common categories of annotations missed by all systems are abbreviations and a difference between terms and the way they are expressed in text. many terms in chebi are more commonly seen as abbreviations or symbols. for instance, “chebi: <dig> - calcium” is more commonly seen as “ca2+”; even though it is a related synonym, the systems evaluated are unable to find it. a more complicated example can be seen when talking about the chemicals that lie on the ends of amino acid chains. in craft, “c” from “c-terminus” is annotated with “chebi: <dig> - carboxyl group” and “chebi: <dig> - carboxylato group” , which all systems are unable to find; the same principle also applies for the n-terminus. one simple annotation that should be easy to get is “mrna” annotated with “chebi: <dig> - messenger rna”, but cm and ncbo annotator miss it. there is not always an overlap between the term names and their expression in text. for instance, the term “chebi: <dig> - polyatomic entity” was chosen to annotate general “substance” words like “molecule”, “substances”, and “compounds” and “chebi: <dig> - amino-acid residue” is often expressed as “amino acid” and “residue”.

an additional comparison between cm and chemspot
 <cit> , a chebi-specific named entity recognizer with machine learning components, on craft can be seen in additional file
 <dig>  the results of this comparison show that performance between both systems is similar and small changes to stop word lists and dictionaries can have a big impact of f-measure. it also explores fps of chemspot, which could represent a potential missed annotation in craft or lack of a chebi term for a chemical.

overall parameter analysis
here we present overall trends seen from aggregating all parameter data over all ontologies and explore parameters that interact. suggestions for parameters for any ontology based upon its characteristics are given. these observations are made from observing which parameter values and combinations produce the highest f-measures and not from statistical differences in mean f-measures.

ncbo annotator
of the six ncbo annotator parameters evaluated, only three impact performance of the system: wholewordsonly, withsynonyms, and mintermsize. two parameters, filternumber and stopwordscasesensitive, did not impact recognition of any terms, while removing stop words only made a difference for one ontology .

a general rule for ncbo annotator is that only whole words should be matched; matching whole words produced the highest f-measure on seven out of eight ontologies and on the eighth, the difference was negligible. allowing ncbo annotator to find terms that are not whole words greatly decreases precision while minimally, if at all, increasing recall.

using synonyms of terms makes a significant difference in five ontologies. synonyms are useful because they increase recall by introducing other ways to express concepts. it is generally better to use synonyms, as only one ontology performed better when not using synonyms .

mintermsize does not effect the matching of terms but acts as a filter to remove matches of less than a certain length. a safe value of mintermsize for any ontology would be one or three because only very small words  are removed. filtering terms less than length five is useful, not so much for finding desired terms, but for removing undesired terms. undesired terms less than five characters can be introduced either through synonyms or small ambiguous terms that are commonly seen and should be removed to increase performance. 

interacting parameters - ncbo annotator
because half of ncbo annotator’s parameters do not affect performance, we only see interaction between two parameters: wholewordsonly and synonyms. the interactions between these parameters come from mixing wholewordsonly = no and synonyms = yes. as noted in the discussion of ontologies above, using this combination of parameters introduces anywhere from  <dig>  to  <dig>  fps, depending on the test scenario and ontology. these errors are introduced because small synonyms or abbreviations are found within other words.

metamap
we evaluated seven mm parameters. the only parameter value that remained constant between all ontologies was gaps; we have come to the consensus that gaps between tokens should not be allowed when matching. by inserting gaps, precision is decreased with no or slight increase in recall.

the model parameter determines which type of filtering is applied to the terms. the difference between the two values for model is that strict performs an extra filtering step on the ontology terms. performing this filtering increases precision with no change in recall for chebi and ncbitaxon with no differences between the parameter values on the other ontologies. because it is best performing on two ontologies and in mm documentation is said to produce the highest level of accuracy, the strict model should be used for best performance.

one simple way to recognize more complex terms is to allow the reordering of tokens in the terms. reordering tokens in terms helps mm to identify terms as long as they are syntactically or semantically the same. for example, “go: <dig> - x chromosome” is equal to “chromosome x”. practically, the previous example is an exception, as most reorderings are not syntactically or semantically similar; by ignoring token order, precision is decreased without an increase in recall. retaining the order of tokens produces highest f-measure on six out of eight ontologies, while there was no difference on the other two. we conclude for best performance it is best to retain token order.

one unique feature of mm is that it is able to compute acronym and abbreviation variants when mapping text to the ontology. mm allows the use of all acronym/abbreviations , only those with unique expressions  and the default . for all ontologies, there is no difference between using the default or only those with unique expressions, but both are better than using all. using all acronyms and abbreviations introduces many erroneous matches; precision is decreased without an increase in recall. for best performance, use default or unique values of acronyms and abbreviations.

generating derivational variants helps to identify different forms of terms. the goal of generating variants is to increase recall without introducing ambiguous terms. this parameter produces the most varied results. there are three parameter values , and each of them produces the highest f-measure on at least one ontology. generating variants hurts the performance on half of the ontologies. of these ontologies, variants of terms from pro and chebi do not make sense because they do not follow typical english language rules while variants of terms in ncbitaxon and so introduce many more errors than correct matches. all variants produce highest f-measure on cl, while adj noun only variants are best-performing on go_bp. there is no difference between the three values for go_cc and go_mf. with these varied results, one can decide which type of variants to use by examining the way they expect terms in their ontology to be expressed. if most of the terms do not follow traditional english rules, like gene/protein names, chemicals, and taxa, it is best to not use any variants. for ontologies where terms could be expressed as nouns or verbs, a good choice would be to use the default value and generate adj noun only variants. this is suggested because it generates the most common types of variants, those between adjectives and nouns.

the parameters mintermsize and scorefilter do not affect matching but act as a post-processing filter on annotations returned. mintermsize specifies the minimum length, in characters, of annotated text; text shorter than this is filtered out. this parameter acts exactly like that of the ncbo annotator parameter with the same name presented above. mm produces scores in the range of  <dig> to  <dig>  with  <dig> being the most confident. for all ontologies, a score of  <dig> produces the highest p and the lowest r, while a score of  <dig> returns all matches and has the highest r with the lowest p, with  <dig> and  <dig> somewhere between. performance is best on all ontologies when using most of the annotations found by mm, so a score of  <dig> or  <dig> is suggested. as input to mm, we provided the entire document; it is possible that different scores are produced when providing a phrase, sentence, or paragraph as input. the scores are not as important as the understanding that most of the annotations returned by mm are used.

conceptmapper
we evaluated seven cm parameters. when examining best performance, all parameter values vary but one: orderindependentlookup = off, which does not allow the reordering of tokens when matching, is set in the highest f-measure parameter combination for all ontologies. as for mm, it is best to retain ordering of tokens.

searchstrategy affects the way dictionary lookup is performed. contiguous matching returns the longest span of contiguous tokens, while the other two values  can skip tokens and differ on where the next lookup begins. performance on six out of eight ontologies is best when only contiguous tokens are returned. on ncbitaxon, the behavior of searchstrategy is unclear and unintuitive: by returning non contiguous tokens, precision is increased without loss of recall. for most ontologies, only selecting contiguous tokens produces the best performance.

the casematch parameter tells cm how to handle capitalization. the best performance on four out of eight ontologies uses insensitive case matching while there is no difference between the values of casematch on three ontologies. there is no difference on those three because the best parameter combination utilizes the biolemmatizer, which automatically ignores case. thus, best performance on seven out of eight ontologies ignores case. pro is the exception; its best-performing combination only ignores case on those tokens containing digits. for most ontologies, it is best to use insensitive matching.

stemming and lemmatization allow matching of morphological term variants. performance on only one ontology, pro, is best when no morphological variants are used; this is the case because pro terms annotated in craft are mostly short names which do not behave and have the properties of normal english words. the best-performing combination on all other ontologies use either the porter stemmer or the biolemmatizer. for some ontologies, there is a difference between the two variant generators, and for others there was not. even ontologies like chebi and ncbitaxon perform best with morphological variants because they are needed for cm to identify inflectional variants such as plurals. for most ontologies, morphological variants should be used.

cm can take a list of stop words to be ignored when matching. performance on seven out of eight ontologies is better when stop words are not ignored. ignoring pubmed stop words from these ontologies introduces errors without an increase in recall. an example of one error seen is the span “proteins that target” incorrectly annotated with “go: <dig> - protein targeting”. the one ontology, ncbitaxon, where ignoring stop words results in best performance is due to a specific term, “ncbitaxon:  <dig> - this”. by ignoring the word “this”, ∼ <dig>  fps are prevented. if there is not a specific reason to ignore stop words, such as the terms seen in ncbitaxon, we suggest not ignoring stop words for any ontology.

by default cm only returns the longest match; all matches can be returned by setting findallmatches to true. seven out of eight ontologies perform better when only the longest match is returned. returning all matches for these ontologies introduces errors because higher-level terms are found within lower-level ones and the craft concept annotation guidelines specifically prohibit these types of nested annotations. chebi performs best when all matches are returned because it contains such nested annotations. if the goal is to find all possible annotations or it is known that there are nested annotations we suggest to set findallmatches to true, but for most ontologies, only the longest match should be returned.

there are many different types of synonyms in ontologies. when creating the dictionary with the value all, all synonyms  are used; the value exact creates dictionaries with only the exact synonyms. the best performance on six out of eight ontologies uses only exactsynonyms. on these ontologies, using only exact instead of all synonyms increases precision with no loss of recall; use of broad, related, and narrow synonyms mostly introduce errors. performance on pro and go_bp is best when using all synonyms. on these two ontologies, the other types of synonyms are useful for recognition and increase recall. for most ontologies using only exact synonyms produces the best performance.

interacting parameters - conceptmapper
we see the most interaction between parameters in cm. there are two different interactions that are apparent in certain ontologies: 1) stemmer and synonyms and 2) stopwords and synonyms. the first interaction found is in chebi. we find the synonyms parameter partitions the data into two distinct groups. within each group, the stemmer parameter has two completely different patterns . when only exactsynonyms are used all three stemmers are clustered, with biolemmatizer performing best, but when allsynonyms are used it is hard to find any difference between the three stemmers. the second interaction found is between the stopwords and synonyms parameters. in go_mf several terms have synonyms that contain two words, with one being in the pubmed stop word list. for example, all mentions of “activity” are incorrectly annotated with “go: <dig> - hyaluronan synthase activity”, which has a broad synonym “has activity”; “has” is contained in the stop word list and therefore is ignored.

not only do we find interactions within cm, but some parameters also mask the effect of other parameters. it is already known and stated in the cm guidelines that the searchstrategy values skip any match and skip any allow overlap imply that orderindependentlookup is set to true. analyzing the data, it was also discovered that biolemmatizer converts all tokens to lower case when lemmas are created, so the parameter casematch is effectively set to ignore. for these reasons, it is important to not only consider interactions but also the masking effect that a specific parameter value can have on another parameter.

substring matching and stemming
through our analysis we have shown that accounting for morphology of ontological terms has an important impact on the performance of concept annotation in text. normalizing morphological variants is one way to increase recall by reducing the variation between terms in an ontology and their natural expression in biomedical text. in ncbo annotator, morphology can only be accommodated in the very rough manner of either requiring that ontology terms match whole  words in the running text, or allowing any substring of the text whatsoever to match an ontology term. this leads to overall poorer performance by ncbo annotator for most ontologies, through the introduction of large numbers of false positives. it should be noted that some substring annotations may appear to be valid matches, such as the annotation of the singular “cell” within “cells”. however, given our evaluation strategy, such an annotation would be counted as incorrect since the beginning and end of the span do not directly match the boundaries of the gold craft annotation. if a less strict comparator were used, these would be counted as correct, thus increasing recall, but many fps would still be introduced through substring matching from e.g., short abbreviation strings matching many words.

mm always includes inflectional variants  and is able to include derivational variants  through a configurable parameter. cm is able to ignore all variation , only perform rough normalization by removing common word endings , and handle inflectional variants . we currently do not have a domain-specific tool available for integration into cm to handle derivational morphology, as well, but a tool that could handle both inflectional and derivational morphology within cm would likely provide benefit in annotation of terms from certain ontologies. if ncbo annotator were to handle at least plurals of terms, its recall on cl and go_cc ontologies would greatly increase because many terms are expressed as plurals in text. for ontologies where terms do not adhere to traditional english rules , using morphological normalization actually hinders performance.

tuning for precision or recall
we acknowledge that not all tasks require a balance between precision and recall; for some tasks high precision is more important than recall, while for others the priority is high recall and it is acceptable to sacrifice precision to obtain it. since all the previous results are based upon maximum f-measure, in this section we briefly discuss the tradeoffs between precision and recall and the parameters that control it. the difference between the maximum f-measure parameter combination and performance optimized for either precision or recall for each system-ontology pair can be seen in figure
 <dig>  by sacrificing recall, precision can be increased between  <dig> and  <dig> . on the other hand, by sacrificing precision, recall can be increased between  <dig> and  <dig> .

the best parameter combinations for optimizing performance for precision and recall can be seen in table
 <dig>  unlike the previous combinations seen above, parameters that produce the highest recall or precision do not vary widely between the different ontologies. to produce the highest precision, parameters that introduce any ambiguity are minimized; for example, word order should be maintained and stemmers should not be used. likewise, to find as many matches as possible, the loosest parameter settings should be used; for example, all variants and different term combinations should be generated along with using all synonyms. the combination of parameters that produce the highest precision or recall are very different from the maximum f-measure-producing combinations.

CONCLUSIONS
after careful evaluation of three systems on eight ontologies, we can conclude that conceptmapper is generally the best-performing system. cm produces the highest f-measure on seven out of eight total ontologies, while ncbo annotator and mm both produce the highest f-measure on only one ontology . out of all systems cm balances precision and recall the best; it produces the highest precision on four ontologies and the highest recall on three ontologies. the other systems perform well in one dimension but suffer in the other. mm produces the highest recall on five out of eight ontologies but precision suffers because it finds the most errors; the three ontologies for which it did not achieve highest recall are those where variants were found to be detrimental . on the other hand, ncbo annotator produces the highest precision for four ontologies but falls behind in recall because it is unable to recognize plurals or variants of terms. overall, cm performs best out of all systems evaluated on the concept normalization task.

besides performance, another important thing to consider when using a tool is the ease of use. in order to use cm, one must adopt the uima framework. transforming any ontology for matching is easy with cm with a simple tool that converts any obo ontology file to a dictionary. mm is a standalone tool that works only with umls ontologies natively; getting it to work with any arbitrary ontology can be done but is not straightforward. mm is the most like a black box of all the systems, which results in some annotations that are unintuitive and cannot be traced to their source. ncbo annotator is the easiest to use as it is provided as a web service, with large retrieval occurring through a rest service. ncbo annotator currently works with any of the 330+ bioportal ontologies. drawbacks of ncbo annotator are due to it being provided as a web service, they include changes in the underlying implementation, resulting in different annotations returned over time; there is also no control over the version of the ontologies used or the ability to add an ontology.

using the default parameters for any tool is a common practice, but as seen here, the defaults often do not produce the best results. we have discovered that some parameters do not impact performance, while others greatly increase performance when compared to defaults. as seen in the results and discussion section, we have provided parameter suggestions for not only the ontologies evaluated but also provide general suggestions that can be applied to any ontology. we can also conclude that parameters cannot be optimized individually. if we didn’t generate all parameter combinations and instead examined parameters individually, we would be unable to see these interacting parameters and could have chosen a non-optimal parameter combination as the best.

complex multi-token terms are seen in many ontologies and are more difficult to normalize than the simpler one- or two-token terms. inserting gaps, skipping tokens, and reordering tokens are simple methods currently implemented in both cm and mm. these methods provide a simple heuristic but do not always produce valid syntactic structures or retain the semantic meaning of the original term. from our analysis above, we can conclude that more sophisticated, syntactically valid methods need to be implemented to recognize complex terms seen in ontologies such as go_mf and go_bp.

our results demonstrate the important role of linguistic processing, in particular morphological normalization of terms, during matching. several of the highest-performing sets of parameters take advantage of stemming or handling of morphological variants, though the exact best tool for this job is not yet entirely clear. in some cases, there is also an important interaction between this functionality and other system parameters, leading to some spurious results. it appears that these problems could be addressed in some cases through more careful integration of the tools and in others through simple adaptation of the tools to avoid some common errors that have occurred.

in this paper, we established baselines for performance of three publicly available dictionary-based tools on eight biomedical ontologies, analyzed the impact of parameters for each system, and made suggestions for parameter use on any ontology. we can conclude that of the tested tools, the generic conceptmapper tool generally provides the best performance on the concept normalization task, despite not being specifically designed for use in the biomedical domain. the flexibility it provides in controlling precisely how terms are matched in text makes it possible to adapt it to the varying characteristics of different ontologies.

abbreviations
cm: conceptmapper; mm: metamap; ncbo annotator: ncbo open biomedical annotator; tp: true positive; fp: false positive; fn: false negative; p: precision; r: recall; f: f-measure; gs: gold standard; cl: cell type ontology; go_mf: gene ontology: molecular function; go_cc: gene ontology: cellular component; go_bp: gene ontology: biological process; chebi: chemical entities of biological interest; ncbitaxon: ncbi taxonomy; so: sequence ontology; pro: protein ontology; param: parameter.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
kv and leh initiated the project and defined the overall research questions. kv, kbc, and cf planned the experiments. cf, wbj, and cr constructed evaluation piplines and ran the experiments. cf and bg performed data and error analysis. cf wrote the first version of methods, results and discussion, and conclusions sections of the manuscript. kv, kbc, and cf wrote the background and introduction. mb contributed ontology expertise to the manuscript. kv, kbc, and leh supervised all aspects of the work. all authors read and approved the final manuscript.

supplementary material
additional file 1
stop words list. text file that contains a list of stop words used. it consists of the pubmed stop words available at http://www.ncbi.nlm.nih.gov/books/nbk3827/table/pubmedhelp.t43/ along with the addition of the conjunction “or”.

click here for file

 additional file 2
detailed analysis of parameters for each system-ontology pair. here we present a detailed analysis of the statistically significant parameters for each system-ontology pair. many interesting examples are given to show the impact of changing a single parameter.

click here for file

 additional file 3
comparison of cm to chemspot. comparison between conceptmapper and chemspot, a chebi specific named entity recognition tool. it was performed and written up as a lab rotation by benjamin garcia.

click here for file

 acknowledgements
this work was supported by nih grant 2t15lm <dig> to leh and nsf grant dbi- <dig> to kv. kv was also supported by national ict australia . nicta is funded by the australian government as represented by the department of broadband, communications and the digital economy and the australian research council through the ict centre of excellence program.

we would like to acknowledge helen johnson and césar mejia muñoz for executing early versions of these experiments. we also appreciate willie rogers from nlm with help getting metamap to work with ontologies other than those in the umls.
