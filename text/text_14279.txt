BACKGROUND
in eukaryotic genomes transcriptional regulation is often mediated by the concerted interaction of several transcription factors and cofactors  <cit> . each transcription factor recognizes its own binding site or regulatory motif. the combination of several transcription factor specific motifs is called a cis-regulatory module . the presence of a cis-regulatory module thus determines the transcriptional response of a specific gene. as coexpression might imply a similar mechanism of coregulation, coexpressed genes can be searched for the presence of statistically overrepresented crms. some strategies have been developed to search de novo for the best transcription factor binding site combination, such as for instance cismodule  <cit> . the complex nature of the problem, however, still poses some restrictions on the applicability of these de novo algorithms. most of the more pragmatic module detection methods are combinatorial search strategies that start from a set of binding sites for individual motifs. these binding sites are obtained by screening intergenic sequences with each tf-specific position weight matrix . subsequently these methods search for the motif combination that is statistically most overrepresented in a set of genes of interest, as compared to the background  <cit> . although these algorithms can in principle be applied to sets of coexpressed genes, most of them do not explicitly assess the specificity of the overrepresented module for the observed expression pattern in the coexpressed geneset. exceptions are for instance creme  <cit> , which provides an extensive statistical framework and moduleminer  <cit> , which does apply a leave one out strategy in combination with a genomewide ranking to define the modules most specific for the coexpressed geneset as compared to the remainder of the genome. the drawback of the latter method is that the underlying optimization procedure is computationally very intensive restricting its use to relatively small sets of genes and a small number of tfs.

in this work we propose a novel framework for the detection of crms based on itemset mining. we tested our framework on a benchmark compiled from a recent chip-chip experiment in human stem cells and compared its performance to several previously described module detection algorithms.

RESULTS
module detection framework
the analysis flow we used is outlined in figure  <dig>  like other module detection methods, our method starts from an existing library of pwms extracted from transfac  <cit>  . all intergenic sequences of a coexpressed or coregulated set of genes are screened with those pwms to identify per pwm the p-value of the best hit in each sequence  <cit> . the search for crms then boils down to searching through an exponentially large number of combinations of these individual binding sites . traditional optimization based methods rely on heuristics to make this search computationally tractable; however, such methods come with no guarantee that a globally optimal solution will be found. in contrast, here we applied a strategy from itemset mining  <cit>  . itemset mining approaches exhaustively investigate all possibly interesting solutions , and hence do not suffer from local optima problems. they are able to do this despite the exponential number of combinations of binding sites by exploiting properties of the search space that allow for efficient pruning during the search. the output of our itemset mining algorithm is an exhaustive list of all possible motif modules . to filter the biologically most interesting crm candidates from this list, we compute a score for each of the potential crms . this score assess how specific this crm is for the set of genes in which it occurs, and for the cluster of input genes as a whole. a crm is considered significant for the genes in which it occurs if that geneset does not contain many other overrepresented crms, and it is considered specific for the whole cluster of input genes if the crm is statistically more overrepresented in this cluster of genes than in the remainder of the genome. by iteratively applying this scoring system we can prioritize a list of non-redundant and most promising crms. the higher the rank of a crm in this list, the higher its potential of being a biologically valid one . as such, our framework combines advantages associated with the efficiency of an itemset mining search strategy with those related to statistical scoring measures.

benchmark dataset
the application of chromatin immunoprecipitation combined with dna microarray techniques  in eukaryotes allows the genome wide mapping of the physical interaction between a tf and its target gene. our test set was derived from a genomewide chip-chip analysis performed by boyer et al.  <dig>  <cit>  . it consists of  <dig> genes that co-bind three core tfs, oct <dig>  sox <dig>  nanog  in their  <dig> bp proximal promoter region. moreover, the three tfs bind in each other's close proximity turning them in a true case example of a crm. the advantage of this dataset over previous ones is that it is much larger , which allows us to fully exploit the potential of our method.

note that moduledigger will normally be applied to sets of genes that are coexpressed, as identified for example by microarray data. here the set of genes is selected based on chip-chip data instead. while this may be unusual in practical applications, knowing exactly which regulators bind the intergenic regions of the set of genes selected, allows us to better assess the performance of our method.

modules detected by moduledigger on the benchmark set
to test moduledigger we ran it on the  <dig> bp proximal promoter regions of all  <dig> genes. as mentioned above, moduledigger uses a two step approach: it first exhaustively enumerates all crms that occur in the benchmark geneset and subsequently assigns a rank to all crms that is proportional to the specificity of the module for the geneset in which it occurs and for the set of input genes as a whole. for benchmarking our method we considered only the module consisting of the three tfs oct <dig>  sox <dig> and nanog, as a valid module. all other modules were considered biologically invalid. note that this is a conservative assumption, which may result in an overestimation of the number of modules considered to be biologically invalid as the genes of our dataset may contain other yet uncharacterized crms. the performance of the algorithm is assessed by the average rank the valid module receives after running the algorithm. in our test we started off with the simple case in which we only used ten tfs as input  . the complexity of the problem was increased by gradually including more randomly selected tfs  . to asses the statistical significance of the ranked modules, we used a strategy described by tusher et al.  <cit> . we compared the score that the valid module received with the score of a module that received a rank similar to the one of the valid module, in a randomized version of the dataset . we can then conclude that if the score of the biologically valid module is higher than the score of an equally ranked module in more than 90% of the randomized datasets, it was successfully assigned a significantly high rank by moduledigger. we also assessed the number of false positive modules that should be expected to be discovered by moduledigger, by counting the number of modules in the randomized dataset that contained a score higher than the score of the true module in our benchmark dataset.

these results  show that in the presence of a restricted number of tfs , moduledigger is able to identify the biologically valid module consistently and significantly as one of the more highly ranked modules. inspecting the composition of the more highly ranked modules showed that many of them consist of  random tf in combination with at least either oct <dig>  sox <dig> or nanog. further increasing the noise in the dataset  lowers the rank of the biologically valid crm and increases the number of invalid modules among the higher ranked modules. the search space increases and it becomes easier to randomly detect modules that receive a score equal to the score of the biologically valid module.

for each specified number of tfs,  <dig> different runs were performed which differed in the pwms randomly selected from transfac. average, median and std: average, median and standard deviation of the rank of the biologically valid module . rank: the rank the valid module received in our output; score of valid module versus random modules : assesses whether the score of the true module is higher than the score of an equally ranked module in a randomized dataset . number of false positives : the number of modules in the randomized dataset that contained a score higher than the score of the valid module in our benchmark dataset.

comparison with other crm detection algorithms
in this section, we compare our module detection framework first with a de novo module detection tool cismodule  <cit> . next we evaluate the performance of modulesearcher  <cit>  on our benchmark data set. modulesearcher  <cit>  is a module detection algorithm that starts from a library of known pwms and subsequently searches for the combination of binding sites that is overrepresented in the set of coregulated genes. finally, we compare moduledigger with clover  <cit> . although clover was developed to search for individually over-represented tfbs in the intergenic sequences of coexpressed genes, it has previously shown to also be able to compete with module detection methods in identifying true regulatory modules.

first we ran cismodule  <cit> , a de novo algorithm on our benchmark set . cismodule did detect a module of three tfs in our dataset, but none of the binding sites corresponded to the oct <dig>  sox <dig> and nanog binding sites. we can, however, not exclude that indeed a module composed of yet unknown sites is more overrepresented than the module described by boyer et al.  <cit> .

secondly, we tested to what extent clover  <cit> , modulesearcher  <cit>  and moduledigger were able to detect a module of the three known binding sites in our benchmark set  . we used all  <dig> intergenic sequences as input. the number of input pwms was varied. we started with the easy case in which we only provided four pwms as input, i.e. the three pwms known to belong to the crm and one randomly sampled from transfac . then we gradually increased the complexity of the problem, i.e. finding the right crm by using more tfs as input  . for each tool we recorded the running time and tested whether the output contained the crms for which boyer et al.  <cit>  provided experimental evidence. because not all methods could identify the module consisting of the three tfs oct <dig>  sox <dig>  and nanog in the set of coregulated genes, we define in this section not only the module containing the three tfs as the valid module but also the modules consisting of two out of three tfs are considered to be valid modules.

 for all algorithms we used as input the benchmark set, the pwms of oct <dig>  sox <dig>  nanog and one random pwm. nm: number of modules present in the output for those runs where the rr =  <dig> . srr : number of runs for which the output contained a module corresponding to the valid modules . sn: number of genes containing the valid module in the output .  similar to  but using oct <dig>  sox <dig>  nanog in combination with  <dig> randomly selected pwms.

when modulesearcher  <cit>  was run in the a* mode and using four tfs as input, it was able to find the complete oct <dig>  sox <dig> and nanog module in all  <dig> runs with a quite high specificity. more specifically, besides the module consisting of the three tfs, the output contained on average  <dig>  other modules amongst which were also the sox <dig>  nanog module. the oct <dig>  sox <dig> and nanog module could, however, only be located in a very small number of the  <dig> genes . no output was obtained when running modulesearcher using the genetic algorithm mode. clover  <cit>  detected only oct <dig>  sox <dig> as single overrepresented tfs but not nanog. therefore only the combination oct <dig>  sox <dig> was retrieved in every run and among on average  <dig>  other modules. the sensitivity was higher than for modulesearcher: the module was present in  <dig> % of the  <dig> genes. moduledigger found all valid modules  in all runs, and this with a rather good specificity. for the oct <dig>  sox <dig>  nanog module, for instance, over the  <dig> runs on average  <dig> modules were more highly ranked than the oct <dig>  sox <dig>  nanog module. note however, that amongst these  <dig> modules there are also the combinations oct <dig>  sox <dig>  and oct <dig>  nanog . the sensitivity is also quite high as valid modules were detected in 27–49% of the genes.

when repeating the experiment for ten tfs, only moduledigger is able to find the complete oct <dig>  sox <dig>  nanog module and this with a very high specificity and sensitivity. from these results it is clear that it is much easier to assign a high rank to a module of three tfs than to a module of two tfs. for the valid modules that consist of two motifs, modulesearcher and moduledigger perform equally well regarding the specificity, as assessed by the total number of modules  that were identified. however, moduledigger detects the valid modules in more test runs, as indicated by the sum of the recovery rate  over all ten runs. moduledigger also shows a higher sensitivity, i.e. the number of genes in which the valid modules are detected is larger.

discussion
our itemset mining methodology detects crms by taking as input a set of genes, assuming that at least a subset of these are coregulated, and searches for a recurrent pattern of tfbs. the complete analysis flow consists of three steps: step 1: motif screening step to predict all possible tfbs; step 2: the enumeration of all frequent crms ; step  <dig> the module rank assignment . our method differs from previous approaches in that it first enumerates all the possible combinations of the tfbss given in the input, and subsequently applies an iterative ranking step in which crms that are specific for the set of genes in which the crm occurs , statistically overrepresented in the complete set of input genes , and not overlapping with higher ranked crms, are prioritized by assigning them an overall module score. by using this prioritized list of modules we can define how many modules still score higher than the one the user selects and by using order statistics we can assess the number of false positives to expect if we choose a specific threshold for the module score. the advantage of using an itemset mining approach instead of an optimization-based strategy is clear from the comparison with other module detection methods. first, the algorithm is much faster and can easily be applied to larger datasets . secondly, because it exhaustively explores all solutions it does not risk to get stuck in a local optimum. optimization based strategies may not return any output, or they may output a module different from the biologically valid one, even if it is the global optimum.

CONCLUSIONS
we have presented an efficient methodology to detect crms based on itemset mining, implemented in the tool moduledigger. by applying our method on a benchmark dataset of increasing complexity we have explored the potential and limits of our strategy.

