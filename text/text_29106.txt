BACKGROUND
somatic mutations are genetic changes that occur in somatic cells after conception. cancer is driven by such somatic alterations, and thus cataloging somatic mutations is essential to understand the genetic bases of cancer development. with the burst of high-throughput sequencing data generated in recent years, extensive efforts have been made towards accurate somatic mutation-calling. many calling algorithms are now publicly available, including shimmer  <cit> , mutect  <cit> , strelka  <cit> , mutationseq  <cit> , jointsnvmix  <cit> , and somaticsniper  <cit> . additional in-house callers are likely to be under development for on-going studies. nonetheless, many challenges remain to be addressed, for example, removing artifactual variants from multiple sources, detecting rare variants in highly heterogeneous tumor samples, detecting variants at a shallower sequencing coverage. every caller will tackle these issues, but different callers are likely to be more successful on some of them and less so on others. as a consequence, finding the single best performing caller is not easy, and perhaps not even feasible.

having multiple callers on hand, anyone conducting a mutation analysis may want to apply all of the callers to his/her data with the aim of later constructing a list of final calls. in essence, combining calls from multiple callers amounts to developing a strategy to sort the calls to be included as final calls. this can be done effectively if one can systematically assign a confidence measure to be a somatic mutation across the full list. in general, pursuing this goal requires a validation dataset to some extent. for example, the paper by lower et al.  <cit>  presented a method to prioritize calls from three methods by assigning false discovery rate confidence values, but it requires the independent sequencing of at least one of the tumor or normal samples.

in our work, we are considering a situation in which mutation-calling is done  for many tumor-normal sequence pairs across a large genomic regions such as whole genome or exome, but only a limited resource is available for validation. for example, in practice, often only a small fraction of detected mutations can be validated or a small subset of regions in a selected list of samples are re-sequenced for evaluation purposes. we aim to build a combined caller, which is learned based on the relatively small validation dataset but can be applied to a wider dataset generated based on a similar protocol.

a large corpus in the statistical literature is dedicated to combining individual learners, see e.g. chapter  <dig> of  <cit> , however most of them — e.g., boosting, bagging and random forests — are based on building individual learners from descriptors rather than combining outputs of algorithms. stacking <cit>  was introduced as a mean of combining such outputs. in this paper, we exploit this well established framework to merge the outputs of different callers.

specifically, we present a statistical approach for combining calls from multiple somatic mutation-callers, when validation is impartially done for all mutations detected by all callers in a selected set of regions or samples. for  <dig> tumor-normal exome-seq pairs from the cancer genome atlas  endometrial study  <cit> , single nucleotide variant  type mutations  were detected by three somatic mutation-callers. validation through an independent re-sequencing was impartially done for all the mutations detected from  <dig> selected patients across the whole exome and for those mutations detected within  <dig> genes of interest across all  <dig> patients. we used this data to show how our statistical approach improves against individual callers and naive combination based on caller intersection. we also show that this improvement is maintained when the parameters of the model are estimated on a set of samples or regions different from the ones on which the performance is evaluated.

methods
our aim is to build a combined caller using the mutation outputs generated by multiple callers based on the same paired tumor-normal sequence data , when the mutation calls are impartially validated. for illustration purposes, we assume k= <dig> callers  are used for mutation-calling. the most basic and key information available in each mutation output is the list of positions detected as point mutations. a mutation output may include additional features such as mutation substitution type, mutation quality score, and perhaps details of filters applied to remove artifactual or low-quality variants. when the raw sequence data are available, genomic features can be computed for each mutation site such as sequencing depth and the variant allele fraction  for each tumor and normal sample. the more information that is available, the more powerful are the callers that can be constructed.

taking intersections or unions
one natural and simple way to build a combined caller is to take intersections or unions of the calls from three callers as final calls. for example, one may take the mutations detected by all callers , or take intersections of mutations from two callers , or take calls detected by at least two callers , or even take calls detected by any caller . this strategy is very intuitive and can be immediately used in practice once a venn diagram is drawn from calls, as in figure  <dig>  note that building this type of combined caller does not require a validation dataset — although estimating its performance does.

cumulatively adding mutation sets based on combination call status
we explained how the sets of mutation sites defined by a venn diagram could be used to build a combined caller. restricting ourselves to mutation sets corresponding to a combination of detection statuses of the k callers, we obtain a partition of the mutation sites into 2
k
- <dig> disjoint subsets. this partition can be used to systematically sort mutations by some measure of confidence that we have in their being somatic mutations. on figure  <dig>  these 23-1= <dig> disjoint sets are abc, ab without c, ac without b, bc without a, a only, b only, and c only. we sort these 2
k
- <dig> disjoint sets by their validation rate, i.e., by the proportion of true mutations that they contain, as shown on table  <dig>  these sorted sets of sites define a sequence of combined callers, sorted by stringency. the most stringent combined caller only predicts the site in the first set to be mutations. then less stringent combined callers can be defined by adding the sites in the sorted sets.

for each mutation set , the validation rate , the false positive  and true positive  counts, and the cumulative false positive  and cumulative true positive  rates in percentage, are presented. mutation sets are ordered by the validation rate.

fitting logistic models using the call status and genomic features
stacked generalization was first introduced in the neural network community  <cit>  and later adapted to the statistics literature  <cit> , as a systematic way to combine classifiers.

given a set of calls c
i
k
∈{ <dig> } for site 1≤i≤n and caller 1≤k≤k, stacking aims at building a linear function of the calls for each site i which predicts its true status y
i
 as accurately as possible. in other words, we represent each site by its k calls from the different callers, and learn a new classifier of mutation sites in this feature space. formally, given a set of n sites with known calls c
i
k
 for all callers and known true status y
i
, a linear stacking approach would solve: 

  arg minβ <dig> …,βk∑i=1nyi-∑k=1kβkcik <dig>  

i.e., a linear regression in the call space, estimating weights β
k
 such that a linear combination of the calls based on these weights is close to the true mutation status. the mutation status of a new site c
i
 defined by its calls from the k individual callers would then be predicted via 

  f=Δ∑k=1kβkcik. 

in practice, we use a logistic model rather than a linear one, because it is better suited to binary classification  <cit>  – we only have binary mutation status { <dig> } as opposed to scores or continuous confidence measures. our estimator therefore becomes: 

  arg minβ <dig> …,βk∑i=1nlog1+exp∑k=1kβkcik-yi∑k=1kβkcik. 

if the features c
i
k
 are binary, which is the case if the individual callers returned binary decisions rather than continuous scores, the resulting classifier f is the sum of weights β
k
 for callers which classified the site i as a somatic mutation. it can only take 2
k
- <dig> distinct values on sites which were called by at least one caller. each of these values corresponds to a unique combination of calls by the individual methods, which in turn corresponds to one of the disjoint subsets defined by the venn diagram discussed in section ‘cumulatively adding mutation sets based on combination call status’. if the effects of callers are additive, then the ranking of the sites defined by f is expected to essentially behave like the more naive one defined in section ‘cumulatively adding mutation sets based on combination call status’.

the estimators defined by  and  combine the individual callers uniformly for all sites. it is however conceivable that some callers perform better for some types of sites, e.g., those with low coverage, and less well for others. we now assume that some descriptors g
i
j
, 1≤j≤p, of each site i are available besides the detection status of the three callers and the validation status. these descriptors could typically be genomic features.

feature-weighted linear stacking  replaces each parameter β
k
 of the stacking regression estimator  by a linear combination of the descriptors g
i
j
: 

  βk=∑j=1pαjkgij, 

where the α
j
k
 parameters are weights corresponding to the relevance of feature g
i
j
 to measure how predictive caller k is for site i. the weights β
k
 are therefore site-specific, accounting for the fact that the relevance β
k
 of a particular caller k may be different for sites with different genomic features.

plugging weights  in the linear function  yields a different set of coefficients for each site i : h=∑k=1kβkcik=∑k=1k∑j=1pαjkgijcik. h is now a linear function of the k×p products of features g
i
j
 and calls c
i
k
 so fwls equivalently amounts to: 

• describing each site by this extended set of features, and

• estimating a linear classifier of mutation sites in this space.

formally, after plugging  in our stacking estimator  we see that fwls solves: 

  arg minγ <dig> …,γk×p∑i=1nlog1+exp∑l=1k×pγlxil-yi∑l=1k×pγlxil, 

where xil∈ℝk×p contains all the products of calls and genomic features for site i. the k×p parameters γ
l
 are the weights of the logistic regression. they are strictly equivalent to the α
j
k
 parameters of , we only use them to emphasize that fwls can be formulated as a regular logistic regression estimator in an expanded feature space.

in the experiments of this paper, we consider all combinations of call status defined in section ‘cumulatively adding mutation sets based on combination call status’, i.e., all products of single calls rather than the single calls. technically this can still be cast as a fwls model, by adding all single calls and products of single calls to the set of features g
i
j
. in practice, our implementation relies on , i.e., on a logistic regression in an expanded feature space.

finally, since the resulting feature space can become large, we choose to use an ℓ1-penalized version of : 

  arg minγ <dig> …,γk×p∑i=1nlog1+exp∑l=1k×pγlxil-yi∑l=1k×pγlxil+λ∑l=1k×p|γl|. 

penalizing the ℓ <dig> norm ∑l=1k×p|γl| of the parameter is known to lead to sparse estimators  <cit> , and λ∈ℝ is used to adjust the level of sparsity.

implementation and evaluation of combined callers
the approach of building a combined caller by taking intersections or unions  does not require a training set, and evaluation of the caller can be done straightforwardly on a test set. the approach that cumulatively adds disjoint subsets  uses a training set to determine the order of subsets , and evaluates the performance on a test set using the order. for the approach building a caller by fitting a logistic model , a training set is used to estimate the γ
l
 parameters of . in order to choose the hyperparameter λ, we perform 10-fold cross validation on the training set for each candidate λ to estimate the error of the associated model. then the most parsimonious model whose error is no more than one standard error above the error of the best model is chosen. once λ is selected, we re-estimate γ
l
 using this λ on the whole training set, and evaluate its performance on the test set. experiments were conducted using the r package glmnet  <cit> , which implements penalized glms, in particular the ℓ <dig> penalized logistic regression of which  is an instance. the r scripts that contain our detailed implementation are included as additional file  <dig> 

RESULTS
we have used the mutation datasets generated for the tcga endometrial study  <cit> . for  <dig> tumor-normal illumina exome-sequence pairs, somatic-mutation calling was done by three centers whose algorithms are referred to here as caller a, b, and c. in total,  <dig>  single nucleotide variant  type of mutations were detected. a large fraction of the mutations were targeted for custom capture validation. as explained in the additional file 2: supplementary methods, these sites were captured using the nimblegen technology and then re-sequenced independently using an illumina highseq  <dig>  in particular, impartial validation  was carried out for all mutations in  a randomly selected  <dig> patients and  an additional  <dig> genes of interest from the remaining  <dig> patients. validation status was successfully determined for all but a small fraction  of the validated mutations. for more details about the validation and determining the validation status, see additional file 2: supplementary methods. our final dataset consists of the successfully validated mutations:   <dig>  sites in the selected  <dig> patients and  an additional  <dig>  sites within the  <dig> genes of interest. note that almost all of these sites  are included as example datasets in our software package .

for each point mutation site in our final dataset, we know the validation status , the call status  by each of the three callers, the mutation substitution type , and the sequencing depth and the variant allele fraction in each tumor and normal sample based on the exome sequence data that was used for mutation-calling. a brief summary of our dataset is included as table  <dig>  additional file 2: table s <dig> and figures s1–s <dig>  caller b provided more information besides the positions of the detected mutations. for a broader set of somatic variants , it reported the mutation quality score as well as the pass/fail status of individual filters at each site. although the detailed description of each filter was not available, the filter outcomes were available , which we were able to use for improving caller b’s performance . in section ‘building and evaluating combined callers’, we demonstrate how to build a combined caller using the calling status of the three individual mutation callers and a few genomic features. in section ‘improving a single caller’s performance using details of its filters’, we show the potential for improving the performance of an individual caller using more detailed outputs, using caller b as an instance.

building and evaluating combined callers
we first used the mutations detected from the  <dig> selected patients  to build and evaluate combined callers. assuming  that the characteristics of our mutations are not affected by sample-specific features, we randomly split the data into 50% training and 50% test sets. other fractions were explored, but the qualitative conclusions were similar as long as there was enough data to train the model, e.g., more than 20% of the total.

the performance of the combined caller constructed by fitting a logistic model  is shown as a receiver operating characteristic  curve in figure  <dig>  the explanatory variables for this logistic model consist of the combination call status , sequencing depth and variant allele fraction in each tumor and normal sample , mutation substitution type , and interactions between the combination call status variables and other features . note that we used combination call status  instead of the call status of each individual caller  as shown in  in section ‘fitting logistic models using the call status and genomic features’. we used the combination call status, since we do not want to assume that the effects of callers are necessarily additive. for example, in reality, a certain sequence feature may mislead two callers, but the remaining single caller may have a better filter for it. therefore rather than imposing additivity, we would like to characterize each combination call status separately. the model fitting was done based on a randomly selected 50% training sites, then prediction was made on the remaining 50% test sites, enabling us to sort the mutations. a more stringent caller can be constructed by taking a smaller percentage of high-ranked mutations as final calls, and a more liberal caller can be constructed by including a larger percentage of mutations as final calls.

the performances of individual callers and combined callers are summarized in figure  <dig>  note that validation was done only for the mutations that were detected by at least one of the three callers, and therefore, the union of all mutations comprises all true positives and all false positives. the results of three individual callers are given at three points with different false positive rates, i.e., different stringency levels. caller a is the most liberal in the sense that it detected many false positives  but also detected most of the true positives . caller c has a very small fp rate  but detected only 67% of the true positives. caller b performs poorer than caller c, since it detected not only more false positives but also less true positives. the performance of the caller taking unions or intersections of the calls is marked as another set of points, inside of the sub-panel on the lower right part of the main panel. the stringency levels of these callers are not necessarily ordered. for example, the set of mutations called by two or more callers  is nested within any intersection of two callers , but no ordering exists among the latter three intersections. in contrast to this, the performance of the caller adding mutations sets cumulatively is shown as a connected set of blue dots because of the natural ordering determined based on the validation rates. in reality, the ordering may not be the same between the training set and the test set. when the validation rates are very similar among the mutation subsets or the number of mutations in each set is very small, sampling variation could easily result in a different ordering. in the training set, the validation rates of the mutation set called by a and c but not b, and the set called by a and b but not c, are  <dig> % and  <dig> %, respectively.

overall, our combined caller obtained by fitting a logistic model outperforms the individual callers and other naive combinations. the roc curve of this combined caller is above of all the points representing the performance of individual callers, although sometimes only slightly so. further, the combined caller allows us to assess the performance across the full range of stringency levels.

improving a single caller’s performance using details of its filters
for caller b, mutation quality scores as well as the outcomes of individual filters were available for a broader set of somatic variants.  in figure  <dig>  the performance of caller b was shown as a single point. here, we demonstrate how such extra details besides the call status can be used to improve the performance. furthermore, to prove the validity of our approach in a wider dataset, we trained and tested on two different mutation datasets that were generated for the tcga endometrial study using the same mutation calling algorithms, but constructed from different genomic regions as well as different tumor and normal samples. specifically, we trained a model on the mutations from the  <dig> genes of interest from  <dig> patients , then evaluated on the mutations from the whole exomes of the  <dig> patients . a similar analysis was performed with the roles of the two datasets switched .

since a mutation quality score was available for caller b, we first drew an roc curve by sorting the calls that were detected by caller b . as expected, the right most point in the roc curve  corresponds to the point for which caller b was previously evaluated. we then fitted a logistic model including the mutation quality score and the individual filter outcomes  from caller b as explanatory variables. the estimated coefficients for the individual filters are summarized in additional file 2: table s <dig> .

by utilizing the outcomes of individual filters, caller b’s performance has improved substantially . at a false positive rate of 33%, the true positive rate increases from 63% to 78%, detecting  <dig> more mutations. this highlights the importance of having the full details of all features involved in the final decision on a variant.

furthermore, if similar details were available for caller a and c, then we could generalize the logistic model in previous section  including outcomes of individual filters from all callers, which potentially leads to a higher power as well as better insight on the cause of mutation-calling errors.

discussion
in this paper, we present an approach for effectively building a combined caller using the outputs from three mutation callers. our approach is valid with more than three callers or less concordant mutation call outputs, as long as impartial validation data is available for all calls from all mutation callers as a training data, and the relative performance of individual callers is expected to be consistent between the training set and the test set. the combining approach could be even more beneficial if the individual callers agreed less — assuming  they all had comparable individual performances and  the set of loci on which each caller is right could be characterized in terms of genomic features. in this case, the fwls approach could learn the type of locus on which each caller is typically right and output the best answer for each new locus, resulting in a more accurate calling.

we have analyzed mutation sites that were successfully validated based on the criteria described in additional file 2: supplementary methods. those validation criteria may not be perfect, but we found them reasonable to demonstrate our approach. changes in validation criteria can result changes in individual callers’ performances and thus the final model estimated. for example, more stringent criteria are likely to treat all very rare mutations as false calls, and thus in our exercise, may reduce the sensitivity of caller a to a large extent. however, our approach remains to provide a convenient framework to build the best combined model, given any validation status. in practice, determining validation status based on an independent sequencing data can be very challenging, and developing highly accurate validation method itself is another research topic. working on better validation is out of scope for our paper, but if uncertainty in the validation could be quantified, it could be used in the logistic model fitting to weight more accurate calls.

in practice, an effective validation strategy is essential for building a successful model. in principle, a training dataset is supposed to contain all sites characterizing a wider dataset for which one wishes to apply the estimated model. therefore, a validation dataset needs to include enough sites to learn the behaviors of the mutation-calling algorithms across a broad spectrum of genomic features. another important issue is to have impartially validated sites. if validation is done partially, then the composition of a training dataset is biased and thus the estimated parameters and the performance are also biased.

CONCLUSIONS
our approaches provide a unified framework for dealing with multiple somatic-mutation callers. if the callers provide only the list of positions detected as mutations, then it is difficult to compare them, or to investigate the tradeoff between the stringency of the calling-procedure and its power to detect true mutations. our combined caller can be used to overcome these difficulties. it offers an evaluation of its performance across the full range as an roc curve, and in addition, allows easy comparison with individual callers.

furthermore, we have shown that it is feasible to build a combined caller that performs better than all the individual callers, one which could be better  than a caller combining calls only based on the detection status. an even more powerful caller can possibly be built when more features associated with calling performance are available, such as individual details of the filters used by each caller or the measure of strand bias.

finally, we demonstrate the potential for building a combined caller using a small validation dataset , which can be applied to a wider dataset to assign a confidence measure that can be used for ranking the mutations from multiple callers. our two mutation datasets, one from the selected  <dig> patients and the other from  <dig> genes of interest across  <dig> patients share protocols  but differ for genomic regions and the tumor and normal samples used for calling. the results from training the model using one of the datasets and evaluating on the other suggest that the estimated models based on these validation datasets are generally applicable to the mutations from whole exomes of all  <dig> endometrial patients.

abbreviations
tcga: the cancer genome atlas; snv: single nucleotide variant; fwls: feature-weighted linear stacking; fp: false positive; fn: false negative; tp: true positive; roc: receiver operating characteristic.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
syk participated in the design of the study, carried out statistical analyses and drafted the manuscript. lj participated in the design of the study, and drafted the manuscript. tps conceived the study, participated in its design and helped to draft the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
software package. a.tar.gz file that contains r scripts and example datasets to illustrate our approaches. the package also includes a manual file  explaining how to run the r scripts.

click here for file

 additional file 2
supplementary information. a.pdf file including supplementary methods, tables and figures.

click here for file

 acknowledgements
we thanks to the tcga mutation calling group. special thanks to david haussler, li ding, david wheeler, and gad getz for their leadership and to singer ma, cyriac kandoth, kyle chang for generating the mutation-calling outputs, particularly to cyriac kandoth for compiling the mutation outputs as well as the validation data. we also would like to thank to heidi sofia and kenna shaw for coordination and providing valuable feedbacks, to paul spellman for sharing computational facilities, to the members of speed lab for discussion and providing valuable comments.

the results published here are based upon data generated by the cancer genome atlas project established by the nci and nhgri. information about tcga and the investigators and institutions who constitute the tcga research network can be found at http://cancergenome.nih.gov.

funding
we gratefully acknowledge support from nih grant  <dig> u <dig> ca143799- <dig> 
