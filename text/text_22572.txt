BACKGROUND
the study of protein binding site prediction assists in understanding the mechanisms and principles of molecular recognition, provides information for drug design and vaccine development, and enables more detailed annotation of function in protein databases and in the construction of visual displays of protein-protein interaction networks  <cit> . in recent years, various in silico methods for prediction of protein-protein and protein-ligand binding sites have been developed  <cit> , but as the number of known protein structures and protein-complex structures has grown exponentially in the last decade, a fast and effective algorithm to identify binding regions of a protein is still urgently needed. an especially important application is carbohydrate vaccine development. this has gained much attention in recent years as a new strategy against pathogen infection and cancers, and the prediction of binding pockets between a glycan and antibody could be very valuable in the development of carbohydrate-based therapeutics  <cit> . the binding affinity of a carbohydrate-based antibody is normally weaker than that of a protein-based antibody. a tool for predicting properties of carbohydrate binding sites could therefore provide sufficient information for the development of carbohydrate-based vaccines. historically, several different approaches based on geometric characteristics, physicochemical properties, or combinations of these have been used to predict regions of protein interaction. for example, an algorithm using surface complementarity, calculated from the connolly surfaces and geometric characteristics of proteins, has been used to model protein-protein interactions  <cit> , and physical shape characteristics are frequently used to analyze and identify surface interfaces such as accessible surface areas  <cit> , sequence conservation  <cit> , and amino acid composition  <cit> . in addition, a number of different approaches have used fourier-based concepts, transforming a three-dimensional grid onto a set of orthogonal basis functions, and calculating overlapping areas using fast fourier transform techniques  <cit> . another approach is to consider the physicochemical properties of interface residues using statistical methods to predict binding sites. for example, aliphatic and aromatic residues are found at interface regions at a higher frequency compared with charged residues, and several methods have exploited this observation by examining the specific composition of amino acids in surface regions to predict binding sites  <cit> . although most previous methods for predicting protein binding regions have adopted similar approaches for analyzing protein-protein interfaces and protein-ligand binding regions, these two major types of binding exhibit different characteristics such as binding architecture and binding region size  <cit> . here, we designed an improved prediction system for protein-ligand binding, in which the query proteins are assumed to be rigid and their geometric characteristics such as solid angle, cavity depth, and volume are considered. in keeping with most existing algorithms, we also used shape complementary as the primary filter to rank all potential binding regions. in addition, we considered a grid-based construction of structure for surface residue identification and used parallel processing mechanisms for more efficient computation on geometric features. thus, irregularly shaped cavities and pockets on the protein surface can be efficiently identified and placed in a rank order of potential protein-ligand binding regions.

in our approach, we used the concept of the solid angle and its associated features as the main geometric attributes for analysis of protein-ligand binding potential. connolly proposed the solid angle approach to examine protein surface binding characteristics such that if two three-dimensional shapes fit together, then the sum of their two solid angles equals 4π in three-dimensional space  <cit> . there are two main methods for computing solid angles: the first approach uses the gauss-bonnet theorem to find solid angles subtended by surface regions; the second approach calculates the steradian formed by a virtual sphere on the protein surface, and then divides this by the square of the radius of the virtual sphere. both methods calculate the solid angle of a specified surface region. several researchers adopted the solid angle approach, and valuable results have been published in the fields of protein docking  <cit>  and structure alignment  <cit> . due to the huge number of atoms on a protein surface and the resulting demand on computational power and time for solid angle calculations, we used compute unified device architecture  technology  to enhance execution speed of the proposed algorithms. cuda is a parallel computing architecture that utilizes graphics processing units  for general-purpose computing. gpus were originally employed to speed up graphics display and could quickly and easily generate multiple threads. in addition, floating point operations and memory bandwidth performance are much faster with gpus than with central processing units , as the multi-core architecture allows each thread to perform an identical computing task simultaneously  <cit> . since the introduction of cuda in  <dig>  harnessing the power of the gpu has become easier, and recently, numerous gpu-based algorithms have been proposed in bioinformatics for sequence alignment  <cit> , protein docking  <cit> , surface area calculations  <cit> , molecular dynamic simulations  <cit> , and in systems biology  <cit> . here, we use cuda architecture to reduce computational time and develop an effective prediction system to identify binding regions by evaluating the geometric features of solid angle, depth, and volume of a cavity on a protein surface. based on performance comparisons with other methods and validation of the predictions via experimental data, our algorithm, plb-save, is effective for detecting protein-ligand binding regions, and we believe it has considerable potential in drug and vaccine development.

methods
the plb-save algorithm involves five main steps , starting with importing a protein data bank  file for analysis. multiple chains or single chain of a protein structure can be evaluated according to user's requirements. the cuda architecture, developed for parallel computing for graphics processing, can handle the spatial features of hundreds of thousands of atoms in the protein surface of the query protein. each step in the algorithm is briefly described below.

grid-based surface structure construction
the imported protein structure file, in pdb format  <cit> , contains complete spatial coordinate information obtained by x-ray crystallography, nmr spectroscopy, cryo-electron microscopy, or in silico prediction methods. in this step, the coordinates of atoms and their corresponding van der waals radii are transformed into corresponding volumetric pixels  within a grid structure. this facilitates rapid identification of protein surfaces and allows efficient calculation of solid angles for each atom. after discretization processes, the query protein is represented as a set of discrete voxels that are categorized as inside  or outside  portions of the query protein.

solid angle computation
for each surface voxel within a protein, the plb-save algorithm computes its corresponding solid angle as shown in equation 1:

  savi=*4π 

where sa is the solid angle of the surface voxel vi , vin denotes the number of overlapped voxels between the previously defined virtual sphere centered at vi and the query protein, and vsphere denotes the total number of voxels located within the identical virtual sphere. in this step, the recommended radius of the virtual sphere is  <dig> Å as connolly's suggestion for all surface voxels  <cit> . plb-save uses cuda coding modules to compute solid angles on all surface voxels in parallel to enhance the computational performance. figure  <dig> illustrates how to efficiently approach a solid angle from equation  <dig>  and an example of solid angle distributions for all surface voxels of the query protein is shown in figure  <dig>  the red dots represent surface voxels with small values of solid angle, and these surface voxels are generally expressed as voxels located on convex regions; in contrast, the blue dots represent surface voxels with relatively large values of solid angle on the protein surface, and these surface voxels occurred in concave areas. relatively flat regions  are represented by white or light grey dots when the value of solid angles is near 2π.

identifying surface anchor residues and clustering
because we are trying to identify binding cavities in the query protein, only those surface voxels possessing solid angles in the highest 20% were clustered into representative groups in order. two surface voxels would be clustered into the same group if they are neighboring voxels located within a threshold distance of  <dig> Å and both voxels have high solid angles at a similar level. the surface voxel with the largest solid angle within the selected cluster is deemed the representative anchor for the group.

geometric characteristics calculation
after the assignment of clustered groups and representative anchors, the algorithm calculates additional geometric characteristics for each group, including cavity depth and volume of the identified anchor regions. these selected characteristics are required to be rotation- and translation-invariant, and most importantly, must be feasible and efficient for protein-ligand binding analysis. the efficacious geometric characteristics are described below.

cavity depth calculation
although a defined surface anchor may have a large solid angle, it is not a necessary condition for all of its neighboring surface elements, and we found that a cluster of surface elements containing different levels of solid angles sometimes caused incorrect binding region prediction. to avoid such large variations of neighboring surface elements within a group, an enhanced feature of average depth of a potential cavity was calculated and verified. the proposed average depth was heuristically defined and evaluated according to equation  <dig> 

  depthvi=5ifsavi> <dig> *4π4if <dig> *4π<savi≤ <dig> *4π3if <dig> *4π<savi≤ <dig> *4π2if <dig> *4π<savi≤ <dig> *4π1if <dig> *4π<savi≤ <dig> *4π-1else 

where depth denotes the transformed depth of voxel vi in the clustered group, and sa refers to the solid angle of vi. the simple proportional transformation from solid angles to depth indicators is designed mainly due to the observations that a surface voxel locates at the deeper position of a cavity often possessing a higher solid angle. an example with six surface voxels within a cluster is illustrated in figure  <dig>  in which the corresponding depth indicator of a clustered group was obtained by averaging the transformed values between solid angles and mapped depth values.

cavity volume calculation
the volume of selected cavities provides identifiable discrimination between binding and non-binding regions. here, the volume indicator of a cluster is obtained by taking the anchor surface voxel as the center and surrounding it with a virtual sphere of radius  <dig> Å. those voxels located within the virtual sphere, but not inside the query protein, are verified individually to see whether these voxels belonging to part of the volumetric portion within the cavity. each voxel is considered as a virtual origin of a cartesian coordinate system, and it is evaluated by taking seven directional vectors, including three bi-direction vectors codirectional with the x, y, and z axes and four bi-direction diagonal vectors passing through the virtual origin. if by extending a directional vector in both directions and the query protein is intersected in both directions, then this directional vector is assigned as an interior directional vector. if a given voxel possesses more than or equal to four verified interior directional vectors, then that voxel is defined as part of the volume within the cavity <cit> . after examining all voxels in the virtual sphere, the total number of interior voxels gives the volume value for the cluster. an example is shown in figure  <dig>  where each interior voxel was evaluated and verified by this method.

binding region prediction
a measuring score combining linear weighting coefficients was then used to rank all identified potential binding regions, according to equation  <dig> 

  rvvi=cdviavgcdmax×w1+cvvicvmax×w <dig> 

rv is the ranked value for anchor voxel vi, cdavg is the value of average depth for vi, cdmax is the maximum depth of the query protein, cv is the volume of vi, cvmax is the maximum volume of the query protein, and the sum of both weighting coefficients, w <dig> and w <dig>  is equal to  <dig> 

parallel computing architecture by cuda
the cuda toolkit, version  <dig>   and visual studio  <dig>  were used to implement plb-save on an intel® core™ i7- <dig> processor operating at  <dig>  ghz, with a  <dig> gb ddr <dig> memory and a geforce gtx  <dig> graphics card  using the microsoft windows  <dig> operating system. in order to compare performance, plb-save was implemented onto two platforms: one with cpu architecture alone, and another with cuda-computing architecture. two datasets contain various sizes of proteins will be evaluated through two different computing architectures individually.

RESULTS
experimental datasets and measurements
the protein structure datasets used for testing included two types of bound and unbound proteins, collected from ligasite version  <dig>    <cit> . each dataset contained  <dig> representative and non-redundant protein structures, and the binding sites of each protein were also provided for method validation. five evaluation parameters were calculated to compare the performance with other prediction systems, including sensitivity, specificity, accuracy, positive predictive value , and matthew's correlation coefficient . these parameters were calculated using the following equations:

sensitivity = tptp+fn

specificity = tntn+fp

accuracy = tp+tntp+fp+tn+fn

ppv = tptp+fp

mcc = tp×tn-fp×fntp+fptp+fntn+fptn+fn

where tp is the number of true binding sites correctly predicted by our system to be binding sites; fp is the number of non-binding sites incorrectly predicted to be binding sites; tn is the number of non-binding sites correctly predicted not binding sites; fn is the number of true binding sites incorrectly predicted as non-binding sites. in this study, if the top  <dig> to top  <dig> predicted binding regions are indeed located at the true binding pocket sites, the prediction is claimed as a successful trial and the numbers of predicted binding and non-binding sites will be applied to evaluate all measurements.

performance of plb-save
the algorithm described here, plb-save, is freely available at http://save.cs.ntou.edu.tw. its prediction performance was evaluated under a tenfold cross-validation scheme. both bound  and unbound  protein sets, each containing  <dig> representative proteins, were randomly partitioned into ten subsets. each partitioned subset was retained as the group of validation proteins used for evaluating the prediction model, and the remaining nine subsets were then used as the training dataset for finding the best default parameters. the cross-validation process was repeated ten times, and each of the ten subsets was used exactly once as the validation subset. final measurements were obtained by taking the average from individual ten prediction results and the final prediction results are shown in table  <dig>  both prediction performances achieved stable and superior performance compared to most previously published systems, and the performance on the bound dataset was generally better than on the unbound dataset for all measurements. this is mainly because some testing proteins in bound conditions possessing cavities with preferred and suitable structural conformations than unbound conditions.

plb-save
to demonstrate the superior performance of plb-save, we compared the prediction results with two existing methods: sitehound  <cit>  and metapocket v <dig>    <cit> . sitehound identified ligand binding sites by computing the interactions between a chemical probe and a protein structure, and it used the profiles of the affinity map and total interaction energy to rank predicted binding sites. mpk <dig> integrated eight approaches including ligsitecsc  <cit> , pass  <cit> , qsitefinder  <cit> , surfnet  <cit> , fpocket  <cit> , ghecom <cit> , concavity  <cit> , and pocasa  <cit> , and combined predicted pocket sites from eight methods through consensus pocket analysis to improve the prediction success rate.

the aforementioned bound and unbound proteins in the two testing datasets were uploaded one-by-one to these two prediction systems, and the resulting performances are shown in table  <dig> and table  <dig>  although plb-save successfully predicted all  <dig> protein structures, only partial proteins were successfully predicted by either sitehound or mpk <dig> using their on-line implementation under a limited time frame . thus, to compare like with like, we selected only identical structures that were able to be individually processed by these two systems. table  <dig> compares the prediction measurements from the apo dataset for  <dig> proteins analyzed by sitehound and  <dig> proteins analyzed by mpk <dig> with those of plb-save. apart from the sensitivity for the  <dig> proteins, which was worse than for mpk <dig>  all other measurements were higher using plb-save than using the other two algorithms, and the overall accuracy rate of plb-save  was higher than for mpk <dig>  similarly, for bound proteins in the holo dataset, plb-save successfully predicted all  <dig> entries, but only  <dig> and  <dig> proteins were correctly predicted by sitehound and mpk <dig>  respectively. table  <dig> shows that plb-save performed better than sitehound in terms of sensitivity, specificity, accuracy, ppv, and mcc for the  <dig> bound proteins. table  <dig> shows that the average prediction results of plb-save were also better than mpk <dig> in most aspects, except for the sensitivity measurement, which were lower for these  <dig> protein structures. however, the overall accuracy rate of plb-save is  <dig> % which was much higher than mpk <dig> of  <dig> %. in addition, as previously noted, the performance of all three prediction systems for bound proteins was generally better than for the unbound proteins, due to the lower flexibility in the protein surface conformation of the bound protein, and perhaps also lower static energy. interestingly, we found that the performance of plb-save is more consistent than sitehound and mpk <dig> regarding bound and unbound protein structures. for example, prediction results performed by each software package for unbound versus bound protein led to increased performance, as judged by improved sensitivity, by 11%, 42%, and 12% for plb-save, sitehound, and mpk <dig>  respectively. stable performance of a prediction system is important because the practical applications for unknown protein binding site prediction would mainly be unbound structures. thus, the performance of plb-save showed that simple and reliable geometric features could provide a stable performance for protein binding region analysis.

calculations were performed only on proteins whose binding regions had been successfully predicted by sitehound and mpk <dig>  numbers in bold indicate which software gave the better performance for each parameter.  plb-save compared with sitehound using  <dig> proteins.  plb-save compared with mpk <dig> with using  <dig> proteins.

calculations were performed only on proteins whose binding regions had been successfully predicted by sitehound and mpk <dig>  numbers in bold indicate which software gave the better performance for each parameter.  plb-save compared with sitehound using  <dig> proteins.  plb-save compared with mpk <dig> with using  <dig> proteins.

computational performance by cuda
the sizes of the  <dig> unbound protein structures in the apo dataset ranged from  <dig> to  <dig> amino acids,  <dig> to  <dig>  atoms, and  <dig>  to  <dig>  voxels. the average computational time for computing solid angles with cpu alone and with cuda acceleration was reduced from  <dig>  seconds to  <dig>  seconds, respectively. similarly, the sizes of bound protein structures within complexes in the holo dataset ranged from  <dig> to  <dig> amino acids,  <dig> to  <dig>  atoms, and  <dig>  to  <dig>  voxels. the average computational time for computing solid angles with cpu alone and with cuda acceleration was reduced from  <dig>  seconds to  <dig>  seconds, respectively. the relationship between computational time and the total number of atoms in each dataset is shown in figure  <dig>  thus, the use of cuda architecture significantly reduced computational time, and this effect was even more pronounced with increasing protein size, with a nearly 160-fold faster average computation time for test datasets of both bound and unbound protein.

CONCLUSIONS
the use of the geometric construction of solid angles in molecular modeling was originally proposed as early as  <dig> by connolly. it is powerful and is frequently applied to verify the uneven nature of binding surfaces in three-dimensional space. here, we included consideration of two additional geometric features of the surface anchor residues--depth and volume of the potential cavities-based on their ranked solid angles. we developed an efficient and effective identification system for predicting protein-ligand binding regions using a novel approach based on the combinatorial capabilities of cuda parallel processing technology. the designed program, plb-save, included algorithms for calculating solid angles, clustering processes, anchor determination, and derived geometric features. the protein-ligand binding regions identified by plb-save on protein surfaces were mostly found to have a concave structure based on previous observations. thus, all possible interactively combined anchors from the query protein can be identified for the potential application of drug and vaccine design strategies. binding sites between the antibody and antigen are crucial for the efficacy of the protective effect. recently, carbohydrate-based vaccines have gained increasing attention due to the serotypes of various bacterial or viral strains. as well as the glycans exposed on the surface of cancer cells, carbohydrates have been developed as targets to be neutralized by an antibody or for inducing antibody-dependent cell-mediated cytotoxicity for cancer therapy  <cit> . carbohydrate-based vaccines are therefore expected to specifically protect hosts against the infection and eliminate cancer cells by immunotherapy. thus, prediction of the ligand-binding site, such as a carbohydrate- or a glycan-binding site, would contribute considerably to the field of vaccine development. this research not only emphasizes accurate identification of protein-ligand binding regions, but also provides a practical example of use of the cuda parallel computing architecture. two test datasets, which included  <dig> unbound and bound proteins, were evaluated using our software, plb-save, and two other well-known programs, sitehound and mpk <dig>  the results show that our algorithm achieved an average accuracy rate of 95% for correctly identifying protein-ligand binding regions on two unbound and bound proteins, and performed an average of  <dig> times faster on these test datasets. plb-save can therefore be used as one of the first prediction tools for protein surface analysis and protein-ligand binding region detection for application in drug and vaccine development.

competing interests
the authors declare that they have no competing interests.

authors' contributions
ytl and hww designed the algorithms and performed the computational data analysis. twp and htc conceived of the study, participated in its design and coordination and helped draft the manuscript. wst and hhh participated in the design and helped to review the manuscript. all authors read and approved the final manuscript.

