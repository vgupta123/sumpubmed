BACKGROUND
proteins are macromolecules that regulate all biological processes in a living organism, and their structures are generally better conserved than sequences. thus, identifying similarity of structures by comparing proteins could yield valuable clues to their function, and can be employed to fold family classification, motif finding, phylogenetic tree reconstruction and even protein docking. so far, many algorithms have been developed for the structure alignment problem  <cit>  including distance-based methods and vector-based methods, such as iterative dynamical programming  <cit> , fuzzy matching method  <cit> , mean field equation approximation  <cit> , distance matrix alignment method dali  <cit> , combinatorial extension method ce  <cit>  and genetic algorithm  <cit> . despite the relative success, there is much room for improvement in terms of quality and computational efficiency of the alignment  <cit> . on the other hand, from the viewpoint of optimization, there are two criteria for distance-based algorithms of structure comparison, i.e., maximizing the number of the aligned atoms and minimizing the matching distance between two protein's aligned atoms. such two objectives clearly have a trade-off relationship  <cit> , i.e., minimizing the matching distance usually leads to decrease of the number of aligned atoms whereas maximizing the number of aligned atoms will lead large matching distance. in other words, the solutions of such an alignment problem form a pareto set  <cit> .

with this clue, this paper presents a novel method in the framework of multi-objective optimization  <cit> , which is called samo . we define the structure alignment as a two-objective optimization problem with both discrete and continuous variables, i.e., maximizing the number of aligned atoms and minimizing their root mean square distance  in the same time. the discrete variables represent matching relation between atoms whereas the continuous variables include a translation vector and a rotation matrix with which one protein matches the other as a rigid body. in particular, in contrast to the conventional methods, we adopt a sequence order-independent strategy in the formulation of structure alignment problem. this allows us to detect similarity between proteins in a more general way, e.g. revealing divergent evolution, detecting circular permutations and identifying active-sites . in other words, the similarity can be found not only between homologous structures but also between active sites of convergent structures, between different folding motifs, between the scaffolds of unrelated proteins and between recurring stable configurations in the interior of proteins. as shown in this paper, we succeeded in finding the similarity of divergently evolved proteins as well as that of convergent proteins  <cit> .

although a pairwise protein comparison can theoretically be formulated as a multi-objective optimization problem, numerically it is still a complicated computational problem, in particular for the comparison of large-size proteins. to alleviate such computation burden, we develop a decomposition technique to divide the original problem into two subproblems by exploiting the special features of the protein alignment problem, i.e., one linear programming subproblem  for the atom matching and one weighted least square subproblem  for coordinate transformation. a very efficient bipartite matching algorithm is proposed for optimizing the lps, whereas the lss is solved by the singular value decomposition  technique. by controlling a single distance-related parameter, theoretically we can obtain a variety of optimal alignments corresponding to different optimal matching patterns, which all belong to the pareto set. in other words, depending on how close we require to match a pair of proteins, we can obtain a set of optimal alignment solution, from a large portion matching to a small portion matching. the main features for this paper are summarized as follows.

• we propose a novel formulation to align protein structures, reveal divergent evolution, detect circular permutations and identify structural motifs in the framework of multi-objective optimization.

• we develop an efficient and accurate algorithm based on bipartite matching algorithm to solve the multi-objective programming, and the convergence of the algorithm is also theoretically guaranteed.

although our algorithm can obtain an optimal alignment, the resulting solution may not be globally optimal due to the non-convexity of the protein structure alignment problem. generally, it is well known that the annealing technique is effective to alleviate the influence of initial conditions on the solution. this paper adopts an annealing procedure for expanding the searching region to improve quality of solution. other features of the model include: according to information of the matching matrix, the algorithm has the ability to identify circular permutations  <cit>  and active sites; no heuristic parameter, such as gap penalty, is required in our formulation. to demonstrate the proposed method, we use several benchmark examples  <cit>  from protein data bank as well as scop database for numerical simulation. in addition to solid theoretical background, numerical experiments show significant improvement of our approach over the existing methods in terms of both quality and efficiency.

implementation
the method presented in this paper is mainly based on the preliminary version in  <cit> . in this section, we formulate the pairwise structure alignment problem as a multi-objective optimization problem with the similar notation to that of  <cit> .

preliminaries
define nx and ny to be the number of atoms of two proteins x =  and y = , where xi =  and yj =  ∈ r <dig>  are the atom coordinates, which correspond to cα or cβ atoms along the backbones. a square distance metric between the chain atoms is adopted, i.e. dij2=|xi−yj|2=∑k=132
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgkbazdaqhaawcbagaemyaakmaemoaaogabagaegomaidaaogaeyypa0zaaqwaceaacqwgybawdawgaawcbagaemyaakgabeaakiabgkhitiabdmfaznaabaaaleaacqwgqbgaaeqaaagccaglhwuaayjcsdwaawbaasqabeaacqaiyagmaagccqgh9aqpdaaewaqaamaabmgabagaemieag3aasbaasqaaiabdmgapjabcycasiabdugarbqabagccqghsislcqwg5bqedawgaawcbagaemoaaomaeiilawiaem4aasgabeaaaogaayjkaiaawmcaamaacaaaleqabagaegomaidaaaqaaiabdugarjabg2da9iabigdaxaqaaiabiodazaqdcqghris5aaaa@5329@ is the square distance between the atom i in x and the atom j in y. we view each protein chain as a rigid geometric body in this paper. the coordinate transformation of a rigid body is generally expressed by a translation vector a ∈ r <dig> and a rotation matrix r ∈ r <dig> ×  <dig>  i.e., x^i
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgybawgaqcamaabaaaleaacqwgpbqaaeqaaaaa@2f7c@ = a + rxi for the atom i of the chain x, where there are six independent variables for the translation vector and the rotation matrix due to the rigid body transformation. for a pairwise structure alignment, we fix the coordinates of y, which is assumed to be longer than x. therefore, after coordinate transformation, a square distance between the atom i in x and the atom j in y is defined as follows

dij2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgkbazdaqhaawcbagaemyaakmaemoaaogabagaegomaidaaaaa@31d4@ = |a + rxi - yj| <dig>     

a matching matrix s with binary elements sij is defined to describe matching of two atoms for i =  <dig>  ..., nx; j =  <dig>  ..., ny:

sij={1if atom i in the chain x matches atom j in the chain y0otherwise     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgzbwcdawgaawcbagaemyaakmaemoaaogabeaakiabg2da9maaceqabaqbaeaabigaaaqaaiabigdaxaqaaiabbmgapjabbagamjabbccagiabbggahjabbsha0jabb+gavjabb2gatjabbccagiabdmgapjabbccagiabbmgapjabb6gaujabbccagiabbsha0jabbigaojabbwgaljabbccagiabbogajjabbigaojabbggahjabbmgapjabb6gaujabbccagiabdifayjabbccagiabb2gatjabbggahjabbsha0jabbogajjabbigaojabbwgaljabbohazjabbccagiabbggahjabbsha0jabb+gavjabb2gatjabbccagiabdqgaqjabbccagiabbmgapjabb6gaujabbccagiabbsha0jabbigaojabbwgaljabbccagiabbogajjabbigaojabbggahjabbmgapjabb6gaujabbccagiabdmfazbqaaiabicdawaqaaiabb+gavjabbsha0jabbigaojabbwgaljabbkhayjabbeha3jabbmgapjabbohazjabbwgalbaaaiaawuhaaiaaxmaacawljawaaewaceaacqaiyagmaiaawicacaglpaaaaaa@86ad@

clearly s is an nx × ny matrix with only binary elements. with allowing existence of gaps, each atom in one chain must match at most one atom in the other. therefore, we have the following conditions.

∑i=1nxsij≤1 for j= <dig> ...,ny     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewbqaaiabdohaznaabaaaleaacqwgpbqacqwgqbgaaeqaaaqaaiabdmgapjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg4baeaeqaaaqdcqghris5aogaeyizimqaegymaejaeeiiaaiaeeozaymaee4ba8maeeocainaeeiiaaiaemoaaomaeyypa0jaegymaejaeiilawiaeiola4iaeiola4iaeiola4iaeiilawiaemoba42aasbaasqaaiabdmha5bqabagccawljagaaczcamaabmgabagaeg4mamdacagloagaayzkaaaaaa@508a@

∑j=1nysij≤1 for i= <dig> ...,nx     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewbqaaiabdohaznaabaaaleaacqwgpbqacqwgqbgaaeqaaaqaaiabdqgaqjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg5bqeaeqaaaqdcqghris5aogaeyizimqaegymaejaeeiiaaiaeeozaymaee4ba8maeeocainaeeiiaaiaemyaakmaeyypa0jaegymaejaeiilawiaeiola4iaeiola4iaeiola4iaeiilawiaemoba42aasbaasqaaiabdiha4bqabagccawljagaaczcamaabmgabagaeginaqdacagloagaayzkaaaaaa@508c@

we show a simple example in figure  <dig> to illustrate a matching matrix s with nx =  <dig> and ny =  <dig>  where a row or a column with all zeros means a gap. then, the total square distances t and the total number m for the aligned atoms between the two proteins are respectively expressed as:

t=∑i=1nx∑j=1nysij|a+rxi−yj|2     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgubavcqggoaakcqwgtbwucqggsaalcqwgbbqqcqggsaalcqwgsbgucqggpaqkcqgh9aqpdaaewbqaamaaqahabagaem4cam3aasbaasqaaiabdmgapjabdqgaqbqabaaabagaemoaaomaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdmha5bqabaaaniabgghildaaleaacqwgpbqacqgh9aqpcqaixaqmaeaacqwgubgbdawgaaadbagaemieaghabeaaa0gaeyyeiuoakmaaemgabagaemyqaekaey4kasiaemouailaemiwag1aasbaasqaaiabdmgapbqabagccqghsislcqwgzbqwdawgaawcbagaemoaaogabeaaaogaay5bslaawia7amaacaaaleqabagaegomaidaaogaaczcaiaaxmaadaqadiqaaiabiwda1agaayjkaiaawmcaaaaa@5d01@

m=∑i=1nx∑j=1nysij     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbcqggoaakcqwgtbwucqggpaqkcqgh9aqpdaaewbqaamaaqahabagaem4cam3aasbaasqaaiabdmgapjabdqgaqbqabaaabagaemoaaomaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdmha5bqabaaaniabgghildaaleaacqwgpbqacqgh9aqpcqaixaqmaeaacqwgubgbdawgaaadbagaemieaghabeaaa0gaeyyeiuoakiaaxmaacawljawaaewaceaacqai2agnaiaawicacaglpaaaaaa@4b51@

multi-objective optimization for structure comparison
for structure alignment problem, there is generally a trade-off relation  <cit>  between the distance and the number of aligned atoms. therefore, a pairwise structure alignment problem can be formulated as a two-objective optimization problem  <cit>  with discrete variables s and continuous variables :

minimize t     for s, a, r     

maximize m

subject to –     sij∈ { <dig> }

where the first objective is to minimize the total square distances of the aligned atoms, and the second objective is to maximize the total number of aligned atoms for the two proteins. notice that there is no heuristic gap penalty term in the formulation.

all of the optimal solutions for the two-objective optimization problem form a pareto set  <cit> . the problem can be solved by transforming the two objectives of  into a single objective. one typical technique is the ε-method  <cit> , which alternates a positive scalar parameter λ to obtain the pareto set, with the following formulation.

minimize ∑i=1nx∑j=1nysijfor s,a,rsubject to −sij∈{ <dig> }     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqaaegacaaabagaeeyba0maeeyaakmaeeoba4maeeyaakmaeeyba0maeeyaakmaeeoeaonaeeyzaumaeeiiaayaaabcaeaadaaewbqaaiabdohaznaabaaaleaacqwgpbqacqwgqbgaaeqaaaqaaiabdqgaqjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg5bqeaeqaaaqdcqghris5aawcbagaemyaakmaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdiha4bqabaaaniabgghildgcdaqadiqaamaaemgabagaemyqaekaey4kasiaemouailaemiwag1aasbaasqaaiabdmgapbqabagccqghsislcqwgzbqwdawgaawcbagaemoaaogabeaaaogaay5bslaawia7amaacaaaleqabagaegomaidaaogaeyoei0cccigae83udw2aawbaasqabeaacqaiyagmaaaakiaawicacaglpaaaaeaacqqgmbgzcqqgvbwbcqqgybgccqqggaaicqwgtbwucqggsaalcqwgbbqqcqggsaalcqwgsbguaeaacqqgzbwccqqg1bqdcqqgibgycqqgqbgacqqglbqzcqqgjbwycqqg0badcqqggaaicqqg0badcqqgvbwbcqqggaaidaqadiqaaiabiodazagaayjkaiaawmcaaiabgkhitmaabmgabagaeginaqdacagloagaayzkaaaabagaem4cam3aasbaasqaaiabdmgapjabdqgaqbqabagccqghiiizdagadeqaaiabicdawiabcycasiabigdaxagaay5eaiaaw2haaaaacawljagaaczcamaabmgabagaegioagdacagloagaayzkaaaaaa@8de7@

from the definition of t and m, the objective is minimizing t - λ2m. we can theoretically obtain all optimal solutions belonging to the pareto set, by changing the parameter λ in the single-objective optimization problem . clearly, λ transforms the number m into equivalent square distance, and controls the balance of t and m  <cit> . it should be noted that |a + rxi - yj| <dig> - λ <dig> = dij2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgkbazdaqhaawcbagaemyaakmaemoaaogabagaegomaidaaaaa@31d4@ - λ <dig> implies that λ has the same physical meaning and scale as the distance of dij. this paper exploits this property to drastically simplify the computation of the problem. if λ is small, the optimal alignment has a smaller set of aligned atoms  but with a tight matching . in contrast, for a big λ, we can have a bigger set of aligned atoms but with a rough matching. therefore, rather than one solution, we can obtain a set of optimal solutions for different pairs of  by changing λ. in addition to the accurate form without any heuristic parameters of gaps in the model, the objective function is a linear form of s, and in formulation  the number m directly pairs with the square distance t. comparing samo with the conventional superimposition-alignment approach, such as iterative dynamic programming  <cit> , there are mainly two differences. one is that many of the conventional superimposition-alignment approaches use the heuristic objective function  or the heuristic gap penalty terms in the formulation, which cause not only the poor quality of alignment but also the poor convergence. another one is about the searching space, which usually is locally restricted depending on the coordinate transformation or superimposition strategy for the conventional methods, whereas our algorithm theoretically has the ability for implicit complete exploration of the entire space of alignments.

decomposing structure comparison problem
we exploit the special features of the formulation to decompose the optimization problem of the protein structure comparison. clearly,  is a mixed integer programming for a given λ and has a special structure, i.e., all of the terms in the constraints – are not related to the continuous variables . because of such a special feature,  can be decomposed into two subproblems, i.e., a weighted least square subproblem  that is to find the best transformation of coordinates for the protein x, and an integer linear programming subproblem  that is to find the best superposition for the protein pairs. the procedure of samo is an iterative computation of lss and lps in succession. next, we give detail explanation for each subproblem and the solving technique.

weighted least square subproblem 
 is the lss for solving  with fixed 

minimize ∑i=1nx∑j=1nysij|a+rxi−yj|2     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqqgtbqbcqqgpbqacqqgubgbcqqgpbqacqqgtbqbcqqgpbqacqqg6bgecqqglbqzcqqggaaidaaewbqaamaaqahabagaem4cam3aasbaasqaaiabdmgapjabdqgaqbqabaaabagaemoaaomaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdmha5bqabaaaniabgghildaaleaacqwgpbqacqgh9aqpcqaixaqmaeaacqwgubgbdawgaaadbagaemieaghabeaaa0gaeyyeiuoakmaaemgabagaemyqaekaey4kasiaemouailaemiwag1aasbaasqaaiabdmgapbqabagccqghsislcqwgzbqwdawgaawcbagaemoaaogabeaaaogaay5bslaawia7amaacaaaleqabagaegomaidaaogaaczcaiaaxmaadaqadiqaaiabimda5agaayjkaiaawmcaaaaa@5fbc@

which is a weighted least square problem of two 3-d chains and can actually be solved analytically  <cit> . notice that for the lss, in addition to –, λ2∑i=1nx∑j=1nysij
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacqwf7oabdaahaawcbeqaaiabikdayaaakmaaqadabawaaabmaeaacqwgzbwcdawgaawcbagaemyaakmaemoaaogabeaaaeaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgubgbdawgaaadbagaemyeakhabeaaa0gaeyyeiuoaasqaaiabdmgapjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg4baeaeqaaaqdcqghris5aaaa@4498@ is constant due to the fixed , which has no effect on the optimization and is eliminated from the objective function in . numerically, r and a can also be obtained by singular value decomposition  as shown in appendix a. <dig> of  <cit> . there are six independent variables for lss. lss pulls the protein x closer to the protein y by computing the optimal rotation matrix r and translation vector a. note that lss is not affected by those coordinate pairs  with sij =  <dig>  which are actually known before the computation of each iteration. such a property is exploited in next section to drastically improve the efficiency of lps computation.

integer linear programming subproblem 
 is the lps for solving s with fixed 

maximize −∑i=1nx∑j=1nysijsubject to −sij∈{ <dig> }     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqadegabaaabagaeeyba0maeeyyaemaeeieagnaeeyaakmaeeyba0maeeyaakmaeeoeaonaeeyzaumaeeiiaaiaeyoei0yaaabcaeaadaaewbqaaiabdohaznaabaaaleaacqwgpbqacqwgqbgaaeqaaaqaaiabdqgaqjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg5bqeaeqaaaqdcqghris5aawcbagaemyaakmaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdiha4bqabaaaniabgghildgcdaqadiqaamaaemgabagaemyqaekaey4kasiaemouailaemiwag1aasbaasqaaiabdmgapbqabagccqghsislcqwgzbqwdawgaawcbagaemoaaogabeaaaogaay5bslaawia7amaacaaaleqabagaegomaidaaogaeyoei0cccigae83udw2aawbaasqabeaacqaiyagmaaaakiaawicacaglpaaaaeaafaqabeqacaaabagaee4camnaeeydaunaeeoyaimaeeoaaomaeeyzaumaee4yammaeeidaqnaeeiiaaiaeeidaqnaee4ba8maeeiiaayaaewaceaacqaizawmaiaawicacaglpaaacqghsisldaqadiqaaiabisda0agaayjkaiaawmcaaaqaaiabdohaznaabaaaleaacqwgpbqacqwgqbgaaeqaaogaeyici48aaiwabeaacqaiwaamcqggsaalcqaixaqmaiaawuhacagl9baaaaaaaiaaxmaacawljawaaewaceaacqaixaqmcqaiwaamaiaawicacaglpaaaaaa@85b4@

which is an integer linear programming problem because of the binary variables s. but it can be exactly solved in polynomial time. as a matter of fact,  is a maximum weighted bipartite matching problem  <cit>  which has the integrality property, i.e. the optimal solution is ensured to be integers even without the constraint sij ∈ { <dig> }. hence, the discrete optimal solution of lps can be obtained by directly using any linear programming algorithm such as simplex algorithm or interior-point method by relaxing the binary variables as continuous variables  <dig> ≤ sij ≤  <dig>  however, there exists a more effective algorithm based on hungarian method  <cit>  to solve the maximum weighted bipartite matching problem. it is easy to show that the computational complexity of lps with such a method is o) where n¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgubgbgaqeaaaa@2e29@ = nx + ny and n^
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgubgbgaqcaaaa@2e21@ = nx × ny.

hungarian method is an efficient algorithm, but for large-scale problems, such as proteins with several hundreds amino acids, o) is still too high for fast structure alignment. the algorithm for lps can be further improved by exploiting its special feature. notice that the objective function of  is to maximize−∑i=1nx∑j=1nysij
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqqgtbqbcqqghbqycqqg4baecqqgpbqacqqgtbqbcqqgpbqacqqg6bgecqqglbqzcqghsisldaaewaqaamaaqadabagaem4cam3aasbaasqaaiabdmgapjabdqgaqbqabaaabagaemoaaomaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdmha5bqabaaaniabgghildaaleaacqwgpbqacqgh9aqpcqaixaqmaeaacqwgubgbdawgaaadbagaemieaghabeaaa0gaeyyeiuoakmaabmgabagaemizaq2aa0baasqaaiabdmgapjabdqgaqbqaaiabikdayaaakiabgkhitiabeu7asnaacaaaleqabagaegomaidaaagccagloagaayzkaaaaaa@5832@ for the fixed . therefore for i =  <dig>  ..., nx and j =  <dig>  ..., ny, if dij ≥ λ, then sij =  <dig> must hold at the optimal solution. in other words, λ corresponds to the radius of the search region in the optimization process, and we can eliminate all sij corresponding to dij ≥ λ from both the objective function and the constraints of . we can show that such a manipulation significantly simplifies lps, and reduces total variables n^
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgubgbgaqcaaaa@2e21@ from nx × ny to |{dij : dij <λ}| = o. an procedure for solving lps based on hungarian method with the reduced variables can be found in  <cit> , and the algorithm ensures an integer solution without any approximation.

computational procedure for samo
basically,  is optimized by solving lss and lps iteratively. in such a spirit, the algorithm of samo is summarized straightforward for a given λ.

• step-0: setting initial conditions:

- assuming nx ≤ ny, fix the coordinates of y, and move x to their common center of mass by translation ∑i=1nyyi/ny−∑i=1nxxi/nx
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewaqaaiabdmfaznaabaaaleaacqwgpbqaaeqaaogaei4la8iaemoba42aasbaasqaaiabdmha5bqabagccqghsisldaaewaqaaiabdifaynaabaaaleaacqwgpbqaaeqaaaqaaiabdmgapjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg4baeaeqaaaqdcqghris5aawcbagaemyaakmaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdmha5bqabaaaniabgghildgccqggvawlcqwgubgbdawgaawcbagaemieaghabeaaaaa@4bce@. set λ, annealing coefficients γ and λ¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@, and convergence criterion ε, which are all positive numbers. set all initial values of variables sij, and let the iteration index t =  <dig> 

• step-1: solving lss:

- solve  for  with the fixed s by the svd algorithm .

• step-2: solving lps:

- solve  for s with the given  in step- <dig> by the procedure based on hungarian method. reduce variables based on λ as explained in section lps.

• step-3: checking convergence:

- when |t - t| ≤ ε is satisfied, terminate the computation and output rms and m. otherwise, let t ← t +  <dig> 

• step-4: annealing process:

- let λ = λ + λ¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@γt where λ is the target value, λ¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@ ≥  <dig> and  <dig> > γ >  <dig> . then go to step- <dig> with the updated s.

for step- <dig>  the original centers of mass for proteins x and y are x¯=∑i=1nxxi/nx
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgybawgaqeaiabg2da9maaqadabagaemiwag1aasbaasqaaiabdmgapbqabaaabagaemyaakmaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdiha4bqabaaaniabgghildgccqggvawlcqwgubgbdawgaawcbagaemieaghabeaaaaa@3e10@ and y¯=∑i=1nyyi/ny
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgzbqwgaqeaiabg2da9maaqadabagaemywak1aasbaasqaaiabdmgapbqabaaabagaemyaakmaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdmha5bqabaaaniabgghildgccqggvawlcqwgubgbdawgaawcbagaemyeakhabeaaaaa@3e18@ respectively. rms or rmsd is defined as t/m
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadagcaaqaaiabdsfaujabc+caviabd2gatbwcbeaaaaa@3041@, where t and m are expressed in –. step- <dig> of algorithm is for the annealing. that is, first a large initial λ = λ + λ¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@ is set so that the algorithm performs a global search on a large region to find a better matching in the earlier iterations. then, reduce λ = λ + λ¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@γt by γ to narrow the searching region during each iteration until convergence. although introducing the annealing process requires additional computation cost, it enlarges the searching region which results in the improvement of alignment quality. such an annealing process is only activated when the quality of the alignment is not satisfied. for the computation without annealing, simply set λ¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@ =  <dig> 

parameter selection
as discussed in previous sections, sij is possibly  <dig> at the optimal solution only if dij <λ. if the distance of any two atoms i and j is bigger than λ, no matching for such two atoms is considered in lps. in other words, only atom pairs with the distance less than λ are further considered in lss for the translation and rotation operation because of sij =  <dig> for any atom pairs with dij > λ. as a result, the aligned rms in lss is less than λ. we can use this property to obtain an alignment for a specific rms by setting an appropriate λ but without searching the pareto set completely. empirically, we can obtain an optimal solution with rms = r if setting λ = 2r ~ 3r, where rms is expected to be r =  <dig> ~  <dig> because an alignment for rms >  <dig> is not generally considered as a good matching. in other words, we can give a list of solutions that covers all the reasonable alignments with λ changing from  <dig> to  <dig> because the range of rms for those solutions generally in  <cit> . in the implement of the software samo, we set the default value of the parameter λ as  <dig>  according to this rule. actually, in most cases it always gives satisfactory alignment results. considering that the distance is approximately  <dig> Å for two consecutive cα atoms or cβ atoms in a protein chain, the reduced lps generally has variables less than min{nx, ny}2/ <dig> , which is a much smaller linear programming  than the original lp with variables nx × ny. for example, the number of variables is approximately less than  <dig> × 2/ <dig>  ≈  <dig> for a pair of proteins both with  <dig> amino acids and λ =  <dig>  while there are  <dig> ×  <dig> =  <dig> variables in the original lp.

convergence analysis
the decomposition of the algorithm actually ensures the local convergence. we next prove the convergence of the proposed algorithm. let ak and rk be the solution of lss  at the k-th iteration with an assignment sk- <dig>  then

∑i=1nx∑j=1nysijk−1≤∑i=1nx∑j=1nysijk−1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewbqaamaaqahabagaem4cam3aa0baasqaaiabdmgapjabdqgaqbqaaiabdugarjabgkhitiabigdaxaaaaeaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgubgbdawgaaadbagaemyeakhabeaaa0gaeyyeiuoaasqaaiabdmgapjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg4baeaeqaaaqdcqghris5aowaaewaceaadaabdiqaaiabdgeabnaacaaaleqabagaem4aasgaaogaey4kasiaemouai1aawbaasqabeaacqwgrbwaaagccqwgybawdawgaawcbagaemyaakgabeaakiabgkhitiabdmfaznaabaaaleaacqwgqbgaaeqaaagccaglhwuaayjcsdwaawbaasqabeaacqaiyagmaagccqghsisliigacqwf7oabdaahaawcbeqaaiabikdayaaaaogaayjkaiaawmcaaiabgsmijoaaqahabawaaabcaeaacqwgzbwcdaqhaawcbagaemyaakmaemoaaogabagaem4aasmaeyoei0iaegymaedaaaqaaiabdqgaqjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg5bqeaeqaaaqdcqghris5aawcbagaemyaakmaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdiha4bqabaaaniabgghildgcdaqadiqaamaaemgabagaemyqae0aawbaasqabeaacqwgrbwacqghsislcqaixaqmaagccqghrawkcqwgsbgudaahaawcbeqaaiabdugarjabgkhitiabigdaxaaakiabdifaynaabaaaleaacqwgpbqaaeqaaogaeyoei0iaemywak1aasbaasqaaiabdqgaqbqabaaakiaawea7cagliwoadaahaawcbeqaaiabikdayaaakiabgkhitiab=t7asnaacaaaleqabagaegomaidaaagccagloagaayzkaaaaaa@9095@

using ak and rk, we solve lps , and let the solution be sk. then there is

∑i=1nx∑j=1nysijk≤∑i=1nx∑j=1nysijk−1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewbqaamaaqahabagaem4cam3aa0baasqaaiabdmgapjabdqgaqbqaaiabdugarbaaaeaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgubgbdawgaaadbagaemyeakhabeaaa0gaeyyeiuoaasqaaiabdmgapjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg4baeaeqaaaqdcqghris5aowaaewaceaadaabdiqaaiabdgeabnaacaaaleqabagaem4aasgaaogaey4kasiaemouai1aawbaasqabeaacqwgrbwaaagccqwgybawdawgaawcbagaemyaakgabeaakiabgkhitiabdmfaznaabaaaleaacqwgqbgaaeqaaagccaglhwuaayjcsdwaawbaasqabeaacqaiyagmaagccqghsisliigacqwf7oabdaahaawcbeqaaiabikdayaaaaogaayjkaiaawmcaaiabgsmijoaaqahabawaaabcaeaacqwgzbwcdaqhaawcbagaemyaakmaemoaaogabagaem4aasmaeyoei0iaegymaedaaaqaaiabdqgaqjabg2da9iabigdaxaqaaiabd6gaunaabaaameaacqwg5bqeaeqaaaqdcqghris5aawcbagaemyaakmaeyypa0jaegymaedabagaemoba42aasbaawqaaiabdiha4bqabaaaniabgghildgcdaqadiqaamaaemgabagaemyqae0aawbaasqabeaacqwgrbwaaagccqghrawkcqwgsbgudaahaawcbeqaaiabdugarbaakiabdifaynaabaaaleaacqwgpbqaaeqaaogaeyoei0iaemywak1aasbaasqaaiabdqgaqbqabaaakiaawea7cagliwoadaahaawcbeqaaiabikdayaaakiabgkhitiab=t7asnaacaaaleqabagaegomaidaaagccagloagaayzkaaaaaa@8afe@

which shows that the value of the objective function t always decreases with the iteration of the computation. noticing that the objective function has a special structure and the solution space of sk is a finite set, decrease of the objective function implies that ak + rkxi will be in a bounded neighborhood of the point yi. therefore, there will be a subsequence of the solution sequence that converges to a cluster so that the termination condition will be satisfied to end the computation.

note that although our algorithm can obtain an optimal alignment for any specified λ, the resulting solution may not be globally optimal because of the non-convexity of the protein structure alignment problem. in other words, depending on initial condition, the algorithm may result in a different solution, as the same as most of deterministic optimization techniques do. to improve the quality of the solution, we can further adopt annealing technique to enlarge the searching space  <cit> . specifically, in our program we set λ¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@ = 10λ, and γ =  <dig>  the annealing procedure when the rms is undesirably large. in other words, the radius of initial searching region with the annealing is enlarged by  <dig> times.

numerical simulations indicate that alignment of a protein pair typically requires 4– <dig> iterations, and the convergence is always achieved from the numerical computation viewpoint.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@ =  <dig> means that there is no annealing process in the computation. note that the coordinate of 8dfr is fixed due to its longer amino sequence according to the algorithm.

RESULTS
the algorithm was implemented in c++ language. the simulation for each structure alignment of a pair of proteins generally requires a few minutes  on pentium  <dig> cpu, which is considered fast. for example, alignment of proteins 1dhfa and 8dfr which have lengths  <dig> and  <dig> respectively can find a long segment with length  <dig> and rmsd  <dig>  in only  <dig> seconds. the alignment results can be presented in various output styles and saved for further analysis. the detailed residue correspondence is provided and can be saved in pdb file format for the purpose of the visualization. the software samo  is available upon request from authors or from  <cit> . we have conducted the comparison experiments using dozens proteins  from major protein families and folds, as shown in table  <dig>  the comparisons are carried out both in same family, fold, and in different family, fold. these results of comparison can be roughly summarized as three categories according to their comparison scores.

the first category is composed of the protein pairs with lower rmsd value and larger number of matched amino-acid pairs, which conserve the sequential orders . the result of the proposed method indicates global similarity between two whole structures. because the geometric match corresponds to a sequential order, protein pairs in this category may imply evolutionary divergence. in the section "revealing divergent evolution", we will compare our method  with the conventional methods and further clarify the results.

in this paper, we analyze the convergent and divergent evolutions by structure comparisons. divergent evolution is the process of two or more related species becoming more and more dissimilar from a common ancestor. similarities in sequence and structure indicate that the two species have a common ancestor. as they adapted to different environments, the structures of the two species diverged. in convergent evolution, on the other hand, unrelated species from different ancestors become more and more similar in appearance or structure  as they possibly adapt to the same kind of environment. convergent evolution takes place when species of different ancestry begin to share analogous traits because of a shared environment or other selection pressure. although it is generally difficult to distinguish such two evolutions, our method in this paper can provide some insight about this problem.

the second category is composed of the protein pairs with higher rmsd value and smaller number of matched amino-acid pairs. the result of the proposed method mainly demonstrates local similarity between substructures. these matches contain fewer matched amino-acid pairs than the first category, and do not necessarily conserve the sequential order. proteins with such substructural similarity may imply evolutionary convergence. at first sight, it seems that it is a random match of small segments plus isolated residues. however close inspection reveals that many of the matched amino-acid pairs perform some common biological functions. since our comparison is conducted in a structural level without any sequential order constraint, the match is completely 3d. we define these recurring detected substructures as structure motifs or active-sites in this paper. they are "real" 3d motifs, which are different from the conventional concept of motifs defined by the multiple sequence alignment. in the section "identifying active sites", we will report the ability of our method  to find similarity of active sites or 3d structural motifs. the third category corresponds to spurious matches between unrelated and dissimilar structures. these may contain equivalences of single α-helix, β-strands, or randomly matched isolated residues. the protein pairs in this category have higher rmsd and smaller number of matched amino-acid pairs, which are not located in a local area. those pairs can be regarded as the negative samples identified by our method , which means that the two proteins are not similar biologically, and can be excluded from the results by checking biologically meaningful similarity of the matched residues.

circular permutation is a special phenomenon in structure database formed by mutation in the sequential order. it provides challenge for the structure alignment methods with sequential order constraint. we show the advantage of our method  in finding circular permutation due to the sequence order-independent strategy in the section "detecting circular permutations". in addition, other features of our method  are also reported in the section "results", such as stable convergence and high computation efficiency.

revealing divergent evolution
in this paper, we compare the 3d protein structures in the multi-objective optimization framework without the sequential order constraint. this allows us to detect similarity between protein molecules, and find out whether those amino acids are on the surfaces or in the interior. this truly 3d comparison approach overcomes a limitation inherent in other conventional structure alignment techniques which require that the linear order of the amino acid sequences be conserved. in this section, we will compare samo with the conventional methods, such as dali, ce and lund.

first we emphasize that one of the basic roles of protein comparison is to provide insight into evolution. i.e. address the question of divergence or convergence of proteins  <cit> . originally, interest in automated structural comparison methods arose from the need to superimpose the structures of divergently evolved proteins. in such comparisons, a strict sequential order conservation has been enforced. in this paper, we show that both samo and the conventional methods perform well for the comparison of divergently evolved proteins .

however, samo can deduce additional evidence of divergent evolution when the results of a pure 3d structural comparison reveal that sequential order is conserved. in other words, samo "rediscovers" the dual sequence-structure homology in divergent species. we will clarify this point in the following examples. we adopt the same benchmark examples as those of  <cit>  from protein data bank  <cit>  as a basic set for numerical simulation by comparing with the several existing methods, i.e. dali  <cit> , ce  <cit> , and lund  <cit> . there is no post processing in our simulation, and cα representation is adopted for each protein chain. the convergence criterion is ε =  <dig>  for all examples.

the simulation results are shown in table  <dig>  where dihydrofolate reductases and globins are considered easy for alignment while other ten protein pairs are thought to be very difficult to align  <cit> . for any protein pair, samo gives a list of solutions corresponding to different λ from small value to large value, which all belong to the pareto set. since a different λ gives an optimal solution with different m and rms for the proposed method, we listed those results with the corresponding λ, which are comparable to others. according to table  <dig>  all of the aligned results by samo are almost consistently better than others. the comparison results in reductases and globins family show that both samo and the conventional methods can obtain good matches. all of the rms are lower than  <dig>  and almost all the residues are matched. the difference lies in that our results are obtained without the sequential order constraint. in particular, for the ten most difficult protein pairs  <cit> , our algorithm performs effectively and typically produces alignments with much lower rms distances or longer chains. since most of the matched amino-acid pairs by samo conserve sequential order, the protein pairs for "reductases", "globins" and "ten difficult structures" of table  <dig> belong to the first category, which indicates that those pairs are evolutionarily divergent, and are originally from the same family.

in addition, we also aligned protein pairs for different folds and different classes, and compared the results with other methods. the results indicated that our algorithm can obtain an alignment with a larger matching portion with a better rmsd for those protein pairs. "-" in the table means that method does not give a result or the result is not available. simple analysis indicates that the conventional methods perform well for proteins belonging to the same family or fold, but it is difficult for them to detect similarities of proteins belonging to different folds and classes unless there are sufficiently large fragments of consecutive residues in both proteins. in contrast, our approach overcomes these limitations. in particular, in addition to aligning protein structures for the first category , it is able to obtain matches of isolated residues not belonging to contiguous fragments or belonging to non-secondary structure elements, in particular, structure motifs. to demonstrate that the aligned 3d structure motif by samo has biological meaning, we give several examples of detecting similarity for active sites in subsection "identifying active sites", which belong to the second category. furthermore, in the last part of table  <dig>  two circular permutation examples are given. the results show that samo also outperforms other methods. at the same level of rms, the number of matched amino-acid pairs in samo experiments is almost double. more examples for finding circular permutation are discussed in details in subsection "detecting circular permutations".

detecting circular permutations
a circularly permuted protein arises from protein duplication and subsequent deletion of n- and c-terminal regions in the corresponding duplicated units. the motivation of emphasis on comparing such proteins is partly originated in that circularly permuted proteins are common in the protein structure database. as reported in  <cit> , there are 47% of all protein domains are superimposable to at least one other protein domain in the database after their sequences are circularly permuted by a systematic search for all protein pairs in the scop domain database. especially some of them are nonsymmetric proteins, which become structurally superimposable to other protein only after a circular permutation of the sequence. in such a way, their remote homology can be detected. also discovery of circular permutation at genome wide scale will enable systematic studies of its contribution to the generation of novel protein function and novel protein fold.

currently there are mainly two classes of the available circularly permuted detecting methods. one is sequence alignment-based methods  <cit> . its drawback lies in that it can miss many circularly permuted proteins, because either one or both fragments may escape detection by local alignment if the two proteins are distantly related. the second class is structure alignment-based methods. as shown in table  <dig>  the conventional methods such as, dali and ce fail to detect circular permutation due to sequential order constraint in computation. one feasible way is to use structure alignment in an order-independent manner  <cit> , which is promising to uncover many more ancient permutation events. in this subsection, we will focus on detecting circularly permuted proteins by comparing with the method of  <cit>  on a larger set of examples. these results are listed in table  <dig>  with the parameter a taking the default value  <dig> , samo outperforms the method in  <cit>  both in naturally occurring and human made examples of permuted proteins. the match between naturally occurring pair 1rin and 2cna is illustrated in figure  <dig> 

identifying active sites
recognition of common substructural features  that do not generally conserve the amino-acid sequential order entails application of the sequence order-independent methods. examples of such features may include similarities between active sites of convergent structures, between different folding motifs, between scaffolds of unrelated proteins, and between recurring stable configurations in the interior of proteins. in contrast to the concept of motifs defined by the multiple sequence alignment, we aim to identify structural motifs or active sites which are "real" 3d motifs. as shown in this section, samo succeeded in detecting the similarities of active sites or structural motifs.

the structural similarity between the active sites of proteins only can be recognized by visual inspection. similar to the results in  <cit> , samo succeeded in finding the rough similarity around the active sites of proteins automatically, without any prior knowledge of their existence and the information of side chains. for example in figure  <dig>  we give the comparison result of proteins β-trypsin  and actinidin . at first sight, it seems that it is a random match of small segments plus isolated residues  of figure  <dig>  active sites are highlighted in different colors). however close inspection reveals that most of the matched pairs are located in the active sites. the subfigures  and  of figure  <dig> show the detailed match of the detected active-sites by removing the aligned isolated residues which are not biological meaningful. clearly the residues composing the active site come from different regions of the protein chain. the similarity is evaluated from pure structural viewpoint and can only be detected in a sequence order-independent strategy. our findings are similar to the results in  <cit>   but have more matched amino-acid pairs. in addition, for another example  and proteinase k ) in  <cit> , we also obtain better results.

the comparison with the order-independent structure comparison method in  <cit>  was conducted and the results are listed in table  <dig>  the protein pairs are taken from the table  <dig> of  <cit> , where some entries are removed due to the structure data update of pdb database. another criterion  proposed in  <cit>  is introduced to assess the quality of protein structure comparison. the score is defined as: score = m/ +  + m) = m/, where m is the number of matched amino-acid pairs between two proteins; nx and ny are the number of amino acids of the two proteins x and y respectively. clearly, the number of matched amino-acid pairs is divided by the sum of the number of unmatched residues in protein x, the number of unmatched residues in protein y and the number of matched amino-acid pairs. this score is designed to take into account the number of matched amino-acid pairs and to penalize the difference in sizes between two proteins. the comparison results show that samo performs better when considering all three criteria together: m , rms  and score.

discussion
as demonstrated in the paper, samo has the following features in addition to structure alignment: 1) detect spatial similarity between evolutionary convergent or divergent structures; 2) identify active sites  and circular permutations; 3) reduce the computational complexity and improve the comparison quality.

for evolutionarily related proteins, the alignment results by samo show the strict sequential order. hence, our method  not only can detect this kind of structure similarity, but also can provide stronger evidence in favor of divergent evolution comparing with the conventional structure alignment methods. also samo has the ability to find circular permutations by structure comparison.

by matching isolated residues, one of major benefits for samo is that it can find the similar three dimensional motifs  between proteins which belong to different families or different folds, although many of these motifs have not be generally found and their biological functions are not well identified. another potential application is to use samo to detect similarity for pockets or mouths in protein surfaces that are closely related to protein functions  <cit> . in fact, one reason to develop the method is because the detection of similar protein surface patterns with different underlying primary sequence order can not be addressed by the current structure alignment method. the need to develop such a method is further illustrated in  <cit> . for example, when convergent evolution occurs, nature discovers the same functional surfaces multiple times, as is the case of the catalytic triad in serine protease. it is likely that there may be many such examples where proteins with similar functional surfaces have different underlying protein core architectures, and in particular, the key residues important for function may have different order in primary sequences. our method currently can detect such similarity and can be used in assessing similarity of order-independent surface patterns. the comparison for protein pockets by samo and the results assessment are currently in progress.

although the proposed algorithm can find the structural motifs by comparing protein pairs, the aligned residues may not always represent biologically meaningful substructures or regions. one reason is that the aligned atom pairs may be distributed in a wide area or may not be always restricted in a local area of a protein. to exclude such cases , manual inspection is needed to find biologically meaningful match of residues.

as reported in this paper, another major contribution of the new method is its concise in mathematics and cheap in computation. we expect that our method will enable routine comparisons of any picked structure against the large database of 3d structures and provide web service by exploiting current information technology in the similar manner to the comparison of a query dna sequence with the sequence database. it will further provide a wealth of information and an insight into evolutionary and functional aspects of biological macromolecules. the implication of the availability of such a tool can provide applications ranging from protein folding problem to computer-aided drug design because it is the structure that plays a critical role in carrying out the necessary biological functions. the software samo is available at the website  <cit> .

CONCLUSIONS
in this paper we developed samo which is able to align protein structures, reveal divergent evolution, detect circular permutations and identify structural motifs in an accurate and efficient manner. the proposed algorithm is general and treats the structure alignment in a more accurate way with implicit complete exploration of the entire space. the original protein alignment problem is formulated as a multi-objective optimization problem with mixed variables, and further decomposed into lps and lss. a very efficient algorithm with a numerically stable convergent process is developed for solving lps and lss successively. we show that the size of variables linearly increases with respect to the number of atoms of the protein pairs. by controlling a single distance-related parameter, theoretically we can obtain a variety of optimal alignments corresponding to different optimal matching patterns, i.e., from a large matching portion to a small matching portion. numerical results further support that samo can not only detect close spatial similarity between evolutionarily divergent structures and circular permutations but also identify remote convergent relationships by the similarity of active sites.

availability and requirements
• project name: samo

• project home page:  or 

• operating system: windows, linux

• programming language: c++

• other requirements: none

• license: freebsd

• any restrictions to use by non-academics: licence needed

abbreviations
pdb: protein data bank

rmsd: root mean square distance

3d: three dimensional

lp: linear programming

samo: protein structure alignment tool based on multiple objective optimization

lss: weighted least square subproblem

lps: integer linear programming subproblem

authors' contributions
lc proposed the main idea. lyw and yw designed and implemented the algorithm. sz and xsz improved the model and gave valuable suggestions. all authors write and approve the manuscript.

supplementary material
additional file 1
a text file contains a brief introduction of the software.

click here for file

 additional file 2
the windows version of the software.

click here for file

 additional file 3
the linux version of the software.

click here for file

 acknowledgements
this work is partly supported by important research direction project of cas "some important problems in bioinformatics", and national natural science foundation of china under grant no.  <dig> and  <dig>  many thanks to michael j. hirsch for helpful comment on the decomposition method in this paper. the authors are grateful to the editor and anonymous referees for comments and helping to improve the earlier version.

figures and tables mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacuwf7oabgaqeaaaa@2e7f@ =  <dig> .

