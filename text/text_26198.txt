BACKGROUND
the reliability and accuracy of many bioinformatics methods such as homolog identification, comparative modeling, phylogenetic analysis and others depend heavily on the quality of multiple sequence alignments. heuristic approaches such as progressive and iterative methods are generally used to obtain multiple sequence alignments in a computationally efficient manner. in progressive approaches, a multiple alignment is generally built up gradually by aligning the most similar sequences first and successively adding in more distant relatives. a number of alignment programs apply this strategy  <cit>  by constructing a global alignment over the entire length of the sequences; they differ mainly in the procedure employed to determine the order of the sequences to be aligned. iterative algorithms  <cit>  generally attempt to improve the overall quality of alignment by employing an objective function and heuristic measures to obtain an optimal alignment. alternative approaches that utilize a co-operative strategy to integrate complementary algorithms  <cit>  and/or incorporate additional biological data  <cit>  have also been developed.

despite the numerous efforts made in this field, each of these strategies has weaknesses that can result in alignments that do not reflect the correct evolutionary relationships. this persistent difficulty of course reflects the fact that aligning multiple sequences is a highly non-trivial task  whose accuracy in practice depends largely on the choice of input sequences, the objective function and the heuristics employed. therefore, the application of an alignment refinement algorithm to an existing or automatically-generated alignment can be helpful for detecting alignment problems. alignment refinement as a post-processing operation is particularly worthwhile considering the increasing importance of high quality alignments in large scale high-throughput analysis.

alignment refinement has mainly relied on iterative approaches  <cit> . recently wallace et al.,  <cit>  studied various iterative schemes and showed that performance of alignment algorithms can be improved by including iteration steps during the progressive alignment. another refinement program, rascal, implemented by thompson et al.,  <cit>  uses a knowledge-based strategy to improve alignments where alignment is decomposed into reliable and unreliable regions and only unreliable alignment regions are modified.

recently we reported a new algorithm, refiner  <cit> , that refines a multiple sequence alignment by iterative realignment of its individual sequences, using the predetermined conserved core  model as a constraint. realignment of each sequence can correct misalignments between a given sequence and the rest of the profile by shifting the individual aligned blocks on that sequence yet at the same time preserves the family's overall block model . the constraint prohibits the insertion of gap characters in the middle of conserved blocks.

in this study we compare the performance of three published alignment refinement algorithms. the accuracy and efficiency of rascal  <cit> , the remove first  method from wallace et al.,  <cit>  and refiner  <cit>  methods were compared using the 3d structure-based alignments from the balibase benchmark database  <cit>  and a collection of manually curated high quality alignments from conserved domain database   <cit> . the quality of the refined alignments was assessed in terms of various scoring functions, by consistency with structure-structure alignments from balibase, and measuring sensitivity in profile-based database searches. as a practical matter, we also report the cpu time required by the three methods. this comparison study reveals that while none of the refinement methods provide dramatic improvements, the refiner algorithm performs consistently well in conjunction with all alignment-generation algorithms tested. further, of the three methods studied refiner best avoids degrading the original alignment's quality.

RESULTS
improvement of alignment
alignments generated by clustalw version  <dig>   <cit> , muscle version  <dig>   <cit> , dialign version  <dig>   <cit> , fftnsi from the mafft package version  <dig>   <cit> , probcons version  <dig>   <cit>  and tcoffee version  <dig>   <cit> , were refined by three different methods: refiner  <cit> , rf method  <cit>  and rascal  <cit> . since each of these refinement methods seeks a multiple alignment with the highest score, we first compared their optimization procedures by calculating scores from the refined alignments using four different objective scores. figure  <dig> shows the relative improvement of refinement as measured by alignment score, conservation score , normd score  <cit>  and information content for the balibase benchmark alignments. the percentage of refined alignments that exhibit an improved score, i.e. where the refined alignment has a higher objective score than the original alignments, is found to be highest for refiner for all objective scores tested. when using alignment score, scorecons score, normd score and information content, respectively, these percentages are 94%, 98%, 90% and 84% for refiner, 92%, 90%, 86% and 63% for the rf method, and 94%, 94%, 87% and 57% for rascal. notably, these values also reveal that refiner produces fewer cases in which the objective score of the refined alignments drops.

we observe similar results  when refiner, rf and rascal are applied to alignments from the cdd alignment dataset. in this case, refinement algorithms were applied to the original cdd alignments and objective scores are computed pre- and post-refinement. although the extent of positive improvement  is much lower in this dataset, relative to the other methods refiner performs consistently well for different scoring functions and also results in fewer cases where alignment accuracy actually degrades following refinement.

while refiner performs well numerically , the biological relevance of the refined alignments should also be considered. in this context the balibase sum-of-pairs  scoring scheme  <cit>  is adopted to evaluate the quality of derived alignments. the improvements in sp score exhibited by the refiner, rf and rascal refinement methods are illustrated in table  <dig>  the 'default' columns in table  <dig> provide the average sp score for alignments generated by the individual alignment programs used in this benchmarking study, whereas columns under 'rascal', 'rf' and refiner provide the average sp score obtained after applying that refinement method to the corresponding default alignment. it is evident from the table that the refiner method performs most consistently well in improving the alignments generated by different alignment methods.

for comparison, we calculated the correlation coefficients between the improvement of estimated  and real alignment accuracy scores  for the balibase benchmark set. for all scoring methods the correlation coefficient is low  for balibase alignments. this could be due to the fact that the real alignment accuracy is estimated from the core regions  <cit>  while objective scores are calculated taking into account the whole alignments. this inconsistency between the correlation of the objective score and sp score in balibase has been reported elsewhere  <cit> . nevertheless, on all test sets the objective scores are better correlated to the improvement of real alignment accuracies for refiner-derived alignments than for rascal and rf method refinements.

relationship between improvement of alignment accuracy and benchmark difficulty
as the quality of an alignment improves, refinement procedures reach a point of diminishing returns. it is therefore useful to identify the circumstances under which refinement is most likely to be helpful. we explored this issue by correlating the improvement of alignment accuracy under refinement  and the quality of the initial alignment as measured by its objective score, focusing on the refiner method. figure  <dig> shows the relative improvement of refined alignment accuracy compared to the input alignment's quality as expressed by the scorecons score , normd score  and information content . it can be seen from the figure that alignment refinement has its greatest impact for initial alignments with lower objective scores and it is noteworthy that the alignment accuracy typically gets better upon refinement in these cases. so when the input alignment's score is low  performing alignment refinement is most often beneficial. at higher levels of input alignment quality , however, it is also encouraging that refinement can provide moderate improvement yet seldom results in significant degradation.

comparison of the sensitivity/specificity of the refined alignments
we used the program hmmsearch from the hmmer  <dig> . <dig> package  <cit>  to perform database searches after converting the refined alignments generated by the refiner, rf and rascal methods to hmm profiles using the program hmmbuild from the hmmer  <dig> . <dig> package. hmm models derived from the  <dig> cdd alignments in set_ <dig>  before and after each of the refinement procedures were used to search the 'non-redundant' database of protein chains .

the database search sensitivities at 1% and 5% error rates are given in table  <dig>  the sensitivities of sequence profiles/hmms have increased only when employing refiner, and the database search sensitivities fall slightly for the other two refinement methods. admittedly the overall improvement in sensitivity is not dramatic but it does imply that in this scenario the refiner algorithm produces better refined alignments.

comparison of average run times for refinement
finally, we compare the average computation time required for each of the refinement algorithms. the cpu time cost is an important practical factor that influences the utility of an algorithm to a great extent. table  <dig> shows the average cpu time for refinement of five reference benchmark sets from balibase  <dig>  for each of six alignment-generation programs. the 'default' column displays the time spent generating the alignment used as input to each refinement program. rascal proves to be the fastest refinement method while rf method seems to be very expensive in comparison. refiner's runtime characteristics are similar to those of rascal for all five balibase references.

although the computational complexity may be similar for rf and refiner due to their similar approaches to the problem, implementation differences appear to account for the disparity in speed between the two methods. specifically, rf is a perl script which performs multiple system calls within its innermost iteration loop, including invocations of the program muscle and/or clustalw to perform sequence realignment operations. in contrast refiner is a c++ binary that has no nested system calls and includes a fast dynamic programming engine to do sequence realignment operations.

CONCLUSIONS
the alignment of multiple sequences is a very important task and still remains a challenging problem. acknowledging the difficulty of that challenge, an alternate approach to the underlying problem has been examined here: augmenting alignment-generation procedures with a separate alignment-refinement algorithm capable of repairing those errors that remain. iterative refinement algorithms generally attempt to improve the overall quality of alignment by employing objective functions and heuristics to obtain an optimal alignment. most iterative refinement methods face the challenge of how to escape from sub-optimal alignments. therefore, the main differences among the existing methods lie in the effective definition of an objective function and intelligent design of the method's heuristics.

in this study we conducted an extensive comparison of the performances of three different alignment refinement algorithms. the accuracy and efficiency of the refinement programs such as, rascal  <cit> , rf method  <cit>  and refiner  <cit>  were compared using the 3d structure-based alignments from the balibase benchmark database as well as a diverse set of manually curated high quality alignments from the conserved domain database. a comparison in terms of different objective scoring functions found better performance for alignments refined by refiner rather than the rf or rascal methods. the biological relevance of the refined alignments was also assessed, where we adopted the balibase sum-of-pair  scoring scheme to evaluate the refined alignments' quality. though none of the methods displayed dramatic improvements, refiner performed consistently well for alignments generated by six different alignment algorithms. correlation analysis between improvements in the predicted accuracy  and the real accuracy  also suggested better overall performance by refiner algorithm.

further, we tried to identify the range of initial alignment quality in which refiner is most successful at improving the alignment. high-quality input alignments are difficult for refinement algorithms to improve without also making additional deleterious modifications. because the good input alignments also tend towards higher objective scores, for these purposes the input alignment's objective score is viewed in a general sense a proxy for the difficulty that alignment presents to a refinement algorithm. the impacts of refinement by the refiner algorithm are very prominent in the lower ranges of initial alignment quality where refiner provided significant improvements. for higher quality input alignments  although refiner still found improvements, the impact of refinement is reduced. this might indicate that those alignments were already been optimized and therefore were less prone to changes.

we have also described a way to validate the quality of a refined alignment by examining the performance of its sequence profile in homology searches. this validation test provides a useful quality control in the typical situation where one does not have a reference alignment. in addition, it demonstrated that the sensitivity of sequence profiles/hmms increased when employing the refiner method but fell slightly for the other two refinement methods studied.

since the refiner method was designed as an alignment refinement tool, extensive benchmarking, validation and comparison of its performance is vital. therefore, we conducted comparison tests on large benchmark data sets and found that refiner on average provided moderately better performance in terms of improving the quality of an input alignment. however, we have also shown that significant improvements are possible, particularly for initial alignments with lower values of one of the various common objective functions. obtaining such improvements manually or by re-running another automated alignment generation algorithms is both uncertain and time-consuming. therefore, as a practical matter, refinement methods such as refiner do appear well worth the time spent on their application to alignments of interest.

our previous study  <cit>  established the concept that realignment of each sequence can correct misalignments between a given sequence and the rest of the profile and at the same time preserves the family's overall block model. in contrast, the current manuscript describes a comparison of three different methods available for the refinement of multiple sequence alignments using a standard benchmark dataset . the performance of the refinement methods is compared in terms of profile sensitivities for homolog retrieval and cpu time usage. furthermore, we analyzed how different strategies for using refinement programs are appropriate depending on the quality of the input alignment . we are not aware of another analysis like the one presented here, and believe that it will be helpful to researchers in the sequence analysis field when attempting to decide if their alignment tasks can benefit from the use of one or more refinement programs.

