BACKGROUND
one of the fundamental problems in evolutionary biology is to determine the genomic mechanisms that generate phenotypic and species diversity. gene duplications play a critical role in acquiring new gene functions and, consequently, adaptive innovations . recent surveys of genomic data have revealed tremendous variation in gene content and copy number across species . scientists are now challenged to place this variation in an evolutionary context, that is, to determine where in evolutionary history the gene duplications took place. this is the first step in linking the genomic changes to phenotypic changes or shifts in diversification rates.

gene tree–species tree reconciliation provides a direct approach to infer the patterns and processes of gene duplication and loss within the evolutionary history of species. evolutionary processes such as gene duplication and loss, lateral transfer, recombination, and incomplete lineage sorting  create incongruence between the gene trees and the phylogenies of species in which the genes evolve . gene tree–species tree reconciliation problems seek to infer and map the evolutionary events that caused the incongruence. in this paper, we introduce a novel, and in practice, efficiently computable maximum likelihood approach for reconciling gene tree and species tree topologies based on gene duplications and losses, and we demonstrate its performance using simulated and empirical data sets.

related work
the first model to reconcile gene trees with species trees was the gene duplication model, which was introduced by goodman et al.  <cit>  . in the gene duplication model, a gene tree can be embedded into a species tree through least common ancestor mapping , which maps every node in the gene tree to the most recent node in the species tree that could have contained the ancestral gene . a node in the gene tree represents a duplication if it has a child with the same lca-mapping. this mapping also represents the most recent possible location of the gene duplication and/or loss, and it represents the most parsimonious reconciliation hypothesis in terms of gene duplications and losses. in other words, the lca-mapping implies the fewest number of gene duplications, or duplications and losses needed to reconcile the gene trees with the species tree.

minimizing the number of gene duplications and losses through lca-mapping appears to produce relatively accurate mappings of gene duplications and losses when the rates of gene duplication and loss are slow  <cit> , and it can be computed in linear time  <cit> . moreover the parsimony criterion has been used effectively in phylogenetic inference, in which, given a collection of gene trees, the goal is to find the species tree that minimizes the number of duplications or duplications and losses . however, there are usually many other possible locations of duplication and loss events besides the ones implied by the lca-mapping , and some of the most biologically interesting genes, such as the mhc gene family or the olfactory receptor genes, have high rates of duplication and loss. furthermore, the parsimony criterion fails to consider evolutionary time, which is typically represented by the branch lengths on the species tree. for example, if a duplication could have occurred on two branches, one representing one million years and the other representing  <dig> million years, all else being equal, it would be much more likely that the duplication occurred during the one hundred million year interval. yet, a parsimony model would not consider this information. finally, it is difficult to incorporate the parsimony criterion into a rigorous statistical framework to examine evolutionary hypotheses associated with gene duplication.

there has been much recent interest in likelihood-based approaches for reconciling gene trees and species trees, much of which has focused on coalescence models to describe incomplete lineage sorting . probabilistic modeling of gene duplication and loss is relatively new and has largely focused on birth-death processes  <cit> . although these approaches and models are promising, they represent a narrow range of potential models, and are computationally complex.

contributions
we describe a novel, efficiently computable maximum-likelihood model-based approach for gene tree reconciliation. our initial model infers evolutionary scenarios from a gene tree and a species tree with branch lengths, which may represent the time between neighboring speciation events. our model allows the use of almost any discrete distribution to model gene duplications throughout the species tree. more precisely, we assume that for every branch of the species tree there is a given discrete distribution, which is parameterized by its length. the branch length defines the probability of having n gene duplications on this branch. based on this model, we define the following maximum likelihood problem: given a gene tree and a species tree, find the gene tree reconciliation with the maximum likelihood.

to address and ultimately solve this complex problem, we model formally the notion of an evolutionary scenario  and prove its equivalence to the model of dls-trees  <cit> . despite the complexity of the possible scenarios of gene duplication and loss, we provide an in practice efficient algorithm for the maximum likelihood problem based on dynamic programming, and use it to reconstruct the optimal placement of gene duplications and optimal evolutionary scenarios. we show that the dynamic programming approach can be efficiently applied in almost all instances  of the maximum likelihood problem. additionally, we provide a branch and bound solution for the few remaining instances that are not solved by the dynamic programming approach.

we developed drml, a prototype implementation of the algorithms in python, and demonstrate its performance on empirical and simulated data. drml identifies the maximum likelihood gene tree reconciliation in a few minutes on problems with several hundreds of species and gene sequences.

methods
basic notation and preliminaries
a gene tree is a rooted, binary, and directed tree whose leaves are labelled by the species names. a species tree is a gene tree whose leaves are uniquely labelled. let t be a gene tree. for a node v ∈ t we denote by t the subtree of t that is rooted at v. by root we denote the root of t. a node is called internal if it has two children. by l we denote the set of leaves of t, and by l we denote the set of leaf labels of t. in this paper we assume that l ⊆ l for a gene tree g and a species tree s.

we define ≤ to be the partial order on the set of nodes of t, where x ≤ y if y is a node on the path between the root of t and x. the least common ancestor of a non-empty subset of nodes x ⊆ t, denoted by lca, is the unique smallest upper bound of x under ≤. mapping is a function m from the nodes of gene tree g into the nodes of a species tree s that preserves the leaf labels, and satisfies:  for all u, v ∈ g, if u ≤ v then m ≤ m, and  for all g ∈ g, lca))) ≤ m. the special case of a mapping, where the equality holds in the second condition, is called lca-mapping and denoted by m*. an internal node g ∈ g is called lca-speciation if and only if its children are not mapped into m*.

modeling evolutionary scenarios
informally an evolutionary scenario is equivalent to an embedding of a gene tree into a species tree . a gene can be lost or duplicated into new copies by a gene duplication or speciation event. both speciation and duplication create two copies of a gene. however, the duplication event occurs in one species and produces two copies of the gene  in the same species, while the speciation creates two new species, each with a single copy of the gene . in order to model the evolutionary scenario, we first need to state whether an internal node of the gene tree represents a speciation or a duplication event. additionally, we have to “locate” these events from the gene tree in the species tree. the locations are described by mappings.

next, we present the evolutionary scenario called reconciliation.

definition  <dig> . a pair r = 〈m, Σ〉, where m is a mapping and Σ is a set of nodes from g, is called reconciliation if g is lca-speciation and m = m*, for each g ∈ Σ. the elements of Σ are called speciations .

let r = 〈m, Σ〉 be a reconciliation. note that the speciations are internal in g. it should be clear from the introduction that other internal nodes of g will be called duplications. we define dupr to be the number of duplication nodes for which the mapping m is equal to s. similarly, we define specr to be the number of speciation nodes. by r* we denote the lca-reconciliation 〈m*, Σ*〉, where Σ* is the set of all lca-speciations.

a reconciliation can be used to model an evolutionary scenario that does not contain instances of the following:  a duplication and an immediate loss of one of the descendant copies, or  a gene which is lost after a speciation event in all new formed species. such cases cannot be detected because there is no existing evidence of the loss events.

it is not difficult to see that there is one-to-one correspondence between reconciliations and semi-normal dls-trees where dls-tree is a formal model of evolutionary scenario in the duplication-loss model introduced in  <cit> . semi-normal dls-trees cover the most important and representative part of the scenarios space. the example of reconciliations is presented in figure  <dig>  in general, the number of possible reconciliations is exponential in the size of gene and species trees. górecki et al.  <cit>  provide more details on properties of evolutionary scenarios and the dls-trees.

model and problem
from now on we will use an extended notion of the species tree with branch lengths. for a node s ∈ s we denote by |s| the branch length associated with s. informally, |s| can be treated like a branch length of the edge connecting s with the parent of s. note, that the root has no edge of this property. however, the notion of the tree could be easily extended to having the root edge.

let p denote the probability that d duplications occurred during the time period τ under the assumption of a constant duplication rate λ. without loss of generality, we use the poisson distribution: . the likelihood of a given reconciliation r of a species tree s and a gene tree g is defined by:

l = Πs∈sp|λ). 

definition  <dig> . given a species tree s with branch lengths and a gene tree g, we call the reconciliation r optimal if it maximizes the likelihood l in the set of all reconciliations of s and g.

problem  <dig> . instance: a species tree s with branch lengths and a gene tree g. find: the likelihood of an optimal reconciliation.

problem  <dig> . instance: a species tree s with branch lengths and a gene tree g. find: for each s ∈ s find dupr and specr such that r is an optimal reconciliation.

problem  <dig> . instance: a species tree s with branch lengths and a gene tree g. find: an optimal reconciliation.

solutions
we present a dynamic programming  formula for solving the majority of instances of the mle problem . this formula can be naturally extended to reconstruct duplication-speciation settings . first we introduce necessary definitions related to reconciliations. for a mapping m from g into s, let φ be the number of internal nodes of g that are mapped into s under m  := |{g: g is internal in g such that m ≤ s}|). now we define a notion of acceptable triplet, which is used to define reconciliations in the algorithm.

definition  <dig> let g be a gene tree and s be a species tree. a triplet 〈σ, κ <dig> κ2〉 is called acceptable for a node s ∈ s and its children s <dig> and s <dig> iff there exists a reconciliation 〈m, Σ〉 such that under mthe following conditions are satisfied:  g has exactly σ speciation nodes mapped into s, and  the number of internal nodes of g, which are mapped into s, equals κkfor k =  <dig> . the set of all acceptable triplets for given nodes s, s <dig> and s <dig> is denoted by acc.

algorithm dp1
for a given s and g return m, |l| –1) where m:s x ℕ → ℝ ∪{–∞} is defined as follows, for s ∈ s and κ =  <dig> ... φ  := –∞ in other cases):  if s is a leaf then: m := p,  if s is an internal node with two children s <dig> and s <dig> then m equals:   

where p denotes the probability of δ duplications on branch that terminates in s ), δ =  <dig> ... κ, σ =  <dig> ... specr*, κ = κ1+κ2+σ + δ and 〈σ, κ <dig>  κ2〉 ∈ acc.

algorithm dp <dig> describes a dp formula for the mle problem, which we detail in the following. consider embeddings that are located in a subtree s, for some reconciliations. informally, m denotes the maximal likelihood value in the set of all reconciliations under the following conditions:  only the embedding  located in s is evaluated for the log-likelihood,  κ is the total number of duplication and speciation nodes, which are located in this part of embedding,  δ is the number of duplication nodes associated with s, and  σ is the number of speciation nodes associated with s.

as mentioned earlier, the dp formula reconstructs the settings of duplication and speciation nodes, or the numbers of these events associated with the nodes of the species tree . formally, a ds setting, or shorter a setting, is defined as a pair of two functions dup, spec: s → ℕ, called distribution of duplications and distribution of speciations, respectively. the distributions of duplications can be reconstructed for internal nodes of s from values of variable δ in formula , and for leaves from κ. similarly, we can use variable σ  for reconstructing the distribution of speciations. we call a setting 〈dup, spec〉 valid  if there exists a reconciliation r  such that dup = dupr and spec = specr. the following theorem states an appealing property of the mle problem.

theorem  <dig> if at least one of the ds settings reconstructed from algorithm dp <dig> is valid then l is equal to m, |l| –1), where r is an optimal reconciliation.

in general, algorithm dp <dig> may result in values that are larger than the likelihood of the optimal reconciliation. however, we show later that such instances, which we call hard, are extremely rare and occurring in only  <dig>  –  <dig> % of random gene tree simulations. the general solution is described later in the paragraph about hard instances. algorithm dp <dig> solves a different problem than the dp algorithm presented in  <cit> . arvestad et al.  <cit>  present a solution for computing the likelihood only when the reconciliation is given. in contrast, our approach has the following properties:  we maximize the likelihood over all reconciliations  requires a gene tree and a species tree with branch lengths only),  we use a flexible model of gene duplication based on aggregating duplications on the species tree edges, which differs from a birth-death process.

reconstruction reconciliation – mls problem
we briefly introduce the general idea of our algorithm for reconstructing a reconciliation from a setting 〈dup, spec〉. this algorithm is enumerating all variants with an additional filtering, which is given by some constraints depending on the setting and the properties of the scenarios. this approach requires exponential time in the worst case. however, as we demonstrate, it can be successfully applied to the majority of cases.

algorithm dsr, presented below, first allocates speciation nodes  and then duplications nodes  with mappings. however, before reconstructing mappings of the duplication nodes some of the speciation configurations can be rejected. we now briefly explain a filter process used in the 2nd step of the main loop. consider internal nodes g and g' in g such that g< g' and g' ∈ Σ. then m <m, where m is the mapping. in other words, the mapping of g is ‘locked’ by the mapping of g'. let α denote the number of nodes in g that are locked by s ∈ s  = |{g ∉ l: there exists g' ∈ Σ such that g <g' and m* <s}|).

algorithm dsr is utilized to determine whether a given setting is valid and to reconstruct all reconciliations .

algorithm dsr
input: gene tree g, species tree s and ds setting 〈dup, spec〉. output: a reconciliation r of g and s such that 〈dup, spec〉 = 〈dupr, specr〉 . for each subset Σ of Σ* that satisfies the distribution spec set members of Σ to be speciations and inherit their mappings from the lca-reconcilation. execute 1- <dig> for each Σ:

 <dig>  let d be the set of all internal nodes of g that are not in Σ. set all members of d to be duplications.

 <dig>  reject Σ if there exists s ∈ s such that  α >∑a<s spec + dup  or  φ – α – spec < dup .

 <dig>  allocate mappings for the nodes in d according to the distribution dup. if the allocation was found return 〈m, Σ〉 where m is the reconstructed mapping.

acceptable configuration
first, we explain: why we do not enumerate all possible triples of 〈σ, κ <dig>  κ2〉 under the conditions given in the formula  instead of constraining them to acc.

as an example, consider the gene tree , ),b)) and the species tree s = . the lca reconciliation consists of:  <dig> duplication and  <dig> speciation nodes associated with the root of s. observe that there is no reconciliation where the root has  <dig> duplications and  <dig> speciation nodes. similarly, there is no reconciliation with  <dig> duplications and  <dig> speciation node in the root. however, without the acc constraint the dp formula could result in a likelihood computed for one of these invalid duplication-speciation settings. consequently, only reconciliation based configurations are required to increase significantly the number of valid settings reconstructed from the dp formula.

for the previous example and nodes ab, a and b we have the following acceptable triplets: 〈 <dig> ,0〉 , 〈 <dig> ,0〉, 〈 <dig> , 0〉, 〈 <dig> ,0〉, 〈 <dig>   <dig> 〉, 〈 <dig> ,0〉 and 〈 <dig> ,0〉.

to solve the general problem of acceptability we formulate a problem seqpair.

problem  <dig> .

instance: integers α ≥  <dig>  β ≥  <dig> and a sequence a of pairs of nonnegative integers: 〈α <dig>  β1〉, ..., 〈αs, βs〉. find: the lengthof the longest subsequence of a satisfyingand.

seqpair can be solved with with the dp formula similar to the dp solution of the knapsack problem  <cit> . however, in our case the algorithm is polynomial due to the constraint . this inequality can be deduced from the applications of seqpair to sets of size s of ≤-incomparable lca-speciations from g. with this constraint the algorithm completes in at most  steps.

now we show how to utilize the solution of seqpair. for a given reconciliation, s ∈ s and its children s <dig> and s <dig> let gs be the maximal set of maximal disjoint subtrees of g such that for t ∈ gs the nodes of t are lca-mapped  into nodes of s for i =  <dig> or i =  <dig>  such t is called an si-tree. there are specr* speciation nodes in g lca-mapped into s. for each such node g, the two subtrees rooted at children of g are elements of gs, while one of them is an s1-tree and the second is an s2-tree. such subtrees will be called dual. note that not all trees in gs are dual. such trees are called free.

in our example of the gene tree , ), b)), if s is the root of  then gs contains  <dig> pairs of dual subtrees.

lemma  <dig> let gs contain only dual trees:whereareare dual andis an sj-tree. let  be the number of internal nodes of. then 〈σ,κ <dig> κ2〉 ∈ acc for j =  <dig>  and σ ∈ { <dig>  ...,σ*} where σ* is the solution of the seq-pair problem for κ <dig>  κ2and a sequence of pairs:.

in the example:    and . thus the sequence of pairs is: 〈 <dig>  0〉, 〈 <dig> 〉 and the solutions are: σ* =  <dig> if α ∈ { <dig> }, β =  <dig> and σ* =  <dig> if α =  <dig>  β =  <dig>  from lemma  <dig> we can easily reconstruct all seven acceptable triplets. the next lemma solves a general case.

lemma  <dig> for j =  <dig>  letbe the number of internal nodes of all free sj-trees in gs and for i >  <dig> letbe defined like in the previous lemma . then 〈σ,κ <dig> κ2〉 ∈ acc ifffor j =  <dig>  and σ ∈ { <dig>  .. ., σ*} and where for someand, σ* is the solution of the seqpair problem for κ1–p, κ <dig> – q, and a sequence of pairs:.

consider a new example: g= , ), , b)) and a species tree . there is one free tree for groot: t = , b) and one pair of dual trees: . in our case:  and . thus, σ* =  <dig> for κ1=  <dig> and κ <dig> ∈ { <dig>   <dig>  3} and σ* =  <dig> otherwise.

we analyze the complexity of a single acc query. reconstruction of the dual and free trees requires lca-mapping and can be easily computed only once in linear time o  <cit> . from lemma  <dig> we need at most |l| <dig> seqpair queries to solve a single acc query. all seqpair queries share the same sequence of pairs. it can be shown that the queries can be answered in constant time after a single preprocessing that construct the dp-array . thus, a single acc query can be solved in at most  steps.

finally, we analyze the complexity of algorithm dp <dig>  computing acc for all nodes has time complexity o. if the acc queries are cached then the time complexity of algorithm dp <dig> is o from . the space complexity is determined by:  the dp formula : |s||g|,  the dictionary of acc queries for a given node s: |g| <dig>  and  the seqpair dp-array: |g| <dig> 

hard instances
there are hard instances of the mle problem that cannot be resolved with the dp formula  . here, we solve the general mle problem  by developing a branch and bound algorithm with recursive applications of a dp formula, which is similar to the previous one. first we describe the dp formula that computes the likelihood in constrained sets of reconciliations. then, we introduce the branch and bound algorithm.

dp with constraints for mle
we begin with the definition of constrained reconciliations. the constraint is defined by two sets of internal nodes of g: f ⊆ Σ* and l. the elements of f and l are called raised and locked, respectively. by rec we denote the set of all reconciliations r = 〈m, Σ〉 such that  m*|l = m|l ,  l∩Σ* = l∩Σ ,  Σ and f are disjoint . thus, rec contains reconciliations such that the properties of locked nodes  are preserved while the raised lca-speciation nodes are duplications. under this definition, the set of locked nodes can be extended by adding further nodes which share the same “locking” properties. without loss of generality we assume that l is closed under the following conditions:  if g ∈ l ∩ Σ, g → c ∉ Σ and m → m then c ∈ l,  if g ∈ l \ Σ and g→ c ∈ Σ then c ∈ ∈ l, where → denotes a child relation in the tree; that is, a → b iff b is a child of a. the closure operation will be denoted by .

algorithm dp2
for a given s ,g, f ⊆ Σ* and l return mf,l, |l| – 1) where mf,l: s × ℝ → ℕ∪{– ∞} is defined as follows, for s ∈ s and κ = λ... φ  := –∞ in other cases):  if s is a leaf then: mf,l := p,  if s is an internal node with two children s <dig> and s <dig> then mf,l equals:  

where δ = |ls \ Σ*|... κ – λ – λ – |ls ∩ Σ*|, σ = |ls ∩ Σ* |... specr*  – |Σ* \ f|, κ = κ1+ κ <dig> + σ + δ, p is defined in alg. dp <dig>  〈σ,κ <dig> κ2〉 ∈ acc, where acc is the set of acceptable triples for s in the set of reconciliations rec, ls = l ∩ m*– <dig> is the set of locked nodes whose lca-mapping is s, and λ  = |∪g∈l,m*≤s g \ l| is the number of s-blocked nodes, that is, internal nodes whose parent is locked and lca-mapped into s.

algorithm dp <dig> describes the constrained variant of dp <dig>  where the reconciliations are limited by raised and locked nodes. computing acceptable triplets in this version is similar to the schema given by lemma  <dig> and therefore omitted for brevity. however, it is more complex due to locked and raised nodes. formally, formulating an analogous lemma for the constrained case the following differences must be adopted:  dual trees for locked speciations are omitted,  dual trees for raised lca-speciations become free trees, and  all s <dig> and s2-blocked nodes are excluded from all free and dual trees. a formal presentation of the lemma is omitted for brevity. note that algorithm dp <dig> has the same time complexity as algorithm dp <dig> 

branch and bound algorithm for mle
the concept of this algorithm is based on the branch and bound schema, whis is adequately adapted for the constrained dp. we assume that extdp denotes algorithm dp <dig> with the validation of settings , that is, it returns either the maximum likelihood estimation if there exists a valid setting  or returns –∞ otherwise . in a single step of the bb solution there are defined sets of locked l and raised f lca-speciations. we take a non-raised and non-locked lca-speciation s and compute  and . depending on four possible cases  we either return a value or recursively apply bb procedure with modified f and l. note that this approach has an exponential runtime. we omit technical details for brevity.

RESULTS
algorithm implementation
the described programs were implemented as a prototype python program, called drml . specifically, drml takes a gene tree topology and its corresponding species tree with branch lengths and identify the optimal evolutionary scenarios  based on the duplication-loss model. although it is possible to use a broad variety of different distributions to describe the placement of gene duplications events with our algorithms, in drml we use a poisson distribution. this assumes a constant rate of duplication throughout the tree, although again, this assumption can be removed by using our algorithm with other distributions. further detail about the implementation can be found on the drml web page.

simulated data analysis
we first tested the performance of drml with randomly generated species and gene trees. for each n =  <dig> ,...,  <dig>  we randomly generated  <dig> species trees with n leaves. the branch lengths of the species trees were sampled from a uniform distribution across the interval . for each species tree, we also generated a random gene tree topology with n ï€ª <dig>  leaves. tests of “dp time ” were performed with  <dig> replicate pairs of random species and gene trees.

empirical analysis
we also examined the performance of drml using a gene tree from the treefam database  <cit> , specifically accession tf <dig>  from treefam  <dig> . we used a species tree generated from treefam, with the branch lengths obtained from diversification dates in the treetime database  <cit> . to root the gene trees, we first identified all most parsimonious rootings  using urec  <cit> . all parsimony rootings have the same ds settings, and the corresponding optimal lca-reconciliations are almost identical  <cit> . thus, we arbitrary choose one of the parsimonious rootings. for the analysis, we set the duplication rate  to  <dig>  following the estimated rate of gene duplication and loss in the vertebrate genome by cotton and page  <cit> .

discussion
simulation analysis
drml performs well with the simulated data sets even for large trees with almost  <dig> leaves in the trees; the algorithm still finished in less than  <dig> seconds on average. the hard instances occurred in only  <dig> % of the simulated data sets . in the middle diagram of figure  <dig>  the peaks in time represent the exponential implementation of mlr problem. this situation may occur when some special cases of hard instances have dense composition of possible duplications. however, among the nearly  <dig>  randomly generated data sets, this occurred only  <dig> times.

empirical analysis
for our empirical example, drml found an optimal reconciliation  with one optimal ds setting and one reconciliation. the optimal reconciliation contained  <dig> duplications that are not found in the lca-reconciliation. these duplications were found on long branches in the species tree, suggesting, as we would expect, that the longer branches are more likely to contain duplications in likelihood reconciliations.

CONCLUSIONS
our algorithms provide, in practice, a highly efficient and exact approach to infer maximum likelihood based gene tree reconciliations for a novel set of models. in contrast to parsimony based gene tree reconciliations  <cit> , these algorithms can incorporate evolutionary time  into gene tree reconciliations. as we demonstrate in our empirical example , the optimal reconciliations from our likelihood approach can differ from the parsimony reconciliations, and we suggest they may be more accurate when genes have high rates of duplication and loss  <cit> .

our approach also is fundamentally distinct from previously described models based on the birth-death process  <cit> . not only can our approach incorporate a greater range of possible distributions for the duplication and loss process, in general, while the birth-death models infer a branching process for the gene trees, our modeling approach directly aggregates duplications on the edges of a species tree. also, unlike other modeling approaches  <cit> , we assume that the gene tree topology is fixed; we do not incorporate nucleotide substitution models or attempt to simultaneously infer the gene tree topology and reconciliation. thus, although our approach may be more easily misled by gene tree error, our approach is computationally much less complex in practice.

the models and algorithms described in this paper provide the foundation for a rigorous statistical framework to test assumptions about the rates and patterns of gene duplication and loss. in fact, a key feature of our algorithmic approach is that it provides a generic modeling framework in which to compare the likelihood of different distributions of gene duplication and loss throughout evolutionary history. the main disadvantage of a likelihood-based approach compared to parsimony is the computational cost associated with the likelihood function. however, our analyses of simulated and empirical data sets demonstrate that our likelihood approach is computationally feasible even for trees with hundreds of taxa. we note that all models are imperfect representations of actual processes, and furthermore, it is difficult to predict the best model for any specific problem or data set. while the fit of different models will depend on the complex, and largely unknown, selective constraints guiding a gene’s evolution, the utility of a model is also a function of its statistical power and robustness to violations of its assumptions. much future work, involving both simulation experiments and analyses of empirical data sets, is needed to fully characterize and compare the performance of these different modeling approaches. still, the availability of new modeling options will only enrich the study of gene family evolution by providing new opportunities for model comparison studies.

directions for future research include:  allowing soft multifurcations in gene and species trees,  improving the performance of the prototype program in case of hard instances and  characterizing the performance of this approach through gene tree simulations.

authors’ contributions
pg and oe were responsible for developing the solution. pg was developing the code and running the experiments. pg and jgb performed the experimental evaluation and the analysis of the results. all authors contributed to the writing of the paper, read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

