BACKGROUND
the das  was introduced in  <dig>  <cit>  as an integration mechanism primarily for sharing biological annotation of genome assemblies. since then, a growing number of databases have been adopting the protocol to address the issue of aggregating data from external databases. presently, more than  <dig> das sources, covering  <dig> species that publicly offer not only genomic annotations, but also a myriad of other data types, including protein records, protein-protein interactions, and transcriptomics data  <cit> . thus, a large community of federated databases that share a domain of discourse in das has been established and can therefore be integrated. furthermore, the das registry was launched as a web-service that allows publishing and finding of das services  <cit> . the das registry is keeping track of available das sources, providing metadata about them and monitoring the reliability of the service.

presently, much open-source infrastructure has already been developed for das. on the server-side, implementations have been developed in perl, as in the case of proserver  <cit> , as well as java, namely mydas  <cit>  and dazzle  <cit> . on the client-side, libraries for manipulating das data are available in perl as bio::das::lite  <cit>  and in java as dasobert  <cit> . also, das viewers such as dasty <dig>  <cit> , developed using javascript and ajax, or spice  <cit> , using java webstart technology, can be used to bundle and integrate data at the visualization level.

in this work we introduce dasminer, a generic das browser and api designed for exploring both the das registry as well as specific das sources. the motivation to develop the tool was twofold. first, we intended to facilitate access to das data for all users, not only for specialized das clients as genome browsers. thus, the browser automates the process of writing das queries, making it transparent to the user. second, we intended to make use of the das-stored experimental data to create integrative biological models. we demonstrate how to assemble enriched data sets of histone modification and molecular interaction data by accessing different das sources using the api. then we also show how to create new visualizations for these integrated data sets.

implementation
all components of dasminer, namely the browser  and the das api were written in matlab, and are freely available for download . an outline of the implemented software architecture is shown in figure 1a. dasminer interacts with the das registry in order to retrieve metadata about a das service. the search for services  is made through the das-style command sources, and the search can be refined by organism, coordinate systems, label, and capabilities . the registry returns metadata in response, in the format of an xml document, which includes the server url as well as information about the coordinate systems and commands supported by the source. dasminer uses this service metadata for customization and tuning of the gui for browsing das sources. for example, if the source is providing annotation for a dna segment such as ucsc encode, the gui opens the required fields chromosome, start, and stop. on the other hand, if the source requires the input of an entrez id or an ensembl id, such as ensembl human genes, only an id field is shown on the gui.

dasminer application programming interface 
the flexibility of the gui relies on a correspondingly simple library of commands that supports the intricate workings of the das abstraction. the api is responsible for building and executing das queries or commands. basically, the library has functions for connecting and reading das urls, as well as for handling service exceptions such as badly formed xml and server timeout. also, the core functions are dedicated to assembling das commands with the proper syntax. we identified three categories of commands in the version  <dig> e protocol, as illustrated in figure 1b. this diagram illustrates how the functions envelop a das request in a valid url, by concatenating a series of elements and argument-value pairs. then according to figure 1b, the entry_points query is made up of the das server address and the command entry_points with no arguments. for instance, the url http://www.ebi.ac.uk/das-srv/uniprot/das/uniprot/entry_points may used to retrieve the entry_points in the uniprot das server. the equivalent api call to issue this query is made by specifying a series of attribute-value pairs of the executedascommand function, namely the url of the service, the command and the timeout as in executedascommand. the more elaborated command is features, used for retrieving annotation over a biological entity. features requires as input the segment definition, and optionally the enumeration of desired features . for example, the query to find out all snps and predicted genes in the chromosome  <dig>  positions 3m-4m available at ucsc genome database, the query is http://genome.ucsc.edu/cgi-bin/das/hg16/features?segment=4: <dig> ;type=snp;type=knowngene. the equivalent api call is the following: executedascommand.

all functions in the api are thoroughly documented, with many examples of usage, and the documentation is available online at the accompanying website.

RESULTS
browser utilization
dasminer establishes a general purpose procedure for discovering and getting data from das sources. it explores the das formalism  and provides an intuitive interface  without exposing the user to the minutia of the das commands syntax. specifically, the application automates the process of writing das queries and allows the user to completely explore any das source by trying different commands and configurations; these are all explicitly available as alternative operations in the browser. the navigation of das sources is aided by info links pointing to the das registry, which provides information about the service and hints on what type of input is expected . since each das source can choose to implement a particular abstraction of the das protocol, i.e. a specific set of commands and coordinate system, the browser's layout changes to expose the set of commands and coordinate systems supported by the specific service.

the browser has two main panels :  a query definition panel, where the user chooses commands and sets their arguments, and  a data display and export panel aimed at visualizing and manipulating the xml response from the das source.

the procedure of assembling a query was designed such that the user will be prompted to enter query settings in a cascade model. depending on which command has been selected, fields will be displayed in the query settings panel, where parameters for the command should be typed. for instance, figure  <dig> depicts how the browser will appear to the user running the features command to retrieve the annotation of the p <dig> human protein from uniprot. the first step to perform the query is to select the data source from the sources menu , which populates the interface with the info orange icon, the description of the source and the capabilities menu. the next step is to select features from the command menu, which results in the display of the segment definitions panel. this navigation follows the das generic model as described in the diagram in figure 1b. finally, the protein id  is provided, followed by the selection of 'all features'  or 'browse features' in the feature selector menu and pushing the search button. the das request is then sent to the uniprot das server, which will send back an xml-formatted response. all query information is saved as variables in the matlab workspace, so that the user can manipulate query results easily. for example, after a query is performed, the user is informed that four variables are created in the workspace:  dasquery_xml: string, returned by das service;  dasquery_url: string, url assembled by the api to retrieve the data;  dasquery_struct: struct, xml is transformed into a matlab struct that can be explored ;  dasquery_struct2: struct, xml is transformed into a matlab struct using an alternative parser that creates a dom tree out of the xml string.

additionally, the xml output can be either exported to a file or visualized in the browser . also, the query url  can be exported to the matlab workspace in the form of an api call and can be either executed by the function eval or inserted into any script.

a das registry discovery module has also been included to search the registry for sources . new services can be made available locally for browsing after being discovered through this module. the criteria for searching the registry include organism, coordinate system, authority, capability and label. as a criterion is selected, a pull-down menu is dynamically populated with the available options.

examples of api applications
dasminer api was used to create enriched data sets of histone modification data and protein interactions by accessing multiple das sources. the following case studies can be reproduced by running the files available in the examples folder of the distributed source code. the example files are named by their correspondent figure as described in the figure captions. in general, the scripts for the examples execute dasminer api calls to collect the data, parse the data locally to construct an appropriate data representation, and then plot a graphical visualization.

a) creating and visualizing enriched histone modification data sets
the encode project was a large-scale community effort that sought to analyze 1%  of the human genome, through an array of experimental techniques that studied in detail the functions of selected dna regions  <cit> . all assays performed were made accessible through the ucsc encode genome browser through their web interface  as well as through a das service  <cit> .

one of the goals of encode was to characterize histone modifications in normal human cell lines, e.g., gm <dig>  and hfl <dig> , and also in cancer cell lines, e.g., k <dig> , hela . using chip-chip arrays  <cit> , several h <dig> and h <dig> methylation and acetylation signals were measured, including h3k4me <dig>  h3k4me <dig>  h3k4me <dig>  h3k9me <dig>  h3k27me <dig>  h3k36me <dig>  h3k79me <dig>  h3ac, h4ac. taken together, these marks are a subset of what is known as the histone code. they act as a first-layer regulatory mechanism of gene expression, by inducing or repressing chromatin accessibility and recruitment of initiation factors  <cit> .

we used histone modification data generated by encode to exemplify how one can access data from das sources, and handle this experimental data to create new modes of visualization. figure 4a shows how the ucsc genome browser exhibits information about histone data tracks, sorted by cell lines. the graphic in figure 4b compares two specific positive histone marks, h3k4me <dig> and h3ac, measured in a normal  and cancer cell line , over chromosome  <dig>  this side-by-side view of selected histone marks and selected cell lines facilitates the identification of rois to be further investigated. for example, looking at the graph we can outline that cancer cells have weaker positive marks when compared with normal cells, in regions located within bands q <dig>  and q <dig>  of chromosome  <dig>  this is evidence of negatively modulated dna, which may encode, for example, anti-tumorigenic functions. other k <dig> rois are those that have gained positive marks, and therefore are likely to be more accessible for the dna transcription machinery. regions within bands p <dig>  and p <dig>  fall in this category as they have significant enrichment of h3k4me <dig> and h3ac modifications.

we also illustrate the potential of the api by creating an enriched histone data set that integrates information from multiple das sources. figure 4c shows a heatmap of histone profiles in gm <dig> cells for  <dig> marks, namely h4ac, h3ac, h3k4me <dig>  h3k4me <dig>  and h3k4me <dig>  the data set for clustering was built by fetching chip-chip arrays from ucsc using the dasminer. then, the dataset of genomic regions with histone measurements was expanded by integrating two other das sources: the vega/havana database  <cit>  for retrieving gene annotation and the genetic association disease database  <cit>  for finding a cancer link. after retrieving these sources, a heatmap was generated where each column corresponds to a chromosome region that may be mapped to some gene, and this gene might be associated to some cancer type. finally, the data was organized by hierarchical clustering using the euclidean distance among histone modification profiles. this heatmap view provides an intuitive way to identify regions in the genome that share a similar histone modification pattern, and then to study these regions to characterize their function. in figure 4d, we zoom in a selected a group of  <dig> regions with high signals for positive marks h3ac, h3k4me <dig>  and h3k4me <dig>  according to encode findings, regions with this profile consist of very active transcribed dna, and are usually associated with gene promoters. within the group there are regions coding for genes tes, cav <dig> and cav <dig>  which perform tumor suppressor activities. also, from the gad das annotation, we know that cav <dig> and cav <dig> are associated with prostate cancer.

b) creating and visualizing integrated molecular interaction data sets
another kind of molecular biology data available via das is protein interaction. the dasmi project  <cit>  made available dozens of molecular interaction databases accessible via das protocol such as ipfam, interdom, human protein reference database, bioverse, homomint and intact, to name just a few. we used this data to create an integrated model of a tumor suppressor  network involving well-known human ts  <cit>  and their interacting partners. figure 5a illustrates a fragment of the ts network built using interactions reported in ipfam. in this network, there is a connection between two proteins when their domains interact in 3d conformation. after representing this information in a network, we can interrogate it to extract knowledge regarding ts connectivity using graph algorithms. for example, we can find a subgraph of common interactors of p <dig> and brca <dig>  as depicted in figure 5b. both p <dig> and brca <dig> participate in the dna damage checkpoint during g1/s of cell cycle. they activate signalling pathways to carry out dna repair and apoptosis in the cell, and these common interacting proteins are also participating in these processes. for example, mdc <dig> is involved with double-stranded repair, while parp <dig> acts in the base excision dna repair  <cit> .

for the other illustrative example, we built an integrated ts network using the information contained in  <dig> das sources, including pfam and hprd, and we visualized this data set using heatmaps. figure 5c shows the ts network heatmap, where ts nodes are represented in columns, while non-ts are in rows. the color of a specific interaction is proportional to the number of hits supporting this interaction across different databases. therefore, this heatmap exhibits how connected each ts is, and also allows assessing the reliability for a given ts/non-ts interaction. the visual inspection of this plot shows that rb <dig>  p <dig>  cdkn2a, stk <dig>  and smarcb <dig> are among the most connected ts. figure 5d provides a closer look over the heatmap, highlighting a group of  <dig> proteins and how they are linked to ts. for instance, we note that several cyclin-dependent kinases, i.e., cdk <dig>  cdk <dig>  cdk <dig>  cdk <dig>  cdk <dig>  cdk <dig>  cdk <dig>  and cdk <dig>  which are enzymes that control progression of the cell cycle, are usually found to be interacting with rb <dig> and cdkn2a, negative regulators of the cell cycle  <cit> .

CONCLUSIONS
the community of das sources provides an online collection of federated databases that covers most of the large repositories of molecular data. in this report we describe a novel tool, dasminer, developed to explore these resources and to facilitate access to experimental data. dasminer includes an adaptative user interface that can access any kind of das source, independent of the coordinate system or subset of commands implemented by the service. together with the api, they can be used to deploy applications and create integrated views of biological systems using the information deposited in das repositories.

availability and requirements
• project name: dasminer

• project homepage: http://code.google.com/p/dasminer/

• operating systems: windows, linux or mac with matlab installed.

• programming language: matlab. api examples were tested with bioinformatics toolbox versions  <dig>  and  <dig> .

• license: the license is distributed under the gnu general public license.

• any restrictions to use by non-academics: none

list of abbreviations
das: distributed annotation system; gui: graphical user interface; rest: representational state transfer; roi: regions of interest; ts: tumor suppressor.

authors' contributions
dftv participated in the design, developed the tool, and drafted the manuscript; hfd and ca participated in the design; atrv and jsa managed the project and improved the manuscript. all authors read and approved the final manuscript.

