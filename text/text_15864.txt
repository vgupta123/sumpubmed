BACKGROUND
gene clusters are sets of functionally associated genes in prokaryotic and fungal
genomes that are located close to each other over a longer period of evolutionary time,
despite the genome undergoing significant rearrangements. consequently, gene clusters
may be found in several related species by means of comparative gene order analysis.
over the past years several such methods have been proposed and subsequently improved in
their sensitivity. initial gene cluster models considered only completely conserved
genomic segments that retain gene order and orientation  <cit> . later models still required gene clusters to be contiguous and complete but
dropped the requirement for co-linearity  <cit> . the most powerful class of approaches can handle imperfect conservation of
gene content by allowing to some extent either inserted  <cit>  or both inserted and deleted genes  <cit> .

all above methods require prior knowledge of homology relations between genes, using
either a one-to-one mapping between the gene sets of different genomes  <cit> , or a general partitioning into gene families  <cit> . in the latter, a genome is modeled as a set of sequences over the alphabet
of gene families, where each sequence corresponds to a particular chromosome of the
organism.

most commonly, gene families are predicted computationally on the basis of sequence
similarity. various databases exist that offer information of precomputed gene families  <cit> . furthermore, several software tools are freely available that allow for
direct computation of gene family assignments in a dataset of interest  <cit> . typically, these approaches assume that gene families naturally cluster into
densely connected subgraphs in the gene similarity network. however, multi-domain
proteins can have strong ties not only to their own family but also to other families
they share a domain with. some of these proteins may not be at all traceable back to a
single gene family. while some recent approaches can deal with the ambiguities caused by
multi-domain proteins  <cit> , it is still a major challenge to define cut-offs in the clustering process
that at the same time eliminate spurious edges and keep gene families at a reasonable granularity <cit> .

in this paper, we present a new dynamic model and efficient computational approaches for
gene cluster prediction suitable in scenarios ranging from traditional gene family-based
gene cluster prediction, via multiple conflicting gene family annotations, to gene
family-free analysis, in which gene clusters are predicted solely on the basis of a
pairwise similarity measure between the genes of different genomes. we do this by
introducing the concept of common intervals to indeterminate strings,
which are a class of strings that can have more than one character at every position. we
then extend this concept to allow for a limited number of insertions and deletions.
furthermore, we present algorithms that solve related discovery problems of finding all
weak common intervals and approximate weak common intervals in
indeterminate strings. finally, we propose a new method for gene family-free discovery
of gene clusters based on  weak common intervals in indeterminate
strings.

methods
definitions
indeterminate strings, also known as degenerate strings are formally defined
as  <cit> :

definition  <dig>  for a given finite alphabet
 ∑, let pbe the power set of  ∑. an indeterminate string is a sequence of
character sets, which are elements of p\.

in other words, for an indeterminate string s with n index
positions must hold that for every i, 1≤i≤n, s⊆∑ and s≠∅, where s denotes the character set associated with the
i-th position in s. in the special case where every position of
indeterminate string s holds a singleton set, s is equivalent to an
ordinary string. we denote the length of an indeterminate string s
with n index positions by |s|≡n and its cardinality, i.e. the number of
all elements in s, by ∥s∥≡∑i=1n|s|. two positions a and b,
1≤a≤b≤|s|, induce the indeterminate substring
s≡ss…s. to distinguish intervals in different indeterminate
strings, we indicate the affiliation of an interval  to indeterminate string s by the subscript
notation s.

example  <dig> s={a,d,g}{c}{a,d}{e,f}{b}{c,g}is an indeterminate string of length
|s|=6and cardinality ||s||=11over alphabet ∑={a,b,c,d,e,f,g}. the third element of s is given by character set
s <cit> ={a,b}. interval  <cit> induces the substring s <cit> ={c}{a,d}{e,f}.

in this work, we generalize the concept of common intervals, which were initially
introduced on permutations  <cit>  and subsequently extended to strings  <cit> . the idea behind common intervals is to compare strings, or rather
substrings, based on their character sets. the character set of an ordinary string
s is defined as c≡{s | 1≤i≤|s|}. the equivalent concept on indeterminate strings is the
following:

definition  <dig>  the character set of an
indeterminate string  s is defined by c≡⋃i=1ns.

in two ordinary strings s and t over a finite alphabet Σ, two
intervals,  in s and  in t, are
called common intervals if c=c). the analogon for indeterminate strings is:

definition  <dig>  given two indeterminate strings
 sand  t, two intervals, in  sand in  t, are said to be strict common intervals if
and only if their character sets cand care equal.

a weaker definition based on the intersection relation between character sets is:

definition  <dig>  given two indeterminate strings
 sand  t, two intervals, in  sand in  t, are weak common intervals with
common character set c=c∩cif for each  x, i≤x≤j, it holds that c∩s≠∅and for each  y, k≤y≤l, it holds that c∩t≠∅.

in all our use cases, in particular when dealing with conflicting gene family
assignments as well as gene family-free gene cluster detection, the concept of weak
common intervals appears to be more appropriate. thus, in the following, we restrict
ourselves to the study of weak common intervals.

furthermore, continuing a previous line of research initially proposed by schmidt and
stoye in  <cit> , we further extend weak common intervals by allowing a limited number of
insertions and deletions:

definition  <dig>  given two indeterminate
strings  sand  tand a threshold δ∈ℕ <dig>  two intervals, in  sand in  t, are approximate weak common intervals
with common character set c=c∩cif the number of positions with no
intersection with  c is limited by δ, i.e. |{x | i≤x≤j:s∩c=∅}|+|{y | k≤y≤l:t∩c=∅}|≤δ. these positions are called indels.

generally, algorithms for discovering common intervals of ordinary strings only
report pairs of intervals that both are maximal, whereby maximality
is defined as follows: an interval  in string x is called maximal if its
immediate left and right neighboring characters, x and x , are not contained in
c. in other words, interval  cannot be extended to its left or right without
expanding the character set of the interval.

in terms of weak common intervals, we introduce the following property derived from  <cit> :

definition  <dig>  given an indeterminate string
 s, an interval , and a character set c⊆∑, interval is  c-closed if s, s⊆c, and if i=1or s∩c=∅, and if j=nor s∩c=∅.

a reasonable balance between omitting expedient and including apparently redundant
weak common intervals is found by the subset of those that are
mutually-closed, as defined as follows:

definition  <dig>  given a pair of intervals
of indeterminate strings
 s and  t, and sare mutually-closed if is c-closed and sc-closed.

we consequently restrict the enumeration of weak common intervals and approximate
weak common intervals to those that are mutually-closed.

combinatorial complexity. the maximal number of mutually-closed weak common
intervals of two indeterminate strings s and t of length n
and m, respectively, is bounded by nm. this result follows
from the fact that the number of intervals  in t that are
mutually-closed weak common intervals with any interval with fixed left bound i
in s is bounded by m. likewise, the maximal number of
mutually-closed approximate weak common intervals of indeterminate strings s
and t is bounded by 2nm.

gene family-free analysis. in absence of gene family assignments, each gene
in the dataset is represented by a unique character, linearly ordered along
a chromosomal string. therefore, the n characters of a chromosomal
string can be identified by their integer index set { <dig>   <dig>  . . . ,
n}. relating characters of one chromosomal string to characters of another,
we presume that we are given a symmetric similarity measure σab
: a × b → ℝ≥ <dig> for
any two index sets a and b.

in gene family-free gene cluster analysis we aim at finding pairs of intervals in two
chromosomal strings, whose characters are similar. we can reduce this problem to
finding  weak common intervals between two indeterminate strings. to
this end, we construct an index mapping ba:

 ba={x | x∈a:σab>0}ifanyx∈aexistss.t.σab>0{∞}otherwise. 

thus, ba is an indeterminate string over alphabet
{ <dig> ,…,|a|,∞}. let ia={1}{2}⋯{|a|} represent the indeterminate string of a, a
position in ia shares a character with a position in ba
if and only if the similarity of the two corresponding characters is
non-zero. thus, finding intervals in chromosomal strings a and b,
whose characters are similar, is equivalent to finding  weak common
intervals of indeterminate strings ia and ba.
note that the set of  weak common intervals of ia
and ba is identical to the one of ib
and ab. the  weak common intervals
differ in size and, most substantially, in the similarities between characters within
the interval pairs. therefore, we introduce a simple scoring scheme by which the
solution space can be arranged into a landscape of highs and lows of 
weak common intervals, ranked by taking into account the number and the similarities
of the contained characters. we define a score function µxy
over an index x in index set x and an interval [a,
b]y in index set y as

 μxy=maxy∈yσxymaxz∈yσxy)ifmaxz∈yσxy>00otherwise 

so that µxy takes values between  <dig> and  <dig>  being  <dig> if the
gene with highest similarity to x lies within interval [a,
b]y. the overall score of two interval pairs  is then

 score)= ∑x=ijμab+ ∑y=klμba 

we now describe three algorithms to compute all mutually-closed weak common intervals
and all mutually-closed approximate weak common intervals with at most δ
indels in two indeterminate strings. note that mutually-closed weak common
intervals are a special subclass of mutually-closed approximate weak common intervals
for δ =  <dig> 

in the following, we consider two indeterminate strings s of length n
and t of length m.

discovering weak common intervals
we now describe the algorithm weak common intervals on
indeterminate strings  as presented in figure  <dig>  it solves the following problem:
intervals in indeterminate strings.

problem  <dig> given two indeterminate strings  sand  t, discover all mutually-closed weak common intervals
of  sand  t.

to tackle this problem we make use of the following constructs:

definition  <dig>  given an indeterminate string
 sof length  n, is≡{1}{2}⋯{n}denotes the index string of
 s.

definition  <dig>  given two indeterminate strings
 sand  tof lengths  nand  mrespectively, the index mapping of
 sonto  tis given by y= <dig> …,m, where

 ts={x | x= <dig> ...,n:s∩t≠∅}ift∩c≠∅{∞}otherwise. 

note that index strings and index mappings are again indeterminate strings. the key
idea of wcii arises from the following observation:

observation  <dig> given two indeterminate strings  sand  twith index string isand index mapping ts, two intervals in  sand in  tare weak common intervals if and only if
isand tsare weak common intervals.

this equivalence holds because any two positions, x in s and y
in t intersect if and only if is and
ts intersect. since it holds that
is = {x} for all x =  <dig>  .
. . , n, we simplify the notation of single character set
is to just x and character set
c to just . note that character c∈c serves subsequently both as character c
ϵ  as well as index in is.

wcii is an adaptation of didier's algorithm  <cit>  of enumerating maximal common intervals in ordinary strings. didier's
strategy can be described as follows: the algorithm iterates over all positions i
in s as possible left interval bounds. in each iteration all
mutually-closed weak common interval pairs are reported that share the same left
bound i in is. for each possible right bound j
≥ i, the algorithm iterates through the set of positions in
ts that contain j in their character set. to this
end, we make use of an array pos, where
pos,  <dig> ≤ j ≤ n, is a
sorted list of positions in ts containing character j.
each position y ϵ pos is associated with
an interval ts, k ≤ y ≤ l,
called the min-rank interval of character j for position
y. it is the largest interval around y for which every position in
ts contains at least one character in .
obviously, ts is -closed. it remains to be checked if
is is closed w.r.t. c and that every position in is and ts contains a character from c=c∩c. to show the latter, it is sufficient to show that
⊆c, because the character set of each position in
is corresponds to the single element set of its index. the
details of both tests are explained below, after relevant data structures are
introduced. if both conditions are satisfied, a mutually-closed weak common interval
pair is found and subsequently reported.

like in didier's algorithm, we employ two tricks that improve the performance:
precomputing min-rank intervals and following paths of rank-nearest
successors.

precomputing min-rank intervals. in order to identify min-rank intervals, it
is sufficient to observe the smallest character c ≥ i in each
position. to this end, we make use of the following construct:

definition  <dig>  given index mapping
ts, y= <dig> ...,mis the  i-reduced string of ts of the ith iteration, where
tsi=min.

min-rank intervals in tsi are identical to rank intervals as initially
defined by dider et al.  <cit> . interestingly, rank intervals in tsi correspond directly to min-rank intervals in
ts:

lemma  <dig> the set of min-rank intervals in tsis identical to the set of rank intervals in
tsi.

proof: didier et al. <cit>  show that rank intervals in a string are nested and that their number is
bounded by the length of the string.

observe that for any position y in tsi the rank interval of character j=tsi is identical to the min-rank interval of j at
position y in ts. let y be a position in
ts and j ϵ
ts such that j>tsi. further, let ts be the min-rank interval of j at
ts, j′=max:c≤j}), and ts be the min-rank interval of j' at its
corresponding position in ts. because j' ≤ j
it consequently holds that ts⊆ts. now, according to the definition of min-rank
intervals, tsi>j′, if such position exists. since j', is the
largest character in tsi that is smaller than or equal to j, it must
also hold that tsi>j. the same argument holds for tsi if such position exists, therefore
ts=ts is the min-rank interval of both characters j'
and j. we conclude that all min-rank intervals for any character in
ts at iteration i are contained in the set of rank
intervals of tsi.   □

consequently, all min-rank intervals in ts in the ith
iteration  can be
precomputed in o time using the algorithm given by didier et
al.  <cit> . they are stored in table int. for a currently processed
character j at position y in ts,
int contains its corresponding min-rank interval.
unlike didier's algorithm, int must be updated after each iteration
such that all positions in int accessed in the following th iteration contain the corresponding min-rank intervals of character j
+  <dig>  details of the update step can be found in additional file  <dig> section  <dig> .

following paths of rank-nearest successors. the second trick in the
algorithm consists in increasing the right bound j in is
while walking through positions and characters of
ts. thereby the algorithm jumps from a current position y
that contains character j to its rank-nearest successor, which
is the position y' containing character j +  <dig> with the smallest
min-rank distance to y as defined as follows:

definition  <dig>  the min-rank distance of any
two positions  k and  l in indeterminate string ts for the ith iteration is given by:

 dtsi≡max 

if several co-optimal positions are available, the tie is broken by choosing the
leftmost one as rank-nearest successor. in case no position with character j
+  <dig> exists, or the smallest min-rank distance is '∞', j
has no successor. for the ith iteration, all rank-nearest successors
are precomputed and stored in table succ which is explained in more
detail in additional file  <dig> section  <dig> .

connecting characters larger than or equal to i at their corresponding
positions in ts with their rank-nearest successors through
directed edges results in a forest of rooted trees. nodes  sharing
the same character are said to reside on the same level. in lines 8- <dig> offorest in a bottom-up procedure, from one level to the next, starting at those leaves
with character i. besides the currently visited nodes of the level, the
algorithm keeps track of the path bounds, which are the outermost positions
in ts a path has visited thus far. the currently visited nodes of
the paths and their corresponding path bounds are stored in a list labeled
list. only after all nodes of the same level j are
processed, the algorithm follows all current paths to nodes of the next level j
+  <dig>  thereby ensuring that each character in ts is processed
at most once. to this end, for all positions containing character j that
have the same rank-nearest successor y', the algorithm discontinues the
paths of all but the leftmost one with shortest min-rank distance to y'
. traversing along paths of rank-nearest successors in wcii differs from
didier's algorithm by the fact that a position in ts may be
visited by the same path several times on different levels.

for any given min-rank interval ts there cannot be more than one weak common interval
partner in is starting at position i. therefore it is
sufficient to track at least one path in each min-rank interval to find all
mutually-maximal intervals of is and ts.
positions in pos are sorted, thus paths leading to the same weak
common interval pair appear adjacent to each other in list and the
common interval pair is reported only for the first .

for each node in list, associated with character j and
position y, the algorithm checks if the min-rank interval
ts of j encloses the path bounds up to position
y . if validated, a weak common interval pair
has been found, given by . to ensure mutual closedness, the interval pair is only
reported if i −  <dig> is not contained in the character set
c and the successor of y is not within the
current bounds of its path . checking for the
former can be achieved in o time after o time preprocessing by performing a range minimum query
on an array of size o where each position containing character i −
 <dig> is assigned  <dig> and  <dig> otherwise.

the overall complexity of the algorithm can be summarized as follows: each position
in is is regarded exactly once as left bound i for all
weak common intervals that are reported in one iteration. once
tsi is computed for i =  <dig> it can be up-dated using
array pos, taking overall o time for all left bounds i =  <dig>  . . . ,
n. further, for each left bound the algorithm performs
o steps to precompute all min-rank intervals and
o steps to precompute all rank-nearest successors. the
subsequent bottom-up procedure and the reporting of weak common intervals requires
again o time. therefore we have:

theorem  <dig> given two indeterminate strings  sand  t, algorithm wcii finds all pairs of mutually-closed
weak common intervals of  sand  tin o time.

discovering approximate weak common intervals
we now present the algorithm approximate weak common
intervals on indeterminate strings  as
presented in figure  <dig>  thus line numbers mentioned in this
subsection refer to figure  <dig>  awcii solves the following
problem:
intervals in indeterminate strings. it is an adaptation of rgc  <cit> , an algorithm for computing approximate common intervals in
strings.

problem  <dig> given two indeterminate strings  sand  tand indel threshold δ∈ℕ <dig>  discover all mutually-closed approximate weak
common intervals of  sand  twith no more than  δ indels.

following a strategy similar to wcii, awcii solves problem  <dig> for index mappings
is and ts, instead of s and
t. as before, in each iteration the algorithm maintains a fixed left
bound i in is. for each character j ϵ
 all positions y in ts are processed
that contain character j . thereby character j at
position y in ts can be associated with several
different intervals around y that are candidates of mutually-closed
approximate weak common interval partners for interval is. only intervals surrounding one  positions
y can be mutually-closed. however, for an interval
ts containing indels, it no longer holds that the minrank
distance of any two positions within the interval is always smaller than the min-rank
distance from any position inside to any position outside the interval. as a result,
neither precomputed min-rank intervals nor following paths of ranknearest successors
can be used for improving the algorithm's performance. instead we pursue a different
approach, thereby making awcii an adaptation of the rgc algorithm of jahn  <cit> .

for each dk =  <dig> ..., δ  awcii
identifies the leftmost position k in ts such that at
most dk indels are contained in interval ts and ts ∩ [i,
j] ≠ ∅. let d′k≤dk be the observed number of indels in
ts , the algorithm then finds for each
dl =  <dig> ..., δ − d'k
 the rightmost position l such that again
ts ∩  ≠ ∅ and
the number of indels in ts does not exceed dl. each  of the at most  <dig> combinations of leftmost
and rightmost positions gives rise to a candidate pair of mutually-closed approximate
weak common intervals . for each candidate pair it is checked that the number
of characters in  not contained in c plus the already consumed number of indels in
ts does not exceed δ. finally, it is tested
if is is c-closed. if both conditions are satisfied, a
mutually-closed approximate weak common interval pair is found and is subsequently
reported .

runtime improvements are achieved by precomputing right and left bounds of candidate
intervals ts for each character j in
ts. these bounds are computed within o||ts||) time for a fixed left bound i in is
and stored in tables l and r respectively. further, for each such
candidate interval ts the number of characters that are within [i,
j] can also be precomputed. this number is used to determine δs
in line  <dig>  the construction of the corresponding table, called
rangecontent, is achieved within
o2n||ts||) time for a fixed left bound i. the details of
constructing tables l, r, and rangecontent can be
found in additional file  <dig> section  <dig>  note that
rangecontent differs significantly from the data
structure num used in rgc to count characters in intervals.

in terms of overall runtime, for each fixed bound i in is
the algorithm spends o2n||ts||) time on computation of the above mentioned auxiliary
tables. thereafter, awcii requires o2||ts||) time to iterate through all combinations of candidate
intervals in l and r and to identify approximate weak common intervals.

testing for c-closedness of interval is can be achieved in o time by precomputing a table for all candidate
intervals in ts of the ith iteration, where each entry
indicates if a character i −  <dig> or j +  <dig> is contained in the
corresponding candidate interval. such a table can be constructed within
o⋅||ts||) time using again a simple sweep algorithm. we conclude
with the following theorem:

theorem  <dig> given two indeterminate strings  sand  tand indel threshold δ∈ℕ <dig>  algorithm awcii computes all pairs of
mutually-closed approximate weak common intervals of  sand  tin o2⋅n2||ts||)time.

a runtime heuristic for discovering approximate weak common intervals
our third algorithm, acsi  represents a runtime
heuristic that solves problem  <dig> exactly and in practice outperforms both wcii and
awcii in gene family-free analysis by orders of magnitude.
approximate weak common intervals in indeterminate strings.

just as the two algorithms before, acsi operates on index string is
and index mapping ts instead of indeterminate
strings s and t directly. for every fixed interval 
in is, acsi identifies mutually-closed approximate weak common
interval partners  in ts. to this end, it iterates
through elements of pos, i.e. positions in ts
that contain character i . for each such position y ϵ
pos the algorithm calls a recursive procedure,
denoted extend . this recursive procedure requires  <dig> parameters,
corresponding to fixed bounds is, the currently processed interval  in
ts, and the current number of allowed indels, d.
in the initial call, interval ts is set to ts and d = δ. extend then increases
interval ts to both sides until  ∩
ts = ∅ and 
∩ ts = ∅ . if in this
process the algorithm observes characters i −  <dig> or j +  <dig> in
c, extend returns to the previous call .
otherwise, it verifies if  is a mutually-closed approximate weak common interval
pair by testing if the number of characters in  that are missing in
c is less than or equal to the current d and if
i∈c . the interval pair is reported if both
conditions are validated. extend then increases ts to the left, thereby consuming indel positions as long
as their overall number remains less than or equal to the current d . if a position k' < k −  <dig> has been found such that
 ∩ t ≠ ∅, extend is called
recursively with parameter values is, ts, and the remaining number of allowed indels, given by
d + k' +  <dig> − k . this step is also
symmetrically executed for the right side of ts .

the actual heuristic speed-up of the algorithm is achieved by calling procedure
extend in line  <dig> not for all intervals  in is but
only for those that have chances of success for being a weak common intervals pair
with an interval  around a position y ϵ
pos. thus, the neighborhood around position y
is scanned for suitable values of j prior to the execution of extend.
the details are described in additional file  <dig> section
 <dig> 

RESULTS
in the following, we highlight the benefit of our dynamic model in comparison with
present approaches. although conflicting gene family assignments are extremely common in
practice, this scenario is difficult to evaluate. assuming the existence of an
ultimately true gene family assignment, conflicts arise by incorrect gene family
assignments. therefore an evaluation would inevitably result in benchmarking gene family
prediction tools, rather than scrutinizing our model.

instead, we decided to evaluate our gene family-free model against the traditional gene
family-based approach. to this end, we chose a genomic dataset of bacterial genomes that
has been used in a prior gene cluster study  <cit>  and was originally obtained from  <cit> . the dataset features  <dig> chromosomal sequences, of which we removed all
sequences originating from plasmids.

in practice acsi outperforms both wcii and awcii as shown by figure  <dig>  thus, in all subsequent results, we used acsi to compute mutually-closed
 weak common intervals.
awcii with δ =  <dig> and wcii, measured in a sample of  <dig> arbitrarily
chosen pairwise comparisons of genomes that are contained in the studied dataset.
all algorithms produced identical output . running times are plotted
against the number of pairwise gene similarities  contained in the pairwise comparison.

gene family-based dataset. genes in this dataset are annotated with cog
 identifiers  <cit>  which are used to establish homology relationships between genes. the set of
genes in the dataset was revised by the latest available gene information under the
accession numbers of the respective genomes at ncbi. to this end, genes that are
meanwhile marked as pseudo genes were removed from the dataset. no genes were added,
since cog annotations of new genes are not available. we further omitted all genomes
from subsequent analyses of which more than  <dig> pseudo genes were removed in this
process.  <dig> genomes remained, comprising on average  <dig> genes .

gene family-free dataset. pairwise similarities between genes in the dataset
were obtained using the relative reciprocal blast score   <cit> . genes were compared on the basis of their encoding protein sequence using
blastp+  <cit>  with an e-value threshold of  <dig>  and disabled composition-based score
adjustments.

for evaluation purposes, we produced different degrees of pruned gene similarity sets by
filtering spurious gene similarities. for this, we employed an undirected variant of the
stringency criterion  for gene similarities
proposed in  <cit> , which is described in more detail in additional file  <dig> section  <dig> .

to evaluate the gene family-free model, we ran an implementation of acsi for δ
=  <dig> on the unpruned gene similarity graph of our dataset and compared the 4015841
interval pairs with respect to the contained cog identifiers. we discarded all pairs for
which at least one interval contained less than two genes with a cog identifier. in the
remaining  <dig> interval pairs, we observed that the similarity in the set of cog
identifiers depends strongly on the intervals' score .
among the clusters with a score greater or equal  <dig>  95% have the same set of
identifiers in both intervals. while this number decreases for smaller scores, still a
quarter of the interval pairs with a score lower than  <dig> do not differ in their cog
identifiers. this shows that our approach is able to detect gene clusters that would
also be detected with well-established gene family based approaches.
intervals.

columns stand for bins of weak common interval scores, rows for bins of overlap
sizes of the cog identifier sets of weak common interval pairs. values are given
in percent with respect to the total number of pairs per score bin given in the
last row.

this is not a surprise, as weak common intervals are in fact a generalization of the
classic common intervals model: a run of acsi on a dataset where similarity scores are
only set between members with the same cog identifiers finds the exact same set of
clusters as the common intervals based approach.

to evaluate the predictive power of our approach, we compare the output of our program
to gene clusters predicted by the reference gene cluster algorithm   <cit> . while this algorithm is capable of multiple genome comparison and the
detection of faint conservation patterns, we use it in this context for pairwise genome
comparison to detect interval pairs 
whose gene sets have a symmetric set distance of at most  <dig>  it has been previously
observed that the generalization to approximate conservation underlying the reference
gene cluster approach is not only a way to find imperfectly conserved clusters, but also
a means to add robustness against errors in gene family assignment. for example, an
interval pair may appear to have a set distance of two because besides the shared genes,
there is one gene unique to i <dig> and one gene unique to
i <dig>  however a closer inspection of the genes reveals that these
genes are in fact homologs that were not recognized in the preceding partitioning of
genes into homology families. we ran rgc on all pairs of the  <dig> genomes setting
parameters δ =  <dig>  and s
=  <dig> . the program returned among others 192900
"single-mismatch clusters", i.e. clusters that have exactly one extra gene in each
interval. in  <dig>  of the single-mismatch clusters, we observe a similarity
score between the two extra genes in our blast dataset. acsi found  <dig> % of the
single-mismatch clusters and for  <dig> % the extra genes turned out to be pairwise best
hits. moreover we observe that in  <dig> among the single-mismatch gene clusters
predicted by rgc the two extra genes have exactly the same annotation string.
 acsi finds  <dig> % of
these clusters. surprisingly,  <dig> % of the single-mismatch clusters in which the two
extra genes had best hits to each other were not found by acsi. this is because for one
or more of the other genes in the cluster our blast results did not return any
similarity score to a gene in the other interval. apparently the elements of a cluster
of orthologous groups can be very faintly related in terms of sequence similarity.

comparison with regulondb data. among other information about transcriptional
regulation, regulondb  <cit>  provides a list of operon locations in escherichia coli k <dig>  while
the majority of operons in regulondb are computationally predicted, some are also
experimentally confirmed. from  <dig> operons reported in regulondb,  <dig> span two or more
genes. we mapped these operons to the annotation of the e. coli k <dig> genome in
our data set. however,  <dig> operons contain genes that are not annotated in our dataset
and thus were omitted from subsequent analysis. the remaining  <dig> operons span between 2
and  <dig> genes,  <dig> % of which span  <dig> or  <dig> genes. the number of detected gene clusters
depends strongly on the degree of evolutionary relatedness between the e. coli
k <dig> genome and other genomes in the dataset. while acsi and rgc predicted many
occurrences in other close related γ-proteobacteria in our dataset, for
the majority of genomes only few occurrences of operons were reported. additional file
 <dig> section  <dig> , gives an overview of the number of found
gene clusters in the dataset. the sets of reported operons found by acsi and rgc are not
entirely overlapping. instead, acsi finds operons which rgc does not find and vice
versa. a complete overview of unique findings for algorithms and parameter settings is
shown in table  <dig> 
cluster size s =  <dig> and varying parameters.

each column shows the number of unique findings of an algorithm and parameter
setting indicated by the column heading in comparison to algorithms and parameter
settings specified in the rows.

CONCLUSIONS
in this work we introduced a new model to detect gene clusters based on the study of
 weak common intervals in indeterminate strings. in context of gene
family-free analysis, we presented a scoring scheme for  weak common
intervals which rates both interval size and the degree of similarity between the
contained genes of an  weak common interval pair. we use our gene
family-free model to predict gene clusters between pairs of genomes. this approach is
evaluated in comparison with the common intervals-based reference gene cluster
model.

in addition to the use case of detecting gene clusters, our algorithms can also be
helpful to identify synteneous blocks in a gene family-free analysis. the hierarchical
nature of common intervals is maintained in our weak common intervals model, which makes
it ideal for studying potential synteneous blocks of arbitrary resolution. the basic
concept of common intervals in strings has seen many generalizations in the past years
which have greatly increased its utility for biological studies, in particular the
simultaneous consideration of more than two strings, requiring common intervals to occur
in all or at least a certain number of them. this generalization of  weak
common intervals in indeterminate strings is undoubtedly an interesting direction for
future work.

competing interests
the authors declare that they have no competing interests.

authors' contributions
all authors were involved in the early conception of the project. dd, kj and js
developed the methods and designed the analysis. dd and kj performed the evaluation and
wrote the manuscript; all authors discussed the results, commented on the manuscript,
and read and approved its final version.

supplementary material
additional file 1
click here for file

 acknowledgements
dd receives a scholarship from the clib graduate cluster industrial biotechnology. kj
is funded by dfg grant st 431/5- <dig> 

declarations
we acknowledge support for the article processing charge by the german research
foundation and the open access publication fund of bielefeld university library.

this article has been published as part of bmc genomics volume  <dig> supplement
 <dig>  2014: proceedings of the twelfth annual research in computational molecular
biology  satellite workshop on comparative genomics. the full contents of the
supplement are available online at
http://www.biomedcentral.com/bmcgenomics/supplements/15/s <dig> 
