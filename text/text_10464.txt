BACKGROUND
computational modeling has been increasingly used in the field of systems biology to examine the dynamics of biological processes. traditionally, the modeling of biochemical pathways is based on a set of non-linear ordinary differential equations  to describe the evolution of average molecular concentrations over time  <cit> . this approach assumes continuously varying chemical concentration and deterministic dynamics, which can be unsuitable for some classes of systems, such as those that need stochastic modeling or contain a small number of molecules for each species.

the main alternative modeling paradigm, originally proposed by gillespie  <cit> , focus on stochastic models. it produces counts of molecules of some chemical species, whose rates of interaction are controlled by exponential distributions. in a stochastic model, various possibilities exist for the future behavior of the system, where each possibility has a certain probability. the usual way of analyzing those models is via simulation, producing trajectories that provide us with different insights of the system. therefore, if we want to use simulation to recover meaningful information about the behavior of the system we often need a large number of simulations runs in order to retrieve an accurate estimation.

recently there has been considerable interest in the application of model checking  <cit>  as a powerful tool for formally reasoning about the dynamic properties of biological systems . model checking provides a way to both formally describe and analyze a system. it is a well-established and widely-used formal method for ascertaining the correctness of real-life systems. this approach is able to explore all behaviors of a modeled system through an exhaustive and systematic exploration of all possible states of the system, and therefore can identify events and conditions that can be overlooked by simulation. probabilistic model checking, or pmc, is a variant of model checking for modeling and analyzing systems that exhibit stochastic behavior as is the case for several biological systems. similar to stochastic simulation, pmc is based on a stochastic and discrete-state modeling approach via continuous time markov chains . however, the output of pmc is exact, as opposed to the output of stochastic simulation which is inherently approximated, taking averages over sets of simulation runs. moreover, given that pmc deals with all states of the system, it is possible to precisely verify if an observation  will continue forever or rather will definitely stop.

we propose that pmc be used in addition to stochastic and deterministic simulation in order to amplify the understanding of the biological system. for example, pmc can give clues about the existence of some events that can be later checked with stochastic simulation through the recovery of traces where the specific event happens. it also can support biologists suggesting interesting but uncommon aspects that can be verified experimentally.

in this paper we will use pmc for the modeling and analysis of the sodium-potassium exchange pump  in a quantitative way. this pump is an important transport system present in all animal cell and responsible for keeping the potassium and sodium concentrations inside the cell, respectively, high and low. low sodium concentrations and high potassium concentrations in the cell cytoplasm are essential for basic cellular functions such as excitability, secondary active transport and volume regulation. in the brain, about one-half of the adenosine tri-phosphate  provided by oxidate metabolism is used to power the na,k-pump  <cit> .

a formal specification of this system has already been developed using the π — calculus process algebra based on the known albers-post model  <cit> . this work has also used model checking to verify some computational properties such as deadlock and bisimilarity, which is an equivalence relation between state transition systems, associating systems which behave in the same way in the sense that one system simulates the other and vice-versa. however, it does not have a quantitative description of the na,k-pump, nor does it deal with quantitative properties about the biological system.

we will describe how the pump mechanism can be modeled using probabilistic model checking taking into consideration a discrete chemistry approach and the law of mass action aspects. we also will present some significative properties about the pump reversibility that can be addressed directly with model checking, whereas with other traditional approaches, such as deterministic and stochastic simulation, they can not be easily covered. finally, we will reason about the pump behavior in terms of trend labels for the transition rates of the pump reactions which compute if there is a greater probability that the system takes specific transitions. these trends allow us to identify, for example, why the na,k-pump goes more slowly in the forward direction over time, justifying the long periods of time to exhibit its reversibility.

methods
sodium-potassium exchange pump
the sodium-potassium exchange pump is found in the plasma membrane of virtually all animal cells and is responsible for the active transport of sodium and potassium across the membrane. one important characteristic of this pump is that both sodium and potassium ions are moving from areas of low concentration to high concentration, i.e., each ion is moving against its concentration gradient. this type of movement can only be achieved using the energy from the hydrolysis of atp molecules. figure  <dig> shows the na,p-pump mechanism, which driven by a cell membrane atpase, moves two potassium ions from outside the cell  to inside the cell  and three sodium ions from inside the cell  to outside the cell . our modeling is based on the reaction scheme shown in fig.  <dig> , which provides a summary of the albert-post cycle  <cit> . according to this cycle, the pump protein can assume two main conformations, e <dig> and e <dig>  with inward-facing  and outward-facing  binding sites for sodium ions  and potassium ions , respectively. the intracellular and extracellular forms of na+ and k+ ions are explicitly identified as , ,  and . pi is the inorganic phosphate group and fi and bi are the forward and reverse rate coefficients for the ith step in the cycle. for example, f <dig> is the forward rate for the first step reaction . moreover, a. b means that a and b are bound to each other noncovalently and ei ~ p indicates that the phospharyl group is covalently bound to ei. the pump mechanism is decomposed into a set of six elementary and reversible reactions. the enzyme in its conformation e <dig> and with atp already bound binds to three sodium ions inside the cell . this reaction stimulates atp hydrolysis and then the release of adenosine d—phosphate  inside the cell, forming a phosphorylated enzyme intermediate . extrusion of na+ ions is completed by a conformational change  and dissociation of the resulting complex . in this new shape, the pump has high affinity with potassium ions. then, two potassium ions outside the cell bind to the pump enzyme and because of this reaction the enzyme is dephosphorylated . a further conformational change in which the enzyme binds atp  is followed by the release of the two potassium ions inside the cell . finally, the pump enzyme restores its original form that is capable of reacting with  at step  <dig>  the quantitative data associated with this mechanism, quoted from  <cit>  and  <cit> , can be found in table  <dig>  which gives us a starting point for exploring the pump behavior in a quantitative way.

normal physiological parameters associated with the scheme in fig.  <dig> , , , , ,  and  are the concentrations of substrates. fi and bi are the rate constants, respectively, in the forward and backward direction for the reaction i in fig.  <dig> 

probabilistic model checking
suppose m is a stochastic model over a set of states s, s <dig> is a starting state, ϕ is a dynamic property expressed as a formula in temporal logic, and θ ∈  <cit>  is a probability threshold. the probabilistic model checking  <cit>   problem is: given the 4-tuple , algorithmically decide whether m, s <dig> |= p≥θ, i.e. if the property ϕ is true with probability greater or equal than θ. in other words, probabilistic model checking requires, like non-probabilistic model checking, two key inputs: a description of the system in some high-level modeling formalism and a specification of one or more desired properties  of that system in temporal logic. however, unlike non-probabilistic version, in probabilistic model checking the model is stochastic and the properties of interest are expressed in a quantitative way: for example, rather than verifying that ”does the species a eventually react with the species b?” we are interested in asking ”what is the probability that the species a eventually reacts with the species b?”. given the stochastic description of the model, the probabilistic model checker constructs a mathematical model m that represents the system dynamics usually in terms of a digraph, in which each state represents a possible configuration and each transition represents an evolution of the system from one configuration to another over time. moreover positive and real values are assigned to the transitions between states, representing rates of negative exponential distributions. this mathematical model m is, in fact, a continuous-time markov chains   <cit> . formally, letting ℝ≥ <dig> denote the set of non-negative reals and ap be a finite set of atomic propositions used to label states with properties of interest, a ctmc is a tuple  where:

• s is a finite set of states;

• r :  → ℝ≥ <dig> is the transition rate matrix, which assigns rates to each pair of states;

• l : s → 2ap is a labelling function which associates each state with a set of atomic propositions.

the probability of a transition between states s and s′ being triggered within t time-units is  <dig> – e–r.t. the time spent in state s before any such transition occurs is exponentially distributed with the rate e = ∑s′∈s r, called the exit rate. the probability of moving to state s′ is given by r/e. in this work we have used prism tool to describe and analyze our biological model. prism is a known probabilistic model checker that provides support for ctmc models. the properties in prism should be specified using the continuos stochastic logic   <cit> , which is based on the computational tree logic  and the probabilistic computation tree logic . the syntax of csl formulas is the following:  

where a ranges over a set of atomic propositions, p ∈  <cit> , ⊴ ∈ {>, <, ≥, ≤} and i is an interval of ℝ≥ <dig>  there are two types of csl properties: transient  and steady-state . for this current work we are only interested in transient or time-dependent properties. a formula  is true in state s if the probability that ϕ is satisfied by the paths starting from state s meets the bound ⊴p. path formulas are constructed using the x  operator and the ui  operator. the path formula xΦ is true if Φ is satisfied in the next state, whereas Φ <dig> ui Φ <dig> is true if Φ <dig> is held at some time instant in the interval i and at all preceding time instants Φ <dig> holds. other operators can be derived from this minimal set of csl operators. two of them, which will be used in this work, are the eventually operator fi Φ, which is true if Φ is satisfied in some time instant in the interval i, and the always operator gi Φ, which is true if Φ is satisfied in every time instant in the interval i. it is worth to note that the interval i can be omitted in the operators u, f and g which means that the interval is .

furthermore, prism lets a ctmc be augmented with rewards, which are structures that associate real values with states or transitions. the state-rewards are accumulated in proportion to the time spent in the state, whereas the transition-rewards are accumulated each time the transition is taken. in prism, these are described using the

rewards ”rewardname” …endrewards

construct and are specified using multiple reward items of the form  

to describe state-rewards and transition-rewards, respectively. in the previous definition, g is a predicate, a is a label for a set of commands that represent a transition in the system and r is a real-valued expression, which can contain variables and constants from the model. a state-reward item assigns the real value, resulting from the evaluation of r expression, to all states satisfying the predicate g and a transition-reward item assigns the real value to all transitions labelled with a and from states satisfying g.

given the definition of the reward items, some properties can be used to recover amounts related to them. for example, the property ”what is the expected number of reactions between species a and b before a reaction between species a and c happens?” can only be asked with the reward mechanism. two of the property types related to rewards which will be used in this work are  and . the former property is true, from a state s, if the expected state-reward at time instant t meets the bound ⊴r, whereas the later property is true, from a state s, if the reward accumulated along a path until a point where Φ is true meets the bound ⊴r. the total reward for a path in a ctmc is the sum of the state-rewards along the path plus the sum of the transition-rewards for each transition between these states. the state-reward assigned to each state of the model is interpreted as the rate at which rewards are accumulated in that state, i.e. if t time units are spent in a state with state-reward r, the accumulated reward in that state is r × t. the bounds ⊴p and ⊴r may not be specified, in which case the probability or reward is calculated in prism.

prism algorithm
the techniques that are implemented in prism to solve the pmc problem for ctmc models with rewards include graph-theoretical algorithms and numerical computation. the former operates on the underlying graph structure of a markov chain to determine, for example, the set of reachable states in a model, or to check qualitative properties. the latter is required for the calculation of probabilities and reward values. while iterative methods to solve linear equation systems are used for answering question related to the steady-state behavior of the model, i.e. its behavior in the long-run or equilibrium, uniformisation is used for transient probability computation. moreover, prism uses a structure called multi-terminal binary decision diagrams  for representing compactly the graph structure of a markov chain. more details about prism engineering can be found in  <cit> .

sodium-potassium pump specification
discrete chemistry
the entities in our model are ion species , molecules  and the na,k-atpase  which can interact through six elementary reactions . in this work the amount of each representative of these species is modeled as a discrete quantity, not using a continuous function. then, we have converted the amount of initial representatives of species from molarity  as shown in table  <dig> to counts of molecules and ions. as some rates are also defined in terms of molarity, we have also converted them into stochastic rates  and , which regard counts of molecules and ions.

in order to convert the initial amount of molecules and ions given in molarity  into counts of molecules and ions , we have used the following biological definition:   

where v is the cell volume and na is the avogadro constant.

moreover, in order to convert the rates from continuous chemistry to discrete chemistry we have used the gillespie’s conversion  <cit> :   

where κ is the molecularity of the reaction. molecularity in chemistry is the number of entities that are involved in a reaction. for example, in the simple reaction a + 2b → ab <dig>  the reagents are a and 2b and the κ value is  <dig> +  <dig> =  <dig>  the  rates are obtained in the same way as the  rates.

law of mass action
the law of mass action states that a reaction rate is proportional to the concentration of its reagents. then, we have to take into account the reagent concentrations in our model. regarding the discrete chemistry conversion discussed in last subsection and the fourth step in the na,k-pump cycle    

the final rate r <dig> is given as follows:   

given a reagent species, we have to raise its concentration to its molecularity. the final rates for the other sodium-pump mechanism steps are obtained similarly, see  <cit>  for details.

prism specification
we now illustrate how to specify our na,k-pump model in the prism language. part of the model is presented in prism model code. the complete model is available in  <cit> . a ctmc description in prism language should start with the keyword ctmc and comprises a set of modules, whose states are represented by a set of finite-ranging variables. in our model, there is a module for each species involved in the na,k-pump: na, k, atp, adp, p and the pump enzyme. there are also two finite-ranging variables in k module: kin and kout that describe, respectively, the number of potassium ions inside and outside the cell. on the other hand, there are six variables in the module pump and each of them represents one possible enzyme state, according with the cycle in fig.  <dig> 

the behavior of each module, i.e. the changes in states which it can undergo, is specified by a number of guarded commands of the form g → r : u. the interpretation of a command is that if the predicate  g is true, then the system is updated according to u, which comprises one or more statements of the form  indicating how the value of variable x is changed. the rate at which this occurs is given by r, i.e. this is the value that will be attached to the corresponding transition in the underlying ctmc. prism also supports synchronization between modules in the style of process algebras. this is achieved by labelling commands with actions .  

transitions in different modules labelled with the same action occur simultaneously. the rate of synchronized transitions is equal to the product of the individual rates of the commands of the different modules that synchronize. in our model, the required updates when the fourth pump reaction ) happens are represented by the commands labelled with action r <dig>  then, there is a decrease in the number of potassium ions outside the cell and the pump changes its state. the final rate when this reaction happens is r4rate ∗ e2p ∗ pow, where r4rate denotes the  stochastic rate derived from the kinetic rates using the calculation described in sect. methods - sodium-potassium pump specification -discrete chemistry, e2p denotes the amount of pumps in e2p state and pow ≡ kout <dig>  we can extend our existing model by allowing more than one pump to occur in the system using the np constant, which can assume any integer value to represent the number of pumps.

finally, we add reward structures to our model as shown in rewards to prism model. we have defined two rewards: kout and time. the former assigns the current number of potassium ions outside the cell to every state in the system. this can be used to compute the expected amount of potassium ions outside the cell in a specific time for example. the latter simply assigns a state-reward of  <dig> to all states in the model and it is useful to analyze the total expected time before an event occurs.  

RESULTS
in the following analysis, all properties have been obtained considering a model with only one pump. moreover, table  <dig> shows that as the cell volume grows, so will be size of the model and the time required to build and check it. we have used a cell volume equal to 10– <dig> liters for analysis in the following sections. this type of abstraction strategy is common for modeling biological systems as discussed in  <cit> .

model size  and time to build the model and time to check the property r{”kout”} =?, which means the expected potassium outside the cell at the time equal to  <dig> seconds. in the experiments, the number of pumps in the model is one. the machine that we have used to run the experiments is an intel xeon cpu x <dig>   <dig> ghz and has  <dig> gb of ram memory. the ”?” symbol means that the value has not been determined so far, because of the long execution time.

discovering rare events
uncommon events can have a significant impact in any system and particularly in biological systems. for example, if a particular combination of reagents can cause a pump to block permanently, it can cause cell death. no matter how unlikely this event is, if it happens the consequences are critical. traditional analysis methods such as stochastic simulations can miss uncommon or rare events, because they simulate random paths in the evolution of the system, and if the event is rare, it is not likely that it will be simulated in a viable amount of time. pmc, however, can identify these events by looking for them. by stating a property that is true if such an event occurs, pmc can identify the conditions for its occurrence, and as a consequence, uncover hidden but potentially important behaviors in the system.

our first analysis shows how model checking can be used to identify rare events in the na,k-pump. figure  <dig> presents the potassium concentration in m outside the cell over time for the ode approach , which uses a deterministic and continuous pump model. the model was built and solved in matlab as described in  <cit> . the figure also presents the count of potassium ions outside the cell given by a simulation trace  of the discrete and stochastic pump model. the simulation trace was obtained using the bionetgen tool  <cit> , which provides an implementation of the direct method of gillespie.

as can be seen in the ode approach, the potassium outside the cell is decreasing until around  <dig> seconds, and its concentration converges on about  <dig>  m. however, this average behavior hides some important traces, as it is shown in the same figure, where the potassium count outside the cell, after the fast decrease until about  <dig> time units, will oscillate around  <dig> and might end, i.e. it can eventually reach value  <dig>  however, the probability of this event potassium outside the cell ends is extremely low  during the first  <dig> seconds. this probability value was determined using the csl property p =? . notice that there is a significant difference between a rare event and an impossible event. if the event is rare we may decide, based on its occurrence probability, to investigate it further or not. if it is an important event that may cause death it may merit further studies, whereas if it cannot happen, we need not worry about it. properties such as these can help direct future researches and shorten scientific discovery times.

thus, whereas a deterministic simulation will not identify this rare event potassium outside the cell ends because it captures only average behaviors, the stochastic simulation approach may not capture traces where it happens, depending on the simulation time and on the number of simulated traces.

however pmc can provide stochastic simulation with some hints in this sense. as it lets us know in advance that the rare event happens with probability equal to  <dig>  × 10– <dig> in the first  <dig> seconds, if the stochastic simulation time being considered is  <dig>  in a sample of  <dig> traces, for example, about  <dig> or  <dig> of them will probably show the rare event.

it is also important to note that in pmc the time is continuous, while in stochastic simulation it is discrete. hence, if the duration of an event of interest is smaller than the time step being considered in the simulation, it will not be captured, whereas it will be considered in the pmc model. as will be shown, pmc can give some clues for stochastic simulation in order to address these issues. the csl property shown below    

ensures that in all model traces the potassium outside the cell, in fact, will eventually end. additionally, in order to know about the expected time for this event to happen, properties  and  can be used:      

property  means what is the expected time to the potassium outside the cell being over?. the model checker answer was  <dig> seconds. the reward structure for this property associates reward  <dig> with each state . on the other hand, property  asks about the probability of potassium outside the cell eventually being over in the first  <dig> seconds, whose answer is  <dig> . thus, we can conclude that during the first  <dig> seconds the potassium outside the cell ends in around  <dig> % of the traces of the system. in this case the expected time is very long and unlikely to be reached before another event occurs. however, the same technique can be used to model reaction time to the presence of a toxin, for example, and the expected time can be crucial to the survival of the cell.

finally, the following properties are used to reason about the maximum and minimum expected time for the system to go from a state where potassium outside the cell is over to a state where this species is not more over:      

there is more than one state where potassium outside the cell is over and, therefore, min and max are used to return the minimum and maximum expected time to reach a state where kout >  <dig>  ranging over all start states that satisfy kout =  <dig>  the model checking answers for  and  properties are, respectively,  <dig> milliseconds and  <dig> milliseconds. this minimum expected time for the event duration can be used as a guideline for choosing the time step in stochastic simulation to guarantee that no such events will be lost. another event that can be easily identified with model checking is if after that potassium outside the cell is ended, its amount will eventually return to the initial count ko. property  is used to verify if this event happens in all traces in the model, whereas property  is used to determine the expected time for the event to happen:      

where ”koutover” is a label to kout =  <dig>  the model checker result for property  was true and the expected time computed in property  is about  <dig>   <dig> seconds.

thus, two significant events in the system potassium outside the cell will end and the potassium outside the cell will return to its initial count will happen in all traces of the pump model and lead us to study about their recurrence in the long term.

reversibility of the sodium-potassium pump
due to the fact that there are backwards and forwards transitions for all reactions involved in the na,k-pump mechanism, as is shown in fig.  <dig>  and that many of these transition rates depend on transmembrane substrates, the pump mechanism is automatically reversible, i.e the reactions can be run either forwards or in reverse direction, depending on changes in the amount of substrates. thus, given the initial concentrations of the substrates, we can consider that the pump performs two main steps. first it runs following the forward reactions and reaches the configuration where substrates reach a maximum or minimum concentration. then, given these changes in the amount of substrates, the pump returns to the initial configuration through the reverse reactions. of course, it is possible that the reverse reactions can be followed during the first step, and, similarly, forward reactions can be followed during the second step. in the forward running, na,k-pump uses one atp to perform the electrogenic exchange of  <dig> potassium ions from outside to inside the cell in exchange for  <dig> sodium ions from inside to outside the cell. in the reverse direction atp can be produced from adp and pi.

without loss of generality, we will study this reversible pump behavior in terms of the potassium amount outside the cell, which will be the species under observation. we can see this pump reversibility as an infinite oscillation between two values, the initial amount of potassium outside the cell, ko, and the final amount of substrates, after the forward running is complete and before the reverse running starts. in this final configuration, the potassium outside the cell ends, i.e. it reaches its minimum value . this pump reversibility is expressed through csl property , which means what is the probability that kout oscillation between  <dig> and ko values will never terminate?   

where i is ko and j is  <dig>  the result of csl property  is  <dig>  which proves that the events potassium outside the cell ends and potassium outside the cell reaches the initial amount happen infinitely often, i.e. the automatic pump reversibility property of the pump is true. this pump property can not be seen in the fig.  <dig>  because the study of the average behavior of the pump overlooks some aspects of its reversibility. moreover we are reasoning about the pump infinite behavior, which cannot be achieved through generating and analysis of finite-time trajectories with stochastic simulation. property  can be used to check if the concentration of some species oscillates between any two values i and j.

understanding the pump cycle
in this section we present a study of the na,k-pump mechanism in terms of the rates in the cycle shown in fig.  <dig>  in order to understand why the depletion of potassium outside the cell and consequently the pump reversibility can take long periods of time to be completed.

we now introduce some definitions and extensions in the previous prism pump model that will be used later. first, we compute the positive or ascending trend  <cit>  of a transition rate r from a current state s:  

where e is the exit rate of state s, i.e., e = ∑s′∈s r, being s a finite set of states, and ξ is a threshold that indicates a positive trend. we have chosen the value  <dig>  for ξ in our analysis and, therefore, informally an ascending trend for a transition rate r means that the probability of the system goes from s to si  is greater than goes to any other state sj , whose transition rate r >  <dig> 

thus, we add trend formulas to the previous prism model for all transition rates using prism resources . the code in prism model extension  <dig> illustrates the procedure for computing the positive trend label for the transition rate r <dig>   

the rate transition r <dig> is computed by the formula rate_r <dig> and it is different to  <dig> when the current pump state is e <dig>  atp and there is enough sodium inside the cell . in this case, the final value for r <dig> is determined in the same way as described in sect. methods - sodium-potassium pump specification - prism specification. the other rates are computed in similar way than r <dig> and the formula exit rate represents their summation. the probability that r <dig> is taken in the current state is given by formula rate_r1_d, whereas the label trend_r1_up represents if r <dig> really has an ascending trend, i.e. ↑ r <dig> is  <dig>  now, we can use the csl property  to identify the rates that never have a positive trend during the system evolution and, consequently those rates that always have an ascending trend:   

in our pump model,  is used to form the trend label of the backward rates, and i ranges from  <dig> up  <dig>  because there are six reactions in the pump system, considering each direction . thus, the trend ”trend_r1” represents the trend label for the first pump reaction in the forward direction , whereas the trend ”trend_rr1” refers to the trend label for the first pump reaction in the backward direction.

the results for property  are summarized in fig.  <dig>  which shows the trend for all transition rates in the pump cycle presented in fig.  <dig>  the arrows leaving the pump states  are labelled with the rates for the transition between the current state and the next state, which is given by the direction of the arrow. associated with each arrow, there is also a sign that indicates if the transition rate has always a positive trend  or a negative trend , and, finally, if the trend can be negative and positive during the system evolution .

we can see that the forward rates r <dig> and r <dig> always have a negative trend, while r <dig> always has a positive trend during the system evolution. moreover, the trends for the forward rates r <dig>  r <dig> and r <dig> can be positive or negative, depending on the changes in the amount of substrates during the pump evolution.

in order to identify the moment when these forward transition rates which don’t have only a positive or negative trend during the system evolution change their trends, we have again extended our prism model with the following transition-rewards  

in the prism model extension  <dig>  pluskout is a reward that assigns  <dig> to each transition from the state k <dig> e <dig> to state e <dig> ~ p, which results in the releasing of two potassium ions outside the cell. on the other hand minuskout is a reward that assigns  <dig> to each transition from the state e <dig> ~ p to the state k <dig> e <dig>  which results in the consumption of two potassium ions outside the cell. csl property  determines the expected count of potassium outside the cell when the rate ri starts to have a positive trend:   

using property , we can see that r <dig>  r <dig> and r <dig>  start to have a negative trend only when the potassium outside the cell is, respectively,  <dig>   <dig> and  <dig> .

thus, we can divide the pump operation into three main steps, as is shown in fig.  <dig>  initially , despite the general trend to move backwards due to the positive trends of the backward rates rr <dig> and rr <dig>  once r <dig> is taken, the system might complete easily the cycle in the forward direction, because the forward rates r <dig>  r <dig>  r <dig> and r <dig> have a positive trend in the most of the time. the backward rate rr <dig> needs that the pump goes in the forward direction awhile, increasing the amount of adp inside the cell, in order to exhibit a positive trend. when potassium outside the cell reaches the value  <dig>  the rates r <dig> and rr <dig> changes their trends, starting the intermediate step . in this step, the pump can still move in forward direction. the last step , starts when the potassium outside the cell reaches the value  <dig>  causing changes in the trends of the forward rates r <dig> and r <dig>  first, rate r <dig> no longer has a positive trend, while the negative trend of the backward rate rr <dig> is replaced by a positive one. this happens due to the increase of sodium outside the cell, which gives strength to rr <dig>  and the decrease of potassium outside the cell, which weakens r <dig>  second, the forward rate r <dig> also stops exhibiting a positive trend, whereas the trend of the backward rate rr <dig> starts to be ascending. this change is caused by the accumulation of pi inside the cell and the reduction of atp due to the pump movement in the forward direction. in step  there is a low probability, although is not impossible, that the pump continues its operation in the forward direction, given that the only forward rate with positive trend is r <dig>  delaying the depletion of potassium outside the cell. in fact, there is a strong general trend for the pump to move backwards, returning to the intermediate step, where the system stays most of the time. additionally, the pump can move backwards from the intermediate step, returning to the initial configuration. however, this takes long periods of time, given that it is necessary to move against the positive trends of the forward rates r <dig>  r <dig>  r <dig> and r <dig> in the initial step.

as shown in the previous sections, the depletion of potassium outside the cell and the pump reversibility are events that can happen in the pump model. however, they can take longs periods of time to be completed. so the study of this section is important to indicate the reasons for this delay. for example, it is possible to see that the first obstacle in the normal operation of the pump is the accumulation of adp inside the cell which causes the reversion of the r <dig> trend. this may indicate a specific aspect of the system that merits further studies. this result may lead to a more precise study because it tells us in detail what has happened  and not simply that the pump has reversed its behavior. results such as these can uncover important hidden behaviors that can speed up further experiments and increase their accuracy.

validation of the prism model
in this section we will show that our prism model can produce similar results when compared to the stochastic and deterministic simulations. property  allows us to know the expected amount of potassium outside the cell in time t, which specified in the property:   

the label ”kout” is a reward name defined as shown in rewards to prism model, sect. methods - sodium-potassium pump specification - prism specification. prism supports experiments, which is a way of automating multiple instances of model checking. in our case, this is done by ranging the constant t from, for example,  <dig> up to  <dig>  with steps of  <dig> . the resulting graph is shown in fig.  <dig> , which is very similar to deterministic curve shown in fig.  <dig>  we also got a similar trajectory using the prism tool, fig.  <dig> , which besides verification can also perform stochastic simulation of the model that mimics the gillespie method. thus, we can see that prism results for the sodium-potassium pump are very close to those obtained using the traditional approaches.

CONCLUSIONS
in this work we use a stochastic modeling approach and probabilistic model checker to model and analyze the na,k-pump which provides a new perspective on the study of the behavior of this system. it inherits many of the advantages of model checking, including the use of a formal specification of the system and the fact that the approach is exhaustive, analyzing all possible behaviors of the system.

we have presented a quantitative formal specification of the na,k-pump, based on a set of elementary reactions. all the process to build the model in the prism tool, taking into account a discrete chemistry and the law of mass action has been described. moreover, we have also checked some rare quantitative properties such as the depletion of sodium potassium outside the cell and the pump reversibility that can be addressed easily using model checking, whereas with the other traditional approaches, such as simulation and ode methodology, it can be difficult.

furthermore, using model checking we have shown that these events happen infinitely often. these properties cannot be addressed using simulations, given that they are, by definition, time-finite approaches and, additionally, do not construct the mathematical model which represents all possible states that a system can be.

moreover, we have used transition rate trends, in order to understand the pump behavior and why it takes a long period of time to express completely the reversibility property.

finally, we have shown that probabilistic model checking can be used along with other well established approaches to extend the pump behavior knowledge. then, after we know that the event potassium outside the cell ends happens, through model checking, we can focus the other approaches to identify and understand it better.

in practice, the main objective of this work is to provide biologists with hints related to important and interesting events that should be checked in more detail using biological experiments. thus, biological experiments could be preceded by model checking analysis, which can be used very efficiently, for example, for rejecting impossible hypothesis or for orienting biologists toward logical possible situations. in this way, instead of performing many experiments, the biologists will focus on those that are as pointed out as possible by the mathematical model.

future works include making our na,k-pump model more dynamic, adding other actual cell membrane aspects and systems. in order to deal with the large state space, given the big number of ions and molecules, an abstraction of ctmcs based on discrete levels of concentrations, namely ctmc with levels  <cit> , is already in progress.

competing interests
the authors declare that they have no competing interests.

authors' contributions
mac and svac carried out the model checking studies, analysis and validation of the results. mac studied the biological system, found the experimental data related to it, built the model in the prism tool and created the cls properties about the biological system. svac and acf participated in the study design and coordination. all authors helped to draft the manuscript and were involved in the read, review and approval of the final manuscript.

