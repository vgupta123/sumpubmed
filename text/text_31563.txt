BACKGROUND
the simulation of biological processes at the molecular scale has the potential to give insight into a wide range of properties and phenomena that are important to science, engineering, and medicine -- with protein folding, or mis-folding, being perhaps the most famous example  <cit> . indeed, simulations can give, in principle, atomic-level detail with great temporal precision over a wide range of application areas, thus greatly complementing and expanding on what one can currently do experimentally. today, with powerful individual processors, large computer clusters, as well as with very large distributed clusters of processors, one can routinely generate massive quantities of simulation data for a given phenomenon of interest, often in full-atomic detail along many trajectories.

there is an increasing need to mine such massive data sets in order to gain insight into the fundamental phenomena under study. from these data sets, the goal is to understand at some more macroscopic level the structure of the paths taken during the simulation. the key challenge facing dynamical simulation on the molecular scale is to overcome the gap between the timescales where interesting biologically relevant conformational changes occur  and those we can simulate at atomic resolution . the length of atomic simulations is limited by the need to take small time steps, which is determined by the high frequency motions.

markov state models
to meet such a challenge, a lot of recent effort has been devoted to constructing stochastic kinetic models, often in the form of discrete-time markov state models , from relatively short molecular dynamics simulations  <cit> . these models are built from short timescale simulations and then propagated to extract long timescale dynamics. the msms partition configuration space into a number of distinct states, called metastable states, such that the intra-state transitions are fast but the inter-state transitions are slow. such separation of timescales ensures that the model is markovian, in that the probability of being in a given state at time t + Δt depends only on the state at time t.

in a msm, the time evolution of a vector representing the population of each state can be calculated as p = np, where p is a vector of state populations after n time steps and t is the column-stochastic transition probability matrix with lag time τ . note that any model is markovian for a sufficiently long lag time τ, because the system is able to converge to an equilibrium distribution from any arbitrary initial distribution after one lag time. the key point is to build a model with a lag time that is shorter than the timescale of the process of interest with a reasonable number of states.

to build such dynamical models, it is necessary to map out the dominant long lived, kinetically metastable states and then determine the rates for transitioning between these states. a few different approaches have been developed to generate good state decompositions. if the low-dimensional manifold containing all the slow degrees of freedom is known a priori, then the configuration space can be partitioned into free energy basins to define these metastable states, such as by examination of the potential of mean force  <cit> . without this prior knowledge, some attempts have turned to conformational clustering techniques which assume that geo-metrically distinct clusters may also be kinetically distinct  <cit> .

in  <cit> , chodera et al. proposed a first algorithm that can automatically discover kinetically metastable states for the construction of msms. they use a geometric clustering algorithm to split the configuration space into a large number of small microstates, and then lump them into kinetically distinct macrostates. later, bowman et al. developed an open source software package msmbuilder based on this framework  <cit> . the software provides tools for clustering data based on geometric relationships and for constructing and manipulating msms based on this initial clustering. it also includes tools for verifying that the resulting model is markovian as well as analyzing and visualizing the model. there are also several recent works developed related to these methods  <cit> .

solvent degrees of freedom
since the dynamics of biological macromolecules are usually coupled with the surrounding solvent, many molecular simulations involve both a solute and a solvent . some previous works have shown the necessary of accounting for the solvent structure to accurately characterize the dynamics and free energy landscape of the biological macromolecule systems, such as the rna hairpin-loop motif  <cit> , alanine dipeptide  <cit>  and the bphc enzyme  <cit> . in this setting, both solute and solvent atoms are placed in a box and then move following some predefined force field, yielding a sequence of snapshots of the atom positions. the number of atoms is kept constant in this process.

although people have recognized that solvent coordinates may be critical in some phenomena  <cit> , in the step of data analysis people often assume configurations lie exclusively in the configuration space of the macromolecule, and simply ignore the solvent information. for example, in  <cit> , it presume that de-correlation of momenta and reorganization of the solvent is faster than the process of interest. one difficulty in dealing with solvent degrees of freedom is the large number of solvent molecules in a system . besides, it also requires to account for the indistinguishability of solvent molecules upon their exchange. one impressive work in this direction is  <cit> , which used a generic neural network model to identify reaction coordinates from a database of candidate variables including water related ones. however, to use this approach researchers have to define the candidate variables. furthermore, the result from the neural network model may not be easy to interpret, which is a drawback as a data exploration tool.

in this paper, we propose to generalize the current methods to include the solvent degrees of freedom. we first present a new distance metric which encodes the solvent information in molecular configurations, and then incorporate it into the construction of msms. finally we apply our method to several biological model systems and assess its performance.

methods
many of the dynamical systems which occur in biochemistry take place in very high dimensional spaces. our main goal is to develop techniques to obtain the simplest kind of qualitative information about high-dimensional molecular dynamical systems. perhaps the most significant piece of information one has about the data set is the distance metric which specifies the distances between pairs of points . for macromolecules, a commonly used metric for estimating the distance between two molecules is the rmsd distance, defined as the root mean squared deviation of the cartesian coordinates of heavy atoms in the molecules after a minimizing rigid body translation and rotation alignment  <cit> . in this section, we design a new distance function for comparing the solvent profiles, and then use it to construct msms with solvent degrees of freedom.

distance functions
in molecular simulations, a system consists of both a solute  and a solvent . suppose the solute structure contains m atoms, and the solvent involves n water molecules. we denote x = {x <dig>  x <dig>  ..., xm} as the set of solute atoms, and y = {y <dig>  y <dig>  ..., yn} representing the set of solvent atoms. . then, the results of the simulations become sequences of point sets {x, y}, which are obtained by sampling at random from the configuration space and then following the trajectory for a certain time interval.

we first point out two properties when comparing different configurations {x, y}:

• m ≪ n -- typically the number of solute atoms is less than  <dig>  while there can be thousands of solvent molecules in a system.

• {y <dig>  y <dig>  ..., yn} are indistinguishable upon their exchange -- when considering the interaction between the solute and the solvent, we do not care about the identities of y. in other words, two configurations are considered as the same if they only differ by a permutation of solvent molecules.

to address the indistinguishability of solvent molecules upon their exchange, one may consider methods that compute the optimal matching between the solvent molecules, such as minimum cost flow  <cit> , or the hungarian algorithm  <cit> . however, these matching based algorithms would require o time, which is slow for systems with thousands of solvent molecules. the computational cost can be reduced if we only focus on solvent molecules around the solute, such as its k-nearest neighbors. however, this solution is not stable because a small perturbation in the configuration may cause the set of k-nearest neighbors to vary a lot.

we present a new distance function that measures the geometric similarity between different configuration. the idea is we compute some signatures/descriptors f that compactly summarize the high-dimensional data sets {x, y}, and then define the distances using these signatures. as mentioned above, we would like the signature f to satisfy the following properties:

 <dig>  f is continuous in the input space x and y, so a small perturbation of the system does not change the signatures too much.

 <dig>  f is symmetric in y = {y <dig>  y <dig>  ..., yn}, so the solvent molecules are indistinguishable upon their exchange.

 <dig>  yi's far from x have less weights in f, because these solvent molecules have little impact to the solute.

to meet these properties, we define the signature f as follows. given a point x ∈ x, we transform the space using a gaussian kernel kx,y=exp-||x-y||22σ <dig>  where ||x - y|| is the euclidean distance between points x and y, so that yi's far from x become less important. we then define the signature of a single point x relative to space y as fx,y=∑i=1nkx,yi. by summing up all kernels k , the result is invariant under permutations of solvent molecules. finally, we define f as a signature vector {f, f, ..., f}, which takes o computation time.

intuitively, the signature vector f summarizes the solvent distribution around each solute atom. we then define the distance between two configurations simply as the euclidean distance between their signature vectors. in fact, there are various choices of functions that can satisfy these properties , while the one we proposed here is simple and fast to compute.

constructing markov state models
in this section, we integrate the solvent information into the construction of msms. we will follow and extend the methods described in  <cit> . basically, these approaches has two steps -- a split step to reduce the size of the data set based on geometric shapes, and then a lump step to incorporate kinetic information from trajectories.

splitting
modern computer simulations can easily generate data sets with millions of configurations, making analysis of these massive data sets computationally challenging. an important method for shrinking the data sets is to apply a clustering algorithm to obtain a family of clusters  of much smaller size than the original data set. here each cluster should be small enough to ensure that the intra-state transitions between configurations in the same cluster are fast.

in the split step, all n configurations  are grouped into k microstates  based on their structural similarity. due to the large size of the data set, it is more practical to apply a fast geometric clustering algorithm, such as the k-center or k-medoid algorithm with o time complexity  <cit> . another important factor is the choice of distance functions in these clustering algorithms. in the traditional solute-based models, the rmsd distance is often used as a standard metric to measure the structural similarity. with the distance function we defined between solvent configurations, we are able to identify solvent-based metastable clusters. furthermore, we may combine these two distance functions together to build a model with both solute and solvent information.

suppose we want to build a model with k microstates, we first group all n configurations into k  solute clusters using the rmsd distance, and then independently group all configurations into k  solvent clusters using the distance based on solvent signatures. in the next step, we consider two configurations to be in the same microstate if and only if they are assigned to both the same solute cluster and the same solvent cluster, and thus there are totally k  <dig> states at the end. note that some states might be empty if there is no configuration assigned to their corresponding {solute, solvent} cluster pairs. in this case, we may increase the number of solute/solvent clusters a little bit larger to make sure that we have at least k non-empty states.  finally, we form the k microstates by simply merging the smallest states .

more generally, we can generate k <dig> solute clusters and k <dig> solvent clusters , and then combine them into k microstates. in fact, the traditional solute-based model can be seen as a special case where k <dig> =  <dig>  and the solvent-based model is a special case where k <dig> =  <dig>  note that in this case, the running time for geometric clustering becomes on). by setting k1=k2=k , we achieve the optimal running time okn -- which is much faster than o time for large k .

lumping
because the clustering algorithms do not produce clusters of any particular uniform shape or size, we have lost the original metric information after the split step. what one retains, however, is the computation of probabilities for transitioning from one microstate to another. this means that we retain a coarse version of the dynamics. in the next step, these microstates are lumped into macrostates based on their kinetic transitions in the trajectories. since this step does not consider solute/solvent information about configurations, we simply follow the same approach described in  <cit> .

in the lump step, the k microstates are grouped into l macrostates  so as to maximize the metastability. the metastability q of a decomposition into l macrostates is defied as the trace of its transition probability matrix q=∑i=1ltiiτ. intuitively, a poor decomposition would result in a small q, as trajectories started in some states exit rapidly; conversely, a good decomposition with strongly metastable states would result in a large q, as trajectories remain in each state for long times.

in the original approach, a simulated annealing algorithm  <cit>  is used to optimize the metastability in lumping. the algorithm starts with an arbitrary initial solution that assigns k microstates into l macrostates. in each step, a microstate is selected uniformly at random, and reassigned to a new random macrostate . if the new solution has a larger metastability q' than the old solution q, the new solution is accepted; otherwise it is accepted by a probability of expq′-qt, where t is a temperature parameter which is set to be the inverse of the step number. the allowance for these "downhill" moves can potentially save the method from becoming stuck at local optima.

RESULTS
the method we described here would be generally applicable to a wide range of biomolecular simulation analyses. in this section, we pick several examples and test the performance of our method in these different models.

solvent-based clusters
we first apply our method to a small alanine dipeptide system, which has been used as an example in the msmbuilder  <cit> . we pick a  <dig> nanoseconds trajectory of alanine dipeptide in explicit water, with a frame rate of  <dig> picosecond.

in this model, the solute structure ace-ala-nme consists of  <dig> atoms and the solvent contains  <dig> h2o. for each configuration, we extract  <dig> solute atoms x = {x <dig>  x <dig>  ..., x10} consisting of all heavy atoms on the backbone chain ), and also y = {y <dig>  y <dig>  ..., y885} representing the water molecules. we next reduce the dimensionality of this point set {x, y} by computing its signature f.

intuitively, the signature vector f summarizes the solvent distribution around the solute. to see this, we map the signatures of all configurations onto a lower dimensional space using the principle component analysis   <cit> . figure  <dig> shows the top three pca directions for f, where the colors represent weights for each dimension. the first principle component is basically the average of f at all solute atoms, which represents the amount of water around the whole solute structure. the second principle component distinguishes the two ends of the backbone chain, which tells us whether the water molecules are gathered on the left side or the right side. furthermore, the third principle component distinguishes the two ends and the middle part, for example in the case when the two ends are folded close to each other. a six-states decomposition for all solvent signatures using the k-center clustering is shown in figure  <dig>  where the space is partitioned based on these pca directions.

in protein backbone geometry, it is known that the torsion angles ϕ and ψ are the primary degrees of freedom of the solute structure.  for example, figure  <dig> shows a five-states decomposition using the k-center clustering with rmsd distances, projected onto the  torsion angles map . however, these solute-based clusters are very different from those solvent-based clusters -- if we project the solvent clusters onto the torsion angles map, they no longer show a clustering behavior ). this also motivated us the construction of the combination model which integrates both solute and solvent information, as described in the splitting section.

in the above alanine dipeptide example, the solute structure is small and may in some sense be considered as a convex object, because the water molecules rarely enter the region inside the solute structure. we next turn to another example of carbon nanotube in water, whose solute atoms form a very concave structure. because this model simulates water molecules going in and out of a carbon nanotube, it is a good test of whether the solvent distribution inside the solute structure can be captured by our method.

we have a  <dig> nanoseconds trajectory of carbon nanotube in water, with a frame rate of  <dig> picosecond. the solute x consists of  <dig> fixed carbon atoms with a cylindrical nanostructure, and the solvent y contains  <dig> h2o. in  <cit> , it has been observed the spontaneous and continuous filling of a nonpolar carbon nanotube with a one-dimensionally ordered chain of water molecules, and a minute reduction in the attraction between the tube wall and water can dramatically affect pore hydration, leading to sharp transitions between empty and full states on a nanosecond timescale ). this can also be verified using our method by computing the water number inside the nanotube, which we define as the integral of point signature f over the cylindrical region v inside the nanotube. here we use a normalized gaussian kernel kx,y=12πσ3exp-x-y22σ <dig>  note that the water number ∫ vfx,ydx=∫ v∑i=1nkx,yidx=∑i=1n∫ vkx,yidx. as σ →  <dig>  k converges to the dirac delta function centered at yi, and thus ∫vkdx can be seen as an indicator function i. so, the water number roughly counts the number of water molecules inside the nanotube, except that it is a continuous function. figure  <dig> plots the water number inside the nanotube over a period of  <dig> frames. in this figure, we can clearly see that the system transits between empty and full states, with fast intra-state transitions and slow inter-state transitions. 

however, the above computation of water number relies on the fact that the system dynamics depends on the distribution of water molecules inside the nanotube. in general, we have no prior knowledge about how to choose a proper region v of interest, but we can use the solvent signature f = {f, f, ..., f} as a compact representation of the solvent distribution around the carbon nanotube. figure  <dig> plots the pairwise distances between these solvent signatures, and we can see a notable block structure in this matrix -- it is easy to distinguish empty and full states, because the distances between empty/empty, or full/full states are small, while the distances between empty/full states are large. for example, if we apply the k-center clustering with k =  <dig>  it returns two clusters correspond to these two main metastable states, with intra-state transition probabilities  <dig>   and  <dig>   respectively.

comparing different models
we have defined three types of models in the construction of msms:  a solute-based model using rmsd distances,  a solvent-based model using solvent signatures, and  a combination model integrating both the them. in this section, we compare the performances of these different models. in particular, we use the metastability as a measure, which is also the objective function that we optimized in building msms.

for splitting, the k-center algorithm is used as the fast geometric clustering algorithm since it returns clusters with approximately equal radii  <cit> . the dashed lines show the results after the split step. in the solute-based model, we see that the average of metastability decreases very quickly as we increase the number of microstates, while the solvent-based model seems to be much more stable . the combination model performs close to the solvent-based model, however, the advantage is that it takes only okn time, instead of o time.

for lumping, we first split all configurations into k =  <dig> microstates, and then lump them into l macrostates for each  <dig> ≤ l ≤  <dig>  for each test case, we run the simulated annealing algorithm  <dig> times independently, and each run simulates for  <dig> steps. the solution with the highest metastability sampled in any run is selected to define the lumping into macrostates. the solid lines show the results after the lump step, and the gap between solid and dashed lines corresponds to the improvement by simulated annealing. after incorporating the kinetic information, we see that the metastabilities for the solute-based model and the combination model are significantly improved, and thus the combination model gives the best result. the reason is that for solute configurations, there may exist structures which are geometrically close but are kinetically very different, because the deformation from one to another may needs to follow a long trajectory to avoid collisions between backbone links  <cit> . however, for solvent configurations, there are no such links between different water molecules , so solvent configurations that are geometrically close should also be kinetically close. therefore, the gap in the solvent-based model is much smaller than those in the other two models.

we have also verified this result on another data set for the collapse of benzene rings , which simulates the dewetting and hydrophobic interaction in a biological system  <cit> . in this model, the solute consists of two separate hexagonal rings, each having  <dig> carbon atoms with  <dig> attached hydrogen atoms, and the solvent contains  <dig> h2o. the system is simulated for  <dig> nanoseconds, with a frame rate of  <dig> picoseconds. the experiment results for this benzene rings model are shown in figure  <dig>  in which the performance is close to the previous alanine dipeptide model.

CONCLUSIONS
in this paper we have initiated an study to build markov state models for molecular dynamical systems with solvent degrees of freedom. we have introduced a gaussian-based signature to compactly represent the solvent distribution in the configuration space, and incorporated this information into the construction of msms to identify metastable solvent clusters. we have also tested our method on several different biological data sets and find that our approach improves the existing methods both in the computational running time and the metastability. we believe that the methods we described would be more generally applicable to a wide range of biomolecular simulations.

competing interests
the authors declare that they have no competing interests.

authors' contributions
cg, hwc and lm executed this study and wrote the draft of this manuscript. vsp, gec and ljg supervised this project.

declarations
the publication costs for this article were funded by nsf grant dms  <dig> 

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2013: selected articles from the eleventh asia pacific bioinformatics conference : bioinformatics. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/14/s <dig> 

