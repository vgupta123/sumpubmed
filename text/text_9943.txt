BACKGROUND
with the rapidly increasing availability of complete genome sequences, genome-wide sequence comparison has become an essential approach for finding homologous gene candidates, for identifying gene functions, and for studying genome evolution  <cit> . genome comparison can be used to find genes that characterize unique features in a given organism such as specific phenotypic variation or particular pathogenicity  <cit> . meanwhile, genome phylogenies based on gene content or gene order shed new light on the construction of the tree of life  <cit> .

currently many tools such as mummer and artemis are available for comparative genomic analysis  <cit> . these tools can be used for pairwise genome alignment  as well as multiple genome alignment e.g.,  <cit> ). unfortunately, most of them are not applicable for the identification of unique genes in a given set of genomes, since the tools were developed for homologous gene detection in most cases. additionally, only a few tools can be used for the study of phylogeny from the genomic point of view  <cit> .

the blast  algorithm as well as other anchor-based algorithms are commonly used for the identification of homologous gene candidates across diverse genomes  <cit> . although the blast algorithm has its pros such as fast computation and accurate results in detecting local highly-similar sequences regions, it sustains two cons when used to identify global sequence similarity:  genes that reside in local highly-similar regions can be erroneously identified as homologue candidates; and  multiple local hits that happen against the same subjective sequence need to be combined to obtain the overall aligned region between the query and subject sequences.

in order to solve these problems, we developed a web tool, genomeblast. it performs multiple genome comparisons, identifies unique genes as well as shared  genes among the genomes, and reconstructs the genome phylogeny. identification of homologous gene candidates is done by detecting global sequence similarity using alignment coverage information. this paper describes its architecture, algorithms, and implementation. we demonstrate the practical use of genomeblast with an example using herpesviral genomes, and discuss its future improvement plan.

implementation
architecture
the architecture of genomeblast is illustrated in figure  <dig>  in addition to input and output modules, it consists of sequence extraction, database formatting, sequence comparison, output filtering, and visual presentation of results.

the inputs to genomeblast are genome sequences in the genbank format, each in a single file. each genome sequence record needs to include the feature table with coding sequence  annotations. such data can be downloaded from public databases such as the national center for biotechnology information  <cit> . protein sequences are extracted from translation records in the cds annotations. the formatdb program is used to generate protein database files from the protein dataset for each genome. these protein database files can be used with the blastp program. the all-against-all blasting strategy is used for genome comparison. each of the protein sequences from one genome is compared against protein sequences from all other genomes. the blast results are then filtered and presented in various outputs.

three-level outputs generated from genomeblast include:  candidates for unique genes and homologous genes;  2d plots of homologous gene candidates for pairwise genome comparisons;  a table of gene presence/absence information;  genome phylogeny; and  a summary table for multiple genome comparison.

algorithm
coverage calculation
we used the blastp algorithm for protein sequence comparison. since the blast search may result in identifying only short local similarities  or in identifying multiple short similarities from the same cds , we introduced a parameter called "coverage" to detect gene-wide sequence similarity. the percent alignment coverage  is calculated using the following equation:



where li, li,j, and lquery represent the alignment length for the ith hit, the overlap length between the hits i and j, and the query length, respectively; and k is the total number of hits to the same subject sequence for a given query sequence.

identification of homologous gene candidates
in order to identify homologous gene candidates and to exclude related genes that share similarities only with limited regions, genomeblast can use a combination of following thresholds:

i) coverage. the coverage is the length of aligned regions calculated as above. the default threshold is 50%.

ii) identity. the identity is the proportion  of identical amino acid pairs in the aligned region. the default threshold is 30%.

iii) e-value. the e-value, expectation value, is the number of different alignments with scores equivalent to or better than the scores that are expected to occur in a database search by chance. the default threshold is  <dig>  in the default setting, genomeblast uses only the coverage and identity, but not the e-value threshold.

genome phylogeny reconstruction
based on the results of multiple genome comparison, the presence and absence of each cds is tabulated with 1s  and 0s  for each genome. using this binary character matrix, the maximum parsimony method  <cit>  with the branch-and-bound tree search algorithm is used to infer genome phylogeny. the branch-and-bound algorithm effectively searches the possible tree topologies and guarantees finding the most parsimonious phylogeny  <cit> .

backend programs and the web server
the blastp program in the blast stand-alone package  was used for protein sequence comparison. the penny program of the phylip package implements the maximum parsimony phylogenetic method using the branch-and-bound tree search algorithm and a binary character data matrix  <cit> . the data processing/analysis and integration of the blastp and penny programs into genomeblast were implemented with the perl programming language. the web applications were developed using php. genomeblast runs on a linux server, which has four processors ,  <dig> gb memory, and  <dig> gb disk space.

RESULTS
we will use thirteen herpesviral genomes described in  <cit>  as an example, and go through genomeblast step by step to demonstrate its functions .

the first step is to set up blastp options. we did not choose the filter option to mask off low compositional complexity or mask for the lookup table. we used the default values provided in genomeblast .

the next step is to upload genome sequence files. we set up the number of genomes to compare as  <dig> and clicked the ok button. we then uploaded the  <dig> herpesviral genome sequence files, which were originally downloaded from ncbi in the genbank format. the average size of these genomes was approximately  <dig> kb. formatting databases and performing all-against-all blastp comparison took  <dig> minutes  <dig> seconds on our server.

the third step is to set up parameters for gene comparisons. we used the default threshold values, i.e., 50% coverage and 30% identity for determining homologous cds. the last step is to view genome comparison results at three different levels, i.e., single-genome, pairwise-genome, and multiple-genome levels. we chose two alpha viruses, ebv and ehv <dig>  to show functions available for the single-genome level analysis. note that any number of genome combinations can be used for unique gene or homologous gene candidate identification. a total of  <dig> and  <dig> unique gene candidates were found respectively in ebv and ehv , whereas  <dig> homologous cds candidates were identified between these two genomes .

for the pairwise-genome comparisons, any two genomes can be chosen and a 2d plot of distribution of homologous gene candidates is generated. we clicked the hyperlink ebv.gb-ehv <dig> gb  and a 2d plot was displayed in a new window as shown in figure  <dig>  interestingly, the plot suggests that genomic inversion might have occurred between these two viruses. clicking each dot in the plot, we can see its corresponding information including the query name, subject name, and % identity. of the  <dig> homologous cds candidates, only two proteins were found to have sequence identities higher than 80% ,  <dig> proteins had identities between 50% and 80% , and the rest had identities between 30% and 50% .

at the multiple-genome level, we can obtain the binary gene presence/absence table  and the genome phylogeny as shown in figure 6a. the phylogeny indicates that there are three virus groups, which is more clearly shown in the phylogeny redrawn with the treeview program  <cit>  . this result showing three groups of herpesviruses is consistent with previous reports  <cit> .

discussion
genomeblast has several unique features compared with other comparative genomics tools  <cit> . instead of focusing on generating alignments, genomeblast identifies unique and shared, possibly homologous, cds sets among multiple genomes and presents the information in a summary table. it generates 2d plots depicting the distribution of homologous cds between given pairs of genomes. in order to identify possible homologous cds, genomeblast uses the blastp sequence similarity search program. combining the length of alignment coverage with % identity of the aligned region, it evaluates gene-wide similarity. this combination of coverage and identity can better identify homologous cds candidates. genomeblast also provides flexibility in choosing different combinations of parameters and their threshold values. once the blast search is done, there is no need for redoing the blast search and the user can return to the parameter-setting page to reset thresholds for identifying homologous gene candidates.

genomeblast reconstructs genome phylogeny based on gene content using the maximum parsimony method. in this context, genomeblast overlap with the web server, shot  <cit> . shot also includes a gene-order phylogeny method. whereas shot can be used for only a certain set of genomes, genomeblast offers more flexibility.

montague and hutchison  <cit>  reconstructed whole-genome phylogenies for  <dig> herpesviral genomes based on the clusters of orthologous groups  data  <cit> . they used several computer programs/packages before reconstructing the genome phylogenies including the wisconsin package   <cit> , blast programs, and paup   <cit> . we performed the same analysis using genomeblast alone and our genome phylogeny agreed with their result  <cit> . it demonstrates that genomeblast is a very useful application for small genome comparison. our plan to extend functions in genomeblast includes automatic cds extraction/translation, use of fasta sequence format, dna-level analysis using blastn, and gene-order based genome phylogeny.

genomeblast is suitable for small genome comparison. we do not expect it to compare large genomes, such as human and mouse genomes, because such computation with large genomes is extremely expensive, which will take several days or even weeks to complete. for larger genomes, standalone programs such as mummer and artemis can be used. or for the model organisms, some homologous gene databases such as homologene  <cit>  and inparanoid are available for use  <cit> .

CONCLUSIONS
we have developed a web tool for comparative analysis of small genomes. with genomeblast, we can identify unique genes and homologous gene candidates among multiple genomes, view their graphical distributions on genomes, and reconstruct genome phylogeny. an example with  <dig> herpesviral genomes demonstrated that genomeblast is a useful tool for genome comparison.

availability and requirements
• project name: genomeblast project

• project home page: 

• operating system: linux

• programming language: perl and php

• other requirements: any standard web browsers 

• any restrictions to use by non-academics: yes, contact the author gl for details

authors' contributions
gl conceived of the study, participated in its design and coordination, and drafted the manuscript. lj participated in the design and implementation. rmk participated in the testing and helped to develop the web site. twr participated in the implementation and testing. lz conceived of the study and helped to draft the manuscript. cz carried out the software testing and helped to draft the manuscript. em conceived of the study, participated in its design and coordination, and drafted the manuscript. all authors read and approved the final manuscript.

