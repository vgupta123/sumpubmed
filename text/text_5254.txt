BACKGROUND
with the sequencing of entire genomes and the exponential growth of sequence databases on the one hand, and the significant number of known folds compared to the putative number of possible folds in the fold space on the other hand, sequence-structure comparison is currently one main challenge of the post-genomic era. to this goal, 3d-environments were used by eisenberg and coll. in the early 90s to build statistical potentials indicating the probability of finding each amino acid in a given structural environment as described by the secondary structure, the solvent accessibility and the polarity of neighboring atoms  <cit> . such statistical potentials were successfully applied to protein fold recognition  <cit>  or protein model evaluation  <cit> , and were shown to improve the quality of sequence-structure alignments  <cit> .

statistical potentials describing the propensity of a residue pair to be at a given spatial distance have proved successful as well  <cit> , but are more difficult to use as information to guide sequence-structure alignments using dynamic programming. on the contrary, residue preferences for position-dependent structural environments are easily implemented in alignment programs  <cit> . recent improvements in this field were achieved by  optimizing definition and classification of the 3d-environments, and  by constructing substitution matrices instead of residue preferences, i.e. taking into account the native residue type  <cit> . indeed, it has been shown that amino acid substitutions are constrained by the structural environment, each environment displaying a distinct substitution pattern  <cit> . the use of  <dig> distinct substitution matrices corresponding to different 3d environments based on secondary structure, solvent accessibility and hydrogen bonding, combined with structure-dependent gap penalty and with global or local alignment algorithms, provides good performance to the fugue software in fold recognition approaches  <cit> . in this paper we investigate the use of decision tree algorithms to automate and improve the classification of structural environments. the automation will allow easy adaptation to any particular selected data set, opening a way for the construction of various specific substitution matrices. indeed, it appears that one problem in the use of statistical potentials for structure prediction is their lack of universality  <cit> . it may thus be worthwhile to derive potentials specific to prediction problems or to protein classes. the automated derivation proposed here will facilitate such developments.

in the first part of the work we focus on automatically building and evaluating structure-dependent substitution scores. the emphasis is given to the development of a method for automatic selection of the most informative classifications of 3d environments in order to set up a versatile method allowing easy compilation of structure-dependent substitution scores for any given set of proteins. in a second part, the method is applied to a specific protein class, the small disulfide-rich proteins.

decision trees have attracted our attention for several reasons. knowledge acquisition and description language are optimized automatically and do not require human expertise during the learning process. thanks to the hierarchical organization of the inferred trees, classifications are obtained quickly and the chain of decisions leading to the prediction is explicit and can be easily interpreted . decision tree learning algorithms are also robust since they partition the data recursively. the first dichotomies near the tree root are then based on many examples and are therefore statistically reliable. to handle noise and uncertainty, the trees can be pruned during a post-processing step to remove possible misleading clusters at the bottom of the tree. the research field on this topic is well-established and the number of applications of decision trees to real world is huge.

methods
structure-dependent substitution profiles
standard substitution matrices are deduced from multiple sequence alignments of similar sequences  <cit> . to derive structure-dependent substitution matrices, multiple sequence alignments are also needed as well as a description of the 3d structure at each position in the alignment  <cit> . a schematic overview of the evdtree method is displayed in figure  <dig>  since we want to make sure that all residues at the same position in the alignment do share similar 3d structures, we will only use multiple alignments obtained from structural superimpositions . from this, we extract all observed "substitutions" for each residue type and the corresponding structural environment . the word "substitution" here is used to describe the residue replacement observed at an equivalent position in two structurally similar proteins. then, for each residue type, the structural environments and associated substitutions are classified using a decision tree algorithm and substitution scores are computed from residue distributions observed in each cluster of the classification tree .

standard structure-dependent substitution matrices report the probability of  <dig> ×  <dig> or  <dig> ×  <dig> possible substitutions in a given structural environment  <cit> . in this work we classify 3d-environments and associated substitutions derived from alignments separately for each of the  <dig> residues  using a decision tree algorithm . as a result, we get several structure-dependent substitution profiles for each type of residue, that each indicates the relative probabilities of all  <dig> possible substitutions of one residue type in a given structural environment. since the selected structural environments differ between residue types, the substitution profiles cannot be gathered into structure-dependent substitution matrices. as an example of how structural environments may differ between residues, a solvent-exposed environment might refer to a solvent accessibility > 6% if the residue is a leucine, but to a solvent accessibility > 33% if the residue is a glutamine.

learning and test data sets
several data sets of structure-structure superimpositions and the corresponding alignments are available  <cit> . we have selected the database of homologous structure alignments, homstrad  <cit>  for constructing both the learning and the test data sets of sequence-structure alignments. main homstrad strengths are  a selection of accurate protein structures,  a combination of automatic procedures and of manual inspections that guarantee low data noise, and  its successful use in the derivation of the structure-dependent substitution matrices used in fugue  <cit> . moreover, to facilitate comparison between our method and fugue, we selected the very same learning set previously used by mizuguchi et al. this subset consists of  <dig> families extracted from the homstrad database and does not contain membrane proteins. from this homstrad subset, a set of  <dig>  million of observed substitutions were extracted, one substitution corresponding to a residue in a reference structure, and the corresponding residue observed at the same position in a structurally similar protein. moreover, to remove non-structural constraints from the sequence-structure alignments, the following filters were applied:

- residues involved in a domain-domain or chain/chain interface, were excluded. residues are considered to be involved in an interface when their solvent accessibility varies by more than  <dig> % when comparing the protein environment in the complex and in the isolated chain/domain. the cut-off value was taken from mizuguchi et al  <cit> , who used a similar filter to remove residues at a chain/chain interface.

- residues that are not correctly superimposed in the structural superimposition were also excluded. the superimposition was considered good enough when the deviation between the two corresponding alpha carbons is below  <dig>  Å. we assume that larger deviations may correspond to incorrect structural superimposition for the particular residue even though other residues are correctly aligned. large deviations may also imply significant modifications in the 3d-environment. although this  <dig>  Å criterion is sometimes too restrictive, it actually leaves enough data for robust statistical estimations while removing most of aligned amino acid pairs whose respective structural contexts are not superposable.

application of the two above filters excluded about 20% of the initial substitutions leaving about  <dig> million substitutions for the learning process. this data set was split into  a learning data set containing  <dig>  <dig> substitutions similar to the learning set used by mizuguchi et al.  a pruning data set containing  <dig>  <dig> substitutions, and  a test data set containing  <dig>  <dig> substitutions. the learning data set has been in some cases filtered further based on the percentage of sequence identity between superimposed proteins, resulting in smaller sets of  <dig>  <dig>  or  <dig>  <dig>  substitutions, respectively.

- since we only work with three-dimensional structures, the oxidation state of any cysteine  is known. the symbol 'c' refers to disulfide bridged cysteines , whereas the symbol 'j' was used for free cysteines.

structural descriptors
since the decision tree algorithm is able to automatically select the most discriminating structural descriptor at each classification step  we do not need to empirically determine the 'best' descriptors. in this work, twenty-three structural descriptors were provided to the classification algorithm. the secondary structure  was assigned to each residue according to stride  <cit>  into seven categories. values are as follows: ss <dig> =  <dig>   <dig>   <dig>   <dig>   <dig>   <dig> and  <dig> for α-helices ,  <dig> helices , π-helices , isolated bridges , extended conformations , turns  and coils , respectively. we also used a simpler 3-state description  deduced from the stride assignment: ss <dig> =  <dig>   <dig> or  <dig> for helices , sheets  and coils , respectively.

hydrogen bonds were determined using the hbond software  <cit> . four different descriptors were used for different type of interactions: side-chain...main-chain o atom , side-chain...main-chain n atom , side-chain acceptor...side-chain donor  and side-chain donor...side-chain acceptor . for each interaction type, the number of interactions was used as the descriptor value. here again a simpler description  was also implemented that takes value of  <dig>   <dig>   <dig>  or  <dig> if the side-chain of the residue makes no hydrogen bond, makes hydrogen bond with side-chain atom, makes hydrogen bond with main-chain atom or makes hydrogen bonds with both side-chain and main-chain atoms, respectively.

other structural parameters were obtained using the local program compilpdb . beside the secondary structure, the local structure was also described by the phi and psi dihedral angles, and by cα-cα distances: d <dig> = cαi - cαi+ <dig>  d <dig> = cαi - cαi+ <dig>  d <dig> = cαi - cαi+ <dig>  d <dig> = cαi - cαi+ <dig>  d <dig> = cαi - cαi+ <dig>  other descriptors were the buried surface area , percent of accessibility , contact area with carbon atoms , nitrogen atoms , oxygen atoms , sulfur atoms , positively charged atoms , negatively charged atoms , or polar atoms .

for simplicity, these structural descriptors will now be called s <dig> to s <dig> 

it should be noted that some structural descriptors are correlated . however, this descriptive redundancy is not a problem since it is eliminated during the tree construction where the most informative descriptors only are selected, as explained below.

automated classification of structural environments using a decision tree algorithm
the native structural environments observed in the learning data set were classified for each of the twenty amino acids, plus the half-cystine, resulting in twenty-one independent decision trees . the use of these decision trees is as follows: let , s) the position k in a protein for which we want to score substitutions, a the residue type and s = ,...,s23) the structural environment description at this position. after the learning phase explained below, each tree node will be associated to particular structural descriptor sj and threshold s and will be linked by edges to two subnodes whose structural environments will be constrained respectively by the tests sj≤s and sj>s. the classification of , s) will be obtained by selecting the decision tree corresponding to residue type a and then by running through the tree from its root node to an appropriate leaf following at each node the edge whose test, sj≤s or sj>s, is compatible with the value of the corresponding structural descriptor sj . contextual substitutions scores associated to the selected tree leaf, as explained in a further paragraph, will then evaluate each possible substitution of the amino acid a.

according to the standard data mining terminology, the predictive variables are therefore the native amino acid type and its associated structural descriptors and the dependent variable to be predicted is the substituted residue at this position. during the learning phase which we will now describe, the goal of the decision tree construction is to optimize the predictive power of the structural descriptor test chosen at each node and therefore to maximize the bias of the statistical distributions of the substituted residues associated to each subnode towards a few types of amino acids. ideally, tree leaves should be associated to only one type of substituted amino acid, but this never happens in practice because of the tree depth limitation and the data set noise.

let , s, b) be the i-th example of the whole learning data set where a is a native residue, s = ,...,s23) is its structural environment description and b is the substituted residue as observed in a structurally similar protein at the same position as a. the main steps of the decision tree construction from the learning data set are as follows :

 <dig>  the decision tree for a given residue type a is initiated to a unique root node with an associated cluster c <dig> = {i / a = a } grouping all examples with native residue type a.

 <dig>  for each tree cluster c do :

a. test in turn each descriptor sj and each associated threshold s that creates possible dichotomies of c into two subclusters c <dig> and c <dig>  if sj has continuous values,  <dig> possible thresholds s are chosen to create dichotomies c <dig> = {i∈c/sj≤s} and c <dig> = {i∈c/sj>s} corresponding to the 10th, 20th, ..., and 90th percentiles of the statistical distribution of the considered descriptor. if sj is restricted to a few discrete categories, all possible dichotomies c <dig> = {i∈c/sj==s} and c <dig> = {i∈c/ sj! = s} are created, where s is one of each possible value of sj.

b. select the optimal dichotomy from previous step which satisfies the tree constraints  below) and minimizes the chosen splitting criterion  below).

c. insert the new clusters c <dig> and c <dig> as nodes in the tree by linking them to cluster c with respective edges labeled {sj≤s} and {sj>s} or {sj == s} and {sj! = s}. the structural environment associated to a particular cluster will be defined by all edge labels from the tree root to the considered tree node or leaf .

 <dig>  finally, prune the tree according to the selected pruning method and pruning data set  below).

it should be noted the choice of the optimal descriptor at a given tree level will depend on both the amino acid identity of the native residue and each structural descriptor previously chosen as splitting criteria along the tree path that leads to the considered node.

main parameters in the classification are  the tree constraints,  the splitting criterion, and  the tree pruning method.

 tree constraints
- tree depth: as the learning process goes deeper in the tree, more and more specific clusters are created. beyond a certain depth, the chance that the corresponding rules can be applied to new examples outside the learning set drops significantly, resulting in an overfitting of the available data since deep clusters won't have enough associated examples to derive statistically significant distributions. therefore, to avoid wasting time to partition the data into smaller and smaller clusters, maximum tree depths of  <dig> to  <dig> were tested.

- cluster cardinal: for the same reason as above, a minimum cardinal of examples was required for each cluster. we tested values between  <dig> and  <dig> with increments of  <dig> 

- tree balancing: a restriction on uneven distributions of samples among two clusters from the same parent was applied to prevent the creation of unbalanced trees which would require higher depth to fully partition the data. this restriction is achieved by the parameter simcc measuring the cluster cardinal similarity between two subclusters obtained by splitting :



where, n <dig> is the cardinal of the subcluster  <dig> and n <dig> the cardinal of the subcluster  <dig> 

 three different splitting criteria were tested
- the gini criterion evaluates the probability that two randomly selected elements in a cluster correspond to two different types of residues  <cit> :



where p is the relative frequency of residue type a in cluster c.

to evaluate the quality of a given segmentation into several clusters, the splitting criterion is given by



where nc is the number of elements in the cluster c and n is the total number of elements in all clusters.

- the shannon entropy  <cit>  tries to limit the distribution of elements of the same class among several clusters.



where p is the relative frequency of residue type a in cluster c.

- we also used a specifically developed splitting criterion called the "mean rank" mr. each class  in a cluster is ranked according to the number of elements of this class in the cluster . the mean rank mr evaluates the mean rank for a randomly selected element in the cluster. low mr indicates clusters with only few well represented classes. such clusters would correspond to structural environments that induce significant bias in the sequence and therefore strong structural constraints.



where r and p are the frequency rank and probability of the residue type a in the cluster c.

 three different pruning methods were considered
- the pessimistic error pruning   <cit>  consists in recursively checking each cluster starting from the tree root and in cutting its corresponding subtree if this removal reduces the mean error rate estimated on the independent pruning test set by :



where n is the number of examples assigned to the cluster c and n is the number of occurrences of the most frequent amino acid in the cluster c. let c be the father cluster from which c is derived in the tree, then c and its subtree will be removed if e≥e.

- the mean rank pruning  has a principle similar to pep, except that c will be removed if r<r where r and r are respectively the mean ranks of the current cluster c and of its father cluster c averaged over the pruning test set.

- the pessimistic mean rank pruning  is a more stringent version of mrp using a confidence margin to prevent statistically biased clusters to be kept in the tree. the current cluster c will now be removed if r+ σ t80<r, where σ is the mean rank standard deviation over the pruning test set and the scaling factor t <dig> =  <dig>  corresponds to a 80% confidence level for a gaussian distribution.

few other parameters were further optimized including
- a mutation weight α = 1/nf inversely proportional to the total number of residues nf in each protein family f of the learning data set. this insures that all structural families have similar importance in the derivation of the substitution probabilities.

- a mutation weight β = 25/ide inversely proportional to the percentage of identity ide between the two considered proteins. if ide<25%, then the mutation weight is decreased to  <dig>  this reduces the importance of substitutions observed in similar sequences and could be used later to specialize evdtree on different kinds of applications involving different sequence similarities.

residue specific environment-dependent substitution profiles
once trees have been constructed, statistical distributions of observed substitutions in each cluster are used to compute cluster-specific environment-dependent substitution profiles. as explained previously, the structural environment associated to a particular cluster will be defined by all edge labels from the tree root to the considered tree node or leaf.

the probability for the amino acid a in the 3d environment s to be substituted by amino acid b is



where  is the number of observed substitutions of amino acid a by amino acid x in the 3d environment s.

smoothed probabilities q are then calculated as



where a is the a priori distribution of topham et al.  <cit> . relative weights are calculated as



where  is the total number of occurrences of amino acid a in 3d environment s, n is the number of classes , and σ is a normalization constant. we used the value of  <dig> previously used by topham et al.  <cit> . it should be noted that the weight of this "a priori" distribution is inversely proportional to the number of available examples  and is therefore maximum for undersampled substitutions.

then the log odds scores are calculated as



where p is the background probability of occurrence of amino acid b in the whole database.

these log-odds are calculated for each node cluster of each native amino acid tree.

application and evaluation of environment-dependent and standard substitution scoring functions
to evaluate the evdtree scoring function, each example of associated native residue, structural environment, substituted residue , s, b) from the test data set is classified by the tree corresponding to residue type a. then the tree leaf corresponding to the structural environment s is searched and its associated log-odds substitution scores are finally used to score the substituted residue b.

to compare the evdtree substitution scores with other scoring methods, we have used the mean rank  as the criterion to evaluate the quality of scoring functions. for each example in the test data set, the  <dig> possible substitutions are scored as indicated above, and the observed  substitution b is ranked according to its score among all other possible substitutions. the mean rank over all examples in the test data set is indicative of how well the scoring function is able to recognize as probable the "real" substitutions. a mr of  <dig> would mean that the scoring function always gave the better score to the observed substitution. at the opposite, a mr of  <dig>  would indicate that observed substitutions are scored randomly. the main advantage of the mean rank criterion is that it is fast to calculate and it is independent from the absolute values of the scores, therefore allowing comparisons between very different scoring functions. similar criteria based on ranking were previously used to evaluate 1d-3d scoring functions  <cit> .

the evaluation of environment-dependent substitution matrices requires computing the 3d environments the very same way they were computed when deriving the scores. thanks to dr k. mizuguchi who provided us with all the necessary tools, we could include the fugue environment-dependent substitution matrices into our evaluation process.

to complement the mr evaluation, we also compared the performance of evdtree with other scoring functions in sequence-structure alignments. to do this,  <dig> sequence-structure alignments were selected from our test data set derived from the homstrad database. each alignment was recalculated using a smith and watermann algorithm with several different substitution scoring functions. for each scoring function, the percentage of correctly aligned positions, according to the real alignments in the test data set, was compiled and used for comparisons. for each method, the gap opening  and gap extension  penalties were optimized by comparing the alignments for several penalty combinations .

RESULTS
decision tree classifications
several learning data sets were compiled by filtering out observed protein substitutions  with sequence identity between superimposed proteins above thresholds of 40%, 60% or 80%. for each learning set, several combinations of parameters were tested for the construction of the evdtree classifications and the calculation of the resulting structure-dependent substitution scores . for each run, a set of  <dig> decision trees was built and the corresponding scoring function was evaluated on the test data set using the mean rank  criterion as explained in methods. due to the amount of data, cpu time limitations did not allow systematic examination of all parameter combinations, and the best parameters were determined through a limited trial and error protocol.

the variation of the mean rank over sixteen different runs remained limited  showing that the method is robust and is not critically affected by slight modifications of the parameters. the lowest mr  was obtained with the following protocol:

- minimum cardinal of any cluster = 600;

- the minimal cluster cardinal similarity between two subclusters obtained by splitting of the parent cluster is

simcc =  <dig> .

- segmentation criterion: mean rank

- the pruning method is mrp.

- examples in the learning set are weighted according to the number of residues in the protein family: α = 1/nf

- no weighting is done in relation to the sequence identity 

- maximal sequence identity between superimposed proteins in the learning set = 60%

the values of the obtained mean ranks could, at first sight, appear rather high. however, it is worth noting that only substitutions were ranked in the evaluations, i.e. protein positions occupied by the same amino acid in the two structurally superimposed proteins were not considered in the evaluation process. they are included, however, in the statistics during the calculations of the substitution scores.

the evolution of the mr criterion along the learning process for alanine is shown in figure  <dig>  as expected, the mr decreases regularly when calculated on the learning set. on the other hand, when calculated on the test data set, the mr decreases in the first few learning steps, then increases in the following steps. the difference between the two curves in the last steps is due to overfitting, i.e. learning specific rules from the learning set that cannot be generalized, thus reducing the predictive power on the test data set. pruning the tree using an independent pruning data set removes clusters with reduced predictive power resulting in a flat curve in the last steps.

analysis of the evdtree classifications
for each residue type, the maximal tree depth used was  <dig>  leading to a maximal number of leaves  <dig> ×  <dig> =  <dig>  each of them potentially leading to a substitution profile that corresponds to one line in a classical substitution matrix. in other words, the total amount of data corresponds to  <dig> distinct substitution matrices, although it is not possible to associate substitution profiles to matrices since each profile corresponds to a different structural environment. the overall amount of data is nevertheless, in principle, comparable to the  <dig> environment-dependent substitution matrices used in the fugue system. however, the tree pruning step removed a significant number of clusters that do not afford improved information, leaving only  <dig> environments each associated to a specific substitution profile .

structural descriptors, thresholds and values used in the first dichotomies of the root clusters for each residue type are displayed in table  <dig>  our main interest in using a decision tree classification is that, in principle, optimal splitting parameters and associated thresholds or values are automatically selected for each residue. as an example, it has been suggested that different boundaries on the fraction of area buried should be used for different residue classes when determining if a residue is exposed or buried  <cit> . several examples of this can indeed be found in the evdtree classifications: the selected structural descriptor for splitting the root cluster of serine and alanine substitutions is the percent of accessible area , but the threshold is 3% for serine, whereas it is 10% for alanine . the pac is also used as structural descriptor in the second dichotomy in the glutamic acid tree classification, with a threshold of 25%. the use of different accessibility thresholds by the decision tree algorithm fully supports previous observations by rice and eisenberg  <cit> . this observation also highlights the nice feature of decision trees that can be easily interpreted.

analysis of the most discriminating structural descriptor selected in the learning process, i.e. the descriptor selected for the first dichotomy of the root cluster for each residue type , shows that the secondary structure is the most discriminating parameter for aspartic and glutamic acids, lysine, arginine and asparagine . although contact polarity or solvent accessibility have been selected in subsequent dichotomies in most cases, it is clear that the substitution profile of charged residues primarily depends on the local structure. this result appears to be consistent with previous work by gilis & rooman  <cit>  on the relative importance of local and non-local interactions in mutant stabilities. these authors showed that for solvent-exposed residues, the local structure is the most important factor, whereas distance potentials  appear more suited to prediction of mutations in the protein core  <cit> . here we show that substitution profiles for charged residues  mainly depend on the local structure. another observation leads to a similar conclusion: for alanine and serine, the first selected structural parameter for splitting is the percent of accessibility  and the most exposed resulting cluster is then split using secondary structure, whereas the most buried resulting cluster is split using the polarity of the protein environment . these results confirm that, for solvent-exposed protein positions, the local structure is one main parameter that determines which amino acid can occupy this position.

four substitution profiles  are displayed in figure  <dig>  comparison of the substitution profiles for alanine and aspartic acid in similar environments  reveals significant differences . this observation is not trivial since it could be postulated that, except for functional residues, the probability that a residue b occurs in a structural environment s only depends on s but is independent of the observed residue a in structurally similar proteins. the fact that, for similar structural environment, substitution profiles vary with the native residue probably indicates that purely structural descriptions probably lack some essential information, possibly related to the evolution process. this observation also illustrates the limits of environment-dependent statistical potentials in which the native amino acid is not taken into account. as an example, using data in figure 4a, substitutions to met in exposed α-helices appear more likely than substitutions to leu when the native residue is ala but the reverse is true when the native residue is asp. such differences cannot appear in environment-dependent statistical potentials such as 3d-1d scores that only describe the relative preference of residues for particular structural environments  <cit> .

on the other hand, the substitution profiles for leucines in different structural contexts also display significant differences . thus, substitutions leu → met are favored in exposed α-helical positions whereas substitutions leu → thr are favored in exposed non α-helical positions . this observation is not unexpected since it is well-known that β-substituted residues do not like to be in α-helices. nevertheless it shows that evdtree was able to extract consistent knowledge on sequence-structure relationships and it confirms previous observations that substitution scores are indeed structure-dependent  <cit> , explaining why structure-dependent substitution matrices perform better than standard evolutionary matrices in fold recognition processes  <cit> .

structural information improves prediction of substitution probabilities
the detailed impact of structural information for correct prediction of substitution probabilities can be approached by comparing the evdtree substitution profiles with the evolutionary substitutions matrices gonnet  <cit>  and blosum <dig>  <cit> . to this goal, the "mean rank" criterion has been used . results by residue type and averaged over all residues are shown in table  <dig>  comparison of evdtree with the gonnet and blosum <dig> matrices shows that evdtree performs clearly better on average, and individually for most residues. therefore, the use of the structural information in evdtree does improve the predictive power of substitution profiles versus structure-independent substitution matrices. moreover, a substitution matrix was built from the tree clusters of evdtree, i.e. before any structural information is taken into account. this matrix, referred to as evdtree <dig>  is simply derived from the structural superimpositions in the learning data set and is thus similar to other structure-derived substitution matrices  <cit> . interestingly, evdtree <dig> performs better than evolutionary matrices suggesting that, despite a lower amount of data, structure-derived alignments can provide data of higher quality than sequence alignments for derivation of substitution matrices.

the results in table  <dig> show that evdtree provides poorer evaluation than the evolutionary matrices for two residues, histidine and lysine, possibly due to an insufficient amount of data. it is also worth noting that histidine often participates in active sites or coordination sites, and the substitution probabilities may have been biased by this peculiarity. filtering out the learning data set for coordination sites was performed by shi et al  <cit> , but such a filter was not implemented here.

more surprisingly, five residues  and the free cysteine  do not display evaluation improvement by using structural information . the latter remark means that for these five residues no structural descriptor permitted efficient splitting of the data. it is likely that for these residues new descriptors or descriptor combinations remain to be discovered. nevertheless, on average, the structural information significantly improves the performance and evdtree appears as a clearly better scoring function than evolutionary matrices in evaluation of sequence-structure alignments.

the evdtree substitution profiles provide slightly better substitutions predictions
comparison with structure-dependent substitution matrices obtained by other groups is not as simple as for standard substitution matrices, because we must make sure that we compute the structural environment exactly the same way that was used for generating the matrices. we were able to compare evdtree with fugue, thanks to the fugue accessory programs kindly provided by dr k. mizuguchi.

as shown in table  <dig>  the overall performance of evdtree and fugue appear very similar. a comparison between these two scoring functions at different levels of sequence identity is displayed in figure  <dig>  evdtree provides slightly better performances at sequence identity above 30% but similar results below 30% . the reason for this remains unclear, but might be a result of our filtering of the learning set that removed all positions were cα deviates from more than  <dig>  a. further optimization of the evdtree learning set would probably be necessary for use in fold recognition programs at low sequence identity. the observation that evdtree performs at least as well as the scoring function of fugue but is computed in a fully automated manner opens the way for future potential applications. for example, we show below that evdtree can easily optimize fold-specific scoring matrices specific of small disulfide rich proteins leading to improved substitution scores for this particular class of proteins.

evaluation of evdtree as scoring function in sequence-structure alignment
although the mean rank test determines the ability of a scoring function to correctly evaluate structure-compatible sequences, it does not determine how well a scoring function would actually perform in a particular application, e.g. fold recognition. in this paper, we do not focus on a particular application, but rather on the method to automatically derivate structure-dependent substitution profiles, and the mean rank appears as a simple and efficient criterion to rapidly compare different learning parameterizations or scoring functions. to verify that the theoretical evaluations using the mean rank have some significance for future real applications, we compared evdtree with other methods used as scoring functions in sequence-structure alignments. the percent of correctly aligned positions for different methods and for different sequence identity ranges is displayed in figure  <dig>  for each method, the best gap opening and gap extension penalties were roughly optimized by checking  <dig> combinations . the results shown in figure  <dig> fully confirm previous analyses using the mean rank criterion: on average, better alignments are obtained using the structure-dependent scoring functions fugue and evdtree, and evdtree provides slightly better alignments than fugue above 30% of sequence identity but similar results at lower sequence identity. the slightly better accuracy of evdtree for mid-range percentages of identities suggests that our approach could be particularly useful to improve sequence/structure alignments in homology modeling. the evdtree learning algorithm could also be applied to fold recognition by optimizing scoring functions specific of particular protein families.

application of evdtree to a specific class of proteins, the small disulfide-rich proteins
the strongest potential of evdtree is its ability to adapt itself to any particular set of structures. as a test case, we have applied evdtree to small disulfide-rich proteins. small disulfide-rich proteins display several peculiar structural features:  due to their small size, a larger number of residues than usual are solvent-exposed,  regular secondary structures are limited and the content in turns and loops is high,  the hydrophobic core is largely constituted by the disulfide bridges that are responsible for the high stability despite the small size, and  glycine, proline, and, of course, cysteine residues are more frequent than usual. with all these peculiarities, small disulfide-rich proteins are not well-suited to standard prediction methods and it has been shown that these proteins score poorly using the standard procheck database  <cit> . evaluations of non-specific substitution scoring functions on small disulfide-rich proteins using the mean rank criterion are reported in table  <dig>  comparison of values in table  <dig> for evdtree, gonnet, blosum <dig> and fugue with those in table  <dig> clearly support the idea that small disulfide-rich score poorly when using standard databases and methods.

thus, to test the ability of evdtree to automatically adapt itself to a class of proteins with specific structural features, we have computed disulfide-rich specific substitution profiles . for this, we have compiled a specific data set from the structural class "small disulfide" in the homstrad database. these data were complemented by data extracted from the knottin database  <cit> . the number of structural positions in the initial data set  is clearly insufficient to divide this set into independent learning and test datasets. therefore, a "leave-one-out" protocol was used. in this protocol, one protein family is excluded from the learning set and the resulting substitution scores are used to evaluate this family. this process is repeated for all protein families in the initial set. also, due to the limited number of data, the tree pruning had to be performed using the learning data set, which is of course far less efficient than using an independent data set , and resulted in a very limited pruning when compared to the general case.

mean rank evaluations of the new, specific, evdtreeds substitution scores on small disulfide-rich proteins are reported in table  <dig>  despite the limited set of data, comparison of the efficiency of the evdtreeds specific substitution profiles with standard evdtree clearly shows that the automated classification method was able to extract, at least in part, the specific features of the small disulfide-rich proteins.

furthermore, the comparison of the structural descriptors used in the first partition of root clusters in evdtree and evdtreeds classifications highlights interesting differences . first, when the solvent accessibility percentage is the first used descriptor in both trees , the thresholds retained by the learning algorithm are different for the disulfide-rich proteins which are small and whose residues, except half-cystines, are more exposed to solvent on average. accordingly, the selected threshold is lower for half-cystines but higher for alanines.

more surprisingly, we also notice that charged and polar residues  display the opposite switch, i.e. a secondary structure descriptor is used in evdtree but a solvent accessibility descriptor is used in evdtreeds. analysis of the evdtreeds classification suggests that these residues, when in more buried positions, are far more conserved than when in more exposed positions. we think that beside the disulfide bridge core, additional elements of stability often occur through specific hydrogen bonding networks between charged or polar residues and the backbone, rather than through hydrophobic packing. typical examples of this are the conserved glutamic acid in position  <dig> of cyclotides  <cit> , or the conserved aspartic acid in position  <dig> of squash inhibitors  <cit>  which both participate in multiple hydrogen bonding with the backbone. this might explain, at least in part, why the distinction between exposed and partially buried charged residues is more critical in small disulfide-bridged proteins.

all these subtle modifications revealed by the evdtree and evdtreeds classifications suggest that there is probably no universally optimal description language and that the choices and partitions of structural descriptors should be adapted to the class of proteins considered. our new decision tree learning algorithm makes this fine tuning automatically from scratch whereas classical potentials are based on globally optimized description languages which may become suboptimal in specific contexts.

CONCLUSIONS
we have described a new method, evdtree, based on decision tree classification of structural environments to automatically construct structure-dependent substitution profiles from a set of sequence-structure alignments. the evdtree method was shown to perform similarly to the successful environment-dependent substitution matrices used in fugue . interestingly, the tree-pruning step removed a significant number of structural clusters yielding an average tree depth of  <dig> instead of the six allowed levels. this is an indication that clusters at higher levels corresponded to the learning of specific sequence-structure relationships that could not be generalized . it may be expected that as more high quality data will become available, this effect could be reduced and higher levels of the decision tree will gain better performances.

in this work, we were interested in the development of a fully automatic method for the classification of structural environments and inference of structure-dependent substitution profiles. the evaluation of the intrinsic performance of the substitution profiles was primarily done on known sequence-structure alignments, using the mean rank of observed substitutions. we have shown that in this context, the evdtree substitution profiles perform slightly better than other successful substitution matrices, and as such, the evdtree matrices constitutes interesting elementary data for various applications. moreover, comparison of the evdtree substitution scores with other scoring functions for sequence-structure alignments led to results similar to the mean rank evaluation supporting the usefulness of the latter criterion.

one specific strength of the evdtree method is its easy automatic adaptation to any specific data set. here we have shown that it is possible to obtain structure-dependent substitution profiles specific of small disulfide-rich proteins with better predictive power than standard substitution scores. this approach could be easily extended to other specific protein classes such as coil-coils, membrane proteins, etc. as soon as enough structures are available for learning. fold-specific substitution matrices have recently been proposed for protein classification  <cit> . the evdtree approach opens the way for class-specific or fold-specific structure-dependent substitution scores for use in threading-based remote homology searches. decision trees based on different learning sets and with different depths could be optimized depending on the available protein structures and sequences of the fold family considered.

the fact that, as stated above, the structural information did not yield better prediction for several residues in the evdtree approach  suggests that improvements are still possible. to this end, 3d environments from the decision trees yielding poor performances should be determined in order to design more appropriate structural descriptors. it is tempting to speculate that using combined structural descriptors, e.g.  angle pairs which can delineate particular regions of the ramachandran plot or  distance pairs which can introduce some super-secondary structural constraints, could increase the accuracy of the decision trees. alternatively, the use of linear combinations of descriptors in decision tree induction algorithms have been reported and could be used for structural classifications  <cit> .

authors' contributions
after an initial program from jg, jcg coded a new version of the software to incorporate a novel algorithm. all methods were implemented and tested by jcg. the whole work was conceived by jcg, jg and lc and was supervised by lc and jg. all authors read and approved the final manuscript.

figures and tables
amino acid
                              a
aonly dichotomies for which the structural information improves the mean rank evaluation are shown . bresidues for which the same descriptor is used in evdtree and evdtreeds. cresidues for which a descriptor corresponding to the local structure has been used by the evdtreeds but not by the evdtree learning process. d residues for which a descriptor corresponding to the local structure has been used by the evdtree but not by the evdtreeds learning process.

amean rank evaluation of the evdtree , gonnet , blosum <dig>  and fugue  substitution scores. bmean rank evaluation of evdtree <dig> , i.e. scores inferred from the root clusters before structural classifications. bold numbers indicate the best values among the methods.

amean rank evaluation using the evdtree , evdtreeds <dig> , evdtreeds , fugue , gonnet  and blosum <dig>  substitution scores. bold numbers indicate the best values among the methods.
