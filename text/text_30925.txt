BACKGROUND
species tree estimation from multiple loci is complicated by incomplete lineage sorting , a population-level process that produces gene trees that differ from each other and from the true species tree  <cit> . furthermore, when ils levels are sufficiently high, the standard approach of concatenating alignments for each locus together into a larger supermatrix and then estimating the tree from the supermatrix  can produce incorrect trees with high confidence  <cit> . because concatenated analyses can be positively misleading and even the most frequently observed gene tree topology can be different from the species tree in the presence of ils  <cit> , coalescent-based methods for multi-locus species tree estimation have been developed  <cit> .

here we address the challenge of using *beast and other bayesian coalescent-based methods for co-estimating species trees and gene trees. these methods are statistically consistent under the multi-species coalescent model  <cit> , which means that as the number of genes and their sequence lengths both increase, the probability that the method will return the true species tree will increase to  <dig>  while these bayesian methods have excellent accuracy in simulations and on biological datasets  <cit> , they use computationally intensive mcmc approaches that in practice limit them to relatively small numbers of loci; for example, *beast did not converge on 100-gene simulated datasets with  <dig> taxa within  <dig> hours  <cit> , and analyses on biological datasets can take weeks  <cit> .

alternative coalescent-based techniques operate by combining estimated gene trees, of which mp-est  <cit>  is among the most popular. some of these "summary methods"  are statistically consistent in the presence of ils, and are far less complicated to use than *beast or other fully parametric methods  <cit> . furthermore, some of these summary methods are quite fast and can analyze datasets with  <dig> or more loci without any difficulty  <cit> . thus, for computational reasons many multi-locus phylogenomic datasets are analyzed using summary methods  <cit> . however, co-estimation methods, such as *beast, are generally preferred over summary methods, and even the most popular and best performing summary methods  have been criticized by some biologists as being unsatisfactory "short-cut" methods  <cit> . thus, enabling fully parametric methods such as *beast to be used on phylogenomic datasets with hundreds or thousands of loci is an important objective.

approach
bbca: boosted binned coalescent analysis
as shown in  <cit> , gene trees estimated by *beast can be much more accurate than trees estimated using raxml  <cit>  or fasttree  <cit>  maximum likelihood, with the biggest improvements occuring when there are low levels of ils and sequence lengths are not very long. when *beast produces more accurate gene trees, it also produces more accurate species trees than coalescent-based summary methods applied to gene trees estimated by maximum likelihood methods. furthermore, applying summary methods  to the *beast gene trees produced species tree estimations that were as accurate as *beast, suggesting that the main advantage *beast provided over summary methods was due to its ability to produce more accurate estimated gene trees  <cit> .

these observations motivate the design of bbca , our proposed pipeline for coalescent-based species tree estimation. bbca takes as input a set of sequence alignments for a set s of species, and then performs the following three steps:

• step 1: randomly partition the loci into bins of approximately the same size .

• step 2: for each bin, run *beast on the set of multiple sequence alignments in each bin to co-estimate the gene trees and species tree for the bin.

• step 3: run mp-est on the set of estimated gene trees, to produce an estimated species tree called the bbca tree.

this technique has some similarities to the "naive binning" method  <cit> , but differs in important ways that change its statistical properties. naive binning performs the same random partitioning, but then concatenates the sequence alignments within each bin and computes a "supergene" tree on the bin using concatenation. finally, the supergene trees are combined using a summary method. naive binning lacks a theoretical basis, since there is no attempt to ensure that genes in the same bin have the same tree; however, as shown in  <cit> , this technique improved the accuracy of mp-est and other coalescent-based methods. the technique we propose here, however, does have a theoretical basis, because *beast is used to estimate the gene trees within each bin, and these gene trees are then combined using a statistically consistent coalescent-based method. thus, bbca is statistically consistent under the multi-species coalescent when the size of the bins grows with the number of genes. 

variants on this default setting for bbca. we show results for bbca where we set the number of genes per bin to  <dig> and otherwise follow the default settings shown above. a simple variant of this pipeline would change the number of genes per bin, but other variants can also be considered. for example, a different co-estimation method  could be used to estimate the gene trees, and a different coalescent-based summary method  could be used to combine the estimated gene trees into a species tree. another alternative to this pipeline would use *beast to produce a distribution of gene trees for each locus, and then apply the summary method to the combined set of distributions of gene trees. results for some variants of the protocol are shown in the supplementary materials, and summarized below.

datasets and computational platform
we explore *beast and bbca using two collections of simulated datasets. all bbca analyses were run on the texas advanced computing center , with most on the lonestar cluster, which limits analyses to  <dig> hours, and some also on the stampede cluster, which allows longer analyses. all *beast analyses were run on tacc's stampede cluster. each *beast analysis on each bin of  <dig> genes within bbca was limited to either  <dig> or  <dig> hours. we also performed additional *beast analyses in which we explored longer  runs on 100-gene datasets. after *beast completed on each bin, we ran mp-est  <dig> times using the maximum clade credibility tree output by *beast for each gene, and kept the tree with the best pseudo-likelihood score.

simulated datasets. we had two types of simulated datasets - 11-taxon "strongils" datasets originally studied in  <cit>   and 12-taxon "laurasiatheria" datasets that we generated for this study based on a coalescent-based analysis of the mammalian phylogeny in  <cit> . both collections were obtained by generating a species tree, evolving  <dig> gene trees down the species tree under the multispecies coalescent model, and then evolving sequences down each tree under a gtr  sequence evolution model. each model condition has  <dig> replicates. these datasets have outgroups, so that mp-est analyses  can be performed.

the 11-taxon strongils datasets all have the same model species tree, which has relatively high levels of ils. gene trees were simulated down the model species tree, and then sequences were evolved down the different gene trees under very heterogeneous models of evolution. each sequence dataset has length  <dig>  and so the alignments are relatively short.

to produce the simulated laurasiatheria datasets, we computed an mp-est tree on a dataset of  <dig> loci for a 37-species mammalian dataset originally studied in  <cit> . we restricted this tree  to a subset of  <dig> laurasitheria species and one outgroup species , to produce the model species tree for this simulation. we evolved gene trees down the model tree under the multi-species coalescent using dendropy  <cit> , and then evolved sequences down each gene tree using bppseqgen  <cit> . we varied the length of the sequences from  <dig> bp up to  <dig> bp.

analyses performed
we used raxml and fasttree to compute gene trees on the gene sequence alignments, and raxml to compute concatenation analyses using maximum likelihood . we used *beast and bbca to compute gene trees and species trees on the multi-marker datasets.

metrics
we report average gene tree and species tree estimation error using the normalized robinson-foulds  <cit>  distance to the true  gene tree and species tree, respectively. we assessed convergence using the first seven effective sample size  values provided in the report created by treeannotator ; according to the *beast instructions, these values should be above  <dig> for the *beast run to be considered to have converged. we report a sample of these ess values, as well as the number of mcmc iterations, running time, and peak memory usage for each analysis.

RESULTS
we present results for these analyses here, but see additional file  <dig> for additional details.

11-taxon strongils datasets. the 11-taxon datasets have  <dig> genes, and so each dataset was analyzed using bbca on four bins of size  <dig>  with *beast run for  <dig> hours on each bin. we also ran *beast on the full set of  <dig> genes for  <dig> and  <dig> hours. we compare the topological error of species trees computed using three methods: bbca, *beast, and concatenation using maximum likelihood  . concatenation had perfect accuracy , and bbca and the 96-hour *beast analysis both had the same excellent performance . the 48-hour *beast analysis had double the error of the bbca and 96-hour *beast analysis.

the ess values suggest that *beast was much closer to converging when run in the bbca analysis than when run on the full set of  <dig> genes, even when *beast was allowed to run for  <dig> hours . peak memory usage was also greatest for the 96-hour *beast analysis , and least for the bbca analysis . the average number of mcmc iterations reached by bbca within each bin was  <dig> million, while the 48-hour *beast analysis reached  <dig> million, and the 96-hour *beast analysis reached  <dig> million.

laurasiatheria simulated datasets. we compared bbca, *beast, and ca-ml on the laurasitheria simulated datasets, using 24-hour analyses of *beast on each bin of size  <dig>  and allowing up to  <dig> hours for *beast on the 100-gene datasets. *beast failed to run on two of the  <dig> bp datasets; consequently, all our comparisons for the  <dig> bp datasets are based on the eight remaining replicates. results for the ca-ml, bbca, and the 48- and 96-hour *beast analyses are shown in figures  <dig>   <dig> and  <dig>  the 96-hour *beast analysis was more accurate than the 48-hour *beast analysis, but even the 96-hour analysis was much less accurate than the bbca analysis. interestingly, for all these conditions, bbca was more accurate than ca-ml, even though ca-ml was more accurate than the 96-hour *beast analysis.

the first seven ess values suggest that bbca may have converged on these data , while even the 96-hour *beast analysis was far from converging for many of the statistics .

from a computational perspective, bbca used less peak memory than the 48- hour and 96-hour *beast analyses: bbca used from  <dig> mb- <dig> mb of peak memory, and the *beast analyses used from  <dig> mb to  <dig> mb.

week-long *beast analyses. we ran two week-long  long *beast analyses, each on one replicate of two model conditions of the laurasiatheria simulated datasets - one with a  <dig> bp alignment  and the other with a  <dig> bp alignment . on the  <dig> bp alignment, bbca  had perfect accuracy. in contrast, the week-long *beast analysis on the  <dig> bp alignment had 22% error, and the 48-hour *beast analysis had 33% error. ca-ml was much more accurate than the *beast analyses on the  <dig> bp dataset , but was less accurate than bbca.

on the  <dig> bp alignment, bbca using  <dig> hours on each bin matched the accuracy of the week-long *beast analysis . ca-ml had 22% error on the  <dig> bp dataset, and so was not as accurate as bbca or 168-hour *beast, although it matched the 96-hour *beast analysis.

since convergence may have been an issue, we examined the ess values for these analyses . on the  <dig> bp alignment, *beast seemed to have converged for most statistics in  <dig> hours, but the ess values were much better on the 168-hour analysis . thus, on this dataset the 168-hour *beast analysis seemed to have converged, and yet ca-ml was still more accurate than *beast. on the  <dig> bp alignment, *beast had clearly failed to converge in  <dig> hours  but had excellent ess values after  <dig> hours. bbca matched or improved on concatenation on all these model conditions.

*beast reached an average of  <dig> million iterations in  <dig> hours, an average of  <dig> million iterations in  <dig> hours and an average of  <dig> million iterations in  <dig> hours.

*beast reached an average of  <dig> million iterations in  <dig> hours, an average of  <dig> million iterations in  <dig> hours and an average of  <dig> million iterations in  <dig> hours.

results on bbca variants
bin size. we compared bbca analyses using bins of size  <dig> and allowing  <dig> hour *beast analyses of each bin, to the default case of bins of size  <dig> and allowing  <dig> hour *beast analyses of each bin. on the simulated laurasiatheria datasets with  <dig> bp, the bbca analysis with bins of size  <dig> produced species trees with  <dig> % tree error, but using bbca on bins of size  <dig> produced species trees with  <dig> % tree error. thus, when the *beast analyses of all the bins together were limited to a total of  <dig> hours, the smaller bin size produced better results.

the ess values on the bins of size  <dig> for *beast analyses using  <dig> hours were about the same as those for the 24-hour *beast analyses of the bins of size  <dig>  although the ess values suggest that both analyses had reached comparable levels of convergence, the difference in species tree accuracy may reflect a failure of *beast to converge sufficiently on the 50-gene bins. put differently, the way we report ess values may not indicate perfectly the level of convergence for *beast analyses.

using *beast to produce a distribution of trees for each gene. *beast is a bayesian method that uses mcmc to co-estimate the gene trees and species tree given a set of multiple sequence alignments on different loci. thus, it can be used to produce a distribution of gene trees  as well as a single gene tree  for each gene. in the default version of bbca, we applied mp-est to the set of maximum clade credibility gene trees to obtain an estimated species tree; however, mp-est could also have been applied to a set consisting of the union of the distributions of gene trees produced by *beast on each gene. we explored the impact of using the distribution of gene trees instead of a single gene tree on the simulated datasets.

results on the simulated laurasiatheria datasets allowed us to examine the impact using different sequence lengths as well. for the longest sequences , the species tree estimation error using maximum clade credibility gene trees or using  <dig> gene trees  for each gene was the same -  <dig> % tree error. for the medium length sequences , using the maximum clade credibility gene trees produced a less accurate tree  than using the distribution of gene trees . for the shortest sequences , there was no difference in accuracy between the two ways of running bbca .

we examined the average gene tree estimation error for the single maximum clade credibility gene tree per locus as opposed to the average gene tree error in the distributions produced by *beast. we observed that the average gene tree estimation error differed between the two ways of using *beast but depended on the sequence length; thus, on  <dig> bp alignments, the average gene tree estimation error for the maximum clade credibility gene trees was  <dig> %, and when based on the distribution was  <dig> %; on  <dig> bp alignments the average gene tree estimation error was  <dig> % when based on maximum clade credibility gene trees and was  <dig> % when based on the distribution of gene trees; and on the  <dig> bp alignments the gene tree estimation error was  <dig> % when based on the maximum clade credibility gene trees and  <dig> % when based on the distribution of gene trees. thus, at least for these data, using the distribution of gene trees was generally benign - either not changing the result or reducing the error.

increasing runtimes for *beast within bbca. we examined the impact of allowing *beast to run for  <dig> hours instead of  <dig> hours on each 25-gene bin on the laurasiatheria simulated datasets. ess values improved for *beast on these bins when run for  <dig> hours, but there was no change in the resultant species tree estimation for any sequence length condition, whether we ran *beast for  <dig> hours or  <dig> hours for each bin.

computational issues
the bbca pipeline has three steps: divide loci into bins, run *beast on each bin, and then combine gene trees using mp-est. the first step is trivially fast. the second second step is the most computationally intensive, with the running time per bin depending on the user, but needing to be at least  <dig> hours . the running time for the third step  depends on the number of species more than the number of genes, and so is fast for the datasets that are suitable for *beast.

mp-est is a heuristic for a "pseudo-maximum likelihood" optimization problem, which is based on the distribution of rooted three-taxon gene trees defined by the input gene trees. mp-est operates in two steps, where the first step computes this distribution  and the second step searches for the "pseudo-maximum likelihood" solution, and is slower. hence, the number of loci has a very small impact on mp-est's running time, since it only impacts the initial part of the analysis. the number of species impacts mp-est's running time  <cit> , but for small numbers of taxa , mp-est is very fast. on our datasets, mp-est always completed in less than  <dig> minutes.

discussion
although this study was limited to two basic model conditions, the results show that a simple way of running the bbca pipeline produced trees that matched or improved on the accuracy of *beast, when both were run in a time-limited fashion. this is not surprising, since bbca's partitioning step makes it more likely that *beast will converge on each bin, and thus produce highly accurate gene trees. since *beast's accuracy as a species tree method seems largely a function of the accuracy of its gene trees, bbca is more accurate than *beast under conditions where *beast can converge well on the bins but does not converge well on the full set of loci. thus, bbca was not designed for use on datasets where *beast can converge well , and on such datasets we do not expect to see improvements on results obtained by *beast. on the other hand, we expect bbca to be more accurate than *beast on datasets with large numbers of loci where running *beast to convergence is difficult or infeasible.

given this, the observation that bbca is sometimes more accurate than *beast, and yet ess values suggest that *beast had reached convergence, is surprising. one possible explanation is that ess values may need to be much higher than  <dig>  to be reliable indications of convergence. if so, then the time needed for *beast to converge may be even larger than the earlier estimates suggested . another possibility is that there are other ess values that are more predictive of species tree topology accuracy and that we did not examine, and which were below  <dig> in these analyses.

however, practical issues made it infeasible to report all of the ess values, since on datasets with  <dig> genes there were as many as  <dig> statistics whose ess values could be computed. in our study it would have been impossible to make sure all the replicates were above these limits, even with the smallest bins.

the study also showed conditions in which the gene trees estimated by *beast were less accurate than ml gene trees estimated using raxml or fasttree; whether this is due to a failure to converge or some other issue is unknown. a direct comparison to summary methods applied to ml gene trees would be very interesting, and might reveal conditions in which summary methods can outperform *beast.

the study also suggested the possibility that variants of the bbca pipeline might produce further improvements; for example, using *beast to produce a distribution of trees for each gene rather than a single point estimate gave a small advantage for one condition and was otherwise neutral, and so additional study of this variant would be desirable.

future studies should examine the impact of using binning under other model conditions, including missing data , different amounts of ils, and in the presence of other sources of gene tree discord .

it would also be very interesting to explore the impact of binning on branch length estimation, since branch lengths  are parameters that are estimated by coalescent-based methods, such as *beast and mp-est, and are used to estimate the amount of ils in the data or to date ancestral nodes.

the analyses we performed used mp-est to combine the estimated gene trees, but bbca could be used with other coalescent-based summary methods and would still be statistically consistent under the coalescent model. however, the empirical performance could change, and the use of summary methods such as astral or bucky-pop would make it feasible to run bbca without reliable outgroups.

increasing the bin size could improve the gene tree accuracy but might entail a running time increase, to ensure convergence in each bin. indeed, our study suggested that 24-hour analyses were sufficient on the 25-gene datasets, but that even 48-hour analyses were perhaps insufficient on the 50-gene datasets we examined. however, these analyses were under high levels of ils, and it is possible that 24-hour analyses of larger bins might be feasible if the amount of ils were lower. thus, increasing the bin size might be best for accuracy, but the computational feasibility of larger bins will likely depend on various properties of the data, such as amount of ils, sequence length, branch lengths in the gene trees, and phylogenetic signal in the sequence alignment. however, generally not much is known about the running time and memory requirements of *beast, and how the dataset properties impact these requirements, and so answering these questions will require substantial exploration and study.

non-random binning might have advantages in terms of running time and accuracy, and could be explored. for example, if genes were binned based on shared gtr model parameters , *beast might converge more quickly on each bin, produce more accurate gene trees, and result in more accurate species trees. empirical performance therefore might be improved, even if the basis for the guarantee of statistical consistency  was weakened by non-random binning.

because mp-est is extremely fast , the running time is largely a function of the requirement to run *beast on each bin. these *beast analyses of different bins are entirely independent, and so can be run in parallel; hence, bbca is very scalable, and is likely to exhibit near-linear scalability with the number of processors. for example, a dataset with  <dig> loci could be analyzed using  <dig> processors, each running *beast on  <dig> loci, and the results could then be combined in minutes using mp-est. thus, bbca enables *beast, a sophisticated bayesian method for co-estimating the species tree and gene trees under the multi-species coalescent model, to be used on genome-scale datasets.

finally, bbca addresses computational limitations to small numbers of genes, but does not address the limit of *beast to small numbers of species . thus, one of the outstanding problems is how to improve *beast's scalability so that it can analyze datasets with  <dig> or  <dig> species in reasonable timeframes. divide-and-conquer strategies are a possibility for improving the scalability of phylogenomic analyses from multiple markers, and have been studied in the context of mp-est  <cit>  and shown to maintain or improve accuracy.

CONCLUSIONS
*beast is one of the few fully-parametric methods that is used in biological dataset analyses to provide a coalescent-based species tree estimation  <cit> . however, *beast is computationally too intensive for most users to run it successfully on datasets with  <dig> or more loci. for this reason, *beast and other co-estimation methods have been considered inapplicable to phylogenomic datasets, where hundreds to thousands of loci are sampled from throughout the genome  <cit> , and most biological datasets  are analyzed instead using summary methods. yet, some biologists find summary methods unsatisfying compared to *beast and other fully parametric methods, resulting in dissatisfaction with existing coalescent-based methods  <cit> .

bbca was designed to address the computational challenge in using *beast on datasets with many loci. the design is very simple: random partitioning of the genes into small bins , running *beast on each bin to estimate gene trees, and then estimating the species tree from the gene trees using mp-est. furthermore, although we only explored performance on two model conditions and only for a small number of ways of running bbca, this study showed that bbca analyses produced highly accurate species trees that matched or improved on the accuracy of much longer *beast analyses. by design, bbca can be run on very large number of genes, and thus improves the scalability of *beast.

