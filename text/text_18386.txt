BACKGROUND
multiple sequence alignment  plays a central role in nearly all bioinformatics and molecular evolutionary applications. be it to discover sequence structure and motifs or to infer the evolutionary history among sequences , the first step is to compare the sequences by building msas. the process of building an msa is to infer homologous positions between the input sequences and place gaps in the sequence in order to align these homologous positions. these gaps represent evolutionary events of their own. gaps  are caused by either insertions or deletions of characters  on a particular lineage of sequences during the evolution. in this sense, building an msa is to reconstruct the evolutionary history of the sequences involved.

due to its significant impact on many bioinformatics and molecular evolutionary analyses, msa reconstruction is one of the most heavily scrutinized bioinformatics fields. numerous msa reconstruction methods have been developed  <cit> . assessment of msas, however, is usually reserved for power users. often regular users simply run one msa method and proceed directly to the next analysis without examining the alignment output. considering the importance of msas, it is desirable if quality assessment of msa methods can be performed more easily and more intuitively by all researchers who are interested in sequence analysis. there are a number of programs available that generate, display, and/or let users analyze msas such as seaview  <cit> , clustalx <dig>  <cit> , se-al  <cit> , jalview  <cit> , webprank  <cit> , as well as mega  <cit> . however, none of these programs allows the user to make direct comparisons between two or more msas. sinicview  <cit>  can visualize multiple msas. its use, however, is targeted for genome-scale nucleotide alignments, and position-by-position comparison among msas is not possible. as morrison  <cit>  also pointed out, visual inspection of multiple msas would greatly help improve the quality of msas and consequently the reconstruction of phylogenies.

effective evaluation of msa methods requires reference alignments. these are the msas that are considered to represent the evolutionary history of the sequences most accurately. the majority of currently available benchmark msa datasets are based on structural alignments of real sequences  where the actual evolutionary history is unknown. researchers, especially those very familiar with their sequences, often adjust msas manually. this introduces several issues. there is no "standard" way to adjust/improve an alignment. it is very time consuming and alignments often cannot be fully resolved. a solution to these issues is offered by hillis  <cit> . he pointed to sequence evolution simulation as an alternative method to obtain reference msas and analyze msa algorithms. sequence evolution simulation methods generate a set of related nucleotide or amino acid sequences with a known evolutionary history, i.e., providing a fully-resolved msa. the datasets generated by simulation, with various evolutionary parameter settings, are also useful for evaluating the robustness, consistency, and efficiency of phylogenetic reconstruction based on different msa methods. the disadvantage of using simulated sequences, however, is that the events during the simulated evolution are limited by the evolutionary models available in the simulators. one must thus choose an appropriate simulator that can mimic the evolutionary history of the gene or protein sequences he/she is interested in.

many molecular evolution simulation programs are currently available: e.g., indelible  <cit> , rose  <cit> , dawg  <cit> , myssp  <cit> , simprot  <cit> , evolveagene <dig>  <cit> , and indel-seq-gen version  <dig>    <cit> . rose  <cit>  has been used to generate irmbase  <dig> and dirmbase benchmark alignment datasets  <cit> . all of these programs require several input files and run on the command line. one exception is myssp, which is run from a simple graphical user interface . of the available simulation programs, isgv <dig>  is the most versatile and complex. it allows for subsequences or sites to evolve with less stringent assumptions, i.e., relaxing the assumption of the independent-and-identically-distributed sequence sites, which is prevalent in the field of molecular evolution simulation. isgv <dig>  thus can generate more realistic protein and gene families  <cit> . such complex and more realistic simulation, however, requires detailed input files and numerous options with the command line.

we introduce suitemsa, a suite of graphical tools for msa comparison that also encapsulates the sequence evolution simulation program, isgv <dig> . suitemsa offers tools that allow for the direct comparison of multiple msas. these tools assist researchers to visually pinpoint the areas where alternative msas are inconsistent with a reference msa, which can be either an msa obtained from a benchmark msa database, a manually curated msa, or a true msa based on simulated sequences. statistics to aid the quantitative comparisons of msas are provided. suitemsa also allows users of any level to perform simulation of biological sequence evolution. with intuitive option panels users can quickly set up an evolutionary model for simulation. after the simulation, suitemsa displays and maps indel events to the true msa and also to the simulation guide tree. this immediate feedback is useful in inspecting the simulated datasets, allowing the user to choose the set of simulation parameters that is best able to produce datasets with the desired features. providing sequence simulation as well as msa assessment capability is educational in understanding how various msa methods work differently when biological sequences have different evolutionary properties.

implementation
suitemsa is a java-based application that provides unique msa viewers . it can be used with any msa in fasta format. individual alignments may be viewed along with secondary structure  or transmembrane predictions. users can directly compare multiple msas and evaluate where the msas agree  or disagree  visually as well as quantitatively based on several statistics. suitemsa also allows visual inspection and editing of phylogenies. furthermore, it provides a gui for a sequence simulator, isgv <dig> . once communication is set up between suitemsa and isgv <dig> , parameters can be configured and simulations can be launched from suitemsa. a log tracks all simulations performed recording the information including parameters used, date and time stamps, error messages, and all communications with isgv <dig> . once the simulation is done, the true msa and phylogeny with indel events mapped can be displayed. note that msa viewers in suitemsa are independent of the simulation program and do not require the installation of isgv <dig> .

a case study: the lipocalin protein superfamily
we use multiple alignments and simulation of the lipocalin superfamily proteins as a case study to illustrate how the msa comparison and simulation can be done with suitemsa. lipocalin proteins are a family of small globular proteins often implicated in allergic reactions, among other functions. members of the lipocalin superfamily have low sequence identity, but share a common antiparallel beta-barrel conformation consisting of eight beta-strands, as well as a small highly-conserved motif near the first beta-strand  <cit> . we obtained both the manually-adjusted msa and phylogeny reconstructed from  <dig> members of the lipocalin superfamily from s√°nchez et al.  <cit> . strope et al.  <cit>  used the same example to introduce isgv <dig>  we will use this msa and guide tree in this case study. figure 2a shows this msa using the msa viewer along with the display of the secondary structures predicted by psipred  <cit>  for each sequence. the  <dig> lipocalin protein sequences, the alignment and phylogeny, and the predicted secondary structures are available in additional files  <dig>   <dig>   <dig>  and  <dig> 

msa comparison
suitemsa offers two unique tools to compare msas: msa comparator  and pixel plot . for both tools, msas are compared against the reference msa . the blue and green bars shown above msas in figures 2b and  <dig> are the "selection bar" for the reference msa and the "range bar" for the alternative msas, respectively. the selection bar indicates the selected region in the reference msa. the range bar for an alternative msa indicates the range covered by the characters selected in the reference msa. this makes the msa comparison easy, visually depicting the difference in alignment extension/compaction or gappiness.

the msa comparator allows the user to perform a fine-grained comparison between two alignments. figure 2b compares the reference msa of the lipocalin superfamily proteins  with the alignment reconstructed by clustalw <dig> v <dig>   <cit> . alignment positions under the selection and range bars are color-coded for consistency with respect to the reference msa. characters in consistently aligned columns are colored blue, and those in columns inconsistently aligned are colored red. in figure 2b, for example, the highly conserved area surrounding the position  <dig> of the reference alignment is consistent between the two msas and colored blue, whereas after the position  <dig> the msas are inconsistent and so colored in red. the column-wise sum-of-pairs score   <cit>  is also displayed using a bar chart in figure 2b, with maximum-height bars shown for consistent columns . the sps shows the degree of consistency per column between the two alignments. for detailed description of these measures see suitemsa user's manual.

the pixel plot allows for a quick comparison between multiple msas. as shown in figure  <dig>  each character in the msa is represented as a solid colored pixel and each gap as a blank pixel. in figure  <dig>  the reference alignment of the lipocalin superfamily proteins  is compared with the three msas reconstructed by clustalw <dig> v <dig>   <cit> , mafft v <dig>   <cit> , and muscle v <dig> . <dig>  <cit> . the selected characters for the reference alignment  under the blue selection bar and the corresponding characters for the reconstructed alignments  under the green range bars are colored in magenta. this is the same area as selected in figure 2b.

sequence simulation
simulating members of the lipocalin protein superfamily represents a challenge for many simulators because  due to the short length of the lipocalin proteins, each of the  <dig> subsequences  has a strict length constraint and  all members of the family must contain the conserved motif  near the first beta-strand. in this section, we set up options for isgv <dig>  for the lipocalin family simulation. the parameters were chosen by the following procedure:

‚Ä¢ the phylogeny reconstructed by s√°nchez et al.  <cit>  was used as the simulation guide tree.

‚Ä¢ the alignment presented in s√°nchez et al.  <cit>  was used as the root msa.

‚Ä¢ we analyzed s√°nchez et al.'s alignment using the prottest web server  <cit>  using the guide tree topology. the model that best fit the data was the wag substitution matrix  <cit>  with the gamma distribution . the amino acid frequencies as well as the branch lengths for the phylogeny were also estimated by prottest.

‚Ä¢ we estimated the indel parameters based on the reference alignment and guide tree using the lambda.pl program from the dawg package  <cit> . the geometric distribution with the average length of  <dig>  as the length distribution model and the indel probability of  <dig>  per substitution were returned. we assumed the maximum length of an indel to be  <dig> amino acids.

suitemsa makes setting up the isgv <dig>  simulation with all these options easily accessible through the gui. parameters and support files are organized into four panels based on their intuitive groupings: "basic parameters", "advanced parameters", "edit guide tree file", and "edit lineage file". figure 4a shows how we can set the basic simulation parameters including the input/output file names and substitution models. figure 4b shows the advanced simulation parameters including the alpha constant for the gamma distribution and amino acid frequencies.

the simulation guide tree must be provided in a guide tree file in newick format. the guide tree file also specifies other parameters including indel parameters. these additional parameters can be set in the "edit guide tree file" panel . suitemsa also allows the input guide tree to be modified using a graphic tree editor . editing the guide tree graphically, such as changing the taxon labels, adding clade names, changing branch lengths, adding/deleting taxa, or rotating clades, provides immediate feedback ensuring the accuracy of the changes made.

in the "edit lineage file" panel, lineages  can be added or deleted, and lineage specifications can be edited. in the panel shown in figure 7a, we can edit or add motif specifications through a regular expression generator. figure 7b illustrates a special use of this regular expression generator to specify the subsequence-length "template". the example includes constraints for  <dig> subsequences. see strope et al.  <cit>  for the details of the use of templates. all support files used for this example simulation are available in additional files  <dig>   <dig>   <dig>  and  <dig> 

prior to running a simulation, suitemsa provides error-checking for potential parameter conflicts. the actual command line used to run isgv <dig>  with all necessary options is shown at the top of the isg simulator window as illustrated in figure  <dig>  the simulation log file saves the parameters used along with any messages from isgv <dig> . this log can also be useful for retrieving the saved isgv <dig>  command-line for a later use.

after a simulation is done, insertion and deletion events can be tracked on the guide tree using the phylogeny viewer  and in the true msa using the alignment viewer . in these viewers, insertion and deletion events are shown in different colors: insertion events in green and deletion events in yellow. in the alignment viewer, where an insertion and a deletion event occur in the same location, the site is shown in pink . these viewers can display any phylogeny and msa in the appropriate format . note, however, that indel-event mapping is only available when phylogenies or msas are associated with isgv <dig>  simulation. figure 8c illustrates the use of the pixel plot, which displays a wider region of the same alignment with the blue selection bar indicating the positions  <dig> -  <dig> 

graphical interface for msa methods
to assist comparative studies of msas, suitemsa offers guis for some msa programs . to use this function, the appropriate msa programs need to be installed. once installed, the msa programs can be run and the resulted alignment viewed through suitemsa. currently, guis for clustalw <dig>  <cit>  and muscle  <cit>  are available. we plan to expand our support for other commonly used msa methods  in the future.

RESULTS
as we described before, the performance of msa methods can be examined against a reference msa. a reference msa can be obtained from a benchmark msa database or by manually-adjusting any msa relying on our own experience and knowledge on the sequences of our interests. or we can use a sequence simulator that generates a "true" msa based on the given evolutionary model. in the previous section, we used the lipocalin superfamily proteins as a case study, and showed how we can simulate members of such a complex protein family. simulated protein sequences were aligned using different msa methods. in this section, as a further example, we will briefly discuss how these reconstructed msas are compared with the "true" msa obtained from the simulation as well as the manually adjusted alignment produced by s√°nchez et al.  <cit> .

in figure 2b, s√°nchez et al.'s alignment of lipocalin proteins is used as the reference alignment  and compared with the alignment reconstructed by clustalw <dig>  in this alignment, the area containing the prosite motif  is mostly colored blue showing a high degree of consistency. note that the first five positions of the motif are not consistent  due to the gaps inserted in the clustalw <dig> msa. the entire motif region, however, maintains high sps values. however, the characters in the positions  <dig> through  <dig> in the reference alignment are scattered over  <dig> columns in the clustalw <dig> msa and colored in red, with  <dig> or very low sps values. we expanded the comparison and included msas reconstructed by muscle and mafft using the pixel plot. as shown in figure  <dig>  the three methods show their msas  consistent with the reference msa  at the left edge of the conserved motif region, indicated by the nearly straight edge marked in magenta in all alignments. however, there is a high degree of inconsistency in the downstream section between the reference alignment and reconstructed msas and even among the three reconstructed msas.

comparison against the true alignment based on simulated lipocalin protein sequences showed the same pattern : a high degree of consistency in the area where the prosite motif is located  and a high degree of inconsistency on the right-hand side of this area. in this reference alignment, we see many indel events immediately preceding the prosite motif . as figures 8b and 8c show, this area includes several insertions followed by deletions at the same sites, resulting in gap-only columns in the reference alignment . as shown in figure 10b, this area  has been compressed into  <dig> columns in all three reconstructed msas . while many indel events are found in the region following the prosite motif  in the reference alignment, this region is again compressed in all three reconstructed msas, although less so in the mafft msa. regardless of the lengths and gappiness, this area has been poorly reconstructed by the three msa programs. as a consequence of compressed alignments, the three reconstructed msas are much shorter than the reference msa . l√∂ytynoja and goldman  <cit>  pointed out that progressive alignment algorithms, used in all of clustalw <dig>  muscle, and mafft, tend to produce compacted alignments due to "collapsed insertion" and "gap magnet" problems. the results shown in figure 10b indicate that such compaction is particularly pronounced in clustalw <dig> and muscle msas. further investigation is clearly necessary in order to choose better msas.

CONCLUSIONS
suitemsa provides unique msa viewers, which allow researchers to quickly identify inconsistencies among msas reconstructed by different techniques. it assists in performance evaluation of msa methods. suitemsa also allows users to perform sequence simulation. this further assists comparative analysis of msas based on the "true" reference alignment where insertion and deletion events can be mapped individually onto both the guide tree and the true msa. suitemsa's intuitive and user friendly gui allows for a quick learning curve in using the powerful simulation program isgv <dig> . this provides an opportunity to a wide range of researchers for setting up complex simulation studies quickly and accurately. with the msa viewer, msa comparator, pixel plot, as well as a graphical sequence simulator, the phylogeny viewer with graphical editing options, and the alignment viewer with indel-event tracking, suitemsa contributes a wide variety of unique features to the field of multiple sequence alignment, sequence evolution simulation, and more general bioinformatics research.

availability and requirements
‚Ä¢ project name: suitemsa

‚Ä¢ project home page: http://bioinfolab.unl.edu/~canderson/suitemsa/

‚Ä¢ operating system: mac os x  <dig>  or higher, linux, and unix

‚Ä¢ programming language: java  <dig> 

‚Ä¢ other requirements: isgv <dig>  must be installed per instructions for sequence simulation. clustalw <dig> and muscle need to be installed if the user wish to use the guis provided with suitemsa.

‚Ä¢ license: none

‚Ä¢ any restrictions to use by non-academics: none

authors' contributions
cla implemented suitemsa and wrote the manuscript. cla, cls, and enm conceived the project, discussed the results, and revised the manuscript. all authors have read and approved final manuscript.

supplementary material
additional file 1
 <dig> lipocalin protein sequences. the  <dig> lipocalin protein sequences obtained from s√°nchez et al.  <cit>  are included in fasta format.

click here for file

 additional file 2
the reference alignment of  <dig> lipocalin proteins. the alignment of the  <dig> lipocalin protein sequences obtained from s√°nchez et al.  <cit>  is included in fasta format.

click here for file

 additional file 3
the phylogenetic tree of  <dig> lipocalin proteins. the phylogenetic tree of the  <dig> lipocalin protein sequences obtained from s√°nchez et al.  <cit>  is included in newick format.

click here for file

 additional file 4
secondary structure predictions for  <dig> lipocalin proteins. the secondary structures for the  <dig> lipocalin proteins predicted by psipred are provided in fasta format.

click here for file

 additional file 5
the guide tree file. file name: lipocalinsuperfamily.tree. this file contains the guide tree along with other parameters used for the isgv <dig>  simulation of the lipocalin superfamily proteins. in addition to this file, additional files 6- <dig> are used for the simulation. a brief instruction for setting up suitemsa using these files and running the simulation as described in the case study is included in the suitemsa package distribution.

click here for file

 additional file 6
the simulation root msa. file name: lipocalinsuperfamily_template.maroot. this file contains the multiple sequence alignment along with the patterns for the motif and template used for the lipocalin superfamily simulation.

click here for file

 additional file 7
the lineage specification file. file name: lipocalinsuperfamily.spec. this file contains the motif specifications for lineages used for the lipocalin superfamily simulation.

click here for file

 additional file 8
the indel-length distribution file. file name: lipocalin.idlen. this file contains the indel-length distribution used for the lipocalin superfamily simulation.

click here for file

 acknowledgements
development of suitemsa has been partially supported by nsf atol grant  <dig> to enm.
