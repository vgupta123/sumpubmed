BACKGROUND
the ordering and strandedness of genes on each chromosome of many organisms are now available, with many more to be added in the near future. using this information, one can represent a genome as a collection of chromosomes, each of which is a linear or circular sequence of gene identifiers. variations in the placement of the same genes, as well as variation in gene content and multiplicity, among organisms can then be analyzed. this data is of great interest to evolutionary biologists , but also to comparative genomicists  and to any researcher interested in understanding evolutionary changes in pathogens. even when the data are restricted to singleton gene families , the resulting gene-order data have proved very useful in the analysis of small genomes  and in comparative genomics. in the past ten years, there has been a large increase in work done on analyzing such data, gene-order data in particular . evolutionary biologists have sought to exploit the advantages of gene-order data , but have had to contend with the high computational complexity of working with such data.

of particular interest in a phylogenetic context is the problem of finding the median of three genomes, that is, finding a fourth genome that minimizes the sum of the pairwise distances between it and the three given genomes  <cit> . this problem, while being fairly easy for aligned sequence data, is np-hard for gene-order data  <cit> . since phylogenetic reconstruction based on reconstructing ancestral states may need to compute such medians repeatedly, fast approximations or heuristics are usually needed, although exact methods have done well for small genomes   <cit> . one such heuristic, implemented in the popular software mgr  <cit> , attempts to find a longest sequence of inversions from one of the three given genomes that, at each step in the sequence, moves closer to the other two genomes. however, nothing is known about the theoretical behavior of this heuristic and no systematic experimental investigation of its usefulness has been conducted. experimental evidence indicates that it leads to worse trees than an optimal median-solver  <cit> , at least on small genomes, perhaps because the mgr search is limited to a small subset of possible paths. recently, arndt and tang  <cit>  provided significant improvement on this heuristic by considering sets of commuting inversions, that is, inversions that can be arbitrarily reordered among themselves without affecting the end result; using a somewhat different framework, bernt et al.  <cit>  proposed an approach that is also based on such inversions.

in this paper, we show that finding maximum cardinality sets of commuting inversions is equivalent to finding maximum independent sets on circle graphs and so can be done in low polynomial time–we give a simple algorithm for this purpose. we also shed light on the relationship between maximal sets of noninterfering inversions and independent sets on circle graphs. we further classify sets of commuting inversions into interfering and noninterfering inversions, where noninterfering inversions are commuting inversions that also make maximal progress , and introduce the notion of an inversion signature, which captures the unique rearrangements common to all sorting paths. finally, we characterize the relationship of sets of noninterfering inversions to signatures and that of signatures to inversion medians.

for most of the paper, we show how to analyze single permutations in terms of commuting and noninterfering inversions; in later sections, we show how to extend the analysis to multiple permutations.

commuting and noninterfering inversions
an inversion ρ transforms permutation π = π <dig> ⋯ πi-1πi⋯πj-1πjπj+1⋯πn into permutation π' = π1⋯πi-1πjπj-1⋯πn. thus, the inversion distance problem between π and τ refers to finding a minimum series of inversions ρ <dig>  ρ <dig> ⋯, ρt so that π·ρ1·ρ2⋯ρt = τ. because any series of inversions that sorts permutation τ <dig> to some permutation τ <dig> will also sort τ1τ2− <dig> to the identity  <dig>  <dig>  <dig>  <dig> ⋯ n, we often only consider one permutation π = τ1τ2− <dig> and call d = t the inversion distance. hannenhalli and pevzner  <cit>  showed how to use a graph representation of the two permutations, henceforth referred to as the hp-graph. an element πi is represented by vertices πi− and πi+, where πi− is to the left of πi+ if and only if πi is positive, and the permutation is bracketed by l+ on the left and r- on the right. reality edges represent current adjacencies and so connect vertices from adjacent elements, while desire edges represent adjacencies for the sorted permutation  and so connect πi+ to πi+1−. every vertex has degree two so that every vertex is part of a cycle; cycles that overlap when embedding on a line, with all desire edges on the same side of the line, are part of a component. each reality edge on a cycle has a relative direction imposed by a tour of the cycle, carried out by noting in which direction the edges are traversed relative to the embedding. in figure  <dig>  edges  and  share a direction while all the others are of the opposite direction.

we say that inversion ρ acts upon a reality edge e if e is either the ith or st reality edge from the left; similarly, we say that inversion ρ acts upon a desire edge e if e is incident on the rightmost vertex of the ith reality edge or on the leftmost vertex of the st reality edge. in our example, the inversion over substring "- <dig> - <dig> - <dig>  <dig> -3" ) acts upon reality edges  and . it acts upon desire edges  and  and so affects vertices 6+ and 3-. an oriented inversion acts upon reality edges from the same cycle of opposite direction. a component is oriented iff it has an oriented inversion that acts upon it, otherwise it is unoriented. a permutation that has at least one unoriented cycle has at least one hurdle, indicating that at least one additional inversion will be needed. see  <cit>  for a more complete description.

oriented inversions are of particular interest because, in the absence of hurdles, they are the only inversions that move π one inversion closer to the identity. a set of oriented inversions on a permutation π commutes iff the application of its inversions, in any order, yields the same final permutation.

definition  <dig>  a set of m inversions on π  is noninterfering if and only if

 <dig>  the set is commuting; and

 <dig>  applying these inversions in any order moves π closer to τ by m inversions.

example  <dig>  for π = - <dig> - <dig> - <dig>  <dig> - <dig> - <dig> a maximum cardinality set of commuting inversions is {ρ, ρ, ρ, ρ, ρ, ρ, ρ} while a maximum cardinality set of noninterfering inversions is {ρ, ρ, ρ, ρ}.

inversion graphs and inversion signatures
a sorting path is a shortest sequence of oriented inversions on π with respect to some τ. the inversion graph is the graph of all sorting paths between π and τ; the permutations are vertices and edges link permutations that are one inversion away from each other.

definition  <dig>  the intersection of all inversion graphs from a set of permutations p to permutation τ is the inversion signature subgraph and any vertex  in this subgraph is an inversion signature.

a signature is maximal if there exists no neighbor to it in the signature subgraph that is farther from τ; a maximal signature that is as far from τ as any other is called a maximum signature.

example  <dig>  in figure  <dig> we have p = { <dig> - <dig> - <dig>  - <dig>  <dig>  <dig> } and τ =  <dig>  <dig>  <dig> . the inversion signature subgraph is outlined in bold. the signatures in this case are - <dig> - <dig> - <dig>  - <dig> - <dig>  <dig>   <dig>  <dig> - <dig>  and the trivial signature τ =  <dig>  <dig>  <dig>  the only maximum signature is also the only maximal signature - <dig> - <dig> - <dig> 

a set of noninterfering inversions of size m constitutes a subgraph of the signature subgraph of size ∑i=0m=2m. siepel et al.  <cit>  showed that a median for any signature between τ and p is also a median for τ and p.

circle graphs and permutation graphs
consider drawing a set of chords with each endpoint of the chord on the same circle. the circle graph represents the intersection of these chords where each vertex corresponds to a chord and each edge corresponds to intersecting chords  <cit> . for a permutation we can define a permutation graph as follows. each vertex is an element of the permutation and an edge  exists iff v > u and v appears to the left of u in the permutation  <cit> . clearly, any permutation graph is a circle graph.

methods
maximum sets of commuting inversions
we now show how to find a maximum cardinality set of commuting inversions efficiently–omitting most proofs due to space limitations. we can interpret the indices of an inversion to be indices of an interval on a line. two intervals are said to overlap if they share more than one point and neither is contained within the other.

lemma  <dig>  a set c of inversions commutes if and only if no two inversions from c overlap.

proof. assume the pair a, b ∈ c overlaps. fix an ordering of all inversions from c so that b is the last inversion and it immediately follows a. for this ordering the rightmost element of a will end up to the left of the leftmost element of a. now take an ordering identical to the previous one but with a following b; this yields a contradiction because the rightmost element of a is right of the leftmost element of a. the other direction is trivial.   □

we have a set of intervals that, when projected onto a circle, yields a chord model of a circle graph  <cit> ;

theorem  <dig>  a maximum cardinality set of commuting inversions can be found in o steps.

maximum sets of noninterfering inversions
finding a set of noninterfering inversions is more demanding than finding a set of commuting inversions, but we can also use maximum independent sets in the circle graph–except that now we need to use the union of two circle graphs.

a set of noninterfering inversions is also a set of commuting inversions; but additional constraints must be introduced to ensure that the selected set of commuting inversions also sort the permutation. we now proceed to develop the theoretical background to represent these additional constraints by another circle graph, beginning with single-cycle components of the hp-graph and then extending the characterization to general components.

single cycle components
one important property of commuting inversions is that the application of one inversion cannot alter the orientation of an inversion with which it commutes.

lemma  <dig>  given commuting oriented inversions ρ and σ , the application of ρ will either make σ span two different cycles or leave σ oriented.

proof. call r and s the reality edges acted upon by σ. at least one of r or s remains intact after the application of ρ, say r. at least one of the vertices incident to s must remain intact, say v. there is a path p from v to some u incident to r that does not include r. the adjacencies of v and u are not affected by ρ; moreover, because σ is oriented, if v is on some side of s then u is on the same side of r. but ρ can only remove a subpath of the cycle when creating another cycle. because ρ and σ commute, u and v will remain on the same sides of their respective reality edges, thus leaving the inversion σ oriented.   □

each oriented inversion will split the cycle by swapping the affected vertices of the desire edges acted upon. thus, when we embed the cycle on a circle, we can represent the action of an inversion as a chord with its endpoints on those desire edges. for two inversions that intersect and act upon a disjoint set of desire edges, we know that applying one of them will put the reality edges acted upon by the other on different cycles; so in this case intersecting chords represent inversions that interfere.

finding the interactions between inversions that share a reality edge is harder. consider the set of inversions that share a reality edge as an endpoint and share the same desire edge; for example, the set of inversions that share reality edge  is {ρ, ρ, ρ, ρ, ρ}, which can be partitioned into inversions that share  {ρ, ρ} and those that share  {ρ, ρ, ρ}. let us order such a set i in two ways. the ordering α: i ↦ ℕ numbers inversions from shortest to longest. there exists a vertex v that is affected by every inversion in the set ; our second ordering β: i ↦ ℕ numbers inversions by the order in which we visit the other  endpoint, starting at the common reality edge and proceeding through v.

lemma  <dig>  given inversions i, j ∈ i, i interferes with j iff we have α > α  and β  <β .

in other words, an inversion interferes with all shorter inversions that appear after it on the cycle.

proof. v is the shared vertex that is affected by all inversions in i. for an inversion i ∈ i and any j ∈ {k||k ∈ i\{i } and α  > α } with endpoints v and u respectively, i interferes with j iff u ends up on a different cycle than v after applying i. if we follow the cycle in the same order used to build β, the reality edges we visit before encountering u are those that remain on the cycle with v when it is attached by the new reality edge. so those inversions that act upon such reality edges remain oriented and they are exactly those j that have β  <β . the others will respect β  <β .   □

example  <dig>  figure  <dig> shows the graph from figure  <dig> embedded on a circle. α imposes the ordering on all inversions that share desire edge  so that α ) <α ) <α ) <α ) <α ). we also have β ) <β ) <β ) <β ) <β ). so for  we have α ) > α ) > α ), as well as β ) <β ) <β ), which tells us that ρ interferes with ρ and ρ. further, α ) <α ) and β ) > β ) shows that ρ interferes with ρ. figure  <dig> shows the result of applying inversion ρ on the graph.

corollary  <dig>  the interference relationship between all inversions that act on the same desire edge can be represented by a permutation graph.

theorem  <dig>  gs can be represented by a circle graph.

proof. if two inversions both act on a reality edge, then apply corollary  <dig>  otherwise, embed the cycle on a circle and notice that the effect of an inversion is to split the circle . a chord model representing the interference between two inversions that do not share a reality edge is obtained by drawing a chord for each inversion between the reality edges it acts upon.   □

the union of two circle graphs, however, need not yield a circle graph. to handle this issue, we decompose the instance into computationally easy and hard subinstances by using the first of two phases from the polynomial-time circle graph recognition algorithm of bouchet  <cit> . this first phase repeatedly decomposes the graph by join decomposition; it finds a complete bipartite decomposition, call it v1c ⊆ v <dig> and v2c ⊆ v <dig>  then replaces it by the two graphs induced by taking only vertices in v <dig> and v <dig>  and adding a marker vertex to each graph connected to only v1c and v2c respectively. if such a decomposition does not exist, the subgraph at hand is said to be prime. in the second phase, a chord model is found for each prime subgraph. if every prime subgraph yields a chord model, then we can apply the quadratic-time algorithm of valiente  <cit>  to find the maximum independent set of the circle graph and we are done. if only some subgraphs yield a chord model, we can handle those independently with the same algorithm. thus the computationally hard subgraphs are those prime subgraphs that do not yield a chord model; it is on these subgraphs that we are forced to run a general algorithm for maximum independent set.

in our setting, the sets v1a, v1b, and v1c  may not actually yield chord models, but the representation of figure  <dig> shows how the independent sets of such a decomposition interact with each other.

when composing solutions of independent sets on hard subgraphs, solutions we denote by mis, we must consider two possibilities:  vertices from v1c and v2c are used for mis and mis respectively; or  vertices from neither or only one of the two are used. in the later case vertices from both independent sets will be in the independent set for gs ∩ gc. in the former case we can use the vertices from v1c or from v2c but not both, so we recursively test mis + mis and mis + mis and use the larger of the two as the score for the subproblem.

multiple cycle instances
we now show how to transform a multiple cycle component into a single cycle while appropriately ignoring inversions that are created by the process.

hannenhalli and pevzner  <cit>  introduced the notion of a -split where a cycle of length six or larger is split by adding two vertices so as to preserve at least one minimum sorting path. such a change in the graph can be represented in the corresponding permutation by a remapping of some vertex labels, a process called a -padding. here we introduce the inverse operation to the split, the -join, which takes two cycles and joins them so as to preserve all sorting paths, along with an inverse analog to the padding, the -shrink. a -join removes the vertices x- and x+  for some permutation element x along with reality edges  and  and desire edges  and . the edges r =  and d =  are then added to form a valid hp-graph Ǧ. it is easy to verify that a -join operation is equivalent to a -shrink which acts by removing the element x and renaming all other elements with magnitude i > x to have magnitude i -  <dig> with the same sign. hence we have g = Ǧ.

lemma  <dig>  apply to permutation π a -shrink by removing an element x  to obtain πˇ. the inversion graph for π is a subgraph of the inversion graph for πˇand d  equals d.

proof. the length of the permutation decreases by one but so does the number of cycles, therefore we have d = d. we now show that the -join of cycles c <dig> and c <dig> turning g to Ǧ will preserve the relative direction between edges. fix a direction on the cycle with reality edge  by visiting r <dig> before x- followed by d <dig>  similarly, fix a direction on the cycle with edge  by visiting d <dig> before x+ followed by r <dig>  thus, after the application of the -join the remaining reality edge r can be visited from r <dig> to r <dig> in a tour continuing to d <dig> and d <dig> from desire edge d. since the direction for the new edges is consistent with the direction of the removed edges, the direction of r to reality edges in c <dig> and c <dig> is also consistent. so any inversion that acts on edges  or  for a sorting path on π will now act on r for a sorting path on πˇ. since  and  are on different cycles of g, there can be no oriented inversions done that act on both at the same time.   □

an important corollary is that all oriented inversions on π will be preserved. thus, we can shrink a multiple cycle component to an "equivalent" cycle and then run the algorithm while ignoring oriented inversions introduced by the shrinking process.

handling multiple permutations
when improving the mgr heuristic for medians or implementing a greedy heuristic for maximum signature computation, one needs to consider sets of inversions that occur in multiple permutations. this is done by simply ignoring intervals that do not occur as oriented inversions in all permutations, while merging the constraints on the remainder of the permutations. that is, to find the maximum independent set of commuting or noninterfering inversions on many permutations, take the intersection of the sets of oriented inversions over all permutations and run our algorithm on the union of the remaining constraints.

two notes on hurdles
hurdles complicate our analysis in two places. first, while inversions that are unsafe on their own are easily identified and thus removed from consideration before running our algorithm, it is possible that a set of noninterfering inversions, each of which is safe by itself, can collude to create a hurdle. we can check for this problem, but the time requirements immediately increase as a result.

second, a permutation that already contains many hurdles automatically yields a large  number of sorting paths, since hurdles can be merged two by two in almost every possible way . each combination of hurdle merges yields a new set of oriented inversions, but it is not clear whether an exponential search of these combinations is necessary. fortunately, hurdles are very rare in practice   <cit> .

a new median solver
we improved the mgr heuristic using maximum independent sets of noninterfering inversions. given three genomes g <dig>  g <dig> and g <dig>  we define the median score of a genome g to be d + d + d, where d is the distance between genome g and gi. to find the genome that minimizes the median score, the new median solver chooses the maximum independent set of inversions which brings g <dig> closer to both g <dig> and g <dig>  the algorithm will then iteratively compute maximum independent sets of inversions in the three genomes until the maximum sets are empty. at the end of this procedure, the three given genomes are transformed to three  new genomes and we report the one with the lowest median score as the resulting median.

RESULTS
to assess the speed and accuracy of our new solver, we tested it using the same datasets used by arndt and tang  <cit> . these datasets were generated by assigning the identity permutation to the internal node and three leaves were created by applying rearrangement events along each edge. the number of events on each edge is a function of the total number of evolutionary events and of the tree shape. the total number of events used was in the range of  <dig> to  <dig> and three tree shapes were used: trees with edges of almost equal length; trees with one edge about twice longer than the other two; and trees with one edge about three times longer than the other two. we compared the new method to caprara's median solver , to mgr, and to the solver of arndt and tang. for each combination of parameters, ten trees were generated and the average results are reported.

CONCLUSIONS
we presented two new algorithms: a quadratic-time algorithm to compute a maximum set of commuting inversions and a more complex algorithm to compute a maximum set of noninterfering inversions. the latter algorithm can also run in quadratic time by using the circle graph recognition of spinrad  <cit> –and the conditions under which this algorithm can be used are detectable in low polynomial time. when these conditions are not met, our algorithm decomposes the instance so that only certain subinstances require exponential work. it is worth noting that, due to the intersection step in our algorithm, the more genomes that are compared, the sparser the intersection will be and the faster the algorithm will run.

arndt and tang  <cit>  showed that an mgr-style search for medians can be improved through a better choice of inversions; our new median solver, using the algorithm for computing a maximum set of noninterfering inversions, further improves on these results, both in terms of accuracy and in terms of speed. we expect further research into the relationship between inversion medians, signatures, and noninterfering inversions will uncover much more structure that can be used to design yet faster algorithms, thereby providing a practical tool for the reconstruction of ancestral genomes.

competing interests
the authors declare that they have no competing interests.

authors' contributions
kms and bmem contributed to the development and implementation of the algorithms, and yt and jt were in charge of developing the new median solver and conducting simulations.

