BACKGROUND
the detection of genomic variation via sequencing of tumor dna from cancer patients has become a cornerstone of cancer research. more recently, sequencing-based patient stratification also entered clinical procedures in order to select the best treatment for a cancer patient, e.g. in melanoma  <cit> , colorectal cancer  <cit> , lung cancer  <cit>  and ovarian cancer  <cit> . particularly in cases where drug administration depends on the presence or absence of specific genomic variants, it is essential to have robust and sensitive bioinformatics pipelines for variant detection.

however, the computational analysis of sequencing data is challenging. germline mutations have been inherited from the parents and therefore occur at a frequency of 50% or 100% in virtually every cell. therefore, with sufficient coverage, germline mutations are relatively easy to detect. in contrast, tumors consist of several genetically distinct subclones, a phenomenon called intra-tumor heterogeneity  <cit> . therefore, somatic mutations acquired during cancer progression occur at variable frequencies. unfortunately, even very low-frequency variants may be critical for treatment outcome, because  it may be sufficient if a small portion of the cells promotes tumor growth, e.g. by producing a growth factor and  drug resistance mutations may already be present in small subclones that expand upon treatment. for instance, it has been shown that subclones can harbor driver mutations which are markers of poor prognosis  <cit> , and that some subclones are able to resist chemotherapy  <cit> . therefore, detecting even rare mutations is crucial for improving therapy.

to increase the power to detect low-frequency mutations in protein-coding genes, the whole exome sequencing  protocol was introduced  <cit> . the general idea is to enrich for dna fragments that hybridize to probes that cover a large set of known exons of protein-coding genes. in order to determine which genomic variants in protein-coding genes have been accumulated during cancer progression, a large number of studies adopt wes to sequence pairs of cancer and normal tissue, i.e., tissue from the tumor and from surrounding non-cancerous tissue from the same organ.

here, we compare a large range of bioinformatics tools for genomic variant detection for paired tumor-normal wes data. we carefully designed an evaluation framework based on simulated exome sequencing data derived from real data. while simulated data can never model all properties of real data, many sources of errors arise from the data processing steps prior to the variant calling, such as mapping and filtering, and can therefore be accurately modeled with simulated data.

the importance of improvements in the data processing pipelines has been highlighted in several studies and reviewed in  <cit> . li  <cit>  and roberts et al.  <cit>  called variants on a pair of biological and technical replicates, respectively. li could attribute all variants detected between these replicates, which are by definition false positives, to mapping artifacts. roberts et al. noted that many false positives found in this experiment had high scores. therefore, mapping artifacts may severely contaminate any wes analysis even when stringent filters are applied  <cit> . simulated data allows us to investigate mapping and alignment post-processing artifacts in detail with the goal to improve the development of wes analysis pipelines.


related work several recent surveys and reviews on variant calling pipelines have sought to evaluate the increasing number of variant callers, mostly addressing the problem of germline mutation calling . only few studies consider the specific challenges of paired tumor-normal variant calling in cancer, where mixed samples are analyzed. among those, some comparisons use real data and either solely analyze concordance between tools  <cit>  or evaluate predictions on relatively small sets of validated mutations . kim and colleagues  <cit>  benchmark four anonymous callers on cancer exome sequencing data in order to provide guidelines on how to compare variant callers. the authors analyze discrepancies and concordances between the callers. they assess different ways of validating the mutations, for example by re-sequencing a subset of the variant calls at higher depth. the authors conclude that it might be misleading to base the performance on a small set of validated mutations, since the number of false negatives could be underestimated, and the selection of which mutations were validated could be biased towards one caller. they suggest ranking the mutations according to the callers confidence scores in order to allow for a more comprehensive comparison with different precision cutoffs. finally, the authors mention that combining several variant callers is another interesting challenge which needs to be addressed. spencer et al.  <cit>  assess the performance of variant callers to detect low-frequency mutations by creating a mixture of dna from well-characterized cell lines. however, it is difficult to attribute discordances between tools  <cit>  to the specific sources of errors. alioto et al.  <cit>  compared the performance of different analysis pipelines for whole-genome cancer sequencing data. the set of ground truth mutations was generated using variants detected in the same matched tumor and normal sample, but at a higher coverage of approximately 300×. they report precision and recall of different analysis pipelines, however it is also difficult to determine the sources of false positive and false negative calls. the authors recommend optimizing the aligner/variant caller combination, and to combine several variant callers. furthermore, they propose additional comparison studies to also assess, for example, the effect of normal contamination and subclonality.

to address the aformentioned challenges, here we identify error sources in variant calling arising from the bioinformatics pipeline for read alignment and processing. we carefully designed a simulation study based on one diploid normal and eight diploid cancer genomes, where we introduced variants found in a real tumor-normal sample pair . this setup allows us to observe a large range of errors introduced during the various processing steps, and to evaluate the performance at different variant allele frequencies, coverages and contamination levels. we classified errors into different categories and could, in some instances, relate the appearance of certain types of errors to the statistical model of a variant caller. we also developed a new combination strategy to combine several mutation callers.

RESULTS
we compared the nine somatic variant calling programs deepsnv  <cit> , genome analysis toolkit  haplotypecaller  , gatk unifiedgenotyper  , jointsnvmix <dig>  <cit> , mutect  <cit> , samtools  <cit> , sinvict  <cit> , somaticsniper  <cit> , and varscan <dig>  <cit> . figure  <dig> illustrates the workflow for the comparison in a flowchart. a heterogeneous cancer sample was simulated based on a real renal cell carcinoma sample. the different tools were evaluated and analyzed in detail. first, the performance of all tools with default parameters was assessed as a function of variant allele frequency, coverage and normal contamination. subsequently, the most prevalent error sources for two different alignment settings were analyzed. furthermore, the performance of the tools was compared when applying two pipeline modifications. moreover, five tools were selected for further analysis of the effect of changing parameters. finally, two combination strategies for variant callers were evaluated, including our newly developed rank-combination, which is implemented in r and available at  <cit> . a detailed description of the pipeline and evaluation procedure can be found in the methods section, as well as in additional file 1: section b, and section c. in the following, we discuss general concepts of somatic variant calling. the statistical models of the tools are described in additional file 1: section d.
fig.  <dig> workflow of the comparison of the nine variant callers. a heterogeneous cancer sample is simulated based on a real renal cell carcinoma sample . two different alignment settings and eight different coverage and normal contamination levels are employed . the variant callers deepsnv, gatk hp, gatk ug, jointsnvmix <dig>  mutect, samtools, sinvict, somaticsniper and varscan <dig> are run on all bam files . the performance of the different tools is evaluated and analyzed in detail . the tools are also assessed when using various pipeline or parameter modifications as described in section “pipeline and parameter improvements”. a more detailed description of the pipeline and the evaluation procedure can be found in the methods section as well as in additional file 1: section b, and additional file 1: section c




statistical models for somatic variant calling
all variant callers considered here take as input dna-fragments  aligned to a reference genome. each discrepancy between the reference and the aligned read could in principle originate from a real change in the genome or from technical artifacts, including sequencing and alignment errors. since the mechanisms generating true genomic variants are complicated and vary substantially between tumors and cancer types, most somatic variant callers focus on modelling the error sources. the more accurate the different error sources are modeled, the easier it is to identify discrepancies that are unlikely to originate from these error sources and are therefore likely true genomic variants.

in cancer research, we are often interested in the changes between tumor and matched normal samples. the most common approach is to fit a statistical model to the data of both samples and then compute the likelihood. most sources of errors will be shared between the two samples and will therefore not give rise to significant changes. remaining artifacts are often difficult to distinguish from true somatic variants. to understand these difficulties, it is insightful to have a closer look at the different statistical models for variant calling. a detailed introduction of the statistical models of all considered variant callers can be found in additional file 1: section d. the commands that were used to run the callers in default mode are provided in additional file 1: section e.


sequencing data pipelines the outline of a typical wes data processing pipeline is as follows. sequencing platforms provide a so-called base quality for each position of a read, which quantifies the confidence that the called nucleotide at this position is correct. after the optional step of quality trimming, where positions of reads with low base quality are removed, reads are aligned to the genome with genomic aligners like bowtie <dig>  <cit>  or bwa  <cit> . afterwards, fragments that align to multiple locations  need to be resolved. the two most common strategies are:  deciding for the mapping with highest score  or  removing all mappings for a fragment as soon as there is more than one . choosing the “best” alignment is often arbitrary if the number of mismatches is identical. if we have decided to select one out of several alignments, the information of whether there were additional alignments and how close their score was to the best alignment should be reflected in the mapping quality score of the selected alignment. the more conservative strategy of selecting “unique” alignments is identical to “best” with a stringent cutoff on the mapping quality.

after running one or more variant callers on the pair of tumor and normal aligned reads, confidence cutoffs have to be defined depending on the requirements of the downstream analysis.

wes data simulation
a tumor sample is composed of several genetically distinct subclones  <cit> . in order to generate a realistic scenario for somatic variant calling of tumor samples with intra-tumor heterogeneity, we explicitly generated eight diploid simulated cancer genomes  and one diploid normal genome. variants detected in a wes tumor-normal sample pair of human clear cell renal cell carcinoma  were placed into these genomes using the software library seqan  <cit> . variants detected only in the normal sample were placed into the normal genome, equally likely as homozygous or heterozygous mutations. all cancer genomes inherit the normal variants. the cancer clones are related by a clonal ancestry tree, shown in additional file 1: figure a. variants detected only in the real tumor sample are randomly assigned to one of the nodes of the tree. all children of this node inherit the variant. a total of  <dig>  somatic and  <dig>  germline mutations found in the real ccrcc and its matched normal sample were put in the phylogenetic tree.

finally, reads are generated from the normal genome and the clones using the software library seqan  <cit>  and wessim  <cit> . the tumor sample was generated by mixing the reads from the clones and varying proportions of reads from the normal sample. the weighting of the clones was determined by drawing a dirichlet-distributed random vector.

it is important to note that the simulation includes snvs and indels, but no copy number variants  or aneuploidies. cnvs and aneuploidy also play important roles in tumor evolution. this study focuses on tools for somatic snv detection. the loss or gain of a part or even a whole chromosome in a subclone, would influence the variant allele frequency of a mutation. here, the whole spectrum of variant allele frequencies in the interval . to make the different predictions comparable, we selected the maximal number of variants from the top of the list for each caller, such that the false discovery rate is smaller than a fixed threshold. gatk hp, gatk ug, samtools as well as sinvict are tools, which report germline and somatic variants. both types may get a high variant quality score depending on the confidence of the call. since we are only interested in comparing the performance of somatic variant detection, we filtered out all variants from these four tools that are germline. to this end, we ran the callers separately on the tumor and the normal bam file, and removed all mutations that were found in the normal sample. the resulting filtered variant calls for the tumor sample should contain only somatic mutations. the details on how the sensitivities in fig. 2
a are displayed can be found in additional file 1: section g.
fig.  <dig> performance comparison of variant callers with default parameters. a sensitivity of variant callers as a function of the variant allele frequency. to make the predictions comparable we selected the largest set of variants from the top of the list of each caller such that the false discovery rate is still below α. we show plots for α equal to  <dig>  , and  <dig>  . if the tool has a very good precision, the two curves for the two α cutoffs are identical, as it is the case for mutect and varscan <dig>  the details on how the sensitivities are displayed can be found in additional file 1: section g. b area under precision recall curve as a function of the coverage. again the two cutoffs for the false discovery rate α= <dig> , and α= <dig>  are chosen . the coverages correspond to the five different levels  displayed in fig.  <dig> in step 5




we find substantial differences between the performance of the variant callers, in particular for the sensitivity of low-frequency variants, where deepsnv and jointsnvmix <dig> clearly show a better performance. for a fixed precision of 90% and for variants with frequencies in the interval , jointsnvmix <dig> already reaches a sensitivity of 30%, whereas all other tools but deepsnv, with 7%, are close to 0%. for the next highest interval of variant frequencies [ <dig> , <dig> ), deepsnv and jointsnvmix <dig> reach a sensitivity of 38% and 61%, respectively, while the other tools are all still below 9%.

as expected, the more stringent false discovery cutoff of 5% reduces the sensitivity for detection, and especially the low-frequency variants. the two curves for the two false discovery cutoffs of  <dig> and 10% fall together for varscan <dig>  because it has a high precision, where the entire set of variants has a precision of  <dig> %. mutect does not provide a continuous quality score, but it reports “pass” or “reject” for each variant. among the ones with the “pass” label, the precision is very high: it ranges between  <dig> −100%, depending on the coverage. however, it misses many variants, which is reflected in the low sensitivity. the output of sinvict does not contain a confidence score for ranking either. however, it does separate the predicted variants into six different lists, which correspond to filters with different stringency levels. hence, the predicted variants can be ranked according to which of the six lists they occur in. in this case, we had variants which were in the first four lists. variants in the fourth list not only passed the p-value cutoff, but also passed the minimum read depth filter, the strand-bias filter, as well as a filter checking the average position on the reads. level four had a very high precision of  <dig> %. the entire precision-recall curves for all tools can be found in additional file 1: figure b. the same performance estimates as displayed in fig. 2
a were generated when restricting the ground truth variant set to locations with a coverage of at least 25×, which is displayed in additional file 1: figure c.

next, we assessed how the performance of the variant callers depends on the coverage and the contamination of tumor samples with normal tissue. to this end, we generated eight different bam files with various coverage and contamination levels, as illustrated in fig.  <dig> step  <dig>  as performance measurement, we use the area under the precision-recall curve of the top predictions which satisfy a precision of at least 90% or 95%, respectively . for most tools, the performance rises substantially when increasing the median coverage from 25× to 106× . however, with a coverage of above 106× the performance of most tools saturates, or even decreases.

increasing the contamination with dna fragments from the non-cancer cells does lead to a decrease in performance, which can be explained by the expected loss of power . however, the decrease is relatively mild. variants that are present at higher frequencies are still detectable even with a high rate of normal contamination.

in order to obtain a measure of the variability of the results, 50% subsampling from step  <dig> in fig.  <dig> was repeated ten times, with subsequent variant calling and evaluation. additional file 1: figure e displays the area under precision recall curve  when restricting to a precision of at least  <dig> and 90%. the performance estimates of the tools are very stable.

analysis of error sources
we categorized high-confidence false positive predictions, defined as false positives that are in the variant set when restricting it to a precision of at least 95%  and high-frequency false negatives  into groups of likely error sources. these sets of false positive and false negative predictions are especially interesting to examine. the false positives that are high-confidence, i.e. highly ranked by the tool, are the ones that would likely remain after filtering according to the quality score or p-value. concerning the false negatives, it is clear that low-frequency variants are much more difficult to distinguish from sequencing and alignment artifacts. however, one would expect to detect the variants at higher frequencies. the analysis of these sets of false variant calls sheds light on how the pipeline could be improved.
fig.  <dig> categories of variant calling errors depending on the quality of the alignment. the top panel  shows the error categories for the high confidence false positives . the bottom panel  shows the error categories for the high-frequency false negatives . the left panel  displays the error sources when running default bowtie <dig> alignments, and the right panel  displays the error sources when running more sensitive alignments, which were performed with parameters —very-sensitive
-k  <dig>  and then choosing the primary alignment for each read with several alignments , i.e. the “best” option. the definition of the categories can be found in section “analysis of error sources”




we define the following error categories: if the coverage at the variant loci was less than 25× reads in the cancer sample, the category low coverage applies. the error source low quality signifies that the maximal mapping quality of a read supporting the variant was below  <dig>  the category variable region denotes that at least one indel or more than  <dig> snvs were within  <dig> bp distance of the variant. the class low support represents loci with sufficient coverage, but the reads that support the variant were not aligned. if there was a sequencing error in the normal sample, which gave the impression that the mutation is germline, the error source seq error in normal applies. the category low quality in normal signifies that, although the total coverage would be high enough, there were ambiguous alignments with low mapping quality in the normal sample resulting in a lack of power for variant calling. in the case where the coverage was less than 25× in the normal sample, the class low coverage in normal applies. the category in normal represents the case where the variant was introduced in the normal genome and is therefore a germline mutation. the error source alignment location denotes the variant was not reported as soon as the decision for multi-mappers was taken for the correct location instead of the “best”. if the correct location was not among the alignments the read was discarded. in the case that the coverage in the cancer sample was more than 200×, the variant is labelled high coverage. the category other applies for all variants which cannot be attributed to any of the above-mentioned error classes.

for each error source and each tool, the percentage of variants that fall into the respective error source is displayed in fig.  <dig>  the total number of false positives or false negatives is stated next to the name of the tool. since variants can fall into several categories, the precentages of the different error sources do not sum up to 100%. the category other however, is exclusive, since it contains all variants that did not fit into any of the specified error sources. also, the categories low support, as well as low quality in normal imply that there was sufficient coverage in the tumor or normal sample, respectively. therefore, variants in these categories cannot be classified at the same time as low coverage or low coverage in normal, respectively. as mentioned in the flowchart in fig.  <dig> step  <dig>  two different alignment settings were chosen: the default alignment and a more sensitive alignment, in which more runtime is invested into accurate alignments.

we observe that a substantial source of false positives and especially false negatives is low coverage and low coverage in normal. as described above, a variant is classified to reside in a variable region if there is an indel or more than  <dig> snvs within  <dig> bp distance. these multiple mismatches or gaps in a small region cause uncertainty in the alignment of reads resulting in false positive and false negative snv calls . we assess the effect of local realignment around indels in the next section.

in light of the fact that low coverage was a major error source, the coverage profile of the sample was computed in order to ensure that the overall coverage is of good quality. as shown in additional file 1: figure f, the coverage is very good. for instance,  <dig> % of the targeted regions is covered with 25× reads or more, and  <dig> % of the targeted regions is covered with 51× reads or more.

pertaining to the false positive calls, for most tools, many can be attributed to the category in normal. these are variants that are actually germline, and have been erroneously classified as somatic. an additional germline filter for the variants might improve the performance, which is assessed in the next section.

the direct comparison of the default and the more sensitive alignment reveals some effects that the alignment has on the false positives and negatives. overall, the sensitivity to detect variants increases slightly with the more sensitive alignment. for most tools, the number of true positives is increased, which in turn leads to a higher absolute number of false positives with the same precision cutoff of 95%. the error source alignment location is reduced for gatk hp, gatk ug, jointsnvmix <dig>  samtools, somaticsniper and varscan <dig> when using the more sensitive alignment. the proportion of variants falling into low quality rises for most tools for the more sensitive alignment, but it always remains below 3% . the total number of high-frequency false negatives is reduced for deepsnv, gatk ug, jointsnvmix <dig>  samtools, sinvict, and varscan <dig> 

when comparing the error profiles of false negative calls of the tools, it is evident that they are highly correlated. additional file 1: figure g displays the correlations of error profiles between the tools. more precisely, the minimum correlation between the error profiles of the false negative calls is  <dig> , between jointsnvmix <dig> and samtools, and the maximum correlation is  <dig> , between gatk ug and somaticsniper. concerning the false positive calls, the error profiles of the tools are more diverse. jointsnvmix <dig> and mutect even show a slightly negative correlation. overall, deepsnv and jointsnvmix <dig> seem to be the least correlated in their false positive error profile with any of the other tools.

pipeline and parameter improvements
in this section, we demonstrate the effect on the performance when applying changes to the pipeline or parameters of the tools. moreover, we assess two combination strategies for variant callers.


adressing error sources through pipeline modifications the analysis of error sources revealed that many snvs can be attributed to variable region, which indicates that the snv was in a region with indels or a cluster of snvs. the development team of gatk recommends to use the tool gatk-indelrealigner as an alignment post-processing step before the variant calling  <cit> . according to the instructions  <cit>  the tool minimizes the number of mismatches across all reads in regions around insertions and deletions . here, we assessed whether the gatk-indelrealigner impacts the performance of variant callers. we note that all predictions are almost identical in sensitivity and precision, except for samtools, which benefits greatly .
fig.  <dig> the effect of pipeline modifications, parameter changes, and combination strategies. we show the sensitivity for the prediction set with at least 90% precision. a performance when applying local realignment around indels or the binomial test as a germline filter. b performance of deepsnv, jointsnvmix <dig>  samtools, and varscan <dig> with different choices of parameters. additional file 1: figure h depicts the performance for all parameters that were assessed. c performance of rank-combinations and intersections of calls from several tools. from each tool, we took the best version. in particular, deepsnv and mutect with the binomial test as germline filter, samtools with option -c  <dig>  sinvict with –qscore-cutoff  <dig>  varscan <dig> with the parameter –min-var-freq  <dig> , as well as the default runs from gatk hp, gatk ug, jointsnvmix <dig>  and somaticsniper. d summary barplot displaying the performance of the three best rank-combinations as a comparison to each tool individually. if a tool parameter or pipeline change has been used in the rank-combinations, also the performance of the tool in default mode is shown. the y-axis measures the area under precision-recall curve when allowing a false discovery rate of up to 10% 




another prominent source of false positives is the category in normal, which indicates that the variant was actually germline and erroneously classified as somatic. here, we assess the effect of a post-variant-calling filter that refines the variant calls by filtering out mutations that could likely be germline mutations. more precisely, for each variant loci, the number of reads supporting the variant in the normal sample, as well as the total coverage in the normal sample are taken into account. assuming a sequencing error rate of at most  <dig> %, one can employ a binomial test to assess whether the observed number of variant reads is higher than expected for a sequencing error. if the p-value is below  <dig> , the variant could likely be a germline mutation and is filtered out. figure 4
a  depicts the performance of the tools after this post-variant-calling filter. it reduces the sensitivity for all tools but deepsnv and mutect. for deepsnv, the performance for low-frequency variants is greatly improved, whereas it becomes less sensitive for higher frequencies. with the binomial test, deepsnv reaches a sensitivity of 64% for variants with ground truth frequencies in [ <dig> , <dig> ), instead of a sensitivity of 38% without this filter. for mutect, the sensitivity for variants with ground truth frequencies in [ <dig> , <dig> ) was 71% instead of 1% without this post-variant-calling filter.


parameter optimization of variant callers we selected five variant callers to investigate if further performance improvements can be achieved by tuning the parameters of the callers. we chose deepsnv and jointsnvmix <dig> for their very good overall performance. we assessed the effect of changing the filters for base or mapping quality, because this could have an impact on the performance. furthermore, we chose samtools to explore the effects of certain parameters for which it would be difficult to assign an intuitive value since their impact is unclear. these parameters are -b for recalculation of the base qualities, and -c for recomputing the mapping quality. moreover, varscan <dig> was selected to assess whether a tool that did not perform so well can be improved by a straightforward change of a default parameter: the default threshold for the variant allele frequency is  <dig> , which explains the poor performance in the low-frequency range. also, the impact of applying the strand filter was assessed. finally, sinvict allows setting a threshold for the q-score via the parameter —qscore-cutoff <int>, which reflects the confidence of the variant call. the q-score is not printed by sinvict to the output list of variants, hence a ranking according to this value is not possible. however, adjusting the q-score cutoff threshold with the parameter —qscore-cutoff may lead to an increase in performance.

we found the predictions of deepsnv and jointsnvmix <dig> to be highly robust against varying thresholds for base and mapping qualities . the default threshold for the minimum base quality in deepsnv is  <dig>  lowering this threshold to  <dig>  and thereby also including more potential sequencing errors in the read counts, only leads to a very subtle decrease in performance. additional file 1: figure h displays the performance for all parameters that were assessed.

the prediction performance of samtools varies substantially in both directions when choosing different values for the parameter -c <int> . according to the manual  <cit> , the parameter -c of samtools reduces the effect of reads with an excessive number of mismatches. varying -c between  <dig> and  <dig> resulted in large differences in performance ranging from auprc90= <dig>  for -c  <dig> and auprc90= <dig>  for -c  <dig> 

the default minimum variant frequency for varscan <dig> for heterozygous mutations is  <dig>  according to the manual  <cit> , which hampers detection of low-frequency variants. setting this threshold to  <dig>  yields great performance improvements, especially in the low-frequency range . the auprc <dig> is improved from  <dig>  to  <dig> . applying the strand filter leads to a decrease in sensitivity, which could indicate that this filter is too conservative.

different values for the —qscore-cutoff parameter in sinvict lead to an increase or decrease in performance, as shown in additional file 1: figure h panel e. the optimal value might depend on factors such as coverage and contamination level. the default value is  <dig>  which is probably best for very high coverage data. in this case, the optimal value was found to be —qscore-cutoff  <dig>  it improves the auprc <dig> from  <dig>  to  <dig> .


variant caller combination strategies it has been noted that a combination of variant callers may be beneficial to improve sensitivity and specificity of predictions  <cit> . one straightforward way of combining variant callers is to take the intersection of several tools. we assessed whether the top predictions of the top five variant callers from the default run according to auprc <dig>  conform. additional file 1: figure i displays the venn diagrams for three different thresholds for the false discovery rate. the evaluation of the set of variants which were shared between the five tools revealed that the precision is very high, as it ranges between  <dig> −100%. however, many variants are missed, e.g. the recall is only at most  <dig> %, when restricting the individual tools to a false discovery rate of 10%. this demonstrates that taking the intersection of many tools might be a too conservative choice. additional file 1: table s <dig> lists the number of variants which are shared between all pairs of two variant callers and their auprc <dig> 

finally, we developed a new method to integrate predictions from multiple callers by combining the ranks of variants across callers . the basic idea is to combine the ranks after having standardized the correlation between the tools. we refer to this approach as the rank-combination. from each tool, we took the best version of the assessed pipeline or parameter settings: that is, deepsnv and mutect with the binomial test as germline filter, samtools with -c  <dig>  sinvict with option —qscore-cutoff  <dig>  varscan <dig> with the parameter —min-var-freq  <dig> , as well as the default runs from jointsnvmix <dig>  gatk ug, gatk hp, and somaticsniper. figure 4
c demonstrates that the performance of the rank-combination is always better than the intersection of the variants of the same callers. by intersection of tools, we refer to the variants which are shared between the callers. the sensitivity decreases as more tools are considered for the intersection. interestingly, for the rank-combination of callers, it is better to take more tools. the overall sensitivity when combining all nine tools is 75%, where any individual tool only reaches at most 71% with the same fixed precision of 90%. however, the rank-combination of deepsnv, jointsnvmix <dig>  mutect, sinvict, and varscan <dig> performs best, and is also better than the rank-combination of all tools. more specifically, it reaches an overall sensitivity of 78% with a fixed precision of 90%. especially in the low-frequency range, e.g. for variants with frequencies in the interval , the rank-combination of deepsnv, jointsnvmix <dig>  mutect, sinvict, and varscan <dig> outperforms the individual tools by reaching a sensitivity of 46%, where the maximum sensitivity of any of the tools individually is 36%, reached by mutect with the binomial filter. the rank-combination of deepsnv, jointsnvmix <dig>  mutect, samtools and varscan <dig> is almost as good as the one with sinvict at a precision of 90%, and at a precision of 95% even slightly better. figure 4
d summarizes the performances of the three best rank-combinations and all nine individual tools with the area under precision-recall curve when the precision is at least 90%. additional file 1: table s <dig> displays the auprc <dig> and auprc <dig> values for the ten best rank-combinations.

discussion
our study on simulated data revealed substantial differences between the tools, and identified possibilities to improve cancer exome sequencing pipelines. the relatively high sensitivity for low-frequency variants of deepsnv and jointsnvmix <dig> is the result of the explicit modeling of the variant allele frequency in the statistical model of these tools. neither method assumes cancer variants to have undergone clonal expansion. hence, the statistical model of deepsnv and jointsnvmix <dig> seems to be the most appropriate for the read count data obtained from heterogeneous tumor samples. by contrast, other methods, such as gatk hp, gatk ug, and samtools assume that the variants are clonal, i.e. either heterozygous with a variant allele frequency of  <dig>  or homozygous with a frequency of  <dig> . in cancer, however samples are not expected to be monoclonal, but rather a mixture of genetically distinct subclones  <cit> . subclonal variants that exist at a low frequency might be very important.

when varying thresholds for base and mapping qualities, the performance of deepsnv and jointsnvmix <dig> remained very stable. the model of deepsnv takes into account overdispersion which could explain the quite robust performance. the statistical model of jointsnvmix <dig> explicitly considers base and mapping qualities and therefore is immune to any changes in these thresholds.

with a median coverage of above 106×, the performance of most tools does not show a substantial improvement, or even decreases slightly in the case of samtools and somaticsniper. this saturation can be attributed to error sources that cannot be resolved with higher coverage in these models. in contrast, especially deepsnv and sinvict always perform better with increasing coverage. this underlines the fact that they were designed and tested for very high coverage data.

concerning the way of reporting the variants, mutect and sinvict do not provide a confidence score for each variant, in contrast to the other tools. we speculate that the performance would be better for mutect and sinvict, if they reported the confidence score as well. this would allow ranking the variants accordingly, and might lead to higher sensitivities for the same precision cutoff.

regions with coverage less than 25× in the tumor or normal sample cause many false positives and false negatives. the extent of this source of errors can be reduced by aiming for a high coverage when planning an experiment. however, simply increasing the coverage, e.g. by amplifying more, might not solve the problem entirely, since regions with low coverage could be due to alignment problems. if a genomic region contains an accumulation of somatic or germline mutations, the reads might not align any more to the reference genome. in fact, among the false negatives, 61% of variants that fall into variable region are also in the category low coverage. this points towards alignment problems in the presence of many mismatches. approaches that possibly lead to an improvement could be to re-align the unmapped reads while allowing for more mismatches or to locally assemble the haplotypes. the gatk-indelrealigner showed only a limited effect on the performance of the tools. this might be explained by the relatively small number of indels that were introduced in the simulated cancer sample: among the introduced mutations, there were  <dig> % indels, since this study focuses on snvs. an approach that extends the idea of the gatk-indelrealigner to any region with many variants, including snvs, might be promising. moreover, the gatk-indelrealigner decides for a single alignment solution, instead of keeping track of the uncertainty. it could help to enumerate or sample all high-scoring local alignment possibilities. approaches like the one used by the gatk haplotypecaller, which reassembles the reads into haplotypes, are promising. however, reads that did not align at all due to increased variability are not included. results might be improved if this step would already be incorporated during the alignment. then reads which would otherwise be discarded as unmapped would be included as well. these suggestions point towards a tight interdependence of alignment and variant calling, which should be treated as a single optimization problem. this is clearly computationally more demanding than current variant calling pipelines, but given that problems cannot be resolved by deeper sequencing, more sophisticated algorithms are necessary.

the analysis of error sources also revealed that among the main confounding factors when calling somatic variants are germline mutations, which are erroneously classified as somatic. the post-variant-calling filter, which removes potential germline mutations, increased the performance for deepsnv and mutect. this improvement of deepsnv is in line with the fact that the error source in normal was the highest except for false positive calls that could only be assigned to other error sources. for mutect, 93% of the false positive calls could be assigned to in normal, which explains the great performance improvement with this germline filter. the fact that these two callers had problems with distinguishing germline and somatic mutations could be explained by the underlying model. the method of deepsnv calls a variant if the variant allele frequencies differ significantly in the tumor and normal sample, but there is no threshold on the allowed maximal variant allele frequency in the normal sample. mutect uses two tests when determining a variant. the first one compares the variant model against an error model using the observed read counts in the tumor sample. the second one considers the read counts in the normal sample to test the possibility of a germline mutation. therefore, the normal and tumor read counts are not compared directly.

groups of variant callers that do not have strong correlations in their error profiles are interesting candidates for combination strategies. the analysis of the error sources and the correlations of error profiles revealed that deepsnv and jointsnvmix <dig> were the least correlated in their false positive error profiles with any of the other tools. mutect, sinvict and varscan <dig> were the least correlated with jointsnvmix <dig>  together with the rank-combination, these five tools reached the overall best auprc <dig>  interestingly, even though samtools is by itself not among the five best callers, it is part of one of the best rank-combinations, which also suggests that the tools complement each other in a synergistic way. this is in line with the fact that jointsnvmix <dig> and samtools are the least correlated among all false negative error profiles. and the false negative error profile of samtools was overall the least correlated to the profiles of the other tools.

CONCLUSIONS
our experiments on simulated data revealed that, with default parameters, deepsnv and jointsnvmix <dig> outperformed the other methods, especially in detecting low-frequency variants. furthermore, deepsnv and jointsnvmix <dig> were fairly robust against changes in the default thresholds for base or mapping qualities, which increases the confidence that these tools will perform equally well on other data sets of unknown quality. mutect showed very competitive performance for low-frequency variants after applying an additional germline filter, which also further increased the sensitivity of deepsnv. varscan <dig> improved substantially when changing a default parameter.

the comparison of the default alignment to the more sensitive alignment demonstrated that the tools in general detect more true snvs from higher quality alignments. we conclude that it is worthwhile investing more in runtime during the alignment to obtain improved performance. furthermore, the results that we obtained from analyzing the error sources revealed that it might be beneficial to treat alignment and variant calling as a single optimization problem.

the effect on the performance when varying the parameter -c for samtools was very heterogeneous. we suggest that, if this parameter is used, it should not be set to an arbitrary value without the possibility to estimate its effect.

the combination analysis showed that the intersection of tools is in general too conservative. the sensitivity decreases when restricting the variants to be found by more tools. conversely, the rank-combination approach, where the ranks of the tools are combined after standardizing their correlation, proved to be very promising. the rank-combinations were better than the intersection of the same tools. and most of all, the rank-combination of deepsnv and mutect with the germline-variant-filter, jointsnvmix <dig>  sinvict with —qscore-cutoff  <dig>  and varscan <dig> with the parameter —min-var-freq  <dig> , performed the best at a precision of 90%, and was better than any of the tools alone.

we conclude that many errors can be avoided by investing runtime into very sensitive alignments and using appropriate statistical models such as deepsnv and jointsnvmix <dig> or combination strategies such as the rank-combination. however, there is still a great need for improving variant calling and alignment in mixed tumor samples.

