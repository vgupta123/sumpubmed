BACKGROUND
advances in genomics and dna sequencing technology have fueled growing interest in the large-scale physical and functional organization of chromosomes. several studies have shown that genomes of many disparate species may have chromosome regions containing clusters of functionally related genes
 <cit> . it is well known that operons, ubiquitous in prokaryotes, allow multiple genes to be transcribed at once into a polycistronic mrna. the extent to which genes colocalize in eukaryotes and the extent to which gene clusters are conserved across species are largely unknown. in eukaryotes, operons are rare
 <cit> ; however, there is evidence to suggest that genes within the same biological pathway may be clustered more so than expected by random rearrangements, possibly because of co-regulation
 <cit> . for example, the hox genes are tandem duplicate genes organized into clusters, playing a pivotal role in defining the body plan of organisms. further, the order of the genes within a hox cluster defines the sequence in which these genes are expressed
 <cit> . while these examples rely on positional clustering, other mechanisms may also lead to gene clusters; for example, clustered genes could be coregulated because  their promoters are bound by the same transcription factors;  they share regulatory elements ; and  the transcription of a gene can change local chromatin accessibility for its neighbors.

between evolutionarily distinct species, we expect to find random genomic rearrangements that do not conserve gene clusters, unless colocalization is beneficial to the organism. it is possible that colocalization is acted upon by natural selection, conserving the gene clusters across large evolutionary time-scales, although it remains unclear what structural, regulatory, and functional factors are responsible for the colocalization
 <cit> . a recent study found that the genome of a number of different species was arranged into neighborhoods of functionally-related genes that were not necessarily orthologous
 <cit> .

if functionally related genes cluster for mechanistic purposes, then it is expected that those clustered genes would colocalize in other species as well. how to quantify this conservation is a difficult task since orthologous genes have obtained random changes since their last respective speciation event, are often called different names in other species, often have different or increased/decreased functional attributes and not all genes may be required in other species. to address these related research questions, there is a pressing need for computational tools that can overcome the onerous task of querying the growing list of available assembled genomes, analyzing the spatial ordering of genes across many species to identify whether they form clusters, and assessing the conservation of these clusters across other species.

one such clustering tool is c-hunter, a command-line program that clusters genes by genome position and go categories
 <cit> . while c-hunter is capable of identifying clusters of genes within a species, it does not incorporate an analysis of conserved clustering across multiple species, and is not intended as a tool to query a general set of genes that don’t share go terms. other tools, such as cgcv, allow for clustering across many species but require the user to input dna sequences instead of gene names
 <cit> ; subsequently, the web tool performs blast searches to find orthologous genes, which adds significant overhead to run-time.

there are related tools which identify regions of synteny, such as ensemblcompara
 <cit> , i-adhore
 <cit> , mcscanx
 <cit> , cinteny
 <cit> , orthoclusterdb
 <cit>  and syntenator
 <cit> . these tools are useful for identifying homologous genomic regions between species, but do not include an automated approach for evaluating gene clustering and its conservation across species. utilizing the software that provides a web api and pre-computed homology results, we chose to use ensemblcompara in kerfuffle.

to the best of our knowledge, there are currently no tools available for efficiently verifying whether a given list of genes from one species forms clusters and whether these clusters are conserved across other species. to this end, we have developed and implemented a publicly-available web tool, kerfuffle, that efficiently computes various summary statistics of gene clustering across most genomes in the e! ensembl database
 <cit> , compares significance of clustering with shuffled null models, and graphically displays the results. the main advantage of kerfuffle is that it only requires a user to specify human gene names and species of interest. in addition, orthologous gene searches are automated utilizing pre-computed homology from e! ensembl servers, a relative statistic is used to quantify cluster conservation, and the online program permits server-side saving of results for each registered user for later analysis. furthermore, kerfuffle can generate a visualization of the clusters using the circos software
 <cit> . this comprehensive platform is an important step in furthering our understanding of genome organization and its evolution.

implementation
because kerfuffle is available as a web application, this obviates the need for compiling or installing, is accessible from anywhere, is supported by most web browsers , and allows us to improve our software on our end without requiring the user to download an update.

the back-end runs on php  <dig>  on an apache server. the front-end was built primarily in html and javascript and two javascript libraries to enhance user experience, namely jscharts for plotting graphs and jquery for ajax effects. with the list of genes input by the user, kerfuffle will query the e!ensembl biomart database and retrieve gene name, id, chromosomal position and homology information of all genes selected and for each species selected. to improve speed, all the species are queried at once in a parallel fashion, and the results are displayed on screen as soon as they are processed by kerfuffle.

with the gene positions, kerfuffle will group the genes into clusters based on their colocality using a clustering algorithm written in c++ to improve performance. once done, kerfuffle displays the set of gene clusters and uses the jscharts library to graph relevant plots and histograms . the plot of figure 
1a is interactive: hovering on each point reveals its x and y coordinate, and clicking on the point will reveal all the gene pairs that are separated by a distance x. furthermore, p-value calculations are done to estimate statistical significance. to ensure that small p-value requests does not slow down webpage usability, the calculations are performed in the background and once done, the results appear in a table.

if the user inputs the names of human genes and wishes to do an analysis on the genomes of several other species, kerfuffle will find the corresponding homologs in each of those genomes on its own, with no further user input. kerfuffle is also flexible in the way it accepts user input. the user may choose to input genes in a textbox one by one or alternatively, may upload a file that contains a list of genes, each of which is separated by a break line. however, we recognize that it is difficult for users to keep track of the dozen file formats they use. thus, if the uploaded file is a comma- or tab-delimited file with multiple columns, kerfuffle will ask the user to specify the column in which the gene names are found.

to aid in recurring analyses, we recommend that users create a free kerfuffle account so their results and the queried genes will be saved in our databases. on the back-end, the query results obtained from e! ensembl are temporarily stored in text files and purged every week, unless users decide to save their results to their account, in which case the results remain on the server until the users delete them.

RESULTS
kerfuffle provides an option to input a known list of functionally related synapse genes, totaling  <dig>  for demonstrative purposes. the source of these genes may be found in the amigo database
 <cit> . colocalization of these genes is supported by a recent publication that demonstrated clustering of genes associated with gabaergic circuit assembly in the cerebellar cortex of young mice
 <cit> . all analyses and images generated were performed on these genes. the list of genes is available on the kerfuffle webpage for analysis, located under the “upload gene list” button labeled “example: synapse genes.”

multi-species colocalization analyses
kerfuffle allows the user to specify a list of gene names and select up to, currently,  <dig> species for which the analysis will be performed. the gene identifiers supported by kerfuffle are e!ensembl gene names or wikigene names and the orthologs of the input human genes are obtained from ensemblcompara, which uses maximum likelihood phylogenetic trees for homology prediction. default analysis parameters are provided, although customization is allowed; parameters include: d, the maximum number of total intervening genes  allowed in a cluster ;  the maximum value on the x-axis of the histogram of distance between consecutive gene pairs ;  the maximum value on the x-axis of the histogram of cluster sizes ; and  the target size of the minimum p-value.

once the analysis is launched, the local machine will concurrently send asynchronous requests to our web server, one request for each species. for each request, our web server will connect to the e!ensembl biomart database and download necessary genomic information, after which a colocalization analysis is performed.

once the analysis is completed, the results are displayed in the “consecutive gene pairs”  and “cluster size distribution”  graphs. we define the consecutive gene pair distance distribution  as the histogram of distance between consecutive genes, for all the genes input. the null-distribution in figure 
1a is determined through the following procedure. first, we randomly distribute the genes uploaded to kerfuffle across the genome. second, the distance distribution is found for those genes. finally, this process is iterated many times, dependent on the user’s minimum target p-value, and then all random distance distributions are averaged. this average approximates the null-model—that the list of genes do not cluster more than random. the p-values are determined through a similar process. upon each random iteration, the counts for each distance in the distribution from the real genomic positions  and from the randomly distributed genes are compared. the p-values are calculated as the frequency that random permutation counts surpass real data counts.

below the p-value table, the cluster size distribution plot  is displayed with an option to download the data in a text file. clusters used in the cluster size distribution plot and the conservation analysis below are defined as in figure 
 <dig>  namely, a set of ordered genes g <dig>  g <dig>  …, gn is said to colocalize, i.e. form a cluster, if the number of total intervening genes is less than or equal to the specified parameter d. mathematically, if x is the positional order of gene gi, then we require that x − x − n + 1 ≤ d. in kerfuffle, the default value of the parameter d is  <dig> 

comparative analysis
in the “summary” tab, the user can launch an analysis comparing human clusters to those of other species, as well as plot distance histograms between consecutive gene pairs for all species selected . to find the orthologs of the input human genes, kerfuffle fetches data from e!ensembl’s ensemblcompara resource
 <cit> . once selected, the results can be found under the “compare” tab. further, to quantify cluster conservation between chosen species, we define a “conservation score” which conveys similarity of clusters among species.

to quantify the conservation of gene clusters in species t relative to those found in species s, we use the following conservation score:

 scores,t=1ns∑ins∑jntsi∩tjsi, 

where si and ti refers to the set of genes in cluster i in species s and t, respectively. nx refers to the total number of clusters in species x. all clusters were chosen as size  <dig> or larger. the intersection between si and tj is defined as the set of common genes between cluster i in species s and cluster j in species t. we normalize the size of the intersection by the size of the cluster si, hence calculating the score relative to species s. the inner sum increases if the genes found in cluster j of species t are also found in cluster i of species s, while the outer sum averages those scores over each cluster i in species s thus, score is a statistic which increases as the same clusters are observed and remain intact amongst the species investigated in t relative to s. our default setting for this analysis sets s = human.

using the software
before the analysis is started, the user must select the species of the gene names used, upload, type, or paste the genes to the kerfuffle server, select the species to investigate, and click “analyze.” while the analysis is performed, the program displays a “summary” tab which reports, for each species, the amount of genes found from the specified list, as well as invalid or missing gene names. after the completion of the analysis for each species, a tab is generated next to the summary tab that reveals a report of discovered clusters. this report includes a plot of the distribution of distances between consecutive gene pairs , a histogram of cluster sizes , and a genomic visualization of the clusters . the graphs and data points used to plot them are downloadable. at the top of each species tab, the genes in a cluster are presented along with a clickable link, which searches the kegg pathway database
 <cit>  for commonality in the cluster. further down the tab, the interactive analysis plots are generated: clicking on a data point for a given consecutive distance will display all the consecutive gene pairs separated by that distance, as well as display the histogram counts over the graph. to assess the significance of the clustering, we overlay a plot of the expected distribution under random gene shuffling, i.e. if gene colocalization were random. deviation from the null distribution is also quantified as a p-value table generated using a permutation test, as previously discussed. note that the null distribution curve in the “consecutive gene pairs” graph  may sometimes appear to be linear, as opposed to the expected exponential, due to the significance of gene clustering—significant counts may “squish” the null-curve. as a result, an option is available to generate an independent plot of this curve, demonstrating the decaying nature of the distribution.

under the table of clustered genes in the species  tab, a circos image may be generated for visualization of gene clusters. these images may be downloaded and saved as either .png or .svg formats. figure 
 <dig> shows a circos plot of the clustered genes from our online example of synapse genes. the sizes of the clusters are represented by a green histogram located at the appropriate genomic start and stop of the clustered genes, pointing radially inwards. we have attempted to optimize output for visualization of gene names  while maintaining all genes on the image, however, some genes may run-off the circos image because it is impossible to know a priori how many genes will sit next to each other in any given colocalization analysis.

finally, kerfuffle makes it easy to compare cluster conservation across all species. the user may click on the “summary” tab and run a comparative analysis by clicking “go.” under the newly generated tab “compare”, the score statistic is calculated and displayed demonstrating the degree of conservation of the clusters in each species relative to humans. below these results, the consecutive distance distribution for each species is simultaneously displayed .

once the user becomes familiar with the performed analyses, default parameters  may be changed at the bottom of the website below the “analyze” button. further, the uploaded genes may be dynamically removed by clicking on the “x” next to each gene or added to the list, whereby the analysis will need to be re-run to reflect the changes. the gene list may also be reset without disturbing the analyses performed and the whole set of analyses may be reset using the “new” button at the top of the page. if the user has any difficulties, we have created a comprehensive frequently asked questions  section which covers the capabilities of the whole website and answers many of the more common questions. finally once a user account is created, all results can be saved online for later analysis.

performance
to evaluate the performance of our web tool, we ran several queries using gene sets of varying size and different number of species . we find that a typical query of ~ <dig> genes in  <dig> species completes in ~25 seconds . overall, for a given number of species, the running time increases exponentially with the number of input genes . however, even a query of  <dig>  genes  in all  <dig> species completes in less than 10 minutes. hence, our server is well suited to ensure that queries are handled expediently. although there is no limit on how many genes a user can input, we recommend that users do not exceed  <dig>  genes in order to maintain a reasonable running time, as well as the usefulness of results .

future developments
future developments will include increased investigative options, such as changing the type of genes investigated  and incorporation of other gene name schemes . currently, our default conservation score sets humans as the relative species, i.e. for all calculations, s = homo sapiens. while our implementation is human-centric, the end-user may wish to use another relative species. in future implementations, it is expected this option will be added. other features, such as the identification of common clusters in the species, will be added, while other functionality will be included to improve our pathway investigations. currently, we link to the kegg website, a multi-gene pathway search. in later developments, our webpage will determine the similar pathways and display them along with the clusters. finally, circos uses specific karyotype files, which define the genome of the species investigated. our current circos implementation, however, uses the default available files: humans, mouse, rat, and drosophila. in future developments, we will generate karyotype files for any available genome, making visualization of clusters available for a much wider range of species.

CONCLUSIONS
this software is intended for the end-user to quickly and efficiently obtain genomic organizational information about a set of user-defined functionally related genes. the software discovers clusters in each species selected and determines the significance of those clusters while allowing for interactive and visual exploration of genomic structure.

since it is expected that speciation would lead to differences in genomic organization, provided organization is random, we investigate relative cluster conservation between species using a measure we define as the score. once the analysis is performed, the user may compare species and determine the degree of cluster conservation.

the optional parameters make the investigations customizable and allow the user to optimize run-time. an account may also be created where all investigations may be saved for later use. further, our website has an extensive faq section which may help guide the user.

availability and requirements
□ project name: kerfuffle

□ project home page:http://atwallab.org/kerfuffle

□ operating system: platform independent

□ programming language: php, javascript, c++

□ other requirements: web browser 

□ license: gnu gpl

□ any restrictions to use by non-academics: no license needed.

abbreviations
ajax: asynchronous javascript and xml; php: php hypertext preprocessor; html: hypertext markup language; blast: basic local alignment search tool; kegg: kyoto encyclopedia of genes and genomes; refseq: reference sequence.

competing interests
the authors declare no competing interests.

authors’ contributions
ra carried out the code development, implementation, and drafted the manuscript. bf helped draft the manuscript and contributed to code and research development. gs conceived of the study, participated in its design and coordination, and helped to draft the manuscript. all authors read and approved the final manuscript.

authors’ information
centered at cold spring harbor laboratory, ra is a graduate student in the watson school of biological sciences, bf is a postdoc in the atwal lab, and ga is the atwal lab head.

