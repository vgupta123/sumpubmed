BACKGROUND
a common problem for medieval european city-states was their autonomous regulations, currencies, weights and measures, which hampered trade exchange. an analogous lack of standardization is also a major obstacle in research projects using databases and bioinformatics services  <cit> . this problem is especially evident for carbohydrate databases, where sequence information is spread in incompatible formats over several unconnected databases. here we report the results and the peculiarities of a data integration effort which aims to overcome the disadvantages inherent in the scattering of data in isolated carbohydrate databases.

the first publicly available carbohydrate structure database and the mother of all carbohydrate sequence databases is the complex carbohydrate structure database , often called carbbank in reference to the retrieval software used to access the data  <cit> . carbbank was developed and maintained by the complex carbohydrate research center of the university of georgia . in the 1990s, it was the largest effort to collect glycan structures, mainly through retrospective manual extraction from the literature. however, funding for further development and maintenance of carbbank was terminated in  <dig>  and the database has not been updated since then. nevertheless, with about  <dig> entries and more than  <dig> different sequences, the carbbank is still the largest repository of glycan data available.

after funding for carbbank ceased, several other initiatives created new databases which imported subsets of carbbank, e.g. glycosciences.de  <cit> , the bacterial carbohydrate structure database   <cit>  and the glycan database of the kyoto encyclopedia of genes and genomes   <cit> . each of these initiatives added new sequences, derived from retrospective literature analysis or new experimental evidence. other databases for carbohydrate structures were created independently of carbbank. some of these were developed by commercial enterprises, i.e. glycosuite  <cit>  and glycominds  <cit> , while others were created by scientific research groups or organizations, i.e. glycobase from the national institute for bioprocessing research and training   <cit>  ) and glycobase from the université des sciences et technologies de lille  <cit>  ). the consortium for functional glycomics   <cit>  also established a glycan database using the commercial glycominds data as a seed, to which they added new structures based on experimental evidence.

almost all of the initiatives developed their own individual sequence encoding formats tailored to their specific needs, including the use of different naming conventions for the carbohydrate residues. furthermore, the annotations  are in different formats, and most of the databases offered no routines or strategy for automated data access, so that interested researchers were forced to crudely extract information directly from html pages , for example. consequently, each of the existing carbohydrate structure databases was an isolated island with a different "language", and comparison of the content was virtually impossible.

there were a few efforts to overcome this isolation problem: e.g. automated comparison of sequences implemented as a cross-link from the cfg to glycosciences.de  or a cross-database search between glycosciences.de and bcsdb  <cit> . some databases kept manually curated mappings of ids from other databases ) or the original references to carbbank . generally, the cross-linking solutions implemented up to now have limitations since they are pairwise oriented only. another problem of almost all recent databases is the lack of a tightly controlled and systematic vocabulary for the monosaccharides and their substituents. with thousands of different residues present in carbohydrate sequences, namespace inconsistencies can easily arise even within single databases.

our work aims to integrate all available carbohydrate sequences into a single new database. seven of the established carbohydrate structure databases follow an open-access strategy and are, thus, candidates for our data integration effort: bcsdb, carbbank, cfg, glycobase , glycobase , glycosciences.de and kegg. we have implemented a java software application called glycoupdatedb, which downloads the public databases listed above, reads their sequence notations, translates them to the glycoct encoding format  <cit>  and a variant of glyde  <cit> , and stores the encoded sequences and corresponding ids from the source databases in a new database called glycomedb. in addition, we have gathered and harmonized all of the taxonomic annotations available from the various databases. glycomedb, which is updated on a weekly basis, and glycoupdatedb are now publicly available and can be downloaded free of charge .

construction and content
our goal was to integrate the heterogeneous resources of seven open-access carbohydrate databases into one central database called glycomedb . approximately  <dig> database records with  <dig> sequences are accessible in the public domain. the following subsections describe the workflow implemented in the application called glycoupdatedb: data acquisition, integration of structural and taxonomic data and generation of the final database.

data acquisition
the first problem to solve was the accessibility of the structural data. the idea and first design studies for glycomedb date back to autumn  <dig>  at that time, only bcsdb and kegg offered the direct download of their data, while carbbank was available as a file on cd-rom. the other database initiatives provided only html pages to access the data but no interfaces for automated data requests. to establish a stable and persistent mechanism for data export, we engaged in intensive communication with the database providers and finally convinced all of them to provide access to their structural and taxonomic data. table  <dig> summarizes the download possibilities, which can now be executed without reliance on html pages for all initiatives.

database
the source databases used to obtain carbohydrate structures for glycomedb are listed together with their access mode, file type and url. ftp and http access is via normal file downloads; cgi means that a http-get or http-post request is made to a script residing on the remote server. file types are: text = text with keywords, csv = comma-separated values, xml = extensible markup language.

integration of carbohydrate sequences
the biggest obstacle for data integration was the use of various sequence encoding formats by the different initiatives .

carbbank employed 2d sketches of branched structures in ascii format, closely resembling iupac recommendations  <cit> . glycosciences.de and bcsdb developed independently linear sequence encoding schemes which were able to create unique ascii strings for each sequence  <cit> . kegg was the first carbohydrate structure database to use a connection table approach   <cit> . glycobase  follows a similar approach, storing the reducing end residue as an anchor point with all other residues specified in terms of relative position information  <cit> . the cfg database utilizes the linearcode® developed by glycominds, the only format with a controlled namespace for monosaccharides and substituents  <cit> . all other encodings use free-text names for residues. the sequence format developed for glycobase  is based on a motif encoding  <cit> .

since none of the existing solutions is truly capable of encompassing the whole problem space of carbohydrate sequences, we found it necessary to develop a new sequence format, called glycoct, which is a superset of the structural encoding capabilities inherent in all other formats developed so far  <cit> . we have implemented a translation library, which can read all of the carbohydrate sequence formats described above  and translate them to glycoct.

to develop the parsing routines, we first carefully analyzed all existing formats and extracted their grammars, which are available in extended backus naur form   <cit>  in additional file  <dig>  we then implemented parsers which can accept as input a sequence based on any of the documented notations and grammars. all parsers, except the one for the carbbank notation, are implemented as recursive descent parsers  <cit> . during a second phase, the residue names must be translated to a harmonized format since most databases use free-text identifiers for the monosaccharides. for example, a monosaccharide can have different but similar text representations in the databases . furthermore, trivial names for monosaccharides are commonly used in addition to systematic names: e.g. glycosciences.de uses both a-l-6-deoxy-glcpn and a-l-quipn as synonyms for the same monosaccharide.

we have extracted a total of  <dig> residue names that occur in the existing databases and classified them into three sets. the first set consists of  <dig> entities which encode non-carbohydrate chemical entities according to the glycoct definitions. these are mainly aglycons attached to the reducing end, such as amino acids, lipids or other small molecules. in some cases these entities can be attached to a terminal residue of a carbohydrate sequence. non-carbohydrate entities are not processed further during the generation of the glycomedb, but their identity and connectivity are stored in the database for subsequent analysis. the second set of residues comprises  <dig> monosaccharide names, which were successfully translated into the glycoct notation. during this process, the traditional monosaccharide name is divided into a basetype and substituents according to the glycoct definitions . this dictionary is used later for the translation process. the third set of residues comprises  <dig> names which cannot be interpreted or translated into glycoct notation. these are mostly invalid monosaccharide names and other unresolvable names .

integration of taxonomic annotations
taxonomic annotations for at least a subset of the records are available for glycosciences.de, bcsdb, cfg, carbbank and glycobase ; but, again, no common standard for information encoding is adhered to. glycosciences.de and bcsdb use the taxonomic resources  of the national center for biotechnology information   <cit> , while the others utilize free-text designators. table  <dig> shows the total number of structures with taxonomic annotations and the number of species names or numerical ids used in the various databases. it should be noted that not all assignments are species-specific; approximately  <dig> % of the structures are simply associated with a genus, class, kingdom or superkingdom .

database
five source databases provided taxonomic annotations in the format listed. for each database the numbers listed are: total structures with taxonomic annotations , unique species names or ids found , and unique ncbi taxonomy ids remaining after data integration and standardization in glycomedb . the large difference between the number of free-text names and assigned ncbi ids is a result of the usage of different names for the same species and names which could not be translated to ncbi taxonomy ids.

for glycomedb we have opted for the ncbi taxonomy. the free-text annotations used in other databases are mapped automatically to the ncbi taxonomy tree, and this mapping succeeded for  <dig> datasets from a total of  <dig> cases examined. another  <dig> species names were resolved manually. the remaining  <dig> species names, mainly from carbbank, could not be found in ncbi and were, therefore, not included in glycomedb. for each database the total number of species with a resolvable ncbi taxonomy id are listed in table  <dig>  the mapping from text names to ncbi taxonomy ids is stored in a local database and is used during the data integration process.

java application glycoupdatedb
glycoupdatedb is the application program which we have designed to carry out the integration of the interpretable data obtained from the resources described above. it is a java application  <cit> , depending on a postgresql database  <cit> , which can be configured by an xml file. the configuration file contains settings for the local database and instructions for the download and data integration process. initially, database tables with dictionaries and mappings for the taxonomic data are required. the first stage of integration includes the download process with subsequent extraction of the data files to the local postgresql database. glycoupdatedb supports the three download strategies shown in table  <dig> and can also use locally resident files . the second stage of integration involves the actual translation of all downloaded and interpretable structures into their corresponding glycoct representations and storing of the translated structures in glycomedb. figure  <dig> shows the workflow applied for each structure.

for the eurocarbdb project  <cit>  we created an object model for carbohydrate sequences. this model has been implemented in java and is also used during the sequence translation and data integration process. each downloaded carbohydrate sequence is parsed, and a java object for each structure is created. if a parsing error is detected, the process stops and the error is stored in the local database. typically, such errors arise from typographical errors in the sequence notation, resulting in violations of the grammars. after the parsed sequence has been loaded into the object model, the residue names are translated to their glycoct equivalents. if a dictionary entry for a particular residue name is missing, then the residue name is recorded in the database for a later manual curation process. if all residue names are known and valid, then the structure is converted into the glycoct notation, otherwise the event is recorded in the local database as an error.

most carbohydrate structure databases also store non-carbohydrate entities which are attached to the carbohydrate sequence. in some databases it is even possible to encode sequences consisting of more than one aglycon residue and several carbohydrate chains, e.g. highly glycosylated peptides. since glycomedb is mainly focused on carbohydrate sequences, we have included a program module which separates aglycons from the carbohydrate chains and stores the aglycons separately in the database. after the formal quality check described below, the carbohydrate structure present in the object model is exported to glycoct{condensed}, glycoct{xml} and glydeii, and stored in the structure tables of the local database, along with the access key  used in the original database. the taxonomic annotations for each structure are also deposited in the local database using the corresponding numerical ncbi taxonomy id.

database glycomedb
glycomedb consists of several database schemata with tables that store all downloaded and generated datasets. table  <dig> shows an overview of all schemata, the number of tables in each schema and a description of the content. a more detailed description of the database tables and schemata can be found on the webpages of glycomedb: 

glycomedb schemata are listed in alphabetical order, for each schema the corresponding number of tables incorporated and a short description of their content is given.

initially, the database contains the schemata core and dictionaries, with tables that include the dictionaries for residue translation and taxonomy mapping, and the schema remote, which has initially empty tables to be filled during data integration. during a glycoupdatedb run, a new schema is added for each downloaded database, following the naming convention raw_databasename . these schemata contain the downloaded primary data from each of the external databases. moreover, the schema ncbi is created and filled with a dump of the ncbi taxonomy database. the downloaded information in these schemata is used to fill the remote schema during the data integration process. figure  <dig> shows various parts of the glycomedb database in an entity relationship diagram, with the taxonomic and structural parts at the top.

the red background in figure  <dig> highlights the structure and remote_structure tables and their association. an entry in remote.remote_structure contains the origin or database name  and the original id  of the structure. an entry in core.structure is a translated carbohydrate substructure of the original structure and consists of an id and the unique glycoct encoding for this structure. the relationship between these two tables is an m-to-n  relationship, since a remote structure may encode more than one carbohydrate substructure  and a given carbohydrate structure may be contained in several remote structure entries. not shown in figure  <dig> are the entities core.structure_glycoct_xml and core.structure_glyde, which contain each structure encoded in glycoct{xml} and glydeii format, respectively.

the blue area at the top of figure  <dig> shows the entities dealing with taxonomy. the table ncbi.taxon contains the ncbi taxonomy id  and the scientific name and rank for each entry. both remote.remote_structure and core.structure have m-to-n relationships to ncbi.taxon. for remote.remote_structure these relationships represent the taxonomic assignments from the original databases; for core.structure the relationships represent the assignments after data integration.

the bottom part of figure  <dig> shows the tables of the database used for storing the compositions of the structures and for residue name translation. the relationship between remote structures and their residues is shown in the orange area. each remote structure can have an m-to-n relationship to the three residue classes carbohydrate, non_glyco_entity  and unresolved_entity. the residues in the table core.carbohydrate represent carbohydrates in the traditional perspective, i.e. a residue is a monosaccharide with a defined configuration and substitution . entries in core.non_glyco_entity are aglycons such as ceramide  or substituents that are not directly attached to the monosaccharides, since some sequence formats treat substitutents such as sulfates or phosphates as separate residues. finally, core.unresolved_entity contains all newly appearing or unresolvable residues. the m-to-n relationships to the remote structure table can be regarded as composition tables, enumerating the usage of the residues. in the green section of figure  <dig> the analogous dictionary and composition tables for the glycoct basetypes and substituents and their relationships to the glycoct structures are shown.

the relationships between the orange and the green sections are used for the translation of the remote residue namespace to the glycoct residue namespace. for example a carbohydrate corresponds to a basetype and may also contain several substituents. therefore, each carbohydrate in core.carbohydrate has a basetype_id from core.basetype as a foreign key  and in addition, an m-to-n table to core.substituent. during carbohydrate translation each residue is looked up in these tables and translated accordingly to its glycoct representation. as described above, some of the non-glyco-entities correspond to substituents; therefore an m-to-n table between core.non_glyco_entity and core.substituents is used during the translation step.

utility and discussion
all numbers in the figures, tables and text relating to glycomedb are based on the version of glycomedb compiled in august  <dig>  this includes the numbers of residues, numbers of structures in the various source databases and glycomedb and the numbers of taxonomic annotations. note that these numbers are subject to change as the database is periodically updated.

data quality
glycomedb is a database which integrates knowledge from other existing databases. therefore, the quality of the data depends on the quality of the referenced databases and their curation processes. most of the digitally available carbohydrate sequences stem from retrospective literature analysis, and in most cases errors can only be detected by re-examining the original publications, which is beyond the scope of this project. nevertheless, we have added a validation module to glycoupdatedb, which checks each structure by validating the monosaccharide residues and linkages using formal criteria. this procedure is facilitated by the machine-readable monosaccharide notation of glycoct.

linkages are checked against all possible substitution patterns for the monosaccharides involved, e.g. a fucose can not be the acceptor of a  linkage from another residue since a glycosidic linkage to the methyl group  of fucose is not possible. monosaccharides are confirmed to follow standard iupac naming conventions, e.g. 3-deoxy-galacto-hexose is not a valid name, since the stereochemistry is overdetermined; the correct name is probably 3-deoxy-xylo-hexose or possibly 3-deoxy-galacto-heptose. sequences containing errors will be automatically detected by the validation module and will not be integrated into glycomedb.

in addition to naming errors, we also found typographic errors in the sequence encoding  which violate the established grammars or typographic errors in the residue names. all of these errors, which were automatically detected during data integration, were recorded separately in the database and were reported in manually generated reports to the responsible curators during multiple rounds. many errors have been subsequently corrected, and we observe a steady increase in data quality for all databases concerned. however, the percentage of untranslatable sequences still remains relatively high for some sources . further efforts in curation and software development are certainly needed.

utility
through the integration of all public global resources, glycomedb has become the most comprehensive resource for carbohydrate structures worldwide and can be used by researchers to determine whether or not a given carbohydrate structure has been reported previously. the potential value of a unified carbohydrate sequence database for a wide range of applications  is significant. up to now, all analytical work in the glycosciences depended on single databases  <cit> . annotation tools for experimental ms or nmr applications  <cit>  use single databases for their structure prediction engines and could benefit from the broader information base provided by glycomedb.

RESULTS
the current downloadable version of glycomedb  contains  <dig> unique carbohydrate structures unambiguously defined by glycoct encoding and is updated on a weekly basis with the newest structures available. it should be noted that, according to our preliminary analyses, the total sequence space was artificially inflated due to assumptions made by the individual database initiatives. for example, some initiatives modified the original entries derived from carbbank by changing a reduced monosaccharide  to its more probable naturally occurring state , while other databases retained the original carbbank entry. this situation gives rise to two almost identical carbohydrate sequences as separate entries in glycomedb. for specific applications or analyses it may be desirable to exclude such multiple entries, but such a decision should not be part of the data integration process, which should leave the primary data intact.

a total of  <dig> structures were found to have at least one taxonomic annotation, and  <dig> different taxons were referenced. a total of  <dig> structure-taxon tuples are recorded in the database, and figure  <dig> summarizes the numbers of entries assigned to various taxonomic groups and frequency distributions  for  all major taxonomies,  mammalia and  bacteria.

glycomedb contains an index of all structures taken from the seven integrated databases and their taxonomic annotations. with this integrated database we are now able to find all structures that belong to a specific taxonomic group, e.g. all human carbohydrate structures. in addition, it is possible to query for the occurrence of a specified structure in each of the source databases and obtain a list of the corresponding source ids for cross-linking to each of the original databases. note that glycomedb does not include the entire contents of each source database  but does provide the necessary source ids through which the user can access the original databases to obtain all information available for any carbohydrate structure contained in glycomedb.

outlook
the reduction of the error rate of glycomedb in collaboration with the individual database initiatives is an outgoing task. in the future, other databases which currently employ restricted access policies will probably move to the public domain . these databases will be integrated into glycomedb as soon as they become available. currently, a web portal based on glycomedb is being developed to allow users to search the database. a prototype implementation has been completed, but at the time of this publication the structure search capabilities are still limited  <cit> .

CONCLUSIONS
we have created a new database, called glycomedb, which integrates the structural and taxonomic data of all major carbohydrate databases available in the public domain , glycobase  and carbbank). glycomedb is now the most comprehensive source for carbohydrate structures worldwide, and it will be updated at weekly intervals with the newest structures available from the source databases. the current glycomedb database contents and the application glycoupdatedb for the local installation and updating of glycomedb are now available via download and can be utilized by interested scientists.

the need for database development in glycomics has been emphasized frequently: "we need to be able to search databases for what is out there. imagine genomics and proteomics without genbank"   <cit> . with this project we hope to provide a major step forward in the development of standardized, open-access databases for carbohydrate structures and related information pertinent to applications in the glycosciences.

availability and requirements
three different mechanisms can be accessed via the web portal  <cit>  for the distribution of the glycomedb contents and the application glycoupdatedb. detailed installation instructions can be found on the download web pages .

download of structure data files
a compressed zip archive  is available, containing all structures that have been integrated into glycomedb. the structures are stored in regular xml files according to the glydeii specification and can be used by any software which supports this format. with these data the user is totally independent of our database and our internal structure encoding .

download of an sql dump
the second download possibility is a postgresql dump , which contains the complete glycomedb including all schemata and tables. this dump can be imported to local postgresql installations.

distribution of installation routines
finally, the java application glycoupdatedb and a core database dump with dictionaries are available for download . after installation of the core database, the local database can be filled using glycoupdatedb. a local postgresql database and java jre  <dig>  are required. thus, the user can update the local installation of glycomedb at any time to obtain the newest structures available from the original source databases.

for example, glycoupdatedb needs about  <dig> hours to generate the complete glycomedb database on a computer with a  <dig> ghz intel pentium  <dig> processor,  <dig> gb ram and internet access. the procedure involves the downloading of approximately  <dig> mb of data which are temporarily stored in the local file system. operations on the ncbi taxonomy tree require about  <dig> min. finally, about  <dig> hours are needed for the data integration stage.

authors' contributions
rr and sh designed the database and software and drafted the manuscript. rr was responsible for the parsers and data integration routines, while sh created the data acquisition routines and handled the curation of the monosaccharide dictionaries and the taxonomic annotations. cwl and tw provided guidance for the project and helped with the connections to the other database initiatives.

supplementary material
additional file 1
ebnf definitions for carbohydrate sequence encoding schemata.

click here for file

 acknowledgements
the authors would like to give special thanks to dr. william e. hull  for his helpful comments and a thorough editing of the manuscript. we wish to express our sincere gratitude to all of the carbohydrate database initiatives involved and, in particular, to their individual curators, who provided open access to their data and made this project successful. in addition, we want to thank the members of the eurocarbdb project who helped us with fruitful discussions and comments.

this work was supported by the eu  and the german research foundation .
