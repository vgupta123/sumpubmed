BACKGROUND
family-based and case-control association designs have been used in many genome-wide association studies . for gwas where ~ <dig> million markers are tested, the major challenge is sorting out true positives from the many false positives. many gwas datasets have been deposited into public databases such as the database of genotypes and phenotypes . also the welcome trust case control consortium  provides a large number of case-control samples for public analysis  <cit> . these resources provide the crucial opportunity to increase power by combining datasets. however, this requires flexible analytic methods that can accommodate diverse study designs .

current available software for combining case-control and family data all have restrictions. most of them such as scout  <cit> , chrr  <cit>  and unphased  <cit>  require sampling a homogeneous population, which may not be a reasonable assumption for data from a large consortium. famcc  <cit>  can account for population stratification and uses nuclear families with arbitrary number of siblings but requires parental genotype data, which are often unavailable for late-onset diseases. to overcome these restrictions, we have developed the combined apl test   <cit> , which is a novel and powerful statistical test that can accommodate family and case-control datasets and can account for population stratification using a clustering algorithm.

capl is an extension of the family-based association in the presence of linkage  test  <cit> , which compares the difference between the observed number of alleles in affected siblings and its expected value, conditional on parental genotypes, under the null hypothesis of no linkage or no association. capl can use nuclear families with one or more affected sibs and can infer missing parental genotypes properly in the presence of linkage by accounting for the identity-by-descent  parameters. unrelated cases and controls in capl are treated as families with one sibling and two missing parents so that they can be integrated into the family-based framework. ward's clustering algorithm is used in capl to identify subpopulations and parental mating-type probabilities are calculated conditional on the subpopulation information. the em algorithm is used to estimate the allele frequencies, ibd parameters and probabilities of origin in the presence of population substructure. a bootstrap approach is used in capl to estimate the variance for the capl statistic  <cit> . for each bootstrap replicate, samples are resampled with replacement and the em algorithm is performed. the clustering algorithm is also included in the bootstrap procedure to account for the variation from clustering. capl has been shown to have correct type i error rates and has more power than other association tests that combine case-control and family data such as unphased, scout, chrr and famcc under various simulation scenarios  <cit> .

generally 20- <dig> em iterations are required for the parameter estimates to converge, and 200- <dig> bootstrap replicates are performed in capl for the variance estimate. for each bootstrap replicate, the em algorithm is performed. therefore, the capl algorithm is very computationally intensive and can be inefficient for analyzing gwas data. the same is also true for other association methods that infer missing parental mating types based on sample allele frequencies such as unphased, which relies on the quasi-newton algorithm for maximum likelihood estimates  <cit> . however, because each marker in capl is analyzed independently, analysis of each marker can potentially be parallelized to reduce the run time.

we implemented capl using the posix threads  and open message passing interface  libraries that can be executed in a computer cluster environment. we used computer simulations to demonstrate that capl can analyze gwas datasets within a reasonable amount of time. the capl software package will be a useful tool to combine existing family and case-control gwas datasets in the presence of population stratification.

implementation
we used a hybrid of open mpi and pthreads to parallelize capl. in a cluster environment, capl is first executed on one node, which we denote as the master node, that manages the i/o for reading marker and individual information and writing results. the first stage in the capl algorithm is to perform the clustering procedure for population stratification, which requires a distance matrix. calculating the distance matrix is time consuming because the distance is calculated for each pair of individuals over genome-wide markers. we used pthreads to parallelize the calculations on the master node. depending on the number of computing nodes specified by the user, genotypes for markers along with the population substructure information are then distributed evenly to each node via mpi. on each node markers are analyzed independently and in parallel using pthreads with shared memory. the advantage of using pthreads instead of mpi on each node is that pthreads communicate via shared memory which is significantly faster than mpi that has to communicate via the network. figure  <dig> shows the flowchart for the parallel capl algorithm. for a standalone machine with multiple cores, we also implemented a version of capl with pthreads only.

to evaluate the performance of capl, we used genomesimla  <cit>  to simulate gwas datasets. we downloaded the configuration file for simulating gwas data based on affymetrix  <dig> k chip from the genomesimla website. we simulated two scenarios. for the first scenario, we simulated one population based on the 600th generation from genomesimla. a total of  <dig> cases,  <dig> controls and  <dig> families were simulated, which are similar to the sample sizes of recent gwas studies  <cit> . a total of  <dig> families are triads and  <dig> families are multiplex . for the second scenario, we simulated  <dig> cases,  <dig> controls and  <dig> trio families from one population  and  <dig> cases,  <dig> controls and  <dig> multiplex families from another population . the jobs were distributed across  <dig> nodes, each with  <dig> xeon  <dig>  ghz cores and  <dig> gb of memory. we also performed the jobs on  <dig> nodes, each with  <dig> xeon  <dig>  ghz cores and  <dig> gb of memory.

we then evaluated the performance of capl on a single node for the two scenarios. because the simulated datasets are large, we compiled a demonstration version of capl by fixing the number of bootstrap iterations to be  <dig> and the number of em iterations to be  <dig> to reduce the run time. this demonstration version is for comparing performance only, as reducing the numbers of bootstrap and em iterations may cause biased estimates of parameters.

RESULTS
the run time for scenario  <dig> was  <dig> days  <dig> hours and  <dig> minutes and the run time for scenario  <dig> was  <dig> days  <dig> hours and  <dig> minutes using  <dig> nodes . the run time for scenario  <dig> was  <dig> hours and  <dig> minutes and the run time for scenario  <dig> was  <dig> hours and  <dig> minutes using  <dig> nodes . scenario  <dig> had longer run time since more parameters were estimated for population substructure analysis  <cit> . we can see that in this example consisting of  <dig> samples and half million markers, capl can complete analysis in a reasonable time frame with the estimates of parental mating types, ibd and population substructure parameters when sufficient parallel computing resource is available.

for the demonstration version of capl  using  <dig> node , the run time for scenario  <dig> was  <dig> day  <dig> hours and  <dig> minutes and the run time for scenario  <dig> was  <dig> day  <dig> hours and  <dig> minutes. without the restrictions on the bootstrap and em iterations, capl averaged about  <dig> bootstrap iterations and about  <dig> em iterations across markers in the simulated samples. therefore, the total iterations  required for capl to have unbiased estimates of parameters is about  <dig>  times the number of restricted iterations . in practice, we expect that capl using  <dig> node would require more than  <dig> days for similar sample size with scenario  <dig> and more than  <dig> days for scenario  <dig>  the results demonstrate the importance of implementing capl with mpi and pthreads in a distributed system.

CONCLUSIONS
capl is implemented with a hybrid of open mpi and pthreads, which can be performed using a computer cluster with shared memory. we also provide a version of capl with pthreads only, so that the program can be performed on a standalone machine with pthreads. without the parallelization, capl may require months to complete a gwas analysis using one processor. the situation is the same for other computationally intensive association software such as unphased. to speed analysis, users may divide the input file into subsets of markers and manually run the subsets of markers on different machines. this is not ideal because extra storage is needed for the subsets of files. moreover, reducing the number of markers in a subset may cause the loss of information about population substructure for the clustering algorithm in capl. therefore, the parallelization for capl is essential for gwas.

in conclusion, we developed the efficient software package capl based on open mpi and pthreads, which is a powerful association test that can accommodate case-control and family data and account for population stratification. as many gwas datasets based on both family and case-control designs are available, a flexible and efficient tool such as capl will be very helpful to combine the datasets to greatly increase statistical power and finish the analysis in a reasonable time frame. moreover, population stratification is properly accounted for in capl so that datasets from different populations can be jointly analyzed.

software configuration
we compiled the capl code for the standalone version, which can be executed on a single machine with multiple cores, and the cluster version, which can be executed in a cluster environment. we distribute binaries for the standalone version  and a binary for the cluster version . when executing the windows binary, the pthreads library  needs to be in the same directory as the binary. for linux and mac os users, we strongly encourage the users to compile the code on their machines, as the configurations of dynamic links to libraries may vary on different machines.

in addition to binaries, we provide source code with sets of makefiles for the standalone and cluster versions. the standalone version can be compiled with gnu's g++  <dig> . <dig> compiler or later versions. the cluster version can be compiled with mpicc. we also provide makefiles based on intel compilers for intel hardware users. based on our experiments, capl has better performance on the intel hardware when it was compiled with the intel compiler. we provide examples of the submission scripts for the cluster based on the commonly used lsf and moab job schedulers. users may need to work with their cluster administrators to set up the parameters in the submission scripts properly. for example, to achieve the optimal performance for capl, for each computing node, the whole node needs to be reserved for the job and the number of threads to run the job on each node needs to be specified correctly in the submission script.

a control file is also required for the user to run capl. the user needs to specify the input file format and path. currently the plink  <cit>  binary file  or the text file  formats are accepted by capl. other important parameters in the control file are the number of threads, number of nodes, number of subpopulations for the clustering algorithm, and the name of the result file. note that the numbers of threads and nodes need to be the same as the parameters specified in the submission script for the cluster. more details about the configurations of the capl software can be found in the software documentation.

availability and requirements
project name: capl

project home page: http://www.mihg.org/software_download/download_reg.php?software=capl

operating system: linux , windows , and mac os .

programming language: c++

license: gnu gpl

any restrictions to use by non-academics: none

download statistics:  <dig> unique outside users since the launch of the capl download site

authors' contributions
all co-authors contributed to writing the manuscript. rhc was the primary author on the manuscript, developed the statistical methods and the design for their implementation. mas contributed to the implementation of the software. erm provided input to study design and interpretation of data. all authors read and approved the final manuscript.

acknowledgements and funding
we thank the center for computational science  at university of miami for providing the computer cluster, which made our intensive simulations possible. this work was supported by a university of miami stanley j. glaser award and a grant from the alzheimer association .
