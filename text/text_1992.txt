BACKGROUND
the architecture of the rice inflorescence  is of major importance for rice breeding as it directly affects in the number of grains per panicle and hence final rice yield. the rice panicle is a complex branched structure consisting of a main axis  bearing lateral branches named primary branches  that bear so-called secondary branches , from which higher order branches may be observed . primary, secondary and higher order branches bear spikelets consisting of glumes  and florets. in rice, a spikelet contains a single fertile floret and a pair of sterile lemmas , subtended by a pair of highly reduced glumes called rudimentary glumes
 <cit> . the number of spikelets  per panicle is therefore related to the branching complexity . panicle branching is a highly complex process that is influenced by genetic, hormonal and environmental factors . several genes related to meristem formation or fate, hormone biosynthesis or response, that contribute to panicle branching complexity, have been identified in the cultivated asian rice species oryza sativa from quantitative trait loci  mapping populations and mutant analysis
 <cit> . however, qtl mapping of panicle branching complexity indicates that this trait is under the control of many genes, that remain to be identified
 <cit> . moreover, rice species display a wide range of morphological traits  as well as their ecological habitat and their tolerance to abiotic and biotic stresses. the genus oryza consists of about  <dig> species including only two cultivated species,o. sativa and o. glaberrima, which originate from asia and africa, respectively
 <cit> .

there is a wide range of rice panicle architecture among varieties concerning the number and order of branches, and axis elongation. natural inter-specific and intra-specific variations in morphological traits represent a largely untapped highly valuable resource for genetic improvement by breeding. for efficient selection of beneficial alleles for breeding, natural variation needs to be well characterized at the phenotypic and molecular genetic level. in addition, the study of natural variation is also important to understand the evolution of morphological traits and the molecular genetic mechanisms underlying them. to exploit the diversity of rice panicle resources, panicle morphological traits need to be identified and quantified. plant phenotyping involves screening large collections of accessions to facilitate the discovery of new interesting traits, and analyzing known phenotypic data to identify the genes involved in their diversity, to be able to use these genes in plant breeding. to collect these data, the usual procedure consists in laborious manual measurements on predefined traits such as panicle length, the number of branches, the order of branches, the number of grains, and grain size. depending on the degree of complexity of the panicle, manual phenotypic analysis is time consuming and it is impossible to evaluate and quantify all traits  to obtain an accurate overview of panicle architecture. moreover, manual phenotyping is often destructive for the plant making it impossible to use the same panicle to measure other traits. given the importance of gene discovery and crop improvement, there is thus an urgent need to automate such tedious and time- consuming tasks. the development of an easy high-throughput panicle phenotyping method should aim to standardize the measurement and extraction of panicle traits. in recent years, plant phenotyping research has led to the development of software for plant screening facilities. recent image processing solutions, such as traitmill and htpheno, offer general analysis for the measurement of plant height, volume and colorimetry
 <cit> .

other software provides 2-d image-based semi-automated processing for leaf phenotyping  and root data monitoring 
 <cit> . specific rice image-based solutions have been developed for phenotyping and involve the measurement of parameters such as grain size , panicle length, and the number of tillers
 <cit> . however, these methods could not be adapted to rice panicle structure phenotyping and require expensive equipment. ikeda et al <cit>  developed a software named pastar  and pasta viewer, to automatically extract values for length, number of branches, and number of grains from scanned panicle images. however, this software is under license, thus limiting access by the scientific community. recently, a program named smartgrain was developed to quantify seed shape and size. however, this software does not process the grain attached to panicles but only individual grains
 <cit> . in this context, it was important to develop an easy-to-use freely available open-source software based on 2-d image processing for the analysis of rice panicle structure.

here, we propose a java-based stand-alone application named p-trap  to easily quantify 2-d panicle traits. the labor-intensive processing is automated but post-processing options allow users to improve the quality of the analysis using their expert knowledge. the proposed pipeline has different tools: a tool to analyze panicle structure, and a spikelet/grain counting and shape analysis tool. the software allows automatic detection of the structure of the panicle from a spread panicle image consisting of different morphological traits that are not easily accessible through manual phenotyping. the spikelet/grain counting option detects the grains on the panicle, counts them and quantifies different shape parameters. the novelty of p-trap is the simultaneous analysis of panicle structure and grain counting/shape on the same image. these shape parameters can also be measured from images of spread seeds. the interface allows the two analyses to be performed at the same time  and extracts the different traits in different output formats  to facilitate data analysis and access to openalea platform facilities
 <cit> . in this study, we used this program to analyze the panicle structure of various accessions of o. sativa,o. glaberrima and o. barthii and to compare the results with manual measurements to check the robustness of the software.

implementation
p-trap is written in java with a user-friendly gui. the gui is built on top of the netbeans platform , which provides a modular underlay for the system’s architecture. the software provides different features for users to conduct their experiments and edit and collect the final results. it offers an editor for the input image, the panicle structure and the grains. the user interaction is mostly performed by using the mouse or keyboard shortcuts. in addition, developers can easily add new features to the application, as it is very modular.

panicle trait calculation pipeline
source images
the input is an rgb image of a spread panicle, fixed at the center of a white background. metal pins are used to fix the panicle onto the shooting scene .

in p-trap, the user first has to create a project. the source images can be then imported for processing using the gui. the project can contain one or several images. they can be processed individually or as a batch to support different workflow scales. basic pre-processing steps can be applied on the images. cropping and scaling processes are available and can be performed interactively using the gui.

panicle structure detection
the quantification of the panicle traits is based on the detection of the structure of the panicle followed by a conversion of the skeleton into a mathematical graph . the pipeline for converting the image of the panicle to a graph can be described as follows: input image i is converted to grayscale and then a gaussian blur filter with a kernel of size kernelsize is used to smooth the image. the smoothed image is locally thresholded by using the mean-c local thresholding approach
 <cit> , resulting in a binary image. the blurring filter is used to obtain a smooth binary image, and leads to a skeletal image containing fewer undesirable small spikes
 <cit> . due to variation in the brightness of the image, small holes may remain in the binary image. unless these holes are filled, corresponding cycles may appear in the skeleton, which may cause several problems during the skeleton analysis task . to solve this problem, small holes with an area ≤ minparticle are filled in to yield a “solid" binary image, isolid.

the isolid image is skeletonized by the zhang-suen’s  thinning method
 <cit> . a major drawback of this method is that the final skeleton may produce staircases, in which case the holt’s staircase removal method
 <cit>  is applied. a fast lookup-based implementation of zs method can be found in
 <cit> . to locate the panicle skeleton in the image, all the components in the skeletal image are searched. the biggest is returned as the panicle skeleton. the skeleton is returned as a list of points  that indicate the positions of the pixels of the skeletons in the image. the xy-origin of the image is at the top left of the image. this list is then converted to a graph g which is then cleaned and refined . cleaning is based on removing terminal edges whose length is less than a threshold minspike . an edge is terminal if one of the vertices it connects has one and only one neighbor.

panicle structure quantification
the calculation of the panicle structure traits is based on the mathematical graph produced from the panicle detection task. quantification includes two main steps: vertices classification and graph quantification.

vertex classification
different classes are used to distinguish the type of graph vertices, figure
 <dig>  the classification of vertices is explained in figure
 <dig>  the user identifies the start and end generating vertices  of the panicle structure by using the application’s gui, and then, each vertex of the graph is assigned to a class. the software classifies all other vertices either as terminal  or unclassified. the unclassified vertices are classified by using a breadth-first decomposition approach. vertex classification is based on the weight of the graph. we define the weight of the graph as the product of the number of vertices and the lengths of their edges . the length is calculated using the euclidean distance metric.

in the beginning, the primary vertices  are identified by decomposing the graph at the start-generating vertex  into a set of subgraphs. therefore, each neighbor of the main root is a root of a subgraph. among the roots of the subgraphs, the one that belongs to the “heaviest” sub-graph is chosen as the“winner” vertex and then classified as primary . the other roots are classified as secondary . similarly, the heaviest sub-graph is decomposed at its root into sub-graphs, and the new winner is classified as primary, and so on, until the end generating point is reached .

the remaining unclassified vertices are classified in the same way as the primary ones. at each secondary vertex , its parent sub-graph is decomposed and the winner vertex is classified as secondary. the other losing vertices are classified as tertiary and so on . the classification finishes when all the vertices in the graph are classified . the graph terminology is defined as follows: primary axis  is the main axis of the panicle , secondary axis  is a branch attached directly to the pa , tertiary axis  is an axis attached to a secondary axis ; quaternary axis  is an axis that is attached to a tertiary axis .

graph quantification
once each vertex of the graph is classified, the panicle’s traits can be quantified. the quantification task is described in figure
 <dig>  this task is based on the same breadth-first graph decomposition approach described earlier. a set of smaller sub-graphs is generated by the decomposition of the classified graph at its root. each sub-graph has a copy of the root vertex where the parent graph is decomposed, a set of edges, and a set of vertices with level classes lower than that of the root. in this context, if we decompose the main graph at each primary vertex into a set of sub-graphs, each will have a primary class vertex and a secondary axis. the length of this axis is the sum of the lengths of the edges passing through the primary vertex, the secondary vertices, and the terminal vertex that is the neighbor of the last secondary vertex and has the longest edge among the other terminal neighbors . similarly, we can find the lengths of the tertiary axes in a sub-graph by decomposing it at each secondary vertex into a set of smaller sub-graphs and calculating the length of the main path in each sub-graph. this approach is used to quantify the structural traits of the panicle from the generated graph. these traits are listed in table
 <dig> 

two different types of traits regarding to the panicle components. these are structural and grain related traits.

finally, the panicle diameter or primary axis diameter  is found by calculating the euclidean distance map  of the isolid binary image using an efficient algorithm described in
 <cit> . in edm images, each pixel has a value that defines the radius of the maximum ball . a circle with a small radius centered at the start generating point is defined as a search area. the pa_diameter value is then estimated as twice the square root of the maximum pixel’s value in this predefined search area.

detection and quantification of grains
in the rice panicle, grains are clustered in branches, may vary in size and may overlap. these characteristics can prevent detection of the seeds on the images. for this reason, we used a granulometric approach
 <cit> - <cit>  to find the “perfect” grain size and the other particles are then compared to this model. the same approach is used to detect seeds on the spread out panicle as well as spread out seeds. rgb images are converted to binary images in the same way as described in the section on panicle structure detection. granulometry determines the perfect size of the mathematical morphology opening disk by estimating the range to which the correct disk size belongs and by iteratively increasing the size of the opening disk by a predefined step parameter and calculating the differences between the original and the opened images. in this work, two levels of morphological opening are performed. formally, let ibinary be the binary image of the panicle obtained by low-passing the grayscale version of the grains’ image and applying the mean-c local thresholding method. furthermore, let dmin ≤ dm ≤ dmax be the disk size of a user-defined range. the morphologically opened version of ibinary by the structure element dm can be defined in terms of particles as:

  ibinary∘dm=p={pi}i=1i=np 

where p is the set of particles obtained by opening ibinary by dm, and np is their number. to get the optimal disk size, and hence the grain size, an objective function is defined as:

  Θ=npσ∀dm∈ 

where σ is the standard deviation  of the particle area.

by applying a brute-force algorithm for all disks in the range  with step parameter of  <dig>  the optimal disk is the one with maximum Θ in this range. in  if np < nmin, where nmin is a small integer, Θ is not considered. Θ is maximized, when np is big and σ is small, which implies an adequate disk size and consequently an appropriate grain size. once the adequate disk size is determined, the perfect grain size is just the median of the particles in the binary image opened at this disk size. the median is chosen because it has a good gross-error toleration ratio and 50% breakdown point
 <cit> . at this point, the first mathematical opening level is finished, with the perfect grain size
p^ and the optimal disk size
d^ <dig> identified.

at the second level, the size of the disk is smaller than in the first level
d^ <dig>  this ensures that the opening process removes only the thin parts of the panicle and leaves the grain particles in the branches intact. at this level, larger particles are detected in each branch by applying a morphological opening with a disk of size
d^2=d^12+c, where c is a small constant . additionally, the concave points of each particle are calculated by examining the concavity of the particle contours as described in
 <cit> . in this method, a circle of radius r with perimeter l is centered at each point of the contour of the particle. let Ω be the set of contour points of the particle pi. the concavity of a contour point ωj ∈ Ω, with j ≤ |Ω|, is measured as:

  concavity=arcinl 

where pi is the particle and
arcin is the length of the arc inside pi. in this work, a contour point is termed concave if its concavity ≥  <dig> .

grain quantification
table
 <dig> lists different grain traits. this section explains how they are calculated. given the perfect grain’s area ), and the area ) and the number of concave points |concave| of each particle pi, the final number of grains in each particle is calculated as:

  grains=αarea)+|2+1) 

where α ∈  <cit>  is a user defined parameter. in practice, the particle area is more accurate than the number of concave points to estimate the number of grains in the particle. for this reason, α is set to α =  <dig> . the grains counting method, based on a start-to-end grain detection pipeline, is illustrated in figure
 <dig> 
d^ <dig>   the image after the 2nd mathematical opening with disk size
d^ <dig>  and  results: small white circles represent the concave points.

calculations of grain traits
the previously described method of grain detection is designed to detect both spread out and clustered grains. however, spread out grains without the panicle can be detected without all the computation involved in the proposed method. in this context, we used a simpler pipeline  just for the detection of spread out grains. basically, given a binary image ibinary, a mathematical opening with a small-predefined disk kernel can be used to remove the juts from the seeds and to smooth the contour of the grain. the grain traits listed in table
 <dig> are found as the following: 

• length: the length of the longest line between any two points in the contour.

  length=maxΔ,∀ωj,ωk∈Ωandj≠k 

  where Δ is the euclidean distance metric.

• width: for any two points in the contour, the width is the length of the longest line perpendicular to the length’s line.

• area: the number of pixels of the grain in the binary image:

  area=|pi| 

• compactness: the relation between the area of the grain and its contour 
 <cit> , <cit> . a normalized accurate compactness measure can be defined as
 <cit> :

  compactness=12π×μ <dig> μ <dig> +μ <dig>  

 where μ.,. is the central moment of the specified order.

• ellipticity: measures the ellipticity of the grains
 <cit> .

  ellipticity=16π2μ <dig> μ <dig> −μ <dig> μ <dig> ifμ <dig> μ <dig> −μ <dig> μ <dig> ≤116π2116π2μ <dig> μ <dig> −μ <dig> μ <dig> otherwise 

• ar: the aspect ratio is the relation between the major  and minor  axes of the grain.

  ar=lengthwidth 

p-trap architecture and gui
the system is composed of the  <dig> main modules listed in table
 <dig>  figure
 <dig> illustrates the processing pipeline interaction between the different modules and the user interface. the main gui window has a set of areas: project manager, commands, and workspace . in the project manager, the user can find the project folders, which include the source and processed images and the results sub-folders. the commands area is composed of a menu and toolbar, which increases accessibility and makes it easy to find a specific command. in the workspace, many different floating windows can be displayed at the same time. in this area, the user can review and edit the structure results in the structure editor. the same buttons are used to perform the same tasks in all windows. for instance, the user can view and edit the results of the grains in the grain editor and use the save button  to save the changes . the same button can be used to save the corrected result of the structure in the structure editor or the cropped image in the image editor. in addition, each editor is supplied with a context menu, keyboard-driven and mouse-driven commands. the user can correct a vertex in the structure editor by moving, deleting or connecting it. furthermore, the class of a vertex can be changed and the application will try to adapt to the change or display an error hint if detected, additional file
 <dig> 

the main p-trap system modules differ depending on the task performed and on user visibility. the three main modules are core: performs an internal task, gui: manages and produces visual components, and link: links two or more modules or the user’s commands and the core system modules.

p-trap output files
the data collected from the processed images are exported in two different formats: xml and csv. the xml format is used to store the panicle structure and the grains particles, and can be exported for other applications such as openalea after conversion to the mtg  format
 <cit> . each analysis run produces two files: .ricepr and .ricegr for the structure and the grains, respectively. more information on the structure of the output files is available in additional file
 <dig>  a csv file is also generated to allow direct visualization of the results and easy transfer to spreadsheet software . the results of the quantification of the panicle and grains are stored in files with two different levels of details. these csv files are: 

• maintraits.csv: contains the main general data about the panicle.

• grainstraits.csv: contains the average values of all the data on the grain’s traits.

• alltraits.csv: contains detailed data on the traits of each branch.

in addition to grainstraits.csv, each image has a result file that describes each grain trait individually in the particles folder.

RESULTS
to evaluate the accuracy of p-trap,  <dig> different images of panicles from o. sativa, o. glaberrima and o. barthii were tested in both structure and grain counting tasks. images were captured using a digital camera  and saved in the jpeg format . image size was 2592 ×  <dig> with  <dig> dpi .

for grain detection and quantification, either rgb images of spread out panicles or images of spread out seeds without panicles can be used . specific images of spread ou seeds have been captured using a digital camera  with a size of 3648 ×  <dig> at  <dig> dpi in the jpeg format .

the structure finding used by p-trap was evaluated and tuned by an expert using the obtained graph, and the options from the gui, and was compared with results obtained by a field-operator created results . the grain counting method was compared to two academic methods, a lab counting  and the fo. the parameter values  used for the tests were minspike =  <dig>  kernelsize = 3 ×  <dig> and minparticle =  <dig> for image to graph conversion. for grains counting, dmin and dmax were set to  <dig> and  <dig> pixels, respectively.

panicle structure
for evaluation the panicle structure, only the main manually measurable traits  were used for the comparison with the values obtained by p-trap. table
 <dig> summarizes first the differences between the results obtained by p-trap and manual measurements by comparing data before and after expert evaluation and, second, the differences between corrected p-trap results  and the results obtained by the fo .

the percentage deviation in the processing of  <dig> images between 1) the p-trap automatic results  and the corrected data after expert evaluation and 2) between the corrected p-trap data and field operator results . the factors assessed  were rachis length , number of nodes , number of secondary axes , average length of secondary axes , number of tertiary axes  and the number of grains . the results were calculated for the mean of differences, standard deviation , and the deviation sign .

considering all the measured traits, the average deviation between the p-trap automatic results and the corrected ones after expert evaluation was  <dig> %, with deviations ranging from  <dig> % to  <dig> %. overall, these values indicate that p-trap provides robust detection and quantification of panicle structure traits with only a little post-processing required by the user. the average deviation between the corrected p-trap results and the fo was  <dig> % . the higher deviations were caused by the nodes and the number of tertiary axes . the high deviation observed in the values of ta_nb after expert evaluation compared to fo might be due to the fact that panicles are sometimes not properly spread out and branches overlapped . this problem can easily be corrected by spreading the panicle out better. furthermore, the panicle images are fixed to the background by metal pins. in some cases, the pins falsify the elongation of the branches. the difference in the number of nodes observed between corrected p-trap values and fo might be related to a difference in the evaluation of this feature between the software and the field operator. in the software, each secondary axis is born by an individual node. however, in some accessions, secondary axes are born by the same node and the field operator considered these as a single node.

compared to the fo, raw p-trap results are more than 90% correct, which is acceptable for this difficult problem. these comparisons indicated that p-trap provides reliable quantification of the panicle traits as long as the panicle is properly spread out against the background.

number of grains and grain traits
for the grain counting evaluation, results of the p-trap, fo, lc and academic methods are listed in table
 <dig>  these academic approaches are the watershed transform 
 <cit>  and the center supported segmentation 
 <cit>  methods . as it is not appropriate to apply these methods directly to the original binary images , they were applied to the images obtained from the second level mathematical opening, where the thin parts of the panicle are removed and only the grain clusters remain .

the percentage of deviation from  <dig> images processing has been compared between the p-trap automatic results , the field operator , lab counting , and two well-known academic segmentation approaches: watershed  and center supported segmentation . the results were calculated for the mean of differences, standard deviation , and the deviation sign .

an average deviation of  <dig> %  was observed between raw p-trap results and fo. the results also had a deviation of  <dig> % from lc . in contrast, the ws approach had an average deviation of  <dig> % . regarding lc, ws had an average deviation of  <dig> % . the css method had an average deviation of  <dig> % . the comparison of css and lc had an average deviation of  <dig> % . p-trap outweighs all other methods and produces the lowest deviation and standard deviation. which ensures the stability and accuracy for when tested to different panicles with different type of grains. the ws method is widely known to be efficient in segmenting overlapped circular shapes
 <cit> , but under-segments elliptical shapes when the overlap ratio is high
 <cit> . furthermore, the watershed over-segmentation problem can be clearly observed when the contour is noisy . although the css method is slightly better than the ws approach, in this context, it was difficult to set up an overlapping threshold for the grains that copes with the variation in the grains. the parameters used for this method were samplingfactor =  <dig>  saddleheight =  <dig>  overlappingfactor =  <dig> .

in overall, the p-trap method gave a good estimation of the number of grains on the images tested. it was efficient in finding the “optimal” disk size for mathematical opening. the difference between p-trap and fo may be a consequence of the overlapping of the grains which makes it difficult to estimate the exact number of grains . nevertheless, in contrast to other methods or applications, the used method has the advantage of detecting and counting grains directly on the panicle images. in addition, p-trap has different options that can be adapted to work with color and grayscale images .

finally, grain traits  were measured using the same set of images of spread out panicles in addition to  <dig> images of spread out seeds . additional file
 <dig> presents two different examples of the detection of grain traits performed by p-trap from the two types of images. averaged values of seed traits in output files result from individual seeds . the ability of p-trap to detect and quantify seeds directly on spread out panicles makes it possible to analyze seed shape traits in relation to their position in the panicle. in this context, and in comparison to the only available closed-source application , both p-trap and smartgrain have pros and cons. smartgrain has two methods of segmentation, color and grayscale. the color segmentation method needs the user to define the grain and background colors. the grayscale segmentation method has a problem. it is so sensitive to variations in lightness . these shortcomings can be obstacles if the source images are grayscale and have a small illumnation variation. in contrast, detection of grain traits is one of the three main tasks p-trap offers. concerning segmentation, p-trap uses a local adaptive thresholding method  for grayscale images. for colorful images, p-trap also provides an option which, like smartgrain, asks the user to select the grain and background colors. however, as mentioned above, the main advantage of p-trap is that it can detect grain traits on the branches while smartgrain does not have this feature.

p-trap robustness and extensibility
some of the requirements for p-trap were user-friendliness, multiple platform support, extensibility, and compatibility with other plant inflorescences with similar structure. p-trap also uses some general methods used for image processing. the challenge in detecting structure was to convert the panicle to a graph, and to quantify it. it has been shown that the thinning step is very important in obtaining the structure of the objects in binary images. many applications depend on the skeletonization process to minimize the amount of data to be processed, e.g. quench function
 <cit> , to extract accurate features for image matching
 <cit> , to perform image warping
 <cit> , or to analyze plant root structure
 <cit> .

the skeleton was efficient in revealing the structure of the panicle, but not enough to accurately quantify the panicle. therefore, the panicle skeleton was converted to a mathematical graph, which was more flexible. graphs and contours are very efficient to deal with skeletons
 <cit> - <cit> . in many cases, the skeleton contains small insignificant branches and cleaning has to be applied to clean the skeleton and preserve its structure at the same time. different spike pruning approaches are available, such as the distance transform
 <cit> , the number and distribution of the maximal disk
 <cit> , branch length
 <cit>  and so on. in this work, the skeleton was initially converted to a graph and the graph was then cleaned by removing all spikes that were shorter than a threshold minspike . in addition, the single-grained branches in the panicle were not significant and had to be removed. skeleton processing, graph processing, and the quantification methods are implemented in independent modules so any improvement or extension to any of these processes can be made very easily. in addition, these modules can be reused in other projects. concerning the detection and quantification of the grains, the challenge was to directly detect the grains on a panicle with overlapping grains and variations in size. the detection approach, particle analysis, and the central moments are implemented as modularly as possible to allow for future extensions and re-usability.

CONCLUSIONS
p-trap, a freely available application for processing plant panicles is described here. this tool will be very useful for exploiting the rice diversity resources and for categorizing rice in different groups, based on inflorescence phenotyping. the tool can be used for analysis of architecture , for analysis of genetics  and for breeding programs. moreover the ability of p-trap to detect and quantify seeds directly on spread out panicles makes it possible to analyze seed shape traits in relation to their position on the panicle .

the rice inflorescence varies widely among accessions and species in terms of branching structure and seed shape. the development of software able to automatically extract quantitative values of panicle structure and seed traits will facilitate the phenotyping of these morphological traits. a complete framework for analyzing rice panicle images is proposed in this paper. the application provides several editors for the input image, the detected structure, and the grains. the structure quantification method was compared to a manually created ground truth and the results showed an accuracy of about 90%. grain detection and the counting method were compared to two academic methods as well as to ground truth and p-trap outperformed the other methods. however, the application, especially the method for detecting the skeleton of the panicle and converting it to a graph has one main shortcoming. it may not correctly detect overlapped branches, and in some cases, this may require some manual post processing to correct the structure. however, this problem can be minimized by carefully spreading out the panicle on the background. on the other hand, p-trap can efficiently deal with different rice panicles regardless of their size or complexity. finally, the p-trap processing pipeline is implemented in a highly modular environment and developers can easily improve the application. a further important feature of p-trap is that the data are stored in xml files, which can be used in other applications such as openalea, a platform dedicated to plant architecture.

in addition to p-trap’s fully featured gui, some other features are: 

• free open source application

• platform-independent

• written on top of a well-known modular platform 

• user-friendly interface

• allows the users to save the processed image.

the application comes with different installers that are available at the application’s website. the source code and a sample project can be found in additional files
 <dig> and
 <dig>  respectively. for details of the gui features, the reader should refer to the user manual in additional file
 <dig> 

availability and requirements
project name: p-trap

project home page:http://bioinfo.mpl.ird.fr/index.php?option=com_content&view=article&id=102&itemid= <dig> several video tutorials can be found at this url.

operating system: platform independent

programming language: java

other requirements: jre ≥ <dig>  to run the application. to compile the source code, the netbeans platform ≥ v. <dig>  ide, java matrix package  ≥ v. <dig> . <dig> and java advanced imaging  ≥ v. <dig>  libraries are needed.

license: gpl v3

any restrictions to use by non-academics: as specified by gpl v <dig> license.

abbreviations
csv: comma separated values; xml: extensible markup language; mtg: multiscale tree graph; css: center supported segmentation; fo: field operator result; p-trap: panicle traits phenotyping; pastar: panicle structure analyzer for rice; pa: primary axe; pb: primary branch; sa: secondary axe; sb: secondary branch; sp: spikelet; ta: tertiary axe; tb: tertiary branch; qa: quaternary branch; jama: java matrix package; jai: java advanced imaging.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
all authors contributed to the development of p-trap ha, hrs, and sj managed and organized the project. ha, sj, ag, and ml provided the biological background, the testing samples and tested the results during development. fa, and ha, designed and implemented the algorithms and tested the software. pl contributed to local installation, maintenance and evaluation of p-trap software. all the authors read and approved the final manuscript.

supplementary material
additional file 1
skeleton conversion to mathematical graph. the technical description of the algorithm for converting the skeleton into a graph.

click here for file

 additional file 2
user manual of p-trap. the description of the software and a set of examples of how the user can install and use the application.

click here for file

 additional file 3
 <dig> images of spread out panicles. a set of images of spread out panicles used to test the application for the detection of the structure, counting the grains or spikelets and for the detection of grain traits.

click here for file

 additional file 4
 <dig> images of spread out seeds. a set of images of spread out grains used to test the application for the detection of grain traits.

click here for file

 additional file 5
example of overlapping grains. samples with extremely overlapped grains.

click here for file

 additional file 6
sample images processed by p-trap and by other approaches. several different images processed by p-trap and by other approaches.

click here for file

 additional file 7
p-trap source code. the netbeans project that contains the source code of the application.

click here for file

 additional file 8
test data for the p-trap software. a complete p-trap project, can be used in the application for tests.

click here for file

 acknowledgements
hr shahbazkia would like to thank d fontenille  for the reception facilities. the authors would like to thank joe tohme  for the field phenotyping facilities and for the production of spread out panicle images. harold chrestin is thanked for the spread out seed images. this work was supported by ird institutional funding, grisp funding , agropolis fonudation and cariplo foundation co-funding .
