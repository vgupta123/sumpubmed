BACKGROUND
the alignment of multiple sequences is essential in the analysis of protein sequences  <cit> . in contrast to pairwise alignment, multiple sequence alignment  can reveal subtle similarities among large groups of proteins. such information can be used in phylogenetic analysis  <cit> , function prediction  <cit> , hmm building  <cit> , finding consensus sequences and in the identification of residues critical to function. due to the importance of multiple sequence alignments in such a wide range of applications, a considerable amount of interest has been focused on improving the accuracy of msa algorithms. two basic modes of sequence alignment exist: global, i.e. over the entire length of the sequences  <cit> , and local, in which only high-scoring areas are considered  <cit> . in general, database search algorithms use the local strategy  <cit> , while most msa algorithms use the global strategy. however, two noticeable exceptions are the two local msa methods poa  <cit>  and dialign  <cit> . global methods tend to outperform local methods when sequences are related over their entire length  <cit> , while local methods are superior in multiple domain cases when sequences may only share one common domain  <cit> . since it is rarely known how sequences are related prior to the alignment, a method attempting to combine both local and global features was proposed by notredame et al.  <cit> . although this method produces good alignments  <cit>  it suffers from being time consuming. recently two new approaches, mafft  <cit>  and muscle  <cit>  were proposed. both methods claim to produce alignments as accurate as those by t-coffee while being considerably faster. the high accuracy is achieved by two iterative refinement strategies that are applied after an initial 'rough' alignment has been found. an important task for multiple sequences alignment algorithms in the future lies in the annotation and analysis of complete proteomes  <cit> . for an algorithm to be successful in such a setting it must produce high quality alignments consistently and, due to the volume of data, in a computationally feasible way. with these two goals in mind we developed kalign, a global, progressive alignment method. we enhanced this approach by employing an approximate string-matching algorithm to calculate sequence distances and by incorporating local matches into the otherwise global alignment. we demonstrate that kalign is well suited both in terms of speed and accuracy to deal with the challenges posed by large-scale comparative genomics.

algorithm
alignment strategy
the kalign algorithm follows a strategy analogous to the standard progressive method for sequence alignment  <cit> . pairwise distances are calculated, a guide tree is constructed and sequences/profiles are aligned in the order given by the tree. in contrast to existing methods, the wu-manber approximate string-matching algorithm  <cit>  is used in the distance calculation and optionally in the dynamic programming used to align the profiles.

distance estimation and tree building
in progressive alignment the order in which sequences are aligned is crucial for accuracy. the goal is to align the most similar sequences first, to avoid errors in early stages of the alignment that cannot be corrected later on. this is normally accomplished by building a guide tree that dictates the order of pairwise alignments. the tree is typically built from a matrix of pairwise distances between all sequences, e.g. using the upgma  <cit>  or the neighbour-joining  <cit>  method. performing all pairwise comparisons has quadratic complexity, and hence this step tends to dominate the running time of most progressive methods when aligning many sequences. performing all pairwise alignments is slow but gives better distance estimates than approximate techniques, e.g. the k-tuple method employed optionally by clustalw. in kalign, sequence distances are estimated based on a novel method employing the wu-manber approximate string-matching algorithm. this strategy enables kalign to estimate sequence distances more accurately but as fast as the k-tuple method. we will first discuss the wu-manber algorithm in some detail and then explain how it is incorporated into kalign.

wu-manber algorithm
the wu-manber algorithm is an extension to the exact baeza-yates-gonnet algorithm  <cit>  that allows string-matching with mismatches. the distance between two strings is measured by the levenshtein edit distance. two strings a and b have an edit distance d if a can be transformed into b by applying d mismatches, insertions or deletions. the wu-manber algorithm has a complexity of o where t is the length of the text string and k the number of errors allowed. previously, protein sequences were commonly searched with patterns 2â€“ <dig> long  <cit> , and hence we choose to search with likewise short, three-residue patterns as well, allowing only one error. since the maximum number of patterns under these setting is  <dig> and only one error is allowed, all input sequences can be searched efficiently. a minor modification of the standard algorithm  <cit>  allows us to search the sequences with  <dig> patterns at once, which speeds up this step. the benefit of using approximate string-matching when comparing protein sequences is obvious in two scenarios. firstly, if sequences have an even degree of similarity along their entire length rather than patches of high identity, the standard k-tuple method fails to detect the similarity. for example, imagine comparing two sequences 'aaaaaa' and 'aalaal'. even though the sequences are 66% identical, the standard k-tuple method  finds no common patterns between the two sequences while the wu-manber algorithm finds  <dig> common patters . similarly, sequences 'aaaaaa' and 'alalal'  share no exact patterns, yet  <dig> patterns with mismatches. secondly, sequences that are less than 30% identical often share few, if any strings of length  <dig>  so the resolution of the k-tuple methods starts to fail. however, shared mismatch patterns can still be readily found and enable the wu-manber algorithm to report meaningful distances even between highly divergent sequences. a drawback of using pattern matching for distance estimation is that many spurious matches are reported. kalign overcomes this problem by considering the locality of the matches found as well as their total number. all matches add a score  to the diagonal on the dynamic programming matrix on which they occur. in similar sequences one diagonal will get a very high score compared to the rest since many matches occur on the same diagonal. however, in distantly related sequences the distribution of scores is less clear and many diagonals will receive relatively low scores. therefore, the sequence similarity in kalign is defined as the sum of the three highest scoring diagonals found. by including three diagonals, only matches that are likely to be part of the final alignment are considered when estimating similarity, while many spurious matches are excluded. although this method is marginally slower than the standard k-tuple counting method, it is much faster than performing all pairwise alignments. the pairwise similarity scores computed in this way are used by the upgma clustering method to construct the guide tree.

progressive alignment
at each internal node of the guide tree two sequences, two profiles or one sequence and one profile are aligned. optionally, kalign can use wu-manber matches as anchor points during the alignment phase, which requires two extra steps in addition to the dynamic programming. this option is intended to improve accuracy in cases of discontinuous alignments, e.g. if a domain has been inserted or deleted. it speeds up the dynamic programming, but the gain is cancelled out by the time to perform the extra steps.

dynamic programming
kalign employs the global dynamic programming method using affine gap penalties as described in durbin et al.  <cit> . residues are assigned to three states  which are interconnected by arrows representing transitions. the model has been modified to disallow a gap in one sequence to be immediately followed by a gap in the other sequences. normally, three matrices of size   are used to represent these states. when these 'state-matrices' are filled, the final cell contains the maximum alignment score, and a traceback procedure  is used to retrieve the actual alignment. to reduce the amount of memory required we combined two known strategies. firstly, an additional matrix size   is used to store which transition occurs in every cell of the dynamic programming matrix  <cit> . by doing so, the optimal alignment can be read off this 'trace-matrix' by looking at which transitions lead from the final cell to the first cell. secondly, since the three 'state-matrices' are no longer needed to perform the traceback procedure, they can be reduced into one-dimensional arrays because each cell in the dynamic programming matrix only depends on values from the previous column. thus, instead of using  <dig>  ) memory we now only need  <dig>  +  ) memory. in practice, this translates into a ten-fold reduction in memory requirement. the reduction in memory reduces the number of cache-misses and makes the dynamic programming substantially faster. to our knowledge, the combination of these two methods has not been previously described. if the user wishes to use the option of including wu-manber matches as anchor points during the alignment phase, two additional steps are performed:

 <dig>  consistency check
the task of the consistency check is to sieve through the thousands of matches found between two sequences and find the largest set of matches that can be included into an alignment. for example: a pattern matching at position  <dig> in both sequences is inconsistent with a pattern that matches sequence a at position  <dig> and sequence b at position  <dig>  matches found in both sequences  are plotted at the corresponding position into the dynamic programming matrix. since it is possible for several patterns to match at the same position the number of matching patterns is recorded. the filled matrix is analogous to a homology matrix containing substitution scores in standard sequence alignment. a modified version of the needleman-wunsch algorithm is then used to find the path through the dynamic programming matrix that contains the highest number of consistent patters. because we are interested in local matches here, no gap penalties are used. finally, all shared matches that occur on too short diagonals are considered spurious and are excluded. we found that a cutoff of  <dig> residues long diagonals worked well.

 <dig>  updating of pattern match positions
including matches in initial pairwise alignments involving regular sequences is relatively trivial. however, deeper into the guide tree, profiles are aligned both to each other and to sequences. the updating step adjusts the absolute position of matches found within sequences to their relative positions within the profiles generated by the dynamic programming step. for example, a match at position  <dig> in sequence a can end up in the 55th column in a profile, if  <dig> gaps were inserted anywhere in sequence a before position  <dig>  the matches initially 'tied' to individual sequences are thus assigned to matches within profiles and can be used in the next pairwise alignment step.

scoring system
like other alignment programs based on dynamic programming, kalign uses a substitution matrix and affine gap penalties. the choice of matrix and gap penalties has been the subject of previous studies  <cit> . the most commonly used substitution matrices are blosum  <cit>  and pam  <cit> . a common idea is that similar sequences should be aligned with 'hard' matrices like pam <dig> or blosum <dig> while more distantly related sequences align better using 'soft' matrices like pam <dig> or blosum <dig>  for instance, the commonly used program clustalw adjusts the choice of substitution matrix accordingly. however, in agreement with vogt et al.  <cit> , we found no significant difference in alignment quality when using a soft matrix instead of a hard matrix on similar sequences. however, in the case of more distantly related sequences, hard matrices generally produce worse results than soft ones. simply put, similar sequences are easy to align and the choice of substitution matrix does not noticeably affect the alignment quality. however, the correct alignment of dissimilar sequences requires using 'soft' matrices. therefore we decided not to implement a complicated scheme that adjusts the choice of matrix but use a single soft matrix in all cases. we found little difference in alignment quality between using the blosum <dig>  pam <dig> or gonnet <dig>  <cit>  matrices and arbitrarily chose the gonnet <dig> matrix in combination with the parameters reported by vogt et al.  <cit> .

implementation
the kalign algorithm was implemented in standard c.

methods
to compare kalign to other msa programs, the following test sets were used: the balibase  <dig>   <cit>  test set, prefab  <dig>   <cit>  and a new large test set.

balibase
the balibase test set is a collection of alignments derived from structural databases or from manual alignments in the literature. we used the first five categories in balibase version  <dig> , containing  <dig> alignments. each category represents some characteristic such as long or short sequences, high or low sequence identity, or large n/c terminal deletions or extensions. reference alignments in balibase contain only few, on average  <dig>  and partial sequences. as noted before  <cit> , this unnatural bias in the test set favours certain methods. we believe the real challenge lies in aligning large numbers of full-length sequences, which is currently not covered in balibase. the diversity of the test set is further reduced because several sequences appear in more than one reference alignment.

prefab
prefab exploits the abundance of pairwise structural alignment to create a multiple alignment test set. each case in prefab consists of a pairwise reference alignment and a set of sequences containing the two reference sequences plus  <dig> additional sequences that were obtained by querying a database with the reference sequences. to perform a test, the set of  <dig> sequences are aligned, the pairwise alignment of the two reference sequences is extracted from the resulting msa, and is compared against the pairwise reference alignment. prefab version  <dig> contains  <dig> individual test cases, each based on a single pairwise alignment. compared to the  <dig> test cases in balibase this seems impressive, but each balibase test case is an alignment of more than two sequences and in effect balibase contains  <dig> pairwise alignments.

a drawback of both balibase and prefab is that sequence-based msa methods strive to give evolutionarily motivated alignments that are inherently distinct from the structurally motivated reference alignments in the databases. in structural alignments, residues are assigned to the same column if they are considered structurally equivalent. in evolutionary alignments, aligned residues are thought to have originated from the same residue in a common ancestor. although these two interpretations of the data often overlap, it is not always the case. consider the balibase alignment in figure  <dig>  clearly, the sequences are very dissimilar from each other  and it is virtually impossible for any sequence-based alignment algorithm to even remotely reproduce this alignment. even given structural information this alignment seems to be difficult since the corresponding reference alignment in balibase  <dig>  differs by 75% from the one shown in figure  <dig>  comparing structural and sequence-based alignments can thus be problematic.

large testset
as balibase and prefab alignments are relatively small , we felt the need to examine performance on larger alignments. since no real testset with large alignments exists, we were forced to use simulations to create this dataset. we used rose version  <dig>   <cit> , a program that simulates the evolution of sequences in a probabilistic fashion. given a specified number of sequences and a target average evolutionary distance between them, rose constructs a random phylogenetic tree, a random ancestor sequence at the root, and simulates evolution by applying substitutions, insertions, and deletions to create the sequences along the edges. as all the events in the history of the sequences are known, the true alignment is known and is recorded. although some aspects of the simulation may be artificial, it is the only method that provides 100% knowledge of the true alignment. obviously, alignments and sequences cannot be simulated perfectly by an evolutionary model. for example, two sequences modelled at a pam distance of  <dig> might resemble real sequences at a pam <dig> more closely than at pam <dig>  however, it is undeniable that also simulated sequences will become more and more difficult to align with increasing pam distances. alignment programs will align distant sequences differently, and based on this a meaningful and informative comparison between the programs can be made. a large test set such as this offers the opportunity to analyze the running times of alignment methods in depth.

quality measure
the alignment quality of each method was determined by calculating the sum-of-pairs score  according to thompson et al.  <cit> . this score reflects the percentage of correctly aligned residues determined by comparison to a reference alignment, and has little in common with the likewise called sum-of-pairs score often used as an objective function. we do not use the column score   <cit>  as we feel this score is inadequate and does not reflect the biological correctness of alignments. for example, even if 99% of the sequences are correctly aligned, the column score can become zero due to a single misaligned sequence. in practice, the cs score gives lower accuracies than the sp score, but the ranking of the methods remains the same .

alignment programs
we compared our method kalign  to mafft version  <dig>   <cit> , muscle version  <dig>   <cit> , clustalw version  <dig>   <cit> , dialign version  <dig> . <dig>  <cit>  and t-coffee version  <dig>   <cit> . a comprehensive review of the individual programs and their options is beyond this paper. unless otherwise stated, we used the programs tested here in their highest accuracy mode. in the case of mafft, four different scripts govern whether fast fourier transform  and iterative refinement are used or not. our experience in using mafft revealed only small differences in quality and speed between the scripts using fft or not . we used the fftnsi script throughout because it is slightly faster than the corresponding nwnsi  script. the muscle program, similar to the nwnsi script of mafft, was run using all of the available refinement options.

RESULTS
balibase
the average sum-of-pairs score was calculated for each category in balibase and the results are shown in table  <dig>  importantly, only conserved blocks in the balibase alignments were used for evaluation. on this test set, kalign performs slightly worse on average than mafft and muscle. we do not believe that these differences are meaningful due to the small size of alignments  in balibase and due to the fact that there are so few of them . unfortunately, some of the methods tested here were developed using balibase making comparisons to other methods problematic. for example, both clustalw and muscle were trained on balibase  <cit> . given that we did not make an attempt to train on balibase we believe kalign performs considerably well in general, and especially well in category  <dig> and  <dig> 

prefab
due to the large number of test cases in prefab we limited this analysis to clustalw, kalign, muscle and mafft. the results  agree with the results obtained from balibase, with kalign being approximately as accurate as muscle and mafft. it is worth noting that in  <dig> out of the  <dig> cases kalign produced better alignments than muscle and in  <dig> cases better alignments than mafft. in  <dig> alignments the difference in accuracy between kalign and muscle was less than 1%. similarly, there were  <dig> alignments in which the difference between kalign and mafft was less than 1%. based on this we conclude that muscle, mafft and kalign are equally accurate on prefab, and that all three methods are more accurate than clustalw. kalign was between  <dig> and  <dig> times faster than the other methods in completing all  <dig> alignments.

large testset
to further evaluate the quality and speed of multiple alignment methods, we used our own large testset with up to  <dig> sequences per alignment, and up to an evolutionary distance of  <dig> pam. t-coffee and dialign were excluded from these tests due to computational limitations. to investigate the effect of the wu-manber algorithm, we generated a series of alignments with rose, each containing  <dig> sequences with an average evolutionary distance ranging from  <dig> â€“  <dig> . we tested the kalign algorithm with the wu-manber string matching enabled  and disabled . to make a fair comparison with other methods, we included versions of mafft and muscle with the iterative refinement disabled  and clustalw run with the '-quicktree' option. in accordance with the results obtained on the balibase and prefab test set, clustalw-quicktree is least accurate method. the alignment procedures used in kalign-ktuple, muscle-fast and mafft-fast are comparable and as expected these methods are equally accurate. the default kalign algorithm using the wu-manber algorithm becomes more accurate than the k-tuple based methods at high evolutionary distances. this confirms that the wu-manber method is superior to the k-tuple method traditionally used to estimate sequence distances and that both mafft and muscle could potentially benefit from using it. in order to examine the effects of evolutionary distance and number of sequences, we generated a test set containing  <dig> alignments. the evolutionary distance was varied in steps of  <dig> up to  <dig> and the number of sequences was gradually increased from  <dig> to  <dig> sequences. for each individual alignment in this test the winner, i.e. the program with the highest score, was determined . kalign  generally wins in difficult cases of high evolutionary distance and in cases with many sequences. the cases where kalign does not win are alignments with few and highly similar sequences. since these are relatively easy alignments the differences to kalign are insignificant. as shown in figure 2b, if a margin of 2% is required to call a winner, kalign wins all the non-tied cases with only three exceptions that are won by muscle. to further demonstrate the differences in accuracy and to analyze the running time in detail, we focused on one row and one column in figure  <dig>  the row was taken at  <dig> sequences, varying the evolutionary distance , and the column at an evolutionary distance of  <dig>  varying the number of sequences . in contrast to figure  <dig>  the tests were repeated three times and the average scores are plotted with error bars. figure 4a reveals that there is little difference in terms of quality between the methods at low evolutionary distances. however, at high evolutionary distances, kalign is superior to mafft and muscle. in comparison to the other methods, clustalw performs very poorly in this test. the analysis of the running times , reveals a strong tendency of mafft and muscle to run increasingly slower with increasing evolutionary distances. in contrast, kalign's complexity is not affected by evolutionary distance and is consistently faster than the other methods tested. clustalw on the other hand, which starts off as the slowest method, becomes slightly faster with increased evolutionary distance and is in fact faster than both mafft and muscle at  <dig> pam. the number of input sequences has a big effect on the running time of each method as the complexity of all alignment algorithms depend on it. conversely, the more sequences that are used in an alignment, the better an alignment algorithm should perform. to our surprise, the quality of all methods except for kalign decreased when the number of input sequences was increased . the difference in alignment quality between kalign and the next best method muscle reaches 15% at  <dig> sequences. the analysis of running time versus increased number of sequences reveals a clear advantage of the kalign algorithm over other methods . again muscle is the slowest program; above  <dig> sequences it is on average four times slower than the second slowest program, clustalw. kalign takes  <dig> minutes to align  <dig> sequences while the same alignment takes  <dig> minutes using muscle. although we consider alignment quality to be the more important than speed, it is clearly advantageous in practice to have a fast alignment method.

CONCLUSIONS
in this paper we present kalign, a novel multiple sequence alignment algorithm based on wu-manber approximate pattern matching that combines high quality with high speed. compared to existing programs, kalign performed much more robustly when aligning large amounts of sequences or distant sequences in a large-scale benchmark of generated alignments. in terms of computational efficiency, kalign is superior to the other methods, and readily aligns hundreds of sequences in minutes on a normal desktop computer. coupled with the fact that kalign gives very accurate alignments, this makes kalign a very attractive overall method. the high accuracy of kalign is due to the innovative use of the approximate wu-manber string-matching algorithm. this allows sequence distances to be accurately estimated even in difficult cases. precise sequence distances generate good quality guide trees that, in turn, lead to good alignments. at the same time, wu-manber string-matching is very fast and dramatically cuts down the time required for the distance estimation step that dominates the running time of most alignment programs. the strategy detailed here can, in principle, be applied to any other progressive alignment method. even when disregarding the results on the new large testset, kalign's performance on balibase and prefab is impressive especially when considering that unlike other methods kalign was not trained on either test set, and that other methods with similar performance are much slower.

availability and requirements
the kalign program and a kalign server are freely available at  or by request from the authors.

authors' contributions
tl had the idea of using a fuzzy-string matching algorithm in multiple sequence alignments, implemented the method and carried out the evaluation. ells supervised the work. all authors read and approved the final manuscript.

