BACKGROUND
biologists are gradually recognizing that pathways, rather than individual genes, control tumorigenesis  <cit> . moreover, altered pathways have recently been reported to be crucial factors for colorectal and breast cancer  <cit> . the present approach  was motivated by the inference of genetic interactions, which have potential for inferring pathways in yeast  <cit> . because genetic networks derived from yeast are likely to be conserved in humans, the prediction of genetic interactions may shed light on the pathways of complex human diseases, such as cancers and type ii diabetes. in addition, gasa can also be applied to infer other types of networks, for example transcriptional regulatory networks. with the abundant sets of microarray gene expression data  now available, inferring genetic interactions has become feasible, and various approaches have been proposed. most of the approaches may be classified into three classes: graphical models, discrete variable models and continuous variable models. due to space constraints, here we concentrate our review on continuous variable models that are directly relevant to gasa; see  <cit>  for further reviews of models from other classes.

to approximate the nonlinear relationship of a target  and its activator  and repressor ,  <cit>  proposed ordinary differential equations including perturbations from genes of interest; the perturbations provided information of the underlying network topology. the time series network inference algorithm   <cit>  further characterized the perturbations by a few linear external perturbations, and solved the system of equations by using principle component analysis  and singular value decomposition. on the other hand, network component analysis   <cit>  employes partial knowledge of the underlying network and requires no statistical assumption as pca does  <cit>  and  <cit>  proposed order-two models on interactions of a, r and t. some latest advances of nonlinear models are as follows. climescu-haulica and quirk proposed a beta-sigmoid function to model the local transcriptional effect on a target in  <cit> . and vu and vohradsky presented a sigmoid model to depict the interaction between a target and its transcriptional factors  in  <cit> , where order-n polynomials were used to approximate the model. the algorithm was efficient and it predicted more regulators for  <dig> yeast cell cycle regulated targets than the generalized linear model in  <cit> . however, the model in  <cit>  is not able to depict cooperative or competitive tfs for a target gene simultaneously. an alternative nonlinear model is the s-system  <cit> , which satisfies several cellular processes. however, to model a network of k factors regulating a given gene, the proposed sigmoid model requires n  parameters while the s-system requires 2n . despite the many merits of the s-system, the large number of parameters required restricts its applications in the area.

to model biological processes occurring simultaneously among a small set of genes such as in genetic interactions, we propose a system of nonlinear equations; for an earlier version of this system see  <cit> . this model also extends the aforementioned sigmoid models to depict cooperative/competitive interactions among genes. note that each tanh function in this system can include a term, called factor, to model genes that regulate other genes but are not regulated by others in the network, and in this sense it extends the linear dynamic factor model in  <cit> .

the transcriptional rate is known to be s-shaped  <cit> . let gi and Δgi  denote gene i's expression at time t and its expression change at time t+ +  <dig> respectively, where Δgi  = gi - gi . this model states that in the network, each gene's expression change is regulated by a weighted sum of certain genes cooperatively at time t only if this weighted  sum surpasses a certain threshold. the proposed nonlinear model depicts the transcriptional rate of gene i as follows.   

where εi ~n and  is the variance of gene i's expression levels, which can be estimated from real mged. for a given gene i, |αi| is the range of Δgi/Δt , βi is the location parameter at which the tanh function crosses zero, wji is the regulation of gj on Δgi before being amplified by the αi tanh function, k is the number of factors fk's in the local network and k ≤ n. note that  <cit>  can be regarded as a special case of eq. , namely when only one gene inside the tanh function regulates gi's transcription rate.

an optimization algorithm, consisting of a genetic algorithm  and a simulated annealing  algorithm, to evolve the optimal genetic network and then estimate the parameters using time course mged, is developed in the methods section. this sa is enhanced by a steepest-gradient-descent algorithm to prevent it from being trapped in local minima. a strategy to identify factors in the network is also proposed. the results section consists of applications of gasa to both simulated data and real time course mged. first, an s-shape non-linear model  is applied to simulate data with various degrees of noise. using these generated data, we study how gasa with two model selection criteria and two search spaces performs compared to tsni, nca, ga with regular sa  and gaga. note that gaga applies a ga algorithm and some model selection criterion to predict networks, but uses another ga to optimize interactions wji 's in eq. , instead of the enhanced sa in gasa. second, gasa is applied to real gene expression data sets to infer a partial pathway of human t-cell apoptosis, and the tfs of  <dig> targets in yeast cell cycle to provide a comparison to tsni, gaga and nlde in  <cit> . both predictions are checked against published literature.

RESULTS
when implemented with a factor analysis algorithm, aic and bic model selection criteria  outperform the other four msc on inferring genetic networks using data simulated from a linear dynamic model  <cit> . however, the suitable msc and search space  for gasa applied to data from a nonlinear model remain unknown. in this section, we first simulate data from a sigmoid model with various degrees of noise to see how gasa with two msc and two types of search space perform. the effectiveness of the proposed factor finding strategy and how smoothing circumvents contamination from noise are also studied. next, gasa is applied to two real datasets to infer a small network of human t-cell apoptosis and the tfs of  <dig> target genes involved in yeast cell cycle.

results on simulated data
time course data from an 11-gene network including two external factors are simulated. these external factors model tfs or other known proteins, published in the literature, that regulate genes in the network. two factors f <dig> and f <dig> were extracted from  <dig> yeast genes involved in dna synthesis and repair  <cit> , by applying independent component analysis in matlab to these genes' aggregated microarray data of the alpha, cdc <dig> and cdc <dig> sets . the expression profiles of these two factors exhibited sinusoid patterns as shown in figure  <dig> of  <cit> . the coefficients wji 's and 's in eq.  were determined by trial and error, and the initial values of the  <dig> genes were generated randomly then tuned manually such that these genes' expression curves also showed sinusoid patterns. for each gene, the initial value and the values of the two factors were plugged into eq.  to recursively generate the rest time points. simulated gene networks of two factors and  <dig> genes were generated by the following model.   

where εi ~ n,  = var/c, and c =  <dig> or  <dig> for i =  <dig> ...,  <dig>  representing data with signal noise ratio equal to  <dig> or  <dig> , respectively. var was calculated from the sample variance of real microarray data of gi. snr <dig> and snr <dig> data were generated to mimic data with medium and low quality, respectively, while noise free data were generated without the noise terms εi's. note that networks generated by eq.  are sparse which roughly follows the property of cis-regulatory networks  <cit> .

before applying gasa to the datasets, it is necessary to distinguish factors from other genes. we first applied the proposed factor-finding strategy written in python to the simulated noise free data, and gasa identified the two factors correctly. for data contaminated with noise, mean filters with the kernel size  <dig> ×  <dig> and  <dig> ×  <dig> were applied to smooth srn <dig> and srn <dig> data, respectively. then, gasa identified the factors correctly; for details see http://www.stat.sinica.edu.tw/~gshieh/gasa/boxplots.pdf.

the performances of gasa with a model selection criterion  aic or bic and with or without the power law restriction  in the network search space were studied using the three simulated data sets. we also compared gasa to nca, tsni, gaga and ga-regular sa. both 100% and 50% true connectivity information were inputted into nca to see how the performances of nca vary. table  <dig>   <dig> and  <dig> summarize the comparisons of these algorithms. the true positive rate , true negative rate , and modified false positive rate  of the predicted top  <dig> network in terms of aic  score, are reported, where tpr  is the percentage of correctly predicted links out of the total number of existing interactions  in a simulated network. similarly, tnr  is the ratio of correctly predicted non-existing interactions  over the total true non-existing interactions  in a simulated network, and mfpr is the ratio of incorrectly predicted interactions to the total predicted ones. there are much more non-existing interactions  than existing ones  in the true network ), mfpr can distinguish the performances of the algorithms well, so it is reported in addition to fpr.

a '# int' denotes the number of interpolations.

b '# pc' denotes the number of principal components

c tpr is the ratio of the correctly predicted links to the total number of existing links in a simulated network. note signs of interactions were not accounted toward tpr and other performance measures.

d tnr  is the ratio of correctly predicted non-existing links  over the total true negatives.

e mfpr is the ratio of incorrectly predicted links to the total predicted links.

a '# int' denotes the number of interpolations.

b '# pc' denotes the number of principal components

c tpr is the ratio of the correctly predicted links to the total existing links in a simulated network. note signs of interactions were not accounted toward tpr and other performance measure.

d tnr  is the ratio of correctly predicted non-existing links  over the total true negatives.

e mfpr is the ratio of incorrectly predicted links to the total predicted links.

a '# int' denotes the number of interpolations.

b '# pc' denotes the number of principal components

c tpr is the percentage of correctly predicted links out of the total number of existing links in a simulated network. note signs of interactions were not accounted toward tpr and other performance measure.

d tnr  is the ratio of correctly predicted non-existing links  over the total true negatives.

e mfpr is the ratio of incorrectly predicted links to the total predicted links.

for each simulated network, we limited the maximum number of incoming links to four for each gene, hence gasa sought through a space of  <dig> possibilities. applying the algorithms to the three simulated datasets, their overall performances in terms of both tpr and mfpr in descending order are gasa, ga-regular sa, nca , tsni, gaga and nca . these results were computed without taking the signs of interactions into account. when the signs were also checked, the performance ranking is the same except that gaga performed better than tsni; see the additional file  <dig> for details. specifically, for noise free data , the tpr, tnr and mfpr of gasa with the four combinations of mscs and search spaces are similar and equal to 77-81%, 99% and 5%, respectively, whereas those of tsni are 50%, 89% and 50%, respectively. gaga has about 30% lower tpr and 60% higher mfpr than gasa using the two combinations bic/pl and aic/no pl. from five repeated experiments of snr <dig> , the tpr, tnr and mfpr of gasa with aic/no pl and gasa with bic/pl are the same , and they are both equal to 79%, 99% and 5% , respectively; while the performances of tsni for snr <dig> and snr <dig> are both equal to 50%, 89% and 50%, respectively. gaga with aic/no pl performs similarly to gaga with bic/pl, and both have about 35%, 78% and 74% of mtpr, tnr and mfpr. see table  <dig>   <dig> and  <dig> for detailed performances; the predicted networks and the true one are plotted in additional file  <dig>  the implementation of tsni and gaga is summarized in additional file  <dig>  each simulation of gasa took about  <dig> h and was conducted by pc cluster  with pentium  <dig>  ghz and  <dig>  gb ram; gasa was written in python  <dig> . <dig> and gnu c. note that this cpu time can be significantly shortened by using modern multi-core architecture as stated at the end of application  <dig> 

results with real time course microarray data
application 1: a human t-cell apoptosis subnetwork
in  <cit> , two experiments were conducted to characterize the response of a human t cell line  to pma and ionomycin treatments. the mechanism studied is a key for clonal expansion and controlling long term behavior of t cells such as programmed cell death. identical experimental protocols were used in the two experiments including more than  <dig> genes, but only  <dig> genes with good reproducibility were retained. there were  <dig> time points, with  <dig> and  <dig> replicates for each time point in the first and second experiments, respectively; we called this data set 'human t-cell line data'.

in this 7-gene sub-network, jnk, junb  and caspase- <dig> are involved in the apoptosis pathway. as reviewed in  <cit> , apoptosis is a cell suicide mechanism, though which metazoans control cell number in tissues and eliminate individual cells that threaten the animal's survival. the physiological role of apoptosis is extremely important. for instance, unscheduled apoptosis of certain brain neurons leads to diseases such as alzheimer's disease; and in dividing cells, failure to initiate apoptosis in cells that have serious damages in dna contributes to cancer. moreover, jnk  and jund are involved in the jnk signaling pathways, and jund inhibits fibroblast proliferation and counteracts transformation by ras.

prior biological information indicated that junb was not regulated by other genes in the network, thus junb was specified as a factor. next, we applied gasa with aic/bic and with/without power law restriction in the search space to the human t-cell line data. the score for gasa with aic/no pl was the lowest , lower than gasa with aic/pl . gasa with aic/no power law predicted a few interactions that are in the existing pathways; see figure  <dig> for details. in particular, junb activates the apoptotic genes caspase- <dig> and caspase- <dig>  and represses mapk <dig>  moreover, gasa predicted two interactions that are consistent with known protein-protein interactions. specifically, jund interacts with mapk <dig> which is involved in the jnk signaling pathways in mouse  <cit> ; caspase- <dig> cleaves and activates its own precursor and caspase- <dig> precursor . caspase- <dig> activates downstream effectors caspases and commits the cell to apoptosis  <cit> . finally, eight testable predictions including three self-regulations were also inferred by gasa. gasa took about  <dig>  h using 10-node pc cluster with intel xeon  <dig>  ghz and  <dig> gb ram.

application 2: inferring the regulators of  <dig> selected cell cycle regulated targets in yeast
the procedure in  <cit>   is one of the latest advances in nonlinear modeling of transcriptional regulation. because we could not access the nlde code, to provide a possible comparison we applied gasa to infer the regulators of  <dig> yeast cell cycle regulated targets, which were inferred by  <cit> . their tfs were collected from yeastract http://www.yeastract.com. the data sets used were cdna microarray data from three synchronization experiments in  <cit> ; the elu data set was not included because it was synchronized differently. the experiment and control groups were mrnas extracted from synchronized and non-synchronized yeast cultures, respectively, where the synchronization was conducted by treating yeast cultures with alpha factor arrest and arrests of a temperature-sensitive mutant cdc <dig> and mutant cdc <dig>  the red  and green  fluorescence intensities were measured from the mrna abundance in the experiment group and control group, respectively. a full description of data preprocessing is available in additional file  <dig>  and the data sets are available at http://genome-www.stanford.edu/cellcycle/ . we aggregated  <dig>   <dig> and  <dig> time points from these three datasets to  <dig> time points. this aggregation method was applied in  <cit>  and  <cit> , and it led to meaningful gene networks.

for each cell cycle regulated target, nlde in  <cit>  predicted one by one whether any of these  <dig> potential regulators was a true regulator. nlde is good at screening large numbers of regulators but it can not predict a network of two or more genes simultaneously. to infer tfs for a given target gene, we inputted all  <dig> tfs simultaneously as potential regulators into one equation in eq.  for gasa to infer. the mtpr*  of gasa, gaga  and tsni are 65% , 29%  and 8% , respectively, where mtpr* is the ratio of the number of predicted positives over the minimum between the number of validated tfs in yeastract and the total predicted links. tsni was implemented with no perturbation, three interpolations and three principle components, which were obtained by the curve maximizing the area of tnr versus tpr as  <cit> ; the results of one and two principle components are also reported. note that yeastract consists of both documented regulators  and potential regulators . the confirmed tfs therein were used ), and results in accurate networks.

due to intensive computation of systems of nonlinear equations, initial networks inferred by gasa are limited to 10+ genes and factors. nevertheless, these small networks can be extended to large ones using the following two schemes. first, a large network can be partitioned into a few small networks using biological information, then gasa can be applied to infer each small network. for instance, to infer transcriptional compensation interactions from synthetic sick or lethal  gene pairs, one can partition a network of 200+ genes in  <cit>  into a few small networks via ssl pairs. moreover, for inferring transcriptional regulatory interactions, a large network can be divided into small networks centering on several tfs or target genes  <cit> . second, a few inferred small networks can be integrated into a large network using a merging scheme. this scheme can be applied iteratively to result in a fairly large network. below we illustrate how two small gene networks can be merged to a large one using the network in eq. .

given two small networks, e.g. Γ <dig> consisting of the first four equations of eq.  and Γ <dig> the last seven equations. specifically, Γ <dig> = {f <dig>  f <dig>  g <dig>  g <dig>  g <dig>  g4} and Γ <dig> = {f <dig>  f <dig>  g <dig>  g <dig>  g <dig>  g <dig>  g <dig>  g <dig>  g <dig>  g <dig>  g13}. we first calculate the sse/var of each gene in the network Γ <dig>  next, genes of Γ <dig> are added one by one into Γ <dig>  then sa is applied to estimate parameters of each potential link and calculate its sse/var value. the potential link with the highest score of sse/var of g <dig> and its associated gene is added to Γ <dig> . then, calculate the fitness score  of Γ' <dig> to check network complexity; if Γ' <dig> is better than Γ <dig>  then Γ <dig> is updated to Γ' <dig>  these procedures are repeated for the rest of genes in Γ <dig>  similarly, the same procedures can be repeated to integrate the genes of Γ <dig> and the associated links to Γ <dig>  we have conducted an experiment on these small networks Γ <dig> and Γ <dig> using data simulated from eq.  with no noise and snr <dig>  the tprs and tnrs of the merged networks are compatible to those inferred from one whole network, but the fpr of the merged network is a little worse than that inferred from one network; the merging scheme and the results are in additional file  <dig> 

CONCLUSIONS
gasa extended one of the latest advances in nonlinear modeling of transcriptional interactions  <cit>  to:  infer cooperative/competitive interactions, and  infer genetic networks/transcriptional networks of a few genes simultaneously. in particular, when inferring tfs for  <dig> yeast cell cycle regulated targets in yeast, gasa has an averaged mtpr about 65% and mfpr 46%, which performs better than nlde, gaga and a linear model based algorithm . for inferring transcriptional interactions of higher organisms such as 2000+ tfs in human, we can apply biological knowledge, e.g. using differentially expressed genes at one or more time points or/and incorporating experimental conditions, to narrow down the tfs to a few hundreds genes of interest  <cit> , then apply gasa as demonstrated in application  <dig>  moreover, several predicted genetic interactions of gasa in the human t-cell subnetwork are consistent with protein-protein interactions in human/mouse jnk signaling/t-cell apoptosis pathways, which suggests that gasa might be applied to predict biochemical pathways. in the simulated networks, gasa identified factors correctly and outperformed nca, tsni, gaga and ga-regular sa. although the scale of the simultaneous networks, e.g. eq. , inferred by gasa is limited to 10+ genes due to intensive computation, the inferred networks can be expanded either by integration of several small inferred networks into a large one or partitioning a large network into several small ones and then applying gasa as stated in the discussion section. recently, other types of genomics data such as chip-chip have become available. incorporating chip-chip data to identify a small set of plausible regulators for a target then applying gasa to infer the regulatory/genetic relationship seems promising  <cit> . this would also allow gasa to infer large networks in addition to improving the prediction accuracy. we leave this avenue for exploration in future research.

