BACKGROUND
triggered and directed cell motion is a highly interesting research topic since it is involved in both essential physiological and important pathological processes. indeed, organism development, tissue repair, inflammation, angiogenesis and tumor metastasis all rely on mobile cells. correspondingly, the scientific literature abounds with overviews of the importance of cell motility  <cit> . typically, studies on cell motion can be performed on groups of cells  as well as on individual cells. as the former depends on the net sum of the motions of the latter, the detailed study of individual cell trajectories can usually reveal greater insights into cell motion behaviour. additionally, mathematical models have been developed to relate a summation of individual cell paths to population movements  <cit> .

a single cell moving through an isotropic environment will follow an almost straight path over short time intervals, yet exhibit brownian motion over long time intervals. overall, this cell motion can be characterized as a persistent random walk  <cit> . the mathematical model to represent this behaviour was convergently deduced from different assumptions by several authors  <cit>  and takes the following form for a two-dimensional walk:

<2> = 2s2p      

where <2> is the mean square displacement of the cell over time interval , s represents the root-mean-square cell speed and p is the persistence time. '^' denotes an exponent.

for long time intervals , this formula can be reduced to:

<2> = 2s2pt     

if we now take:

d=12s2p     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebarcqgh9aqpdawcaaqaaiabigdaxaqaaiabikdayaaacqwgtbwudaahaawcbeqaaiabikdayaaakiabdcfaqjaaxmaacawljawaaewaaeaacqqglbqzcqqgxbqccqgguaglcqqggaaicqaizawmaiaawicacaglpaaaaaa@3c5c@

we can rewrite equation  <dig> as a standard diffusion equation, with d the diffusion coefficient:

<2> = 4dt     

in order to calculate these mean squared displacements for an individual cell researches typically use a microscope in combination with specialized software to track a single cell over a given time period. this dedicated software ultimately reports a list of x and y pixel coordinates for the targeted cell, each of which corresponds to the location of the cell at a multiple of a preset time interval. these coordinates are then transformed into standard length measurements , which are subsequently used to calculate mean squared displacements 2>) as a function of time interval .

these calculations can be performed in two distinct ways, according to the selection of the user. the first way uses overlapping intervals, calculated according to the following formula  <cit> :

<2>=1∑i=0n−n     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqgh8aapcqggoaakcqqhuoarcqwg4baecqggpaqkdaahaawcbeqaaiabikdayaaakiabg6da+iabg2da9maalaaabagaegymaedabagaeiikagiaemota4kaeyoei0iaemoba4maey4kasiaegymaejaeiykakcaamaaqahabawaamwaaeaadaqadaqaaiabdiha4naabaaaleaacqggoaakcqwgubgbcqghrawkcqwgpbqacqggpaqkcqqhuoarcqwg0badaeqaaogaeyoei0iaemieag3aasbaasqaaiabdmgapjabfs5aejabdsha0bqabaaakiaawicacaglpaaadaahaawcbeqaaiabikdayaaakiabgucarmaabmaabagaemyeak3aasbaasqaaiabcicaoiabd6gaujabgucariabdmgapjabcmcapiabfs5aejabdsha0bqabagccqghsislcqwg5bqedawgaawcbagaemyaakmaeuildqkaemidaqhabeaaaogaayjkaiaawmcaamaacaaaleqabagaegomaidaaagccaglbbgaayzxaaaaleaacqwgpbqacqgh9aqpcqaiwaamaeaacqwgobgtcqghsislcqwgubgba0gaeyyeiuoakiaaxmaacawljawaaewaaeaacqqglbqzcqqgxbqccqgguaglcqqggaaicqai1aqnaiaawicacaglpaaaaaa@783b@

the second method uses non-overlapping intervals, resulting from the following formula  <cit> :

<2>=nn−n∑i=0n−nn−1     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqgh8aapcqggoaakcqqhuoarcqwg4baecqggpaqkdaahaawcbeqaaiabikdayaaakiabg6da+iabg2da9maalaaabagaemoba4gabagaemota4kaeyoei0iaemoba4gaamaaqahabawaamwaaeaadaqadaqaaiabdiha4naabaaaleaacqggoaakcqggoaakcqaixaqmcqghrawkcqwgpbqacqggpaqkcqwgubgbcqghrawkcqaixaqmcqggpaqkcqqhuoarcqwg0badaeqaaogaeyoei0iaemieag3aasbaasqaaiabcicaoiabdmgapjabd6gaujabgucariabigdaxiabcmcapiabfs5aejabdsha0bqabaaakiaawicacaglpaaadaahaawcbeqaaiabikdayaaakiabgucarmaabmaabagaemyeak3aasbaasqaaiabcicaoiabcicaoiabigdaxiabgucariabdmgapjabcmcapiabd6gaujabgucariabigdaxiabcmcapiabfs5aejabdsha0bqabagccqghsislcqwg5bqedawgaawcbagaeiikagiaemyaakmaemoba4maey4kasiaegymaejaeiykakiaeuildqkaemidaqhabeaaaogaayjkaiaawmcaamaacaaaleqabagaegomaidaaagccaglbbgaayzxaaaaleaacqwgpbqacqgh9aqpcqaiwaamaeaadawcaaqaaiabd6eaojabgkhitiabd6gaubqaaiabd6gaubaacqghsislcqaixaqma0gaeyyeiuoakiaaxmaacawljawaaewaaeaacqqglbqzcqqgxbqccqgguaglcqqggaaicqai2agnaiaawicacaglpaaaaaa@8b3a@

where n represents the total number of steps recorded and n is the step size for the mean squared displacement currently calculated.

the calculations required to transform initial x and y coordinates into mean squared displacements are already numerous and complex enough to require the assistance of spreadsheets or other specialized software. and even with the help of spreadsheets, there is a very real chance of introducing human error at this early stage.

the second operation, fitting the mean square displacements to the persistent random walk equation, poses a quite different challenge. due to the nature of the problem, special curve-fitting or non-linear regression algorithms need to be applied which attain a solution through many iterations until a preset convergence is reached. as the solutions generated by these algorithms can be influenced by their specific nature as well as through several user-provided a priori parameters , it is often difficult for reviewers or peers to validate results submitted or reported in the literature. on top of this, most researchers apply either proprietary, home-grown algorithms to the task, or use commercial software programs. in either case, reproducing the results requires access to these specific implementations which is often expensive or impossible.

we here present a cross-platform, open source software program to automate the analysis of single cell motions. our software drastically simplifies the analysis pipeline and eliminates the problem of human error in the calculations. additionally, since the software is freely available and the full source code can be examined, the calculations can be validated by all interested parties via this common platform. finally, as the source files can be downloaded, other researchers in the field can extend the software at will to suit their needs.

implementation
cell_motility is an open-source, 100% pure java application. it can be run on any platform that supports a java virtual machine version  <dig> . <dig> or above. the program offers an intuitive graphical user interface with a cell motion path display, a curve-fitting display and a full report in either plain text, comma-separated values or html format for inclusion in word processors, spreadsheets or databases and internet pages.

 <dig>  data loading
the cell motion data can be loaded from simple text files, having two columns which can be separated by spaces, tabs, colons or semicolons and which may have a single header line. the user simply needs to point the program to a folder containing one or more of these coordinate text files.

apart from specifying the source folder, the input dialog allows the user to provide additional details for the processing, such as the time interval used for recording the x and y coordinates and a length unit. there are four pre-defined units of length measurement  which may be extended by editing a text file bundled with the program. optionally, the user can also specify a conversion factor to transform the pixel-based coordinates reported by the tracking software into the selected length unit.

a final selection that the user needs to make concerns the desired method for calculating the mean squared displacements . there are two possible algorithms provided with the software , but it is also straightforward to implement a custom method for calculating msd and to automatically have it integrated in the software .

 <dig>  calculations
upon submission of the load parameters, the software starts loading all the data files in the source folder. as soon as a data file is loaded, the mean squared displacements as well as the curve fitting calculations are performed. the user is informed of these proceedings through a progress bar.

the curve-fitting software relies on the java implementation of the nelder-mead simplex algorithm  <cit>  as freely provided by dr. michael thomas flanagan  <cit> . this algorithm will attempt to find the best possible fit for both s and p in equation  <dig> using an iterative approach. the convergence criterion for these calculations is set to 1e- <dig>  the maximum number of iterations allowed when convergence is not reached can be user-defined  and defaults to  <dig> . typical examples where convergence is not readily reached are highly circular paths and highly persistent paths. usually, the algorithm will actually be oscillating between two very similar and equally good fits so simple manual verification of these results by means of the curve plot or the goodness of fit should inform the user of the validity of the fit. the results of the calculations as well as the goodness of fit of the persistent random walk equation is visualized as well as reported .

 <dig>  visualizations and reports
after loading the data and performing the calculations, the user is confronted with a tree-view of the data files on the left-hand side. clicking any of these files results in two distinct visualizations and one report for that particular dataset on the right-hand side, a screenshot of this configuration is shown in figure  <dig>  each of the panels can be resized in both horizontal and vertical direction for optimal viewing.

the top plot shows the actual cell motion path as seen by the microscope. the steps are numbered and a blue arrow shows directionality. each data point is represented by a black dot except for the start and end location which are shown as slightly oversized green and red dots, respectively. whenever a cell appeared stationary between two tracking events, that location will be encircled in red and the relevant step number are shown in red as well. on the upper left, a scale is shown with the relative lengths of a single unit in both x and y direction. the user can shrink or expand the motion plot panel to achieve evenly-spaced x and y directions if desired

the lower plot shows the mean squared displacements as black dots, the fitted persistent random walk equation in blue and the red lines indicate the distances used to calculate the least sum of squares. this plot allows the user to inspect both the goodness of fit and the nature of the curve – this can be either exponential or linear and provides information about the absence or presence of directionality in the cell motion.

the bottom panel presents a text report of the analysis. this report includes the original data file , the calculated mean squared displacements and the results of the exponential curve fitting. the latter first shows the number of iterations that were required to achieve convergence as well as a note on whether convergence was reached  or not . then the fitted values of s and p are shown. it is noteworthy that s can be a negative value as s is only present in equation  <dig> in quadratic form and the fitting is therefore invariant to sign opposition. rather than only displaying the absolute value of s, we decided that reporting of the exact fitted value of s whenever it was fitted as a negative number gives more insight into the workings of the iterative algorithm. finally, a goodness of fit is reported. this is the sum of square orthogonal distances reported by the fitting algorithm. ideally, this value should equal  <dig> , in practice however, this value will be higher. the value is presented to provide objective feedback on the fitting itself as well as to allow objective comparison of the fitting performance against other algorithms.

the bottom panel also sports three radio buttons which allow formatting of the report either as plain text, comma-separated values or html. additionally, the 'save to file' button enables the user to export the report in its current formatting to a file.

it is also important to note that a full report over all loaded data files can be instantly generated via the 'generate → full report' menu of the application.

another report that is available through the 'generate' menu is the 'statistical report'. this report details some simple descriptive statistics  for both s and p, based on all currently loaded cell motion paths.

 <dig>  user customization
several parameters concerning the graphical user interface and the curve fitting can be user-defined via the 'settings' menu of the application. these include the look and feel of the application, the drawing detail of the fitted function and the maximum number of iterations allowed during curve fitting when convergence is not reached. on slower computers, it is often beneficial to lower both the drawing detail of the fitted function as well as the maximum allowed number of iterations. experience learns that, on the datasets submitted, if convergence is not reached after several tens of thousands of iterations, the fitting will not noticeably improve by allowing even more  iterations.

 <dig>  extending the software
the software is built around a fully descriptive and frameworked class loading system for the discovery and usage of implementations that can calculate msd. the developer need only implement a simple interface  and specify a label as well as the fully qualified classname in a text file  which should be located in the virtual machine classpath. the cell_motility software will then automatically locate and load this new implementation and will display it as an additional choice on the user interface, directly allowing the user to select it.

RESULTS
the cell_motility software allows the user to process and analyze the data obtained through cell motion path studies in two dimensions. the software reads text files containing cell coordinates that are recorded over evenly spaced time intervals. from these raw position data, the software reconstructs a graphical view of the original motion path and attempts to fit a random walk model to the msd of the cells. computation of the latter can be performed using both overlapping and non-overlapping intervals and it is even straightforward to add custom algorithms to the software without requiring a recompilation of the source code.

the msd data is then fitted to a persistent random walk model using a nelder-mead simplex non-linear regression algorithm that is both fast and reliable. on average,  <dig> cell motion paths can be loaded and computed in this way in about one minute using a simple laptop. the resulting fitted curve is displayed in a chart together with the msd data points. the original data as well as the intermediate results are also reported alongside the end results in the users' choice of plain text, comma-separated value or html formatted text. it is furthermore possible to apply a standard statistical analysis on a complete dataset to quickly analyze trends in a population.

the cell_motility software is freely available and completely open source, presenting users with all the necessary details of its functioning as well as allowing researchers detailed control over the actual behaviour if this is desired. built around frameworks for the processing of data, the software is written to make contributions from other developers in the field easy and efficient, thereby substantially lowering the threshold to community participation. future features will include the analysis and visualization of three-dimensional cell motion paths as well as an extension of the available data processing algorithms.

CONCLUSIONS
we have developed a simple and easy-to-use software application to automate single-cell motion studies, an important aspect of cell biology. by providing this application as cross-platform, freeware binaries, we aim to provide researchers worldwide with an inexpensive, automated analysis pipeline while simultaneously providing the field with a common platform to validate and reproduce submitted or published findings.

since the software is completely open source and built around a simple, abstracted framework, it is both easy and convenient for other researchers to extend it with their own algorithms or adaptations and even their own visualizations. the collaborative aspect of third-party contributions is guaranteed through the use of the gnu-gpl license for this software. additionally, the software resides in a clearly versioned cvs repository to which interested developers can submit their updates.

for the next version of cell_motility we plan to extend the calculations and vizualisations of the software to include three-dimensional tracking of individual cells as well as an implementation of generalized nonlinear least-squares regression for the curve fitting.

availability and requirements
project name

cell_motility

project homepage



operating system

platform independent

programming language

java

other requirements

java  <dig> . <dig> or higher

license

gnu gpl

any restrictions to use by non-academics

none.

abbreviations
- eq. equation

- msd mean squared displacements

authors' contributions
lm designed and wrote the cell_motility software and drafted the manuscript.

gm provided the integration with the curve-fitting library.

ca assisted in thoroughly testing the software and helped to finalize the manuscript.

kg coordinated the software development and helped to draft the manuscript.

jv provided project coordination and critically revised the draft manuscript.

