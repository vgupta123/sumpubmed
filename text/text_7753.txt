BACKGROUND
one fundamental task in bioinformatics concerns large scale comparisons between proteins or families of proteins. it often constitutes the first step before further investigations. a typical comparison, for example, is to query a database with a newly discovered sequence. observed similarities witness a putative common biological function and direct further studies.

in this paper, we focus on massive protein sequence comparisons: a large database is iteratively compared with relatively short queries . a possible approach is to use the exact dynamic programming method  <cit> . for a given similarity model, this method provides optimal alignments within a quadratic computation time. some optimizations achieve a sub-quadratic complexity  <cit> , but the computation time remains prohibitive for large scale comparisons. thus, in practice, the full dynamic programming approach is applied to comparison of short sequences.

a successful family of similarity search methods is provided by seed-based heuristics, starting with fasta  <cit>  and blast  <cit>  and including specific methods for protein similarities such as blastp  <cit> . seed-based heuristics were recently enhanced by advanced seeding tools like the spaced seeds used in patternhunter  <cit>  or yass  <cit>  . authors of this paper also worked on the alliance between advanced seeds techniques and reconfigurable architectures  <cit> .

the main idea of seed-based heuristics is to anchor the detection of similarities using matching short words or short subsequences occurring in both compared sequences. the form of these words or subsequences is provided by a pattern called a seed. a word that respects the seed is called a key. for instance, mvk is one of  <dig> possible keys for the seed of three consecutive characters on the protein alphabet. detection of similarities between two strings is done in three stages, as presented in figure 1:

• stage 1: search for keys that occur in both strings,

• stage 2: extension of these matching keys with an ungapped alignment, keeping only the alignments with a score greater than a given threshold t,

• stage 3: full dynamic programming algorithm, applied only to successfully extended matching keys.

in this work, we consider comparisons between a set of protein queries against a large protein database of n amino acids. a common usage of blast is to index the queries, and then to scan the full database at the runtime. if the size of the query and the database allow it, a full indexation of both leads to advantageous results  <cit> . in our work, we applied approach used e.g. in blat  <cit>  where the database is indexed once and each query is successively processed.

to be efficient, the database positions are indexed by seed keys. the usual indexing scheme is shown figure 2: for each key, a list of all its occurrences is stored. at stage  <dig>  each query position corresponds to a seed key . an index access provides the list of key occurrences in the database, enabling stage  <dig>  we call such an approach the offset indexing approach. in this case, for each seed position, an offset of ⌈log <dig> n⌉ bits is stored. the index size is thus equal to soffset = n × ⌈log <dig> n⌉ bits.

for each query position, each execution of stage  <dig> needs to access all the occurrences of the corresponding key. this leads to numerous random memory accesses that are time consuming: memory accesses at random positions are not efficiently cached and require high latencies  <cit> . a way to reduce the computation time is thus to avoid as far as possible such random memory accesses. for that purpose, it is possible to additionally store, for each key occurrence, its left and right neighborhoods in the sequence, as illustrated in figure  <dig>  thus, given a position in the query and its corresponding key, all neighborhoods of this key occurrences in the database are obtained through a single random memory access. for each database position, two neighborhoods are additionally stored. we call this indexing approach the neighborhood indexing approach. the overall index size is then equal to sneighborhood = n ×  bits, where

• α is the number of bits for coding a character , and

• l is the length of each neighborhood.

as seen in figure  <dig>  the main advantage of the neighborhood indexing is that it speeds up the execution time by a factor ranging between  <dig>  and  <dig> over the offset indexing. the actual speed gain depends on the database length and on many implementation and architecture parameters  that will not be discussed here. an obvious drawback of the neighborhood indexing is the additional memory it requires to store neighborhoods. comparing the two indexing schemes, the ratio r between the overall index sizes of the neighborhood indexing and the offset indexing is

 r=sneighborhoodsoffset=1+2αl⌈log⁡2n⌉. 

in common experiments, ⌈log <dig> n⌉ is between  <dig> and  <dig>  αl is between  <dig> and  <dig>  hence r is between  <dig> and  <dig>  it is worth mentioning that the ⌈log <dig> n⌉ value is often raised to a more practical  <dig> or  <dig> bits, reducing the ratio r even more. storing neighborhoods becomes then relevant with the reduction of memory prices. for instance, the modern technology brings the possibility to get gigabytes of flash memory in a personal computer for some hundred dollars. it is thus interesting to exploit this storage space as much as possible. it can be used for treating larger databases, but also, as in this work, for speeding up widely used applications.

however, the index size still remains the main limitation. in this paper, we study how the size of a large neighborhood index can be reduced while preserving the result quality. for this purpose, we worked on reducing as much as possible the ratio r. a way for doing this is to reduce the factor αl. we propose to simultaneously increase the neighborhood length  and reduce the alphabet size . we limit the alphabet size by partitioning amino acids into groups. this reduces a by encoding neighborhood characters in less than  <dig> bits required for coding  <dig> amino acids. partitioning the amino acids into  <dig> groups enables to encode each group using  <dig> bits, and partitioning into  <dig>   <dig> or  <dig> groups enables to encode each group by  <dig>   <dig>  and  <dig> bits respectively. all these reduced alphabets are tested in this paper.

grouping amino acids was studied in several papers  <cit> . groups can rely on amino acid physical-chemical properties or on a statistical analysis of alignments. for example, the authors of  <cit>  computed correlation coefficients between pairs of amino acids based on the blosum <dig> matrix and used a greedy algorithm to merge them. a branch-and-bound algorithm for partitioning the amino acids was proposed in  <cit> . those papers mainly deal with the construction of reduced alphabets, but none of them studies how the alphabet reduction affects the sensitivity of similarity search, or undertakes a quantitative analysis of the trade-off between search sensitivity and index size for those alphabets. this raises the following problem that is solved in this paper: can reduced alphabets allow one to decrease the factor αl while preserving the quality of similarity search results?

RESULTS
the main result of our work is an effective reduction of the index size without deteriorating the quality of the results of similarity search. moreover, we provide substitution score matrices and e-value parameters to be used with reduced alphabets. our results are based on the alphabets defined by the amino acids groups proposed by li and al. . this choice was motivated by empirical tests showing their relevancy with seeds matching. however, our method can be applied to any other amino acids partitions. the website  <cit>  provides data for all the alphabets reported in  <cit> .

for neighborhood storage is computed with respect to sensitivity/selectivity trade-offs shown on figure  <dig> 

in the rest of the paper, the original alphabet of  <dig> amino acids is denoted by Σ <dig>  where each character is encoded by  <dig> bits. reduced alphabets Σ <dig>  Σ <dig>  Σ <dig> and Σ <dig>  respectively of size  <dig>   <dig>   <dig> and  <dig>  have each character encoded by  <dig>   <dig>   <dig> and  <dig> bits respectively. those alphabets, taken from table  <dig> of  <cit> , are defined by

 Σ16={,,,,,,,,,,,,,,,},Σ8={,,,,,,,},Σ4={,,,},andΣ2={,}. 

the main idea is to represent the neighborhoods of keys stored in the index  over a reduced alphabet. consequently, at stage  <dig> of the similarity search, amino acid sequences are compared with sequences over the reduced alphabet. by an alignment over Σ × Σ', we understand an alignment between a sequence over Σ and a sequence over Σ'. thus, in this paper we will consider alignments over Σ <dig> × Σ <dig>  Σ <dig> × Σ <dig>  Σ <dig> × Σ <dig>  Σ <dig> × Σ <dig> and Σ <dig> × Σ <dig> 

in the next sections, we describe how to evaluate the quality of stage  <dig> and how a substantial index size reduction can be obtained by using longer neighborhoods on reduced alphabets. as presented in figure  <dig>  using a reduced alphabet involves several parameters that we study in the following sections. in section rectangular substitution score matrices, we present substitution score matrices used for alignments over Σ <dig> × Σ <dig> and Σ <dig> × Σ <dig>  we then present the computation of e-value to estimate the significance of alignments over reduced alphabets. the last section, experimental validation, describes a practical application of reduced alphabets to real biological data.

stage  <dig> algorithm and quality
a detailed description of stage  <dig> is given in algorithm  <dig> . query and database neighborhoods of a matching key  are compared character by character over l positions. during this comparison that uses substitution score matrices , the highest scores for the left and right neighborhoods are kept . if the sum of the highest scores exceeds a threshold t, the alignment is kept for stage  <dig> , otherwise it is rejected . note that in the offset indexing case, a random memory access is performed in order to retrieve neighborhoods leftdb and rightdb . this is not the case for the neighborhood indexing, as the neighborhoods are stored directly in the index.

the quality of stage  <dig> is measured by a trade-off between its sensitivity  and selectivity . computation of those values is described page  <dig> 

increasing the threshold t or decreasing the neighborhood length l makes stage  <dig> more selective but less sensitive  while decreasing t or increasing l increases the sensitivity and decreases the selectivity .

reducing the index size by 35% without loss of quality
as shown in figure  <dig>  the sensitivity/selectivity trade-off follows a convex curve. we propose here to achieve an equivalent trade-off with a reduction of the index size.

clearly, for a fixed neighborhood length l , the sensitivity/selectivity trade-off is always better when using the full amino acid alphabets than a reduced alphabet. this is easily explained by the fact that reducing the alphabet size decreases the alignment accuracy. in order to keep up with the sensitivity/selectivity ratio, the neighborhood length l should be increased. in figure  <dig>  all reduced alphabets, used with increased neighborhood lengths, now perform equivalently  than the full alphabet.

in practice, this result enables a reduction of the index size without any sacrifice in running time or in result quality. table  <dig> shows the memory requirements for different alphabets. we obtain a practical reduction of 42% of the factor αl using the reduced alphabet Σ <dig> instead of Σ <dig>  the ratio r on the overall index size is then reduced by 35%.

rectangular substitution score matrices
we designed a method for computing substitution score matrices for any pair of possibly reduced amino acid alphabets. as this method is based on the original programs of  <cit> , we call such matrices reblosum for rectangular blosum matrices. the reblosum matrices for alphabets Σ <dig> × Σ <dig> are the original blosum matrices. tables  <dig>   <dig>   <dig> and  <dig> present reblosum matrices for alignments over alphabets Σ <dig> × Σ <dig>  Σ <dig> × Σ <dig>  Σ <dig> × Σ <dig> and Σ <dig> × Σ <dig> respectively.

reblosum <dig> matrix for alphabet Σ <dig> × Σ <dig>  scores located on the "diagonal" are shown in bold.

reblosum <dig> matrix for alphabet Σ <dig> × Σ <dig>  scores located on the "diagonal" are shown in bold.

reblosum <dig> matrix for alphabet Σ <dig> × Σ <dig>  scores located on the "diagonal" are shown in bold.

reblosum <dig> matrix for alphabet Σ <dig> × Σ <dig>  scores located on the "diagonal" are shown in bold.

such matrices can be applied in any method reducing the amino acid alphabets by residue grouping. as one may be interested in using any other pair of alphabets, we additionally propose a web interface  <cit> . this web interface computes reblosum matrices for other alphabets listed in  <cit>  and for any custom alphabets provided by the user.

parameters for e-value computation
the e-value, or expected value, provides the expected number of alignments with a given score, when comparing a text t and a query q of length |t | and |q| respectively. local alignment methods like blast sort results by increasing e-value, thus reflecting their decreasing significance. in the blast algorithm, the e-value of an alignment is obtained by

 e-value = k·|q| · |t| · e-λs, 

where s is the score of the alignment obtained with substitution matrices. parameters λ and k are two constants that fit the gumbel law, computed using methods described in  <cit> . table  <dig> provides those parameters for several reblosum substitution matrices.

reblosum <dig> matrix for alphabet Σ <dig> × Σ <dig>  scores located on the "diagonal" are shown in bold.

experimental validation
in a model where the stage  <dig> alignments are ungapped, using reduced alphabets and alignments on longer neighborhoods can however affect the result quality. indeed, the longer the neighborhoods are, the bigger is the chance to meet a gap in the sequences. more generally, the probabilities distributions used in theoretical sensitivity and selectivity computations do not truly reflect the nature of the biological sequences.

we thus validated our approach with large-scale tests on biological sequences. we set a database to be the hard-masked human chromosome  <dig>  translated according to the six possible reading frames. the query set was a set of seven archea and bacteria proteomes derived from a study of mitochondrial diseases. this set was selected for is interest toward the detection of potential insertions of mitochondrial genes in the human genome. moreover, testing out our approach comparing such distant species represents one of the hardest application case. indeed more typical homology searches on closer sequences is easier. tests on such homology searches could have hidden potential issue on our approach.

the database contained  <dig>  <dig>  <dig> amino acids whereas the query was composed by  <dig>  <dig>  <dig> amino acids. using the ssearch method  <cit> ,  <dig> alignments were obtained between the database and the query . this set of exhaustive optimum alignments was sufficient to validate our method in comparison with results obtained using different alphabets. the seed used in stage  <dig> was a subset seed , as in  <cit> . for the neighborhood indexing, we indexed the database using each of the alphabets Σ <dig>  Σ <dig>  Σ <dig>  Σ <dig> and Σ <dig>  we selected the neighborhood length to have a theoretical sensitivity close to  <dig>  and a theoretical selectivity close to  <dig> . theoretical sensitivity and selectivity are defined according distributions presented on page  <dig> 

this leads to indexing  <dig> ×  <dig> characters for Σ <dig>   <dig> ×  <dig> characters for Σ <dig>   <dig> ×  <dig> characters on Σ <dig>   <dig> ×  <dig> characters for Σ <dig>  and  <dig> ×  <dig> characters for Σ <dig> . the database index sizes are reported in table  <dig>  using alphabet Σ <dig> instead of Σ <dig> reduces the overall index size: the ratio r goes from r <dig> =  <dig>  to only r <dig> =  <dig> , that is a 35% reduction. the initial assumption of ungapped alignments in the stage  <dig> can be wrong with a neighborhood length of  <dig> ×  <dig>  thus one could prefer to use the alphabet Σ <dig> with  <dig> ×  <dig> characters, giving a 25% reduction of the overall index size .

similarity search results obtained on reduced alphabets. the number of positions tested  is  <dig>  *  <dig>  the practical selectivity is computed dividing the number of positions validating both stage  <dig> and stage  <dig> by the number of positions tested.

database index size for neighborhood indexing on different alphabets. the first three columns are the same as in table  <dig>  the other two columns refer to the experience described in section "practical results". the index size is equal to n × , as explained in the beginning of the paper. here n =  <dig>  <dig>  <dig> and ⌈log <dig> n⌉ =  <dig>  the ratio r is against the size of the index for offset indexing, which is here soffset = n × ⌈log <dig> n⌉ =  <dig>  *  <dig> bits =  <dig> mbytes.

as shown in table  <dig>  each of the reduced alphabets yields a practical full sensitivity, as all the  <dig> alignments are found in each test. moreover, the practical selectivity, close to 10- <dig>  is here better than the theoretical one .

CONCLUSIONS
we proposed a method for reducing the index size when storing neighborhoods of seed keys in protein databases. this approach is based on reducing the alphabet of indexed data while using a longer neighborhood. we save 35% of the index size without any modification on the result quality assuming an ungapped alignment model. we provided optimal lengths for selected alphabets.

furthermore, the proposed method requires unusual substitutions score matrices that are called reblosum, for rectangular blosum matrices. these matrices provide substitution scores between letters from different alphabets. we extended the computation of traditional blosum matrices in order to compute reblosum matrices, and adapted the computation of λ and k parameters for e-value estimation to reduced alphabets. we provided reblosum matrices and their corresponding λ and k values for selected alphabets. other matrices and parameters can be obtained from the website  <cit> .

