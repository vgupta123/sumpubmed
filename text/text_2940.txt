BACKGROUND
since the beginning of the genomics era, numerous authors have warned against on-coming information overload, using metaphors that evoke natural disasters  to emphasize how our capacity to generate data threatens to overwhelm our ability to deploy it in research. finding ways to store and analyze vast amounts of data is not as difficult as it once was, thanks to improvements in database technologies, web services, and computer hardware, but developing graphical software that allows scientists to visualize, explore, and interact with novel and rapidly expanding data sets from genomics remains a challenging task.

flexible, highly-interactive visualization software has great value in genomics because it enables scientists to explore the genomic landscape without knowing in advance what patterns and relationships they might find  <cit> . visualization techniques provide an excellent complement to more abstract, quantitative or statistical analysis methods in that they rely on innate human visual processing systems, rather than on abstract mathematical reasoning. discoveries arising from interactive inspection of the genomic landscape will always require corresponding statistical validation, but visual methods have tremendous power to expose compelling patterns and give scientists ideas on what to test.

developing visualization software for genomics can be difficult. genome science changes so rapidly that new data types frequently appear in advance of statistical methods and visualization software needed to analyze and display them. conceiving effective ways to represent new types of biological data in graphical formats can be difficult in part because even the scientists generating the data may not know precisely what they want to see until they have seen and interacted with real-life examples. once they do, the experience of viewing their data in graphical format often suggests new questions and new ideas, creating the need to develop new ways to display data and new modes of interaction. however, once a developer has created a working application for scientists to use, it may not be easy or even feasible to modify how the data are represented, depending on how the developer has implemented the graphical components.

the genoviz software development kit  aims to solve some of these problems. the genoviz sdk is an open-source, freely available java-based toolkit for building genomics visualization applications. it provides core functionality developers can easily deploy in their applications, notably interactive, dynamic zooming, which allows rapid navigation and exploration of genome-scale data sets covering many orders of magnitude, from chromosomes to genes to individual base pairs. the toolkit implements functionality well-suited to genomics visualization applications, but its architecture also makes it easy for developers to invent new ways to represent emerging data types in graphical formats. the genoviz sdk aims to help developers build new applications iteratively and organically, inventing novel graphical representational schemes in collaboration with users as they explore their own data, make discoveries, and think of new questions for their software and experiments to address.

implementation
the genoviz sdk is implemented using the java programming language and requires java versions  <dig>  or above.

RESULTS
the genoviz sdk is an object-oriented, java-based graphics framework that provides methods, objects, and a class hierarchy for developers to display genomic data in two-dimensional fields. it originated as the neomorphic software development kit  and was first developed at neomorphic software, a bioinformatics company that later merged with affymetrix, which continued development of the software. the ngsdk later entered the public domain as open source software under a new name: the genoviz sdk. as a result, many classes and packages in the toolkit bear appellations "neo" and "affymetrix," reflecting the genoviz sdk's origins at the two companies.

the genoviz sdk's core graphics system employs three collaborating classes: scene, a view, and glyph. a scene object represents a two-dimensional data field and its coordinate system. for example, a scene might represent the physical map of a single chromosome or chromosome arm, with its associated annotations and sequence data. in this case, the coordinate system comprises nucleotide positions, most easily expressed as whole numbers. another scene might represent a genetic or cytological map; in this case, the coordinate system might be based on map units, which can have fractional values. to accommodate different types of maps, the trio of interacting objects use floating point numbers to indicate positions, but programmers are free to use either floating point numbers or integers when adding items to a scene.

a view represents the user's current view on the scene. it captures the user's current level of zoom and the range of visible coordinates. each view references a single scene and encapsulates algorithms for transforming coordinates referencing the scene's biology-based coordinate system into the pixel-based coordinate system of the user's computer screen. the details of how scene and view objects accomplish this translation are largely hidden from the programmer, and most programmers would not need to manipulate instances of these classes directly, unless they required specialized behavior not already provided as part of the toolkit. however, because the system is open source, programmers can investigate the transformation logic in detail when necessary.

glyph objects are individual graphical elements that belong to a scene and change their appearance depending on the scale of the view  in which they appear. a scene may contain many thousands of glyphs; typically, only a subset of these is on display at once. the toolkit contains a rich array of ready-to-use glyphs  and developers can create new glyph classes by implementing the glyphi interface or by subclassing existing glyphi implementations. glyphs are designed to know how to draw themselves; hence, a developer can exert near-total control over their appearance at different zoom levels. to create a new glyph class with a novel appearance, the developer would over-ride the drawing routines promised in the glyphi interface, perhaps using extant glyph source code as a rough guide to how achieve different effects.  glyphs can also be nested within other glyphs in parent-child relationships, allowing for a variety of effects. for example, the drawing method of a parent  glyph might measure its available screen space and choose to invoke its child glyphs' drawing methods only if there are enough pixels to display them adequately, an example of semantic zooming.

the scene, glyph, and view come together as components of a fourth object, called a widget , that manages their interactions with each other and implements basic functionality for mediating user interactions with the genomic data on display in the scene. the widget typically creates and manages scrollbars, sliders, or other graphical user interface components the user operates to zoom or pan the display. the widget intercepts user requests to change scale or position, and then triggers invocation of drawing methods via the one or more view objects associated with its scene. each view in turn requests its scene's glyphs to draw themselves; glyphs consult the view in which they appear to determine their sizes relative to the pixel-based coordinate system of the computer screen and then use the built-in java awt graphics object  to draw graphical elements on the screen. the division of responsibility between scene, glyph, and view makes it possible for a single scene to appear in multiple views, allowing multiple, alternative representations of the same data. this can be useful in a number of settings, for example, when viewing an overview graphic of an entire chromosome in tandem with a zoomed-in view of the same data.

an important feature of this design is that it enables the graphics system to operate relatively independently of the data models, akin to the model-view-controller architectural design pattern commonly encountered in modern software applications that aim to separate business logic from presentation strategy  <cit> . glyphs can contain references to custom data models, and specialized glyph subclasses may implement drawing logic that consults these data models, but otherwise, glyphs do not enforce a particular scheme for modeling genomic data.

one of the core features of genoviz sdk is that the graphical rendering system handles zooming and panning  without the programmer having to provide explicit control of the system in response to user drags on scrollbars or sliders attached to a display. the zooming sub-system typically uses a default  log-based transform object to adapt the amount of zoom obtained per unit of user drag  to the current scale of the view on display in an application. as a result, drag gestures at high zoom change the scale of the display less than do drags at lower zoom. similarly, the programmer does not typically have to determine the vertical positioning of glyphs in horizontal maps. typically, the widget component implements algorithms  that determine the vertical location of new glyphs, stacking them in ways that prevent them from colliding in the two-dimensional data field.

custom data representation schemes using glyphs
programmers can easily implement novel visualization ideas within the genoviz framework by implementing and deploying new glyphs. figure  <dig> presents a screen capture from a demonstration application containing several examples of glyph types already implemented as part of the genoviz sdk. note that some are comprised of several other glyphs, such as the central glyph containing of three blue rectangular glyphs. the basic glyph class, which developers would typically sub-class, contains methods that allow a glyph to recursively draw its children, using the coordinates of the parent glyph to delimit the child glyphs' available space. the ability to invoke this method recursively is particularly useful for representing compound features, such as the set of exons and introns that comprise a gene structure  <cit> . because the toolkit is open source, developers can examine the source code and use these pre-existing glyph classes as a rough guide to what types of effects are possible.

programmers can design new glyph classes that implement semantic zooming, a form of zooming in which objects change their representation depending on the zoom level and which has special relevance in genomics where the scale of the data ranges across several orders of magnitude, from entire chromosomes to individual base pairs. developers can modify zooming behavior by over-riding the glyph "draw" method, as discussed above. a glyph accesses its currently available screen space via a view, passed as a parameter to the glyph's drawing routines, and then change its drawing logic accordingly. for example, a glyph might choose to draw its label based on whether or not there is enough horizontal space to accommodate the label text. similarly, a glyph might choose to invoke the drawing routines on its child glyphs only when the parent glyph achieves a pre-determined size in pixel-based coordinate system of the user's display. other, more complex behaviors are possible. figures  <dig> and  <dig> present an examples of semantic zooming from the integrated genome browser  <cit> , a genoviz sdk-based application. in figure  <dig>  the developer has created a glyph representing the cytological map of the human genome. at low zoom, the entire chromosome occupies the view, while at higher zoom, individual labeled bands comprising the cytological map become visible as more space becomes available. figure  <dig> presents another example of semantic zooming from the igb software. the software implements partial  loading of sequence data from a back end data server, an optimization scheme that lets the user access regions of interest without having to download an entire genome or chromosome sequence, which could be multiple megabytes or even gigabytes. at low zoom, regions where sequence has already loaded appear in gray, tagging regions the user has already examined in depth. at high zoom, these regions resolve into letters representing base pairs.

separation of concerns: graphics semantics and genomics semantics
the genoviz sdk aims wherever possible to separate the semantics of graphical rendering from the semantics of the genomic data. this design decision enables developers to reuse preexisting libraries and applications when creating visualization applications. the genoviz sdk graphics logic does not specify how data should be represented internally within an application. at first glance, this statement may seem contradictory in that the genoviz sdk aims to make creation of genomic data visualization applications easy and convenient for programmers. however, the precise semantics of genomic data models are often application-specific, whereas the graphics components more often generalize across diverse applications and problem domains. for example, a developer who has implemented a database system for representing genomic data may wish to use data models that harmonize with the database. similarly, a developer familiar with the open source biojava library might prefer to use biojava data models in conjunction with the genoviz sdk  <cit> . to ensure maximum reusability, the genoviz sdk does not require programmers to conform to any pre-determined scheme for representing genomic data. by separating drawing logic from genomic semantics of genes and genomes, sequence and annotations, the genoviz sdk graphics system provides conveniences for the programmer that are nonetheless well-adapted to representation of genomic data.

genoviz sdk widgets
the genoviz sdk includes several classes  that provide convenient functions for interacting with and representing data types commonly encountered in bioinformatics. these widgets implement a generic interface that specifies basic functionality related to zooming, panning, selection, and interaction with the underlying graphics system. widgets provide methods for establishing horizontal and/or vertical axes, setting display bounds, panning, zooming, selecting and placing items at designated positions, configuring glyph factories and data adapters , setting background colors, establishing window resize behavior, and managing event handler objects that intercept and respond to user interactions. specialized widget implementation classes also provide methods and functionality for representing specific categories of genomic data. some of the currently available widgets include a neomap object, for representation of physical and genetic maps; a tieredneomap widget for display of physical or genetics map data in individually-adjustable and configurable tracks; a neoassembler widget, aimed at display of est/cdna assemblies; and a neoseq widget for display of sequence data. by providing a generic widget interface, the genoviz sdk framework aims to encourage developers to create new widgets that support emerging data types, such as data from sequence-based expression profiling.

the neomap and tieredneomap widgets are used to place annotations, sequence, and functional genomics data sets such as chip-chip data into a linear coordinate system. their primary use is to support implementation of genome browser-like applications, where items of interest appear alongside a genomic sequence axis representing base pair positions. as such, they include functions that allow selection of items based on their position inside the map coordinate system and contain layout algorithms  that determine where items are located in the vertical dimension. a developer can add new glyphs to a neomap or tieredneomap by invoking additem methods that accept start and end coordinates and specialized factory objects that instantiate new glyphs using pre-determined styles. neomap and tieredneomap widgets handle integer- and real-number-based coordinate systems, thus making them useful for display of cytological or genetic maps, as well as physical, base-pair maps. the tieredneomap  is a neomap that can position glyphs into separate tiers  the user can move, hide, collapse, or transform.

as with the neomap and tieredneomap, the neoassembler widget  includes convenience methods for a specialized data type: sequences assemblies. the neoassembler displays short-read sequences  in rows beneath a typically much-longer consensus sequence and includes methods that allow the programmer to specify how mismatches and other aspects of the assembly will appear to the user. as with the other widget objects, the neoassembler provides ways for the user to navigate the data scene on display. at high zoom, sequences resolve into letters representing base pairs; at low zoom, they appear as annotated, rectangular glyph objects that show the large-scale structure of the assembly, including mismatch positions and directionality of reads relative to the consensus. the neoseq widget  contains functions aimed at convenient display of a single sequence. it supports text-based display of sequence data in a scrollable display and supports user interactions relevant to the representation of sequence as simple text, such as selection of subsequence, highlighting, and copy-and-paste.

creating an application using the genoviz sdk
a typical genoviz sdk application consists of several collaborating classes: parsers that read data from files or databases and generate in-memory data structures; adapter objects that translate these data structures into glyph objects shown in the display; one or more display components  that mediate user interactions with data, and custom application logic that specifies how the application will respond to user interactions with glyphs, menus, scrollbars, and other graphical elements. typically, developers attach data models representing genomic data to glyph objects via a generic setinfo method, which accepts any java object; this allows developers to link the object models representing genomic data to the graphical elements that control how the data will appear within a display. when users interact with glyphs, the display component generates events, which the application logic may capture and then interpret. for example, right-clicking a glyph representing a gene model might signal a request to get more information about it, as happens in the integrated genome browser  <cit> . alternatively, it could represent a request to perform an editing operation on the underlying genomic data model the glyph represents. in this way, the graphics system provides a visual representation of data structures that users can easily inspect and manipulate via glyph objects, similar to windows, checkboxes, and other familiar graphical elements that users can click, drag, and manipulate in standard graphical user interfaces.

discussion
developers evaluating the genoviz sdk for use in their applications may be interested in comparing it to other graphics frameworks that render two-dimensional data. the jazz/piccolo framework, first developed at the university of maryland, enjoys a large group of enthusiastic users  <cit> . in jazz/piccolo, zooming is typically two-dimensional, imitating the action of camera rising and lowering over a two-dimensional data field. jazz/piccolo zooming involves focusing on a single point around which the data field contracts or expands as the user zooms in or out. in genomic applications, where the field of data is typically one-dimensional and involves stretching and contracting a genomic sequence axis, zooming is simpler and more intuitive when restricted to a single dimension  <cit> . the graphical components implemented in jazz/piccolo require more memory and processing power than their equivalents in the genoviz sdk, thus limiting their usefulness for display of vast genomic data sets  <cit> . they are best-suited to the representation of hundreds of data objects, whereas the genoviz sdk is well-suited for representation of genome-scale data sets, which can include hundreds of thousands of objects and millions of data points.

other toolkits for genomics visualization that have been published include biotk and biowidgets. david searls' biotk toolkit offered a set of configurable graphical components, termed "widgets," that programmers could manipulate using the tcl/tk command-line language  <cit> . this early toolkit included components for drawing chromosomes, genome maps, and sequence displays. later, gregg helt developed biotk-perl, which allowed perl developers to use similar components in perl applications, such as genotator, a workbench for genome annotation developed by nomi harris  <cit> . at least two java-based toolkits for genomics visualization were developed in the late 1990s, including the bioviews toolkit from the berkeley drosophila genome project  <cit>  and the biowidgets toolkit from cbil at the university of pennsylvania  <cit> . to our knowledge, these toolkits are no longer supported. the genoviz sdk draws inspiration from these early groups' work; however, its structured graphics approach more closely resembles the jazz/piccolo toolkit and places greater emphasis on efficient memory usage. the open source biojava and bioperl projects include sequence visualization components, but they are more tightly coupled to their respective biojava and bioperl data models  <cit> .

several groups in industry and academia have implemented applications using the genoviz sdk. these include affymetrix, where co-authors gregg helt with ed erwin developed early versions of the integrated genome browser , also available in the same sourceforge project as the toolkit itself. in late  <dig>  another group released the genome environment browser, which used the genoviz sdk to implement an interactive genome environment for users to explore genome-scale data sets, primarily tiling array data  <cit> . other applications developed using the genoviz sdk  include the neomorphic annotation station  <cit> , which the institute for genomic research commissioned to support their curation of the arabidopsis thaliana genome  <cit> , as well as proprietary genome display tools used and developed at celera genomics.

CONCLUSIONS
the genoviz sdk is a java data visualization toolkit for genome data application developers. it handles the low-level aspects of linking object-oriented data models to graphical widgets so that application developers can focus on the unique aspects of their data and application logic, rather than implement graphical rendering algorithms. an award from the national science foundation , as well as volunteer efforts from a small but growing community of developers, continue to support development of the igb software and the genoviz sdk. major efforts currently underway include creation and updates of documentation for novice and experienced developers, creation of new tutorials showing programmers how they can use genoviz sdk to add visualization capability to their applications, and development of demonstration applications showing genoviz sdk graphics capability. resources for developers and users alike are available from .

availability and requirements
the genoviz sdk is implemented in the java programming language and is freely available under the common public license, v <dig> , an open source initiative  approved open source license. the project home page is , from where users can download and view source code anonymously. users interested in downloading a pre-compiled copy of the integrated genome browser software can obtain it at . please note that the igb.bioviz.org site systems administrator compiles composite usage statistics aimed at tracking the overall number of downloads and average number of accesses per ip address. the sourceforge site also tracks general usage statistics. other than this, no details about individual users and their visits to the site are tracked. to run the software, users will require java version  <dig>  or higher.

authors' contributions
all authors contributed development of genoviz sdk source code, documentation, or both. all authors participated in writing or editing the manuscript. all authors read and approved the final manuscript.

