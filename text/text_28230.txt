BACKGROUND
as sequencing technologies have improved, transcriptome sequencing  or whole-genome sequencing have become faster and cheaper than ever before. in addition, sequencing projects addressing non-model organisms or environmental samples  have now become feasible and affordable. for example, the sequencing of relatively unexplored organisms, such as the human gut microbiome or the transcriptome of clams or butterflies, has been accomplished  <cit> . however, sequencing is only the first step in the process of understanding the biology underlying the obtained sequences. bioinformatics analyses performed after sequencing, including assembly, functional annotation and classification, are becoming increasingly important. several annotation pipelines have been developed, such as cycads, priam and blast2go  <cit> , which can provide putative functions for a transcript based on sequence similarity to known genes. although these tools are useful for understanding the newly explored sequences, they usually contain many manual steps and often are not easy to implement for biologists who are unfamiliar with the command line inputs. web tools have been developed for the annotation of expressed sequence tags , such as estannotator, estpass, and estexplorer  <cit> . these pipelines are specifically designed for est analyses that include the cleaning, assembly and clustering and functional annotation of ests. however, we found that the online uniform resource locators  for estpass and estannotator are no longer functional for estpass and estannotator, and estexplorer cannot simultaneously process more than ten thousand contigs. thus the development of a web server that can provide an automatic annotation pipeline for contigs derived from rna-seq data with a user-friendly interface would be beneficial to the research community.

functional annotation strategies are typically based on previously identified protein functions. many protein function databases, such as brenda, enzyme and amigo, have been established as collections based on the functions of enzymes or genes  <cit> . these databases categorize protein functions into structured groups as either enzyme commission numbers  or gene ontology  terms. ec numbers are assigned to enzymes according to the chemical reactions they catalyze  <cit> , whereas go terms include information on the molecular function, cellular component and biological processes of genes and can be used to describe the biological function of proteins  <cit> . these protein function or enzyme function databases document well-studied and well-annotated biological functions and provide resources for the annotation of newly sequenced genes. the majority of established annotation methods utilize these functional annotation systems and transfer functional annotations among sequences based on sequence similarity or pattern searches. for example, the cycads pipeline integrates multiple annotation tools and databases  <cit> ; priam identifies enzyme functions based on profiles constructed from known enzymes  <cit> ; and blast2go annotates gene functions based on a combinations of various annotation methods  <cit> . the strategy of annotation transfer has been shown to work well and is frequently employed.

herein, we present an automatic, efficient and easy-to-use web-based annotation tool named fastannotator. given that many tools have been proposed to annotate sequences based on previously established knowledge, we chose to integrate several well-established and popular tools to construct this service. fastannotator utilizes blast2go and priam to identify go terms and ec numbers for transcript sequences. blast2go has a high annotation accuracy   <cit> , and priam provides an enzyme profile database that was updated in october  <dig>  <cit> . as certain assembled sequences identified using rna-seq may not cover full-length coding regions, we also included a domain search in fastannotator. in addition to the possibility of identifying domains based on partial transcript sequences, domain searching also enables fastannotator to identify possible functions for sequences that show a significant level of divergence. this feature was included because sequences may evolve to become dissimilar, although the functional domain regions are likely to be conserved through evolution under functional constraints. it has also been shown that proteins having the same domain composition are homologs and likely have the same function  <cit> . therefore, domain annotation in fastannotator can not only provide an annotation for a partially sequenced transcript but also improve the annotation performance for sequences that are highly divergent from existing database sequences. this property is particularly useful for metatranscriptomic analyses or samples from organisms that are distantly related to model organisms.

in summary, we have developed the fastannotator pipeline to provide automatic annotation of nucleotide sequences via a web interface. users can begin their annotation by uploading their sequences to the fastannotator website. fastannotator then assigns possible functions and identified domains in those input query sequences based on sequence similarity and pattern searches. the output of fastannotator includes the best hits in the ncbi non-redundant database, go terms, ec numbers, and domain identities  <cit> . users can explore the output on the website, access other external functional databases  for detailed functional descriptions and simply download the output for further analysis. as a web service specifically developed for ease-of-use annotations, the use of fastannotator does not demand any knowledge of the command line. moreover, fastannotator is free, efficient and user-friendly. relative to existing annotation pipelines, fastannotator is much more convenient because it does not require installation or tedious manual steps and allows the user to analyze a large number of sequences with a single click. fastannotator is now available at http://fastannotator.cgu.edu.tw/.

implementation
flowchart of the fastannotator pipeline
the annotation process in fastannotator consists of four main parts: finding the best hit in the ncbi non-redundant database, assignment of go terms, identification of enzymes, and identification of domains. the assignment of the go terms requires the result from last searching against the ncbi non-redundant database, and these four main steps can therefore be divided into three independent modules: go term assignment, enzyme identification, and domain identification . fastannotator runs these three steps in parallel to accelerate the annotation procedure and also calculates the basic statistics of the input sequences and provides a statistical report in the results.

the identification of go terms
last  <cit>  and blast2go   <cit>  were used together to identify go annotations for the query sequences. we downloaded the non-redundant protein sequences from the ncbi database  <cit>  and constructed a local database for blast2go. in fastannotator, last is used to find the similar sequences within the non-redundant protein sequence database. the output of last is then transformed into the equivalent blastx xml output format, which is the required input file format for blast2go. we used the statistical parameters λ and κ provided by the last output result to derive the bit score based on the following definition  <cit> :

 s' = λs - inκin <dig> 

the alignment result generated by last is then used as an input to blast2go. the final assignments of go terms are extracted and presented in a table on the website, which is made available for download.

the identification of domains
we downloaded the standalone blast+  program from ncbi  <cit>  and used as database the  <dig>  domain models  from the conserved domains database   <cit> . fastannotator applies the rpstblastn to identify domains in the query nucleotide sequences by searching against the preformatted domain database with mostly default parameters except the expectation value  which is set to be less than  <dig> , and the hit aligned length which is longer than 50% of the domain pssm  <cit> . after the domains of the query sequences are identified, fastannotator calculates the length coverage and presents the percentage of coverage for the domain in the report table.

the identification of ec numbers
fastannotator utilizes priam  <cit>  to identify potential enzyme functions. priam can detect specific enzymes patterns and annotate these enzymes with ec numbers. the latest version of the enzyme profiles  was downloaded from the priam website. the nucleotide sequence inputs were translated into protein sequences in six frames using transeq, a tool a part of the european molecular biology open software suite   <cit> . these translated protein sequences are then used as inputs to search against the enzyme profile database. fastannotator identifies transcripts that may act as enzymes and presents the transcripts together with ec numbers in the output table.

RESULTS
the fastannotator website allows users to upload de novo assembled sequences from rna-seq dataset through the upload page . only fasta files of less than  <dig> megabytes are able to be uploaded to the server. after a successful upload, a unique job id is provided as an identifier to start the annotation pipeline. all annotation results can be inspected over the internet or downloaded in a compressed file for further analysis. the report consists of five sections. the first section is a histogram of the length distribution of the input sequences as well as a list of other statistics, including the average length, total number of bases, and the n <dig> value. the second section lists the best hits for all sequences against the ncbi non-redundant database. to avoid overloading the browser, only the top  <dig> entries are shown on the website results page as a demonstration, although users can download all of the best hits from the download link. the third section contains the results of the functional annotation . go term annotations are grouped according to biological processes, cellular components and molecular functions and are plotted in three separate horizontal bar charts; an example is shown in figure  <dig>  to better represent the overall distribution of functional annotations, additional spread-out or clustered views are provided based on different filtering level of go terms. for example, when level  <dig> is chosen, all annotated go terms are traced back to the root until reaching the nodes that were  <dig> edges away from the root  on the go acyclic graph. users can then choose among different level of go terms to get a better biological interpretation. the fourth section presents the enzyme annotation, which lists all enzyme hits and their corresponding query sequences. the last section contains a list of domain identifications, and again, only  <dig> entries are shown to avoiding overloading the browser. all of these annotations can be downloaded as a compressed zip file. annotation results for each job will be retained on the fastannotator server for two weeks after the job is finished, and users can retrieve the finished job using the job ids provided by the server.

to demonstrate the performance and speed of fastannotator, we ran it on several transcriptome sequence datasets from different organisms. we were especially interested in how fastannotator could assist in the annotation of non-model organisms. the unpublished rna-seq dataset from a clam  was used as an example. this transcriptome included  <dig> , <dig> cdna sequence reads generated using an illumina genome analyzer, and the average read length was  <dig> base pairs. a reference genome for the clam is currently not available, and thus, the reads were assembled de novo into  <dig>  contigs using the software package clc genomics workbench . using these contigs as the input, fastannotator required approximately  <dig> hours to finish the annotation. the statistical output showed that the n <dig> of these contigs was  <dig> nucleotides and the majority of these assembled contigs  ranged from 200- <dig> base pairs. this large number of short contigs may have resulted from a low level of coverage, and we believe that many of these contigs were actually partial transcript sequences. of these contigs,  <dig>  were found to be similar to sequences in the ncbi non-redundant protein database;  <dig>  were assigned at least one gene ontology term;  <dig>  were found to contain at least one domain; and  <dig> were assigned an enzyme annotation. among all of the contigs,  <dig>  % of contigs were annotated, and the annotation rate was even higher  if we only considered contigs longer than  <dig> base pairs. these contig annotation rate was slightly higher than that reported in previous studies  <cit> , the majority of which were based on domain identification. a further comparison of our annotation results with a recently published clam transcriptomic analysis by huan et al.  <cit>  showed that our annotation results for the clam transcriptome were similar.

we were interested in the performance of fastannotator for different organisms from different evolutionary lineages. we tested fastannotator using six transcriptome datasets, which includes data from plants, invertebrates, protists and prokaryotes . all of these transcriptomes were derived from the de novo assembly from ngs reads with the exception of the amoeba transcriptome, which was derived from est data. reference genomes were available for c. elegans and s. parasanguinis  <cit> , and the highest sequence annotation percentages were obtained for these organisms. given the high accuracy obtained using blast2go, which was used in the fastannotator annotation, these annotation results can be considered highly reliable. for the non-model organisms, fastannotator was able to annotate approximately half of the input sequences in three out of the four cases. we found the annotation rate was much lower than half in clam transcriptome . meanwhile we found the percentage of annotated contigs in our clam transcriptome was similar to those reported in previous clam studies  and the dataset used here was composed with numerous of partial transcripts. thus we conclude that fastannotator is a suitable annotation tool for non-model organisms.

+rna-seq denovo assembly result

*percentages of sequences had been annotated with go, enzyme or domains.

go annotation is the most commonly used and well-established functional annotation scheme. to identify go terms for the input sequences, fastannotator incorporates the blast2go pipeline, which is one of the most widely used annotation tools and claims to have an annotation accuracy of 65-70%  <cit> . however, we made a small modification to the blast2go pipeline by replacing blastx with last, as last is significantly faster and is capable of detecting evolutionarily conserved regions  <cit> . we also used the example file provided by the b2g4pipe package to benchmark the computation time and comparing output results of blastx and last on the same machine . we found that for this file of  <dig> nucleotide sequences, blastx took  <dig> times longer to search against the non-redundant database comparing to last. the resulting  <dig> annotations reported by each tool differed in only  <dig> cases. a closer inspection of the results revealed that the differences were minor and could be explained by the parent and child relationship within the go acyclic graph. therefore, we concluded that replacing blastx with last resulted in a minimal difference in the annotation while providing a substantial improvement in the computational speed.

regarding the detection of enzymes, fastannotator annotates enzyme functions based on the database of  <dig>  ec numbers included in the most recent priam release. according to integrated relational enzyme database  release  <dig>  there were  <dig>  active ec numbers  <cit> . furthermore, it is well-known that more than one-third of the enzyme activities with ec numbers are so-called orphan enzyme activities, which are not associated with a protein or gene sequences  <cit> . approximately 50% of the orphan enzyme activities are limited to only one species or closely related organisms, which implies that orphan enzyme activities may be limited to certain organisms that remain to be fully explored  <cit> . due to these limitations, current annotation tools that are based on sequence similarity searches are restricted to detecting only certain enzyme activities. consequently, fastannotator may overlook certain enzyme functional annotations, especially if those functions are restricted to particular organisms. in our clam transcriptome, for example, only  <dig> contigs were identified as enzymes. because it has been estimated that approximately 18-29% of genes encode enzymes in eukaryotes  <cit> , it is very likely that this level of enzyme annotation was an underestimate, which may have occurred due to the fact that the majority of the contigs are only partial transcripts in our clam example and because the enzyme database used in fastannotator was imcomplete. fastannotator may provide improved annotations in the future after additional enzyme functions and associated sequences are identified and included in the enzyme databases.

CONCLUSIONS
as sequencing technologies improve and decrease in cost, an increasing number of sequences can be generated. however, the annotation of these sequences, especially for those generated from unfamiliar biological samples, becomes an important issue. in this project, we developed fastannotator, an automatic annotation web tool, which integrates several well-developed annotation tools together to provide annotations for query sequences. fastannotator allows users to assign protein functions, cellular location, enzyme activity, and function domains to query sequences through an easy-to-use interface. by adopting a different sequence search program, last, and including domain identification, it is capable of efficiently annotating sequences and is suitable for annotation of sequences derived from less well-studied organisms or environmental samples. in summary, we present a web-based annotation tool, fastannotator, which should be helpful in transcriptome studies, particularly metatranscriptome or non-model organism studies.

availability and requirements
project name: fastannotator

project home page: http://fastannotator.cgu.edu.tw

hardware specifications: ibm x <dig> with four xeon e <dig>  <dig> ghz cpus and 128g ram

operating system: centos release  <dig>  with linux kernel  <dig> .18

programming language: python and perl for pipeline building, php for website interface.

browser requirements: the website can be access by popular web browser with javascript enabled include mozilla firefox, google chrome and microsoft internet explorer.

competing interests
the authors declare that they have no competing interests.

authors' contributions
twc and thw built the pipeline. rcrg designed and constructed the website. twc and rcrg wrote the manuscript together. pjh and cyl maintain the system. ymc and ccc performed rna-seq of streptococcus parasanguinis and clam. pt and ccc supervised and revised the manuscript.

