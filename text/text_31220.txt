BACKGROUND
the most abundant, and probably the most diverse, biological entities are bacteriophages, the viruses that infect bacteria. helped by recent advances in sequencing, comparative studies  use dozens – even hundreds – of genomes from bacteriophages that infect single or related bacteria species. using dot plots and clustering techniques, these studies produce meaningful clusters that share significant similarity .

in order to explore the relations between bacteriophages in the same cluster, it seems natural to turn to whole genome multiple alignments. one of the main features of whole genome aligners is that they take into account genome rearrangement events that scramble the order of large segments of chromosomes . all of these approaches are based on the principle that sequence similarity is a good predictor of functional similarity. and it is, most of the time. one notable exception are bacteriophage genomes, in which similar biological function may be encoded by dissimilar sequences – sequences with no detectable similarity, either as nucleotide sequences, or as amino acid sequences – encoding different protein folds, rendering traditional multiple sequence aligners mostly useless .

in this paper, our goal is to construct biologically meaningful multiple alignments of whole bacteriophage genomes from the siphoviridae, the largest family of tailed bacteriophages  <cit> . in order to achieve this, we exploit unique structural properties of these genomes. the main one is that even loosely related tailed bacteriophages are often functionally collinear, meaning that different functionalities mostly follow the same order on the genomic sequence, which is, up to a circular permutation: lysogeny, dna assembly, head morphology and dna packaging, tail assembly, and lysis  <cit> . the second one is that genome size is constrained by the fact that it must fit into a capsid whose shape, thus volume, is geometrically determined by a handful of genes. this size constraint implies that segment duplication is a rare event within a genome, and when it occurs, duplicated sequences are short. last, but not least, bacteriophage genomes are characterized by an “unusually high degree of horizontal genetic exchange in their evolution”  <cit> , resulting in large sequences – up to thousands of base pairs – that are exact or almost exact matches between different strains.

as an example of this last feature, fig.  <dig> compares two segments of s. aureus bacteriophages  <dig> and  <dig> . the figure is composed of  <dig> columns, three of which corresponding to exact matches of length  <dig>   <dig> and  <dig>  and the other two columns containing large segments occupying the same position but without any ‘detectable’ similarity, meaning neither the nucleotide nor the translated sequences produce any significant blast hit.
fig.  <dig> local alignment of s. aureus bacteriophages  <dig> and  <dig>  the first, third and fifth columns are exact matches of length  <dig>   <dig> and  <dig>  the sequences in the second and fourth columns do not have detectable similarity, but, given their similar position along the genome, putatively encode similar biological functions. indeed, the fourth column encodes two variants of the integrase gene



the mosaic patterns exhibited by the comparison of two bacteriophages, as illustrated in fig.  <dig>  have given rise to the modular theory of phage genome organization  <cit> , which postulates that biological functions are grouped into modules whose order is mostly conserved along the genomic sequence. each module has variants that perform the same function, possibly encoded by dissimilar sequences. the fact that two variants are aligned in the pairwise comparison may allow the transfer of functional annotation between two collinear phages.

while it is easy to do a pairwise comparison of genomes, upgrading the comparison to multiple genomes is not simple. the standard approaches used by multiple sequence aligners often start by identifying anchors, that are similar segments of significant length shared by all genomes, and then align the sequences between the anchors. anchors exist in sets of related bacteriophages, but may be very short or very far apart, and the sequences between the anchors may fail to align properly.

the theory behind our framework is based on partial order alignment graphs  which were initially developed for standard multiple sequence alignments. most applications of these graphs require, in the last phase of the alignment, a linearization of the graph. however, an interesting suggestion appearing in  <cit>  is to skip this last step and work directly with the partial order: this is exactly what is needed for bacteriophage genomes, but apparently the approach has yet to be applied in this context.

among the multiple sequence aligners, progressivemauve  <cit>  is one of the few that recognizes the need to identify ‘local’ anchors, that are shared by a subset of the target genomes. unfortunately, mauve alignments are linearized, blurring the combinatorial properties of the partial order.

our evolutionary model includes typical mutations characterizing sequence evolution such as substitutions and indels, gains and losses of functions, and recombinations. for sets of genomes that have evolved under these conditions, we will show that it is possible to identify functionally related sequences even when they lack similarity. we also detect large rearrangements events that contradict the functional collinearity hypothesis, such as gene transpositions, and duplications.

in this paper, we report the conception and implementation of alpha , the first aligner specifically designed for whole bacteriophage genomes. with the help of partial order structures, alpha captures the unique mosaic structure of bacteriophage genomes, and provides an interactive graphical interface with the generated multiple alignment. we also give a detailed comparison between alpha and progressivemauve  <cit>  alignments.

methods
partial order alignment graphs and functional collinearity
this section draws heavily on multiple whole genome alignment  tools and definitions. however, since we have the goal of identifying functional analogs, some classical notions of this field will have a somewhat different meaning: in these cases, we try to be precise and to underline the differences.

a matchm between two genome sequences g and h will be denoted m={g,h}, where s and u are the start positions of the match in the respective genomes, and t−s=v−u; it asserts the equalities g=h,…,g=h.

we next formalize the notion of homologous positions, defining what constitutes a ‘column’ of a multiple alignment, along the lines of j. kececioglu’s original paper  <cit> .

let ℳ be a set of matches on genomes g={g <dig> g <dig> …,gn} and let pij denote position j of genome gi. two positions pij and pkl are equivalent if there is a match in ℳ that asserts that gi=gk, or if there is a sequence of matches that links gi to gk through a sequence of such assertions. the equivalence class of pij is denoted ⟦pij⟧, and we will refer to it as a column. the support of a column sp⟦pij⟧ is the set of genomes that have a position in the column ⟦pij⟧.

note that there is no requirement that a column span the complete set g, and it usually does not in bacteriophage genomes. the notion of support generalizes the notion of anchor that is used in wga, which corresponds to columns whose support is equal to g.

the column graph is obtained by linking the different columns according to their order in each genome. formally, it is the directed graph whose vertices are the columns ⟦pij⟧, and there are edges from ⟦pij⟧ to ⟦pkl⟧ for all genomes gg that have positions pgs in ⟦pij⟧ and pg in ⟦pkl⟧. an example of the construction is given in fig.  <dig>  part .
fig.  <dig> the column graph and the alignment graph. a a set of two exact matches on three genomes; the total length of matches is  <dig>  b the matches define columns for which all positions contain the same nucleotide. the column graph is obtained by adding edges corresponding to consecutive positions in the genomes. c consecutive columns with the same support are merged to form the alignment graph, whose vertices are exact alignments



definition <dig> 
let ℳ be a set of matches between genomes g={g <dig> g <dig> …,gn}. the set g is functionally collinear with respect toℳ if its column graph is acyclic.

in most wga systems, collinearity is meant to represent sequences that ‘align well’. classical collinearity is broken by pairs of dissimilar sequences, and is an indication of gene rearrangements, gains or losses, in most higher organisms. functional collinearity, on the other hand, excludes rearrangements, but allows dissimilar sequences to be compared. interestingly, both concepts have the same formal definition, but the use of the column graph is quite different from one application to the other.

a necessary condition for a column graph to be functionally collinear is that each column have at most one position in a given genome, since the presence of two or more positions would generate a cycle. we have therefore the following definition:

definition <dig> 
a set ℳ of matches is said to be valid if, for each column ⟦pij⟧, both ⟦pij⟧ and sp⟦pij⟧ have the same number of elements.

the most likely sources of invalid sets of matches are duplicated segments, and tandem repeats with a variable number of repeats, which may cause overlapping matches. most wga deal with these invalid matches by eliminating matches that are not unique in a genome, and by trimming overlapping matches that result from tandem repeats. given the simple data structure that we use for the alignment graph – equivalence classes – we eliminate duplicated segments, and trim overlapping matches by post-processing the columns: any column that has more than one position for a genome is split into singletons.

allowing the length of matches to be very small may cause misalignments, and may also create cycles in the column graph, due to random small transpositions. it is therefore wise to have a minimal length m for matches. in the results and discussion section, we will discuss how the value of m is set, and how it can be changed.

when the column graph has no cycles, we use a condensed version, called the alignment graph, in which consecutive vertices with the same support are merged, as in fig.  <dig>  part .

construction of the alignment graph
given a set of genomes g={g <dig> g <dig> …,gn} we use genometools  <cit> , a suffix-array based program, to get a set of exact matches of size at least m. the parameter m is normally chosen as the minimum length such that there is no cycle in the graph. it is set by default at  <dig>  but can be changed to any desired value. large values of m are sometimes useful in initial explorations of a set of bacteriophages and small values can be used to refine alignments.

the main steps of the algorithm underlying alpha are described in algorithm  <dig>  it takes as input a set of matches of minimum length m, constructs the column graph, and the alignment graph when possible. after initializing the graph, it uses the union-find algorithm  <cit>  to construct the columns. this step runs in omℓ), where mℓ is the total length of matches, and α is the inverse of the ackermann function  <cit> .



the third step visits all classes, determining whether they are valid. for each class, this determination can be made in o steps, where n is the number of genomes, yielding a complexity of o for splitting all the non-valid classes, where nℓ is the total length of genomes. note that at most nℓ new classes can be created by the splitting process.

in the fourth step, edges between consecutive columns are added to the graph, and it is checked for the presence of cycles that would indicate non-collinearity. this can be done in time proportional to nℓ. assuming the genomes are collinear, consecutive columns with the same support are then merged to give the alignment graph.

the total complexity is thus omℓ+nnℓ). we will see in the results and discussion section that the quantities mℓ and nnℓ vary greatly depending on the data.

from the alignment graph to gapless alignments
the vertices of an alignment graph are exact alignments, since all rows are equal. regions that do not contain exact matches of length at least m remain unaligned. in order to increase the compactness of whole genome alignments, we contract the vertices further with the following requirement:

definition <dig> 
the pair of vertices  is contractible if u precedes v in the partial order, u and v have the same support, the support of every vertex between u and v is included in sp, and the lengths, in base pairs, of all segments that span from u to v are the same.

a contracted vertex is obtained by merging into a single vertex all vertices between a pair of contractible vertices u and v, including u and v. contracted vertices are gapless alignments, since all sequences in them have the same length. without upper bounds to the length of contracted vertices, there is a small chance that some of these alignments have no biological foundation, since insertions and deletions could conspire in producing sequences with the same length, but low similarity. as we will see in the results and discussion section, bacteriophage genomes are well behaved in this regard.
fig.  <dig> contracted vertices. a example of a contracted vertex  and its expanded graph  in the alignment of four s. aureus bacteriophages. the length of the vertex is  <dig> nucleotides, and the percentage of identity is  <dig> %. in the expanded graph, there are two single nucleotide mutations that account for the  <dig> % identity



RESULTS
in this section, we first present examples of multiple alignments and what can be deduced from them. we next assess the validity of the gapless alignments inferred by alpha by submitting the aligned sequences to three standard aligners. finally, we compare the results of alpha and progressivemauve  <cit>  on whole genome alignments.

alpha is an interactive tool that allows the manipulation and the visualization of whole genome alignment graphs with hundreds of vertices, involving dozens of species: we can only hope to give a glimpse of the possibilities. alpha’s graph layouts are powered by the open source graph visualization software graphviz  <cit> .

the alignment graph
the alpha aligner, in its most basic mode, takes as input a file containing genomes in fasta format, and produces an alignment graph when the genomes have no large rearranged segments. the vertices of the alignment graph are gapless multiple alignments inferred by alpha. the vertices contain the positions of the aligned segments in each genome. they also display the length of the alignment and the percentage of columns that have the same nucleotide in each genome – for readability, vertices smaller than  <dig> bp may be masked. alignments are connected by color-coded arrows, one color for each genome.
fig.  <dig> a local alignment of four s. aureus bacteriophages. in column  <dig>  three phages are in a  <dig> bp gapless alignment, with  <dig> % identical columns. a major deletion in phage b <dig> spans columns  <dig>   <dig>  and  <dig>  and the corresponding arrow is dotted to reflect the fact that some basepairs are not shown,  <dig> bp in this case



bacteriophage genomes have been sequenced for decades, and since they can adopt different linear and circular configurations in their complex life cycle, there is no universal consensus as to where the sequence begins. functional collinearity is biologically defined up to a circular permutation of the sequences, but bacteriophage sequences in databases are linear. if a set of bacteriophage genomes was obtained from different projects, or different laboratories, it may be necessary to synchronize them using a simple procedure that looks for the largest similar sequence shared by all genomes, and sets the beginning there. we call this process normalization, and alpha checks its input to decide whether normalization is needed.
fig.  <dig> modules and variants. local alignment of four s. aureus bacteriophages clearly showing modules and variants. notice that sequences with the same variant in the second column are switched in the fourth



the anchor view
anchors are alignments that span the whole set of n genomes under study. they are maximal exact matches, in the sense of hohl et al.  <cit> , but they can be as short as  <dig> base pair. each anchor is constructed as the intersection of at least n− <dig> exact pairwise alignments of length at least m, thus the reliability of anchors increases with both the number of genomes, and the parameter m. the ordered set of anchors forms the backbone of a set of bacteriophage genomes and captures their common core, as defined in mosaic  <cit> .

the anchor view of alpha presents a sequence of anchors for the whole genomes, or for selected regions: it is the normal starting point to explore a set of genomes. figure  <dig> shows an example of an anchor view for a set of  <dig> mycobacteriophages computed with m =  <dig>  there are not many anchors for such a large value of m, but they are very well supported because each anchor is defined by at least  <dig> exact matches whose length is at least  <dig> bp. since anchors are articulation points of the alignment graphs – removing them disconnects the graph – each group of sequences spanning from one anchor to the next can be explored separately, as we show in fig.  <dig> 
fig.  <dig> the anchor view. the alignment of  <dig> mycobacterium bacteriophage genomes is a challenge to visual approaches. here we use a large value of m= <dig> to display a sequence of anchors, or backbone, in a single screen. the user can then zoom quickly to a specific region, and detect, as fig.  <dig> shows, interesting subsets of genomes. boxes group pairs of anchors bounding a gapless alignment

fig.  <dig> zooming from the anchor view. local alignment of a set of  <dig> mycobacterium bacteriophages, obtained by zooming in from the anchor view of fig.  <dig>  working with a large number of phages allows us to quickly identify subsets of phages that have distinct patterns, such as phages a, c and e  in this example



once a pair of anchors is selected in the anchor view, an alignment spanning from one to the other is generated. it is possible to ask the aligner to align the sequences between them, and a new value of m is automatically computed, generally much smaller – or set to any desired value. in fig.  <dig>  for example, the value of m is  <dig> 

assessing the validity of alpha gapless alignments
in order to assess the gapless alignments produced by alpha, we ran it on three datasets. table  <dig> presents the principal characteristics of these datasets such as nℓ, the total length of genomes, the value of m used in the computation, and mℓ, the total length of matches.ℓ is the total length of genomes; m is the minimal match length; m
ℓ is the total length of matches

n
n
ℓ
m
m
ℓ
s. aureus
mycobacterium
mycobacterium


dataset staph <dig> contains  <dig> complete s. aureus bacteriophage genomes:  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig>  dataset myco <dig> contains  <dig> mycobacteriophage genomes from cluster a <dig> of the actinobacteriophage database . myco <dig> contains bacteriophage genomes {u <dig>  alvin, dd <dig>  billknuckles, perseus, dreamboat}, a subset of myco <dig> chosen for diversity within cluster a <dig>  some of the mycobacteriophage genomes were trimmed in order to automatically run the experiments with small values of m; transpositions at the end of the sequences cause alpha to increase the value of m .

alpha computed  <dig> gapless alignments of  <dig> or more sequences on these datasets. all  <dig> alignments were re-aligned using clustal omega  <cit> , t-coffee  <cit>  and muscle  <cit> , using the default values for dna alignments, and we report the number of alignments that include gaps. for each dataset, table  <dig> gives the number of vertices in the expanded and contracted alignment graphs, the number of vertices containing at least two sequences, the number of contracted vertices, and the number of gapped alignments obtained by the three aligners.


all four aligners agree on  <dig> of the 491= <dig> +154+ <dig> gapless alignments proposed by alpha. the remaining  <dig> were contested by one or more of the aligners, for a total of  <dig> gapped alignments. they cover  <dig> different regions of the genomes since, in four cases, aligners proposed gapped alignments for the same region in both the myco <dig> and myco <dig> datasets.

judging whether nucleotide alignments are in fact gapless is a delicate task. when proteins sequences were available, we used the gapless protein alignments to reject the corresponding gapped nucleotide alignment. this was done by using tblastx with sequences that do not share the same gap patterns – all the gapped alignments showed only two different gap patterns – and by confirming annotations using blastx. using this method, we could rule out  <dig> of the  <dig> alternative gapped alignments, as table  <dig> shows, for regions  <dig>   <dig>   <dig>   <dig>  and  <dig>  all sequences and alignments are available in the additional file  <dig> 


for region  <dig>  the three aligners proposed three different gapped alignments, when aligning the  <dig> genomes of dataset myco <dig>  but they all switched to gapless alignments when aligning the same region in the  <dig> genomes of dataset myco <dig>  which contains myco <dig>  using the principle that alignments with more sequences should be more accurate, those three gapped alignments were also ruled out.

of the remaining three gapped alignments, one was proposed by muscle, while alpha, clustal omega and t-coffee proposed gapless alignments . given the overall poor performance of muscle, we chose the rule of the majority. finally, for region  <dig>  there was a tie between the four aligners, and there was no decision.

as the results of table  <dig> clearly indicate, alpha gapless alignments were confirmed in all cases except for the tie in region  <dig>  where alpha and clustal omega – the two best gapless aligners – predict a gapless alignment against t-coffee and muscle, who have the most confirmed misalignments. this is a welcomed and surprising result, since the only parameter of alpha is m, the minimal length of exact matches: it does not rely on thresholds, and does not maximize any score. instead, it relies on the transitive properties of the equality relation to provide reliable anchors, and on the unique constraint imposed on bacteriophages who, before traveling, must pack their whole genome in a small suitcase.

comparison with mauve alignments
in the preceding section, we showed that alpha alignments are sound, in the sense that they predict biological meaningful similarities. the next question is to evaluate to what extent alpha captures all meaningful similarities.

in order to do this, we compared alpha with progressivemauve  <cit> , since it is one of the few aligners that explicitly computes the partial order underlying collinear blocks, storing this information in the .backbone file generated during an alignment. as fig.  <dig> shows, mauve alignments are displayed in a linear way, using colors to show which subsets of segments are in an alignment. with more than a handful of genomes, such as the myco <dig> dataset, this type of visualization quickly becomes impractical .
fig.  <dig> visual comparison. alpha and mauve alignments of the same region of the staph <dig> dataset. numbers in red were added to show the correspondence between alpha alignments and mauve color blocks. all alpha alignments are found in the mauve alignment, but mauve apparently detects an alignment of the four genomes that is missed by alpha: the block labeled ‘x’. we show in the text that block x is a misalignment



comparing partial order alignments stemming from two different aligners turned out to be a daunting task: an alignment proposed by one aligner can be broken into several alignments by the other, since alignments may involve different subsets of the input genomes. the most practical approach was to compare only alignments that included all input genomes from both aligners.

we used a dataset of four s. aureus phages {phieta <dig>  phinm <dig>  phinm <dig>  b236}, with default parameters for progressivemauve, and interactively setting m between  <dig> and  <dig> for alpha. all alignments from both aligners were identified by their phieta <dig> start and end positions, and further refined by whether they were identified by mauve only, alpha only, or both. this produced  <dig> blocks, available in the additional file  <dig>  covering  <dig>  of the  <dig> bp of the phieta <dig> genome. of the  <dig> blocks,  <dig> were quite short, from  <dig> to  <dig> bp, while the length of the remaining  <dig> ranged from  <dig> to  <dig> bp.

all blocks predicted by both aligners were considered as valid alignments. furthermore, short blocks  that were predicted by only one aligner – mostly by mauve – were considered as valid: they averaged  <dig> bp. three of the remaining large blocks – two predicted only by mauve, and one only by alpha – were validated using protein alignments. figure  <dig> shows, in the various green-blue-shaded rectangles, the repartition of valid alignments, measured in total bp length, between common and exclusive alignments for mauve and alpha. these results are further partitioned by discriminating whether a block is an alignment, or an extension of an alignment.
fig.  <dig> alignments comparison. diagram representing the repartition of  <dig> bp of  <dig> block alignments by alpha or mauve. the top  <dig> rectangles are from alignments produced by mauve, and the bottom  <dig> are from alpha alignments. green and blue rectangles represent valid alignments, while yellow and red are misalignments



seven alignments predicted only by mauve, totaling  <dig> bp, were suspicious. they correspond to the yellow and red rectangles of fig.  <dig>  three of them had non-significant tblastx results, despite the fact that at least one of the two sequences was annotated as coding. the remaining four alignments had a high number of gaps, contradicting the amino acid alignments of the corresponding homolog coding sequences. an example of each of these cases is detailed below, and the evidence for all others is detailed in additional file  <dig> 

example of the non-homolog case. this is the block labeled ‘x’ in fig.  <dig>  mauve aligns phage phieta,  <cit> , with phage b <dig>   <cit> . the nucleotide alignment has  <dig> gaps of lengths  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig>  over  <dig> bp. the best tblastx hit between the two sequences has length only  <dig> aa, with 4/ <dig> identities, and with an e-value of  <dig> . in this region, phage b <dig> is annotated for protein akc04696:49- <dig>  while phage phieta <dig> is annotated for two proteins: yp_001004350:238- <dig> followed by yp_001004350:1- <dig>  thus there are two annotated coding regions with no detectable similarity, and trying to align them using the given nucleotide alignment would introduce numerous frameshifts.

example of the homolog case . mauve aligns phage phieta, 8704- <dig>  with phage phinm <dig>  8046- <dig>  the nucleotide alignment has  <dig> gaps, of lengths  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig>  the corresponding blastp  <dig> aa alignment of annotated proteins yp_001004347:1- <dig> and abf73110:1- <dig> has 58/ <dig> identities, 92/ <dig> positives and  <dig> gap. this is a rather good alignment of two distant homologs, but the mauve alignment does not reflect the conservation of the two proteins.

when one excludes mauve misalignments – that is, considering the green and blue rectangles of fig.  <dig> – both aligners generally agree on the topology of the alignment graphs. as could be predicted, due to mauve’s seed and extend strategy, it has wider alignments compared to alpha, and this accounts for the  <dig> bp extensions that alpha could not predict. on the other hand, the  <dig> bp extensions that alpha alone predicted, in four different blocks, were in fact verified to be exact matches that mauve somehow missed. the two aligners also failed to detect a few small alignments, with a little advantage to alpha: mauve detected  <dig> bp that alpha did not, while alpha detected  <dig> bp that mauve did not.

the high rate of mauve misalignments on bacteriophage genomes is problematic. more than  <dig> % of mauve column alignments on this dataset are either random, or belong to nucleotide alignments whose gaps contradicts the corresponding annotated proteins alignments. it should be noted, however, that the mauve algorithm uses muscle to produce alignments between its own anchors, and the way muscle introduces gaps in nucleotide alignments does not seem to be appropriate for bacteriophage genomes, as we already saw in the preceding section on validating alpha gapless alignments.

overall, alpha’s alignment strategy captures the essential features of bacteriophage genomes. regions that are similar are detected, while more dissimilar regions are not aggressively aligned. being a conservative aligner, alpha relies on functional collinearity to predict distant homologs that should be aligned using amino acids translations, such as the variants in columns  <dig> and  <dig> of fig.  <dig> 

CONCLUSIONS
due to their peculiar mosaic structure where similar functions do not correspond to similar sequences, bacteriophage genomes are not well-suited to traditional whole genome alignment techniques. on the other hand, they exhibit features that can be leveraged to obtain alignments, most notably functional collinearity, a low duplication rate, and the presence of long shared sequences.

in this paper, we presented a mathematical model based on partial order graphs for performing multiple alignment of bacteriophage whole genomes, along with algorithms to operate on the model. relying exclusively on the equality relation, the model is almost parameter free, greatly reducing the need to calibrate the aligner, yet delivers biologically meaningful results. the model has been implemented in the form of an interactive aligner that can perform multiple alignments of dozens of genomes and present the result in an attractive format.

we also showed that alpha, used on bacteriophage genomes, produces biologically meaningful alignments, while avoiding the high rate of misalignments of complex heuristics such as progressivemauve.

our model supposes that all genomes under consideration are functionally collinear. this is often the case, but not always. our program can detect when this condition is not satisfied – indicating the presence of rearrangements – but does not perform the alignment in such a case. a short-term goal is to extend our mathematical model and aligner to deal with rearrangements.

some bacteriophage genomes present in the online databases are well annotated, other are less so. another goal is to extend the aligner in order to perform automated transfer of annotations using the generated alignments.

finally, while we focussed this study on siphoviridae, we plan to test alpha on more general viruse families in which horizontal transfer is widespread, and for which the collinearity property may hold.

the code, along with installation instructions for ubuntu and osx, is available on bitbucket .

additional files
additional file  <dig> 
regions in which gapless alignments predicted by alpha are contested by clustal omega, t-coffee or muscle. 



additional file  <dig> 
mauve alignment corresponding to the alpha alignment of fig.
7
. 



additional file  <dig> 
detailed comparison of alpha and mauve alignments for the four
s. aureus
 phages phieta <dig>  phinm <dig>  phinm <dig> and b <dig>  



competing interests

the authors declare that they have no competing interests.

authors’ contributions

sb, ac, pg, ab and ks conceived the study and developed the model. ks wrote the code, helped by np and sb. sb, ac, np, pg and ab performed and analyzed the experiments. ab drafted the manuscript, helped by pg, sb and ks. all authors read and approved the final manuscript.

