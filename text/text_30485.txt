BACKGROUND
in recent years, r  <cit>  has gained a large user community in bioinformatics thanks to its simple but powerful data analysis language. growing repositories like bioconductor  <cit>  and cran  <cit>  assist bioinformaticians with hundreds of free analytical methods and tools. these user-contributed methods are easily reused and adapted to each particular experiment for analysis of biological data. examples of often reused and adapted methods are, respectively, the packages tilingarray  <cit>  and affygg  <cit> . however, while data generated in experiments previously fitted on a cd-rom, nowadays, using new equipments, hardly fit on a single dvd-rom. as a consequence of the post-genomic explosion of data, the demand of computational power is increasing continuously and solutions to keep the processing pace of high-throughput devices are required. a common approach in many bioinformatics fields like genomics, transcriptomics and metabolomics, where large sequential data sets are analyzed, is the use of parallel computing technologies  <cit> .

using r together with parallel computing is not a trivial task as the language does not provide mechanisms to support it natively. to compensate for this lack, several tools have been developed with different degrees of success. early contributions to parallel computing in r were based on available general purpose parallel computing frameworks like mpi  <cit>  and pvm  <cit> . examples of these r libraries are rmpi  <cit>  and rpvm  <cit> . these libraries provide low level programming interfaces, the complexity of which hinders a wider use of them. in order to hide such complexity, packages like networkspaces  <cit> , snow  <cit>  or taskpr  <cit>  were created. they provide a higher level of abstraction, encapsulating the previous libraries  in simpler libraries and providing sufficient flexibility for the average type of programs coded in r. additional development has been carried out with the framework pr  <cit> . it adds several modules to automate the parallelization of any r program. this feature is very important since programmers do not need to think "in parallel" when coding their r scripts, and anyone without previous knowledge of parallel computing can benefit from its advantages. however, while the programming model has been simplified during the last years, the dependency on external frameworks and dedicated resources is still a major obstacle for many bioinformaticians . these solutions are well suited for research groups with access to dedicated infrastructures  and/or enough time to invest in the development of ad hoc parallel programs. however, when these requirements are not met, solutions based on self-contained tools , capable of running in common desktop computers, are the preferred choice.

in this paper we present an r add-on package for parallel computing: r/parallel. to use it, the programmer does not need to change his algorithm nor install and maintain any additional software as the r/parallel package is self-contained and capable of using current multicore processor desktop computers. it easily and effectively enables the automatic parallelization of loops without data dependencies  <cit> , thus bringing the benefits of parallel computing within the reach of any bioinformatician using r. its design allows its direct use with current bioinformatics analysis tools such as r/qtl  <cit> , metanetwork  <cit>  or affygg  <cit>  for analysis of genome-wide gene expression data.

implementation
the implementation of r/parallel has been carried out with the objective of increasing the performance of r by means of parallel computing while minimizing the requirements to use it. this section explains the design decisions made to speed up r programs while overcoming the common problems experienced by bioinformaticians with previous parallel computing solutions.

the first aspect taken into account is the desire to minimize user intervention when parallelizing new or existing r programs. the perfect solution should not require any further modification from the programmer. this is achieved with fully automatic parallelizers, which parse the program code, check it for data dependencies and generate a set of independent tasks that can be safely evaluated in separate processors. however, the drawback of this approach is that the parallelizer, a priori, does not know the execution time of each independent task. when a set of tasks are running concurrently, additional overhead and delays are introduced due to additional processing steps . it is quite likely that a sequence of small fast tasks is parallelized and, despite parallel execution, as a result of the transformation process and additional synchronization, the overall processing time can be increased. to avoid this situation, the design decision made is to let the users indicate which code regions  they need to speed up. with this information, r/parallel will automatically parallelize its execution to increase the performance.

another aspect to consider when developing parallel programs is the difficult task of debugging when coding errors arise. when multiple processing units are running concurrently at different steps of a program, the identification of the conditions that triggers a bug and the retrieval of the state of each execution thread is a cumbersome task that should be avoided. to minimize this risk, an objective of the design of this package is the ability to run the sequential  version of the r programs without changing any further line of code. by running a program sequentially it is possible to test the correctness of the implemented algorithm and debug using traditional tools. the user can activate the parallel execution just by loading the r/parallel package before performing a calculation. this design decision is also supported by the fact that, as the user program is not functionally dependent on r/parallel, it can always be shared with other bioinformaticians without requiring them to install the package or modify a single line of code.

internally, r/parallel is designed using a master-worker architecture. the master component runs within the main r instance and distributes the work. the workers run in new processes with new r instances and perform the calculations retrieved from the master. the implementation of the package uses r scripts and c++ objects, taking advantage of both programming worlds. combining low level operating system calls in c++ to manage processes, threads and inter-process communications  with the intrinsic features of r, like the capability of retrieving or creating functions at runtime , it has been possible to build a generic solution able to automatically transform a sequential loop and parallelize its execution.

RESULTS
using the tool
use cases
practical applications of parallel computing are to increase the number of finished tasks given a fixed time or to decrease the time needed to perform a long task. to achieve this, a divide and conquer approach is used. the initial problem is partitioned into independent tasks which are computed simultaneously using several processing units. with r/parallel, partitioning is applied to loops and data, and multi-processing is used to get access to all the available processing units . the benefits of partitioning and multi-processing are shown in figure  <dig> with three real cases. the observed speedups demonstrate that loops without data dependencies can be executed more efficiently using r/parallel. obviously, with short calculations the speedup is minimal because of the additional overhead raised by the parallelization.

typical bioinformatics cases where parallel computations are more often used are permutation tests or heuristic searches of multivariate spaces where, due to time constraints, the best result has to be computed before a deadline. the case 2a illustrates the increase of completed analyses  by using all the available processing units. the function qtlthreshold.sma from the package affygg is used with a quad-core processor to analyze a large number of permuted data sets using the same statistical analysis to compute  significance thresholds. incrementing the number of parallel processes  the usage of more cores has been enabled and therefore the overall performance has increased. the case 2b illustrates the decrease of the total execution time after parallelizing a problem. the function qtlmap.xprobe from the package affygg is used with a single-core processor to compute the same statistical analysis over large data sets. in this case, due to the way memory is managed in r with linked lists and as a result of partitioning, small and faster tasks  are created. therefore, in cases like this, even with a single processing unit, the total execution time is reduced. 

the case 2c, where the function qtlmap.xprobe is used this time with a dual-core processor, illustrates the problem of processor overloading and how to address it. an inconvenience when the processor load is 100%  is that ready-to-run processes have to wait for the processor to be run. this delay leads to downgraded response times in interactive programs that makes it hard, if not impossible, to keep working with the computer when simultaneously running intensive calculations. fortunately, common office applications on today's desktop computers rarely claim more than 1% of the processor  <cit> . therefore, by giving up a small percentage of the processor, it is possible to keep using the computer for other tasks, while the ongoing calculation only takes slightly more time.

CONCLUSIONS
r/parallel, as shown, saves time to bioinformaticians in their daily tasks of analyzing experimental data. it effectively removes the most common obstacles encountered by bioinformaticians approaching parallel computing in r, like complex programming models or external dependencies on hard-to-maintain software frameworks. r/parallel is an easy-to-use r package which allows any programmer to parallelize their loops in a matter of minutes. the results demonstrate that r/parallel efficiently increases the performance of r when running parallel computations in current multicore processor desktop computer. as a consequence, bioinformaticians are able to approach reducing the processing time of a growing number of analytical methods by n-fold, n being the number of present cores in their computers.

future work is focused on extending the functional and performance capabilities of r/parallel.

additional functionalities like support for task parallelism or delayed loading of input data will extend the usability of the package. additional performance, by expanding r/parallel from a single desktop computer to an office with several desktop computers or even a server farm, is our next milestone to speed up bioinformatics analysis with r.

we encourage any users to share their experiences with the authors to contribute to the extension of r/parallel.

availability and requirements
• project home page: 

• operating system: windows and linux

• programming language: r  <dig> , c, c++

• other requirements: none

• license: gpl for non-profit organizations

• any restrictions to use by non-academics: licence needed

authors' contributions
gv conceived, designed and implemented the software. he wrote an early draft of the manuscript. rcj provided end user requirements and practical examples to assess the usability of this tool. rls provided direction and technical advise on the design and implementation. all three authors read, revised and approved the final manuscript.

