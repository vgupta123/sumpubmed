BACKGROUND
the huge number of genomes sequenced every day makes the development of effective comparison and alignment tools ever more urgent. indeed, many microbiological applications rely directly on genome alignments, for instance micro-diversity and phylogenomic analysis of bacterial strains  <cit> , assembly and annotation procedures for datasets of closely-related genomes  <cit>  or prediction of maintenance motifs in non-model species  <cit> . despite many efforts in this field and the availability of numerous genome aligners, some of which were specially designed for bacterial genomes  and others that target more complex genomes , none is yet completely satisfactory. because genomes are subjected to a variety of complex mutational processes and rearrangements , whole genome alignment  is a complex task that requires dedicated strategies.

classical wga tools use a four phases, anchor-based strategy  consisting of:similarity detection : computes pairs of genomic regions sharing sequence similarity, usually short, exact  matches, e.g. mums, mems. these pairs of regions represent potential portions of the alignment.

chaining : selects a maximal subset of non-overlapping matches  that form the backbone of the alignment, i.e. the anchors; the maximization criterion depends mostly on length and similarity. as the set of anchors can be ordered according to their genomic positions, it represents a chain: collinear if the relative order of the anchors is the same on both genomes and otherwise non-collinear.

recursion : any two facing regions located between adjacent anchors on each genome are considered as smaller sequences and are aligned with the same procedure, i.e. by applying the first two phases  recursively with adapted parameters, and complete the backbone with a second, complementary set of anchors.

“last chance alignment” : uses classical alignment tools  to compute global alignments between as yet unaligned facing regions. alignments are performed and incorporated in the wga based on different criteria depending on the aligner, for example, the difference in length between the two regions with mga  <cit> .


schematic description of two whole genome alignment strategies: the classical anchor strategy and the yoc strategy. the anchor-based strategy includes  <dig> phases, which are usually followed by a post-processing step to filter the erroneous parts of the produced alignments . yoc method includes only two phases and does not require a post-processing step.



these four phases can be clearly identified in aligners targeting bacterial genomes, like mga  <cit> , which uses exact matches and a collinear chaining algorithm, lagan  <cit>  , which uses local alignments, collinear chaining and a dynamic programming alignment stage in the fourth phase, mauve  <cit>  and progressivemauve  <cit> , which work with nearly exact matches and use a heuristic that produces a non-collinear chain. mummer   <cit> , which can deal with rearranged but slightly divergent genomes, implements a variation of this strategy, i.e. it uses exact matches that are clustered together in order to produce a non-collinear chain, but does not implement the fourth phase . magic is a highly sophisticated method that can be divided  in two non-trivial phases, anchoring and non-collinear chaining, each of which is composed of numerous refinement stages  <cit> . normally, magic uses annotated genes as anchors, but can use any type of anchors as input. in the case of eukaryotic genomes, wga tools freely adapt this strategy and generally use local alignments as anchors, which are ungapped  or gapped , followed by clustering strategies, which are different from the chaining notion as they produce possibly overlapping clusters . given that here we specifically address whole genome alignment in bacteria, such methods are beyond the scope of the present paper.

the application of several whole genome aligners to large bacterial genome datasets  <cit>  leads to three major observations:the tuning of parameters is a critical and complex step with many whole genome aligners. two sets of parameters, even if they only differ slightly, can produce considerably different genome alignments. the choice of ad-hoc parameter settings is complicated and time consuming and depends on both the scientific question and the genomes under consideration .

most anchor-based methods suffer from flaws that lead to erroneous alignment of unrelated sequences. mauve alignment segment is an example of an alignment segment computed in the “last chance alignment” phase of mauve  <cit>  for two p. marinus strains. in this alignment, regions with matching pairs of nucleotides are in the minority, thus it is clear that the two aligned sequences are unrelated. such misalignments are possible for any aligner employing a “last chance alignment” phase if no proper inspection of the alignments is done in the end. consequently, post-processing of the genome alignments is often required for these aligners.

it is challenging and time-consuming to compare and evaluate the relevance of genome alignment results. this makes choosing the most appropriate tool for a given species or genome sample difficult.



mauve alignment segment
the following segment was extracted from a mauve alignment of two p. marinus strains, with the start and end positions in the two sequences. the  <dig> length segment was included by mauve in the p <dig> “last chance alignment phase”, and it is is part of the final alignment, even though it is obvious that it aligns two unrelated sequences.

considering these observations, in  <dig>  w. miller  <cit>  pointed out the development of dedicated methods to assess the quality of genome alignments as one of the crucial needs in comparative genomics. thirteen years later this problem remains open and, given the recent efforts deployed for the alignathon  <cit>  competition, more popular than ever. assessing the quality of a whole genome alignment is indeed a particularly difficult task, even in the simpler case of pairwise alignment. the first reason is that the real alignment is unknown and hence, exact measurement of its correctness is impossible. secondly, alignment tools involve complex algorithms, which are often based on heuristic optimizations, and appropriate score functions are therefore needed to assess their quality. the third difficulty is the large quantity of data.

in recent years, the abovementioned issues were the subject of intensive studies and seve ral approaches have been proposed to bypass these limitations. two different types of approaches are possible, see  <cit>  for a comprehensive review. the first one consists in approximating the accuracy/correctness of the alignment. this kind of approach generally requires the use of external data such as gene annotation data  <cit>  or simulated data  <cit> . the second approach consists in evaluating the reliability and/or the level of confidence of the resulting alignments. such approaches are rooted in a wide range of technical foundations and include bootstrap-like strategies  <cit>  or probabilistic models  <cit> .

aligning closely related bacterial genomes  should be one of the simplest cases for genome aligners, since the genomes are of moderate size  and divergence times are short. nevertheless, we observed that even in such cases, some wga tools fail to capture more divergent regions, which are left out of the alignment, or conversely, tend to include wrong alignments of unrelated regions that need to be filtered out in a post-processing step  <cit> . with the aim of addressing this issue, we designed a more sensitive method for the similarity detection phase and a strategy to avoid the inclusion of badly aligned regions. we implemented this strategy in a new whole genome aligner named yoc, designed for robust pairwise alignment of collinear bacterial genomes. yoc provides several improvements: the strategy is simplified compared to other anchor-based tools and little parameter tuning is needed. moreover, its sensitivity makes it possible to align more distantly related bacterial genomes. we also analyzed the quality and the reliability of the resulting alignments, which were extensively evaluated on several bacterial datasets. to this end, we introduce a quantitative criterion, gra-fil, based on the grape software  <cit> , and applied it to benchmark several tools. we show that this criterion measures efficiently the unreliable parts of the alignments, thus enabling rapid comparison of the performances of different genome aligners.

methods
the yoc alignment method
let us start with some considerations about the four phases, anchor-based strategy. first, “the last chance alignment” phase can obviously introduce unreliable alignment regions since it does not check whether the sequences it aligns are related. we propose to eliminate this phase. second, the successive phases of similarity detection and chaining  make parameter tuning difficult. however, these phases were justified by the use of short, exact  matches as initial anchors, and are required to compensate for their lower capacity to capture more divergent regions. this choice also explains the low genome coverage of the resulting alignments on some very closely related but divergent genome pairs, like for instance in the endosymbiotic species buchnera aphidicola.

to address this issue we propose to replace short matches  with local alignments , as initial similarities. this choice has two advantages: it solves the observed lack of sensitivity and avoids the recursion phase, thereby considerably simplifying parameter tuning. for these reasons, our new strategy includes only two phases: similarity detection  and chaining  .

phase 1: similarity detection
the similarity detection phase  is mainly responsible for the sensitivity of anchor-based methods, since the chaining phase only discards potential anchors. therefore, the use of misfit similarity regions  explains the low coverage of the alignments even for related and similar pairs of genomes. based on this observation, we propose to use spaced-seed local alignments in the first phase of the anchor-based strategy, as they are capable of detecting larger similarity regions that are more likely to make biological sense. we chose yass  <cit> , a seed-and-extend method, to generate these local alignments. indeed, seed-and-extend methods are more suitable for divergent sequences, as they find significant similarity between sequences where short matches fail. yass is a dna pairwise local alignment tool based on an efficient and sensitive filtering algorithm that uses a flexible hit criterion to identify groups of seeds. compared to the classical heuristic alignment tools , which require an exactly matching k-mer, yass uses the spaced seeds  <cit>  technique, which increases sensitivity without losing specificity. the use of spaced seeds and local alignments  is not entirely new in the wga field: e.g., mauve and progressivemauve use inexact but ungapped matches as anchors, grimm-synteny  <cit> , pipmaker  <cit> , lagan  <cit>  and lastz  <cit> , which use blast-like local alignments, while magic  <cit>  can be run with yass local alignments.

a spaced seed is a pattern of #s and _s in which a # indicates an alignment position where a match is needed for the seed to have a hit, while a position with _ can be a match or a mismatch. an additional symbol @ can be used to denote matches or particular mismatches that correspond to transitions . for instance #_#__# is a spaced seed of length  <dig> and weight  <dig>  which will match an alignment window containing mdmddm where m denotes a match and d a difference. with this notation, a contiguous seed of length  <dig> has a pattern of ######. the main advantage of spaced vs contiguous seeds is the independence of their hits. obviously, if a contiguous seed hits at say position i, it will very likely hit at position , since the windows starting at these positions already share five of the six required matches. the pattern of a spaced seed forces the hits to be spread out along the alignment and thus be more independent of one another. provided one looks for alignments longer than the seed length, the probability to get at least one hit is higher for a spaced than for a contiguous seed of equal weight  <cit> . this explains why spaced seeds improve sensitivity without losing specificity. this efficiency can be further enhanced by combining several spaced seeds, even if optimally spaced seeds are hard to design  <cit> .

for yass, a transition constrained seed model is used that capitalizes on the statistical properties of real genomic sequences. comparative experiments have shown that, with the same degree of selectivity and a shorter running time, yass is more sensitive than traditional approaches like gapped-blast. indeed, yass detects similarities that cover about twice the overall length of those found by gapped-blast, while keeping only local alignments with e-values below 10− <dig>  <cit> . for our similarity detection phase, yass was set up with a commonly used pair of spaced seeds that were specifically optimized for the comparison of bacterial genomes: “#@_##_##_#__@_###, #_##@___##___#___#@#_#" , and with the default e-value threshold of  <dig>  which is intended to cope with divergence, regardless of how high it is.

phase 2: chaining
chaining algorithms seek to optimize several criteria, among which the total length of the chained fragments , the distances between them, and the degree of rearrangement   <cit> . in the case of collinear chaining , on which we focus in this paper, chaining methods generally maximize the total length of the chained fragments: given the set of n shared genomic intervals, i.e. fragments, the maximum weighted chain  problem is solved in o  time by dynamic programming, when overlaps between adjacent fragments are forbidden  <cit> .

in  <cit> , we argued that the difficulty of using local alignments is that the chances that two adjacent fragments overlap are much higher than with short matches. at that point, we observed that such overlaps are commonly due to randomness, to methodological reasons during the fragment computation phase, or to biological phenomena, like tandem repeats. to avoid discarding relevant fragments in the chaining phase, it is useful to allow overlapping of adjacent fragments. strategies for dealing with overlaps include accepting fixed, maximum length overlaps and trimming them  and segment match refinement . however, overlaps vary in size from extremely small to extremely large. indeed, randomness and methodological problems are mostly responsible for short overlaps, while tandem repeats generate longer overlaps. thus, accepting overlaps regardless of the fragment lengths is not the right solution. to get round this limitation, we extended the classical framework of the mwc in  <cit> , by authorizing overlaps between fragments in the computed chain. we formalized the maximum weighted chain with proportional length overlap problem, where overlaps are proportional to the length of adjacent fragments. we also introduced the first algorithm to solve this problem  and implemented it in a tool called overlapchainer . the algorithm is based on a box representation of a trapezoid graph  <cit> , with an adaptation of the sweep line paradigm to this problem. in  <cit> , the oc tool was tested on real data and compared to classical chainers with respect to simple quantitative measures, and its robustness was proved with respect to its only parameter, the overlap ratio . in yoc, the tool presented here, we rely on overlapchainer  for the chaining phase. our goal here is to prove the efficacy of this type of strategy when combined with spaced-seed local alignments in wga, and to analyze the quality of the alignment results it produces.

to summarize, unlike classical wga tools designed for similar genomes , mauve, lagan, progressivemauve), yoc focuses on almost collinear, highly divergent pairwise wga, and simplifies the anchor based strategy by implementing only the first two phases , without any refinement steps like realignment, filtering, or recursive alignment. although a similar, simplified, two-phase strategy is already used in mummer  <cit> , the solution is not entirely satisfactory. its fragment computation phase is not appropriate for this simplified strategy because of its poor sensitivity .

the yoc strategy can be described as follows. phase : yoc enhances the similarity detection phase by computing local alignments with yass  <cit> ; and phase : it chains the local alignments using a recent chaining algorithm, overlapchainer   <cit> . as it relies on yass, a pairwise local aligner, and oc, a collinear chaining method, yoc is designed for the alignment of collinear regions of genome pairs. however, it can be considered as an intermediate alignment strategy , as it makes it possible to include locally inversed regions in the alignment , meaning homologous dna segments located on the forward strand in one genome, and on the reverse strand in the other. this is due to a straightforward transformation of yass fragments before the chain is computed, namely switching the coordinates of the inversed fragments to make them collinear. figure  <dig> shows the different cases our chaining procedure can handle and the ones it cannot.figure  <dig> 
a segment extracted from a mauve alignment of two
p. marinus
strains, with the start and end positions in the two sequences
. the  <dig> length segment was included by mauve in the p <dig> “last chance alignment phase”, when comparing two p. marinus strains. therefore, the segment is part of the final alignment, even though it is obvious that it aligns two unrelated sequences.
schematic representation of the oc chaining procedure, depicting the cases oc can deal with and the ones it cannot. overlap chaining  fragment chaining procedure illustrated schematically with a dotplot on an example composed of ten fragments , among which seven fragments were taken in the chain . the main chaining cases are summarized in the figure in four ellipses, namely:  a simple case represented by the two dark blue, collinear, non-overlapping fragments  plus a local inversion , which becomes collinear after inversion with oc, and thus it is taken in the chain;  a translocation depicted by two red fragments: due to the collinearity constraints, only one fragment among the two can be taken in the chain, thus the algorithm prefers the “strongest” one, i.e. the dotted blue;  three overlapping fragments, among which only two are accepted in the chain  as they overlap on less than 10% of their respective length; the red fragment is discarded as its overlaps are above the accepted threshold;  a double inversion represented by two inversed fragments from which only one can be taken in the chain ; by inversing the two fragments, oc generates a translocation-like situation, and thus it can only consider one fragment among the two.



genome datasets
dataset  <dig> –  <dig> collinear pairs of bacterial genomes
we considered all collinear pairs of bacterial strains of the same species , with complete genomes like in release  <dig> of the mosaic database . this dataset includes  <dig> pairs of genomes  that are considered to be collinear as , they do not include either inversions or translocations exceeding 20 kb in length.

dataset 2– <dig> pairs of genomes in the lactobacillus genus and in the bacillus cereus species
we performed detailed analysis of genome alignments for  <dig> pairs of genomes of the lactobacillus genus and  <dig> pairs of genomes of the bacillus cereus species. these species were chosen because they mainly include collinear genomes  but in some cases, are nevertheless difficult to align due to high levels of divergence, even at the intra-species level.

nineteen complete genomes of the lactobacillus genus were extracted from genome reviews release  <dig> , which included eight species with at least two complete genomes of two different strains. fourteen intra-species pairwise genome alignments were produced and analyzed in detail in this study. see additional file  <dig> for a complete list of these pairs of genomes.

bacillus cereus is a gram-positive aerobic or facultative anaerobic spore-forming bacterium, part of the firmicutes group. its chromosomes exhibit a high level of synteny and protein similarity with limited differences in gene content  <cit> . eleven complete genomes of b. cereus were extracted from genome reviews release  <dig>  and  <dig> pairwise genomes alignments were produced and analyzed in detail in this study. see additional file  <dig> for a complete list of these pairs of genomes.

dataset 3– <dig> collinear pairs exhibiting increasing genomic divergence
to examine the performance of wga alignment tools with respect to the divergence rate, we selected  <dig> collinear pairs of genomes from the datasets used in a publication that introduced a measure of genome divergence called mumi  <cit>   of  <cit> ). from the original datasets, only unique pairs without major rearrangements were used . dataset  <dig> was composed of  <dig> genome pairs from  <dig> different bacterial species, exhibiting mumi genomic distances ranging from  <dig>   to  <dig>  . see additional file  <dig> for a complete list of these pairs.

dataset  <dig> - lactococcus lactis case study
lactococcus lactis is a gram-positive bacterium extensively used in the production of buttermilk and cheese. it includes two sub-species: l. lactis subsp. lactis and l. lactis subsp. cremoris. as a case study, we analyzed the results obtained with several genome aligners on the pair composed of l. lactis subsp. lactis, il <dig> strain genome  and l. lactis subsp. cremoris, sk <dig> strain genome , which is also part of dataset  <dig>  to facilitate interpretation, we used the mosaic database to analyze and visualize the aligned regions  <cit>  paying particular attention to their biological relevance.

benchmarking
in this section we detail the evaluation procedure used on the bacterial datasets presented above, with six genome aligners, including yoc. the resulting alignments were analyzed with respect to several qualitative and quantitative criteria described below.

genome aligners
six genome aligners, all based on the anchoring strategy, were compared on the previously described genome datasets; two state-of-the-art aligners, mga  <cit>  and lagan  <cit> , clearly target collinear genomes, three others, mauve  <cit> , progressivemauve  <cit>  and mummer  <cit>  are able to align either rearranged or collinear genomes whatever their type of rearrangements, while our new method, yoc, aligns pairs of collinear genomes . to facilitate the comparison of the results, we used the xmfa alignment format produced by mauve and progressivemauve aligners  and wrote dedicated perl scripts to transform the output of genome aligners that do not produce results in this format. software versions and parameters are listed in table  <dig>  despite numerous efforts, for practical reasons we were unable to include magic in our benchmark, and thus we compared yoc to the published results of magic on a dataset extracted from  <cit> .table  <dig> 
genome aligner version and parameters


version
program/parameters


quality criteria of genome alignments
several quantitative and qualitative criteria were used to compare genome alignments produced by different tools :the number of aligned segments, which represents a measure of the fragmentation of the genome alignment,

the length of the alignment expressed as the number of aligned positions,

the number of identical residues in the alignment, which is the only value that is easy to compare and analyze between aligners,

the mean coverage of the alignment, a classical criterion defined as the mean proportion of non-gap characters aligned in each genome, i.e. mean between the matches + mismatches in the aligned regions of genome  <dig> and  <dig>  divided by the size of the genome  <dig>  respectively  <dig> 

the percentage of identities in the alignment, defined as the number of aligned identical residues in the alignment divided by the length of the alignment,

the percentage of gaps in the alignment defined as the number of gap positions in the alignment divided by the length of the alignment,

the percentage of mismatches in the alignment defined as the number of aligned non identical residues in the alignment divided by the length of the alignment.



an original quality criterion, named gra-fil, was defined based on a filtration procedure consisting in post-processing raw alignments with the grape  <cit>  software. grape is a probabilistic genome aligner capable of quantifying the uncertainty of each position of the alignment with a posterior probability. grape was applied on each pairwise genome alignment obtained by each aligner with the aim of filtering the parts of the alignments that are suspected to be spurious and incorrectly aligned. in order to cope with the lengths of the sequences , we partitioned the alignments in adjacent,  <dig> position length blocks, and used grape to realign every such short region. the procedure consists in eliminating  blocks that have at least half of their positions with a posterior probability of being incorrectly aligned greater than  <dig>  . using this procedure, for each alignment, we computed the length of the regions filtered with grape , a criterion we named gra-fil, which is a precise indicator of the proportion of low-quality regions in a genome alignment. the gra-fil procedure is very similar to the one used in the alignathon competition, which is based on another probabilistic aligner, psar  <cit> .

finally, we defined a criterion of biological relevance based on the analysis of orthologous gene positions in the aligned regions. the orthologous genes were extracted from the oma database  <cit> . we measured the number of known orthologous genes entirely included in the same aligned segment, the number of orthologous genes entirely included in unaligned regions, and the number of these genes that overlap the two types of segments. the underlying assumption is that the most accurate and biologically relevant alignment is the one including a maximum number of orthologous genes  in the same aligned segments.

RESULTS
below we summarize and discuss the results we obtained with our two-phase anchor based strategy, yoc , compared to five classical anchor based tools on the three datasets described above. the comparisons were conducted based on the criteria defined in section “quality criteria of genome alignments”. to this we add a comparison of yoc results with magic results on a dataset extracted from  <cit>  .

on dataset  <dig>  we observed high variability of the overall quantitative results obtained with the different tools, e.g. the difference between the mean coverage obtained with mga and that obtained with mauve ranged from −24% to 2% .

given that similar tools yield such different outputs, results cannot be directly used, and judging the best alignment tool for a given pair becomes extremely difficult. indeed, the results depend to a great extent on the profile of the genomes: their divergence rate, as well as whether or not they are collinear. moreover, quantitative results alone are not enough to judge the quality of an alignment. to address this question, we further examined the quality of the alignments using the gra-fil criterion described in the previous section.

global quality of genome aligners 
the results obtained with four tools: mga, lagan, mauve and yoc, in terms of mean coverage before and after filtering with the gra-fil criterion are listed in table  <dig> for the  <dig> pairs of genomes in dataset  <dig> . as can be seen in table  <dig>  the mean coverages ranged from 74% to 100% for mga, mauve and yoc, while lagan achieved 100% mean coverage each time. however, when we look at the mean coverages after filtering with the gra-fil criterion, we observe that, taking mauve for example, in some cases coverage drops to 58%. indeed, if we analyze the mean coverage that was lost by filtering, we deduce that mga, lagan and mauve can produce important quantities of spurious alignments: up to 13% of the alignments were filtered for mga, respectively 21% for lagan and 35% for mauve. lagan’s results can be explained by the fact that it leaves no regions unaligned, regardless of their similarity . mauve also forces the alignment of unrelated sequences and its authors are aware of the problem, which is discussed in  <cit> , and was claimed to be solved in progressivemauve  <cit>  . finally, yoc clearly exhibits the lowest levels of alignment filtered by grape . to conclude, all four phases, anchor-based tools that do not post-filter their alignments include incorrectly aligned regions in their output. in contrast, with only two phases, yoc considerably reduces the need for filtration.table  <dig> 
evaluation of the quality of the alignment results produced by four genome aligners on  <dig> collinear pairs of bacterial genomes


raw coverage 
coverage after grape filtering 
gra-fil criterion 

average
min
max
average
min
max
average
min
max

mga

lagan

mauve

yoc
values correspond to the average, the minimum and the maximum alignment coverages before and after applying the gra-fil filtering procedure, as well as the average, the minimum and the maximum for the gra-fil criterion . full results are given in additional file  <dig> 



assessment of the reliability of intra-species pairwise genome alignments 
based on the preliminary results listed in table  <dig>  we decided to compare five genome aligners, mga, mummer , mauve, progressivemauve and yoc, using the intra-species pairs of genomes from dataset  <dig>  given that mummer  uses exact matches  and that it does not include the ‘last chance alignment phase’, the length of its alignment can serve as a lower bound of the number of alignable positions. clearly, the grape filtration should only affect its results marginally. two sub-datasets of the dataset  <dig> were extensively analyzed, the results are listed in tables  <dig> and  <dig> . table  <dig> presents the results regarding the alignment quality before and after filtration of alignments with the grape procedure. these results indicate that the genome aligners can be grouped in three categories:mummer  produced almost perfect alignments  of limited length: on average  <dig>  mb for lactobacillus  and  <dig>  mb for bacillus cereus . nucmer alignments are split into a large number of aligned segments . as expected, the filtration procedure has almost no effect on nucmer alignments.

mauve and progressivemauve yielded the longest alignments  including only a few long segments . very long segments suggest that large genomic regions are orthologous and well conserved. however, we observed that:  the percentage identity of the alignments was quite low especially in b. cereus ,  the filtration by grape considerably shortens their alignment and splits them into numerous segments. indeed, after filtration, their mean alignment lengths dropped to  <dig>  million positions for lactobacillus , and to  <dig>  million positions  or  <dig>  million positions  for bacillus cereus.

mga and yoc behaved differently: filtration had a moderate effect in terms of alignment length or number of alignment segments. the original alignment lengths of  <dig>  or  <dig>   were reduced to  <dig>  million positions for lactobacillus . the results for the bacillus cereus group were similar with the two aligners, with a length after filtration of around  <dig>  million positions  and a high percentage identity . note that the number of identities with all the aligners remained almost the same after filtration, suggesting that solid regions of the alignment are kept and that removed regions had much lower levels of identities. moreover, after filtration, the alignment lengths obtained with mauve and progressivemauve were equal to those produced with yoc.


quality of raw and filtered genome alignments produced by five genome aligners according to classical quality measures



lactobacillus
 <dig> intra-species alignments
mean number of segments before filtering
mean alignment length  before filtering
mean number of identities  before filtering

nucmer

mga

mauve

pmauve

yoc
mean number of segments after filtering
mean alignment length  after filtering
mean number of identities  after filtering

nucmer

mga

mauve

pmauve

yoc

bacillus cereus
 <dig> intra-species alignments
mean number of segments before filtering
mean alignment length  before filtering
mean number of identities  before filtering

nucmer

mga

mauve

pmauve

yoc
mean number of segments after filtering
mean alignment length  after filtering
mean number of identities  after filtering

nucmer

mga

mauve

pmauve

yoc
part  <dig> of the table corresponds to the  <dig> intra-species pairwise genome alignments of the lactobacillus genus. part  <dig> of the table corresponds to the  <dig> intra-species pairwise genome alignments of the bacillus cereus species. the software compared are: mummer , mga, mauve, progressivemauve  and yoc. values correspond to classical quality criteria  before and after the grape filtration procedure described in section “quality criteria”. full results are given in additional files  <dig> and  <dig> 


quality of genome alignments produced by five genome aligners according to our new qualitative criterion


gra-fil average 
gra-fil minimum 
gra-fil maximum 

lactobacillus
 <dig> intra-species alignments

bacillus cereus
 <dig> intra-species alignments
part  <dig> of the table corresponds to the  <dig> intra-species pairwise genome alignments of the lactobacillus genus. part  <dig> of the table corresponds to the  <dig> intra-species pairwise genome alignments of the bacillus cereus species. the software compared are: mummer , mga, mauve, progressivemauve  and yoc. the values in the table correspond to the average, the maximum and the minimum results using the gra-fil criterion, i.e. the number and the percentage of the likely erroneous alignment positions that were filtered by the grape filtration procedure described in section “quality criteria”. full results are given in additional files  <dig> and  <dig> 



table  <dig> summarizes the amount of alignment filtered by grape with each aligner and all genome pairs of both datasets and confirms these results. it turns out that the average amount of positions filtered by the grape procedure  is very high in both mauve  and progressivemauve , compared with mga  and yoc . with bacillus cereus, an average of 22%, resp. 25%, of the mauve/progressivemauve alignments were considered unreliable and removed by gra-fil, which filtered only  <dig> % of yoc alignments. surprisingly, the filtration ratio for progressivemauve was high despite the fact that progressivemauve already includes a quality filtering step.

to summarize, based on the gra-fil quality criterion, the results in tables  <dig> and  <dig> suggest that mauve and progressivemauve extend their alignments by including regions of questionable similarity, while in only two phases, yoc produces the most reliable alignments of all. moreover, according to its coverage of alignments and the number of identities, yoc directly outputs alignments similar to those obtained with mauve and progressivemauve after filtration with grape. it is also interesting to note an unexpected result: progressivemauve does not systematically produce better results than mauve. this may be due to the fact that progressivemauve was designed and tuned for the alignment of multiple genomes.

aligner performances with respect to the genome divergence 
the way of life of a bacterium may affect the rapidity at which its genome diverges within a species. this raises an important question: how does the divergence level of a genome pair impact the performance of wga? using a dataset for which the divergence level was previously measured at the intra-species level  <cit> , we applied four wga tools and compared them using four criteria. results are shown in figure  <dig> : coverage , percentage of identities , percentage of gaps , and percentage of mismatches  of the alignments. results in figure 3a indicate that increasing levels of divergence have little effect on alignment coverage. mauve and progressivemauve had the highest coverage values, close to 100%, regardless of the genome divergence levels. a slightly linear decrease of mumer/yoc coverages was observed with an increase in the level of divergence. yoc coverages were between those of mauve/progressivemauve and mummer. figure 3b shows that increasing the level of divergence mainly affected the alignment mean percentage of identity for all four tools , but had more drastic effects on mauve and progressivemauve alignments than on yoc and mummer alignments. to better understand the origin of this result, we computed the percentage of gaps  and the percentage of mismatches  of the aligned regions. results indicate that with all four tools, the number of mismatches increases with the divergence rate . but more surprisingly, mauve and progressivemauve alignments included high rates of gap positions, which reached 40% of the alignment, even for moderate levels of divergence . this phenomenom was not observed in either mummer, or in yoc alignments, for which the proportion of gaps remained low, regardless of the divergence rate. to summarize, taken together, these results indicate that yoc offers a good compromise between coverage and the percentage of identity, at any divergence rate.figure  <dig> 
comparison of mummer , mauve, progressivemauve and yoc alignments on  <dig> pairs of genomes of increasing divergence. plots represent alignment mean coverage , percentage of identity , percentage of gaps , and percentage of mismatches , with respect to genome divergences measured with mumi values . linear  and logarithmic  regression curves are plotted together with raw values for the  <dig> aligned genome pairs. full results are given in additional file  <dig> 



finally, figure  <dig>  shows the results of the analysis of the effects of divergence on the computational ressources  for each of the four tools. as one can see in figure  <dig>  there does not appear to be any correlation between divergence and the use of computational resources in any of the tools. while yoc’s needs in terms of time may exceed those of the other approaches, in terms of memory its needs are generally lower. the high running times of yoc are explained by the way yass is used, namely with an e-value of  <dig>  in order to avoid any filtering before the chaining phase and to make it possible to detect similarity even in extremely divergent regions. due to this tuning, yass can produce up to several hundred thousand fragments , thus the time needed to process these fragments may be high but remains within reasonable limits.figure  <dig> 
comparative time and memory performances on dataset  <dig>  with respect to increasing divergence levels. compared to mummer , mauve and progressivemauve, on dataset  <dig>  yoc presents higher running times but lower memory needs , regardless of the divergence level . indeed the divergence level does not seem to affect the computational measures of any of the four tools.



lactococcus lactis case study 
table  <dig> and figure  <dig> show the results of a detailed analysis of three genome alignments produced by mauve, progressivemauve and yoc on two lactococcus lactis genomes, which were post-processed by filtering the low quality alignment regions  and the weakly conserved regions . the filtered alignments, i.e. backbone alignments, for each of the three tools were incorporated in the mosaic database  <cit>  to facilitate the comparison. when analyzing the genome alignments we refer to two types of regions that partition the compared bacterial genomes: backbone segments  and variable segments   <cit> . the backbone alignment is composed of all the aligned backbone segments taken together.table  <dig> 
lactococcus lactis
case study


mauve
progressivemauve
yoc

lactococcus lactis il <dig> compared to sk11
basic indicators and biological relevance of three genome alignments  produced by mauve, progressivemauve and yoc for the comparison of two lactococcus lactis genomes: the subsp. lactis. il <dig> strain genome and the subsp. cremoris. strain sk <dig> genome. the criteria are the number of backbone segments , the mean coverage of the backbone , the percentage of identity of the backbone , the number of orthologs included in the backbone , overlapping the backbone  and excluded from the backbone , and the orthologous cumulative length coverage in the backbone  the orthologous genes were extracted from the oma database  <cit> .



the measures of the reliability of the backbone alignments obtained using the basic indicators  differed considerably between the three aligners: mauve tended to produce a highly fragmented  and low-coverage  but a highly conserved backbone , the results of progressivemauve were intermediate, with a less fragmented backbone , medium coverage  and good percentage of identity . yoc produced the best results, with few segments , high coverage  and a good percentage of identity .

the biological relevance of the three alignment backbones was evaluated by analyzing the position of the orthologous genes in the backbone segments. the results in table  <dig> indicate that 92% of the orthologous genes are correctly included in the yoc backbone, compared to only 27% in the mauve backbone. indeed, in mauve, 68% of the orthologs are split between aligned and unaligned regions . progressivemauve produced quite good results, with 85% of the orthologous genes completely and correctly included in the backbone segments. even though in terms of the total number of orthologous positions included in the alignment backbone  progressivemauve obtained better scores than yoc , the corresponding progressivemauve backbone segments tended to hatch the orthologous genes and were less relevant from a biological viewpoint. this phenomenon is clearly illustrated in figure  <dig>  which shows the backbones of mauve, progressivemauve, and yoc. the backbones of the first two are split in smaller segments than that of yoc. indeed, most orthologs do not fit in one segment in mauve and progressivemauve alignments, while they do in those of yoc.

magic dataset case study
as we were unable to run magic, we applied yoc on a bacterial set used to assess magic’s performance in  <cit>  . magic’s raw results on this dataset were extracted as such from  <cit>  and correspond to the number and the coverage of reordered free  segments obtained from curated pairs of orthologs refined in a multi-step pre-processing phase and iteratively post-processed in a clustering phase. we compared these values to yoc raw fragment number and coverage. our results showed lower performances by yoc for  <dig> out of the  <dig> pairs . but interestingly, for one of the  <dig> pairs , yoc’s performance was better according to the alignment coverage . even though the results are not entirely comparable between the two tools and the dataset clearly does not fit yoc’s application area , they confirm yoc’s ability to align highly divergent genomes. indeed, magic is a versatile and sophisticated tool that, unlike yoc, appears to be perfectly adapted to dealing with rearrangements . nonetheless, on the buchnera aphidicola pair, which is highly divergent but rearrangement free, yoc showed a clear advantage over magic with respect to coverage. for complete results see the additional file  <dig> 

discussion
in this paper, we present a new tool for pairwise alignment of collinear genomes, called yoc, which includes only two phases of the classical four phase anchor-based strategy: the first for detecting local alignments as potential anchors and the second to chain the similarities that will form the alignment. this simplified algorithm leaves out recursion and avoids the "last chance alignment” phase.

we compared and benchmarked yoc with several well-known whole genome aligners on a priori easy cases: pairwise alignments of bacterial genomes of the same species. to evaluate the impact of the “last chance alignment” phase, we use grape to filter out unreliable parts of the alignments on several datasets. we observed that mga, mauve and progressivemauve, which all include the third and fourth phases of the anchor-based strategy, yielded alignments with high genome coverage, but of which a considerable proportion was detected as being unreliable. on average, of all b. cereus pairs, 20% of progressivemauve’s alignment was filtered out. after filtration of these regions, the percentages of identity of the original and final alignments were almost the same, strongly suggesting that regions filtered by grape are of poor quality and should be removed. it also turns out that after filtration, these alignments exhibited the same coverages as those output by yoc. in contrast, alignments computed with yoc were much less altered by filtration, e.g. only  <dig> % on average over all b. cereus cases. this conclusion was corroborated on dataset  <dig>  which revealed mauve’s and progressivemauve’s tendency to include an increasing number of mismatches and gaps for higher divergence levels, compared to yoc, which offers a good compromise between coverage and percentage of identities.

this is in favor of the simpler, two phases, strategy implemented in yoc. recursion is avoided by the use of more sensitive local alignments. yoc does less work but achieves similar levels of coverage and identity to a sophisticated aligner like progressivemauve. moreover, it captures the pairs of regions that can be reliably aligned. this was confirmed by looking at the positions of orthologous genes in the alignment backbones of l. lactis genomes. yoc alignments were those that included the largest numbers of complete orthologs in the aligned regions. finally, its alignments comprised fewer segments than those of mga, mauve, or progressivemauve.

yoc uses yass, a highly sensitive local alignment software in phase one, and overlapchainer, a chaining algorithm allowing for proportional overlaps between the anchors in phase two. both procedures are relatively fast, use little memory and have few parameters to tune. although it is not the ultimate genome aligner, we argue that in practice, yoc combines important advantages:simplicity of the algorithm: only similarity detection and chaining are performed, which avoids including badly aligned regions.

simplicity of use: as the spaced seeds are already optimized for bacterial genomes, yoc only requires the tuning of two parameters:  the e-value threshold for yass, the higher the better if the goal is to ensure high sensitivity regardless of the level of divergence, and  the overlap ratio for the chaining algorithm even though, as shown in  <cit> , oc results are highly robust with respect to this parameter. mga, mauve, and progressivemauve include additional parameters linked to the four phases strategy, for instance the lengths of the matches that are used in the first and the third phases  are critical. moreover, the parameters of mauve/progressivemauve need to be adjusted to the level of nucleotide divergence among the genomes to be aligned, even at the intra-species level. therefore mga and mauve/progressivemauve are difficult to incorporate in large-scale automated studies. the use of local alignments selected on their e-value makes yoc relatively independent of this problem. evidence for this is the higher coverages achieved with yoc on more divergent species like l. lactis.

simpler genome alignment result: the dramatically lower number of alignment segments and, consequently, an increase in their size compared to concurrent aligners . indeed, it is not trivial to examine, to check, or to use an alignment split into a large number of segments.



these features make yoc simpler and easier to use and to parameterize.

in addition to yoc, we provide a large benchmark of several genome aligners and introduce an original criterion, gra-fil, to evaluate the quality of a genome alignment. the filtration procedure we developed makes it possible to obtain a high-quality alignment backbone as a result of the post-processing of the raw alignments.

concerning limitations, yoc does not deal with complex rearrangements, e.g. translocations, is designed for pairwise alignment only, and lacks a user graphic interface to visualize the results. not dealing with translocations limits its use to collinear genomes, thus mainly  bacteria, on which we have focused in this paper. indeed, although less numerous than bacterial genomes, collinear eukaryotic genomes  can also be compared with yoc, as the size of the genomes is not a direct limitation of the method. unfortunately, extending the framework to deal with rearrangements means moving to a np-complete problem, which becomes even more complex when proportional overlaps between fragments are accepted. in this context, multiple alignment is yet another layer to add to the complexity of the task, which seems premature given that pairwise alignment is not yet completely solved. regarding the lack of a graphic interface, several tools like act  <cit> , artemis  <cit> , gbrowse  <cit>  or mosaic  <cit> , propose adaptable graphical viewers that can be used with yoc.

finally, our study identified several difficulties in comparing wga tools. some criteria are indeed difficult to compare. for example, the number of aligned segments, a measure of the alignment fragmentation, is not directly comparable between mauve, progressivemauve and the other genome aligners: for mummer , mauve and progressivemauve it represents the number of locally collinear blocks  in the alignments, i.e. roughly the number of inversions and translocations; for mga and yoc, it is the number of segments that are interrupted by insertions/deletions and local inversions . consequently, we still need dedicated resources, like the mosaic database  <cit> , to incorporate and compare genome alignments according to unified criteria.

CONCLUSIONS
yoc is an efficient and sensitive new alignment software, which is easy to use and fast. it produces reliable pairwise bacterial genome alignments using a simpler strategy than most existing tools.

additional files
additional file 1: 
full results for dataset  <dig>  including  <dig> pairs of collinear genomes  aligned with yoc, mga, mauve and lagan. columns show accession numbers , length of the alignment in kb , mean coverage in % , mean percentage of identity , mean coverage in % after grape filtering , and mean percentage of identity after grape filtering  for yoc, mga, mauve and lagan alignments.

additional file 2: 
full results for dataset  <dig>  on the subset containing  <dig> pairs of genomes of the
lactobacillus
genus, aligned with nucmer, mga, mauve, progressivemauve and yoc. columns describe each genome  and all the indicators used: number of segments , length of the alignment , mean coverage , number of identities  and mean percentage of identity  for nucmer, mga, mauve, progressivemauve  and yoc alignments before  and after grape filtering.

additional file 3: 
full results for dataset  <dig>  on the subset containing  <dig> pairs of genomes of the
bacillus cereus
species, aligned with nucmer, mga, mauve, progressivemauve and yoc. columns describe each genome  and all the indicators used: number of segments , length of the alignment , mean coverage , number of identities  and mean percentage of identity  for nucmer, mga, mauve, progressivemauve  and yoc alignments before  and after grape filtering.

additional file 4: 
full results for dataset  <dig>  including  <dig> collinear pairs exhibiting increasing genomic divergence, aligned with yoc, mummer , mauve and progressivemauve. columns describe each genome , mumi distance values, mean coverage of the alignment, percentage of identities of the alignment , percentage of gaps in the alignment , percentage of mismatches in the alignment  for mummer, mauve, progressivemauve  and yoc.

additional file 5: 
comparison of yoc and magic results on  <dig> bacterial genome pairs. the dataset was extracted from  <cit>  and includes ten genome pairs corresponding to table three of  <cit>  and two distantly related bacteria pairs  obtained from table six of  <cit> . columns give the type of pairs, the species name, the number of aligned segments produced by yoc, the number of reorder free  segments produced by magic and coverage as a percentage of the genome length .



competing interests

the authors declare that they have no competing interests.

authors’ contributions

ru, hc and er conceived the project. ru and er developed the yoc prototype. ru, cm and hc performed the benchmark experiments. all authors participated at the analysis of the results. ru, hc and er wrote the paper. all authors read and approved the final manuscript.

