BACKGROUND
next generation sequencing  has transformed biology. beyond enabling the rapid sequencing of genomes, increasingly sophisticated ngs assays have empowered biologists to probe a wide array of biological processes with unprecedented precision and depth, provided that the desired information can be encoded within a nucleic acid sequence. many ngs assays encode nucleotide-resolution information within multiple properties of sequencing reads ― such as their alignment coordinates, lengths, or sites at which they mismatch a reference sequence ― and thus require analytical tools that decode biological data from such properties. one such assay is ribosome profiling, in which the positions of the ribosomal p-sites are jointly encoded by the lengths and positions of aligned sequencing reads  <cit> . another example is bisulfite sequencing, in which the methylation status of cytosine residues is encoded in the genomic locations of c-to-t transitions within read alignments  <cit> .

because decoding biological information from read alignments is not trivial, a wide array of software has been developed for this purpose. at one extreme are tools dedicated to specific, predefined analysis of data from a single assay, such as riboseqr  <cit> , ribotools  <cit> , and ribogalaxy  <cit>  for ribosome profiling, or proteoformer  <cit> , orfscore  <cit> , or orf-rater  <cit>  for de novo protein discovery and orf annotation. tools like these are user-friendly, but, as a consequence of their design, are difficult to adapt to novel purposes. at the other extreme are low-level, generalized tools, like samtools  <cit>  and bedtools  <cit> , that are not designed for or limited to any specific assay or experimental setup. these tools are extremely powerful, but using them requires substantial expertise in programming and awareness of seemingly esoteric file formats. between these extremes lie a number of user-friendly and general-purpose toolkits, such as htseq  <cit> , metaseq  <cit> , bx-python  <cit> , and bioconductor  <cit> . but these, in their present forms, are limited in their abilities to decode information from raw read alignments, to manipulate  discontinuous genomic features such as multi-exon transcripts, or to perform nucleotide-resolution analysis. the situation is further complicated by the fact that many file formats have been invented to describe only a handful of data types in genomics , and that even synonymous file types can be treated inconsistently within toolkits.table  <dig> file formats used in genomics

for each category of genomics data, many file formats exist. plastid includes readers for each format that standardize the representation of data for each type, so that the meaning of each data type is separated from its format on disk. *tabix compression for these formats is supported via pysam  <cit> 




here we introduce plastid, a python library for nucleotide-resolution analysis of genomics data. plastid is designed to retain the user-friendliness of pipeline tools designed for specific ngs assays, like ribogalaxy, without sacrificing the generality and power of low-level tools, like bedtools. given its goals, plastid’s design differs substantially from existing packages :fig.  <dig> uses of plastid in analysis workflows. plastid  contains tools for both exploratory data analysis  and command-line scripts for specific tasks . plastid standardizes representation of data across the variety of file formats used to represent genomics data . quantitative data are represented as arrays of data over the genome. read alignments may be transformed into arrays using a mapping function appropriate to a given assay. transcripts are represented as chains of segments that automatically account for their discontinuities during analysis. plastid integrates directly with the scipy stack . for exploratory analysis in other environments  or further processing in external programs , plastid imports and exports data in standardized formats




first, plastid’s internal analysis pipeline introduces a stage in which mapping functions extract the relevant biological information from various properties of raw read alignments. biological data are then exposed to users as vectors of information ― such as the number of ribosomal p-sites or c-to-t mismatches found at each nucleotide position ― rather than lists of read alignments or vectors of raw coverage. because mapping functions can perform arbitrary transformations on properties of read alignments, they add substantial flexibility to plastid’s design: a mapping function suited to a given ngs assay tailors plastid’s tools to that assay . uniquely, plastid’s mapping functions are configurable and replaceable rather than hard-coded. thus, plastid has been used to analyze data from numerous types of experiments, including ribosome profiling, rna-seq, dms-seq, and bisulfite sequencing, and can be used for other assays  simply by choosing appropriate parameters for existing mapping functions, or by implementing new ones.fig.  <dig> mapping functions extract biological data from read alignments. a. mapping functions use various properties of a read alignment to determine the genomic position at which it should be counted. b. mapping functions for ribosome profiling use alignment coordinates and lengths to estimate ribosome positions, revealing features of translation, like a peak of density at the start codon  and three-nucleotide periodicity of ribosomal translocation . c. for bisulfite sequencing, the fraction of c-to-t transitions at each cytosine are mapped, revealing a cpg island. d. a mapping function for dms-seq differentiates structured from unstructured regions of a selenocysteine insertion element in the 3′ utr of human sepp <dig>  dms reactivity  matches a and c residues predicted to be unstructured 




second, plastid introduces a novel data model, the segmentchain, to describe multi-exon transcripts and other discontinuous features. segmentchains are aware of their own discontinuity and use this awareness to encapsulate many nucleotide-wise operations that are absent from other toolkits, such as conversion of coordinates or vectorized data between genomic and transcript-centric spaces. segmentchains automatically account for splicing and complementing, and thus reduce user error during many tasks common in position-wise analysis .fig.  <dig> segmentchains automate many common tasks. a. segmentchain and transcript objects automatically convert coordinates between genomic and transcript-relative spaces. b. segmentchains and transcripts can therefore convert read alignments or quantitative data aligned to the genome to arrays of values at each position in the chain. c. subsections  of chains can be fetched using start and end points relative to the parental chains. segmentchains automatically generate the corresponding genomic coordinates. d. regions of a chain can be masked from computations without altering the chain coordinates




third, plastid provides consistent representations and behaviors for the various categories of genomic data, regardless of underlying file formats. plastid’s tools thus enable users to focus on biological questions rather than data representation .

finally, plastid’s intended audience includes bench scientists and novices as well as seasoned bioinformaticians. for this reason, plastid defines a minimal sets of data structures that, when possible, have human-readable names and are modeled on biological objects — such as spliced transcripts — rather than on more abstract notions. users can thus leverage their biological knowledge when writing or reading code .fig.  <dig> plastid streamlines analysis. a. the quality of a ribosome profiling dataset may be assayed by comparing the numbers of read counts in the first versus second half of each coding region. plastid makes it possible to implement such analyses with few lines of easily readable code. b. plastid readily integrates with the tools in the scipy stack. here, first- and second-half counts from  are plotted against each other using matplotlib, and a pearson correlation coefficient calculated using scipy




in addition to tools for nucleotide-resolution exploratory data analysis , plastid includes command-line scripts that automate analysis workflows used for a number of common ngs assays, such as rna-seq and ribosome profiling. unlike similar implementations found in other toolkits, plastid’s scripts leverage mapping functions, so that even common tasks, such as export of browser tracks for visualization of data, may be tailored to a specific biological question: for example, depending on the mapping function in use, plastid’s make_wiggle script can export a browser track of mapped ribosomal p -sites, modified nucleotides, or any other data encoded within the read alignments, instead of simple read coverage. like the rest of plastid’s tools, these scripts can be generalized to novel assays with the implementation of new mapping functions.

together, plastid’s features enable novice and advanced users to develop analytical workflows that are both concrete and sophisticated, using familiar idioms and few lines of code. to support our users’ efforts, we offer extensive documentation, step-by-step walkthroughs of various analysis tasks, and a demo dataset for those walkthroughs at https://plastid.readthedocs.io.

implementation
representation of quantitative data
many ngs assays encode nucleotide resolution data, and effectively associate a quantitative value with each genomic or transcriptomic position. a natural representation for such data is a vector or array of values, each position in the array corresponding to a nucleotide within a region of interest.

plastid adopts this representation and represents quantitative data associated with genomic positions – such as the number of sequencing reads aligned to a given position, a phylogenetic conservation score, or local g/c content – using objects called genomearrays. within genomearrays, data are indexed by chromosome, nucleotide position, and strand, and may be accessed via a python dictionary-like interface using a segmentchain as a key. genomearrays return data in an array format  whose positions correspond to nucleotide positions in the given regions of interest. the use of numpy arrays enables the data to be used by the vast library of scientific tools compatible with the scipy  stack  <cit> , and thus creates a useful bridge between genomics data and existing scientific infrastructure in python.

plastid includes implementations of genomearrays tailored to a number of file formats, including bedgraph, bigwig, and fixed-step or variable-step wiggle . with the aid of mapping functions, genomearrays can also import read alignments in bam or bowtie formats, performing transformations at runtime , or upon import .

transformations of read alignments
plastid’s genomearrays are designed to perform transformations on read alignments transparently during analysis, in order to extract the relevant biology — such as a nucleotide modification or ribosomal p-site — from whichever read properties encode them. these transformations are implemented in configurable mapping functions that determine the genomic position at which the biology encoded in each alignment should ultimately be counted . concretely, mapping functions are modular components of genomearrays take as input a query region of the genome and a set of read alignments, and return as output an array of transformed data covering each nucleotide position in the query region. because mapping functions can exploit any property of a read alignment — for example, its length or sequence — in addition to its aligned positions, they provide a high level of flexibility and enable reuse of plastid’s central tools with data from a large variety of ngs assays.

mapping functions are particularly important to assays in which secondary properties of read alignments encode the biology of interest: for example, mapping functions for ribosome profiling assign counts to ribosomal p-sites, which occur at fixed offsets from the 5′ ends of read alignments, potentially varying as a function of read length  <cit> . p-site mapping reveals phenomena that are obscured by raw read density, such peaks that occur at translation initiation sites, or the periodic stepping of the ribosome . in bisulfite sequencing, one might use a mapping function that selectively assigns counts to the genomic positions of c-to-t transitions within a read alignment, enabling cpg islands to be discerned . for dms-seq assays — in which dimethylsulfonate  alkylates unpaired cytosine and adenine residues in rna  <cit>  — one would use a mapping function that assigns counts to the alkylated residues, allowing inference of secondary rna structure .

plastid includes configurable mapping functions applicable to rna-seq, ribosome profiling, dms-seq, and a number of other sequencing assays . when a novel assay is developed, users can readily implement a mapping function tailored to the experiment. plastid can then use the new mapping function as a plug-in, enabling immediate application of extant tools to the novel assay. examples and instructions for writing mapping functions are included in the mapping rules tutorial at https://plastid.readthedocs.io.table  <dig> plastid includes configurable mapping functions that cover many uses cases in sequencing analysis




encapsulation of discontinuous genomic features
a substantial shortcoming of many existing genomics toolkits is that discontinuous features, such as spliced transcripts, are represented as lists of independently behaving, continuous fragments. for many tasks, this design requires users to perform laborious and error-prone transformations to convert coordinates from the n
th position of a transcript, to the i
th position of the transcript’s j
th exon, and eventually, to the x
th position in the corresponding genome. alternatively, users can sacrifice positional information and align their sequencing data to a continuous transcriptome, in this case presuming a priori knowledge of which transcript isoforms are present.

a central difference between plastid and other toolkits is that plastid’s encapsulates transcripts and other discontinuous genomic features within single objects, called segmentchains, that are aware of their own discontinuity . this design obviates the need to separately track the potentially many exons that together constitute a transcript, and facilitates analysis of phenomena that are easily described in the context of a transcript, but discontinuous in the genome, such as a translational pause site in ribosome profiling data. thus, users can take advantage of the additional information preserved by aligning reads to a genome, while retaining the convenience of aligning to a transcriptome.

segmentchains are also useful for analyses that simultaneously consider transcript isoforms that share genomic coordinates, such those implemented in orf-rater  <cit> , a tool we have developed to identify and determine translation rates of potentially overlapping open reading frames from ribosome profiling data. for analyses specifically devoted to transcripts, a subclass of segmentchain, called transcript, is provided. segmentchains and transcripts provide tools for many common operations, including:mapping coordinates between various transcript isoforms and the genome 

fetching spliced arrays of genomic sequence, read alignments, or count data at any or each nucleotide position in the segmentchain or transcript 

fetching sub-regions of the chain, preserving their discontinuity 

masking sub-regions of the chain, such as repetitive regions, from analysis 

testing for equality, overlap, containment, or coverage of other segmentchains

accessing and storing descriptive data, like gene names or ids, go terms, database cross references, or notes

exporting to bed, gtf <dig>  or gff <dig> formats, for use with other software packages or within a genome browser




simplified access to genomic data
in genomics, there are primarily four categories of data — sequence data, feature annotations , quantitative values associated with genomic positions , and read alignments — yet numerous file formats have been developed to represent each of these data types. furthermore, many existing packages treat data of a given type in a manner that depends upon the type of file in which it is stored. becoming familiar with the diverse idiosyncrasies of these file types — for example, whether transcripts are represented one-exon-per-line and must subsequently linked by probing their ids  or are captured wholly within single lines  — can be time-consuming and a significant impediment to research.

plastid provides a minimal set of consistently behaved object types for each category of data, and readers for commonly used file formats in each category , allowing investigators to focus on their data rather than its representation on disk . in particular, plastid provides readers that parse feature annotations in bed, extended bed, bigbed, gtf <dig>  gff <dig> and psl formats into segmentchains or transcripts, optionally reconstructing transcripts from their components in gtf <dig> or gff <dig> formats; quantitative data in bedgraph, wiggle, or bigwig formats into genomearrays; and read alignments in bam or bowtie’s legacy format into genomearrays, using mapping functions to transform the data. because a number of excellent packages already exist for parsing nucleotide sequence, plastid does not implement new readers for sequence data. however, its tools are compatible with any sequence reader that returns dictionary-like objects, such as those in biopython  and twobitreader .

command-line scripts
in addition to the library it provides for eda, plastid includes a number of command-line scripts that implement sequencing workflows commonly used in genomics and ngs analysis . while similar implementations exist in other toolkits, plastid’s scripts are distinct in their use of mapping functions, which allows them to generalize to many types of data and metrics. for example, plastid’s make_wiggle script generates genome browser tracks from sequencing alignments, and, depending upon the mapping function in use, could export a track of ribosomal p-sites, modified nucleotides, unstructured regions of rna, 5′ ends of read alignments, or whatever type of biology is accessed by the mapping function.table  <dig> plastid’s command-line scripts automate common analysis tasks


counts_in_region

cs

get_count_vectors

make_wiggle

metagene

phase_by_size

psite

crossmap

gff_parent_types

reformat_transcripts

findjuncs

slidejuncs



in addition, plastid introduces algorithms and scripts for a number of tasks that are not implemented or are handled substantially differently elsewhere. we highlight a few of these below:

maximal spanning windows
many nucleotide-resolution analyses require prior knowledge of which transcript isoforms are present, but such knowledge is frequently unavailable. for this circumstance, plastid introduces the use of maximal spanning windows  as an approach to isoform-independent analysis. briefly, a maximal spanning window is defined as a span of nucleotides surrounding a landmark , in which each position relative to the landmark maps to the same genomic coordinate across every member of a group of transcripts . thus, a gene’s maximal spanning window captures the range of feature positions whose distances to each other and to a landmark are independent of whatever transcript isoform that may be expressed.fig.  <dig> maximal spanning windows enable isoform-independent analysis. a maximal spanning window over a set of transcripts  is defined as the largest possible window surrounding a shared landmark , over which the n
th nucleotide from the landmark in each transcript corresponds to the same genomic position. maximal spanning windows thus enable position-wise analysis over fractions of genes when isoform distributions are unknown. plastid uses maximal spanning windows for metagene analysis, measuring sub-codon phasing in ribosome profiling, and estimating ribosomal p-site offsets




the use of maximal spanning windows provides a number of advantages over other strategies when isoform distributions are uncertain. a commonly used alternative strategy is to choose a single, “canonical” transcript isoform from each gene to include in analysis. this approximation is appropriate in some circumstances, but is variably inaccurate when comparing across cell lines or culture conditions. another strategy is to treat all transcript isoforms as independent entities. but, in the absence of corrections downstream, this practice can yield double-counting of read alignments and regions when multiple isoforms overlap. restricting analysis to each gene’s maximal spanning window minimizes the problems inherent in both of these strategies insofar the quality of a given genome annotation allows.

plastid contains tools that generate a maximal spanning window surrounding a landmark of interest  for each gene  in a genome annotation. to do so, plastid makes use of landmark functions that identify a landmark of interest, if present, within a single transcript. the landmark function is applied to each of a gene’s transcripts, and, if the genomic positions of their landmarks are identical , then plastid’s window-generating toolkit bidirectionally examines each position on each transcript at increasing distance from the landmark until corresponding positions on all transcripts no longer map to the same genomic position. if all transcripts from a given gene do not share the same genomic landmark coordinate , then the maximal spanning window surrounding that landmark is of zero-length, and excluded from analysis.

plastid includes landmark functions that identify start and stop codons, and includes instructions for writing functions to programmatically identify other landmarks, such as peaks in sequencing data or nucleotide motifs within a region of interest. plastid can use maximal spanning windows for estimation of gene expression or for metagene analysis  for any type of sequencing data, and, in the case of ribosome profiling, additionally uses maximal spanning windows for estimation of p-site offsets and sub codon phasing.

metagene analysis
noise can obscure important biological signals within individual samples, but such signals frequently appear in population averages. for nucleotide-resolution analysis of ngs data, one particularly useful average is a metagene profile, in which arrays of quantitative data, corresponding to each position of a gene or region of interest, are aligned at some landmark — such as a start codon  <cit> , or the beginning of a region encoding a signal peptide  <cit>  — and a position-wise average is taken over the aligned arrays . metagene profiles have been used to reveal numerous biological signals, such as peaks of ribosome density at start or stop codons  <cit> , ribosomal pauses over polybasic signals  <cit> , and sites of engagement of hydrophobic nascent chains by the signal recognition particle  <cit> .fig.  <dig> metagene profiles reveal genomic signals. schematic of metagene analysis. normalized arrays of quantitative data  are taken at each position in the maximal spanning windows of multiple genes. these arrays are aligned at a landmark of interest , and the median value of each column , is taken to be the average 




plastid’s metagene toolkit is unique in its use of maximal spanning windows to obtain isoform-independent arrays of data for each individual gene. these arrays are then aligned at the position corresponding to the landmark and a column-wise median is taken at each position. because users can modify or define both landmark functions and mapping functions, plastid’s tools can be used to obtain position-wise averages of arbitrary types of data, surrounding virtually any landmark, in arbitrarily grouped sets of regions.

multimapping regions of the genome
specific regions of the genome ― such as transposable elements, pseudogenes, and paralogous coding regions ― can yield sequencing reads that multimap, or align equally well to multiple regions of the genome. it is frequently desirable to exclude such regions from analysis, as these introduce ambiguity into sequencing data. however, because a read’s ability to multimap is a function of both its length and the number of mismatches tolerated during alignment, specific experimental regimes require custom annotation of multimapping regions in the genome. plastid includes a script called crossmap that empirically determines which regions of the genome yield multimapping reads of a given length at a permitted number of mismatches.

elaborating an approach developed in  <cit> , crossmap conceptually divides the genome into all possible sequencing reads of length k, and then aligns these back to the genome allowing n mismatches, where k and n are given by the user. when a read aligns equally well to multiple regions of the genome under these criteria, its point of origin is flagged as multimapping. crossmap exports all multimapping regions as a bed file, which can be subsequently used to mask such regions of the genome from analysis in any of plastid’s command-line scripts or interactive tools.

RESULTS
manipulation of data at nucleotide resolution
in its earliest days, next-generation sequencing was used principally for reconstruction of genomes, and, with the advent of rna-seq, for estimation of gene expression levels. in the first case, the sequences of reads captured the relevant biology, and in the second, the scalar number of read alignments covering an exon or transcript satisfied most experimental needs.

at present, many ngs assays explore biological questions with nucleotide resolution. these assays have created a need for analytical tools that enable users to manipulate data nucleotide-by-nucleotide robustly and easily. plastid introduces several data models tailored specifically to this way of working: first, mapping functions convert the relevant properties of read alignments into arrays of decoded information, and thus create an important bridge between ngs assays and the analytical tools offered by the scipy stack  <cit> . second, segmentchains and transcripts enable users to manipulate quantitative data and feature annotations with nucleotide precision, in genomic or transcript-centric coordinates. thus, patterns in data can easily be used to annotate new features, and features can be arbitrarily sub-divided, joined, or exported in standard formats, enabling their use in other pipelines and visualization in genome browsers. finally, maximal spanning windows offer a novel and rigorous approach to uncertainties created when multiple transcript isoforms might be present, a common circumstance when studying higher eukaryotes.

ease of use
one of plastid’s design goals is to lower the barrier to entry for genomic analysis. to this end, plastid’s design focuses on simplicity and, when possible, use of biological analogies. plastid therefore introduces a minimal set of classes, and instead favors existing and commonly-used data structures  and file formats , whenever possible. data that cannot be captured in standard formats are formatted as tab-delimited tables, which can readily be manipulated in python , r, or even excel.

to facilitate reading, re-reading, or writing code, plastid’s classes, methods, and functions are modeled upon biological idioms and, when possible, given human-readable names. this design enables users to leverage knowledge of biology when familiarizing themselves with plastid, and also to write code that, using the concrete language of biology, is more easily interpreted by others.

finally, to enable users, we have written extensive documentation with tutorials and walkthroughs of various types of analysis, as well as a test dataset tailored to those walkthroughs. these are available at https://plastid.readthedocs.io.

extensibility
plastid is designed to be both modular and easily extended, and includes well-defined and documented apis. in addition, plastid includes entrypoints to register new mapping functions and their command-line arguments with plastid’s command-line scripts, enabling advanced users to share their extensions with others.

plastid also includes script writing tools for implementing new workflows. these include argument parsers that read data in supported file formats into plastid’s standard objects, enabling developers, like users, to remain agnostic of file formats. plastid also includes extensions to python’s warning control system that give developers more finely-grained control over how to group and limit warnings displays, which can be numerous when operating on large genomics datasets.

CONCLUSIONS
plastid is a genomics and ngs analysis toolkit that offers unique tools for decoding information from read alignments and manipulating data at nucleotide-resolution. plastid’s design enables it to retain generality and flexibility across assays while remaining user friendly. thus, we and others have used plastid to analyze data from numerous ngs assays, including ribosome profiling, rna-seq, dms-seq, and bisulfite sequencing.

plastid’s utility derives not only from the introduction of mapping functions, segmentchains, and maximal spanning windows, but also from a design intent that focuses on simplicity, consistency, and integration with other packages: biological data are represented through unified interfaces regardless of the underlying file format; these interfaces are modeled on biological idioms; and, importantly, these interfaces integrate seamlessly with the scipy stack. thus, both novice users and experienced bioinformaticians have found plastid useful. versions of plastid have been used in a number of publications  <cit>  and manuscripts in progress , and is the genomic engine of our orf annotation software, orf-rater  <cit> .

availability and requirements
source code
plastid is released under the bsd 3-clause license. official releases are available in the python package index at http://pypi.python.org/pypi/plastid. development versions are available at the project’s home page, https://github.com/joshuagryphon/plastid. examples, user documentation, and technical information are available at http://plastid.readthedocs.io. the version discussed in this article is plastid  <dig> . <dig> 

computing requirements
plastid is platform-independent and runs on python  <dig>  and python  <dig>  or greater. it depends on cython  <cit> , numpy  <cit> , and pysam  <cit>  for compilation, and additionally scipy  <cit> , matplotlib  <cit> , pandas  <cit> , biopython  <cit> , twobitreader  <cit> , and termcolor  <cit>  for runtime.

plastid runs well on laptops, but system requirements scale with the complexity of the genome annotation and the number of read alignments in a dataset. the minimum amount of ram we recommend for s. cerevisiae and other small genomes is 1 gb; for mid-sized genomes like d. melanogaster, 4 gb; and 8 gb for vertebrate or plant genomes. run times and memory usage for worst-case scenarios under a variety of scripts included in plastid are shown in table  <dig> table  <dig> computing requirements for genomes and datasets of varying size

four command-line scripts were executed on yeast, fly, and human datasets. runtimes and peak memory usage are given as the mean ± standard deviation of three replicates. see methods for details




external datasets and software used in this study
sequencing datasets supporting the conclusions of this article are available in the the sra  <cit>  under accession numbers srr <dig> ; srr019600- <dig> and srr20276- <dig> ; and srr <dig> . data were visualized in the integrative genomics viewer  <cit>  and modified in adobe illustrator cs <dig>  code syntax was highlighted using pygments version  <dig>   <cit> .

for fig.  <dig>  ribosome profiling dataset srr <dig>  <cit>  was stripped of 3′ cloning adaptors , and aligned to the yeast reference genome  using tophat  <dig> . <dig>  <cit> . ribosomal p-sites were assigned to be  <dig> nucleotides from the 3′ end of 25-35mers. bisulfite sequencing data were pooled from sra datasets srr019600- <dig> and srr20276- <dig>  <cit> , stripped of 3′ cloning adaptors  and aligned to the human reference genome  using bismark  <dig> . <dig>  <cit> . methylation was determined from bismark calls by parsing the xm flag of each alignment following the specification in  <cit> . dms-seq dataset srr <dig>  <cit>  was downloaded and aligned to human genome sequence  using tophat  <cit> . counts were assigned to alkylated residues, estimated to be  <dig> base 5′ of the read alignment, in the direction of the alignment. secis elements and their structure predictions were identified using secisearch  <dig>   <cit> .

for table  <dig>  all tests were run on a single  <dig>  ghz intel core i7- <dig> cpu on an msi apache pro qe <dig> laptop, in a virtual machine running ubuntu  <dig>  with  <dig> gb of ram, except for build crossmap, which used two cores. runtimes and memory usage were monitored using memory profiler version  <dig>   <cit> . for tests on yeast, we used the annotation and genome assembly from sgd r <dig> . <dig>  <cit> , 5′ and 3′ utr definitions from  <cit>  and  <cit> , and ribosome profiling dataset srr <dig>  for tests on the fly genome, we used the annotation and genome assembly from flybase r <dig>   <cit>  and merged ribosome profiling datasets from  <cit>  . for tests on the human genome, we used all appris-scored  <cit>  transcripts from ensembl annotation grch <dig>   <cit> , the hg <dig> genome assembly from ucsc  <cit> , and ribosome profiling dataset srr <dig>  all genome annotation files were converted to gtf <dig> format. sequence was in fasta format with the exception of hg <dig>  which was kept as a 2bit file. alignments of all sequencing reads were kept in bam format. for tests that used read alignments, alignments were mapped as follows for each organism:  <dig> nucleotides from the 3′ end of the read for s. cerevisiae , center-weighted mapping for d. melanogaster  <cit> , and using a variable offset for h. sapiens  <cit> .

for each organism dataset, a series of tests were conducted. in manipulate annotations, all transcripts, genes, exons, and coding regions within a chromosome were compared and modified in multiple ways using plastid’s cs script, executed as cs generate /tmp/foo --annotation_file gtf_file.gtf --sorted. in read counting, read counts and densities were tabulated for all transcripts in a genome annotation using the counts_in_region script, executed as counts_in_region /tmp/foo --count_files bam_file.bam--annotation_files
gtf_file.gtf --sorted . in build crossmap, an empirical annotation of which regions in a given genome give rise to multimapping reads was empirically determined by slicing the genome sequence into k-mers and counting the number of times each k-mer aligned to the genome using plastid’s crossmap script, which internally used bowtie version  <dig> . <dig>  <cit> . the crossmap script was executed as crossmap -k  <dig> --mismatches  <dig> -p  <dig> --sequence_file file. --sequence_format  /path/to/bowtie/index /tmp/foo.

abbreviations
cage-seqcap-analysis gene expression, for identification of 5′ ends of eukaryotic messenger rnas

chip-seqchromatin immunoprecipitation sequencing, for probing sites of dna::protein interaction

dms-seqdimethylsulfonate sequencing, for probing rna structure

edaexploratory data analysis

gbgigabyte

hh:mm:sstime expressed as hours:minutes:seconds

mbmegabyte

ngsnext-generation sequencing

utruntranslated region

