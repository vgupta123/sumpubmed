BACKGROUND
next-generation sequencing technologies have accelerated the pace at which whole genomes can be sequenced, opening the possibility to sequence a large number of individuals from one common species . the genomes of individuals of one species are compared on different levels, ranging from single nucleotide variation up to chromosomal rearrangements. in addition, in bacteria individual strains within one species can show extensive variation in their gene content, such that either individual genes or larger clusters of genes can be lost or newly acquired by horizontal gene transfer. in particular, in pathogenic strains of a bacterial species the degree of virulence can be attributed to the absence or presence of genes. this latter observation has led to the coining of the term pan-genome, which traditionally encompasses the full repertoire of all genes of a bacterial species  <cit> , but it also has been extended to other organisms such as plants  <cit> . given a pan-genome of a species, then various subsets of genes in the pan-genome are of interest, such as the core genes, which are those genes that are present in all strains, the set of orphan genes that are present in only one strain , and the set of dispensable genes, which refers to genes that exist in a subset of the strains but neither in all nor just in one. so far, at least  <dig> microbial pan-genome projects have been conducted . several scientific questions are followed using the pan-genome as a framework, such as the determination of genomic diversity of a species, reconstruction of the phylogenetic relationships between strains, or even to replace or at least question serotyping systems for the species in question  <cit> . the serotype is important for the epidemiologic classification of species and strains and it has great implications for decisions for example about medical treatment. furthermore, pan-genomes play an increasing role in annotation efforts of bacteria. an example is the community wiki-type database aureowiki at the university of greifswald, which aims to unify gene/gene product information based on the pan-genome of staphylococcus aureus . a unified nomenclature of genes, gene descriptions and gene names will help especially bacteriologists and life scientists to transfer knowledge from experiments with different strains of the same species on gene regulation, gene functions, mechanisms of pathogenicity and many more.

for the computation of a pan-genome most methods employ a blast-based approach or variants of it that compute orthologous gene groups. orthologs are homologous genes that are related through speciation from a common ancestral gene, while paralogs have evolved through gene duplication. widely used tools following this type of pan-genome implementation are pgap  <cit> , panoct  <cit> , or pangp  <cit> . blast-based approaches that do not take gene neighbourhood into account bear the risk of false orthologs clustering in particular of genes with many paralogs  <cit> .

on the other hand in alignment-based approaches when genomes are compared based on genomic positions, typically a specific reference genome is assigned which acts as the coordinate system for the comparison. however, rearrangements and insertions or deletions lead to substantial architectural variations between genomes and therefore genomic regions that cannot be aligned to the reference are lost. we have proposed the supergenome  <cit>  as a solution, which establishes a general global coordinate system for multiply aligned genomes. this enables the consistent placement of genome annotations in the presence of insertions, deletions, and rearrangements. from the supergenome the pan-genome can be computed in a straight-forward way. first, the start and stop positions of the annotated genes of the individual genomes are transferred into the shared coordinate system of the supergenome. after this, groups of genes are generated, depending if their annotations overlap in the supergenome. finally, pairwise similarities of the overlapping genes are computed, which are used for the final grouping of the pan genes.

also alignment-based methods that compute a pan-genome are not error-free. in particular regions with large sequence variation or with many copies of a gene class, such as trna gene clusters, the correct deduction of the pan genes is a challenge. for this, methods that visualise the gene order together with functional annotation can help to identify and possibly to resolve such cases.

only few tools have been developed that explicitly address the task to visualise a pan-genome. a commonly used tool is the blastatlas  <cit> , which maps and visualises whole genome homology of genes within a reference strain. each genome in such a plot is represented as one circle with a unique colour, the intensity of the colour represents similarity with the respective orthologous gene in the pre-chosen reference genome. pgat offers a web-based tool to support the homogenisation of genome annotation across the genomes of a species.

many visualisations that are used for pan-genomes are not only static, but also mainly focus on visualising summary statistics. an example is the flower pot visualisation  <cit> . to our knowledge so far no tool includes analytical methods that can be triggered in connection with the visualisation, for example to annotate genes of strains within a species. here, we introduce pan-tetris, the first tool for interactive visualisation of pan-genome computation results. the pan-genome table is represented in a matrix-like visualisation with the aim to identify patterns of ordered pan gene groups which could be merged. pan-tetris offers such pan gene modifications by a tetris-inspired interaction possibility.

we have applied pan-tetris to the visualisation of the pan-genome of the bacterium staphylococcus aureus, a model organism for bacteriologists and life scientists.

methods
this section presents the specifications, design choices and realisation of pan-tetris, a framework for an interactive pan-genome map visualisation. a key aspect is the aggregation interaction technique that is implemented in pan-tetris to support user correction of the computed pan-genome. for this, we made use of the aggregation technique we have introduced in ihat <cit> , here however, to support the interactive process of annotation-based pan-genome refinement.

the supergenome-based pan-genome computation
starting point of our visualisation is an alternative approach to computing a pan-genome. in contrast to reciprocal blast, we first compute a whole genome alignment  of the individual genome, from which we then build a supergenome. the supergenome provides a common coordinate system that allows a bidirectional mapping between the alignment coordinates and the original coordinates of each individual genome in the multiple genome alignment  <cit> . next we compute the pan-genome based on the supergenome. for the computation of the pan genes we first note that in a multiple genome alignment orthologous genes if not too dissimilar will be commonly aligned, and secondly these will overlap in the coordinate system of the supergenome. the advantage of this alignment-based approach is that overlapping genes are more likely to be orthologs than paralogs, because of the synteny of the genes, that is implicitly taken into account while the multiple genome alignment is constructed. in addition, if the genes in the individual genomes have been annotated, the annotations can be directly transferred because of the bidirectional mapping provided by the supergenome.

our method, which we coined 'pangee' , computes the pan-genome from a supergenome of a multiple genome alignment. we define the pan-genome as computed by pangee as the union of all genes that are contained in any of the individual genomes in the data set. it considers homologous relationships among these genes, which are represented by the computation of orthologous gene groups from genes that overlap in the coordinate system of the supergenome. in the context of pangee and the underlying supergenome, a group of orthologous genes will be called a pan gene. a pan gene is defined as follows:

• it has a unique identifier;

• it contains at least one gene;

• it contains at most n genes;

• it cannot contain two or more genes from the same genome.

pangee then outputs a pan-genome map which, similarly to other programs, reports the orthologous gene groups, i.e., all pan genes.

another advantage is that due to the common coordinate system a specific ordering of the orthologs can be assigned based on the starting position in the alignment. this ordering gives a logical structuring of the groups without the need of a reference genome.

nevertheless, a multiple genome alignment is in most cases heuristically computed. the non-optimality of such alignments can lead to erroneously aligned regions which can affect the pan genes' count. these erroneous regions are computationally difficult to detect. however, because of the logical ordering of the pan genes in the supergenome coordinate system, certain patterns in the absence and presence of genes within consecutive orthologous gene groups of the constructed pan-genome by pangee give indications of these misaligned regions. a visualisation of this pan-genome can therefore help to identify these patterns and correct the errors caused by the alignment.

with this in mind we have developed pan-tetris. it uses the aggregation concept of our previously published tools ihat <cit> , which we developed for the visualisation and analysis of genome wide association  data, and inphap <cit> , an interactive visualisation tool for genotype and phased haplotype data. the number of orthologous groups and therefore pan genes depend on the homologous relationships between the genes and the resulting multiple genome alignment.

graphical representation of the pan-genome
pan-tetris features a matrix-like visualisation of the composition of all the pan genes of the pan-genome. inspired by other visualisation tools like conset  <cit>  it is basically a presence-absence visualisation of which individual genomes have a gene assigned to a pan gene. thus, the matrix contains the entirety of genes  of all investigated strains . the strains where the genes can be found are given as column titles. gene occurrence is illustrated as clearly as possible by using equally sized and directed arrow shaped glyphs or if absent by using blanks. glyph directions reflect the gene localisation on the forward or reverse strand of the dna double helix. rows summarize the genes of an orthologous group contributing to the definition of a pan-genome gene. pan genes are given as row titles . by definition a pan gene can not contain two genes from the same genome. all pan genes in the computed pan-genome form the final level. because of the supergenome coordinate system derived from the alignment every pan gene has a clearly defined start and stop position. therefore, an ordering of the pan genes in their consecutive appearance in the supergenome is possible and as such visually presented to the user. the ordering of the pan genes is absolute as well as the ordering of the strains in the columns, which is defined by the ordering in the input file.

data formats and visualisation
pan-tetris takes a so-called pan-genome map file, that is the typical output of pangee. it is basically a tab-delimited file where each row refers to a pan gene, and most of the columns to strain-specific information . furthermore, we made it possible to import data that has a very generic pan-genome format: this tab-separated data has to contain a header row with the corresponding genome names in each column, and rows with a unique identifier for each pan gene group. in addition to the primary pan-genome table data, we enable loading meta-information, such as further gene annotation descriptions. we have currently implemented the import of tigrfam assignments as meta-information. tigrfams is a resource based on the use of hmmer <dig>  <cit>  consisting of curated multiple sequence alignments, hidden markov models  for protein sequence classification, and associated information designed to support automated annotation of  proteins  <cit> . in alteration to the uni-colour display of a present gene in a pan gene group, genes can be coloured according to their tigrfam assignment . due to the large number of different tigrfam annotations, a unique colour mapping would lead to a wide colour spectrum, where the small nuance of the different colours could be hard to distinguish. therefore, we restricted the colour encoding to  <dig> different colours that were chosen equidistantly from the hsb spectrum. to be aware that a repetition of the colours may occur, the tigrfam identifier is also added to the group description as additional information. if a gene has no tigrfam annotation, the default colour for a present gene is used. besides the functional annotation colouring scheme, also a colouring of genes based on their location on either the forward or reverse strand has been implemented. this serves as an improved visual highlighting for the strand direction . over key-bindings the user can easily switch between the two gene colouring schemes.

the glyphs of each present gene within a pan gene for a specific genome are pre-rendered images to ensure a smooth interaction with the data. also other graphical elements such as boxes to highlight selection of individual genes or rows and columns are pre-rendered. due to this, all changes do not require a recalculation of the image, but instead just a repainting of the current view, which ensures a real-time response to user interaction.

the pan-tetris graphical user interface
the key feature of pan-tetris is to interactively assess and possibly change a pan-genome by visual means, i.e., to off an interactive possibility to correct pan gene computations. for this, we designed a graphical user interface  that consists of several components . intuitive user interface elements provide easy access to the individual functionalities of pan-tetris. the central and most important part of pan-tetris is the pan-genome matrix visualisation panel. it shows the absence and presence of genes in a matrix-like visualisation. in addition, pan gene identifier as row headers and the genome names as column headers provide further information. a detailed description of the visual representation of the pan-genome has been given in the graphical representation section. the overview panel in the upper left serves as an interactive zoom out representation of the pan-genome visualisation. it shows the position of the current view in relation to the size of the pan-genome matrix. next to the visualisation of the pan-genome, the description panel provides a consensus information for each pan gene, which is derived from the respective gene annotations. furthermore, bar charts in this panel coloured black by default indicate number of genes that are contained in a pan gene. in addition, this black colour can be changed on demand to highlight core and orphan pan genes. a settings panel allows the user the customization of the visualisation. the bottom panels provide detailed information about selected rows in the pan-genome visualisation panel, gene meta-information of a selected gene and a general summary statistics of the loaded pan-genome. the latter includes the number of genomes, pan genes as well as core and orphan pan genes.

interaction possibilities
pan-tetris provides several possibilities of user interaction within the gui which are described in detail in the next subsections.

general interactions with the gui
in general, the number of pan genes in most pan-genome studies is very large in comparison to the number of genomes. for a fast navigation along these groups the user can also use the overview panel, which not only features the indication of the current view area by a red rectangle, but also to jump to a desired location . furthermore, it is possible to adjust the current view by changing the grid size, where the individual present genes are placed onto, or the colour of single graphical elements. the navigation through the graphical representation of the pan-genome is realized with navigation bars along the pan genes  as well as the genomes .

interactions with data
a major feature of pan-tetris is to provide a clearly structured visualisation of the pan-genome matrix and to enable the user to assess possibly erroneously computed pan genes, that are the result of errors in the underlying multiple genome alignment with the possibility of a manual correction. because of sequence diversity or other features, a pan gene can be disrupted into two or more pan gene groups. to facilitate the detection of such errors, protein sequence classifications  can be used. pan genes which are in direct or very close neighbourhood of each other in the supergenome, whose group compositions are complementary and that have the same functional annotation are an indication for disruption because of an erroneous alignment in that genomic region. in order to allow the user to interactively modify the composition of such pan gene groups, we implemented an aggregation technique, inspired by the famous tetris game. two or more pan gene groups that the user selected will be aggregated by merging these into a common pan gene group . a pan gene group that results from aggregation gets an updated identifier labeled agn, which is highlighted for easy visual detection, followed by the number of aggregated pan gene groups in brackets. in addition the identifier of aggregated groups is highlighted in the gui. of course, an aggregation is only possible when the pan gene groups to be fused are complementary, that is each genome has a gene in at most one of the pan gene groups. when this is not the case, the user will be informed that the aggregation is not feasible. the consistent location of the genes, whether on the forward or reverse strand, is not relevant for the aggregation of pan gene groups because orthologous genes can change their strand location due to an inversion event. after aggregation the number of pan genes and possibly the number of core and orphan genes will change. therefore, the summary statistics is also updated. while the same data set is loaded, all aggregations of pan genes can be undone. furthermore, pan-tetris includes an online documentation of last performed interactions and the possibility to save the complete history of all interactions.

by selection interaction the user can get further detailed information about the data. by selecting a pan gene , the meta-information of this group is displayed in the left bottom panel of the gui. this information helps to provide a quick overview of the genes that are present in a specific pan gene group. furthermore, it is possible to select single genes in the pan-genome visualisation panel. all available information about the respective gene is then displayed in the bottom middle panel.

to provide a convenient way of finding a gene, pan gene, aggregated groups or pan genes of specific function a search function has been implemented that allows the user to find, select and update the current view to the target location of those elements.

export
pan-tetris provides two general export possibilities. visualisations can be exported as publication-ready images either in bit-map formats  or as scalable vector graphics . when the user modified the pan-genome matrix itself, this modified matrix can also be saved. the output format of the modified matrix is the same as the chosen input format.

supported platforms and availability
pan-tetris is written in java  <dig>  and can therefore be run on any machine with a java vm installed. pan-tetris, including a tutorial video and example data, is available at http://bit.ly/1vvxyzt.

RESULTS
the development of pan-tetris is the result of a close collaboration with biologists who work on various pan-genome projects. no method for the computation of a pan-genome is error-free, and one of the aims for pan-tetris was to provide an interactive tool that offers the possibility to correct the computations of the pan-genome, which at the same time can then also be used to unify gene annotations. a correct pan-genome with a unified nomenclature of genes and gene descriptions is desirable and will help especially bacteriologists and life scientists to transfer knowledge on gene regulation and gene functions from experiments with different strains of the same species.

during our studies of the staphylococcus aureus pan-genome we learned that lists and tables of orthologous genes alone are not suitable to describe the pan-genome of a bacterial species. the design choices were motivated by the inconvenient use of tables and their unsuitable depiction of possibly missed orthologous relationships. due to this, we designed a simple visualisation that clearly separates individual genes and strains and at the same time allows the user to identify possible errors in the underlying pan-genome matrix.

the pan-genome as well as the pan gene concept is closely related to set-type data. thus, our visualisation concept of pan-tetris is similar to set visualisation tools such as conset <cit>  and onset <cit> . these tools let the user examine relationships between different sets with the help of basic set operations and aim at reducing large data sets with the focus to highlight differences and/or similarities between sets. while the aggregation approach of pan-tetris is in fact a specific type of a set operation, the focus of pan-tetris is, however the proof-reading of the output of an algorithm as well as curation of the data.

the resulting design of pan-tetris offers both an overview of the data as well as a possibility for a detailed inspection of the pan-genome matrix .

the implementation of pan-tetris, in particular with its pre-rendered graphical elements provides a smooth navigation without noticeable loading times. additionally, all interaction possibilities with data are intuitively and conveniently placed, which simplify the application for the user.

we have applied pan-tetris to the pan-genome of staphylococcus aureus, a dangerous pathogen, that is a leading cause of bacterial infection in hospitals and in the community world-wide. at the same time s. aureus serves as a model organism to study the evolution of antibiotic resistance and pathogenicity. we have downloaded  <dig> whole genomes from genbank  and computed the pan-genome of these genomes using our in-house developed software pangee that uses our supergenome approach. the resulting pan-genome has  <dig> pan genes, of which  <dig> are core genes,  <dig> are orphan genes, and  <dig> genes belong to the dispensable genome. we then loaded the pan-genome map into pan-tetris .

in addition to the pan-genome of staphylococcus aureus we computed tigrfam annotations for all these genomes using hmmer <dig>  <cit> . these annotations were loaded in addition to the pan-genome and used in combination with the consensus gene description for the detection of erroneous grouped orthologs. the advantage of computing the pan-genome with the supergenome approach can be nicely demonstrated when viewing the matrix of the ordered pan genes together with functional assignment colouring. the import of tigrfam assignments colours the individual genes based on their respective meta-information. this visual support helps to detect possibly hidden orthologous relationships and therefore miscomputed pan gene compositions. with its tetris-inspired aggregation technique pan-tetris supports the modification of these pan gene groups. an example for this is shown in figure  <dig>  here, two pan gene groups with a common tigrfam colouring of the individual genes and the consensus description encode for a gmp synthase in both cases. since also the gene neighbourhood is conserved  as well as the gene direction, the two pan gene groups are nice candidates for aggregation. indeed, after aggregation this group has become a core gene.

an additional typical use-case can be seen in figure  <dig>  here, the apparently truncated gene savc_ <dig> in the strain vc <dig> appears as an orphan pan gene. in the following pan gene all other strains share orthologous genes. since the consensus descriptions of both pan genes are basically identical and the two pan genes are surrounded by core genes, meaning that this genomic region is highly conserved, these two pan gene groups are good candidates for aggregation. it is not unusual that truncated genes are separated from their orthologs, because of their shorter sequence length, however, the occurrence of one truncated gene in an otherwise fully conserved region can be an indication for an erroneous annotation. after realigning the sequences of all genes of both pan gene groups it became obvious that savc_ <dig> was truncated because of an insertion of another adenine in a homopolymer segment. this lead to a reading frame shift and subsequently to a premature stop codon. it is known that sequencing errors often occur in homopolyers  <cit> , thus a resequencing of the gene sequence is advisable. this example nicely demonstrates how the visualisation in pan-tetris can help to easily detect such possibly erroneous annotations.

pan-tetris is tightly linked to our method pangee with which we compute a pan-genome of a data set. pangee requires a multiple genome alignment, a possible drawback of our approach in comparison to the reciprocal blast based methods, since it is often a difficult endeavour to compute such a genome alignment. however, reciprocal blast approaches have no information about genomic rearrangements and are not robust against annotation errors, which makes a correction difficult.

additionally, many labs sequence their own isolated strains and provide their own assembled and annotated genomes for databases. the problem is that independently performed genome annotations often result in variable gene start and end point predictions, varying gene lengths and often interfere with sequence errors resulting in the prediction in more or less truncated or multiple divided gene sequences. a reciprocal blast approach is here more likely to fail because the grouping of pan genes will be prevented because the found matches will not be sufficient to establish an orthologous relationship. in contrast to this the multiple genome aligner will still align truncated genes or place divergent gene sequences in direct neighbourhood to each other, which might lead to incomplete pan genes. an example for the notoriously difficult to align clusters of trna genes is shown in the supplement . with pan-tetris we offer an interactive possibility for correction. in total we identified many such or similar cases and using pan-tetris we were able to reduce the pan-genome of staphylococcus aureus significantly. to this day, we know of no other tool that offers a refinement of a pan-genome.

future work
in the current version of pan-tetris we have concentrated primarily on a clearly structured visualisation of the pan-genome matrix computed from a multiple genome alignment using our supergenome approach to help improve a pan-genome and respective gene annotations. in a next version we will add further functionality, that for example allows the user to output just the core genome, the dispensable genome or only the orphans of the pan-genome of interest. for the research of mechanisms of pathogenicity, the core genome of an organism may reveal generic targets which can be suitable for a species but non-strain specific treatment . dispensable genes available only in subgroups of strains such as genes of mobile genetic elements, pathogenicity islands, plasmids or single genes of unknown origin may serve as strain specific markers for diagnostic purposes. they can be used to differentiate among phylogenetically related strain groups. some of them are responsible for strain specific capabilities such as the resistance to antibiotics, synthesis of defined toxins, defined metabolic properties and further factors. the same is exclusively true for orphan genes but in a specific manner only for one of the analysed strains.

the next logical step that will improve the curation of pan-genomes is to connect pan-tetris with the underlying multiple genome alignment. here, we plan to integrate a local multiple alignment method such as clustal omega  <cit>  to realign candidates for aggregation.

there are a number of databases that offer precomputed pan-genomes of bacteria, a very prominent example is edgar <cit> . here, together with the developers and providers of edgar we plan to extend output formats such that users can visualize pan-genomes of edgar using pan-tetris.

though traditionally defined for bacteria, the concept of the pan-genome can be and has been extended to other organisms, such as plants, where gene repertoire changes are observed. pan-tetris is not restricted to microbial species, however, as of right now it has only been tested for pan-genomes computed from multiple alignments of bacterial species. last but not least, it is conceivable that pan-genome studies for closely related taxa could be performed at the nucleotide sequence rather than the gene level. thus, using we could extend out supergenome approach and the computation of the pan-genome to general all orthologous sequence elements, revealing not only all protein coding sequences, but also non-protein coding features including promoters and small rnas.

with these additional analytical functionalities we hope to make pan-tetris a truly powerful visual analytics tool for pan-genome computation.

CONCLUSIONS
we have presented pan-tetris, a framework for the visualisation and interactive exploration of large-scale pan-genome matrices. with its close connection to our previously developed supergenome concept, a visual assessment of pan genes and the correction by aggregating different pan genes with common functional annotation is very straight-forward. to our knowledge pan-tetris so far is the only available interactive visualisation tool to explore and modify computed pan-genomes.

competing interests
the authors declare that they have no competing interests.

authors' contributions
jb created a first non-interactive visualisation for pan-genome data. ah and kn extended this idea and developed the concept of pan-tetris. the close collaboration of all authors lead to the designed graphical user interface of pan-tetris and the different visual encoding strategies. ah implemented pan-tetris in the java programming language. ah and kn generated all used pan-genome data and investigated the orthologous gene groups. all authors wrote, read and approved the final manuscript.

supplementary material
additional file 1
click here for file

 additional file 2
click here for file

 additional file 3
click here for file

 acknowledgements
we acknowledge support for publication by deutsche forschungsgemeinschaft and open access publishing of university of tübingen.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2015: proceedings of the 5th symposium on biological data visualization: part  <dig>  the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/16/s11
