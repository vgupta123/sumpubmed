BACKGROUND
today’s drug development costs have an estimated average of  <dig> million dollars per approved drug and the time necessary to put it into the market is between  <dig> to  <dig> years  <cit> . hence, there are efforts to change these numbers, for example, by reducing the timeline and costs, and increasing the quality of the candidate drugs. an important step in the process of new drug discovery is the improvement of our understanding about target receptor-ligand interactions at the molecular level  <cit> .

the advent of molecular biology, especially genomic sciences, and the intensive use of computer simulation tools over the past years, have had a deep impact on drug discovery  <cit> , turning possible a more rational drug design  approach  <cit> . rdd basically involves a four-step cycle that combines dry and wet experiments with structure information  <cit> . wet experiments are the traditional assays performed in vitro and in vivo while dry experiments are performed in silico or on computers.

in the rdd’s first step the structure of the target receptor  provides a starting point for direct modeling activities. during this step, the three-dimensional  structure of the receptor obtained, for example, from the protein data bank   <cit> , is analyzed in order to identify probable binding sites. in the second step, based on such probable binding sites, a set of possible ligands  is selected. it corresponds to filtering compounds from a ligand database such as zinc  <cit> . subsequently, in the third step, the receptor-ligand interactions are evaluated by computer simulations using molecular docking software, of which autodock  <cit> , dock  <cit> , and flexe  <cit>  are just a few examples. throughout this step the ligands that had the best interaction score to the receptor are selected, bought or synthesized, and then wet-experimentally tested. finally, in the fourth step, based on the in vitro results, an inhibitor candidate is detected, or the process returns to the first step.

a detailed understanding of the interaction between ligands and receptors, using molecular docking simulations, constitutes the very basis of rdd  <cit> . it is during molecular docking that the best ligand fit into the receptor becomes available  <cit> . to assess the quality of the ligand fitness, a large number of evaluations are carried out to score and rank the best ligand conformation and orientation inside the receptor binding pocket. different approaches, including force-field methods, empirical scoring functions, and knowledge-based potentials have been developed to score receptor-ligand interactions  <cit> . in autodock <dig> . <dig>  <cit> , for example, the force-field based scoring function is computed in terms of the estimated free energy of binding . the more negative the estimated feb, the more effective is the ligand-receptor association.

most docking software is capable of simulating the different conformations that the ligands can assume inside the receptor binding pocket by considering their flexibility  <cit> . as to the receptor, the state of the art docking algorithms predict an incorrect binding pose for about 50- <dig> % of all ligands when only a single, rigid receptor conformation is considered  <cit> . however, there are limitations to the use of the explicit flexibility of the receptor  <cit>  due to its large number of degrees of freedom  <cit> . moreover, from biology we know that receptors, such as proteins, enzymes, dna, and rna are inherently flexible macromolecular systems  <cit>  and this flexibility is often essential for their functions  <cit> . macromolecules can modify their shape upon ligand binding, molding themselves to be complementary to the ligand, increasing favorable contacts and reducing adverse interactions, thus minimizing the total feb  <cit> .

receptor flexibility in molecular docking
there are a number of alternative ways to incorporate, at least in part, the receptor flexibility in molecular docking simulations . some methods consider only one receptor conformation. however, there are approaches that make use of a set of receptor conformations. receptor conformations can be determined experimentally either by x-ray diffraction or nmr experiments, or generated by computational methods such as molecular dynamics  simulations  <cit> . advances in experimental techniques allowed a detailed view of biological processes by accessing details of the structural properties of biological macromolecules  <cit> . these properties can be further meticulously investigated by computational techniques such as md simulations  <cit> , which simulate the motion phenomena of biological molecules in atomic detail  <cit> . to consider the receptor flexibility in molecular docking experiments the multiple receptor conformations can be combined on different grid forms or can be executed as a series of molecular docking experiments, each of which with a different receptor conformation.

according to teodoro and kavraki  <cit>  the first use of multiple structures derived from a md simulation for a drug design application was by pang and kozikowski  <cit> . carlson and co-workers  <cit>  used the structures from md simulation to develop a receptor-based pharmacophore where binding sites conserved during the md were combined into a dynamic pharmacophore model. lin et al.  <cit>  presented the relaxed complex scheme  to accommodate receptor flexibility in the search for correct ligand-receptor conformations. they first performed a md simulation on the ligand-free protein and then docked ligands to snapshots obtained from the simulation. more recently, amaro et al.  <cit>  showed extensions and improvements to the rcs method. they applied a more rigorous characterization of local and global binding effects and improved the computational efficiency by reducing the receptor ensemble to a representative set of conformations.

among all the available methodologies to model the explicit flexibility of the receptor we chose to use an ensemble of different receptor conformations derived from a md simulation trajectory. we call this a fully-flexible receptor  model. consequently, we must execute a series of molecular docking simulations considering in each one a receptor snapshot derived from the md trajectory. despite that docking against several structures increases the chances of finding a receptor in the right conformational state to accommodate a particular ligand  <cit> , this methodology can be compute-intensive  <cit> . several computer programs are used in each receptor-ligand docking simulation and to parameterize and execute all software, manually and accurately, is not a trivial task  <cit> .

workflow modeling
nowadays, workflows are not being used just for the automation of business processes  <cit> : they are being used successfully to automate scientific processes as well  <cit> 
. ludäscher et al.  <cit>  define scientific workflows as a network of analytical steps, where the output of a step is used as input for the next step, that can involve access to and querying databases, data analysis and mining, and other steps which, normally, are computationally intensive jobs executed on high performance computing platforms. according to ludäscher et al.  <cit>  workflow development differs from general programming mainly in that the composition and configuration of a workflow is built from pre-existing and more general-purpose components, subflows and services; a new workflow can be created by a user by modifying an existing one, or else the user can compose a new workflow using components and subflows obtained from a repository. moreover, scientific workflows may include support for monitoring the execution of workflows in real time, recording the processing history and allocation in distributed execution environments, and managing scientific data  <cit> . all these features make up for a much more complete and complex framework which is arguably not available to a simple execution of interactive scripts.

some specific tools have already been developed to model and execute scientific workflows, e.g. kepler  <cit>  and taverna  <cit> . kepler is an open source tool designed to implement and execute different varieties of workflows ranging from low level workflows of interest to grid engineers to analytical knowledge discovery workflows for scientists  <cit> . taverna  <cit>  was specifically developed for the design and execution of bioinformatics workflows in a structured, repeatable and verifiable mode. oinn et al.  <cit>  described several other scientific workflow management systems together with a table comparing some features of these tools.

there already are a number of studies applying scientific workflows to modeling and executing bioinformatics tasks and new tools or extensions of existing ones are being developed. for instance, biomoby-based web services  <cit>  allow the construction of functional workflows, defining ontology for bioinformatics data-types and a corresponding xml representation to facilitate the flow of data from different web-based resources. bartocci et al.  <cit>  presents a new wfms called biowms which provides a web-based user interface for definition, execution and results management of a scientific experiment, employing an agent-oriented technology to create a distributed, concurrent, flexible, adaptive and mobile system.

fredows
our test simulation is  <dig>  ps  long, with snapshots collected at every  <dig>  ps. thus, using the ffr model, it is necessary to execute  <dig>  molecular docking simulations. executing all these simulations either manually or using shell scripts is complicated and inefficient. their results are likely not to be reproducible when executed by different users at different times. moreover, there is the necessity to reduce the cpu demand. to address this problem, in this article we describe fredows , a workflow-based methodology, developed to automate molecular docking simulations that make use of a ffr model. additionally, a snapshot selection feature was implemented to reduce the dimension of ffr models so as to accelerate its application in virtual screening of ligands  <cit> .

methods
the fredows architecture
we adapted the wfmc  <cit>  generic structure for a workflow to describe fredows . process design and definition are prepared with jawe <dig> - <dig>  <cit> . enhydra shark <dig> - <dig>  <cit>  is employed to instantiate and executes a process. during each workflow execution of docking simulation, enhydra shark interacts with c programs, swiss-pdbviewer   <cit> , autodock <dig> . <dig>  <cit>  and amber <dig>   <cit>  .

process design and definition
during process design and definition we use the jawe <dig> - <dig>  <cit>  . jawe <dig> - <dig> is a visual tool for creating, managing, and reviewing process definitions in a straightforward and simple manner. it allows the user to quickly create and verify workflow process definitions and store them for future use. it is also an activity-based wfms in which processes  are comprised of activities to be completed in order to achieve a defined task  <cit> . jawe has also been used in other bioinformatics workflows projects  <cit> .

process instantiation and control
in the process instantiation and control, we chose to use the enhydra shark <dig> - <dig>  <cit>  as our workflow management system . enhydra shark <dig> - <dig> is an extendable java open source workflow engine that includes a standard implementation completely based on the wfmc  <cit>  specifications using the xpdl language. this workflow engine has implemented the wfmc "toolagents" api to facilitate execution of external applications as system activities. both jawe <dig> - <dig>  <cit>  and enhydra shark <dig> - <dig>  <cit>  are free software, execute in linux and are easy to use. figure 2a shows the main enhydra shark interface where the user needs to upload the fredows model that was designed and defined by jawe <dig> - <dig>  subsequently the process is instantiated by the user as illustrated in figure 2b. in this step the process starts to be locally executed by enhydra shark, with the activities released to the user according to the workflow model . one example is the generic activity depicted in figure 2c. to be executed it needs to have some parameters updated by the user  for the variable r <dig>  all the fredows activities are executed by c or shell scripts the users do not need to know or modify. they only need to set the variables for each activity, as exemplified by figure 2d, to perform the data preparation task. the user must specify the receptor and ligand file names and their location. afterwards, the user must set what kind of docking experiment will be executed  and thus other variables that are needed to perform each activity or subflow.

application tools
during process design and definition we modeled all process activities, the majority of which needs to communicate with different application tools during each workflow execution instantiation. the tools used in fredows are:

• swiss-pdbviewer or spdbv  <cit> : an application that provides a graphical user interface allowing the analysis of protein 3d structures. in our work, spdbv is used to position the ligand in the receptor binding site during the step the ligand is prepared for the molecular docking simulation.

• autodock <dig> . <dig>  <cit>  is a suite of computer programs for molecular docking.

• amber <dig>   <cit>  is a suite of programs to minimize and perform md simulations on bio-molecules. it consists of a substructure database, a force field parameter file and also of a variety of utility programs. ptraj, one of its modules, processes the trajectory files generated by md simulations.

• in-house c programs and shell scripts are used to process data during the execution of the complete workflow and to generate the results tables, for instance, by extracting information from autodock <dig> . <dig> output files.

full receptor flexibility from molecular dynamics simulation
the receptor chosen for this study is the wild type inha  enzyme  <cit>  from mycobacterium tuberculosis and its mutants inha_i21v and inha_i16t, all three in a binary complex with its native ligand, the coenzyme nadh. the md simulations of the inha_wt-nadh, inha_i21v-nadh and inha_i16t-nadh complexes were performed for a time period of at least  <dig>  ps  <cit> . the nadh coenzyme was removed from the inha_wt and mutants’ md trajectories for the docking experiments. thus, three ffr models of the unliganded inha_wt and two mutants were used in the experiments below to validate the usefulness of fredows.

molecular docking experiments and computational infra-structure
each ffr inha model was submitted to a docking experiment using autodock <dig> . <dig>  <cit> . during the executions, we used four types of computer architectures: cluster is a cluster of  <dig> pcs pentium iii  <dig>  ghz and  <dig> mb ram; pc <dig> is a pentium  <dig>  <dig>  ghz and  <dig> mb ram; pc <dig> is a pentium  <dig>  <dig>  ghz and 1gb ram; pc <dig> is a core  <dig> quad  <dig>  ghz and  <dig> gb ram.

RESULTS
fredows – flexible-receptor docking workflow system
fredows is an acronym for flexible-receptor docking workflow system. it is a significant extension of the introductory work by machado et al.  <cit> , which includes a special snapshot selection feature. this feature is expected to accelerate automated docking experiments with ffr models. figure  <dig> is the jawe  <cit>  internal representation of the fredows workflow process definition. in the workflow model that we developed there are two kinds of participants: human and system. the human participant, represented in white , indicates the workflow activities that need human interference to be executed. for the system participant, an automatic agent in blue , activities are executed by the system without any human intervention. fredows follows a task-flow model which we describe in figure  <dig> 

setup task
before the execution of fredows there is a setup task. this step corresponds to the generation and storing of instantaneous receptor conformations or snapshots through the execution of a md simulation of the receptor. this task is not modeled in fredows for it only needs to be executed once for each receptor.

data preparation task
this task involves the preparation of receptor and ligand data. before the execution of prepare macro subflow , the user needs to indicate whether it is necessary to execute it in the activity prepare recep y/n. this step might not be necessary if the experiment only employs a single receptor snapshot. in fredows, the prepare macro subflow has two activities:  execution of ptraj to transform the md trajectory files into the pdb  <cit>  format used by almost all docking software  <cit> , and  execution of a script to pick up snapshots separated by time intervals larger than or equal to the frequency with which snapshots are saved from the md simulation.

the ligand data preparation is executed by the prepare ligand subflow . as with the receptor preparation, before the execution of this subflow, the activity prepare lig y/n is executed. as the n option shows, it may not be required to prepare the ligand if the docking experiment employs the same receptor-ligand pair . this subflow prepare ligand has two activities:  places the ligand in its initial position within the binding pocket of the ffr’s average structure. receptor and ligand structures are automatically opened by shark in swiss-pdbviewer  <cit>  and the ligand is manually placed by the user in the receptor active site and  the proper ligand file, in the tripos mol <dig> file , is generated and transformed into the pdbq format by the autotors module of autodock <dig> . <dig>  <cit> . since the data preparation tasks are executed by subflows, they can be easily modified to run different docking software and/or file formats through a relatively simple update of these subflows, making fredows a very flexible system.

execution of high-throughput molecular docking with ffr models
fredows allows the user to choose the kind of docking experiments to execute. the user can run an exhaustive docking experiment  <cit>  where the ffr model is based on the series of snapshots from a md simulation trajectory or a selective docking experiment. in the latter, it is possible to selectively pick up particular snapshots from the md trajectory, trimming down the dimension of the original ffr model, aiming at reducing the time necessary for each ffr-ligand docking. therefore, when the activity exhau or select? is called, the user can choose the type of workflow execution.

in the activity ask data exhau the user informs the initial and final snapshots from the md trajectory defining the ffr model and a counter value, which designates the next snapshot to be used . subsequently, fredows executes the activity calc tot counter where the total number of iterations of the subflow execute docking is calculated based on the initial and final snapshots positions. following the process definition , after the user indicates the type of execution, the process spawns the subflow execute docking  where either experiment can be executed – exhaustive or selective.

the first activity, concat param, is performed to concatenate the ffr model dimension to the parameters of all following activities of this subflow. the activity execute prep m prepares each individual snapshot file of the ffr model for use in autodock <dig> . <dig>  as a result it generates pdbqs files using the addsol utility. execute mkgpf <dig> and execute mkdpf <dig> generates the input.gpf and input.dpf files, respectively. these are the input files necessary for the sequential execution of agrid and adock . if it is the first execution, in prep docking the file input.dpf is edited within the system’s text editor and the user can effortlessly modify the docking parameters. execute agrid executes the autogrid module. here grid maps are defined for each ligand atom type. execute adock runs the autodock module. in this step the interactions of each snapshot of ffr model and the ligand are evaluated and estimates of their affinity are calculated and expressed in terms of their free energy of binding . at the end of each docking simulation an output file is generated. it contains information about all the tested ligand positions  organized according to the best feb and the ligand root mean square deviation  to a reference position. compact result, the last activity executed by the subflow execute docking, collects the current docking energies  and rmsds output and stores them in a results’ list.

reducing the dimension of the ffr model: the snapshot selection feature
the execution of an exhaustive experiment  <cit> , using the ffr model of inha enzyme  <cit>  and the ligand molecule pif takes about  <dig> hours of cpu time in the cluster. since we envisage the execution of virtual screening using ffr models of disease targets against public databases of small molecules, such as zinc  <cit> , containing over  <dig> million compounds, it is mandatory to reduce the cpu time for each docking simulation. the solution we propose is not to use the whole md trajectory of the receptor, the ffr model, but rather a sample of snapshots from it. we call this a reduced fully-flexible receptor model . in this work, as a preliminary approach, we use the estimated feb and the rmsd values to reduce the dimension of the ffr model.

after an exhaustive execution of a ffr-ligand docking simulation, it is possible to execute new experiments using the same receptor model, with different ligands belonging to a single class , but on a selection of snapshots from the trajectory. in this way we hope to maintain the ffr model features and, at the same time, reduce cpu time. in fredows, to execute a selective experiment, the user chooses the selection option in the activity exhau or select . the following ask data select activity is performed. its input data are: table t <dig>  an output table obtained by the previously completed exhaustive experiment; maximum rmsd is the value of the rmsd that the user wants to establish as one of the limiting parameters; total number of snapshots is the number of snapshots to be selected to build the rffr model; counter value is a pointer to the start of execution. now, the selection algorithm is ready to be executed by the activity select snaps.

after the execution of select snaps described above, the activity setup counter is executed with the starting point of the counter assigned by the user. at last, the execute docking subflow shown before is performed and all selective experiments are executed by fredows.

test cases
the test cases are aimed at validating fredows and the method for snapshots selection. we have previously executed three exhaustive docking experiments using the ffr model of inha_wt and three ligands  <cit> . therefore, in this article we describe test cases using the snapshot selection feature of fredows. these tests are divided in two parts. the first part performs the selection directly from the exhaustive experiments described by machado et al.  <cit> . in the second part we use only a sample of the snapshots, the rffr model of the inha_wt and test it against a fourth, different ligand. finally, we describe test cases considering ffr models of inha_wt and the mutants inha_i21v and inha_i16t with the ligand tcl, showing that fredows can be easily applied to different ffr models and different configurations for the ligands .

before detailing these tests, we give a brief description of the enzyme receptor and its ffr model, as well as the ligands employed in the study.

the inha enzyme and its ffr model
the inha enzyme  reductase, ec:  <dig> . <dig> ) from mycobacterium tuberculosis  represents an important target for tuberculosis control  <cit> . its inhibition disrupts the biosynthesis of mycolic acids, which constitute essential structures for bacterial survival  <cit> . therefore, inhibitors targeting this enzyme would be promising candidates for the development of new drugs against tuberculosis  <cit> .

inha mutant strains have emerged almost at the same time that isoniazid  was first launched in the market in the early 50's as a first line drug for the treatment of tuberculosis  <cit> . as an example, we have chosen to work with the mutants i21v and i16t. these mutations occur on a glycine-rich loop of inha and were proved to be correlated to inh resistance  <cit> .

in the search for new inhibitors, several compounds have been experimentally tested against mtb’s inha  <cit> . however, an automated method for in silico molecular docking and virtual screening could turn this search more extensive and effective for the identification of possible inha ligands with improved inhibitory effects.

schroeder et al.  <cit>  demonstrated in a series of md simulation studies that the inha enzyme is a considerably flexible macromolecule and that this flexibility is reflected in its active site. thus, we believe that for a more realistic virtual screening, this flexibility should be taken into account. for these reasons, instead of using one single, rigid, crystal structure, we use ffr models of inha and mutants, obtained from md simulation trajectories of the inha-nadh complex  <cit> .

the ligands nadh, pif, tcl, and eth
for the exhaustive test cases we used three ligands: nadh  <cit> , pif  <cit>  and tcl  <cit> . the nicotinamide adenine dinucleotide  is the native ligand of inha. therefore, it was considered as a reference ligand for the docking evaluations. the nadh molecule has a total of  <dig> atoms. pentacyanoferrate or pif, the second ligand, contains  <dig> atoms. triclosan or tcl, is a molecule with  <dig> atoms. both pif  <cit>  and tcl  <cit>  are considered good inhibitor candidates of inha. for the selective test case we consider one ligand, ethionamide or eth. eth is a small molecule composed of  <dig> atoms. like isoniazid, eth only inhibits inha activity when covalently linked to nadh, forming the adduct eth•nad  <cit> . all ligands have at least one rotatable bond.

the exhaustive test cases
fredows successfully executed three different exhaustive test cases  <cit>  using autodock <dig> . <dig> running the simulated annealing protocol with  <dig> runs of execution, each with  <dig> cycles. first the nadh ligand was docked to the ffr model of inha_wt. the feb and rmsd values, related to its well-known binding place  <cit>  in inha, were collected. the same procedure was repeated for pif and the tcl ligands. the final results are summarized in table  <dig>  for simplicity, in the exhaustive test cases the ligands were considered rigid during the molecular docking simulations. however, as we show below, there is not much difference in using flexible or rigid ligands.

the 3rd column shows the average and standard deviation of the feb obtained with the ffr model of inha. the 4th column shows the total number of docking simulations that resulted in negative, favorable feb values while the 5th column displays the unfavorable docking results with positive feb. the 6th column presents the number of docking simulation that did not converge. the 7th column presents the average rmsd and its variation about the ligand starting position. the 8th and 9th columns show the computer architecture used and the cpu time for each ffr-ligand simulation.

for the ffr inha-nadh complex, the docking simulation for each snapshot took about  <dig> minutes to complete running in the cluster . hence, it took nearly  <dig> hours to execute the ffr of inha-nadh simulations. the results confirmed the affinity of the nadh ligand for the inha enzyme, showing a good feb average of - <dig>  ±  <dig>  kcal/mol. since we are performing blind docking, i.e., we do not know a priori where the ligand should bind more efficiently in the receptor, we cannot say much about the rmsd, except that, for the ffr model, it indicates how freely the ligand moved inside its flexible binding pocket. however, as far as the feb value is concerned, we know it is a satisfactory one, for in a previous study  <cit> , we obtained a similar result for the average feb using the crystallographic position of nadh as the reference ligand position to calculate the rmsd during the re-docking simulations.

the ffr inha-pif complex docking simulations, also executed in the cluster, took around  <dig> hours of cpu time. the shorter cpu time is justified on the basis that pif is significantly smaller than nadh. the ffr inha-pif simulations resulted in a good average feb with low standard deviation .finally, for the exhaustive test cases, the ffr inha-tcl docking simulations, executed in pc <dig>  and took  <dig> hours of cpu time. the average feb and its standard deviation  indicate a favorable inha-tcl association.

the selective test cases
in silico virtual screening for new inhibitor candidates for any target receptor molecule takes a considerable time when a single receptor structure is screened against millions or tens of millions of compounds in a database, . in a ffr model, as we  <cit>  and others  <cit>  proposed, the cpu time to span a database like zinc should explode to an unachievable cost. hence, the necessity to reduce the cpu time for docking simulations using a ffr model.

given the above problem, we implemented a snapshot selection feature in fredows that accelerates docking simulations which make use of ffr models derived from a md simulation trajectory. how does the selective snapshot option of fredows work? from the ffr inha-nadh docking simulations we selected the first  <dig>  best-scored and posed  docked inha snapshots from the exhaustive ffr inha-nadh experiment. now, we have the rffr model of inha made of  <dig>  snapshots only. we evaluate how good this approach is compared to the complete ffr model of inha . for that, we observe the difference in feb and rmsd between the two approaches.

three test cases were performed and divided in two parts. in the first part we simply picked up the  <dig>  best-scored snapshots for the ffr inha-pif and ffr inha-tcl complexes from their exhaustive docking results  based on the selection procedure describe above. in the second part we used fredows, applying the selection feature, to execute selective docking experiments with the rffr model of inha-eth complex with the same docking protocol used in the exhaustive test case.

see table  <dig> for details about the table contents.

all the selective test cases used the same  <dig>  snapshots selected from the inha-nadh results and, as the exhaustive test cases, for simplicity, considered the ligands rigid. it is worth stating, however, that the selection parameters used in this study were established for our particular experiments and that they can be modified without difficulty according to one’s requirement.

for the first part of the selective docking the ffr inha-pif test case had a feb of - <dig>  ±  <dig>  kcal/mol and a rmsd of  <dig>  ±  <dig>  Å . in the rffr analyses we obtained a feb of - <dig>  ±  <dig>  kcal/mol and a rmsd of  <dig>  ±  <dig>  Å . for the ffr inha-tcl test cases we obtained a feb of - <dig>  ±  <dig>  kcal/mol and a rmsd of  <dig>  ±  <dig>  Å  while for the rffr model we obtained a feb of - <dig>  ±  <dig>  kcal/mol and a rmsd of  <dig>  ±  <dig>  Å . clearly, these experiments are statistically similar; there is no significant difference between exhaustive  and selective  docking test cases.

in the second part, each complete inha-eth docking simulation took  <dig> minutes of cpu time, and hence, a total execution time of  <dig> hours for eth in pc <dig>  the rffr inha-eth had an average feb of - <dig>  ±  <dig>  kcal/mol and a rmsd of  <dig>  ±  <dig>  Å. although greater than the other feb values, the inha-eth estimate of the feb is still an acceptable one. eth is a small ligand with only  <dig> atoms. visual inspection with spdbv  <cit>  shows that the eth ligand can freely move in the receptor binding pocket occupying, in most results, the proper site to form the eth•nadh adduct that inhibits the inha enzyme activity  <cit> .

taken together, these data suggests that our selective experiments, using the rffr model, were successful since they were able to reproduce the feb values for the first two ligands  using only  <dig>   instead of  <dig>  snapshots  of the inha receptor and using only 1/ <dig> of the cpu time. we also obtained accurate results for the eth ligand, for which only the selective experiments were performed. the total cpu time for this selective experiment in a single computer was about  <dig> hours. if we had opted for the ffr model this time would have a three-fold increase.

considering the analyses above, we can organize the ligands in terms of the inha receptor affinity for them. we have found that the inha receptor has better affinity for the nadh , followed by pif, tcl, and eth. from the experimental data available, we know that inhibition constant ki for pif is  <dig>  µm  <cit>  while for tcl it is  <dig>  µm  <cit> . this means that pif has a better inhibitory effect than tcl over the inha receptor, corroborating our docking results. as eth inhibits the inha receptor as the eth•nad covalent adduct  <cit> , it was expected that its feb, as a dissociated compound, would not give a good docking result as the previous ligands.

overall, the results obtained with the selective test cases for pif, tcl and eth suggests that, for these classes of ligands, the fredows snapshot selection feature was effective and could be applied more extensively to other ligands to help accelerate the discovery of novel inhibitors for mtb’s inha.

the exhaustive test cases considering three ffr models of inha
after executing the experiments with the ligands on a rigid state, a new series of experiments were performed using three ffr inha models: the wild type  and the mutants inha_i21v and inha_i16t aiming at comparing the binding modes in these models. md simulation trajectories for at least  <dig>  ps for each model were generated previously. these ffr models were tested against flexible tcl. the ligand flexibility was determined with the autotors module of autodock <dig> . <dig> during fredows execution, allowing two torsion angles.

docking was performed using autodock <dig> . <dig>  genetic algorithm protocol with  <dig> runs, for which a maximum number of  <dig>  lga was generated on the initial population of  <dig> individuals, and a maximum number of  <dig>  energy evaluations. the results are summarized on table  <dig>  based on the standard deviations, small but relevant differences can be seen in the experiments of tcl with the different inha receptor . the average feb varied from - <dig>  ±  <dig>  to - <dig>  ±  <dig>  to - <dig>  ±  <dig>  kcal/mol for inha_wt, inha_i21v, inha_i16t, respectively. the lowest feb for the crystal structure was - <dig>  kcal/mol.

the first column describes the receptor ffr model. the second column shows the considered ligand. see table  <dig> for details about the other columns table contents.

the feb values described in table  <dig> represent a difference of about  <dig>  kcal/mol when compared with the three ffr models. from this analysis we can state two basic conclusions: first, the ffr models were able to discriminate the inha affinity for the tcl ligand. they showed that tcl binds more strongly to inha_wt than to the mutants. second, ffr models can accommodate a more diverse range of ligand conformations. this indicates that they are more prone to select a new ligand capable of binding to inha than it would do if we used only a single crystal, rigid structure.

CONCLUSIONS
the main contribution of our article is fredows, a workflow-based methodology to automate the molecular docking processes using a ffr model. fredows includes a snapshot selection feature to further accelerate the virtual screening of ligands for well defined disease targets. fredows was developed using jawe and shark software tools to model and execute processes, respectively. it can be defined as a scientific workflow because it handles complex objects and files and executes complex and long-running activities. it strictly controls activities executions based on a complete workflow model, decides the next steps based on output values produced by activities and, indeed, selects different execution branches with such values.

fredows usefulness was demonstrated by the investigation of the docking of four different ligands to the mycobacterium tuberculosis inha enzyme. we found that all four ligands binds effectively to the inha ffr model as expected from the literature on similar, but wet experiments. we can also determine the extent of the receptor flexibility, and accelerate the docking screening, by performing docking simulations with selection of snapshots . a work that would usually need the manual execution of many computer programs, including the docking software autodock <dig> . <dig>  and the manipulation of thousands of files, was efficiently and automatically performed by fredows. in order to perform the same experiments without fredows, one would have to be familiar with programming languages, shell scripts, command-line tools and so on. development of these skills is time consuming and not trivial. we have demonstrated that, with a graphical user interface, the user can perform those tasks without hassling with technical details of the many tools involved. fredows friendly interface allows the user to change the docking and execution parameters according to the necessity. in particular, the snapshots selection method described in this work was simple enough to illustrate the functioning of fredows. as future work we will develop and analyze different snapshot selection criteria to further reduce the dimension of the ffr models, generating a much more refined rffr while still maintaining the explicit flexibility of the receptor. we expect these advances to bring down the cpu time to a level that can allow the routine use of ffr or rffr models in virtual screening of millions of compounds. finally, with fredows and our ffr model, defined by a collection of snapshots derived from a md simulation trajectory, we expect to explore more of the role flexibility plays in receptor-ligand interactions.

competing interests
the authors declare that they have no competing interests.

list of abbreviations
fredows: flexible-receptor docking workflow system; feb: free energy of binding; ffr: fully-flexible receptor; md: molecular dynamics; rdd: rational drug design; pdb: protein data bank; rcs: relaxed complex scheme; rffr: reduced fully-flexible receptor model; rmsd: root mean square deviation; wfms: workflow management system.

authors' contributions
ksm implemented the scientific workflow, executed the test cases and wrote the first draft of the article. eks and emlc helped to conceive and execute the test cases and in the analyses of the results. ddar helped to model the workflow from conception to execution, to conceive the test cases and to write the first draft of the article. ons coordinates the project and wrote the final version of the article. all authors read and approved the final manuscript.

