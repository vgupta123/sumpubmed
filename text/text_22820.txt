BACKGROUND
within the life sciences we continually see a steady increase in the volume and complexity of data being generated by experiments. the management of this data requires rapid development of high quality integration and analysis tools. this paper discusses a software architecture designed to fulfil this need by providing a mechanism for the structured integration of data, and analysis tools, in an extensible and straightforward manner.

systems biology has the same data management requirements as many other fields of science, but due to its interdisciplinary nature and strong association with high throughput techniques these needs are more apparent. these requirements are to allow for: the rapid introduction of new data sources derived from new and emerging technologies; the interoperability between analysis tools written in a variety of different languages; a means to integrate data sources to support data mining and searching operations; and the ability to directly access the experimental data and associated metadata. designs based on enterprise systems can provide solutions to these problems within an organisation, but they have to be tailored to suit the specific needs of researchers.

life science research enterprise data integration and process management systems have evolved over the last  <dig> years, effectively since the creation of open interoperable object based communications . this evolution has been from single database based solutions through to open, distributed, interoperable data management solutions. this has been driven by demands for rapid development, high levels of interoperability and increases in data volume and complexity.

the development of data management systems to support the life sciences has undergone a number of fundamental changes in the last decade . as in other areas, the history of enterprise systems in the life sciences is, in essence, one of a cultural change from the development of proprietary solutions, designed from the top-down, towards more flexible bottom-up architectures informed by open standards solutions. this evolution of data integration and management technologies can be categorised into three stages:

 <dig>  data centric
initially, data repositories were developed, and integrated using either external indexing services or data warehouse mechanisms. the data repositories rely on a variety of technologies, including index based , dbms , and federated database approaches . the development, of these data centric solutions, was driven by the availability and standardisation  of relational database management systems, and the requirement for a federated approach to data warehouse solutions. the lack of object interoperability of such data repositories gave an impetus for the development of top-down object centric standards.

 <dig>  object centric
with these approaches, standards bodies  decided on interoperable object standards which it was hoped would be taken up by the life science industry. there has been some success with such standards, but as they had to capture all areas of a domain their complexity limited their broad-scale adoption. this object level standardisation was largely driven by the maturation of object based protocols  and associated object services  which used interface definitions  to formalise the static distributed interfaces. such standards, either proprietary or open, were mainly implemented using integration frameworks built using application servers. they were introduced into a large number of pharmaceutical companies . these integration frameworks suffered as their rigidly typed systems were difficult to extend and could not keep pace with evolving research requirements and new experimental technologies. processing pipelines were also integrated within these tools. the requirements for orchestration of analysis tools led to the growth in the number of in-house tools designed specifically for rapid development and deployment characteristics, rather than interoperability or complexity . the integration frameworks were built upon the maturing application server products which were principally java based 

 <dig>  document centric
document based solutions  became popular as they provided a means to develop solutions that could: keep pace with the rapid advances in research; were scalable, robust and easy to develop; and were interoperable. these are now widely used as a basis for integration . the advantages of these approaches are based on their lightweight specifications and ease of implementation . newer programming constructs, such as aop, dramatically reduce the complexity of code of web services, and partly accounts for their widespread adoption . one of the challenges associated with web service architectures is their lack of semantics. in response, ontology-based solutions were developed , although these largely depended on slowly evolving globally accepted ontologies. designs using distributed runtime type checking and type mapping are now emerging  <cit> , as these provide for a means of integration and robustness that place fewer restrictions on developers. a number of escience solutions were also associated with similar architectures, although the majority of these have converged with the mainstream semantic web . a number of tools to support these service oriented solutions have been developed, including graphical tools , schedulers , and script translation tools . the semantic web based solutions are being driven by both the convergence of standards for document based enterprise computing , and the development of knowledge representations and query standards .

there is a natural progression with these systems, as they generally follow the traditional approaches to software designs that are prevalent at the time . this means that the designs have an inherent underlying "predilection for the pedestrian". however, with each stage the flexibility of the designs increases. this means that with directed effort it is now feasible to extend the currently available enterprise technologies to provide adaptive systems that are able to satisfy the unique nature of systems biology based scientific research. such an approach, however, requires a new type of thinking both in terms of distributed systems and algorithm development. the traditional approaches that are currently being developed are designed to work with "finished" data, not research information. in such static views, reuse is generally based upon the development of a standardised interface, followed by adoption or implementation of the required components. this style of architecture works well within publishing scenarios, where information is to be made available across the internet as a community resource. when working within a research project, typically within an intranet, where new technologies and ideas are continually being developed, these static publishing approaches  are not appropriate. instead, a flexible analysis and access system is required that allows for the rapid introduction and integration of many types of data.

this paper is technical in nature, and is designed to be of use to both software developers working within research environments and for their project managers. the results section gives an overview of why the system was developed, and describes the architecture. the discussion section outlines further areas where we feel work needs to be focused. the final section gives our conclusions about why systems similar to the one described herein are needed. a glossary of terms is then given at the end of the document.

RESULTS
this paper discusses the requirements and design of the isb informatics infrastructure, which is abbreviated as i <dig> . i <dig> is a light-weight service orientated architecture which is designed to integrate disparate data sources and tools without the need for significant reimplementation or modification. the system is designed to ensure that people can always get access to experiment information, without the imposition of specific formats or language restrictions. the system utilises a number of common and open standards to: provide a high of interoperability with third party solutions; ensure that the code can be easily maintained; and minimise the cost of development.

the system was designed to support communities of largely independent research groups who have a desire to ensure that their data  can be easily shared. an organisation should consider adopting this architecture, or a similar mechanism, if the following are required:

• non-intrusive means of integration
the approach we propose allows for tools to be integrated "as-is", without the requirement for recoding . if it is difficult, or undesirable, to impose a high level standardisation with an organisation then such a non-intrusive development scheme will be useful.

• tool and language interoperability
the system is designed to support a community which uses a diverse mixture of environments , programming languages  and applications  by providing interoperability between both data access and analysis tools.

• flexible and rapid development
the software architecture, we have built, is designed to work within research environments where the needs of the scientists are continually changing. the system can be rapidly adapted to integrate new experiment technologies, analysis mechanisms and data sources.

the i <dig> integration is designed to be "as is", meaning that wrappers  must be implemented for each nonstandard component that is to be integrated. for standardised components generic wrappers have been developed . the proxy systems provide the minimal descriptions of the data sources or analysis tools that are required to ensure a level of integration. for data sources the proxies must be able to map to and from a global identity scheme, so that both the data  can be uniquely referenced and retrieved. analysis tools are made available as soap based web services, with the interfaces they offer and a taxonomy defined description being published on a central registry.

this section firstly introduces the design principles we used when building the system, these were based on experiences in delivering a system that works within a multidisciplinary research organisation. the architecture of the system is then described, with an example use case and a discussion of the shortcomings of the system.

design rationale
the design rationale behind the software architecture, discussed herein, has been driven by the requirements of scientists and the types of data that they generate. the architecture needed to be flexible enough to integrate research data gathered using a varied collection of technologies and platforms, including: microfluidics based cell growth analysis involving both facs and specially built labview controlled 'lab on a chip' platforms; proteomics mass spectrometry results generated via the trans-proteomics pipeline   <cit> , which were generated from over  <dig> different mass spectrometry platforms; genomics data from both microarray expression and chip-chip platforms ; and cellular imaging experiments involving a large number of different microscopy based platforms including confocal microscopy , automated software controlled microscopy environments  and automated machinery .

flexibility is essential as the needs are research driven, so it is rarely possible to foresee the use to which data from these and future technologies will be applied. the results of these technologies have to be made available to a varied user community including: software engineers, who require programmatic access in a variety of different languages; computational biologists, who require that the results be available in a structured format for data mining and integration; and bench scientists who desire direct access to the data through a variety of tools and analyses. therefore, the developed architecture had to be able to support a growing number of different experimental technologies and provide for a means to flexibly deliver the required data and analysis tools to a variety of environments.

to ensure that the architecture would be suitable for our needs, its design was driven by the following axioms:

 <dig>  ad-hoc development must be supported
at the cutting edge of scientific research there is a continual requirement for the introduction of new data sources, data analysis mechanisms, and changes in project focus. these requirements mean that there is minimal regard for formal design and data modelling. to ensure the expediency of software, it is typically continually being produced through rapid development in an isolated and non-formally designed manner . this lack of structured  design is part of a growing global trend  <cit> . this trend is exasperated by the fact that within the scientific community there exists a rich and varied user base, which ranges both in terms of software experience  and the plethora of computing languages they use. this means that it is important to accept that ad-hoc development is the norm, and that scientists are required to work in this manner if they are to carry out their research effectively. to avoid a continuing series of iterations of extensive and expensive reimplementation, strategies must be developed to support such development practices. to support integration tasks requires either: the development of a post hoc integration strategy ; or the provision of a simplified integration mechanisms, which the developers can use conveniently .

 <dig>  documents, not objects, are more useful to scientists
over the last decade, in distributed computing, there has been a shift in philosophy from thinking in terms of the transportation of object graphs towards the retrieval of related documents. the distinction between documents and objects is subtle, albeit important: objects are for programs, whilst documents are for people. an object is by its very essence a "black box" which contains domain and platform specific information. objects must be explicitly translated between languages, and must be serialized  for transmission through an object protocol . documents are open and readable, and so lend themselves more easily towards the social aspects of a distributed system. with a document centric approach the interactions are more natural and flexible: the document can be saved and retrieved from a file system using standard desktop tools; the information can be retrieved through numerous media, for example through a web page or from an email received from a colleague; and documents can be directly browsed and their contents edited. this shift in thinking has been driven by changes in technology, in essence: we now have the desktop computing power required to deal with operations associated with handling and transforming large numbers of documents. the detachment of documents from the underlying storage does present a challenge when supporting collaborative operations, as generally concurrent and transactional control strategies have to be implemented that work within a stateless environment.

 <dig>  scientific enterprises operate better through a bottom-up service oriented, rather than top-down application oriented, architecture
as discussed above, the architectural decisions made for systems biology based research enterprises are driven by the need for functionality and rapid development rather than shared data models and unit tests. the traditional top-down approach to design is rarely used, with a bottom-up approach being prevalent and arguably preferred  <cit> . in the top-down approach models are defined a priori and the designer uses them as the 'lingua franca'. by contrast, in the bottom-up approach models and designs arise out of ad-hoc development and are user driven. to ensure that software can be maintained, and that it is possible to build upon the work of others, a combination of top-down design with bottom-up development practices is often needed . with 'middle-out' systems, top-down models are present, but are not tightly bound to the individual data stores. middle-out solutions generally work through either the use of high levels of abstraction which can be easily used by 'bottom-up' developers , or by allowing for formalised descriptions of data and tools to be decoupled from the implementation .

 <dig>  adoption and adaptation of technologies is better than "reinventing the wheel"
the risk with any research lead computing project is that the novelty  of the software can become more important than the production of innovative functionality required to meet the demands of science. by focusing on innovating through using and extending existing solutions, the best use of the available computing technologies can be made. in the past a number of high profile "omics" integration projects have initially ignored the current mainstream software architecture and standardisation efforts. within a few years these larger projects  have aligned themselves back with the mainstream. an example of such adoption is the migration to standard technologies such as web services and hibernate by later versions of the cacore infrastructure. the reason for this realignment is that these large scale projects have found themselves attempting to implement solutions which are clones of already existing well maintained generic systems. these projects have gone on to innovate, but they have done so by building on top of existing standards and solutions. when building systems it is essential to reuse the best tools from other application areas as this ensures a high return on investment. this high return results directly from not continually developing de novo solutions, which is a waste of resources and funding, and typically leads to a sub standard and non maintained solution. by using and expanding available computing technologies, the community can also gain an understanding as to their limitations and what is required to ensure that they can become more appropriate for research.

these axioms led us to develop the solution described in the next section, which: is based on distributed documents, allows for a high level of interoperability and multiple integration mechanisms; uses third party components, so that there is a high level of standardisation and the development costs are kept low; and does not impose a rigid highly formal software structure, thus allowing the scientists to keep the flexibility they required to undertake research.

distributed architecture
the i <dig> is a modular, service-oriented, research enterprise architecture which is capable of integrating emerging technologies . this enterprise architecture is designed for interoperability and extensibility, and uses the facets of both 'top-down' and 'bottom-up' design . in i <dig> developers can use their own evolving data models . however, formally defined domain specific data models and services  are provided through a number of services and formal definitions.

this architecture is designed to be flexible, interoperable and light weight, while enabling the rapid development of new solutions and integration of new technologies.

the solution discussed in this paper uses two approaches for providing the desired middle-out functionality:

• a central registry is used to define the functionality of distributed data analysis services. the data analysis architecture is based around web services, with an ontology describing the web service being stored in a registry service, so that resources can be reasoned over and discovered at run time. a central registry service is used to store information about a set of individual services, including: data about the functionality of the service; and the group which offers the services. this means that the formal top-down descriptions are detached from the underlying bottom-up services. these descriptions are standardised through the use of a taxonomy, which describes the analysis methods and the data that the registered services provide. this "separation of concerns" means that the services can be written easily and the definitions can be updated independently of the individual services. such approaches do have limitations in terms of complexity of data/algorithms that can be described, and do require good coordination to function. a number of alternative specifications which follow this pattern have been proposed  <cit> .

• a unifying identity based system is used for data access. the data access uses urns, which are encoded as life science identifiers   <cit> , to provide an identity system for mapping data items to each other and to their rdf defined metadata . this strong unifying identity system is used to link low level data-oriented bottom-up services into a structured top-down infrastructure. the lsid identity system has the advantage of being namespace based, so allowing for the integration of a number of independent identity schemes. with a unified identity scheme each item can be referenced, and so structure can be imposed through the use of either: additional services ; the use of a project system ; or through the association of metadata as structured information . a number of alternative id schemes are also available .

alternative middle-out solutions are becoming available. in particular, the semantic web  provides a means to develop middle-out solutions, with each service being closely coupled with a formalised description. the semantic web offers a range of technologies which are useful , although this work is still ongoing. the advantage of the web  <dig>  approach is that data and semantics can be served out using the same mechanism.

the i <dig> does not directly impose a structured data model on clients, the system uses a standardised id mechanism coupled with the use of 'meta models' and service ontologies. this means that to integrate new data sources "proxy components" must be constructed which can provide mappings between underlying domain specific identities and the universal identity system. in this way, all data items  are uniquely identifiable and can be directly retrievable. to ensure a high level of interoperability, the integrated tools are made available through soap based web services. all the tools and data sources are registered with a central registry system, so that they can be discovered at runtime.

the key features of the system are:

• interoperable
the system is designed to be interoperable between the target programming environments . interoperability tests were developed for each of these languages, and the services within the system adhere to a subset of the wsdl <dig>  document/literal standard. these provide a collection of standards for making remote method calls to retrieve and analyse information. in brief, the salient web service related technologies are: soap which provides the means for transporting documents to and from a web service; the wsdl which defines the interface for the web service; and the uddi registry which stores information about the location and features of the web service. these technologies have undergone a number of evolutions, and with the adoption of the ws-i basic profile there is now true interoperability between web services. the use of standard literal documents coupled with a well defined interface  means that clients and servers from the major languages can now interoperate in a stateless manner. the ws-* standards are a move towards a level of interoperability which will provide the features that are necessary to support a true enterprise application. by providing a high level of interoperability, researchers can develop algorithms in the way they prefer.

• rapid application development
an identified problem with soas is that their lack of formalisation means that their adoption within an organisation is problematic. the problems that arise are due to the fact that people can use the services without having to integrate their code. this means that widespread adoption of the architecture requires political persuasion, as well as technical argument. to encourage adoption rapid application development  is needed. rad requires both rapid integration of services by clients and rapid deployment of services into the architecture. the architecture supports rapid deployment of services by: the use of 3rd party code for the generation of lsid services and development of java based web services from skeleton code ; and the rapid development of r-based web services . rapid integration for the client is supported as developers only need to know how to access their data  and are not required to adhere to a pre-specified object model.

• non-intrusive
the system is designed to be non-intrusive, so that different groups can use their own object models and data formats. as there is no overriding object model, developers can integrate with the architecture in a post-hoc manner. fundamental to such non-intrusive development is the use of a hierarchical identity system, which can be used in the 'bottom-up' style of soas that arise within the research enterprise. by using such an identity system, each group can develop their own sets of identity assignment and resolution services, which can be integrated with external resources. we have used the hierarchical naming system lsids, which provide a unique id system based on urns, where a unique identifier is sent to a server which dynamically resolves it to a data document and metadata. the metadata is encoded as resource description framework  documents. as the identifiers themselves are resolved, the client can always drill down to the experiment information without having to conform to a specific object model or data format.

• extensibility and maintenance
wherever possible we have used common data and computing standards. this means that we benefit from using the best of 3rd party applications . such use of 3rd party tools means that both the development and maintenance costs are considerably less than with de novo development. the system is designed to be dynamically extensible, so that new services can be integrated using standard protocols and tools.

• dynamic discovery
central to the system is a registry service, which can be reasoned over to discover the required service at run time. while semantic web technologies are not yet mainstream, aspects of their behaviour can still be used within any distributed environment. we have defined ontologies to describe both the data and the services that produce them. the service ontology is three-faceted, and describes different aspects of the services: an administrative ontology is used to define behaviour associated with maintenance and versioning of the service; a functional ontology is used to provide a high level description of the group who control the service and the function to which it is applied; and a descriptive ontology allows for the development of textual tags. the service description is stored in the registry, so that it is detached from the service itself.

we have used i <dig> to support a number of active research areas at the isb, including genomics, microfluidics and imaging. an illustrative scientific application which has been built using this architecture is given in the example high throughput imaging section below. further information about technologies and usage are given on the associated web site  <cit> .

example: high throughput imaging
we have applied the infrastructure in a number of core areas at the isb. in particular we have used the system to develop: high throughput technology data repositories  and distributed analysis systems .

an area where we have applied i <dig> is in the development of software for the automatic analysis of high throughput cellular imaging . the imaging system consists of a number of services, each of which is dynamically locatable through our registry service. as these services are designed to be orchestrated externally, they can be reused within other distributed applications. the image data is captured directly from the microscopes and specially built drivers are used to integrate the equipment. access to the image repository service is through a soap publish interface. when the data and associated metadata are published they are passed through an extract-transform-load  system into a data repository. the etl system consists of a staging area and a resource managed state machine. once the experiment information is available in the image repository service it can be browsed and queried using two different mechanisms: a soap/rest based interface is available to provide querying and searching functionality; and an lsid endpoint is available to provide direct retrieval of the data and associated rdf encoded metadata. analysis modules are written against these query interfaces, and are run from within a specially built analysis service . the system has been designed to scale to the level of throughput required by the current generation of cell population based imaging experiments.

by integrating the repository with i <dig> we are able to provide interoperable access and retrieval of the imaging information. such integration involved the development of a data access component and the development of web services for publishing and querying. explicitly development of the data access system required:

• document demarcation
the granularity of the information that is to be served out, and the relationships between these items, must be specified. in this case the documents mirror the internal repository structure, which in turn mirrors the ome  <cit>  specification: project documents describe a project  and provides urns for related experiments; experiments describe the conditions and equipment for individual microscopy runs, and provides urns for the captured images; and image  documents describe the individual images, including extracted features and image characteristics.

• define the rdf metadata
the metadata associated with each data item must be formalised. we use dublin core for describing relationships and basic document parts. domain specific ontologies are used to describe specific types of experimental metadata.

• build the endpoint
the lsid specification allows for ftp, http and soap endpoints. in this instance a soap endpoint was used. this endpoint was constructed using the freeware lsid stack. alternatively the endpoint can be constructed against the standardised wsdl and deployed under apache tomcat.

• registration
the namespace for the image repository, and the endpoint it should resolve to, were then registered with the isb central authority.

image analysis was undertaken utilising genepattern, and so a query and publish interface were developed to allow for individual analysis pipelines to pull information from the repository, and for uploading of information. to ensure the interoperability and integration with other tools these were implemented as web services by:

• publishing and query interface definition
the wsdls were developed following a specific subset of the document/literal wsdl  <dig>  specification. this was done to ensure interoperability with our main client platforms. the services themselves were built using apache axis, and deployed under apache tomcat.

• registration
the services were registered with the central service registry, so that they could dynamically discovered this involved adding information about the endpoints, administrative information , and information about the type of data/area within which the services function.

shortcomings of i3
all middle-out solutions have limitations, as they attempt to overlay structure on ad-hoc and unstructured services. generally middle-out solutions sacrifice richness of functionality to provide flexible systems. the requirement for interoperability and the reliance on standardised solutions result in a number of disadvantages with the adoption of the architecture discussed in this paper. the major drawbacks to such a loosely coupled middle-out solution are:

• it is stateless
the main mechanisms for associating state information, through external service or use of a current thread mapping system, are not applicable to the protocol independent document based interoperability mechanism used within our system. as the method calls are inherently stateless, custom engineering or a stateful specification  are required to introduce state within the system. with the convergence of the relevant standard implementations  this problem can be addressed, although true interoperability will require further maturation of this family of technologies.

• security is single logon
the system relies on the underlying protocol to provide security , which means that fine level security based on an access control list , or similar, is not available. as with state behaviour, there are a number of standards that will provide this functionality in the future, but no truly interoperable implementations are currently available.

• concurrency and transactional behaviour are not supported
there is no simple mechanism to support resource locking or leasing. this lack of distributed transaction  behaviour will cause problems with multi-step analyses, typically through the occurrence of lost updates. again, while this problem arises due to the lack of current thread identity or explicit token transference, there are solutions based on either custom engineering or arising standards efforts.

• not process oriented
top-down defined behaviour, typically in the form of workflows, is an essential part of scientific analysis. such process-oriented architectures generally require top-down design, as failsafe behaviour is generally essential. while the architecture does not directly support this type of processing, workflow systems could be overlaid on the services to provide process-oriented views . while such scripting will allow for distributed processing, there is still a disadvantage with using the architecture for high demand large scale processing, where the most efficient solution is to move the analysis to the data .

while none of these disadvantages are showstoppers, it is important to recognise that such ad-hoc service oriented architectures have limitations. these limitations can be overcome, but they require custom engineering which is strongly dependent on the individual enterprise.

discussion
it is no surprise that the evolution of enterprise software for the life sciences closely follows technological and methodological trends. there is an implicit understanding that there exists a commonality between all enterprise systems, in terms of the underlying design. it is assumed that information and processes are the same no matter what the domain. unfortunately, this perceived commonality is a fallacy when applied to the life sciences. software is only part of the solution and the way in which people work and interact is equally important and cannot always be captured using simplistic requirements gathering methodologies. in complex computing endeavours, the social demands go beyond those usually considered in more traditional "factory software" design and development.

there is no such thing as the quintessential scientific research project, as every one is unique. these differences arise as each investigator and investigation studies the unknown, which means that the rationalization, which is typically needed for the design of expedient software utilities, is missing. however, it is possible to develop a level of rationalization about such studies using abstractions which describe different facets of the data and process . the majority of "off the shelf" scientific information integration systems are generally targeted towards the end results of research, rather than aiding in the progression of scientific understanding. to support the needs of research driven science, architectures need to be provided which can be adapted to new usage and have a low maintenance cost. this flexibility requires working at a level of abstraction that is atypical for most software projects. to build systems which others can readily use we need to focus on the fundamentals of content and identity, rather than solely attempting to model biological entities. fortunately, there are a number of existing technologies which can be used as the foundations for such endeavours .

some of the development effort in a research environment is for one-off applications, while other projects are geared towards more general usage. with general usage software, even if it is well written with good interfaces, the chances of the code surviving much past the end of the research funding is small. the problem is largely one of adoption and usage; unless there is a demand for the code and it can easily be adapted for new usage, it is impractical for other groups to adopt it. this is not a new phenomenon in software engineering  <cit> . that stated, there are areas where general software utilities can be developed and are needed:

• design of cross-cutting services
we recognise that the need for a "systems biology enterprise" is to develop an architecture that provides tools for manipulating data, without necessarily understanding all aspects of the contents. while information is an abstract concept, it is possible to formalise how we deal with it within the enterprise. this formalisation, in a service oriented architecture, takes the form of generic cross-cutting services which can be used in a large number of varied applications. the object management group , and other standards bodies, have outlined the functionality of such services, including: relationship service, which can dynamically provide relations between documents; a synonym service to find documents of terms that identify the same concept; a query service to search through collections; a registry service to host information about other services; and a lexical service to allow for a common ontology to be used across different applications. while implementations of these services exist, few are generic or mature enough to be readily available. we feel that the development and maintenance of such horizontal services will be of benefit to the systems biology community, and so a large proportion of our future work will be in this area.

• development of services to support top-down analysis
there will always be a need for structured top-down formalised analysis of scientific information. to allow for such an analysis, middle-out architectures, which marry the benefits of bottom-up and top-down, are an ideal solution. such middle-out architectures can be achieved through the use of structured documents, as we have used in i <dig>  additionally, the adoption of technologies that will allow for the overlay of top-down functionality on a standardised soa can provide the required functionality. in particular, the business process execution language  and associated graphical tools offer an attractive and low cost mechanism to provide a means for the rapid development of top-down workflows.

• dynamic data resolution systems
dynamic discovery of information is essential in all data driven domains. the use of formalised methods to ensure the resolution of individual data items, and relationships between these data items, is essential. as systems biology is largely data driven, we advocate the adoption of a dynamic hierarchical identity system . a hierarchical identity system allows each group, with an organisation, to use their own namespace and ensures that that no matter what format the data is in, or the delivery systems that is used, it is always possible to resolve back to the original experimental results. we also use structured documents  to describe metadata, these can also be used to capture a wide range of relationship types. the modelling of these relationships typically evolved past the traditional composition , aggregation  and generalisation  relationships towards operational relationships which support a richer semantics based on both our scientific understanding  and the data provenance. any data resolution system will be expected to understand data provenance information including: history information to allow for the discovery of different versions of documents; view information to allow for the discovery of context dependent transformed documents; and query information to allow for the dynamic discovery of related documents. at present there are no readily available implementations of an identity scheme that support all the required functionality.

CONCLUSIONS
the coupling of rapid development  and rapid deployment  means that it is now relatively easy for disparate groups, both within the enterprise or throughout the internet, to share information in an ad hoc manner. this trend is even more apparent at the cutting edge of scientific research in systems biology, where there is a continual requirement for the introduction of new data sources, data analysis mechanisms, and changes in project focus, which means that formal design and data modelling are minimal. within the scientific community there exists a rich and varied user base, some develop software and some require a reliable analysis system. the development community ranges both in terms of software experience and the languages they use. this paper perpetuates the view that the successful development of an architecture to support such research requires a different strategy to that of mainstream enterprise systems. the adoption of grid systems or service oriented architectures are only a first step towards the next generation of enterprise systems that will be of use to the scientific community. we feel that due to the rapidly evolving requirements of biological research, when compared to that of rigorous software development, the next generation of software architectures will be required to support bottom-up integration. this means that architectures will have to work at a higher level of abstraction, so that they can be used to integrate data and tools without the need for costly reimplementation. the core of such integration will be operations using a rich identity driven data system coupled with domain specific descriptions.

the development of integration strategies for systems biology is problematic due to both the nature of science and the organisation of scientists. it is typical that the means to which a specific technology will be used, and the methods used to analyse the resulting data, is unknown at software design time. scientific understanding evolves, and so too does the work that is undertaken. a software architecture that is designed to aid in such endeavours has to be designed to support such evolution, meaning that traditional approaches to development can rarely be applied. as we do not know how the data will be used or analysed, a flexible solution, like the one discussed in this paper, is needed. in the future, we can expect a growth in the requirement for such unstructured development. thus, the supporting integration systems will need to provide for the flexible post-hoc integration of black box components as a fundamental design principle.

availability
related downloads and documentation can be found at the isb informatics group page: 

abbreviations
bpel. the business process execution language is a specification designed to support the high level orchestration of web services. the heart of the bpel specification is the scripting language which defines how services and data produced by them are linked together. this specification is rich enough to allow for most workflows and defines both how method invocations and data are linked and the how web services should be coordinated . the specification also defines extensions to the wsdl which can be used to specify links between services . a number of implementations are available, including those that run under jboss  <cit>  and ode from apache  <cit> . information about the specification can be found at oasis.

corba. the common object request broker architecture supports interoperability between distributed processes . central to the architecture is an orb  which both marshals data and controls compartmentalisation  of between the different processes. the specification was defined by the omg, and orbs are available for most platforms.

das. the distributed annotation system  <cit>  defines a protocol for the retrieval of annotations from genomes. requests are sent using http encoding which returns an xml document. a number of clients and servers are available, and it is used in a number of large scale genome projects .

dbms. a database management system is the environment in which database instances exists. a dbms provides a unified framework which can be used to control the physical , conceptual  and external  of databases.

dcom. provides for a means to make distributed calls between com  objects. thread compartmentalisation and marshalling  is handled automatically. for application developers this has largely been superseded by .net remoting.

ejb. an enterprise java bean  is a server side component that lives inside an ejb container. there are different types of ejbs, and each has a different purpose: an entity bean which serves as a data cache from an underlying data store, this is used for transformation and data integration logic; a session bean which is typically used to hold application logic which communicates with information stored within entity beans; a stateless session bean which typically represent simple stateless logic and generally act as end points for high level services; and a message bean which is used to pass message between the other beans. the ejb  <dig>  standard  represented a major change as the complexities of developing ejbs was inhibitive for most projects, so a simplified process of building ejbs was outlined . full details are available from sun  <cit> .

ejb container. the ejb container controls the life cycle of the bean, facilitates access to core services and manages server-based resources. the services that are available through a ejb container provide: security management, including method level and acl; transaction management; including  <dig> phase/distributed commits; life cycle management, including pooling of bean instances and swapping beans in/out  of memory for resource management; naming/directory management, typically through jndi; persistence management; using orm tools such as hibernate; remote access management, so that the bean can be accessed via rmi-iiop/corba and web services; and a number of utility services . a widely used, and free, container is jboss  <cit> .

i3c. the i3c was a short lived commercially led organisation established to standardise aspects of life science informatics. the organisation was led by oracle, sun and ibm. the i3c did promote the use of lsids, which have been adopted by the omg.

idl. the interface definition language formalises the remote interfaces that can be accessed through corba. idl has evolved considerably, with the advent of pass-by-value and components . a wsdl serves the same type of purpose for web services.

jcr. the java content repository is a specific java standard  for defining the interface to a content repository. a content repository is a flexible system that is typically customised for a specific usage, when customised it is referred to as a content management system . a number of implementations are available, including jackrabbit which is licensed through apache  <cit> .

lsid. the life science identifier standard  <cit>  provides a concrete definition and implementation of a urn. the lsid specification outlines how the urn is resolved to two locations  through the use of "an authority". in this way the authority acts as a registry. the documents that are retrieved are returned as objects and an associated rdf data file which encodes the metadata. the standard also encompasses many aspects of using urns, and includes specifications for associated services . details about the specification and implementations are available  <cit> .

lsr. the life science research group of the omg  <cit>  defines standard in the "vertical" life science domain. the body have defined and adopted a number of standards. these standards cover a wide range of areas .

mda. a model driven architecture is one where the model underlying the system is defined in a language independent way, and the corresponding services/classes are automatically pushed out from that model. typically the model is defined in uml and them xmi is used to automatically generate stubs/skeletons which can be used to provide implementations of the model.

midl. the microsoft interface definition language serves a similar purpose to idl, but is generally based on specifying the remote procedure call interface which is used between com components.

.net remoting. the .net framework provides a mechanism for making remote calls called remoting. remoting includes many useful features for the development of distributed systems, these include: life cycle management, so that distributed behaviour/gc and leasing can be controlled; protocol support for binary socket based communication and other streams; and specification of the behaviour of a remote service/object .

odbc/oledb. the open database base connectivity is a definition of the interface presented by a dbms. the odbc specification is well established and bridges with other technologies . the oledb is an extension to the odbc offer richer functionality.

omg. the object management group  <cit>  is an open not for profit standardisation body. the omg have produced a number of horizontal  and vertical  standards for use with corba.

owl. the web ontology language is an rdf description of an underlying data resource. the ontology describes the data items produced through a web service as well as the relationships between them. details are available from the w3c  <cit> .

rdf. the resource description framework is a w3c  standard for describing resources available on the web. rdf forms the basis of formalised descriptions of services  and can be used in conjunction with extensible metadata descriptions . rdf consists of a series of connected triples, so that complex representations can be constructed as a graph. details are available from the w3c  <cit> .

rest. representational state transfer   <cit>  can be considered an alternative to soap, although it is considerably easier to implement. rest uses pre-existing technologies as the basis for the protocol . there exists some confusion about what represents a restful service, rather than just an http encoded request for an xml document. true rest is based upon the verb/noun/type based calls, where you apply an operation  to a uri  with a certain view .

rmi. remote method innovation is a java-to-java solution for communication between distributed java threads/applications. rmi uses a number of abstraction layers , this has a number of advantages including the fact that different underlying protocols can be used to actually provide the communication . marshalling is done through serialization, leasing is available, and distributed gc is supported. rmi is a convenient, but not interoperable, protocol.

soa. a service oriented architecture is one which consists of loosely coupled federated services. there is typically little linkage between these services, and they are generally discovered dynamically using a registry system or similar. soas have grown in popularity within many enterprises, as they provide a practical mechanism for disparate groups to share information/processes.

soap. soap is a protocol for making requests on remote services to return structured data. it is designed to use a any high level protocol that supports the sending of information, and is primarily used with http. much like corba, interoperability is the big draw of soap, and  soap has the advantage of being simple to develop and test. the original stateless nature of soap limited it usage, however with the advent of ws-rf  soap is maturing into a general purpose object protocol. more information about soap specifications is available from the w3c  <cit> .

sparql. the sparql protocol and rdf query language is designed to allow for the querying and retrieval of documents across multiple unstructured data stores. the power of the system is the distributed rdf documents  remain unchanged, but queries can be run across them – and so it fits well with a "bottom-up" approach. such a unified approach to accessing information is required to make the semantic web  a reality, and there do already exist some implementations . more information about the query specification is available from the w3c  <cit> .

uddi. universal description discovery and integration is a wsdl  defined registry/dictionary system. uddi  <dig>  is the currently used version, and it supports the registration and querying of web services using specific mappings. oasis  <cit>  have details of the different standards , and apache have juddi which is a  <dig>  implementation  <cit> .

urn. a uniform resource name is a type of uri . it is the logical counterpart to a url, in that it provides the name of a resource rather than the exact location of a resource. a number of urn implementations are available, including lsids.

web services. a web service is a server which performs request/response operations and  works using documents. a request is sent , and a well formed document is returned. the term web service originates from the fact the web based protocols are generally used to provide the communications.

ws-*. the ws-* are a series of specifications for adding functionality to soap. these extensions provide new functionality such as security, messaging, binary object attachment and state. these extensions generally involve the addition of information to the soap message . state information can be maintained between soap calls through the use of resource frameworks . oasis  <cit>  keep a large number of specifications.

wsdl. the web service description language provides a means to specify the interface exposed by a soap web service. the wsdl document can be automatically retrieved, and tools can be use to generate convenience classes for specific languages, so that no xml parsing code needs to be written by the developer. when writing a wsdl a number of standards  are available to ensure interoperability, typically though the use of profiles with literal/document "styles". the w3c have details of the standard  <cit> .

authors' contributions
jb designed the system, managed the development team, and drafted the manuscript. sk worked on the high throughput imaging system, worked on key services and contributed to the manuscript. cc contributed to the manuscript, provided implementations, and standardised the metadata for the services. is instigated and guided the project. all authors read and approved the manuscript.

