BACKGROUND
the increasing availability of biological sequences, from proteins to entire genomes, poses the need for the automatic analysis and classification of such a huge collection of data. alignment methods and pattern discovery techniques have been used, for quite some time, to attach various problems emerging in the field of computational biology. unfortunately most of these methods do not scale well with the lengths of the biological sequences under examination and therefore they are unpractical for genome-wide applications. to overcome this recent obstacle a number of techniques, which do not relay on alignment, have been conceived; these methods are also called alignment-free methods . although several alignment methods have been proposed over the years, the development of tools to classify and digest entire genome sequences is still in its infancy.

in this paper we address the classification and analysis of biological sequences without resorting to alignment. we present a method for the classification of protein sequences by means of irredundant patterns. our method achieves results as good as the current state-of-the-art methods. we show also that the most discriminative irredundant patterns, which are used to distinguish different protein families, provide valuable information on the consensus pattern shared by a particular protein family.

related works
the protein classification problem can also be treated as a string classification problem. historically this problem has been studied in the field of text documents classification. unfortunately most of these approaches, developed for a different kind of strings, fail when applied to biological sequences. the main reasons of this failure are the different nature of biological sequences, particularly rich of regularities known as patterns, and because of their lengths difficult to digest for a general purpose application.

thus a number of methods have been studied for protein classification based on primary structure. the main distinction is between generative methods against discriminative methods. the former class includes methods such as protein family profiles  <cit> , hidden markov models   <cit> , and psi-blast  <cit> . these methods try to derive a model for a set of proteins and then check whether a candidate protein fits the model or not. unlike generative methods, discriminative methods such as  <cit>  are supervised approaches focused on finding which sequences  can describe a set of proteins despite of another set. this class makes extensive use of support vector machines  based on features of proteins.

recent results  <cit>  suggest that the best-performing methods are discriminative string algorithms, sometimes called string kernels. the string-based learning algorithm extracts information from the sequences and computes either a feature vector for each sequence or directly a matrix with scores between pairs of sequences. then sequences are seen as a set of labeled examples  and an svm attempts to learn a decision boundary between the different classes. the first string kernel, called fisher kernel  <cit> , uses an hmm to provide the necessary means of converting proteins into fixed-length vectors. the vector summarizes how different the given sequence is from a typical member of the given protein family. in contrast in the pairwise method  <cit>  the feature vector, corresponding to a protein, is formed by all the e-values of the smith-waterman score  between the sequence analyzed and each of the training sequences. other methods, like spectrum and mismatch  <cit> , use as protein features the set of all possible substrings of amino acids of fixed length k . if two sequences contain many of the same k-mers, their inner product under the k-spectrum kernel will be large. equivalently, the mismatch kernel computes a large inner product between two sequences if these sequences contain many k-mers that differ by at most m mismatches. then, the svm-i-sites method  <cit>  encodes into feature vectors the protein's three-dimensional structure, instead of using sequence similarity; conversely the emotif database method  <cit>  defines the kernel in terms of the sequence motifs that appear in a pair of sequences. these motifs were previously extracted from the eblocks database using the emotif-maker algorithm that derives patterns from sequence alignments  <cit> .

more recently, the local alignment method  <cit>  mimics the behavior of the smith-waterman score to build a family of valid kernels. following the work of  <cit>  they defined a kernel to detect all local alignment between strings by convolving simpler kernels, and hence comparing, in a simple way, strings of different lengths which share common parts. the profile-based mismatch method  <cit>  uses probabilistic profiles, such as those produced by the psi-blast algorithm, to define a kernel established on the position-dependent mutation neighborhoods for inexact matching of k-mers in the data . whereas in the profile-based direct method  <cit>  kernel functions are constructed by combining sequence profiles with different approaches for determining the similarity between pairs of protein sequences. however, this kernel makes an extensive use of hyperparameters that increases the risk of overfitting when no dedicated validation data set is used. finally, in the word correlation matrices method  <cit>  the kernel is defined by average pairwise k-mer  similarity between two sequences . the consequent analysis of discriminative words allows also the identification of characteristic regions in biological sequences.

in general, all pattern-based methods operate, directly or indirectly, two distinct steps: first extract patterns from sequences, then use this set of patterns as features for an automatic classification tool, e.g. svms.

remarkably almost all string algorithms consider patterns that are not independent, and therefore the associated scores are obtained using a set of redundant features. in this paper we want to stress the idea that if the learning process has to deal with a set of redundant features, the resulting score is overcounting, a multiple number of times, the contribution of patterns that cover the same region of a sequence. our conjecture is that the overcounting, due to redundant patterns, might mislead the classification. in the case of pattern-based method we can define if two patterns are independent through the resort of the notion of irredundancy. the class of irredundant patterns is specifically designed to address this issue and it was previously studied in a number of papers  <cit> . in  <cit>  we applied a similar technique for the detection of transcription factor binding sites and we showed that the use of irredundancy is useful since redundant patterns can be filtered out without leading to overcounts.

in the next sections we will show that most approaches are using patterns, of various forms, that are redundant. we suppose that a set of irredundant patterns, and consequently a set of independent features, can improve the automatic learning and classification of sequences. here we present a novel discriminative pairwise method for the classification of protein sequences, called irredundant class. irredundant class is based on the statistics of irredundant patterns between two sequences, combined with the discriminative power of svms. we selected for comparison some of the string-based learning approaches presented above, including the best-performing methods in the protein classification and remote homology detection  <cit> . our method outperforms most of the previous approaches, and it achieves results as good as current state-of-the-art methods. moreover, given a protein family, we study the set of most discriminative irredundant patterns and their distribution. we found that the location of the functional consensus pattern for a family, as reported by prosite  <cit> , can be identified by the irredundant patterns footprint.

methods
irredundant class
our method is based on the extraction of irredundant patterns that are common to two sequences. we use the idea of irredundant patterns, to avoid overcounting of patterns that cover the same region multiple times on a sequence. in this section we present the class of irredundant patterns, along with some properties.

recently the notion of irredundancy was studied for the case of a single sequence  <cit> , in this paper we extend the notion of irredundancy to the case of two sequences. in particular, our approach is substantially inspired by  <cit> , and we refer the reader for a more comprehensive treatment on the original notion. to keep the paper self-contained, we report here the basic concepts, although most of them are only slightly adapted.

let s = σ1σ <dig> ... σn be a sequence of length |s| = n over an alphabet Σ. a character from Σ, say σ, is called a solid character, while a "don't care" character '.' represents any character. a pattern is a string over Σ·*·Σ, thus containing at least two solid characters. for instance, p = d.dg.g.i...e is a pattern that occurs at locations  <dig> and  <dig> in the sequence s = dadgggdistketvdedgsgtidfee.

to give an idea of the notion of irredundancy applied to two sequences s <dig> and s <dig>  let us consider s <dig> = abababab and s <dig> = babababa, and the two patterns p <dig> = abababa and p <dig> = ababa that are contained in both the sequences. we can note that the existence of p <dig> in both s <dig> and s <dig> affects the existence of p <dig> in all locations in which p <dig> appears. by simply deleting the last ba from p <dig> or right shifting twice p <dig> along p <dig> we can obtain p <dig>  loosely speaking the two patterns p <dig> and p <dig> are not independent, or equivalently they are not irredundant. intuitively, a pattern is irredundant if it cannot be deduced, along with its location list, by some other patterns. consequently any redundant pattern can be derived from the set of all irredundant patterns without knowing the original sequences, thus it is not informative. we want to discard all redundant common patterns as non-informative for the learning process.

definition  <dig>   let s 1and s <dig> be two sequences on Σ. a string p on Σ ∪ {.} is a common pattern with location list ℒp =  if all of the following hold.  |p| ≥  <dig>   p <cit> , p ∈ Σ,  p occurs both on s <dig> and s <dig>  and  there exists no location l ∉ ℒp such that p occurs at l either on s <dig> or s <dig> .

clearly, in the two sequences context, a common pattern occurs at least twice, one per sequence. extending the notation of location list we can then denote by ,  <dig> ≤ i ≤ |p| -  <dig>  all the locations in ℒp shifted to the right by i positions.

definition  <dig>   for characters σ <dig> and σ <dig> we write that σ <dig> ≼ σ <dig> if and only if σ <dig> is a don't care or σ <dig> = σ <dig>  given two patterns p <dig> and p <dig>  with |p1| ≤ |p2|, p <dig> ≼ p <dig> holds if p1|j| ≼ p <dig> for all  <dig> ≤ j ≤ |p1|, with  <dig> ≤ d ≤ |p2| - |p1|.

we also say in this case that p <dig> is a subpattern of p <dig> , and that p <dig> implies or extends p <dig> 

definition  <dig>   given two patterns p <dig> and p <dig> we say that the occurrence at j of p <dig> is covered by p <dig>  if p <dig> ≼ p <dig> and j ∈  for an integer  <dig> ≤ i ≤ |p1| - |p2|.

for instance, the pattern p <dig> = ababa with location list  over s <dig> = abababab and s <dig> = babababa, where  denotes the occurrence at location j in the sequence sh, is covered at position  by p <dig> = abababa with  and i =  <dig>  note that  because p <dig> is a subpattern of p <dig> obtained by deleting the last ba from p <dig> , and that  because p <dig> occurs at location  <dig> in p <dig>  another example with don't cares is the following, p <dig> = a.a.a with  over s <dig> = aabababab and s <dig> = babacacac is covered at all the positions by p <dig> = aba.a.a with .

remark  <dig>  let s <dig> and s <dig> be two sequences, and p <dig> and p <dig> be two common patterns with p <dig> ≼ p <dig>  then, by definition p <dig> must cover at least an occurrence of p <dig> per sequence.

definition  <dig>   let be the set of common patterns of the sequences s <dig> and s <dig>  a pattern is maximal in composition if and only if there exists no , l ≠ i, with pi ≼ pl and . a pattern pi maximal in composition is also maximal in length if and only if there exists no pattern , j ≠ i, such that pi ≼ pj and . a maximal common pattern is a pattern that is maximal both in composition and length.

requiring maximality in composition and length limits the number of common patterns that may be usefully extracted and accounted for in two sequences. however, the notion of maximality alone does not suffice to bound the number of such patterns. it can be shown that there are sequences that have an unusually large number of maximal common patterns without conveying extra information about the input. a maximal common pattern p is irredundant if p and the list ℒp of its occurrences cannot be deduced by the union of a number of lists of subpatterns of other maximal common patterns. conversely, we call a common pattern p redundant if p  can be deduced from the other common patterns without knowing the input sequences. more formally:

definition  <dig>   a maximal common pattern p, with location list ℒp, is redundant if there exist maximal common subpatterns pi,  <dig> ≤ i ≤k, such that . a maximal common pattern that is not redundant is called irredundant common pattern.

since the redundant common patterns bring no extra information about the two sequences, the set of independent patterns is precisely the class of irredundant common patterns. for instance, we consider the sequences s <dig> = abababab and s <dig> = babababa of length  <dig>  then the list of all irredundant common patterns is the following. p <dig> = abababa with , p <dig> = bababab with . the other redundant maximal common patterns are. p <dig> = ababab with , p <dig> = bababa with , p <dig> = ababa with , p <dig> = babab with , p <dig> = abab with , p <dig> = baba with , p <dig> = aba with , p <dig> = bab with , p <dig> = ab with , p <dig> = ba with .

it is easy to check that p <dig> and p <dig> cannot be deduced by other common patterns, whereas p <dig> along with its location list can be simply deduced by p <dig>  and p <dig> can be derived from the union of the occurrence lists of some subpatterns of p <dig> and p <dig>  we want to emphasize that if the two sequences are identical there is only one irredundant common pattern, the sequence itself. this difference with the single sequence approach is due to a peculiarity of the original notion, in which the sequence itself is not considered as a valid pattern.

definition  <dig>   the consensus of two sequences s <dig> and s <dig> is obtained by matching the characters corresponding to the same positions of the sequences, and inserting a don't care in case of mismatch. deleting all leading and trailing don't cares from the consensus yields the meet of s <dig> and s <dig> 

for instance, the consensus of the sequences aaaaab and baaaaa is .aaaa., while their meet is aaaa. note that a meet is a common pattern between two sequences.

let now s = σ1σ <dig> ... σn be a sequence of n characters over an alphabet Σ. we use  to denote the suffix σjσj+ <dig> .. σnof s; s the sequence where the location j appears; and  the location list of p on s. clearly ; and j ∈ ℒpif and only if .

in the following we will briefly present the most important properties of the irredundant common patterns. those properties are specular with respect to the single sequence approach, as in  <cit> .

lemma  <dig>  let p be a common pattern on s <dig> and s <dig>  then, p is irredundant if and only if there exists such that the meet of sand is p for all , where sh is the other sequence with respect to s.

proof. we can prove this lemma using the lemmas  <dig> and  <dig> described in  <cit> . they prove that a pattern p' is irredundant, relatively to the approach with a single sequence s, if and only if there exists an occurrence j' of p' in s such that the meet of s and  is p' for all k' in . following this work, we have that a pattern p' is irredundant if and only if at least one of its occurrences in s is not covered by other patterns. similarly a common pattern p is irredundant, in the two sequences approach, if and only if it has at least an occurrence j in s <dig>  or in s <dig>  that is not covered by other maximal common patterns. now assume, w.l.o.g., that j ∈ s <dig>  and therefore sh is s <dig>  to make the statement of the lemma valid we have to examine the case in which a common pattern p'' covers together the occurrence j of p in s <dig> and another occurrence l of p in s <dig> . note that p'' covers some occurrences of p if p ≼ p"; hence, by definition, p" must cover also an occurrence of p in s <dig> . this contradicts the assumptions in which we have to obtain p whenever we intersect the sequences in correspondence of two particular occurrences of p: j in s <dig> and a  in s <dig> 

by the previous facts and the proofs in  <cit> , we can conclude that an irredundant common pattern must have at least an occurrence j in one of the two sequences such that the second part of the lemma holds, and vice versa.   □

to clarify the meaning of this lemma, we refer the reader to the general example that follows the algorithm.

theorem  <dig>  every irredundant common pattern over two sequences s <dig> and s <dig> is the meet of a sequence and a suffix of another one.

proof. from lemma  <dig>  an irredundant common pattern p  must appear at least in the meet of a sequence and a suffix of the other one.   □

an immediate consequence of theorem  <dig> is a linear bound for the cardinality of the set of irredundant common patterns. thus

theorem  <dig>  the number of irredundant common patterns over two sequences s <dig> and s <dig> of length, respectively, m and n is o.

proof. from theorem  <dig> we have at most m + n -  <dig> irredundant common patterns, and so o.   □

with its underlying convolutory structure, lemma  <dig> suggests an immediate way for the extraction of irredundant common patterns from sequences and arrays, using available pattern matching with or without fft  <cit> .

the algorithm
the discovery of all irredundant common patterns over two sequences s <dig> and s <dig> is derived from lemma  <dig>  in this context we are interested in a proof of concept, because the aim is to verify the effectiveness of our method in the classification of protein sequences. the algorithm complexity is dominated by the most computationally intensive operation, step , which is the global searching of all occurrences of patterns in the sequences. we implemented this step by means of a naive string searching algorithm with don't cares that accounts for o3) time, where m and n are the sizes of s <dig> and s <dig>  the complete description of the algorithm follows.

input: two sequences s <dig> and s <dig>  where |s1| = m and |s2| = n.

output: the set of all irredundant common patterns over s <dig> and s <dig> 

 <dig>  compute the m + n - <dig> meets between s <dig> or s <dig> and a suffix of the other sequence; then discard patterns of length <  <dig> 

 <dig>  for each meet p:

 for each occurrence j found in the previous step, called exposed occurrence, increment a counter, i <dig> or i <dig>  depending on the sequence in which j appears;

 perform a string search over s <dig> and s <dig> to find the number of occurrences of p in s <dig> and s <dig>  called respectively q <dig> and q2;

 check if the meet p is irredundant  by finding at least an exposed occurrence j of p in s that has a counter value equal to the number of occurrences of p in the other sequence ). equivalently, find if there exists an occurrence j in s <dig> such that i <dig> = q <dig> or an occurrence j in s <dig> such that i <dig> = q <dig> 

example. consider the sequences s <dig> = aabababab and s <dig> = babacacac of length  <dig>  one of the meets computed by the algorithm is the meet of  and  that is equivalent to compute the meet of  and . finally, it can be expressed as the meet of s <dig> and , which is actually p = a.a.a .

                              a
                              a
                              a
meet between s <dig> and  with sequences s <dig> = aabababab and s <dig> = babacacac of length  <dig> 

the only exposed occurrences of the pattern p are  and   thus i <dig>  <cit>  =  <dig> and i <dig>  <cit>  =  <dig>  accordingly table  <dig> shows the counters, i <dig> and i <dig>  of p for each position of s <dig> and s <dig> 

counters i <dig> and i <dig> of the pattern p = a.a.a  for each position of s <dig> and s <dig> with sequences s <dig> = aabababab and s <dig> = babacacac of length  <dig> 

we note that  and that . then step  performs a string search of p over s <dig> and s <dig>  we obtain that  is  with cardinality q <dig> =  <dig>  and that  is  with cardinality q <dig> =  <dig>  since z <dig> <q <dig> and z <dig> <q <dig> we can conclude by lemma  <dig> that p is redundant.

scoring irredundant patterns
first of all we have to empirically motivate our choice for irredundant patterns rather than considering all maximal patterns. table  <dig> shows the number of irredundant against maximal common patterns for  <dig> pairs of protein sequences used in the final experiments. results indicate that the number of irredundant patterns tends to be an order of magnitude lower than maximal patterns for not-so-short sequences, and that the latter can be exponential in the size of sequences; thus we avoid the overcount of many sequence regions. moreover maximal patterns can be prohibitive to extract for some long sequences. whereas we have already proved that the number of irredundant patterns is at most linear in the size of sequences. once a set  of irredundant common patterns over two protein sequences s <dig> and s <dig> is acquired, we compute a scoring function based on the frequency of patterns and on the properties of amino acid compositions. here we report the general form of the scoring function:  

                              s
                              1
                              s
                              2
number of irredundant and maximal common patterns over  <dig> pairs of protein sequences taken from experiments in table  <dig>  rows are sorted according to the percentage of irredundants over the total number of maximal patterns.

where fp is defined as the number of occurrences of the pattern p in s <dig> and s <dig>  and e is the expected value of fp. to compute the expected value of fp we assume that the sequences are drawn from an i.i.d. process. the probability of a pattern p is simply the product of the probabilities of its symbols ai ∈ p. if ai is a solid character we compute its probability using the blosum <dig> substitution matrix  <cit> ; whereas the probability of a don't care is fixed to  <dig>  since we have assumed that the sequences come from an i.i.d. process, the expected number of occurrences of the pattern p in s <dig> and s <dig> is:  

where m, n, and |p| are, respectively, the lengths of the two sequences and the pattern p. given a set of n sequences the input for the svm learning process is the matrix of scores, i.e. score with  <dig> ≤ i, j ≤ n. the result of this process is a learning distance function that can be treated as an indefinite kernel. when applying svms with this kernel, we therefore have to resort to one of the workarounds discussed in  <cit> . in particular, in case of weak non-positivity of the learning function, we force the optimizer to stop after a maximum number of iterations. despite these manageable problems, we successfully applied the matrix of scores as a kernel matrix in svms, and we retain for future work the task of bridging the gap in the non-positivity of the learning function.

RESULTS
we assessed the effectiveness of our method on the classification of protein families into superfamilies. recent works were compared against the dataset presented in  <cit> . this dataset is based on the structural classification of proteins  version  <dig> , removing similar sequences with an e-value threshold of 10- <dig>  the data consist of  <dig> sequences grouped into  <dig> families and  <dig> superfamilies selected by liao and noble. for each family, proteins within the family are considered positive test examples, and proteins within the superfamily but outside the family are considered positive training examples; negative examples are chosen outside the fold, and were randomly split into training and test sets in the same ratio as the positive examples. therefore this assessment consists of  <dig> experiments, each corresponding to a target family having at least  <dig> positive training examples and  <dig> positive test examples, and no sequence homologies known a priori. in these experiments there is usually an unbalanced number of negative sequences with respect to the number of positive sequences, as illustrated in table  <dig>  in short, the task consists on classifying target families of sequences into superfamilies of scop using an svm.

                           training
                           test
                           training
                           test
experiments presented in  <cit>  and associated to  <dig> protein families of scop version  <dig> , here ordered by progressive number. for each target family id is detailed the number of positive and negative sequences of training and test.

for the comparison against state-of-the-art methods we use as metric the receiver operating characteristic  score. given a ranking of the test sequences scores in output from the svm, roc score is the normalized area under the curve that plots the number of positive examples correctly predicted  as a function of the number of negative examples found to be positive  for each different possible classification threshold of a specific experiment. our results were obtained using the gist svm version  <dig> ; realized by noble and pavlidis  <cit> , it implements the soft margin optimization algorithm described in  <cit> .

for every target family we have to extract the irredundant common patterns, compute the score matrix, train the svm, and then classify the test sequences. the requirements in terms of time can vary dramatically. in general, they are related to the number of sequences and to the protein family. the most time consuming step is the training of the svm with times that range between few minutes up to  <dig> minutes, in some difficult cases. experimental data and results of other methods were taken from  <cit> . table  <dig> shows the scores of roc, roc <dig>  and median rate of false positives  averaged out over all the experiments for irredundant class and state-of-the-art methods. we report in bold the best results for each score. these scores indicate that our method outperforms most learning algorithms in literature, and it is comparable to state-of-the-art local alignment kernels.

the comparison is based on mean scores of roc, roc <dig> , and median rate of false positives  for the irredundant class and state-of-the-art methods. in bold are reported the best results for each score.

for a more detailed view, the roc scores distribution is illustrated in figure  <dig>  the green line , corresponding to the local alignment version "eig" , seems to perform slightly better than the irredundant class in blue , but the minimum roc score of the local alignment is much smaller. figure  <dig> reports the distribution of roc scores per family. the irredundant class shows a more robust behavior for all experiments with respect to the other learning algorithms. in particular, the smallest roc score of our method was obtained for the 15-th experiment with the value  <dig> , while all other methods get their lowest peaks for the 13-th experiment with values much smaller, e.g.  <dig>  for local alignment. family-by-family details can be caught from figure  <dig> for the comparison of the irredundant class against, respectively,  mismatch and  local alignment . the former is one of the most efficient kernels in literature, while the latter is known to achieve high performance. again, we can observe that irredundant class achieves better performance than mismatch and similar results when compared with local alignment.

analysis of irredundant patterns footprint
although the classification of protein sequences, through an svm, does not provide an alignment per se, one can use the footprint of irredundant patterns to detect candidate functional sites in protein sequences. here we are not interested in aligning a set of sequences, but we want to analyze the distribution of the most discriminative irredundant common patterns.

we recall that the result of the svm learning process, for a target protein family, is a set of weights α =  associated to the n training sequences of its superfamily. we want to study the distribution of irredundant common patterns in the test sequences using for each pattern p a weight that is proportional to its score  and to the weight αi of the corresponding training sequence that generated p, with  <dig> ≤ i ≤ n. consider a test sequence stest and the set of training sequences s <dig>  ..., sn; each pair  generates a set of irredundant patterns ℐtest, i. for each pattern p in ℐtest, i we compute its score as the product ln () × αi and we associate this score to the positions of stest covered by solid characters of p. we repeat the same process for all patterns in ℐtest, i, for each  <dig> ≤ i ≤ n; and for each location we sum the contributions of all patterns that cover that location. we obtain a histogram of the footprint of the irredundant patterns for the test sequence stest. the interpretation of this histogram is that picks should correspond to conserved regions, thus to candidate functional sites.

we picked three families at random from the dataset used. for every protein family we use as target functional sites the prosite  <cit>  manually found consensus patterns. to better highlight the distribution of footprints we build, for each family, a multiple alignment of the test sequences and plot all histograms over this alignment. figure  <dig> shows the resulting histogram for the protein family s <dig>  a red bar shows the location of the functional pattern reported by prosite, also shown in the picture. for this family we can see that a clear signal is present and that picks correspond quite well with conserved amino acids in the functional site. similar considerations apply also for the families in figure  <dig>  in figure  <dig> we observe picks mostly in correspondence of cysteines, whereas in figure  <dig> the pattern reported by prosite results in two functional sites that share comparable high scores.

note that these results are obtained comparing sequences from a protein family and its superfamily, thus the chances to find the actual signal are weak as opposed to standard alignment methods, which consider only the protein family. nevertheless the profile of the family functional site can be computed as a post process of our analysis by a multiple alignment of candidate regions.

this analysis does not yield to an alignment of sequences, but it is a way to interpret the distribution of irredundant patterns. in summary the most discriminative patterns contain information about the functional site of a protein family, but this information is not explicitly available by simple inspection.

CONCLUSIONS
in this paper we studied how the notion of irredundant patterns can solve an issue that is rising in the field of string-based learning algorithms. almost all string-based approaches consider patterns that are not independent, and therefore the associated scores overcount, a multiple number of times, the contribution of patterns that cover the same region of a sequence, called redundant patterns. thus we use the class of irredundant common patterns over two sequences, which is specifically designed to address this issue. we design a novel method, called irredundant class, that is a discriminative pairwise learning algorithm based on support vector machines. results on benchmark data show that the irredundant class outperforms most of the approaches previously proposed, and it achieves results as good as current state-of-the-art methods. moreover the footprint of the most discriminative irredundant patterns can be interpreted, in a biological fashion, as a guide for the identification of characteristic regions in protein sequences. finally, the irredundant class approach is not limited to protein sequences, but it can also be applied to dna or rna sequences. the investigation of these areas will be part of future work.

competing interests
the authors declare that they have no competing interests.

authors' contributions
all authors have equally contributed to, seen and approved the manuscript.

