BACKGROUND
single-gene sequencing has become the benchmark for studying microbial taxonomic composition of environmental samples, by amplification of hypervariable regions of the 16s rrna gene. next-generation sequencing platforms, such as illumina, are now adapted for the generation of multi-million-member sequence libraries for sample comparisons  <cit> . the pcr amplicons used for sequencing typically encompass one or more 16s rrna gene hypervariable regions and amplicon lengths typically extend beyond the sequencing limit of the illumina single-read method, which is typically less than  <dig> bases. because the illumina platform can generate amplicon sequences in a paired-end format, based on each template's position on the flow cell, paired reads can be directly matched and assembled. the prefiltering step of the genome assembly software phrap can be used to assemble reads  <cit> . although the needleman-wunsch algorithm  <cit>  embedded in merger  has been used to assemble illumina paired-end reads  <cit> , pandaseq makes use of illumina-specific properties, including the low probability of gap-inclusion.

assembly of the illumina paired-end sequences can be done naïvely requiring perfect match in the region of overlap, to produce large numbers of correct sequences, as in the first iteration of our assembly software  <cit> . however, approximately 40% of the sequences were discarded due to uncalled or miscalled bases. the proportion of discarded paired-end reads, due to bases uncalled or miscalled, will increase as read lengths increase, decreasing naïve assembly effectiveness. we suggest a more sophisticated method that corrects errors probabilistically with the overlap data from the paired-end reads. when the overlap between the forward and reverse reads is substantial, many uncalled or miscalled bases can be corrected using the complementary sequence. our software, pandaseq, uses paired-end illumina reads, determines the proper amount of overlap and reconstructs the entire sequence by correcting errors in the overlapping region . assembly is extremely fast and millions of paired-end reads can be rapidly assembled on a desktop computer.

implementation
pandaseq aligns each set of paired-end sequence reads in a three-step process. first, it determines the locations of the amplification primers, if they are specified and were sequenced. then, it identifies the optimal overlap. finally, it reconstructs the complete sequence, correcting any errors, and checks for various constraints, such as length and quality.

to score alignments, we calculate the probability that the true nucleotides,  and , are the same, given the observed nucleotides, x and y. we estimate this with the included quality information found in the illumina reads. for each base, casava provides an encoded quality score, which is the probability of the base being miscalled. this probability  is approximated by 10-a0-6410=10-a1- <dig> where a <dig> is the ascii quality value in the illumina analysis pipeline versions before casava  <dig>  and a <dig> is the ascii value used in casava  <dig> .  <cit> 

assuming all nucleotides are equally likely , and that sequencing errors are independent and result in equiprobable choices over the other three nucleotides, the probability that the true bases match, given that the sequenced bases match, is:

 pr=+εxεy <dig> 

and the probability that the true bases match, given the sequenced bases mismatch, is:

 pr=13εy+13εx+29εxεy 

if one of the bases is an uncalled base, n, then the probability that the bases match is:

 pr= <dig> 

using these probabilities, pandaseq begins the assembly process by determining the positions of forward and reverse primers, if supplied. to accomplish this, the program finds the first offset, x, where the primer aligns. for a primer p and a sequence s, the program calculates

 ∏i=0p-1pr 

while assuming that εpi=1-10- <dig> , which is the highest value score assigned by illumina  <cit>  and, intuitively, assuming that  is p.

the program then finds the best overlap greater than a specified threshold for the forward and reverse sequences, f and r, respectively. if no suitable overlap is found, then the read pair is discarded. this is done for the entire read, even if there are primers to be removed, as it is possible for the overlap to be sufficiently long to be in the primer region. a schematic is shown in figure  <dig> 

the value of c ∈ [ <dig>  min) is chosen which maximises this formula:

 pr= ∏i=1…fpr⋅∏i=1…cpr⋅∏i=1…rpr 

where pr= <dig> and pr= <dig> and the remainder is as above with e fixed at a value determined empirically to be the average error rate. this value of ϵ was calculated by counting the mismatch rate in known index tags in a defined community data set . this parameter need not be retuned as it is only an estimate of the error. because the index read is short and sequenced earlier in the process, it likely has fewer errors and, therefore, its error rate should underestimate the true error rate. regardless, the error rate specified for this step should not negatively affect the ability of pandaseq to identify the best overlap for the forward and reverse reads.

once the overlap is selected, the output sequence is constructed and an overall quality score is calculated. during this process, the primer regions are disregarded if primers were specified. the unpaired regions are copied from the available strands and the quality score for these regions is the product of the probability of those bases being correct. for the overlapping region, the decision-making process is more complex. if the bases agree, the base is included and the quality of this base is assumed to be pr. if the bases disagree, the base with the higher quality score is chosen and the quality of this base is assumed to be pr. if either or both bases are uncalled, they are considered to always match, noting that unassigned bases are always associated with the lowest quality score by casava  <cit> .

in certain cases, the casava pipeline masks the quality score at the end of the read, replacing all quality scores with the lowest quality score  <cit> . in this case, special quality scoring is used by pandaseq. if one base is masked, the probability of the other base is used if the bases match or uniformly random,  <dig>  is used if they do not match. if both are in the masked region, the quality is assumed to be uniformly random,  <dig> 

the constructed sequence can then be validated against user-specified criteria. the quality score assigned to the assembled sequence is the geometric mean of the quality scores calculated above, which compensates for the variable lengths of the final sequences. pandaseq enables users to reject sequences based on low quality score, lengths that are too short or too long, or the presence of uncalled bases. a module system is also available within pandaseq to allow more sophisticated validation of user sequences, such as verification of known secondary structure or conserved regions. note that there is a detailed manual included with the software that describes example usage scenarios.

RESULTS
to validate pandaseq, we used three experimental tests:  a test using simulated data to verify algorithmic correctness,  a test using sequence data from a single-template pcr amplicon to verify the quality of assembled reads, and  a test with experimental data obtained from a defined mixture of genomic dna fragments to compare pandaseq assembly yields with naïve assembly.

simulated data was useful in determining how real quality scores affect sequence assembly. we used a previously published illumina sequencing run of v <dig> hypervariable regions from a defined library   <cit>  and replaced the sequence with the corresponding region from sinorhizobium meliloti , up to the length of the original reads. although this v <dig> sequence was taken from the published genome, it corresponds to the region being sequenced in the experimental data such that any sequencing quality problems due to secondary structure are preserved. this provides simulated error-free reads with experimental quality scores. though the assembly was then performed without a quality filter, all  <dig>  <dig>  <dig> synthesized paired-end sequences assembled with quality scores greater than  <dig>  . this value establishes an upper limit on the quality score independent of sequencing errors; that is, setting the quality threshold higher than  <dig>  would demand that reads have fewer errors than data known to be perfectly correct and is, in effect, demanding the underlying read quality be better than is necessary to reconstruct the sequence.

further analysis was performed on a library constructed from a methylococcus capsulatus  full length 16s rrna gene amplification products cloned into the topo vector using the topo ta cloning kit . the resulting construct was used as template for 16s rrna gene amplification and sequencing on an illumina gaiix as previously described  <cit> , with the exception of the pcr product gel excision and purification step, which used the wizard sv gel and pcr clean-up system . sequencing produced  <dig>  <dig> paired-end 108-base reads, available at http://neufeldserver.uwaterloo.ca/~apmasell/pandaseq_sampledata.tar. of these,  <dig>  <dig> sequences were assembled with an assembly quality score greater than or equal to  <dig> . we assembled the same single-template data with a quality threshold of  <dig>  and this increased the number of sequences assembled by 9%, yielding  <dig>  <dig> sequences. the errors in the original, individual reads and the reconstructed sequences were counted and error information is shown in table  <dig>  only two reads contained uncalled bases and were excluded. pandaseq improved the correctness of the reconstructed sequence relative to the original reads or preserved the correctness of good reads. depending on the quality threshold, only about  <dig> - <dig> % of output read contained errors introduced by the pandaseq assembly process, as calculated from the results in table 1; these introduced errors were substantially less than the 5-8% of sequences with errors corrected by pandaseq. given an assembly threshold of  <dig>  as an upper limit, we then attempted to determine the lower limit for the quality threshold by looking at a comparable quality score of the unassembled reads. we determined the geometric mean of the read qualities of the sequences which assembled to be no lower than  <dig> . only  <dig> % of reads had a quality score between  <dig>  and  <dig> . therefore, if a sequence assembles, it is probably correct, given the quality of the underlying read, regardless of quality score.

summary of error frequencies in assembled illumina paired-end reads generated from sequenced v3-region amplicons of methylococcus capsulatus strain bath.

all error data were analyzed solely within the region of overlap, which was relevant to pandaseq assembly. low-abundance "contamination" was observed in the dataset , possibly due to reagents used for pcr. these will contribute to the counts of sequences that had errors that were retained. this category will also contain sequences in which both reads contain low-quality bases with quality scores masked by casava.

we compared the quality of pandaseq assembly against the existing assemblers: shera  <cit> , itags   <cit> , and bipes   <cit> . for this m. capsulatus library assembly, reads used still contained primers; primer removal was not a preprocessing step. if assembling sequences where the overlap region is large, it is possible that the end of one read would overlap the primer region of the other . pandaseq assembled all sequences within  <dig> minutes  <dig> seconds, which is much faster than the second fastest method tested, shera, at  <dig> minutes. the other two programs were at least  <dig> times slower than pandaseq. we were unable to use merger on our test environment, a macintosh pro with  <dig> quad-core intel xeon  <dig>  ghz processors, and so the bipes assembler was run on a linux machine with a quad-core intel i <dig>  <dig>  ghz processor. shown in figure  <dig> is a scatter plot of accuracy versus coverage for the four different methods we considered. pandaseq assembles the fewest reads in the dataset, but was, by far, the most accurate. itags/phrap was inferior in coverage and accuracy to bipes/merger and to shera . comparing average errors in the output sequence, pandaseq performed the best with  <dig>  nucleotide errors per sequence as compared to a minimum of  <dig>  errors per sequence for shera and bipes. however, as mentioned previously, pandaseq assembled the fewest sequences at  <dig> % of the dataset. shera assembled all sequences in the dataset, but it is worth noting that, upon inspection, many of the products assembled exclusively by shera were incorrect as an erroneous overlap region had been selected . the number of error-free sequences in the overlap region is shown in table  <dig>  while shera has a larger number of sequences with correct overlaps, these represent a smaller fraction of the output compared to pandaseq. many of these sequences produced by shera with correct overlaps were rejected by pandaseq due to low quality scores.

summary of the number of correct overlap sequences in assembled output from sequenced v3-region ampli-cons of methylococcus capsulatus strain bath.

the percentage of sequences with error-free overlap regions is shown as a fraction of the total output for each assembler.

finally, we used a composite of previously published duplicate control library  <cit> , made from mixed pure bacterial cultures , to compare naïve assembly and pandaseq. in this composite library, the most abundant sequences are from the added pure cultures, but there are other contaminant sequences, likely from the growth media used  <cit> . we performed the naïve assembly with the software used previously  <cit>  and the pandaseq assembler, discarding any sequences with uncalled bases. the assembled sequences were clustered at 97% identity using cd-hit  <cit>  and abundance curves were generated from the resulting clustered operational taxonomic units . at a threshold of  <dig> , the number of sequences increased  <dig> % in total over naıve assembly, yielding an average increase of  <dig> % in the most abundant clusters. there were  <dig> otus in which pandaseq had fewer sequences than naïve assembly:  <dig> of them were otus for which the naïve assembly found a single sequence, while the pandaseq assembly found zero. relaxing the quality threshold increased sequence recoveries substantially. when the quality threshold was reduced to  <dig> , the total number of sequences increased by 50% and the number of sequences in the most abundant clusters increased by 85%. even if the quality threshold was lowered below  <dig> , no new otu sequences were assembled by pandaseq. new, low-abundance otus were formed from some of the additional sequences, which, although they do not match the pure-culture organisms, classify taxonomically using the rdp classifier  <cit>  .

assembling  <dig>  <dig> reads took just  <dig> seconds on a macintosh pro with  <dig> quad-core intel xeon  <dig>  ghz processors. profiling indicated that cache faults are the limiting factor in performance , and the current design minimises cache faults during analysis of each sequence pair.

there is a concern that, when making a choice between two disagreeing bases, the reconstructed sequence does not reflect the true sequence. for the control library, the disagreeing bases were dominated by mismatches in the quality-masked region of the reads, where both bases were of low quality and the decision would be arbitrary because there is no reasonable way to discern which base is better. in those cases, the entire reads are of low quality and likely to be discarded due to the quality threshold. however, mismatches generally occur between a base with a high quality score and a base with a low quality score, simplifying the choice of which base is correct. in control library data, only 20% of mismatched bases both had quality scores masked by casava. since the quality masked region must be quite long for this to occur, only few sequences suffer strongly from these mismatched quality-masked bases. this is due to the overlap region typically being longer than the quality-masked regions.

CONCLUSIONS
pandaseq produces additional high-quality assemblies from illumina paired-end reads than naïve assembly for minimal computational cost and provided more rapid and higher quality results compared to existing assemblers. error correction, particularly of uncalled bases, increases the number of assembled sequences. although it is possible for pandaseq to produce incorrect assemblies, most assemblies are correct because incorrect assemblies have low quality scores, as these mismatches occur in quality-masked regions of both reads, and are discarded. this software provides a versatile and powerful way to assemble paired-end illumina reads without otherwise discarding high-quality sequence data.

availability and requirements
project name: pandaseq

project home page: https://github.com/neufeld/pandaseq

operating system: posix-compliant 

programming language: c

other requirements: none

license: gnu gpl

any restrictions to use by non-academics:

none

authors' contributions
the program requirements and experimental framework were developed by jdn and apm. the pandaseq software was written by apm. the libraries used were constructed by akb. analysis and development of the error models was shared by jmt and dgb. all authors have read and approved the final version of the manuscript.

