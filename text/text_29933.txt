BACKGROUND
stoichiometric models play a fundamental role in the analysis and optimization of biochemical networks in systems biology and metabolic engineering, especially in the absence of detailed kinetic models. a stoichiometric model specifies the relative quantities of reactants and products for each reaction within a network. there are two fundamental and commonly used computational techniques that utilize stoichiometric models to elucidate steady-state function. the first technique is elementary flux mode  analysis  <cit> , used to find all non-decomposable pathways that can operate in steady state. efm analysis has been used to analyze robustness and regulation  <cit> , analyze microbial stress responses  <cit> , increase product yield  <cit> , and assess plant fitness and agricultural productivity  <cit> . another fundamental technique is constraint-based modeling , used to analyze flux flow in metabolic networks. cbm encompass several techniques including, flux balance analysis   <cit> , and flux-variability analysis   <cit> . cbm has recently been extended and applied in innovative ways. examples include performing whole-genome simulation combining fba with kinetic rate expressions   <cit> , determining an optimal set of gene modifications with the goal of increasing the production of desired target metabolites  <cit> , analyzing genotype–phenotype relationship  <cit> , and performing thermodynamic feasibility analysis  <cit> .

stoichiometric structural models are traditionally constructed manually, based on earlier models and in combination with reaction availability from databases. an example is the formulation of successive models of the e. coli organism that lead to improved predictive capabilities and elucidation of phenotypic behavior  <cit> . the recent availability of genome, reaction, and organism specific databases have allowed for the automatic reconstruction of genome-scale models. a protocol encompassing  <dig> steps details the process including obtaining a draft construction from databases, collecting experimental data, refining the reconstruction by adding details to ensure that the network is mass and charge balanced and that missing reactions steps are properly flagged, to test the ability of the model to grow, and to compare against known properties  <cit> . the tool, model seed, expedites this process by automating most of the steps; however, manual curation is still needed to refine the constructed model  <cit> . the quality of the reconstruction, whether obtained manually or automatically, is as comprehensive as the availability of reconstruction and experimental data, and is a function of the reconstruction procedure. the resulting models may thus be incomplete or inconsistent for the purpose of steady-state analysis. models can be updated once new information  or more accurate reconstruction tools become available.

this paper addresses identifying model inconsistencies in the context of steady-state analysis. anecdotes within the community show that models released in the public domain often have undocumented inconsistencies, such as dead-end metabolites or reactions incapable of carrying fluxes. while some model issues have been documented  <cit> , there is currently no standalone computational tool that ensures model and constraint consistency. each user is thus forced to personally validate a model, sometimes in ad hoc and incomplete manners. alternatively, the user may remain unaware of model issues as some tools work around such issues. for example, in efmtool  <cit> , a tool for computing elementary modes, dead-end metabolites and fluxes that carry a zero flux are removed from the network prior to efm computation, as part of network compression to speed the efm computation. frequently, it is an incorrect computational result that alerts the user to model inconsistencies. in addition to the lack of standalone computational tools for model validation, there is currently no standard documentation protocol that each model undergoes prior to public release. ideally, each model should provide clear documentation on potential model inconsistency a user might encounter when performing common steady-state analysis tasks such as efm analysis or cbm. end users would benefit tremendously from a standardized way of identifying and documenting model issues.

we provide in this paper a detailed survey of issues common in stoichiometric models. each type of issue is identified and explained, and current mechanisms for validating each are reported. the main contribution of this article is to succinctly clarify in one centralized document how each model or constraint property can be most efficiently identified. this paper can be of great benefit to users that wish to implement their own model and constraint consistency checks. we also describe a software tool that we developed, model & constraint consistency checker , which performs model and constraint consistency checking. the matlab code that implements this tool is available freely through the web.

methods
modeling of biochemical networks
a biochemical network is represented using a stoichiometric matrix s  <cit> . if a network has m compounds and n reactions, the corresponding matrix s will be an m by n matrix. an entry in the matrix represents the stoichiometric coefficient of a compound participating in a particular reaction. each column describes a reaction. a column entry is zero if the compound does not participate in the reaction, positive if the compound is a product and negative if the compound is a reactant. reactions in a network can be classified as exchange or internal reactions. an exchange reaction links a biochemical network to its external environment, as defined by the user, and provides either uptake and/or production of external metabolites. exchange reactions are also referred to as external boundary conditions. non-exchange reactions are referred to as internal reactions that connect internal metabolites. reactions can be reversible, and are sometimes split into forward and reverse reactions during steady-state and flux balance analysis. each row in s specifies the mass balance relationship for a particular metabolite. during steady-state analysis, external metabolites are excluded from the s matrix, while exchange reactions are included. in the example in figure 1a, there are three internal compounds , three external compounds , and six reactions . the compound ordering in the stoichiometric matrix in figure 1b corresponds to b, c, and e; external compounds are not included in the matrix; exchange reactions are r <dig>  r <dig>  and r <dig> 

during steady-state analysis, each internal metabolite in the network is produced and consumed at the same net rate, so that there is no accumulation of internal metabolites. therefore, when each row in s, which describes how each reaction balances a particular metabolite, multiplies v, the steady state flux vector, the result must be equal to a zero vector, indicating a zero metabolite accumulation or depletion under steady-state conditions. this relationship is expressed as:

  ∑j=1nsij*vj= <dig> i∈ <dig> ..,m, 

where sij is the entry in the ith row and the jth column in s. thus, at steady state:

  sv= <dig> 

any v that satisfies this equation is in the null space  of s. the mass-balance constraints for the example in figure 1a are illustrated in figure 1c.

computing flux balance and flux variability analysis
flux balance analysis  is a computational approach to find the flux through the network by solving sv =  <dig>  typically, the s matrix is underdetermined, and many solutions satisfy the steady-state condition. an objective function is typically added to this constraint. fba is commonly formulated as a linear optimization problem, where the objective function either maximizes or minimizes a desired reaction flux or a combination of desired fluxes, subject to eq.  <dig>  additional constraints are used to bound flux ranges. example constraints are ones that limit uptake or secretion of compounds through exchange reactions, or ones that model the effects of knockouts, and up/down regulation. users can specify the stoichiometric matrix, the objective function, and the desired bounds in generic linear optimization programs such as gnu linear programming kit  and linprog , or with a tool such as the cobra toolbox  <cit> . within the cobra toolbox, the default upper and lower bounds are  for reversible reactions, and  <cit>  for irreversible ones. flux variability analysis  consists of identifying the minimum and maximum range for each flux subject to steady state condition  and other model constraints such as uptake or exchange rates. while calculating the minimum and the maximum flux values for each reaction, all external boundaries are set to  <dig> or - <dig>  and  <dig>  these bounds are reasonable considering typical stoichiometric coefficients of metabolic networks.

common model issues
several model and constraint consistency issues arise in practice. the most common is when the model has a dead-end metabolite. there are two existing definitions in the literature for a dead-end metabolite. one definition, termed herein as singly connected metabolite , specifies internal metabolites with only one participating reaction as a dead-end metabolite  <cit> . another definition, termed dead-end metabolite , is when a metabolite internal to the network is either consumed or produced, but not both  <cit> . both definitions are illustrated in figure  <dig>  using definition scm, h is identified as a singly ended metabolite. using dem, both h and d are dead-end metabolites. h is clearly a dead-end metabolite as it will be accumulating during the steady-state operation of the network. if the reaction directionality is correctly specified, and the model has a gap, then d will also accumulate during steady-state operation. indeed, a non-zero flux value when producing h  or producing d  will violate steady-state constraints imposed by eq.  <dig> and eq.  <dig>  if the directionality of r <dig> or r <dig> is specified incorrectly, then alerting the user that d is a dead-end metabolite will help the user correct the directionality of r <dig> or r <dig>  if appropriate. in either case, the user should be alerted that the metabolites have some connectivity issues, and he/she can then determine the correct course of action. both scm and dem conditions are detected by examining s, as follows:

condition scm. singly connected metabolite
a metabolite i is has a single connection iff

 sij|∀j,sij≠0= <dig> 

where {sij| ∀j, sij ≠ 0} refers to the set of non-zero entries in the row associated with metabolite i, and the vertical bars refer to the cardinality  in that set.

condition dem. dead-end metabolite
a metabolite i is a dead-end metabolite iff

 ∀j:sij≥0∨∀j:sij≤ <dig> j∈ <dig> …,m 

where the symbol ∨ corresponds to a logical or operation.

a second common issue is when a network contains a reaction  that can only carry a zero flux for any possible steady-state condition. several reasons may cause this issue, including ri directly connecting to a dead-end metabolite or to another zero-flux reaction, or if the reversibility of the reaction is specified incorrectly. burgard et al. refer to zero-flux reactions as blocked reactions  <cit> . a subset of zero-flux reactions can be detected by analyzing the basis of the null space to ensure that each row has at least one non-zero entry  <cit> . this method identifies zero-flux reactions due to a connection to a dead-end metabolite, . however, the null-space basis will not identify r <dig>  r <dig>  r <dig> and r <dig> as zero-flux reactions because the null-space basis computation is oblivious to the ability of a reaction to carry flux only in a particular direction. fva, on the other hand, is capable of identifying all zero-flux reactions in the network. the set of zero-flux reactions is identified by maximizing and minimizing the flux of each reaction subject to the network stoichiometry and some bounds  <cit> . if the maximum and minimum flux of a reaction is zero, then it is a zero-flux reaction. the zero-flux reactions detected by fva are a superset of the zero-flux reactions identified from the null-space basis vectors. there is thus only need to use fva and not both fva and the basis vectors to identify zero-flux reactions. in our tool, we utilize fva to identify zero-flux reactions using the following condition:

condition zfr. zero-flux reaction
a reaction rj is a zero-flux reaction iff

 vjmax=0∧vjmin= <dig> 

where the symbol ∧ corresponds to a logical and operation, vjmax refers to the maximum flux value for reaction rj obtained using fva, and vjmin refers to the minimum flux value for reaction rj obtained using fva.

a third common issue that can be detected by inspecting fva results is an unsatisfied reversibility condition associated with a reversible reaction. sometimes reactions marked as reversible carry flux only in one direction. terzer uses lp-based feasibility analysis to find unsatisfied reversible reactions  <cit> . an unsatisfied reversibility condition was found if the minimum or maximum flux value is zero for a reversible reaction. this definition, however, excludes reactions that have a non-zero positive minimum or a non-zero negative maximum from consideration. here, we expand the definition of unsatisfied reversibility to additionally include reversible reactions that can carry only positive non-zero or only negative non-zero flux. once identified, reactions identified as having unsatisfied reversibility can be marked if appropriate, as only-forward or only-backward based on the signs of their fluxes. we detect unsatisfied reversibility using the following condition:

condition ur. unsatisfied reversibility
a reversible reaction rj has unsatisfiable reversibility iff

 vjmax≤0∨vjmin≥ <dig> 

where the symbol ∨ corresponds to logical or operation. some zero-flux reversible reactions can also be declared as zero-flux reactions.

another steady-state characteristic of interest is flux coupling among a pair or group of irreversible reactions. such pairs or groups have been referred to as “enzyme subsets”  <cit>  and they were shown to have similar expression patterns, share transcriptional regulators, and frequently reside in the same operon  <cit> . knowledge of coupled reactions enables finding equivalent knockouts and, when used in conjunction with directionality data, enables the identification of missing reactions in a reconstruction  <cit> . if the fluxes of two reactions are always constant multiples of each other, then the reactions are coupled. if additionally the constant multiplier is negative, then the reaction pair is labeled as reversibly coupled. such conditions can be detected by checking the null-space basis matrix and examining the coupling ratios  <cit> . we detect coupling using the following conditions.

condition cr. coupled reactions
two irreversible reactions, ri and rj, are coupled iff

 ∀bi*,bj*pairs,bi1bj1=bi2bj2=⋯=bipbjp 

where bi* is a row in the null-space basis of the s matrix associated with a reaction i, bik and bjk are either both zero, or both non-zero entries in the kth column in the null-space basis matrix, and p is the number of columns in the basis matrix.

condition rcr. reversibly coupled reactions
two irreversible reactions, ri and rj, are reversibly coupled iff

 ∀bi*,bj*pairs,bi1bj1=bi2bj2=⋯=bipbjp< <dig> 

the set of reactions with condition rcr is a subset of the reactions in cr.

mc <dig> implementation
despite the availability of literature coverage of some of the issues described in the previous section, there is clearly a need to develop a computational tool to perform model and constraint consistency checking in a comprehensive, and standalone way. such a tool enables each user to check his or her model before releasing it to others to ensure that constraints are consistent and the model can be exercised as desired. a user may exercise the tool upon receiving a model from another user or when obtaining a model from a database or supplementary material. additionally, such a tool can be utilized as a front-end to other tools that utilize stoichiometric models. to this end, we describe a software tool that we developed, the model & constraint consistency checker  tool. as mentioned earlier, mc <dig> code is implemented using matlab  <cit> . however, before running mc <dig>  two software dependencies, namely the sbml toolbox  <cit>  and glpk  <cit>  need to be installed.

figure  <dig> provides an overview of mc <dig>  initially, the s matrix is read. three types of computations  are used: null-space basis analysis, connectivity analysis, and fva analysis. each computation checks the appropriate conditions marked in the ovals.
 <dig> 
tool overview.

the main module of mc <dig> is mc_checkmodel. it reads the model and runs the checks specified by its checktype parameter. the first parameter of mc_checkmodel is the model type, which can either be ‘xls’ or ‘sbml’  <cit>  depending on the model type. the second parameter is checktype which can be  <dig>   <dig>  or  <dig>  where  <dig> corresponds to running only checks based on the null-space basis vectors ,  <dig> corresponds to running only checks based on fva , and  <dig> corresponds to running checks using both. conditions scm and dem are always checked. the third parameter is the filename. if the file type is ‘xls’, then the remaining parameters are the excel sheets for the stoichiometry, exchange reactions, external metabolites, and user-defined bounds. the s matrix is formatted with rows as metabolites and columns as reactions. the last row specifies reaction reversibility . every cell should have a numerical entry. the exchange reactions are expressed as a single column. each entry contains the index of an exchange reaction. the external metabolites are also expressed as a single column. each entry contains a row number of the relevant metabolite. the s matrix is stripped of all external metabolites before analysis. the external metabolite listing is therefore optional. the lower and upper bound arrays for fva analysis are expressed as two columns. the first is the lower bound array and the second column is the upper bound array. there must be one row for each reaction in the s matrix and each entry within the row must contain a numerical value. the flux bounds are optional. if not specified, mc <dig> uses the upper and lower bounds  for reversible reactions, and  <cit>  for irreversible ones. if the file type is ‘sbml’, then the remaining parameters are arrays containing the exchange reactions, external metabolites, and user-defined bounds. the exchange reactions are expressed as a single column. each entry contains a reaction id. the external metabolites are also expressed as a single column. each entry contains a metabolite id. the bonds are specified as they were for the xls’ case. all three parameters are optional.

an example of running mc_checkmodel with all checks for the sbml formatted model   <cit>  is provided. the function is run as follows:

 = mc_checkmodel ;

when the command finishes executing, the return elements  are arrays that contain indices of either metabolites or reactions that pertain to that check, or will be empty if that check did not return any results. the indices can be correlated with the sbml file by examining the struct that holds the s matrix, and reaction and metabolite names. the example model, ec_iaf1260_flux <dig>  results in the report shown below.

statistics:

 <dig> reactions

 <dig> reversible reactions

 <dig> exchange reactions

 <dig> metabolites

connectivity checks:

 <dig> singly connected metabolites 

 <dig> dead-end metabolites 

basis-based checks:

 <dig> coupled reactions 

 <dig> reversibly coupled reactions 

fva-based checks:

 <dig> zero-flux reactions 

 <dig> unsatisfied reversibility 

the report has four sections. the first reports various statistics associated with the network and ensures that the whole network was read in. the second section reports the results of connectivity analysis. the third section reports the results from the analysis that used the basis vectors. in the last section, we report the results of fva-based analysis.

we have compared the functionality of mc <dig> with other available tools, namely, the cobra toolbox  <cit> , cellnetanalyzer  <cit>  and metanetx  <cit> . while dead-end metabolites can be determined using all these tools, zero-flux reactions are only reported using mc <dig>  cellnetanalyzer and metanetx. both mc <dig> and metanetx can find coupled reactions. all other discussed issues can only be identified using mc <dig>  the comparison is summarized in table  <dig> 

'●' refers to the presence of a functionality.

RESULTS
we checked the consistency of some available models using mc <dig>  the checked models included those of e.coli   <cit> , adipocyte  <cit> , chinese hamster ovary  cell  <cit> , and l. major  <cit> . for every test case, mc <dig> checks for all conditions specified in section ‘common model issues’. a summary of the results is shown in table  <dig> 
 <dig> 
to several published models

for each model, the number of metabolites, reactions, exchange reactions and reversible reactions are indicated in columns a-d. the results of applying mc <dig> are indicated in columns:  singly connected metabolites ,  dead-end metabolites ,  zero-flux reactions ,  unsatisfied reversibility ,  coupled reactions , and  reversibly coupled reactions .

the e. coli central metabolic network  <cit> , composed of  <dig> reactions and  <dig> internal metabolites , captures the conversion of sugars to ethanol. for this network, mc <dig> reports two dead-end metabolite  and three related zero-flux reactions. in the supplementary section of the paper  <cit> , it is noted that metabolite names containing ‘ext’ are external metabolites. biomass was thus treated as an internal metabolite. biomass and atp_main each appear only in one reaction. both biomass and atp_main are thus identified by mc <dig> as dead-end metabolites. reactions directly connected to these metabolites are identified as zero-flux reactions.

e. coli model ijr <dig>  <cit>  contains  <dig> dead-end metabolites that are listed in the additional data file. these metabolites participate in  <dig> reactions that will never be engaged if the network operates at steady state. the reactions that trace back to the dead-end metabolites in ijr <dig> are purposefully included for later amendments when more annotation data is available. mc <dig> identifies  <dig> dead-end metabolites and  <dig> zero-flux reactions in this network. the difference in the number of dead-end metabolites compared to the reported results is due to metabolites cardiolipin, lipopolysaccharide, and peptidoglycan. each participates as a reactant in the biomass reaction.

e. coli model iaf <dig>  <cit>  is a reconstructed model based on ij904r. the model documentation  reports  <dig> exchange reactions, while the published model has only  <dig> exchange reactions. the authors state clearly that there are some dead-end metabolites within the model but do not provide specific documentation. mc <dig> identifies  <dig> dead-end metabolites and  <dig> zero-flux reactions based on the fva computation. the model documentation reports using thermodynamic feasibility and flux variability analysis to adjust the model based on assessing reaction reversibilities; however, we identified  <dig> out of  <dig> reversible reactions that still had unsatisfied reversibilities.

the adipocyte model is a small network with  <dig> metabolites and  <dig> reactions  <cit> . this model does not have any of the discussed issues.

the cho cell model capturing the central carbon metabolism is part of a larger network  <cit> . the reversibility of reactions in this model is derived from the kegg database, and reaction directions are also derived from kegg. mc <dig>  however, identifies  <dig> reactions that operate only in one direction.

for the l. major model  <cit> ,  <dig> dead-end metabolites are reported. mc <dig> is able to find  <dig> dead-end metabolites and  <dig> zero-flux reactions based on the fba computation, which include the reactions connected directly to the dead-end metabolites or connected to the other zero-flux reactions. there are  <dig> unsatisfied reversible reactions.

it is important to realize that our tool  can only validate a subset of inconsistencies associated with a particular model. further, the tool validates properties of the model, and not the correctness of the model or the reconstruction. for example, mc <dig> identifies the conditions for dead-end metabolites. the end user is to decide how to interpret this result -- it can be due to an incomplete reconstruction or perhaps an incorrect sign in the file specifying the model. another example is specifying incorrectly the coefficients of a particular reaction. the issue of intent vs. specification exists in verification and validation of other engineering and software systems. mc <dig> cannot verify the intent, but it can certainly validate some aspects  of the model. validation of biological models will become more prominent in this field with its maturity, and with the increase use of automated reconstruction tools.

CONCLUSIONS
while model and consistency constraint issues have been identified in various contexts, this article offers a review and detailed methodology for checking common issues. all checks are packaged within mc <dig>  a tool available for others to validate their model. the results of applying mc <dig> to several models have found some inconsistencies between the models and their respective published articles. it would be important for the community to have a standard method of documenting and reporting issues with each published models. the mc <dig> matlab files are available by contacting the authors or through github at https://github.com/sohahassoun/mc <dig> 

abbreviations
efm: elementary flux mode; cbm: constraint-based modeling; fba: flux balance analysis; fva: flux-variability analysis; mc3: model & constraint consistency checker; glpk: gnu linear programming kit; scm: singly connected metabolite; dem: dead-end metabolite; zfr: zero flux reactions; ur: unsatisfied reversibility; cr: coupled reactions; rcr: reversibly coupled reactions; cho: chinese hamster ovary.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
sh conceived the idea. my, eu, and rs wrote and documented the code. my and eu ran the test cases. everyone contributed to the writing of the manuscript. sh and my revised the document. all authors read and approved the final manuscript.

