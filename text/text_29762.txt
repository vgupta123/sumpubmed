BACKGROUND
constraint-based analyses have become a widely used tool for the study of genome-scale biochemical reaction networks
 <cit> . the most prominent of these methods is flux-balance analysis . here, metabolite fluxes through biochemical reactions are constrained by the conservation of mass, by thermodynamics , by the assumption of a steady state for internal metabolite concentrations, and by the availability of nutrients. these constraints are used as boundary conditions for a linear optimisation problem, in which a biologically motivated objective function — often the yield of biomass production — is maximised. the result is a distribution of metabolic fluxes across the network, comprising a metabolic phenotype  of the network
 <cit> .

apart from such constraint-based optimisation methods, several other tools that use different philosophies for metabolic modelling are available. one example is the computation of elementary flux modes to represent the feasible solution space of a metabolic network
 <cit> . another approach is structural kinetic modelling, i.e., the description of dynamical properties of metabolic networks in combination with experimental data
 <cit> .

several tools for constraint-based optimisation analyses are currently available . the most widely used software is the cobra toolbox
 <cit>  for matlab. while these tools provide implementations of fba and other constraint-based methods, they are relatively slow when applied to large series of simulations . further, available implementations mostly require licenses for matlab, and are not flexible enough to allow users to easily design their own large-scale analyses. for metabolic networks for which elementary modes
 <cit>  or extreme pathways
 <cit>  can be calculated, such higher-level descriptions of the solution space may provide fast alternatives to the constrained-based algorithms implemented in sybil.

the r computer language has become the standard programming environment in many scientific fields that depend on numerical data analysis, in particular in the analysis of biological high-throughput data. however, r currently offers only very limited options for constraint-based analyses. the r package biggr
 <cit>  provides access to the bigg database
 <cit>  and can perform flux-balance analysis, visualising the results as graphs. the r package abcdefba
 <cit>  provides flux-balance analysis and phenotypic phase plane analysis. however, both packages are limited in scope and lack flexibility.

with sybil, which shares some functionality with the cobra toolbox and the r packages described above, we aim to establish r as a major platform for constraint-based analyses of biological networks. besides offering powerful analysis tools in a versatile and freely available environment, sybil aims to supersede previous implementations in terms of calculation speed, flexibility and extensibility.

implementation
sybil is implemented in the r programming language
 <cit>  as an object oriented library . the design of some of its functions was inspired by the cobra toolbox
 <cit> . once the sybil library is loaded into the r environment, the user can access a range of functions to read and manipulate metabolic network models, to perform different constraint-based calculations, and to visualise the results.

sybil is programmed for both speed and memory efficiency; in our experience, about  <dig> gb of ram should be sufficient for all types of analyses, even when performed on the largest complete single cell type metabolic models currently available.

sybil provides a set of "high-level" functions to access frequently used complex algorithms with a single function call  for flux variability calculations
 <cit> , or genedeletion() for prediction of gene deletion effects). another way to use sybil is to directly use "low-level" functions  or any of the api-functions from the linked optimiser software). methods implemented in class sysbiolalg provide a particularly comfortable way to execute constraint-based analyses involving optimisation steps : here, the class takes care of the optimisation software without user interference. sybil’s architecture provides the user with a highly flexible and adjustable framework. sybil is equally suited for off-the-shelf constraint-based analyses, for building complex analysis pipelines, and for the development of new constraint-based analysis methods.

the implementation of sybil follows the object oriented programming paradigm. figure
 <dig> shows the connection between the important classes implemented in sybil. class modelorg contains sybil’s representation of a metabolic network.

a number of functions are available to manipulate metabolic network models, such as addreact() to add new reactions to the model, changegpr() to alter the gene-reaction association rules, and changeuptake() and editenvir() to change the modelled environments. instances of class sysbiolalg contain a pointer to the problem object, comprised of metabolic model, constraints, and analysis algorithm to be used. for applications that involve repetitive analyses, such as flux variability or genome-wide knockout studies, the problem object used by the optimisation software is prepared only once as an instance of class sysbiolalg. modifications to the problem required in the course of the analysis are then applied at the level of class sysbiolalg, so that the problem object must not be re-created for every optimisation. the results returned by the mathematical programming software are stored in instances of class optsol.

RESULTS
key features
sybil provides several functions to perform constraint-based analyses of metabolic networks. genetic perturbations can be simulated through fba
 <cit> , minimisation of metabolic adjustment 
 <cit> , a linear version of the moma algorithm similar to
 <cit> , or regulatory on/off minimisation 
 <cit> . additionally, sybil can perform flux variability 
 <cit> , robustness
 <cit> , and phenotypic phase plane 
 <cit>  analyses . the implementations are optimised for speed when running a large number of similar optimisations on the same model .

due to sybil’s object oriented implementation, users can easily add new functions. class sysbiolalg can be extended to implement additional algorithms, which are then available to high-level functions in sybil without further user interaction. like other toolboxes for constraint-based analyses, sybil communicates with external mathematical optimisation software  to generate and solve various types of optimisation problems. this process is handled by class optobj, which provides a large set of methods to generate, modify, and solve mathematical programming problems and to access the results; the user does not need any deeper knowledge about the differences of the various solvers that can be used by sybil. however, if necessary, all parameters available within the solver software can be accessed directly in sybil.

in the future, we plan to further extend sybil, e. g. by adding methods that incorporate gene expression data into an fba approach
 <cit> . two such addition are already implemented in the separate r packages sybildynfba
 <cit> , which uses dynamic fba simulations to predict concentration changes of external metabolites as described in
 <cit> , and sybilefba
 <cit>  using gene expression data to improve fba predictions. another available add-on to sybil is the r package rseed
 <cit> , which analyses network topology to identify metabolites that must be acquired from the environment
 <cit> . the r package sybilsbml  adds sbml support to sybil.

calculation speed
the calculation speed of the optimisations depends on the mathematical optimisation software used. typically, for large mathematical problems, ibm ilog cplex is slightly faster than the two freely available solvers glpk and coin-or clp . however, major differences in the running times of different constraint-based analysis tools stem mostly from the overheads produced by the communication between the main program and the solver. this overhead is minimised by sybil through purpose-built fast interfaces to the c-api of each package.

most of the implemented algorithms require the generation of an optimisation problem based on the model, the constraints, and the desired algorithm . during batch calculations, only small changes to the optimisation problem are required, e. g., changes of variable bounds in an in silico gene deletion experiment, or alteration of the objective function during flux variability analysis. to speed up iterations over many such small changes, the optimisation problem is formulated only once; all changes are then applied directly to the pre-formed optimisation problem of the mathematical optimisation software.

figures
 <dig> and
 <dig> compare the running times of different implementations of typical algorithms used in constraint-based modelling; they also illustrate the impact of different mathematical optimisation programs on calculation speed. for all calculations, we used a complete model of e. coli metabolism, containing  <dig> reactions and  <dig> independent genes
 <cit> .
 <dig> 

figure
 <dig> shows the performance of different implementations of genome-wide flux variability analysis 
 <cit>  using glpk as the mathematical optimisation program. for fva, an optimal growth rate was estimated by fba. then, for all reactions in the model, we computed the minimal and maximal flux at this growth rate. the software tools fastfva
 <cit> , cobra toolbox
 <cit> , and cellnetanalyzer
 <cit>  implement fva for the matlab environment; sbrt
 <cit>  and optflux
 <cit>  are java-based implementations; fasimu
 <cit>  is implemented in bash and awk; cobrapy
 <cit>  is a python implementation; and abcdefba and sybil provide r implementations. all these software packages perform fva with a single function call.

as can be seen in figure
 <dig>  fastfva is the fastest implementation of the flux variability algorithm. the main algorithm is fully implemented in c++ and can be accessed from within matlab as an extension to the cobra toolbox. the c++ implementation results in a very fast running time, but makes the program inflexible; only flux variability analysis can be performed, and changes to the solver software parameters require modification of the source code. sybil, the second fastest implementation, is — compared to other implementations — only slightly slower than fastfva. sybil’s optimisations make use of wrapper functions , allowing access to the c-api of the mathematical programming software from within r. this combines very short running times with flexible communication with the solver software. sbrt uses its own java interface to glpk , which is in function similar to the wrapper software used by sybil. in cobrapy, a separate python module provides a connection to glpk. the matlab packages cobra toolbox and cellnetanalyzer make use of glpkmex
 <cit> , which provides high-level function calls to build and solve mathematical programming problems in one step. this architecture results in longer running times, as the problem needs to be rebuilt for every step in flux variability analysis, even if only minor adjustments to the model are required. the r package abcdefba uses the r package rglpk
 <cit> , which works similar to glpkmex. optflux and fasimu use the command line interfaces of glpk and ibm ilog cplex  or coin-or clp  and generate the necessary input files for every optimisation. fasimu computes the optimisations one by one, resulting in the longest running time, while optflux can run — to some extent — optimisations simultaneously.

figure
 <dig> shows the performance of genome-wide in silico gene deletion experiments with the same complete model of e. coli metabolism used for the flux variability analyses. regardless of the details of the experiment , sybil clearly outperforms other implementations in terms of computation speed; this is achieved through the efficient handling of optimisation problems that repeatedly need to be re-optimised, but do not change very much from one optimisation to the other. sybil was successfully used as the constraint-based core of a machine learning method to reconcile model predictions with genome-scale experimental double-gene knockout data
 <cit> . in this study, we demonstrated the feasibility of automated metabolic model refinement by correcting misannotations in nad biosynthesis in the metabolic model of yeast .

another fast tool is f2c2
 <cit> , a matlab tool for flux coupling analysis which computes all blocked and coupled reactions of the e. coli model in less than five minutes on our test system.

examples
reading model files
sybil can read text-based representations of metabolic networks written in the 'systems biology markup language’ 
 <cit> , which is an extension of xml. a large range of models in this de-facto standard format is available from the web pages of the palsson group at ucsd
 <cit> . each of these models is the outcome of an elaborate model-building process, which starts from database and literature searches and culminates in an iterative comparison of computational predictions and lab experiments. details on how to reconstruct whole genome metabolic network models suitable for constraint based analyses are reviewed in
 <cit> . a reconstruction of the central energy metabolism of e. coli <cit>  is included as an example dataset . in order to read sbml files, the package sybilsbml  from cran, which is itself powered by libsbml
 <cit> , is required.

sybil can also read models written in a column-based format, such as exported reaction lists of the bigg database
 <cit> . example files for the central energy metabolism of e. coli are also included in this format . these can be read in using the command readtsvmod() :  

the variable ec_core now contains an in silico representation of the central energy metabolism of e. coli which can be used for further analysis. the definition of the column-based format is described in the sybil package vignette .

constraint-based analysis of metabolic networks
genetic perturbations of metabolic networks can be simulated using the function genedeletion(). the command  

performs a single gene deletion analysis on the example dataset, using flux-balance analysis to determine reductions in metabolite production, and employing the mathematical optimisation software glpk for the optimisations. the parameter ’combinations’ indicates the number of genes to knockout simultaneously in each optimisation. setting this parameter to  <dig> results in the simulation of all possible pairwise gene knockouts, setting it to  <dig> will compute all triple-gene knockouts. due to sybil’s streamlined communication with the solver software, which only transmits changes to the model rather than the full model for each deletion, this function helps to deal with the combinatorial explosion inherent in systematic multiple-gene knockout experiments. the parameter ’algorithm’ indicates the algorithm used to determine the functional state of the metabolic network after gene deletion. it can be set to 

• "fba": for flux-balance analysis  as described in
 <cit> ,

• "mtf": for flux-balance analysis and additionally selecting the flux distribution resulting in the smallest absolute total flux,

• "moma": for minimisation of metabolic adjustment as described in
 <cit> ,

• "lmoma": for a linear version of the moma algorithm similar to the version described in
 <cit> , or

• "room": for regulatory on/off minimisation as described in
 <cit> .

the parameter 'solver’ selects the mathematical optimisation software used by the algorithms. it can be set to 

• "glpkapi": for glpk
 <cit> , via r package glpkapi
 <cit> ,

• "cplexapi": for ibm ilog cplex
 <cit> , via r package cplexapi
 <cit> ,

• "clpapi": for coin-or clp
 <cit> , via r package clpapi
 <cit> ,

• "lpsolveapi": for lp_solve
 <cit> , via r package lpsolveapi
 <cit> , or

• "sybilgurobi": for gurobi
 <cit> , via r package sybilgurobi.

all r packages are available on cran
 <cit> , with the exception of sybilgurobi, which is available on request. the sybil package vignette  contains further examples of constraint-based metabolic network analyses, such as flux variability or robustness analyses, as well as graphical representation of results and instructions for the interaction with mathematical optimisation programs.

CONCLUSIONS
sybil is designed to address large scale questions in reasonable time frames, making it possible to generate and run in silico experiments that result in high-dimensional optimisation problems. new algorithms can be easily implemented using the sybil framework and can be distributed as add-on packages to the systems biology community.

availability and requirements
project name: sybil

project home page:http://cran.r-project.org/package=sybil

operating system: platform independent

programming language: r

other requirements: a mathematical optimisation software 

license: gnu gpl

abbreviations
fba: flux-balance analysis; fva: flux variability analysis; moma: minimisation of metabolic adjustment; room: regulatory on/off minimisation; sbml: systems biology markup language.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
ggd developed the r packages sybil, sybilsbml, glpkapi, clpapi and cplexapi, implemented the algorithms, conceived the handling of the mathematical programming software, and wrote the manuscript. aad developed sybil add-on packages sybildynfba and sybilefba and tested and applied sybil and made suggestions for improvements and additions. cjf developed sybil add-on package rseed and tested and applied sybil and made suggestions for improvements and additions. mjl initated the project, suggested improvements and additions to sybil, and contributed to the writing of the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
r package sybil. archive of the sybil version current at submission.

click here for file

 additional file 2
features contained in sybil and other commonly used software packages.

click here for file

 additional file 3
r package sybilsbml. archive of the sybilsbml version current at submission.

click here for file

 additional file 4
example dataset. archive containing the input files required by sybil for the reconstruction of the central energy metabolism of e. coli in column based format and in sbml format. the files packaged into the archive can be read with the sybil command readtsvmod.

click here for file

 additional file 5
sybil package vignette. a user guide for sybil in pdf format. it can be accessed from within a running r session with the command vignette.

click here for file

 acknowledgements
we are grateful to balázs papp and balázs szappanos for helpful discussions and intensive testing. we also thank csaba pál, markus herrgård, benjamin braasch, marc andre daxer, milan majtanik, and rajen piernikarczyk for helpful discussions.
