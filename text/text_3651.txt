BACKGROUND
many protein structure prediction methods require an algorithm that is capable of constructing a new conformation for a short segment of the protein, without affecting the rest of the molecule. in other words, a protein fragment needs to be generated that seamlessly closes the gap between two given, fixed end points. this problem is generally called the loop closure problem, and was introduced in a classic paper by go and scheraga more than  <dig> years ago  <cit> . it has been the continued subject of intensive research over many years due to its high practical importance in structure prediction.

the loop closure problem arises in at least two different structure prediction contexts. in homology modelling, it is often necessary to rebuild certain loops that differ between the protein being modelled and the template protein  <cit> . the modelled loop needs to bridge the gap between the end points of the template's loop.

in de novo prediction, local resampling or local moves can be considered as a variant of the loop closure problem. typically, the conformation of a protein segment needs to be changed without affecting the rest of the protein as a sampling step in a markov chain monte carlo  procedure  <cit> . in both homology and de novo structure prediction, the problem is however essentially the same.

the classic article by go and scheraga  <cit>  describes an analytical solution to finding all possible solutions for a protein backbone of three residues. in this case, the degrees of freedom  comprise six dihedral angles, ie. the backbone's  angles. another approach is to use a fragment library derived from the set of solved protein structures, and look for fragments or combinations of fragments that bridge the given fixed ends  <cit> . more recently, the loop closure problem has been tackled using algorithms borrowed from the field of robotics, in particular inverse kinematics methods  <cit> . still other methods use various monte carlo chain perturbation approaches, often combined with analytical methods  <cit> . a good overview of loop closure methods and references can be found in kolodny et al.   <cit> .

most methods assume that one is working with a full-atom protein backbone with fixed bond angles and bond lengths, so the dof consist solely of the backbone's  angles. however, in many cases not all the atoms of the protein backbone are present in the model. in particular, a large class of structure prediction, design and in silico folding methods makes use of drastically simplified models of protein structure  <cit> .

a protein structure might for example be represented by a chain of cα atoms or a chain of virtual atoms at the centers of mass of the side chain atoms  <cit> . in these models, there is obviously no full-atom model of the protein's backbone available.

in the case of cα-only models, the structure can be described as a sequence of pseudo bonds, pseudo angles θ and pseudo dihedral angles τ  <cit> . here, the term 'pseudo' indicates that the consecutive cα's are not actually connected by chemical bonds. as in the case of the protein's backbone, the pseudo bond lengths can be considered fixed . in contrast, the pseudo bond angles between three consecutive cα atoms are most definitely not fixed, but vary between  <dig>  and  <dig>  radians. hence, a cα-only model of n residues can be represented by a sequence of n -  <dig> pseudo bond angles θ and n -  <dig> pseudo dihedral angles τ .

most inverse kinematics approaches assume that the dof consist only of dihedral angles, and keep the bond angles fixed or semi-fixed. hence, they cannot be readily applied to the cα-only case without restricting the search space unnecessarily. in principle, fragment library based methods would apply, but here the problem of data sparsity arises  <cit> . often, no suitable fragments can be found if the number of residues between the fixed ends becomes too high.

in order to solve the loop closure problem in cα space, we extend a particularly attractive approach that was recently introduced by canutescu & dunbrack  <cit> . the algorithm is called cyclic coordinate descent , and like many other loop closure algorithms it derives from the field of robotics  <cit> . as pointed out by canutescu & dunbrack, the ccd algorithm is meant as a black box method that generates plausible protein segments that bridge two given, fixed endpoints. the final choice is typically made based upon the occurrence of steric clashes, applicable constraints  and evaluation of the energy.

the ccd algorithm does not directly generate conformations that bridge a given gap, but alters the dihedral angles of a given starting segment that already overlaps at the n-terminus such that it also closes at the c-terminus. the starting segment can be generated in many ways, for example by using a fragment library derived from real structures or by constructing random artificial fragments with reasonable conformations. surprisingly, most protein loops can be closed efficiently by ccd starting from artificial loops constructed with random  dihedral angles  <cit> .

the ccd algorithm alters the  dihedral angles for every residue in the segment in an iterative way. in each step, the rmsd between the chain end and the overlap is minimized by optimizing one dihedral angle. because only one dihedral angle is optimized at a time, the optimal rotation can be calculated efficiently using simple vector arithmetic.

the list of advantages of ccd is impressive: it is conceptually simple and easy to implement, computationally fast, very flexible  and numerically stable. therefore, we decided to adopt the ccd algorithm for use with cα-only models. here, we describe a new version of ccd that optimizes both dihedral angles and bond angles, while maintaining all the advantages of the ccd method. we call our method full cyclic coordinate descent , where "full" indicates that both dihedral angles and bond angles are optimized, while only the bond lengths remain fixed. at the heart of the fccd method lies a procedure to superimpose point sets with minimal root mean square deviation , based on singular value decomposition. as is the case for the ccd algorithm, fccd is not a modelling method in itself. rather, it can be used as a method to generate possible conformations that can be evaluted using some kind of energy function.

to test the algorithm, we selected random segments from a protein structure database, and evaluated the efficiency of closing the corresponding gaps starting from artificial segments with protein-like  angles. we show that fccd is both fast and successful in solving the loop closure problem, even in the presence of angle constraints. conformations close to those of real protein loops are readily generated. finally, we discuss possible applications of the fccd algorithm, and mention some possible disadvantages.

RESULTS
overview of the fccd algorithm
the fixed segment is a list of cα vector positions that specifies the gap that needs to be bridged. only the first and last three cα positions, with corresponding vectors  and  are relevant. we will call these two sets of vectors the n- and c-terminal overlaps, respectively. the moving segment is a list of cα position vectors that will be manipulated by the fccd algorithm to bridge the gap. the closed segment is the moving segment after its pseudo bond angles and pseudo dihedral angles were adjusted to bridge the n- and c-terminal overlaps of the fixed segment. the vectors describing the positions of the cα atoms in a segment of n residues are labelled from  <dig> to n -  <dig> 

initially, the first three vectors of the moving loop coincide with the first three vectors of the fixed segment, while the last three vectors are conceivably reasonably close to the last three vectors of the fixed loop. this last condition is however not very critical. the moving segment can be obtained using any algorithm that generates plausible cα fragments, including deriving them from real protein structures. the fixed segment is typically derived from a real protein of interest, or a model in an mcmc simulation.

the fccd algorithm changes the pseudo bond angles and pseudo dihedral angles of the moving loop in such a way that the rmsd between the last three vectors of the moving loop  and the last three vectors of the fixed loop  is minimized, thereby seamlessly closing the gap.

note that we assume that the last three vectors of the moving and fixed segments can be superimposed with an rmsd of  <dig>  Å . in other words, the first and last pseudo bond angles in both segments are equal. it is however perfectly possible to use segments with different pseudo bond angles at these positions. since the final possible minimum rmsd will be obviously greater than  <dig> in this case, the rmsd threshold needs to be adjusted accordingly.

the algorithm proceeds in an iterative way. in each iteration, a vector mi in the moving segment is chosen that will serve as a center of rotation. this chosen center of rotation will be called the pivot throughout this article. then, the rotation matrix that rotates  on  around the pivot and resulting in minimum rmsd is determined, and applied to all the vectors mj downstream i . in the next iteration, a new pivot is chosen, and the procedure is repeated. the vectors in the chain can be traversed linearly, or they can be chosen at random in each iteration. the difference between fccd and ccd is that the latter applies a general rotation to the chain using an atom in the chain as a pivot, while the former only applies a rotation around a single axis. the process is stopped when the rmsd falls below a given threshold.

finding the optimal  rotation matrix corresponds to finding one optimal pseudo bond angle and pseudo dihedral angle pair. we define θi as the bond angle of the vectors mi- <dig>  mi, mi+ <dig> and τi as the dihedral angle of the vectors mi- <dig>  mi- <dig>  mi, mi+ <dig> . these definitions have the intuitive interpretation that altering  changes the positions of all cα's downstream from position i. conversely, using pivot mi and applying a rotation matrix to all the positions downstream from position i corresponds to changing pseudo bond angle θi and pseudo dihedral angle τi.

for a segment of n cα's , the pseudo angles range from θ <dig> to θn- <dig> and the pseudo dihedrals range from τ <dig> to τn- <dig>  since the first and last bond angles of the moving segment are fixed, the pivot points range from position  <dig> to position n -  <dig> . the pseudo bond angle and pseudo dihedral angle pairs thus range from  to .

finding the optimal rotation matrix with respect to the rmsd of the c-terminal overlaps can be efficiently solved using singular value decomposition, as described in detail in the following section.

finding the optimal rotation
in this section we discuss solving the following subproblem arising in the fccd algorithm: given a chosen pivot point i in the moving segment, find the optimal  pair that minimizes the rmsd between the last three cα vectors in the moving segment and the last three cα vectors in the fixed segment. recall that the  pair at position i corresponds to the pseudo bond angles and pseudo dihedral angles defined by vectors mi- <dig>  mi, mi+ <dig> and mi- <dig>  mi- <dig>  mi, mi+ <dig> respectively.

finding the optimal  pair simply corresponds to finding the optimal rotation matrix using cα position i as the center of rotation . this reformulated problem can be solved by a variant of a well known algorithm to superimpose two point sets with minimum rmsd which makes use of singular value decomposition  <cit> . below, we describe this adapted version of the algorithm.

first, the c-terminal overlaps of the moving and the fixed segment need to be translated to the new origin that will be used as pivot for the optimal rotation. this new origin is the pivot vector mi at cα position i in the moving segment. the new vector coordinates of the moving and the fixed segments are put in two matrices , with the coordinates of the vectors positioned column wise:

m = 

f = 

then, the correlation matrix Σ is calculated using m and f :

Σ = fmt

any real n × m matrix a can be written as the product of an orthogonal n × n matrix u, a diagonal n × m matrix d and an orthogonal m × m matrix vt  <cit> . such a factorization is called a singular value decomposition of a. the positive diagonal elements of d are called the singular values. hence, Σ can be written as:

Σ = udvt

the optimal rotation Γ is then calculated as follows:

Γ = usvt

the value of the diagonal  <dig> ×  <dig> matrix s is determined by the product detdet, which is either  <dig> or - <dig>  if this product is - <dig> then s = diag, else s is the  <dig> ×  <dig> unit matrix. the matrix s ensures that Γ is always a pure rotation, and not a rotation-inversion  <cit> .

in order to apply to all the vectors that are downstream from the pivot point i, these vectors are first translated to the origin of the rotation , left multiplied by Γ and finally translated back to the original origin:



where i <j <n.

adding angle constraints to fccd
it is straightforward to constrain the  angles to a given probability distribution. for each rotation matrix Γ, the resulting new pseudo bond angles and dihedral angles can easily be calculated. the new angles can for example be accepted or rejected using a simple rejection sampling monte carlo scheme, comparing the probabilities of the previous pair  with that of the next pair . if p  > p  the change is accepted, otherwise it is accepted with a chance proportional to p  / p . a similar approach was used by canutescu & dunbrack  <cit> , and we describe its performance in combination with fccd in the following section.

more advanced methods could take the probability of the sequence of angles into account as well, for example using a hidden markov model of the backbone  <cit> . the pseudo code in table  <dig> illustrates accepting/rejecting rotations using an unspecified 'accept' function, whose details will depend on the application.

fccd's performance
in order to evaluate the general efficiency of the method, we selected random fragments of various sizes from a representative database of protein structures, and used these fragments as fixed segments. hence, the evaluation described below is not limited to loops, but extends to random protein segments. this is a relevant test, since local moves in a typical mcmc simulation are indeed performed on random segments.

the fixed segments were sampled from a dataset of fold representatives . first we selected a random fold representative, and subsequently extracted a random continuous fragment of suitable length. the lengths varied from  <dig> to  <dig> with a step size of  <dig>  it should be noted that the length of the segment here refers to the number of cα atoms between the ends that need to be bridged.

the moving segments were generated using random dihedral and bond angles in regions accessible to proteins . this was done by sampling the  pairs according to a probability distribution derived from a set of representative protein structures . the bond length was fixed at  <dig>  Å, in tune with the consensus cα-cα distance in protein structures. the last bond angle in the moving segment was chosen equal to the last bond angle in the fixed loop to make a final rmsd of  <dig>  Å possible. the rmsd threshold was  <dig>  Å. the maximum number of iterations was set to  <dig>  where one iteration is a sweep over all positions. we ran the fccd program on  <dig> different fixed segments. table  <dig> summarizes the results.

a first observation is the effect of the angle constraints. these slow down fccd with a factor of  <dig> for small segments  and roughly a factor of  <dig> for larger segments . nonetheless fccd including constraints remains quite speed efficient: small five residue segments are on average closed in about  <dig> ms, while larger segments  are closed considerably faster . the explanation for this is of course that it is easier to close large segments because they have more dof. hence, fccd, like ccd, is fast and easily handles large segments efficiently.

overall, the success rate of fccd is excellent, and very little affected by constraints. for  <dig> residue segments, adding constraints diminishes the number of successfully closed segments from  <dig> % to  <dig> %. this effect is however much less pronounced for larger segments: more than 98% percent of the moving/fixed segment pairs can be successfully closed. in short, fccd is both speed efficient and has a high success rate, even in the presence of constraints.

evaluation of fccd's sampling space
does fccd potentially generate realistic protein conformations? fccd could be used to propose possible conformations that are subsequently evaluated by an energy function. in this context, it is of course imperative to generate realistic conformations. to answer this question, we evaluate fccd's ability to generate closed segments that are close to real protein loops. we used  <dig> real loops with lengths of  <dig>   <dig> and  <dig> residues as fixed segments. the loop length refers to the number of residues between the n- and c-terminal overlaps.

fccd was applied using  constraints and an rmsd threshold of  <dig>  Å. the maximum number of iterations was set to  <dig>  for each loop, we attempted to generate closed segments from  <dig> random moving segments within the allowed number of iterations. the moving segments were generated as described in the previous section. for all  <dig> loop cases, we then identified the closed segment that resembled the input loop best as judged by the rmsd. for the calculation of the rmsd, we included the n-and c-terminal overlaps. the results are shown in table  <dig>  and the best fitting loops for each loop size are shown in figure  <dig> 

the accept function rejects or accepts the proposed rotation, based on the resulting  pair. the svd function performs singular value decomposition, and calc_rmsd calculates the rmsd between two lists of vectors.

it is clear that fccd readily generates closed segments that are reasonably close to the real loops, with an average rmsd of about  <dig> ,  <dig>  and  <dig>  Å for loops of  <dig>   <dig> and  <dig> residues, respectively. the highest minimum rmsd values for these loop lengths are  <dig> ,  <dig>  and  <dig>  Å, respectively, indicating that fccd in general can come up with a reasonably close conformation. using more initial moving segments will obviously increase the chance of encountering a close conformation. additionally, one can also expect an even better performance with a more refined way to constrain the  angles.

CONCLUSIONS
in this article, we introduce an algorithm that solves the loop closure problem for cα only protein models. the method is conceptually similar to the ccd loop closure method introduced by canutescu and dunbrack  <cit> , but optimizes dihedral and bond angles simultaneously, while the former method only optimizes one angle at a time. at the heart of the method lies a modified algorithm to superimpose point sets with minimum rmsd, based on singular value decomposition  <cit> .

the algorithm is fast, numerically stable and leads to a solution for the great majority of loop closure problems studied here. importantly, the method remains efficient even in the presence of constraints on the dihedral and bond angles. fccd readily handles large gaps, and potentially generates realistic conformations. compared to other loop closure methods, fccd is surprisingly easy to implement provided a function is available to calculate the singular value decomposition of a matrix.

a possible disadvantage is that fccd has a tendency to induce large changes to the pseudo angles at the start of the moving segment while angles near the end are less affected, which is also the case for ccd  <cit> . this can for example be avoided by selecting the pivot points in a random fashion, or by limiting the allowed change in the angles per iteration. occasionally the method gets stuck, which can be avoided by incorporating stochastic changes away from the encountered local minimum. one can also simply try again with a new random moving segment. we believe that ccd and fccd despite these disadvantages are among the most efficient loop closure algorithms currently available.

the fccd algorithm proposed here has great potential for use in structure prediction methods that only make use of cα atoms, or that otherwise do not include all backbone atoms  <cit> . fccd could be used for example to implement local moves in a mcmc procedure. the moving segments could be derived from a fragment database or generated from a probabilistic model of the protein backbone. the latter model could range from a primitive probability distribution over allowed  angle pairs like we used here to a hidden markov model that also models the sequence of  angle pairs.

we are planning to use the fccd algorithm in combination with a sophisticated probabilistic model of the protein's backbone, which will steer both the generation of the initial moving loop and the acceptance/rejection of the angles. the performance of fccd in this context will be the subject of a future publication.

