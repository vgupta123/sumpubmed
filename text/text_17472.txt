BACKGROUND
over the past 20– <dig> years, there has been a substantial increase in the production of materials through the use of cell factories. metabolic engineering   <cit>  deals with the analysis and design of metabolic systems towards particular goals, such as increasing the production of useful compounds. the field has received increased attention, due to the growing adoption of industrial biotechnology for producing pharmaceuticals, food ingredients and fine chemicals, among others  <cit> . the emergence of high-throughput tools for genome sequencing  <cit> , gene expression, protein and metabolome analysis  <cit> , has enabled a better understanding of cell metabolism and, consequently, empowered rational strain development approaches. however, a deeper understanding of the physiological state of cells can be obtained from metabolic flux profiles  <cit>  and, therefore, the measurement of metabolic fluxes and the understanding of their control within metabolic systems are at the core of me.

current biochemical knowledge and the information collected from the annotation of genome sequencing projects allowed the development of genome-scale metabolic models , supporting the simulation of the metabolic phenotypes. although the process is only semi-automatic, a large number of gsmms have been reconstructed for different organisms  <cit> .

through the use of a metabolic model, taking into account stoichiometry, reaction reversibility, and quasi-steady-state assumptions, linear constraints over the values of intracellular fluxes can be established. environmental conditions  are added in the form of constraints over uptake fluxes, while reaction deletions can be defined setting the respective fluxes to zero. however, in the context of genome-scale models, the majority of these systems are underdetermined  <cit> , meaning that the number of constraints is not enough to algebraically solve the system for unknown fluxes. thus, simulation approaches based on linear/quadratic programming  optimization methods are used to calculate flux values. this is the case with the well-known flux balance analysis  method  <cit> , where an optimization problem is formulated to optimize a defined objective function, typically the maximization of growth rate as defined by an artificial biomass flux  <cit> .

however, the configuration of a proper objective function is not straightforward  <cit> . moreover, lp based approaches can have multiple solutions, i.e. different flux distributions that satisfy all the constraints and have the same optimal value for the objective function  <cit> . additional limitations arise from the reliance on balances for cofactors, such as nadh and nadph  <cit>  and from the presence of reversible reactions and futile cycles  <cit> . some of these problems can be attenuated by experimental measurements or previous knowledge of certain metabolic fluxes, but these are rarely able to turn the system into a determined one, to allow the unique determination of all fluxes in the model.

metabolic flux analysis  methods are, thus, based on the use of metabolic models and experimental data . when available, data of measured fluxes  and known flux ratios  <cit>  can be added to the metabolic model in the form of additional constraints, reducing the solution space, eventually leading to a determined  system. these data are usually obtained from the measurements of exchange fluxes, such as the rates of formation and consumption of compounds or from more sophisticated procedures that include feeding of labelled substrates  <cit> .

several software applications have been put forward providing methods for flux quantification based on experimental data  <cit> . these typically work over data from 13c labelled substrate experiments  <cit> .

numerous tools for general-purpose constraint-based analysis have been developed in the last few years. in additional file 1: table s <dig> in supplementary material, the main features of these tools are summarized. all these tools offer the possibility to perform fba, however few provide flexible and easy-to-use tools for defining additional constraints as those coming from measured or otherwise known fluxes or flux ratios. for example, in this gsmms’ era, it is important not only to provide users with the capacity to compute flux distributions from experimental data for determined systems, but also to evaluate the impact of the measurements for systems that, although remaining underdetermined, see their solution space reduced. moreover, it is important to be able to combine different types of experimental data or other available knowledge, such as flux measurements or ratios for intracellular fluxes with exchange fluxes or to easily perform these calculations for both wild-type and mutant strains.

few tools exploit the various derivations of fba that enable the application of tailored approaches to specific problems. although cobra  <cit>  is the tool that contains the most relevant features, it requires the commercial software matlab. cellnetanalyser  <cit> , the successor of fluxanalyzer  <cit> , provides key features for mfa, such as the classification of models according to determinacy and redundancy. however, it is also built over matlab and is itself a commercial tool, although it allows an academic license. a few software tools, like metafluxnet and sbrt  <cit> , execute matrix operations to calculate flux distributions without the application of optimization methods. also, importing metabolic flux ratios to constrain mfa methods is a feature not supported by existing tools, although sbrt and cobra accept the introduction of linear combinations of reactions to constrain the systems.

in this work, cbfa – constraint-based flux analysis, a general-purpose and flexible application is proposed that is independent of the type of data available and their processing. cbfa is able to work with regular constraint-based models, without information about atom transitions between precursors and products in the model reactions . independence from carbon atom mapping facilitates user interaction, since this kind of information is not easily compiled for genome-scale models, though efforts to accomplish such task have been reported  <cit> . in cbfa, input data are not fluxomics measurements generated by analytical techniques, such as mass spectrometry  or nuclear magnetic resonance , rather, input data are known or measured metabolic flux ratios, which can be easily used to reflect the portions of flux that generate a certain metabolite originating from different pathways  <cit>  and that have already been used in the context of genome-scale models  <cit> . other data, such as known or measured exchange or internal fluxes can also be directly inputted. the aim is to provide a simple to use software tool focused on the straightforward application of several state-of-the-art flux analysis methods and the simulation of the behaviour of wild type or mutant strains. the development of tools to generate these ratios from fluxomics data  is addressed in a complementary software, whose publication is currently under preparation.

the main features of this tool are the following:open-source – it allows all users to use the tool freely and invites contribution of other researchers by providing the source code to the community;

user-friendly – facilitates its use by users with no/little background in modelling/programming;

simple – needs only a few steps to perform flux analysis methods and obtain flux distributions, simplifying the use of experimental information in the simulations;

modular – as it is incorporated in the optflux software  <cit> , it follows a plug-in based architecture, facilitating the addition of specific features;

compatible with standards –compatibility with the systems biology markup language   <cit> , the mathematical markup language   <cit>  and several layout standards for visualization  rendering interoperability with other tools easier.



in its current version, cbfa accommodates several tools and algorithms that have been developed for the manipulation of metabolic models:methods for phenotype simulation, such as fba and its variant parsimonious enzyme usage fba   <cit> ;

a method to minimize the error between calculated and measured fluxes, through a quadratic programming formulation;

methods for system characterization:○ through the calculation of tight bounds of fluxes in the model;

○ through the analysis of the null space of the stoichiometric matrix.



a method for robustness analysis of a configured objective function;

methods to calculate fluxes when the non-measured fluxes can be calculated from the input constraints, and exploiting redundancies when additional data are available;

a suitable model visualization tool to facilitate the interpretation of results.



additional file 1: table s <dig> highlights some of the features of this tool, when compared to some of the applications mentioned above. it also lists, in a different tab, the novel features of this tool in the framework of the optflux application.

the main concepts used in the development and its main functionalities are presented in the next sections.

implementation
the tool is fully implemented in the java language, and thus available for all platforms. the only non-java parts consist of the linear/quadratic programming solvers, where several interfaces are implemented such as the gnu linear programming kit  <cit>  and ibm ilog cplex.

in order to explore several features for model handling and visualization, and to enable the interaction with different tools, cbfa was built as a new plugin for optflux. optflux is an open-source and modular me software platform with a plug-in based architecture. optflux and cbfa follow the model-view-controller  design pattern, incorporating three well-defined concepts: operations, datatypes and datatype views. this design pattern allows the combination and re-use of different units of work and facilitates the continuous development of new features.

cbfa is a user-friendly software, with a graphical user interface  layer to allow users to call and visualize the software features and results, where the presentation layer is well separated from the business and application layers. thus, all its features can be used by other software platforms through a well-defined programming interface without the dependency on the gui input interactions.

RESULTS
an overview of the overall workflow implemented in cbfa is provided in figure  <dig>  where the different inputs, the generated constraints, the system types, the supported methods and their outputs are shown. in this section, the main steps and alternatives offered by the pipeline to execute the flux analysis methods are briefly explained. the detailed description of the implemented methods and complete mathematical formulations are provided as supplementary material , also available on the project’s website. additionally, a beginner’s tutorial with illustrations for all the steps needed to perform the software tasks is available to help first-time users .figure  <dig> 
overview of the application: on the left side, the inputs are represented; the centre box contains the different functional blocks of the application: the types of constraints, the determination of the system type and the supported methods; the right boxes represent the outputs of the methods.




system configuration
starting with a metabolic model that can be loaded in different formats , the user can configure inputs to flux analysis methods, including environmental and genetic conditions , measured or otherwise known fluxes and/or flux ratios given as expressions in the form: ∑i=1nκiυi∑j=1nκjυj=τ where κi, κj ∈ r and τ ∈ r\{0} are user-defined real numbers and vi and vj are fluxes. this allows the definition of constraints of different origins, e.g. coming from calculations over experimental data, for example from 13c experiments, or deriving from existing knowledge about a biological system. note that the specific calculations to reach flux ratios from experimental data in different formats are not included in this software.

given this information, degrees of freedom of the system are calculated from the properties of the original stoichiometric matrix of the model, the defined knockouts, the experimental values defined for some fluxes, and the provided flux ratios. the accurate number of degrees of freedom is obtained by the difference between the number of unknown variables  of the system and the number of linearly independent equations of the system. however, since the purpose of this work is mainly to perform flux analysis tasks upon gsmms, the typical configurations will lead to large numbers of degrees of freedom. it is not relevant to calculate the exact number of degrees of freedom if this is too high. therefore, the costly algebraic operations that are performed towards the exact calculation of the degrees of freedom are not always made, rather an approximation is firstly calculated, given by the difference between the unknowns and the equations of the system, without taking into account the linear dependency between them. if this approximation gets close to a threshold, the proper number of degrees of freedom is calculated and presented to the user.

to reduce the degrees of freedom, the user can add new flux measurements, gene/reaction deletions or equality flux ratios. if the type of system changes, the set of available methods is updated accordingly.

available methods for flux analysis
two approaches are used to determine flux distributions: algebraic or optimization based methods . depending on the degrees of freedom of the system, different methods can be applied . if the system is either determined or over-determined it can be algebraically solved and, therefore, fluxes can be calculated. in the latter case, the additional information can be used to calculate fluxes by regular or weighted least squares fitting.

however, with genome-scale models, systems are more commonly underdetermined, even when experimental information is added. thus, optimization methods are used to obtain flux values, by defining an objective function, while respecting the defined constraints. fba and pfba can be selected, maximizing a given objective function . an alternative is to use quadratic programming to minimize the difference between the values of a subset of measured fluxes and their calculated values. the resulting formulation is mathematically similar to the minimization of metabolic adjustment   <cit> .

the null space approach can be used to calculate a unique solution to the non- measured fluxes, when the system is either determined or over-determined. it can also be used when the system is underdetermined, but in this case returning the admissible flux space represented by the generating base vectors. these vectors can be used to generate valid flux distributions.

in order to characterize the system, other approaches can also be used like the computation of tight bounds of the system under certain conditions. here, the lower and the upper admissible bounds for all fluxes, which have neither been measured nor have associated knockouts, are obtained through the application of an optimization-based method that maximizes/minimizes the flux of interest under the same set of constraints. this method is an approach based on flux variability analysis   <cit>  where no constraints are defined for the objective function.

different solutions leading to the same optimal objective value can be achieved by the methods based on lp problems. to characterize the alternative solutions that satisfy the imposed set of constraints and have the same objective value, fva is again used, this time to calculate the admissible ranges of flux values under optimality  <cit> .

to analyze the changes of the objective function in response to variations of a specific flux, a method for robustness analysis is also available. for a selected set of fluxes, their values in a prior optimization for the given objective are retrieved. after that, each flux is varied in different percentages of its prior value and the effects of these changes on the objective function can be studied  <cit> .

furthermore, all the aforementioned methods can be used to investigate how a set of knockouts is reflected on the flux distribution. this is accomplished by the configuration of knockouts as additional constraints to the system. these knockouts can be inserted as reactions or as genes by using the gene-reaction rules of the model .

the results and configurations used by the methods described above can be exported to a pdf file, including the model details, the method that was used, all the constraints that were selected, and the result of the simulation in terms of objective function and net conversions. moreover, it reports the bounds that were actually used in the simulations when constraints overlap with each other.

user interaction
the aim of cbfa is to provide the community with a tool to perform flux analysis tasks that is simple, intuitive and with high usability. the interaction with this software is based on three main concepts:datatypes: encapsulate the different types of objects of the application, holding relevant data such as models, flux measurements, flux ratios, simulation results, etc. the application can keep several instances  of the same datatype.

views: to check the contents of a datatype, panel views are defined that present to the user the most relevant information that it encompasses. since a single datatype might contain different types of information, it can have multiple views shown as different panels .

operations: all the functionalities are invoked in the form of operations, which are units with well-defined sets of inputs and outputs . whenever an operation is called, a dialog is presented to the user to define the set of input objects. the most common scenario is to create a new instance of a certain datatype  or to modify existing instances .



these concepts are used to build the application layer and to construct graphical user interfaces, which intermediate between the user and all the core methods implemented. in figure  <dig>  the architecture of the application is illustrated showing the main datatypes, views and operations, as well as the relationship with the core classes utilized in the implementation. a complementary view is given by figure  <dig>  which provides snapshots of some views and interfaces of the operations invoked when performing simulations and constraints configuration, showing a typical workflow when working with cbfa.figure  <dig> 
functional modules of the cbfa application, including the developed datatypes, views and operations. the bottom box shows an overview of the classes implemented in the core layer.
screenshots of cbfa: a) load model – the first step is to load a metabolic model and a new project will be created and made available on the clipboard of the application. afterwards, it is possible to visualize their information through the available views; b) configure constraints – different type of constraints can be configured through the use of graphical interfaces that enable to set the parameters to create the datatypes to be used on further operations; c) perform flux analysis/knockout flux analysis – the user can select different constraints to perform several flux analysis methods using a metabolic model. it is also possible to configure a set of knockouts and perform flux analysis over the mutant with the same constraints; d) visualization – the results of the operations create/update datatypes on the clipboard, and the output can always be checked through the views that are defined for the datatypes.



a metabolic model is loaded defining a working project, which is the root datatype in the hierarchical organization of the clipboard . the visualization of a selected object is presented on the right side. the structure and content of the visualization depends on the specific datatype, and on the object’s specific information. the hierarchical tree of the clipboard keeps all the results of the operations that are performed during the software utilization, namely datatypes for environmental conditions, flux measurements, flux ratios, and simulation results. results are clustered in the clipboard according to the method used.

all the operations are performed on the scope of a certain project that keeps a single instance of a metabolic model. the other datatypes, such as flux measurements, can have multiple instances, under the same project, and the user can perform different tasks using alternative instances. moreover, in the same running application, it is possible to have more than one project in the clipboard.

operations are made available either on the top menu bar of the application or in a popup menu that is triggered when a right click event occurs upon a clipboard item. in the last case, only the operations that have the selected type as one of its input argument types are shown.

case studies
to illustrate some of the main features of cbfa, two case studies were considered. first, the yeast saccharomyces cerevisiae was investigated through the use of a simplified metabolic model for its growth  <cit> , while in the second one, a genome-scale model of the microorganism escherichia coli  <cit>  was used to perform flux analysis tasks based on optimization methods. in the first case, the aim was to show how the implemented methods for determined systems could be exploited. the model encompasses  <dig> reactions and  <dig> metabolites. the study was performed to analyse the phenotype response obtained by performing a deletion of the fumarate hydratase  <dig> reaction, through a knockout of the fum <dig> gene  <cit> , under aerobic conditions with glucose as the carbon source.

without adding constraints to the model, the system has  <dig> degrees of freedom. after setting the fum <dig> knockout, and adding the uptake and excretion rates given in  <cit> , the configured system remained underdetermined. so, some flux ratios, such as the fraction of phosphoenolpyruvate originating from oxaloacetate and the fraction of oxaloacetate deriving from pyruvate  <cit> , were added. in this way, the system was made determined. thus, it was possible to calculate the intracellular fluxes  through algebraic methods.

in a second case study, to demonstrate how optimization-based methods can be used to investigate flux distributions in gsmms, an analysis was made using the ijr <dig> model for escherichia coli mg <dig>  <cit> . this model contains  <dig> reactions, ,  <dig> internal metabolites and  <dig> external metabolites  are present in the model. the original model has  <dig> degrees of freedom, and, therefore, the system was underdetermined and appropriate for the utilization of optimization-based methods, such as the ones based on linear programming approaches. in this case, the high number of degrees of freedom precludes the use of methods for determined or over-determined systems, as the amount of extra constraints to be added is very large.

to configure the experimental inputs to the analysis, the work from  <cit>  was considered. here, to study the influence of the inputs, the metabolic flux distribution was examined by incrementally adding constraints to the system. analyses were made under aerobic conditions with glucose as the carbon source. the first step was to perform an fba-based method. by analysing the flux distribution, the absolute values for the reactions r_adk <dig> and r_adk <dig> were considered to be too high. r_adk <dig> was also occurring on the reverse direction, making a cycle with r_adk <dig>  after performing an fva analysis, the two reactions had as lower and upper bounds the two extremes of their domains. therefore, a pfba-based method was performed, to minimize the total sum of the flux absolute values and remove this futile cycle. it was possible to confirm that the values for these two reactions changed in comparison to the fba simulation, such that r_adk <dig> changed its direction and r_adk <dig> was set to zero. for the simulations performed in this first step, the only constraint that has been added was an environmental condition to set the glucose uptake rate to  <dig> mmol/gdw/hr. the objective was to maximize growth and the obtained value for the biomass flux was  <dig>  hr− <dig> 

in order to approximate the distribution according to  <cit> , a second step was done, adding external flux measurements for o <dig>  co <dig> and acetate, which resulted in a decrease of the biomass flux to  <dig>  hr− <dig>  however, there were still some differences in the internal fluxes with respect to the published values. therefore, some flux ratios were added and changes were detected in the internal flux distributions, such as the flux of phosphoenolpyruvate carboxylase and atp:oxaloacetate carboxy-lyase. the detailed results  are given in additional file  <dig>  together with some notes on the conditions.

as an illustration of the previous results, in figure  <dig>  the distribution of the central carbon metabolism fluxes in both case studies is illustrated by overlaying fluxes over the network topology. this figure also serves as an example of the visualization capabilities of the tool.figure  <dig> 
visualization of flux analysis results: a) the results of the flux calculation for saccharomyces cerevisiae are illustrated. the flux values were obtained through least squares, since the configured system was determined. the thickness of the arrows is proportional to the flux value of the corresponding reactions, after overlaying the fluxes over the network layout. thin light grey arrows represent reactions with no flux value. b) the central carbon metabolism of escherichia coli is shown with a comparison between pfba-based simulations before and after adding metabolic flux ratio constraints. here, grey arrows indicate reactions where there is no flux in both simulations, while red and green arrows represent reactions for which the simulations with and without flux ratios, respectively, returned flux values. the darker the arrows are, the nearer the fluxes in both simulations.



CONCLUSIONS
although several software tools and applications have been developed and published to perform constrained-based flux analysis, currently none provides the full set of methods to perform flux analysis in a user-friendly way, while many are commercial or based on commercial systems such as matlab. thus, the software application described in this work is complementary to existing ones, since it provides a free, simple and quick way to perform flux analysis, with an extensive portfolio of methods, without all the complexity and specificity associated with experimental data processing. therefore, it is possible to emulate the use of experimental data, by simply setting values  for flux measurements, or to establish flux ratios that may reflect the over/ under expression of certain genes, or to translate the flux activity of a given pathway, for instance, obtained from 13c labelled substrate experiments.

availability and requirements
the software is made available, together with other resources, in the home page given below.

more details:software name: cbfa plugin for optflux

project home page: http://www.optflux.org

methods details and application tutorial: http://www.optflux.org/cbfa

operating system: platform independent

programming languages: java

other requirements: java jre  <dig> .x , glpk

license: gnu-gpl, version 3



additional files
additional file 1: table s <dig>  feature comparison of several software tools for constraint-based methods, including a list of cbfa novel features under the framework of optflux.

additional file 2: 
document with a full description and mathematical formulation of the implemented flux analysis methods.


additional file 3: 
cbfa tutorial.


additional file 4: 
results for the simulations carried out in the first case study: reduced model of
s. cerevisiae
.


additional file 5: 
results for the simulations carried out in the first case study: gsmm of 
e. coli
.




abbreviations
cbfaconstraint-based flux analysis

fbaflux balance analysis

fvaflux variability analysis

glpkgnu linear programming kit

gsmmsgenome-scale metabolic models

guigraphical user interface

lplinear programming

memetabolic engineering

mathmlmathematical markup language

mfametabolic flux analysis

momaminimization of metabolic adjustment

mvcmodel view controller

pfbaparsimonious enzyme usage flux balance analysis

qpquadratic programming

sbmlsystems biology markup language

competing interests

the authors declare that they have no competing interests.

authors’ contributions

rc, pe, pm, mp, ir and mr were involved in the conception of the algorithms. rc, mr and pv were involved in the design and implementation of the software. rc, ir and mr proposed and prepared the case study. rc, ir, jft and mr helped to draft the manuscript. all authors read, reviewed and approved the final manuscript.

the work is partially funded by erdf - european regional development fund through the compete programme  and by national funds through the fct  within project ref. compete fcomp-01- 0124-feder- <dig>  rc’s work is funded by a ph.d. grant from the portuguese fct .

the authors would also like to thank the fct strategic project pest-oe/eqb/la0023/ <dig> and the projects “bioind - biotechnology and bioengineering for improved industrial and agro-food processes”, ref. norte-07-0124-feder- <dig> and “pem – metabolic engineering platform”, project number  <dig>  both co-funded by the programa operacional regional do norte , qren, feder.
