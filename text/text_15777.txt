BACKGROUND
the fact that we humans are very good at extracting information through visual observation is well synthesized in the old adage "a picture is worth a thousand words". the solution of the 3d structure of myoglobin in  <dig> by kendrew  <cit>  marked the beginning of the new era of structural biology. since then, a wealth of protein structures has been solved and today the protein data bank  counts over  <dig>  protein structures  <cit> .

with the availability of all these data, and with the advance of computer graphics  technologies, tools for the visualization of 3d structures were created such as vmd  <cit> , spdbviewer  <cit> , chimera  <cit> , pymol  <cit>  and others. balls and sticks for atoms and bonds, ribbons for the secondary structures, and molecular surfaces are some of the possible representations of proteins. most programs can also calculate surface features such as electrostatic potential  and hydropathy . when present, these features are represented as field lines and/or as ranges of colors.

since the late '90s, the development of cg techniques has advanced at spectacular pace. among the most widely used tools, is the art and science of 3d animation. this technique consists in the creation and animation of 3d objects  in a virtual world, which can be 'filmed' using virtual cameras and lights. several programs are available for this, including the commercial packages maya/autodesk, 3d studio max and softimage xsi , cinema 4d  and the open-source blender  <cit> .

not surprising, all of these have been used for the study and representation of biological molecules and processes. some examples are collected and visible on dedicated websites  <cit> . the films range from the simple representation of the mechanical functioning of a single protein, to complex events involving many subjects such as dna replication and rna processing, to views of major cellular processes, such as apoptosis, etc.. these latter ones are important scientific efforts and add to their educational value the bonus of rising interest in the general public to approach biology.

for our purpose we use blender, an open-source, free, cross-platform 3d application. blender is a powerful instrument for 3d modeling, animation, gaming and rendering, that provides a complete workbench for producing still images, simple animations or very complex scenes with thousand of objects in motion, all textured, lighted and filmed for proper view.

traditionally, the process of creating a 3d animation film consists of a number of steps roughly grouped in modeling, animation, rendering, special effects and compositing. blender offers a platform to elaborate and integrate all of these steps. objects are created in the virtual world by modeling them in the 3d scene starting from primitives or by importing them from other programs. a time line holding key frames  is used to animate the objects in the scene in various ways: by direct rotations/translations of the object, by mesh deformation obtained moving its components , via skeleton  or by using the game engine , typically deployed in video games. additionally, physics-based animations can be achieved by simulated forces such as gravity, magnetic, vortex, wind etc. objects are given a surface appearance by the use of material shaders and textures. these two elements define the behavior of the surface when illuminated, by specifying local information like color, reflectance  and microstructure .

once the animation and texturing is defined, the scene is equipped with other assets such as a background, lights and cameras and the process concludes with the 'filming' .

in this article, we illustrate a step forward in the direction of using bio-animation both as a divulgation and as a discovery tool. our aim is to visualize molecules in a directly informative way, also showing their motion obtained from structural data . this task is done using bioblender  <cit> , in which blender is used to access several scientific programs. bioblender is an engine built in blender with an interface for biological visualization .

the use of blender ge to elaborate the movement of proteins, starting from  <dig> or more conformations is described in zini et al. . briefly, starting from data from nmr collections or x-rays of the same protein crystallized in different conditions, we use blender ge, equipped with special rules approximately simulating atomic behavior, to interpolate between known conformations and obtain a physically plausible sequence of intermediate conformations. this sequence is output as a list of pseudo .pdb file  which are the basis for the visual elaboration described here.

as the result of this study, we propose a new visual code for the representation of two important surface properties: electrostatic potential  and molecular lipophilic potential . using features different from color permits their simultaneous delivery in photo-realistic images leaving the utilization of color space for the description of other biochemical information. here we describe the details of this process.

methods
programs and scripts
bioblender is an extension of blender, in which custom python scripts have been implemented for building the interface, importing the meshes and the curves, converting mlp values into vertex colors and managing various scientific programs .

in the construction of bioblender, we have made ample use of several existing programs, listed here.

blender  <dig>  is a free, open source, cross platform suite of tools for 3d creation  <cit> .

pymol  <dig> r3pre is a python-enhanced molecular graphics tool  <cit> , used for visualization of .pdb files. it calculates the electrostatic potential through apbs plugin. this tool is also used to generate the 3d mesh of the molecular surface for the molecule. the obtained geometry is exported in .wrl format, easily read by 3d software tools.

pdb2pqr- <dig> . <dig>  <cit>  is a software package that automates many of the common tasks of preparing structures for continuum electrostatics calculations, providing a platform-independent utility for converting protein files from pdb format to pqr format. it assigns partial atomic charge to every atom according to different force fields  and saves a .pqr file in which the occupancy and temperature columns are replaced by atomic charge and radius, respectively. it also adds missing hydrogens, calculates pka values and generates an input  for apbs calculations. the .in file stores information on the 3d dimension of the protein, the ionic concentration of solvent, biomolecular and solvent dielectric constants. ionic concentration of  <dig>  mol/l nacl, biomolecular dielectric constant of  <dig> and solvent dielectric constant of  <dig>   were used for our calculation.

apbs- <dig> . <dig>   <cit>  is a software for evaluating the electrostatic properties of nanoscale biomolecular systems, through solution of the poisson-boltzmann equation. apbs takes as inputs a .pqr and an .in file and calculates the electrostatic potential in every point of a grid in the protein space, which is output as a .dx file.

scivis.exe is a custom software written in c++ used to calculate the field lines and to export them in a ascii file to be imported in blender. this tool imports the 3d surface  and the ep grid  calculated by apbs. the computation of the field lines is a multi-step process: ep values are mapped on the 3d surface, a gradient field is calculated in the volume containing the molecule, an automatic selection of areas with high values of ep is done and the corresponding field lines are computed for these areas using the gradient field. when used as primary application, in addition to the described features, scivis.exe provides visual feedback for all its processing steps. it is possible to visualize the molecular surface, the ep grid, the gradient grid and the field lines.

python  <dig>  is an interpreted, interactive, object-oriented, extensible programming language  <cit> . in this project, python has been used in different stages, both as a scripting component of various software tools  and as a stand-alone scripting language.

pymlp.py is a python script written and kindly provided by julien lefeuvre ; it contains a library of atomic lipophilic potential for all atoms present in proteins  and it calculates the mlp in every point of a grid in the protein space according to various formulae such as fauchere, dubost, brasseur, etc. . the grid step can be changed by the user to cope with the protein size and computer performances .

RESULTS
we present here a software/method to produce the simultaneous visualization of ep and mlp on proteins. in the case of moving proteins, the program produces a rendered animation, in which every second of the resulting movie contains  <dig> images , and at every frame the shape, ep and mlp of the molecule are automatically recalculated.

in the elaboration of each frame representing proteins, still or in motion, the steps of object  creation, surface calculation and data manipulation for ep and mlp are elaborated independently using both scientific and cg programs to obtain the series of frames compositing the animation .

protein surfaces
the molecular surface of proteins  <cit>  is calculated in pymol starting from the .pdb file, as shown in figure  <dig>  upper left. for series of conformations , the procedure is reiterated. pymol was chosen because the surfaces created by this software have a regular triangulation even at low polygon resolution and it is only marginally afflicted by the problem of internal disjoint surfaces. in the 3d mesh used in the example reported in figure 5a and in other tests with wider range of dimensions , all the triangles have similar areas. the mesh is exported by pymol as a .wrl, a file which contains information about the position of the vertices, edges, characteristics of the material of the polygon etc.

mlp calculus
the mlp calculus  is done using pymlp.py  <cit> . this script calculates the lipophilic potential in every point of a grid in the space of the protein and exports the values in a .dx file. the script contains a library of atomic lipophilic potential values for every atom based on its chemistry, and several formulae for mlp calculation. however it does not support the testa formula  <cit> ,

 mlp=∑ifie-|r-ri| <dig> 

where r is a point in the protein space, fi is the atomic lipophilic potential for atom i, and ri is the position of atom i.

the testa formula is an atom-based function that uses the broto  <cit>  fragment scheme and an exponential distance function, appropriate for protein calculations; therefore we modified pymlp.py to include testa formula. the mlp accuracy depends on the grid spacing ; in bioblender the default is set at 1Å, a dimension comparable to the mean size of the triangle edge of the 3d mesh; this parameter is a good compromise between mlp data, mesh triangulation, computer memory and time for calculation .

pymlp outputs a .dx file in which the header defines the grid origin, the grid step and the number of points on each axis.

mlp rendering
the code for the representation of hydropathy that we propose is a range of optical features that go from smooth-shiny surface  to rough-dull , as shown in figure 5c.

data elaboration for rendering is done in a series of steps :

 <dig>  mlp values mapping on the mesh. the mlp values  are mapped on the surface of the molecule by assigning values of mlp to the mesh. the algorithm  is simple: for every vertex of the mesh, the correspondent grid-cell, in the mlp grid, is identified and the value of potential is calculated using trilinear interpolation and assigned to the vertex.

this process is very fast  and the mesh vertex density is high enough to represent smoothly the potential spatial transition. the information about the mlp values corresponding to every vertex are stored in the v field of an .obj file as texture coordinates .

 <dig>  mlp values conversion into vertex colors. mlp values  are converted into vertex colors, assigning the same value for each rgb channel, to obtain levels of gray). for the conversion we normalize the range of the mlp values  to the range of gray scale , and set value  <dig> of mlp to correspond to the value  <dig>  of the gray scale. in this way the hydropathy of the protein is visualized in blender as levels of gray: bright areas representing hydrophobicity and dark areas hydrophilicity . the use of the default conversion scale provides a coherent representation for all proteins; however, at this step, to enhance mlp features for any particular protein under study, the user can modify contrast and brightness using sliders .

 <dig>  creation of the first image texture. the mesh is unwrapped to generate a texture parametrization and the per-vertex color values are saved  in a texture image. uv unwrapping is a procedure that consists in flattening a 3d object  on a 2d plane , so that each vertex of the 3d mesh is assigned a correspondent 2d texture coordinate  <cit> . the 2d image is also called image texture or uv map, where u and v are the texture axes.

 <dig>  creation of the second image texture. in order to make the more hydrophilic areas rough the procedure involves the addition of a noise pattern of amplitude proportional to the degree of gray of the texture. this is achieved using the node editor of blender, adding a gaussian noise to the texture image, which produces an image with a strong noise over the black regions, gradually reduced on gray regions to reach a level of no noise on white. in the rendering process this noise is converted to bump, as explained below.

 <dig>  addition of specularity and roughness. in the final rendering step, the image obtained in the first step  is finally mapped on specularity from dull to shiny, and the second image is mapped on bump. bump mapping is a rendering technique generally used to represent very small scale geometry like scratches, roughness or graininess. this technique does not affect the geometry of the object: the perceived local geometry is only an optical effect obtained by light reflection modifications. in the final image hydrophobic areas are represented as reflective and smooth, while the more hydrophilic ones as duller and rougher . by avoiding the use of color, as well as of gray scale, the differences in color are only due to the effect of light interacting with the surface, i.e. the darker areas are the least illuminated.

ep calculus
while the use of movies is mostly intended to show transition between conformations of a protein, it also allows the introduction of special effects of cg to convey other information. we have elaborated the following procedure using both bioblender and external programs to display the ep associated with molecular  charges . all programs are accessed through bioblender interface, also used to set specific parameters.

the .pdb file used for mesh creation and mlp calculus is submitted to pdb2pqr program  <cit>  which outputs  <dig> files: .pqr and .in. these files store information on the size and charge of every atom, and on the dimensions of the protein, the ionic concentration, biomolecular and solvent dielectric constant, respectively. both .pqr and .in are input files for apbs program  <cit> , that calculates the electrostatic potential in every point of a grid in the space of the protein and exports the values in a .dx file, analogous to the one seen above for mlp. the force field, the ion concentration and the grid spacing can be set by the user .

ep is redrawn as field lines calculated by a custom software, scivis.exe, that combines information from the mesh file  with ep values . this computation comprises different steps:

 <dig>  mapping ep on the surface mesh

 <dig>  transformation of the grid of ep values into a grid of gradients

 <dig>  selection of more active surface areas by weighted monte carlo sampling

 <dig>  drawing of field lines that are stored in a .txt file

the ep values are mapped on the surface of the protein by assigning a value of ep to every vertex of the mesh, as seen above for mlp, i.e. trilinear interpolation.

a grid of gradient vectors is built starting from the scalar field of ep values: for each point the gradient is calculated according to the values in neighbor points, finding the direction and slope of ep change.

the gradient data are used to generate the field lines in the space surrounding the protein. from the infinite possible lines, we are interested in generating a 'meaningful' subset comprising the lines associated with areas of the mesh with high value of ep, obtaining a distribution of lines that is proportional to the surface ep value: more lines will rise in the more electrically active areas, and the total number of lines will be proportional to the global level of potential of the molecule. this selection is done by monte carlo sampling weighted with respect to the potential value of the surface in each area.

for the selection of this subset, the user has two controls : the absolute ep value on the surface from which the creation of the field lines starts  and a parameter that represents the general line density . by modulating this parameter users can select the most appropriate value for a group of proteins, obtaining a concentration of field lines which is coherent across the various proteins.

once the 'interesting' locations  are selected, the lines are calculated by following the gradient in both directions, iteratively moving with small steps according to the gradient . line points are added until one of the following three conditions is met:  <dig>  the limit of the calculated grid is reached,  <dig>  the line intersects the mesh or  <dig>  the field is too low . the lines are saved as sequences of points in an ascii file .

thanks to the random nature of the selection procedure, lines do change every time the procedure is run but the more electrically active areas  are readily identifiable. this property proves to be particularly effective when represented in animation, since it gives the idea of fuzziness, useful for electricity representation, while conveying the information about ep distribution on the surface.

in the case of calmodulin, depicted in figure  <dig>  and even more evident in the webgl animated representation, most lines are directed towards the surface, due to the fact that the protein is slightly acidic, with an isoelectric point of  <dig> .

ep representation
field lines are imported into blender as nurbs curves which are not rendered , but instead are used to guide a particle effect. every curve starts at its most positive end which is associated with a particle emitter. the particles, drawn as short segments, flow along the curves from positive to negative, respecting the field lines convention in physics. during animation, the particles are generated every  <dig> frames  and have a life-time of  <dig> frames . this means that the system is in steady state after the sixteenth frame . representation of ep as moving particles on a trajectory, played in time, is interpreted easily and transmits the idea of polarity of the charged areas of a biomolecule.

if the user is interested in visualization of only one conformation, the animated particles are displayed/played in loop .

moving proteins
in the visualization of proteins in motion, every frame is elaborated as a single .pdb file. because at every frame the atomic coordinates change, also the surface features  change accordingly, and must be recalculated. due to extremely high-level modifications  it is not possible to use a single geometry and animate it through conventional tools. it is instead necessary to rebuild the surface geometry, importing a new set of mesh coordinates at each frame. this implies a very large amount of calculations, but allows the elaboration of a sequence of images that is coherent from frame to frame, thus giving the impression of continuity.

in summary, for each frame  we visualize mlp as textured mesh and ep as curves and animated particles. the result is a sequence of frames showing the moving protein with its properties, ep and mlp, represented together: mlp as a range of visual and tactile characteristics and ep as flow of particles that move from positive to negative along invisible field lines .

discussion
the description of biological phenomena has always made use of graphical presentation, starting from the early botanical and zoological drawings, including famous anatomical folios, that greatly help viewers, professionals and not, to understand and learn about nature.

since the early times, an artistic component has been included, often unnoticed by viewers, but greatly exploited by the scientists/artists. even today, the clearest graphical descriptions of natural and artificial subjects are hand-or cg-drawn rather than photographic images. the 'artistic' dimension allows for a better interpretation of the subject, the choice of illumination, and the removal of irrelevant details and disturbing effects.

the same attitude has motivated a number of scientists to use various graphical tricks when showing data related to structural features of macromolecules. although most structural information contained in a .pdb file  is actually 'readable', biologists typically use graphical programs to explore protein structures; indeed the literature has an abundance of such programs, including some very popular. these programs can transfer the structural information from a linear list of atoms to a 3d virtual space and display it on 2d surface; positional information is interpreted with the aid of chemical information stored in libraries , that introduce chemical bonds, electric charges, hydrophobicity scales and so on. in this way the user is enabled to observe features of the molecules of interest according to her/his needs. recent years have seen the development of 3d computer graphics techniques that have culminated in the recent success of the blockbuster movie avatar, in which an entire world has been created in cg, including 'floating mountains' and forest with thousands of  plants, animals, insects etc.

similar techniques can be used to show the nanoscopic world of cells, populated with all sorts of environments, proteins, nucleic acids, membranes, small molecules and complexes. indeed, there are several remarkable examples of efforts in this new discipline of bio-animation, some of which have reached a large public. beside the beauty and the educational value of these animations, we consider that the very process of creating such movies includes a heuristic importance both in the development of the graphical instruments and in the studies implied in the elaboration of the subjects'  movements and interactions. in fact, when a researcher is induced to take a different point of view, such as needed for the visual elaboration, s/he will be exposed to possible new insight, facilitating better understanding of the process under study. in this way a novel spatial reasoning can complement the classical biochemical reasoning typically employed in molecular research.

our group is among those involved in the development of animated biology, and in this paper we report one aspect of such effort, namely the elaboration, using blender, of a code capable of showing two of the most critical features that determine the behavior of macromolecules: their electrostatic and lipophilic potentials.

choice of blender
among the professional packages developed for cg, one only has the double advantage of being open source and available free of charge: blender.

blender is the result of a world-wide, concerted effort to put tools of the highest standard for cg creations at the reach of any artist  regardless of her/his capability of paying for such tools. the project is guided by the non-profit blender foundation, and animated by countless developers that voluntarily devote time and effort to constantly introduce the most up to date techniques into the package, equipping users with any instrument they need. blender  <dig> , the latest major release, introduced a new design of the user interface, new physics engine for smoke , particles and soft bodies, and, importantly, the possibility to achieve all blender's functions from scripting, through apis.

bioblender
on the framework of blender  <dig> , we built bioblender, which includes a section specifically built for biological work. inside bioblender, for the analysis of proteins structures, various types of visualization are available: alpha carbon, main chain, main chain and side chains, all atoms  and molecular surface. the elaboration of proteins' motions and the simultaneous representation of surface physico-chemical properties of proteins in motion are the innovations that bioblender introduces in macromolecular visualization.

elaboration of protein motion
we use blender game engine to elaborate the movement of proteins, when more than one conformational state is known. starting from data from nmr collections or x-ray of the same protein crystallized in different conditions, we use blender ge, equipped with special rules approximately simulating atomic behavior, to interpolate between known conformations and obtain a physically plausible sequence of intermediate conformations. this sequence can be explored within blender or can be output as a list of pseudo .pdb file  which are the basis for the visual elaboration.

it is important to notice that this procedure can be applied to any .pdb or  sequence of .pdb files representing a continuous series describing a conformational transition, obtained by blender or by any other means, e.g. molecular dynamics simulation.

visualization of moving proteins, and of their molecular surface features
the development of structural biology that made available tens of thousands of structures, not only improved our knowledge on structural features such as the richness of protein folds , and of their association in groups . it also increased knowledge associated with protein motion: in fact most proteins exert their function through some kind of motion. this is best understood by observing the movement in an animated film. the role of side chains, which are the determinants of such motions, is at present difficult to appreciate by using present visualization tools that either provide a fixed all-atom structure, or show dynamically only a limited number of atoms.

we present here a procedure that allows the direct observation of moving proteins focusing on their surface features, rather than on their structure. in particular, we have focused on hydropathy and electrical fields as they appear on and around the molecular surface.

these features can be calculated and visualized by a number of programs, which typically display them with a color code. we reasoned that for these properties a more 'photo-realistic' display would help viewers in the de-codification of their meaning, and elaborated the system here reported. example of the use of these codes can be seen for a single protein in the proteopedia page  <cit>   and for a complex in our movie protein expressions - study n <dig>  <cit> .

the main idea of the proposed visual mapping is to exploit perceptual associations between the values to be mapped and visual characterization of real-world objects. ideally, by using already established perceptual association, the viewer will be able to understand the provided information more naturally, without the use of explicit legends. for mlp mapping, two opposite surface characterizations able to convey a sense of affinity to water or to oil were selected. in our real-world experience, a very smooth, hard surface  is completely impervious to water but can be easily coated by oil. the opposite visual feedback is associated to grainy, crumbly, dull surfaces  which can be easily imagined being soaked in water. these considerations led to the 'painting' of highly hydrophobic areas as shiny, smooth material and of highly hydrophilic areas as dull and rough.

while the mlp value is only observable on the surface itself, electrical phenomena are associated to the idea of an effect projected in the volume surrounding a charged object, and able to affect other objects . field lines are a common way to describe the effect of the electrical field. ep value is therefore represented by showing small particles, moving along the path defined by field lines, visualizing a high concentration of particles in areas where the electrical field is stronger.

the representation of both features in black and white allows the viewer to grasp their values, without distracting with arbitrary information which is not interpretable if not associated with a de-coding legend, making it easier to interpret.

for mlp elaboration we considered that none of the available programs are accurate enough to provide useful information: most molecular displaying packages simply attribute a fixed value of mlp to every atom of a given amino acid, using the kyte-doolittle scale  <cit> . this scale was elaborated almost  <dig> years ago with the aim of identifying structural features of proteins, namely the interior portions of globular proteins and membrane spanning segments in membrane associated proteins, but is not indicated for the evaluation of the distribution of mlp on the molecular surface. indeed, some other programs include a more appropriate method of calculation, such as vasco  <cit>  which employs the brickman  <cit>  formula on an atom based library and a fermi-type distance function. we have implemented a calculation with the testa formula, which uses an atom-based fragment scheme and an exponential function. the values thus obtained are plotted on the vertices of the molecular surface. this procedure results in a very smooth distribution of mlp values which is then displayed with a scale of 'tactile' textures, ranging from dull-rough to shiny-smooth. the advantage of such calculation and representation is mostly noticeable in animated movies showing the transition between different conformation of proteins, when patches of hydrophobic areas are gradually exposed on the surface of proteins which will facilitate docking onto other macromolecules.

for ep, we developed a visual code based on a flow of particles  flowing towards the negative pole: this is particularly useful for the observation of interacting molecules and for molecules whose field is changing when the conformation changes. to elaborate ep we made use of several programs and integrated them in a flow whose final result is the continuous display of the ep and its development during protein conformational transitions.

time considerations
the entire process is very fast: a protein of  <dig> atoms is imported in  <dig> sec, while mlp and ep computation with grid spacing  <dig> Å take  <dig> and  <dig> seconds, respectively, on a standard personal pc equipped with windowsxp, intel core 2duo cpu,  <dig>  ghz,  <dig>  gb ram.

our example is calmodulin: after activation due to the binding of  <dig> calcium ions, the protein undergoes a major conformational transition in which both its ep and its mlp change considerably: the ca ions introduced in the  <dig> ef hand domains affect the ep by virtue of their own charge and the mlp by inducing the opening of each globular domain to expose two major hydrophobic patches which enable the protein to interact with its partners and push the calcium signal downstream in the biochemical pathway.

proteins and their surface properties can also be visualized in a 3d interactive way on web platform exploiting the new webgl component of html <dig>  using this api, it is possible to display 3d content in a web page without the use of external plug-ins, by writing an appropriate visualization program using the opengl syntax. using a javascript support library, spidergl  <cit> , we built an interactive visualization scheme  <cit>  which accepts as input the same data  calculated by bioblender.

CONCLUSIONS
in conclusion, we have developed a computational instrument that allows the display of molecular surfaces of moving  proteins, putting special emphasis on their electrical and lipophilic properties. we consider that this representation allows better  understanding of the dynamical forces governing intermolecular interactions and thus facilitate new insights and discoveries.

abbreviations
ep: electrostatic potential; mlp: molecular lipophilic potential; ge: game engine; cg: computer graphics; 3d: three-dimensional.

competing interests
the authors declare that they have no competing interests.

authors' contributions
rma performed research, wrote and tested software; mc, mfz, gm contributed programming; mc, mcp contributed scivis.exe and bioblender interface, respectively; tl, mz contributed visual elaboration with blender; mz conceived research; rma, mz wrote paper.

supplementary material
additional file 1
calmodulin in motion. the movie  shows several transitions of calmodulin in the apo form  and the major conformational change induced by the binding of  <dig> ca ions. the movie can also be seen online at http://proteopedia.org/wiki/index.php/calmodulin#calmodulin_in_motion.

click here for file

 acknowledgements
we thank the pdb2pqr, apbs, pymol teams, late warren delano and the blender users and developers community for kind answers to our many questions. work funded by regione toscana grant 'animazione 3d' to mz.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2012: italian bioinformatics society : annual meeting  <dig>  the full contents of the supplement are available online at http://www.biomedcentral.com/1471-2105/13/s <dig> 
