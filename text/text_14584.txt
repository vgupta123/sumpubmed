BACKGROUND
life sciences are experiencing an increasing demand for scientific image processing. images are the primary data of developmental and cell biology. the number of images is exploding with the availability of high-throughput and high-resolution technologies. the acquisition of large three-dimensional  data sets, often as time series , has become the new standard.

the first step in the analysis of biological image data is its visual inspection. in addition to the general requirement for visualization, the unique characteristics of each data set may demand specialized analysis. the development of novel analytical tools is greatly facilitated by the existence of well-documented software libraries. these libraries must provide  means to load and save any of the large diversity of image file formats;  implementations for computer vision algorithms; and  graphical user interfaces for data access by a human operator.

we have identified a lack of accessible 3d/4d visualization software libraries for biological image processing. numerous image processing packages exist, either commercial  or open source . these packages offer excellent solutions for the specific problems they were designed to solve. while end-users benefit from well-documented, special-purpose commercial applications, the development of custom analytical tools is better handled by open source packages. the application programming interfaces of existing packages range from the non-existent for most closed commercial solutions, to the very detailed and comprehensive open source vtk environment.

we have created a software library for 3d/4d visualization, with functions for surface extraction, volume rendering and interactive volume editing. our library removes all the complexity of creating and interacting with image volumes and meshes in a 3d environment. we have designed our library to enrich the core functionality of imagej , an open source image processing application. via imagej, our library has access to hundreds of biological image file formats. over the years, the scientific community has contributed a very large number of imagej extensions, known as plugins, which provide readily accessible implementations of numerous computer vision algorithms. with our library, we empower the imagej scientific community to rapidly implement custom analytical tools for 3d/4d data sets, with a minimal investment of time and resources in handling the complex details of a hardware-accelerated 3d environment. this reduction in the difficulty of visualizing 3d information commoditizes the usage of a 3d scene. for example, our library enables software developers to visually assess the correctness of individual algorithmic steps, such as the 3d shape of a mesh deformation. the simplicity of our library is in stark contrast to existing libraries such as vtk, which require detailed knowledge of the underlying data structures.

an example application in need of effective 3d visualization is the image volume reconstruction from electron tomography data as provided by tomoj  <cit> , an imagej plugin. our library complements tomoj, enabling convenient 3d analysis of the results without the need of external software such as chimera  <cit> . many other plugins for image registration or object segmentation are similarly using our library for integrated and interactive 3d visualization.

implementation
our software library implements the concept of three-dimensional scene  for the interactive visualization of biomedical image data . the 3d scene is a virtual 3d space in which any number of entities are hosted. these entities are volume renderings, isosurfaces and orthoslice sets. volume renderings are representations of voxel data viewed from arbitrary angles, with transparency determined by the intensity values. isosurfaces are meshes of triangles described by a list of vertices. orthoslices are orthogonal planes that cut through an image volume. each of these entities, or objects, has a number of properties, such as transparency, color, and a unique name. the 3d scene that hosts all objects has the following properties: a zooming level, an origin of viewer coordinates, and a scene background.

for efficient rendering in computer graphics, we chose java 3d: a low-level hardware-accelerated software library. java 3d has the further advantage of being implemented for java, thus enabling java applications like imagej to interoperate with the graphics card of a computer, via either opengl or directx low-level native layer. java 3d provides a fine-grained representation of a virtual scene as a directed acyclic graph  <cit> . operations on any node of the graph affect its entire subtree. in practice, this means that, for example, zooming in and out of a scene is expressed as a scaling transformation in a low-order node. high-order nodes encapsulate images and meshes.

a key feature of our library is to substantially simplify the usage of java 3d. we define our 3d scene in terms of java 3d nodes . we provide straightforward means to instantiate a new interactive 3d scene and to add objects to it. in the following, we describe the structure of the scene graph as implemented in our library.

introduction to java 3d library nomenclature
java 3d provides a collection of object templates, referred to as classes, each of which represents a node of the scene graph. the most relevant classes are:

• branchgroup: a node capable of being the root of several subtrees.

• transformgroup: a node that transforms the spatial representation of its enclosed subtree.

• switch: a node to toggle on and off the visibility of its subtree nodes.

• shape3d: a node representing a displayable object. the visualization of a shape3d is specified by its appearance and geometry.

• geometry: defines the geometry of the corresponding shape3d, i.e. its vertex coordinates.

• appearance: defines several attributes of a shape3d regarding its visualization, such as color, transparency and texture.

core classes of the library
our library is composed of about ten different modules. we review here the core module, named ij3d, which interacts with all other service modules. an overview of the module structures and their member classes is shown in figure  <dig> 

the core ij3d module contains two principal classes, namely content and image3duniverse. the content class is a high-level representation of a single element in the 3d scene, such as a volume rendering or an isosurface. the image3duniverse  represents the 3d scene itself;  provides simplified access for adding, editing, selecting and removing content instances to and from the scene, and  controls the view transform that represents zooming and panning. via its superclass defaultanimatableuniverse, the image3duniverse also provides methods for 3d animation and recording movies.

in addition to data elements, the 3d scene can also contain analytical elements such as annotations in the form of named landmark points. these are added either interactively, or programmatically by accessing a content instance.

as mentioned above, all elements of the 3d scene are related in a graph structure. our constructed java 3d graph links image objects  by wrapping them in contentnode objects. the latter extend the functionality of basic java 3d branchgroup class, to serve as high-level scene elements. the contentnode class is abstract; the four classes voltexgroup, meshgroup, orthogroup and customnode respectively represent volume renderings, surface renderings, orthoslices and custom geometries.

in summary, our library provides the means to instantiate a 3d scene with a simple user interface for interactions such as zooming, panning, editing objects and recording movies. programmatically, the task of adding content to the scene has been reduced to a handful of lines of code , which is in stark contrast with the hundreds of lines of code required to achieve the same result using java 3d directly.

RESULTS
features
we outline the features of our 3d visualization framework. we then describe its usage via both a graphical user interface   and an application programming interface  .

the 3d scene
the 3d scene is a virtual 3d space in which image volumes and meshes are displayed. biological image volumes in the form of stacks of 2d images are shown within the 3d space in one of three ways: as a volume rendering, a mesh, or an orthoslice set. volume rendering  <cit>  is a technique for displaying image volumes directly. an arbitrarily-oriented image volume is projected to the screen with a transfer function such that dark pixels are more transparent than bright pixels. meshes are constructed by applying the marching cubes algorithm  <cit>  to image volumes to find a surface that encloses all pixels above a desired threshold value. finally, orthoslices represent three perpendicular and adjustable planes that cut through the volume. an example of each type is shown in figure  <dig>  the 3d scene is capable of simultaneously hosting multiple image volumes, meshes and orthoslice sets. each represented image volume has several adjustable attributes such as color, transparency and a local 3d transformation.

the toolbar
imagej's toolbar offers a collection of region of interest  tools. closed rois, like rectangles, ellipses and polylines are used for interacting with image volumes . the point tool adds 3d landmarks, which are represented as small spheres.

volume editing
programmatically, our library provides access to the values of all voxels in an image volume. changes to voxel values are propagated to the screen. we use this feature for simulating the dendritic growth over time in the thorax of a fruit fly drosophila . more material about this aspect is available in form of source code  and a movie .

additionally, volume editing is possible interactively: the representation of an image stack in a 3d window enables 2d regions of interest to be projected across arbitrary axes of the volume. this enables what we refer to as "3d cropping", which consists of setting all voxels in the image volume that fall within the projected 2d region of interest to a particular color, typically black. we use 3d cropping to remove arbitrary parts of an image volume to inspect regions deep into the volume .

annotation in 3d space
the 3d scene can display landmark annotations for each image volume. these are added using the point tool. existing landmarks are listed in a table that allows the manipulation of their properties, such as name and color. each image volume hosted in the 3d scene may have an associated set of 3d landmarks of this type. a set of landmarks may be stored in a file for analysis, and reloaded in subsequent annotation sessions.

landmark-based 3d rigid registration of image volumes
two sets of homonymous landmarks positioned over two corresponding image volumes can be used for estimating a rigid transformation model  <cit>  . using this model, one image volume can be aligned onto the other. the "transform" menu offers options for exporting the transformed image volume as an image stack suitable for further processing with imagej.

animation and recording
the 3d viewer offers an option to record a 360-degree rotation of any 3d scene. additionally, a recording mode is available. when this is activated, every manual rotation, translation and zooming of the display or any of its elements is recorded; when stopped, the recording is displayed as an imagej stack. recordings may be output as videos via imagej.

custom content
beyond the three basic image volume display types , the 3d scene accepts custom-crafted meshes. these meshes are typically generated programmatically, such as by automatic segmentation of image stacks.

4d visualization
time-lapse recordings of 3d data sets can be loaded and visualized in the 3d scene. standard command buttons for play, pause, fast-forward, etc. control the time point displayed in the viewer. interactive zooming, rotation and panning are enabled as the time sequence progresses. when paused, the visualization of the current time point may be annotated, interacted with and measured as with any other 3d scene.

usage as a gui application
our 3d visualization library includes a fully-functional plugin for imagej named "3d viewer". the plugin is listed automatically in imagej's plugin menus. when executed, the plugin creates a new 3d scene, and automatically offers a dialog for displaying any open image stack as an image volume. the dialog provides the means to alter the attributes of the image volume, such as its representation type  or orthoslices), and its color and transparency settings. the menu of the 3d scene window offers options for inserting further image volumes and editing, annotating and transforming them. extensive documentation is available online http://3dviewer.neurofly.de, along with video tutorials and a 'frequently asked questions' section.

usage as a programming library
our framework exposes a public api to allow applications to integrate its features. a basic example demonstrates the use-case of visualizing in 3d an image volume and a mesh . the example illustrates the development of an image segmentation algorithm, which extracts the boundary of the structures of interest as surfaces and represents them as a mesh composed of triangles. first, the image volume is rendered as orthoslices. then the surface is displayed.

the first step is to instantiate an object of the class image3duniverse. then we call its show() method, which creates a window to interact with the 3d scene. the scene graph is setup automatically.

image3duniverse univ = new image3duniverse;

univ.show();

next, the image volume is loaded. we display it as orthoslices in the 3d scene by calling the addorthoslice() method:

imageplus imp = ij.openimage;

content c = univ.addorthoslice;

alternatively, instead of addorthoslice(), addvoltex() or addmesh() could be used to display the image as a volume or isosurface rendering, respectively.

if we assume that there exists an external method createvertices() that creates a list of points describing the vertices of the surface, and that three consecutive vertices define a triangle, the following source code shows how to create a custom triangle mesh and add it to the scene:

list<point3f> vertices = createvertices();

custommesh cm = new customtrianglemesh;

univ.addcustommesh;

the result looks similar to figure 5b, which shows a confocal image of a fly brain together with parts of the surface of the medulla and the lobula .

another api example illustrates a simulation of dendritic growth . the source code uses direct edits of the volumetric data to represent the growth over time. documentation in the form of source code examples is available online at http://3dviewer.neurofly.de, in the developer howtos category. the documentation demonstrates in a tutorial style the available functionality of our framework.

discussion
numerous imagej-based applications currently use our 3d visualization library. we briefly discuss below how three key applications use our library, illustrating the breadth of functionality we provide. we then conclude with future perspectives considering new demands for image processing and visualization in biomedical research.

the simple neurite tracer  <cit>  is an imagej plugin for semi-automated tracing of neurons in 3d image data. the application provides semiautomatic segmentation of filament-like structures such as neural arborizations and blood vessels. a starting point is chosen and then the filament is auto-traced up to a desired end point. the traced 3d path is visualized using components of our framework . this example demonstrates how an analytical tool for measuring complex 3d structures can be augmented with 3d visualization capabilities to display those objects.

an algorithm has been developed for registering images of a 3d sample, where each image volume represents a different angle of view obtained by single plane illumination microscopy  <cit> . the implementation of this complex algorithm required the 3d visualization of intermediate and final image registration steps. our library enabled the algorithm developers to generate the required visualizations with very little effort .

trakem <dig> is an imagej plugin for visualization, analysis, segmentation, reconstruction and registration of very large 3d image data sets obtained by serial section electron microscopy  <cit> . trakem <dig> makes extensive usage of our framework for interaction with the 3d representation of image volumes and segmented objects of interest. the development of our library empowered trakem <dig> developers to plan and design for 3d interactive features that would not have been possible otherwise. reciprocally, the high-performance requirements of trakem <dig> drove implementation of parallel processing strategies for isosurface extraction and mesh composition in the 3d scene.

the interaction of our library with other software packages, each with specific requirements, promotes the development of new features and improves performance. these improvements then propagate back and enhance other imagej applications. detailed information about the use of the program and downloadable example code are available on our web page at http://3dviewer.neurofly.de.

the advent of high-throughput microscopy has increased the number and size of biological image data sets in need of analysis. the acquisition of 4d data, such as from laser-scanning fluorescent microscopy of cells moving through space, has become commonplace. interactive data analysis of 4d data sets for object motion tracking is in increasing demand. our framework contains all the key ingredients for 4d visualization and 4d data representation. for the near future, we will target the addition of convenient analytical tools that consider the time dimension. the ease of use and open source nature of our library enables the development of custom solutions for the highly specialized needs of biomedical image analysis.

CONCLUSIONS
in this paper, we introduced a new high-level 3d visualization framework for imagej. the framework provides an interactive 3d scene for image volume visualization, annotation, segmentation and transformation. for programmers, it offers the means to trivially augment the capabilities of their custom applications with hardware-accelerated 3d visualization. the framework has been very well received by the imagej user and developer community, and is currently in use by numerous imagej-based applications.

availability and requirements
project name: imagej 3d viewer

project home page: http://3dviewer.neurofly.de

operating systems: platform independent

programming language: java and java 3d

other requirements: imagej

any restrictions to use by non-academics: none

a jar archive containing the software  can be downloaded from the project home page, following the download link. java 3d is available from https://java3d.dev.java.net and imagej from http://rsbweb.nih.gov/ij. the easiest way to set up these components is to install fiji http://pacific.mpi-cbg.de, which bundles these dependencies and the software we present here. additionally, a movie demonstrating its basic usage is provided as additional file  <dig>  and the software in its current state as additional file  <dig> 

authors' contributions
bs designed and wrote the main body of the library. js implemented numerous algorithms such as for image transformation and registration. ac implemented the parallelization of image volume processing and improved the graphical user interface. ml implemented segmentation algorithms and worked on the public api. mh identified the need for the library and coordinated its implementation. all authors read and approved the final manuscript.

supplementary material
additional file 1
supplementary material. top, demonstration of landmark selection in two different adult drosophila brains, for the purpose of landmark-based image volume registration. bottom, source code example implementing the dendritic growth simulation shown in figure  <dig> of the main manuscript.

click here for file

 additional file 2
direct volume editing. a movie which shows the result of the simulated dendritic growth. the corresponding source code is presented in additional file  <dig>  section  <dig> 

click here for file

 additional file 3
basic usage. a movie which demonstrates the basic usage of the imagej plugin provided by our framework. more screen casts are available on our web page.

click here for file

 additional file 4
software. the jar archive, containing both binary classes and the java source code of our software. to install the software, this file must be copied into imagej's plugins directory.

click here for file

 acknowledgements
we would like to thank henrike scholz for the confocal stack of the drosophila thorax.
