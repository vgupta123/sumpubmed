BACKGROUND
it is well-known that the differences between the genomes of extant species can be attributed to both small and large-scale mutations  <cit> . large-scale mutations or rearrangements are relatively rare but they affect the content and order of the genomes, thereby obscuring the relationship between species. comparison of multiple genomes based on their gene orders -- the sequence of genetic markers -- reveal segments with homologous gene content. these segments are commonly referred to as conserved gene cluster.

these homologous regions may have resulted from functional pressure to keep sets of genes in close proximity across multiple species. the most well studied examples are co-transcribed genes, also known as operons, in prokaryotes  <cit> . in addition,  <cit>  showed that genes in the same cluster tend to code for proteins that have a functional interaction. gene clusters can also result from the evolutionary proximity of the genomes being analyzed. such clusters provide important phylogenetic information which can be used to infer the gene order of the ancestral genomes  <cit>  and identify ancestral homologs among genes from the same family  <cit> .

intuitively, a conserved gene cluster represents a compact region which contains a large proportion of homologous genes separated by regions that do not contain any shared homologs. developing a formal definition of such clusters is a non-trivial task due to conflicting cluster properties. two cluster definitions that are commonly used in practice are max-gap clusters and r-window clusters  <cit> .

the gene teams model  <cit> , a formalization of max-gap clusters, allows for gaps of length at most δ between adjacent genes in a team.  <cit>  further generalized the model by introducing a quorum parameter, q, to allow gene teams which may be found in at least q input genomes. efficient algorithms to find all gene teams have been proposed in  <cit> .

while the gene teams model imposes a constraint on the distance between adjacent genes in a cluster, the size  and length  of the resulting clusters are unbounded. in contrast, under the r-window model  <cit> , clusters have length at most r and contains at least k genes. the statistical properties of r-window gene clusters are also better understood and the significance of discovered clusters can be evaluated using statistical tests proposed in  <cit> . exact computation of the significance of gene teams is still an open problem, but upper and lower bounds have been developed in  <cit> .

the r-window model was first used in the study of block duplications  <cit> , by comparing all pairs of windows of length r. to the best of our knowledge, no formal algorithms has been presented for computing all r-window gene clusters. in addition, although several models of conserved gene clusters have been proposed in the literature, there are few published results which compares different models empirically on real genomes.  <cit>  laid the groundwork by providing a characterization of the desirable properties of gene clusters and a detailed analysis of the difference between max-gap clusters based on the gene teams model and those produced by heuristics.

in this paper, we propose an improvement to the r-window gene cluster model  <cit>  by imposing the bidirectional best hit  criteria from sequence homology. we formulate the clustering problem formally and design an efficient subquadratic time algorithm to compute all bbh r-window gene clusters between two gene orders based on a sliding window technique. finally, we give an empirical comparison between our new cluster model and the gene teams model.

notation
our model of a genome is as a sequence of genomic markers for which homology information across the genomes of interest are available. the most common and well annotated type of genomic markers are protein coding genes. a homology family is a groups of genes that are descended from a common ancestral gene  <cit> .

let Σ denote the set of homology families. we are interested in the homology families that contains at least one gene in each of the genomes under consideration. a gene, g, is denote by fp where f ∈ Σ is the homology family which the gene belongs to and p ∈ ℝ is the position the gene.

the distance between two genes g = ap and h = bq, Δ, is simply the absolute difference in their position, i.e. |p-q|. this represents the number of elements located between the two genes of interest. in our experiments, gene positions are assigned based on the index of the gene in the complete genome. hence, the distance between two genes reflect the number of genes between them. we make use of the notion of distance to constrain the maximum length of a gene cluster.

a gene order, g, is a sequence of genes ⟨g <dig>  g <dig>  ..., gn⟩ in increasing order of their position. a uni-chromosomal genome can be directly represented as a gene order. genomes with multiple chromosomes can be represented as a gene order by concatenating the chromosomes together in an arbitrary order and inserting an appropriate gap to separate genes from different chromosomes.

a r-window  <cit> , g  = ⟨gi, gi+ <dig>  ..., gj⟩, on a gene order g is a substring of g. the length of a window, defined by the distance between the first and last gene, is at most r, i.e. Δ ≤ r. in  <cit> , a gene cluster is defined as a set of k genes that are found in a r-window. when extended to two gene order, this definition imposes a constraint on the number of common genes between two r-windows. however, it is unclear how to determine the minimum number of genes in a gene cluster as it is affected by the actual length of the clusters and the evolutionary distance between the genomes. too low a value will introduce too many false positives, while a more conservative value may exclude weakly similar clusters.

problem definition
in this paper, we adopt a different constraint on the r-window gene cluster, namely, bidirectional best hit. this circumvents the problem of having to decide the number of common genes in a cluster by making use of the relative similarities between the r-windows. the bidirectional best hit  criteria is routinely used when identifying homologous dna sequences between two species using blast. we feel that it is natural to extend this criteria to the identification of conserved gene clusters, as they are essentially homologous chromosomal segments.

in order to apply the bbh criteria, we will need a measure of similarity between two windows. a straightforward method is to count the number of genes that come from a common homology family, we call this the shared gene count.

definition  <dig> . given two windows, wg = g  and wh = h, the shared gene count of wh with respect to wg is the number of genes in wh that comes from a homology family that is also present in wg.

based on the shared gene count, we define the notion of a best hit from one genome to another genome.

definition  <dig> . given a window wg and a collection of windows wh, the best hit is a window wh in wh with the highest shared gene count with respect to wg. if there are multiple windows with the same shared gene count, then the best hit is the shortest one.

although we define the best hit in terms of the shared gene count, it is possible to replace it with other more sophisticated similarity measures. the simplicity of the shared gene count makes it easy to understand and allows us to design an efficient algorithm to find all clusters.

the following definition formally defines our bbh r-window gene cluster model.

definition  <dig> . given two gene orders, g and h, and a maximum window length, r, let wg denote the set of r-windows in g and wh the set of r-windows in h. a pair of r-windows,  ∈ wg × wh, is a bidirectional best hit r-window gene cluster if it satisfies the following properties:

• h  is the best hit for g 

• g  is the best hit for h 

•  is maximal with respect to substring inclusion, i.e. there is no other bbh r-window gene cluster  such that i' ≤ i ≤ j ≤ j' and k' ≤ k ≤ l ≤ l'.

a bbh r-window gene cluster is trivial if it contains a single pair of genes.

example. consider the following two gene orders,  

where the letters represent homology families and the superscripts denote the position.

the non-trivial bbh 3-window gene clusters of g and h are:

• 

• 

given the above model of conserved gene clusters, the task is to compute all occurrences of bbh r-window gene clusters between two given gene orders. formally, we define the bbh r-window gene clustering problem as follows:

bbh r-window gene clustering problem given two gene order, g = ⟨ g <dig>  g <dig>  ..., gn⟩, h = ⟨h <dig>  h <dig>  ..., hm⟩, and a maximum window length, r, compute the set of non-trivial bbh r-window gene clusters.

methods
in this section, we describe our algorithm for solving the bbh r-window clustering problem described in the previous section. we start off with a simple quadratic time algorithm and show how it can be improved using a sliding window technique. finally, we present an efficient data structure that allows us to obtain a subquadratic time algorithm.

a simple quadratic time algorithm
a straightforward algorithm is to generate both sets of windows wg and wh, then for each window in wg, compute its best hit in wh by going through each window in wh and vice versa. for simplicity, we assume that there are at most r genes in a window of length r. therefore, the size of wg and wh is o and o in the worst case and comparing two windows take o time. this simple algorithm has a time complexity of o.

a sliding window algorithm
we first show how we can find the best hits for each window in wg efficiently. finding the best hits for windows in wh is done in the same way. after that, we go through the hits and keep only the bidirectional best hits.

one problem in the previous algorithm is that many of the comparisons between two windows would result in a shared gene count of zero. therefore, instead of storing all the r-windows, we generate them one-the-fly to avoid comparing two windows with no common homology family.

we enumerate the windows in wg by starting from each gene and incrementally add genes in increasing order of their position as long as the window length is less than or equal to r. we use a data structure t to maintain the set of windows wh that have a non zero shared gene count with respect to the current window in wg.

each time we consider a different window wg, we need to update our data structure by adding the corresponding genes in h from the same family to our data structure. to determine the list of genes to be added, we preprocess h to compute the list of genes for each homology family. finally, for each window wg, we make use of our data structure to determine the best hit in h.

the pseudo code for this algorithm is shown in algorithm  <dig> 

putting it all together, we first find the best hits from g to h and vice versa, then filter the results to only retain the bidirectional best hits. we store the best hits from h to g in a hash table and for each best hit from g to h, we access the table to check if it is also a best hit from h to g.

the pseudocode for the algorithm is shown in algorithm  <dig> 

data structure for wh
observe that for a given window wg in wg, most of the windows in wh do not have any genes in common with wg. hence, instead of finding the best hit by checking against all windows in wh, we only represent

algorithm  <dig> besthitwindows

ensure: determine for each window in wg the best hit in wh

   bh := ∅ {set of best hits from g to h}

   {determine list of genes for each family in h and store in gs}

   for i from  <dig> to nh do

      hi := ith gene in h

      fi := family of hi

      gs  := gs  ∪ {hi}

   end for

   {enumerate r-windows in g and compute best hits}

   for i from  <dig> to ng do

      {gi is the ith gene in g}

      e := i - 1

      wg := ∅

      initialize t

      while Δ  ≤ r do

         e := e + 1

         wg = wg ∪ {ge}

         fe := family of ge

         for each gene g ∈ gs  do

            insert

         end for

         wh := besthit

         bh := bh ∪ {}

      end while

   end for

   return bh

algorithm  <dig> bbhwindows

ensure: compute the set of bbh r-window gene clusters between g and h

   bbh := ∅ {set of bidirectional best hits}

   bh g, h := besthitwindows

   bh h, g := besthitwindows

   {store the best hits from h to g in a hash table m}

   for each  in bh h, g do

      m  := wg

   end for

   {compute the bidirectional best hits}

   for each  in bh g, h do

      if m  = wgthen

         bbh := bbh ∪ {}

      end if

   end for

   return bbh

the windows that have at least one gene in common with wg.

this is achieved by storing the genes in h that share a family with wg in a balanced binary search tree, t, using the position of the gene as the key. each gene represents the start of a window, thus each node in the data structure represents a window of length r in h.

we need to be able to insert/delete genes in this structure and find the largest window. to find the largest window efficiently, we maintain the shared gene count, s, of each window as an additional attribute of each node.

insertion and deletion of a gene follows from the algorithm for standard binary search tree. unfortunately these two operations cause the shared gene count of up to r contiguous windows to change. instead of updating these windows one by one, we make an update to the roots of the subtrees that contains only these windows to indicate the change in shared gene count to all the windows in the subtrees. for this to work, we need to keep track of the range of windows in a subtree by storing the minimum and maximum position of genes, , and the adjustment to the shared gene count, Δs. this is similar to the canonical decomposition technique used in segment trees  <cit> . hence, the number of nodes affected is at most o, where |t| is the number of nodes in the tree.

to find the window with the highest shared gene count, we need to keep store the maximum shared gene count in each subtree. then the maximum shared gene count in the whole tree is found in the root. finding the best hit is done by traversing only those nodes whose maximum shared gene count is equal to the maximum in the whole tree. the complexity of this step is therefore o.

in summary, to make the three operations efficient, we augment each node of the tree with the following attributes:

s -- shared gene count for the window of length r starting at this gene

maxs -- maximum shared gene count of windows in this subtree

 -- minimum and maximum position of genes in this subtree; used to determine the windows under this subtree

Δs -- adjustment in shared gene count made to all windows in this subtree

when rotations are necessary to maintain the balance of the tree, the additional attributes in the nodes can be updated in constant time as they can be computed from the attributes in the left and right subtrees.

time complexity
the first part of the algorithm determine the list of genes in h for each homology family. this has a worst case time complexity of o. the complexity of the operations on the data structure t, depends on its size, which is o. hence, the complexity of determining the best hits for each window in wg is o and the complexity for determining the best hits in both directions is or lg r). the number of results for besthitwindows and besthitwindows is o and o respectively. creating the associative array to index the best hits from h to g takes o time on average using a hash table. going through the best hits from g to h and keeping only the bidirectional best hits takes o time on average, assuming expected o time to access the hash table.

therefore, the time complexity of the whole algorithm is dominated by the time taken to compute the best hits which is or lg r).

RESULTS
we investigated the power of our bbh r-window model by applying it to the analysis of conserved gene clusters between e. coli k- <dig> and b. subtilis and comparing our results with that obtained by  <cit>  based on the gene teams model  <cit> .

it has been shown that in prokaryotic genomes, conserved gene clusters can be used to identify co-transcribed genes, known as operons  <cit> . however, we note that methods for finding operons often make use of machine learning techniques that incorporate multiple sources of information in addition to the spatial proximity of the genes. our experiments indicate that the kind of spatial conservation modelled by conserved gene clusters provides some signal that can be used for identifying operons.

we implemented our subquadratic time algorithm, which finds all bbh r-window gene clusters between two gene orders, in java. all computations were performed on a intel core  <dig> duo e <dig>  processor with  <dig> gb of ram running linux.

in the e. coli k- <dig> and b. subtilis dataset from  <cit> , homology families were assigned to each gene based on the cog database  <cit> . originally, there are  <dig> genes in e. coli k- <dig> and  <dig> genes in b. subtilis, after removing the genes which are unique to each genome, we are left with  <dig> genes in e. coli k- <dig> and  <dig> genes in b. subtilis from  <dig> homology families. gene positions are assigned based on the index of the gene in the complete genome, thus the distance between two genes represents the number of intervening genes, including those genes that are not shared between the two genomes.

we computed the bbh r-window gene clusters between these two genomes and compared our results against known e. coli k- <dig> operons from regulondb  <cit> . as it is difficult to obtain an exact match, we compute the jaccard score for each operon based on the jaccard coefficient between the operon and one of the clusters we computed.

definition  <dig> . the jaccard coefficient of two sets o and c is defined as . it gives value between zero and one. a value of one indicates a perfect match.

definition  <dig> . the jaccard score of an operon o with respect to a set of gene clusters c is the highest jaccard coefficient between o and some cluster in c.

we consider an operon to be identified if its jaccard score is above a certain minimum jaccard score threshold. figure  <dig> shows the number of identified operons for difierent values of the threshold when the maximum window length is  <dig> 

based on figure  <dig>  we chose a value of 2/ <dig> for the threshold. there are  <dig> operons with at least two genes and at least 2/ <dig> of its genes are common to both e. coli k- <dig> and b. subtilis. this is an upper bound on the number of operons that can be identified based on the input.

effect of window length
our gene cluster model has a single parameter r, which is the maximum length of a window. a natural question that arises is the effect of this parameter on the resulting clusters. we ran our algorithm for a range of window lengths from  <dig> to  <dig>  each run took approximately  <dig> seconds to complete.

as shown in figure  <dig>  the percentage of identified operons increases as the window length increases from  <dig> to  <dig> and decreases for larger values of r. at the peak, when the maximum window length is  <dig>  our method identified 34% of the operons . it is interesting to note that there is a core of about  <dig> operons that are identified across the entire range of the parameter r. the dashed line shows the number of bbh r-window gene clusters that are not matched to any operon; it ranges between 70% to 80%. this illustrates the difficulty of using only spatial information to distinguish between the two kinds of genes clusters: those that are due to the evolutionary proximity of the two species and those that are under selective pressure.

comparison with gene teams
in this section, we present the first empirical comparison between two different conserved gene cluster models that takes into account gene position and the distance between genes.

we compared our results against the gene teams model. the gene teams model has a single parameter δ, which is the maximum distance between adjacent genes in a cluster. we computed the gene team tree  <cit>  for our dataset  and found that a maximum of 47% of the operons  was identified when δ is  <dig> .

this is slightly higher than the 34% achieved by our bbh r-window model, however, at all parameter values the percentage of non-operon teams is much higher for the gene teams model. this suggests that only a small percentage of the gene teams are identified as operons, due to the property that gene teams always form a partition of the set of genes. in addition, we observe that over the same range of parameter values, variation in the number of identified operons for our bbh r-window gene clusters is lower than that for gene teams. this means that our model is more robust to changes to the value of its parameter as compared to the gene teams model.

the operons identified using bbh r-window gene cluster are mostly a subset of the ones identified using the gene teams model. both models agree on a common set of  <dig> operons. this result is expected since our bbh r-window model is more restrictive. hence, the recall, which is percentage of identified operons, is lower as compared to gene teams.

however, an advantage of r-window gene clusters is the availability of exact statistical tests to evaluate the significance of putative clusters. we computed the expected number of r-window gene clusters with k genes between two random genomes  and use it to rank the bbh r-window gene clusters when r is  <dig>  we also ranked each of the gene teams when δ is  <dig> following  <cit>  by using the probability of forming a gene team of size k . given these two list of ranked gene clusters, we computed the precision and recall at all possible cut-offs. for a set of top p gene clusters, cp, and a set of operons, o, the precision is defined as |cp ∩ o|/|cp| and the recall is defined as |cp ∩ o|/|o|. although our bbh r-window gene clusters had a slightly lower recall as compared to gene teams, our model has a much higher precision. figure  <dig> plots the precision versus recall curve for both gene cluster models; it clearly shows that at any given recall, the precision of our model is always higher than the gene teams model. for example, at a recall of  <dig> , 65% of the bbh r-window gene clusters match 5% of the identifiable operons, whereas only 20% of the gene teams match the same number operons. similarly, at a recall of  <dig> , 50% of the bbh r-window gene clusters match 10% of the identifiable operons, while only 13% of the gene teams match the same number operons.

analysis of significant clusters
most of the clusters are an exact match to a specific operon, except for the second cluster which consists of a combination of two operons. two of our clusters contains an additional gene that is not part of the operon.

the flie-k cluster includes the additional flie gene that is not part of the flif operon. the flie gene is known to be a monocistronic transcriptional unit that is adjacent to the flif operon, it forms part of the flagellar of e. coli k- <dig> together with the flif operon  <cit> . this evidence supports our grouping of flie together with the flif operon.

the cluster matched to the dpp operon contains an addition yhjx gene. yhjx is a hypothetical protein with an unknown function predicted to be a transporter  <cit> . this prediction gives yhjx a similar function as the dpp operon, which function as a dipeptide transporter, and gives support to our cluster.

CONCLUSIONS
in this paper, we proposed a novel variant of the r-window gene cluster model based on the bidirectional best hit constraint. the bidirectional best hit criteria is most commonly used for identifying families of homologous dna sequences from blast hits. we extend this notion to identify homologous chromosomal segments/conserved gene clusters.

we developed a simple quadratic time algorithm to compute the set of bbh r-window gene clusters from two genomes and show how it can be improved to a subquadratic time algorithm. the key insight is to use a segment tree like data structure for maintaining a set of windows and reporting the best hit.

our comparative analysis of the e. coli k- <dig> and b. subtilis dataset showed that the operons identified by our more restrictive bbh r-window model is a subset of the operons identified by the gene teams model. however, as a result of the bbh constraint, we were able to achieve a higher level of precision at all levels of recall as compared to the gene teams model. in addition, a detailed analysis of the most significant bbh r-window gene cluster show that the top ranking results match well to known e. coli k- <dig> operons.

competing interests
the authors declare that they have no competing interests.

authors' contributions
mz came up with the bbh r-window gene cluster model, designed the algorithms, and drafted the manuscript. hwl contributed to research discussions and made improvements to the analysis and presentation of the results. all authors read and approved the final manuscript.

