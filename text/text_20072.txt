BACKGROUND
the ability to reproduce research results is a cornerstone of the scientific method. research results that are not reproducible are generally considered invalid by the scientific community. the result of a laboratory investigation must be independently reproduced by others to be considered valid. similarly, the validity of a clinical research finding is established via recapitulation in multiple distinct clinical research cohorts.

the exciting advances in data collection biotechnologies  present the biomedical research community with special challenges related to data interpretation and reproducibility of research results. the interpretation of massive data sets requires the use of sophisticated computational and statistical analysis methods. the data sets themselves evolve as new technologies are introduced, additional tissue samples become available, clinical follow-up is updated, etc. a specific analysis result may be a function of dozens of data files, program files, and other details. without carefully tracking details about how those files are used to generate a specific result, it can be challenging if not impossible to describe how any particular research result can be recapitulated from the study data. this challenge represents a crisis for reproducibility as a pillar of the scientific method. consequently, some journals are developing policies to encourage computational reproducibility  <cit>  and federal authority to audit the computational reproducibility of research results is being expanded  <cit> . most recently, the national cancer institute issued guidelines that strongly encourage investigators to maintain high standards of computational reproducibility in their ‘omics’ studies  <cit> .

also, some recent mishaps in clinical cancer genomics research have shown that there is an ethical obligation to ensure that computational results are fully reproducible. the first indication of problems in a series of clinical trials was the inability to computationally reproduce the results of the supporting scientific publications from the publicly available data sets  <cit> . investigative follow-up of the analysis result discrepancies showed that the supporting science was fundamentally flawed  <cit> . subsequently, the publications have been retracted and the clinical trials closed  <cit> . thus, it is ethically imperative that data analysis results be computationally reproducible before they are used to direct therapy in a clinical trial  <cit> .

several computational tools have been developed to facilitate reproducible computing  <cit> . for example, sweave <cit>  uses r  to compute statistical results and inserts them into a late x  typesetting program that is subsequently converted into a pdf report. to enable this functionality, sweave defines a special syntax to switch between r code and late x code within the same file. in this way, the sweave program file directly documents the top-level r code used to generate the corresponding pdf report. similarly, the r packages knitr  <cit>  and lazyweave  <cit>  enable one to computationally insert results determined with r into a wiki mark-up file and an open office document file, respectively. these literate programming  <cit>  systems internally document exactly how the results in the report file were produced. these literate programming environments significantly enhance the scientific community’s ability to perform reproducible computing.

however, literate programming systems fail to address other challenges to reproducible computing. as previously mentioned, one analysis result may be a function of a very large number of input data files  and computer program files . these files must be collected and archived to ensure that the result may be reproduced at a later date. manually reading through a program to identify and collect all those files is very tedious and cumbersome. thus, there is a need to computationally collect and archive those files.

some tools have been developed to support reproducible computing by automatically archiving files. cde software  automatically generates an archive folder that replicates the entire directory structure for every file used to execute a specific linux command so that the identical command can be executed on another linux machine without any conflicts  <cit> . the technical completeness of the cde archive is very impressive and cde is very helpful for many linux users who wish to ensure the computational reproducibility of their work.

nevertheless, cde has several limitations and drawbacks. obviously, cde is not helpful for people who use operating systems other than linux and unix. also, the archive folder of cde is excessively redundant for some settings. for example, the cde archive includes a copy of many installation files for every software program  used to perform an analysis. as cde is used to document many analyses for multiple projects by a group of users that all have access to the same programs , the redundancy of such program files in cde archives will begin to unnecessarily strain the storage resources of the computing infrastructure. this redundancy is amplified when the same large data files  are present in multiple cde archives. additionally, collecting a large number of copies of proprietary software files in many cde archives may inadvertently pose some legal problems. furtermore, although the cde archive is complete from a technical computing perspective, it still does not necessarily contain all the information necessary to exactly recapitulate the results of statistical analysis procedures such as bootstrapping, permutation, and simulation that rely on random number generation  <cit> . the initial seed and the random number generator must be retained for such analyses to be fully reproducible and such information will not be stored in the cde archive if the program files did not explicitly set the value for the initial seed. finally, cde does not automatically generate any file to help a reviewer to understand the computational relationships among files such as indicating that specific program files generated specific result files. understanding such computational relationships is necessary to critically evaluate the appropriateness of the methods and the scientific validity of the results.

we have developed the package rctrack  to automatically archive data files, code files, and other details to support reproducible computing for r software that is widely used for statistical analysis of biomedical data and is freely available for the unix/linux, windows, and macos operating systems. the rctrack package may be used in conjunction with literate programming r packages  and does not require the user to modify previously written r programs. it automatically documents details regarding random number generation and a sketch of the r function call stack at the time that data, code, or result files are accessed or generated. these details are saved in an archive that includes additional files that have been automatically archived according to default or user-specified parameters to control the contents and size of the archive. the files in this archive can be used to develop a custom r package or other set of files to help others recapitulate the analysis results at a later date. finally, the rctrack package also provides functions to audit one archive and to compare two archives at a later date.

implementation
figure  <dig> illustrates the implementation of the rctrack package. the function begin.rctrack sets the initial value of the seed for random number generation, creates a dedicated memory environment rc.env to store details that are subsequently collected, and issues a series of trace statements that temporarily embed a set of detail-collection procedures into the definitions of r functions that access files for reading/writing, generate random numbers, and issue system calls. the detail-collection procedures are then executed as part of the functions that access files, generate random numbers, initialize the graphic devices, and issue system calls until the end.rctrack command is executed. thus, the detail collection is performed automatically without any special modification of the r program.

after the program execution is complete, the end.rctrack statement creates an archive directory with a time-stamp suffix in its name. the end.rctrack function then accesses the information in rc.env to identify and copy files to this archive directory. the md5sum function is used to compute the 32-byte md <dig> checksum for each file and these results are recorded in rc.env. the end.rctrack saves the r sessioninfo(), commandargs(), and the contents of rc.env to an rdata file in the archive directory. next, end.rctrack sets the the archive directory permissions to read only to prevent the user from inadvertently modifying the archive later. finally, end.rctrack removes the rc.env environment and uses untrace to restore the original definitions of all the tracked functions.

the rctrack package also includes tools to audit and compare archives at a later time. the rc.check.archive checks the existence, size, md <dig> checksum, and modification times of files that are listed in the rdata file in the archive and reports any discrepancies in those parameters. the rc.compare.archives function compares two archives generated by the rctrack package. the rc.compare.archives function compares the size, md <dig> checksums, and modification times of files that are present in each of two archives and also lists files that are present in one archive folder but not the other archive folder. finally, the rc.check.zipfile function checks the existence, size, md <dig> checksum, and modification times of files in an rctrack zip file archive and compares them to the values of those file attributes that were recorded at the time the zip file archive was generated. these auditing functions are documented in the package.

main features
table  <dig> lists optional arguments of begin.rctrack that govern the detail collection and archiving. we anticipate that the rng.init, details.file, and archive.folder options will be of greatest interest to most users. the rng.init argument dictates the random number generator to be used and the initial seed for random number generation. the default seed is  <dig> and the default generator is r’s default generator. the default of details.file is “rc.details.rdata”. the details will be saved to this file when end.rctrack is called. the default of archive.folder is null. with these defaults, an archive folder with a name of the form yyyy-mm-dd-hh-mm-ss  will be created in the present working directory at the time that end.rctrack is called. otherwise, the name of the archive folder will have the form archive.folder-yyyy-mm-dd-hh-mm-ss. the details.file and copies of other files will be saved in this archive directory when end.rctrack is called. we provide defaults for rng.init, details.file and archive.folder for user convenience but nevertheless recommend explicitly setting the values of these arguments in most applications.

there are other options that control the level and extent of detail collection and archiving. these options may be useful in certain settings. for example, the user can set up the maxsize.archive to control the maximum size of an input file to be copied and frozen in the archive folder. this option allows the user to avoid filling their disk space with multiple copies of very large data files, such as genotype data files for a genome-wide association study. the do.not.archive option also controls the automatic file archiving. this option specifies a character vector of file name extensions. files with these extensions will not be automatically archived. this may be useful to prevent repeated archiving of individual genotype or expression signal files . the skip.file.calls option is a vector of character strings with function names. no details about files accessed through calls to these functions will be collected nor will files accessed through calls to these functions be archived. this option prevents the archive from being cluttered with many low-level files accessed by loading r packages with the library or require statements. details about the usage of r packages are captured separately through saving the results of the sessioninfo() command. likewise, the option skip.empty.description prevents the collection of many unnecessary details about some technical low-level calls to the file function that do not actually read or write files. the rng.trace option indicates whether or not to retain a record of every random number generation event. the rng.trace option defaults to true. however, for some applications in some computing environments, users may want to set rng.trace to false so that calculations which are intensive in their use of random number can be more rapidly completed. the rng.functions option accepts a character vector of names of functions that generate random numbers. this is the list of random number generating functions that will be traced  from the begin.rctrack statement until the end.rctrack statement. finally, the print.trace option controls whether messages regarding the collection of reproducible computing details are issued while the program is running. defaults have been provided for all of these options.

sometimes, r may be used to issue system commands to perform some calculation with other software . the rctrack package will note that such an action has occurred but is currently unable to collect details about the actions of those other softwares. in some cases, it may be possible to write a wrapper function in r that will add information about what the other software does to the collection of details collected by rctrack . in other cases, it can be useful to have a record indicating that these actions have occurred so that the user can manually identify and archive the necessary details.

usage
the rctrack package is extremely simple to use; it only requires loading the library and issuing begin.rctrack to start collecting details and issuing end.rctrack to save the details to an rdata file, create a read only archive of the files used in the data analysis, and discontinue detail collection. figure  <dig> shows how to use the rctrack package to track the computing details of an r program.

in this example, r will collect details about every instance that my.program.r and all of its subprograms read or write a file, generate random numbers, or issue a system call. all these details, the starting value of the seed for random number generation, and the session information will be saved in a read-only file mydir-date-time/rc.details.rdata, where date-time is a date-time stamp appended to the name of the archive directory mydir. additionally, read-only copies of all input files below a specified size and all output files  will be placed in the archive directory mydir-date-time.  thus, mydir-date-time provides a complete record of the calculations performed by my.program.r at the date and time indicated in the directory name. the date-time stamp serves to identify specific versions of the analysis. most importantly, no modifications need to be made to my.program.r for these detail tracking and archiving operations to occur. thus, rctrack provides a comprehensive solution for collecting and archiving reproducible computing details while minimizing user burden.

RESULTS
figure  <dig> provides an illustrative example of the contents of my.program.r of figure  <dig>  the example includes random number generation , writing a tabular output file , reading a tabular input file , and generating a graphical output file .
my.program.r 
 from figure  <dig> 

table  <dig> shows an abbreviated version of the contents of the rc.file.details object that was stored in the rc.env environment and then saved to rc.details.rdata. the rc.file.details object is a data.frame that contains a sketch of the call stack at the time a file was accessed , the time the traced file input/output command was called, the file description , and how the file was opened . the full version contains the entire function calls and the full file path in the description . in this example, the file details indicate that the files were accessed during a call to sweave , which subsequently called read.table, write.table, or jpeg.

also, table  <dig> shows an abbreviated version of the contents of the random.details object that was stored in the rc.env environment and then saved to the file rc.details.rdata. again, the random.details object is a data.frame that contains a sketch of the call stack at the time a random number generation operation occurred. the random.details objective also contains the starting value of the random seed and indicates what random number generator was used. the top row indicates that the seed was set by begin.rctrack and subsequent rows are records of how rnorm was used to generate the data. the full version contains complete function calls in the sketch of the call stack.

finally, the file rc.details.rdata contains additional information that may be useful for documenting and achieving reproducible computing. in addition to all the information collected in the special rc.env memory environment, it contains the r sessioninfo(), sys.info(), and memory.size() at the time end.rctrack was called. the figure  <dig> shows the complete contents of rc.details.rdata for the example shown by figures  <dig> and  <dig>  additional file  <dig> is the archive generated by this example; additional file  <dig> provides the program files and gives detailed instructions for how to execute this example.

we also ran the simple example my.program.r in figure  <dig> under cde. the cde archive was much larger than the rctrack archive. the rctrack archive contained  <dig> files in one folder with a total size of  <dig> kb. the cde archive contained  <dig> files in  <dig> folders with a total size of  <dig> mb, which is over  <dig>  times larger than the rctrack archive. the bulk of the cde archive contained environment files, shared libraries, r installation files, and r package files that are redundant for r users who already have those files or can easily obtain them. the exhaustive cde archive does provide the advantage that others who do not have these r libraries can issue a single linux command to repcapitulate the calculation within random number generation variability. the rctrack provides sufficient information for others who already have r and the necessary libraries to recapitulate the calculation with some modest efforts . the rctrack package also documents the initial random seed and random number generator so that the calculation can be exactly recapitulated. furthermore, any linux users who wish to have all the information captured by both cde and rctrack may run rctrack under cde.

discussion
reproducible computing is an essential component of biomedical research in the ‘big data’ era. literate programming systems such as sweave and knitr internally document specific calculations at the top-level program code level. however, to completely achieve complete permanent reproducibility, one must identify and archive all data files and other computational components of an analysis. the rctrack package provides a simple and effective computational approach to collect and archive the plethora of low-level details needed to achieve and document complete and permanent reproducibility of a statistical analysis. in particular, the analysis archive can be provided as additional files of a published report to provide complete documentation for researchers, reviewers, supervisors, institutions, or regulatory agencies who are interested in recapitulating the analysis results or using the analysis methods in their own studies. a custom r package is an excellent format in which to distribute these suppelementary materials; the rctrack package can help the user to create such a package by assembling all the necessary elements into a single archive file. this should greatly enhance the rigor and transparency of scientific discourse and expedite the evaluation and adoption of robust data analysis methodologies.

unlike cde, the rctrack package captures the intial seed for random number generation. many statistical analysis procedures such as permutation, bootstrap, and markov chain monte carlo simulation rely explicitly on random number generation. the rctrack package captures sufficient information to recapitulate random number generation with the stats package on a single processor and to recapitulate parallel random number generation as implemented in the dorng package. the rctrack package does not capture all seeds in the parallel implementation in dorng but still captures the initial seed which is sufficient information to recapitulate the random number series. the rctrack package only monitors random number generation, it does not attempt to modify or otherwise control random number generation. thus, rctrack will not introduce any problems for random number generation that is properly implemented in a serial or parallel manner.

the current version of the rctrack package has some limitations that we wish to address in future versions. as previously mentioned, the user must modify the file paths in the archive to recapitulate the analysis. the rctrack package captures the complete original absolute file path and the archived file path for every file. we plan to use this information in a new version of the software that alleviates the user of the burden of manually modifying the file paths. we will accomplish this by using the information to computationally redirect file paths. the current version does not collect details or archive files for calculations that were performed by external software via a system call from r but instead simply notes that system calls to external software were performed. we plan to explore and develop ways to use the linux ptrace command and analogous features in windows to capture relevant information from external software calls made via the r system command. also, the current version of rctrack does not combine information from multiple r sessions that run independently in parallel. we are currently developing routines that will combine information from such an arrray of r sessions.

CONCLUSIONS
the rctrack package was developed to minimize user burden so that it can be immediately useful in practice. the rctrack package only requires statements to initiate and terminate collection of details for reproducible computing; no additional programming effort is required. furthermore, the rctrack package may be used in conjunction with the literate programming packages sweave, knitr, and lazyweave so that the reproducible computing details may be incorporated as an appendix of the reports generated by those tools. finally, the open source rctrack package provides a roadmap for advanced users to expand the capabilities to collect and archive other details about their specific calculations. therefore, rctrack will be very useful in the modern era of ‘big data’.

availability and requirements
project name: rctrack project homepage: http://www.stjuderesearch.org/site/depts/biostats/rctrackoperating system: platform independent other requirement: r  <dig> . <dig> or higher license: gpl

competing interests
the authors above declare that they have no competing interests.

authors’ contributions
dr. pounds and mr. liu designed the study, developed and documented the software, and drafted the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
rctrack package. this is the rctrack package. installation instructions are included in the file example and instruction.rar.

click here for file

 additional file 2
archive folder for the results. archive folder generated by the rctrack package for the program my.program.r shown in figure  <dig> 

click here for file

 additional file 3
example and instruction. this file includes the instructions for installing the rctrack package and how to perform the example shown in figure  <dig> 

click here for file

 acknowledgements
we greatly appreciate the funding support from alsac which raises funds for st. jude. we also appreciate the software testing and constructive feedback from dr. fritjof thomas, dr. nhu quynh t. tran, dr. gary rosner, and ms. amanda blackford, and the reviewers of the manuscript.
