BACKGROUND
there has been extensive effort to develop and implement strategies for efficient selection of single nucleotide polymorphisms  in candidate-gene association studies of complex disease. due to the prohibitively high cost associated with genotyping every snp within a given set of genes, methods have been developed to find a subset of these snps that capture the same genetic diversity. one of these methods includes a preliminary stage of genotyping in which linkage disequilibrium  or haplotype block structure is estimated by genotyping a set of evenly distributed snps across one or more genes for a sample set representative of a given population. two freely available software applications of note exist to facilitate this preliminary stage  <cit> . snphunter automates the filtering and selection of snps for genotyping, allowing the user to incorporate desired characteristics, such as chromosomal position and functionality  <cit> . once genotyped, htsnper <dig>  can be used to define haplotype boundaries and select haplotype tagging snps  to capture underlying ld  <cit> . using the resulting ld or haplotype information obtained from a first-stage sample, a second stage of genotyping for a smaller set of non-redundant snps is typically performed in a larger sample. for example, haiman et al. demonstrated the use of a small multiethnic first-stage sample with dense genotyping in order to capture the genetic diversity within cyp <dig>  subsequent haplotype tagging snps were then genotyped in a larger case-control second-stage sample examining the association with breast cancer  <cit> .

recently, it has become common to use the publicly available hapmap database in place of the first stage of genotyping. hapmap, containing genotypes of  <dig> individuals in four geographically diverse populations for over three million snps, has become a reliable source for describing genetic diversity and inferring ld patterns in a target sample population  <cit> . population genetic studies of underlying ld patterns have demonstrated that data from the hapmap project is sufficient in describing the underlying ld structure across multiple populations  <cit> .

once genotypes for a set of snps is obtained for a representative sample , two approaches can be used to select a minimal set of snps to be genotyped in a larger sample: "block-based" and "block-free"  <cit> . block-based approaches use haplotype block structure and haplotype frequencies in order to select an informative, non-redundant, minimal set of snps that captures the underlying haplotype diversity  <cit> . block-free approaches do not require this underlying block structure, and instead use pairwise ld between snps in order to select a minimal set of tagsnps that capture all other snps at a defined threshold  <cit> . block-based approaches have an advantage in that the possible interaction of a group of snps that are genetically linked can be measured as a haplotype. in a block-free approach, there is no guarantee that the selected tagsnps will allow differentiation of haplotypes. however, a drawback of block-based approaches is that they only sample a fraction of the genetic diversity in regions with poor block structure. while both approaches offer advantages, we have focused on developing methods and tools for block-free approaches and we limit our comparison to tagger  <cit> , which implements a block-free algorithm.

there are several algorithms using block-free approaches to select tagsnps  <cit> . some of these algorithms are based on d' as a measure of ld  <cit> , but the majority use r <dig>  <cit> , as it is a direct measure of association between snps  <cit>  and inversely related to statistical power  <cit> .

the current accessible algorithms, including the commonly used program tagger  <cit> , have some notable limitations. some programs enable the user to forcibly include snps having a priori importance, such as known functionality  <cit> , yet they lack the ability to prioritize additional tagsnp picking based on snp features such as coding status or genomic location. tagger  <cit>  can consider design scores on a high-throughput genotyping platform when prioritizing tagsnps, but does not take a snp's probability of typing failure into account when tagging, nor does it allow snps outside of a targeted genomic region to be picked. recently a few programs have been developed to allow for optimal selection of tagsnps across multiple populations  <cit> , yet they fail to incorporate one or more of the aforementioned features.

typically, the set of possible tagsnps in candidate gene studies using a block-free approach is limited to those snps which are located within the targeted genomic regions. however, patterns of ld can extend beyond the boundaries of these regions and are often non-contiguous when observing pairwise r <dig> values between snps. this means that a snp located outside of a targeted region may have a significantly high r <dig> value with one or more snps located within the region, even if snps located between them are not in ld. expanding the set of potential tagsnps to include snps from outside a targeted region allows snps with higher probabilities of genotyping success to picked and increases the chance that snps unable to be genotyped will be captured.

in this paper we present a user-friendly and efficient block-free tagsnp selection program, snagger, which improves upon current available snp tagging algorithms and is available as an extension to haploview. our program allows the user to:  prioritize tagsnps based on certain characteristics, including platform-specific design scores, functionality , and chromosomal position,  select tagsnps across multiple populations,  select tagsnps outside defined genomic regions to improve coverage and genotyping success, and  pick surrogate tagsnps that serve as backups for tagsnps whose failure would result in a significant loss of data. while many snp selection programs and algorithms are designed to pick the minimal set of tagsnps that will capture the underlying genetic structure, snagger is designed to pick a set of tagsnps that will capture the structure while also fulfilling user-defined characteristics and ensuring the best chance for genotyping success.

implementation
snagger was implemented in java as an extension to the existing open-source software, haploview . it builds upon haploview's user interface and uses its ability to import and filter genotype data in hapmap format and calculate pairwise ld metrics  between snps. in addition, it imports a score file containing design scores  and other relevant annotations for the snps in a defined genomic region.

data selection and filtering
the user can specify a genomic region and ethnic group of interest  for tagsnp selection. those snps passing user-defined filters, such as a minimum minor allele frequency , make up the set of snps, s = {s <dig>  s <dig> ..., sm}. once data is imported, haploview generates a table of all possible pairwise r <dig> values between si and sj . parameters and specifications for tagsnp selection can be specified by the user , including a minimum r <dig> threshold, r2min, when determining the desired ld threshold between snps. a set of force-included, i = {i <dig>  i <dig> ..., in}, or force-excluded, e = {e <dig>  e <dig> ..., eo}, snps within s can be inputted manually or imported as a separate file.

an option is provided for the user to enforce a minimum design score for tagsnps as well as a minimum physical distance  between any two tagsnps.

tagging algorithm
snagger allocates snps in set s into three primary sets for use in selecting tagsnps :

- c = {c <dig>  c <dig> ..., cp}, the set of all snps to be captured 

- p = {p <dig>  p <dig> ..., pq}, the set of potential tagsnps

- t = {t <dig>  t <dig> ..., tr}, the set of tagsnps

initially, all snps in set s are added to set p, and all snps within the region of interest and in set s are added to set c. if a set of force-included and/or force-excluded snps are specified, all force-included snps, set i, are added to set t, and snps in ld with set i are removed from set c. snagger then generates the set of potential tagsnps, set p, by adding all snps in set s except those snps in either set i or set e.

a snp score is assigned to each potential tagsnp in set p. it is a function of the snp's probability of genotyping success , maf , functionality , and chromosomal position .

 ss = {wgs * pr } + {wmaf * mafm} + {wt * typem} + {wl * locm} 

the probability of genotyping success, pr , is calculated as a function of a snp's design score.

 pr⁡=exp⁡1+exp⁡ 

the default parameters for this function were estimated from modeling of failure rates as a function of illumina design scores using data on  <dig>  snps genotyped by the university of southern california genomics core facility. however, analogous scores from other platforms can be used to calculate this probability. the parameters can be changed using the software's interface, provided the user has the estimated parameters for the desired platform.

mafm is a function of a snp's maf across the populations for which the user wishes to select tagsnps and a user-defined idealmaf. users can select from any of the four hapmap populations, import custom population data, or combine multiple populations into one. the default value for idealmaf is  <dig> .

 mafm=∑h=1hmmafmhhmmafmh=1−abs <dig>  

for each snp m having an observed maf in a given population h, a maf score for that population, mafmh, is calculated. the population-specific maf scores are then averaged across hm, the number of populations with an observed maf for snp m. snps having mafs nearer to the ideal maf will have maf scores closer to  <dig> 

for snp functionality and chromosomal position, the user can define values between  <dig> and  <dig> for specific characteristics .

weights  are applied to each parameter, and can be modified by the user. if desired, the user can preferentially weight parameters so that tagsnps having specific characteristics are more likely to be selected. the default value for each weight is zero except for the probability of genotyping success weight, where the default value is one. thus, without user-specified weightings across parameters, snp scores only rely on genotyping success.

for each snp in set p, a bina is created containing those snps in c for which it can serve as a proxy. the ld threshold, r2min, is used as the entry criteria into respective binas.

a secondary bin, binb, is created for each snp pi in set p, containing only those snps that meet the r2min requirement with the snp of interest and every other snp in its binb. the binb is formed by first sorting the snps in pi's bina by the size of their bina bins . initially, pi is added to its own binb. then, each snp in pi's bina is sequentially added to its binb if it is contained in the bina of every snp currently in pi's binb.

tagsnp picking starts by selecting the snp from each binb with the highest snp score and adding it to a temporary set, q. from this narrowed set of potential tagsnps, the snp with the most snps in its respective bina, t, is picked as a tagsnp and added to the set t. this tagsnp is removed from every binb as well as the set of potential tagsnps, set p. all snps in ld with t are removed from every bina and the remaining set of snps to be captured, set c. this algorithm is repeated until either set c or set p become empty. if set p is empty, but set c is not, any snps remaining in set c are marked as "untaggable". singletons are handled in the same way in the selection process, but become untaggable  if they violate a minimum tagsnp distance or design score requirement.

multiple populations
snagger has the ability to select tagsnps across multiple ethnic groups. using a user-defined order, it sequentially picks tagsnps from the first population, using r <dig>  design score, and surrogate picking parameter specifications , and forces them into the next population . this task is repeated for each population until the last population has been tagged. since not all groups will share the same set of snps to capture , the final list of tagsnps is the union of all tagsnps in each group.

surrogate tagsnp picking
an inherent problem of any tagsnp approach is the possible loss of significant data if a tagsnp that predicts many snps fails genotyping. although similar issues have been addressed in robust tagging software for block-based methods  <cit> , block-free methods require a different solution. two methods for adding surrogate tagsnps are available in the software, including one based on probability of genotyping success and one based on the number of snps tagged.

the first method uses the probability of genotyping success, pr  . as tagsnps are chosen, every snp receives a calculated probability of success  that is derived from the pr  of all chosen tagsnps that can act as a proxy for that snp. given a snp m with n tagsnps:

 cps = pr  ∪ pr  ∪...∪ pr  

the user can enforce a minimum cps on all snps whose corresponding tagsnps capture a minimum number of snps. with this method, a snp is not considered captured until its cps meets or exceeds the user-defined threshold, its tagsnp's "captured" number is less than the cut-off, or there are no surrogates available. the software provides default values of  <dig>  and  <dig> for the minimum cps and minimum "captured" number of snps, respectively. the possible values for pr  when using default parameters and illumina design scores range from  <dig>  to  <dig> . it follows that any tagsnp predicting at least eight snps will at minimum require one surrogate tagsnp in order to achieve a cps of  <dig>  for the predicted snps. if either the tagsnp or surrogate has a sufficiently low design score that the threshold is not met, more surrogates will be selected as long as they are available. the default values are chosen so as any snp in a large bin will have only one chance in a thousand that all the tagsnps predicting it will fail.

the second method relies on a function that gives the required number of surrogates based on the how many snps a tagsnp is tagging :

 t = log -  <dig>  

where t is the number of surrogates needed and m is the number of snps tagged by a tagsnp, with the Θ <dig> and Θ <dig> values specified by the user. every time a tagsnp is chosen, the above function is evaluated to check if and how many surrogates should be added. the surrogates are chosen from the tagsnp's binb and added to the list of tagsnps.

RESULTS
snp score impact
snagger's preferential selection of tagsnps was evaluated using hapmap public release 21a genotype data  <cit>  for  <dig> ceph  founder samples in the following  <dig> encode regions: enm <dig>  enm <dig>  enm <dig>  enr <dig>  enr <dig>  enr <dig>  enr <dig>  enr <dig>  enr <dig>  enr <dig> 

for simulation purposes, we randomly marked one-eighth of all potential tagsnps  as located in a coding region of the chromosome, which in practice would include both synonymous and nonsynonymous snps. the remaining  <dig>  snps were marked as non-coding. in calculating the snp score, snps in the coding region received a weight of  <dig> and all other parameters had a weight of  <dig>  snagger selected  <dig>  tagsnps, of which  <dig>  were "coding" snps. favorable weighting for coding snps increased the proportion of tagsnps located in a coding region nearly three times , and of all potential coding region tagsnps, nearly half were selected .

we also compared tagsnps selected for the hapmap ceph population across  <dig> encode regions, using a snp score with preferential weighting of maf in the hapmap yoruba  population to no weighting at all. this was done in order to demonstrate the ability of snagger to preferentially pick tagsnps in one population  which are common in another , such that resulting genotypes could potentially be compared in the future to the ungenotyped population. an maf weight of  <dig>  on the snp score and weights of  <dig> on all other parameters resulted in  <dig> percent of picked tagsnps having an maf between  <dig>  and  <dig>  in the yoruba population. when not weighing on yoruba maf, only  <dig> percent of picked tagsnps had an maf between  <dig>  and  <dig>  in the yoruba population. also of note is the reduction in monomorphic tagsnps in the yoruba population from 19% with no weighting to 16% with weighting. the distribution of yoruba mafs for the chosen tagsnps is shown in figure  <dig> 

comparison to tagger
the efficiency and coverage of tagsnps selected by snagger and the web server tagger were compared using the same hapmap snp data and encode regions . design scores were obtained for all snps, and used to compare the genotyping reliability of tagsnps chosen by snagger and the web server tagger. identical parameters were used in identifying potential tagsnps to ensure comparability between the two software programs.

in terms of the number of tagsnps selected, snagger was more efficient than the web server tagger. across every encode region, ten to thirty fewer tagsnps were selected by snagger than tagger . tagsnps chosen by snagger had comparable, if not higher design scores than those selected by tagger . also, tagsnps selected by snagger provided comparable coverage of all snps of interest to those selected by tagger .

selection of tagsnps outside a targeted region
to evaluate snagger's ability to select tagsnps outside of a targeted region, we looked across  <dig> gene regions. there were a total of  <dig> common  snps targeted for capture using ceph and han chinese genotypes from hapmap public release 21a  <cit>  and the affymetrix genechip human mapping  <dig> k array set  <cit> .

choosing tagsnps only from within each region yielded  <dig> tagsnps with an average illumina design score of  <dig>  . in either ceph or han chinese populations,  <dig> snps were untaggable because they were within  <dig> base pairs of another tagsnp or had a design score equal to zero and could not be captured by any other tagsnp. in ceph and han chinese populations there were  <dig> and  <dig> untaggable snps, respectively.

when we allowed tagsnps to be picked from outside the region there were  <dig> tagsnps selected with an average design score of  <dig> . in either ceph or han chinese populations, there were  <dig> untaggable snps, and in ceph and han chinese populations there were  <dig> and  <dig> untaggable snps, respectively.

discussion
the development and implementation of tagging snp selection methodologies have received significant attention in recent years. our program, snagger, improves upon other tagsnp picking software by combining preferential tagsnp picking and the ability to select tagsnps across multiple ethnic populations into one software package. with features not available in other software, including surrogate tagsnp picking to offset the risk of failed assays and the ability to pick better tagsnps from outside a targeted region, snagger improves coverage of genomic variation. like tagger, snagger adds flexibility by allowing the user to force-include or force-exclude user-defined snps. the software is built on the basis of haploview's framework, making it both familiar and graphically appealing to the user, and includes haploview's ld plot and haplotype display, which allows the user to visually investigate patterns of variation.

our program, snagger, has some similarities to the algorithm used by tagger. both programs create a bin  for each snp that contains the set of snps in high ld . snagger distinguishes itself from tagger by including a second step. to preferentially select snps with certain characteristics, snagger creates a set of bins  with snps that are in ld with every other snp in the bin. calculated from a number of user-specified parameters, a snp score is assigned to each snp. the snp in each binb with the highest snp score becomes the potential set of tags to pick from. thus, a snp score that can be flexibly weighted allows the user to influence the characteristics of chosen tagsnps. the second set of bins maximizes coverage while minimizing the number of tagsnps selected. from our evaluation, we show that snagger on average selects fewer tagsnps than the web server tagger when preferentially selecting tagsnps on design score.

snagger offers the user the ability to preferentially pick snps that are located within a coding region or other genomic location. snps that either change an amino acid residue  or are located in a 5' or 3' untranslated region are suspected to have a greater likelihood of having a biological effect  <cit> . the ability to prioritize these snp offers added flexibility and many candidate-gene association studies of complex disease have included all known functional snps into their selection strategies. to our knowledge, no other available software package includes this feature.

another key feature of snagger is the ability to weigh by probability of successful genotyping on specific high-throughput platforms. genotyping failures can reduce effective genomic coverage, especially when tagsnps acting as a proxy for many snps fail. snagger addresses this by preferentially choosing tagsnps with high probabilities of success, while maintaining efficiency in the number of tagsnps selected. though it may be necessary for the software to pick tagsnps with lower probabilities of success in order to capture every snp, the user can enforce a minimum design score for all tagsnps. for reference, 18% of hapmap snps in the ten hapmap encode regions have a probability of success below  <dig> , which corresponds to an illumina design score of  <dig> , the default minimum. in addition, snagger can select surrogate tagsnps that will backup low-scoring tagsnps that act as a proxy for several snps. furthermore, since some genotyping platforms  require that all tagsnps being genotyped have a minimum base pair distance, snagger can enforce a minimum distance between tags, which further reduces the chance of genotyping failure. we compared our program to the web server tagger and show that the tagsnps chosen by snagger had comparable, if not higher design scores than those selected by tagger.

snagger's ability to select tagsnps across multiple populations in a user-friendly manner is advantageous for studies involving multi-ethnic cohorts and admixed populations. other software programs have focused on the most efficient way to select tags including tagster  <cit> , but do not include other features available in snagger. furthermore, we are currently extending the selection algorithm to incorporate haplotype information in addition to pairwise ld.

CONCLUSIONS
we developed a software application, snagger, to select an efficient set of tagsnps that captures the most genetic information and can reliably be genotyped. it is freely available and we include the executable , source code , user guide , sample snp information , and sample hapmap data . it performs better than the web server tagger by choosing fewer tagsnps when weighting on design score, and performs equally as well in selecting tagsnps that provide comparable coverage of genomic regions that can be genotyped successfully. in addition, our software program allows the user to conveniently select tagsnps across multiple populations as well as from outside gene regions of interest, and to include surrogate tagsnps as another way to offset the risk of failed assays. moreover, snagger allows the user to incorporate the probability of genotyping success in the snp selection process and to give greater priority to, and subsequently choose, particular types of snps by functionality, location and maf. these capabilities significantly improve upon current available tagsnp software packages.

availability and requirements
project name: snagger

project home page and availability: 

operating system: platform independent

programming language: java

other requirements: java runtime environment  <dig> .2_ <dig> or higher

license: mit license

any restrictions to use by non-academics: none

authors' contributions
cke carried out the software engineering effort and performance analysis and participated in the drafting of the manuscript. whl participated in the development of an alpha version of the program and the drafting of the manuscript. dl participated in the development of an alpha version of the program. djv and dvc supervised the development of the program and the drafting of the manuscript. all authors read and approved the final manuscript.

appendix
tagging algorithm summary 
input:

• a set of snps s = {s <dig>  s <dig> ..., sm} within a contiguous genomic region.

• a table containing r <dig> values for each pair of snps in s having a physical distance less than a user-specified threshold, such that the pairwise r <dig> value of two snps si and sj is defined as: r <dig> 

• a set of snps i = {i <dig>  i <dig> ..., in} to force-include as chosen tagsnps, where i ⊆ s.

• a set of snps e = {e <dig>  e <dig> ..., eo} to force-exclude from being chosen as tags, where e ⊆ s.

• a user-specified r <dig> minimum threshold defined as: r2min. all tagsnp-snp pairs must have a pairwise r <dig> value that meets or exceeds this threshold.

• a snp score function ss based on snp design scores, other annotations, and user-defined weights.

output:

• a set of tagsnps t = {t <dig>  t <dig> ..., tr} such that t ⊆ s and each t ∈ t tags a subset of snps in s.

• a set of "untaggable" snps u = {u <dig>  u <dig> ..., us} such that u ⊆ s and no tag snp in t tags any snp in u.

algorithm:

1) let c = {c <dig>  c <dig> ..., cp} be the remaining set of snps to capture, such that c initially contains the snps in s that are located within the region of interest.

c ⊆ s.

2) add all force-included snps to the final list of tagsnps.

for each ii ∈ i, add ii to t.

3) remove all snps from the set of snps that still need to be captured those snps that are tagged by the set of force-included tagsnps.

for all possible pairs of ti ∈ i and cj ∈ c, if r <dig> ≥ r2min, remove cj from c.

4) determine the remaining set of snps that can possibly be tagsnps.

let p = {p <dig>  p <dig> ...,pq} be the set of potential tagsnps such that p = s - e - i.

5) determine the set of snps for which each potential tagsnp can act as a proxy based on their pairwise r <dig> values.

for each pi ∈ p, create a bina such that p.bina ⊆ s. for each cj ∈ c where r <dig> = r2min, add cj to p.bina.

6) for each potential tagsnp, find a set of potential tagsnps that can act as proxies for it and every other potential tag in the set.

for each pi ∈ p, create a binb such that p. binb ⊆ p and pi ∈ p. binb, where all possible pairs of bj ∈ p. binb and ck ∈ p. binb, r <dig> ≥ r2min.

7) for each potential tag, determine its best proxy according to the user-defined scoring function ss  and add it to a temporary set.

let q = {}. for each pi ∈ p, let pi-best be the snp with the highest snp score, ss, in pi.binb. add pi-best to q.

8) from the temporary set of best proxies, choose the snp that tags the most number of snps and add it to the final set of tagsnps.

let t be the snp in q with the largest bina. add t to the set of tagsnps t.

9) create a set of snps that will be removed from the list of potential tags.

let r = {}. add t to r.

10) remove all the newly tagged snps from every potential tagsnp's bina. if a potential tagsnp's bina becomes empty, it can no longer be a tag and should be removed.

for each pi ∈ p, p. bina = p. bina - t. bina. if pi.bina = {}, add pi to r.

11) remove all newly tagged snps from the set of snps that are left to be captured.

let c = c - t. bina.

12) remove all the potential tags that were marked for removal from every potential tagsnp's binb.

for each pi ∈ p, let pi.binb = pi.binb - r.

13) remove all the potential tags that were marked for removal from the set of potential tagsnps.

let p = p - r.

14) if there are no more snps to capture or there are no more potential tagsnps to choose from , the tagsnp picking is done. otherwise, choose the next tagsnp by repeating from step  <dig> 

15) mark any snps that still need to be captured as untaggable.

let u = c.

supplementary material
additional file 1
haploview with snagger as an executable jar file. the file is contained inside a .zip file, and must be extracted before it can be accessed. this file contains the program snagger as an extension to haploview version  <dig> . it can be executed on any operating system with the sun java runtime environment version  <dig> .2_ <dig> or higher installed  <cit> . it does not work with gcj or kjc. to start it from a command line, type: 'java -jar 1471-2105-9-174-s <dig> jar'.

click here for file

 additional file 2
archive of source code for haploview with snagger. this file contains an archive of the source code for haploview with snagger. it is compressed using the gnu tar and gnu zip  archive utilities inside a .zip file, in that order. to extract the archive with windows, use winzip  <cit> . for unix-based operating systems, use the command: 'tar xvzf haploviewwithsnagger_v <dig> .tar.gz'. for other operating systems, first uncompress with gnu zip  <cit>  then untar with gnu tar  <cit> . for compilation instructions, see the readme file contained in the archive.

click here for file

 additional file 3
haploview with snagger user guide. this file contains a user guide in pdf format with instructions on how to use snagger. general haploview instructions not relating to snagger are available from the help menu of the program.

click here for file

 additional file 4
sample score file. this file is an example score file that will work with snagger. it should be input in the software's window titled: "load score file and hapmap data".

click here for file

 additional file 5
archived folder of sample hapmap data. this file contains an archived folder of sample hapmap data that corresponds with the snps in the sample score file. it is in gnu tar format and should be uncompressed to a local hard disk before using. the resulting uncompressed folder should be specified in the software's window titled: "load score file and hapmap data". to extract on windows, use winzip  <cit> . for unix-based operating systems, use the command: 'tar xvf 1471-2105-9-174-s <dig> tar'. for other operating systems, untar the archive with gnu tar  <cit> .

click here for file

 acknowledgements
we thank dr. jane c. figueiredo for help with preparation of the manuscript. we are also grateful to xin sheng and dr. richard m. watanabe for their thoughtful comments on the manuscript. this research was supported by grants from the national institutes of health, u <dig> gm <dig> , p <dig> ca <dig> , and 5p <dig> ca14089- <dig> .
