BACKGROUND
pseudomarker
 <cit>  is a package that genomically localizes trait-predisposing loci by performing statistical tests using a putative disease locus and a series of markers. genomic localization of genes that impact some phenotype is based on tests of independence of disease phenotypes from genotypes of a genome-spanning set of markers. many “association tests” try to test directly for statistical relationships between disease phenotypes and marker genotypes directly by sampling large numbers of cases and controls or very small families. such tests confound the statistical relationship between marker alleles and the genotypes at a putative nearby disease locus with the statistical relationship between the same markers and the phenotype. this confounding is unavoidable for case-control data because of the limited degrees of freedom, but these relationships can and should be modeled explicitly when analyzing more complex and heterogeneous pedigree sets.

pseudomarker performs a full likelihood analysis under a specified model of the relationship between disease phenotypes and underlying genotypes. in pedigree data, one can test for genetic linkage as the preferential cosegregation of a marker or a haplotype with disease family-by-family; the marker genotype that cosegregates with the disease can differ from family to family. in either pedigree data or in case-control data, one can test for linkage disequilibrium  between a marker and a putative disease locus as the preferential co-occurrence of a specific genotype at the marker with a genotype at the disease locus. by using a full likelihood model, pseudomarker can combine analysis of case-control  data and pedigree data of arbitrary size in one unified testing framework. we directly analyze linkage and ld among marker and disease genotypes, integrating over all possible genotypes at the putative two-allele disease-predisposing locus, for all individuals under an explicit model of the genotype-phenotype relationship.

pseudomarker version  <dig> maximizes several likelihood functions
 <cit>  using a generalized pattern search  algorithm
 <cit>  implemented in a custom version of the ilink
 <cit>  program. previously, we showed that pseudomarker, using gps likelihood estimates, performed well in detecting linkage and ld, outperforming several competing genetic analysis programs as measured by the power or false positive rate
 <cit> .

the running time of pseudomarker depends on the number of times the optimization algorithm evaluates any likelihood function. each evaluation involves computation over one or, often, several pedigrees for fixed values of certain parameters that may include the recombination fraction and marker allele frequencies. ilink computes these likelihoods using a peeling method that is a generalization of the elston-stewart algorithm
 <cit> . computation time is highly dependent on the pedigree structure and the number of untyped founders.

a reduction in the number of likelihood function evaluations would allow more samples, larger and more complex pedigrees, or a greater density of markers to be analyzed in a reasonable amount of time. although the gps method
 <cit>  was more robust than the older line search method implemented in all previous versions of ilink, we decided that the number of likelihood evaluations might be reduced by using instead a newer algorithm known to outperform gps in some other optimization problems.

mesh adaptive direct search 
 <cit>  is a framework for a class of derivative-free algorithms designed to supersede the gps method. mads is conceptually similar to gps, but uses a richer set of search directions, resulting in better theoretical convergence properties. the nomad software package
 <cit>  is a high-quality, c++ open-source implementation of mads algorithms in use in universities and companies around the world
 <cit> . nomad is robust
 <cit>  and has a wide range of functionality, including handling of general nonlinear constraints, biobjective optimization, parallelism, and the restriction of variables to integer or boolean values
 <cit> .

we describe pseudomarker  <dig> , which uses a customized version of ilink that uses nomad to maximize likelihoods. we show that nomad is more effective at finding optima than gps, while requiring fewer evaluations of the likelihood function.

implementation
pseudomarker
pseudomarker uses parametric inheritance models and exact likelihood computations to evaluate the evidence for linkage and/or ld between a putative trait locus and a set of genotyped markers. when applying extreme parametric models, it yields statistics that are stochastically equivalent to several popular model-free methods if applied to simple family structures
 <cit> , for instance mother-father-child triads, case-control samples, or affected sib-pairs. pseudomarker, however, has substantial advantages over the simpler nonparametric methods when analyzing more complex family structures
 <cit> .

pseudomarker takes as input a pedigree file  in linkage format
 <cit> , a common format used by many analysis packages, such as the well-known plink package
 <cit> . the map file that describes the names and positions of the markers may be supplied using any one of a variety of formats, including the format used by plink. the format of the map file must be explicitly specified as a command-line option. many more details on the pseudomarker data input format can be found in the online documentation .

pseudomarker uses likelihood ratio tests to compare four models describing all possible combinations of having or not having linkage and having or not having ld. marker allele frequencies are parameters of all four likelihood functions. for likelihoods allowing for ld, the marker allele frequencies are allowed to vary conditional on which trait-locus allele is on the same haplotype. for likelihoods allowing for linkage, the probability with which recombination occurs between trait and marker loci  is a parameter. for each likelihood function, all parameters are estimated jointly.

estimating the parameters is a nonlinear constrained optimization problem. ilink uses the pedigree structure, genomic data and the inheritance model to compute each likelihood function exactly as a nonlinear function of its free parameters. marker allele frequencies and conditional allele frequencies are probabilities, and as such are constrained to lie between  <dig> and  <dig>  each set of frequencies must also sum to  <dig>  the recombination fraction, if a parameter, is constrained to lie between the  <dig> and  <dig> , because larger values of the recombination fraction are not biologically meaningful; a recombination fraction of  <dig>  between two loci indicates that the loci segregate independently.

the main programs of pseudomarker are primarily intended to be used for fine mapping a linkage region as has been done, for example, in kyöstilä et al. <cit> , and for testing candidate genes as has been done in deo et al. <cit> . pseudomarker may be used for genome-wide data, but for larger or more complex problems using current  technology requires the use of a computational cluster to complete the genome-wide analysis in reasonable time. for most purposes, if the data set contains a large number of families, we instead recommend two-stage analysis approach. in the first stage, a filter based on the haplotype-based haplotype relative risk  method
 <cit>  and less computationally expensive classical linkage analysis with loose thresholds is used to identify markers likely to benefit from pseudomarker analysis. the second stage performs full pseudomarker analysis on these candidate markers. a program twostage.py is provided in the pseudomarker distribution to perform the two-stage analysis. a description of the two-stage method and instructions are available on the pseudomarker website .

nomad
nomad
 <cit>  implements several variants of the mads framework for constrained derivative-free optimization. in its usual mode, it searches for an optimum by generating trial points along orthogonal directions starting from the incumbent best solution
 <cit> . the set of directions used in this step is far richer than the set of directions searched by gps; formally, the set of normalized directions is dense in the unit sphere. the use of such a rich set of search directions ensures stronger theoretical convergence properties, and leads to a more efficient algorithm in practice
 <cit> . the mads framework is flexible enough to allow the use of heuristics that investigate additional trial points to improve practical convergence. heuristics available in nomad include variable neighborhood search  metaheuristic
 <cit>  and the construction and exploration of quadratic models of the objective function and of the constraints
 <cit> . the vns metaheuristic was not used in our tests, but quadratic models are used by nomad in its default mode, and were used in our tests.

to optimize likelihoods, nomad proposes to ilink values for its free parameters, trial points in the mads framework. ilink attempts to evaluate the likelihood function at these trial points. nomad explicitly handles bound constraints, and so will not, for instance, suggest a negative probability. the constraints that allele frequencies sum to  <dig> was handled by another of nomad’s features, the extreme barrier approach. for any set of marker allele frequencies, one frequency may be represented implicitly, its value obtained by subtracting the sum of the other frequencies from  <dig>  nomad is not aware of the implicit frequencies. for a trial point suggested by nomad, it is possible for an implicit frequency to have an infeasible value: a negative value or a value greater than one. in such a circumstance, the extreme barrier takes effect. ilink informs nomad that the trial point is infeasible, and nomad ignores the point, effectively treating it as if it had an infinitely bad objective value.

ilink was modified substantially to use nomad instead of gps. we used nomad in its library mode
 <cit> . using nomad in this mode involves setting up internal ilink data structures prior to invoking nomad, providing nomad with code  that nomad uses as a callback to provide ilink with trial points, and converting between nomad’s representation of the variables and ilink’s, ultimately invoking an internal ilink routine named likelihood. nomad was run in a mode that uses 2n orthogonal search directions, where n represents the number of optimization variables. nomad was stopped when the minimum poll size, a nomad parameter, was less than 10- <dig>  indicating that for the next set of trial points, the largest change to any parameter to the likelihood functions would be at most 10- <dig> 

the interface between pseudomarker and ilink was modified to enable better performance, but these changes do not affect the file formats or command-line syntax for pseudomarker. nomad is used by default. compiled executable files are available from the pseudomarker web site . these files include and will use the nomad solver without requiring any additional downloads or user intervention. in accordance with the lgpl version  <dig> , downloaded archives also contain files allowing users to rebuild the necessary executables using a different, possibly modified, but application programming interface  compatible, version of nomad.

computational experiments
table
 <dig> gives a brief summary of the  <dig> data sets that we analyzed in this project. twelve of these data sets were used to compare the overall number of likelihood function evaluations required by pseudomarker to complete the analyses of specific markers when using gps to the number of evaluations needed to complete the analyses of the same markers when using nomad. two additional data sets were used to compare processor time used by pseudomarker version  <dig> d  to that used by pseudomarker  <dig> , to complete realistic genomic scans of chromosome  <dig>  table
 <dig> shows pedigree statistics of the data sets; more detailed statistics are shown in additional file
1: tables s1–s <dig>  pedigree, phenotype, and marker statistics were computed using pedstats
 <cit> .

the  <dig> test data sets used to compare iteration counts were selected to include difficult cases, including such factors as real life pedigree structures, realistic amounts of missing data, and large multi-generational families. data sets contained both biallelic markers and multiallelic microsatellites. the real data sets were from finnish gene mapping studies on which th and jdt were collaborators
 <cit> , while the simulated data sets were generated as part of the ph.d. dissertation of th, some of which have been analyzed in prior publications
 <cit> . simulated genotype data were generated using a modified version of slink
 <cit> ; parameters used for the simulations are shown in additional file
2: tables s <dig> and s <dig> 

some data sets were observed to present difficult maximization problems for the gps while the previous version of the pseudomarker package was being developed. the x.linked test set
 <cit>  was particularly interesting because it was x-linked, had multiple alleles, and most of the data were triads, and still maximization was quite time-consuming.

all  <dig> sets used to compare iteration counts were analyzed under assumptions of both the dominant and recessive extreme inheritance models described in
 <cit>  and all four likelihood functions used by pseudomarker, testing for linkage and/or ld. six were also analyzed under more biologically plausible inheritance models. we optimized likelihoods using either gps as previously described
 <cit>  or nomad
 <cit> .

to test running time on real data, we used two data sets: a subset of data from the framingham heart study 
 <cit>  version  <dig> as deposited in ncbi’s dbgap, and subset of data from the finntwin <dig> study
 <cit> . the finntwin <dig> data were recently used in a joint analysis of linkage and ld
 <cit> . usage of the fhs data for this purpose is covered by an irb-approved protocol . the finntwin <dig> study was approved by the ethics committee of helsinki university hospital district and individuals in the study gave their written informed consent.

for the fhs study, phenotypes for heart disease were used only from individuals who had consented to have their data used for general research usage . using in-house programs, we extracted data on pedigrees each of which includes at least two individuals who were phenotyped for heart disease. data were filtered with plink
 <cit>  to remove most inconsistent markers and to keep only markers such that r2< <dig>  pairwise. a few inconsistent markers that were not detected by plink, were detected by pedcheck
 <cit>  and also removed. the removal of inconsistent markers is needed here to do comparisons with pseudomarker version  <dig>  one of several user-interface improvements in pseudomarker version  <dig> is the implementation of a command line option –skipmendelerrors to skip over markers with inconsistent genotypes. pedigree and marker statistics for the filtered pedigree and marker data are shown in table
 <dig> and additional file
1: table s <dig>  markers were divided into  <dig> groups of approximately  <dig> markers and all groups were processed in parallel separately using pseudomarker version  <dig> and using pseudomarker version  <dig> on a cluster of linux machines.

the finntwin <dig> data contained phenotype and genotype information from  <dig> individuals in  <dig> pedigrees . some individuals in the study were twins; for monozygotic twins, only one twin was genotyped in the data analyzed
 <cit> . pedigree statistics for the filtered pedigree and marker data are shown in table
 <dig> and additional file
1: table s <dig>  data for all  <dig> markers were analyzed in a single run of either pseudomarker version  <dig> or pseudomarker version  <dig> on a linux machine. each analysis was repeated ten times and reported running time is the mean of the time for ten analyses.

RESULTS
the numbers of likelihood function evaluations for each test set, summed over all markers, all models, and all maximized likelihood functions, are shown in table
 <dig>  nomad is superior in terms of function evaluations to gps on all test sets. as we discuss below, nomad is invoked somewhat differently from gps on the same optimization problems, which contributes to the improvement.

we chose as our figure of merit the number of likelihood evaluations because that separates the likelihood evaluation of each pseudomarker hypothesis and gives an “apples-to-apples” comparison of gps and nomad. nevertheless, the figure of merit that matters more to users of pseudomarker is the running time for combined evaluation of all hypotheses. the reduction in number of likelihood evaluations does convert in a linear manner to reduction in running time, but the constants depend on the problem instance. for example, on the full pseudomarker run of the fhs problem, running time decreased from  <dig> hours and  <dig> minutes to  <dig> hours and  <dig> minutes, a  <dig> -fold reduction. for finntwin <dig>  the improvement in running time was even more substantial, decreasing from  <dig> hours and  <dig> minutes to  <dig> hours and  <dig> minutes, a  <dig> -fold reduction.

in preliminary tests, we observed nomad was more robust than gps in finding an optimum . there were no obvious patterns to distinguish the problem instances on which nomad found a better likelihood value than did gps. because nomad was more robust, we experimented with invoking nomad less often. for gps, it was often helpful to retry a given optimization problem, using the solution previously returned from gps as the new starting point because that would sometimes lead to the identification of a better likelihood value. the purpose of these restarts is to encourage convergence to a global optimum, and to reduce the probability that gps would stall at a non-optimal point. the restarts were unnecessary with nomad. nor was it helpful to start nomad at several different initial estimates, as was done with gps. the counts in table
 <dig> are counts for invoking nomad once to solve each optimization problem, whereas gps was invoked as described in
 <cit> .

despite the fewer calls to the optimization algorithm, the optimum returned by nomad was usually better than the one from gps. of the  <dig> optimization problems we tried based on the first  <dig> test sets, nomad found an assignment to the variables that yielded a log likelihood that was at least  <dig>  worse than the value reported by gps only seven times . in contrast, nomad reported  <dig> objective values better by at least  <dig>  than the values reported by gps. we considered differences less than  <dig>  in the log likelihood to be insubstantial, as such differences would change log of the likelihood ratio by at most  <dig> . nomad returned answers with objective value more than  <dig>  better than gps  <dig> times, with the largest difference being  <dig>  a shockingly large value. in contrast, the most gps improved the objective value over nomad was  <dig> .

≤- <dig> 
≤- <dig> 
≤- <dig> 
≥ <dig> 
≥ <dig> 
≥ <dig> 
count of changes in the objective function more extreme than the indicated number. positive changes indicate that nomad found the better objective value.

among the  <dig> cases for which the objective value changed by at least  <dig>  in the numerator in the likelihood ratio test, there were two in which the p-value for the test against hypothesis h <dig> improved by at least one order of magnitude . in the majority of cases, both programs find similar p-values, though gps requires more iterations and computer time. since tests are based on likelihood ratios, which code attains a lower p-value depends on whether a better maximum is found for the numerator or denominator of the likelihood ratio. however, when the p-values differ, p-values produced by nomad better supported by the underlying statistical model, whereas p-values produced by gps-based code represent a failure to maximize the likelihoods.

in
 <cit> , we reported that one of the difficulties in gps is the sum constraint that the allele frequencies have to sum to  <dig> . the editor suggested that an alternative method to handle the sum constraints is the generalized logit transformation, which has been shown to work in some other settings
 <cit> . in the pseudomarker application, we believe that the generalized logit would perform poorly because the maximum likelihood estimate of some probabilities is precisely zero, and this is a frequent occurrence. under the logit transformation, nomad would be tasked with finding a minimizer that had a finite objective value, but for which one of the variables was negatively infinite. this case breaks the assumptions of the theoretical convergence theory of nomad
 <cit> , and poses practical problems for the implementation.

nomad is a constrained code, and is designed to handle bounds on the variables, so working in probability space poses no great problem to it, and we believe this is one of the reasons nomad performs better than gps in the pseudomarker setting.

CONCLUSIONS
the new pseudomarker  <dig>  has been released  and it uses nomad
 <cit>  to maximize likelihoods. the new version usually provides better or comparable answers, while using far fewer evaluations of the likelihood functions. several of the most prominent developers of pedigree analysis methods recognized decades ago that the optimization problems that arise in genetic analysis of pedigrees can be difficult to solve and can benefit from new methods
 <cit> . we have shown in this study that mads methods are more effective than previous methods on the optimization problems that arise in usage of pseudomarker. therefore, our work is novel in two major respects. first, in the context of pseudomarker and pedigree likelihood optimization, the shorter analysis time and increased robustness allow analysis to be attempted on larger data sets and more complex family structures. second, we introduce a generally useful optimization package, nomad, to the bioinformatics and genetic epidemiology communities, where nomad may find additional usages.

availability and requirements
project name: pseudomarker  <dig> 

project home page:http://www.helsinki.fi/~tsjuntun/pseudomarker/

operating system: gnu/linux intel 64-bit architecture

programming language: c and c++

other requirements: none

license: pseudomarker is a binary distribution with registration required.  nomad is distributed with pseudomarker under terms of the lgpl  <dig> .

any restrictions to use by non-academics: no

abbreviations
ld: linkage disequilibrium; gps: generalized pattern search; mads: mesh adaptive direct search; fhs: framingham heart study.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
emg modified fastlink to use nomad, performed all the experiments, except the test of twinfinn <dig>  wrote the first draft of the manuscript, and coordinated the manuscript revision. emg and th updated pseudomarker to use nomad. th collected test sets, wrote test scripts, performed the test of twinfinn <dig>  updated the software documentation, and edited the manuscript. ca and sld helped integrate nomad with fastlink, suggested tests, and edited the manuscript. jdt suggested tests and edited the manuscript. aas conceived the project, helped integrate nomad with fastlink, suggested tests, prepared the fhs data from dbgap, and edited the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
tables s1–s <dig>  showing statistical information about the test sets.

click here for file

 additional file 2
tables s4–s <dig>  showing parameters used to generate the simulated genotypes in the test sets.

click here for file

 additional file 3
tables s <dig>  showing differences in the objective value computed by gps and by nomad.

click here for file

 acknowledgements
this research is supported in part by the intramural research program of the nih and nlm ; by afosr grant fa9550-12-1- <dig> ; by mimomics  and a fidipro grant from the academy of finland ; by bioshare-eu, paulo foundation ; and by nih grants mh <dig> and ag <dig> . markus perola, tiina paunio, teppo varilo, mikko kallela, aarno palotie, mari kaunisto, verneri anttila, maija wessman, outi törnwall, hely tuorila, jaakko kaprio, mikko hallman, and minna karjalainen are acknowledged for providing pedigree structures for testing. thanks to john dennis for stimulating this collaboration.
