BACKGROUND
phylogenetic search is an np-hard  <cit>  problem. it is however important to the analysis of biological sequences and the testing of evolutionary hypothesis  <cit> . as such it is necessary to employ heuristic methods.

a phylogenetic search begins by using a greedy heuristic to build an initial tree. this initial tree is then improved by the full search. unfortunately, the greedy nature of the starting trees limits the effectiveness of the full search. for this reason multiple starting trees are often used, with the hope that at least one will allow the overall search to find the global minimum.

partial tree mixing  addresses this issue through the use of a global representation of partition based tree space  <cit> . using this representation ptm is able to quickly begin exploring this space with a global search strategy. ptm uses a strategy focused more on exploration than exploitation. by covering more of the solution space ptm leads to an increased chance of the overall search finding a global minimum. two key features of ptm allow these goals to be accomplished. first, ptm divides a problem into smaller, more manageable subproblems, this allows for global search methods such as tree bisection and reconnection  to be applied sooner. second, ptm uses a global representation of all possible solutions, this allows for coordination between the subproblem search efforts.

related work
the most common heuristic method for phylogenetic search is a form of hill climbing. a given possible solution is permuted into several new solutions. the best of these solutions is in turn permuted until no better solutions are found.

the most common permutation operation is tree bisection and reconnection   <cit> . common methods in current use for building an initial tree include distance based methods such as upgma   <cit>  and neighbor joining  <cit>  , as well as stepwise maximum parsimony. both distance methods and stepwise maximum parsimony are o algorithms .

distance methods
distance methods begin by computing an all-to-all distance matrix between the taxa. this is typically the hamming distance between the dna character sequences for each taxa though some other metrics have been used  <cit> . the nearest taxa are joined into a clade. then the distance from this clade to all other taxa is computed. the method of calculating this distance varies between different distance methods. this clustering of taxa into clades continues until a complete tree has been built.

stepwise maximum parsimony
stepwise maximum parsimony begins by shuffling the taxa into a random order. the first three taxa are joined together into the only possible three taxon tree. in turn each taxon is inserted along every branch in the current tree. it is left in the most parsimonious position. this process continues until all the taxa have been added, resulting in a complete tree.

tree bisection and reconnection
tree bisection and reconnection  is a common means of generating new solutions during a phylogenetic search. each iteration of tbr is an o algorithm and produces o trees to be examined. the first step is to select a branch in the tree and remove it, producing two subtrees. a branch is then selected in each of the two subtrees. a new tree is produced by reconnecting the two subtrees at the selected branches. an iteration of tbr ends when the original tree has been split along every branch and each of those splits has been rejoined in all possible ways. if one of the new trees is better, then the search continues by performing a tbr iteration on the improved tree. if no better tree is found the search ends.

partition based tree space
trees can be considered as collections of bipartitions of taxa. every branch in a tree divides the taxa into two sets. some of these bipartitions, those arising from branches connected to the leaves, are common to all trees. these trivial bipartitions are ignored. all other possible partitions are assigned a dimension in tree space. the position of a tree is a vector whose components all have the value  <dig> or  <dig>  these values respectively represent the presence or absence of the associated bipartition.

in this space there is a close relationship between the euclidean distance between two trees and the robinson-foulds   <cit>  distance between those same trees. namely the euclidean distance is the square root of the rf distance.

the hypersphere of trees
it is well known  <cit>  that all fully resolved trees of n taxa have 2n –  <dig> branches. n of these branches are trivial, and are therefore ignored. the position of any resolved tree will therefore have exactly n –  <dig> elements with the value of  <dig>  all others will have the value of  <dig>  it is easy to see that the distance from this point, the position of an arbitrary fully resolved tree, and the origin is . as all such points are equidistant from the origin, it is the case that every fully resolved tree lies on the surface of a hypersphere. unresolved trees are trees which have fewer than n –  <dig> non-trivial branches. consider a tree lacking m branches, by the same argument as used for resolved trees, the distance between this tree and the origin must be , and all such trees lie on the surface of a smaller concentric hypersphere of radius .

the set of all trees, both resolved and unresolved lie upon the surfaces of a set of n –  <dig> concentric hyperspheres. at the origin lies the fully unresolved tree, which possesses no branches. the next sphere out, with a radius of  <dig>  contains all trees with  <dig> branch. each succeeding sphere contains trees with one more branch in them than the last sphere, until the final sphere of radius n –  <dig> is reached.

cartographic projections
the dimensionality of tree space is o  <cit> , with respect to the number of taxa. directly representing trees in this space quickly becomes prohibitive. one method of mitigating this explosive dimensionality is through cartographic projections  <cit> . a small number of reference vectors are chosen in tree space, these vectors need not correspond to valid trees. the coordinates of a tree are then defined as the inner products of the vector representing the tree and these reference vectors. due to the very sparse nature of a vector which represents a tree, these inner products can be computed with a single pass over the tree in o time. the method used to store the reference vectors is a hash table, and this has been shown  <cit>  to preserve the relationship between euclidean and rf distance.

RESULTS
in this section two types of results are considered. first, the work examines the effects of the parameters available to the user on the time taken and on the quality of the trees found. second, using default settings for these parameters the method is compared with other phylogenetic search programs. ptm followed by a standard tbr search is shown to find better trees than competing methods.

the effects of partial tree size
the ptm algorithm allows the user to set two parameters which affect the size of the partial trees during the search. the first is a maximum partial tree size. two partial trees will not join together if the result would be a tree larger than the maximum size. the second is a minimum partial tree size. this is a soft limit, it does not prevent partial trees smaller than this limit. rather, a tree which is at or below this minimum limit will not subdivide further.

figures  <dig> and  <dig> show the effects of partial tree size on time and on the score found. a ptm search was made on the zilla data set   <cit> , setting the minimum and maximum size of the partial trees between  <dig> and  <dig> taxa. the time taken by the ptm search and the final score found were recorded. this time and score do not reflect the final tree found by the search, only the initial tree found with the ptm algorithm.

the time taken by the ptm algorithm increases as the size of the partial trees increases. figure  <dig> shows this relationship. this is not unexpected as partial tree mixing uses a divide and conquer strategy. there is a visible boundary between two regions of the parameter space. in one region both the minimum and maximum sizes are large and the time taken is longer. in the other region at least one of the two sizes is small.

the speed in this second region is a result of smaller tree sizes, which can be quickly optimized. as the maximum size is a hard limit it is clear how a smaller maximum size leads to smaller partial trees. it is not as obvious how a smaller minimum size leads to smaller trees. consider a partial tree containing a small set of taxa unlike the other taxa in this partial tree. after optimization these taxa will tend to group together at the end of a long branch. this long branch will be selected as the division point when forming new partial trees. the result is a tree close to the maximum size, and a small tree. the larger tree, being close to the maximum size is less likely to join with another tree in the following iteration. small trees do not subdivide if they are below the minimum size. if the minimum size is close to the maximum size, many of these small trees will join together to form a tree within the prescribed limit. this tends to increase the average size of the partial trees. however, a small minimum size allows these smaller partial trees to form a mix without requiring that they first join together to make large trees. this in turn tends to decrease the average size of the partial trees. the reduction in average size leads to a decrease in the time spent in the ptm algorithm.

there is little variation in the score found by ptm with respect to the size of the partial trees especially after tbr refinement. however, as shown in figure  <dig>  larger partial trees tend to yield slightly more parsimonious trees after ptm only. as discussed in section  <dig>  larger partial trees are more accurate representations of the trees in their images. allowing some larger trees can therefore help the quality of the final tree produced. smaller partial trees are important for exploration of the possible space. perhaps the best solution in terms of final tree quality is to have a large to moderate maximum tree size and a small minimum tree size. this allows a variety of both larger trees for exploitation and smaller trees for exploration.

larger partial trees lead to better scores, but longer search times. thus, there is a tradeoff in this parameter space between the amount of time spent by ptm and the quality of the tree found. a small or moderate minimum size is desirable for both speed and accuracy. a large maximum size increases quality while decreasing speed. the best overall results occur where the maximum size is large enough to give good results, and the minimum is small enough to compensate for this maximum size in terms of execution time. the optimal parameters likely vary by data set. this implementation uses the conservative default values of  <dig> and  <dig>  respectively for the minimum and maximum sizes. while these values are likely not near the optimal for most data sets, they seem unlikely to give poor performance on any.

comparison with existing phylogenetic search programs
paup*  <cit>  is perhaps the most widely used program for phylogenetic inference using parsimony. for this reason, the performace of ptm was compared to paup* using stepwise addition and tbr. tnt  <cit>  and dcm  <cit>  are newer programs which implement a wide variety of heuristic methods  <cit> . partial tree mixing was implemented in the open source phylogenetics program psoda  <cit> . these methods were tested on datasets ranging from  <dig> to  <dig> taxa. ptm was compared against stepwise maximum parsimony where both were followed by a tbr based search until a minima was found. as the step which combines the two final partial trees is equivalent to a standard tbr search, the ptm algorithm was further refined using the parsimony ratchet  <cit>  and a sectorial search  <cit> .

the results are summarized in table  <dig> and  <dig>  table  <dig> compares the results of ptm to stepwise maximum parsimony. ptm takes significantly more time than stepwise maximum parsimony. however, ptm also yields higher quality trees. table  <dig> considers the effect of these higher quality trees on the overall search. this table compares the total time taken, both in ptm or stepwise maximum parsimony and in tbr. here the value of the ptm search is made clear. the final results from ptm for all of the data sets are superior to the final results found using a stepwise tree. furthermore, with the exception of the smallest data set, these superior trees are found in less time.

a comparison of search results between ptm and stepwise maximum parsimony on several datasets. note that in every case ptm found more parsimonious trees, but in much more time. when stepwise maximum parsimony was used to find multiple starting trees , ptm still found more parsimonious trees.

a comparison of search results between ptm and paup*, tnt, and dcm on several datasets. note that in every case ptm followed by psss found a more parsimonious tree than paup* using stepwise maximum parsimony followed by tbr. in all but the smallest case, where the overhead of ptm is more difficult to overcome, this tree was found in less time. tnt finishes much faster than ptm, but finds less parsimonious trees. dcm experienced errors in processing many of the data sets and reported no score in these cases. however, the result from the successful run was inferior. only the ptm method was able to process the largest data set of protobacteria, containing more that  <dig> thousand taxa.

a trace of a typical result is shown in figure  <dig>  the figure shows a search through a set of  <dig> taxa. this trace only shows the tbr search after stepwise to the point in time when ptm returned an initial tree. the scores for the ptm search do not include any tbr refinement. for much of the search time the current tree score of ptm is poor. however, while ptm is exploring low scoring trees it is sampling from a broad area of tree space. it does this so that later phases of the search will not be caught in local minima. the value of this exploration is seen in how quickly the score improves, attaining a far superior answer in less time than traditional methods. the solution from ptm, before any tbr refinement, implies  <dig> fewer mutation events then the solution found by paup*. the solution found was then passed on to a tbr search where further improvements were made, though this is not shown in the figure.

CONCLUSIONS
partial tree mixing is a method for producing an initial phylogenetic tree for use in common hill climbing methods. current methods produce a tree built using only local information such as pairwise distances or stepwise parsimony. as the trees produced by these greedy methods can limit the final score after a tbr search it is common practice to start many searches from different starting trees. a tbr search is much more expensive than any of the current starting methods and this duplication of effort outweighs the benefits of a quickly produced starting tree.

ptm produces a tree based on a global search of tree space guided by a partitioned based representation of all possible solutions. although much more time is expended in producing this tree, results show that the tree produced is of better quality than a tree found using stepwise maximum parsimony followed by an equal amount of time spent in a tbr search. the exploratory nature of the ptm search greatly reduces the need for multiple searches, as ptm produces excellent starting trees. this in turn reduces the overall search time, as duplicate searches are not needed. overall, a search started with a ptm produced tree finds better solutions in less time.

