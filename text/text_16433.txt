BACKGROUND
a roc plot displays the performance of a binary classification method with continuous or discrete ordinal output. it shows the sensitivity  and specificity  as the output threshold is moved over the range of all possible values. roc curves do not depend on class probabilities, facilitating their interpretation and comparison across different data sets. originally invented for the detection of radar signals, they were soon applied to psychology  <cit>  and medical fields such as radiology  <cit> . they are now commonly used in medical decision making, bioinformatics <cit> , data mining and machine learning, evaluating biomarker performances or comparing scoring methods  <cit> .

in the roc context, the area under the curve  measures the performance of a classifier and is frequently applied for method comparison. a higher auc means a better classification. however, comparison between aucs is often performed without a proper statistical analysis partially due to the lack of relevant, accessible and easy-to-use tools providing such tests. small differences in aucs can be significant if roc curves are strongly correlated, and without statistical testing two aucs can be incorrectly labelled as similar. in contrast a larger difference can be non significant in small samples, as shown by hanczar et al.  <cit> , who also provide an analytical expression for the variance of auc's as a function of the sample size. we recently identified this lack of proper statistical comparison as a potential cause for the poor acceptance of biomarkers as diagnostic tools in medical applications  <cit> . evaluating a classifier by means of total auc is not suitable when the performance assessment only takes place in high specificity or high sensitivity regions  <cit> . to account for these cases, the partial auc  was introduced as a local comparative approach that focuses only on a portion of the roc curve  <cit> .

software for roc analysis already exists. a previous review  <cit>  compared eight roc programs and found that there is a need for a tool performing valid and standardized statistical tests with good data import and plot functions.

the r  <cit>  and s+  statistical environments provide an extensible framework upon which software can be built. no roc tool is implemented in s+ yet while four r packages computing roc curves are available:

1) rocr  <cit>  provides tools computing the performance of predictions by means of precision/recall plots, lift charts, cost curves as well as roc plots and aucs. confidence intervals  are supported for roc analysis but the user must supply the bootstrapped curves.

2) the verification package  <cit>  is not specifically aimed at roc analysis; nonetheless it can plot roc curves, compute the auc and smooth a roc curve with the binomial model. a wilcoxon test for a single roc curve is also implemented, but no test comparing two roc curves is included.

3) bioconductor includes the roc package  <cit>  which can only compute the auc and plot the roc curve.

4) pcvsuite  <cit>  is an advanced package for roc curves which features advanced functions such as covariate adjustment and roc regression. it was originally designed for stata and ported to r. it is not available on the cran , but can be downloaded for windows and macos from http://labs.fhcrc.org/pepe/dabs/rocbasic.html.

1partial auc only between 100% and a specified cutoff of specificity

2bootstrapped roc curves must be computed by the user

3only threshold averaging

4only at a given specificity or inverse roc

the proc package was designed in order to facilitate roc curve analysis and apply proper statistical tests for their comparison. it provides a consistent and user-friendly set of functions building and plotting a roc curve, several methods smoothing the curve, computing the full or partial auc over any range of specificity or sensitivity, as well as computing and visualizing various cis. it includes tests for the statistical comparison of two roc curves as well as their aucs and paucs. the software comes with an extensive documentation and relies on the underlying r and s+ systems for data input and plots. finally, a graphical user interface  was developed for s+ for users unfamiliar with programming.

implementation
auc and pauc
in proc, the roc curves are empirical curves in the sensitivity and specificity space. aucs are computed with trapezoids  <cit> . the method is extended for paucs by ignoring trapezoids outside the partial range and adding partial trapezoids with linear interpolation when necessary. the pauc region can be defined either as a portion of specificity, as originally described by mcclish  <cit> , or as a portion of sensitivity, as proposed later by jiang et al.  <cit> . any section of the curve pauc can be analyzed, and not only portions anchored at 100% specificity or 100% sensitivity. optionally, pauc can be standardized with the formula by mcclish  <cit> :   

where min is the pauc over the same region of the diagonal roc curve, and max is the pauc over the same region of the perfect roc curve. the result is a standardized pauc which is always  <dig> for a perfect roc curve and  <dig>  for a non-discriminant roc curve, whatever the partial region defined.

comparison
two roc curves are "paired"  if they derive from multiple measurements on the same sample. several tests exist to compare paired  <cit>  or unpaired  <cit>  roc curves. the comparison can be based on auc  <cit> , roc shape  <cit> , a given specificity  <cit>  or confidence bands  <cit> . several tests are implemented in proc. three of them are implemented without modification from the literature  <cit> , and the others are based on the bootstrap percentile method.

the bootstrap test to compare auc or pauc in proc implements the method originally described by hanley and mcneil  <cit> . they define z as   

where θ <dig> and θ <dig> are the two  aucs. unlike hanley and mcneil, we compute sd with n  bootstrap replicates. in each replicate r, the original measurements are resampled with replacement; both new roc curves corresponding to this new sample are built, the resampled aucs θ <dig> r and θ <dig> r and their difference dr = θ <dig> r - θ <dig> r are computed. finally, we compute sd = sd. as z approximately follows a normal distribution, one or two-tailed p-values are calculated accordingly. this bootstrap test is very flexible and can be applied to auc, pauc and smoothed roc curves.

bootstrap is stratified by default; in this case the same number of case and control observations than in the original sample will be selected in each bootstrap replicate. stratification can be disabled and observations will be resampled regardless of their class labels. repeats for the bootstrap and progress bars are handled by the plyr package  <cit> .

the second method to compare aucs implemented in proc was developed by delong et al.  <cit>  based on u-statistics theory and asymptotic normality. as this test does not require bootstrapping, it runs significantly faster, but it cannot handle pauc or smoothed roc curves. for both tests, since the variance depends on the covariance of the roc curves , strongly correlated roc curves can have similar auc values and still be significantly different.   

venkatraman and begg  <cit>  and venkatraman  <cit>  introduced tests to compare two actual roc curves as opposed to their respective aucs. their method evaluates the integrated absolute difference between the two roc curves, and a permutation distribution is generated to compute the statistical significance of this difference. as the measurements leading to the two roc curves may be performed on different scales, they are not generally exchangeable between two samples. therefore, the permutations are based on ranks, and ranks are recomputed as described in  <cit>  to break the ties generated by the permutation.

finally a test based on bootstrap is implemented to compare the roc curve at a given level of specificity or sensitivity as proposed by pepe et al.  <cit> . it works similar to the auc test, but instead of computing the auc at each iteration, the sensitivity  corresponding to the given specificity  is computed. this test is equivalent to a pauc test with a very small pauc range.

confidence intervals
cis are computed with delong's method  <cit>  for aucs and with bootstrap for paucs  <cit> . the cis of the thresholds or the sensitivity and specificity values are computed with bootstrap resampling and the averaging methods described by fawcett  <cit> . in all bootstrap cis, patients are resampled and the modified curve is built before the statistics of interest is computed. as in the bootstrap comparison test, the resampling is done in a stratified manner by default.

smoothing
several methods to smooth a roc curve are also implemented. binormal smoothing relies on the assumption that there exists a monotone transformation to make both case and control values normally distributed  <cit> . under this condition a simple linear relationship  holds between the normal quantile function  values of sensitivities and specificities. in our implementation, a linear regression between all quantile values defines a and b, which then define the smoothed curve.   

this is different from the method described by metz et al.  <cit>  who use maximum likelihood estimation of a and b. binormal smoothing was previously shown to be robust and to provide good fits in many situations even when the deviation from basic assumptions is quite strong  <cit> . for continuous data we also include methods for kernel  smoothing  <cit> , or to fit various known distributions to the class densities with fitdistr in the mass package  <cit> . if a user would like to run a custom smoothing algorithm that is optimized for the analysed data, then proc also accepts class densities or the customized smoothing function as input. ci and statistical tests of smoothed aucs are done with bootstrap.

RESULTS
we first evaluate the accuracy of the roc comparison tests. results in additional file  <dig> show that all unpaired tests give uniform p-values under a null hypothesis  and that there is a very good correlation between delong's and bootstrap tests . the relation between venkatraman's and the other tests is also investigated .

we now present how to perform a typical roc analysis with proc. in a recent study  <cit> , we analyzed the level of several biomarkers in the blood of patients at hospital admission after aneurysmal subarachnoid haemorrhage  to predict the 6-month outcome. the  <dig> patients collected were classified according to their outcome with a standard neurological scale, the glasgow outcome scale . the biomarker performances were compared with the well established neurological scale of the world federation of neurological surgeons , also obtained at admission.

case study on clinical asah data
the purpose of the case presented here is to identify patients at risk of poor post-asah outcome, as they require specific healthcare management; therefore the clinical test must be highly specific. detailed results of the study are reported in  <cit> . we only outline the features relevant to the roc analysis.

roc curves were generated in proc for five biomarkers  and three clinical factors .

auc and pauc
since we are interested in a clinical test with a high specificity, we focused on partial auc between 90% and 100% specificity.

the best pauc is obtained by wfns, with  <dig> %, closely followed by s100β with  <dig> % . a perfect clinical test within the same region corresponds to a pauc of 10%, while a roc curve without any discrimination power would yield only  <dig> %. in the case of wfns, we computed a standardized pauc of  <dig> % with mcclish's formula . of these  <dig> %, 50% are due to the small portion  of the roc curve below the identity line, and the remaining  <dig> % are made of the larger part  above the curve. in the r version of proc, the standardized pauc of wfns can be computed with:

roc, partial.auc.correct = true, percent = true)

in the rest of this paper, we report only not standardized paucs.

ci
given the pauc of wfns, it makes sense to compute a 95% ci of the pauc to assess the variability of the measure. in this case, we performed  <dig> bootstrap replicates and obtained the  <dig> - <dig> % interval. in our experience,  <dig> replicates give a fair estimate of the second significant digit. a lower number of replicates  gives a good estimate of the first significant digit only. other confidence intervals can be computed. the threshold with the point farthest to the diagonal line in the specified region was determined with proc to be  <dig>  with the coords function. a rectangular confidence interval can be computed and the bounds are  <dig> - <dig>  in specificity and  <dig> - <dig>  in sensitivity . if the variability of sensitivity at 90% specificity is considered more relevant than at a specific threshold, the interval of sensitivity is computed as  <dig> - <dig> . as shown in figure  <dig> for s100β, a ci shape can be obtained by simply computing the ci's of the sensitivities over several constantly spaced levels of specificity, and these ci bounds are then joined to generate the shape. the following r code calculates the confidence shape:

plot), ci.type="shape")

the confidence intervals of a threshold or of a predefined level of sensitivity or specificity answer different questions. for instance, it would be wrong to compute the ci of the threshold  <dig>  and report only the ci bound of sensitivity without reporting the ci bound of specificity as well. similarly, determining the sensitivity and specificity of the cut-off  <dig>  and then computing both cis separately would also be inaccurate.

statistical comparison
the second best pauc is that of s100β with  <dig> %. the difference to wfns is very small and the bootstrap test of proc indicates that it is not significant . surprisingly, a venkatraman's test  indicates a difference in the shape of the roc curves , and indeed a test evaluating paucs in the high sensitivity region  would highlight a significant difference . however, since we are not interested in the high sensitivity region of the auc there is no significant difference between wfns and s100β.

in proc pairwise comparison of roc curves is implemented. multiple testing is not accounted for and in the event of running several tests, the user is reminded that as with any statistical test, multiple tests should be performed with care, and if necessary appropriate corrections should be applied  <cit> .

the bootstrap test can be performed with the following code in r:

roc.test, percent = true)

smoothing
whether or not to smooth a roc curve is a difficult choice. it can be useful in roc curves with only few points, in which the trapezoidal rule consistently underestimates the true auc  <cit> . this is the case with most clinical scores, such as the wfns shown in figure  <dig> where three smoothing methods available in proc are plotted:  normal distribution fitting,  density and  binormal. in our case study:

 the normal fitting  gives a significantly lower auc estimate . this difference is due to the non-normality of wfns. distribution fitting can be very powerful when there is a clear knowledge of the underlying distributions, but should be avoided in other contexts.

 the density  smoothing also produces a lower  auc. it is interesting to note that even with a smaller difference in aucs, the p-value can be more significant due to a higher covariance.

 the binormal smoothing  gives a slightly but not significantly higher auc than the empirical roc curve . it is probably the best of the  <dig> smoothing estimates in this case . for comparison, additional file  <dig> displays both our implementation of binormal smoothing with the one implemented in pcvsuite  <cit> .

CONCLUSIONS
in this case study we showed how proc could be run for roc analysis. the main conclusion drawn from this analysis is that none of the measured biomarkers can predict the patient outcome better than the neurological score .

installation and usage
r
proc can be installed in r by issuing the following command in the prompt:

install.packages

loading the package:

library

getting help:

?proc

s+
proc is available from the file menu, item find packages.... it can be loaded from the file menu, item load library....

in addition to the command line functions, a gui is then available in the statistics menu. it features one window for univariate roc curves  and two windows for paired and unpaired tests of two roc curves. in addition a specific help file for the gui is available from the same menu.

functions and methods
a summary of the functions available to the user in the command line version of proc is shown in table  <dig>  table  <dig> shows the list of the methods provided for plotting and printing.

