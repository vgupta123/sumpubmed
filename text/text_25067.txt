BACKGROUND
over the past few years, the advances in dna sequencing technology have opened new perspectives in many fields of life sciences. in particular, whole genome sequencing  and whole exome sequencing  are contributing to the extraordinary progress in the study of genetic variants, improving the understanding of causative genes in human disorders.

while “next generation sequencing”  is making the production of sequencing data progressively easier, bioinformatic analysis is still a problem when dealing with genes and pathologies not well characterized at the molecular level.

the initial bioinformatic steps for variant analysis are quite standard: the ngs reads are firstly aligned on the human reference genome  <cit> , then the resulting sam file  <cit>  is parsed for the identification of genomic variants. as a result, a variant call format  file with the list of variants is generated  <cit> .

the selection of candidate variants responsible for the phenotype or disease under study remains a challenging task. firstly, we need to functionally characterize and annotate the large number of variants that are typically detected: tens of thousands for wes and millions for wgs. several approaches have been developed to accomplish this task. programs like sift  <cit>  and polyphen- <dig>  <cit>  evaluate variants by focusing on the impact of amino acid changes on protein function, while annovar  <cit>  extends the functional annotation considering other features such as phylogenetically conserved regions and allele frequency in populations.

once the variants have been annotated further action is required to choose the most effective criteria for “prioritizing” candidate causative variants. it is unfeasible to conceive an all-purpose protocol as the type of problems and the available data may be very disparate. moreover, field-specific expertise may be essential both in the definition of the criteria and in the interpretation of the data.

if the genetic disease is well characterized at the molecular level, then the obvious action to take is to focus on the variants occurring on known causative genes. unfortunately, our knowledge is still limited as ~50% of mendelian monogenic diseases have not yet been associated with causative genes  <cit> , while most polygenic disorders remain uncharacterized at the molecular level.

taking into consideration that the function of many genes is still unknown, bioinformatic approaches such as endeavour  <cit>  prioritize candidate genes on features shared with other genes that are involved in the same biological process or disease under study. several phenotype-driven approaches have been implemented in programs like extasy  <cit> , phenix  <cit> , phenolyzer  <cit> , phive  <cit> , exomiser  <cit>  and phevor  <cit> , taking advantage of resources such as gene ontology   <cit> , human phenotype ontology   <cit>  and disease ontology   <cit> .

as previously mentioned, the prioritization process usually requires the integration of a wide range of functional information about variants, genes and diseases as well as mode of inheritance when multiple individuals are considered. currently, the standard strategy involves the application of filters with arbitrary thresholds that progressively remove variants not satisfying the criteria. as a result there is the risk of removing something that is just below the threshold for one of the criteria, while being well above the threshold for the other criteria.

prioritization is not only confined to the problem of merging information on variants, genes and phenotypes. an issue that is often disregarded is that the vast majority of genes undergo alternative splicing  <cit> . as a result the same variant may have very different functional outcomes, for instance it may generate a stop codon in a transcript and a silent variant in another isoform of the same gene. for this reason the annotation of variants should refer to each alternative transcript rather than the putative major isoform.

recently, some web-servers  <cit>  have been developed to analyze exome data, but they do not satisfy most of the above requirements, thus limiting the spectrum of possible analyses. stand-alone programs such as variantmaster are available  <cit> , but they are driven by line-commands that make their usage cumbersome and difficult for most users. an additional problem is that our knowledge on human genomics is changing very rapidly at all levels, needing continuous updates, implementations and integration of data, tools and ideas. therefore, a platform for prioritization that combines usability and comprehensiveness has become a priority.

with these premises in mind, queryor has been engineered as a user friendly web-platform that integrates the most advanced prioritization criteria. furthermore, queryor is built on a robust set of xml-defined rules that allows an easy implementation of new criteria without modifying the program code. currently,  <dig> different criteria of prioritization have been implemented in the platform and can be selected by users to build dynamic tailor-made queries and to facilitate expert-driven variant and gene prioritization.

implementation
web-interface implementation
queryor has been implemented in cgi/perl combined with apache web-server. javascript, jquery, ajax and css properties are used to dynamically render some parts of html pages and to define their structures and layouts. the pages for criteria selection and transcript report are built on dedicated xml-files. for this reason, we have developed a xml-language that describes standard database queries and their web representation . thus, any selection criterion or transcript data table is completely specified in a xml node, making the system flexible and scalable. the xml language also allows the user to integrate custom databases into the queryor platform. this integration is easily obtained loading multicolumn files with information related to genes  or variants . once the file is loaded, the user can select the fields on which one or more filters have to be created. then, the system automatically fills a new database associated to the project and builds specific xml-files containing the new queries, which will be available with all other criteria.

data processing implementation
the data processing step is based on in-house scripts developed in perl, python and bash; it runs on a blade cluster, managed by a pbs job resource manager . annovar software and dbnsfp database   <cit>  are used for the annotation of variants, in addition to a homemade script. all project data are stored in a local database using mariadb, a mysql open-source fork, with the tokudb® engine. the database is designed to contain both annotation tables and user data tables. the former host human gene annotations and known snp information  and are regularly updated every 6 months. the latter stores the data uploaded by the user and the associated meta-data produced during the “data processing” step.

ensembl data and variant annotation integration
the hg <dig> release  <dig> of human gene and transcript data has been downloaded from ensembl   <cit> . two different databases of known mutations have been integrated in the platform: dbsnp  <cit>  version  <dig>   <cit> , modified to recover old variants excluded from this last release but present in the online version, and exome variant server version esp6500si-v <dig>   <cit>  have been chosen to annotate allelic frequencies in the population. disease information has been obtained from omim   <cit>  and associated to gene and transcript data. regarding somatic mutations, queryor incorporates cosmic database  <cit>  version  <dig>  whose sql table has been created starting from vcf files containing both coding and non-coding mutations and the complete export file of cosmic. in case of new releases of gene annotations, dbsnp files or omim data, a custom set of perl/python scripts have been developed for the automatic update of all sql tables.

integration of functional and phenotypic annotations
queryor integrates several gene annotations derived from different public databases, which have been directly obtained from their respective websites or through ensembl biomart  <cit> . within these annotations, queryor embeds gene ontology  <cit>  and interpro  <cit>  data, as well as two different pathway repositories, kegg   <cit>  and reactome  <cit> , which have been collected using the graphite package  <cit>  of bioconductor  <cit> . queryor also makes available gene expression data derived from the gtex portal   <cit> . the information contained in this atlas has been processed to link ensembl id to tissues and sub-tissues in which the gene is expressed. the level of expression is measured in rpkm   <cit> . moreover, regarding the phenotype annotation, the platform accommodates two main databases: disgenet version  <dig>   <cit>  and human phenotype ontology  release  <dig>  whose entries have been further processed to be associated to ensembl-id. the updating of these functional annotations has been automatized through a set of perl/python scripts as described in the previous section.

chromosome map tool implementation
the “runs of homozygosity”  are calculated by comparing the user-uploaded variants and the high-polymorphic dbsnp variants  falling into the target regions. the algorithm extracts those positions where only dbsnp variants, and no custom variants, are mapped. the resulting locations are those with a homozygous genotype for the reference allele  in the analyzed sample.

using these spots, the script finds all the rohs, computes the length distribution and selects the stretches whose length exceeds the 95th percentile of the distribution. then, the algorithm tries to extend all the roh seeds in both directions as long as the homozygosity ratio  remains above  <dig> . rohs are used to build the “chromosome map” chart in association with the genes selected during the prioritization process.

case study dataset
the exome data from the “diagnostic exome sequencing in persons with severe intellectual disability”   <cit>  were obtained from the european genome-phenome archive  web site.

RESULTS
we have implemented queryor dividing the process into three main steps as shown in fig.  <dig> fig.  <dig> the three main steps of queryor analysis. step  <dig> and step  <dig> require interaction with the user, whereas step  <dig>  data processing, is automatically performed by the system after uploading vcf files




each step is further divided into different sub-steps and procedures, as detailed below. users will spend most of their time at step  <dig>  querying and browsing the system in the search of possible causative variants. to test the potential and features of the querying step, several sets of data have been made openly available on the platform, including some trio data from de ligt et al.  <cit> , as well as data produced by our own group.

uploading and updating vcf files
all queryor’s activities are centered on projects that the users can create and possibly share with their collaborators. projects can be related to single individuals, trios or families, as well as population or cohorts. starting a project is very simple, but users must first register, both for privacy reasons and for permitting the retrieval of their data.

the creation of a project requires the uploading of vcf files that must satisfy several requirements. firstly, each individual sample should be labeled with a unique name that will be used as identifier in the subsequent steps. secondly, the information about genotype, allelic depth and total read depth, which are usually found in the gt, ad and dp fields, must be available. although vcf is a well established format, not all variant callers implement the vcf fields in the same way; for instance the torrent variant caller does not fill the ad and dp fields. therefore, we have developed specific scripts that calculate the allelic and total read depth from other parameters, such as alternate allele observations  and reference allele observation count . as a result, the platform accepts vcf files produced by all the commonly used variant callers.

in the upload/update step the user can also upload bed files containing regions of interest. bed files should have four columns for each row: chromosome number, starting position, ending position and sample id; the latter is used to associate the genomic coordinates to the right individual. these custom-defined regions will be shown in the graphical synopsis of variants and transcripts  as yellow boxes. we usually exploit this feature to mark on each sample the regions with low coverage.fig.  <dig> a typical route for a queryor investigation starts with the selection of criteria ; a ranked list of genes and variants is returned in q <dig>  the selection of a gene, for instance fuca <dig>  leads to page q <dig> where variants and affected transcripts in their genomic context are shown. the black track at the top of q <dig> shows the target regions of exome capturing. the blue tracks just below show that the analysis was done on two samples named apn and apm, that share a heterozygous variant . the yellow boxes report the positions specified in the optionally uploaded bed file, indicating for instance low coverage regions. the bottom part of q <dig> shows two alternative transcripts where the same variant in one case is located in an exon, generating a missense substitution  while in the other case is located in an intron . by clicking on a transcript of q <dig>  the system returns q <dig>  where several transcript features are directly linked to external resources, as well as to the variant overview page . for a full list of symbols used in q <dig>  see fig.  <dig>  a more detailed description of the entire process is given in the main text




once the files are uploaded, queryor takes some time, from minutes to hours, to process data, depending on the number of uploaded samples and variants. the user can check the job status while the processing is running. the beginning and the end of the process are notified by automatic emails to the user’s registered address.

data processing
data are processed by an automatic back-end procedure that provides a comprehensive annotation of the variants, linking them to genes, transcripts, encoded proteins and biological ontologies. queryor takes into consideration that alternative splicing may generate multiple transcripts from the same gene. as a result, a variant may have different effects depending on the transcript isoform. with this premise, we thought that the common practice of limiting variant annotation to the major transcript isoform is a coarse approximation. therefore, to manage this problem queryor annotates variants on all the predicted ensembl transcripts derived from alternative splicing events. furthermore, the distribution of variants on the different splicing isoforms can be displayed and examined by the user as a part of the interactive result analysis described in the next paragraph.

besides queryor’s own procedures, a further double annotation is performed using both annovar  <cit>  and dbnsfp  <cit> , thus obtaining a wide set of measures, scores and constraints related to each variant, that among others include sift  <cit> , polyphen  <cit> , mutationassessor  <cit>  and gerp++  <cit> .

data processing involves many other steps, including the association of variants to the available information in dbsnp, such as the allelic frequency in the global population and in ethnic groups, as well as the presence in the  <dig> human genome project  <cit> . moreover, we discovered several thousand snps in the reference genome  that do not correspond to the major allele in the population and as a consequence are found as “false positive” in most individuals. to overcome this problem, the reference positions characterized by a dbsnp frequency lower than  <dig>  are annotated as mairs .

when a project involves the analysis of multiple patients such as trios and families, the platform runs a specific module that automatically computes how variants are shared between individuals. moreover, possible runs of homozygosity are calculated for each sample, as explained in the methods section.

all the retrieved and computed information obtained by the data processing step is stored in the queryor database.

the overall time required for loading and processing data is approximately proportional to the number of variants. typically, for ~ <dig>  unique variants  the time required is less than 20 min. a more detailed analysis of the loading time is given in additional file 1: figure s <dig> 

interactive queries and results analysis
after the completion of data processing, the user can explore the information that has been associated to the project, following the general procedure shown in fig.  <dig>  queries can be formulated very easily and the resulting answers are typically delivered in a few seconds that can extend to minutes for very complex queries. thus it is possible to experiment different criteria and parameters, to perform a comprehensive investigation and to get progressively closer to possible causative genes. a detailed analysis of the querying time, as a function of the number of criteria and variants can be found in additional file 1: figure s <dig> 

the complete route from query to variant takes five progressive steps that correspond to pages appearing on the web browser, labelled q <dig> to q <dig>  at each step some decisions must be taken: q <dig> is for the query, q <dig> is for choosing a gene from the resulting list, q <dig> is for the selection of a specific transcript among the different isoforms, q <dig> corresponds to the transcript report where a certain variant can be chosen and q <dig> is the description of the variant. like being in a maze, you may explore some paths and you can go back if the route leads to a dead end. in the web browser, q <dig> to q <dig> will open as independent pages making it easy to return to any of the previous steps. some integrated queryor tools are associated to different points of this route, to make decisions easier. the main features of this process are described in the following paragraphs.

query procedure 
page q <dig> allows the user to select the criteria for prioritization that are grouped into seven main sections. three sections  are related to genes, pathways and phenotypes. in these sections it is possible to select for specific lists of genes and transcripts as well as features like gene ontology, gene expression and associations to pathways, diseases or phenotypes. the remaining four sections are related to variants. these include variants annotation , variants databases , variants sharing and segregation  and vcf user data .

each section can be exploded to visualize sub-sections that can be further expanded to see the selectable criteria. figure 2-q <dig> shows a query page where the section variants databases shows four sub-sections and where the last sub-section  shows six selectable criteria. the selected criteria are shown on the right side of frame q <dig> where gmaf is under definition, while other  <dig> defined criteria are shown in their “collapsed” view.

by default all criteria have the same relevance in the ranking process, but this can be modified by assigning different weights to each criterion. there are no restrictions in the number of selected criteria, but very complex queries may take a longer processing time.

engine 
when a query is submitted, the system performs an independent search for each of the selected criteria; then, the score of each variant is calculated as the sum of the weights of the satisfied criteria. finally, genes are ranked according to their highest-score variant. the results from the query are summarized in a score table  that shows the number of genes and variants associated to each score. the two top-scores shown in the right side of fig. 2-q <dig> were selected and expanded to produce the results matrix on the left, where each row reports a single gene combined with the number of variants satisfying the prioritization criteria.

by clicking on a gene name in the results matrix, more details show up. for instance, the image in fig. 2-q <dig> was taken after expanding fuca <dig> and bpifb <dig>  this feature is useful to better understand the results. in fact, although the first six genes have positive variants in every column, as shown by the blue background, only  <dig> genes satisfy all the  <dig> selected criteria, resulting in an associated score of  <dig>  this apparent incongruence can be explained by looking at the expanded data of bpifb <dig>  showing that although the gene has some variants satisfying all the criteria, the two best variants satisfy only  <dig> criteria.

from the bottom line of q <dig>  it is possible to appreciate the depth and the stringency of each filter and to make a general evaluation of the prioritization. thus the user can reconsider some of the criteria and go back to q <dig> to redefine the query.

gene overview 
this page is shown after a gene is selected by clicking on the gene-id, in the results matrix. the page displays a compact graphical representation of alternative transcripts associated to the selected gene, together with the position and type of each variant across all samples. in fig. 2-q <dig>  two samples named apm and apn are shown at the top of the frame. both samples share a heterozygous variant, represented by the white dots. the bottom part of the q <dig> frame shows two alternative transcripts in which the same variant acts as a missense mutation  in one transcript and as an intronic mutation  in the other.

in the case of trio studies, samples are differently tracked to highlight parental heritage of allelic variants , as shown in fig.  <dig> fig.  <dig> trio analysis. in the q <dig> section, the arrow points to a variant that is heterozygous in both parents and homozygous in the child . at the end of the next exon, the child displays a heterozygous variant, shown as a small green bar, which was directly inherited from the father. a detailed description of the variants is given in the q <dig> section where the user can also find a link to the igv viewer, that will be conveniently opened on the appropriate genomic position




transcript report 
detailed information about the transcript selected in q <dig> is shown in q <dig> , where various contents are briefly described and directly linked to their primary source on the web. the variants that emerged from the prioritization process are highlighted with a blue background. if the bam file is available on the client side, the user can consider to launch igv  <cit>  that will automatically point to the position of the variant under analysis to view the alignment of the reads on the genome. by the “varinfo” button the user can move to q <dig> 

variant overview 
this page allows the evaluation of the specific features of the candidate variant  where several pathogenicity scores are accessible, including the above mentioned polyphen and sift, as well as mutation taster  <cit> , cadd  <cit>  and dann  <cit> . although these features are sometimes discordant, it is useful to have a global view to estimate the possible pathogenicity of the variant under analysis.

advanced analyses
from page q <dig> it is possible to access other queryor’s tools such as the “variants report” that is a printable table summarizing the information on variants, genes and pathogenicity. another link builds a “chromosome map” reporting possible runs of homozygosity, that can be important in the analysis of human disorders, as they represent a good clue for the presence of deleterious variants responsible for recessive diseases  <cit> . a further link takes the user to the “gene analysis tool” that allows the identification of genes carrying different mutations among a group of patients. with this tool it is possible to investigate unrelated patients or to investigate diseases caused by de novo mutations, where it is more important to know if the same gene is mutated in different patients rather than if they share the same variant. this information comes as a summary table flanked by a distribution chart . each group of genes can be further investigated searching for shared biological terms, using david  <cit> , or for common pathways within reactome  <cit>  and kegg  <cit> .

case study
to evaluate the performance of the platform we re-analyzed some of the data published by de ligt et al.  <cit> , , concerning patients affected by recessive forms of cognitive impairment and mental retardation. our prioritization strategy was achieved by applying several criteria on trio number  <dig> . in particular: 1) we selected high confidence variants with coverage level > <dig> and 2) with alternative allele coverage >30; 3) we only considered variants that changed the amino acid sequence; 4) as the disease is rare, we imposed a low frequency threshold with maf <  <dig> ; 5) the results were further fine-tuned by considering the “intellectual disability” phenotype ontology keyword; 6) taking into consideration the pattern of inheritance, we selected variants that are homozygous only in the child. queryor identified only two variants that could satisfy these six criteria. interestingly, one of the two is a missense variant placed in the pdha <dig> gene, in the x chromosome, corresponding to that proposed in the aforementioned work  <cit> . it is interesting to point out that with only six criteria it was possible to achieve a very effective prioritization. the above case is fully explained in a tutorial available at http://queryor.cribi.unipd.it/cgi-bin/queryor/tutorial.pl. to prevent any incidental findings and to preserve patients privacy, the tutorial is based on the exome of a healthy patient, manually edited to insert the above variant.

discussion
it is normal that when a new technology starts to produce novel types of data, the development of software analysis runs a little behind and eventually catches up. in the case of whole genome and exome sequencing this problem is particularly relevant because the scope of the prioritization process is not limited to the variants as such, but it extends also to a wide variety of data and information that is continuously updated and is often superseded by new discoveries.

when we started the development of queryor, this context of generalized “work in progress” was one of our main concerns. prioritization is essentially a process of data integration and to develop it using unstable datasets would be a vain effort. on the other hand, we thought that a user friendly variant-prioritization platform, suitable for a wide range of analyses, could be of great utility. to overcome the problem of sustainability, queryor has been designed on a general schema rather than on predefined databases. a dedicated xml language permits the declaration of the datasets to be implemented in the platform. each dataset is defined for its content, for the possible queries and for their web representation , thus making the system flexible and scalable.

thanks to this flexibility many datasets are available in the platform while more will be added in the future. although a query could be potentially made by selecting different features from all the available datasets, in a normal session only some of the data will be interrogated. thus there is a double level in which the information is organized: at the basal level there are all the available datasets implemented by the queryor manager, while at the top there is the information emerging from the queries performed by the end-users.

in literature, several bioinformatic tools for whole exome analysis are reported, but only a few of them are suitable for a comprehensive and efficient exome investigation. in fact, while some platforms center their analyses on gene features found in biological ontologies, others focus primarily on variant annotations, disregarding gene function. in queryor we combined the most useful features found in other tools, gathering and expanding them within a single platform. moreover, to enhance the potential of the analyses, we implemented some important features such as the annotation of minor alleles in the reference genome, several prioritization criteria based on vcf information such as coverage, genotype and quality score, as well as criteria based on sharing variants and homozygosity in different individuals. furthermore, we introduced the possibility to implement customized prioritization criteria based on databases supplied by the user. a detailed description of the procedure for submitting custom tables is given in the user manual, available in the “info” section of the web site. figure  <dig> compares the main features of queryor with other available tools, including seattleseq  <cit> , wannovar  <cit> , vep  <cit> , bierapp  <cit> , phenix  <cit>  and ova  <cit> .fig.  <dig> comparison of queryor with other platforms for variant prioritization. the platforms were tested using a vcf input file. the indicated number of available criteria is approximate due to different ways of implementation




to our knowledge, queryor is the open web tool with the widest spectrum of applicable criteria  for exome data prioritization, spanning from gene and variant annotations, to intrinsic features of the vcf file. another interesting peculiarity of queryor regards the opportunity to select a subset of samples within a multisample project, allowing focusing on attributes found only in the chosen group of samples.

a major effort has been made to simplify the formulation of complex queries. to perform a query the user can select any combination of criteria and associated parameters. for instance, one of the criteria could be the minimal coverage of the locus where a snp occurs and the associated parameter could be “30”. criteria can be classified in three main categories. the first group is based on the knowledge of genes and diseases, exploiting the functional and phenotypical annotation integrated in queryor as well as lists of candidate disease genes when available. the second category discriminates variants on the basis of information contained in the vcf file including coverage, genotype and quality of calling. the third category is related to variant features, such as pathogenicity scores, effect on protein, population frequency and distribution among the project samples. in particular, it is possible to impose a specific inheritance model in trios as schematized in fig.  <dig>  or families and cohorts, allowing for instance the selection of variants shared or not shared among different patients or that are homozygous in some patients and heterozygous in others.fig.  <dig> usage of the criteria for “shared” and “homozygous” variants in a trio case. diamonds indicate different hypotheses that can be made. for instance, if we hypothesize a recessive homozygous variant in the child we should set two criteria: 1) shared variants by child and both parents and 2) homozygous variants only in the child. whereas, for a compound heterozygosity we would expect that the child shares the variants, but we do not know which variant is in which parent; furthermore, the variant should not be homozygous in the parents. compound heterozygosities are generally difficult to find and criteria based only on sharing and homozygosity would not be selective enough. in this case the “gene analysis tool” described in the text could help in the selection of genes carrying different mutations. sometimes it may be useful to set criteria that may appear useless, like homozygosity on a x chromosome; however this may help to reduce false positives




in the development of the graphical user interface, we dedicated a particular attention to user friendliness, both for setting the criteria and for interpreting the results. as an example, fig.  <dig> shows how de novo mutations can be searched and visualized in a trio of mother, father and child.fig.  <dig> searching for de novo mutations in a trio. q1: to set the criteria the user should select “shared variants” and click the box beside each patient, selecting green, red or gray respectively for present, absent and ignore, while the sentence underneath will report in plain english the meaning of the settings; more criteria can be set by clicking the + symbol. q3: the results include haplotype phasing. the yellow bar indicated by the arrow is a possible de novo mutation. for the meaning of other symbols see fig. 3





in contrast with other similar tools that return only the items that simultaneously satisfy all the query specifications, queryor sorts the results on the number and weight of satisfied criteria; thus, the user can have a global view of which criteria are or are not met for every gene and can decide whether to continue the investigation or modify the query. the integration of a wide range of heterogeneous information and the automated annotation procedure provides the end user with the ability to evaluate the information at various levels in order to establish the relationships between different data and to discriminate between causal and neutral variants.

several other innovative features of queryor make the process of prioritization thorough and at the same time easy. for instance, an important issue is that we annotated all the variants that in the reference genome are represented by rare alleles, that we named mairs . these variants can either be filtered off by the query specification or alternatively they will be automatically labelled as mair when seen on the selected genes.

CONCLUSIONS
currently, queryor is primarily used to analyse exomes and gene panels, however it has been successfully employed also for whole genomes. in this respect the main problem is the lack of functional information that can be associated to variants belonging to non-coding sequences. as this information will become available we will take advantage of the flexibility of queryor to implement datasets that may facilitate the prioritization of variants in whole genome analyses.

in conclusion, the comprehensiveness of the implemented criteria and the aptness to add new features together with a user-friendly environment make queryor very suitable to support researchers, clinicians and geneticists engaged in variant analyses.

availability and requirements
project name: queryor

platform home page: http://queryor.cribi.unipd.it


tutorial: http://queryor.cribi.unipd.it/cgi-bin/queryor/tutorial.pl


user manual: http://queryor.cribi.unipd.it/cgi-bin/queryor/user_manual.pl


access requirements: web browser

access restrictions: none

additional file

additional file 1: this file contains supplementary figures supporting the manuscript. figure s <dig> time required for uploading and processing a project. figure s <dig> time required for the processing of a query. 




abbreviations
adallele depth

aoalternate allele observations

bambinary alignment map

bedbinary extended data

dodisease ontology

dpfiltered depth

gmafglobal minor allele frequency

gogene ontology

gtgenotype codes

hpohuman phenotype ontology

mairminor allele in reference

ngsnext generation sequencing

roreference allele observation count

rohruns of homozygosity

rpkmreads per kilobase per million mapped reads

sqlstructured query language

vcfvariant call format

weswhole exome sequencing

wgswhole genome sequencing

xmlextensible markup language

