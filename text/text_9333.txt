BACKGROUND
in an unsupervised learning procedure, the class label of a training sample is not known and the aim is to partition the data into clusters. the unsupervised learning scheme uses the relationship between samples to perform partitioning. in many biological data , the number of clusters and class labels are unknown. however, the distribution is sometimes known, which is usually normal. therefore, it would be an advantage to build a technique that utilizes distance and variance information as it can track clusters with different conformations.

over last several decades, the k-means clustering algorithm has been used quite significantly in partitioning the biological data. in the most recent multi-omics data analysis tools, like icluster, and iclusterplus  <cit> , the underlying clustering method used was also k-means. some tools in cancer research, like consensuscluster  and ccplus  <cit> , also utilize k-means as one of the common clustering algorithms. though the k-means clustering algorithm has been extensively applied  <cit>  due to its simplicity and reasonable level of accuracy, it cannot track clusters when samples of different groups are overlapping to each other . in biological data, this is sometimes the case, and thereby leads to clusters which may not be accurate. this has a significant implication in biological findings, particularly in cancer subtypes analysis, population stratification analysis in gwas and multi-omics data analysis. in general, k-means has played a significant role in carrying out analysis for various types of biological data over several years. since data complexity and quantity are increasing, it is important to develop techniques that can perform clustering by following data topologies.

in the field of unsupervised learning and clustering, several wonderful techniques have emerged. some of the techniques are briefly summarized here as follows: 1) clustering using some criterion functions e.g. i) sum-of-squared error criterion; ii) related minimum variance criterion, iii) scattering criterion; iv) trace criterion; v) determinant criterion; and, vi) invariant criterion  <cit> ; 2) clustering using iterative optimization ; 3) hierarchical clustering ; several hierarchical-based algorithms can be found in the literature; e.g., single-linkage  <cit> , complete-linkage  <cit> , median-linkage  <cit>  and so on. single linkage   <cit>  merges two nearest-neighbor clusters at a time in an agglomerative hierarchical fashion. it uses euclidean distance to measure the closeness between two clusters . this method is very sensitive to data position, which sometimes creates problem by forming a cluster in a long chain . the complete linkage  hierarchical approach  <cit>  depends on the farthest-neighbor and reduces the effects of long chains. this technique is also sensitive to outliers. the use of average or median distance could be a way to overcome this sensitiveness. this was done in median linkage  hierarchical approach  <cit> ; 4) clustering is also performed using bayes classifier ; 5) clustering iterative maximum likelihood ; and, 6) support vector clustering .

in the recent literature, support vector clustering has gained a lot of attention . however, it is expensive in processing time and sometimes fails to find meaningful clusters. in general, clustering methods based on bayes classifier and maximum likelihood are still the preferred choice compared to support vector clustering for many applications. there are various approaches to implement these clustering methods.

in this paper, we focus on maximum likelihood estimate. there are three ways to implement the maximum likelihood method. 1) analytic way: likelihood functions are differentiated and equated to zero and the equations are solved to find extrema. the second derivative is then taken to ensure if maxima has reached rather than minima. 2) grid search: an exhaustive search over a region is conducted to find the parameters that produce largest likelihood. 3) numerical analysis: an initial value of parameter is used in a hill climbing algorithm or gradient ascent algorithm  to find the maxima. maximum likelihood is also estimated via em algorithm .

in general, it is impossible to use an analytic approach to find maximum likelihood estimates as the parametric form of data is unknown. grid search is only possible when the dimensionality of the data is very small. most of the time, maximum likelihood is computed by a hill climbing algorithm or by the em algorithm. the potential problem with gradient algorithms is that when likelihood is not differentiable then it is not possible to find gradient to convergence. considering this, in this paper, we propose a stepwise iterative maximum likelihood  procedure which does not require derivatives of likelihood functions. it can find all unknown parameters without solving first derivative and second derivatives of likelihood. the experimental results also show promising when compared to many state-of-the-art clustering methods.

methods
description of maximum likelihood clustering
here, we briefly discuss maximum likelihood method for clustering  <cit> . assume a d -dimensional sample set χ = {x <dig>  x <dig>  …, xn} having n unlabelled samples, and, c is the number of clusters. let Ω = {ωj}  be the state of the nature or class label for j th cluster χj. suppose θ = {θj}  is any unknown parameter . then the mixture density is given by  <dig> px|θ=∑j=1cpx|ωj,θjpωj 

where p is the conditional density, and p is the a priori probability. the log likelihood can be represented by joint density



suppose that the joint density  is differentiable with respect to θ then from eqs.  <dig> and  <dig>  <dig> ∇θil=∑k=1n1pxk|θ∇θi∑j=1cpxk|ωj,θjpωj 

where ∇θil is the gradient of l with respect to θi . if θi and θj are independent and suppose a posteriori probability is given as  <dig> pωi|xk,θ=pxk|ωi,θipωipxk|θ 

then from eqs.  <dig> and  <dig>  we have  <dig> ∇θil=∑k=1npωi|xk,θ∇θilogpxk|ωi,θi 

the gradient of likelihood  can be equated to zero  to obtain maximum likelihood estimate θ^i. the solution can be therefore obtained by  <dig> pωi=1n∑k=1npωi|xk,θ^   <dig> ∑k=1npωi|xk,θ^∇θilogpxk|ωi,θ^i= <dig>   <dig> pωi|xk,θ^=pxk|ωi,θ^ipωi∑j=1cpxk|ωj,θ^jpωj 

in the above equations, θ is replaced by unknown mean and covariance parameters for normal distribution case, to yield maximum likelihood estimates. in the literature, parameter θ is iteratively updated to reach the final value θ^ using hill climbing algorithms such as the newton-raphson method. in general, the computation of first and second derivatives of likelihood is required to find the solution. if the likelihood is differentiable and the a priori probability is non-zero, then convergence can be obtained. however, there is always a possibility of being trapped in a local optima.

stepwise iterative maximum likelihood method
in this section, we describe our proposed method. this method seeks the most optimal partitions in an iterative way. we begin with an initial partition of data and shift a sample from one partition to another partition, and test if such a shift improves the overall log-likelihood. a simple illustration of siml is given in fig.  <dig> fig.  <dig> an illustration of stepwise iterative maximum likelihood method using a c =  <dig> cluster case. in this illustration, two clusters  and  are given with likelihood functions l <dig> and l <dig>  respectively. the center of clusters are depicted by μ
 <dig> and μ
 <dig> . initial total likelihood is lold which is the sum of two likelihood functions . a sample x∈
 is checked for grouping. it is advantageous to shift sample x to cluster  only if the new likelihood  is higher than the old likelihood; i.e., l
new > l
old




if we define class-based log-likelihood of two clusters χi and χj as  <dig> li=∑x∈χilogpx|ωi,θipωi and  <dig> lj=∑x∈χjlogpx|ωj,θjpωj, 

then we would be interested in knowing how the class-based log-likelihood functions  change if a sample is shifted from χi to χj. in order to know this, let us define mean and covariance of χi and χj as μi and μj, and, as Σi and Σj, respectively. the following equations describe mean and covariance:  <dig> μi=1ni∑x∈χix   <dig> μj=1nj∑x∈χjx   <dig> Σi=1ni∑x∈χix−μix−μit and  <dig> Σj=1nj∑x∈χjx−μjx−μjt where ni and nj are number of samples in χi and χj, respectively. if the component density is normal and let p = ni/n  then eqs.  <dig> and  <dig> can be written as li=∑x∈χilog12πd/2Σi1/2exp−12x−μitΣi−1x−μi+nilogpωior=−12trΣi−1∑x∈χix−μix−μit−nid2log2π−ni2logΣi+nilognin 

where tr() is a trace function. since trΣi−1∑x∈χix−μix−μit=trniid×d=nid we can write li as  <dig> li=−12nid−nid2log2π−ni2logΣi+nilognin 

similarly, we can write lj as  <dig> lj=−12njd−njd2log2π−nj2logΣj+njlognjn, 

and the total log-likelihood for c clusters can be written as  <dig> ltot=∑k=1clk 

where lk is from eq.  <dig> or  <dig> 

if a sample x^∈χi is shifted to χj, then the mean and covariance will change as follows :  <dig> μj*=μj+x^−μjnj+ <dig>   <dig> μi*=μi−x^−μini− <dig>   <dig> Σj*=njnj+1Σj+njnj+12x^−μjx^−μjt   <dig> Σi*=nini−1Σi−nini−12x^−μix^−μit 

where μi*, μj*, Σi* and Σj* are means and covariances after the shift.

in order to find the change in log-likelihood functions li and lj, we first introduce the following lemma.

lemma  <dig> if a sample x^∈χi is shifted to cluster χj and the changed covariance of χj is defined as Σj*=njnj+1Σj+njnj+12x^−μjx^−μjt then the determinant of Σj* can be given as |Σj*|=njnj+1d|Σj|1+1nj+1x^−μjtΣj−1x^−μj.

proof by taking determinant of Σj*, we get l <dig> |Σj*|=|njnj+1Σj+njnj+12x^−μjx^−μjt| 

since for m × m square matrices |ab| = |a||b| and for a scalar c, |ca| = cm|a|. we can write eq. l <dig> as l <dig> |Σj*|=njnj+1d|Σj||id×d+1nj+1x^−μjx^−μjtΣj−1| 

from sylvester’s determinant theorem, rectangular matrices a ∈ ℝm × n and b ∈ ℝn × m in |im × m + ab| is equal to |in × n + ba|. therefore, we can write l <dig> |id×d+1nj+1x^−μjx^−μjtΣj−1|=1+1nj+1x^−μjtΣj−1x^−μj 

since |c| = c.

substituting right hand side of eq. l <dig> in eq. l <dig> proves the lemma.

as similar to lemma  <dig>  the determinant of the change in covariance of χi can be written as  <dig> |Σi*|=nini−1d|Σi|1−1ni−1x^−μitΣi−1x^−μi 

we can now observe the change in lj  due to the shift of a sample x^ from χi to χj as  <dig> lj*=−12nj+1d−nj+1d2log2π−nj+12logΣj*+nj+1lognj+1n 

from lemma  <dig> and eq.  <dig>  we can rewrite eq.  <dig> after doing algebraic manipulation as  <dig> lj*=lj+Δlj+c 

where Δlj is given by  <dig> Δlj=−12logΣj−nj+12log1+1nj+1x^−μjtΣj−1x^−μj+lognjn+nj+1d2+1lognj+1nj 

and constant c is given by  <dig> c=−d2−d2log2π 

in a similar manner, change in li can be obtained by using eqs.  <dig> and  <dig> as  <dig> li*=li−Δli+c 

where Δli is given by  <dig> Δli=−12logΣi+ni−12log1−1ni−1x^−μitΣi−1x^−μi+lognin−ni−1d2+1logni−1ni 

and c is same as of eq.  <dig> 

by adding eqs.  <dig> and  <dig>  we can get the change in total log-likelihood  since there is no change in any other clusters apart from χi to χj; i.e., from eqs.  <dig>   <dig> and  <dig> we have  <dig> ltot*=ltot+Δltot 

where Δltot = Δlj − Δli. therefore, the shift of a sample x^ is advantageous if Δltot >  <dig>  this will give the following algorithm :table  <dig> stepwise iterative maximum likelihood method procedure

 <dig>  initialization: select initial partitions with means μ
 <dig>  μ
 <dig>  …, μ
c and covariance matrices Σ
 <dig>  Σ
 <dig>  …, Σ
c
 <dig>  if n
 <dig>  δj=Δlj,j≠iΔli,j=i
 <dig>  transfer x^ to χ
k if δ
k = max δ
 <dig>  update l
tot, μ
i, μ
k, Σ
i and Σ
 <dig>  if l


the following sections discuss the characteristic of the siml method.

initial settings of the procedure
similar to any other iterative based optimization technique, this technique also depends on the initial settings. therefore, it is important to put consideration into the initial settings. in this paper, we implemented three ways of initializing the partitions: 1) random initialization, 2) k-means based initialization, and 3) initialization based on the solution of c −  <dig> partitions and the mean. these schemes are described as follows:random initialization: in this scheme, we create c random means around the center of the data. this technique works well when the number of clusters is small. if c is very large then it can miss clusters.

k-means initialization: in this scheme, the data is first partitioned into c clusters by using the k-means algorithm. the solution of k-means is used as an initial setting for the siml method. this method works well even if the number of clusters is large. most of the time this initialization technique provides good results. however, since the k-means algorithm does not track the data based on covariance information, it has limitations.

initialization based on the solution of c −  <dig> clusters: the initialization of c clusters is done by using the solution of c −  <dig> clusters, which would give c −  <dig> locations. the c th location is the mean of the overall data itself. if only two clusters are required to find, then  <dig> locations around center of the data is used since the solution of 1-cluster is the center of the data itself.



in this paper, we used all the three schemes for initialization and in general schemes  <dig> and  <dig> provide satisfactory results for most of the data conformations.

numerical stability
due to numerical difficulties the convergences of an iterative algorithm can be missed . the problem of numeral difficulties is of particular issue when data dimensionality is high. in this situation, iterative algorithms sometimes do not converge properly. this problem usually appears due to the small numerical values of the covariance matrix. if the eigenvalues of a covariance matrix Σ are small, then its determinant can give a value close to zero due to the fixed point architecture of the hardware. however, this problem can be easily overcome by first conducting eigenvalue decomposition of Σ and using the summation of the logarithm of eigenvalues. it is described as follows:

the eigenvalue decomposition of Σ ∈ ℝd × d will give edet where e ∈ ℝd × d is the eigenvector matrix and d ∈ ℝd × d is the diagonal matrix of eigenvalues. the determinant of Σ will be Σ=edet=d=∏k=1dλk 

where λk is the k th eigenvalue of Σ. if the values of λ are small then |Σ| =  <dig>  this problem can be overcome by simply taking logarithm as logΣ=∑k=1dlogλk 

in a similar way, the inverse of Σ can cause problems in the term of eq. 28; i.e., the computation of the term log1−1ni−1p  when the size of the covariance matrix is large. in order to make this numerically stable a small quantity ϵ >  <dig> can be included as follows: log1−1ni−1+ϵp 

this will ensure that 1−pni+1+ϵ> <dig> 

small sample size case
when the dimensionality d is much greater than the number of samples n  then small sample size problem appears . let a sample set χ = {x <dig>  x <dig>  …, xn} be drawn independently and let the mean and covariance of χ be denoted by μ and Σ, respectively. in the normal density we have a term p = tΣ−  <dig> to compute which cannot be solved due to singular covariance matrix as its inverse does not exist. a simple extension could be to use the pseudo-inverse of Σ . however, this doesn’t solve the problem. if samples x are from χ then p+ = tΣ+ will always be equal to the rank of Σ or basically n −  <dig> . this means that all the samples in a particular cluster would have the same probability and it would not be possible to justify classification of samples based on probability. a second way would be to regularize Σ, however, computing optimal regularization parameter could be a challenging task. one way could be to apply principal component analysis  procedure on a d -dimensional sample set χ ∈ ℝd to transform it to a parsimonious sample set y ∈ ℝh where h < min h < min. thereafter, the clustering procedure can be performed.

determination of the number of clusters
it is potentially important to estimate the number of clusters c present in the sample set. since this information is usually not provided, it is important to obtain the value of c with whatever information we have at hand. basically, the only information we have is the sample itself. in the maximum likelihood procedure we compute likelihood from sample set. therefore, this information can be utilized to estimate the number of clusters. in order to evaluate c, we can run the siml algorithm for a range of clusters e.g. 1 ≤ c ≤ k to see at what point the likelihood function stabilizes or reaches maximum. in this paper, we investigated two ways to compute c. in the first way, we compute the maximum log-likelihood maxltot achieved for all values of c ∈ . at a particular value of c the maxltot reaches maximum and does not change much. this would be the estimated value of c. in the second way, we compute the difference between the maximum log-likelihood maxltot achieved and the first value of ltot after siml procedure . therefore, for a particular number of cluster c, we will get this difference likelihood and we denote it as delltot which is equal to maxltot − ltot or max − ltot, where ltot defines the value of ltot at an iteration r. the curve of delltot as a function of c would give a peak at some value of c which would be its best value. in most of the data conformations, maxltot gives reliable results. nonetheless, both the graphs of maxltot and delltot  are illustrated in the experimental section of the paper.

RESULTS
in order to evaluate the algorithm, we carried out experiments on normal gaussian data as well as on biological data. we divide this section into  <dig> subsections. in subsection  <dig>  we illustrate the performance of various methods using three cluster case. subsection  <dig> indulges on maximum likelihood plots as a function of number of clusters. in subsection  <dig>  we discuss the processing time of the algorithm. in subsection  <dig>  we discuss the performance in terms of clustering accuracy and rand score of various methods; and, in subsection  <dig> , we discuss siml on biological data.

an illustration using three clusters
since data distribution of gwas can appear as approximately gaussian, we generated normal distribution data with  <dig> different mean and covariance for simulation purposes. furthermore, if we consider gwas data from a continent  as one cluster, from a country  as second cluster and from a city  as a third cluster, then third cluster  will reside inside second cluster , and second cluster  will reside inside the first cluster . therefore, clusters will overlap with each other. to simulate this scenario, we generated a sample set with  <dig>   <dig> samples,  <dig> dimensions and  <dig> clusters as shown in fig. 2a, and applied various methods on it. cluster  <dig> is the least dense  and cluster  <dig> is the most dense. cluster  <dig> has mean  and variance  <dig> in each direction. similarly, mean and variance of cluster  <dig> and cluster  <dig> were  and  <dig> , and,  and  <dig> , respectively. the clusters overlap each other and the goal is to track these clusters. it can be seen  that k-means clustered the  <dig> clusters without considering the distribution information. the processing time to perform the k-means algorithm was  <dig>  s. support vector clustering   <cit>  was difficult to perform as it is not possible to provide number of class information. the parameters were tuned so that  <dig> clusters are outputed. the processing time by this method was  <dig>  s . it can be observed from the fig. 2c that this method was failed to track the clusters. next, support vector clustering   <cit>  was performed. the default parameters gave  <dig> clusters. therefore, as similar to the previous cg method, tuning of parameters was carried out to extract only  <dig> clusters. processing time was  <dig>  s excluding the tuning time. this method also misses the clusters . then we performed the proposed siml method. this method was able to track all the  <dig> clusters in  <dig>  s per repetition . the likelihood plots are discussed in the following section.fig.  <dig> an illustration using  <dig> clusters: a three cluster data where n =  <dig> and d = 2; b k-means clustering, different colors show different clusters; c support vector clustering ; d support vector clustering ; e stepwise iterative maximum likelihood  method



likelihood plots
here we discussed three plots: log-likelihood  versus sample , maximum log-likelihood  as a function of number of clusters  and delltot as a function of number of clusters .fig.  <dig> likelihood plots a
l
tot plot, b
maxl
tot plot and c
dell
tot plot



figure 3a depicts ltot plot for  <dig> clusters. when a sample is moved from one cluster to another cluster the value of ltot is updated. this is an increasing function and the maximum value of ltot is defined as maxltot in this paper.

figure 3b depicts maxltot plot. since in general, the number of cluster c information is unknown, it is therefore crucial to estimate this value. in this paper we showed that by using maxltot plot and delltot plot, it is possible to estimate c. for this, one can provide a range of c values and the value for which maxltot curve converges  is the estimated c. we use the same data we generated in fig. 2a and provide  <dig> values of c as 1 ≤ c ≤  <dig>  it can be seen from maxltot plot that it converges or peaks at c =  <dig> 

processing time
here we discuss the processing time of the siml algorithm. in order to give a complete picture, we investigated the clock time in seconds for samples n =  <dig>   <dig>   <dig>   <dig>   <dig> ,  <dig>  and  <dig>  having  <dig> clusters. we use the same conformation of data as depicted in fig. 2a, however, we increased the dimensionality to d =  <dig>   <dig>   <dig> and  <dig>  figure  <dig> shows the processing time of the algorithm when processed in linux platform  with  <dig> processors  and with  <dig> gb memory for a repetition.fig.  <dig> processing time of siml method for n = 3k − 102k and d = 10 − 200



clustering on artificial data
we performed clustering accuracy and rand score test on a set of artificial data. for artificial data, we generated d -dimensional,  <dig> cluster data such that cluster samples are overlapping to each other . there are in total  <dig> samples . we computed cluster accuracy and rand score for various methods. for statistical stability, we generated data  <dig> times for a particular dimension d by changing random seed of the normal data. thereby, we computed average clustering accuracy and average rand score over these  <dig> attempts for dimension d. we then varied dimension d =  <dig>   <dig>  …,  <dig> and reported average clustering accuracy and average rand score in fig.  <dig>  for comparison, we used centroid-based technique like k-means, hierarchical-based technique like slink  <cit> , clink  <cit>  and mlink  <cit>  and model-based technique  like mclust  <cit> . it can be observed from fig. 5a that mclust and siml methods perform quite well on gaussian data. k-means algorithm also performs reasonably well on this data. mlink and slink couldn’t perform well. for average rand score , clink, k-means, siml and mclust are exhibiting reasonable performance. however, mclust and siml are superior reaching almost  <dig> rand score. since mclust and siml are derived from gaussian model, their performance on gaussian data are well compared to other techniques.fig.  <dig> 
a average clustering accuracy on gaussian data. b average rand score on gaussian data



clustering on real data-i 
in this section, we utilized various biological data and reported clustering accuracy and rand score. we employed several methods such as k-means, slink, clink, mlink and mclust for comparison. the description of biological data is given as follows:

srbct dataset  <cit> : the small round blue-cell tumor dataset consists of the expression of  <dig> genes from  <dig> samples. this is a four class classification problem. the tumors are burkitt lymphoma , the ewing family of tumors , neuroblastoma  and rhabdomyosarcoma . the dataset consists of  <dig>   <dig>   <dig> and  <dig> samples of bl, ews, nb and rms respectively.

mll leukemia  <cit> : this dataset has  <dig> classes, namely all, mll and aml leukemia. the dataset contains  <dig> all,  <dig> mll and  <dig> aml. the dimension of mll dataset is  <dig> .

all subtype dataset  <cit> : this dataset consists of the expression of  <dig>  genes of subtypes of acute lymphoblastic leukemia. the dataset has seven classes namely bcr-abl, e2a-pbx <dig>  hyperdiploid > <dig> chromosomes all, mll, t-all, tel-aml <dig> and other . samples per class are  <dig>   <dig>   <dig>   <dig>   <dig>   <dig> and  <dig> respectively.

to vary the data dimensionality , we utilized chi-squared feature selection method to rank the attributes. the dimensionality investigated was d =  <dig>   <dig>  …, nm/ <dig>  where nm is the cluster with minimum number of samples. we then performed cluster analysis  on these datasets and compared siml with the k-means, slink, clink, mlink and mclust methods. the results are reported in tables  <dig> and  <dig> , tables  <dig> and  <dig> , tables  <dig> and  <dig>  and table  <dig> . clustering accuracy is depicted in tables  <dig>   <dig>   <dig>   <dig>   <dig> and rand score is shown in tables  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig>  the methods achieving highest results are depicted in bold faces.table  <dig> clustering accuracy on srbct dataset

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
the methods achieving highest results are depicted in bold faces

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
the methods achieving highest results are depicted in bold faces

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
the methods achieving highest results are depicted in bold faces

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
the methods achieving highest results are depicted in bold faces

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
the methods achieving highest results are depicted in bold faces

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
the methods achieving highest results are depicted in bold faces



it can be observed from tables  <dig> and  <dig> that siml achieved the highest clustering accuracy and rand score in 3/ <dig> cases, and mlink and clink achieved the highest performance in 1/ <dig> case each. for the mll dataset , mclust achieved the highest clustering accuracy and rand score in 4/ <dig> cases and 3/ <dig> cases, respectively. siml was able to achieve 4/ <dig> times highest clustering accuracy and rand score. apart from siml and mclust, k-means was also able to get reasonable performance especially for higher dimensions. for all subtype dataset , k-means achieved the highest clustering accuracy in 2/ <dig> cases and highest rand score in 3/ <dig> cases. siml reported the highest clustering accuracy and rand score in 5/ <dig> cases and 4/ <dig> cases, respectively. these results show that siml can perform reasonably well for many datasets employed in this work. in table  <dig>  we provided the summary of the number of clusters estimated by siml. the corresponding maxltot plots are given in the additional file  <dig>  it can be seen from table  <dig> that siml estimates correctly the number of clusters most of the time.

clustering on real data-ii 
in this section, we attempt to illustrate the use of siml on real data case. in practical situation, there are two problems to address in a dataset: 1) how many clusters are present; and, 2) what are the locations of the clusters? . sometimes, it is also necessary to identify or remove some sub-population from the data in order to solve the issue of population stratification. the existence of population stratification unmatched between cases and controls can produce false positives and negatives in gwas  <cit> . for this exercise, we utilize data from a collection of  <dig> individuals from the biobank japan  project and  <dig> japanese hapmap  samples  <cit> . the total number of single nucleotide polymorphisms  was  <dig> , genotyped via the perlegen platform. we also included  <dig> han chinese hapmap  samples and merged these data using plink v <dig>   on  <dig>  common snps. prior to pca, we performed filtering using similar criteria as of that used by yamaguchi-kabata et al.  <cit> . we removed snps with a call rate < 99 %, a maf <  <dig> , and a hardy-weinberg equilibrium  exact test p-value > 10−  <dig>  individuals with missing calls for > 5 % of snps were also removed. after filtering,  <dig> bbj,  <dig> jpt and  <dig> chb samples sharing  <dig>  snps remained. consequently, the population consists of  <dig> main land japan  samples,  <dig> chb samples and  <dig> okinawa samples referred as the ryukyu  cluster. the hondo samples can be further subdivided into  <dig> kyushu,  <dig> kinki,  <dig> tokai-hokoriku,  <dig> kanto-koshinetsu,  <dig> tohoku,  <dig> hokkaido and  <dig> jpt samples. the aim here is to classify ryu and chb from hondo so that hondo only data can be explored for further analysis. we first performed pca on the filtered data using the r package snprelate  <cit>  to reduce the data dimensionality and conducted analysis on  <dig> dimensional data. linkage disequilibrium  pruning with a threshold of  <dig>  was used to define a representative set of  <dig>  snps for pca.

in summary, this two dimensional data contain three clusters: hondo, ryu and chb. here we first computed true positives  for hondo, ryu and chb clusters. this would provide us information regarding correctly labelled samples in each cluster. for this purpose, we executed all the methods to provide  <dig> clusters of the data. the true positives for various methods are depicted in table  <dig> table  <dig> true positives for hondo, ryu and chb cluster on bbj and hapmap data



from table  <dig>  we can see that k-means was able to cluster all chb samples correctly and also attained high true positive for the ryu cluster. however, it displayed comparatively inferior performance for the hondo cluster. slink reported very high true positive for hondo and chb clusters. however, it completely missed the ryu cluster. clink, mlink and siml were able to label all  <dig> samples of chb correctly. siml achieved the highest true positive for ryu among these  <dig> methods and clink was slightly better  than siml  for the hondo cluster. in this case, mclust did not perform well. nonetheless, mclust gave a high true positive for ryu cluster. it should be noted here that this data is highly imbalanced. out of  <dig> samples,  <dig> samples belong to the hondo cluster  leaving only 3 % of samples for the ryu and chb clusters. this imbalance creates a problem in a way that majority of samples turn to be labelled under the larger cluster leaving the smaller clusters. nonetheless, siml has shown encouraging results.

in the next analysis, we did not provide the number of clusters information to study the characteristics of siml method. the resulting clustering is illustrated in fig.  <dig>  for this case, the maxltot plot gives peak at  <dig> clusters  and therefore  <dig> clusters were used in this case. the true ryu and chb labels are shown on the plot as circles and diamonds, respectively. most of hondo samples are in cluster  <dig>  there are around  <dig> samples in cluster  <dig> representing the hondo region. almost all chb are clustered in cluster  <dig> and most of ryu are clustered in cluster  <dig>  around  <dig> ryu are clustered in cluster  <dig> giving a false negative  error of  <dig> samples  and no chb sample is misclassified giving fn error of  <dig> samples . cluster  <dig> and cluster  <dig> can be classified easily and analysis can be conducted on cluster  <dig>  with very less fn error.fig.  <dig> clustering by siml on 2-dimensional bbj data

fig.  <dig> 
maxl
tot plot for 2-dimensional bbj and hapmap data



in summary, siml successfully estimates the number of clusters as well as the locations. the siml package was tested on ubuntu  <dig>  lts os . the os type is 64-bit. for matlab we used ‘statistics and machine learning toolbox’.

CONCLUSIONS
in this work, through considering conformations of many biological data, we developed a clustering algorithm based on maximum likelihood estimate. the proposed stepwise iterative maximum likelihood  method is different from other maximum likelihood methods as it does not require the computation of first and second derivative of likelihood functions. this avoids the necessity to have differentiable likelihood functions for convergence. the siml method was tested on artificial and real data to evaluate its performance. we show that siml was able to produce promising results over state-of-the-art methods. the siml method was also able to estimate the number of clusters successfully. the matlab package of siml is available from our webpage.

additional file
additional file 1: estimation of number of clusters using siml method. 



