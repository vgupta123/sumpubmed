BACKGROUND
advances in biological imaging in the past decade  <cit>  have brought the field of bioimage informatics to a new scale  <cit> . multi-dimensional microscopic images have played significant roles in biology discovery, such as exploring neuron system’s structure and function during neuronal development under genetic manipulation  <cit> . much effort has been spent on various aspects of informatics such as storing, visualizing and analyzing high dimensional and content-rich biological images  <cit> . such efforts have yielded programs like imagej  <cit> , vaa3d  <cit> , cell profiler  <cit> , farsight  <cit> , icy  <cit> , ome  <cit>  and bisque  <cit> .

pattern recognition algorithms have also gained momentum in automatic analysis and quantification of biological images. pattern recognition uses a trained classifier to automatically assign an image to a category of interest. to build the trained classifier, the images are typically transformed into a feature vector via feature extraction and possibly followed by a subsequent selection  <cit> . the trained model can then be used to predict unseen images’ category, with applications such as protein expression annotation and characterization, cell phenotype determination/counting, and subcellular protein arrangement  <cit> .

several pattern recognition-based tools for biological image classifications are available. details of the commonly known free tools are compared in table  <dig>  table  <dig> shows that current tools have their various limitations. for example, almost all the related tools use a fixed pattern recognition model . some of them only work with 2d images  or require commercially licensed software. to summarize, several challenges in the field remain to be addressed:

•adaptability to different problems. in pattern recognition, it is widely believed that no model can work universally well for every problem  <cit> . a “model” means image feature descriptors, classifiers and the combination of them. currently most of the bioimage recognition tools provide fixed  choice for models.

•image-oriented multi-dimensional machine learning for bioimage quantification. platforms for 3d and higher dimensional images classification and analysis lag behind greatly, compared with their 2d counterparts. machine learning libraries that are not image-oriented, such as weka  <cit> , fall short on efficiency when classifying high-content biological images.

•automatic annotation of images, which can be formulated as image classification problems by treating annotation labels as classification targets, are seldom addressed by existing tools other than some efforts for annotating specific images sets  <cit> .

•usability for non-technical users. existing tools often fall short of good usability for biologists who do not have a lot of knowledge about pattern recognition and machine learning algorithms—yet they are the major users of such tools. this has been recognized as a common issue, and usability has recently been suggested as a more highly valued goal in bioimage informatics  <cit> .

biocat  is developed as an effort to address the above challenges. as shown in the last row of table  <dig>  it provides a free, open, portable, gui-based, extensible platform for multi-dimensional bioimage classification and annotation.

compared with existing tools, it has the advantages of not requiring any commercial licensed software, working with both 2d and 3d images as well as regions of interest , and the capability to extend with new algorithms. more importantly, it addresses the adaptability challenge by providing a customizable lego-like solution. the user can interactively build many algorithm chains, each of which consists of a sequence of linked algorithm modules and represents a model for image classification/annotation. these chains can then be compared by biocat, which outputs the most suitable model for the given data. in contrast to other tools that use fixed algorithms, biocat provides a systematic approach for comparing algorithms and their combinations, enables efficient model selection for biological image classification and detection, and thus provides a comprehensive tool for building the effective model for a new task at hand.

the entry for imagej in table  <dig> is included due to its common use of roi annotation. imagej is more for image processing instead of pattern recognition because of its lack of classifiers except some plugins . if excluding imagej, biocat is the only tool in table  <dig> that provides an extensible design allowing new algorithms dynamically loaded as plugins, as far as we know. on the other hand, imagej’s processing capabilities such as denoising and enhancement can be used to pre-process the images before they are applied to pattern recognition tasks. the inter-operability of biocat with other tools such as imagej will be further discussed in later sections.

the paper is organized as follows: we will describe the design of the tool in implementation section. experiments and discussions are in experiments and results section and discussion section, followed by conclusions.

methods
pattern recognition algorithms suitable for multiple-dimensional biological image classification and annotation are central components of biocat, which include multiple feature extracting and selection algorithms, as well as classifiers. in this section, we will start with a brief summary of the adaptive design of biocat that allows algorithm modules to work together and form a customizable solution for a given problem. we will then describe the representative algorithm modules . we will also detail a 3d feature extractor.

design of biocat
biocat is designed with 1) usability, 2) extensibility, 3) inter-operability, and 4) portability. figure  <dig> shows some screenshots of the biocat gui.

usability
biocat is intended to be mainly used by biologists with no much experience in pattern recognition . while some training is required, we expect that the end users can adaptively build a model that is best fit for their classification problem at hand, facilitated by the gui of the tool.

as shown in figure  <dig>  biocat has a user-friendly gui that permits users to conduct: a) customizable model building, which adaptively selects a model for the given biological image classification/annotation task. the user can do so using a training set and a testing set, or cross validation on a given set. the model can be built, compared and saved. one important feature of biocat is its “multi-chain comparison mode” , in which multiple algorithms chains are compared for the given problem. b) annotation and classification of image sets or rois, using the chosen model. biocat can work with both image classification or multi-label annotation: if each image in a set corresponds to one label, then it resembles normal image classification; if each image could correspond to more than one labels, then it is a multi-label annotation task.

in order to facilitate supervised learning, the training images  are associated with corresponding labels. biocat allows three possible ways of such association and the user can pick the most suitable way for him/her: a) target file input mode: a text file that assigns a label or multiple labels to each image; b) directory tree input mode: a directory structure with each subdirectory being an image category; or c) roi mode: roi/landmark files where the name of the imagej roi zip file or vaa3d landmark file indicates the image category.

extensibility
biocat has a modular design, and thus is extensible and developer-friendly. biocat algorithm specification is provided for extending biocat with more algorithms: an algorithm developer can add a new algorithm to biocat as long as it conforms to the api  specifications for a feature extractor, a feature selector, or a classifier. an xml file can be used by the module developer to specify parameters of the algorithm that will show up on gui. .

inter-operability
biocat runs as a standalone application that focuses on classifying/annotating a set of images  using pattern recognition algorithms. it can inter-operate with other tools with different focus. the roi manager in imagej and landmark manager in vaa3d can be used to save rois and import them into biocat for training. classification/annotation output files can be edited to be vaa3d landmark files for further visualization. biocat also generates reports in pdf files for algorithm comparison results and annotation results.

portability
biocat is developed in java. thus this software is portable to various operating systems such as windows, mac and linux as long as java virtual machine is available.

to summarize, the uniqueness of the biocat tool, other than the list of built-in pattern recognition algorithms suitable for image classification tasks , is that the algorithms are modularized so that they can be “chained” in a customizable way to form adaptive solution for various problems, and the plugin-based extensibility gives the tool an open and flexible architecture to include future algorithms.

modularized algorithms and algorithm chain
the biocat’s algorithms are modularized to facilitate the adaptive comparison of what we call “algorithm chains”, which is a sequence of several pattern recognition algorithms that include some feature extractors, one or more optional feature selector, and a classifier.

for feature extraction, we consider 2d and 3d textural, morphological and structural features. texture features are an important category of effective image features such as wavelet features. morphological features describe the shape and structure of 2d and 3d objects. a pixel in a 2d digital image consists of  <dig> or  <dig> neighbor pixels depending on whether the diagonal neighbors are considered. some 3d features can be extended from 2d by extending an 8-connected neighborhood to a 3d 26-connected neighborhood. examples of morphological features include hu moments, which are statistical summaries of intensity in the 2d or 3d object neighborhood, and measures in relation to the center of mass of the images  <cit>  or zernike moments which are orthogonal invariant moments using a set of complex polynomials  <cit> . other algorithms include hessian features which are suitable for detecting tube-like neuronal structures, gaussian derivatives and laplacian features  <cit> , as well as object statistics  <cit> . currently  <dig> different feature extractors are available in biocat with the following examples, each providing one to multiple measures extracted from an image:

• <dig> 2d hu moments, invariant to translation, scale and rotation.

• <dig> 3d hu moments: 3d extension of 2d hu moments;

•zernike moments: default to the first  <dig> zernike moments.

• <dig> statistics for the objects in an image: number of objects; their average size and variance, and their spatial location in relation to center of mass of the image, both average and variance; ratio of the size of the largest object to the smallest; ratio of the distances to center of mass between the furthest and the closest.

•object territory: overall territory the foreground object.

•image’s hessian and laplacian features.

•2d and 3d wavelet features. the 3d anisotropic wavelet texture feature will be detailed in 3d anisotropic wavelet texture feature section.

biocat has feature selectors such as fisher’s criterion that select a subset of features. biocat also provides several classifiers including support vector classifiers  <cit> , nearest neighbor, naïve bayes, decision tree, and random forest.

as explained in implementation section, biocat supports an extensible design, so the above algorithms are of a growing list. currently, biocat has about  <dig> algorithms for 2d/3d feature extractors, selectors and classifiers. the list includes the 3d anisotropic wavelet feature extractor and re-implementations of known algorithms . the implementations are memory- and efficiency-aware for working with high content multidimensional bioimages. these feature extractors in biocat reuse the memory space for each image. in addition, due to the extensible design, libraries may be wrapped and incorporated as plugins whenever such algorithms become available. for example, hessian features is a plugin wrapped around featurej implementation  <cit> .

note that the “algorithm chain” in our paper refers to a sequential flow of feature extraction, selection and classification, which is different from the narrower sense of supervised  learning of pattern recognition. when multiple feature extractors are used, these features are linearly aggregated. the combined feature’s dimensionality is the sum of all individual feature vectors. such combination may lose some property  of certain features if they are not combined with features with similar property, yet it provides the flexibility for extending to many feature extractors that are often useful for biological image classification. when multiple selectors are used, it is a cascading design: the feature vector goes through the first selector. the resulting feature vector is then filtered by the second selector and so on.

with all the algorithm modules as building blocks, biocat can conveniently build algorithm chains to compare multiple alternative models. one example algorithm chain can be an anisotropic 3d wavelet feature extractor along with a 3d hu moments feature extractor, followed by a fisher feature selection and ultimately a support vector classifier. the chains with the same types of algorithms but different parameters are considered to be different chains, so that dissimilar parameters  can be compared to find the suitable ones for the model. figure 1b shows biocat’s screenshot of building and comparing the algorithm chains.

in addition, functionality is included in biocat for roi annotation :

 <dig>  sliding window-based roi annotation. with a model learned and selected, biocat can conduct automatic roi annotation on a new image using a window sliding algorithm. a sliding interval parameter is defined which represents how many pixels apart will the trained model be applied to a pixel/voxel. because it represents the frequency of decision making, a small interval leads to a higher annotation resolution with longer running time. when the interval is set to  <dig>  then every pixel in the image is annotated: a roi is extracted surrounding each pixel/voxel, and a classification is performed to assign a category to the pixel/voxel. the parameter can be adjusted via gui.

 <dig>  in the case of 3d image annotation, it is possible that a large portion of the 3d image is black. to improve annotation efficiency, local maxima can be calculated using morphological dilation. the decision can thus be made only on the set of local maximum voxels. such scenarios are useful for 3d object quantification , such as synapse or cell counting using 3d confocal images, where objects of interest are the bright regions in largely dark images.

3d anisotropic wavelet texture feature
one important category of effective image features is texture features, which is a family of features that measure the texture of images such as wavelet features. in particular, wavelet features are obtained using discrete wavelet transform  with wavelet functions  <cit> . two dimensional wavelet features had performed well in our previous work with gene-expression annotation of fruit fly  <cit> . however, full extension of these features from 2d to 3d can lead to a big increase in the number of features, and consequently the storage and computational need. for example, for wavelet transform, a full extension to 3d wavelet features will lead to a number of features that is cubic to the side length of the object . we thus designed a multi-scale anisotropic 3d wavelet feature. such features can be particularly suitable for 3d confocal microscopic images since it adapts to the anisotropic nature of confocal imaging where z resolution is typically less than x-y resolution.

the feature for a voxel of interest at  is extracted from its surrounding 3d volume:

 fk,nx,y,z=∑zi=z−rzz+rzwzi∑yi=y−ryy+ry∑xi=x−rxx+rxψk,nxi,yiixi,yi,zi 

where i is the intensity, the size of the extracted volume is **, ψ is the discrete haar wavelet basis function, k, n are the dilation and translation factors of wavelet with k= <dig>  , n= <dig> ...*, and  is the number of slices included in calculation. w is a gaussian function with middle z slices weighted heavier than other slices.

the multi-scale component of the 3d anisotropic wavelet is represented by the dilation factor k of the wavelet transform. the number of the scales is also called wavelet level. at each level, a haar-based discrete wavelet transform is done on the approximation image from the previous finer resolution. figure  <dig> shows an example of level- <dig> 3d isotropic wavelet, where 2*rz+ <dig> slices are involved in calculating the feature for a 3d image of a fluorescently labeled fruitfly brain.

note that other tools also use wavelet for image analysis. for example, icy  <cit> ’s spot detector plugin  <cit>  uses wavelet adaptive threshold for object detection, which is an unsupervised scheme different from the method presented in biocat.

experiments and 
RESULTS
biocat is able to associate a biological image to one of many categories of interest, and perform 2d/3d roi annotation based on roi classification, as well as multi-label image annotation. this section shows experiments on using biocat for these tasks and demonstrates the effectiveness of the algorithm modules as well as the automatic algorithm selection conducted by biocat. these case studies are also selected due to their diversity. in particular, 3d roi classification and quantification section and 2d roi classification and quantification section describe how biocat can assist in some popular quantification problems encountered in cell biology and neuroscience.

2d/3d image set classification and model selection
we tested biocat with thirteen biological image sets for classification. additional file 1: table s <dig> shows the properties of the image sets, which shows that the image sets are from different sources with various imaging modalities and characteristics. among the image sets, k <dig> 2d and k <dig> 3d are fluorescent-labeled confocal microscopic images of fruitfly brain for expressed neuronal bundles of different genetic lines. others are image sets corresponding to different types of sub-cellular locations  or different cellular types   <cit> . when classifying an image, if the image contains multiple channels , biocat can work on a selected channel. for k <dig> 2d and 3d image sets which are three-channel rgb images, the classification is done on the green channel which corresponds to the gfp expression. for data sets do not separate between training set and testing set , we report the recognition rates using five-fold cross-validation. we repeat the cross-validation for five times  for a total of  <dig> runs. the mean and variance of recognition rates over the runs are computed and reported in table  <dig> 

the bold numbers indicate the higher accuracy.

table  <dig> also gives the comparison of performances between biocat and the benchmarking results in literature. literature results are from the wndchrm tool which achieves the best accuracy on the sets so far. wndchrm has a fixed option of extracting about  <dig> or  <dig> features regardless of the problem. for comparison, we also report the number of features used by biocat in table  <dig> 

results in table  <dig> show that biocat can effectively classify various biological image sets. for nine out of the thirteen data sets, biocat achieves the state-of-the-art or better accuracy. for binuleate and livergendercr, only  <dig> features per image were used to achieve about 100% accuracy. for muscleage, liveraging and livergeneral sets, biocat is able to greatly improve the current best results. for the cho set, by using object statistics alone, which is a set of  <dig> features, biocat achieves comparable results with wndcharm and  <dig> % more than the original literature . comparatively, wndchrm needs a much larger number of features to achieve the reported results. wndchrm’s need of calculating thousands of complex features can lead to a much higher computational complexity which would make it slow on larger images  biocat’s adaptive design, on the other hand, allows the best suitable algorithms to be selected for a given biological image classification problem, which can sometimes be simple, as in the case of the cho problem.

we also see that biocat does not outperform literature on four sets of pollen, hela, lymphoma and rnai. it may be due to that reported results are based on current built-in algorithms in biocat and wndchrm’s longer list of descriptors including halalick textures could have helped on these specific sets. further effort on parameter fine tuning may also help improving the results. in this paper, we have been focusing on demonstrating the tool’s capability of empirical model comparison. given the extensible design of biocat, we expect to continue improving the accuracy as new algorithm modules suitable for the problems being added in.

on the other hand, it has also been pointed out that some low level descriptors could cause bias on classifying some biological images sets  <cit> . for example, cho and binucleate datasets can be biased in the sense that background artifacts could contribute in classification  <cit> , so the accuracies may be optimistic. in general, it is worth noting that features and results should be validated in terms of biological relevance and best practice on this regard will be further studied.

in additional file 2: table s <dig>  we demonstrate the 3d anisotropic wavelet feature for the k1503d image set, and how biocat was used to do chain comparison. the anisotropic wavelet feature has rz set to  <dig> . wavelet level is set to  <dig>  the nearest neighbor is a 3nn. support vector machine classifier has a linear kernel and the regularization parameter set to  <dig>  fisher selector selects the best  <dig> features. as we see from additional file 2: table s <dig>  the three algorithm chains containing 3d anisotropic wavelet  deliver very satisfactory results. both chain  <dig> and chain  <dig> achieve 100% accuracy with svm as the classifier, regardless of whether fisher’s feature selection is performed. chain  <dig> has 90% accuracy with random forest as the classifier, while the alternative feature hu moments has a mediocre performance compared with anisotropic wavelet even when the same type of classifier is used . this shows the potential effectiveness of the anisotropic wavelet feature as a 3d feature extractor. the bar chart that compares and reports the results of the five chains is directly from biocat’s gui, as part of its model selection functionality.

figure  <dig> further exemplifies how biocat selects an effective chain on some image sets in additional file 1: table s <dig>  for each dataset, biocat dynamically looks for a suitable combination of feature extractors, selectors and classifier, chooses the most effective algorithm chain for the given image set among candidate chains. for example, for the binucleate set, the algorithm chain of “haar extractor; fisher selector; 3-nearest neighbor classifier” out-wins other chains and gain 100% accuracy.

3d roi classification and quantification
3d roi quantification such as cell counting in high content images is a common problem in biology. traditionally, it has been done using approaches such as connected component analysis or template matching without training a classifier. the general consensus on supervised learning using of a trained model has been that it can produce robust quantification results  <cit>  and is suitable for large-scale analysis due to minimal user intervention  <cit> . recent visualization tools such as vaa3d has also made tagging of the 3d images more convenient . biocat can further facilitate pattern recognition based approach for 3d roi classification and quantification.

figure  <dig> shows an example of neurons in drosophila m.  larvae nervous system, where gray clusters are the nuclei. such images may contain thousands of cells per image. often the cells form crowded clusters and the boundary among the objects may be blurry , which make such object counting in 3d biological images a challenging task.

we formulate the object counting as a pattern recognition problem based on voxel classification: for each voxel, we develop a model using biocat to detect if it is potentially a center of a nuclei. a training set for rois on a training image with associated labels  needs to be generated. the process for 3d roi classification then starts with loading the image and labeled rois into biocat for running the model selection. once the model is picked, new images are loaded into biocat, rois are classified. classification can be limited to images’ local maxima if needed.

additional file 3: table s <dig> shows the example algorithm chains compared during the model selection process of biocat for the case study. we labeled  <dig> positive voxels and  <dig> negative voxels in the image. the 3d roi volume is 7*7* <dig>  the rz in 3d anisotropic wavelet is set to  <dig>  svm classifier uses linear kernel with regularization parameter set to  <dig>  five-fold cross validation is used to report the results. chains are built and compared by biocat to select effective models for the classification of 3d roi around a fruitfly nuclei center. we experiment the cases when only 3d anisotropic wavelet features are used; only 3d hu moments features are used; and the combination of 3d anisotropic wavelet and hu moments features are used.

additional file 3: table s <dig> shows that 3d anisotropic wavelet feature alone can effectively yield  <dig> % recognition rate. on the other hand, if only 3d moments are used as the features extracted from the 3d roi surrounding the voxel, recognition rate is only 96%. the combination of both features can further improve the recognition rate to  <dig> %. it again shows that the 3d anisotropic wavelet may be an effective 3d feature extractor for biological image classification. additional file 3: table s <dig> also shows that the use of random-forest classifier or support vector machine yields about the same result. all the comparisons among algorithm chains listed in additional file 3: table s <dig> are done by biocat and the bar chart is the output of the tool.

the predicted center candidates by biocat can be exported. they may be used for further quantification purposes. for example, the cell counting application described in  <cit>  does neuron counting by performing mean shifting on the detected centers to move them to the closest center of mass. the nearby centers are merged before yielding the cell count. the advantage of such cell counting based on roi classification is that when the cells are largely clustered and the boundary are blurry , the approach can give a count without the need of segmentation, especially when the shape of the object is oval.

2d roi classification and quantification
to demonstrate biocat’s 2d roi classification, we describe a case study of axon detection for neuron morphology profiling in this experiment, in which we employ biocat to detect axon pixels from the neuronal image to assist quantification of neuronal dendritic territory.

intricate morphology is a striking feature of neurons and plays an important role in functional analysis and quantification of neuronal systems  <cit> . among the neuronal morphometrics, the territory occupied by the dendritic tree is an important measure of the neuron morphology that not only indicates defective shapes of potential function of neurons, but also serves as an important parameterization factor for further quantification analysis in mutant screening. we consider gfp-labeled lobula plate tangential cells  in the brain of the adult drosophila m.  . to extract the dendritic tree, we first automatically detect and remove non-dendritic subcellular components  from the image. upon removal of the axon and soma, the territory of the dendritic tree can be easily estimated. in this paper, we focus on explaining the use of biocat for axon detection: similar as 3d roi annotation, the flow starts with tagging the rois for training, then biocat employs a trained model to detect axon candidate pixels from the neuronal image.

a training set consisting of  <dig> categories of image regions are randomly extracted from two neuron images – one wild type and one mutant type. the training set includes  <dig> axons,  <dig> branches,  <dig> soma and  <dig> background image regions. we make use of biocat, which performs comparison of various combinations of extractors, selectors and classifiers as explained in previous sections. the winner algorithm chain consists of 2d haar discrete wavelet as features, fisher’s criterion that selects top  <dig> features, and the support vector machine as the classifier. once the model was built, it was applied to other lptc images to automatically annotate image regions and export the regions identified as axon candidates. figure 6b visualizes how biocat can be used to annotate axon, dendrites, soma and background. it is an overlay of the annotation results on the original image: the original neuron was light green; the axon and soma pixels are annotated using bright green and blue, respectively. a sliding window algorithm with interval parameter being  <dig> pixel is used in annotation. the axon candidates detected by biocat will then be post-processed by finding the area using length and orientation considering that the axon is a long tubular structure. once the axon  is removed, a rolling-ball algorithm is done to estimate the territory of the dendritic tree. figure 6c shows the results of extracted dendritic territories from wild type and mutant neurons.

in this experiment, biocat plays a similar role as segmentation, except that most segmentation tools deal with two classes , while the roi classification gives multiple classes to annotate a pixel/voxel. we used a fiji plug-in, “trainable segmentation”  <cit> , to compare the results of the multi-class annotation for the given image. the plugin uses a trainable model  to classify each pixel of the image. figure 6d shows its output image, where the  <dig> gray levels, from deep to light, represent soma, background, dendrite and soma, respectively. we can see that although the plugin can also detect soma, it is less effective in separating axon from dendrite . biocat can extract the entire axon .

discussions
adaptive algorithm chain selection
biocat provides a flexible and adaptive platform that accommodates the ever-growing image samples and emerging pattern recognition and machine learning algorithms. table  <dig>  additional file 2: table s <dig> and figure  <dig> show that different algorithms and their combinations indeed have different suitability for various problems. for example, in figure  <dig>  we see that while the random forest classifier does not perform ideally for the binucleate set, it is effective for the rat livergendercr set . similar variations of efficacy can be found in feature sets.

the advantage of such an adaptive design is to find a good set of features for a given problem, without paying the cost of extracting a huge set of features or using a unsuitable classifier. current related tools exploit two major approaches: 1) use a fixed model including a feature set of medium size; 2) start with a huge feature set, gaining accuracy at the cost of computational complexity. the former typically works better on some problems but not others. the latter can be an overkill on some cases and not suitable for large scale images due to computational complexity. for example, wndchrm extracts thousands of features for any problem, among them zernike features has a factorial complexity due to its radial polynomial coefficients. some features are extracted using transforms based on the result of other transforms which are also very computationally demanding.

biocat takes a different approach. it provides the platform of adaptively building different models for different problems, which may lead to fewer feature descriptors that are yet effective for classification. note that such model selection is different from the computational selection of feature columns using statistical or other criteria as what fisher’s  feature selector would do. it is because feature selectors just select indexed columns for a large matrix which may belong to different extractors. as a result, the annotation/testing stage would still need to start with all the feature extractors that are involved, which can negatively impact the performance for large images/sets. on the other hand, such features selectors can of course be part of an algorithm chain for biocat, to further reduce the bandwidth for the classifier. such approach also brings a better interpretability, which may potentially lead to a reversed way to understand some mechanism of differentiation among different biological structures or developmental stages.

biocat also allows the selection of a suitable classifier as part of the algorithm chain, which few other tool for biological image classification offers . instead of having computer scientists comparing  various classifiers, it provides biologists a gui-based and objective approach to find a good pattern recognition model. biocat gui also allows to build the algorithm chains incrementally, to save/load chains and for generating reports after the chains are compared.

speed and computational complexity
biocat is able to process the datasets in additional file 1: table s <dig> within a reasonable period of time. the speed ranges from several seconds to several minutes with the sets on a typical pc .

at the framework level, biocat is designed to be memory-aware. specifically, biocat’s built-in feature extractors run on the image set in sequential fashion to reduce the memory footprint. in the case of 2d image sets, one image is loaded at a time. in the case of 3d images, one slice of an image is loaded at a time. after features are calculated, the same memory space is reused by the next image/slice. since only the most current stack slice of the most current image is cached in memory, biocat has a low requirement of computer memory at feature extraction stage. after feature extraction, subsequent feature selection and classification’s memory requirements are affected by image set size and feature set size . we need to point out that individual algorithms have different levels of memory requirements and some third-party algorithms  may require bigger memory to process large sets. the speed of model comparison is linear with the number of models to be compared.

multi-label annotation
in experiments and results section, we demonstrated annotating an image by classifying rois surrounding a pixel/voxel. in addition, an entire image can also be automatically annotated, by formulating the task into a pattern recognition problem. such annotation often involves multi-labels per image since an image may have multiple tags to be assigned. annotation of biological images has traditionally been manual work, done by domain experts in a labor-intensive way. recently, automated annotation has been attempted  <cit> .

the difference between multi-label annotation and the usual image classification is that typically an image classification task is single-objective , whereas an automatic annotation task can be multi-objective. for example, fruit fly embryonic gene expression involves the annotation of multiple developed body parts in each gene expression image  <cit> . for such cases, biocat chooses to formulate the annotation task as multiple binary problems, with each problem focusing on whether or not a label is present. such labeling can be described using a text file , which associates a training image with multiple labels. model selection can be conducted for each sub-problem individually. during annotation, the collection of learned models, each for a label of interest, will be applied to the testing image. biocat’s reporting tool outputs a consolidated annotation report, summarizing each testing image’s labels, ranging from zero to many. biocat’s website shows an example and screenshot of such multi-label annotation task.

connection with other tools and limitations
biocat is designed with different purpose from tools such as imagej  or cellprofiler . it does not reinvent the wheel. instead, it focuses on the area where current tools are lacking, and meets the need of adaptable and extendable pattern recognition algorithms for image and roi classification. on the other hand, they can certainly work together to complement each other. for example, imagej can be used to label rois in order to generate training sets for biocat, or for preprocessing before the images are being classified. other visualization tools such as vaa3d can also be used for 3d roi labeling and visualization, to complement biocat.

roi annotation is not the same as segmentation: for example, in the 3d roi classification example, the cell counting may be done without knowing the exact boundaries of objects. segmentation in a traditional sense is typically the issue of separating foreground from background and often unsupervised, while biocat can work with multiple classes for the purpose of labeling/annotation. segmented images by other tools such as itk  can be used as input for classification by biocat, while biocat’s detection results may also be post-processed to deliver results similar as segmentation when every pixel/voxel is annotated.

biocat is also different from general sense pattern recognition tools in that the built-in algorithms pay more attention to efficiency and memory since an image typically contains large number of pixels which is the raw dimension of data. it also has other functionalities specifically related to biological images. for example, if the image contains multiple channels, as is often the case with florescent stained microscopic images, biocat can work on a selected channel. it can also limit the annotation of images to local maxima, useful for 3d roi classification in fluorescent stained microscopic images. its extensible design, on the other hand, can facilitate the inclusion of state-of-the-art algorithms in the fields of pattern recognition and machine learning, as they appear.

biocat presents several limitations : there are no image processing algorithms in biocat such as denoising or enhancement and the tool’s output often needs further post-processing to get results for the specific quantification. so biocat is not intended as a replacement for either image processing or segmentation tools. instead, it is for choosing a suitable supervised pattern recognition model, which can then be used as a discriminative model in classifying 2d/3d image sets or rois. the tool currently does not do exhaustive search of all combinations of algorithms for the consideration of computational feasibility. as the result, the selected chain is the best among all compared chains, but not necessarily optimal. it is also noted that some machine learning algorithms can be slow. when the user works with a large image set with high dimensionality, a gui-based tool on a pc is not always the best choice. hpc version of biocat for distributed model selection is currently under development.

CONCLUSIONS
biocat generalizes pattern recognition based image classification to three dimensional images and rois and provides a comparison mechanism among algorithms. it provides good flexibility and adaptability compared to most related tools, which we expect to facilitate the use of pattern recognition algorithms in a range of biological problems. for future directions, more algorithm modules are being developed and a version of biocat for cluster computing is also under development for very large biological image sets.

availability and requirements
•project name: biocat

•project home page:http://faculty.cs.niu.edu/~zhou/tool/biocat/

•operating system: platform independent

•programming language: java

•other requirements: java  <dig> . <dig> or higher

•license: freebsd

availability of supporting data
the software, along with supplementary materials can be found at http://faculty.cs.niu.edu/~zhou/tool/biocat/. the example images sets are available for download either from biocat website  or from the original provider’s site.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
jz designed the project, implemented biocat, performed most experiments and wrote the paper, sl implemented biocat and performed the experiments on dendritic territory extraction, gs and by designed the dendritic territory experiment and performed imaging, contributed to the algorithm design and revised the paper, hp conceived the project and contributed to the initial design of biocat and revised the paper. all authors read and approved the final manuscript.

supplementary material
additional file 1: table s1
biological image sets.

click here for file

 additional file 2: table s2
algorithm chain comparison algorithm chains for k <dig> 3d.

click here for file

 additional file 3: table s3
algorithm chain comparison for classification of 3d roi around a fruit fly nuclei center).

click here for file

 acknowledgements
we thank adam ampulski, aleksey levy, eric swatkowski, luke challand, and jon sanders who assisted in the development of biocat including documentation and testing. we thank dr. julie h. simpson for providing the k <dig> sample images. we thank dr. dave mellert at hhmi for providing the image of nuclei for fruitfly neurons. we thank dr. nathalie japkowicz for comments on the manuscript. we thank the burroughs wellcome fund  , the whitehall foundation , and the pew charitable trusts  for supporting the research on neuron quantification. the work is also supported by the national institute of mental health of the national institute of health under award number r15mh <dig> .
