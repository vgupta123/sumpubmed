BACKGROUND
complexity combined with an imprecise terminology has hindered the understanding of biology. a formal and structured vocabulary is now being developed to address this imprecise biology terminology. this vocabulary or gene ontology  is being developed by the gene ontology consortium   <cit>  to standardize the descriptions of gene products. ontologies define the basic terms and relations comprising the vocabulary of a topic area, as well as the rules for combining terms and relations to define extensions to the vocabulary  <cit> . despite these efforts, the mechanism of representing these terms lacks a unifying architecture that can be applied to the annotation of a gene product. however, computer science has developed a well-defined process and methodology for the development of software models. adapting this process and methodology can orchestrate the assembly of biological models with integrated gene ontologies. in doing so, a standardized terminology and object-oriented model is created that can facilitate communication between biologists and computer scientists.

the gene ontology project is a collaborative effort that addresses the need for a controlled vocabulary that provides a consistent description of gene products in different databases  <cit> . the go collaborators are developing three structured, controlled vocabularies that describe gene products, which have been classified into molecular function, biological process, and cellular component domains. go terms are organized in structures called directed acyclic graphs , which differ from hierarchies in that a 'child'  can have many 'parents' . as part of these graphs, each component is given a goid , and is associated with a go definition. collectively, these agreed upon terms are being developed to help explain various aspects of biology. when applied to a gene, that gene is annotated with a concise description of its molecular function, cellular location and associated biological processes. however, the goc never intended to represent gene products or correlate ontological terms with these gene products  <cit> . to address this need, a gene ontology annotation database  <cit>  has been created to associate the go terms with their gene product counterparts. with sustained effort, the descriptions of these gene products will ultimately be established. still, much of the current bioinformatics work regarding go has focused on constructing databases  <cit> , applying it to other research areas  <cit> , and building tools to mine the go database. 

in addition, there has been an ongoing discussion regarding the depth of information obtained from the gene ontology  <cit> . it has been noted that there remains a need for a unifying architecture that integrates all three go domains as part of a gene product's annotation. furthermore, to enhance the gene ontology and facilitate its use as a cross-disciplinary tool, several additional issues need to be addressed. first, relationships between the biological processes, molecular functions and cellular components are not readily apparent  <cit> . second, go terms lack details. for instance, when one looks at molecular function there is no indication of what is inputted or outputted. finally, existing tools such as go-dev  <cit>  only contain software used for tool development and information retrieval, not software modeled directly after the three domains of the gene ontology. however, these issues can be resolved by integrating the gene ontology into an object-oriented system.

on a conceptual level, the gene ontology has features that support an object-oriented architecture. consequently, the gene ontology can be applied and mapped to the fundamental concepts that form the object-oriented paradigm  . furthermore, in an object-oriented sense, biological process terms are equivalent to high-level concepts. however, go biological process terms do not contain descriptive information about the dynamics or static interactions defined by the terms. by translating a biological process into an object-oriented model the dynamic and static events occurring within a process can be represented. building a static and dynamic model of a biological process requires defining the components of the process as well as the functions and attributes contained within these components. these components are biological entities  that may include individual gene products, whose processes, functions and cellular components are captured in the gene ontology, or other higher-level entities such as gene product complexes.

the functions of gene products are the jobs or abilities that it has. in the go terminology these are described in the molecular function domain. these are analogous to the operations that an object can perform in an object-oriented paradigm. attributes, which define key properties of a component that when changed may alter the function of that component, may be defined by the cellular component and molecular function sections. for example, the cellular component domain can specify the place in a cell where a gene product is located. when there are multiple cellular components associated with a gene product, however, there is currently no mechanism to designate which cellular component represents the appropriate location.

the unified modeling language has been used to capture various aspects of biology  <cit> . these examples highlight the utility of the unified modeling language as a tool for biological data integration, and indicate that it can be applied to construct large, complex biological models. therefore, to demonstrate the feasibility of integrating the gene ontology into an object-oriented model we have created unified modeling language  representations of a go biological process, "transforming growth factor beta  receptor complex assembly" .

the tgf-beta receptor pathway is involved in numerous cellular events including apoptosis, tumor development, differentiation, and development. these processes stem from the binding of tgf-beta to its cellular receptors. briefly, dimerized tgf-beta  <dig> binds to tgf-beta receptor ii  and then tgf-beta receptor i  complexes  <cit> , causing their tetramerization   <cit> . constitutively activated type ii receptor phosphorylates and activates type i receptor. type i receptor propagates the signal by phosphorylating smad  <dig>  which is presented by the smad anchor for receptor activation   <cit> . phosphorylation of smad destabilizes the smad interaction with sara, releasing it  <cit> . on tgf-beta stimulation, smad  <dig> forms heterotrimeric complexes with smad  <dig> and accumulates in the nucleus, binds dna and remains for several hours  <cit> . dephosphorylation allows smad  <dig> to dissociate from smad  <dig> and to be exported to the cytoplasm  <cit> . if the receptors are no longer active, then the smads accumulate over time in the cytoplasm  <cit> . alternatively, activated smad  <dig> is ubiquitinated in the nucleus and undergoes proteasome-mediated degradation  <cit> .

to create a unified model using the gene ontology we have taken the biological process term, "transforming growth factor beta  receptor complex assembly" , and used object-oriented models to define its dynamic and static architecture. we also show that one can augment the biological process domain terms by using the ontological terms and gene products associated with this process, and integrating them into an object-oriented model. furthermore, we show that the molecular function, and cellular component domains can serve as a basis for the generation of object functions and attributes to create a standardized, comprehensive, and integrated model encompassing all the gene ontology domains.

RESULTS
converting go directed acyclic graphs to object-oriented diagrams
the current dag structure in which the gene ontology is represented is not readily amenable to transformation into software code. however, the architecture of directed acyclic graphs mimics that of an object-oriented class diagram. go terms are presented in a parent-child hierarchy connected by 'is a'  and 'part of'  relationships. read from top to bottom, the go terms proceed from more specific to less specific. directed acyclic graphs also allow the properties of multiple parent nodes to be inherited by child nodes, a form of multiple inheritance in object-oriented modeling. in figure 1a, cellular components related to the tgf-beta receptor complex are shown. one can create a uml diagram to mimic these relationships as shown in figure 1b. since not all cellular components involved in the tgf-beta receptor complex assembly process are present in the current gene ontology, additional gene products based on literature searches were added to the object-oriented diagram . relationships are captured as an object-oriented system through containment, composition and inheritance. cellular components were decomposed into objects and connected via generalizations, which illustrate inheritance. because these terms inherit all the attributes of their parents, only go terms at the terminal nodes need be characterized in an object-oriented model. relationships described as 'part of' were also extrapolated into object-oriented terms as composition.

the functions of gene products were also decomposed into object functions. the creation of object functions involved the transition from gene product functions to standardized go molecular functions, and then to standardized, fully parameterized object functions. by applying formal ontological terms from the molecular function domain to gene products, object functions can be created with a consistent vocabulary. in table  <dig> we show the relationships between the function of a gene product defined in our model, and the go molecular function term most closely corresponding to that cellular function. here, we first compared ontology terms from the molecular function domain to those ascribed to individual gene products. due to the incompleteness of the gene ontology, some gene product functions were extrapolated from the current literature, and then comparable go molecular function terms were assigned to the gene products. next, these molecular function terms were converted to object functions through reverse engineering. we identified the parameters that would normally be input into and output from a cellular reaction. in this way we defined the input and output parameters necessary for an object function. the object function itself was given the goid that corresponds with its closest matching molecular function as defined by the goid's definition. together, object functions were created that are fully parameterized with inputs and outputs and that contain a standardized go notation.

we conclude that it is feasible to create standardized functions for objects based on the current literature and an approved ontology. together, ontological terms can be integrated into an object-oriented model paralleling the relationships, capturing the inherited aspects of the go terminology, and providing a compact architecture while maintaining a standardized notation.

sequence diagram generation
the go biological process term, tgf-beta receptor complex assembly , contains both static and dynamic features. the events of the tgf-beta receptor complex assembly  process include tgf-beta binding  to its receptors and smad binding  and activation . to capture the dynamic nature of these actions as an object-oriented software system, sequence diagrams were created. the events leading to smad  <dig> activation are reflected chronologically in a high-level sequence diagram in figure  <dig>  the creation of the sequence diagram first entails identifying gene products and their functions by literature searches. simple or complex bioentities are modeled as objects, which are represented by rectangles with vertical lifelines. ontology terms taken from the molecular function domain that best corresponded to these functions were incorporated as object functions, which represent the functions of these gene products. these functions are implemented by the methods contained within the objects. furthermore, these methods allow an object to communicate and interact with other objects, thus capturing cellular activities. to capture interactions between objects, one object can call a method of another object by connecting object lifelines in the sequence diagram . this invocation of a function of one object by another is described as one object sending a message to another object. alternatively, a message may be passed from an object to itself as in the case of self-checks or autoactivation signals. in this way, real world processes may be captured using an object-oriented approach. for instance, to capture the formation of the tgf-beta and tgf-beta rii complex a goid that closely corresponds to this ability is chosen as the method name. in this way the method can be cross-referenced to a go term. specifically, the method 'go: <dig> ' references via the goid, go: <dig>  "protein heterodimerization activity", and shows that a homodimer of tgf-beta and a homodimer of tgf-beta rii are needed to form the complex. here, each dimer is thought of as a single entity, so the combination of these two entities is best represented as heterodimerization. a value of tgf-beta-tβrii_complex is returned upon completion of the method as indicated by the return arrow. in contrast, the function call "go: <dig> ," references a self-call. the goid can be cross-referenced to "protein homodimerization activity", which requires two smad <dig> components to generate the smad <dig> homodimer, but the message is passed only within the smad <dig> object. furthermore, a message need not accept any parameters, as in the "translate()" function, which only returns a boolean value indicating whether the action has occurred. additional events such as tgf-beta ri activation, and smad homodimerization, binding and activation are also reflected in figure  <dig>  together, this diagram demonstrates that the sequence of events occurring in the biological process, tgf-beta receptor complex assembly , can be represented using the gene ontology, and can be integrated as part of the dynamics of an object-oriented software system.

activity diagram generation
biological processes are created from a series of complex events. while there may be one main event scenario that most frequently leads to a specific outcome often, alternative scenarios that lead to a process conclusion exist. this is exemplified by the sequence of events found in the tgf-beta receptor complex assembly . for instance, tgf-beta may initially bind to tgf-beta rii or tgf-beta riii. to capture these alternative events as part of the dynamic architecture, an activity diagram was created to reflect the initial stages of tgf-beta signaling . unlike the sequence diagram, which captures main scenario events, the action sequence or flow of the activity diagram can portray alternative outcomes. taking the example above, if tgf-beta binds to the type iii receptor then an alternative flow of events occurs for a time that then returns to the main flow of events. other possible divergences that were modeled included whether to internalize the tgf-beta receptors via clathrin-dependent or lipid raft-dependent mechanisms. these pathways lead to either complex degradation or signal promotion. because complex degradation is not specified in our use case, for simplicity, this event is routed to the final state. however, the main success scenario, signal promotion, continues until smad <dig> is released and tgf-beta complex assembly is finished. together, the dynamic events occurring during the biological process, tgf-beta receptor complex assembly  are captured.

class diagram generation
the major components of a biological system are bioentities with functions and interactions. likewise, the center of an object-oriented software system is objects. complex bioentities formed from multiple gene products along with their relationships, are contained within the biological system encompassing the biological process term, tgf-beta receptor complex assembly . to represent the components that execute the process, we captured these components as bioentities with functions, and their interactions. the events of the tgf-beta receptor complex assembly  process include tgf-beta binding  to its receptors, and smad binding  and activation . to capture this static architecture, class diagrams were generated that model the bioentities, operations, and interrelationships that occur between tgf-beta, its receptors, and smad  <dig>  similarly to figure  <dig>  figure  <dig> captures the major components of the initial phases of tgf-beta signaling as objects with their associations, using an object-oriented representation. however, unlike figure  <dig>  this object-oriented representation of the components of the main receptor complex is enhanced by the addition of attributes and functions. these objects were given attributes that describe important characteristics that if changed, might alter the function of a component. the functions of the objects, which parallel gene product functions, were generated from the sequence diagrams and were represented using gene ontology terms. these functions or operations are a declaration of the methods that an object may use. together, the models generated using the described object-oriented methodology yield a software system representation of a biological process, tgf-beta receptor complex assembly, capturing both static and dynamic relationships annotated with gene ontology terms.

in addition, the uml notation provides a mechanism to specify inheritance that may be used to indicate an object that is the foundation for other objects. for instance, a tgf-beta receptor object might be a generalization of the tgf-beta receptor i object . these specific objects inherit the properties of the receptor object. in addition, binary associations containing cardinalities may indicate the number of objects interacting with another. for instance, tgf-beta can interact with one to many receptors, while a receptor can only interact with one tgf-beta at a time . cellular compartments where these gene products can be found are also shown. here, guard conditions are added to distinguish conditions under which each gene product might be found in a particular cellular compartment. in this way, a spatial representation of the tgf-beta receptor complex components is also achieved. these class diagrams demonstrate that the static structure of a biological system can be represented as an object-oriented model with integrated gene ontology terms. collectively, the models generated using the described object-oriented methodology yield a software system representation of a biological system, capturing both static and dynamic relationships annotated with integrated gene ontology terms.

discussion
we have utilized the gene ontology to construct an object-oriented representation of the initial steps of tgf-beta signaling, and the gene products contained therein. in doing so, we have provided a standardized framework for the integration of gene ontology terms into gene product descriptions. by capturing all of the relevant go terms in one model, the disjointed go vocabulary is assembled into a cohesive structure. this cohesive structure encompasses the fundamental concepts of the object-oriented paradigm.

we proposed a solution to three unaddressed issues within the current gene ontology. first, while the gene ontology has helped to formalize the vocabulary that describes biological systems, it lacks a specific integration method. currently, when applied to gene products, gene ontology terms are only categorically listed. second, the gene ontology domains, biological process, molecular function and cellular component lack coherence. in particular, no association exists between domains. finally, the current gene ontology defines go terms, but gives no indication of what is necessary to accomplish a particular function, or process. to resolve these problems we defined an object-oriented methodology and architecture that provides a unifying framework to integrate all gene ontology domains.

the central dogma of the object-oriented paradigm revolves around several key aspects. specifically, an object-oriented framework should accommodate the class, object, inheritance, composition, encapsulation and polymorphism concepts. as shown in table  <dig>  gene products and other bioentities can be decomposed into objects, which are created based on template classes. these objects utilize inheritance to acquire the attributes and properties of more general objects. complex classes can also be disassembled into subclasses using composition. encapsulation allows the simplification of the model without sacrificing functionality. for instance, we do not need to know specific details regarding how a gene product is translated, just that a process that is encapsulated by the function 'translate()' can create a protein. however, if we wished to delve deeper into the mechanics of the translation process the layered architecture of the object-oriented system would allow us to do so. it is also worth noting that the modular nature of the object-oriented system closely resembles the recently discovered modular structure of biological networks  <cit> . this resemblance further indicates that biological systems can be easily modeled as object-oriented systems. finally, polymorphism allows one to describe shared functions among different gene products. in this way, a function that may be shared broadly with other gene products can be uniquely specified for a particular gene product.

by applying object-oriented methodologies and concepts the various domains of the gene ontology can be coordinated into one model. currently, the mechanisms in the biological process domain are veiled. there is no indication as to what gene products form the biological process, or what molecular functions are necessary to accomplish the process. furthermore, the outcome of a specific process is not obvious. as in our example, a process such as tgf-beta receptor complex assembly  does not give any indication of the components, dynamics or outcomes that occur during this process. however, by incorporating go terms as attributes and functions we can discern relationships between the three domains. likewise, the cellular components domain does not provide temporal or spatial clues when applied to gene products. for instance, go terms 'extracellular' and 'intracellular' may both be associated with a particular gene product. however, the distinction between when a gene product is extracellular and when it is intracellular is not apparent. by applying object-oriented principles we can set extracellular and intracellular to boolean values, and we can specify which location is the current  location of a gene product.

in addition, by using object-oriented principles a go molecular function term can be augmented with parameters and outcomes. for example, the function "go:0046982: protein heterodimerization activity" has different input and output parameters depending on the particular protein that contains the function. this type of polymorphic behavior, where one function can be performed in multiple ways is not supported by the gene ontology. for example, protein a may heterodimerize with protein b, whereas protein c heterodimerizes with protein d. from the gene ontology it is not readily apparent as to what is being inputted into the dimerization function. however, by applying an object-oriented architecture to function "go:0046982: protein heterodimerization activity" we get "go: <dig> : protein ab". this format is an improvement to the unparameterized go term in that the function can be cross-referenced to protein heterodimerization activity via its go term, and we also see that for protein a to heterodimerize we need both protein a and protein b. in addition, we now observe that a new entity called protein ab is created from this function. by capturing the above details in an object-oriented model the go term becomes far more useful for both biologists and computer scientists. using an object-oriented approach the gene ontology domains are integrated into one cohesive model.

integration of the gene ontology terms into an object-oriented representation offers several additional benefits. the object-oriented model provides additional levels of detail not found in the gene ontology. one of the strengths of object-oriented technology is the ability to capture the dynamics of a system. for example, sequence diagrams can chronologically order events in a biological process. activity diagrams afford one the opportunity to envision different scenarios that might be occurring in a process. this additional level of detail significantly increases the depth of information that can be applied to the description of a biological process. state-transition diagrams also contribute to the realization of the full dynamics of a process by allowing the visualization of gene product states within a process. furthermore, uml models can be translated into code, facilitating the creation of simulations.

the standardization of biological system modeling and integration is growing rapidly. a widely accepted example of the drive toward standardization is the systems biology markup language   <cit> , which has been adopted by more than  <dig> software tools  <cit> . the gene ontology is another example. however, each of the technologies, the gene ontology, the object-oriented approach, and sbml, has strengths and weaknesses. the gene ontology provides a standardized vocabulary but contains disconnected domains with no details regarding terms. sbml was developed to communicate biological models, with an emphasis on mathematical modeling of biological systems, but does not specify how to construct these models. object-oriented technologies, on the other hand, provide a well-defined process for model creation and visualization, but have not been standardized for biology. however, the gene ontology, object-oriented paradigm, and sbml can form a new synergism when jointly applied to a common biological system model. these technologies are steps toward a unified approach to biological information integration, and studying biological phenomena at the systems level. together, this unified approach will make biological system integration and analysis consistent, manageable and controllable, which is essential in handling complex systems, as demonstrated by decades of software industry experience.

while the described object-oriented approach can significantly enhance the annotation of gene products using the gene ontology, several challenges will need to be addressed. specifically, object-orientation was not specifically designed for use in biological systems. therefore, its use in capturing biological systems is not well defined. furthermore, the gene ontology is still expanding and undergoing revisions. consequently, in the near future it will still be necessary to do literature searches to define all the gene ontologies associated with a gene product. however, automated extraction of information for uml model generation and software implementation for simulations is under development, but is beyond the scope of this paper.

future systems may also be implemented as software libraries in object-oriented programming languages  for computer scientists to construct software for various applications and can be distributed as part of the go-dev toolkit for gene ontology development  <cit> . in addition, reformatting gene products with gene ontology terms will require the cooperation of multiple groups of biologists and computer scientists. however, we must take into consideration that a primary issue with this approach is the lack of people with cross-disciplinary skills able to comprehend both the biology and the computer science. nonetheless, our own experience has shown that with supervision one biologist without a formal computer science background can learn to model a biological system using uml in a matter of months. furthermore, automation of some of the annotation process will significantly reduce the human effort, but not eliminate the need for human annotators. additional standards for automation will also need to be developed to thoroughly specify the process of object-oriented biological system integration. despite these challenges the ultimate goal of creating a library of uml objects or modules integrated with gene ontology attributes and functions is worthwhile. through this endeavor, biological processes could be assembled from these libraries for the development of simulation tools that will increase the productivity of biologists through increased insight into disease pathways and mechanisms.

CONCLUSIONS
here, we have demonstrated that gene ontology terms can be integrated into an object-oriented model. furthermore, the object-oriented technology and methodologies used for this integration should improve the usability of these terms, and increase the depth of information that they contain. this work also serves as a framework for reverse-engineering biological gene products as objects in an object-oriented system. together, this should facilitate additional collaborations between biologists and computer scientists.

