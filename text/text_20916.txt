BACKGROUND
the concept of centrality is foundational in social network theory and its underlying motivation is to find the most important or “critical” nodes in a large complex social network  <cit> . in this type of network, one may be interested in finding the most influential or the most popular individual. a search engine may want to rank the hits resulting from a search, depending on how well linked it is in the network. in a terror network, an agency may be interested in finding the ringleader or the top leadership. thus, “centrality” can have multiple meanings, and different metrics and methods are worth exploring.

with the advent of systems biology approaches, large-scale biological networks have become commonplace. gene regulatory networks  <cit>  model the interactions between genes, while protein-protein interaction  networks  <cit>  represent the interaction of proteins. microbial social networks  attempt to model the complex interactions between microbes within a microbial community, such as those that inhabit the human gut or those that can be found in diseased coral.

it is well known that microbes in a community interact. these interactions may occur through the use of quorum sensing molecules, other signalling molecules, metabolites and/or toxins . however, lacking the access to precise interaction information in sampled microbial communities, it has been suggested that bacterial co-occurrence networks inferred from metagenomic studies are a crude form of microbial social networks  <cit> . a bacterial co-occurrence network  <cit>  is an undirected, weighted network with nodes that represent bacterial taxa present in the community and edges that correspond to how strongly the two taxa tend to co-occur  in the sampled communities. edge weights can be positive or negative lying in the range . we show an example of this in fig.  <dig>  using data from a lung microbiome study. green edges indicate positive correlations and red edges indicate negative ones, with edge thickness indicating strength of correlations. we visualize results using the fruchterman-reingold algorithm  <cit>  within cytoscape  <cit> . even a cursory visual inspection of the network suggests the presence of dense subgraphs representing strongly co-occurring groups of bacteria . in co-occurence networks, strong green edges suggest the likelihood of cooperation, while strong red edges suggest competition.
fig.  <dig> bacterial co-occurence network. an example of a bacterial co-occurrence network obtained from a lung microbiome study. nodes represent bacterial taxa. green  edges represent positively  correlated co-occurrence patterns




the following questions arise naturally in these investigations. is it possible to identify bacterial taxa that drive or control the behavior of the community through their interactions? can the first infectors or colonizers of the community be identified? what is the effect of disrupting a node or edge of such a biological network? all the above questions highlight the importance of studying central nodes in biological networks  <cit> . we suggest three notions of centrality that are potentially important to biological networks, and especially to microbial social networks. the work in this paper addresses all three notions: 
for each club , we refer to a dominant node as a leader node  <cit> , or an entity responsible for connecting many individuals and driving the behavior of the club.

we define a villain node as one that has many strong negative edges to a club. unity against a common enemy is a frequent theme in social networks  <cit> .

nodes that connect two or more dense subgraphs  are referred to as bridge nodes. in general social networks, this would correspond to someone who has the ability to link different social circles  <cit> .




centrality concepts  <cit>  can be classified into three categories: degree centrality, closeness centrality, and betweenness centrality. degree centrality assumes that the most important nodes have high connectivity or degree. it is useful in identifying popular individuals in a social network. closeness centrality interprets centrality with respect to a distance metric, identifying nodes that are centrally located. this would be useful in identifying where to place an important network resource . betweenness centrality defines a central node as one that lies on many shortest paths. betweenness centrality would help identify important junctions in a complex train or information flow network. other approaches define an entity’s centrality by the importance of its friends in the social network. eigenvector-based approaches  <cit>  for centrality extend the ideas of degree and closeness centrality by explicitly defining the centrality of a node in terms of the importance of its neighbors. google’s pagerank algorithm  <cit>  is an example of this approach. in this paper, we will propose an algorithm that combines and generalizes these concepts.

most of these approaches also generalize to weighted social networks, where edge weights represent the strength of the relationship or influence between nodes. distance-based methods like closeness and betweenness extend trivially. degree can be generalized to weighted degree. the original version of pagerank assumes edge weights of  <dig> and  <dig>  but subsequent attempts have been made to generalize the algorithm to weighted networks  <cit> . however, not many generalize readily to networks with negative edge weights, which is an important characteristic of real social networks because it helps distinguish between “indifference” and “dislike”. pagetrust  <cit>  extends pagerank to handle negative edges but, since all final centralities are positive, it becomes difficult to distinguish a villain vs. a node with few friends as they both have low values. the pn-centrality algorithm  <cit>  of everett and borgatti fixes this problem but, as an eigenvector-based approach, tends to be biased toward nodes in highly dense subgraphs, thus distorting centrality information. degree centrality has this same difficulty with cliques or dense subgraphs having many strong edges. closeness centrality tends to have a cluster of nodes with high centrality with values decreasing from there, biasing a particular area of the network. betweenness centrality is better at identifying bridges but not leaders or villains.

in this work we present atria, an iterative centrality algorithm that addresses the shortcomings mentioned above and combines aspects of economic theory, social network theory, and path-based algorithms  <cit> . we investigate methods that avoid the above shortcomings by iteratively removing nodes with highest centrality along with some of the neighborhood edges before finding the node with the next highest centrality, using social network theory to determine the appropriate edges to remove. the goal of atria is to find leaders, villains and bridges within a signed, weighted social network. we will verify that atria is able to produce these results by testing a wide-range of networks including some simple synthetic examples, a scale-free network  <cit> , and biological networks, such as gene expression, ppi, and microbial social networks.

methods
our proposed algorithm incorporates economic theory to reflect the fact that our interest in leader, villain and bridge nodes is based on their benefit  to the network as a whole. conjecturing possible interpretations, a leader node can be interpreted as a dominant member of a club, by being a major producer or consumer of some resource  that benefits other club members. a villain node may either represent a common enemy against which members of a club unite, or the producer of some byproduct  that is harmful to all members of a club. bridge nodes may represent taxa that provide a beneficial  resource to more than one club. alternatively, they could be an important part of a cascade of events in a process.

our starting point for an economic model is the payoff model proposed by jackson and wolinsky  <cit> , which analyzes the efficiency and stability of an economic network where every node in the network provides some payoff to every other node. they use this approach to determine nodes that receive the highest pay , representing payoff for a node i in network g with uniform edge weights 0<δ< <dig> by the following: 
  <dig> ui=wii+∑j≠iδtijwij−∑j:ij∈gcij 


in the above model, w
ii represents an amount of starting “capital” for node i. they use w
ij to represent an innate significance of node j to node i. the second term multiplies w
ij by a factor that is exponential in t
ij, the number of links in the shortest path between i and j. if 0<δ< <dig>  this term ensures that the payoff contribution for node i is higher for nodes j that are closer. the shortest path between i and j will thus result in the highest pay for i from j, and is the only pay that is used. the final term c
ij represents a cost  for node i to maintain a direct connection to a neighboring node j. in summary, closer nodes contribute more, but direct connections incur a cost.

the intuition behind the connection between the payoff model and centrality is as follows. if  all nodes start with the same capital ,  nodes do not contain any intrinsic value to one another before the algorithm runs , and  there is no cost to maintain direct connections  then the network is symmetric. this implies that in an undirected network the amount of “pay” received by a node  is the same as the amount they are providing to other nodes. pay thus becomes a direct measurement of a node’s benefit to the network.

extended payoff model
in designing our algorithm atria, we take the symmetric algorithm by jackson and wolinsky and extend it in the following ways to encapsulate more general social networks: 
we allow for edge weights to be non-uniform. therefore, instead of all weights being equal to δ, the edge weights are 0<δ
ij< <dig>  as a consequence, in the second term of eq.  <dig> we replace δtij by the product of the δ values along the path of maximum pay between node i and node j.

we incorporate negative edge weights, under the limited assumption that all weights are in the range −1<δ
ij< <dig>  with negative edges, a node receives a negative benefit from its connection with a neighbor. however, a path with two negative edges will result in a positive payoff, since the total payoff from a path is the product  of its edge weights.

centrality is computed iteratively. the most central node is found first, with ties broken arbitrarily. this node is then deleted along with some of the edges in its neighborhood. the centrality values are then recomputed for all the nodes. although ties are broken arbitrarily, this does guarantee that the list of the most central nodes are not occupied by nodes that are all close to each other. hence, atria will find central nodes from all across the network.




our modified equation, after removing c
ij, is thus: 
  <dig> ui=∑j≠ip, 


where p is the path of maximum pay magnitude between i and j.

a major deviation from the payoff model is that our algorithm computes the centrality values incrementally as opposed to all at once. therefore, even if the node with the highest u
i value may be judged the most central node in the first iteration, the node with the second highest value in the first iteration will not end up as the second most central node, unless it is the highest in the second iteration.

consider the example in fig.  <dig>  in this network, the payoff model would compute node b as being the most central to the network, but then would compute a as the second most central and c as the third most central. while this may make sense for the payoff model itself , it has some shortcomings from the point of view of centrality to say that a and c are the next most important nodes, since most of their pay comes as a result of b. atria would first find b as the most central node as a leader of the first triad, but it would then find d as the second most central node as a leader of the second triad.
fig.  <dig> two-triad social network. a sample social network with two strongly connected triads {a,b,c} and {d,e,f}




this happens because the edges incident on b are deleted after b is determined as having the highest centrality. the logic here is to remove all dependencies on the most central node before computing the next most central node. also for every triad involving two of these incident edges, we remove the third edge if both incident edges have the same sign and the third edge is positive. this is backed up by social network literature  <cit> , which states that two nodes with a mutual friend  or enemy  will tend to become friends as a result, meaning their connection is coincidental and resulting not from their own importance but the importance of the leader or villain. such a triad with an even number  of negative edges is said to be stable, a necessary condition for social network balance.

incorporating non-uniform edge weights
the first change that we make to the payoff model, as mentioned, is incorporating non-uniform edge weights. in the unweighted  case, the shortest path between i and j is guaranteed to have the fewest number of edges; this may not be true any longer, as illustrated in fig.  <dig> 
fig.  <dig> non-uniform weighted networks. a an example social network with non-uniform positive edge weights. in this situation, the payoff between a and c is larger via their indirect connection through b  compared with their direct connection to each other . b an example network with non-uniform positive and negative edge weights. nodes can now gain and lose from each other




to incorporate this change, we use a modified form of dijkstra’s algorithm. in particular, the length of a path is the product of its lengths, and the best path is the one with the maximum  product. note that since all edge weights are between  <dig> and  <dig>  the products can only decrease in magnitude as the path gets longer. such a modified dijkstra’s algorithm when started at node i, will help compute p for all j, thus computing u
i .

incorporating negative edge weights
when negative edge weights are present in the network, we have a possibility for nodes to gain and lose from each other depending on the path along which the effect takes place. similar to the path of maximum gain, we consider the path of maximum loss as more significant to a node’s centrality as opposed to one of a smaller loss. however, there may be pairs of nodes between which there is a positive length path as well as a negative length path. consider the network in fig.  <dig>  there are two paths between a and d: a – c – d, and a – b – c – d with path lengths of  <dig> ×− <dig> =− <dig>  and − <dig> × <dig> ×− <dig> = <dig> , respectively. one causes a gain, the other incurs a loss.

dijkstra’s algorithm is modified so that for every starting node i, we simultaneously keep track of two quantities: the length of the path of highest gain to node j, and length of the path of highest loss to node j. this covers situations like in fig.  <dig> where the path of highest gain from a to d includes a path of highest loss from a to c and a path of highest loss from c to d. we then modify the relax step in dijkstra’s algorithm  <cit>  as follows: when relaxing edge , if its weight is positive, then we use the maximum gain due to node j to update the maximum gain due to node k and the maximum loss due to node j to update the maximum loss due to node k. on the other hand, if its weight is negative, then we use the maximum gain due to node j to update the maximum loss due to node k and the maximum loss due to node j to update the maximum gain due to node k.

to incorporate both gain and loss, we modify our payment equation to set p=g+l, where g is the length of the path of maximum gain between i and j and l is the length of the path of maximum loss . so our final payment equation for atria becomes: 
  <dig> ui=|∑j≠ig+l| 


RESULTS
in order to test atria, we run our algorithm on sample networks alongside five other centrality algorithms: betweenness, closeness, degree, and the eigenvector-based approaches pagerank  and pn. to be fair we use weighted degree centrality, and for running dijkstra’s algorithm for closeness and betweenness centrality we compute distance by taking the negative logarithm of the absolute value of an edge .

networks with cliques
single clique
we begin by studying weighted cliques. the first is a non-uniform weighted clique of size four with a leader a ). the second is the same clique but with the addition of a villain node e ). finally, we show a uniform-weighted clique of rival groups in fig.  <dig>  where the most central node will be a leader to one group and a villain to the other. while atria agreed with all other algorithms on the most central node for all three examples, only atria clearly identified a as the leader in , e as the villain in , and a  as leader and villain in . it does this by setting all other centralities to zero, thus assuming that all remaining connections result from connections to these nodes.
fig.  <dig> weighted cliques. a a weighted four-clique with leader a, b clique a with a villain e, c a clique of rival groups. the same node can be a leader and a villain




multiple cliquesfig.  <dig> comparison on two-triad social network. a comparison of atria with five other centrality algorithms on the network from fig.  <dig>  red nodes are the most central



fig.  <dig> comparison on two varying-sized cliques. results when running atria and the other centrality algorithms on two cliques, one of size  <dig> and the other of size 100


a*, d
a*, c
a*, c
a*, c
a*
a, d
e+, a
a, c
a, c
e+
{a, e}, {b, f}
a
{c, e}, d*
{c, e}, b*
{b*, c}, a
c, {a, b*}
b*, {a, c}
b*, d*
a*, n
a*, n
a*, n
a*, n
a*, n
a*, b*



synthetic network with clubs
we now develop a synthetic network to illustrate the type of network for which atria is most beneficial, with five cliques of random sizes between  <dig> and  <dig>  we randomly choose one leader node for each of three of the cliques, and one villain node for each of the other two. we connect leaders to their clique using random edge weights in the range [ <dig> ,1), and villains using . we run all six algorithms on this network and show our results in fig.  <dig>  as can be seen, atria was able to immediately pick out leaders, villains and bridges and set all other centralities to zero.
fig.  <dig> comparison on synthetic network. a comparison of atria with five other centrality algorithms on a synthetic network with five cliques , plus some bridge nodes




this situation also illustrates challenges with other centrality approaches for this type of network. betweenness was the only other algorithm able to somewhat separate leaders, villains, and bridges since in this example they reside on most high pay paths, but for this same reason also counted clique nodes connected to bridges . closeness centrality biased the cliques connected by the most bridges, and degree biased the tightest connected cliques. pagetrust and pn found the two villains  and pn also found the top two leaders , but then biased their cliques and lost the third. we summarize these results in table  <dig> 
final rankings of any nodes a-o found in the top or bottom 15




biological networks
we now demonstrate atria’s results on three types of biological networks. the first, shown in fig.  <dig> is a synthetic scale-free network of  <dig> nodes. we use this as an overarching example of a network that is common across many areas of biology, including ppis, cell signalling pathways  <cit> , and neural networks  <cit> . the second, in fig.  <dig>  is a gene co-expression network  from a species of oyster under different salinity conditions. finally as our largest example in fig.  <dig>  we run a yeast ppi  <cit>   consisting of  <dig> nodes. note that the ppi is by definition uniformly weighted and positive, since proteins either interact or do not interact.
fig.  <dig> comparison on biological networks. results of atria on a a  <dig> -node scale-free network, b a gene co-expression network from a species of oyster, and c a yeast ppi network




scale-free networks are known for the presence of critical hub nodes, which atria also ranks with the highest centrality. the co-expression network shows that with more realistic biological data, atria can still find leaders and villains across the network. the transcription factor nuclear y-subunit alpha  was ranked # <dig> by atria. this was found first by degree and pn centrality, but no other algorithms found transcription factors in their top ten. however, while degree and pn centrality then biased central nodes around this transcription factor, atria was able to find a protein trim <dig>  from the tripartite motif  family, which no other algorithm found. trim <dig> helps bind the molecule ubiquitin to proteins as a tag for later modification  <cit> . atria discovered ubiquitin itself as # <dig> in the yeast ppi. a specific type of modification for which ubiquitin binds to proteins is degradation in the proteasome, and atria also found rpn <dig> , which is responsible for removing ubiquitin from proteins before entering the proteasome  <cit> . these results exhibit agreement with cicehanover, hershko and rose in their discovery of ubiquitin-mediated proteolysis and its regulation of numerous critical cellular processes including the cell cycle  <cit> , helping them win the  <dig> nobel prize in chemistry.

microbial social network
we now show the results of atria and the five other centrality algorithms on the co-occurence network assembled from human lung microbiome data, from fig.  <dig>  these results are shown in fig.  <dig> 
fig.  <dig> comparison on microbial social network. a comparison of atria to the other five centrality algorithms on the co-occurence network assembled from lung microbiome data, from fig. 1





for this network, both degree and pn centrality restricted the highest ranked nodes to the tightest club in the center of the network. closeness centrality tended to bias the center of the largest connected component, with centrality decreasing as nodes were more out of this loop. betweenness centrality was heavily biased towards bridges in the largest connected component. the only other algorithm that was able to find central nodes in multiple clubs was pagetrust; however, atria was able to better isolate one or two nodes in each club, followed by the bridges.

based on the results of atria, the bacterial taxa most likely to be producing a critical metabolite would be: f. burkholderiaceae , f. erysipelotrichaceae , bifidobacterium , and atopobium . f. prevotellaceae  is a villain of the tightest knit club which is likely to be in competition for a resource  that many bacteria in this club need. bridge nodes such as prevotella  and selenomonas  could be producing a metabolite that benefits multiple clubs. interestingly, atria also found c.gammaproteobacteria , which is an enemy bridge between the largest club and the rest of this largest connected component. this could indicate competition with its counterpart fusobacteria as critical to the network structure.

CONCLUSIONS
our results demonstrate that the application of economic models using payoffs can be useful to computing centrality in a signed and weighted social network when finding important leader, villain and bridge nodes. we built atria as an iterative extension of a payoff model using social networking principles and in the process overcome shortcomings of existing algorithms for computing centrality, identifying central nodes across the network as opposed to many in the same vicinity. we verifed these results using scale-free networks and synthetic networks with both positive and negative edge weights, both of which are particularly relevant in biological networks, and finally real biological networks including a bacterial co-occurence network .

as future work, we would like to explore extensions of atria to directed networks, as while uncommon in the social networking field would be useful when applied to biological networks. we also would immediately like to explore the idea of interference  <cit>  to show and analyze the effects of removing atria’s highly central nodes from our networks. finally, since the time complexity of atria is more expensive than other centrality algorithms  due to recomputing centralities n times in the worst case, we have developed a module of atria for the graphics processing unit  and plan on releasing this open-source as part of a larger microbial analysis pipeline.
for eigenvector-based algorithms, i is the number of iterations that it takes to converge




abbreviations
atriaablatio triadum

gpugraphics processing unit

ppiprotein-protein interaction

trimtripartite motif


from fifth ieee international conference on computational advances in bio and medical sciences miami, fl, usa. 15- <dig> october 2015

