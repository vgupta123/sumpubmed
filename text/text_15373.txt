BACKGROUND
a variety of methods used by modern molecular biology such as structural modeling, function annotation, phylogenetic analysis and similarity searches are based on multiple protein sequence alignments . correct mpsa arranges in one column position amino acids that share a common ancestor or are functionally/structurally equivalent. mpsa provides position-specific information on evolutionary conserved characters, correlation between characters and their distribution. these features can be used in many further applications for which the quality of mpsa is, therefore, crucial  <cit> . traditionally, the quality of the alignment is evaluated using a scoring function based on gap penalties and a substitution matrix. when two sequences are aligned, an exact solution can be found using dynamic programming  <cit> . when many sequences are aligned, the exact solution is computationally expensive and becomes intractable for more than a few sequences  <cit> . the majority of methods avoid exponential scaling of alignment problem by employing various greedy heuristics, including a widely used progressive alignment technique  <cit> . classic progressive methods such as clustalw  <cit>  are fast and can produce reasonable results for sequences that are sufficiently similar  but become impractical in the so called twilight zone   <cit> . a vast amount of research has been conducted in order to improve alignment quality for distant sequences. many methods that have succeeded in this task are based on modifying the scoring function. we use a unified graph framework to compare different scoring functions.

in this article we shall use the term "alignment graph" as it is defined in the graph-based alignment algorithm by rausch et al.  <cit>  and the corresponding implementation in the seqan sequence alignment library  <cit> . the alignment graph represents residues of aligned sequences by vertices and various signals on which the alignment is based, such as residue substitutions from the substitution model, structural links etc., by edges connecting the vertices. this provides a flexible model for scoring: any type of information can be introduced by adding edges or weights to the existing edges, while certain transformations of the graph help to avoid local minima during the optimization step.

the separation of the input signal for the alignment from the process that produces the alignment was pioneered by t-coffee  <cit> . this program starts by compiling a library of local and global pairwise alignments, which equals to populating the alignment graph with the corresponding edges. t-coffee was then extended to include structural information  <cit>  and to combine alignments produced by other methods into a consensus alignment  <cit> . another example is maxflow  <cit> , which initializes the alignment graph with information from psi-blast searches. we note that, in spite of these implementations, the contribution of various information sources to the quality of mpsa is yet to be analyzed. here, we supply this need by presenting a clear comparison of sequence based information sources.

various consistency transformations have been shown to effectively improve alignments of distant sequences  <cit> . the idea is to transform scores used to align pairs of sequences to be consistent between different pairs. for example, for three sequences a, b and c, if residue ai is aligned to residue bj and residue bj is aligned to residue ck, then this implies that a consistent scoring between a and c should lead to the alignment of ai to ck. in alignment graph notation consistency implies shifting weights between neighboring edges. pioneering work on consistency was presented by t-coffee that implemented consistency transformation referred as triplet library extension. in this transformation the consistency of edge between vertices ai and bj is increased by iterating all possible ck vertices and adding the minimum of  and  weights to the  weight. this idea has been extended in the seqan::t-coffee program, which implements t-coffee algorithm using seqan sequence alignment library  <cit> . as in the original t-coffee, existing edges are modified by iteration of neighboring triplets. however, this version also introduces new edges where triplet information requires such for consistency. tests on benchmark suggest that this approach improves alignment quality  <cit> .

consistency transformation was also approached in a probabilistic framework. for example, in the probcons  <cit>  implementation, vertices of the alignment graph are connected by probabilities according to pairwise hidden markov models . these probabilities are then transformed towards a higher degree of consistency by additively combining probabilities of triplet paths trough all possible vertex triplets. this transformation is similar to triplet library extension, but since edges are weighted by a probability function, the contribution of  and  edge-pair to the  edge is equal to the product of the corresponding probabilities. probcons allows repeating the consistency transformation several times, in effect extending consistency to sets of four, five or a larger number of vertices.

consistency and transitivity concepts were unified in maxflow program, which was designed to align motifs of remote homologs that have little sequence similarity when compared directly, but can be connected via a path of pairwise alignments  <cit> . maxflow starts with an alignment graph based on a library of psi-blast alignments. this graph is weighted by assigning each vertex pair a consistency score: the number of common neighbors relative to the total number of neighbors for the two vertices in a pair. the graph is then used to align a pair of distant structural homologs. during the alignment residue pairs are weighted using the weakest path link: the maximum over the path scores defined by the weakest consistency score in a path. in comparison with classical methods, maxflow demonstrated superior performance in both reliability and coverage of structural motifs aligned.

in addition to the scoring function, alignment quality is largely affected by guiding tree used in the progressive alignment. our results suggest that single linkage clustering is optimal for this purpose regardless of the benchmark set.

the progressive alignment method has a serious pitfall: subgroups of sequences are aligned independently of one another, which implies that an optimal subalignment produced near the top of the tree can become a source of errors as it is aligned to other subalignments in the later stages  <cit> . consistency scoring, discussed earlier, is one way to address this problem; the other is to correct alignment errors in a post processing step called iterative refinement. in one step of iterative refinement mpsa is partitioned horizontally into two subalignments, which are then realigned and the new alignment is kept if it improves scoring function. iterative methods based on simulated annealing are too slow to be practical  <cit> . other methods differ mainly in the way sequences are divided into two groups before being re-aligned  <cit> . this can be a leave one out  <cit> , random partitioning  <cit> , or tree-dependent restricted partitioning  <cit> . the last option was shown to be effective in terms of both quality and speed, and a variation of this technique has been adopted by several current methods including muscle  <cit>  and mafft  <cit> .

here, we present a novel mpsa program based on the seqan sequence alignment library. our implementation has a strict modular structure, which allows to swap different components of the alignment process and, thus, to investigate their contribution to the alignment quality. we used our program to see how alignment quality changes depending on the input information, guiding trees, the applied consistency transformations, and the strategy for iterative refinement during post-processing. this is the first time these strategies are comprehensively and clearly compared using a single implementation platform. our results confirm the existing knowledge on which strategies are efficient. we also show that the best strategy is comparable in accuracy to the best software in the field.

RESULTS
to compare alignment strategies we systematically varied information sources, guiding trees, consistency, clique transformation and iterative refinement options, evaluating the resulting alignments on balibase and sabmark.

comparison of information sources
we found that using both global and local pairwise alignments to construct the alignment graph, resulted in high quality multiple alignments for both balibase  and sabmark  benchmark databases. adding longest common subsequences to global and local alignments had minor effect on the quality of the multiple alignments. adding external information in the form of gtg motifs, extracted using motif tracking as described in the original gtg article  <cit> , increased the quality of the multiple alignments by an average of 1% for both balibase and sabmark .

guiding trees
we found that single linkage clustering is clearly the best option for all reference sets in balibase and sabmark benchmarks . to our surprise, it produced significantly better alignments than commonly used neighbor joining. for balibase, single linkage increased accuracy relative to neighbor joining by 3% and for sabmark benchmark by 5%. we note that this comparison is based on alignments produced with no consistency transformation or postprocessing to account for errors introduced by heuristic nature of progressive alignment. it is probable that when consistency or postprocessing is included the particular type of the guiding tree used becomes less relevant.

columns show the average sum-of-pairs  and true-column  scores achieved by different alignment strategies for each of the six balibase references. the number of alignments in each reference is given in parentheses. overall values for the entire database are reported in addition to the mean execution time of each strategy. the best results in each column are shown in bold. the strategies differ in the algorithm used to build the guiding tree: neighbor joining , single linkage , complete linkage , upgma and weighted upgma 

columns show the average developer  score , modeller  score and run time achieved by different alignment strategies for the "superfamily" and "twilight zone" sets in the sabmark database. the number of alignments in each reference is given in parentheses. the best results in each column are shown in bold. the alignment strategies differ in the algorithm used to build the guiding tree: neighbor joining , single linkage , complete linkage , upgma and weighted upgma 

consistency and clique transformations
our results show that triplet library extension improves alignment accuracy for all sets in both benchmarks when compared to alignments produced with no consistency transformation . triplett-coffee, which is limited to applying consistency to the existing edges, improved balibase alignments by  <dig> %, sabmark twilight zone alignments by  <dig> % and sabmark superfamily alignments by 1% . tripletseqan, which introduces new edges when implied by consistency, was considerably better, enhancing balibase accuracy by 3%, sabmark superfamily accuracy by  <dig> % and sabmark twilight alignment accuracy by a remarkable  <dig> %. reiterating tripletseqan transformation for the second time either enhanced or deteriorated alignment accuracy depending on the particular set. the effect was small and has little practical value.

columns show the average sum-of-pairs  score and the percentage value of the sp score relative to the basic strategy  achieved by each alignment strategy for each of the six balibase references. the number of alignments in each reference is given in parentheses. overall values for the entire database are reported in addition to the mean execution time of each strategy. the best results in each column are shown in bold

columns show the average developer  score, the percentage value of the fd score relative to the basic strategy  and the average run time achieved by different alignment strategies for the "superfamily" and "twilight zone" sets in the sabmark database. the number of sequences in each reference is given in parentheses. the best results in each column are shown in bold

applying clique transformation decreased alignment accuracy when compared to the basic strategy. applying clique transformation after the graph has been made consistent by triplett-coffee generally provided an additional improvement relative to triplett-coffee. however, this is not practical since this transformation multiplied the required computational time by a factor of  <dig> for sabmark sets and by a factor of  <dig> for the balibase sets. this is due to the huge amount of edges generated by the clique transformation which makes the progressive alignment step computationally demanding. the task appeared even intractable when applying clique transformation after tripletseqan consistency for some of the balibase alignments, for which reason we do not report on these results here. running clique transformation after tripletseqan consistency for sabmark alignments decreased alignment accuracy. this suggests that tripletseqan is sufficient to introduce edges that have practical utility for the mpsa. combining maxflow consistency with clique transformation had minor improvement on balibase alignments and deteriorated quality of sabmark alignments.

iterative refinement
all iterative refinement strategies improved alignment accuracy, but the tree dependent strategies were more efficient. it made little difference, whether the partitioning was done randomly  or systematically in breath-first order . random partitioning improved accuracy of balibase alignments by 1%, treerandom by  <dig> % and treebf by  <dig> %, relative to alignments produced with no refinement . improvement of accuracy for sabmark twilight alignments were  <dig> %, 9% and  <dig> %, respectively; and for sabmark superfamily alignments  <dig> %,  <dig> % and  <dig> %, respectively . interestingly, the tree dependent strategies are comparable in time and accuracy to the tripletseqan, which was the best consistency transformation as presented above. the mean sp score for balibase alignments produced with tripletseqan was  <dig> , the corresponding score for treebf was very similar:  <dig> . computation times for these two strategies were also comparable: tripletseqan took on average  <dig> seconds and treebf on average  <dig> seconds per balibase alignment. moreover, applying treebf iterative refinement on balibase alignments produced under tripletseqan consistency had no effect on accuracy when measured up to three decimal points of the sp score . the same tendency can be seen from sabmark alignments: differences between tripletseqan and treebf accuracy are rather cosmetic and treebf is on average slightly faster . for this benchmark, however, applying treebf refinement to alignments produced under tripletseqan did result in some improvement .

columns show the average sum-of-pairs  score and the percentage value of the sp score relative to the basic strategy  achieved by each alignment strategy for each of the six balibase references. the number of alignments in each reference is given in parentheses. overall values for the entire database are reported in addition to the mean execution time of each strategy. the best results in each column are shown in bold

columns show the average developer  score, the percentage value of the fd score relative to the basic strategy  and the average run time achieved by different alignment strategies for the "superfamily" and "twilight zone" sets in the sabmark database. the number of alignments in each reference is given in parentheses. the best results in each column are shown in bold

the relative speed of iterative refinement strategies depended largely on the number of sequences in the alignment. for balibase alignments, which on average contain  <dig> sequences, run times of random and restricted partitioning were comparable. for sabmark alignments, which on average contain  <dig> sequences, restricted partitioning was slightly faster. partitioning alignment along all possible edges in the guiding tree was generally faster than random tree dependent partitioning for alignments with a small to moderate number of sequences , but became slower as the number of aligned sequences approached the number of refinement iterations .

comparison to other programs
we compared our optimal strategies to the eight leading multiple alignment programs:  probcons  <dig>   <cit> ,  t-coffee  <dig>   <cit> ,  muscle  <dig>   <cit> ,  mafft  <dig>   <cit> ,  clustalw  <dig> . <dig>  <cit> ,  clustal omega  <dig> . <dig>  <cit> ,  kalign  <dig>   <cit>  and  msaprobs  <dig> . <dig>  <cit> . mafft was run with l-ins-i option; other programs were run with default parameters. all programs were run with a single core. the comparison was done on balibase , sabmark  and prefab . the optimal strategy for balibase alignments, referred as mmsa in table  <dig>  was to use global and local pairwise alignments complemented with gtg motifs as input information; to apply consistency transformation tripletseqan; and to align the sequences using a single linkage guiding tree. no postprocessing was performed. for sabmark we chose to test two strategies: the same strategy as for balibase, and another strategy, that was augmented with iterative refinement of type treebf . on balibase our aligner ranked fourth in terms of alignment accuracy. msaprobs, mafft and probcons were more accurate, while kalign, muscle, mafft and both clustals had better time performance. also for sabmark our aligner ranked fourth in term of accuracy, this time it was msaprobs, probcons and t-coffee that performed better. the fastest were again kalign, both clustals, muscle and mafft.

the values in the upper table show the average sum-of-pairs  score and the values in the lower table mean run time achieved by different aligners for each of the six balibase references. the number of alignments in each reference is given in parentheses. overall values for the entire database are reported in the last column. the best results in each column are shown in bold

columns show the average developer  score, modeller  score and run time achieved by different aligners for the "twilight zone" and "superfamily" sets in the sabmark database. the number of alignments in each reference is given in parentheses. the best results in each column are shown in bold

columns show the average q  score achieved for subsets of prefab benchmark database, that correspond to different identity values of the structural pair. the number of alignments in each identity range is given in parenthesis. overall average scores and run time are given in the last two columns. values for the main and weighted sets are given separately. the best results in each column are shown in bold

for prefab we chose to use the same strategy as for balibase. on the main set this yielded moderate accuracy outperforming only the fast aligners: muscle, kalign and clustalw. on the weighted reference set our code performed poorly, since it does not account for the overrepresented families .

we conclude that, although our modular implementation of the best alignment strategies does not outperform the best aligners in the field, the performance is at a comparable level.

discussion
we have completed a comprehensive comparison of graph based strategies for aligning multiple sequences. our results suggest clear guidelines for a number of choices made during construction of a multiple protein sequence alignment. first, we showed that pairwise global and local alignments contain sufficient information to construct a high quality multiple alignment. when reliable external information, the gtg motifs in our case, is available, it will most likely improve the accuracy and thus should also be included. second, single linkage clustering is almost invariably the best algorithm to build a guiding tree for progressive alignment. third, tripletseqan is the most efficient consistency transformation from those compared. it can have a large improvement on alignment quality, particularly for alignments in the twilight zone. alternatively, one can apply tree dependent partitioning as a post processing step, which was shown to be comparable with tripletseqan consistency transformation in both time and accuracy.

as a more subtle result, we found that transitivity, which in principle can increase the sensitivity of the aligner, will in most cases introduce more noise than signal. when we iterated tripletseqan two times, in effect transferring edge weights within neighborhoods of four vertices, the quality of the alignments increased slightly. however, when iterations were repeated three times, extending the influenced neighborhood to five vertices, the quality invariably deteriorated. the same was the case for clique transformation, where any two vertices, connected by a path, were connected by an edge and thus were allowed to directly influence each other during the progressive alignment.

CONCLUSIONS
we showed that graph based modular implementation allows to compare the contribution of different algorithmic components to the alignment quality and computation time. we demonstrated that shifting edge information within triplets of alignment graph vertices prior to the progressive step and the tree-dependent iterative refinement after the progressive step are equally effective strategies that significantly improve accuracy, particularly for the case of distant homologs. as a negative result we report that extending the neighborhood of edge shifting to five or more vertices introduces more noise than signal.

