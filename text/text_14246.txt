BACKGROUND
the chemical master equation  is the most basic mathematical description of stochastic biomolecular reaction networks
 <cit> . the cme is a generally infinite-dimensional linear differential equation. it characterizes the temporal development of the probabilities that the network is in any of its possible configurations, where the different configurations are characterized by the molecular copy numbers of the network’s chemical species.

due to its infinite dimension, the cme is usually not directly solvable, not even with numerical methods. a recent breakthrough in the numerical treatment of the cme was the establishment of the finite state projection  method by munsky and khammash
 <cit> . they showed that it is possible to compute a good approximation to the real solution by projecting the cme to a suitable finite subdomain of the network’s state space, and solving the resulting finite-dimensional linear differential equation on that domain. nevertheless, the fsp approach still yields very high-dimensional models which are computationally expensive to simulate, even for small biochemical networks. the efficient simulation of the cme is an area of active research, and recently other simulation methods have been developed that can also be used for larger networks
 <cit> .

despite this progress, the direct simulation of the cme remains a computational bottleneck for common model analysis tasks in systems biology. it is especially problematic for tasks which require the repeated simulation of the model using different parameter values, for example identifiability analysis, parameter estimation, or model sensitivity analysis. thereby, while a single or a few evaluations of a cme model with the fsp or other approaches may still be computationally feasible, the necessity of many repeated simulations will quickly render higher-level analysis tasks infeasible.

mathematical methods that approximate the behaviour of a high-dimensional original model through a low-dimensional reduced model are a common way to deal with complex models. especially for linear differential equations, model order reduction is a well established field and several methods to compute reduced order models are available
 <cit> . note that the step of generating a reduced model is usually computationally more expensive than a single or even a few simulations of the original high-dimensional model. but the simulation of the resulting reduced models is frequently orders of magnitude faster than the solution of the original model. so, model reduction is worth the effort if many repeated simulations are to be expected. unfortunately, for analysis tasks which require the repeated model simulation with different parameters, classical model reduction methods are not helpful. with these methods, the reduced model depends on specific parameter values in the original model, and the reduction needs to be redone for different parameter values. thus, for the mentioned analysis tasks, the model reduction process would have to be repeated for each new parameter value, and no gain in computational efficiency would typically be possible. while classical model reduction techniques have been applied to the cme in the past
 <cit> , they are not so suitable for parametric analysis tasks.

fortunately, model reduction methods where parameters from the original model are retained as adjustable parameters also in the reduced model are now being developed. these methods allow to compute a reduced model which uses the same parameters as the original model, and where the reduced model can directly be simulated with any choice of parameter values
 <cit> .

the purpose of this paper is to introduce the application of these parametric model reduction methods to finite-state approximations of the chemical master equation, and to show possible usage scenarios of such an approach. the structure is as follows. in the following section, we introduce some background and notation concerning the modelling of chemical reaction networks and parametric model order reduction. we also show how the parametric model order reduction methods can in fact be applied to the cme. afterwards, we apply the reduction technique on two reaction network models and corresponding parametric analysis tasks.

methods
we start with some preparatory background on the chemical master equation  and parametric model order reduction. this serves in particular to fix the notation used throughout the remainder of the article. then the application of parametric model order reduction to the cme is introduced.

the chemical master equation
the structure of a biochemical reaction network is characterized completely by the list of involved species, denoted as x1x2…,xn, and the list of reactions, denoted as 

  ∑i=1nσijxi→∑i=1nφijxi,j= <dig> …,m, 

where m is the number of reactions in the network, and the factors
σij∈n <dig> and
φij∈n <dig> are the stoichiometric coefficients of the reactant and product species, respectively
 <cit> . the net change in the amount of species i occuring through reaction j is given by 

  nij=φij−σij. 

reversible reactions can always be written in the form  by splitting the forward and reverse path into two separate irreversible reactions.

for a stochastic network model, the variables of interest are the probabilities that the network is in any of the possible states which are characterized by the molecular copy numbers of the individual species x <dig> x2…,xn. we denote the molecular copy number of xi by
∈n <dig>  then, the state variables of the stochastic model are given by the real numbers 

  p=prob, 

for
xi∈n <dig>  i =  <dig> …,n. as a short-hand notation for , we write p, with
x∈n0n.

the transitions from one state to another are determined by chemical reactions according to . the changes in the molecule numbers are described by the stoichiometric reaction vectors 

  vj=n1jn2j⋯nnjt∈zn. 

to avoid needlessly complicated cases, we assume vj ≠ vk for j ≠ k.

the probabilities of the network being in any of the possible states x evolve over time, and their evolution is governed by the chemical master equation  as derived by
 <cit> . from a given molecular state x, one can compute the propensity νj that reaction j takes place according to the law of mass action as 

  νj=θj∏i=1nxiσij, 

where
θ=j=1m is the vector of reaction rate constants, which are model parameters depending on the physical properties of the molecules involved in the reactions. the propensities are related to the probability that reaction j will occur in a short time interval of length dt when the system is in state x: 

  prob=νjdt+o. 

taking the possible transitions and the corresponding reaction propensities together yields the chemical master equation , a linear differential equation where the variables are the probabilities that the system is in each of the possible molecular states x: 

  ddtp=∑j=1mp−νjp), 

for
x∈n0n. the cme  is subject to an initial condition p = p <dig> for
x∈n0n.

despite being linear, the cme is hard to solve numerically. this is due to the problem that the state space is for most systems infinite-dimensional, since all possible states
x∈n0n of the reaction network  must in general be considered. instead of directly solving the cme , a number of alternative approaches to study the stochastic dynamics of biochemical reaction networks have been suggested. the most common approach is to generate a simulated realization of the stochastic process described by the reaction network , using for example the gillespie algorithm
 <cit> . in this approach, the probabilities p for the possible system states are obtained from many simulated realizations. however, since this requires a large number of realizations, it is computationally expensive.

as a more direct approach, munsky and khammash
 <cit>  have proposed the finite state projection , where the cme is solved on a finite subset of the state space. here, this subset is denoted by Ω, and is defined as 

  Ω={x∣i= <dig> …,d}⊂n0n, 

where the x are the system states for which the probabilities are computed in the projected model. the underlying assumption is that the probabilities for other states will be very low on the time scale of interest—otherwise the fsp may not yield good approximations to the solution of the cme. in particular we assume the time interval of interest to be given by [ <dig> t for final time t >  <dig>  the probabilities for the states x in Ωare written in the vector p approximating p at the finite number of states Ω: 

  p=pii= <dig> …,d≈p)i= <dig> …,d∈ <cit> d. 

the equation to be solved with the fsp approximation is 

  ddtp=apfort∈p=p <dig>  

where
a∈rd×d is the matrix of state transition propensities, and
p0=p0)i= <dig> …,d is a vector of initial probabilities for the states in Ω. the elements of the matrix a are computed as 

  aii=−∑r=1mνr,θ)aij=νr,θ)ifx=x+vr,r= <dig> …,m0otherwise. 

we will frequently omit the parameter dependence of the solution . hence the solution p, as abbreviation of p, of  is an approximation to the solution p of the orginal cme on the domain Ω. munsky and khammash
 <cit>  have also derived an upper bound on the error between the solution p computed via the fsp, and the solution of the original cme p on Ω.

here, we consider in addition an output vector
y∈rp defined by 

  y=cp, 

with
c∈rp×d. examples for relevant outputs are the probability that the molecular copy numbers are in a certain domain
Ω¯⊂Ω, which is achieved by the row vector output matrix c defined by ci =  <dig> if
x∈Ω¯, otherwise ci =  <dig>  with p =  <dig>  or the expected molecular copy numbers, given by 

  ye=∑i=1dxpi, 

i.e. c = ,…,x) with p = n.

the basic motivation for the model reduction presented here is that we are interested in parametric analysis of the model, where the model  has to be solved many times with different values for the parameters θ. due to the typical high dimensions of the matrix a, already a single simulation is computationally expensive, and analysis tasks requiring many repeated simulations are often computationally infeasible. thus, the primary goal is to derive a reduced model which is rapidly solvable and provides an approximation
ŷ to the output y, potentially without any consideration of the original state vector p.

order reduction of parametric models
model order reduction of parametric problems is a very active research field in systems theory, engineering and applied mathematics. we refer to
 <cit>  and references therein for more information on the topic.

here, we apply the reduction technique for parametric problems presented in
 <cit>  adopted to our notation. it is based on two biorthogonal global projection matrices
v,w∈rd×r with r ≪ d and wt v = id, where r is the dimension of the reduced model. the matrix v  is assumed to span a space that approximates the system state variation for all parameters and times. the construction of such matrices will be detailed in the next subsection.

the gain of computational efficiency in repeated simulations comes from a separation of the simulation task into a computationally expensive “offline” phase and a computationally cheap “online” phase. in the offline phase, suitable projection matrices v  and w  are computed without fixing specific parameter values. with the projection matrices, a reduced model with the same free parameters as the original model is computed. in the online phase, the reduced model is simulated with the actually chosen parameter values, which is typically several orders of magnitude faster than the simulation of the original model. for analysis tasks with repeated simulations, only the online phase has to be repeated for different choices of the parameter values, yielding an overall gain in computational efficiency.

decomposition in parametric and non-parametric part
the reduction technique assumes a separable parameter dependence of the full system matrices and the initial condition. this means, we assume that there exist a suitable small constant
qa∈n, parameter independent components
a∈rd×d and parameter dependent scalar coefficient functions
ϑa for q =  <dig> …,qa such that 

  a=∑q=1qaϑaa 

and similarly for the system matrix c and initial condition p <dig>  we assume that
θ∈p stems from some domain
p⊂rm of admissible parameters. in the next step, the reduced component matrices and initial conditions are determined by 

  ar:=wtav,cr:=cv,p0r:=wtp <dig>  

for q =  <dig> …,qa. the resulting quantities
ar,
cr, and
p0r are r-dimensional vectors or matrices and independent of the high dimension d. the basis computation and the computation of these reduced system components is performed once and parameter-independently in the offline-phase. then, in the online-phase, for any new parameter θthe reduced system matrices and the initial condition are assembled by 

  ar=∑q=1qaϑar 

and similarly for pr <dig> and cr. the low dimensional reduced system that remains to be solved is 

  ddtpr=arprfort∈pr=pr0ŷ=crpr. 

from the reduced state pr, an approximate state for the full system can be reconstructed at any desired time by
p^=vpr. also the difference between the approximated output
ŷ and the output y of the original model can be bounded by so called error estimators. a-posteriori error bounds for the reduced systems as considered here are given in
 <cit> .

basis generation
different methods for the computation of the projection bases v  and w  exist. in systems theory, methods like balanced truncation, hankel-norm approximation or moment matching are applied, that approximate the input-output behaviour of a linear time-invariant system
 <cit> . the resulting reduced models can be applied for varying input signals. extensions to parametric problems exist, e.g.
 <cit> . as we do not have varying inputs in the problem studied here, we consider snapshot-based approaches to be more suitable. this means, the projection bases are constructed by solution snapshots, i.e. special solutions computed for selected parameter values.

the generation of projection matrices v  and w  must be done in such a way, that they are globally well approximating the system states over the parameter and time domain. a possible way to achieve this is the pod-greedy algorithm, which has been introduced in
 <cit>  and is meanwhile a standard procedure in reduced basis methods
 <cit> . the algorithm makes use of a repeated proper orthogonal decomposition  of trajectories
p:→rd, which for our purposes can be defined as 

  pod:=argminv∈rd,||v||=1∫0t||p−)v||2dt. 

intuitively,
pod∈rd is a state space vector representing the single dominant mode that minimizes the squared mean projection error. computationally, this minimization task is solved by a reformulation as a suitable eigenvalue problem. consider the correlation matrix
c=∫0tpptdt. then,
v∗=pod∈rd is an eigenvector corresponding to the largest eigenvalue λmax of c, i.e.,
cv∗=λmaxv∗. for additional theoretical and computational details on pod we refer to
 <cit> . we further require a finite subset of parameters
ptrain⊂p, that are used in the basis generation process. as error indicator Δ we use the projection error of the full system trajectory on the reduced space spanned by the orthonormal columns of v , i.e. 

  Δ:=∫0t||p−vvtp||2dt. 

the pod-greedy procedure which is given in the pseudo-code below, starts with an arbitrary orthonormal initial basis
vn0∈rd×n <dig> and performs an incremental basis extension. the algorithm repeatedly identifies the currently worst resolved parameter , orthogonalizes the corresponding full trajectory with the current reduced space , computes a pod of the error trajectory , and inserts the dominant mode into the basis .

function v  = pod-greedy


 <dig>  n := n0

 <dig>  while
εn:=maxθ∈ptrainΔ>εtol


θ∗:=argmaxθ∈ptrainΔ


e:=p−vn)

 vn +  <dig> := pod

 vn +  <dig> := 

 n := n + 1

 <dig>  end while

note that the algorithm is implemented such that the simulation of the full model, yielding p in , is only performed once for each θin the training set
ptrain.

for concluding the basis generation, we set w := v. this satisfies the biorthogonality condition wt v = id, as v  has orthonormal columns by construction. in practice the time-integrals in  are realized by a finite sampling of the time interval.

a theoretical underpinning for the pod-greedy algorithm has recently been provided by the analysis of convergence rates
 <cit> . this is based on the approximation-theoretical notion of the kolmogorov n-width
dn of a given set
f⊂rd, which quantifies how well the set can be approximated by arbitrary n-dimensional linear subspaces of
rd. the convergence statement for the case of exponential convergence then can be summarized as follows: if the set of solutions
f:={p|t∈,θ∈p}⊂rd is compact and has an exponentially decaying kolmogorov n-width
dn≤me−anα for some ma α >  <dig> and all
n∈n, then the error sequence
n∈n generated by the pod-greedy procedure  also decays with an exponential rate,
εn≤cme−cnβ with suitable constants βcc >  <dig> depending on m,a,α. thus, if the set of solutions can be approximated by linear subspaces with an exponentially decaying error term, then the pod-greedy algorithm will in fact find an approximation with an exponentially decaying error term, though possibly with suboptimal parameters in the error bound.

extensions of the pod-greedy algorithm exist, e.g. allowing more than one mode per extension step, performing adaptive parameter and time-interval partitioning, or enabling training-set adaptation
 <cit> .

reduced models of the parametrized chemical master equation
in this section, we describe how to apply the reduction method for parametrized models presented in the previous section to fsp models for the chemical master equation.

as discussed in the previous section, the first step in the proposed reduction method is a decomposition of the d-dimensional system matrix a as in . such a decomposition is possible for the case of mass action reaction propensities, as defined in , or generalized mass action, as recently suggested for the chemical master equation
 <cit> . in this case, the length of the parameter vector θ is equal to the number of reactions m, and we decompose a into m terms as 

  a=θ1a <cit> +⋯+θma. 

hence, concerning the notation given before, we have qa = m components a and coefficient functions
ϑa=θq. each matrix a in this decomposition comes from just the transition propensities corresponding to reaction q, and is defined by 

  aii=−∏k=1n)σkqaij=∏k=1n)σkqifx=x+vq0otherwise. 

more generally, such a decomposition is also possible if reaction rate propensities can be decomposed into the product of two terms, with the first term depending on parameters only, and the second term on molecule numbers only. this case is for example encountered when the temperature-dependance of the reaction rate constant is relevant, and the temperature t is a variable parameter in the arrhenius equation
θ=ae−eart. since the output matrix c and the initial condition p <dig> are usually not depending on parameters in this framework, a decomposition of c and p <dig> is not considered.

the situation is more difficult for reaction propensities involving for example rational terms with parameters in the denominator. the denominator parameters can not be included in the reduced order model by the decomposition outlined in  and . if variations in these parameters are however not relevant to the planned analysis, then they can be set to their nominal value, and the decomposition can directly be done as described above. alternatively, approximation steps can be performed, such as taylor series expansion or empirical interpolation
 <cit> , that generate an approximating parameter-separable expansion.

RESULTS
in this section, we present the study of two example networks with the proposed model reduction method. with these examples, the applicability of the reduced modeling approach especially for analysis tasks requiring repeated simulations with different parameter values is illustrated. the first network is a bistable genetic toggle switch, where cells may switch randomly between two states, based on the model in
 <cit> . for this network, the problem of parameter estimation with a reduced model is studied. the second network is a second-order genetic oscillator, based on
 <cit> , where we perform a sensitivity analysis over a wide parameter range.

parameter estimation in a genetic toggle switch model
network description
the genetic toggle switch considered here is an ovarian follicle switch model from
 <cit> . it is a system of two genes which activate each other. the switch is modelled as a reaction network with two species x <dig>  x <dig>  representing the gene products. the network reactions are specified in table
 <dig>  and the network parameters in table
 <dig> 

list of reactions and reaction propensity functions for the follicle switch model
 <cit> .

parameter values for the follicle switch model in table
 <dig> 

in
 <cit> , this network was shown to describe a bistable switch with two probability peaks, one close to x = t and the other close to
x=t.

in the study
 <cit> , only the lower probability peak was of interest. here, we are interested in the transition of the system from x to x. therefore, the system is truncated to a rectangle
Ω¯:={ <dig> …,150}×{ <dig> …,150} such that
x,x∈Ω¯, yielding a good approximation in the finite state projection to the infinite-dimensional chemical master equation.

the next step is to apply the decomposition of the matrix a as described in the methods section. note that a for the switch network contains rational terms with the parameters m <dig> and m <dig>  considering these two parameters as fixed quantities, the truncated cme for the follicle switch can be written as 

  p˙=p, 

where a, i =  <dig> …, <dig> are of dimension  <dig> ×  <dig> =  <dig> ×  <dig> 

as initial condition we choose a probability distributed over some lower states 

  p=1210forx1+x2≤200otherwise. 

for the parametric model reduction, we consider only variations in the parameters u <dig> and u <dig>  these influence both the steady state level of gene activity in the on-state as well as the switching kinetics and are thus of high biological significance in the model. hence we set
θ:=t∈ <dig> as the parametric domain
p. as final time we choose t =  <dig> which corresponds to a time range of approximately  <dig> years, i.e. about three times the half-life time of the off-state estimated in
 <cit> .

some state plots from the simulation of the full model are shown in figure
 <dig>  these snapshots clearly show the transition of the switch from the off-state with low values for x <dig> and x <dig> to the on state with high values. the parameter influence is mainly reflected in the speed of the transition: for the parameter vector  =  in the lower row, most of the probability is already arranged around the on-state at the end of the simulation time. in contrast, for the parameter vector  =  in the upper row, a significant portion of the probability is still located around the off-state at this time point. also, the transition paths are different: in the first case, the values for x <dig> are lower than the values for x1during the transition, while in the second case, this relation is reversed.

as typical simulation time for a single trajectory of the full system, we obtain  <dig>  seconds on a ibm lenovo  <dig>  ghz dual core laptop.

basis generation
we generated a reduced basis with the pod-greedy algorithm, where the training set was chosen as the vertices of a mesh with  <dig> logarithmically equidistant parameter values over the parameter domain
p. we set
εtol=10− <dig> as target accuracy. we use the projection error as error measure, hence precompute the  <dig> trajectories for construction of the reduced basis. as initial basis we set n <dig> =  <dig> and
vn0:=p <dig> using the parameter independent initial condition.

the pod-greedy algorithm produces a basis of  <dig> vectors and the overall computation of the reduced basis takes  <dig>  hours, the dominating computation time being spent in the error evaluations and pod computations. some of the resulting orthonormal basis vectors are illustrated in figure
 <dig>  the error decay curve and the selected parameters in the parameter domain are illustrated in figure
 <dig>  we nicely observe an exponential error decay, which indicates a parametric smoothness of the solution manifold, cf. the convergence rate statement given before for the pod-greedy algorithm. the selected parameters seem to be located at the boundary of the parameter domain, indicating that the model behaviour in between can well be interpolated from the model behaviours along the boundary of the parameter domain.

the final reduced model of dimension  <dig> can then be simulated in  <dig>  seconds, corresponding to a computational speedup factor of more than  <dig> 

parameter estimation
we exemplify a possible application of the reduced order model in parameter estimation, where we assume that a distorted output y as the expected values e is available from population-averaged measurements. the task is to estimate the parameter values u <dig> and u <dig> from such a noisy measurement.

the reference parameter is
θref==t, and, for the purpose of this example, the measured output is produced by simulating the original model with the reference parameter values and adding 5% relative random white noise n sampled from a standard normal distribution, ymeas := y). an illustration of the reference output y and the noisy signal ymeas is given in the left of figure
 <dig> 

we want to recover the values of the parameters u <dig> and u <dig> based on fitting the reduced parametric model’s output
ŷ to the measured output ymeas. as is commonly done in parameter estimation, we formulate a least squares cost function as 

  j=∫0t−ŷ)2dt, 

and estimate the parameters by 

  θest=argminθ∈pj. 

in such an optimization problem, typically many forward simulations are required for adjusting
ŷ to the measurement. this is a particular beneficial scenario for reduced order models, as these simulations can be computed rapidly.

in order to gain a deeper insight into the optimization problem , we plot the values of the error functional j over the parameter domain . using the reduced model, the computation of the required  <dig> =  <dig> trajectories is realized in less than one minute. this would be a significant computational effort when using a non-reduced model.

from the cost function plot, we observe a narrow area of parameters which seem to produce a similar output as the reference parameter θref. this shows that the two model parameters are not simultaneously identifiable from the considered output, and indicates that there may exist a functional dependence between the parameters u <dig> and u <dig> such that the model yields similar outputs y.

assuming a functional dependence of u1and u2we now consider the 1-dimensional optimization problem along the line u <dig> = u <dig> ref =  <dig> . we would like to recover u1from the optimization problem. the corresponding value of the cost function is j =  <dig> , indicating a significant contribution of the noise. this restricted optimization problem is well conditioned and the optimization with a standard active set algorithm by matlab’s command fmincon yields the estimated parameter θest :=  with u <dig> est =  <dig> , using  <dig> evaluations of the cost function. this accounts to a relative error in the u1value of  <dig> %, hence excellent recovery. we refrain from plotting the recovered output
ŷ as it is visually indiscriminable from the output in the left of figure
 <dig>  interestingly, the optimization target value j =  <dig>  implies j < j, which may stem from a slight approximation error in the reduced model or from the effects of the measurement noise.

the right plot in figure
 <dig> illustrates another application of reduced parametric models: we incorporated the model in an interactive graphical user interface in rbmatlab, a matlab package for model order reduction, available for download at
http://www.morepas.org. this allows interactive parameter variations and instantaneous simulation response.

sensitivity analysis in a stochastic oscillator
network description
the second case study is built on a genetic oscillator model showing stochastic resonance, which was presented in
 <cit> . the oscillator is based on a negative feedback loop between two genes with one gene having positive autoregulation. the oscillator is modelled as a reaction network with two species x <dig>  x <dig>  representing the gene products. the network reactions are specified in table
 <dig>  with parameters as in table
 <dig>  in the original model in
 <cit> , the dynamics were described as stochastic differential equation for the amounts of x <dig> and x <dig>  coming from a langevin approximation to the stochastic dynamics
 <cit> . for the framework used in this paper, the dynamics have to be described directly by the underlying cme. to achieve this, we introduce the parameter s which maps the dimensionless state variables from
 <cit>  to actual molecule numbers as required for the cme. thus, s is also a measure for the network’s noise level: the higher s, the larger the molecule number that is considered, and the smaller the noise level will be.

list of reactions and reaction propensity functions for the oscillator model adopted from
 <cit> .

parameter values for the oscillator model from table
 <dig> 

the network model in table
 <dig> shows oscillations only in a stochastic description. the deterministic model has a unique asymptotically stable equilibrium point, but in a stochastic model, fluctuations may push the molecular numbers beyond a certain threshold, inducing a dynamical response along a slow manifold, which corresponds to one oscillatory period
 <cit> . depending on the noise level, such responses will be initiated more or less often, corresponding to a more or less regular oscillatory pattern.

the system is truncated to the rectangle
Ω¯:={ <dig> …,300}×{ <dig> …,300}, which contains the relevant system states for the parameter ranges of interest.

similarly as in the switch example, the reaction propensity expressions contain rational terms in the parameters s, k <dig>  and k <dig>  these three cannot be decomposed directly, so we do the decomposition described in the methods section for the other five parameters only. with this decomposition, the truncated cme for the genetic oscillator can be written as 

  p˙=k1a <cit> +k3a <cit> +k4a <cit> +k5a <cit> +k7a <cit> p, 

where a, i =  <dig> …, <dig> are of dimension  <dig> ×  <dig> =  <dig> ×  <dig>  the initial condition for  is chosen as a uniform distribution over the rectangle { <dig> …,50} × { <dig> …,50}: 

  p=1512forx1≤ <dig> x2≤500otherwise. 

the time scale of interest for the model in  is for  <dig> ≤ t ≤ t =  <dig>  at the end of the interval, the probability distribution seems to approach a steady state.

some state plots are given in figure
 <dig>  one observes a significant effect of the parameter k4on the amplitude of the oscillations. the simulation time for the detailed model was in average  <dig>  minutes on a dell desktop computer with  <dig>  ghz dual-core intel  <dig> processor and  <dig> gb ram, without including the computation time for the construction of the state transition matrix a.

basis generation
for the basis generation, the parameter k <dig> was assumed to vary within the interval  <cit> . a reduced basis with the pod-greedy algorithm was computed from a training set of  <dig> logarithmically equidistant parameters over the parameter domain . as in the switch example, the target accuracy was chosen as
εtol=10− <dig>  and the initial basis was chosen from the initial condition v <dig> := p <dig> 

the pod-greedy algorithm produces a basis of  <dig> vectors, with an overall computation time of  <dig>  hours on the hardware as in the previous subsection. the first  <dig> basis vectors are shown in figure
 <dig>  it is apparent that several of the basis vectors are directly included in order to reproduce the different amplitudes of oscillations that will occur under variations of the parameter k <dig>  the error decay curve is shown in figure
 <dig>  displaying an exponential error decay as also observed for the switch example.

with the reduced basis
v∈r90601× <dig>  we can construct a reduced parametric model for the cme of the oscillator as 

  p˙r=prpr=vtp, 

with
ar <cit> =vta <cit> v∈r109× <dig> and
ar=vtk1a <cit> +k3a <cit> +k5a <cit> +k7a <cit> v∈r109× <dig>  note that since only k <dig> has been varied in the reduction process, the other parameters are no longer present as parameters in the reduced model, but just take their nominal values. while the same basis v  could be used to construct another reduced model where all parameters are retained, it is unlikely that this other model will be a good approximation of the original one for varying values of the other parameters.

sensitivity analysis of the oscillation amplitude
as an application of the reduced order parametric model obtained in the previous section, we study the variations of oscillatory amplitude over a parameter range. specifically, we consider  <dig> equally spaced values for the parameter k <dig> in the interval  <cit>  and compute the probability that the amount of x <dig> is larger than 100: 

  prob=∑x:x2>100p, 

with t =  <dig> the final time of the simulation. the results are shown in figure
 <dig> and show a clear decay of oscillatory amplitude for increasing values of k <dig>  due to the significant time savings from the reduced model, this sensitivity curve can be computed with a high resolution.

to evaluate the quality of the reduced model, we also computed the probability  using the original model  at two points within the considered interval for the parameter k <dig>  as shown in figure
 <dig>  the results from the original model are in perfect agreement with the predictions from the reduced model at these points. since the points at which the original model was evaluated in this experiment were not part of the training set , this shows that it is in fact possible to extrapolate the reduced model to parameter values that were not used to construct the basis.

CONCLUSIONS
in this paper, we have introduced the application of parametric model reduction methods to finite-state approximations of the chemical master equation. we have also presented two case studies where these methods are applied to cme models of different networks in order to make parametric analysis tasks computationally efficient. by this, it has become clear that parametric model reduction methods are a very useful tool for the analysis of stochastic biochemical reaction network described by the cme.

especially analysis tasks where many repeated simulations of a network with different parameter values are required can profit significantly from parametric model reduction. this includes for example sensitivity analysis or parameter optimization tasks such as identifiability analysis or estimation. moreover, the significant speedup of the simulation for the reduced model allows an interactive exploration of the network’s dynamics within the parameter space within a suitable graphical user interface.

this contribution is just a first step in the application of parametric model reduction methods to the cme. one particularly important aspect that we have not discussed here is the computation of error estimates for certifying that the simulation output of the reduced model is within some tolerance of the corresponding simulation output of the original model. to maintain computational efficiency, the error estimation should be done without actually simulating the original model. error estimation methods have been developed for parametric model reduction of generic models
 <cit> , but tighter estimates could likely be obtained by taking into account the special structure of the cme models. recent work for example refined the previous generic error bounds for stable models
 <cit> .

competing interests
both authors declare that they have no competing interests.

authors contributions
sw and bh conceived of the study, performed the study, and wrote the manuscript. both authors read and approved the final manuscript.

