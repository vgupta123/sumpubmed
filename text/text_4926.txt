BACKGROUND
the study of genetic regulatory networks, as well as other biological networks, has led to the development of increasingly large and detailed models  <cit> . the models consist of dozens or even hundreds of variables describing the molecular species involved in a variety of intracellular processes  <cit> . computer tools are essential for the simulation of the dynamical behavior of the networks from the models, for instance when predicting the response of the system to an external perturbation. however, as the size of the models grows, it becomes infeasible to manually verify the predictions against experimental data or identify interesting features in dozens of simulation traces. this calls for the use of automated and scalable methods that help the modeler with the identification and verification of interesting dynamical properties of the network. the field of formal verification provides promising methods to prove or disprove specified properties of a system. these methods proceed by an exploration of all possible behaviors of the system, following two main approaches: logic inference, based on the use of axioms and proof rules  <cit> , and model checking, based on an automatic and exhaustive search of the state space  <cit> . in this paper, we focus on the model checking approach. the basic idea underlying model checking is to specify dynamical properties of interest as statements in temporal logic, and to use model-checking algorithms to automatically and efficiently verify whether the properties are satisfied or not by the model  <cit> . in recent years, several examples of the application of model checking to the analysis of biological regulatory networks have been published in the literature .

according to our experience, there are currently two major obstacles that prevent modelers in systems biology from drawing maximal benefit from formal verification tools. first, the formulation of biological questions in temporal logic and the interpretation of the verification results is far from obvious, especially for non-expert users who are not used to this kind of reasoning. second, most of the existing modeling and simulation tools are not capable of applying model-checking techniques in a transparent way. in particular, they do not hide from the user the technical details of the installation of the model checker, the export in a suitable format of the model and the query, the call of the model checker, and the import of the results produced by the model checker . in other words, what is missing is a framework that tightly integrates modeling and simulation tools with formal verification tools, on both the conceptual and the implementational level.

in order to address these issues, we propose a service-oriented architecture   <cit>  for the integrated modeling and formal verification of genetic regulatory networks, which reuses existing technology as much as possible. the architecture connects modeling and simulation clients to a formal verification server, via an intermediate request manager. in particular, the client can perform verification requests through the web, which the request manager dispatches to an appropriate formal verification server. when the formal verification server has answered the request, the results are sent back to the modeling and simulation client for display and further analysis in the graphical user interface of the tool. the interactions of the client with the remote web server are handled by a verification module assisting the specification of biological queries through a property editor, either by directly choosing the appropriate temporal logic operators or by using a tailored set of query patterns  <cit> .

the architecture is generic and modular, but we develop it here in the context of one particular modeling and simulation tool  and two different model checkers . a first generalization of the work presented here would be to integrate other formal verification tools into the architecture. this possibility is anticipated through the use of a plugin system, where each plugin contains all data transformations and operations specific to a particular formal verification tool. this simplifies the integration of a new tool to the creation of the corresponding plugin. a second generalization would be to extend the service-oriented architecture to other modeling and simulation tools. a variety of tools have been used in combination with model checkers, such as ginsim 
 <cit> , ina  <cit> , biocham 
 <cit> , gna 
 <cit>  or rovergene 
 <cit> , based on formalisms like boolean and other logical models  <cit> , petri nets  <cit>  or ordinary differential equations  <cit> . in order to integrate new modeling and simulation tools into the architecture, they each have to be equipped with a verification module that interacts with the request manager, sending verification requests and receiving answers and diagnostics, as well as a plugin system to define the contents of the messages.

in the next section, we describe the service-oriented architecture and its components in detail and we motivate the most important implementation choices. the practical use of the architecture is then illustrated by means of a scenario involving the analysis of a qualitative model of the carbon starvation response in e. coli. the model describes a network of key global regulators of the bacterium, responsible for the control of the expression of a large number of stress response genes  <cit> . we trace the different steps from the formulation of a temporal logic query to the visualization and interpretation of the verification results. the discussion summarizes our contributions and places it in the context of related work.

implementation
in this section, we describe the overall architecture of the system , with a step-by-step description of its components: the modeling and simulation tool with its verification module, the request manager, and the formal verification server. these three components have been implemented in java  <dig>  and their web-service interface is based on apache axis  <dig>  http://ws.apache.org/axis/.

the implementation followed two main principles: a service-oriented architecture and the use of plugins. a service-oriented architecture is particularly well suited for our purpose. the formal verification service is remotely executed through the web and is implemented using standard protocols and languages like tcp/ip, soap and xml. a gna user wishing to perform a verification request does not need to install a model checker or other formal verification tool locally on his or her machine. the use of plugins provides a flexible and extensible way to abstract a particular formal verification tool. it allows one to apply the tool without worrying about the details of its implementation.

modeling and simulation tool
the service-oriented architecture is accessible for users of version  <dig>  of the qualitative modeling and simulation tool genetic network analyzer , available as described at the end of the paper. gna uses a class of piecewise-linear  differential equations, providing a coarse-grained picture of the dynamics of genetic regulatory networks  <cit> . the models associate a protein concentration variable to each of the genes in the network, and capture the switch-like character of gene regulation by means of step functions that change their value at threshold concentrations of regulatory proteins. the advantage of using pl models is that the qualitative dynamics of the high-dimensional systems are relatively simple to analyze, using inequality constraints on the parameters rather than exact numerical values  <cit> . this makes the pl models a valuable tool for the analysis of genetic regulatory networks in the absence of quantitative information on the parameter values. the graphical user interface of gna supports the modeler in building step-by-step a pl model of the network under study .

gna computes discrete abstractions of the continuous dynamics of the pl models, resulting in a finite-state transition system  defined as a quintuple Σ = ⟨ s, s <dig>  ap, l, t⟩  <cit> . s is a set of states, where each state corresponds to a hyperrectangular region in the concentration space, defined by the thresholds of the concentration variables. s <dig> ⊆ s is the set of initial states. ap is a set of atomic propositions, related to the states by means of a labeling function l: s → 2ap. the labeling function determines which atomic propositions are satisfied in a particular state s ∈ s. the atomic propositions concern among other things, the thresholds bounding the concentration variables, the signs of the derivatives of the concentration variables, and indicate if the state is a steady state. t represents the set of transitions between the states, where each transition corresponds to a solution trajectory entering one region from another  <cit> . gna allows the user to visualize the fsts, i.e. to display the corresponding state transition graph, and analyze the atomic propositions characterizing the states. for large graphs visual inspection quickly becomes infeasible and formal verification tools are needed. previous versions of gna supported the export of the fsts to text files accepted by several model checkers  <cit> . version  <dig>  extends gna with a verification module that integrates the tool into the service-oriented architecture.

verification module
the verification module consists of three components: a pattern-based property editor, a property translator, and a formal verification client .

pattern-based property editor and translator
the problem of posing relevant and interesting questions is critical in modeling in general, but even more so in the context of applying formal verification methods, due to the fact that is not easy for non-experts to formulate queries in temporal logic. the pattern-based property editor is a user interface that allows the specification of biologically-relevant properties in the form of temporal logic formulas. the specification of properties can be achieved in two distinct ways: for common biological properties through the use of a pattern system, and for more specific or complex properties through the use of a text editor of temporal logic formulas.

patterns are high-level query templates that formulate recurring questions in the analysis of regulatory networks using a domain-specific language  <cit>  rather than temporal logic. they were originally introduced in the formal verification field  <cit>  and recently adapted for use in systems biology  <cit> . from a study of the literature on the modeling of biological regulatory networks, it was found that most of the questions asked by experts can be reduced to a set of four patterns concerning the: occurrence/exclusion, consequence, sequence and invariance of events. notice that these patterns are classes of properties sufficiently generic to be applicable in a variety of systems biology models, and that the aim of these patterns is not to cover all possible questions the modeler can think of, but rather to simplify the formulation of the most frequent or otherwise important ones.

more complex biological properties can be directly specified in the computation tree regular logic  language  <cit> . ctrl extends ctl with regular expressions and fairness operators, which favors the expression of properties like multistability or oscillations, and endows the logic with a user-friendly syntax. the text editor allows the modeler to specify any temporal logic formula by freely combining the set of ctl and ctrl operators with propositional logic operators and the user-defined atomic propositions. the temporal logic properties can be stored for later use with the gna model in a single project file.

formal verification client and client-side plugins
the formal verification client is the component that enables gna to communicate with the request manager. it thus gives the user an easy access to the formal verification technology without having to locally install a tool or worrying about how to get it to work. to perform a verification request, the modeler needs to choose which tool to use, which property to verify, etc. these choices may be guided by the estimation of the model size  or by the nature of the properties to be verified . the fsts on which the property is to be verified can be defined explicitly or implicitly. in the former case, the fsts is completely generated by the simulation module of gna, while in the latter case it is given by the set of initial states and a function that computes the successors of any given state. the formal verification client performs a request by sending the implicit or explicit description of the fsts through the web and waiting for the result. the implicit definition has the advantage of considerably reducing the size of the specification of the fsts, and thus limiting the size of the files transmitted and the response delays. this may be critical for large fstss. the verification result is composed of a true  verdict supported by a witness . the witness or counterexample consists of a sequence of states in the fsts, displayed in the graphical user interface of gna.

in order to make the verification module of the modeling tool independent of a specific formal verification tool, we have developed a plugin system. currently, a plugin for the model checker nusmv is available, while a beta version for cadp has been completed. all data transformations specific to a particular model checker are taken in charge by the corresponding plugin, thus leaving the service-oriented architecture free to manage generic verification requests. each plugin has a client-side and a server-side . the client-side plugin has the responsibility of translating the fsts and the property into a format accepted by the corresponding formal verification tool, while the server-side plugin is in charge of receiving the translated fsts and property, feeding them into the formal verification tool executable, and parsing the results returned by the tool.

at the present time, the model checkers integrated in the architecture are invoked using the default parameters. more elaborate choices could be partially automated by incorporating into the plugin some knowledge of the verification method and the underlying algorithms.

request manager
the request manager is a component of the service-oriented architecture with a public address http://java <dig> inrialpes.fr, acting as an intermediary service that ensures the communication between all the modeling tools and formal verification servers.

queue and authentication manager
in order to keep track of the state of all verification requests and the available formal verification servers, a queue and authentication manager has been implemented. upon each verification request the authentication manager, together with the server-side plugin, checks for the credentials of the request. if successful, the queue manager registers the request in the queue, checks for an available formal verification server, and hands over the request. the queue manager will continue to poll the formal verification server for a response until one of three events happens: the verification has completed, the user has aborted the verification request, or a timeout has occurred. the verification result  is then returned to the user.

to ensure the service security, each authenticated request registered in the queue, generates an universally unique identifier  that is returned to the client, so that only this client is able to retrieve the verification result. furthermore, when the result is retrieved, both the request manager and the formal verification server that handled the request delete the model and temporal logic formula, leaving no traces of the request in the server.

load balancer
the service-oriented architecture has been designed to support several formal verification servers. the address of every server, as well as all the model checkers and other formal verification tools types locally installed on each of the servers, are registered in the request manager. upon a verification request, the load balancer chooses an idle formal verification server with the required tool and server-side plugin installed. when all formal verification servers are busy, the load balancer waits until one becomes idle.

formal verification server
a formal verification server has the responsibility of verifying properties submitted by the request manager. one or several formal verification tools can be installed on a server provided that the corresponding server-side plugins are also installed on this server.

formal verification server and server-side plugins
the formal verification server contains the web-service interface, which is responsible for receiving the requests from the request manager, the choice of the corresponding server-side plugin, and the construction of the verification result to be returned.

each plugin specific to a formal verification tool has an authentication module which responds to the authentication requests made by the request manager. in addition, upon a verification request, the plugin pre-processes the model description and the property in order to transform them into the format accepted by the formal verification tool, and calls the latter with the appropriate parameters. when the formal verification tool finishes the verification of the request, it produces the verdict as well as the corresponding witness .

since this witness has a format specific to a particular formal verification tool, it is up to the plugin to parse the results and perform the necessary data transformations to a common format that is sent back to the modeling tool. the required transformations depend on whether the request involves a fsts of an implicit or explicit type. in the explicit case, the witness is simply a subgraph of the fsts sent to the formal verification tool, whereas in the implicit case the state information needs to be reconstructed from the output of the tool.

integration of new formal verification tools
an important advantage of the chosen architecture, which delegates all operations that are specific to a particular formal verification tool to plugins, is that it allows for the flexible integration of new tools. two plugins have been developed until now: one for nusmv  and one for cadp . developers wanting to develop plugins for different model checkers or other formal verification tools can do so through the following main steps: the development of a client-side plugin, the development of a server-side plugin, and the installation of the server-side plugin on a server on which the new tool is running.

the client-side plugin takes a .jar file that must be placed in the plugins directory of gna, allowing the modeling tool to export the fsts to a file that can be read by the new formal verification tool. gna dynamically recognizes the available client-side plugins, using the java plugin framework technology. the development of a server-side plugin results in a java class that needs to be copied in an appropriate directory of the wrapper on the formal verification server. the latter server must register its web service connection parameters in the request manager, so as to enable the latter to dispatch the requests to the correct formal verification server. more detailed information on the development of plugins can be obtained by contacting the authors directly.

RESULTS
in order to illustrate the use of the web service, we present a scenario using a pl model of the network of global regulators controlling the carbon starvation response in the enterobacterium escherichia coli. in order to survive, e. coli cells constantly have to adapt their functioning to the availability of carbon sources, essential for growth. the adaptation involves multiple levels of regulation, from metabolic fluxes and enzyme activity to gene regulation  <cit> . in this example, we focus in particular on the role of the global regulators of transcription, such as crp, fis, dna supercoiling, and rpos. these global regulators form the backbone of the network coordinating the long-term response of e. coli cells to starvation conditions . the pl model consists of  <dig> equations and more than  <dig> parameter inequalities that specify the qualitative dynamics of the system  <cit> . below, we illustrate how the specification and verification of temporal logic properties can help the analysis of the role of rpos in the dynamics of the system.

property specification procedure
rpos or σs is a sigma factor that allows cells to adapt to and survive under harmful conditions by expressing a variety of stress response genes  <cit> . due to its key role in the cell, the concentration of rpos is tightly regulated at the transcriptional, translational, and post-translational levels. it this section, we focus on the conditions of stability of the protein. while cells grow on a carbon source, rpos is actively degraded through the protein rssb, which binds to rpos and targets the factor to an intracellular protease . however, the depletion of the carbon source inactivates rssb, thus allowing rpos to accumulate to a high concentration. given the important role of rpos for the survival of the cell, one may ask whether the entry into stationary phase upon carbon starvation is always preceded by the accumulation of rpos in the cell.

the first step in answering this question using the formal verification module of gna consists in identifying elements of the question that refer to the state of the biological system and in stating these as atomic propositions. we represent the entry into stationary phase of the system by a low level of stable rnas encoded by the rrn operons. this is motivated by the fact that stationary-phase cells do not need high levels of stable rnas, contrary to what is required by the high translational activity in exponential phase. these characteristics are specified using the property editor, where we create an atomic proposition named low_rrn , restricting the concentration values for the variable rrn to those below its  threshold. we also introduce an atomic proposition high_rpos, representing the accumulation of rpos to a value above its threshold t_rpos .

the second step is the formulation of the biological property using the pattern-based property editor and translator. we choose the sequence pattern to account for the temporal ordering of the two states: stationary phase and high expression of rpos. the sequence pattern is instantiated by selecting the previously defined atomic propositions :

"a state | low_rrn | is reachable and is | necessarily | preceded | at some time | by a state | high_rpos".

once the pattern is fully instantiated, it is automatically translated into the corresponding ctl formula: ef ∧¬e .

property verification procedure
after the specification of the property, one passes to the verification stage. for this step, the verification request must be configured in the verification window . first, we choose the name and version of the model checker plugin to be used . second, we specify the initial conditions. the resulting implicit fsts represents the transition from exponential phase to stationary phase, starting from initial conditions corresponding to carbon depletion. we then run the verification request, which is treated by the service-oriented architecture as described in the previous section.

in response to the query the model checker returns false after  <dig> seconds. it means that the entry into stationary phase is not always preceded by the accumulation of rpos in the cell. the counterexample is presented to the user as shown in the left panel of figure  <dig>  it consists of a subgraph of the initial fsts, starting from the specified initial state and ending in a state where the property fails. by selecting a path in this subgraph, gna allows the qualitative changes in the concentration of all the variables to be displayed . looking at the evolution of the variables we immediately observe that there is  one sequence of states leading to a low expression level of the rrn operons without having previously passed through a state with a high concentration of rpos. this illustrates the negative verification result, and witnesses that the downregulation of the stable rnas does not require the previous accumulation of rpos.

another verification example
continuing with the previous analysis, one may want to look into the role of rpos in the control of dna supercoiling during growth-phase transitions. the dna supercoiling level is regulated by the gyrase gyrab, which supercoils the dna structure, and by the topoisomerase topa, which relaxes it.

in order to know whether topa is expressed in response to the carbon source availability, we create an atomic proposition named low_topa representing the low expression of topa, and we choose the following invariance pattern to check if the absence of topa expression persists indefinitely:

"a state|low_topa|can|persist indefinitely".

the corresponding translation of this pattern is the following ctl formula: eg .

following the previously described verification procedure, the formal verification server returns false after  <dig> seconds, and the counterexample shows that expression of topa is stimulated at the entry into stationary phase, under the influence of rpos. indeed, following carbon starvation, the protein rssb is inactivated, which leads to the accumulation of rpos at high levels. rpos in turn activates the topa promoter. complex properties like the existence of oscillations can also be verified. if the property holds, the verification module will present the corresponding lasso-shaped witness  for visual inspection.

discussion
in this paper, we have proposed a generic and modular service-oriented architecture to integrate the modeling of genetic regulatory networks with existing formal verification tools. currently, the service-oriented architecture connects the gna modeling tool, extended with a formal verification module, with the nusmv and cadp model checkers. we have given a detailed description of the existing components and motivated our implementation decisions. additionally, we have illustrated the use of this architecture with the analysis of the complex network of global regulators involved in the carbon starvation response in e. coli. gna is freely available for non-profit academic research, while the main component of the formal verification module, the pattern-based property editor and translator, is also available separately .

formal verification methods have historically been used for the verification of hardware and software systems. some of the existing model checkers, such as prism  <cit>  and nusmv  <cit> , have recently been applied to the verification of biological systems. prism verifies properties specified in continuous time stochastic logic  and has been used to perform quantitative analysis  <cit>  of the erk intracellular signaling pathway model  <cit> . nusmv has been used for the analysis of biological models like the carbon starvation response in e. coli  <cit> , the cell-cycle control in c. crescentus  <cit> , the mucus production in p. aeruginosa  <cit> , and the mammalian cell-cycle control  <cit> . in most cases, the biological models are built using modeling tools that are not connected to model checkers. some modeling tools like ginsim 
 <cit>  and previous versions of gna 
 <cit>  are capable of exporting the model in an implicit or explicit format accepted by the model checker and the entire analysis is carried out in the model-checking environment, without any feedback to the modeling tool. an exception is the modeling tool biocham 
 <cit> , which integrates the model checker nusmv and allows for a more flexible iterative modeling and verification approach.

CONCLUSIONS
in this paper we carried further the integration of the modeling and formal verification of biological networks, by proposing a service-oriented architecture that presents several advantages. first of all, the proposed connection between modeling and verification tools is completely transparent for the modeler and platform-independent. it requires web access but this is becoming less and less of a constraint in the current age of pervasive internet use. second, the web-service based integration of the tools coming from different domains makes it possible to exploit the strong points of each. on the modeling side, the graphical user interfaces present the properties to be verified and the verification results in a way accessible to the modeler. for instance, the specification of biological properties by means of query patterns  <cit>  does not require prior knowledge of any specific temporal logic. on the verification side, the latest developments of state-of-the-art model checkers can be immediately integrated. third, the plugin system provides a modular way to add new formal verification methods without having to develop a new version of the modeling tool. the upgrade to future releases of a formal verification tool can also be performed through a simple plugin update.

the architecture has been implemented in the context of gna, but generalizations to other modeling and simulation tools is obviously possible and facilitated by the modular structure. the integration of such tools into the architecture requires them to implement a verification module responsible for the specification of biological properties, the call of plugins for specific formal verification tools and the exchange of verification requests with the request manager. however, this implementation work is facilitated by the availability of the pattern-based property editor as a stand-alone java application. in addition, the development of new plugins for tools based on model formalisms that can be mapped to fstss, explicitly or implicitly, are conveniently designed after plugins already available for gna.

formal verification methods are promising tools for upscaling the analysis of genetic regulatory networks. the widespread adoption of these approaches has been hampered so far, by the difficulty for non-expert users to formulate appropriate questions in temporal logic, effectively use formal verification tools, and meaningfully interpret the results returned by the model checker. the modular infrastructure that we propose is capable of connecting modeling and formal verification tools. in combination with graphical user interfaces capable of presenting data in a form accessible to modelers, we expect this to lower the obstacles to the use of formal verification technology in biology.

availability and requirements
project name: genetic network analyzer  <dig>  

project home page: http://ibis.inrialpes.fr/article <dig> html

operating system: platform independent 

programming language: java  <dig> 

license: gna is distributed by genostar http://www.genostar.com/. free license for non-commercial academic users granted upon request on the gna home page.

any restrictions to use by non-academics: contact genostar at info@genostar.com for conditions.

project name: procrustes: pattern-based property editor

project home page: http://ibis.inrialpes.fr/article <dig> html

operating system: platform independent 

programming language: java  <dig> 

license: lgpl

authors' contributions
ptm designed and implemented the service-oriented architecture as well as the pattern editor and the nusmv and cadp plugins, carried out the analysis of the e. coli example and drafted the manuscript. ed designed and implemented the service-oriented architecture and the cadp plugin. bb helped with the implementation of the service-oriented architecture. rm helped with the design of the pattern editor and the design and implementation of the cadp plugin. mp designed the service-oriented architecture, helped with the design and implementation of the nusmv plugin, and helped to draft the manuscript. atf helped with the design of the pattern editor and helped to draft the manuscript. hdj helped with the design of the service-oriented architecture as well as the nusmv and cadp plugins, helped with the analysis of the e. coli example and drafted the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
definition of the atomic proposition low_rrn. atomic proposition specification window, where atomic propositions are defined in terms of restrictions applied to a state . in this case, the value of the concentration is restricted to lie below the threshold t_rrn.

click here for file

 additional file 2
definition of the atomic proposition high_rpos. atomic proposition specification window, where atomic propositions are defined in terms of restrictions applied to a state . in this case, the value of the concentration is restricted to lie above the threshold t_rpos.

click here for file

 additional file 3
verification options window. configuration of a verification request by specifying the model checker plugin to be used and, if the plugin supports an implicit representation of the fsts, the initial conditions for the qualitative simulation of the network.

click here for file

 additional file 4
verification result. results of the verification of a complex biological property, composed of a verdict  and the corresponding witness. the latter consists of a sequence of states containing a cycle . the value of the concentration of the variables in the selected states is shown, presenting an oscillation of the concentration of the variable fis .

click here for file

 acknowledgements
we would like to thank delphine ropers for helping with the analysis of the e. coli carbon starvation model and valentina baldazzi for testing the gna user interface and the architecture.

this work was partially supported by the fct program  and the pdtc program . bb and hdj were supported by the european commission under project cobios . rm and hdj were supported by the european commission under project ec-moan .
