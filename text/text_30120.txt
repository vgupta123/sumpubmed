BACKGROUND
the volume of published biomedical papers is expanding at an increasing rate each year. it is very challenging for biologists to keep up to date with their own field of biomedical research with biomedical knowledge expanding so quickly. thus, an automatic method for biomedical knowledge text mining is urgently needed  <cit> . in biomedical text mining, one special issue is the exploding use of new abbreviations  <cit> . it would be a great help for literature retrieval to collect these abbreviations automatically. furthermore, other text mining tasks could be done more efficiently if all the abbreviations for an entity could be mapped to a single term representing the concept  <cit> . generally, an abbreviation is a short form of a word or phrase called "definition" or "long form". our task is to identify <"short form", "long form"> pairs where there exists a mapping from characters in the short form to characters in the long form  <cit> .

existing approaches fall into four broad categories: rule based, machine learning based, text alignment based, and statistically based. rule based approaches attempt to use the best recognition rule, and good rules would result in good results. pustejovsky et al.  <cit>  presented a regular expression algorithm based on hand-built regular expressions, and syntactic information was considered to identify boundaries of noun phrases. ao and takagi  <cit>  constructed a system called alice based on heuristic pattern-matching rules. larkey et al.  <cit> , yu et al.  <cit> , park and byrd  <cit>  all put forward their own pattern matching rules separately. the shortcoming for these rule based approaches is that the performance of them is determined by the completeness of the rules.

machine learning based approaches generally comprise of a learner and a predictor, and fit in with all kinds of biomedical text by learning. chang et al.  <cit>  presented a method for identifying abbreviations using supervised machine learning. first step they used the longest common subsequence  algorithm to find all possible alignments between the definition and the abbreviation; second step, used all the possible alignments to compute feature vectors for correctly identified definitions; third step, used binary logistic regression to train a classifier with the feature vectors. generally speaking, machine learning based approaches depend on the learning model and the training data, and require a lot of labor and time. text alignment based approaches always try to find the optimal alignment between the definition and abbreviation by character matching, and are robust enough to acronym-type abbreviations. schwartz and hearst  <cit>  presented a simple algorithm for identifying the definitions of abbreviations with only two indices, lindex for the long form, and sindex for the short form. the two indices are initialized to point to the end of their respective strings. for each character sindex points to, lindex is decremented until a matching character is found. taghva and gilbreth  <cit>  utilized the longest common subsequence algorithm to find all possible alignments of the abbreviation to the text followed by a simple scoring rule based on matches. chang et al.  <cit>  also used the lcs algorithm in their machine learning method. however, state of the art alignment algorithms can not find non-acronym-type abbreviations , and even a little irregular acronym-type abbreviations .

statistically based approaches always tend to extract abbreviations that appear frequently in biomedical text, and demand a large number of biomedical articles for the statistics. zhou et al.  <cit>  created an abbreviation database adam that analyzed statistical information about collocations of the type "long-form " in medline. okazaki and ananiadou  <cit>  built an abbreviation dictionary from the whole medline. statistical methods can extract both acronym-type and non-acronym-type abbreviations as long as they appear frequently enough. however, they need a great deal of time and effort for the statistics, and would not find rare abbreviations even if they are only very simple acronym-type abbreviations like <ddr, dna damage response>.

in this paper we present a systematic method for extracting biomedical abbreviations. what is crucial in this method is that a scoring strategy is utilized for classifying the abbreviations into acronym-type and non-acronym-type groups . in the scoring strategy, the abbreviation is aligned with each of its candidate definitions using a new alignment algorithm analogous to pairwise sequence alignment  <cit> , and then the definition with the largest total score is selected from the candidate definitions. if the largest total score is larger than a predefined cutoff value the abbreviation is acronym-type, or else non-acronym-type. for the acronym-type abbreviation, we use the above alignment algorithm to identify the candidate definition with the largest total score as its definition. for the non-acronym-type abbreviation, we employ a statistical method similar to zhou et al.  <cit>  to determine the definition. thus, a new literature mining system mba for extracting biomedical abbreviations is developed to recognize more abbreviations and their corresponding definitions.

RESULTS
our method consists of four steps: step  <dig>  abbreviation recognition; step  <dig>  construct the candidate definition list; step  <dig>  classify the abbreviations into acronym-type and non-acronym-type groups; step  <dig>  identify the definitions of both acronym-type and non-acronym-type abbreviations. figure  <dig> shows the overall architecture of the mba system.

abbreviation recognition
to obtain the abbreviations, we take into consideration the feature of an abbreviation and the syntactic cues which abbreviations occur in the contexts. the feature of an abbreviation includes: its first character is alphabetic or numeric; it contains at least one letter; its length is between  <dig> and 10; it contains at most two words. park and byrd  <cit>  demonstrated that the syntactic cues include:

 long form  or long form 

 short form  or short form 

 short form = long form

 long form = short form

 short form, or long form

 long form, or short form

 short form...stands/short/acronym...long form

 long form, short form for short

in practice, most abbreviations appear with parentheses ). we use the similar method for abbreviation recognition as most researchers, and only consider pattern  and . for pattern , the short form is the one or two words before the left parenthesis, and the long form is just the expression inside the parentheses. for pattern , the short form is inside the parentheses, but the long form is not easy to be identified. thus, we take all the parenthesized tokens, in which the strings conform to the feature of an abbreviation, to be potential abbreviations. next we find all the possible candidate definitions for each potential abbreviation, and then identify the optimal definition.

construct the candidate definition list
the candidate definition appears in the same sentence as the abbreviation, and it can be searched for within a search space. the size of the search space is the sum of the maximum length of a definition  and the maximum offset . in our work, the offset is ignored and we consider only definitions adjacent to the abbreviations . park and byrd  <cit>  analyzed about  <dig> abbreviations and their definitions, and then they decided that, for relatively short abbreviations , the maximum length of a definition should not be greater than twice the abbreviation length ; for long abbreviations , the definition should not be longer than the abbreviation length plus  <dig>  thus, we refer to their work for the maximum length of a definition def of an abbreviation abbr:

  max.|def| = min  

where max.|def| is the maximum length of a definition, and |abbr| is the number of the characters in an abbreviation.

then a candidate definition list is constructed from the search space, and the possible definition is just one item of it. the list-constructing algorithm is described in table  <dig>  for example, in the text "this gene is expressed in a circadian pattern in the suprachiasmatic nucleus ", |abbr| =  <dig>  max.|def| = min =  <dig>  searchspacestring = "circadian pattern in the suprachiasmatic nucleus", cdl = {"circadian pattern in the suprachiasmatic nucleus", "pattern in the suprachiasmatic nucleus", "in the suprachiasmatic nucleus", "the suprachiasmatic nucleus", "suprachiasmatic nucleus", "nucleus"}.

3: if  {
searchspacestring = the string from the beginning of the sentence to the left parenthesis;
}
else {
searchspacestring = the string that contains max.|def| words before the left parenthesis;
5: for  {
candidatedef = searchspacestring with the leftmost n words deleted;
insert candidatedef into cdl;
classify the type of abbreviations
abbreviations are classified into acronym-type and non-acronym-type abbreviations  by scoring abbreviations and their corresponding definitions. each time we retrieve an item from the candidate definition list, align it with the abbreviation employing our alignment algorithm, and then select the optimal definition. the score between the abbreviation and the optimal definition determines whether the abbreviation is acronym-type or not.

data preprocessing
usually a definition is abbreviated with a new addition of a special character , and the lowercase letter from a definition may be changed into its corresponding capital letter. some data preprocessing steps must be taken before we identify the definition for a given abbreviation:

• delete the character that is neither alphabetic nor numeric in the abbreviation and change all capital letters in both the abbreviation and the definition into their corresponding lowercase letters.

• replace the space between words of the candidate definition with the character '\s' in order to differentiate between the space inserted in the alignment algorithm and the space between words of the candidate definition.

alignment algorithm
the definition identification is a process of comparison between the abbreviation and the definition. the smallest unit of comparison is a pair of characters, one from the abbreviation, and the other from the definition. all possible comparisons are made from the smallest unit while allowing gap insertions in the abbreviation. among the comparisons the definition with the best match is chosen as the optimal definition. the best match can be defined as the largest alignment score of characters of the definition that can be matched with those of the abbreviation. the largest alignment score can be determined by representing in a two-dimensional array, all possible pair combinations that can be constructed from the abbreviation and the definition, a and d, being compared. a  is the ith character of the abbreviation string and d  is the jth character of the definition string. a  and d  represent the rows and the columns of the two-dimensional array score. then the cell, score  , represents a pair combination that contains a  and d .

with the above definition of a , d  and score  , now what we need to do is to get the largest value of score  , which represents the best match. then dynamic programming is used to compute each cell value of score. unlike the solutions of needleman and wunsch  <cit>  and smith and waterman  <cit> , we do not allow the gap insertions in the definition, so score   is determined by score  , score   and the alignment of a  and d , and not by score  . the below is the recursion equation for computing the largest value of score  .

firstly the initial value is assigned:

 score   =  <dig> if i =  <dig> or j = 0; 

then, we have

  score=max⁡0<i<length0<j≤length{score+wscore 

where the w is defined as:

  w={wa,if a=d and d is the firstcharacter of one word in the definition;wb,if a=d and d is not the firstcharacter of one word in the definition;wc,if a!=d 

where wa and wb are positive values, wa>wb, and wc is a negative value.

after the matrix score is filled, score   is just the largest alignment score, the score of the best match. knowing the largest alignment score is not enough, we need to get the best match pathway by traceback. the best match pathway can be obtained by beginning at the terminals of both strings , j = length) and proceeding row by row toward the origins. the traceback algorithm checks if score   is obtained from score  . if yes, a  is identical to d , and both i and j are decremented. if not, a space is inserted before the ith character of the abbreviation, and only j is decremented. the process is repeated until all cells in the matrix score have been operated upon. the operation of successive summations of cell values is illustrated in figure  <dig> .

select the optimal definition
from the candidate definition list cdl, we can get at most max.|def| candidate definitions, each of which corresponds to an alignment score provided by the alignment algorithm. despite the alignment score, it is not enough to determine the optimal definition. for example,

 <dig>  in the text "little is known, however, about how such dialog acts  can be automatically classified in truly natural conversation", "das" will be recognized as an abbreviation. the true definition is "dialog acts", but "dialog acts", "such dialog acts", "how such dialog acts" and "about how such dialog acts" will have the same alignment score.

 <dig>  in the text "the mutations map across most of the bicoid protein, with some located within the dna-binding domain ", "homeodomain" will be recognized as an abbreviation wrongly. then the alignment algorithm will select the string "with some located within the dna-binding domain" as its definition. however, "within the dna-binding" in the definition is unmatched in this alignment . with too many unmatched words in the middle of the definition this abbreviation must be thrown away.

 <dig>  in the text "a questionnaire was sent to them as well as to  <dig> physicians who had residency-level teaching responsibilities but who were not named ", "controls" will be recognized as an abbreviation wrongly. the alignment algorithm will select the string "physicians who had residency-level teaching responsibilities but who were not named" as its definition. however, "but who were not named" in the definition is unmatched in this alignment. with too many unmatched words in the end of the definition this abbreviation must also be thrown away.

then we put forward a new concept: the redundant word penalty, which is defined as follows:

definition  <dig> the redundant word penalty is a penalty against the candidate definitions having several continuous unmatched words.

the penalty depends on the number of the continuous unmatched words in the candidate definition . if the number is small, the penalty is low, otherwise the penalty is high. one unmatch word often appears in true definitions, for example, for the pair <fmdv, foot and mouth disease virus>, there is only one unmatched word "and" in the definition. the penalty should be very low in this case. based on the analysis, the redundant word penalty  is divided into the beginning word penalty  and the extended word penalty . in n continuous unmatched words, the first c words are given a penalty score, bp for each word, and the other n-c words are given another penalty score, ep for each word. thus, the equation of rwp is as follows:

  rwp = c * bp + ep *  

there are three cases  that the redundant word penalty occurs:

 <dig>  the first character of the abbreviation does not match the first word of the candidate definition .

 <dig>  two adjacent characters in the abbreviation match two separated words in the candidate definition separately .

 <dig>  the last character of the abbreviation does not match the last word of the candidate definition .

for example, for the alignment <der, drosophila epidermal growth factor receptor> in figure  <dig>  rwp <dig>  rwp <dig> and rwp <dig> are computed as follows:

 <dig>  rwp <dig> =  <dig>  because the first character "d" in the abbreviation matches the first word "drosophila" of the definition.

 <dig>  for rwp <dig>  any two adjacent characters in the abbreviation must be considered. "d" and "e" match two adjacent words "drosophila" and "epidermal" respectively, so rwp <dig> = 0; "e" and "r" match two separated words "epidermal" and "receptor" respectively, and the number of the continuous unmatched words is  <dig>  so rwp <dig> = c *bp + ep*. in sum, rwp <dig> = rwp <dig> + rwp <dig> 

 <dig>  rwp <dig> =  <dig>  because the last character "r" in the abbreviation matches the last word "receptor" in the definition.

the three cases may appear in the same alignment, so the total redundant word penalty  is:

  totalrwp = rwp <dig> + rwp <dig> + rwp <dig> 

then for each alignment, we have

  total score = alignment score - totalrwp 

at last the optimal definition can be selected from the candidate definition list by selecting the largest total score. if the total score of the optimal definition is larger than the predefined cutoff score, the abbreviation is acronym-type, otherwise non-acronym-type.

here, the w, the redundant word penalty, the cutoff score and the variable c  need to be adjusted. to assist in assigning the optimal value for the above, a publicly available tagged corpus, the medstract gold standard development corpus is used. we first gave each of the above parameters an initial value, and then for each one we examined how the total score for the optimal definition were distributed when we changed the value keeping the other parameters unchanged. to truly differentiate acronym-type and non-acronym-type abbreviations, the values are set as follows:

• wa 2

• wb 1

• wc -7

• bp  <dig> 

• ep  <dig> 

• c  <dig> 

• the cutoff score  <dig> 

identify the definitions of both acronym-type and non-acronym-type abbreviations
we could separately identify the definitions of acronym-type and non-acronym-type abbreviations after the abbreviations are classified. for the acronym-type abbreviation, we use the above alignment algorithm to traceback for the definition with the largest total score, and thus the definition is identified. for the non-acronym-type abbreviation, we use a statistical method similar to that of zhou et al.  <cit> .

our statistical method is based on pubmed , in which we count the number of articles that contain both the candidate definition and the abbreviation. zhou et al.  <cit>  got statistical information of "candidate definition " including a pair of parentheses, whereas the abbreviation and the definition may not be separated by parentheses or not appear in the same sentence but the same article. it is too complex to consider all the syntactic clues which abbreviations occur in the contexts in abbreviation recognition, but the statistical method need not consider the specific syntactic clues and only care about whether the definition and the abbreviation co-occur in the same article. we assume that the abbreviation is "abbr", and the candidate definition with i words is: "wi...w2w1". thus, we count the number of articles in pubmed for each step in the progression "abbr" → "w <dig> and abbr" → "w2w <dig> and abbr" →...→ "wi...w2w <dig> and abbr", and then assign each candidate definition/abbreviation pair a score that will be used to identify the candidate definition for a given abbreviation. the same score apri, the adjusted proportion of the raw proportion pri, is used for identifying the candidate definition as zhou et al.  <cit> :

  pri=count−1count,i≥ <dig> 

  apri=pri−2∗pri∗count,i≥ <dig> 

where count  is the number of articles in which both the wiwi- <dig> ..w2w <dig> and the abbreviation occur. in equation  <dig> it requires that pri ≥  <dig>  so count  must be larger than zero in equation  <dig>  if count  is equal to zero, we assign it the value  <dig>  for example, in the text "a lupus-like murine model of cd <dig> ", the adjusted proportion apri is computed as:

 pr1=8181−117318= <dig>  

 apr1= <dig> −2∗ <dig> ∗17318= <dig>  

 pr2=1−18181= <dig> 

apr <dig> = 0

the apr value drops significantly from "cd <dig> " to "of cd <dig> ", and thus "cd95" is determined as the definition of "fas". in order to determine the cutoff score for the adjusted proportion, we extracted all the abbreviations and their candidate definitions in the medstract gold standard development corpus which contains  <dig> <"short form", "long form"> pairs, and then computed the apr value for all the candidate definitions. at last we found that  <dig>  was still fit for the cutoff score as in zhou et al.  <cit> , which means that if the apr value drops below  <dig>  when the candidate definition wiwi- <dig> ..w2w <dig> is expanded to wi+1wiwi- <dig> ..w2w <dig>  wiwi- <dig> ..w2w <dig> is identified as the definition of the abbreviation. here, we also do not apply the cut off criteria to apr <dig> and instead require that count  ≥  <dig>  in summary, given the abbreviation "abbr" and the candidate definition "wk...w2w1", w <dig> is a candidate definition identified by

 {count≥10apr2< <dig>  

wk...w2w <dig> is a candidate definition identified by

 {count≥10apri≥2≤i≤k <dig> aprk+1< <dig>  

in the above method, several candidate definitions may exist for a given abbreviation. the change of apr is also used to get rid of redundant candidate definitions as in the method of zhou et al.  <cit> : given two candidate definitions of the same abbreviation, wm...w2w <dig> and wn...wm...w2w <dig>  then

  Δapr=aprm−aprnaprm 

if Δapr ≥  <dig> , remove wn...wm...w2w <dig>  otherwise remove wm...w2w <dig>  if the first word of the candidate definition is in the pubmed stopword list , the first word is removed from the candidate definition. finally a filtering rule is adopted: the length ratio  should be larger than  <dig>  in the paper of zhou et al.  <cit> , the length ratio must be either equal to or larger than  <dig>  because 95% of the single-word abbreviations in the stanford abbreviation database have length ratio ≥  <dig> , but our statistical method is only for non-acronym-type abbreviations. there are many non-acronym-type abbreviations such as <fas, cd95>, <pax <dig>  eyeless> and so on, and their length ration is neither equal to nor larger than  <dig> , but generally larger than  <dig> 

evaluation
evaluation on the medstract gold standard corpus
to evaluate the mba system, we have run it against a publicly available tagged corpus, the medstract gold standard corpus, which is composed of the development corpus with  <dig> tagged <short form, long form> pairs and the evaluation corpus with  <dig> tagged pairs. the development corpus has been used for determining some values before, and the evaluation corpus is used for comparing the mba system with three popular downloadable algorithms:

• the chang et al.  <cit>  algorithm  at the three cutoff scores:  <dig> ,  <dig>  and  <dig> .

• the slice algorithm  <cit>  .

• the s&h algorithm  <cit>  .

our result is strictly based on the corpus without corrections, and the extracted pairs must match the tagged ones exactly. mba identified  <dig> <short form, long form> pairs in the result. out of these,  <dig> pairs were correct, resulting in a recall of 88% and a precision of 91%. table  <dig> indicates the result of that comparison with other algorithms on the gold-standard corpus.

in our result fifteen pairs were incorrect: nine pairs were only partially matched ; the rest pairs might be <short form, long form> pairs, but not biomedical items :

• lethal of scute 

• basic helix-loop-helix 

• primary ethylene response element 

• ca2+-sensing receptor 

• intermediate neuroblasts defective 

• eliminates an ap <dig> homolog 

the system mba missed twenty-one pairs: nine of them were only partially matched, that is to say, the true definition includes an additional word, for example, "rna polymerase i ", mba missed the word "rna"; three non-acronym-type abbreviations were not found because of the insufficient statistical information; for the other nine pairs, the definition and abbreviation were not separated by parentheses. since nine <short form, long form> pairs are not separated by parentheses, they will be ignored by the abbreviation recognition algorithm. if we do not consider more syntactic cues for abbreviation recognition, mba can only achieve the highest recall of 95% even if the alignment algorithm and the statistical method are perfect.

moreover, we also analyzed the abbreviation database adam  <cit>  based on the gold standard evaluation corpus. firstly, we extracted all of the  <dig> tagged abbreviations and their corresponding definitions; secondly, manually input the abbreviations one by one into the form of the webpage  and then searched the database to check if their corresponding definitions were in the list of "long-forms and variants". in this way, only  <dig> abbreviations and their definitions were found in adam, resulting in a recall of 52%. this shows that the statistical method can not recognize rare abbreviations, and it is not effective to employ only the statistical method. if our alignment algorithm was solely run on the corpus, it identified  <dig> pairs. out of these,  <dig> pairs were correct, resulting in a recall of 83% and a precision of 91%. through analyzing the result, we found that many non-acronym-type abbreviations were discarded. so it is necessary for the alignment algorithm to explore the statistical method as described in the paper of torii et al.  <cit> .

error analysis
the medstract gold standard corpus is not large enough for error analysis, so the top  <dig> abstracts were selected from the results of a query on the term "protein" in pubmed. in the larger corpus  <cit> , we ran the mba system and then investigated how many false <short form, long form> pairs in the result.

the mba system identified  <dig> <short form, long form> pairs in total, and  <dig> errors were found, giving an error rate of  <dig> %. there were three types of errors as follows:

 <dig>  there were  <dig> errors in the phase of abbreviation recognition. twenty-two parenthesized tokens were wrongly recognized as abbreviations ).

 <dig>  some errors  occurred when the system identified the definitions of the acronym-type abbreviations. the system got either a longer string or a shorter string than the true definition for an abbreviation. fox example, for the definition "regulatory t cells" of the abbreviation "tregs", the system wrongly identified "that regulatory t cells" as its definition.

 <dig>  some errors  occurred when the system identified the definitions of the non-acronym-type abbreviations. for example, "effective half-maximal concentration" was the definition of "ec", but the system wrongly identified "concentration" as the definition.

CONCLUSIONS
in this paper, we develop a systematic method for extracting biomedical abbreviations. it consists of four steps mainly: step  <dig>  abbreviation recognition; step  <dig>  construct the candidate definition list; step  <dig>  classify the abbreviations into acronym-type and non-acronym-type groups; step  <dig>  separately identify the definitions of acronym-type and non-acronym-type abbreviations: text alignment algorithm for the former, statistical method for the latter. our evaluation demonstrates that the mba system performs better than the others. it can identify the definition of not only acronym-type abbreviations including a little irregular acronym-type abbreviation, but also non-acronym-type abbreviations.

the mba system needs a few improvements, although it is good at extracting both acronym-type and non-acronym-type abbreviations. in our study we use a simple method to select the best values for several parameters. at present there are many optimizing methods, such as genetic algorithm, simulated annealing algorithm and so on. we have been trying to optimize the parameters with these methods, and this is the topic of our current research. besides the needed improvement in parameter optimization, the statistical method costs a lot of time in the mba system, and we need reduce the time cost by either narrowing the searching range or paralleling our algorithm. this is another topic of our current research. our future work is to set up a biomedical abbreviation server, in which we will consider more syntactic clues in the contexts for better results.

in conclusion, a literature mining system mba is developed and applied to extract biomedical abbreviations. mba could find both acronym-type and non-acronym-type abbreviations effectively. the systematic method can also be used in the general text, or applied in other research areas.

