BACKGROUND
the idea of clustering is to group unlabeled data into subsets so that both the within-group homogeneity and the between-group heterogeneity are high. the hope is that the groups will reflect the underlying structure of the data generator. although clustering continuous data can be done in a wide variety of conceptually distinct ways there are generally far fewer techniques for categorical data. probably the most familiar methods are k-modes  <cit> , model-based clustering   <cit> , and various forms of hierarchical clustering. k-modes is k-means adapted to categorical data by replacing cluster means with cluster modes. mbc postulates a collection of models and assumes the clusters are representative of a mixture of those models. the weights on the models and the parameters in the model are typically estimated from the data. hierarchical clustering is based on choosing a sense of distance between points and then merging data points or partitioning the data set, agglomerative or divisive, respectively. the merge or partition rules in a hierarchical method must also be chosen. so, hierarchical clustering is actually a large collection of techniques. other more recent approaches include rock  <cit> , which is based on a notion of graph-theoretic connectivity between points, and click  <cit> , which is based on finding fully connected subgraphs in low dimensional subspaces.

ensembling is a general approach to finding a consensus value of some quantity that typically gives better performance than any one of the components used to form it. in the clustering context, this means that we should be able to take a collection of clusterings and somehow merge them so they will yield a consensus clustering that is better than any of the individual clusterings, possibly by separating clusters more cleanly or having some other desirable property. thus, in principle, ensembling can be used on any collection of clusterings, however obtained.

there are many techniques by which the ensembling of clusters can be done and many techniques by which clusters to be ensembled can be generated. for instance, in the case of continuous data, four alternative methods for ensembling clusters are studied in  <cit> . they can also in some cases be applied to categorical data. the best of the four seems to be a form of model based clustering that rests on discretizing a data set, imputing classes to the various clusters from a collection of clusterings, and modeling the imputed classes by a mixture of discrete distributions. these methods were exemplified on five low dimensional data sets  and even though the model based approach was overall best, the other methods were often a close second and in some cases better.

more recently,  <cit>  developed a consensus clustering based on resampling. any clustering technique can be repeatedly applied. essentially, the proportion of times data points are put in the same cluster defines a collection of pairwise consensus values which are used to form k consensus clusters for given k. the ensembling method used in  <cit>  does not seem to have been compared to the methods studied in  <cit> . in addition, most recently, the r-package clue  ensembles clusters using a different and more general concept of distance than in  <cit>  or  <cit>  although neither of those may be regarded as special cases of clue.

by contrast, to ensemble clusterings, we ensemble dissimilarity matrices rather than cluster indices and we assume the data are categorical. thus, our method is again different from those that have been presented. our method starts by forming an incidence matrix i summarizing all of them. the number of columns in i is the number of clusterings, say b; each column has n entries, one for each data point. the  entry of i is the index of the cluster in the j-th clustering to which xi belongs. the hamming distances between pairs of rows in the incidence matrix effectively sums over clusterings – combining their effects – and gives a distance between each pair of data points. these distances are the entries in the ensembled dissimilarity matrix that we use in our approach. this form of ensembling is described in detail in  <cit> . note that the individual clusterings that go in to forming the ensembled dissimilarity matrix are unrestricted; they may even be of different sizes.

we have used hamming distance with equal weights since it is natural for discrete data when the principle of insufficient reason applies <dig> – it corresponds to classification loss which assumes the values are categorical rather than discrete ordinal and does not weight any one categorical variable more or less than any other. implicitly hamming distance also assumes that all distances between values of the same random variable are the same. hence it is a good default when no extra information is available. indeed, it is well known that different senses of distance correspond to different clustering criteria. determining which sense of distance is appropriate for a given setting is a difficult and general problem. it is beyond the scope of this paper which is merely to present the software.

given this, the question is which base clusterings to ensemble. recall that with categorical data the measurements on a subject form a vector of discrete unordered values. here, we will assume there is a uniform bound on the number of values each variable can assume. data satisfying this condition is common in genetics because the nucleotide at a location is one of four values. we have ensembled a variety of clusterings generated by various methods. for instance, we have ensembled k-modes clusterings, model based clusterings , and hierarchical clusterings using hamming distance and several different linkages. <dig> as seen in  <cit> , the best clustering results seem to emerge by i) generating hierarchical clusterings using hamming distance and average linkage, ii) combining them into the ensembled dissimilarity matrix , and iii) using hierarchical clustering with, say, average linkage as defined by the ensembled dissimilarity matrix. variants on this procedure also seem to work well, e.g., complete linkage gives similar performance to average linkage and ensembling reduces the chaining problem  associated with single linkage. metrics other than hamming distance may give better or worse results, but we have not investigated this because hamming distance is such an intuitively reasonable way to assess distances between categorical vectors.

this procedure outperforms k-modes because, when the data are categorical, the mean is not well-defined. so, using the mode of a cluster as its ‘center’ often does not represent the location of a cluster well. moreover, k-modes can depend strongly on the initial values. using summary statistics that are continuous does not resolve this problem either; see  <cit>  for an example.

our procedure outperforms mbc because mbc relies on having a model that is both accurate and parsimonious – a difficult input to identify for complex data. indeed, if we know so much about the data that we can identify good models, it must be asked why we need clustering at all – except possibly to estimate parameters such as model weights. as a separate issue mbc is computationally much more demanding than our method. we comment that in some cases, the ensemble clustering can be worse than simply using a fixed clustering method. this is often the case for k-modes and mbc. while somewhat counterintuitive, this is a well recognized property of other ensemble methods, such as bagging, because ensemble methods typically only give improvement on average.

overall, in  <cit>  our method was compared to  <dig> other methods  over  <dig> real categorical data sets and numerous systematic simulation studies of categorical data in low and high dimensional settings. the theory established suggests that ensemble clustering is more accurate than non-ensembled clusterings because ensembling reduces the variability of clustering. our finding that the method implemented here is ‘best’ is only in an average sense for the range of problems we examined among the range of techniques we tested. in all these cases, our ensembled method was the best, or nearly so, and its closest competitors on average were non-emsembled hierarchical methods that also used hamming distance as a dissimilarity. thus, in the present paper, we only compare our ensemble method with its non-ensembled counterpart.

at root, our method generates an ensembled dissimilarity matrix that seems to represent the distances between points better than the dissimilarity matrices used to form it. the result, typically, is that we get dendrograms that separate clusters more clearly than other methods. thus, simply looking at the dendrogram is a good way to choose the appropriate number of clusters.

to fix notation, we assume n independent and identical  outcomes xi, i= <dig> …,n, of a random variable x. the xi’s are assumed j-dimensional and written as  where each xij is categorical and assumes no more than, say, m values. we consider three cases for the value j: low dimension, i.e., n≫j, high dimension, i.e., j≫n, and high dimension but unequal, i.e., different xi’s can have different j’s and all the j’s are much larger than n. we implemented our procedure for these three cases in an r package, entitled enscat. as will be seen, the basic technique is for low dimensional data but scales up to high dimensional data by using random selection of subspaces and increasing the size of the ensemble. this is extended to data vectors that do not have a common length by using multiple alignment. we present these cases below.

implementation
we implemented our methods in the r statistical language that is free and open source  <cit> . so, our package does not require any other software directly. since r is already widely used by researchers, we limit our presentation below to the functions we have defined in enscat. the one exception to this is that if one wants to use our software on unequal length data e.g., genome sequences, the data points must be aligned and our software is compatible with any aligner. several aligners are available in r, however, they have long running times for genome length data. as noted below, we convert categorical data values such as {a,t,c,g} to numerical values such as  <dig> , <dig>  because r runs faster on numerical values than on character values, and numerical values require less storage capacity.

when j is large, our methodology uses a random subspace approach to reduce the dimension of the vectors being clustered. we do this by bootstrapping. given the set { <dig> …,j} we choose a sample of size j with replacement, i.e., we take j iid draws from { <dig> …,j}. then we eliminate multiplicity to get a set of size j∗≤j of distinct elements. this procedure can be repeated on the set with j∗ elements, if desired, to get a smaller set of distinct dimensions. since the dimensions of the subspaces are random, they will, in general, be different. this allows our procedure to encapsulate a large number of relationships among the entires in the xi’s. as a generality, ensemble methods are robust by construction because they represent a consensus of the components being ensembled. this is formally true for random forests in classification contexts,  <cit> , and partially explains why ensemble methods are not always optimal. sometimes a single component routinely outperforms ensembles of them; this seems to be the case with k-modes and mbc.

RESULTS
low dimensional categorical data
the package enscat includes functions for implementing k-modes, hierarchical clustering methods, and our ensemble clustering method. it can also call routines for mbc. to show how this works, here we use the data set usflag as an example. this dataset contains information about maritime vessels in the u.s.-flag privately-owned fleet and can be downloaded from the united states department of transportation site for united states maritime administration data and statistics  <cit> . usflag has sample size n= <dig> and each observation has  <dig> categorical variables containing information about vessel operator, vessel size and weight, and vessel type . the data are stored in usflag$obs and the vessel types are stored in usflag$lab. once the enscat package has been downloaded and installed, k-modes clustering can be done in r by using the commands

  <dig> librarydatakmodes 

the second argument in the function kmodes,k= <dig>  is the number of clusters k-modes should output. the third argument is the specification of the initial modes. here, 1: <dig> means the first five data points should be taken as the initial modes. as recognized in  <cit> , k-modes is sensitive to initial values, possibly leading to instability and inaccuracy.

hierarchical clustering has attracted more attention than k-modes since it provides a nested sequence of clusterings that can be represented as a tree or dendrogram. this technique requires a matrix specifying the distances between data points; such a matrix can be calculated using hamming distance. the following commands generate a dendrogram using hamming distance and average linkage.



the first command generates the n×n matrix in which the -th entry is h∈ <cit>  where h is the hamming distance between its arguments. the second command tells r to regard distham <dig> as a matrix of distance. taken together, the third and fourth commands produce and plot the dendrogram for hierarchical clustering using distham <dig> and average linkage. the command ggdplot is a convenience wrapper for the function ggdendrogram in the package ggdendro which automates the plotting of a rotated dendrogram with user specified leaf labels and plot title. the results are shown in fig.  <dig> 
fig.  <dig> dendrogram generated by average hamming distance on usflag data



by contrast, our ensembling algorithm is the following.

ensemble clustering of usflag can be done by the following.



the first command uses benhc, one of two functions in enscat that implement our new method. this generates the ensembled dissimilarity matrix t by combining b= <dig> hierarchical clusterings using hamming distance and average linkage, each generated by steps  <dig>   <dig>  and  <dig> in algorithm  <dig>   the second command runs a hierarchical clustering using t and average linkage. hclust is a function in r from the package stats that can be used to make a dendrogram. the third command generates a plot of the ensembled dendrogram, with a grayscale grid in the background to help gauge the length of each lifetime; see fig.  <dig>  in contrast with fig.  <dig>  the ensembling gives longer ‘lifetimes’, i.e., the vertical lines connecting to the individual data points. longer lifetimes mean that the clusters are separated more clearly. we found this to be the typical effect of ensembling.
fig.  <dig> dendrogram generated by the ensemble method on usflag data





estimating the correct number of clusters, kt, is a difficult problem. several consistent methods are known for continuous data, see  <cit>  for a discussion and comparison of such techniques. in the categorical data context, some techniques such as k-modes and mbc require k as an input and in practice the user chooses the value of k that gives the most satisfactory results. for hierarchical clustering, k need not be pre-assigned; it can be inferred, at least heuristically, from the dendrogram. when ensembling separates the clusters more clearly inferring k may be easier. in particular, it can be seen from the increased number of long lifetimes in the dendrogram of fig.  <dig> relative to the number of long lifetimes in the dendrogram of fig.  <dig> that the ensembling visibly improves the separability of the clusters leading to fewer, more distinct clusters. thus, simply looking at the dendrogram may be a good way to choose the appropriate number of clusters.

this observation is heuristic but is supported by formal stability computations under perturbation indices, for instance. one established approach is due to  <cit> . the idea is to generate a range of clusterings of various sizes. then, for each clustering, reclustering b bootstrap samples from it evaluating the jaccard coefficient by cluster for each clustering. higher values of the jaccard coefficients for the clusters indicate higher reproducibility under bootstrapping and hence high stability. we have applied this procedure using the function clusterboot in the r-package fpc. the result is in fig.  <dig>  for k= <dig> …, <dig>  the boxplots of the jaccard coefficient between the original clusters and the clusterings based on the resampled data are plotted. the notation ‘e’ on the horizontal axis indicates the ensembled version; ‘h’ indicates the  hierarchical version. for each k from  <dig> to  <dig>  the ensembled version is strikingly more stable. although not shown here, the same qualitative behavior can be observed if the adjusted rand index is used. on the other hand, the behavior is similar but not identical if the unadjusted rand index is used. so, there may be some dependence on the exact form of data point perturbation method.
fig.  <dig> jaccard resampling stability analysis for the usflag data. the labels indicate the type of clustering and the number of clusters, e.g., e. <dig> is ensembled hierarchical clustering with  <dig> clusters while h. <dig> is non-ensembled hierarchical clustering with  <dig> clusters



high dimensional categorical data: fixed length
our method extends to high dimensional fixed length data by clustering on random subspaces, i.e., random selections of the categorical variables of comparatively smaller dimension, using hamming distance and average linkage. taken together these clusterings give an i as in algorithm  <dig> and steps  <dig> and  <dig> can be performed. as can be seen by comparing algorithms  <dig> and  <dig>  the only methodological difference between our treatment of low and high dimensional categorical data is the clustering on random subspaces.



it is seen that the xb∗’s contain independently chosen subsamples of possibly different sizes of the j variables so that all variables have the same chance of inclusion. the commands for implementing algorithm  <dig> are a special case of those given in the next subsection  <dig>  if j is so large that the output of step  <dig> results in an unacceptably long running time for step  <dig>  a second, or even third, level of boostrapping can be used . enscat does implement a double bootstrap in the high dimensional case; see the example code for algorithm  <dig> 

high dimensional categorical data: non-fixed length
our method extends to non-fixed length high dimensional data by ‘filling in’ missing variables by alignment and then using random subspace clustering as described in the last subsection. as an example we generate an ensemble clustering of complete viral genomes from the family rhabdoviridae. according to the virus pathogen database and analysis resource , rhabdoviridae is divided into  <dig> genera and for ease of exposition we have limited our analysis to the data set containing all distinct and complete genomes from those genera with less than  <dig> complete genomes .

the  <dig> relevant genera of rhabdoviridae are, namely, cytorhabdovirus, ephemerovirus, novirhabdovirus, nucleorhabdovirus, perhabdovirus, sigmavirus, sprivivirus, tibrovirus, and tupavirus, with  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig> genomes, respectively. the viruses belonging to these genera came from different hosts, namely, alfalfa, cattle, drosophila, eel, fish, garlic, midge, mosquito, eggplant, taro, trout, and unknown. in the dendrograms each sample is identified by the first two letters of the genus and the first three letters of the host . the genomes have lengths between  <dig>  and  <dig>  base pairs. in principle, we could have included incomplete genomes and filled in the missing data by imputation via alignment. for simplicity we did not do this.

to cluster categorical vectors of different lengths, the first step is to preprocess the data using a multiple alignment approach so all the vectors have the same length. this is done by including an extra value, say ϕ, that is inserted in various locations so that sequences of nucleotides match as closely as reasonably possible. there are several programs that do multiple alignment and they can give different equalized lengths depending on the exact rules followed for inserting ϕ. we used mafft- <dig>  <cit>  but any aligner would be compatible with our software, although different aligners might give different results. we stored the aligned data in a file called ‘rhabdodata’ and pulled it into r using data. now, the data take values in {a,t,c,g,ϕ}. for efficiency, this categorical data is converted to numerical data. the enscat command ctn does this conversion; {a,t,c,g,ϕ} in rhabdodata are replaced with { <dig> , <dig> ,na}. r recognizes na as missing data so this does not increase enscat’s running time.

hierarchical clustering on rhabdodata using hamming distance and average linkage is given by



this is the same code as for low dimensional categorical data. the resulting dendrogram is in fig.  <dig> 
fig.  <dig> dendrogram generated by average hamming distance on rhabdodata via du



the dendrogram of the ensemble clustering for rhabdodata using hierarchical clustering with average linkage and the matrix t generated by the b clusterings of the random subspaces can be obtained using the following commands.



enhchi is the enscat function that generates i for the equalized length vectors; it stands for ensembling hierarchical clusterings of high dimension. in this example, b= <dig> random subspaces are chosen and the values kb are chosen according to a dunif  <cit> . we chose  <dig> because 8≈ <dig> and n=5+10+16+10+1+3+5+1+2= <dig>  the argument type= <dig> specifies a double bootstrap procedure for variable selection. the result is in fig.  <dig> 
fig.  <dig> dendrogram generated by ensembling clusterings of random sizes on rhabdodata via du



we note that fig.  <dig> improves on fig.  <dig> in the same sense as fig.  <dig> improves on fig.  <dig>  that is, the dendrograms from the ensemble methods have an increased number of long lifetimes relative to short lifetimes suggesting increased stability. again, this is reflected in the jaccard coefficients for the various choices of k, see fig.  <dig>  for k= <dig> …, <dig> it is clear that the ensemble method gives higher stability than the hierarchical method though the improvement is not as much as in the low dimensional case for reasons discussed earlier. as a point of interest, note that stability indices can themselves become unstable when there is too little data per cluster. this is seen for k= <dig>  in fig.  <dig> 
fig.  <dig> jaccard resampling stability analysis for the rhabdoviridae data. the labels indicate the type of clustering and the number of clusters, e.g., e. <dig> is ensembled hierarchical clustering with  <dig> clusters while h. <dig> is non-ensembles hierarchical clustering with  <dig> clusters



an alternative way to visualize the improvement provided by ensembling is shown in the ‘tanglegram’ in fig.  <dig>  the left hand dendrogram shows the average linkage hierarchical clustering under hamming distance, while the right hand dendrogram shows the ensembled version of clusterings of this form. this figure was generated by a simple command,
fig.  <dig> a tanglegram of the clusterings shown in figs.  <dig> and  <dig>  this visualizes the amplification and clarification of the cluster structure provided by our ensembling approach. the same samples in both clusterings are connected by lines; branches that appear only in one clustering are denoted by dashed lines



tangle

colored lines connect the same data points in the two different clusterings; the dashed lines identify branches that exist in only one of the two dendrograms. it is visually apparent that the ensembling collapses many branches into single clusters. that is, the ensembling amplifies and simplifies the underlying cluster structure, so that the clusters are more readily discernible. for a nice exposition of tanglegrams and other visualizations of dendrograms see galili  and the associated package dendextend  <cit> .

to see the effect of the range of the number of clusters, fig.  <dig> shows the result of using our ensemble method drawing the kb’s from dunif. it is seen that by increasing the range of the kb’s, the sensitivity of the ensemble clustering to the data increases. this is no surprise because the range of clusterings has increased thereby decreasing the stability and this effect is larger in high dimensions than small. while we can generate a jaccard stability assessment for the dendrograms in figs.  <dig> and  <dig>  we have seen that the jaccard coefficient matches our visual intuition well so it is enough to argue that the degree of sensitivity in fig.  <dig> is a little too high. this follows from noting that the number of long lifetimes in the dendrogram has decreased visibly. in practice, a user should test several ranges for the kb’s and choose the results that produce the clearest separation between clusters. although informal, this is a common approach to selecting a clustering and works typically as well as many formal methods.
fig.  <dig> dendrogram generated by ensembling clusterings of random sizes on rhabdodata via du



simulation
for the sake of completeness, we give a simulated example of our method for equilength categorical vectors, both low and high dimensional. we generated data sets from different parameterizations and structures of multinomial distributions, <dig> data sets at each setting. the parameter values in the data generating model were fixed according to a simulation scheme  that allowed for examining the impact of several aspects of the clustering procedure: 
number of observed variables, taken as  <dig> and 100

sample sizes, taken as  <dig>   <dig>  1000

number of categories, taken as  <dig>   <dig>   <dig>  8

number of clusters, taken as  <dig>   <dig>  7

size of clusters, taken as all equipopulated or representing a range of differences of proportions of the data

expected cluster separations, ranging from all categories equi-likely to some categories likely and some not very likely



we generated  <dig> data sets at each of the three sample sizes, thus  <dig> data sets in total. of the  <dig> data sets at a given sample size,  <dig> had  <dig> variables and  <dig> had  <dig> variables. in the case of  <dig> variables, three were binary, three were ternary, four were quaternary, and two were octonary. in the case of  <dig> variables, all were quaternary. for each of the  <dig> data sets, we tested three, five, and seven clusters taken as true. hence we generated  <dig> clusterings, half using the hierarchical method based on hamming distance and half using our ensemble method. we then used the jaccard stability method as before to compare the  <dig> clusterings under one method to their respective  <dig> clusterings under the other method.

while many implications can be drawn from this simulation we focus on the fact that in all cases the difference between the median jaccard index for the ensemble method was strictly greater than the median jaccard index for the hierarchical method. indeed, for sample size  <dig>  the average median increase in stability was. <dig>  the corresponding increases for sample sizes  <dig> and  <dig> were. <dig> and. <dig>  respectively. that is, the stability of our method over hierarchical clustering increased substantially with sample size. we comment that in the absence of knowledge of the skewness of the distribution of the jaccard coefficient we have defaulted to the median, a slightly less efficient measure of location than the mean but qualitatively giving the same results for the sample sizes we have used.

as a separate point, the median improvement of ensemble clustering over hierarchical clustering in terms of jaccard stability decreases with dimension. for the case of  <dig> dimensions, the increase in stability is. <dig> and for  <dig> dimensions it is. <dig>  this is no surprise since it is well known that as dimension increases, clustering becomes increasingly unstable to the point where, in the limit of large dimensions, all clusterings are equally valid. this counter-intuitive result was first shown in  <cit>  and a characterization established in  <cit> . thus, in the limit of high dimensions, increases in stability are harder to achieve so even small ones may be important.

CONCLUSIONS
here we have described software that can cluster high dimensional categorical data points that have unequal lengths. the code is implemented in r, a well-known programming language. our method is based on ensembling, random subsets, and pre-processing data  by using an aligner.

there are two pragmatic benefits of the methodology built into our software. first, it is clearly seen that ensembling clusterings, at least when done well, gives results that are no worse and usually much better that using an individual clustering. the main way this is accomplished is by the reduction of ‘variability’. this is seen in the longer lifetimes, the increased stability, and the elimination of many of the dashed lines in the tanglegram. this parallels the well-established principle that ensembling generally gives better results when applied to classification and regression problems – also by reducing variability. a particularly clear instance of this is seen in the theory behind bagging, see  <cit> .

second, the main contribution of the methodology and software is to put the emphasis where it is more useful, namely on the construction of good candidate clusterings for categorical data. as can be seen, evaluating clustering stability is a well developed field with many methods that are typically accepted as intuitively reasonable. we have used the jaccard index but could have equally well used other resampling based indices such as the adjusted rand, the variation in information, etc. there are other classes of stability methods, e.g., bayesian, but these are beyond our present scope. each specific technique has its strengths and weaknesses that become apparent in extreme cases  but outside of these cases the various methods for stability do not widely differ.

it is worth commenting that dimension reduction methods are sometimes considered a competitor to ensemble methods. indeed, feature selection is one of the main ways practitioners try to evade the curse of dimensionality. the idea is to reduce the dimension of the vectors to be clustered by identifying relatively few functions of the variables thought to characterize the clusters. evidence has accumulated that feature selection does not work very well on continuous data – absent extensive knowledge about which features are relevant – see  <cit> , and  <cit> . methods such as  <cit>  that try to weight explanatory variables adaptively are also known not to perform well. moreover, if generic methods for obtaining features, e.g., pca, are used with categorical data, the computing demands become infeasible. since techniques based on feature selection are even harder to devise and compute for discrete data, feature selection does not seem a promising approach to high dimensional clustering of categorical data. otherwise put, generic techniques such as ours that do not rely on extensive subject-matter knowledge are often the only available techniques.

generating good categorical clusterings to assess should be the general focus of methodological development and exploration. this is hampered by the fact that  clustering, like any model selection type of methodology, tends to require large amounts of data to be effective and  by the fact that high dimensional data is qualitatively different from low dimensional data. this is so because the concept of distance has an increasing impact on the spatial relationships of the data points making stability more difficult to achieve. hence, smaller increases in stability are overall more important in high dimensions than low. indeed, it has been argued that finite dimensional intuition becomes ever more inappropriate as dimension increases; see  <cit>  who argues that in the limit of high dimensions ultrametric distances between points are more representative than euclidean distances. nevertheless, our method seems to be flexible, capable of generating plausible clusterings when used reasonably, and amenable to stability assessments for finite dimensions.

we conclude by noting that even in the simplest case – clustering low dimensional categorical data having equal lengths – no previous method can be regarded as well-established. however, in  <cit> , we have argued theoretically and by examples that the method implemented by our software performs better on average than many other clustering methods in settings where other methods exist. we have also argued that in the case of fixed length high dimensional clustering our method outperforms mixed weighted k-modes, a technique from  <cit> . in the case of non-fixed length high dimensional data, we have compared our method to phylogenetic trees developed from biomarkers. our method appears to give results that are equally or slightly more accurate and more generally attainable since they do not rest on biological information that is often not available.

availability and requirements
project name: enscat. project home page:https://github.com/jlp2duke/enscatoperating systems: windows, os x. programming language: r ≥  <dig> . <dig>  other requirements: aligner . license: gnu, gpl.any restrictions to use by non-academics: none.

endnotes
 <dig> the principle of insufficient reason states that one should assign a uniform value across elements in the absence of reason to do otherwise.

 <dig> in hierarchical clustering a ‘linkage’ function must be defined. a linkage function represents a distance or sum of distances from any given point set to another point set. single linkage means the shortest distance between the two point sets. complete linkage means the longest distance between two point sets. average linkage means the average of all the distances between the points in the two sets. there are other linkage functions that are used but these two are the most common.

 <dig> the commands are given in the manual at https://github.com/jlp2duke/enscat.

abbreviations
dunifuniform distribution

iidindependent and identically distributed

mbcmodel based clustering

pcaprincipal components analysis

viprvirus pathogen database and analysis resource

the authors express their gratitude to the anonymous reviewers for their excellent comments and suggestions. the authors thank the university of nebraska holland computing center for essential computational support.

funding
this research was supported by the national science foundation under award dms- <dig>  the content is solely the responsibility of the authors and does not necessarily represent the official views of the national science foundation.

availability of data and materials
the software, user manual, data, and supporting materials can be downloaded from https://github.com/jlp2duke/enscat.

authors’ contributions
bsc, sa, and jlc carried out the implementation and evaluation of the proposed method, participated in the software design and evaluation and drafted the manuscript. all authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
