BACKGROUND
model checking is a successful method for automatic verification of software and reactive systems  <cit> , which is usually applied to ensure consistency and correctness of designed models. practiced verification methods in most cases are still simple simulation and testing. while simple simulation and testing provide a part of the possible results of a model, model checking can conduct an exhaustive exploration of all possible behaviors  <cit> .

among the features, one merit of using model checking is that it is possible to verify a set of rules defined by users. recently, the size of targeting network becomes enlarged and difficult to check all rules and their combinations by each user, especially, biologist. to solve this, around  <dig>  several attempts were launched to apply model checking approaches to biological pathway validations  <cit> . with the aid of model checking approach, one can obtain answers to questions such as "what is the probability that the gene finally expressed?" and "does this reaction always lead to dna fragmentation?" in  <dig>  fisher et al. proved the importance of model checking approach by inferring the new regulation of inductive and lateral signaling crosstalk of c. elegans and confirming the regulation with biological experiments  <cit> . the approach was applied on a discrete model by using one of the model checking languages named reactive modules  <cit> . however, quantitative properties  are also important in biological processes, such as the concentration of proteins and the reaction rates. thus, it is desirable to deal with both discrete and continuous features in the model . from this fact, the next challenge is to apply the model checking approach to such hybrid models. several hybrid models have been applied to biological pathway modeling, e.g. hybrid automata  <cit> , π-calculus  <cit> , ordinary differential equations   <cit> , and hybrid functional petri nets   <cit>  and its extension   <cit> . among them, hfpne and its related concepts have been accepted as a formal modeling method due to potential advantages of hfpne possessing intuitive graphical representation and capabilities for mathematical analysis  <cit> .

we use hfpne to quantitatively model c. elegans vulval development mechanism, which best meets the features of biological processes. we have been developing an hfpne based software "cell illustrator"  <cit>  for modeling and simulating biological pathways  <cit> . it has been successfully employed to develop and analyze some pathway models for gene regulatory networks, metabolic pathways, and signaling pathways  <cit> . in this paper, cell illustrator is used as a software tool to model and simulate this complicated biological system in c. elegans.

the paper is organized as follows: in methods, we first present an introduction of hfpne and biological background of vpc fate determination mechanism. we demonstrate how to construct vpc fate model by using hfpne afterwards. when determining cell fate from biological points of view, several biological fate determination rules can be considered. we thus employ two major biological fate determination rules – rule i and rule ii – to the vpc fate model. two rules are used to determine the cell fate from two viewpoints – temporal interval and temporal order – of time course expression of cell fate candidates. next, we conduct  <dig>  simulations for each of  <dig> sets of different genotypes which are the combination of four mutants and ac . the simulation procedures such as noise parameters, high-speed simulation engine, and the emulation of the temporal stimulations are also described. finally, we examine the consistency and correctness of the vpc fate model, and evaluate proposed two rules by comparing with three simulation targets consisting of predicted fate patterns obtained from in silico and in vivo experiments. in results and discussion, our simulation results suggest that rule i on the temporal interval is more reasonable than rule ii owing to the high coverage of predicted fate patterns ,  for the lin-15ko; lin-12ko double mutants, the coverage will be considerably augmented, if the number of animal population is increased in the in vivo experiments, and  unmatched fate patterns of lin-15ko and ac-; lin-15ko, still have the possibility to be examined in in vivo experiments by enlarging animal numbers. more insights concerning the hybrid lineage are also suggested and discussed. the final section concludes the paper and addresses the contributions of the work.

methods
modeling biological pathways with hybrid functional petri net with extension 
brief introduction of hfpne: an enhanced petri net for modeling biological interactions
petri net is a network which consists of place, transition, arc, and token. a place can hold tokens as its content. a transition has arcs coming from places and arcs going out from the transition to some places. a transition with these arcs defines a firing rule in terms of the contents of the places where the arcs are attached  <cit> .

due to the limitation of conventional petri net and more requirements in modeling, matsuno et al. have defined hybrid functional petri net  in  <dig>  <cit> . however, when modeling biological pathways, it has been noticed that several useful extensions should be applied for modeling and simulating more complicated biopathway processes  and other biological processes that are not normally treated in biological pathways   <cit> . therefore, nagasaki et al. have proposed a new enhanced petri net architecture hybrid functional petri net with extension  in  <dig>  they have firstly used the new terminology in hfpne to bridge the gap between the researchers of computer science and biology. in other words, the terms of place, transition, arc, and token are named as entity, process, connector, and content respectively.

hfpne can deal with three types of data – discrete, continuous, and generic – and comprises three types of elements – entities, processes, and connectors – whose symbols are illustrated in figure  <dig>  a discrete entity holds a positive integer number of content. a discrete process is the same notion as used in the traditional discrete petri net  <cit> . a continuous entity holds a nonnegative real number as concentration of a substance such as mrna and protein. a continuous process is used to represent a biological reaction such as transcription and translation, at which the reaction speed is assigned as a parameter. a generic entity can hold various kinds of types including object, e.g., the string of nucleotide base sequence. a generic process can deal with any kind of operations  to all types of entities. connectors are classified into three types: process connector, associate connector, and inhibitory connector. process connector connects an entity to a process or vice versa. associate or inhibitory connector represents a condition and is only directed from an entity to a process. each of process connector from an entity, associate connector, and inhibitory connector has a threshold by which the parameter assigned to the process at its head is controlled. a process connector from an entity or an associate connector  can participate in activating  a process at its head, as far as the content of an entity at its tail is over the threshold. for either of associate or inhibitory connectors, no amount is consumed from an entity at its tail. the followed section only gives the mathematic definitions of hfpne. for the detailed formal definition and properties of hfpne, the readers are suggested to refer to  <cit> .

basic definitions of hfpne
for modeling complex biological processes intuitively, we are required to deal with various kinds of biological information, e.g. the density of molecules, the number of molecules, sequences, molecular modifications, binding location, localization of molecules, etc. to cope with this feature in biological system modeling, we introduce types for biological entities and processes.

the set t of types is defined by the following abstract syntax:

  

then, for θ ∈ t, we define the domain d of θ as follows:

 <dig>  d = {true, false}, d = z , d = n , d = r , d = r≥ <dig> , d = s .

 <dig>  d) = d × d.

 <dig>  d = ∪k ≥  <dig> dk.

 <dig>  d) = d × ⋯ × d.

for convenience, we denote d* = ∪θ ∈ td .

let e be a finite set. a type function for e is a mapping τ: e → t. for e ∈ e, τ is called the type of e. a marking of e is a mapping m : e → d* satisfying m ∈ d) for e ∈ e. for e ∈ e, m called the mark of e. we denote by ℳ the set of all markings of e. we can regard ℳ as the set ∏e∈e d).

consider a function f : ℳ → r. for a subset f ⊆ e and an element v ∈ ∏e ∈ f d), let f : ∏e ∈ e-f d) → r be the function obtained from f by restricting the value for f to v, i.e. f  = f for z ∈ ∏e ∈ e-f d). let f be a subset of e such that e ∈ f satisfies d) = r or r≥  <dig>  we say that the function f is continuous for f if f : ∏e ∈ f d) → r is continuous on ∏e ∈ f d) for any v ∈ ∏e ∈ e-f d).

based on the above terminology, we define the notion of hybrid functional petri net with extension . the basic idea of hfpne is two-fold. the first is to introduce types with which we can deal with various data types. the second is to employ functions of marking f to determine the weight, delay, and speed, etc. which control the system behavior. in the following definition, we use different names instead of place, transition, arc, etc. which are conventionally used in petri net theory since biological system modeling requires more intuitive names for representing biological entities and processes.

 we define a hybrid functional petri net with extension  h =  as follows:

 <dig>  e = {e <dig>  ⋯, en} is a non-empty finite set of entities and p = {p <dig>  ⋯, pm} is a non-empty finite set of processes, where we assume e ∩ p = ∅.

 <dig>  h : e ∪ p → {discrete, continuous, generic} is a mapping called the hybrid function. terms "discrete" and "continuous" correspond to those in hybrid petri net  <cit>  and "generic" is a newly introduced name which can be of any type in t. a process p ∈ p with h = discrete  is called a discrete process . an entity e ∈ e with h = discrete  is called a discrete entity .

 <dig>  τ: e → t is a type function for e such that τ = integer+ if e is a discrete entity, and τ = real+ if e is a continuous entity.

 <dig>  c =  consists of subsets ep ⊆ e × p and pe ⊆ p × e. an element in ep ∪ pe is called a connector. each connector has a connector type which is given by a mapping a : ep ∪ pe → {process, associate, inhibitor} called the connector type function which satisfies the conditions:  a = process for c ∈ pe.  all connectors c =  ∈ ep satisfy the conditions in table  <dig> and all connectors c =  ∈ pe satisfy the conditions in table  <dig>  a connector c =  ∈ ep is called a process connector  if a = process . "process connector", "associate connector" and "inhibitory connector" correspond to normal arc, test arc and inhibitory arc, respectively. for a connector c =  ∈ pe, a = process by definition and we also call it a process connector. we say that a connector c =  ∈ ep is discrete  if p is a discrete process . in the same way, we also say that c =  ∈ pe is discrete  if p is a discrete process . let ℳ be the set of all markings of e and let f be the set of continuous entities in e. then we denote  = {f |f : ℳ → n},  = {f |f : ℳ → r≥  <dig> is continuous for f},  = {f |f : ℳ → d*}, and  = {f |f : ℳ → {true, false}}.

then w and u are given as follows:

 w :  is a function called the activity function such that for a connector c ∈ ep  w ∈  if c is discrete,  w ∈  if c is continuous,  w ∈  if c is generic. for a connector , w be used as a function giving the threshold in discrete and continuous cases and the condition in generic case which is required for enabling the process p.

 u :  is a function called the update function which satisfies the following conditions: for a connector c ∈ ep ∪ pe, let c =  ∈ ep or c =  ∈ pe.  u ∈  if c is discrete.  u ∈  if c is continuous.  if c is generic, then u is a function in  such that u is in d) for any marking m ∈ ℳ. for a connector c =  or c = , u is used as a function which will update the mark of e.

 <dig>  d : pdiscrete →  is a mapping called the delay, where pdiscrete is the set of discrete processes in p. for a discrete process p, d: ℳ → r≥ <dig> is called the delay function of p.

 <dig>  α >  <dig> is a real number called the generic time. the generic time is used as the clock for generic processes.

we introduce a parameter t ∈ r≥  <dig> called the time to a hybrid functional petri net with extension h = . given a marking i called the initial marking, we define a marking m called the marking at time t and a marking mr called the reserved marking at time t for t ≥  <dig> in the following way.

by convention, we denote m = m and mr = mr for e ∈ e. we define  by  = m - mr for discrete and continuous entities and  = m for generic entities e.

first, we define m = i, mr =  <dig> for all discrete and continuous entities e. for all generic entities e, mr = null  for any t ≥  <dig>  for t >  <dig>  we define m  and mr in the following way.

for a process p ∈ p at time t, if the following conditions are satisfied, then the process p is said to be enabled at time t. otherwise the process is said to be disabled at time t.

 <dig>  if p is a discrete process, then for all connectors c =  ∈ ep the following conditions hold:

  ≥ w) if a ≠ inhibitor.

  <w) if a = inhibitor.

 <dig>  if p is a continuous process, then for all connectors c =  ∈ ep the following conditions hold:

  ≥ w) if a ≠ inhibitor.

  ≤ w) if a = inhibitor.

 <dig>  if p is a generic process, then for all connectors c =  ∈ ep the following conditions hold:

 w) = true if a ≠ inhibitor.

 w) = false if a = inhibitor.

if a disabled process turns to be enabled at time t, the process is said to be triggered at time t. if an enabled process turns to be disabled or a disabled process turns to be enabled at time t, the process is said to be switched at time t. if a discrete process p is triggered at time t, we say that the discrete process can be fired at time t + d). if a generic process p is triggered at time t, we say that the generic process can be fired at time t + α.

for an entity e ∈ e and time t, let sd be the set of discrete processes which can be fired at time t, and let ud be the set of discrete processes which are triggered at time t. for a discrete process p that can be fired at time t, we denote by q the time when p is triggered. let sc be the set of continuous processes which are enabled at time t. let sg be the set of generic processes which can be fired at time t.

note that we can choose a sufficiently small εt >  <dig> such that in the interval [t - εt, t), neither discrete nor generic process is triggered or can be fired and no continuous process is switched.

also note the following facts:

 <dig>  sc = sc for any t' ∈ [t - εt, t) since no continuous process is switched in the interval [t - εt, t).

 <dig>   is constant on e - econtinuous in the interval [t - εt, t) since neither discrete nor generic process is triggered or can be fired in the interval [t - εt, t), where econtinuous = {e ∈ e |e is continuous}.

 <dig>  for any continuous connector c, u) is continuous on [t - εt, t) since by definition u is continuous for econtinuous and  is constant on e - econtinuous in the interval [t - εt, t).

then m is defined by the following procedure:

 <dig>  tmp ← m, tmpr ← mr

 <dig>  if t = αk for some integer k ≥  <dig> then

   for each generic process p ∈ sg

      tmp' ← tmp

      for each  ∈ ep with a = process

         tmp' ← u

      for each  ∈ pe

         tmp' ← u

      tmp ← tmp'

 <dig>  for each continuous process p ∈ sc

      tmp' ← tmp

      for each  ∈ ep with a = process

         

   for each  ∈ pe

         

      tmp ← tmp'

 <dig>  for each discrete process p ∈ sd

      tmp' ← tmp

      for each  ∈ ep with a = process

         tmp' ← tmp' - u))

      for each  ∈ pe

         tmp' ← tmp' + u))

      tmp ← tmp'

 <dig>  m ← tmp

then mr is defined as follows:

 <dig>  for each entity e with h = discrete or continuous

     

 <dig>  mr ← tmpr.

we call m  the behavior of h starting at the initial marking m = i.           □

in the next section, we will introduce the biological background and explain the modeling method of c. elegans vulval development mechanisms.

biological background and modeling of c. elegans vulval development
biological background of c. elegans vulval development
the c. elegans vulva is an egg-laying organ which is constituted by the descendants of three vpcs. the three vpcs are the members of six initially equivalent vpcs that are consecutively numbered p <dig> p – p <dig> p . in response to extracellular signaling pathways, each vpc has a potential to adopt one of three alternative cell fates  ). six cell fates of pn.p cells comprise a cell fate pattern in the form of . in wild-type worms, p <dig> p – p <dig> p always adopt a same pattern of fates . the sublineage is then generated according to each specified vpc fate. the sublineage is a determined pattern of cell divisions which produces a characteristic set of progeny cell types. figure  <dig> shows the sublineage of respective vpc fate according to the criteria defined by sternberg and horvitz  <cit> .

in wild-type c. elegans, an inductive signal lin- <dig>  an egf-like signal produced by gonad, activates the egfr homolog let- <dig> and a canonical ras/mapk cascade in p <dig> p adopting the 1° fate. in response to the inductive signal, p <dig> p produces lin-12-mediated lateral signals  that counteract the inductive signal from ac in two neighboring vpcs, which causes two vpcs to adopt the 2° fate. in other words, ls induces the expression of negative regulators  genes  <cit> ) against the egf/ras/mapk pathway. ls is encoded by three functionally redundant members of the delta/serrate protein family  and transduced by the lin-12/notch receptor. each lst gene contains a cluster of binding site lbss for lag- <dig> that is a dna binding protein forming a complex with the lin- <dig> intracellular domain to activate the transcription of the target genes  <cit> . furthermore, two functionally redundant synthetic multivulva  genes transcriptionally repress the target gene of lin- <dig> in the hypodermis, i.e., synmuv genes prevent the surrounding hypodermal syncytium hyp <dig> from generating inductive lin- <dig> signals  <cit> . without the activation of either inductive or lateral signaling pathways, p <dig> p, p <dig> p, and p <dig> p adopt the 3° fate  <cit> . thus, the fates of 1°, 2°, and 3° are the productions of the coordination regulated by three signaling pathways, i.e., ac induced signaling pathways, the lateral signaling pathways, and the signaling pathways induced from hyp <dig>  <cit> . figure  <dig> illustrates the biological diagram for the multiple signaling events underlying the vpc fate specification.

modeling vpc fate specification mechanisms with hfpne based on literature
since six vpcs are initially equivalent, we hereafter explain modeling operations by using a single vpc fate model as shown in figure  <dig> whose six copies are embedded in the whole vpc fate model in figure  <dig>  in figure  <dig>   <dig> events directly attending vpc fate specification are assigned to the processes pi ∈ {p <dig>  ⋯, p24} . a set of sink processes  denotes the natural degradation of the substances, whereas a set of source processes  denotes the translation reactions of initial entities. the left  <dig> processes {p <dig>  p <dig>  ⋯, p37} are generic processes, which contribute to play the roles of extracellular stimuli  and the cell fate specification . variable mx ∈ {m <dig>  ⋯, m32} denotes the concentration of corresponding substance .

the modeling operation starts from the source process  denoting an activity that the substance takes part in the reaction. here we only explain the case of ras/mapk inductive signaling pathway: lin- <dig> ligands and corresponding receptors let- <dig> are assigned to the entities  connected from the source processes , respectively. next, the ligand-receptor binding reaction where two entities  merge into an entity m <dig> denoting ligand-receptor complex is represented via the process p <dig>  since two ligand-receptor complexes shape a dimer, the process p <dig> is used to represent the homodimerization connecting from the input entity m <dig> as well as connecting to the output entity m <dig> of lin-3/let- <dig> dimer. note that the stoichiometry of the input connector of p <dig> is set to  <dig> due to the dimerization. the dimer is autophosphorylated subsequently which is modeled by using a phosphorylation process p <dig> connecting from and to the entities of m <dig> and m <dig>  respectively. succedent reactions for the products of the canonical cascades: active sem- <dig> , let- <dig> , and mpk- <dig>  are modeled in the same way using the processes of activation . activated mpk- <dig> then moves from the cytoplasm to the nucleus. this movement is modeled as a translocation reaction by p <dig> 

based on the understanding of the literature and the hypothesis reported in  <cit> , we first model downstream regulation of ras/mapk cascades and succedent intracellular reactions induced by lin-12/notch signaling according to newly published literature. the details of the new biological facts are described in the caption of figure  <dig>  the new facts concerning the mechanisms of the downstream regulation of ras/mapk cascades are modeled as follows: the phosphorylation by m <dig> further disrupts the formation of lin-31/lin- <dig> complex  which applies the process of phosphorylation . the processes p <dig> and p <dig> are used to model the transcription of target genes and the translation of mrna  regulated by lin- <dig>  that acts as a transcriptional activator promoting the 1° fate as a fate candidate .

two biological fate determination rules applied to vpc fate model
when determining cell fates from biological points of view, several biological fate determination rules can be taken into account. one major biological fate determination rule  based on temporal order has been applied to a qualitative model by fisher et al.  <cit> . the approach is based on a discrete model. however, the other rules such as temporal interval based one  cannot be handled in the same discrete model. this is because the model cannot deal with the quantitative properties  that are also important to biological processes, such as the concentration of proteins and reaction rates. with inspiring by this limitation of qualitative models, we employ these two major biological fate determination rules – rule i and rule ii – to vpc fate model. the model has both discrete and continuous features.

two fate determination rules are as follows:  for rule i, the fate will be determined if it satisfies the conditions that  the fate can sustain the behaviors at a certain over-threshold state within a given length of time, and  the time epoch of the certain over-threshold in  is earlier than the other fate candidate. figure  <dig> shows a schematized diagram of a simulation result. in figure  <dig>  the cell fate is determined to the 2° fate by using rule i. the time course expression of 1° is maintained at the over-threshold state during interval_ <dig>  and that of 2° is maintained at the over-threshold state during interval_ <dig>  although the time course expression of 1° has two over-threshold states, only the second interval interval_ <dig> is longer than the given interval. thus, the time epoch labeled with "τi of rule i" is regarded as the initial time epoch inducing the second over-threshold state. the vpc adopts the 2° fate due to τj <"τi of rule i".

 for rule ii, the cell fate will be priorly adopted according to the temporal sequence of the first time epoch inducing over-threshold state. in figure  <dig>  we can observe that the first time epoch  inducing over-threshold state of 1° is earlier than 2°, and therefore the 1° fate will be adopted by rule ii no matter how long the over-threshold state of 1° will continue. preliminary notations and mathematical definitions of two rules are given in the additional file  <dig> 

in figure  <dig>  two dashed-line ellipses illustrate the topological connections representing rule i  and rule ii  which jointly use the values of m <dig> and m <dig> as the inputs for the fate specification. variables m <dig>  and m <dig>  are regarded as two cell fate candidates for determining final vpc fate. two rules are implemented with a script-based language pnuts in cell illustrator  <cit> . the detailed properties and descriptions of the entities concerning the fate specification are summarized in table  <dig>  the activity functions of related processes and update functions of the connectors are summarized in tables  <dig> and  <dig> 

simultime+getsamplinginterval))
> simultime+getsamplinginterval &&
> simultime + getsamplinginterval) &&
rule i:
else if 
else if 
else if 
else if 
else if  {return 1;}
else if 
else if  {return 1;}
else if 
rule ii:
{return 1;} else if 
{return 3;} else if
further, several variables are designed to reserve alterable values according to different genotypes . figure  <dig> shows a genotype configuration panel and a structure of auto-switching mechanism. the genotype configuration panel includes an ac and four mutant variables. ac, lin <dig>  vul and lst can toggle between true and false. lin <dig> has three string-type values, i.e., "wt", "ko", "gf", indicating three genetic conditions of wild, knockout and overexpression of lin- <dig> 

else
else if ) {return 0;}
it is obvious that the combination number is  <dig> as listed in table  <dig>  forty-eight genotypes have the features as follows:



 <cit>   <cit>   <cit> 
 <cit>   <cit>   <cit> 
 <cit>   <cit>   <cit> 
 <cit>   <cit>   <cit> 
 <cit>   <cit>   <cit> 
 <cit>   <cit>   <cit> 
 for  <dig> genotypes whose rowid are indicated by boldface and labeled with square brackets, the fate patterns of each genotype have the in vivo experimental data reported in  <cit>  " in tables  <dig> and 9).

 <cit> 
 <cit>   <cit> 
 <cit>   <cit> 
 <cit>   <cit> 
 <cit>   <cit> 
 <cit>   <cit> 
 <cit>   <cit> 
 <cit>   <cit> 
 <cit>   <cit> 
 for eight genotypes whose rowid are indicated with the superscript , the fate patterns of each genotype have been confirmed by model checking approach in the discrete model in  <cit> , which are also consistent with the biological facts  <cit> .

 for the left  <dig> genotypes, the patterns of each genotype have only been verified in  <cit> , because these genotypes are usually experimentally intractable. the reason is that, the population of double, triple or quadruple mutants might be technically difficult to be generated  <cit> .

 for four genotypes  are called unstable patterns, because genetic condition will lead to an unstable fate pattern as shown in table  <dig> 

in the next subsection, we will execute simulation to investigate the characteristics of predicted fate patterns of  <dig> genotypes, in particular, four genotypes leading to the unstable fate pattern, and to evaluate two rules employed to the vpc fate model by comparing with three simulation targets  as shown in figure  <dig> 

simulation-based model checking approach of determining vpc specification by using cell illustrator
we first demonstrate how to assign parameters to the vpc fate model. then, we consider three simulation targets to investigate the properties of fate patterns, and to evaluate two proposed rules. finally, a large number of simulations are performed with the use of "high-speed simulation module" of cell illustrator. the simulation results are given in the form of fitting score and variation frequency of each pattern of  <dig> genotypes. the fitting score is a percentage of the total numbers of predicted patterns appeared in each genotype); the variation frequency is the number of each appearing fate pattern in the respective genotype during the simulation experiments.

parameter assignment
the vpc fate model in figure  <dig> reflects the interrelation of each substance. all parameters for the reaction rates of processes and the steady state of the substance are tuned manually with repeating simulation until concentration behaviors of proteins correspond to the biological facts. note that it is hard to decide optimal values of these parameters, since data from biological experiments are very insufficient to determine them.

we thus simplify the kinetic parameters to the same speeds mx* <dig>  with noise for the process pi∈ {p <dig>  p <dig>  ⋯, p24} ; the speed of the source process  is assigned to  <dig>  denoting the production rate of substance. when constructing the quantitative vpc fate model, threshold values  of each reaction are assigned as real number, and the parameters for the steady states of the substances induced by the stimulations from anchor cell and hyp <dig> are carefully tuned by hand. lots of trial and error operations have been performed repeatedly until appropriate parameters for simulation are determined. the vpc fate model in figure  <dig> is available from  <cit> , which can be executed on cell illustrator  <cit>  or java web start software cell illustrator online  <dig>    <cit> . all the parameters have been saved in the csv format, which are also available online at the same website  <cit> .

three simulation targets for validation

model checking is powerful technique for automatically verifying the system requirements. the essential idea of model checking is that, with an exhaustive exploring of all reachable states and transitions of a modeled system, system properties  are examined whether the properties are satisfied or not. a model checker  accepts the modeled system and the specification as its inputs. the checker then outputs yes if the model satisfies the given specification and generates a counterexample otherwise. the counterexample indicates why the model does not satisfy the given specification. by repeating operations of revising the errors examined by the counterexamples, the modeled system can be refined to satisfy enough system specifications  <cit> .

fisher et al. have firstly applied the model checking approach for validating biological systems of c. elegans with biological experiments  <cit> . they have constructed a discrete and state-based mechanistic model underlying the inductive and lateral signaling crosstalk by using the language of reactive modules  <cit>  and mocha. further, they have confirmed that the model can reproduce reported biological behavior observed in  <dig> genotypes with mocha. however, their method has the following weaknesses that are desired to be solved in this paper:

 the details of predicted fate patterns of four unstable patterns  are not explicitly given. that is, only summarized patterns are given. however, it is important to reveal if all the expansions of predicted  patterns will appear even though the predicted patterns satisfy the given specification. for example, in the case of ac-; lin-12gf; lin-15ko double mutants , the predicted pattern is  <cit>  in  <cit> . it is obvious that the pattern includes totally  <dig> =  <dig> possible fate patterns, but it is still ambiguous if all these  <dig> patterns will be adopted in in vivo experiments.

 the distribution and variation of individual behavior of predicted fate patterns are not sufficient to understand the features of the fate patterns. in other words, it is necessary to clarify the occurrence probability  of each predicted pattern, which is considered to facilitate obtaining an overall distribution of the predicted fate patterns, especially, the four unstable patterns.

to improve the first weakness, we introduce a new procedure generatenecessaryfatepatterns by repeating the use of "counterexample" to obtain necessary fate patterns on mocha.

«procedure generatenecessaryfatepatterns»

: a state pattern of six vpc fates; * is one of three alternative fates ; i.e.,  <cit>  denotes a fate pattern with 1° for all vpcs. in total, there are  <dig> fate patterns.

rs: a set to store intermediate fate patterns required for a genotype.

verify: a mocha procedure to verify if the predication holds for the model. the input is the rs. if there is no counterexample for the rs, ϕ will be returned. if the counterexample is generated for the rs, one of the counterexamples will be returned at random.

the new procedure to derive whole fate patterns for a genotype is as follows:  <dig>  rs ← { <cit> }

 <dig>    do c ← verify

 <dig>       rs ← rs ∪ {c}

 <dig>    while c ≠ ϕ

 <dig>  c ← verify

 <dig>  if c = ϕ

 <dig>     return rs\{ <cit> }

 <dig>  else

 <dig>     return rs

in the above procedure, step  <dig> is an initialization of rs. steps  <dig> –  <dig> are the main part to obtain the fate patterns by repeating the use of "counterexample". steps  <dig> –  <dig> are designed to check if the initial fate pattern is necessary or not. by executing the procedure, the results of required fate patterns of  <dig> genotypes are summarized in the fourth column of table  <dig>  and the first and fourth columns of table  <dig>  the predicted fate patterns of each genotype derived by using our procedure are collectively called fate patterns  . it is clear that the number of predicted fate patterns investigated by our method is far smaller than the one summarized by  <cit>  . the source code used to obtain ja with mocha can be found at the csml website  <cit> .


sternberg and horvitz have summarized the vpc fate patterns of  <dig> genotypes by the observation of anatomy and the cell lineages in living c. elegans using nomarski differential interference contrast optics . we list the fate patterns of these  <dig> genotypes .


in  <cit> , we have noticed that some biological observations of cell lineages have not received enough attentions. these observations are likely difficult to be determined accurately according to the two criteria defined by sternberg and horvitz  <cit> . the reason is that some lineages were not interpretable as 1° or 2° by two criteria, i.e., observed lineages may result in possible inaccuracy in the observations which includes mis-scoring adherence to ventral cuticle owing to deformations in cuticle as animals bend, as well as variations in division axes  <cit> . in some cases, lineages are hybrid, e.g.,  in which  is the production of the characteristics of the 3° fate, and  can be the lineage of either the 1° or 2° fate. sternberg and horvitz have suggested that hybrid sublineage is a result of imprecise decision, and the specification is allowed to have a number of outcomes. when a system comes close to a certain threshold, it can be considered that partial functions are involved to express the results in the formation of hybrid lineage  <cit> .

inspired by the observation of hybrid lineage, it seems reasonable to put those uninterpretable experimental data together with the fate patterns of  <cit>   as the simulation targets for validation. by investigating the experimental results of the vulval cell lineage given in  <cit> , we explain the cell fate of such an uninterpretable lineage as three plausible fate candidates: 1°, 2°, and 3° fates. thus, the vpc fate pattern including the uninterpretable lineage is extended to three predicted fate patterns ). for example, in the case of vulko , we observed such a cell lineage:       ], in which  is a cell lineage of 3° and  is a hybrid lineage and is interpretable by neither two criteria defined in  <cit>  nor the method in  <cit> . this cell lineage is determined by the fate pattern . we thus suppose to interpret this vpc fate pattern to three fate pattern extensions of  <cit> ,  <cit> , and  <cit> , i.e., extend "?"  to the 1°, 2°, and 3° fate. all the possible cell fate patterns including extended fate patterns are shown in the column fate patterns  of tables  <dig> and  <dig>  i.e., sta is the combination of st and the pattern extensions.

simulation procedures
here, we discuss several considerations of simulation environment adjustment in order to validate the vpc fate model and evaluate two rules.

when emulating cell stimulations in in silico experiments, it is important to adjust the cell to a constant condition before the stimulation. this condition is usually called a steady state. for example, simulation time periods of  <dig>  and  <dig>  are reserved representing lin- <dig> stimulations from ac and hyp <dig> respectively in the vpc fate model . this is because the concentration of the receptor let- <dig> will be kept at a steady state after  <dig> . the time interval of the stimulations between ac and hyp <dig> is designed to investigate respective variation of fate patterns.

meanwhile, the following is taken into account to emulate real environment as well as assessing the robustness of the model:

 the notion of log-normal distribution is introduced. for each process, log-normal distribution is applied as a system noise. each standard deviation is given in the third column in table  <dig>  where lsmass denotes the function of log-normal distribution, arg <dig> denotes normal reaction speed without noise, and arg <dig> is the standard deviation denoting the strength of the noise.

 in the case of lin-15ko mutant, a little temporal difference between the stimulations of lin- <dig> emanating from hyp <dig> to each pn.p is designed to investigate the influence of ectopic stimuli.

 the key thresholds involved in ras/mapk and lin-12/notch signaling pathways are assigned to the variables, which depend on the function of rand() that fluctuates randomly between  <dig>  and  <dig>  . here, uniform random number generated by mersenne twister random number generator is used.

we have tried  <dig>   <dig>  and  <dig> -run simulation experiments. for all cases, the results clearly show that rule i can generate high fitting score than rule ii. among them, since  <dig> -run simulation can present the most precise behaviors of each fate pattern, in this paper we have concentrated on the  <dig> -run simulation results to investigate the fitting score and variation frequency of  <dig> genotypes on the vpc fate model. the simulation experiments are carried out on the workstation of intel xeon x <dig>  processors with  <dig> gbytes of memory. the machine has two cpus which has four cores per cpu . the theoretical computational performance is  <dig> gflops. all simulations were run on java  <dig>  environment. the vpc fate model will take nearly  <dig>  for one simulation on cell illustrator with a script-based simulation engine. it provides detailed visualization of system behaviors. on the other hand, cell illustrator is equipped with a "high-speed simulation module" specialized in producing simulation results only. it increases the simulation speed from  <dig> to  <dig> times than the script-based one. hence, the  <dig>  simulations can be conducted on a day on average, and the  <dig> sets can be executed on  <dig> days on a single core of a processor. we carried out all simulations within  <dig> days on our computing environment. we use the same model, the same procedures and also the same parameters to evaluate the fate patterns of all  <dig> genotypes with the three simulation targets .

RESULTS
we now exhibit and discuss our simulation results on the fitting score of predicted fate patterns and the variation frequency of each appearing fate pattern, especially focusing on the four unstable patterns.

using the method addressed in the previous sections, we performed the simulation of the vpc fate model. tables  <dig>   <dig>   <dig>   <dig>   <dig> and additional file  <dig> exhibit the simulation results of  <dig> genotypes. figures  <dig>   <dig>   <dig> and  <dig> show the graphs of four unstable patterns , which depict the variation frequency of each predicted pattern and the variation distribution based on simulation results. for example, in figure  <dig>  the fate pattern  <cit>  predominantly appeared in the matched results of ja by using rule i and rule ii, while the pattern is regarded as a false pattern because it is not observed in st and sta.

from the variation distribution as shown in figure  <dig>   <cit>  is the fate pattern that can be most easily observed in in vivo experiments because of the high appearance. in contrast,  <cit>  is likely difficult to be monitored due to the relative low variation frequency. each graph comprises three parts of comparison results obtained from ja, st and sta , , and  in figure 9) by using both rule i and rule ii. in each part, the variation frequency results of matched patterns are given on the left side while that of unmatched patterns are exhibited on the right side. figures  <dig>   <dig> and  <dig> are built up in the same way.

from the simulation results, we draw the following conclusions:

 rule i gives more genotypes  with high fitting scores nearly 100% than rule ii to cover predicted patterns of three simulation targets. in more details,

 for  <dig> genotypes , each genotype can generate the fitting score nearly 95%, in which the fitting scores of  <dig> genotypes are all 100%  by using both rule i and rule ii. in other words, our model shows good robustness, and can produce stable cell fate patterns even we intentionally add the noise to capture the behaviors of the model fluctuations.

 for the left three genotypes of four unstable fate patterns, lin-15ko mutant  produces all  <dig> % for ja, st and sta by using rule i, as opposed to  <dig> %  and  <dig> %  by using rule ii; ac-; lin-15ko mutant  produces high coverage of  <dig> %  and  <dig> % ; and ac-; lin-12gf; lin-15ko double mutants  generates all 100% with both rules for three simulation targets.

 for lin-15; lin-12ko double mutants , the fitting scores in the results of st and sta drop to a quite low value below 15% by using either rule i or rule ii. this is because p <dig> p is allowed to adopt the 1° fate in ja , but is not allowed in st and sta . this fact has also been confirmed in the preceding study  <cit>  that in silico model can faithfully produce the 1° fate for p <dig> p. from these observations, it can be considered that p <dig> p has a greater possibility to adopt the 1° fate, if the number of animals for the in vivo experiments can be increased to  <dig> . in this way, the fitting score can be exactly increased to exceed more than 81% from the present 15%.

 for lin-15ko  and ac-;lin-15ko  genotypes, we can see that nearly 10% patterns in ja, st and sta are not matched . these patterns still have the possibility to be examined in in vivo experiments by means of enlarging animal population.

 since the experiment data about hybrid lineages has not been taken into account as we have pointed out, we interpret these uninterpretable lineages to three fate pattern extensions as listed in the column of sta which includes more extensive possible fate patterns than st. in the simulation results, the results of lin-12ko mutant  interest us . we can find that the fate pattern  <cit>  appeared in our simulation results of sta, which is the extended fate pattern from the hybrid lineage data exhibited in  <cit> . this hybrid lineage gives new insights on the imprecise fate decision and the fate specification mechanisms when a system comes close to a certain threshold.

taking these observations together, we conclude that rule i relying on the temporal interval can be considered more reasonable and proper in evaluating the vpc fate specification than rule ii.

CONCLUSIONS
the contribution of this paper is a novel method of modeling and simulating biological systems with the use of model checking approach on the hybrid functional petri net with extension. a quantitative hfpne model for the vulval development is constructed based on the literature. then we employ two major biological fate determination rules to the quantitative model. these two rules are investigated by applying model checking approach in a quantitative manner. three simulation targets of this model are considered: the first one is the fate patterns obtained by improving the qualitative method of fisher et al.  <cit> ; the second target is the fate patterns summarized by sternberg and horvitz  <cit> ; and the last one is derived from the biological experiments in  <cit>  including the hybrid lineage data. we have performed  <dig>  simulations on the quantitative hfpne model by using cell illustrator. we have examined the consistency and the correctness of the model, and evaluated the two rules of vpc fate specification. we consider that this computational experiment and the biological evaluation could not be easily put into practice without the hfpne modeling method and the functions of cell illustrator, especially, the "high-speed simulation module". finally, in silico simulation results have been given in the form of the fitting score and the variation frequency of each pattern. we have discussed the results and summarized several plausible explanations.

appendix: abbreviations
ac: ; ac-: ; egfr: ; hfpne: ; ja: ; lbs: ; lst: ; mapk: ; st: ; sta: ; vpc:; synmuv: ;

authors' contributions
the basic idea was considered by mn and further developed by cl and mn. cl created biological diagram of multiple signaling pathways of c. elegans depicting vpc fate specification in figure  <dig>  cl and ku constructed the original hfpne model in figures  <dig> and  <dig>  the whole hfpne model was refined by cl and mn. cl and mn evaluated the results of simulation and validated the performance of hfpne model. sm supervised the whole study. the final manuscript was read and approved by all authors.

supplementary material
additional file 1
preliminary notations and mathematical definitions of rule i and rule ii. the data provide the details of preliminary notations and mathematical definitions of two rules to determine the cell fate.

click here for file

 additional file 2
simulation results of  <dig> genotypes. the data give the  <dig>  simulation results without unstable fate patterns. yellowish region means that corresponding genotype possesses experimental evidences exhibited in  <cit> . bright yellow cells give the fitting scores of predicted fate patterns.

click here for file

 acknowledgements
we are grateful to the anonymous reviewers for their valuable hints and suggestions. this work was supported by kakenhi  on priority areas "systems genomics" from the ministry of education, culture, sports, science and technology of japan.
