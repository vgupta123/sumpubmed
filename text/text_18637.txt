BACKGROUND
rna interference -based high-throughput screening has become an increasingly important and popular approach to dissect biological pathways through reverse genetics  <cit> . rnai is a conserved biological phenomenon through which gene expression can be silenced by the endogenous cellular machinery at the level of individual transcripts, with specificity conferred by the sequence of double-stranded rna  or small-interfering rna   <cit> .

following completion of genome sequencing of the human and model organism, it became possible to systematically screen at the genome level, and this has indeed been applied to investigate numerous biological questions and cell-based processes, with novel insights revealed for apoptosis, virus infection, membrane trafficking, and the cell  <cit> . to date, two main screening modalities have been developed: pooled and arrayed screens. in arrayed screens, each gene is targeted individually by at least one reagent. given that the human genome contains approximately  <dig>  protein-coding genes, a genome-wide screen generates a relatively large dataset. the analysis of these datasets has drawn inspiration from small molecule screening in terms of data quality control, normalization approaches and the definition of significance threshold; i.e. hit identification. rnai screening results are also gene-centric; therefore, hits can be linked to prior biological pathway or protein network information.

the currently available software applications to analyze rnai screen data, however, usually lack the ability to visualize associated gene information in a dynamic fashion . here, we introduce screensifter, an open source desktop application for the convenient implementation of sequential, user-friendly and exhaustive analyses of rnai screening results. biologists with no extensive bioinformatics knowledge can upload their screen data in a simple .csv format, and have access to multiple screen analysis tools, including quality control, normalization and hit selection, as well as the ability to visualize the distribution of hit genes and graphically compare replicates. this application also facilitates comparisons between different screens. screensifter has visualization tools to plot subsets of screen data  and provides gene set enrichment analysis  and protein-protein interaction  information directly from and/or on hyperlinked plots.

implementation
screensifter has been developed using python, wxpython and mysql/sqlite <dig>  the python source code and executable for windows are available on sourceforge. user guide and examples are available at http://www.screensifter.com.

screensifter uses sqlite <dig> with a custom-designed, normalized relational database modeled to store all screen data and data processing. data for project, screen, and screen data is stored in separate tables that are connected in the relational database model; this organization can cater for future growth without breaking the database design and allows rapid retrieval of information. a screen data table in screensifter contains a unique record for a screen, which stores the values of individual wells of specific plates. it also has project id, screen id, and screen data table id. when a screen data table of x number of records  is uploaded, deleted, or derived, the screen data table grows or reduces for x number of records. project, screen and other tables inside the database are then updated accordingly.

screensifter has several functions for normalization, visualization, filtering, hit identification, and biological data mining, many of which are relatively specific to rnai screening. for example, four different normalization methods are provided: log, z score, b score and by control normalizations  <cit> . this allows users to select the best-suited method for their own data and thus minimize the impact that systematic errors may have on hit selection.

in sample-based normalization, the z score is calculated for each record using the following formula:

 z=xi−x¯/σxi 

where xi is the value of the well i, x¯ is average of the values of all the wells per plate and σxi is the standard deviation of values of the wells per plate.

the control normalized score is calculated using the following formula:

 controlnormalizedscore=xi−x¯px¯p−x¯n 

where xi is the value of well i, x¯p is the average of the values of wells of the user-specified positive controls per plate and x¯n is the average of the values of wells of user-specified negative controls per plate. if the user selects only the positive or only the negative control, the formula reduces to fold change e.g.

 foldchange=xi−x¯px¯porfoldchange=xi−x¯nx¯n 

b score is calculated for each record using the following formula:

 bscore=rijpmadp 

where 

 rijp=xijp−fxijp=xijp−xp¯−medianri−mediancj 

xijp is the measured value in the well in row i, column j and plate p, and f is the value fitted by two-way median polish that estimates systematic measurement offsets for each row i. median  is the median of row i and median is the median of the column j.

there are multiple functions for interactive visualization of biological data; i.e., gene set enrichment analysis using the go database and protein-protein interaction network.

gsea is calculated using fisher’s exact test on a 2× <dig> contingency table for each go category:

it returns the odds ratio and p-value. based on the user-selected p-value threshold, go categories are plotted as bar charts upon rectangular selection of genes on the plot. the genes selected form the basis of this contingency table . these genes are searched in the go database and for each go category, and the p-value is calculated using fisher’s exact test. in table  <dig>  x is the number of genes selected in the rectangular area on the plot; gc is the total number of user-selected genes in a particular go category; gc is the total number of genes in a particular go category; and  <dig>  is the total number of genes in the genome.

the ppi function is available for a single-clicked gene or for a list of genes chosen by rectangular selection on the plot. if a point is clicked on the dense cloud of points, screensifter first captures the nearest point based on the xy coordinates of the points. it then makes a pair of points with each other point on the plot, and each pair of points  is searched in the ppi database. if a pair of genes is found in the database, then a line is drawn to connect them, indicating a ppi . similarly, for rectangular selection of genes, all possible combinations of two genes in the list are searched in the database and the ppis found are highlighted by connecting lines on the plot. additionally, if cytoscape is open and a connection to it is enabled within screensifter through the cytoscape-rpc plugin, while creating interactions on the plot, screensifter also creates a network of the same interacting points in cytoscape.

the function called multi reagent analysis lets the user analyze genes targeted by multiple rnai reagents in different wells. when a user applies this function on any data column, screensifter makes a sorted plot of this data column. when the user then sets a threshold on this plot interactively, all the rnai reagents  that pass the threshold are mapped to their target genes. for each of these mapped genes, the number of reagents passing the threshold is counted, and the genes are plotted in descending order. this method provides a quick, objective way of validating potential hit genes, and is a common practice in rnai screening to validate genes of interest  <cit> .

screensifter also provides z’ factor calculation through the quick analysis function; this provides a good indication of the separation of positive and negative controls in the screen. it is calculated using the following formula:

 z’factor=1−3σp−σnμp−μn 

where σp is the standard deviation of the positive controls, σn is the standard deviation of the negative controls, μp is the mean of the positive controls and μn is the mean of the negative controls.

screensifter uses a local database for go and ppi analysis. the database can be updated automatically by connecting to ncbi from screensifter through a single click. during updating, important fields are indexed for faster retrieval.

RESULTS
in screensifter, data is organized first by project, which can house multiple screens and is usually defined by a specific biological question. each screen is defined as a specific screening experiment, corresponding to specific physical plates and including replicates. a primary data file is uploaded for each screen and forms a primary data table; subsequently derived data tables can be saved under the same screen. projects, screens, and screen tables are presented hierarchically in screensifter .

in addition to data tables, each project, screen, and screen table can be linked to descriptive metadata. the project description would specify project name, the biological question being addressed and the general experimental strategy used; an image file summarizing the project can also be uploaded. the screen description can contain specific information about the assay and reagents used, including sirna library, species, and cell line. the screen table description specifies its name in screensifter and the uploaded file name, its creation date, its nature  and, if derived, its parent table as well as a log of its derivation.

in addition to the data uploaded by users, screensifter stores gene ontology and protein-protein interaction data retrieved from the ncbi websites on all human and mouse protein coding genes .

the graphical user interface  is composed of four panels: the explorer panel allows navigation of the data structure; the data panel displays all metadata and data from data tables; the plot panel houses up to four plots simultaneously and includes a plot control panel that allows customization; and the log panel displays the actions executed in screensifter, as well as any results associated with the actions .

the application contains several rnai screen specific workflows, such as a quality control  and normalization module; a threshold/hit definition module; a multi reagent analysis module for the comparison of multiple sirnas targeting the same gene and the elimination of off-target effects; and finally gene ontology and protein-protein interaction modules for biological data mining .

demonstration datasets
we highlight some analytical capabilities of screensifter using datasets from genome-wide rnai screens on the intracellular traffic of ribosomal-inactivating toxins in mammalian cells  <cit> . the pseudomonas exotoxin a  and ricin proteins are unable to cross the plasma membrane. to reach their cytosolic targets, these toxins hijack the cells’ retrograde membrane traffic processes and, after endocytosis, move from endosomes to the golgi complex and then to the endoplasmic reticulum  where they can translocate to the cytosol and inhibit their ribosomal targets, causing inhibition of protein translation and eventually cell death  <cit> .

the aim of these screens was to identify and compare human host genes required for pe and ricin intoxication. to measure the capacity of either pe or ricin toxin to reach their cytosolic target, protein synthesis was measured using a short half-life firefly luciferase . hela cells stably expressing the luciferase were treated with sirnas from a library consisting of  <dig>  sirnas. after  <dig> days, either pe or ricin toxin were applied to the cells for  <dig> hours, and luciferase levels measured using luminescence. luciferase expression thus served as a measure of the integrity of the retrograde pathway and knockdown of an important gene would result in a higher luminescence reading than that in the wild type cells .

the library  was arrayed in 384-well microplates, in which each well contained a pool of four different sirna sequences targeting one unique gene and the two toxin screens were run in duplicate. three positive controls consisted of sirna targeting membrane trafficking regulators: the snare syntaxin <dig> , the clathrin heavy chain  and the kdel-receptor  <dig> . other controls were an sirna targeting the polo-like kinase  <dig> , which induces extensive cell death and the green fluorescence protein  . further details of the screening procedure are described elsewhere  <cit> . the data used here is provided in the downloadable screensifter package .

to demonstrate the utility of screensifter in handling more complicated data such as those from high-content screens, we also include in the screensifter package a dataset from a high-content screen of golgi morphology  <cit> . a tutorial demonstrating manipulation of this dataset is included in the software  and on our website. it guides the user through filtering of multiple features of high-content screen data to identify hits, compiling a table of hits based on multiple features, and visualizing the hits using the hierarchical clustering plot function in screensifter.

data upload and export capabilities
a primary .csv data file can be uploaded for each screen and will form a primary data table. this primary data table must contain the following fields: plate number, well, well type, gene symbol, and entrez gene id. for some analyses, such as multi reagent analysis, a reagent id entry is also required and up to  <dig> data columns can be included. table columns can be mathematically manipulated or analyzed by clicking on the respective column header. data tables can be exported or saved as a new derived table by right-clicking on the top-left corner. undo/redo options are also available in this menu.

with the example dataset, we uploaded one .csv file for each toxin screen, each containing raw luminescence signals from the two replicates. derived tables were then created from these, containing normalized and averaged data. guidance on how to upload data and save screen information is available in the help file of the software.

screen quality control and normalization
the raw data can first be assessed using the “quick analysis” module, which automatically generates scatter and box plots , as well as a z’ factor for all pairwise combinations of positive and negative controls. the z’ factor is a common metric used to evaluate the quality of an assay with given positive and negative controls  <cit> .

the quick analysis scatter plot highlights the distribution of controls among all screening wells. in our example dataset, this operation revealed a good separation between the stx <dig> positive control and the gfp negative control . the separation is also readily observable in the box plot arranged by well types .

to assess the reproducibility of the screens, the raw relative luminescence readouts of both replicates can be plotted, revealing a high pearson correlation coefficient of  <dig>  for both toxins . this coefficient and associated t test statistics can be found in the log panel. in the plot panel, the data used for each plot is indicated on the plot by the title, which specifies the screen table used, and the axes labels, which correspond to the column titles.

the scatter plot also revealed significant variation among the control values across all plates of the screen . this common phenomenon in large-scale screens requires data normalization to be applied. visualization of whole plate-based z-scores revealed significant fluctuation in stx <dig> z-score values across the different plates . this was found to be due to an inordinate number of outliers in some plates deriving from the non-random organization of the sirna library. the use of a control-based normalization instead resolved this issue  and from this point on, analyses were done using control -normalized values.

hit identification
to determine a threshold for hit identification, screensifter allows different ways to determine a cut-off using the select cut-off module. the module offers the possibility to use the average value and standard deviation of the samples or any controls to define a cut-off . a simple cut-off can also be selected by clicking on a point in the ordered plot, or by directly entering a cut-off value. this approach is commonly used by screeners and is easy to implement. the module allows the user to test different combinations and to rapidly visualize hit lists.

the visualize with current cut-off function generates a scatter plot of the data with the threshold, as well as a list of genes above the cut-off . the finalize threshold function then generates a new column in the screen table, scoring each gene as a hit  or not . in both the pe and ricin screens, the cut-offs used were values ≥60% of the average stx <dig> control. this also approximates the average value for the cltc intermediate positive control . after setting a threshold for each toxin and removing genes with any go annotations containing the term “proteasome” , over  <dig> genes were identified to be potential significant regulators of either toxin’s trafficking.

hit validation by multi reagent analysis
to test a subset of genes for the possibility of off-target effects, the top  <dig> hits in each screen were selected and re-tested using four individual sirnas instead of a pool. because individual sirnas tend to be less potent than pools, validated individual sirnas were defined as those having a threshold signal of 30% of that of the stx <dig> pool, and validated genes as those having at least two validated individual sirnas. the multi reagent analysis module was applied on the validation datasets , with a  <dig>  cut-off, to determine the number of validated genes. the module generated a plot of genes ranked according to the number of validated individual sirnas , as well as a list of the number and identity of validated sirnas for each gene. the finalize threshold function created new columns in the data table: the first identifying each sirna as validated  or not , and the second specifying the number of validated sirnas for that gene.

biological data mining
the toxins we tested must undergo membrane traffic before they can intoxicate cells. thus, to test if this process is relevant in our hit list, we used the search function in the data table by searching the term “membrane transport” in “go bp ”, which highlighted the results in the data table and the current plot . we also mined the subcellular localizations of genes using more specific search terms such as “golgi”, “er” or “vesicle” in “go cc ” . by checking the label option in the plot control panel, genes could be identified directly on the scatter plot .

we also performed a gene set enrichment analysis  of the validated hit genes using a threshold p value of  <dig> . this showed, among other results, a statistically significant enrichment of genes with an association with the golgi apparatus  , consistent with the requirement of the golgi apparatus for pe intracellular trafficking.

to assess known relationships between genes of interest, ppis between genes can be identified by checking the “find ppi” option for clicking points, or checking the “find ppi in selected area” option for rectangular selections in the plot control panel. each ppi and its associated information are listed in the log panel. we performed a ppi search using rectangular selection of all genes with “membrane” go annotation to reveal the interconnectedness of these genes, with  <dig> unique ppis identified among  <dig> unique hit genes .

screen comparisons
to compare the results for the two toxins, the average control-normalized ricin luciferase signal was plotted against that of pe . the controls were highlighted on the plot using the “highlight controls” function in the plot control panel. the plot revealed a significant divergence between the two toxins, while highlighting the remarkably consistent similar requirement for stx <dig> .

the toxin specificity of a gene was thereafter defined as a 2-fold difference between the two toxins. toxin-specific gene lists were generated by using the filter and add/subtract/multiply/divide column functions and saving the results in separate data tables corresponding to toxin specificities. this demonstrated that there were more toxin-specific hit genes  than common ones . the gene lists in these tables were then used to highlight toxin specificities in the plot by color codes, using the highlight genes function .

because hit threshold selection ultimately has an element of arbitrariness, and because of various experimental factors resulting in assay noise and variation, genes of significant relevance to a biological process may sometimes be narrowly missed by falling under the hit selection cut-off. in these situations, screensifter is useful for identifying potentially important genes that may be near-threshold. this can be illustrated by ricin-specific hits that have been linked to er translocation . er translocation is an essential step in the traffic of pe and ricin toxins, which have long been suspected to use the machinery of er associated degradation  to translocate. surprisingly, some erad-related genes, such as nploc <dig> and ufd1l, appeared to be toxin specific. searching for additional likely players in this process, we used ppi plotting again to identify valosin containing protein  and a cofactor of vcp, erlin <dig>  which were below our significance threshold values. this type of finding could, for example, warrant re-testing these genes with different, perhaps more potent, knockdown reagents.

among the genes that appeared strongly positive and toxin specific, we noticed the cullin 4b gene . to quickly identify partners of this protein, we employed the “ppi display” option in the plot control panel in conjunction with the plot search function, which revealed that ring-box  <dig>  e <dig> ubiquitin protein ligase , f-box protein  <dig> , f-box and leucine-rich repeat protein  <dig> , kelch-like ech-associated protein  <dig> , cullin  <dig>  and f-box protein  <dig>  were present in the dataset of pe-specific hits, and are well-connected by ppis . all these proteins have been shown to interact in cullin-ring ligase  complexes. these multi-subunit ubiquitin ligases are known to regulate various aspects of cell physiology but had not been previously implicated in retrograde traffic. the identification of several pe-specific subunits reinforced and highlighted their functional importance for pe trafficking.

CONCLUSIONS
through these examples, we have illustrated the main features of the screensifter application. as a dedicated application to rnai screening, screensifter facilitates rapid and intuitive quality control for the analysis of screen data. as a desktop application working with downloaded biological databases, screensifter allows a very interactive interplay between the screener, their screening dataset and publicly available gene-centric data. this flexibility and a user-friendly visual interface will favor a quick and iterative process of data exploration, with the ability to rapidly generate customized tables and graphs for reports and publications.

availability and requirements
project name: screensifter

project home page:http://www.screensifter.com

operating system: win  <dig>  win xp, mac, linux

programming language: python, wxpython, mysql/sqlite3

other requirements: please cite this publication if used for data analysis and figure generation

license: gnu gpl

any restrictions to use by non-academics: none files  are available for download at: http://sourceforge.net/projects/screensifter/. for each version the executable file is provided with or without database. the executable with database has preloaded databases of gene ontology, protein-protein interaction from ncbi. . screensifter software will work without the biological database as well. if you download screensifter without database, you can add the database anytime directly from screensifter under connection -> update ontology and interaction database. downloading and indexing the database may take a few hours. the datasets included in the software are from genome-wide rnai screens on the intracellular traffic of ribosomal-inactivating toxins in mammalian cells  <cit>  and a high-content kinome-wide rnai screen of golgi morphology  <cit> .

abbreviations
csv: comma separated values; dsrna: double-stranded rna; er: endoplasmic reticulum; erad: er-associated degradation; gfp: green fluorescence protein; go : gene ontology ; gui: graphical user interface; pe: pseudomonas exotoxin a; ppi: protein-protein interaction; qc: quality control; rnai: rna interference; sirna: small interfering rna.

competing interests
the authors declare that they no competing interest.

authors’ contributions
pk and fb designed the software organization. pk wrote the code. dm, gg and sw provided feedback on the software. gg, sw and fb wrote the manuscript. all authors read and approved the final manuscript.

authors’ information
the imcb rnai screening facility is run in close collaboration with the fb lab. the fb lab has run several screens and is collaborating with different groups in singapore to perform other rnai screens.

