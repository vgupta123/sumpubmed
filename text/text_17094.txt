BACKGROUND
user-scripts are programs, typically written in javascript, that are installed inside web-browsers. they manipulate the content of specified sets of web pages prior to their display in the browser. the name 'user-script' may be slightly misleading as a typical user of a web browser will not likely write user-scripts . the name might more appropriately be 'user-side-scripts' to convey the notion that the script operates within the user's browser and that its installation and activation is under the user's control. for brevity and to stay in alignment with common terminology, we will use 'user-scripts' throughout the rest of the text.

user-scripts can be used to perform tasks including, but not limited to: automatically adjusting style sheets, stripping unwanted advertisements, integrating the content of multiple web resources, or introducing novel visualizations. anyone capable of writing javascript can write and share user-scripts that alter the content displayed on any web page. by writing or locating a suitable user-script, for example in a public repository such as userscripts.org  <cit> , and installing it in their browser, users gain unprecedented control over the content that is ultimately displayed in their browser window. user-scripts thus offer an immediate mechanism by which the web browsing experience can be shifted from its current resource-centred pattern of control towards a more user-centred view.

here we introduce the ihoperator – a user-script designed to provide an enhanced, customized view of the ihop website, a key bioinformatics resource describing proteins, their properties, and the relationships that hold between them. we describe how the ihoperator script generates and embeds a novel visualization of the contents of the ihop web pages and extends the content of those pages with information gathered from related, external web resources. we conclude with a discussion of the potential implications of user-scripts, describing their relationship with the emerging semantic web in the life sciences.

ihop
the ihop database provides information about proteins that have been automatically associated with pubmed abstracts  <cit> . using the ihop website  <cit> , it is possible to browse through the literature using hyperlinks that associate abstracts to one another using co-occurring genes. after identifying a gene of interest, a user may navigate to a page that contains the "defining information" for the gene. this information consists of the gene's names in different databases, its source organism, and a potentially very long list of snippets of text that have been extracted from abstracts associated with the gene .

tag clouds
tag clouds are visually-weighted renditions of collections of words  that are used to describe something  <cit> . tags in a cloud are sized, organized and coloured so as to illustrate aspects of the relationship between each tag and the entity that it describes. tag clouds have recently gained popularity in 'social-tagging' applications such as flikr  <cit> , connotea  <cit> , and del.icio.us  <cit>  because they provide a mechanism through which untrained users can quickly visualize the dominant features of voluminous databases and because they provide a visually based navigation paradigm that is complementary to text search and operates naturally over non-hierarchically organized information systems.

implementation
the ihoperator is a user-script, a javascript that can be embedded in a web browser such that it processes the contents of visited web pages prior to their presentation to the user. though a user-script may be instructed to process any set of web pages,  the ihoperator is focused specifically on the gene-information pages of the ihop website.

greasemonkey
at this time, most user-scripts require extensions to web browsers such as greasemonkey  <cit>  for mozilla's firefox, creammonkey  <cit>  for apple's safari, and turnabout  <cit>  for microsoft's internet explorer. though user-scripts for each of these browsers are written in javascript, there are no accepted standards for user-script extensions and thus scripts written for one browser may or may not work in another browser. as user-scripts become more popular, standardization efforts are likely to emerge that will improve script/browser interoperability; for the moment however, the ihoperator is built for firefox and is thus dependent on the greasemonkey extension for its operation.

the greasemonkey/firefox combination was chosen for this project because both are cross-platform, actively developed, open source, and because greasemonkey was the first and is still the most widely used browser extension for housing user-scripts. we utilize greasemonkey to add a tag cloud to pages describing genes on the ihop website by processing the html and javascript present on those pages prior to presentation in the browser. as well, we extend the content of the website by utilizing the greasemonkey api to retrieve content from external http-accessible resources.

RESULTS
the purpose of the ihoperator user-script is to enhance the user's experience when visiting the ihop web page. it does this by generating a tag cloud visualization of some of the information presented on the gene-information web pages and by integrating additional content acquired from pubmed <cit>  and the kyoto encyclopedia of genes and genomes  <cit> .

ihoperator tag clouds
the ihoperator script produces tag clouds based either on mesh keywords from the abstracts associated with a gene or from other genes that ihop identifies as interacting with a gene. for example,  shows a tag cloud generated using mesh terms gathered from abstracts associated with the gene brca <dig> and  shows a tag cloud composed of genes related to brca <dig>  in both clouds, the size of each tag is used to display the frequency of occurrence of that tag  in the context of abstracts associated with brca <dig> and colour is used to highlight the impact factor of the journals in which the tags appear. from the user's perspective, these tag clouds appear to be embedded directly within the ihop web page .

the process of generating the tag clouds works as follows:

 <dig>  extract tags  embedded in the html of the page. .

 <dig>  count the number of occurrences of each tag

 <dig>  calculate a score for the tag based on its relative frequency in the page.

 <dig>  collect the impact factor assigned to each abstract and associate it with the appropriate tag. .

 <dig>  find the average impact factor associated with each tag.

 <dig>  produce the html for the cloud by

a. assigning each tag to a predefined cascading style sheet class that is associated with a particular size and colour that is determined by the frequency of occurrence of the tag in the page and the average impact factor of the journals associated with the tag occurrences respectively.

b. sorting the tags alphabetically.

the ihoperator script also allows the user to customize the interface by selecting different ranges for the font sizes in the cloud and by specifying whether ihoperator-generated content should be hidden, display in another window, or display within the ihop web page.

ihoperator integration of third-party content
aside from the tag-cloud based visualization , a key feature of the ihoperator script is its ability to acquire and display third-party content related to the gene in the same browser-context. for example, the script utilizes greasemonkey's built in support for ajax  to execute an asynchronous http request that invokes a biomoby  <cit>  web service workflow stored as a java servlet that, when possible, provides kegg pathway diagrams containing the gene of interest . the script also makes it possible for the user to access relevant external websites using an embedded iframe element. this allows the user to view the abstracts associated with the gene and/or mesh term of interest or to initialize a web service browsing session using the gbrowse moby  <cit>  biomoby client application that originates with a gene selected from the cloud. without the ihoperator, each of these activities would require that the user find the additional resources themselves, learn how to use them, cut and paste search terms into them, and of course, navigate away from the ihop website.

related work
within the bioinformatics domain, only a few examples of user-scripts appear to exist so far. at the time of this writing, only two were listed at the primary global repository  <cit>  and one was identified via web search  <cit> . both scripts listed on  <cit>  facilitate the addition of bookmarks to articles listed in pubmed  <cit>  to similar science-focused social bookmarking systems, connotea  <cit>  and citeulike  <cit> . in the other, pierre lindenbaum provides a script that generates a treemap  <cit>  visualization of connotea reference collections  <cit> .

discussion
at present, web browsers are the dominant technology used to satisfy the information gathering and visualization needs of life scientists. in their current form, browsers provide users with the ability to retrieve information from widely distributed sources, but essentially no means to integrate information from multiple sources and only a very constrained set of operations for manipulating the display of that information. given the distributed nature of information on the web and the diversity of user requirements in interacting with that information, this situation is unsatisfactory.

in most current implementations, web browsers facilitate information transfer between only two parties – the resource provider, who determines all information presented, all links to external resources, and nearly all manner of visualizing that information; and the consumer, who essentially can only control which page they choose to view next. the typical web browsing experience can thus be characterized as resource-centric because everything that the user sees on a web page is governed entirely by the resource provider.

by introducing an additional layer of processing that occurs only at the discretion of the user , user-scripts offer a way to effect a transition towards a user-centric browsing experience. though it has always been possible for the technically skilled to engineer their own software for processing web content , the arrival of popular browser extensions such as greasemonkey marks the beginning of a fundamental change in the way end-users can interact with the web. empowered with the ability to easily embed scripts directly into their browser and to find such scripts in public repositories, web users can now more actively make decisions about what web content they see and how that content is presented.

despite its intriguing, paradigm-shifting nature, the user-script concept is not without its problems. because web content is still primarily provided as html, user-scripts must process html in order to function. this is problematic for two reasons: 1) html is not designed for knowledge or data representation and hence is difficult to parse consistently and 2) html representations may change frequently even when the underlying data does not. the former makes it challenging to write effective user-scripts, particularly scripts that are intended to operate over multiple web pages. the latter makes these scripts brittle in the face of superficial changes to their inputs and thus potentially unreliable  <cit> . since information on the web is currently provided primarily as html, alterations to the structure of this content are frequent and necessary results of the need to keep the browsable interfaces up to date. to alleviate these problems, it would clearly be beneficial if the underlying data could be exposed in a manner that was independent of its html representation

the potential value of separating content from presentation provides motivation for the semantic web  <cit>  initiative and the standards for the annotation of web resources, such as the resource description framework  <cit>  and the web ontology language  <cit> , that have recently emerged from it. with these standards in place, content providers are encouraged to provide a representation of their data for visualization  in parallel with an additional representation of their data for machine-interpretation . this would enable those who wish to utilize the content in novel ways to process the more stable, machine-readable representations while remaining unaffected by visual modifications to the associated websites. though widespread adoption of semantic web standards by the community may, in principle, enable the creation of powerful, user-centred applications that go beyond the capabilities of user-script enabled browsers  <cit> , this process is occuring very slowly  <cit>  and the problems faced by life scientists in gathering, integrating and interpreting information on the web are pressing. in their current form, user-scripts, such as the ihoperator, provide an immediate means to address these needs and thus should be more widely exploited to this end.

CONCLUSIONS
by adding the ihoperator user-script to their browser, users gain access to 1) a novel method of visualizing and navigating the defining information about genes on the ihop website and 2) enhancements to that information that are gathered automatically using external resources such as pubmed and kegg. the ihoperator thus provides an extension to the ihop website that demonstrates how user-scripts can be used to personalize and to enhance the web browsing experience in a biological context.

user-scripts represent a small, but immediate and useful step in the direction of a user-centred rather than a resource-centred web browsing experience. in contrast to other proposed routes to achieving this goal, they offer a mechanism that can be effected immediately using existing resources and representations to provide end-users with a straightforward way to exert greater control over what and how they see on the web.

availability and requirements
• project name: ihoperator

• to install: go to the project homepage and follow the installation instructions

• project homepage: 

• operating system: any os that supports the mozilla firefox web browser

• programming languages: javascript

• other requirements: javascript enabled firefox web browser, greasemonkey firefox extension, internet connection

• license: freebsd

authors' contributions
bmg instigated the project and drafted the manuscript. eak wrote all of the software. byk developed the project website and provided intellectual input throughout the project. mdw provided substantial advice and guidance during all phases of the project and assisted in the drafting of the manuscript. all author's read and approved the final manuscript.

