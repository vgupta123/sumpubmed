BACKGROUND
high throughput expression profiling using either array or sequencing based methods often generates noisy data. reducing the noise levels by increasing the number of replicates can be precluded by cost considerations. clear biological signals may be present in such data that are not readily visible when taking a gene by gene approach to the analysis. an example would be one where all  <dig> genes in a known bio-synthetic pathway have become up-regulated, each by a small amount that would be seen as experimental noise when considered in isolation, but may be significant given prior knowledge that the pathway exists. consequently recent years have seen the rise of gene set based methods which take pre-defined gene sets and look for coordinated gene expression changes using various statistical methods  <cit> . as well as increasing sensitivity, gene set based approaches also read out directly in terms of ‘systems’ - one step further towards the overview that the researcher would anyway be attempting to synthesise from the individual fold changes.

gene sets can be generated in a number of ways ranging from the highly manual to the automated. due to the size of a typical gene complement, manual generation of a comprehensive collection of gene sets is time consuming.

one example of an automated approach to gene set generation is to use the associations between particular gene ontology  project  <cit>  terms and the genes of the organism in question. such association data is available from a variety of sources, either automatically or manually curated. a gene set can be constructed for each go term, with members comprising those genes annotated with that term and potentially, as discussed later, with child terms of that term. thus the gene ontology supplies the gene set functional definitions, and the association data source supplies the gene membership of those sets. go terms have biological meaning, and the co-ordinated perturbation of a set of genes whose common attribute is annotation with the same term  is clearly informative.

one widely used gene set based analysis technique is gene set enrichment analysis   <cit> . gsea has been implemented in a number of forms including, importantly, a freely available standalone desktop-based implementation written in java and available from the broad institute that enables gene set based analysis to be carried out by non-experts. this implementation is a sophisticated platform, with many tuneable parameters, comprehensive statistical output and additional tools such as ‘leading edge analysis’ for interrogation of the results. unlike many existing go-specific enrichment packages gsea does not require an arbitrary significance cut-off to be made, and also permits the use of sample permutation rather than gene permutation to assess the significance of the identified perturbed gene sets. these two features allow it to be more sensitive and less susceptible to false positives than simpler enrichment algorithms  <cit> . a gsea analysis requires the experimental data set, a predefined gene set collection, and potentially a mapping between the identifiers used. a number of pre-defined gene set collections formatted for the broad institute gsea implementation are available from the molecular signatures database   <cit> , including the ‘c5’ go based gene set collection for human that dates from september  <dig>  however, updated human go based gene sets or go based gene sets for other species  are not available from msigdb and have to be constructed ad-hoc. here i present go2msig, a tool and database implementation which uses data from the go consortium, ncbi or array manufacturer annotation files to enable the researcher to generate msigdb compatible gene set collections for many species without the need for custom software writing or manual gene set curation. the tool takes various parameters for fine tuning the output sets, and is available in standalone form and via the web. the resultant gene set collections may be used directly with the broad institute gsea implementation, or with other tools such as erminej  <cit>  that also accept msigdb format gene set collections.

implementation
a go project ontology is represented by an directed acyclic graph , each term being a node in the graph. each parent term can have multiple children, and each child term can have multiple parents. there is a single root term for each of the three ontologies, ‘molecular function’, ‘biological process’ and ‘cellular component’. terms become more specific as one moves away from the root.

often only the more specific go terms are annotated in the association databases. for instance in the september  <dig> release of the entrez gene database gene2go table  <cit>  only  <dig> mouse genes are directly annotated with the cellular component term ‘sarcomere’. however a total of  <dig> additional genes are annotated with child terms of ‘sarcomere’ such as ‘a band’, ‘i band’ or ‘z disc’. absence of the higher level annotations means that in this case the ‘sarcomere’ gene set will be missing the vast majority of sarcomere related genes and the sensitivity of gsea towards perturbations in sarcomere biology will be significantly reduced. making a fully featured gene set collection in which these implicit but highly meaningful associations are captured requires that the go dag is used to annotate genes with these inferred higher level term associations. thus both the association data and the rich structure of the ontology contribute to the extraction of meaning from the data. gene annotation with these inferred associations is equivalent to propagation of the explicit term associations up the dag towards the root. the original broad institute ‘c5’ collection was constructed in this way . other go based gene set tools adopting a similar strategy include fatigo  <cit> , erminej  <cit> , gopargenpy  <cit> , gostat  <cit>  and david  <cit> . likewise go2msig includes a propagation phase during set construction.

figure  <dig> shows in detail the procedure adopted by go2msig. the program flow can be broken down into  <dig> main phases. the first is obtaining the go term hierarchy, the second is obtaining the gene associations, the third is the propagation of the associations towards the root term and the fourth is post-processing the resultant gene sets and formatting the output. each phase consists of a number of discrete steps, shown in figure  <dig> and described below in order of execution.

obtaining and parsing the go term hierarchy
go2msig can obtain term information  from a standard go term database  or an obo flat file. if used with a slow implementation of the go term database go2msig can cache the go hierarchy in order to speed up future calls. the go ontology is constantly evolving, hence the go database contains information about go terms now obsolete, and about terms which are synonymous with other terms that are now preferred. go2msig parses the database to determine the list of current terms and their parent–child relationships, the list of obsolete terms and the list of terms with synonymous preferred terms.

obtaining, parsing, filtering and mapping the go term gene associations
go2msig can obtain go term gene associations from any of three sources: affymetrix or agilent array annotation files, the go association database, or the ncbi curated entrez gene database gene2go table  <cit> . the entrez gene database has the advantage over the go association database that it uses a consistent gene identifier , but the disadvantage that it contains fewer gene associations. the entrez gene database is the source of the pre-built msigdb go sets for human.

the next step allows the user to filter the associations by evidence code. the association between go terms and genes is accompanied by an evidence code which describes how strong the evidence is for that association. iea  for example means that the association has been inferred automatically, whereas tas  means that the association has been proven experimentally and that the assertion can be located in a paper. the original msigdb human go sets used a subset of evidence codes ensuring only well supported associations were used. the same defaults are used by go2msig, but any combination can be specified by the user. for less well characterised species it can be that only iea supported associations exist.

following evidence filtering, go2msig selects either the gene symbol or the entrez gene id as specified by the user .

the next step allows the user to supply an optional file remapping the gene identifiers obtained from the association data source to user supplied identifiers. this may be necessary if the association data uses a different type of gene identifier to those present in the experimental results. one common use would be to map from probe ids supplied in an array annotation file to gene ids. the program can be set to either leave identifiers missing from the translation file unmapped, or to repress them. the former is useful if the user wishes to remap only a subset of gene identifiers, useful in those cases where the annotation data source is inconsistent in its identifier use. the latter can be useful when trying to extract gene sets for a single species from an affymetrix annotation spreadsheet that contains more than one species.

finally go2msig remaps synonymous go terms to the term preferred by the version of the go hierarchy being used. obsolete terms in the associations are ignored. informational warnings are issued when synonymous or obsolete terms are encountered, and also when go terms in the gene association data source are not represented in the go term data source at all .

annotation of genes with higher level term associations
the annotation of genes with higher level term associations is performed by recursively propagating gene associations explicitly defined in the association database up the dag towards the root. during this process the shortest path connecting each term to the root is recorded for later output.

size filtering, duplicate removal and output
the first step after propagation is filtering the collection of sets by user selectable maximum and minimum size cut-offs. the minimum cut-off prevents the output of many very small gene sets that would never achieve statistical significance. the maximum cut-off removes go terms that are so general that the results would be meaningless.

gene set collections built from go will likely contain multiple go terms with identical gene associations. since such duplicate gene sets can affect the accuracy of the key gsea false discovery rate statistic, the next step is to collapse these down to a single set. the original msigdb gene set collections eliminate identical terms leaving one representative. elimination of identical terms without record can make inference harder. if, for example, a parent term ‘muscle system process’ has the same gene associations as its eliminated child term ‘muscle contraction’, then during analysis the user looking at the go hierarchy will likely want to know whether the significant change identified for ‘muscle system process’ is a result of ‘muscle contraction’, or other child terms such as ‘muscle hypertrophy’. this is hard to do if the fact that the child term existed and is identical to the parent term is not recorded. go2msig also records each unique gene set  only once. however the description field in the output file will contain a list of all go terms with that identical set of gene associations. the url link field  contains a link to whichever of the go terms has the shortest distance between it and the root term - in other words the most general of the terms associated with that gene set.

during analysis of the results from a go based gene set analysis the experimenter is likely to want to home in on the more specific terms that show statistically significant changes. in this implementation a rough guide to specificity is provided by appending the distance of each term from the root  to the end of the term description during the final output. this is analogous to the concept of ‘levels’ used by the functional enrichment analysis application fatigo  <cit> .

finally the set is output in either .gmt or .gmx format, one being essentially the transpose of the other.

RESULTS
interrogating the go and entrez gene databases with go2msig itself revealed that these databases contain go annotation data for over  <dig> eukaryotic and prokaryotic species.

although updated gene set collections were released by msigdb in may  <dig>  the ‘c5’ go based human gene sets are still derived from go annotations dating from  <dig>  figure  <dig> compares the msigdb c <dig> collection by gene set size and number  to the equivalent collection generated by go2msig using annotation data dating from september  <dig>  the full go2msig built collection  contains  <dig> gene sets with an average size of  <dig> genes . in contrast the ‘c5’ set contains  <dig> gene sets sized between  <dig> and  <dig> genes with an average size of  <dig> genes. thus we see that building the collection from current data increases the collection size by more than a factor of  <dig> 
1


gene sets were built from the ncbi gene2go annotation table and go ontology downloaded on 13th september  <dig>  default settings were used which filter out gene sets containing fewer than  <dig> or more than  <dig> genes. organisms were omitted when the biggest collection contained fewer than  <dig> sets. in cases where use of all evidence codes reduces the number of gene sets compared with using high quality codes only, this is due to maximum set size filtering. 1for comparison the currently available msigdb go based human collection and a human set built from the annotation file for the affymetrix hg-u <dig> plus  <dig>  array are also shown. 2set number and sizes were calculated for the msigdb collection with filtering as above .

tracing the origin of the gene associations in the go2msig built human collection of  <dig> sets showed that 83% of the gene to go term associations are the result of propagation of gene annotations up the go term hierarchy, rather than arising directly from the annotation databases. this shows that the propagation of gene annotations is essential to the production of properly comprehensive gene sets.

non-human collections are not available from msigdb, and are frequently not available elsewhere preformatted for direct use with broad institute gsea. to illustrate the utility of go2msig for other species, gene set collections were built for all organisms annotated in the ncbi gene2go table. the individual gene set collections could be computed by go2msig in under 30 seconds on a standard laptop. table  <dig> lists the number of gene sets in each collection and the average number of genes per set, for each organism. it also lists the number of genes annotated with one or more go terms as a quick guide to the comprehensiveness of the available go annotations for each organism. using the go project annotation database, array annotation files or other appropriately formatted annotation sources, such collections can be rapidly generated for many thousands of other species.

as a further comparison a human gene set collection was built from annotation data contained in the affymetrix annotation file for the hg-u <dig> plus  <dig>  3′ expression array. a map file derived from the same annotation file was used to map probe ids to gene symbols. the resultant collection contained  <dig> gene sets. as the array annotation file does not contain evidence codes this is compared in table  <dig> with the ‘all evidence code’ sets. in this case 75% of the gene associations in the collection resulted from propagation of associations up the go term hierarchy. release  <dig> of the annotation file was used which dates from october  <dig>  whereas the go term database dates from september  <dig>  during the build  <dig> go terms from the annotation file were automatically replaced with a more up-to-date synonym and  <dig> go terms were discarded due to obsolescence. thus array annotation files can be used in the same way as the ncbi or go databases to build comprehensive gene set collections.

CONCLUSIONS
this paper describes an easy-to-use program which enables rapid generation of gsea compatible gene set collections from a variety of data sources and for many organisms. using gsea with these collections can rapidly uncover biologically meaningful patterns in array or sequence based gene expression data sets from species for which such analyses previously would have been significantly more time consuming. the easiest way to make use of this program is via the go2msig website, which obviates the need to install mysql databases or make calls to potentially slow external go database mirrors. all gene2go derived gene sets shown in table  <dig> are available for download from http://www.go2msig.org/cgi-bin/prebuilt.cgi.

availability and requirements
project name: go2msig

project home page:http://www.bioinformatics.org/go2msig/

operating system: platform independent

programming language: perl

other requirements: go::parser library. mysql if using local databases.

license: gnu gpl v2

any restrictions to use by non-academics: none

competing interests
the author declares that he has no competing interests.

authors’ contribution
jp designed, implemented and tested the algorithm as a perl script, wrote the documentation, set up the website and wrote the manuscript.

