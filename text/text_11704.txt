BACKGROUND
mass spectrometry  plays a crucial role in modern proteomics as a key method for protein identification and quantification. ms provides accurate mass and abundance measurements of intact and fragmented peptide ions, which are then processed by specialized algorithms and transformed into peptide and protein identities. thus, efficiency of many ms-based proteomics workflows depends on how well we understand -- and can utilize -- the properties of peptide masses and peptide mass distribution.

it has been observed that peptide masses have a nonuniform, clustered distribution, which is explained by the fact that peptides are made of twenty amino acids with specific masses. this distribution consists of repeating peaks separated by approximately  <dig> da, which become taller and wider as the mass increases. consecutive peaks are separated by low populated regions  and gaps -that is, the mass ranges for which there exist no possible sequences of amino acids. nonuniformity  and discrete nature of the mass distribution of peptides are important for two major problems in ms-based proteomics: peptide identification and de novo sequencing.

the knowledge of the mass distribution of a particular type of peptide  can be used to facilitate peptide identification in a number of ways. forbidden zones allow us to filter out ms signals corresponding to non-target species  early on, before doing any complicated processing of ms data. dodds and coworkers  <cit>  showed that this results in exponential improvements in statistical significance and discrimination of protein identification based on peptide mass fingerprinting on the mascot platform. nonoverlapping or partially overlapping peaks in the mass distributions of different types of peptides allow recognition of these types based solely on precursor masses. for example, spengler and hester  <cit>  showed that accurate masses  allow phosphorylated and nonmodified peptides to be distinguished. lehmann and coworkers  <cit>  and jones and coworkers  <cit>  showed that this is possible for glycopeptides and lipids. in addition, there have been many suggestions for label tags shifting the mass of labeled peptides to quiet or forbidden zones in order to allow easier identification and quantification of these peptides  <cit> .

the major drawback of peptide identification algorithms based on database search is their inability to identify peptides that are not present in the reference database. de novo sequencing algorithms are designed to restore peptide compositions from ms data without the use of peptide databases. these algorithms employ several strategies for ms data analysis s  <cit> , one of which is based on the fact that for a given mass there exist only a finite  number of amino acid sequences  that can assume that mass, and that these sequences  can be explicitly enumerated. the use of the masses of fragment ions can further reduce the number of admissible compositions. several reports have shown the feasibility of this strategy, especially for high accuracy data provided by modern fourier transform mass spectrometers  <cit> .

proteomics applications mentioned above rely on specific properties of the peptide mass distributions that can only be obtained by enumerating all theoretically possible peptides. moreover, in many circumstances it is impossible to generate these distributions once and for all, as many parameters can vary from experiment to experiment  thus, it is desirable to be able to generate peptide mass distributions  "to order" and, therefore, to be able to generate them fast.

several works focusing on different ms-based proteomics applications employed enumeration of all theoretically possible peptides  <cit> . because of the high computational complexity of the task, enumeration of peptides was done for the mass range below  <dig> kda, which limited applicability of the obtained results. also, even for this mass range long computational times and extensive computational capabilities were often required. olson and others  <cit>  mentioned the use of a parallel method for peptide enumeration, but details of its implementation as well as its computational performance were not reported.

in a recent paper  <cit>  we described the mass distribution of all theoretically possibly tryptic peptides made of  <dig> amino acids, up to the mass of  <dig> kda. the paper provided detailed characterization of forbidden zones and amino acid compositions of peptides from the quiet zones. we showed how forbidden zones shrink over the mass range, where they completely disappear and how they depend on the measured mass accuracy. we found that peptide sequence compositions in the quiet zones are less diverse than those in the peaks of the distribution, and that forbidden zones may be extended by eliminating certain types of unrealistic compositions. we also characterized symmetry of mass peaks and the accuracy of the mann's equations  <cit>  for the mass peak position and width. our study was made possible by advancing computational techniques for the enumeration of amino acid compositions.

in this paper, we describe in detail a parallel method for enumerating all amino acid compositions up to a given length. first, we present a pseudocode for recursive procedures which are the core of this method. we then show how a single task of enumerating all peptide compositions can be divided into smaller subtasks that can be executed in parallel. we also show how the computational complexity of these subtasks compares with the computational complexity of the primary task. finally, we provide pseudocode of processes  that are used to execute the enumerating procedure in parallel. to the best of our knowledge this is the first description of a computational method for a complete and unbiased enumeration of all theoretically possible peptides. we present computational times for our method, implemented by using microsoft visual c++ and the message passing interface , and executed on a computer cluster with  <dig> intel xeon x <dig> cpus running windows hpc server  <dig>  the mass and length limits are input parameters of the program.

implementation
peptide compositions
any peptide composition is represented by a numerical vector , whose i-th component is equal to the number of times the i-th amino acid occurs in the peptide. for example, sequence a1a20a1a <dig> has composition . in some cases, it is convenient to consider peptides as sequences composed of less or more than  <dig> letters . for this reason, let us adopt a more general notation: assume we have an alphabet of n characters and composition vectors . the length of a composition is defined as l = n <dig> + n <dig> +... + nn. if mi is the monoisotopic mass associated with the i-th letter, then the monoisotopic mass of a composition is defined as m = n1m <dig> + n2m <dig> +... + nnmn 

for a single sequence of letters we have a uniquely defined composition, while for a single composition of length l we have

  l!n1!n2!...nn! 

corresponding sequences, given by the multinomial coefficient. note that all these sequences will have the same mass, which explains the convenience of enumerating peptide compositions instead of peptide sequences in order to obtain all theoretically possible peptide masses.

the number of compositions of length l is equal to the number of ways to choose l elements from a set of n elements if repetitions are allowed:

  n+l-1l=!l!!. 

the number of compositions of all lengths not greater than l  is equal to

  ∑k=0ln+k-1k=n+ln 

which follows from the equation

 ∑k=0nr+kk=r+n+1n. 

the latter is based on the recurrence relation

 r-1k+r-1k-1=rk, 

and can be found in the book by graham and others  <cit> . the number of sequences of all lengths not greater than l is equal to

 nn- <dig>  

enumerating peptide compositions
procedure genbasic begins enumeration with composition  and first generate all compositions with nn ranging from  <dig> to l. it then sets nn- <dig> to  <dig>  and generates all compositions with nn ranging from  <dig> to l -  <dig>  and so on. the last composition in this generation process is . essentially, the compositions are generated like n-digit numbers, in ascending order, with requirement that the sum of the "digits" must not be greater than l. for instance, for n =  <dig> and l =  <dig> the procedure generates all compositions up to length  <dig> in the following order: , , , , , , , , , .

several changes to procedure genbasic will make it faster. first, if l is equal to zero on line  <dig> then there is no need to make assignment on line  <dig> and call genbasic on line  <dig>  since it is already known that the rest of the composition will contain zeros only. second, we can calculate the mass of a composition as soon as its component ni becomes known, and then pass this mass to the next call of the generating procedure. by doing this, we avoid the need to recalculate the mass of the part of the composition that has not been changed.

enumerating peptide compositions in parallel
the task of enumerating all compositions  can be split into smaller independent subtasks or jobs that can be executed in parallel. indeed, a single call to procedure gen with parameters  is equivalent to l+ <dig> calls with parameters , ,..., , while n <dig> is set to  <dig>   <dig> ..., l, correspondingly . as before, we assume that array aam stores masses m <dig>  m <dig> ..., mn of the used amino acids. certainly, we will have to combine mass histograms produced by each call of procedure gen, which can be done knowing parameters of each job, described by a triplet .

to illustrate this idea, consider again our example with n =  <dig> and l =  <dig>  the primary task is to enumerate the following compositions: , , , , , , , , , . this can be accomplished by independent enumeration of three subsets of compositions:  , , , , , ;  , , ; and  . compositions  can be enumerated by setting n <dig> =  <dig> and calling gen with parameters ; compositions  can be enumerated by setting n <dig> =  <dig> and calling gen with parameters ; and single composition  is enumerated by setting n <dig> =  <dig> and calling gen with parameters .

how can we create a list or table of jobs given the initial job described by parameters ? first, job  is replaced by l+ <dig> jobs , ,...,  . if, for a given l, job  is executed in acceptable time, we do not need to do anything else, and the table of jobs has been initialized. otherwise, we can split job  into l+ <dig> jobs with start =  <dig>  and similarly split other jobs with start =  <dig>  thus, for all jobs with start =  <dig> there is certain lmax, <dig> such that if the first parameter of the job is larger than lmax,  <dig> then this job should be split into jobs with start =  <dig>  when this is done, we move to the jobs with start =  <dig> and process them in a similar manner: all jobs that have first parameter larger than lmax, <dig> should be split into jobs with start =  <dig>  we continue this until each job in the job table can be executed in acceptable time .

when the table of jobs has been initialized, the jobs from the table can be assigned to computation processes. in this context, it is convenient to think about a master process, which does these assignments , and worker processes , which execute the assigned jobs and return results back to the master. the master then combines partial mass histograms computed by workers into a single final mass histogram. there may be different strategies utilized in assigning the jobs. for example, larger jobs  may be assigned prior to smaller jobs . in our experiments, which are presented in the discussion section, there were no particular strategy in job assignments .

the data exchange between the master and workers  can be organized by using functions mpi_send and mpi_receive from any library implementing mpi  <cit> . in our implementation, we used microsoft visual c++ and mpi library from microsoft hpc sdk pack.

RESULTS
it is worthwhile to make several additional comments on procedure gen, presented on figure  <dig>  various practical considerations may suggest using an upper limit on the mass of peptide compositions that one wants to enumerate. in this case, a significant improvement in computation speed may be achieved by canceling the enumeration of compositions whose mass exceeds a given limit. if array aam contains mass values in ascending order, we can return from function gen as soon as the current mass  exceeds the threshold. to illustrate a possible gain in speed that may be achieved by using a maximum mass limit, consider enumeration of compositions corresponding to all tryptic peptides up to the length of  <dig>  it takes  <dig> hour  <dig> minutes to complete the full enumeration of such compositions, while with the mass limit of  <dig> kda  it takes only  <dig> minutes, as about 87% of the compositions can be skipped .

start
l
max,2
l
max,3
l
max,4
computations were done using  <dig> work processes executed on a cluster with  <dig> intel xeon x <dig> cpus running windows hpc server  <dig> 


l
parameters of the job table were: start ≤  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  computations were done using  <dig> work processes executed on a cluster with  <dig> intel xeon x <dig> cpus running windows hpc server  <dig> 

there may be other modifications to this procedure, depending on the intended use of the generated mass distribution. for example, the maximum number of occurrences of each amino acid in a peptide may be made limited by a threshold based on the amino acid and the length and/or mass of the peptide. this would make the generated mass distribution more realistic and may increase the lengths of forbidden zones  <cit> . instead of counting the number of peptide compositions, one can count the number of peptide sequences using equation . in this case, efficient computation of factorials "on the fly" can be implemented similar to the computation of peptide masses. if we are interested in enzyme-specific peptides, the procedure can be modified to allow a given number of missed cleavages. the number of amino acids  and their monoisotopic masses may vary depending on specific proteases used in sample preparation, possible post-translational or chemical modifications, and other factors. the resolution of the mass histogram  may be changed as well, without significantly impairing computational speed.

an important question is how the job  compares with the job  in terms of computational complexity. let us denote the number of compositions enumerated by the first procedure by c, and the number of compositions enumerated by the second procedure by c. using equation  we have:

 c=n-start+1+ln-start+ <dig>  

hence,

 cc=1+ln-start+ <dig>  

for example, if n =  <dig>  l =  <dig>  and start =  <dig>  then c/c =  <dig>  which means that we get a three-fold decrease in computation time by replacing one call gen by  <dig> calls to gen with start =  <dig>  executed in parallel. similarly, we get

 cc=1+n-start+1l. 

thus, if n =  <dig>  l =  <dig>  and start =  <dig>  then c/c ≈  <dig> , which means that gen will be about  <dig>  times faster than gen.

initialization of a job table requires the maximum value of parameter start, as well as parameters lmax, <dig> , lmax, <dig> , etc., to be specified. these can be determined empirically based on the available computational resources and the number of processes that can be executed in parallel. for example, we found that for enumerating tryptic peptide compositions of masses up to  <dig> kda by using  <dig> processes running on  <dig> intel xeon x <dig> cpus the following parameters would give good performance: start ≤  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  the tuning of these parameters is important to ensure good performance, as they directly affect the computation time .

it should be noted that a job table may have jobs with the same parameters l and start, differing only in m. for example, consider the case illustrated in figure  <dig>  splitting job  into l+ <dig> jobs with start =  <dig> will give us, among others, job . on the other hand, splitting job  into l jobs with start =  <dig> gives us job . it is clear that execution of these two jobs can be done in one call to function gen, which should be modified to be able to accept two input masses m <dig>  m <dig> instead of m <dig>  and to work with two variables m <dig>  m <dig> instead of m. in a similar manner, execution of more than two jobs may be done in one call to function gen. this approach will lead to a significant speed-up in computations .

in fact, a job table may have jobs with all three parameters l, start and m being equal. consider, for example, a primary job with l =  <dig>  start =  <dig>  and m <dig> =  <dig>  assume that array aam holds amino acid masses in ascending order. then the first five masses stored in this array will correspond to glycine , alanine , serine , proline  and valine , and we can denote the first five elements of a composition by ng, na, ns, np, nv. assume that the job splitting algorithm  yields the following two jobs:

 ng= <dig> na= <dig> ns= <dig> np= <dig> nv= <dig> start= <dig> l= <dig> ng= <dig> na= <dig> ns= <dig> np= <dig> nv= <dig> start= <dig> l= <dig>  

then these two jobs will have the same m <dig> =  <dig>  da, since tripeptides ggv and aaa are isomeric. if a job table is generated using parameters start ≤  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  lmax, <dig> =  <dig>  then for l =  <dig> about 2% of all jobs will be duplicates; for l =  <dig> -- about 29%, and for l =  <dig> -- about 47%. in the case when we are only interested in the mass distribution of peptide compositions, there is no need to execute duplicate jobs. if certain job occurs k times, it is enough to execute it once and then multiply the resulting histogram by k before adding it to the final histogram. however, if we would like to get every peptide composition, then we cannot remove duplicate jobs.

in the end of this section, we present table  <dig> which shows computation times for enumeration of tryptic compositions for a range of lengths between  <dig> and  <dig>  with and without the use of a maximum mass limit. the numbers in the second column may seem counterintuitive at first, since, for example, it takes  <dig> min to generate the distribution for l =  <dig> and  <dig> min for l =  <dig>  the explanation, however, lies in using the maximum mass limit of  <dig> kda. the longest job for the task with l =  <dig> was l =  <dig>  start =  <dig>  m <dig> =  <dig>  and it executed for  <dig> min. the longest job for the task with l =  <dig> was l =  <dig>  start =  <dig>  m <dig> =  <dig>  and it executed for  <dig> min. the difference in  <dig> min comes from the fact that more compositions were canceled out in the second case because of the mass limit that was used.

we would like to note, in addition to table  <dig>  that enumeration of all tryptic peptides having the mass no greater than  <dig> kda  took  <dig> minutes.

CONCLUSIONS
in this paper, we presented a detailed description of a parallel method for enumerating all theoretically possible amino acid compositions and discussed different aspects of its implementation. enumeration of all amino acid compositions is important in several proteomics workflows, including peptide mass fingerprinting, mass defect labeling, mass defect filtering, and de novo peptide sequencing. given the fact that multi-core computers and computer clusters are becoming increasingly available, it is natural to address this computationally expensive task using a parallelization approach.

we believe that by reducing computational times from hours to minutes, the applicability of the enumeration of all amino acid compositions in various proteomics studies may be significantly improved and extended. we have used the method described in this work to characterize forbidden and quiet zones in the mass distribution of tryptic peptides  <cit> . in the next step, we plan to apply this method to enhance the accuracy of protein identification in real mass spectrometry data. our method has been implemented as a 32- and 64-bit windows application using microsoft visual c++ and mpi. it is freely available for download at https://ispace.utmb.edu/users/rgsadygo/proteomics/parallelmethod.

availability and requirements
• project name: pepcomp

• project home page: https://ispace.utmb.edu/users/rgsadygo/proteomics/parallelmethod

• operating system: ms windows

• other requirements: message passing interface, multi-core cpu

• programming language: visual studio c++

• license: no license needed

competing interests
the authors declare that they have no competing interests.

authors' contributions
rgs conceived the project. avn conducted the analysis. avn and rgs wrote the paper. all authors contributed to the underlying ideas of the method and the analysis. all authors read and approved the final manuscript.

