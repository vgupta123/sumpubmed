BACKGROUND
lower costs in genomic sequencing and improved methods of generating computationally predicted functional annotations has led to the development of many model organism databases using the biocyc framework  <cit> . while computationally derived draft model organism databases provide useful starting points for storing biological knowledge, computationally predicted annotations are known to suffer from significant false negative rates  <cit> . the accuracy of annotations can be substantially improved by providing manual annotations mined from literature by expert curators. unfortunately, manual curation efforts have not kept up with the proliferation of new databases. there are currently over  <dig> databases in the biocyc collection, however only  <dig> of these currently receive moderate or intensive manual review  <cit> .

among the databases that receive manual review, maintaining manually curated data can present a challenge. when an improved reference sequence is released for an organism, the biocyc database representing that organism must be recreated in order to incorporate the new sequence data. while computationally predicted annotations within the database should be updated using the new input data, it is usually preferred to keep existing manual annotations even if the computational annotations are more recent. there is a need for tools which can assist curators in persisting manually curated data through the update process either through automation or by providing pipelines for the transfer of manual annotations of these databases. additionally, when several distinct databases host biological data for the same organism, it is desirable to share manually curated annotations between these databases in order to improve data accuracy without duplicating curator efforts. in order to facilitate the transfer of data between databases, robust import and export features must be made available.

pathway tools  <cit> , the software which supports development and management of biocyc databases, provides several options for updating a biocyc database. changes may be made manually within the pathway tools software by first locating the object to update and then entering edit mode to make the changes to that object, as shown in figure  <dig>  each object type  has a specific data entry form, which can be filled out and saved. while this method allows the curator to directly review and verify the changes entered into the database, it is inefficient when performing large numbers of updates.screenshot of pathway tools protein editor. editing database objects through the pathway tools software editors is done by entering information into forms which describe information specific to the type of object being edited.



pathway tools supports data imports through two file formats, “spreadsheet format” or “lisp-format”. examples are provided in additional file  <dig>  the spreadsheet format imports are limited in that some data cannot be imported using this method, including go term annotations, stoichiometry, and cellular localization. while the lisp-format supports the import of these data types, it requires users to have an understanding of the lisp data structure implemented in the biocyc framework and is not easily converted to other standard formats.

a final import option provided by pathway tools is through an application programming interface , which exposes low level access to the biocyc data structure. the api is very flexible in that users can design queries to suit their specific needs, but they must have a detailed understanding of the internal structure of a biocyc database in order to do so. certain modifications to a biocyc database, such as go term annotations, require additional steps in order to maintain the referential integrity of the database. this provides further barriers to use, as users must have an understanding of how pathway tools implements storage of these features.

despite the diversity of import methods provided by pathway tools, there remains a need for an import pipeline which is both capable of importing slot-value annotation data in batch and accessible to researchers who are not experts in programming or biocyc database structure. cyctools is a graphical interface for the biocyc family of databases which improves data management by providing methods which can import slot-value annotation data in batch.

implementation
cyctools dependencies
biocyc is a family of databases built using the biocyc framework. each member database of the biocyc collection typically represents the pathway and genomic data of a specific organism. biocyc databases are built on the frame representation system  known as ocelot  <cit> , which extends the generic frame protocol . the native storage format for biocyc data is an object oriented database representation based on frames. the hierarchical nature of data represented in a frame can be seen in figure  <dig>  a frame is a high level container that groups information regarding either biological entities  or biological relationships . information about the object a frame represents can be stored in either slots or slot-value-annotations. information stored in slots describes the frame , while information in slot-value-annotations provides context for the information in the slots . the data stored in frames and slots in the database can be accessed programmatically through the pathway tools api.structure of frames in a pgdb.
a) frames describe objects in the database. slots contain information about the frame object, and annotations contain meta-information about slot information. b) a protein is represented by a frame in the database. examples of slots which describe the protein include the protein name, molecular weight, and go-term assignments. annotations of the go term information include citations, evidence codes, and information on the person who curated this go term assignment.



the api exposes many of the internal functions of pathway tools and allows low level access to the internal data structure of any biocyc database hosted by pathway tools. advanced users can create third-party software which can read or write to biocyc databases using customized queries. the api is designed to support the lisp programming language, but the libraries perlcyc  <cit>  and javacyco  <cit>  allow users to access the api through perl and java respectively.

javacyco is an object-oriented improvement to the javacyc library. javacyco contains the javacyc  <cit>  class and is fully backwards compatible with it. in addition to extending and improving the functionality of javacyc, javacyco provides a client-server model for accessing the pathway tools api. by running the server “javacycserver” on the same machine as pathway tools, javacyco provides remote access to the pathway tools api to javacyco clients. cyctools depends on the javacyco library to provide access to the pathway tools api in order to read and write to a biocyc database. more details on installing these dependencies can be found in additional file  <dig> 

cloning a database
generally speaking, cyctools can modify any biocyc database hosted by pathway tools. two notable exceptions to this are the metacyc and ecocyc databases, which are integrated into pathway tools and flagged as read-only. since these databases can not be removed or modified, the only way to edit them is to edit a copy. pathway tools will also refuse to load two databases with the same name, which prevents the user from simply installing a second copy of a database without first renaming and modifying several of the files and folders within the copy. this restriction will also prevent the user from creating and hosting several versions of a database in the same pathway tools instance. in order to circumvent this restriction, a bash script which automatically clones a database and modifies the appropriate files was created. this tool is made available in additional file  <dig> 

overview of import process
the cyctools import function provides a graphical pipeline for importing spreadsheet data into frame objects in the pathway genome database . the import utility takes as input a comma-separated data file, maps the data to frames in the pgdb, previews the resulting changes to the pgdb, and performs the update of the pgdb as shown in figure  <dig> import process diagram. synonym based search automatically occurs if import file does not contain frame ids. only unique matches to frame ids are allowed in order to prevent ambiguity in the import process.



cyctools must be able to connect to a server running pathway tools in api mode and javacyco. once connected, the user will select one of the available import types: import slot data, import slot-value annotation data, import go annotations, delete frames, or create transcriptional regulation frames. this determines the format of the import file and how the imported data are applied to database objects. additional options are available which allow the user to specify how to handle existing data in a slot or annotation which will be modified during import, shown in figure  <dig> cyctools import screen. cyctools provides a multi-step process for importing user data. several options are available for users to interact with existing data. users can also specify an author or organization to assign credit for the revision of a database frame object.



if the overwrite option is set, cyctools will first delete the existing data in a slot or annotation before writing the user provided data to that slot or annotation. if the ignore duplicates option is set, cyctools will check each new value against each existing values in a slot or annotation. if the new value exactly matches an existing value, it will not be added to the slot or annotation. this option will prevent the user from adding a duplicate value to a slot or annotation, but will not remove an existing duplication. thus, if a protein were to be annotated with a single go term twice, this option will prevent cyctools from adding a third identical annotation using that go term, but would leave the existing annotations.

the author credits option allows the user to assign credit to an individual or organization for each frame updated during the import process. cyctools autofills a list of curators and organizations described in the currently selected database. for each frame updated during the import, the frame is modified to append the curator or organization to the “credits” slot. this update is annotated as a revision to the frame and is timestamped to the current system time.

go term annotations
go term annotation imports are handled slightly different from other annotations imports. in particular, pathway tools has specific requirements for the storage of go term descriptions within a biocyc database. the pathway tools api provides a method called “import-go-terms” which automatically creates the necessary frames when provided with a valid go term. pathway tools is packaged with a file containing go term information which is used by this method to populate the go term frames it creates. cyctools makes a call to “import-go-terms” once for each go term that appears during a go term annotation import.

resolving alternate identifiers to database frames
each frame object in the database is uniquely identified by an internal identifier known as the frame id. the biocyc framework supports annotating frames with alternate identifiers, such as those which are commonly used in literature to refer to genes, proteins, and other biological objects. for example, “pyruvate” in ecocyc has the synonyms alpha-ketopropionic acid, bts, α-ketopropionic acid, acetylformic acid, pyroracemic acid, 2-oxopropanoic acid, pyruvic acid, 2-oxopropanoate, and 2-oxo-propionic acid. despite the availability of these alternate identifiers, all queries to the database must resolve to valid frame ids. a key benefit of cyctools is support for automatically resolving alternate identifiers into frame ids, removing the need for researchers to perform the conversion manually. alternate identifiers must already be annotated to the object they identify within the database and must be stored in one of the slots designated as a “name” slot in pathway tools. these slots typically include the “accession” slot, “common-name” slot, “synonym” slot, and foreign database identifiers used in the “dblink” slot, but can vary with object type.

during the import process, cyctools attempts to resolve all user provided identifiers into frame ids. first, cyctools checks if the user provided identifiers match exactly to any existing frame ids. if all identifiers are determined to be valid frame ids, no further action is needed and the id resolution step is skipped. if one or more ids are not valid frame ids, cyctools will attempt to resolve them into valid frame ids using an indexed text search within the database using the “substring-search” method provided by the pathway tools api. the substring-search command can find objects with frame ids that exactly match the search string which match to a substring of any “name” slot. the search term provided by the user must be at least  <dig> characters with no commas or spaces. this method requires the user to specify the object type to search and the alternate identifiers to be converted to frame ids. for each identifier in the import file, cyctools requires that the searched term match exactly and entirely to at least one synonym provided by the database for the matching object. thus, while substring search will match a partial identifier to a frame, cyctools enforces a stricter matching policy by filtering out matches that do not contain complete matches to an alternate identifier. additionally, cyctools requires that only one such matching object be found in the database. if the search returns only a single frame, that frame’s id is substituted for the searched term. if multiple matches or no match is found, the user is given the option to ignore that data during import, or to cancel the import process altogether.

create transcriptional regulation frames
importing novel transcriptional regulatory interactions requires creating regulation frames within the biocyc database to represent the interaction. since this import type generates new frames rather than modifying existing ones, the user does not provide frame identifiers with the import data. as a result, no frame id search is necessary. cyctools instead requests unique sequential identifiers for each new regulation object created. cyctools is not able to recognize if an equivalent regulatory interaction exists in another regulation frame, and therefore relies on the user to ensure that regulatory interactions are not duplicated.

delete frames
cyctools implements frame deletion using the pathway tools api method “delete-frame-and-dependents”. this method detects the object type of the frame which is being deleted and attempts to also delete any frames which depend on the deleted frame. for example, deleting a gene frame will also delete the gene’s products, and potentially enzymatic reactions which depend on an enzyme produced by the gene. regulation frames and history note frames linked to the deleted frame are also deleted.

preview changes
before any permanent modification is made to the database, the user can preview the pending changes to the database. a list shows all frames that will be updated as per the user data. individual frames can be viewed which will compare the original frame data to the modified data. all changes between the original and modified frames will be highlighted to help the user more easily verify the import. the differences are calculated using a free library called google-diff-match-patch  <cit> . highlighting is inferred from the text differences reported by the diff tool.

commit to database
after the update is performed, the results of the update can be reviewed. this will provide a log of the successful and failed imports which can be used to verify the success of the import, or to track down problems with the data. each individual import will be listed as either successful or failed, will be time stamped, and will refer to the original row of data in the spreadsheet which that update represents. note that it may be possible to have several updates refer to the same row of data. at this point, the database is in a modified but unsaved state. if the user is satisfied with the update, the changes can be permanently saved to the database. otherwise, the user can undo all changes to the database since the last save. the user will also be given the option of saving the change log to a file.

import error detection
cyctools checks for errors and provides user feedback at several points during the import process. cyctools will directly reject syntax errors such as bad file formats of invalid references to database objects. illegal database operations on the biocyc database will cause failed imports in the final commit step, which will be flagged to users so that they can revert the database to an unmodified state. imports with identifiers which cannot be resolved to existing database objects will be reported to the user as such.

many errors in data entry are technically valid and thus cannot be differentiated from intentional input. if a slot label is misspelled, for example, cyctools will assume the user intends to create a slot using the misspelled label. the preview step provides users with a frame-by-frame comparison of the database in a modified and an unmodified state. users are encouraged to browse the anticipated changes in order to detect any data entry errors that would otherwise be valid imports.

RESULTS
use case: maizecyc and corncyc go term annotation migration
maizecyc  <cit>  and corncyc  <cit>  are two separate biocyc databases both based on the zea mays b <dig> refgen_v <dig> gene models  <cit> . maizecyc is developed by gramene  <cit>  in collaboration with maizegdb  <cit>  and corncyc is developed by plant metabolic network  <cit>  and maizegdb  <cit> . recent comparison between maizecyc and corncyc revealed annotation differences in data content and quality despite both databases having been based on the same reference sequence  <cit> . maizecyc does not contain alternative splicing information; therefore each gene is only linked to a single gene product. corncyc does contain alternative splicing information, where gene products linked to alternate splice variants are suffixed with a numerical identifier. it is interesting to note that even though maizecyc does not contain alternative splicing information, it still uses the numerical suffix convention for differentiating between alternately spliced proteins.

recent curation efforts have provided go term annotations for several proteins in the maizecyc database; however corncyc version  <dig>  does not currently contain any go annotations. since maizecyc and corncyc both were created using the same sequence data and represent the same biology, the biological functions of maizecyc genes should be identical to those of corncyc genes. in an effort to update the go term annotations of the maize genome databases and ensure consistency across both databases, the manually curated go annotations needed to be transferred from maizecyc to corncyc.

all go term assignments and their annotations were exported from maizecyc using a query to the pathway tools api and are provided in additional file  <dig>  go term/annotation pairs with an evidence code beginning with ev-exp  were retained, while all others were removed. this represents the go term annotations which have been manually verified by curators. source protein objects were identified by their gene model name  with the splice variant suffix attached . this identifier was chosen as it is provided as a synonym in both maizecyc and corncyc, which allows for accurate mapping between objects in both databases. although maizecyc and corncyc were built using the same gene model set, the internal frame ids of the protein objects in pathway tools were generated with different syntax rules .

in order to ensure the most faithful mapping between maizecyc and corncyc proteins, protein identifiers from maizecyc were used as query terms in a substring  search in corncyc. exactly matching splice variants provided  <dig> matches between maizecyc and corncyc as seen in figure  <dig>  while an additional  <dig> matches can be made between this group of maizecyc and corncyc proteins by relaxing the requirements to allow matches between alternate splice variants, these additional matches were not included in the final import. the remaining  <dig> gene products from maizecyc with ev-exp annotations do not exist in corncyc. the annotation data for the  <dig> matching protein go term annotations were inserted into the corncyc database using the cyctools import feature.go term annotation import into corncyc. go term annotations obtained from maizecyc are imported into corncyc. user provided gene model identifiers are resolved to database frame ids before import.



use case: creating strain-specific ecocyc databases
metabolic engineering projects lead to the generation of genetically unique strains. these altered strains are metabolically similar to the parent strain, but include a small number of modifications such as gene additions, deletions, or regulatory changes. many novel strains may be created as a result of iterative engineering interventions performed on a parent strain. one possible solution to storing this information is to generate a new biocyc database that is synchronized to the altered metabolism of the engineered strain. by using the most up-to-date version of ecocyc and modifying it with information on engineering interventions, a new database is created which more accurately represents the engineered strain. this use case focuses on modifications to the e. coli organism performed for the increase of fatty acid production.

e. coli strains
of the many strains of e. coli that are represented as model organism databases in the biocyc database collection, ecocyc has received the most manual curation. it is therefore desirable to leverage annotations from ecocyc whenever possible while developing new strain databases. the metabolically engineered strains for which strain specific databases were developed in this study, strain ml <dig> and strain mlc115- <dig>  were described in liam et al.  <cit> . the genotype of ml <dig> is mg <dig> Δfadd. the genotype of mlc115- <dig> is mg <dig> Δfadd, Δpoxb, acka-pta::cmr.

new regulatory links were predicted using the gtrnetwork software  <cit> . these results were derived for the mg <dig> network, and so were applied to a copy of the wildtype ecocyc database rather than the ml <dig> or mlc115- <dig> databases.

copy ecocyc
it is important to retain as much known information from the parent strain as possible, therefore the first step is to create a clone of the database representing the parent strain. once the copy has been prepared, further modifications are necessary to align it to the altered metabolism of the engineered strain. in this case, the ecocyc e. coli mg <dig> database is downloaded   <cit>  and a copy is made to represent our strain specific database.

strain specific updates to ecocyc
three types of data were added to the base ecocyc database in order to represent changes in the engineered strain’s metabolism. a gene deletion in the strain is represented in ecocyc by a deletion of the associated gene object and the gene object’s functionality. if the gene product is an enzyme, then that protein product is deleted and any reactions it catalyzes have that enzyme association removed from them. if the reaction has no existing enzymes which can catalyze the reaction, then the reaction is also removed. if the gene is a transcription factor, than the transcription factor is removed as well as any regulation objects in which that transcription factor was either a regulator or target. preprocessing for this database modification simply requires compiling the list of genes to delete. cyctools automatically removes additional objects which are connected to the deleted gene as described above.

a thioesterase with altered specificity added to the strain improves specificity for specific fatty acid chain lengths. this does not represent novel metabolic functionality in the strain, but rather changes relative activities of an existing functionality. since kinetic information and relative specificities of enzymes is not stored explicitly in current pgdbs, this information is best added to the comments section of the existing enzyme. preprocessing in this case requires the user to explicitly write out the comment and provide the identifier of the enzyme to be modified.

the final modification made to the base ecocyc database is the inclusion of novel computationally predicted transcription factor regulation. these regulatory interactions were predicted using gtrnetwork  <cit>  and can be found in additional file  <dig>  transcription factor regulatory interactions in ecocyc are typically described by a regulation object which describes a transcription factor’s regulatory activity of a transcription factor binding site, but can also be described as a direct interaction between the regulating entity and the regulated gene. as the results produced in this computation prediction tool do not provide predicted binding sites, binding site information is not available for import. preprocessing in this case requires the user to assemble the list of regulator and target interactions.

each type of modification to the ecocyc database must be made separately. in this case, the three modifications, gene deletions, thioesterase comment, and predicted regulation, represent three types of modification. gene deletions are removed from the database by selecting the frame deletion option and loading the list of genes to be deleted. cyctools automatically removes extended links to the provided genes, such as their products and reactions. the thioesterase comment is performed as an update to an existing frame. a file with the comments is loaded and cyctools appends the new comment to the end of any existing comments on the enzyme. importing novel predicted transcription factor regulation requires creating new regulation frames. this process is performed as two steps internally to cyctools. first, new frames are created using the user provided unique frame ids. an import step is then used to load the regulation data into the newly created regulation frames.

CONCLUSIONS
managing and migrating manual annotations in model organism databases are essential to maintaining high-quality biological data. in this work we present a software tool which provides a simple pipeline for the maintenance and transfer of manual annotations within and between biocyc databases. cyctools improves user control over the import process by providing users with methods to edit slot values or slot-value annotations for any frame in a biocyc database. cyctools also provides methods which allow users to create transcriptional regulatory frames or to delete frames through the import process.

cyctools provides methods that can make small or large-scale edits to a biocyc database. databases using the biocyc framework typically contain between a few frames and several thousand frames. cyctools is capable of processing and displaying several thousand entries, but is limited to a single object type for each import. this means that cyctools is best suited to making many changes to a biocyc database of a specific type, rather than making many small changes to various object types.

tracking the changes made to a biocyc database is made easier with cyctools. the biocyc framework provides methods to credit an author or organization for frame edits. cyctools allows users to provide curator information which is stored in the biocyc framework during the import process. cyctools also provides a change log of actions taken during import in order to assist users in recording changes and identifying problems.

in this manuscript, we have demonstrated the utility of cyctools by transferring go annotations between two databases representing identical biology but having differing data content. we have also demonstrated the ability of cyctools to make several small scale changes to a database in order to customize the content to represent a non-model organism.

availability and requirements
project name: cyctoolsproject home page:https://github.com/jrwalsh/cyctools/operating system: any platform supporting javaprogramming language: javaother requirements: java  <dig> +, pathway tools, javacyco

pathway tools must be installed and running on a unix-like server system  and have the relevant pgdb installed. javacyco must be running in server mode on the same server as pathway tools. for remote connections, javacycserver listens over a port connection, so this user selected port must be open to outside traffic. cyctools is written in java and is thus cross-platform compatible, however java must be installed on the client machine. the version of cyctools used in this manuscript can be found in additional file  <dig> license: gnu gplany restrictions to use by non-academics: none

additional files
additional file  <dig> 
examples of file formats. this file contains examples of the “lisp-format” and the “spreadsheet format” file formats accepted by the pathway tools import utility.



additional file  <dig> 
cyctools user’s manual and installation instructions. this file contains instructions for installing cyctools and its dependencies. this file also includes descriptions of the options available in cyctools.



additional file  <dig> 
biocyc database copy utility. this file contains a bash shell script which will copy a biocyc database file and automatically perform the necessary renaming steps required to differentiate the new copy from the old. this is required to allow both copies to be loaded in pathway tools memory simultaneously.



additional file  <dig> 
go term annotation data from maizecyc. this file contains the go term annotations that were extracted from maizecyc and were imported into corncyc. the file is formatted as comma delimited values.



additional file  <dig> 
predicted regulatory links for ecocyc. this file contains the transcriptional regulatory links predicted by the program gtrnetwork for the e. coli network. these links include a regulatory mode such that “-” implies downregulation and “+” implies upregulation. an empty value in this column implies that the regulatory mode could not be determined.



additional file  <dig> 
cyctools source code. this file contains the source code for the cyctools program.



competing interests

the authors declare that they have no competing interests.

authors’ contributions

tzs and jrw conceived, designed, and coordinated the project. jrw developed and documented the software, and drafted the manuscript. jad provided advice and guidance on the software development and drafting of the manuscript. all authors read and approved the final manuscript.

