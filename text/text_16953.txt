BACKGROUND
in metabolic flux analysis , fluxes are defined as the flows of molecules between different metabolite pools catalyzed by the corresponding enzymes and/or transporters. mfa allows the determination of in vivo fluxes in a given metabolic network. to achieve this, mfa combines a stoichiometric model, as the mathematical representation of the metabolic network, and measurement data from isotope labeling experiments  <cit> . taken together the model and the metabolite labeling information facilitate the calculation of in vivo fluxes not accessible by direct techniques. however, mfa is characterized by certain technical and conceptual challenges, for example the exact quantification of the stable isotopes introduced to the system under investigation  <cit> . the determination of the amount of label taken up is complicated by several factors:  naturally occurring stable isotopes  of almost all elements found in metabolites, including 13c:  <dig> %, 2h  <dig> %, 17o  <dig> %, 18o  <dig> % 15n  <dig> %, and 34s:  <dig> %,  <cit> ;  additional elements with stable isotopes introduced by derivatization such as 29si or 30si, natural abundance  <dig> % and  <dig> %, respectively  <cit> ;  proton gain or loss during mass spectrometric analysis. the extent of this depends on the chemical nature of the metabolites, the mass spectrometric technique employed, and the sample composition, e.g. the mclafferty rearrangement  <cit> ; and  dilution by the original biomass of the biological sample prior to the feeding of isotope labeled tracers  <cit> . to avoid systematic errors in the determined fluxes, the labeling levels detected have to be corrected for these biases.

in other “omic” technologies higher throughput rates have evolved through the development of more efficient workflows. this involves automating and integrating different steps of the analytical process. the example of metabolomics is instructive where sample preparation, spectrometric analysis and data processing are now routinely integrated  <cit> . as parallel processing of samples and automated instrumental analyses have become common, accurate processing of labeling data can limit the throughput of flux analysis or profiling. a typical isotope tracer experiment can result in multiple chromatograms, each containing mass spectrometric  information on dozens of analytes, each of which can yield mass isotopomer patterns of multiple fragments. the entirety of mass isotopomers of a fragment ion is called the mass isotopomer distribution vector   <cit> , cf. figure  <dig> 

the capability for high–throughput labeling studies was recently demonstrated for cell cultures of mammalian cells or microbes. steady state flux analysis  was performed with up to  <dig> strains of bacillus subtilis <cit>  using one labeling substrate, as well as  <dig> strains of escherichia coli <cit>  using four different labeling substrates and the isotope labeling data of ~ <dig> amino acids were analyzed. time course labeling experiments using multiple labeling substrates were performed with human cells, with two treatments,  <cit>  or clostridium acetobutylicum <cit> , at ~ <dig> time points, with up to  <dig> analytes measured by liquid chromatography – mass spectrometry . however these examples of high-throughput experiments are still the exception. in general the throughput has not dramatically increased in the last several years, although the number of analytes for which labeling can accurately be detected in a single run is now potentially much larger  <cit>  and the value of multiple biological replicates using different label combinations has been demonstrated  <cit> .

a range of useful software is available that perform different aspects required for mfa including ms data extraction  <cit> , data correction  <cit> , model development and analysis  <cit> , see table  <dig>  so far only one unified framework exists, fiatflux <cit> , which attempts to combine all of the above mentioned aspects.

a directly from chromatogram files like net-cdf files.

b multiple compounds in multiple chromatograms.

c the data processing is independent from the utilized labeling substrate  and can be adapted to other elements then carbon .

d requires additional software in order to be used like matlab or perl.

e functional support is provided but not directly integrated.

abbreviatons: na - natural abundance; noi - naturally occuring stable isotopes; obm - original biomass; gc - gas chromatography; lc - liquid chromatography.

consequently the automation of ms data processing, examination and correction of large and heterogeneous tracer experimental datasets would provide a more efficient workflow and bring mfa significantly closer to being a high–throughput technology. here we describe ims2flux, a tool that provides a framework for a standardized workflow to automatically process ms data from isotope tracer experiments. it includes data quality checks as well as correcting the ms data for nois, proton loss or gain and original biomass. finally the processed data can be delivered in formats used by mfa dedicated modeling software.

implementation
ims2flux has been developed in perl  which is available for all major computing platforms. ims2flux consists of five major parts: data input, data checking, data correction, post correction checks, and output . additionally a graphical user interface for microsoft windows™ has been developed in visual basic.

input
there are three distinct input components:  <dig> ) command line arguments to set program options or to override regular operation;  <dig> ) the configuration file , which provides settings for various program options and the names of additional files containing pertinent information;  <dig> ) a primary input data file containing the ms data and additional data files, if needed, for a variety of information, such as original biomass  or the names for groups of biological replicates. the ms data consists of mdvs , all measured intensities or ion counts of the mass isotopomers of given analytes or fragments. if multiple chromatograms represent biological replicates they may be treated as individual datasets or averaged . each supported compound is provided as a unique extension of the parent data type class. each extension is named dataclass_xx.pm, where xx is a unique two character identifier for each supported compound class. the currently supported compounds are specified in table  <dig>  by following a modular approach, new compounds can be easily added using the existing compounds as a template with minor additions to the main program . the only additional information required is the elemental composition and structure of each analyte.

the options available for processing the ms data depend on the actual data provided. a part of modularity in design includes the presentation of data, as such the main data format is text based, spreadsheet-compatible, tab-separated values . in this standard matrix the first column contains the analyte identifiers; the second column the mass of the respective mass isotopomers and the following columns the measured intensities for each chromatogram; the first row contains an optional title in the first element; the second row contains the identifiers for each chromatogram, an example is given in the file example_aa.txt . this is a one dimensional data representation, meaning that each data file contains only a single type of data, such as raw ms measurements  or retention times. therefore, to provide multiple types of data requires one tsv file per data type, otherwise there is no restriction on the type of data that may be represented. in addition to the standard tsv format, third party/proprietary formats may be used through a custom import module. a third party module that is currently available extends the supported import formats to include the waters quanlynx™ report formats. for a detailed description of working through this format see the getting started guide; msto13c with quanlynx and ims2flux.pdf .

due to the highly individualized nature of data extraction from ms chromatograms from different instruments, ims2flux does not extract ms data directly from chromatograms represented in proprietary formats. instead one can use the extraction capabilities of third party software, e.g. tagfinder  <cit> , mzmine  <dig>  <cit>  or commercial solutions such as waters quanlynx™.

data checking
when implementing any form of automation it is crucial to thoroughly verify the quality of the original data. thus before performing any data correction the program can perform several checks: first a simple check for missing values is performed; additional optional checks are: thresholds for minimum and maximum signal intensity , this is applied to all ms data including boundary data , and deviations from the expected retention time window  of a respective analyte. most data checks are performed on a per-fragment, per-chromatogram basis, with the exception of the retention time check. for statistical significance the mean and standard deviations of the retention times are calculated over all fragments and all chromatograms, which is valid for any set of chromatograms measured continuously in a given set of samples. a complete example illustrating the use of retention time analysis as a data check is provided in the appendix of the users’ manual . if any errors are found the program generates a list of the affected data and allows the user to review the data, going back to the chromatogram if necessary, manually edit or regenerate the data, and adjust the selected data check parameters if desired. feedback is provided in tsv format, with any errors located in the position corresponding to the flagged data. in this way the error feedback can be overlaid as a mask on the measurement data facilitating user review of the flagged data.

each chromatogram has to be composed of the same groups of mdvs. the first mass of these vectors is assumed to be the m+ <dig> mass isotopomer , and is used to identify a fragment. each fragment has a predetermined number of carbon atoms, and the last mass of a fragment is m+number of c-atoms  . for example, the molecular ion of alanine has a  <dig> carbon backbone, thus the last mass fragment would be m+ <dig>  it is also allowed to provide incomplete fragments. the default behavior of ims2flux is to expect that each fragment’s measurement value is provided in order. when an out of order mass is encountered ims2flux considers it to be the start of a possible new fragment. thus, if a mass is missing in the middle of the mdv, ims2flux does not assume it is zero. instead the fragment is treated as incomplete, and the remaining measurements belong to a non-existent fragment . in such a case or whenever unknown data is encountered feedback is provided identifying where the problem was encountered. the program can also process boundary data around each mass fragment. if included, it can extract m-n and/or m+numc+n data points  which may be monitored for their relative value. to use either of these options all fragments must be consistent in the number of extra data points.

data correction
each mdv is corrected separately and the resulting corrected intensities scaled to 100%, of the sum of all signals in the mdv. the corrections, if any, are applied in the order they are listed in the configuration file. if no corrections are specified, the uncorrected data are scaled and may be used as is.

correcting for proton loss  <cit> , see figure 3b, or proton gain  <cit> , is required when an individual hydrogen atom is lost or gained by the analyte during the ms process. proton gain is characteristic for fatty acids when measured via gc-ms and adds mass to the mclafferty ion of fatty acid methyl esters  <cit> . for this correction it is assumed that the loss or gain affects a fixed percentage of the molecules, regardless of their labeling. this fixed percentage is called the scaling factor α. in the example illustrated in figure 3b an analyte with a 2-carbon backbone is measured including the first preceding border mass, identified as mass m- <dig>  the analyte suffers a single proton loss, causing a fixed percentage of each mass measurement to be artificially reduced, and for a non-negligible measurement of the m- <dig> mass, as described by the following set of equations:


 m−1meas=m−1'−αm−1'+αm0'm0meas=m0'−αm0'+αm1'm1meas=m1'−αm1'+αm2'm2meas=m2'−αm2' 

the non-linear set of equations is solved iteratively for the scaling factor, assuming the ideal case that the real boundary measurement is negligible. in the case where this assumption is not valid, it is possible for the scaling factor to be artificially inflated or for no stable value to be found. when no scaling factor is found the original data are left uncorrected. similarly, correcting for proton gain requires the following border measurement, m+numc+ <dig> 

the main correction is for naturally occurring stable isotopes, or natural abundance . correcting for nois , is performed for the specified set of elements that make up the measured analytes. for a given element, the na of n atoms with n stable isotopes ii, each with probability p and occurring f times in the analyte is given by:

 abundance=n!·Πi=1npiifiifii! 

due to the diminishing probabilities of multiple heavy atoms occurring in one molecule by natural abundance, correction is performed only considering the labeling probabilities of the m+ <dig>  m+ <dig> and m+ <dig> isotopes of these elements  <cit> . a correction matrix is generated based on the number of atoms of each element considered and their natural isotope abundance  <cit> . the square size of the resulting matrix is related to the number of mass isotopomers, i.e. the size of the mdv, of the fragment being corrected.

for labeling experiments where the period of steady state metabolism during labeling is limited, the original biomass  makes up a significant percentage of the final biomass  <cit> . under this condition it is necessary to remove the bias of the original unlabeled biomass from the labeling data. this correction for original biomass  subtracts the obm from the measured fragment  <cit>  by using the natural abundances of the carbon isotopes  to distribute the obm over each measured mass isotopomer in a fragment. this correction requires an additional data file containing information of the percentage of obm in each sample, an example is given in the file obm.txt .

post correction checks
once the ms measurement data has been corrected, it is possible to perform additional checks, such as for average labeling. average labeling is the calculation of the average labeling due to the supplied label , and therefore must be performed after correction of the data. the average labeling is calculated on a per mdv basis as well as for an entire data set, and may be calculated for each chromatogram separately, or over each replica group. to be most useful the average carbon labeling must be performed on ms data from both labeled and unlabeled samples to identify possible contamination in individual mdvs, entire analytes or individual chromatograms. as with the other data checks the feedback is provided in matrix format  for manual analysis, allowing contaminated data to be excluded before further use. a complete example illustrating the use of average labeling is provided in the appendix of the user’s manual .

output
output is generated at different stages of processing. if the raw data is to be output, ms measurements and retention times, this occurs immediately. output may also be generated after the data checks and, as specified in the configuration file, at the completion of processing. all data types are generated in the standard tsv matrix, with one type of data per file. if feedback is generated during the  data check phase the program is terminated without performing correction. if the post correction data check is selected, output is always generated for both the average carbon labeling and the desired output as specified in the configuration file. processed data is generated for each chromatogram with all boundary data removed. even with no corrections selected, processed data for each fragment will still be normalized. in addition, if there is more than one replicate, basic statistics may be generated over each set of replicate data. for the calculation of statistics with replicate data the number of replicates in each group must be specified in the configuration file. correspondingly, the experimental data for replicates must be given in consecutive order  in the input ms data file, and in the same order as the number of replicates entered in the configuration file. in the case of no replicates, a default value  is returned in place of the standard deviation to ensure compatibility . optionally a file containing unique identifiers may be included for each experimental replicate set; otherwise generic file names are used for each replicate group.

in addition to the standard output format, ims2flux can generate data directly for use with third party mfa tools. currently support is provided for the ftbl format for use with 13cflux <cit>  the csv format of openflux <cit>  and the fml format of 13cflux <dig> <cit> . for 13cflux the ms measurement data can be generated for inclusion in either the ‘mass spectrometry’ or ‘label measurements’ sections of an ftbl file. this data can be generated into a set of individual files , or it can be directly included into one or more model files . to facilitate the use of analytes from different compound classes  ms data can be appended to the existing ms data section of a given model file.

tool validation
ims2flux has gone through extensive validation of both the algorithms and the supported compound classes. in particular the central correction, for natural abundance, has been compared to both manually corrected measurements and those corrected by other correction tools. manual correction compared both hand calculated correction and cut and paste with an excel spreadsheet  <cit> . the algorithm was also compared with both the corrector  <cit>  and to the matlab correction tool from wahl et al.  <dig>   <cit>  correction tools. minor variation was accounted for by different natural abundance fractions used in each method. similarly the proton loss and gain were compared with the results in  <cit> . a complete set of uncorrected amino acid measurements from  <dig> experiments is provided with the software, together with the expected corrected values.

RESULTS
ims2flux has been designed to act as a high-throughput framework for ms data analysis, targeting mfa as its primary application, but is not inherently limited to mfa. the software is designed to be modular and flexible emphasizing a standard data exchange format. the standard data format allows for easy access through any spreadsheet application, and is supported with import and export modules to easily allow new tools to make use of the data. in figure  <dig> an mfa workflow maximizing automation is illustrated, utilizing ims2flux to branch from data extraction to data analysis with 13c-flux software . ims2flux defines not only the generic correction tool, but a fully standardized data format, and through it an automated workflow connecting third party extraction and analysis tools.

the performance of ims2flux was tested on a commercially available pc. the perl interpreter was activeperl v. <dig> . <dig> . ims2flux is a non-threaded application and ran entirely on a single core. a set of gc-ms generated data comprising  <dig> chromatograms with a total of  <dig> fragments corresponding to  <dig> masses was processed in  <dig> seconds. to perform the benchmark ims2flux was set to check for missing data, detector threshold limits and poor peak values, extract an additional measurement  from each fragment, perform natural abundance correction, generate the carbon labeling summary , generate average and standard deviations over replicates, and generate a complete set of output data . the data was pre-screened to ensure that the ms data would pass all data checks to complete processing.

as illustrated in table 1ims2flux offers a variety of options for data correction. similar to mscorr, it offers checks to ensure the ms data is within the upper and lower boundaries of the ms detector, whereas the tool corrector <cit>  assumes the process ms data is accurate. depending on the tools used to extract the relevant ms data from chromatograms, e.g.  <cit>  or manufacturer software, checks for data accuracy and quality can be performed during data extraction. openflux <cit>  is an mfa analysis tool that also provides a noi correction tool . similar to mscorr, the openflux correction is provided as a function in matlab  which requires the user to enter the chemical formula and other specifics about each compound individually. mscorr, corrmatgen, and corrector correct for nois, ims2flux allows additional correction methods: for original biomass as well as proton-loss or gain. furthermore, ims2flux is capable of performing all the above mentioned corrections on large and heterogeneous data sets, comprising multiple analytes with multiple mdvs in multiple chromatograms. the addition of new analyte sum formulas in ims2flux is intuitive, since it only requires the total chemical formula of the new analyte, without separation of the metabolite derived part of an analyte from any derivatization reagent additions. alternatively fully generalized analyte classes supporting multi-stage and multiple alternative derivatization are also possible. finally the output of ims2flux is ready-to-use in mfa-dedicated software. the aforementioned fiatflux is able to correct gc-ms data for natural abundance and original unlabeled biomass. the quality of the extracted ms data is checked in a similar way as in mscorr, and faulty ms data can be removed manually from further calculations. similar to mscorr new compounds require a separation of the atoms of the analyte from the derivatizing agent. fiatflux is focused on deriving flux ratios and absolute fluxes for microorganisms solely from 1-13c and/or u-13c glucose experiments combined with gc-ms analysis of amino acids  <cit> .

although ims2flux was designed to serve the needs of mfa, it can be used as a general tool to quantify stable isotope labeling in any kind of isotope tracer experiment, e.g.  <cit> . furthermore, although carbon labeling with 13c is the method of choice in mfa, other elements such as nitrogen, hydrogen or oxygen are conceivable for tracer studies  <cit> . ims2flux can easily be adapted to any other element as isotope tracer. in order to allow the general application of ims2flux in mfa, independent of the ms platform the labeling data were acquired on, it was designed to process gc-ms, lc-ms or ms/ms data. additionally, besides data from steady state labeling experiments, ims2flux can process dynamic labeling data as well. for the exploitation of the full potential of dynamic labeling experiments, such as short labeling time  <cit> , it is necessary to be able to measure and evaluate ms data not only derived from metabolic end products  but from metabolic intermediates, which can have a very fast turnover  <cit> . this would increase the resolution of a metabolic network and can resolve precursor-product relationships which are difficult or impossible to resolve with data derived from end product labeling  <cit> . to give ims2flux this capability, data of the elemental composition of polar soluble intermediates of primary metabolism, as previously published  <cit> , were included. this list of supported analytes can be extended as needed, in case new metabolites are of interest or a different derivatization strategy is applied.

in the context of measuring complex biological matrices of soluble metabolic intermediates, similar to metabolic profiling measurements, it seems appropriate to use specialized software. since there are multiple software solutions available, especially dedicated to the alignment of multiple ms chromatograms and extracting the relevant ms data, e.g.  <cit>  or manufacturer software, our efforts focused on finding a general input format that supports the respective data outputs, the tsv format described above. ims2flux was implemented in perl which is freely available and runs on all major computing platforms. furthermore, ms data are usually provided in tabular form, which is either already in the tsv format, or is easily exported to tsv, thus a text manipulation language was the obvious choice. perl supports multiple programming paradigms and no compilers are required, as it is a dynamic language a respective script just needs to be edited and can be run directly. to further promote the use of ims2flux, the code is provided in full and since the program is not compiled the source is immediately available to be reviewed and extended for individual needs. to support flexibility the different data formats, optional data checks, data correction and output formats are contained in individual modules.

CONCLUSIONS
with ims2flux we have developed an ms data processing tool for isotope labeling experiments with special focus on increasing throughput at multiple stages of the data analysis pipeline. thus from the computational side mfa technology is now ready to be applied on a large scale, as is already common in the other –omics methods. by using ims2flux in our daily work we found that by liberating the researcher from the most laborious tasks of ms data processing, ims2flux removes the limitations on the number of samples that can be processed per tracer experiment, including the number of treatments or genotypes studied, the replication of each experiment, the number of substrate combinations used, and/or the number of time points analyzed. this increases the accuracy and coverage of ms data; in turn this has the potential to improve the accuracy  and scope of mfa and flux profiling and its integration into multiomic systems biology.

availability and requirements
project name:ims2flux

project home page:http://sourceforge.net/projects/ims2flux

operating system: platform independent

programming language: perl

other requirements: perl v. <dig> or higher

license: this work is licensed under the creative commons attribution-noncommercial  <dig>  unported license. to view a copy of this license, visit http://creativecommons.org/licenses/by-nc/ <dig> / or send a letter to creative commons,  <dig> castro street, suite  <dig>  mountain view, california,  <dig>  usa.

any restrictions to use by non-academics: license needed.

supporting information
the ims2flux software and all auxiliary files and instructions can be downloaded from the sourceforge project website: http://sourceforge.net/projects/ims2flux

the main download is a zip file, ims2flux.zip. when unzipped it will create a folder ims2flux containing the following:


•
readme1st.txt – a brief introduction and a complete listing of the directory structure.

•
ims2flux.pl - the main program,

•
ims2flux-manual.pdf – the user's manual,

•
example_aa – a folder containing all of the example files, including a copy of the expected results when running the example using the instructions in the relevant getting started guide.

•
fluxy_lib – a folder containing the program libraries common to several projects in the larger fluxy toolset,

•
getting_started – a folder containing instructions on getting started installing and using the software on different platforms, and

•
math – a folder containing the cpan library used by ims2flux.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
chp, jh, ysh and bj conceived the software. chp implemented the software. chp and mf implemented the graphical user interface. chp and jh drafted the manuscript. mf and ck critically evaluated the software. ck, ysh and bj revised the manuscript. all authors read and approved the final manuscript.

