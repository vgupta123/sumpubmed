BACKGROUND
maturation of second-generation sequencing technologies has created a wealth of genomic data to be systematically analyzed through several comparative genomic strategies in order to extract biological information from the patterns of conservation and variation observed in genomic elements shared within genomes . a mainstream analysis in the field of comparative genomics is the genome-scale computational search for groups of homologous genes evolving under positive darwinian selection, usually defined as genes with an elevated nonsynonymous substitution rate, since these groups of genes are of most interest to the understanding of how evolution works at the molecular level  <cit> .

studies of this nature have been used to detect genes involved in speciation  <cit>  and in the emergence of new phenotypic traits that increase evolutionary fitness . genome-scale searches for positive selection were also widely used to detect genes involved in host-pathogen co-evolutionary “arms race” in the genomes of several important pathogenic taxa such as escherichia coli  <cit> , salmonella  <cit> , staphylococcus  <cit> , streptococcus  <cit> , trypanosoma brucei  <cit>  and campylobacter  <cit> , among many others. on the host side, a significantly high number of genes involved in immunity-related processes were also detected in genome-wide searches for positive selection in mammalian genomes  <cit> .

while the considerable number of genome-scale positive selection detection  studies generated a substantial amount of valuable biological information, there is a lack of specialized software to perform such task in a general, automated, fast and statistically sound manner. several factors are responsible for this scenario. one important aspect is the fact that the automatic detection of positive selection on molecular data is not trivial from the computational point of view, requiring the generation of data structures computationally costly to be calculated. it’s prohibitive to run analyses on thousands of groups of homologs, such as in multiple sequence alignment, phylogenetic tree reconstruction and fitting of distinct codon evolutionary models to the data, using single processor software within a feasible time frame  <cit> .

another important aspect is the highly error-prone nature of the sequence and alignment data structures needed for gspsd  <cit> . several sources of error that can generate spurious positive selection detection are produced during common bioinformatics procedures, such as in genome assembly and gene prediction. among these errors are frame shifts, sequence ambiguities, gene fragments, chimeric sequences and pseudogenes considered as functional coding regions. other common sources of error include the recruiting of excessively divergent sequences to groups of homologous genes during automatic homology prediction. all of the aforementioned errors can generate spurious alignment of non-homologous codons and significantly interfere with the reliable detection of positive selection  <cit> . the occurrence of recombination events within homologous sequences can also significantly interfere with reliable gspsd, since the codon evolution models commonly used to detect positive selection do not take into account recombination as a possible source of variation of homologous positions and assume all the columns of a multiple codon alignment to share the same evolutionary story  <cit> . several predicted groups of homologous genes also contain mixed sets of 1- <dig> orthologs and paralogs, two biologically distinct gene groups that should be evaluated separately to investigate different biological questions  <cit> . finally, the simultaneous search for recombination and/or positive selection in several groups of homologs creates a multiple hypothesis-testing scenario that requires correct statistical treatment to control the frequency of type  <dig> errors  <cit> .

here we report potion , a unique end-to-end modular, customizable and parallelized pipeline that overcomes the above stated challenges to detect positive selection on genome-scale data in batch mode. potion allows users to easily and quickly survey their own genomic data of interest–large numbers of predicted genes and their homology relationships–for signs of positive selection. we demonstrate potion is able to classify a curated dataset of t. brucei paralogs previously surveyed for positive selection with high accuracy. as a case study to illustrate some of the unique features found in potion, such as the sophisticated sequence and groups filters and the heavily parallelized design, we applied our program to survey the complete set of coding sequences of  <dig> mycobacterium tuberculosis strains using distinct configuration sets to specifically stress how such features dramatically change the number and the quality of groups of homologs predicted to evolve under positive selection, or the time to process genome-scale datasets. potion detected several groups of positively selected homologous genes with known roles in the host-pathogen “arms race”, as expected for genes under darwinian selection in a parasitic species. an extensive literature review found no single pipeline that contains all the software, features and flexibility tied together in an integrated environment to perform gspsd in an automated manner. to researchers lacking bioinformatics expertise, potion offers the first end-to-end workflow to perform gspsd, although some bioinformatics skills are still needed to properly install and configure potion. to bioinformaticians, potion offers a customizable computational scaffold to perform gspsd experiments in a controlled and integrated environment. potion is distributed under gnu general public license version  <dig>  and can be downloaded at http://www.lmb.cnptia.embrapa.br/share/potion/.

implementation
general overview of potion workflow
potion is written in perl language and uses bioperl modules to handle sequence and alignment data  <cit> . our software was developed to explicitly model the procedures commonly performed during gspsd studies, and can be separated into two main conceptual steps . the first step comprises several sequential sequence and group filtering procedures based on quality and phylogenetic criteria, allowing users to start an analysis with automatically predicted sequence and homology data as input and proceed only with data suitable for downstream analyses. each filtering procedure is composed of one or more filtering steps that require distinct data to be computed  and are executed when appropriated data types are available .fig.  <dig> general schema of potion. black boxes represent user-provided files and final results, grey boxes indicate filtering steps, and white boxes indicate parallelized steps performed for each valid group of homologs. filtering steps comprise four sequential conceptual stages , each composed of one or more sequential filters . stage “a” comprises four filters for removal of sequence data:  absence of valid start and/or stop codons;  presence of non-standard nucleotides;  length not a multiple of three and  lower and upper bounds for sequence length. stage “b” comprises one filter to remove sequences and groups according to homology relationships within groups, allowing users to analyze biologically meaningful gene sets they wish . stage “c” comprises four filters for sequences and groups:  mean sequence identity of groups or of individual sequences;  removal of groups containing any sequence removed in previous steps, allowing users to analyze only high-quality data since the beginning of analysis;  removal of groups containing sequence and species count outside user-defined ranges and  removal of groups with no sequence from a user-defined anchor genome. step “d” comprises a filter where potion detects groups with evidence of recombination using three methods , followed by multiple hypothesis correction. after the filtering steps potion executes the following sequential analyses in parallel for each valid group of homologs: multiple protein sequence alignment using one out of three popular sequence aligners: muscle, mafft or prank; protein-guided codon alignment; alignment trimming using trimal; phylogenetic tree reconstruction using proml and dnaml from phylip; search for positive selection using codeml–site-model analysis using nested models m1a/m <dig>  m7/m <dig> and m8a/m <dig>  followed by multiple hypothesis correction. potion parses output files and writes final results files  for groups with evidence of recombination and positive selection



all remaining groups after filtering procedures are denominated valid groups and are submitted to the second step of potion workflow: a parallelized pipeline for positive selection detection comprising five tasks to be computed for each valid group–protein multiple sequence alignment, protein-guided codon alignment, sequence trimming, phylogenetic tree reconstruction and computation of likelihood values for nested codon evolution models . our software allows users to define several parameters to better model the data under analysis, such as choosing one anchor genome to report results  in reference to this genome, the genetic code to be used for translation of sequences, additional start/stop codons, or the biological partition of homologs  to be evaluated, among many others. a complete description of all parameters is available in “readme.txt” file, distributed with potion.

first step–data filtering
the first data filtering procedure executed in potion workflow–fig.  <dig>  “a) sequence filtering” box–comprises four sequence filters based on the following numeric and quality criteria:  absolute and relative sequence length ;  absence of valid start and/or stop codons ;  presence of non-standard nucleotides; and  length not a multiple of three. these filters are intended to remove potential problematic sequences for downstream gspsd that could inflate false positive error rates through sequence misalignment, such as gene fragments, assembly errors and sequences with extreme length values.

the remaining sequences go through a second filtering procedure–fig.  <dig>  “b) sequence/group filtering” box–that allows users to select groups and group partitions  for downstream analyses through a phylogenetic criterion, namely homology relationships. this filtering step is controlled by the variable “behavior_about_paralogs”, which can be configured to allow users to survey distinct biologically meaningful sets of sequences and groups regarding their homology relationships. at this step users can choose to  analyze all groups regardless homology relationships of sequences within them;  remove all duplicated genes within a given species  in all groups, analyzing only the remaining putative 1- <dig> orthologs;  remove all groups with paralogs, analyzing only “natural” groups of 1- <dig> orthologs;  remove all 1- <dig> orthologs and analyze all remaining paralogs together regardless the genomes they belong to; and  remove all 1- <dig> orthologs and analyze all remaining paralogs by creating a new subgroup for each genome.

during the individual computation of positive selection for each group other conceptual filtering procedures are available after multiple protein sequence alignment and after sequence trimming. the third conceptual filtering procedure–fig.  <dig>  “c) sequence/group filtering” box–contains four filtering steps. the first filter step allows potion to detect and remove highly divergent sequences and/or groups as measured by two metrics calculated by trimal, each one with cutoff values ranging from  <dig> to  <dig>  the first metric is used to remove divergent protein sequences, defined as sequences with mean identity  smaller than user-defined cutoff. the second metric aims at removing divergent groups, defined as groups with mean protein sequence identity  smaller than user-defined cutoff. groups from which sequences were removed due to excessive divergence are realigned after sequence removal with the same parameters before proceeding with analysis.

after this point potion performs a second quality filter : the removal of groups which contain any sequence removed during any previous sequence filtering step, allowing users to apply a very stringent filter and analyze only groups that contain high-quality sequence data from the beginning of the analysis. a third quality filter is performed at this point to remove groups that, after the previous filtering steps, contain less or more than the minimum and maximum number of genes/species defined by the user, respectively. potion computes a fourth optional sequential filtering step where users can define an anchor genome and therefore analyze only groups that, after all the previous sequence filtering steps, contain at least one gene from the anchor genome. potion will also report all results  in reference to the anchor genome, generating gene lists that can easily be used in downstream procedures, such as enrichment analysis. at this point users can choose between two anchoring modes: a strong mode, where groups without sequences from anchor genomes will be removed, as previously described, and a weak mode, where groups that contained sequences from anchor genomes which were removed during any previous filtering step will keep being evaluated. if groups contain more than one sequence from the anchor genome, or if no anchor genome was defined, potion reports the longest orf for each genome/group, respectively, or the first orf to be defined in the homology description file, if there is no length difference between sequences.

after sequence trimming potion performs a fourth conceptual filtering procedure–fig.  <dig>  “d) recombination detection filtering” box–to remove groups with evidence of recombination as implemented in phipack  <cit> . phipack performs three recombination tests , and potion can be configured to execute any of these three tests and to require both a minimum number of tests and which individual tests should be significant in order to infer the occurrence of recombination. since this procedure generates a multiple hypothesis scenario where each group will have an individual p-value for each recombination test, users can choose to control the type  <dig> errors through the false discovery rate , configuring potion to further analyze only genes with corrected q-values smaller than user-defined cutoffs for all tests executed. for instance, if users selected  the minimum number of positive recombination tests to be two;  the algorithm phi as obligatory to infer recombination detection; and  a recombination q-value cutoff smaller than  <dig> , potion will remove from downstream analysis all groups where recombination q-values are smaller than  <dig>  for phi test  and for one out of the two other tests . potion first tries to calculate q-values using the qvalue() method as described in  <cit>  and implemented in statistics:multtest perl module, estimating the proportion of true null hypotheses using a bootstrap procedure. if this computation fails for some reason potion will calculate q-values using the by() method  <cit> .

second step–massively parallel search for positive selection
the remaining groups after the filtering steps are considered valid groups and are submitted to the second conceptual step of potion, which consists on the heavily parallel execution of five sequential tasks for each valid group–multiple protein sequence alignment, protein-guided codon alignment, sequence trimming, phylogenetic tree reconstruction and positive selection detection . most tasks have execution dependencies, where one or more previously computed data structure must be available to compute the next sequential task for a given group. for this reason each of the five sequential tasks into each group is modeled into potion as an individual job to be computed when all prerequisites for that job are fulfilled. also, the computation of each codon evolution model is an independent job in potion workflow. potion makes use of computers with multiple processors and implements parallelization using the fork() function implemented in perl. in order to further increase potion’s performance we also implemented a line schema for the distinct codeml models where the computation of models prioritizes the order of models to be m <dig>  m8a, m <dig>  m <dig> and m1a when allocating a new codeml job to a free processor, therefore assuring that the most time consuming models start first during an analysis and minimizing the odds of starting time-consuming models later on.

users can select some parameters to modify third-party software behavior for each of the five conceptual steps, most of them related to critical speed or quality issues. ultimately experienced users can edit system calls for each third-party software they wish, or even include other software as needed to tailor the behavior of potion to better fit their needs. potion currently supports several established software for the computational steps needed for gspsd. for multiple sequence protein alignment users can choose one out of three popular multiple sequence aligners: muscle  <cit> , prank  <cit>  and mafft  <cit> . a comparative study demonstrated prank outperforms muscle for positive selection detection, suggesting prank may be the best choice to perform gspsd  <cit> . potion executes muscle with default parameters; prank with the flags “-twice”  and “-f” ; and mafft with “–auto” flag for auto-configuration. codon alignments are produced by an internal potion subroutine using protein multiple sequence alignment as a guide.

for alignment trimming potion currently supports trimal  <cit> , which can be modified through a single argument: users can supply a numeric argument between  <dig> and  <dig> that potion will use as a lower cutoff for the maximum identity allowed for a given protein column alignment; alternatively users can use strings “strict” or “strictplus” as a parameter, which comprises two stringent filters that take into account column neighborhood for trimming and are recommended by trimal developers for better reliability. trimal also computes several identity metrics for each group, which are used to remove sequences and groups with excessive sequence divergence . the next step is the phylogenetic analysis, which can be done with the trimmed protein or dna sequence using the established proml/dnaml programs from the phylip package, respectively  <cit> . at this point users can select the number of bootstraps for reconstruction of consensus trees and “fast” and “slow” methods implemented in both software.

lastly, the trimmed codon alignment and the phylogenetic tree files obtained for a given group are used as input files for the codeml program to detect signs of positive selection using site-model analysis  <cit> . potion currently supports three popular nested models implemented in codeml , and future versions will include other models and branch- and branch-site analyses. the search for positive selection in codeml is done by comparing the log-likelihood values of codon evolution models that do not allow sites with positive selection  to the values of the more general nested models that also allow for site classes with positive selection occurrence . the p-values are calculated as 2Δℓ  based on the χ <dig> distribution with 2 ° of freedom for nested models m1a/m <dig> and m7/m <dig> and 1 ° of freedom for nested models m8a/m <dig>  similarly to the recombination analysis, this step is also a multiple hypothesis testing scenario, and therefore potion also reports corrected q-values from the list of p-values obtained for all groups evaluated using a given nested model pair .

RESULTS
classification accuracy benchmarking
we evaluated potion in terms of sensitivity, specificity and f-measure  by using it to classify a group of high-confidence curated t. brucei lineage-specific paralogs previously surveyed for positive selection, henceforth referred to as the tryp database  <cit> . this dataset contains  <dig> genes divided into  <dig> groups of paralogs, with  <dig> and  <dig> groups with and without evidence of positive darwinian selection, respectively . tryp dataset fulfills several criteria to be used as a gold-standard source of homologous genes to evaluate the potion algorithm as a whole due to the following:  it was generated by specialists in trypanosomatid genomics and is expected to represent true, curated groups of homologous genes  <cit> ;  all the sequence files are readily available and all groups of homologs are precisely defined;  the study evaluated site-model searches for positive selection in both m1a/ <dig> and m7/ <dig> nested codon models; and  the authors performed multiple hypothesis correction and reported corrected q-values .

we configured potion to mimic the original study as much as possible by using the same software versions and parameters, when possible. specifically we used:  muscle  to perform multiple protein alignments;  trimal  to filter out alignment columns with more than 50 % gaps;  dnaml  for phylogenetic analysis with  <dig> bootstraps and in fast mode;  the nested models m1a/m <dig> and m7/m <dig> of codeml  for positive selection detection ;  t. brucei genome as anchor; and 6) paralogs-only analysis mode.

when evaluating the tryp dataset we found  <dig> groups of homologs with significant evidence of positive selection for both nested codon models,  <dig> of which were also described as having been positively selected in the original study. potion misclassified two cases of exclusively purifying selection, identifying evidence of positive selection in two of the  <dig> groups where previous expert analyses suggests no occurrence of positive selection. potion achieved values of  <dig> ,  <dig>  and  <dig>  for precision, recall and f-measure, respectively .

a case study–mycobacterium tuberculosis
to illustrate how potion can be used to analyze real genome-scale data towards the identification of reliable positive selection, we used the genomes of  <dig> m. tuberculosis strains as a case study . also, to exemplify how the sequential quality filters implemented in potion could be used to remove noisy data we executed our software using two configuration sets, one with quality filters turned on to remove low-quality data  and another without any filtering step based on quality criteria , and evaluated the results produced by both configuration sets in comparison with similar published gspsd studies in pathogenic bacteria.

the filter experiment was carried out with the following configuration:  removal of sequences flagged in any quality filter  to remove spurious sequence data;  removal of sequences whose length falls a) outside the minimum and maximum range of  <dig> and  <dig>  nucleotides , respectively or b) the range of 20 % the median length of sequences within group , to remove putative gene fragments or other highly divergent sequences in terms of length;  removal of any genes from lineages with evidence of paralogy, to analyze only predicted 1- <dig> orthologs;  removal of groups containing sequences identical at the nucleotide level, to avoid spurious computation in non-informative groups;  removal of sequences or groups with mean identity lower than 70 %, in order to eliminate highly divergent sequences and groups in terms of similarity;  removal of groups that contain less than four genes/genomes after all previous filtering steps;  use of the m. tuberculosis h37rv as anchor genome ;  removal of groups with recombination evidence in at least two out of the three metrics implemented in the phipack package  , to avoid possible false-positives in recombination tests; and  removal of poor aligning regions using trimal on “strict” mode. the parameters of nofilter experiment are identical to the filter configuration, except that all filters that evaluate the quality of sequences, groups, and alignment columns were turned off . both datasets were analyzed using a multi-core computer with potion configured to use  <dig> processors.

we used the scripts distributed with potion to download and parse the genbank files corresponding to the genomes of the  <dig> strains of m. tuberculosis and to obtain the predicted coding dna sequences  and proteomes for each strain. the predicted proteomes, totalizing  <dig>  predicted proteins, were used as input for the orthomcl software with default parameters, which predicted  <dig>  gene products to belong to one of the  <dig> predicted groups of homologs with two or more sequences. potion was executed using the orthomcl main results file that describes the predicted homology relationships and the myc cds data as input .

a total of  <dig> individual genes were removed during gene filtering steps in filter experiment due to several quality issues, with a median value of  <dig> genes removed per genome . as expected, filters designed to detect extreme values of sequence data distribution in terms of similarity or length, or to remove genes with evidence of paralogy, a fair common evolutionary event, removed genes from the vast majority of myc genomes. on the other hand, filters related to specific error types in sequence data, such as absence of valid start/stop codons or length not multiple of three, removed genes only from a few genomes. still, these filters were able to remove hundreds of sequences that could potentially inflate false-positive rates of positive selection detection, such as potential gene fragments and truncated sequences. these filters also detected the highest error count amongst all genomes: m. tuberculosis str. haarlem/nitr <dig> contains  <dig> genes–approximately 90 % of all genes from this strain found in homologous groups–composed of non-standard nucleotides, even though this genomic sequence record is deposited in ncbi as a complete genome, a sequence status commonly related to high-quality data. potion also removed  <dig> groups of homologues in filter experiment. a total of  <dig> groups were removed due to gene/species count lower than cutoff,  <dig> groups were removed due to absence of a gene from the anchor genome,  <dig> because they are 100 % identical at nucleotide level, and two because mean group identity was smaller than cutoff. for recombination detection we used the same q-value cutoff used by  <cit> , since it appears to achieve an equilibrium between removing true examples of recombination without removing groups likely to be cases of positive selection. no recombination was observed for myc dataset, even when we used a less stringent q-value cutoff . this is coherent with m. tuberculosis lifestyle, since it lives mostly in an isolated environment, and is generally believed to be a highly clonal species with a low recombination rate  <cit> .

after the filtering steps potion selected  <dig> and  <dig> valid groups of 1- <dig> orthologs in filter and nofilter experiments, respectively . the groups from both experiments were processed with the same pipeline for positive selection, with the exception of alignment trimming using trimal , only executed in filter experiment. we used prank  for multiple protein sequence alignment, phylogenetic tree reconstruction using proml   and positive selection detection using codeml  . even though the tests implemented in codeml and used by potion to detect positive selection are conservative  <cit> , we decided to use an fdr of 5 %  to account for the fact we are working with population data, which increases false positive rate  <cit> .

potion detected  <dig> and  <dig> groups of homologous genes in filter and nofilter experiments, respectively, where both m <dig> and m <dig> models fitted the data significantly better than the simpler nested models, corresponding to  <dig>  and  <dig>  % of the valid groups of homologous genes evaluated in each experiment . the computation times for filter and nofilter dataset were approximately  <dig> and 50 h, respectively, in multiprocessor mode. both datasets were computed approximately 60× faster than it would have taken if executed in a single processor. a more detailed analysis of potion’s behavior when executed in parallel mode can be found in the “parallelization benchmarking” section. the filter dataset generated  <dig> gigabytes of raw data after analysis and used approximately a maximum of  <dig> gigabytes of ram.

when analyzing a group of genomes never surveyed for positive selection, metrics such as the ones used in the tryp experiment to objectively evaluate classification performance in terms of sensibility, specificity and f-measure cannot be applied due to the absence of a “golden truth” reference. for this reason we used the percent of groups of homologous genes under positive selection in studies where authors performed site-based gspsd in genomes of pathogenic bacteria as a proxy metric for positive selection detection quality. we made this analysis based on the premise that the vast majority of genes are expected to be evolving under stringent purifying selection, and only a minority of adaptive genes will be evolving at accelerated rates. we selected four of such studies that cover a wide range of bacterial lineages and of computational methods to compute positive selection and of filters to remove noisy data: listeria monocytogenes  <cit> ; escherichia coli  <cit> ; streptococcus  <cit> ; and actinobacillus pleuropneumoniae  <cit> .

the l. monocytogenes study used tribemcl  <cit>  for homology inference, clustalw  <cit>  for protein alignment, a single super-tree using all 1- <dig> orthologs, and implemented filters to remove sequences with duplications within genomes , frameshift mutations or premature stop codons and groups with evidence of recombination. the e. coli study used an in-house algorithm for homology inference, clustalw for protein alignment, a super-tree computed using all groups evaluated and implemented filters to remove sequences with low mean similarity, sequences with frameshift mutations, sequences with paralogs and groups with evidence of recombination. the streptococcus study used blastclust  <cit>  for homology inference, t-coffee  <cit>  for protein alignment, a super-tree from 1- <dig> orthologs using bionj  <cit>  and implemented filters to remove sequences smaller than  <dig> nucleotides, sequences with frameshift mutations or groups with evidence of recombination. the a. pleuropneumoniae study used blastclust  <cit>  for homology inference, t-coffee for sequence alignment, phyml  <cit>  for phylogenetic tree reconstruction, and filters to remove sequences with frameshift mutations or smaller than  <dig> nucleotides and groups with sequences smaller than 80 % of maximum sequence length within group, groups with presence of paralogs or groups with less than four sequences.

as expected, we observed only a small fraction of groups of genes under positive selection in the four studies previously described: l. monocytogenes– <dig>  % ; e. coli– <dig>  % ; streptococcus– <dig>  % ; and a. pleuropneumoniae– <dig>  % . the percentage of groups of genes under positive selection detected in the filter experiment  was much closer to the values observed in these four studies, whereas the nofilter experiment  contains a suspiciously higher fraction of genes under positive selection. it is worth mentioning that, although widely used by the scientific community, the results we present for the myc dataset, as well as for the other four gspsd studies of pathogenic bacteria, were obtained from population data. in this scenario a considerable number of mutations are not fixed, so instead of estimating dn/ds , potion  are estimating pin/pis . since codeml models were developed assuming somewhat distant lineages with fixed mutations, it is likely that all these results contain a higher rate of false positives  <cit> . to minimize this issue we used a q-value cutoff of 5 % for this experiment, even though similar studies usually choose a much less stringent cutoff  <cit> .

groups of homologous genes evolving under positive selection in pathogenic bacteria are commonly related to pathogenic lifestyle. based on this knowledge we performed a literature review to further characterize the  <dig> groups of homologous genes under positive selection detected in the filter experiment and evaluate if potion selected biologically meaningful groups of homologs under positive selection . several of the groups detected are involved in host-pathogen interactions, such as otsb <dig>  a putative peroxidase possibly acting in detoxification reactions  <cit> , narj, a subunit of a putative respiratory nitrate reductase essential for m. tuberculosis maintenance in specific host tissues  <cit> , and uvrd <dig>  a dna helicase known to decrease bacterial pathogenicity when deleted  <cit> .

a considerable number of the genes with roles in host-parasite interaction code for membrane-associated proteins physically located at the host-parasite molecular interface. we found  <dig> groups of homologous genes under positive selection to belong to the pe/ppe protein families, known virulence factors involved in evasion of the host immune response via antigenic variation and corresponding to up to 10 % of the coding regions of m. tuberculosis . in fact, a previous study investigated for signs of positive selection in three m. tuberculosis genomes and found  <dig> genes under positive selection, of which six comprised pe/ppe groups  <cit> .

other membrane-associated gene products under positive selection detected in the filter experiment are:  locus rv1635c, which codes for a putative mannosyltransferase predicted to be involved in the biosynthesis of lipoarabinomannan, a glycolipid that plays a major role in host immune system activation and modulation  <cit> ;  gene ddla, which codes for a d-alanine-d-alanine ligase involved in peptidoglycan biosynthesis;  genes lpqg and lpqm, coding for two lipoproteins involved in membrane and cell wall processes; and  gene mycp <dig>  that codes for a membrane-associated serine protease that is a major posttranscriptional regulator of esx- <dig>  a type vii secretion system used by m. tuberculosis to deliver virulence factors into host cells  <cit> . potion also detected several genes linked to intermediate metabolism and information pathways to be under positive selection, a phenomenon already observed in other gspsd studies in parasitic bacteria  <cit> . we also found several hypothetical groups of homologs with significant signs of positive selection that comprises interesting candidates for further research.

to demonstrate how the anchor genome feature can be used to easily perform downstream enrichment analyses and obtain a broad overview of the biological processes under positive selection in a specific genome, we used the h37rv strain as anchor genome when analyzing the myc dataset. the h37rv is the reference strain for m. tuberculosis  <cit>  and is consequently well annotated to distinct biological ontologies, therefore allowing us to directly survey the list of genes under positive selection obtained as output of potion analysis to observe the functional landscape of positive selection in this species through enrichment analysis  <cit> .

the tuberculist web tool classifies m. tuberculosis h37rv genes into  <dig> general categories to reflect the main biological roles of this organism, such as metabolism, cell wall processes, virulence factors and pathogenesis  <cit> . we computed the counts of genes that belong to one out of ten tuberculist categories that contain cds data  for both the list of positively selected genes in the filter experiment  and for all the  <dig> groups of valid genes from filter experiment . we found the category of pe/ppe paralogs to be significantly enriched  in the list of positively selected genes , strongly suggesting these paralogs are indeed key players to m. tuberculosis adaptation to parasitic lifestyle.fig.  <dig> tuberculist categories significantly enriched in positively selected genes in m. tuberculosis. the tuberculist category of pe/ppe paralogs is significantly more represented in the list of positively selected genes in h37rv strain when compared with all coding genes. count data for positively selected genes was obtained in filter experiment and count data for the background frequencies was obtained in the intersection of the list of all valid genes after filtering procedures that are also represented on a given functional category as defined in the tuberculist database  <cit> 



another source of biological information readily available for the h37rv strain genome is the annotation of cds data to gene ontology  terms through the blast2go functional annotation resource  <cit> . we used this annotation information to perform go enrichment analysis of all  <dig> genes under positive selection in h37rv annotated to at least one go term  when compared with all  <dig> valid genes from filter experiment that are annotated to at least one go term  using bingo with default parameters and a cutoff q-value < <dig>   <cit> . we found  <dig> significantly overrepresented go categories . the vast majority of terms are directly related to important mechanisms of mycobacterium host-pathogen interactions such as regulation, modulation and modification of the host immune response, membrane lipid metabolism, several cell wall processes, and receptor mediated binding  <cit> .

parallelization benchmarking
the parallelization performance of potion was evaluated on a multi-core server comprising  <dig> processors. to evaluate the parallelization schema implemented in potion we conduced three experiments with the myc dataset and one with the tryp dataset. in the first experiment we used a subset comprised of the first  <dig> groups of homologs predicted by orthomcl  while increasing the number of processors available . we observed that the total time taken to compute the whole dataset when increasing the number of processors available for computing appears to follow a power law distribution. we used a log-log plot and fitted a linear model to visualize and estimate the slope of the straight line that best fits the log transformed values , and found it to be of − <dig> . the first increments in the number of processors produce a much larger effect on total computation time than the last increments, suggesting that potion is reaching the theoretical lower bound of the total time to analyze all groups using the current algorithm.fig.  <dig> evaluation of potion parallelization. a time to compute the first  <dig> groups of homologs from the myc dataset while changing the number of processors. b time to compute the tryp dataset while changing the number of processors. time decreases in a power-law distribution as the number of processors increases up to the limits of the current algorithm implemented in potion



we monitored potion execution while varying the amount of groups and processors and found the cause of this phenomenon to be a few groups of homologs for which the time to compute all five tasks  is closer to or greater than the time to compute all other groups with a given amount of processors, causing these groups to be the bottleneck to finish the entire pipeline . we observed that this phenomenon is minimized in situations where the number of processors is much smaller than the number of groups to be computed such that the time to compute bottleneck groups is likely to be smaller than the time to finish computing all other groups, an expected scenario in genome-scale analyses using potion.

in the second experiment we similarly measured the time to compute the tryp dataset while increasing the number of processors . we also observed that the total time taken to compute the whole dataset to follow a power law distribution when increasing the number of processors  in a pattern similar to the one observed in myc dataset . potion was able to compute the tryp dataset in approximately 129 min with a single processor  and took approximately  <dig> and 15 min  to compute the same dataset with  <dig> and  <dig> processors, respectively, indicating that potion processed the entire dataset  <dig>  and  <dig>  times faster with  <dig> and  <dig> processors, respectively.

to further address how the time to compute data with potion scales with the number processors we performed a third experiment where we measured the sum of individual times to compute each individual task when analyzing the entire myc dataset using the filter experiment configuration , as well as the real time taken to compute the same data when allowing potion to use  <dig> processors. potion took approximately 1 day  to compute the entire myc dataset using  <dig> processors, and the linear time to compute this entire dataset with a single processor was calculated to be more than 2 months , indicating that potion processed an entire dataset of genome-scale data  <dig> times faster when in multi-processor mode.

we performed a fourth experiment to evaluate potion parallelization schema in order to detect possible fast computational methods to predict groups likely to take a long time to be computed, so those groups could be scheduled first when allocating a free processor, or not analyzed at all. for this purpose we plotted the time to compute the five most cpu intensive tasks   against several variables intuitively likely to influence the time to compute a task for a given group:  number of sequences;  alignment length;  mean pairwise protein sequence identity;  median pairwise protein sequence identity; and  standard deviation of pairwise protein sequence identity .

the profiles observed were very distinct within and between the independent variables evaluated. the number of sequences per group  appears to be the best overall variable to detect groups likely to spend more time to be computed . in a lesser extent, the alignment length  also appears to be a good predictor for computation time, especially for phylogenetic tree reconstruction. in these analyses it was also possible to observe that only a few groups are responsible for the greatest computation times, especially for the two most time-consuming tasks: model m <dig>  and model m <dig>  . although these three groups had an elevated number of sequences  with a relative small alignment length , these variables alone are not sufficient to detect such groups. for instance, the individual time to compute m <dig> and m <dig> models for the vast majority of other groups with an equal or greater number of sequences  is at least 300 % smaller than the time for these three extreme cases.

when plotting the time to compute tasks against independent variables that reflect group alignment identity we observed other interesting patterns that could potentially be used to identify groups with higher probability of increased computation time . although no clear correlation was detected , the groups with the highest computation times for models m <dig> and m <dig> possess higher mean/median sequence identity and, consequently, smaller standard deviation when compared with the other groups. a possible explanation for the long computation times observed in these groups is that there was not enough time for selection to get rid of mildly deleterious mutations  or that multiple optimal solutions for tree topology are available . taken together, it appears that there may be a pattern to identify groups likely to be time-consuming for specific tasks, such as number of sequences per group in the case of phylogenetic tree reconstruction or groups with a high number of near-identical relatively short sequences in the case of codeml m <dig> and m <dig> models. further studies in this direction will indicate if these metrics could indeed be used to detect such groups and consequently increase potion’s performance.

using fast alternatives to compute the results of the most time-consuming steps, such as in phylogenetic tree reconstruction  <cit>  and evaluation of likelihood of distinct codon evolution models  <cit> , in the next versions of potion are also expected to increase the computational efficiency of our software. another possibility to further increase the speed of potion is to use fast methods to detect groups that are likely to be time consuming  in order to allocate more processors to these groups in the case of parallelized third-party software available for a given step.

qualitative comparison of potion with similar software
due to both the scientific interest and the computational complexity in detecting positive selection in molecular data and on the genome-scale, not surprisingly, there are several software that partially automate some of the computational steps needed for gspsd. after a thorough literature review we selected six such programs  to compare with potion in order to highlight some of its relative strengths and possible improvements . all comparisons were made using the latest available versions of software at the time of publication of this article.

idea  is a standalone software that takes one or more user-defined groups of homologs in the form of aligned codons as input, generates nucleotide phylogenetic trees using maximum likelihood  implemented in phyml  <cit>  or maximum parsimony /neighbor-joining  methods implemented in phylip. it computes site- and branch-model positive selection using codeml. idea contains a graphical user interface  to fully configure the parameters of phylip and paml and displays results for site-model analyses in an interactive way, including individual sites under positive selection. this software can analyze several groups and tasks within groups in parallel on a local machine or computing grid and offers some extent of user data modeling by allowing the selection of distinct genetic tables.

jcoda  is a second standalone software that takes a single aligned or unaligned user-defined group of homologs as input and performs a codon-delimited alignment using clustalw  <cit> , followed by phylogenetic tree generation using nj, mp, or ml as implemented in phylip and positive selection detection using codeml site-model analysis . jcoda also provides a gui to configure software parameters and to display results and also presents some data modeling by allowing the selection of the genetic table to be used.

other classes of software for automation of positive selection detection are available as web tools. phyleasprog allows users to select groups of homologs through ensembl protein ids from a list of approximately  <dig> vertebrate species. this software can split groups of mixed homologs into 1- <dig> orthologs and paralogs and analyze each partition separately. muscle or prank are currently available for multiple protein alignment, gblocks  <cit>  and a home-made tool for sequence trimming, treebest for phylogenetic tree reconstruction , and evaluates site and branch-site searches using codeml. it is also possible to display positively selected sites on three-dimensional protein structures if structural data is available. phyleasprog contains some filters implemented, such as the capability to filter groups based on the comparison of alignment lengths before and after sequence trimming, removing groups with very short alignments after this procedure, and splitting of mixed groups in 1- <dig> orthologs and paralogs, evaluating each gene partition separately.

datamonkey is also a web tool and corresponds to a front end to some of the unique resources implemented in the hyphy package  <cit> . this software analysis starts with an aligned group of homologs and reconstructs phylogenetic relationships using nj  and positive selection detection using some of the methods implemented in hyphy package. datamonkey also allows users to select from distinct codon tables and offers positive selection detection methods that take into account the confounding effects of recombination.

selecton is another web tool that offers automation of positive selection detection. the initial dataset consists on a single group of aligned or unaligned cds. if users provide only unaligned sequences selecton performs alignment of translated sequences using clustalw and produces a phylogenetic tree using nj. users are also allowed to submit a protein data bank id, if available, in order to report results mapped to protein three dimensional structure data. users can also submit previously aligned codon data and phylogenetic data from other sources. as for positive selection detection selecton implements five codon evolution models: m <dig>  m <dig>  m8a, m <dig>  and mechanistic empirical combined  model, the only one that takes into account amino acid replacement rates as well  <cit> . users can visualize their results in both primary and tertiary structure data. selecton also models user data by allowing the selection of distinct genetic tables.

psp  <cit>  is another example of a web tool developed for gspsd. users start an analysis in psp selecting groups of closely-related prokaryotic genomes and parameters for execution and proceeds with  homology relationship inference using orthomcl followed by the identification of 1- <dig> orthologs;  protein alignment using muscle or mafft;  recombination detection using geneconv  <cit>  and phipack;  removal of highly divergent sequences using maxalign  <cit> ;  trimming of alignment columns using in-house scripts;  phylogenetic tree reconstruction using mp/nj  or ml  approaches; and  positive selection detection in site- and branch-modes using paml. psp contains several functionalities available after positive selection detection, such as visualization of alignments and enrichment analysis of kegg  <cit>  and go  <cit>  terms.

although all of the software evaluated partially automate positive selection detection to some extent, each of them individually contains only a few or even none of the features currently implemented in potion and, as demonstrated below through a qualitative comparison, none can be used as a general-purpose tool to infer positive selection on user-chosen, genome-scale data in an automated manner .

one of the unique features of potion is the complete integration with orthomcl  <dig>  and orthoxml formats, which allows users to take the output of arguably the most popular homology prediction software and of several databases of predicted homologs and analyze them in a straightforward manner using our software. regarding filtering procedures, three of the software evaluated do not contain any quality control step , requiring users to provide curated groups of homologous genes containing only high-quality sequence data. the three remaining contain only one or a few of the following filtering procedures:  sequence trimming ;  recombination detection ; and  removal of divergent sequences in terms of relative length and identity . in potion we implemented all the aforementioned plus several other exclusive filters to provide users with a rich set of options to remove noisy data and emulate most filtering criteria commonly used in gspsd studies .

the lack of most quality filtering steps virtually prohibits the use of these other programs to perform gspsd using the same initial error-prone data as used by potion, with the chance of increasing the rate of false detection of positive selection to prohibitive rates  <cit> . indeed, as demonstrated in our analysis of myc dataset , removal of filtering steps when executing potion can increase positive selection detection to values much higher than the ones observed in other gspsd, strongly suggesting filtering steps to be a crucial procedure to infer reliable positive selection.

most of the software we analyzed also offers some features to generalize gspsd in order to fit the peculiarities of the distinct taxa and gene partitions to be analyzed, such as supporting distinct codon tables , searching distinct gene partitions within mixed groups of homologs, such as 1- <dig> orthologs and paralogs , performing recombination detection  and using a reference genome to report results . nevertheless, only potion contains all these features implemented in a unique integrated environment. additionally, potion also contains exclusive features to further model user data, such as the specification of additional start/stop codons and the removal of entire groups based on phylogenetic and quality criteria.

the automation and generalization achieved in potion is also unmatched by any of the evaluated software, since all of them either require heavy user intervention at several steps to effectively perform gspsd or are restricted to a few pre-determined genomes, preventing users to analyze their own data. jcoda, datamonkey and selecton only allow users to analyze a single group per job, rendering them unfeasible to perform any study on a genome-scale in an automated manner. although idea, phyleasprog and psp offer the possibility to analyze several groups in parallel, and idea can also execute several tasks for the same group in parallel, idea requires the sequence data to be previously aligned, and phyleasprog/psp do not allow users to analyze most of the sequence data available, being restricted to just a few vertebrate genomes  or to strains of closely related prokaryotic genomes .

only four programs offer the possibility to align user submitted data: jcoda and selecton performs an alignment using clustalw, an outdated aligner outperformed by prank, mafft and muscle  <cit> , phyleasprog and psp currently supports two out of the three sequence aligners supported by potion . phylogenetic tree reconstruction is the single step that is present in all software evaluated. four of them  use some method from phylip package , datamonkey and selection use a nj algorithm, and phyleasprog uses treebest, an unpublished pipeline. finally, with the exception of psp, none of the analyzed software take into account the multiple hypothesis-testing scenarios present during gspsd.

the qualitative comparison with related software also detected several potential next steps to further develop potion, such as the support of other third-party programs that could increase potion’s speed  <cit> . also, since potion implements parallelization only for single machines with multiple processors, io is likely to be a future lower-bound time bottleneck, since all processes will be reading and writing to the same hard drive during execution. to address this issue we plan to implement parallelization using a message-passing system such as message passing interface , as implemented in idea. additionally, we also plan to implement other codon substitution models such as emc , which takes into account both mechanistic and empirical data and arguably better fits real sequence data  <cit> . also, the possibility to evaluate branch- and branch-site models of positive selection, as seen in several of the software evaluated, will greatly increase the range of biological hypotheses addressed by potion. other interesting features can be implemented in sequence trimming procedures where more sophisticated strategies, such as the one implemented to populate the database selectome  <cit> , could be used to improve the reliability of analysis of more complex genomic data, such as from eukaryotic genomes. finally, the several gui available contain interesting features that will be taken into account when developing a future user interface to increase the usability of potion.

CONCLUSIONS
the search for positive selection in molecular data on a genome-scale is a straightforward option to survey the wealth of taxonomically related genomic data in order to extract biologically meaningful information. potion aims at providing users an end-to-end pipeline that accepts predicted coding sequence data and homology relationships as input and surveys it in order to offer a reliable detection of positive selection as a final result. we used four complementary strategies to demonstrate the performance and usefulness of our software. the first evaluation strategy consisted of analysis of a highly curated dataset of groups of t. brucei paralogs previously surveyed for positive selection , used as a gold standard to objectively evaluate the classification efficiency of potion. our software achieved a high classification performance, demonstrating that it can effectively distinguish between true positive and true negative cases of darwinian molecular selection.

to demonstrate how potion behaves on real, previously unsurveyed data we used our software to perform gspsd in the genomes of  <dig> m. tuberculosis strains. potion found several groups of homologous genes with clear roles in host-pathogen biological interactions. also, in this analysis we demonstrated how some of the unique features implemented in potion, such as in data filtering and genome anchoring, operate in order to supply users with a rich set of configuration parameters to select partitions of biologically coherent and high-quality sequence data to be further evaluated by potion. the third analysis strategy consisted of the evaluation of the parallelization schema implemented in potion, where we demonstrated genome-scale data could be analyzed in a feasible time frame on multi-processor computers executing our software.

our final analysis consisted of comparing potion with other software that partially automate the task of gspsd. we argue that none of the evaluated programs could reliably be used for positive selection detection of genome-scale data, since each of them contain only a few of the functionalities implemented in potion or, in some cases, none of them at all, such as the capability of analyzing sequence data from virtually any taxa, several of the filters implemented in potion to remove unreliable data, and correction for multiple hypothesis testing.

we believe potion is a considerable step towards the automation of an important pipeline in computational genomics, namely automatic detection of positive selection in genome-scale data. it generates a controlled environment allowing single users or small research groups to effectively search for molecular signs of positive selection on their own genomes of interest. due to its modular nature, advanced users can tailor the potion scaffold to fulfill their own needs, such as adding new third-party tools that perform analogous tasks. to the best of our knowledge, potion is the most customizable and general tool to perform positive selection detection available; an end-to-end environment that allows users to construct and check hypotheses regarding the occurrence of site-based evidence of positive selection in genome-scale data within a feasible time frame.

availability and requirements
project name: potion 

project home page: http://www.lmb.cnptia.embrapa.br/share/potion/

operating system: linux, unix

programming language: perl

other requirements : perl packages , cwd , file::chdir , file::copy , posix , statistics::distributions , statistics::multtest , tie::file , try::tiny , data::dumper , file::spec::functions , file::basename , findbin , capture::tiny , getopt::long , prank, muscle, mafft , consense , dnaml, proml, seqboot , phipack, trimal, codeml.

license: gnu gpl v3

any restrictions to use by non-academics: no restrictions except the ones stated in gnu gpl v3

additional files
additional file 1: 
description of tryp dataset. lists the groups of tryp dataset and their classification as positively selected or not from both the original study and potion. 

additional file 2: 
description of myc dataset. lists the genbank ids of m. tuberculosis genomes used in this study  and the number of genes filtered out by potion’s filters.

additional file 3: 
results of filter and nofilter experiments. lists final results produced by potion when analyzing myc dataset using filter and nofilter configuration. 

additional file 4: 
alignment data for myc dataset. compressed text files in .tgz format, untrimmed and trimmed alignment data for myc dataset as produced by potion. data in fasta and phylip format. 

additional file 5: 
genes under positive selection in myc experiment. lists groups of homologs found under positive selection in myc dataset and their functional annotation from tuberculist. 

additional file 6: 
tuberculist categories enrichment analysis of genes under positive selection in
m. tuberculosis
strain h37rv. lists the percentage of genes annotated to each tuberculist functional category in genes under positive selection  and in all valid genes. also contains the statistical results for enrichment analysis . 

additional file 7: 
gene ontology enrichment analysis of genes under positive selection in
m. tuberculosis
strain h37rv. lists gene ontology categories significantly enriched in the list of genes under positive selection detected in myc dataset, filter experiment . 

additional file 8: figure s1–s <dig>  correlation between independent variables likely to influence computation time versus time to compute cpu intensive jobs. contains graphics and spearman’s correlation values for independent variables likely to influence computation time for a given group  versus the time to compute cpu intensive jobs . data obtained from myc dataset, filter experiment. 

additional file 9: 
qualitative comparison of potion with similar software. lists a qualitative comparison of potion’s features when compared with software that automatizes aspects of genome-scale positive selection detection. 



abbreviations
cdscoding dna sequence

emcempirical mechanistic model

fdrfalse discovery rate

guigraphical user interface

gspsdgenome-scale positive selection detection

ideainteractive display for evolutionary analysis

jcodajava codon delimited alignment

lrtlikelihood ratio test

mlmaximum likelihood

mpmaximum parsimony

mpimessage passing interface

njneighbor-joining

psppositive selection for prokaryotic genomes

competing interests

the authors declare that they have no competing interests.

authors’ contributions

fpl and jah conceived the software, and designed its overall goals; jah, gmc, lcc, az, fpl developed the software and/or parser scripts, fpl and jah conceived and executed the validation studies, jah, gmc, lcc, az and fpl wrote the article. all authors read and approved the final version of the article.

this work was supported by embrapa , lmb  and conselho nacional de desenvolvimento científico e tecnológico  . we would like to thank david mokry for critically revising this manuscript.
