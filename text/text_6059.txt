BACKGROUND
graphical management of trees requires processing and information visualization methods allowing the user to deal with single large trees or multiple connected trees. although solutions have been proposed for the management of single and large trees  <cit> , comparisons among trees  <cit> , and annotations of trees  <cit> , an integrated tool for the graphical management of annotations and comparisons of multiple trees is not yet available . presently, there are real needs to explore, compare, display and interpret trees using information not directly contained in these trees, such as taxonomy, geography, life history traits or even ontologies  <cit> . treedyn aims at filling these needs. treedyn presently manages multiple windows, multiple trees per window, as well as related information. meta-information may be useful for investigating a single large tree or a collection of trees. instead of using only information located in the tree file itself , treedyn also uses associated annotation files. treedyn uses a 2d euclidean space representation to efficiently organize tree items without superposition .

implementation
treedyn is implemented in tcl/tk  <cit> . it is based on the activetcl distribution which contains several tcl/tk extensions such as itcl/itk, iwidgets, tktable and img. treedyn is a stand-alone application distributed for osx, linux and windows platforms without previous installation of tcl/tk. since treedyn is under active development, new tools will become available. automatic treedyn updates ensure users to work with the latest treedyn version without having to visit treedyn.org, check for updates, download and install again.

RESULTS
importing exporting
single or multiple trees can be imported from nexus and newick formats. treedyn allows trees to be printed or exported to several standard file formats  or to a specific format called the "treedyn graphic file" , which enables saving and restoring graphics. the html export function creates a bitmap screenshot within html encapsulation that may include annotations and active links associated with leaves . this format should facilitate the electronic publication of trees, with colors and contextual information.

editing
dynamic graphics methods include two important properties: the direct manipulations of graphical elements on screen and the virtually instantaneous change of these elements  <cit> . in treedyn, tools for tree editing are available as "tool to graphical items" and "graphical items to tool" interaction modes. using the" tool to graphical items" mode, dynamic tools can be selected and applied "on the fly" to trees, nodes, leaves, annotations, etc. for instance, the user first activates the "swap" tool and then brushes a tree for swapping. conversely, in the "graphical items to tool" interaction mode, a graphical item is first selected within a tree and several tools can then be applied through contextual menus. for instance, a sub-tree is selected and various operations are applied onto it via its contextual menu.

tools are represented by icons and organized into toolboxes. two types of toolboxes are available: a default one integrating basic tools only and a toolbox dedicated to experts containing every available treedyn tool. finally, a toolbox editor enables the user to build dedicated toolboxes by the selection, coloring and ordering of tools. tools dedicated to tree manipulations allow operations such as translating trees on the canvas, zooming and navigating using global/local views, re-rooting and swapping. leaf or subtree colors, fonts and lines are adjustable. shrinking, collapsing, extraction of sub-trees and deletion/copy/insertion of leaves or sub-trees are also possible. finally, one can switch among rectangular, internal or external circular tree configurations with or without proportional branch lengths.

treedyn enables the management of collections of trees. multiple newick strings can be loaded as a single file and the corresponding trees displayed as a single document. it is then possible at once to resize all of the trees, organize them into rows and columns, switch the collection to a new configuration , display or hide leaf labels as well as graphical variables for the entire collection . it is still possible to manage each tree individually.

projection
projection is the process of posting texts, images or symbols facing a tree's elements . projection is implemented in three different manners. the simplest one is a manual pasting of annotations to a tree's elements. for instance, the user selects a symbol, or enters a text, and pastes it facing leaves, or as an annotation associated to a selected tree's elements . the second method is the posting of standard self-contained annotations such as branch lengths or bootstrap values . the third and more powerful method uses annotation files to post values facing leaf labels, possibly as a symbol-matrix for pattern visualization .

annotations files use leaf labels as keys to address lists of key/values pairs. an annotation file is a simple text file containing one record per line. each record begins with the name  of a leaf in a tree followed by a list of key/value pairs. annotation files can be generated by treedyn from tabulated ascii files  or by using specific online tools such as gotoolbox  <cit> .

since treedyn permits the linkage of annotations to a tree's elements, the posted annotations are moved accordingly during a tree manipulation.

identification
identification allows querying between tree elements and contents of leaf labels or annotation files. highlighting clusters of leaves according to a specific string or pattern found in the leaf labels is possible . but identification is more powerful when annotation files are used. a first process called "labelization" consists in posting associated information to selected tree elements. for instance, one may select a sub-tree and the relevant annotations associated to its leaves and post these annotations as multiple and moveable new graphical text items linked to the sub-tree by connectors . a second process called "localization" results in highlighting every tree element associated to a certain annotation based on a sql-like search of the annotation file. for instance, knowing a tree on the one hand and, on the other hand an annotation file containing for some leaf labels a list of variables/values pairs, the query "select leaves from annotations where variablex == valuex1" returns a list of leaf labels found in the tree and matching the "valuex1" value for the variable "variablex". this list is then used by a highlighting operation which updates the tree aspect : figure 2c, see also  <cit> . the sql like interpreter integrated into treedyn enables queries on leaf label annotations using operators working on multi-valued variables  with or without patterns on values  and and/or connectors.

treedyn enables simultaneous localizations on multiple trees, either by querying leaf labels using patterns or by querying annotation files as described above. for instance, the view of a tree collection may be simplified by shrinking any sub-trees containing a particular string pattern within the leaf labels. similarly, modifying the foreground  color of sub-trees carrying leaves having identical values for a given variable  is possible. each of these operations helps interpreting sets of trees, facilitating the detection of similarities or differences between trees.

reflection
the reflection operator allows the comparison of trees carrying identical or different but related leaf labels. this operator allows the highlighting of targeted trees according to a source tree browsed by the user. two methods are proposed for this operation. the first method relies on a strict identity of leaf labels between trees . selection of a sub-tree from a tree allows highlighting every identical leaf in others trees . the second method deals with trees bearing different leaf labels . in this case, the reflection operator requires an annotation file in which the connections between leaf labels in the different trees are described by value of variable. for instance, if one wants the selection of leaf "a1" from the source tree "a" to highlight leaves "b <dig> b <dig> b3" of the tree "b", the corresponding annotation file must include records linking the leaf labels from tree "a" to that of tree "b", for example in the form "a <dig> string {b <dig> b <dig> b3}" where "string" is any variable's name. reflection works with any kind of variable. for instance, the user selects a source sub-tree, and then chooses a variable from an annotations file  and a particular value for this variable . treedyn then highlights every targeted tree for corresponding leaf labels  matching the value "x" for the "country" variable, allowing powerful comparisons between trees.

scripting
a treedyn script file  containing a list of instructions is a way of saving graphical analyses and avoids repetitive tasks. a scripting package includes a language dedicated to the treatment of trees and annotations. this language is based on the description of aliases between a master interpreter which is running treedyn and a slave interpreter waiting for user instructions. every operation available from the treedyn interface is scriptable.

scripts are loadable either through the treedyn interface or can be run from the command-line. for example, the command "treedyn -tree treefile -label labelfile -script scriptfile -out outfile" applies a graphical treatment as described in scriptfile on a tree  using annotations stored in labelfile returning postscript and tgf outputs . such functionality enables treedyn to be linked to http servers through cgi scripts as illustrated by the prodistin web site  <cit> , which uses treedyn for tree representations.

treedyn packages
treedyn package is an open library of modules dedicated to specific tree graphical management tasks. we present four examples of such packages: treebaseinterf, treeig, treepat and treexy.

treebaseinterf . treebase is a relational database designed to manage and explore information on phylogenetic relationships  <cit> . the database is designed to allow the retrieval of trees and data from different studies and can be explored interactively. knowing keywords , treebase web interface allows retrieval of studies  and their related information . trees can be displayed or downloaded and viewed with treedyn. knowing id studies from treebase, treebaseinterf allows fetching selected trees and their treatment with the treedyn tools, without any constraint due to security policies such as encountered when using applet technology . downloaded trees can be displayed as a collection in new treedyn documents or inserted in already existing documents for comparison with trees built by the user.

treeig  allows the drawing of arcs between leaves of a tree. it may be used to display additional relationships existing between leaves which are not represented by the tree itself, such as interactions between proteins. treeig uses annotation files storing these relationships as variables. knowing a user selection of leaves, through the selection of a subtree or through the selection from a list , arcs are drawn according to four graphical variables: curvature, line-width, color and tabulation .

treepat  allows the representation of a tree as a pattern visualization matrix. a pair-wise distance matrix is computed according to the distances of the leaves in the tree . some classes are then defined as ranges of distances from  <dig>  to the diameter of the tree. finally, a color is associated to each class resulting in the distance matrix being colored accordingly. leaves within a given distance class appear with their associated color as squares more or less well structured along the diagonal of the matrix.

treexy  enables a dynamic linkage between trees and scatterplot matrices. for instance, the module may help in the co-analysis of a given set of species represented on the one hand as a phylogenetic tree based on molecular data, and on the other hand, as a scatterplot matrix of factorial maps from a multivariate analysis using geographic data. a toolbox allows mouse-driven selections of sub-sets of species, from the tree or from the scatterplot representation, and their highlighting, respectively on the scatterplot and on the tree. different modes of interaction allow different highlighting operations and to keep/undo results following several selections.

discussion
layout
many tools for visualising phylogenetic trees already exist; they first differ in their layout, i.e. 2d or 3d and using euclidean or hyperbolic representation. most popular tools such as treeview  <cit>  and atv  <cit>  lay out trees in a two dimensional euclidean space and are useful for visualising trees of up to a few hundred nodes; pointree makes uses of polar coordinates  <cit> . tools, such as hypertree  <cit> , have increased the number of visualisable nodes using 2d hyperbolic space providing a "focus+context" view, where a subset of the data can be viewed at a higher resolution with the remaining contextual data still being in view. in hyperbolic space , circumference and area increase exponentially instead of geometrically. it enables allocation of space for every node independent of the total number of nodes in the tree, which can be projected into a finite volume of euclidean space for a "focus+context" view. by bringing different parts of a tree to the magnified central region, the user can examine every part of the tree in detail while retaining a sense of the context. hypertree allows visualization of up to a thousand nodes  <cit> . in order to handle an order of magnitude more nodes, one strategy is to not visualise the whole tree but instead to display a representative part of it as implemented in spacetree and treewiz  <cit> . visualization using virtual reality has also been reported as a potential approach to the problem, but this requires a special virtual reality chamber  <cit> . more recently, hyperbolic representation made use of 3d coordinates  <cit>  making possible to interactively visualize the entirety of trees with several hundred thousand nodes on a desktop computer. hyperbolic representations are fine for global visualizations of large datasets, but suffer from unresolved problems of leaf label and annotation management to avoid superposition; besides the main aim of treedyn is to produce figures for publication ; it was therefore designed to use a standard 2d euclidean space, with every alternate layout being feasible . using the combination of global and local navigators, trees of up to  <dig>  <dig> leaves have been successfully viewed with treedyn.

aspect
once a tree represented in a 2d euclidean space, easy changes of aspect of edges as well as leaf labels are required . most popular tree editors allow such operation either for the entire tree or for a selection of items. both can be done with treedyn, which includes many more alternate options than any other tree editor. also, apart from manual selections and changes, treedyn allows extensive scripting to be used. treegraph  <cit>  assists in producing complex ready-to-publish figures of phylogenetic trees through scripting, but with much less possibilities. pal  would be an alternate possibility, but for the moment it is not implemented through a visual interface and has also less functionalities.

export trees
saving can be done toward almost any image format, post-script, svg and as "live" encapsulated html file. to our knowledge, no other editor is capable to do so, excepting treegraph  <cit>  which also exports to svg. in addition, treedyn provides the user with the specific tgf format enabling the saving and restoring of analyses.

comparing trees
since there are many methods for building trees, and also many sources of information for building a tree from the same objects , it is often desirable to summarize or compare a set of phylogenetic trees  <cit> . several approaches are now available from the "simple" consensus tree  <cit>  to the visualization of a "tree space" using multi-dimensional scaling based on a tree-to-tree distance matrix  or to systems allowing detailed structural comparisons between trees of up to  <dig>  nodes . one may however wish not to compare a set of trees in their entirety, but only for a subset of leaves  of interest. treedyn offers a solution to manage multiple trees, using leaf labels as unique key to record lists of variables/values pairs, independently of the tree topologies. this information is used by graphical operators that allow highlighting, annotating or shrinking nodes or leaves among the set of trees, therefore providing an instant representation of congruence or divergence. in this respect, treedyn is more powerful than the above mentioned tools since it allows linking and highlighting leaves that have a different content through the use of an annotation file.

annotations
usual tree description formats  used by most phylogenetic software or tree-drawing tools do not allow the easy inclusion of additional information . as a consequence, additional information needs to be manually added to the tree with the help of a graphic editor. this operation can often be inferred from subtle inhomogeneous arrangements in the final figures. an attempt to arrange and format these elements is very time consuming and may involve human errors. treegraph  <cit>  extends the usual parenthetical tree notation  to include much more information for each branch or node, such as different support value types, text and graphical labels. using its command line editor, it is then possible to add annotations, change label's fonts and modify the tree structure to produce a publication ready figure. treedyn offers an improved solution to manage such meta-information, by using external annotation files in the form of key-values couples. the annotation procedure of treedyn is easier , more powerful as it may use large, easy to build annotation files. also, these procedures can be applied to a series of trees. finally, by keeping annotations external to the tree description itself, a single tree can be annotated with different annotation files for different contexts.

CONCLUSIONS
tree analyses often need an alternate focusing between complex tree graphical structures and information related to the entities under study. treedyn offers a solution to manage, on the one hand, multiple trees, and on the other hand, meta-information. treedyn offers to link unique leaf labels to lists of key/values pairs, independently of the tree topologies, remaining fully compatible with the basic newick format. these relationships are used by graphical operators allowing a human-computer interaction ranging from manual  to "all automatic"  processes: from annotations to trees, from trees to annotations, from trees to trees through annotations. the scripting capability is an improvement towards the automation of graphical "error free" treatments and its use with the treedyn command line enables treedyn to be linked to http servers through cgi scripts. treedyn is under active development, and suggestions for improvements are welcome . as treedyn is under the gpl licence, any development by a third party is also welcome. full documentation as well as tutorials are available on the treedyn web site  <cit> .

availability and requirements
• project name: treedyn

• project home page: 

• operating systems: macosx, linux, windows

• programming language: tcl/tk, activetcl  <dig> .3

• other requirements: none

• license: gpl

• any restrictions to use by non-academics: none

authors' contributions
fc designed and led the project, developed the algorithms, prototypes, coded and integrated the complete package. cb, alb, bj and rc provided biological insights, data and tested the software. fc and rc essentially wrote the paper with contributions of cb. rc and fc had regular stimulating discussions regarding the evolution of the software. all authors read and approved the final manuscript.

