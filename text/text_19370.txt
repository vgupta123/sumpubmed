BACKGROUND
recent publications have shown that gene prediction in prokaryotes is still a challenging problem in bioinformatics. while existing gene finders  <cit>  are likely to identify coding regions associated with open reading frames  of statistically significant length, the prediction of the true translation initiation sites  is insufficient in many cases  <cit> . in particular, for genomes with a high g+c content the prediction of tis has been shown to be of low quality  <cit> .

in order to cope with this insufficiency of conventional gene finders, several methods have been proposed for improving the predictions of prokaryotic tis. common approaches require prior knowledge about the characteristics of the ribosome binding site  as achieved by analysis of the 16srrna or by some supervised method for inferring model parameters from sequences of known gene starts  <cit> . in contrast, more recent methods focus on unsupervised schemes for optimizing most of the tis related parameters  <cit>  without any examples of known tis. therefore, in principle no prior knowledge about the rbs or tis is needed. but it is important to note that these methods usually include tis related parameters that cannot be optimized by some unsupervised algorithm. for example, the length of the rbs or the spacer between rbs and translation start have been used as parameters . in order to adjust these parameters in an optimal way, again prior knowledge would be necessary.

we recently introduced the tool »tico«  for improving the results of conventional gene finders. tico is based on a very general model which does not involve any parameters for representing specific characteristics of translation starts. in a previous publication  <cit>  we described the web interface for tico and presented results on the genome of escherichia coli k- <dig>  in the present paper we give a detailed description of the underlying algorithm and we provide a thorough evaluation of the method on a significantly enlarged set of genomes. in particular, we present a detailed comparison with three other tools for improving predictions of prokaryotic tis. in addition, we present an extension of the algorithm for automatic adaptation of a smoothing parameter which had to be specified by the user in the first version of »tico«. the results indicate that, despite its generality, our algorithm yields overall good performance, which also involves predictions on the high-g+c genomes we tested.

unsupervised classification of tis sequences
our tis prediction method is based on a clustering algorithm, which assigns candidate tis sequences to one of two classes for representation of strong and weak candidates, respectively. each of the two classes is represented by an inhomogeneous second order probability model. the position-dependent probabilities are estimated from the trinucleotide occurrences in the proximity of potential start sites. in order to cope with vanishing probabilities, we apply positional smoothing  <cit>  to the probabilities, as detailed in the next section.

in an initial step, the putative start positions, as predicted by a conventional gene finder, are labeled as strong tis candidates. additional candidates associated with potential start codons are obtained from a search range around these initial positions. the additional sites are labeled as weak tis candidates. as a constraint, all candidate tis for one orf should share the same reading frame, and no stop codon is allowed to occur between a potential start and the annotated stop.

starting with the initial classification we iterate the following two successive steps:

 <dig>  estimation
trinucleotide probability models for the strong and weak categories are estimated from all strong and weak tis sequences, respectively. we apply positional smoothing to the trinucleotide probabilities using a discretized gaussian density function . the tis sequences are extracted as the flanking regions of the potential start codons with a fixed number of upstream and downstream positions. finally, a second order positional weight matrix  is built from the probabilities by subtracting the logarithms of the position specific weak model probabilities from the strong ones.

 <dig>  classification
the pwm is used to score all tis candidates. the candidate with highest positive score among all candidates of the same gene-specific search range is classified as strong tis; all other candidates from that range are classified as weak tis. this implies the following special cases: if there is no range-specific candidate with a positive score, all candidates of the corresponding range are classified as weak tis; if there are several range-specific candidates with a positive score, only that candidate with maximum score is labeled strong.

the two steps of estimation and classification are iterated until the classification does not change anymore or a maximum number of  <dig> iterations has been reached. the total set of candidates associated with the orf-specific search ranges does not change during the iterations. the resulting candidates with maximum score from the corresponding ranges are considered as the final tis predictions of the algorithm.

it is not difficult to see that the above clustering algorithm must converge in terms of a monotonically increasing total sum of scores. to see this, we can formulate an objective function for the clustering using binary assignment variables hij ∈ { <dig>  1}, which classify the j-th candidate tis of the i-th putative gene according to strong  or weak  categories, respectively. in addition, we can represent the models by matrices ps and pw with entries pkls
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdaqhaawcbagaem4aasmaemibawgabagaem4camhaaaaa@3271@ and pklw
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdaqhaawcbagaem4aasmaemibawgabagaem4dachaaaaa@3279@, indicating the probability of trimer k on position l for the strong and weak models, respectively. for gene i the sequence of the j-th candidate tis can be represented by a matrix xij with binary entries xklij
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbagaem4aasmaemibawgabagaemyaakmaemoaaogaaaaa@33ca@ ∈ { <dig>  1} indicating the occurrence of trimer k at position l. with these definitions the objective of the clustering algorithm is:

maximize

f=∑i,jhij∑k,lxklijlog⁡pkls+∑i,j∑k,lxklijlog⁡pklw     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrcqggoaakieqacqwfqbaudawgaawcbagaem4camhabeaakiabcycasiab=bfaqnaabaaaleaacqwg3bwdaeqaaogaeiilawiaei4easnaemiaag2aasbaasqaaiabdmgapjabdqgaqbqabagccqgg9bqfcqggpaqkcqgh9aqpdaaeqbqaaiabdigaonaabaaaleaacqwgpbqacqwgqbgaaeqaaaqaaiabdmgapjabcycasiabdqgaqbqab0gaeyyeiuoakmaaqafabagaemieag3aa0baasqaaiabdugarjabdygasbqaaiabdmgapjabdqgaqbaaaeaacqwgrbwacqggsaalcqwgsbabaeqaniabgghildgccyggsbabcqggvbwbcqggnbwzcqwgwbacdaqhaawcbagaem4aasmaemibawgabagaem4camhaaogaey4kasyaaabuaeaacqggoaakcqaixaqmcqghsislcqwgobaadawgaawcbagaemyaakmaemoaaogabeaakiabcmcapawcbagaemyaakmaeiilawiaemoaaogabeqdcqghris5aowaaabuaeaacqwg4baedaqhaawcbagaem4aasmaemibawgabagaemyaakmaemoaaogaaogagiibawmaei4ba8maei4zacmaemicaa3aa0baasqaaiabdugarjabdygasbqaaiabdeha3baaaeaacqwgrbwacqggsaalcqwgsbabaeqaniabgghildgccawljagaaczcaiabcicaoiabigdaxiabcmcapaaa@8922@

subject to

∑jhij≤ <dig> i∈{ <dig> ...,n}.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaeqbqaaiabdigaonaabaaaleaacqwgpbqacqwgqbgaaeqaaaqaaiabdqgaqbqab0gaeyyeiuoakiabgsmijkabigdaxiabcycasiabdmgapjabgigiolabcuha7jabigdaxiabcycasiabc6cauiabc6cauiabc6cauiabcycasiabd6eaojabc2ha9jabc6cauaaa@4531@

thereby, the second index j ∈ { <dig>  ..., ni} always runs over all ni candidate tis associated with gene i. thus, the estimation-step for computing the probabilities maximizes the log-likelihood of the models under a given classification, i. e. with fixed hij. so at least the scores keep constant with the application of that step. given the probability matrices ps and pw, the classification step only changes an assignment variable if the score can be increased. if no change can improve the score, the algorithm is finished because the previous classification is maintained and nothing will change in any succeeding iteration. thereby, the above constraint on the assignment variables assures that for any gene at most one candidate tis is classified as a strong one, i. e. has a non-zero assignment variable.

although closely related, the above clustering scheme is not identical to the well-known em algorithm as originally proposed in  <cit> . however it may be viewed as a special variant which implements deterministic instead of probabilistic assignment variables and which imposes a tis specific constraint on the assignment variables hij. this constraint ensures that at most one candidate tis of a putative gene is considered as a strong candidate, even in cases where several gene-specific candidates provide positive pwm scores. the constraint implements some task-specific knowledge about the general tis prediction problem which is important for the performance of the algorithm because it effectively improves the signal-to-noise ratio with respect to estimation of the strong tis model.

the only condition to be met for convergence of the above optimization is that the objective function f has to be upper bounded which implies that all entries of the above probability matrices must be non-zero values in order to provide finite scores. this requirement can be achieved by a positional smoothing procedure as described in the following section.

positional smoothing
for the above clustering scheme to converge, it is necessary to avoid infinite scores. these may arise from zero probabilities in the stochastic matrices for representation of trinucleotide occurrences in the flanking regions of the tis candidate sequences.

it can be observed that the occurrences of short nucleotide patterns in tis sequences show some positional uncertainty  <cit> . although certain patterns usually occur with high probability at certain positions, these occurrences can also be observed at neighboring positions to some extent. this implies that there are strong correlations between the occurrences of patterns at neighboring positions. these correlations in turn suggest a simple scheme to cope with vanishing probabilities resulting from the estimation of an inhomogeneous higher order markov model: to avoid zero probabilities in the estimated models, the counts of neighboring positions may be averaged, i. e. a positional smoothing of the corresponding counts may be applied.

formally, an inhomogeneous l-position probability model of order k -  <dig> can be represented by some 4k × l stochastic matrix p. each column of p is a probability vector with nonnegative values summing up to one. thereby an entry pkl of that matrix denotes the probability of the k-th k-mer to occur at position l. linear smoothing can be realized by post multiplication with an l × l stochastic matrix s which contains shifted versions of the discretized smoothing function. in our case we chose a gaussian smoothing function with bandwidth parameter σ controlling the degree of smoothing. this choice results in the normalized entries

smn=e2)∑le2)
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgzbwcdawgaawcbagaemyba0maemoba4gabeaakiabg2da9maalaaabagaemyzau2aawbaasqabeaadaqadaqaaiabgkhitmaalaaabagaegymaedabagaegomaidccigae83wdm3aawbaawqabeaacqaiyagmaaaaasgaeiikagiaemyba0maeyoei0iaemoba4maeiykakyaawbaawqabeaacqaiyagmaaaaliaawicacaglpaaaaaaakeaadaaeqaqaaiabdwgalnaacaaaleqabawaaewaaeaacqghsisldawcaaqaaiabigdaxaqaaiabikdayiab=n8aznaacaaameqabagaegomaidaaaaaliabcicaoiabdygasjabgkhitiabd6gaujabcmcapmaacaaameqabagaegomaidaaawccagloagaayzkaaaaaaqaaiabdygasbqab0gaeyyeiuoaaaaaaa@5442@

with l, m, n ∈ { <dig> ... l}. as indicated above, the smoothed matrix of probabilities smn=e2)∑le2)     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufebsjuyzl2yd9gzlbvynv2caerbwvmckfmbhbqedmvetj2bsbqee0evguee0jxyaibaieydoi=bh8vipeydi8qiw7rqqrffpeea0xe9lq=jc9vqaqpepm0xbbg8faspyrqj0=yi0lxdbba9pge9qqff0dxdhuk9fr=xfr=xfrpiwzqaaeaabigaaiaacaqabeaabeqacmaaaoqaaiaadohadawgaawcbagaamybaiaad6gaaeqaaogaeyypa0zaasaaaeaacawglbwaawbaasqabeaadaqadaqaaiabgkhitmaalaaabagaagymaaqaaiaaikdaiigacqwfdpwcdaahaaadbeqaaiaaikdaaaaaasgaaiikaiaad2gacqghsislcawgubgaaiykamaacaaameqabagaagomaaaaasgaayjkaiaawmcaaaaaaoqaamaaqababagaamyzamaacaaaleqabawaaewaaeaacqghsisldawcaaqaaiaaigdaaeaacaaiyagae83wdm3aawbaawqabeaacaaiyaaaaaaaliaacicacawgsbgaeyoei0iaamobaiaacmcadaahaaadbeqaaiaaikdaaaaaliaawicacaglpaaaaaaabagaamibaaqab0gaeyyeiuoaaagccawljagaaczcamaabmaabagaagomaagaayjkaiaawmcaaaaa@542a@ is simply obtained from the matrix product

smn=e2)∑le2)     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufebsjuyzl2yd9gzlbvynv2caerbwvmckfmbhbqedmvetj2bsbqee0evguee0jxyaibaieydoi=bh8vipeydi8qiw7rqqrffpeea0xe9lq=jc9vqaqpepm0xbbg8faspyrqj0=yi0lxdbba9pge9qqff0dxdhuk9fr=xfr=xfrpiwzqaaeaabigaaiaacaqabeaabeqacmaaaoqaaiaadohadawgaawcbagaamybaiaad6gaaeqaaogaeyypa0zaasaaaeaacawglbwaawbaasqabeaadaqadaqaaiabgkhitmaalaaabagaagymaaqaaiaaikdaiigacqwfdpwcdaahaaadbeqaaiaaikdaaaaaasgaaiikaiaad2gacqghsislcawgubgaaiykamaacaaameqabagaagomaaaaasgaayjkaiaawmcaaaaaaoqaamaaqababagaamyzamaacaaaleqabawaaewaaeaacqghsisldawcaaqaaiaaigdaaeaacaaiyagae83wdm3aawbaawqabeaacaaiyaaaaaaaliaacicacawgsbgaeyoei0iaamobaiaacmcadaahaaadbeqaaiaaikdaaaaaliaawicacaglpaaaaaaabagaamibaaqab0gaeyyeiuoaaagccawljagaaczcamaabmaabagaagomaagaayjkaiaawmcaaaaa@542a@ = p·s.     

because p and s are both stochastic matrices, i. e. they have unit column sums, the resulting smn=e2)∑le2)     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufebsjuyzl2yd9gzlbvynv2caerbwvmckfmbhbqedmvetj2bsbqee0evguee0jxyaibaieydoi=bh8vipeydi8qiw7rqqrffpeea0xe9lq=jc9vqaqpepm0xbbg8faspyrqj0=yi0lxdbba9pge9qqff0dxdhuk9fr=xfr=xfrpiwzqaaeaabigaaiaacaqabeaabeqacmaaaoqaaiaadohadawgaawcbagaamybaiaad6gaaeqaaogaeyypa0zaasaaaeaacawglbwaawbaasqabeaadaqadaqaaiabgkhitmaalaaabagaagymaaqaaiaaikdaiigacqwfdpwcdaahaaadbeqaaiaaikdaaaaaasgaaiikaiaad2gacqghsislcawgubgaaiykamaacaaameqabagaagomaaaaasgaayjkaiaawmcaaaaaaoqaamaaqababagaamyzamaacaaaleqabawaaewaaeaacqghsisldawcaaqaaiaaigdaaeaacaaiyagae83wdm3aawbaawqabeaacaaiyaaaaaaaliaacicacawgsbgaeyoei0iaamobaiaacmcadaahaaadbeqaaiaaikdaaaaaliaawicacaglpaaaaaaabagaamibaaqab0gaeyyeiuoaaagccawljagaaczcamaabmaabagaagomaagaayjkaiaawmcaaaaa@542a@ is also a stochastic matrix.

by inspection of the smoothing matrix s, it is easy to see that the smoothing is inhomogeneous over the range of positions: the degree of smoothing decreases at the boundaries of the sequence window because there, the effective number of neighboring positions used for local averaging of probabilities is actually smaller. in order to eliminate this kind of boundary effect we neglect the weights at the first and last three positions of the resulting pwm. in that way, boundary effects can be excluded for small σ-values, relevant for the tis prediction task. therefore, the number of sequence positions which are used for scoring of the tis candidates is actually smaller than the number of sequence positions which are used for estimating the model probabilities.

note, that pseudo counts, which can also be used to avoid vanishing probabilities, provide another special case of linear, i. e. matrix product based, smoothing. that special case is achieved if the smoothing matrix s is assembled from the identity matrix with a constant pseudo count offset added to all matrix entries. the resulting matrix has to be scaled to provide unit column sums. because the above gaussian smoothing is more local than the pseudo-count smoothing, it is preferable if correlations only exist between close-by positions.

we would like to point out that the smoothing of probabilities can also be realized by means of an explicit smoothing prior on the above stochastic matrices. a suitable smoothing prior on probability vectors together with a bayesian scheme for automatic adaptation of the corresponding smoothing parameters has for instance been proposed in  <cit> . alternatively, a suitable cross-validation scheme which measures the performance on hold-out data, may be used to automatically control the smoothing. in the following we present a cross-validation procedure for adaptation of the smoothing parameter σ which makes use of the particular constraints of the tis-prediction setup.

 <dig> automatic adaptation of the smoothing parameter
in order to provide an automatic adaptation of the gaussian smoothing for a particular genome, the smoothing parameter σ is adjusted according to a special cross-validation procedure. for that purpose we measure the performance of the model with respect to discrimination between all strong tis candidates  and their associated weak tis candidates . for discrimination we only consider weak tis which are among the candidates of a putative gene with a strong tis. in that way we exploit the fact that if a strong candidate is actually a true tis, then the associated weak candidates must be false tis. therefore, it makes sense to measure the discriminative power of the model with regard to the above two classes  <dig> and  <dig>  respectively. as a performance measure we use the area under curve  criterion with respect to the receiver operating characteristics  curve  <cit> . the auc measures the performance of a binary classifier under varying costs for the false positive and false negative misclassification and therefore it provides a suitable criterion for unbalanced setups, where the number of negative examples may be much higher than the number of positive examples. for estimation of the auc we perform a 10-fold cross-validation: the tis examples are divided in  <dig> subsets with an equal proportion of the two classes in each subset. once a subset is used for testing the model, based on the corresponding pwm test scores, the other nine subsets are used for estimation of the underlying pwm. the average test auc of all ten subsets is used to rate the current σ-value. in that way, the auc performance is computed for a set of  <dig> possible values according to the sampling σ ∈ { <dig> ,  <dig> ,  <dig> , ...,  <dig> } and finally the value with maximum average auc is selected.

for an overall optimization of all model parameters, an iterative scheme for repeated adaptation of the smoothing parameter is required. the overall scheme proceeds in the following way:

 <dig>  initialization: set σ =  <dig> .

 <dig>  clustering: run the estimation-classification algorithm with current σ, as described in the previous section.

 <dig>  cross-validation: select σ ∈ { <dig> ,  <dig> ,  <dig> , ...,  <dig> } according to a maximum average auc, as described above.

 <dig>  stopping criterion: abort, if σ has not been changed at the previous step. continue with step  <dig> using new σ, otherwise.

RESULTS
datasets
despite the growing number of sequenced bacterial genomes, evaluation of prokaryotic gene prediction is still difficult because most available annotations are based on computational predictions which are likely to contain errors, especially with respect to the exact location of translation starts. therefore, currently the most important sources of information for evaluation of prokaryotic gene prediction are the ecogene  <cit>  database and the link dataset  <cit> . ecogene provides annotations for  <dig> genes from escherichia coli k- <dig>   <cit>  with n-termini verified by protein sequencing. the link dataset largely is a subset of the former and includes  <dig> genes.

in addition to the e. coli genome we also studied the performance of our method on the genome of bacillus subtilis, pseudomonas aeruginosa, burkholderia pseudomallei and ralstonia solanacearum. among these species the last three ones are known to have high-g+c genomes with a g+c content exceeding 66%. for bacillus subtilis   <cit> , we used all non-y genes of the genbank annotation for comparison. these genes are experimentally characterized and have verified start sites  <cit> . additionally we evaluated tico on a small subset of  <dig> genes verified by comparison to the closely related organism b. halodurans  <cit> . the verified datasets of e. coli and b. subtilis, as described above, were obtained from the web site of the center of theoretical biology   <cit>  at peking university. for the evaluation of our algorithm on high-g+c genomes we first chose pseudomonas aeruginosa pa <dig> with a g+c content of  <dig> %. after the genome of p. aeruginosa was completely sequenced and published  <cit>  the analysis has been continued by the pseudomonas community annotation project   <cit>  in order to improve the quality of the first annotation. we used the latest version of the sequence and the annotation from may  <dig> containing  <dig> annotated genes. from our analysis we excluded all genes which have been labeled as unknown, uncharacterized or hypothetical in the corresponding annotation table. in that way,  <dig> carefully annotated genes with an assigned function were considered for the evaluation.

in addition, we investigated the prediction performance on two other high-g+c genomes: burkholderia pseudomallei strain k <dig> chromosome  <dig>  and chromosome  <dig>   <cit>  with a g+c content of  <dig> % and  <dig> %, respectively and ralstonia solanacearum chromosome  and megaplasmid   <cit>  with a g+c content of  <dig> % and  <dig> %, respectively. both genomes are assumed to contain a large number of repeats, inserts, prophages and putative alien genes, which are likely to complicate the prediction for computational methods. the pathogen bacterium b. pseudomallei causing melioidosis has been sequenced and annotated by the sanger trust institute  <cit> . the genbank annotation is based on comparative analysis using the artemis comparative tool. the plant pathogen bacterium r. solanacearum is a model organism for the analysis of pathogenicity and it has been subject to intensive studies based on biochemical and genetical analysis  <cit> . the genbank annotation which we used as a reference is based on the prediction of the program framed  <cit> , explicitly trained for this organism, in combination with comparative methods.

note that the tis locations of b. subtilis, p. aeruginosa, b. pseudomallei and r. solanacearum have not been verified experimentally, even though, in many cases the gene products are well characterized or gene starts have been annotated manually.

performance
we first study the performance of our method, using the automatic adaptation of the smoothing parameter, as described in the previous sections. the corresponding cross-validation procedure  has been implemented as an extension of the tool tico  <cit>  where it is used by default. for initial prediction of the tis locations we used glimmer <dig>   <cit>  and measured the improvement which was obtained from the application of our algorithm. the region for searching suitable candidate tis around the initial glimmer-predicted gene start was chosen to range from  <dig> nt upstream to  <dig> nt downstream of the initial start. the extracted sequence windows for estimation of the trinucleotide probabilities were chosen to range from  <dig> nt upstream to  <dig> nt downstream of each candidate tis.

with respect to the genome of e. coli, glimmer <dig>  found  <dig>  of the  <dig> verified genes in ecogene. for these  <dig> detected genes only  <dig> % of the predicted tis locations were correct. using tico for post-processing of the glimmer predictions, this rate was increased by 31%. also for b. subtilis we achieved a considerable improvement of the initial glimmer prediction with a resulting increase of  <dig> %. the improvement for the high-g+c genomes was not as large for all species. while for p. aeruginosa we still achieved an increase of  <dig> %, the improvement for r. solanacearum was  <dig> %  and  <dig> % , respectively and for b. pseudomallei it was  <dig> %  and  <dig> % , respectively. these rates show that our method provides a valuable tool for the annotation of prokaryotic genomes. because the underlying algorithm performs in a completely unsupervised manner, it especially applies to the case where no knowledge exists about the signals, initiating the translation. obviously, this situation is usually encountered for newly sequenced genomes. another problem, well-suited for the application of our algorithm, is the reannotation of published genomes. as mentioned above, the annotation of many genes is based on results obtained from conventional gene finders. therefore, the annotation of the tis locations is likely to contain errors. comparing the genbank annotation of e. coli k- <dig> with the experimentally verified data from the ecogene dataset, only  <dig> % of these tis are annotated correctly. we initialized our algorithm with the genbank annotation and could increase the accuracy of the tis annotation to a rate of  <dig> % correct sites.

user-selected smoothing parameter
as an alternative to the automatic adaptation of the smoothing parameter sigma , tico also allows the user to specify the degree of smoothing manually, like in the first version of that tool  <cit> . in order to investigate the dependence of the prediction performance on a user-selected parameter, we applied the algorithm on the above three genomes, with a fixed smoothing parameter selected according to σ =  <dig> ,  <dig> ,  <dig> , ...,  <dig> . the prediction performance was measured on the corresponding test sets as described above. the resulting prediction rates are shown in figure  <dig>  although the performance of tico is rather stable over a wide sigma range, the performance significantly decreases for smaller values below  <dig> . this effect can especially be observed for the high-g+c genomes of ralstonia, pseudomonas and burkholderia. for sigma-values above  <dig>  an »over-smoothing« effect becomes apparent for all genomes.

comparing the best results which can be achieved for a fixed sigma, with those of the automatic adaptation, the observed differences are very small. in most cases the best rate of the user-selected smoothing was slightly above the rate of the automatic procedure. for e. coli the difference was negligible with rates  <dig> %  and  <dig> %  for user and automatic mode, respectively. for b. subtilis the best rate  and sigma  were the same in both cases. also for p. aeruginosa the corresponding rates were identical, with the best user-selected sigma  slightly above the automatic selection . the only deviation which is noteworthy at all, we observed for r. solanacearum on the plasmid with rates  <dig> %  and  <dig> %  for the user and automatic mode, respectively. in that case, the automatic selection seemed to result in a slight under-smoothing. in all other cases the difference between rates was at most  <dig> %. comparing the small differences between the best-case user selection and the automatic selection with those differences which can be obtained for a worst-case user-selection , we strongly recommend to use the automatic adaptation which is also the default setting in tico.

we like to emphasize that in practice, it would not be possible to determine the best user-selected sigma, because usually no reliable reference annotation would be available. therefore, evaluation of a hypothetical user-selection is somewhat artificial and the corresponding best rates can just be viewed as an upper bound for the performance of our algorithm. consequently, these rates are not used in the following comparison.

comparison with other tools for improvement of tis predictions
to our knowledge, currently three other tools are available for improving predictions of prokaryotic tis. in a recent publication  <cit>  these tools have been compared for their performance on reliable test data from e. coli and b. subtilis. although these tools perform well on the utilized test data, it is important to realize that the corresponding models include specific assumptions about the statistical nature of prokaryotic tis. in rbsfinder  <cit>  gene starts are relocated by iteratively scoring potential rbs near annotated start codons predicted by a gene finder. scoring is based on a probabilistic model with some of the parameters relying on prior assumptions about sequence statistics. in addition several empirical thresholds have to be adjusted which finally control the performance of the score-based selection of tis locations.

in med-start  <cit>  also a probabilistic model for prokaryotic tis is utilized for iteratively rescoring the candidate tis. while most of the model parameters are optimized in an unsupervised manner, the length of shine-dalgarno   <cit>  motifs has to be specified, using a length  <dig> default value. in addition, the maximum number of sd motifs to be considered is pre-specified. in  <cit>  it remains unclear how automatic selection of the actual number of sd motifs utilized for a specific genome has been realized in med-start. in gs-finder  <cit>  several sequence features from the flanking regions of candidate tis are utilized for an iterative relocation procedure. while most features are used in an unsupervised manner the method also relies on some prior assumptions about start codon usage and about the distribution of the distance between the leftmost candidate start codon and the true tis.

in contrast, our method does not require any specific model assumptions about prokaryotic tis. only rather general assumptions about the tis relocation problem can be found to be implemented in the default values of tico. these defaults concern the search range for alternative tis around the initial predictions and the size of the sequence window for scoring the tis candidates. we would like to point out that this kind of assumptions can be found in all post-processors considered here and that these assumptions should be distinguished from assumptions about tis related sequence content features. these specific assumptions which can be found in other post-processors as indicated above, have been avoided in tico because they may not hold across different species with different sequence characteristics. therefore our algorithm performs without any specification of parameters concerning the composition and location of sd motifs or the usage of start codons. this is of particular importance for genomes with a lower information content in the sd motifs, as is usually the case in high-g+c genomes  <cit> . furthermore, no empirical thresholds which could imply a severe bias, are involved in the analysis. for the scoring of potential tis we only consider smoothed trinucleotide probabilities in the flanking regions of the corresponding candidate start codons. the only special parameter of our method which has influence on the performance, is the degree of positional smoothing as adjusted by the parameter sigma . with the default setting, in the latest version of tico this parameter is adapted automatically .

in order to compare our algorithm with the other three tools on the test data described above, we used the predictions of the tool glimmer <dig>  for initial annotation of the coding regions in all cases. the results of glimmer, tico, rbsfinder, med-start and gs-finder are summarized in table  <dig>  the prediction rates of gs-finder, med-start and tico are comparable on the datasets of e. coli and b. subtilis. with respect to the rate of correctly predicted tis from the reference set, the maximum difference between these tools is  <dig> %. the improvement of the glimmer-prediction is at least  <dig> %. the rates achieved by rbsfinder are about 10% below the results of the former tools. for e. coli the best rates are  <dig> %  on the ecogene dataset and  <dig> %  on the link dataset. on the large dataset of b. subtilis the best rate was  <dig> % , on the small subset the best result was  <dig> % . note that the rates on the small dataset of b. subtilis containing  <dig> sequences are not as representative as the rates on the larger dataset in terms of statistical significance.

on the high-g+c genomes only tico and gs-finder provide good results with a maximum difference of  <dig> % between both tools. the maximum prediction rate on p. aeruginosa is  <dig> % , on b. pseudomallei it is  <dig> %  and  <dig> %  for chromosome  <dig> and  <dig>  respectively and on r. solanacearum the maximum rate is  <dig> %  and  <dig> %  for the chromosome and the plasmid, respectively. the performance of rbsfinder is about  <dig> to  <dig> percent below these rates. med-start completely failed on these genomes. the best rate, med-start achieved on the high-g+c genomes was  <dig> %. only  <dig> % of the predicted tis were in correspondence with the pseudocap annotation. to explain these results, we evaluated the sd motifs suggested by med-start. the following five motifs were proposed to be related with the translation initiation in p. aeruginosa: cctgg, gcgcc, gcctg, cgccg and cggcg. our first impression was that these motifs are very different from patterns of known sd motifs, which are usually described by the regular expression rggrggtgat   <cit> . comparing the med-start motifs with the resulting pwm model of our algorithm, we found most of the trimers contained in the motifs to be associated with high negative weights at the respective position. nearly all subwords of the med-start motifs  are among the  <dig> trimers with the highest negative weight. in other words, the pattern med-start »learned« to be related with a tis, may be most frequent in the upstream region of tis candidates, but it is by no means a tis signal. figure  <dig> shows the resulting weights  of our algorithm for those four trimers occurring most frequent in the med-start motifs. as indicated above, these trimers have negative weights almost everywhere and therefore they are unlikely to provide characteristic features of real tis.

CONCLUSIONS
we introduced a completely unsupervised approach to the problem of tis prediction in prokaryotic genomes. we showed that our clustering algorithm provides a valuable tool for genome annotation and reannotation, respectively. we found that even on high-g+c genomes, a considerable improvement of tis prediction accuracy can be achieved by means of our algorithm. in summary, we expect our method to offer advantages for the analysis of new genomes where nothing is known a priori about the associated shine-dalgarno motif or other specific sequence features of the underlying gene starts. the latest version of the corresponding tool is publicly available at  <cit> .

authors' contributions
pm had the main idea of the algorithm, implemented the clustering scheme and drafted most parts of the manuscript. mt contributed biological expertise, implemented the tool tico, performed the experimental evaluation and drafted substantial parts of the manuscript. both authors read and approved the final manuscript.

