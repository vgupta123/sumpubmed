BACKGROUND
a key problem in systems biology is estimating dynamical models of gene regulatory networks. the mathematical modeling of expression dynamics, combined with model parameter estimation, has been crucial to unraveling complex regulatory programs  <cit> , to recognizing the robustness of the regulatory architecture of the segment polarity genes to variations in initial conditions and parametric variation  <cit> , to studying mechanisms of robustness and evolution of the control of the cell cycle in yeast  <cit> , to identifying surprising shifts in the expression domains of the gap genes and the regulatory interactions responsible  <cit> , and to numerous other studies .

methods for estimating dynamical models depend on the form of the model and of the data available. we focus on the problem of estimating differential equation models of gene network dynamics based on time series data. assuming one notion of expression is associated to each gene–for example, mrna or protein expression level, but not both–then a generic ordinary differential equation  model for n genes can be formulated as   

where x is the vector of expression levels of the n genes, and f produces a vector of time derivatives of expression depending on the current expression levels and on some adjustable parameters θ. these parameters typically encode such features as kinetic rates for the production and decay of gene products, and regulatory influences between the genes. the regulatory architecture of the system–that is, which genes' expression derivatives depend on which other genes' expression–may be made explicit in the function f , or it may be implicit in the parameters , in which case optimizing the parameters implicitly determines network architecture. extensions of our work to modeling both mrna and protein levels of expression, for example, are straightforward, as would be extensions to functions f that depend on time or to delay differential equations, where the derivatives depend on the state of the system in the past. we will also assume that the expression data is collected from the wild type network, though initial conditions may vary. knock-out or over-expression data has also proven useful in genetic network inference, both in theory  <cit>  and in practice  <cit> . however, wild-type data is far more common and easier to generate than genetic perturbation data.

to introduce the dynamics estimation approach we investigate, suppose for simplicity that we have access to a single time series y,y,…,y, where each vector contains possibly-noisy observed expression values for all n of the genes. suppose further that we have chosen the form of our model, f. most often, parameters of an ode model are estimated by minimizing the squared error between modeled and observed expression   

where x denotes the solution to the ode  with parameters θ. the initial conditions are often taken from the observed data, x = y, or they may be part of the parameters θ. even when the ode model is linear, so that  for some matrix a, this optimization is not trivial. the solution to such an ode is given by the matrix exponential x = eatx, so that the dependence of the error on the parameters  is not straightforward. still, linear differential equation models have been fit efficiently to expression data by various means, most prominently by recasting the problem into other more convenient forms  <cit> . when f is nonlinear, as is typically the case when trying to make more detailed models of network dynamics, then solving the minimization  is all the more difficult.

there is another major approach to fitting ode models, however, via functional data analysis   <cit> . the fundamental idea of fda is to transform a data series ) into a continuous function ). this transformation often involves "denoising" the data, using smoothing splines or some other basis function approximation. various estimation problems can then be solved in terms of these functions. fda approaches have made some inroads in the literature on gene expression analysis. it has particularly appeared in papers on dimensionality reduction, clustering or classification for microarray expression time-series data . more relevantly to the present paper, several works have proposed estimating linear dynamical models from  expression data  <cit> . as will be explained in greater detail below, this approach to dynamical modeling allows the estimation problem to be reduced to one of regression, which carries both statistical and computational advantages.

there are several approaches to using fda ideas in estimating differential equations  <cit> . for the general problem of estimating differential equation parameters with nonlinear  dynamics function f, the most direct approach is to create the smooth of the expression series ŷ and then to differentiate that to produce . the model parameters can then be fit so that they recreate the estimated derivates as accurately as possible, rather than recreating the observed trajectory as accurately as possible.   

this error criterion is different from equation  <dig>  we will call that one trajectory-based error, and equation  <dig> the derivated-based error. the fda approach thus changes the problem being solved, rather than being an alternative method for solving the traditional formulation of ode fitting. the derivative-based error has several major computational advantages that allow it to be optimized much more efficiently. first, evaluating the derivatived-based error for any particular parameter set θ is more efficient than for trajectory-based error. it does not require computation of a solution to the ode , but only evaluating the dynamics function f along the estimated trajectory ŷ. depending on how ŷ is represented, its derivative, , may be efficiently calculable as well. a second major advantage is that for typical models, the parameters θ can be partitioned into subsets θg that are specific to each gene g's dynamics. in this case, the derivative-based error decomposes into a sum of terms for each gene.   

here,  denotes the element of the vector  corresponding to gene g, and similarly fg denotes the element of f pertaining to gene g. thus, if there are n genes and, say, k free parameters per gene, the fitting problem is reduced from a single nonlinear n × k-dimensional problem to a set of n independent k-dimensional optimization problems. such a reduction in dimensionality is typically very favorable when solving nonlinear optimization problems. finally, although the derivative-based error criterion is still a nonlinear optimization problem for arbitrary dynamics functions f, informally, the optimization tends to be "less nonlinear" than for the trajectory-based error. in part, this is because the error involves only the evaluation of the dynamics function rather than solutions to the dynamics equation. typically, f is not taken to be anything more complicated than a generalized linear model  <cit> , so that minimizing derivated-based error is a generalized-linear least squares regression problem–a type of problem routinely solved in statistical analyses.

despite the potential advantages of the fda approach, we believe it has not been seriously evaluated on the problem of estimating nonlinear models of gene expression dynamics. in particular, neither its efficiency nor its ability to correctly estimate regulatory network architecture have been evaluated. here, we formulate and test fda approaches on data from two different real networks, the gap gene system of drosophila melanogaster  <cit>  and the synthetic irma network  <cit> , and on simulated data generated by the genenetweaver program  <cit> . we show that the fda approach is extremely efficient at fitting nonlinear dynamical models of these data sets. in fact, it is so efficient that we can explicitly enumerate and test all possible regulatory architectures, which, to our knowledge, has never been achievable before for this type of modeling. these enumerations clarify the key regulatory factors, as well as interactions between factors, that explain the observed expression dynamics. we also assess the accuracy with which regulatory relationships are correctly extracted from the data, and compare it to other state-of-the-art fitting approaches. in general, the approach seems as successful as any other at determining which genes regulate which, and is very successful at discriminating the types of regulatory interactions–activation or repression.

RESULTS
systems and data
we apply fda methods for fitting differential equation models of data from two real gene networks and simulated data from a set of in silico systems. here we briefly describe these systems and the expression data upon which our fits are based.

the trunk gap gene system of drosophila melanogaster
the trunk gap gene system in drosophila is part of the segmentation network, which is responsible for establishing patterns of gene activity early in the development of the embryo. these patterns mark off different regions, or segments, along the anterior-posterior axis of the embryo. there are four trunk gap genes: hunchback , krüppel , giant  and knirps . it is known from extensive genetic studies that their activities are due to regulation amongst themselves, as well as input from at least three other genes: bicoid , caudal  and tailless . while there remain some disagreements about details of these regulatory relationships, a broad consensus network model is presented in figure 1a. all regulatory interactions between the trunk gap genes are repressive, while the factors bcd and cad activate different sets of genes. tll activates hb but represses the other trunk gap genes.

reinitz and colleagues have made detailed measurements of the protein expression of these seven genes during development of the embryo  <cit>  by confocal imaging of fluorescent antibody-labelled preparations. we use a data set that includes measurements at  <dig> different times spanning approximately one hour of actual time, and covering the trunk region of the embryo at a resolution of 1% of embryo length. this includes  <dig> genes ×  <dig> times ×  <dig> space points =  <dig> total expression measurements. the data for the hb gene are shown in figure 1b.

a synthetic gene network in yeast
cantone et al. <cit>  reported on the construction and mrna expression measurement of a synthetic gene network created in yeast called irma . the network was constructed from five genes: swi <dig>  cbf <dig>  gal <dig>  gal <dig> and ash <dig>  each gene was given a known and well-characterized promoter responsive to one or more of the other genes in the network, as shown in figure 1c. in their paper, cantone et al. describe gal <dig> as repressing gal <dig>  but this is via their natural protein interaction properties. at the mrna level, gal <dig> does not affect gal <dig>  and so the effect of gal <dig> is seen only at the target of gal <dig> protein, which is the promoter of swi <dig>  hence, our canonical model has gal <dig> repressing swi <dig>  the endogenous transcription factors were deleted from the organism, to limit the impact of external factors. the dependence of gal80/gal <dig> binding on galactose is used as an on/off switch for the network. in the presence of galactose, the swi <dig> gene is activated to subsequently trigger expression in the rest of the network. we use five different time-series that they generated by switching the network on using galactose and measuring the mrna levels every  <dig> min over a five hour interval by quantitative real-time rt-pcr .

test problems generated by genenetweaver
genenetweaver  <cit>  can be used to generate in silico datasets of the expression dynamics of gene networks, and has been the basis for part of the dream network reverse engineering challenge for several years running  <cit> . the tool allows one to generate data from estimated yeast or e. coli networks, or subnetworks thereof. the program generates a kinetic model of gene expression, and can output time-series or steady state data for wild-type and genetic perturbation conditions. we used genenetweaver to generate four in silico networks, two of which are sparsely connected like the irma network, which we denote s <dig> and s <dig> , and two of which are more densely connected like the gap gene network, which we denote d <dig> and d <dig>  we generated  <dig> wild-type expression time series for each network as the basis for model estimation .

unconstrained model-fitting by fda
we smoothed and transformed the time series into continuous functions of time using the cubic spline functions built into the matlab programming language . for each of the data sets, this results in a set of functions ŷi, where the superscript i indicates it is the ith such time series–one of  <dig> for the drosophila data, corresponding to each space point, one of  <dig> for the cantone data, and one of  <dig> for each genenet weaver network. with the cubic spline representation, the temporal derivatives can be directly obtained from the spline coefficients, so that  is readily computed.

we modeled the gene expression dynamics by differential equations of the form   

where rg is the maximum rate of production of gene g's protein or mrna,  is a sigmoidal function ranging between zero and one, tgg′ is the regulatory weight describing the effect of gene g′ on the production of g's protein or mrna, hg is a bias term, and λg is the decay rate.

for each gene g, fitting such an equation to the smoothed data by the fda approach amounts to finding parameters that minimize the error function   

where i ranges over the trajectories in the data set and t is integrated over the duration of the trajectories. this optimization problem was sufficiently tractable to be solved by the simplex-based search procedure fmincon in matlab, using repeated runs from different initial conditions, as described in the methods section. this error function contains no regularization to encourage "simple" explanations of the data and/or to prevent overfitting. so, we also tried adding an l <dig> penalty to the error function   

where e <dig> is the original error function of equation  <dig> and c is a parameter determining the relative import of fitting the data accurately and using "small" weights. the l <dig> penalty is often used in an attempt to eliminate excess parameters in regression problems. if one is only concerned about prediction accuracy, and if one has statistically independent data points, then cross-validation can be used to choose a value of c that appropriately trades off model complexity and model accuracy on the training data. in our case, the data come from time series, so derivative estimates at different times are certainly not statistically independent. nor is our primary concern the accuracy of the regression model. this is only a conduit to determining regulatory architecture. thus, we experimented with a range of c values, as described in more detail below. regulatory weights that remain nonzero for large values of c are the most important for explaining derivatives, and we give these the highest "confidence".

for the irma and genenetweaver data sets, we fit models without autoregulatory links, as these systems do not include autoregulation. for the gap gene system, however, where autoregulation is believed to occur, we allowed autoregulatory links in the model. three of the drosophila genes and some of the genes in the genenet weaver networks do not have any regulatory inputs–at least, not among the genes considered. we did not model these genes, restricting our modeling efforts  to those genes that are regulated.

results on the drosophila data
the gap gene network is densely connected, with  <dig> of the  <dig> possible links present in the gold standard model. adding regularization to the optimization criterion risks eliminating true positives. nevertheless, we tried optimizing the l1-regularized error function e <dig> for regularization constant c ranging from  <dig> to  <dig> in increments of  <dig> . the results are summarized in figure 2c. as one would hope, increasing c increases the number of true negatives from  <dig>  to  <dig> . at the same time, however, the number of true positives, and total correct links, drops drastically. the positive predictive value does not improve with c, as both true positives as well as false positives are dropped from the model .

results on the irma data
because the unregularized fit includes a large number of false positives, we hoped that adding the l1-regularization would improve the accuracy of the estimated network architecture. figure 2f shows the results for regularization constant c ranging between  <dig> and  <dig>  regularization was partly successful. for c ranging from roughly  <dig> to  <dig>  one of the true positives was lost, but five false positives were also trimmed away, approximately halving their number. this still left seven false positives, however, which could only be eliminated by losing most of the true positives. from both our experience and the results of cantone et al. <cit> , the irma dataset appears much more challenging than the gap gene data, perhaps due to the much smaller number of time series  or to noise in the data .

results on the genenetweaver data
broadly speaking, our results on the two sparse genenetweaver networks mimicked our results on irma, and our results on the two dense genenetweaver networks mimicked our results on the gap gene network. figure 2g-j show the estimated network structures. for the sparse networks all  or nearly all  true links are detected and all are correctly signed. however, there are significant numbers of false positives–albeit less than in the irma fit. conversely, the estimates for the dense networks include no  or few  false positives, but miss out identifying some true links. one particularly interesting case is gene g <dig> in network d <dig>  this gene has five regulators, all of which act positively, and only two of which are identified by the fda fit. the other regulators are difficult to detect because the gene is nearly always being activated, and so intuitively it appears almost as if it is unregulated–it is rare to observe the gene in a state that reveals anything about its regulation. the basic trends in true and false positives are reflected in the summary statistics shown in figure 2k. ppv is moderate for the sparse network and high for the dense networks, while sensitivity is the opposite. one difference in comparision with the gap gene and irma results is that fda obtains higher fractions of correctly signed links  on the sparse networks than on the dense networks. in all cases performance is significantly better than chance, which would only be right 1/ <dig> of the time.

for the two sparse networks, where false positives were a concern, we evaluated the l1-regularization approach to improving accuracy. the results are shown in figure 2l. for both networks, regularization was able to eliminate the majority of the false positives, with little loss in true positives. for s <dig>  the number of correct links  reached as high as  <dig> out of  <dig> links for regularization constant c around  <dig> or  <dig>  for s <dig>  the number of correct links was as high as  <dig> out of  <dig> 

explicit enumeration of possible network structures
as mentioned above, the fda approach to model fitting is computationally efficient. part of its speed is due simply to the greater ease of evaluating the derivative-based error  as opposed to the more traditional trajectory-based error . we tested this in matlab, comparing our implementation of the derivative-based error against a trajectory-based error function that uses the built-in ode <dig> function to solve the dynamics equation. over a range of testing conditions, we found that the derivative-based error could be computed  <dig> ± <dig> times faster than trajectory-based error.

one of the advantages of the speed with which the fda fits can be done is that we do not need to limit ourselves to unconstrained network architectures. we can explicitly test alternative architectures and, in fact, we are able to enumerate them all if the number of genes in the network is not too large. for the gap gene network, where all seven of the measured genes can act as input to any of the gap genes, there are  <dig> =  <dig> possible input combinations for any gene. because each gene's model is fit independently, we can test all possible regulatory architectures with a total of  <dig> ×  <dig> =  <dig> fits. this begins to be a significant computation, but on a 32-core computing cluster, it amounted to an overnight job. by enumerating all possible inputs for every gene, we are able to explicitly assess which regulators or combinations of regulators are most important for explaining each gene's observed expression. enumeration also gives us another way to regularize the fit, by limiting the number of inputs per gene.

we performed enumerations for all six networks. the results are summarized in figure  <dig>  panels a through c show the scores of all possible input combinations for several example genes. panel a, for instance, shows the scores of the different input combinations in explaining the hb gene in the gap gene network. at the top of each column of points, we list the regulator whose addition constitutes the lowest-error input set for the given number of regulatory inputs. for example, the single best factor for explaining hb's dynamics is hb itself–which is correct, as hb autoactivation is well established  <cit> . if two regulators are allowed, then the best combination is hb and tll, that latter of which helps to activate the posterior hb expression domain. with three regulators, repression from kr is added to the mix, by which point most of the variability in the data that can be explained by the model is explained. the fourth regulator to be added is cad, which is incorrect, but barely improves quality of fit. if five regulators are allowed, then the optimal combination does not include cad, but rather two other factors, bcd and gt. we found that in our gap gene fits, the single best regulator was always the gene itself. in some cases, this may be right. but in other cases is it likely wrong, and arises from confusing correlation with causation: expression of a gene requires regulatory activation, thus expression indicates activation, even though it does not cause it. this phenomenon did not occur in the irma and genenetweaver fits, as autoregulation was disallowed in those cases. figure 3b shows the scores of different input combinations for the swi <dig> gene in the irma network. the first two regulators identified, gal <dig> and gal <dig> are the true and only regulators. however, the plot shows that adding regulation by cbf <dig> to these two significantly reduces the error even further, even though it is not a true regulator. this kind of error profile was more characteristic of the irma genes . figure 3c shows the errors of input combinations for the g <dig> gene in the s <dig> network, which was typical for the genenetweaver networks. usually, the first one or two regulators explained nearly all of the explicable variability in the data–in this case, with one true positive link and one false positive link.

CONCLUSIONS
our computational studies show that functional data analysis is a powerful approach to estimating nonlinear models of gene expression dynamics, and in particular, to estimating the regulatory relationships between genes. the accuracy of fda was comparable to state of the art approaches on both the gap gene  <cit>  and irma  <cit>  data sets, which have previously been analyzed by a number of methods, and it performed well on synthetic data sets generated by the genenetweaver program  <cit> . the fda approach is computationally efficient because it transforms the estimation problem into a decomposable multiple regression problem. this efficiency enables in-depth analysis of the influences of different factors, as well as explicit exploration of all possible regulatory input combinations.

as with any estimation problem, overfitting-avoidance is an important consideration. we explored l1-regularization as well as explicitly limiting the number of regulators allowed for each gene.

l1-regularization was partly successful on the sparse irma network, and much more successful on the sparse genenetweaver networks. l1-regularization requires a constant, c, which determines the relative importance of accuracy of fit to the data versus model complexity . testing a range of values for c allows us to identify links that are most important for accounting for the data. large c means regulatory weights are highly penalized. weights that remain significantly different from zero at large c are the best predictors, and thus represent the links in which we have the most confidence. although there is no standard procedure for choosing a "best" value of c for this sort of data and fitting problem, empirically a value around c =  <dig> or c =  <dig> resulted in the highest accuracy of network reconstruction. that a common value worked for all networks is, no doubt, partly due to the similar scales of the expression data  and the similar numbers of candidate regulators per gene. still, it is surprising that common values of c emerged despite quite different numbers of time series for each network and different densities of regulatory links in the networks.

explicitly evaluating all possible combinations of regulators allows one to see which combinations are the best predictors. in particular, this allows one to identify the best 1-input model of each gene, the best 2-input model, and so on. so, it provides another means for determining which candidate regulators are most important. at the same time, it reveals whether there are alternative solutions of nearly equal quality, and generally gives a more in depth view of the contributions of different regulators, especially when used in conjunction with visualizations methods, as shown in the results section.

the approach that we have described for using fda to estimate nonlinear differential equation models of gene expression dynamics can be extended in various ways. one important extension would be to accommodate genetic perturbation data, such as knock-outs, knock-downs or overexpression conditions. in the case of a complete knock-out, this is readily handled by hard-wiring expression of the knocked-out gene to zero in the model and otherwise fitting the data as usual. however, for partial knockdowns or overexpressions of unknown or time-varying magnitudes, more sophisticated procedures are needed. another relevant extension would be to allow for delays in the differential equations. cantone et al., for example, suggest that delays may be relevant to modeling their system  <cit> . for known delays, the fda framework extends trivially to accommodate delay differential equations, but when delays are unknown, more elaborate extensions are needed  <cit> . finally, another natural generalization to explore would be to bayesian parameter estimation frameworks. because fda reduces the parameter estimation problem to one of nonlinear regression, standard methods for approximate computation of posteriors over parameters in nonlinear regression could be applied  <cit> . alternatively, if one is interested in markov-chain monte carlo  <cit>  or reversible-jump markov-chain monte carlo  <cit>  approaches to bayesian parameter and/or network structure estimation for genetic networks, then the efficiency of evaluating the data likelihood under an fda model, and the decomposition of the problem into separate genes, should be of great advantage.

