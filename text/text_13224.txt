BACKGROUND
automated functional annotation of proteins based on their sequence and structure is a challenging and important problem  <cit> . one area of interest to us is the identification of regions in protein structures that are statistically associated with a given structural or functional annotation. to provide a useful resource addressing this problem, we have developed web tools for identification of sequence conserved residues and environments structurally associated with specific functional and structural annotations.

projects such as structural classification of proteins   <cit>  or cath  <cit>  annotate the known protein structure universe heirarchically. for example, scop classifies protein by class, fold, superfamily and family. while these annotations often cluster into groups that represent function, some functional annotations do not transfer well across shared structural similarity. to annotate function, typically enzyme classification numbers  <cit>   and/or gene ontology   <cit>  codes are used. ec numbers are heirarchical and are built as a mechanism to annotate and classify overall enzyme chemistry. go is a more recent project aimed at developing an ontology for annotation of molecular function, biological process and cellular component.

sequence based approaches have evolved to become better at identifying distant homologs. initially, blast  <cit>  was commonly used to perform structural and functional annotation transfer. profile based approaches such as psi-blast  <cit>  and hidden markov models  using hmmer  are generally preferred over blast for improved remote homolog detection  <cit> . hmms can be built from gold standard alignments to search for distant homology in a supervised way  <cit> . for example, the superfamily model dataset contains superfamily hmm models built for use with the hmmer software  <cit> .

similarly, structural approaches have traditionally relied on structural superpositions to identify structural similarity. these tools include dali  <cit> , combinatorial extension   <cit>  or minrms  <cit> . other unsupervised methods that find structural neighbors include tools such as vast  <cit> , the method of singh and saha  <cit> , pints  <cit> , and lff  <cit> . more recent methods such as the match augmentation algorithm, relies on an evolutionary trace approach  <cit>  to define a template that can be searched from within a database  <cit> . as a complementary addition to these and other methods, we have developed the structure-based local environment search tool  as an unsupervised approach for discovering structurally conserved environments within protein structures  <cit> . s-blest is based on the feature  <cit>  representation of a local structural environment, and rapidly searches databases of vectors of local structure properties using nearest neighbor queries. these matched environments can be used in several ways. first, s-blest can combine different residue environment queries from a single protein using a congruence algorithm to find structurally similar proteins in a database, and the environments that confer that similarity. second, the environment can be associated with a structural or functional annotation by determining how well the other proteins that are annotated with a specific annotation are highly ranked in the query results. this can be quantified using the area under a receiver operator characteristics  curve.

the philosophy and/or the methods of the previously described approaches have been used to develop resources for the prediction of function from uncharacterized proteins. the dbali tools provide cath, scop, ec, go and keyword annotations for a protein structure  <cit> . profunc uses sequence, structure and residue templates to characterize proteins of interest  <cit> . proknow is a resource for annotating go terms using bayes' theorem and protein structure  <cit> . webfeature uses supervised learning to train models of protein environments for inferring functional sites in protein structures  <cit> .

here, we have integrated s-blest, psi-blast and hmmer to report sequence and structurally similar regions of protein domains. we then use s-blest to estimate structural residue environment conservation and psi-blast to estimate sequence conservation. in total we have built an automated pipeline for analysis of pdb formatted coordinate data, a website for analysis of the results and a suite of web services for extending tools to access these methods. we have further extended ucsf chimera  <cit>  and delano scientific pymol  to use our web services.

implementation
the underlying analysis methods are based on psi-blast  <cit> , hmmer , and s-blest  <cit> . here we have created an intuitive interface based on both a web site and an authenticated web services api. we then extended commonly used applications for protein structure analysis to take advantage of our services.

method overview
when structural coordinates are submitted to our service, the structural coordinates are submitted to s-blest and the sequence is submitted to psi-blast and hmmer using the following approaches.

for psi-blast, the sequence is queried against the database specified by the user upon submission. usually, we recommend using astral  <dig> v <dig>   <cit> . psi-blast  is run on our servers for three iterations. all output files are stored in a private job directory that is shared with the other methods, and all output options are available to the submitter. additionally, the degree of conservation across the submitted sequence is determined using the position specific scoring matrix  output from the blastpgp program.

after the psi-blast job is initiated, hmmer is run against the superfamily library of hmm models  <cit> . each statistically significant hit with e-value less than 10e- <dig> is determined, and the scop superfamily is tabulated. after running against the more than  <dig>  models, the top superfamilies are determined, and the top e-value to a specific model is reported. note that there are often multiple models for each superfamily, only the top e-value is reported.

the s-blest job takes several steps. first, to perform a query, a residue environment is encoded as a vector of properties using a procedure similar to others  <cit> . to describe the local environment for each residue, a vector of atom-based properties is determined from four  <dig>  Å concentric shells extending outward from the position of the residue's beta-carbon atom . in the case of glycine residues, the vector is centered in a position where a cβ would lie. this is determined using the procedure described previously  <cit> . the list of properties is available from the authors upon request, and are normalized based on the minimum and maximum values of each property in the database being queried. the vectors from the specified database of protein structures are then used to search against using manhattan distance for determining vector similarity. each residue environment is queried against the database, and all environments with a z-score of better than - <dig>  are tabulated. the results for each residue are stored in a file with the following naming format: "user.<residue number>.<chain>.<insertion code>", where spaces  are replaced with underscore characters and the 'user' represents a user submitted structure . these files are colloquially referred to as user files. once all residues are queried, the protein domains are identified by ranking the average top z-scores from the specified number of best residues from each domain. then, a congruence algorithm  <cit>  is performed that combines the user files by finding the best subset of the user specified number of residues to rank the protein chains in the database relative to the query.

once psi-blast, hmmer and s-blest are completed, the proteins containing either psi-blast high scoring segment pairs  of better than 10e- <dig> significance or s-blest z-scores less than the user submitted value  are ranked and reported. from those hits, the common scop  <cit>  family, scop superfamily, go terms  <cit>  and ec numbers  <cit>  are collected. if a hmmer predicted scop superfamily is not common with these hits, it is added to the list. when a user clicks on the "prediction of function summary" link on the results page, the structural environments and sequence residues most associated with these annotations can be determined. for s-blest, this is determined by calculating the area under an roc plot for each user file, by setting the residue environments as "+" if it is in a protein domain annotated with the query annotation  and "-" if it is not in a protein domain containing that annotation. by applying to each user file, the structurally conserved and unique residue environments most associated with an annotation is determined. this is plotted on the "prediction of function summary page." additionally, the most conserved psi-blast residues are plotted similarly using the relative conservation value reported in the pssm output .

the user has the ability to select the dataset to search against. we currently provide nonredundant sets of protein structures and domains. the astral compendium provides pdb style coordinates of domains annotated with scop ids and with maximum redundancy at  <dig>   <dig> or 100% sequence identity. furthermore, the pdb  <cit>  provides clusters of structures based on 50% and 70% sequence identity. we have selected the first structure from each cluster to create a searchable dataset. the default is astral  <dig> v <dig> , and that usually represents sufficient coverage of the protein domain universe for detection.

coordinate submission
when submitting coordinate data from the s-blest website, the user uploads a pdb formatted file and specifies the protein chain to be analyzed. the user also enters an email address, the minimum z-score, the number of residue environments to match, and the database to query against. upon submission, the coordinates are stored on the server and a job id is generated. the submission is then run on our network and the output files are generated. an email is then sent to the user indicating that their results are ready and provides a link to the results page for the job.

web site
the website portion of s-blest is built using several scripts written in php and python. the underlying job management is stored in a mysql database. the vector encoding and database searching is performed using the s-blest software, developed in c.

web services
as an alternative to the website interface of s-blest, we provide web services that fully encompass the features as described above. implementing structural data mining tools such as those described above in a web service is attractive because they allow for easy development of software that interacts with the underlying methods and they allow for integration of data from multiple sources. additionally, content providers are able to maintain their own datasets and tools, ensuring that researchers are always up to date. here, we have developed both a traditional web site and an api to the method using the soap protocol. with these tools, users can interactively analyze structurally conserved regions in query protein structures and assess their statistical significance. furthermore, residue environments that are associated with a particular function or structural annotation can be identified and quantified.

methods are provided to allow remote programs to submit structures, manage jobs, and retrieve results. we also provide a suite of protein structure related services that complement s-blest. developers can utilize these methods for use in interactive applications or batch processing jobs. web services do not bind a developer to a specific programming language, so they provide a flexible alternative to the standard web interaction. our services provide authenticated access to our protein structure analysis tools, structurally similar environments to queries and function prediction of specific residue environments.

plugin extensions
client plug-ins to two widely used protein visualization applications, ucsf's chimera  <cit>  and delano scientific's pymol , were developed using the python programming language. we developed a web service container and server using a feature rich networking toolkit, twisted . using this library, we serve data and methods through the web service transport, soap. all the accessible services are dynamically documented and self-described in the standard web service description language  format at the lifescience web site . both of these applications provide extensive developer api's which we utilize in order to map the data from the web services to protein structure. nearly all features of the website are accessible using the plug-ins. initially, after a job is reported as complete, the best hits are summarized in a pull down menu. each residue environment that has a significant match  to that hit, is reported in the text box below the hits pull down menu. selection of environments in the text box selects them on the structure, and performs a superposition of the two structures using the backbone atoms of the selected residues. when users click on the 'function' tab, all of the structural and functional annotations reported on the website are reported and the area under the roc plots are ranked  <cit> . in chimera, clicking the 'plot' button pops up a user interactive plot of the scores that selects residues on the structure based on the user clicked minimum threshold. additionally, a link is provided in the plug-in window that opens a web browser with the corresponding webpage for that query.

interface features
the s-blest website
the s-blest website provides an interface to submit jobs and view results. upon submission to the s-blest queue it takes between five and twenty minutes for a single protein of average length, depending on the size of the database being queried against. an example of a serine protease query is shown in figure  <dig>  when a user visits a results page, the user will see the summary information and the hmmer predicted scop superfamily and a link to predicted functions. below this summary are the hits. navigation is possible by browsing through the list of hits that have been returned in the s-blest/psi-blast job. each hit corresponds to a pdb id, and is annotated with a z-score, a psi-blast e-value, go annotations, ec annotations, and scop annotations. the hits can be sorted by psi-blast e-value or s-blest z-score. each hit link takes the user to a results page that corresponds to the selected hit. the results page for each hit contains a jmol  window for both the query pdb and the hit pdb. also provided on this page is a list of structurally significantly matched residues and several other links to other databases .

if there are significant hits, a link to the "function prediction" page will appear . clicking on this link will forward the user to a page that identifies the common scop, ec and go annotations of the hits, and displays the percentage of hits that share that annotation. below the annotations are two plots. the first plot is the conservation reported in the psi-blast pssm output file. the second plot displays the residue environments structurally associated with the annotation . clicking on a prediction updates the second plot to correspond to that specific annotation. below the plots, the structure is displayed in a jmol window with a quantification of which residues are high scoring. users can view sequence conservation, structural conservation or a normalized sum combination of the two; additionally thresholds can be added that limit the display of highlighted residues in the jmol window.

plugin extensions
using the supported applications , a user can interactively submit protein structure data to our s-blest tools to be processed. all jobs are managed by the server and a user can view the job history by displaying parameters and metadata associated with a specific query and by checking the completion status. when a job has completed, the user can view the top hits, as determined by s-blest, and choose to perform structural alignments between the submitted structure and a statistically significant hit.

the function annotation results can also be mapped to the submitted structure. the user selects the scop, go, or ec annotation of interest, and the plug-in will map the auc values on the structure through a color gradient representing the auc magnitude. additionally, chimera users are able to plot the results using the matplotlib library and select regions of the plot to view on the protein structure. both pssm and auc plots are available for display. this visual representation of the function annotations allow for a user to quickly hypothesize what environments are most likely associated with the functional site of a protein. an example of both the protein results and the function analysis of the plug-in are shown in figure  <dig> 

RESULTS
evaluation and limitations of the method
to evaluate the method, we determined the real world performance of annotation transfer on enzymes. this was performed by determining the sensitivity and precision of the method when predicting scop family, superfamily, go term and ec number on a random member of each enzyme fold in astral  <dig> v <dig> . each protein was run against the method, and since it is contained in the database being queried it was removed from both the psi-blast and s-blest results to prevent incorrect accuracies. hmmer superfamily predictions were not included, as the models were likely trained with the query protein. additionally, all domains spanning multiple chains were not included, since psi-blast results from multiple chains are difficult to analyze and the website currently only supports analysis of single chains. we applied this to astral  <dig> v <dig>  and astral  <dig> v <dig>  to evaluate how the method performs on homologs with less than 40% identity and on a newer dataset with many similar homologs. not surprisingly, including similar sequences from a newer dataset improves the results and the sensitivity, dramatically . sensitivity is low, in order to keep precision as high as possible. if the user wants to increase sensitivity, the threshold can be lowered upon submission and precision will be reduced, perhaps significantly. the difficulties in functional annotation transfer can be seen in the figure. clearly, the method performs well on scop superfamily prediction and the first three numbers of the ec number. go, scop and ec have relatively low sensitivities  and precision values of at least  <dig> . sensitivities should be improved by either improved remote homolog detection, more diverse libraries of proteins/domains, or more quantitative selection of annotations from the selection of hits.

we believe that the value of this method lies in identifying structural and functional annotations from statistically significant neighbors and in identifying residues and structural environments that are associated with those annotations. there exist structural environments that are conserved with little sequence similarity and vice versa. as a remote homolog detection tool, this resource will only find more hits than psi-blast if there are highly conserved structural environments between the query and the hit. this does occur, for example astral domain d12asa_  finds several significant environments in astral  <dig> v <dig> . these environments are in d1b8aa <dig>  with z-score of - <dig>  and in d1g51a <dig>  with z-score of - <dig>  while only d1b8aa <dig> is detected with psi-blast, with insignificant e-value of  <dig> .

CONCLUSIONS
automated functional annotation of proteins is an important problem for computational biology. we have developed a resource that can quickly determine if a protein has close structural neighbors and can associate regions of that protein to the functional annotations of those neighbors. our website accepts requests to analyze coordinates that have not been previously characterized and will identify conserved environments and make predictions when statistical significance exists. to make this useful broadly, we have extended common applications to use our computing servers to provide analysis with our method, and we encourage other researchers to extend applications using our web services framework.

availability and requirements
project name: s-blest

project home page: 

operating system: platform independent

programming language: python 

other requirements: pymol or ucsf chimera

license: indiana university rtc software license

any restrictions to use by non-academics: license required

authors' contributions
bp developed the underlying s-blest code, and the web site. cm developed the web services, the plug-in clients and aided in development of the underlying s-blest queuing system. ey partially developed the s-blest method and code. kb partially developed the s-blest web site and queuing system. rh advised cm and aided in design and development of the web services and client plug-ins. sdm developed the s-blest method, and aided in development of the s-blest code, web site, web services and queuing system.

