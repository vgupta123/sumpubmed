BACKGROUND
small molecules are of increasing interest for bioinformatics in areas such as metabolomics and drug discovery. the recent release of large open chemistry databases into the public domain  <cit>  calls for flexible, open toolkits to process them. these databases and tools will, for the first time, create opportunities for academia and third-world countries to perform state-of-the-art open drug discovery and translational research - endeavors so far a domain of the pharmaceutical industry. commonly used in this context are workflow engines for cheminformatics, where numerous recurring tasks can be automated, including tasks for

• chemical data filtering, transformation, curation and migration workflows

• chemical documentation and information retrieval related workflows 

• data analysis workflows 

the workflow paradigm allows scientists to flexibly create generic workflows using different kinds of data sources, filters and algorithms, which can later be adapted to changing needs. in order to achieve this, library methods are encapsulated in lego™-like building blocks which can be manipulated with a mouse or any pointing device in a graphical environment, relieving the scientist from the need to learn a programming language. building blocks are connected by data pipelines to enable data flow between them, which is why pipelining is often used interchangeably for workflow. workflows are increasingly used in cheminformatics research  <cit> .

existing proprietary or semi-proprietary implementations of the workflow or pipeline paradigm in molecular informatics include pipeline pilot  <cit>  from scitegic, a subsidiary of accelrys or the inforsense platform from inforsense  <cit> . both are commercially well established but closed source products with a large variety of different functionality. knime  <cit>  is a modular data exploration platform which uses a dual licensing model with the aladdin free public license. it is developed by the group of michael berthold at the university of konstanz, germany. knime is based on the open source eclipse platform. an overview of workflow systems in life sciences was recently given by tiwari et al.  <cit> .

in  <dig> we started to integrate our open source cheminformatics library, the chemistry development kit   <cit>  with taverna  <cit> , a workflow environment with an extensible architecture, to produce cdk-taverna, the first completely free  <cit>  workflow solution for cheminformatics, which we present here.

it makes additional use of other open source components such as bioclipse  <cit>  for visualization of workflow results, and pgchem::tigress  <cit>  as an interface to the database back-end for storage of large data sets.

implementation
the here introduced cdk-taverna plugin takes advantage of the plug-in detection manager of taverna for its installation. this manager requires a plug-in description xml file containing a plug-in name, a version number, a target taverna version number, a repository location and a maven-like java package description, all provided by the plug-in's installation website: http://www.cdk-taverna.de/plugin/.

after adding this url, the manager presents all available plug-in versions graphically to the user. in order to install the cdk-taverna plug-in the user selects the desired version after which all necessary java libraries are installed on-the-fly from the given installation website.

the cdk-taverna plug-in is written in java is published under the gnu lesser general public license . version  <dig> . <dig>  uses cdk revision  <dig>  like taverna itself the cdk-taverna plug-in uses maven  <dig>  <cit>  as a build system.

to integrate the cdk functionality, the plug-in makes use of the extension points provided by taverna allowing dynamic discovery of the provided functionality. the following sections describe what extension points are used, and how molecular data is represented when flowing through the workflow.

taverna's extension points
taverna allows the execution of workflows linking together heterogeneous open services, applications or databases   <cit> . for the integration of these different resource types taverna provides various interfaces and protocols for its extension. for example, it allows for easy access to webservices through wsdl  <cit>  and soap  <cit> .

the cdk-taverna plug-in, on the other hand, uses taverna's local extension mechanism. for local extensions, taverna provides a list of different service provider interfaces , as given in table  <dig>  cdk-taverna implements several of these, integrating cdk functionality as so-called local workers which run on the same machine as the taverna installation. full javadoc documentation of the plug-in's source code is available at http://cdk.sourceforge.net/cdk-taverna/api/.

all workers in cdk-taverna implement the cdklocalworker interface. it is used for the detection of workers by the cdkscavenger class which itself implements the taverna spi org.embl.ebi.escience.scuflui.workbench.scavenger interface. adding user interfaces for some of the workers requires an extension of the abstractcdkprocessoraction which again implements the taverna spi org.embl.ebi.escience.scuflui.spi.processoractionspi. the use of this spi allows the addition of, for example, file chooser dialogs for workers like file reader or writer.

the anatomy of a cdk-taverna worker
to create a cdk-taverna worker the java class of this worker has to implement the cdklocalworker interface. this interface defines that every worker has to define the following methods:

public map <string, datathing> execute

   throws taskexecutionexception;

public string inputnames();

public string inputtypes();

public string outputnames();

public string outputtypes();

the method inputnames and outputnames return the names of the ports of each worker whereas the inputtypes and outputtypes methods return the names for the java object types with its package declaration e.g. java/java.util.list for a list. within cdk-taverna chemical structures are passed around using the java object java/org.openscience.cdk.applications.taverna.cmlchemfile

RESULTS
the cdk-taverna plug-in currently provides  <dig> different cheminformatics workers. the fields of application of these workers are described in table  <dig>  these include workers for input and output  of various chemical files and line notations formats, databases, and descriptors for atoms, bonds and molecules. the miscellaneous workers are e.g. a substructure filter, an aromaticity detector, an atom typer or a reaction enumerator. some of the workers are outlined as part of example workflows described below . in the following, we outline the application of cdk-taverna with selected workflow scenarios. a larger list of workflows is available from myexperiment.org  <cit> .

iteration over large data sets
cheminformatics by definition deals with the discovery of chemical knowledge from large data collections. because these data sources are usually too large to be loaded into memory as a whole, it is needed to loop over all data entries to process them one by one. unfortunately, the architecture of taverna  <dig>  does not support such loops. cdk-taverna, therefore, provides workers which act like for or while loops, making use of taverna's iteration-and-retry mechanism to allow workflows to process large data sets.

database i/o
for database support the cdk-taverna project uses the postgresql  <cit>  relational database management system  with the open source pgchem::tigress  <cit>  extension. this combination allows storage and fast retrieval of up to a million molecules without running into memory limitations. the pgchem::tigress extension uses an implementation of the generalized search tree   <cit>  of the postgresql database. cdk-taverna can use a local installation of the postgresql database with the pgchem::tigress extension or can connect to a remote instance.

scenario 1: substructure search
we may want to design workflows for performing substructure searches in different ways depending on the type of input. in a first example the substructure workflow performs a topological substructure search on a list of given molecules and a given molecular substructure . the workflow inputs are a molecular substructure represented in the smiles line notation  <cit>  and a list of structures stored in a mdl sdfile  <cit> . the structures which match the substructure are stored as mdl molfiles  <cit> . the non-matching structures are converted into the chemical markup language  file format  <cit> . this small example workflow already combines four different molecular structure representations and the use of a topological substructure filter.

a related workflow performs a substructure search directly on a database: it uses functionality provided by the pgchem extension of the postgresql database. this extension allows the use of sql commands to perform a substructure search. a demonstration is given with the workflow in figure  <dig>  the molecules containing the substructure are reported in tabular form in a pdf file.

scenario 2: descriptor calculation
the descriptor calculation workflow, depicted in figure  <dig>  starts with loading its molecules from a postgresql database. the recognition of the atom types is the next step, followed by the addition of implicit hydrogens for each molecule as well as the detection of hückel aromaticity. each molecule is tagged for the descriptor calculation process. the tagging of the molecules is used to add a universal identifier to each molecule. this allows the identification of the corresponding quantitative structure-activity relationship  descriptor values within the table of calculated descriptor values. the qsar worker provides a user interface based selection of multiple qsar descriptors  for the calculation of a molecule's property vector based on the cdk.

the result of the workflow is a comma separated value  text file which contains the id of the molecule and the calculate property values. the property vectors may then be used for statistical analysis, clustering or machine learning purposes. with the postgresql database back-end cdk-taverna is able to calculate a large number of descriptors for many thousand of molecules in a reasonable time .

scenario 3: iterative descriptor calculation
the iterative descriptor calculation workflow is a work-around which allows the treatment of hundreds of thousands of molecules. this workflow  processes each molecule in the same manner as the non-iterative descriptor calculation workflow but it uses different database workers. instead of the single database worker get_molecules_from_database three database workers are applied: iterative_molecule_from_database_reader, get_molecule_from_database and has_next_molecule_from_database. the first of the three workers is used to configure the database connection and store it within an internal object registry. the second worker gets the id of the database connection as an input and loads molecules from the database. only a subset of the original query is loaded using the sql functions limit and offset. the last database worker checks whether the set of loaded molecules is the last of this query or if further molecules must be loaded. if the latter applies the output of this last worker would be the text value true. a last but essential worker is fail_if_true. this worker throws an exception if it gets the value true as input. this worker is crucial for the nested workflow: if it fails the whole nested workflow fails. taverna then provides a retry mechanism for a failing worker or nested workflow. this mechanism is used to re-run the nested workflow as often as necessary. this dirty workaround might become obsolete in later versions of taverna.

scenario 4: validation of cdk atom types
the calculation of physicochemical properties in the chemistry development kit  relies on the detection of atom types for all atoms in each molecule. the atom types describe basic atomic properties needed by the various cheminformatics algorithms implemented in the cdk. if no atom type is recognized for an atom, the atom is flagged as unknown. based on the cdk's atom type perception functionality, we devised an example workflow  for the validation of the cdk atom typing procedures. the detection of an unknown atom type by the cdk indicates that either the cdk lacks this specific atom type or the molecule contains chemically nonsensical atom types. in figure  <dig> the perceive_atom_types worker performs an atom type detection, followed by the retrieval of the database id for those molecules with unknown atom type by the extract_the_databaseid_from_the_molecule worker. the workflow creates two text files, one containing the identifier of all molecules with unknown atom types, created by the iterative_file_writer, and a second one containing information about which atom of which molecule is unknown to the cdk. an analysis  <cit>  of the atom type detection was performed on three different databases, two proprietary natural products databases and the open access database of chemical entities of biological interest   <cit> , maintained at the european bioinformatics institute . the workflow was run with more than  <dig> thousand molecules and showed that the cdk algorithms matches the atom types quite well, but that the atom type list is not complete for metals and other heavy atoms . missing atom type definitions is a general problem to many cheminformatics algorithms and not unique to the cdk: it leads to severe problems and computation error. therefore, initial atom type perception is an important filter for cheminformatics workflows.

scenario 5: reaction enumeration
markush structures are chemical drawings which represent a series of molecules by indicating locations where differences occur. these locations are marked as heterocyclic, alkyl, or identified by an r group, enumerating a series of possible groups, such as methyl, isopropyl, and pentyl. markush structures are commonly used in patents for describing whole compound classes and are named after eugene a. markush who described these kind of structures firstly in his us patent in the 1920s.

in the process of reaction enumeration, markush structures are used to design generic reactions. these reactions are usable for the enumeration of large chemical spaces, which includes the generation of chemical target libraries. the results of the enumeration have important applications in patent formulation and in high throughput screening . hts experiments screen large amounts of small molecules, called molecule libraries, against one or more assays for testing for biological activity. a couple of years ago, the libraries used for a single hts experiment consisted of up to  <dig>  molecules. nowadays, more targeted libraries of a reduced size of up to  <dig>  molecules are used, but still commonly defined using markush structures.

for reaction enumeration, a given reaction contains different building blocks, which are needed for the enumeration. each reactant of the reaction represents a building block. a scientist then selects a number of molecules for each reactant and the reaction enumeration creates a list of all possible products. the list of products then passes a virtual screening before at last a scientist decides which products will be synthesized. results can be visualized and inspected at the end in bioclipse  <cit> . cdk-taverna contains workers which support an enumeration task based on a generic reaction .

scenario 6: clustering workflows
during the work on this project the majority of workflows used unsupervised clustering with an implementation of the art 2-a algorithm  <cit> . this algorithm was chosen because of its capability to automatically cluster open-categorical problems. compared to traditional clustering methods like the k-means, the art 2-a algorithm is computationally less demanding and therefore applicable especially to large data sets. within a typical clustering workflow the get_qsar_vector_from_database worker loads molecule's data vectors  for a specific molecular sql query from the database. this worker provides options to inspect the result vector which includes checks for values such as not a number  or infinity. in addition, different thresholds may be specified for components or complete vector removal, e.g. for the removing of components whose minimum value equals its maximum value. after the loading and cleaning of a data vector, the clustering task is performed using the art2a_classificator worker, as depicted in figure  <dig>  for the configuration of this worker different options are available:

• linear scaling of the input vector to values between  <dig> and  <dig> 

• a switch between deterministic random and random random for the selection of the vectors to process,

• the definition of the convergence criteria of the clustering process,

• the required similarity for the convergence criteria,

• the maximum clustering time, and

• a limit for the number of clustering steps and a range for the vigilance parameter that guides the art 2-a algorithm.

the implemented art 2-a algorithm contains two possible convergence criteria. it converges if the classification does not change after one epoch or if the scalar product of the classes between two epochs is less than the required similarity. the clustering result is stored in form of a compressed xml document. this xml result document can be processed with different workers to create different visualizations depending on the aim of the clustering task. for chemical diversity analysis the art 2-a worker was used for a successive top-down clustering of three chemical databases . the occupancies of the different clusters show the similarity of the natural product databases in contrast to the chebi database which differs in chemical space occupation  <cit> . this findings will be outlined in a subsequent publication.

CONCLUSIONS
with cdk-taverna we have presented the first free and open cheminformatics workflow solution for the biosciences. it allows to link and process data from various sources in visually accessible workflow diagrams without any deeper programming experience. processing of hundreds of thousands of molecules has been demonstrated and the upper boundary is only limited by the amount of available memory. the currently implemented workers allow the processing of chemical data in various formats, provides the possibility to calculate chemical properties and allows cluster analysis of molecular descriptor vectors. the use of the postgresql database with the pgchem::tigres cheminformatics cartridge provides access to chemical databases with up to a million molecules.

availability and requirements
• project name: cdk-taverna

• project home page: http://www.cdk-taverna.de

• operating system: platform independent

• programming language: java

• other requirements: java  <dig> . <dig> or higher http://java.sun.com/, taverna  <dig> . <dig> http://sourceforge.net/projects/taverna/files/taverna/ <dig> .2/

• license: gnu library or lesser general public license 

• any restrictions to use by non-academics: none

authors' contributions
ew initiated the integration of taverna and the cdk. cs and az conceived the project, and lead the further development. tk did the majority of cdk-taverna development and developed the projects to its current state. all co-authors contributed to the manuscript. all authors read and approved the final manuscript.

