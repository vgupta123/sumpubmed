BACKGROUND
interrogation of a transcriptional profile is a key component to understanding the biology of an organism at the molecular level . by measuring the identity and abundance of rna molecules at a given point in time, one can generate a snapshot of how the organism is responding to the environment. accurate quantification of transcript abundance has therefore been the aim of techniques that have changed over the years with the advent of new technologies.

serial analysis of gene expression, or sage, established the technique of using a single, consistent section of each rna molecule to directly quantify transcript abundance  <cit> . early sage required steps in which concatemerized cdna fragments were cloned into a vector and sequenced. as such, sage fragments, or tags, were kept short  as a means of maximizing the number of cdna molecules that could be counted in a single vector insert.

digital gene expression  is a concept first introduced after the realization that large scale sequencing of expressed sequences  could give an indication of gene expression levels based on the frequency at which each gene sequence occurred in a data set  <cit> . the development of high-throughput sequencing paved the way for massively parallel signature sequencing, or mpss, the first adoption of sage-type dge using a high-throughput sequencing platform  <cit> . the general aim of mpss – to directly quantify transcript abundance by counting tags – is similar to sage. modifications of the approach, such as direct sequencing of individual cdna fragments, make mpss, and dge in general, more amenable to scaling than traditional sage. mpss was originally designed to produce relatively short tags , partially in response to the short read lengths expected at the time. even with short reads, the technique has proven useful in the assessment of gene expression  <cit> . more recent iterations of the technology, such as the ovation 3’-dge system , have modified the protocol to produce longer tags. rather than being defined by the reach of a type iis restriction enzyme, modern dge tags are limited only by read length and the distance of the main restriction site from the 3’ end of the transcript in question. we will hence use the term dge when referring to this type of analysis.

other technologies exist with which to examine the transcriptome. microarrays are a well-standardized means of examining relative abundance for a defined set of transcripts  <cit> . rna-seq is an extremely flexible approach, and is an excellent means for detecting alternative splicing, exon boundaries, full-transcript sequence, and normalized transcript abundance . however, dge remains a well-suited and cost-effective approach to directly quantify transcript abundance counts within a given sample.

they key difference between transcript quantification by rna-seq and by dge is the number of times a given transcript can be “hit”. in rna-seq, a single molecule of rna can be hit multiple times, which necessitates normalization relative to transcript length in order to generate an estimate of the abundance of that transcript. for quantification, rna-seq hits after the first on a given molecule contribute no new information about the number of molecules of that transcript in the sample.

in contrast, that same molecule would be sequenced only once by dge, because only the 3’-most fragment generated by the restriction enzyme is captured. the length of the total transcript has no effect on the capture of the dge tag, meaning that raw read counts can be used to determine the representation of the transcript, without the need for additional normalization. in rna-seq, sequencing depth is correlated with transcript abundance; in dge, sequencing depth is transcript abundance. no reads are superfluous, because each serves as the sole hit of a molecule of rna. as a consequence, for an experiment with a given number of reads, dge would be expected to have a better representation of rare transcripts than rna-seq. a corollary to this is that, if rare transcripts are of less interest for a given experiment, the number of reads generated could be reduced, thereby making a run of dge a substantially less expensive option than rna-seq.

we have developed triefinder to assist with the mapping and annotation of dge tags generated from single-end high-throughput sequencing. the program generates a database of all possible dge tags for a given restriction site, based on information from multiple sources, such as refseq, unigene, and genomic dna. the tag database is stored as a prefix tree, or “trie”, which can then be efficiently searched with the experimentally-generated tags. the program parses the results and generates a tab-delimited output detailing the hits to the various types of databases for a given tag. this parsed table gives the researcher flexibility in how the data can be analyzed and different priority schemes or subsets of the data can be used depending on the researcher’s needs. the user can then infer the biological relevance of each result by considering the number of mismatches and the inclusivity of the reference to which it mapped.

implementation
the software requires a set of experimentally sequenced tags, the sequence of the recognition site for the restriction enzyme used, and up to three target sequence databases. we recommend a conservative transcript database, like refseq; a liberal transcript database, like unigene; and a genomic database. refseq is a source of curated, high-confidence transcripts, while unigene will facilitate the analysis of low-abundance transcripts absent from refseq. the use of a genomic dna database allows for the detection of unannotated transcripts. the first step in the triefinder algorithm is to identify every putative tag in each target database . since all tags stem from a restriction enzyme digestion, each tag will begin with a common prefix of usually four letters. hence, the algorithm linearly scans the database to find every instance of the common prefix allowing for one mismatch. allowing this mismatch helps identify restriction sites that exist in the genome, but which are not represented in the reference sequence due to polymorphisms. upon finding a match, the nucleotides immediately downstream of the restriction site are stored in a temporary file. the length of this stored substring is defined by the user to be equal to the length of the experimental sequence tags. since restriction enzyme sites are usually reverse palindromic , the database is scanned only on one strand. to account for tags derived from the reverse strand, the algorithm also stores the reverse complement of the nucleotides immediately upstream of the restriction enzyme site. once the putative tags have been produced for every target database, the tags are sorted alphanumerically. a merging procedure finds identical tags from different target databases and merges them into a single contiguous file.figure  <dig> 
overview of the triefinder workflow. in step  <dig>  each of the selected sequence databases, refseq, unigene, and genome in this case, is scanned and all potential dge tags in each database are identified. in the second step, these potential tags are merged into a single database of tags, db_tags. in step  <dig>  the experimentally-determined tags are mapped to the db_tags database using a prefix tree. the net result is an annotation of each experimentally-determined tag with respect to the refseq, unigene, and/or genome databases.



the final step entails building a prefix tree  using all of the potential tags . a prefix tree represents the common prefixes as a single path  <cit> . apart from providing a memory-efficient representation of sequences sharing common prefix, exact searches can be handled in linear time with respect to the length of the input string. searches allowing mismatches can be handled using recursive calls while keeping track of the mismatches found along the search path and stopping when the number of allowed mismatches is reached. each sequence in a set of experimentally-determined tags is mapped by aligning it to putative tags using the prefix tree, allowing for a certain number of mismatches. the resulting hits are classified based on the database of origin of the putative tag, as well as the number of mismatches. users can thus prioritize the reporting of the mapping data according to the inclusiveness of the sequence database  and the number of mismatches. so, for example, one might weigh a hit with one mismatch to refseq more heavily than a perfect hit to unigene.figure  <dig> 
an example of a prefix tree or “trie”. common prefixes are represented as common branches. inexact searches for tags can be performed efficiently using recursive calls of the search algorithm until the user-defined maximum number of mismatches is met. to illustrate an exact search, the path leading to seq1: catttg is highlighted in green.



the main functional aspects of triefinder were implemented in c++, while higher-level functions were implemented in perl. we have tested the program in linux, mac os x, and cygwin environments. the memory requirements depend on the size of the input databases, but as an example, triefinder required about 92 gb of disk space to store the indices of a 76 bp zebrafish index, and 10–20 gb of ram to store the indices in memory.

RESULTS
functionality
a key feature that distinguishes triefinder from other alignment software is that it is specifically tailored to the mapping of dge tags. rather than searching the total set of rna or dna sequences for possible alignments to the dge tag, triefinder creates a database, termed db_tags, which only contains putative sequence tags of a length defined by the user. in addition to reducing the search space, this feature ensures that the reported tag could have been produced by the restriction enzyme in question.

to accomplish this, triefinder treats the fixed prefix sequence differently than the rest of the tag. this prefix represents the restriction site used to generate the tags, and is expected to be the first sequence detected on each tag. regardless of the number of mismatches allowed in the full sequence, triefinder tolerates no more than a single mismatch in the prefix. the motivation for allowing a single mismatch in the restriction site is to account for intraspecies single nucleotide polymorphisms where the sample would carry the correct recognition sequence but the reference would carry a mutation within this sequence. this is especially useful in species with highly polymorphic genomes, such as zebrafish  <cit> .

the program is run from the unix command line. for a given set of dge tags, the program has two main tasks: to build the db_tags database of all possible tags and to search db_tags for matches to experimental tags. these tasks can be accomplished with a single run of triefinder, or db_tags can be built and searched separately. to create the db_tags database, the user runs the program by indicating the sequence of the fixed prefix of the tags, the location of local fasta files for three nucleotide databases , and the path to the desired location of db_tags. to search the db_tags database with experimentally-generated tags, the path to the input fastq file of dge tags should be specified. an efficient means of presenting the data to triefinder is to reduce identical reads into a single fastq entry, using the name field to store the number of reads represented by the sequence. doing so avoids redundant mapping, and assists the user in interpreting the results. triefinder will attempt to identify any relevant db_tags databases before creating any of them anew.

the search output is a tab-delimited file. each line indicates the id and sequence of a dge tag, followed by the ids of the exact and degenerate matches to each of the three nucleotide databases. each of these potential matches is printed with a number to summarize how often a match was detected. degenerate hits are those with at least one mismatch, up to a maximum defined by the user, with the caveat that no more than one mismatch is tolerated in the prefix for the reasons given above.

the refseq and unigene results are the most directly applicable to transcript counting. the genomic dna results are valuable for those tags with no hits in the transcript databases, as they will show the genomic location of potential novel transcripts.

limitations
care must be taken when preparing dge reads to present to triefinder, especially when dealing with transcripts in which the distance from the restriction site to the end of the sequence is less than the length of the read. in these relatively rare cases, trimming of the dge tags and modification of the database parameters are necessary to avoid false negatives. for example, if the dge tags are all 76 bp in length, but the restriction site in a given transcript is only 30 bp away from its end, the dge tag will include about 46 bp worth of poly-a and adapter sequence that will prevent mapping unless it is trimmed prior to running triefinder. users may find programs like cutadapt to be useful for this purpose  <cit> .

in addition, the parameters with which the db_tags database is built need to be slightly modified to recover such a tag. if triefinder were instructed to create a database of all plausible tags of 76 bp, it would not create tags for which the restriction site were less than 76 bp from the end of the fasta sequence entry. because of this, the correctly-trimmed read from the sample above would need to be mapped to a shorter database – in this case, a database built for 30 bp tags.

it is worth noting that reads shorter than the total length of the database fragments can be mapped, a benefit of storing the database information in a trie. for example, if a database were built for 100 bp tags but sequencing were only done to 76 bp, triefinder would still be able to map most of the reads. however, in that scenario, tags generated from restriction sites less than 100 bp from the end of the transcript would be missed; retrieving them would require a database built for shorter fragments.

comparisons to existing software
to our knowledge, there are no algorithms or software designed specifically to provide both mapping and annotation of dge tags. however, we found that the mapping functionality of triefindera compares favorably with the short-read aligner, bowtieb
 <cit> . it should be noted that this comparison is only possible when allowing no more than one mismatch overall. otherwise, triefinder is the only program of the two that can treat the number of mismatches in the common 4-bp prefix differently from those in the rest of the read.

both programs were used to analyze  <dig>  unique 20-bp dge reads from zebrafish  <cit> . sequence files from the same three sources that were used to create the db_tags databases  were indexed as bowtie target databases. we ran bowtie on the three indexes separately, using settings that aligned about as many reads as triefinder . triefinder was consistently faster than bowtie in both overall cpu and wallclock time. in addition, the triefinder output allows the user to examine the results from all three databases simultaneously, without needing to switch between multiple files. the triefinder output also automatically prints out the number of entries matched by the read, which can be useful in determining the reliability of a match rather than having to parse multiple alignment files to summarize the alignment results. while triefinder is faster than bowtie, its key advantage is that the parsed output makes it easier for the user to prioritize mappings and interpret the data.table  <dig> 
performance of triefinder versus bowtie


performance of triefinder  and bowtie  when aligning  <dig>  unique 20-bp dge reads from zebrafish, allowing a single mismatch. triefinder was run using default settings. to match triefinder as closely as possible, bowtie-build was used to build three indexes based on the three database files  with default settings. the unigene input was modified to remove comment lines inconsistent with the fasta format when building the bowtie indexes. three bowtie alignments were run, one for each index, using the settings ‘-v  <dig> -a -y -t --fullref --sam --sam-nohead’. the times represent the mean of the sum of all steps, including database/index creation and the sequence search, for three runs of each program. all runs were performed on a server with 64 gb of ram and eight 800 mhz quad-core amd opteron processors. times are displayed as hours:minutes:seconds. dge reads are from liang et al.,  <dig>  <cit> . cpu, central processing unit; sd, standard deviation.



CONCLUSIONS
triefinder provides an efficient means to map and annotate sequence tags that are generated by dge, a cost-effective sequencing technique for direct transcript quantification. our use of a trie data structure allows for rapid, accurate searches of sequence databases. triefinder compares favorably with existing software, and produces an output format amenable to transcript quantification.

availability and requirements
project name: triefinder

project home page:http://research.nhgri.nih.gov/software/triefinder/

operating system: unix

programming languages: c++, perl

other requirements: zlib; fasta files from refseq, unigene, and the genomic dna sequence

license: gplv3

any restrictions to use by non-academics: none



endnotes
acommit aca5281183d4825111dab74d319c5cc61be4309a.

bcommit fe7a830e31e467d9f57beab798100d0c941ee0ee.

abbreviations
dgedigital gene expression

mpssmassively parallel signature sequencing

sagesequential analysis of gene expression.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

gr wrote the triefinder software and documentation, and the implementation section of the manuscript. mcl tested & provided feedback on the software, edited the documentation, and wrote the rest of the manuscript. jl carried out the dge that produced the file used to benchmark the software against bowtie. tgw oversaw algorithmic development, provided feedback on the software and edited the final manuscript. smb conceived of and oversaw the project and edited the final manuscript. all authors read and approved the final manuscript.

