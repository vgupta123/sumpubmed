BACKGROUND
multiple sequence alignment is one of the most fundamental and important issues in computational biology, and its applications include homologous genes identification, protein structure prediction and phylogenetic reconstruction. the most popular and commonly used approach for multiple sequence alignment is progressive alignment. basically, it works by aligning the two closest sequences first and adding the remaining sequences one by one until all sequences have been aligned. clustalw  <cit>  is one of the best-known sequence alignment tools based on progressive approach. the main problem with clustalw is that the initial pairwise alignments are fixed, and early errors cannot be corrected later, even if those alignments conflict with sequences added later  <cit> . t-coffee is another popular sequence alignment tool and can be viewed as a variant of the progressive method. it has been reported to get the highest scores on balibase benchmark database  <cit> . the significant improvement is achieved by pre-processing a data set of all pair-wise alignments and thus allowing for much better use of information in early stages. roshan et al.  <cit>  later showed that the quality of progressive alignment can be improved by using high-quality guide trees.

on the other hand, phylogeny is the evolutionary history among organisms. to date, sequence data is still the most used data type for phylogenetic reconstruction, and maximum parsimony  and maximum likelihood  are commonly used as the optimization criteria for reconstructing phylogenies. the most common approach for phylogenetic analysis is usually a two-step process: first, the input dna or protein sequences are aligned with a multiple sequence alignment program, such as clustalw and t-coffee; then, the phylogeny will be inferred from the alignment using tools such as paup and raxml. generally speaking, most phylogenetic reconstruction methods assume a fixed alignment of the input sequences, which is known to have impact on the accuracy of the inferred phylogeny  <cit> . a set of new methods using direct optimization approach have attracted much attention in the past several years, because such approach requires no prior knowledge of multiple sequence alignment. poy  <cit>  is one of the best known direct optimization methods. however simulations showed that it is inferior to the traditional approach of using mp or ml on aligned sequences  <cit> , as well as on the accuracy of inferred phylogenies  <cit> . in this paper, we will present a new direct optimization method that is based on affine gap models and uses an iterative approach solving many instances of median problems of three sequences. our simulations show that this method is superior to the traditional approach of phylogenetic reconstruction based on prior alignment; while for sequences with high substitution rates, it is also able to produce better multiple sequence alignment than those widely used sequence alignment tools.

multiple sequence alignment
an important way to compare multiple sequences is tree alignment, which is motivated by the fact that in most cases the sequences are not independent of each other but rather related by a evolutionary tree  <cit> . the tree alignment problem was developed principally by sankoff, who also proposed the first exact  algorithm  <cit>  via dynamic programming.

however, finding sequence assignment of the internal nodes that maximizes the similarity score is np-hard  <cit> . various approximation algorithms have also been designed to heuristically compute tree alignments and phylogenies, such as taar  <cit>  and gestalt  <cit> . all of these heuristics compute the alignment along a given tree  <cit>  or a simple tree such as the neighbor-joining  <cit>  tree and minimum spanning tree  <cit> .

tree alignment can be further improved with the iterative method proposed by  <cit> . for any binary tree, each internal node has three neighbors. re-optimization for the internal nodes can be achieved by iteratively relabeling each of them using the three neighboring nodes. the process will stop when no further improvement is possible. in our experiment, the tree will always converge after only several iterations. therefore, how to compute a high quality alignment for three sequences and infer their internal sequence is essential.

median problem of three sequences
for n sequences {s <dig>  s <dig> ...,sn}, the median problem is to find a sequence s <dig> such that ∑i=1nd0i is minimized, where d0i is the distance between s <dig> and si. when n =  <dig> we will call this the median problem of three, or just the median problem. the median problem is of particular importance since the smallest binary tree has only three leaves. gotoh  <cit>  presented the first three sequences alignment algorithm under affine gap model. powell et al.  <cit>  presented an algorithm to infer optimal alignments based on tree score by employing finite state machines , which are explicitly used for the generation of the three sequences from a parent sequence. however, the running time and memory space usage in both algorithms are o, where n is the length of the sequence. the limitation is obvious – huge demand of memory space makes it impossible to work for sequences with length of more than a couple of hundred characters. for example, when n =  <dig>  the total memory usage will be around  <dig> g bytes, and when n =  <dig>  the total memory usage will be over  <dig> g bytes, which are way over current workstation's capacity.

powell et al.  <cit>  presented another algorithm to tackle the memory usage problem. the memory complexity of the new version is o, where d is the tree score of the alignment. it is highly efficient when d <<n, which requires the input sequences be very similar, and the cost model be simple. thus their algorithm cannot use complex substitution matrix such as pam  <cit>  or blosum  <cit> , where the cost of substitutions can be very high, resulting in very large distances d that can easily grow much larger than n. later, yue and tang  <cit>  proposed an algorithm that solved the high memory usage by applying a divide-and-conquer strategy. this median solver reduces the memory usage to o while still producing the optimal alignment, which will be used as the core of our method presented in this paper.

methods
algorithm overview
our new algorithm takes k un-aligned sequences as input and conducts a search to find the best tree with lowest score. it then reports this tree as the phylogeny. as a by-product of this procedure, we will also produce a multiple alignment with respect to the best tree. there are two major components in this algorithm: 1) a procedure to score a given tree and produce alignment; and 2) a strategy to find the best tree from all possible trees. for a tree with k leaf nodes, we can assign each leaf  node with one of the given sequences. when the sequences of all k -  <dig> internal nodes are also known, we can easily obtain the tree score by summing all edge lengths induced by the pairwise alignment score between the two sequences at both ends of the edge. however, since we do not know any information about the internal sequences, we must explicitly label the internal nodes with sequences that produce the minimum tree score, which is computationally very hard. one should note that unlike some other alignment packages, we assume matches to have zero cost, and mismatch and gaps penalties to be positive, thus the best alignment will have the smallest score.

scoring a given tree
for a given tree, each input sequence is assigned to a leaf node with respect to the tree topology. our strategy for tree labeling and scoring consists of two main steps: 1) initialize each internal node with some sequence; 2) iteratively refine the internal sequences until no further change occurs.

we need to assign each internal node an initial sequence to start our scoring procedure. this can be done by simply assigning each internal node a random string of dna or protein sequences. however, other complex procedures will yield much better results. in our algorithm, a better initialization method is devised by assigning each internal node as the median solution from its three nearest leaves , using the median solvers discussed in the next section. we will arbitrarily pick one set of leaves if there are multiple choices of nearest neighboring leaves.

solving the median problem
the inputs to the median problem are three sequences, a, b and c of length x, y and z respectively. the output is three aligned sequences, a', b' and c' of the same length l, as well as an aligned median sequence m' . the median sequence m can then be obtained by simply removing all gaps from m'.

there is a straight-forward solution for the median problem using dynamic programming technique  <cit> . assume each of the three sequences is generated independently from their common parent sequence  by a three-state finite state machine , and the possible states for the fsms are i , d  and m . the problem of aligning sequences is then transformed into finding how the aligned sequences are generated. at each site in the aligned sequences, there are  <dig>  possible combinations of states . we can construct a cube of size x × y × z for each combination of states, and the result can be computed directly and is optimal. however, the time and the memory complexities of this simple algorithm are both o, where n is the length of the input sequences. thus, it is restricted by the high demand of memory usage and can only work on sequences of less than a few hundred characters.

myers et al.  <cit>  presented a linear space algorithm for pairwise alignment using affine gap costs. our algorithm uses a similar divide-and-conquer approach to split the three-dimensional cube. let i=x <dig>  the plane defined by i will cut the cube into two halves , and we need to find the midpoint on plane i where the final alignment passes through. once the midpoint is identified, we will apply the above procedure to the two small cubes, one defined by points  and , and the other by  and  . the process will be executed recursively until boundary conditions are encountered  <cit> .

the exact median solver can produce optimal alignment using o memory space, which makes it possible to align sequences with several thousand characters. however, the computation time remains o and it may take several hours to produce an exact median for sequences of length around one thousand characters. thus this exact solver is not satisfactory for large-scale sequence comparison. to handle longer sequences, we also developed a simple and fast heuristic solution as a substitute. it works as follows: pick up and align the closest two sequences of the three input sequences, and then align the third sequence with the pairwise alignment of the two. the median sequence can be inferred by a consensus vote at each site of the alignment of the three sequences. the time and space complexities of this procedure are both o. as shown in the section of experimental results, although the resulted alignment and internal sequence are not as good as those found by the exact median version, it is thousands of times faster and can be used to produce very high quality phylogenies.

iterative refinement
no matter how we obtain the initial internal sequences, they are surely very far away from optimal solutions, thus we must refine these sequences. inspired by bpanalysis  <cit>  and grappa  <cit>  for genome rearrangement analysis, we devised an iterative refinement procedure which works as the following:

• for each internal node si in the tree with a sequence assignment mi, we compute a new sequence m′i with its three neighboring nodes , using the median procedure described above. if there is any gap in the new node, we will remove all gaps so the next median problems still deal with gapless sequences.

• if the sum of the three new edge lengths is improved , we replace the previous assignment of si using the new computed sequence m′i. otherwise, we keep the previous assignment  on si.

• starting from the root node, we can repeatedly relabel each internal nodes using the above two steps until no further improvement is possible.

our method iterates the internal nodes through a depth-first procedure, although a breadth-first procedure can also be used. if the tree is un-rooted, we can randomly pick an internal node as the root. in our experiments, we found that this procedure is very robust and generally requires only three to four iterations, and the impact of picking different roots is negligible.

output final tree alignment
now we have a fully labeled tree with each internal and external node assigned a sequence, thus we can compute the final tree score by simply adding all edge scores. each edge score can be obtained by conducting pairwise alignment on the two sequences at the end of the edge. however, since we also want to obtain an alignment, we need to compute a multiple sequence alignment with respect to the best tree topology, with a basic assumption that the best tree  will also produce the best alignment.

our method of producing the final alignment is similar to those progressive alignment methods. starting from the root node, we first compute the pairwise alignment between the root and its right child node. after this step, there might be some gap symbols  inserted in the alignment. next, we need to add a new sequence  to this alignment, using the following steps to align a sequence with an alignment:

• first, we define a special character 'x' with a property that there is no charge of penalty of aligning it with either a character or a gap '-'. then we replace all the '-' symbol in the alignment with the special character 'x'. thus, the previous alignment will be transformed into two new sequences with only characters  and no gaps.

• we then conduct pairwise alignments between the new sequence and each of the two modified sequence. the best pairwise alignment will be kept as a "pivot", and the other alignments will be discarded. this procedure may introduce some new gaps and as a result, the new alignment will be of a different length with the rest of the previously aligned sequences. in the new alignment, there are two kinds of gaps: 'x', carried gaps from previous alignment; '-', gaps inserted at this step.

• we will verify the position of the newly inserted gaps and add gaps into the same position in the rest of the previously aligned sequences. at this point, the sequence has been aligned with the previous alignment and they are of the same length.

using the same strategy, whenever a new sequence is added, we align it with each one of the previous aligned cluster and keep the best pairwise alignment as the "pivot" to generate a new alignment cluster. the computation will continue until all the nodes in the tree have been covered.

searching the large tree space
finding the best tree from the large tree space is always very difficult. there are a total of !! =  ×  × ⋯ ×  <dig> un-rooted trees for any tree with n leaves. this number grows very fast: there are  <dig> trees for n =  <dig>  two million trees for n =  <dig>  but  <dig> trees for n =  <dig>  to remedy this problem, many heuristics have been developed to search this large space.

of course, the simplest way to search for the best tree is to enumerate and score all trees. not all trees need to be scored though, since some trees are clearly very bad and can be safely discarded by checking some lower bounds  <cit> . for example, there are a suite of circular-order lower bounds derived from triangular inequalities. however, these lower bounds are loose here and not too many trees can be pruned, hence the exhaustive approach does not work for datasets with more than  <dig> sequences.

many heuristic tree searching approaches are available, including nearest-neighbor interchanges , subtree pruning and regrafting , and tree bisection reconnection . in nni, one of the internal edges is chosen at random and the four subtrees  are reconnected randomly. in spr, a random edge is selected and two subtrees are created, then one of the two subtrees is removed at random and reinserted along a random edge in the other subtree. in tbr, similar to spr, one edge is removed and the tree is divided into two subtrees, then they are joined by an edge connecting two midpoints of edges of the two subtrees. all these heuristics require a good start tree. in our experiment, we find that tree returned by distance-based neighbor-joining  method usually do well on the test dataset, thus we use nj tree as the start point, and then we run tbr method to generate new trees from the neighbor-joining tree. whenever a new tree reports a better score, the best tree is updated and the tree is stored. the whole algorithm will stop when no improvement of tree score is achieved.

many methods have been developed by researchers to handle the large tree space, including branch-and-bound methods, quartet-based methods and disk-covering methods  <cit> . the tree search method used by our method can be further improved using these more complex methods.

RESULTS
we implement the algorithm as a c program called msam and test its accuracy through experiments. msam can handle both dna and protein sequences and allows users to specify different mutation cost matrices such as pam or blosum series, as well as the costs for gap opening and extension. we also develop msam-h, a time-efficient version of msam, which adopts the fast heuristic median solver instead of the exact solver during the tree refinement phase. since phylogeny analysis deals with lost historical information, we concentrate our experiments on simulated datasets, where the true evolutionary history and alignments are known.

phylogeny accuracy
the rose   <cit>  software package is a widely used simulator, which implements the hky <dig> model of dna sequence evolution and allows for insertions and deletions. we use the standard measurement of false positive and false negative  <cit>  to determine the topological accuracy of a method. if the true tree has an edge defining a bipartition with no equivalent in the reconstructed tree, that edge is a false negative ; conversely, if the reconstructed tree has an edge defining a bipartition with no equivalent in the true tree, that edge is a false positive . the false negative rate is the number of false negative edges divided by the number of edges of the true tree. since we are dealing with binary trees, fp and fn will be equal, hence only false negative rates are reported here.

in this experiment, we first use clustalw or t-coffee to align the input sequences and then use paup  <cit>  to generate the maximum parsimony tree from the alignment. on the other hand, msam is tested directly on the un-aligned input sequences. we test clustalw, t-coffee and paup with their default parameters , and for msam and msam-h we use the most common parameters, i.e., match costs  <dig>  mis-match costs  <dig>  gap opening penalty is  <dig>  and gap extension penalty is  <dig>  we also test against poy, which is the most used direct optimization methods.

we use birth-death model trees produced by the r8s software package  <cit> , with random deviation factor multiplied on each edge to deviate the model trees from ultrametric. for each model tree we generate dna sequences by using rose with the following parameters:

• the sequences are over the character set of {a, c, g, t};

• the transition/transversion ratio is set to  <dig>  the mutation frequencies are set as ;

• the insertion/deletion length frequencies are set as , which control the probabilities for gaps of lengths from  <dig> to 7;

• two groups of the insertion/deletion threshold are tested:  <dig>  and  <dig> ;

• three substitution rates are tested:  <dig> ,  <dig>  and  <dig> ;

• four different expected sequence lengths are tested:  <dig>   <dig>   <dig> and  <dig> 

we test trees of  <dig> taxa for each setting of parameters. for each category, we generate  <dig> dataset and report the average results. since speed is a major concern here, we use only msam-h with the fast heuristic median solver. the results are shown in figure  <dig>  figure  <dig> and figure  <dig> 

from these figures, we find that for datasets produced in this experiment, msam-h outperforms poy, clustal+paup and t-coffee+paup in most of the categories, especially when the substitution rate is increased . we also need to point out that the topology accuracy error rate decreases with the increase of input sequence length; the error rate also increases with the increase of indel rate, because for these datasets the alignment is more difficult.

this experiment suggests that even msam-h can produce better results than phylogenetic methods using prior knowledge of alignment. the average time for msam-h to iteratively score a given tree is less than one second for  <dig> characters, less than  <dig> seconds for  <dig> characters, and less than  <dig> seconds for  <dig> characters. the scoring procedure convergence quickly and all trees require fewer than five iterations to score. on the other hand, the hill-climbing tree search procedure will stop with fewer than  <dig> trees being examined. in short, the time used by msam-h on  <dig> taxa ranges from several minutes to an hour. although more taxa will surely require more time, as we mentioned above, this obstacle can be overcome by using other methods developed in the phylogeny research community.

alignment accuracy
we compare the alignments produced by msam with those obtained by poy, clustalw and t-coffee. we also report the score from msam-h. in this experiment, we use the same datasets created in the previous experiments, and the final tree alignments are produced on the best trees found in the previous section. we test clustalw and t-coffee with their default parameters and for msam and msam-h we use the common parameters of match cost  <dig>  mis-match penalty  <dig>  gap opening penalty  <dig>  and gap extension  <dig>  for poy, we used a testing script similar to that suggested by the authors. the alignments are then assessed using bali_score, a program provided by balibase  <cit>  to compare the inferred and the supposedly correct alignments. bali_score reports two scores: sp and cs. sp  score represents percent of residue pairs correctly aligned, and cs  represents percent of columns correctly aligned. higher sp and cs scores suggest better performance. in our experiments, although sp and cs scores are different, they will not affect the comparison results of all these programs, hence only sp scores are reported.

in terms of running time, clustalw is always the fastest, followed by msam-h, poy and t-coffee. among all these programs, the execution time of msam is the longest, largely due to its exact median computation procedure, which has time complexity of o.

CONCLUSIONS
we have presented an algorithm to align multiple sequences and reconstruct the phylogenies that minimize the alignment score. this method is based on efficient algorithms to solve the median problem of three sequences. for more sequences, our method overcomes various computational problems in tree scoring and tree searching. our extensive experiments suggest that this method is very promising and can produce high quality phylogenies and alignments.

further improvements are needed, however. we need to find a better method to produce the final alignment with respect to the best tree, and use more complex methods to search through the tree space. more experiments are necessary as well. for example, we plan to compare msam with other phylogeny tools such as maximum likelihood methods and bayesian methods.

competing interests
the authors declare that they have no competing interests.

authors' contributions
all authors contribute to the development and implementation of the algorithms, and fy and js are in charge of conducting simulations and analyzing results.

