BACKGROUND
in searching for protein functions and in building homology models, it is desirable to have accurate sequence motifs and profiles  <cit> , which are obtained from sequence alignments of homologous proteins. however, it is often difficult to obtain accurate sequence alignments based on sequence similarity alone when sequence similarity is low.

therefore, structural alignments, when available, have been used to guide sequence alignments. such structure-based sequence alignments have been used as the gold standard to evaluate pure sequence alignment methods  <cit>  and to derive structural environment-specific substitution matrices which have been shown to be useful for detection of remote homologs and for sequence-structure alignments  <cit> .

however, structure-based sequence alignments produced by different programs can be different even when the structures are similar  <cit> . there are a large number of instances wherein all or parts of the structure are shifted by  <dig> or  <dig> residues or even by an odd number of residues  <cit> . some methods are probably quite good at detecting structural similarity, yet relatively poor in terms of the accuracy of the sequence alignment they produce  <cit> .

dalilite and vast use a monte-carlo procedure after initial structural alignment  <cit> , fatcat and matt adopt afp -based dynamic programming without constructing initial structural alignments  <cit> , and other programs mostly rely on residue-level dynamic programming algorithm according to various scoring schemes with or without initial rigid-body superposition  <cit> .

we previously developed the se  algorithm which generates a sequence alignment from a superimposed structure pair without changing the superposition  <cit> . a number of other programs  <cit>  also provide a similar function, but these programs use the dynamic programming algorithm and a gap penalty. we have shown that se, which is not based on the dynamic programming algorithm and does not use a gap penalty, generates a more accurate alignment on average than programs that use a dynamic programming algorithm.

in this study, we report on the development of a fast refinement procedure, which can be used to improve an existing structure-based sequence alignment. the procedure, which we call rse , is an iterative procedure that uses se in its core. using cdd   <cit>  "root node set" as the reference alignment  <cit> , we show that appending the rse procedure to a structure-based sequence alignment program improves the accuracy of the alignment for all  <dig> programs tested.

RESULTS
improvement of the overall alignment accuracy
in order to see if the rse procedure improves or degrades alignments produced by different structure comparison programs, we ran the program to be tested with default options to obtain the structure-based sequence alignment for each structure pair. then the sequence alignment and the corresponding structure pair were fed to the rse program to obtain a new sequence alignment. we used the fraction of correctly aligned residues with shift error δ, fcar, or fcar, which is fcar averaged over all structure pairs in a superfamily, as the measure of accuracy of the alignment for each superfamily  <cit> . since there were  <dig> superfamilies in the dataset , we took the average over all superfamilies, <fcar> , as the measure of the overall accuracy of alignments for the whole dataset for a given method.

§ other than the four major classes.

† the  <dig> outlier superfamilies were excluded

rse procedure improved the alignment accuracy, as measured by <fcar>, for all methods . the improvements were small for dalilite and matras but about 5% for ce and vast. the alignments from fast, lock <dig>  and tm-align also improved even though these programs were designed to give high quality sequence alignments  <cit> . there were more alignments with accuracy gain than those with accuracy loss, except for dalilite and matras . the increase in the number of correctly aligned residues is large for many alignments, especially for ce, sheba, tm-align, and vast, while a decrease, when happens, is always relatively small in magnitude, except for a few pairs for matras.

the nature of the improvement varied among different methods. for ce, matt and tm-align, rse improved <fcar> but not <fcar> , which indicates that it is mostly alignment shift error that was reduced by the rse procedure. for fast and sheba- <dig>  the improvements appear to be mainly correction of under-alignments, presumably by reducing the number of gaps, since <fcar> increased almost as much as <fcar> by the refinement.

matt is a unique method in that it considers the flexibility of structures to improve the sequence alignment quality  <cit> , but its overall accuracy with the root node set was still worse than that of dalilite and could be noticeably increased by the rse procedure . the rse-augmented matt, fast, and sheba- <dig> achieved <fcar> values that were now comparable to that of dalilite, which is a much slower program .

computing time
the times spent by the rse procedure were nearly negligible compared to the total times spent by the programs to align the structure pairs: rse took about  <dig> to  <dig> milliseconds of wall clock time per alignment on average . in order to measure time complexity for the rse procedure in terms of cpu times, we focused on the refinement of cdd alignments, since the average wall clock times for all methods were similar . the number of cycles used by rse to reach the final alignment varied for different structure pairs  and affected the overall computing time. however, the cpu time per cycle showed linear dependence on the product of the query and target lengths .

dependence on structural types
in order to see if the improvement of the alignment depended on protein structural types, the structure pairs were grouped according to their scop class  and <fcar>s were computed for each class and method . the rse procedure improved the <fcar> for most classes , but there were cases wherein <fcar> decreased by a small amount . the <fcar> increases were most prominent for fast and vast across all scop classes and for ce for the β-sheet containing classes. the alignments also improved for lock <dig>  sheba- <dig>  matt and tm-align for all scop classes. the <fcar> in "others" class in dalilite increased to a comparatively large extent, indicating that certain defects in its alignments were effectively corrected.

refinement of good and not-so-good initial input alignments
when rse was run on the reference cdd alignment, fcar decreased for  <dig> out of  <dig> pairs, making the <fcar> value to decrease by approximately 5% . since cdd is being used as the standard, any change in alignment will reduce the <fcar> value. however, the <fcar> value remained higher than that from any structure comparison programs .

rse also improved the accuracy of the alignments from the pure sequence alignment program ssearch by 19% to about 67% and from the profile-profile alignment program salign by 20% to 75% . this shows that rse improves even a poor alignment. but the final accuracy attained was substantially lower than those from any structure comparison programs.

comparison of improvements between se and rse
the performance of rse was compared to that of the original se . se produced improved alignments for  <dig> methods, but poorer alignments for dalilite and matras. rse made additional improvements for all methods, although the extent of the improvement varied for different methods.

to give concrete examples of improvement, table  <dig> lists pairs in the immunoglobulin superfamily for which rse made most improvement. it can be noted that many programs generate alignments in which no residue pairs are correctly aligned. panels a and d in figure  <dig> show the sequence alignments and the structural superposition, respectively, produced by ce for the pair given in table  <dig>  shaded blocks in the sequence alignments indicate the residues aligned in the cdd reference alignment. note that all the residues in the shaded blocks in panel a are shifted by one residue, resulting in an out-of-phase superposition of β-strands and the mis-alignment of the signature cys residues of the immunoglobulin domains . for the pairs shown in table  <dig>  dalilite, ce, matras, sheba <dig>  tm-align, and vast produced sequence alignments with one residue shift, while fast, matt, and lock <dig> produced those with some residues shifted by two residues.

rse could correct these alignments, unlike se . since se just derives a sequence alignment from a given structural superposition without changing it, it cannot correct a bad superposition. in contrast, rse iteratively adjusts the structural superposition, which can result in a large improvement.

quality of the cdd alignments as the standard
in order to better understand the nature of the changes of the cdd alignments by the rse procedure, many cases were visually inspected. there were  <dig> pairs  from  <dig> different superfamilies for which the fcar in rse-refined cdd alignment decreased by more than 20%. as expected, some of these structure pairs were from the cd <dig>  and cd <dig>  superfamilies, for which our previous study  <cit>  indicated that the cdd alignments were in error. for some pairs from two other superfamilies , rse again appeared to produce more reasonable alignments than cdd, in terms of the distances and orientations of side chains between aligned residues. fourteen pairs including the worst three cases were from cd <dig>  which are made of α/α toroid structures . not all helices in these structures could be superposed simultaneously without ambiguity and rse produced tilted alignments. there were  <dig> pairs from the three superfamilies having the  <dig> tim-barrel structure , for which the inner layer of beta-strands were reasonably alignable but the outer helices were not. there were other helix-containing superfamilies , for which at least one pair of alpha-helices was not unambiguously alignable. for some pairs in cd <dig>  cdd has pairs of residues aligned, which rse could not align because they were too far apart from each other in an irregularly shaped region of the superposed structures. these were aligned in cdd presumably by sequence similarity.

discussion
structure-based sequence alignments are not as robust as one would like. in some cases, they can be inherently ambiguous. but more frequently different structure alignment programs generate alignments that contain errors that can be easily recognized by human experts. we showed in a previous study  <cit>  that, the overall average accuracy of structure-based sequence alignments, as measured by <fcar> with the cdd root node set as the reference, ranged from 81% to 89% depending on the program used. when the five outlier superfamilies  <cit>  are excluded, it ranges from 84% to 92% . the two newly included methods, tm-align  <cit>  and matt  <cit> , are not exceptional in this regard.

the rse procedure reported here was designed to improve the structure-based sequence alignments. it uses the previously reported se algorithm  <cit>  to obtain a refined sequence alignment from an input alignment. se is a heuristic algorithm that produces an alignment from two superimposed structures without using a gap penalty. figure  <dig> shows that the average accuracy improved for all structure alignment programs tested by adding the rse refinement procedure. notably, alignments from matt, which is a program that considers structural flexibility, could also be improved significantly by the rse procedure, which does not explicitly consider structural flexibility. rse reduced the shift error for most programs since the refinement increases fcar more than fcar. for fast and sheba- <dig>  rse seems to lengthen the alignment also since fcar and fcar increased to a similar extent. the alignments improved for structure pairs from all scop classes for most of the programs tested .

impressively, the alignments from fast, one of the fastest programs, could be improved to about the same level of accuracy as those from dalilite, the best performer without rse . the accuracies of matt and sheba- <dig> also increased to similar levels. these improvements were achieved with nearly negligible increase in overall processing times . therefore structure alignments can be done with substantially reduced computational cost without compromising accuracy by combining rse with one of the fastest programs. alternatively, the rse procedure can be implemented to replace the traditional residue-based dynamic programming algorithm in a structure comparison program that uses it to improve both the accuracy and computing time.

an ideal refinement procedure will fix incorrectly aligned regions without degrading the correctly aligned ones . unfortunately, rse seems to degrade some alignments when compared to the cdd alignments . when the cdd alignment itself was used as the initial alignment for an rse procedure, <fcar> and <fcar> decreased to about 95% and 96%, respectively . according to our visual inspection of a number of cases for which fcar fell to a value below 80%, the rse procedure appears to have found an alternate alignment or to have corrected cdd errors in most cases. we expect that similar causes are at work for at least some of the cases seen in figure  <dig> for which there is an apparent degradation of alignment accuracy.

rse greatly improves the alignments from ssearch and salign, which are non-structure-based, pure sequence-based alignment procedures . this is to be expected since use of the structural information should improve the sequence alignment. one notes, however, that the average accuracy attained after the refinement is far below those of any of the structure alignment methods . this indicates that the outcome of the rse procedure does depend on the quality of the input alignment. one can also note that there are about  <dig> to 11% error left after the rse refinement of the alignments of all methods  and that no method reached the accuracy of refined cdd alignments . these observations imply that rse could not correct certain errors of the input alignments. this could happen because some needed seed alignments could not be found from a poor initial superimposed structures and/or because of the constraints imposed by the inflexible, rigid body superposition of structures.

CONCLUSIONS
we devised a refinement procedure for structure-based sequence alignments, called rse. it uses the se algorithm, which produces a sequence alignment without using a gap penalty. when applied to the structure-based sequence alignments generated by various structure comparison/alignment programs, the average accuracy increased for all programs tested. this refinement procedure is fast enough to be routinely used as a supplemental procedure following a regular structure-based sequence alignment or to replace the traditional dynamic programming algorithm-based refinement procedure which is a part of many structural alignment programs.

