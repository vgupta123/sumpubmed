BACKGROUND
the explosion of information in the biomedical domain and particularly in genetics has highlighted the need for automated text information extraction techniques. medline, the primary research database serving the biomedical community, currently contains over  <dig> million abstracts, with  <dig>  new abstracts appearing each month. there is also an impressive number of molecular biological databases covering an array of information on genes, proteins, nucleotide and amino acid sequences, both generally  and for particular species , each containing entries numbering from the thousands to the millions and multiplying rapidly. all of these resources are largely curated by hand by expert annotators at enormous expense and the amount of information often prohibits updating previously annotated material to conform to changing annotation guidelines. this situation has naturally led to an interest in automated techniques for problems such as topic classification, word sense disambiguation, and tokenization in the biomedical domain .

in this paper we focus on the particular problem of named entity recognition  which requires the identification of names corresponding to shallow semantic categories. as posed by the biocreative evaluation in task 1a, this task required participants to identify a single entity "newgene" corresponding roughly to gene and protein names in medical abstracts. ner is an important component for more complex information extraction tasks such as automatic extraction of protein-protein interaction information. we present a system based on a maximum-entropy sequence tagger which achieved state-of-the-art performance in the biocreative comparative evaluation. below, we first describe the system, then present its performance on the biocreative task 1a development and evaluation data along with an analysis of errors, and finally close with a more general discussion of the task and our conclusions.

implementation
our entry was a machine learning system using a discriminatively trained sequence tagger. we devoted most of our efforts to finding useful features. the final system makes exhaustive use of clues within the sentence, as well as using various external resources, and pre- and post-processing. below, we describe our system in greater detail. we outline the machine learning model, our preprocessing phase, and then we detail our full feature set, starting with the features used in the closed section of the biocreative evaluation  and moving on to the features used in the open section . then we give implementation details of our training procedure, and finally we describe tagging and a postprocessing phase aimed at improving boundary detection.

model
the model used was a conditional markov model sequence tagger, implemented in java and based on the tagger used in  <cit> . the system essentially uses a logistic regression model to put a probability distribution over the set of classes  = {newgene, o} for each word. that is, for deciding the probability of class c at a certain word position, one employs a loglinear model that uses features fj of the input data  and previous classifications  to define the probability of the class as follows:



this calculation is then overlaid with a viterbi-style dynamic programming algorithm  <cit>  to find the best sequence of classifications. such models are commonly referred to as maximum entropy models in the nlp literature  <cit>  and are also known as maximum entropy markov models or memms  <cit> . maximum entropy models have been used with much success in ner tasks and are known for their ability to incorporate a large number of overlapping features. the features used in our model are all binary indicator functions that pick out particular data contexts and pair them with each class. this restriction is not required by the model form, but gives the model a particularly simple semantics: in the model above one is simply summing the λj weights for the features that "matched"  in a particular instance). for example, the matching features of the data context might be something like {prev. word = murine, curr. word = cd <dig>  prev. class = o} – though in practice our model would typically have several dozen features matching at any position. as is common for nlp models using many features, we employ equal-scale quadratic regularization of the parameter weights to prevent parameters rarely present in the data having high weights, which leads to model overfitting. modulo this penalization, the model parameters λj are set to maximize the conditional likelihood of the class sequence on the training data.

preprocessing
during both training and testing we used the tokenization supplied by the task organizers. this tokenization was of quite poor quality. for instance, periods were always separated off as tokens, and so a text string like  by  <dig> -fold. was tokenized as . however, we kept with this tokenization for practical reasons: since evaluation was to be done with respect to this tokenization, introducing a pair of processes that mapped back and forth between this representation and another tokenization scheme seemed a potentially error-prone step that was unlikely to help final results.

we normalized names of months and days of the week to lowercase, and mapped the british spellings of a few common medical terms to their american versions. we looked up all tokens in the gazetteer and in the english dictionary celex and calculated the frequency of each token in the corpus. we then identified abbreviations and long forms using the method of  <cit> . we tagged the data for part-of-speech  using the tnt pos tagger  <cit>  trained on the genia corpus  <cit> , which provides a gold standard for pos tags in biomedical text. the tnt pos tagger is an hmm-based tagger; perhaps due to greater robustness, we found that it outperformed the maximum entropy pos tagger that was available to us. testing showed that a genia-trained pos tagger performed much better than one trained on wall street journal text, due to the specialized nature of biomedical text. the task essentially required only picking out whether words were genes or not, but to allow recognition of adjacent but different named entities, the data made a newgene versus newgene <dig> distinction . we removed this distinction and mapped all entities to newgene. cases of adjacent named entities are sufficiently rare that it is hard to do well on them; we maximized performance by making the system unable to represent this situation.

features – closed section
the features described here were used in both the closed and open sections. the basic feature types were words, character substrings, word shapes, pos tags, abbreviations and the ne tags assigned to surrounding words. character substrings refer to all substrings of the current word, up to a length of  <dig> characters. thus the word "bio" would have features _b, _bi, _bio, _bio_, bio_, io_, o_, bio, bi, io, b, i, o. word shapes refer to mappings of each word to a simplified representation that encodes attributes such as its length and whether it contains capitalization, numerals, greek letters, and so on. for example, "varicella-zoster" would become xx-xxx, "mrna" would become xxxx, and "cpa1" would become xxxd. beyond standard word and pos tag features, character substring and word shape features were central players in the system of  <cit> . a feature encoding whether each word was an abbreviation, a long form, or neither was assigned to each token. lastly, a parentheses-matching feature that signalled when one parenthesis was classified differently from its pair was added in an effort to eliminate errors where the tagger classified matching parentheses differently. all of these basic feature types were then used singly or combined in various ways to create new features. features matching a word were also used disjunctively on left and right contexts. we borrowed disjunctive word features from  <cit> , and introduced abbreviation and parentheses matching features to model key problems in this textual domain. the resulting feature set is summarized in table  <dig> and comprises all of the features used in the closed section.

features – open section
the features described here were used in the "open" entry and comprise various external resources including gazetteers, a web querying technique, the full abstracts corresponding to the sentences in training and test sets, the genia corpus, and the abgene ne/pos tagger. the basic assumption behind and motivation for using external resources is that there are instances in the data where contextual clues do not provide sufficient evidence for confident classification. in such cases external resources may bridge the gap, either in the form of word lists known to refer to genes  or through examination of other contexts in which the same token appears and the exploitation of other more indicative contexts .

all external resources are vulnerable to incompleteness, noise, and ambiguity. gazetteers are arguably subject to all three and yet have been used successfully in a number of systems. because of its size , the web is the least vulnerable to incompleteness but is highly vulnerable to noise. nevertheless, the web has been used to good effect in various nlp tasks  from machine translation  <cit>  to anaphora resolution  <cit> . abstracts do not contain indicative contexts as frequently because they are so short; however their information is least vulnerable to ambiguity because a token used repeatedly within a text is likely used with the same meaning each time. information on a word's classification elsewhere in the same text has been successfully used in a number of ner systems . by incorporating all of these resources as features in a probabilistic system, we aimed to make use of their information while taking into account their reliability.

our gazetteer was compiled from lists of gene names from biomedical sites on the web  as well as from the gene ontology and the data provided for tasks 1a and 1b. the gazetteer was cleaned by removing single character entries , entries containing only digits or symbols and digits , and entries containing only words that could be found in the english dictionary celex . the final gazetteer contained  <dig> , <dig> entries. as stated above, gazetteer lookup was performed for each token in the preprocessing stage. lookup was case-insensitive but punctuation was required to match exactly. for multiple word entries in the gazetteer we required all words in the entry to match. we also experimented with fuzzy-matching where each gazetteer entry was converted into a regular expression; however this matching led to inferior results and was therefore not used.

for using the web we built several contexts indicative of gene entities including "x gene", "x mutation" or "x antagonist". for each entity x identified as a gene by an initial run of the tagger, we submitted the instantiation of each pattern to the web using the google api and obtained the number of hits. if at least one of the patterns returned more than zero hits, the string was assigned a 'web' value for the web feature. the classifier was then run again; this time incorporating the web feature. using web-querying only on likely candidates for genes as identified by an initial run of the tagger was more efficient than using it on all words. note however that this approach uses the web only to eliminate false positives and therefore does not improve recall. in other work  <cit>  we have explored using the web with low-frequency words to improve both recall and precision.

to give a bigger context, we automatically located the full medline abstract from which each biocreative sentence was taken by searching medline for the sentence using cgi scripts.  we incorporated additional information by tagging the abstract and then adding to words in the test sentence a feature that indicated whether the word was tagged as a gene in the abstract. we found that this feature was only helpful when combined with other information such as frequency and whether the word had appeared in the english dictionary celex. presumably this was due to common words for which the abstract feature was misleading; the fact that the word "gene" was tagged as a gene in the phrase "cpa <dig> gene" does not indicate that it is a gene named entity in the phrase "a gene".

the final two external resources that we incorporated were the abgene tagger  <cit>  and the genia corpus  <cit> . we found that while the abgene tagger used alone achieved only a modest f-score of  <dig>  on the biocreative development data, use of abgene ne output as a feature nevertheless slightly improved our recall and overall f-score. we assume that this is because its use allowed our classifier to partially exploit the various gazetteers and lists of good and bad terms incorporated into the abgene system , thereby gaining additional knowledge of gene names independent of context. we also sought to incorporate the genia corpus of ne-annotated medline abstracts but found this difficult because it used an entirely different tag set to the biocreative data and the mapping between them was unclear. we gained a small improvement by training the c&c tagger  <cit>  on the full ne tag set of the genia corpus , then using this tagger to tag both training and test data and using its output as a feature in our final tagger. the c&c tagger is another maximum entropy sequence tagger; it was used here for pragmatic reasons related to memory use.

training
as previously stated, maximum entropy systems allow incorporation of large numbers of diverse features; however, parameter estimation for large models can be time-consuming. we found that a particularly large number of features was necessary for high performance in the biomedical domain, and improved on our initial parameter estimation method  by implementing a quasi-newton optimization procedure. quasi-newton or limited memory variable metric methods have been shown to be faster than other algorithms by a factor of up to  <dig> to  <dig>  <cit> . our final system was trained on the combined training and development data of  <dig>  sentences and  <dig>  words and employed approximately  <dig>  million features; using quasi-newton it trained in less than two hours. in a real-world application the time taken for training is largely irrelevant because it is a one-time cost. however, in tuning a system, training must be fast enough to allow experimentation with various configurations.

tagging
tagging used a viterbi-style algorithm with a beam size of  <dig>  tagging was quick; the evaluation data of  <dig> sentences was tagged in approximately one minute .

postprocessing
we found that many of our errors stemmed from gene boundaries  and addressed this issue in several ways. boundary errors were often due to mismatched parentheses; the parentheses-matching feature described above did not eliminate these errors due to  instances in the training data which contained mismatched parentheses. we therefore used the unix command grep to remove genes containing mismatched parentheses from our results. we also found that we obtained different gene boundaries when we ran the classifier forwards versus backwards  and obtained a significant improvement in recall at the expense of precision by simply combining the two sets of results. this new, larger set of genes contained instances where one gene was a substring of another gene. in those instances we kept only the shorter gene. we found that this postprocessing was quite valuable and added approximately 1% to our f-score. it was used in both the open and closed sections. this postprocessing is effectively a very simple form of classifier combination, and we believe that most of the benefit comes from the classifier combination, rather than mitigating "label bias" problems  <cit> , which tend to become very weak when rich contextual features are employed. see  <cit>  for a more general classifier combination approach that includes forwards and backwards component models.

RESULTS
tables  <dig> , <dig> show the performance of both the "open" and "closed" versions of the system on the development and evaluation data as well as lesion studies showing the individual contribution of feature classes to the overall performance. surprisingly, the "closed" version of the system achieves performance only 1% lower than the "open" version on the evaluation data . we had expected more value from extra data sources, but it may well be that they are difficult to exploit effectively because of subtly different decisions about what does and does not count as a named entity to be tagged. however, it is also worth noting that a 1–2% improvement is relatively significant; as the performance of the classifier gradually improved during development, the improvements from revisions became progressively smaller so that at times features were incorporated which added only a tenth of a point. also surprising was that removing word shape features actually increased our f-score by  <dig> %. the "zero-order" and "first-order" experiments refer to how far back the classifier can see the ne tags assigned to previous words during sequence search. thus a zero-order model can only see the classification of the current word, while a first-order model can see the classification assigned to the previous word . removing second and third order features also improved our result marginally.

discussion
sources of error
a number of false positives  occurred when the entity tagged by the classifier was a description of a gene rather than a gene name, as with "homologue gene". fps also occurred with several strings that were composed of characters and digits or sequences of capitalised letters, or that included symbols and punctuation. this occurred frequently with measures, such as "kat/l"  and acronyms for non-gene entities. acronym ambiguity was a related source of error. the abbreviation "hat", for instance, could stand for the gene name "histone acetyltransferase" but actually referred to "hepatic artery thrombosis" in one specific context.

false negatives  were frequently caused by gene names that had not been encountered in the training data, so that the classifier did not have information about them and contextual clues were insufficient. fns also occurred in some coordinated nps where the modifier was attached to only one of the phrases but modified all of the coordinated members. abbreviations, expansions, and names in parentheses were also frequent causes of fns.

the single largest source of error was mistaken boundaries . in most cases, the classifier identified one correct and one incorrect boundary . it often included left or right context as part of the entity which was not contained in the gold standard. in several instances, the classifier split a string into separate entities which in fact referred to a single entity, or tagged separate entities as a single one. tokenisation errors sometimes triggered boundary errors, as with "pgs- <dig> . cat reporter gene" where the classifier only recognized "cat reporter" as a gene. because many abbreviations were not genes and because the precision and recall of the gazetteer were fairly low, we believe that both abbreviation and gazetteer features helped more in identifying gene boundaries than in identifying genes.

some of our errors were due to errors in the evaluation data. in example  below which appeared in the evaluation data, our system annotated "nuclear factor y" as a gene while the gold standard annotated only "nuclear factor"; we were penalized for both a fp and a fn. this appears to be an error and is inconsistent with  which appeared in the training data. examples  and  also appear to be misannotated; a quick web search shows that sgot  in  is a well-known enzyme, while the gaas/as heterojunctions  in  are found in semiconductors. even in cases where our error in the evaluation data was in fact an error, it could not infrequently be traced to a similar error in the training data. in example  we annotated "human cyclin-dependent kinase" and were penalized for a fp; however, our annotation mirrors the pattern of  which appeared in the training data.

 ...both pc <dig> and c <dig> cell nuclear extracts were recruited by the ccaat-box as a complex containing nuclear factor y.

 the sequence-specific interaction of nuclear factor hinf-d with this key proximal promoter element of the h4-fo <dig> gene is cell cycle regulated in normal diploid cells

 nitrogen balance was compared, and metabolic complications were monitored by evaluating bun, serum creatinine, creatinine clearance, serum co <dig>  sgot, sgpt, serum ldh, and serum alkaline phosphatase.

 envelope-function matching conditions for gaas/as heterojunctions.

 structure of the gene encoding the human cyclin-dependent kinase inhibitor p18

 ...which targets the cyclin-dependent kinase  inhibitor sic1p...

directions for improvement
the learning curve in figure  <dig> suggests that we can expect only very limited improvement from the availability of additional training data, given the current task and feature set. rather we must explore other avenues, including better exploitation of existing features and resources, development of additional features, incorporation of additional external resources, or experimentation with other algorithms and strategies for approaching the task.

one obvious improvement of our current system would be the incorporation of protein names into our gazetteer. due to ambiguity in the guidelines we were unaware that protein names were to be recognized and incorporated only gene names into our gazetteer.

secondly, more careful attention to coordination may improve results. this could involve parsing or less sophisticated treatment of coordinations. our work in  <cit>  shows that full parsing can give value to ner tasks. however, if one heads in this direction, one can no longer so easily think of ner as a lightweight initial processing step feeding into more complex analysis such as information extraction and full sentence understanding.

thirdly, boundary errors might be addressed more effectively with a more sophisticated post-processing stage. considering only the problem of segmentation of nes, collins  <cit>  applies reranking to candidate structures generated from a maximum-entropy tagger and achieves a  <dig> % relative reduction in error rate. he used reranking to allow features that describe the full ne identified by the tagger, such as its first and last words and attributes thereof, and whether all words between a set of quotes were given the same tag . such features cannot be encoded in a standard sequence tagger.

another possible avenue would be automatic addition of conjunctions of current features  <cit> . a number of the features listed in table  <dig>  as well as the features used to incorporate external resources, are relatively unintuitive conjunctions of other features that were chosen by lengthy trial and error processes. feature induction might suggest useful feature conjunctions that we have overlooked and reduce the cost of incorporating additional resources. all told, we spent about  <dig> person-weeks extending the system of  <cit>  for this evaluation exercise, much of it in designing and testing variant feature sets. this leaves us open to the criticism that much of the effort was not machine learning, and one might have been able to develop a system of hand-crafted rules in the same time. use of automatic feature induction would partly address this criticism.

finally, improvements in the annotation of data used for both training and evaluation may be the single best source of improvement. we note that the quality of data for biocreative was overall quite good and the organizers' innovation of providing alternate correct boundaries for a given named entity was instrumental in reducing spurious errors due to debatable boundaries. however, as noted in the previous section, a significant proportion of errors could be attributed to errors in the annotated data, and the fact that no clear annotation guidelines were provided in a domain as complex as molecular biology would suggest that there is room for improvement.

CONCLUSIONS
we have presented in detail a machine learning system for identifying genes and proteins in text and described its feature set comprising both contextual clues and external resources. we have also presented its performance on the biocreative development and evaluation data, analyzed its sources of error, and identified possible avenues for improvement.

many of our features were focused on increasing the correct identification of entity boundaries. this is partly an artifact of the scoring metric: using an f-score of exact match precision and recall means that one is penalized twice, both for a fp and a fn, in cases of an incorrect boundary identification. one scores better in such cases if one suggests no entity. this problem was somewhat ameliorated within the biocreative evaluation by a facility for annotators to be able to specify alternate correct answers, which allowed as correct matches of several lengths in places where the annotators thought it appropriate. the conll task also used a straight f-score metric, but note that the "mid-nineties" results commonly remembered from muc ner competitions reflect an easier metric where partial credit was given for cases of incorrect boundary identification. we evaluated our biocreative result of  <dig>  with the muc scorer and scored  <dig> . nevertheless, the lower results equally reflect that finding correct entity boundaries in the biomedical domain is an extremely hard task, whereas in many cases it is quite trivial for people or place names in english – capitalization giving sufficient clues.

the final performance of the tagger at  <dig>  f-score remains far below the best results reported for the most well-researched ner task of person, location, and organization entities in newswire texts. using the set of features designed for that task in conll  <dig>  <cit> , our system achieves an f-score of  <dig>  on the biocreative development data, a dramatic ten points lower than its f-score of  <dig>  on the conll newswire data. despite the massive size of the final feature set , its final performance of  <dig>  is still below its performance on the conll data , even though the biocreative task involved only one distinction. the discrepancy in performance is a striking illustration of the greater difficulty of ner in the biomedical domain.

it is worth comparing these performance figures with levels of interannotator agreement in the biomedical domain. interannotator agreement effectively provides a ceiling on the performance that can be expected from a system by measuring how well a human annotator performs on a task. while agreement for the muc entities was measured at 97% , a number of results have measured agreement for biomedical nes to be substantially lower, with f-scores in the range of  <dig>   <cit>  to  <dig>   <cit> . with interannotator agreement so low, it appears that we cannot currently expect to improve system performance more than a few points. this suggests that more clarity in what should be annotated  is needed. it also may suggest that performance of 83% or improvement of just a few points is sufficient for the technology to be practically applicable.

