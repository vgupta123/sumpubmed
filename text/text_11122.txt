BACKGROUND
cytosine  dna methylation plays a crucial role in various biological processes such as gene expression, chromatin accessibility, and imprinting, as well as in many diseases including cancer. over the decades, bisulfite sequencing  <cit>  has remained the gold standard for dna methylation analysis. bisulfite treatment of dna followed by pcr amplification leads to a chemical conversion of unmethylated cs to ts without affecting as, gs, ts or methylated cs. this c to t conversion results in non-complementarity in the two strands of dna . following strand-specific and locus-specific pcr amplification, direct- or pyro-sequencing is used to determine the methylation ratio of any given c locus as the proportion of remaining cs in all the sequencing reads. this pcr-based procedure is very labor intensive and time-consuming, and therefore inappropriate for high throughput studies.

tremendous progress has been achieved in the past two years in the development of massively parallel sequencing such as illumina/solexa and applied biosystems/solid. tens of millions of short tags  can now be simultaneously sequenced at less than 1% of the cost of traditional sanger methods. without the locus-specific pcr step, bisulfite treatment coupled with next-generation shotgun sequencing   <cit>  has become a powerful technique with the potential to quantitatively detect the methylation pattern of every c in the genome. nevertheless, the mapping of millions of bisulfite reads to the reference genome remains a computational challenge.

problems
first, the searching space is significantly increased relative to the original reference sequence. unlike normal sequencing, the watson and crick strands of bisulfite-treated sequences are not complementary to each other because the bisulfite conversion only occurs on cs. as a result, there will be four distinct strands after pcr amplification: bsw , bswr , bsc , and bscr  . during shotgun sequencing, a bisulfite read is almost equally likely to be derived from any of the four strands.

second, sequence complexity is reduced. in the mammalian genome, although ~19% of the bases are cs and another 19% are gs, only ~ <dig> % of dinucleotides are cpg dinucleotides. because c methylation occurs almost exclusively at cpg dinucleotide, the vast majority of cs in bsw and bsc strands will be converted to ts. therefore, most reads from the above two strands will be c-poor. however, pcr amplification will transcribe all gs as cs in bswr and bscr strands, so reads from those two strands are typically g-poor and have a normal c content. as a result, we expect the overall c content of bisulfite reads to be reduced by ~50%.

third, c to t mapping is asymmetric. the t in the bisulfite reads could be mapped to either c or t in the reference but not vice versa. this phenomenon not only increases the search space for mapping but also complicates the matching process . efficient implementation of such asymmetric c/t matching is critical for mapping high-throughput bisulfite reads to the reference genome and is still lacking in current short read alignment software.

a common approach to overcome these issues is to convert all cs to ts and map the converted reads to the converted reference; then, the alignment results are post-processed to count false-positive bisulfite c/t alignments as mismatches, where a c in the bs-read is aligned to a t in the reference  <cit> . although this all-inclusive c/t conversion is effective for reads derived from the c-poor strands, it is not appropriate for reads derived from the g-poor strands, where all the cs are actually transcribed from gs by pcr amplification and thus could not be converted to ts during bisulfite treatment. during shotgun sequencing, however, a bisulfite read is almost equally likely to be derived from either the c-poor or the g-poor strands. there is no precise way to determine the original strand a bisulfite read is derived from. furthermore, by ignoring the c/t mapping asymmetry, this strategy generates a large number of false-positive bisulfite mappings and greatly increases the computational load in a quadratic manner with an increase in the size of the reference sequence. in order to accurately extract the true bisulfite mappings in the post-processing stage, all mapping locations have to be recorded, even the non-unique mappings. therefore, this approach is only practical for small reference sequences, where only the c-poor strands are sequenced. for example, meissner et al. used this mapping strategy for reduced representation bisulfite sequencing   <cit> , where the genomic dna was digested by the mspl restriction enzyme and 40â€“ <dig> bp segments were selected for sequencing. the reference sequence  is only about 1% of the whole mouse genome, covering  <dig> % of the total cpg dinucleotides.

lister et al. used another bisulfite mapping strategy in their study of dna methylation in arabidopsis  <cit> . bisulfite reads were aligned to  <dig> reference sequences, namely the original genome and the two bisulfite-converted genomes with cs converted to ts for the forward strand and gs converted to as for the reverse strand. the mapping results for all three references were combined to generate methylation information. unlike the strategy used by meissner et al.  <cit> , this approach does not change the bisulfite read but rather captures possible bisulfite c/t alignments by allowing them to be mismatches. the biggest drawback of this approach is that the number of bisulfite c/t alignments that can be detected in a read is bounded by the number of mismatches allowed by the mapping software; this number might be further reduced by true mismatches such as snps. in this study, the bisulfite read length was  <dig> bp and  <dig> mismatches were allowed, so reads with more than  <dig> bisulfite c/t alignments, most of which were derived from cpg islands, were not detectable. this strategy could substantially compromise the mapping sensitivity.

naturally, it is desirable to map bisulfite reads directly to the reference sequence. cokus et al.  <cit>  used a custom-made tool, cokusalignment, to map bisulfite reads to the arabidopsis genome. this method is based on a tree searching algorithm, which is both computationally intensive and memory demanding. cokusalignment runs at a moderate speed  with a relatively small genome  by applying many project-specific optimizations, which might not be applicable to larger genomes or longer bisulfite reads. in addition, cokusalignment does not support basic alignment functions such as gapped or pair-end alignment. from a practical point of view, this method is not suitable for general purpose bisulfite sequence mapping due to its slow speed, lack of functions, and excessive hardware requirements, especially for large genomes. to our knowledge, an efficient, multifunctional, general-purpose bisulfite sequence mapping software is not yet available, and the lack of such a tool has become a major bottleneck for whole-genome dna methylation profiling using bisulfite sequencing.

we present here a general-purpose bisulfite sequence mapping program, bsmap, which addresses all the above issues. we used the general premise that all the c positions in the genome, where the asymmetric c/t transition can occur, are already known and can be used to guide the mapping of bisulfite reads. bsmap masks ts in the bisulfite reads as cs  only at c positions in the original reference while keeping all other ts in the bisulfite reads unchanged. bsmap then maps the masked bs read directly to the reference. the asymmetric c/t conversion is achieved through position-specific bitwise masking of the bisulfite reads; this method is extremely fast. in addition, bsmap is based on the more efficient hash table seeding algorithm, which indexes the reference for all possible k-mers, called seeds, and only searches the locations where the seeds are perfectly matched with part of the read. by looking up the seed table, the majority of non-mapping positions are skipped, and the searching efficiency is greatly improved. the seeding length and patterns can also be adjusted to allow for a different number of mismatches. because of these advantages, the seeding algorithm has been incorporated into most short read mapping software, including soap  <cit> , eland, maq  <cit> , and rmap  <cit> . by combining fast seeding and bitwise masking , bsmap offers a great improvement in performance as well as flexibility over the existing bisulfite mapping approaches.

RESULTS
hash table seeding
we implemented bsmap based on the open source software soap   <cit> . to find all possible mapping positions, each bisulfite read is divided into  <dig> parts, two of which are combined to form  <dig> possible seeds. to find the possible mapping positions, these seeds are then looked up in a hash table that is pre-compiled from the reference sequence. to accommodate the c/t mapping issue, the hash table includes all possible seeds in the reference sequence with their bisulfite variants as keys and the corresponding coordinates as values. the bisulfite variants of a specific seed are generated by enumerating all possible c=>t combinations .

bitwise masking
for each possible mapping location, the actual number of mismatches between the bisulfite read and the reference needs to be counted, allowing a t in the bisulfite read to map to a c in the reference. each dna nucleotide is represented by two bits  and dna sequences are represented as binary strings. we transfer a t in the bisulfite read to c where a corresponding c in the reference by applying a bit mask. specifically, a bitwise and mask  is used to convert a t  to c  or keep a c  unchanged where the reference is a c ; an and mask , which actually does not change anything , is used where the reference is an a, g, or t . the complete matching results between the original bisulfite reads and references are listed in table  <dig> 

the bitwise masks are also stored in a hash table structure as values, with the corresponding sequences as keys. counting bisulfite mismatches only adds one table query and one bitwise and operation to a normal sequence mapping. both operations can be executed very efficiently, and the computational load is only slightly increased.

mismatch counting
mismatch counting is implemented through a bitwise exclusive or  operation between the masked bisulfite read and the reference. for any two nucleotides, the xor operation returns a zero if they are the same  and a non-zero  otherwise. the number of mismatches between two sequences is the total number of non-zero two-bit segments. as illustrated in figure 3b and 3c, the mask "01" generated by a c in the 2nd position in the reference genome  converts the t in the original read to a c in the masked read ; the result is a match  in the mismatch counting. the t in the read is correctly aligned with the c in the reference without being identified as a mismatch. on the other hand, normal mismatches are not affected by the bisulfite mask, as indicated by the mismatches detected at the 10th and 12th nucleotides . in the 12th nt position, a t in the read was identified as a mismatch to the c in the reference because the mask "11" corresponding to the t in the reference did not change the c in the read, illustrating the asymmetry of c/t alignment.

other bsmap features
as discussed earlier, each bisulfite read needs to be aligned to four bisulfite strands  instead of two normal strands  as in normal read mapping. in bsmap, each bisulfite read and its reverse complementary sequence are aligned with both the watson and the crick strands of the reference sequence. this procedure is equivalent to mapping bs reads to four bisulfite strands  .

bsmap supports gapped/pair-end alignment and iterative trimming of low-quality base pairs, as well as parallel computing in multi-thread execution. in addition to providing unique hits, bsmap can also report non-unique multiple hits with a user-defined maximum number of mismatches. such "multiple hits" information may lead to more accurate estimates of the methylation ratio. in addition, bsmap also provides the option of using a simple seeding hash table, where all cs are converted into ts in the keys, as an alternative to the bisulfite seeding hash table in mapping. this simple seeding option is slower but is more memory efficient and thus would be suitable for computers with less ram.

algorithm comparisons
we compared bsmap with cokusalignment by mapping a real solexa dataset containing  <dig> , <dig> bisulfite reads  to the arabidopsis genome   <cit>  . bsmap is about 6Ã— faster than cokusalignment with a similar mapping sensitivity. overall, the mapping results for bsmap and cokusalignment were similar. it is worth noting that in bsmap, up to  <dig> mismatches were allowed and the read was kept only if the second best hit had >=  <dig> more mismatches than the best hit; in cokusalignment, the matching probability scores were calculated based on the original solexa image file, and the score cutoff could not be explicitly associated with our bsmap mapping criteria. therefore, a strict comparison of the mapping sensitivities of bsmap and cokusalignment is not feasible.

using the same arabidopsis read data, we also simulated the other two bisulfite mapping approaches discussed earlier  <cit>  and compared them with bsmap. to simulate the rrbs bisulfite mapping used by meissner et al.  <cit> , all cs were converted to ts in the reads and references, and converted reads were aligned to the converted reference using soap. as discussed earlier, it was not feasible to record all non-unique mappings for post-processing, so reads with more than  <dig> mappings were discarded. the false-positive bisulfite c/t alignments were counted as mismatches, and only the resulting unique mappings  were retained. meissner mapping was found to detect fewer unique bisulfite mappings  than bsmap  . this is due to the fact that the false-positive bisulfite c/t alignments can introduce too many matches to some reads, which exceed the  <dig> mapping threshold and are therefore discarded. with a larger reference genome, more reads may be discarded because of the larger number of false-positive bisulfite c/t alignments, leading to even lower mapping sensitivity. the estimated speed of meissner mapping is roughly half that of bsmap. because meissner et al. used a custom-written mapping program, an exact comparison of speed is not applicable. we excluded the post-processing time in our estimation of speed, so the actual mapping speed would be slower than listed.

* estimated speed based on soap, excluding the post processing time.

in simulating the mapping of lister et al.  <cit> , three reference sequences were used: the original arabidopsis genome sequence, the watson strand with all cs converted to ts, and the crick strand with all gs converted to as. for each read, the mapping results of the three references were merged and duplicated mappings were combined. the actual mismatches were recalculated by excluding the bisulfite alignments, and unique mappings were counted. as expected, lister mapping reported fewer uniquely mapped reads than bsmap . it is worth noting that the sensitivity of lister mapping highly depends on read length. longer reads will contain more bisulfite c/t alignments and are therefore more likely to exceed the maximum mismatch threshold and become un-mappable. on the other hand, longer reads will have more true mismatches, such as snps, and thus will tolerate fewer bisulfite c/t alignments as mismatches. therefore, with increased read length, we would expect a rapid drop in mapping sensitivity.

in summary, existing bisulfite mapping approaches either sacrifice mapping sensitivity for time or are too computationally expensive to be applied to large reference sequences. bsmap offers efficient yet accurate bisulfite mappings through a fast bitwise masking algorithm. a great degree of complexity in bisulfite read mapping is introduced by the fact that within a single read there might be multiple cpgs with heterogeneous methylation status. by algorithm design, bsmap is able to map multiple-cpg bisulfite reads to the genome considering every possible methylation pattern. bsmap is also able to detect c methylation other than at cpg content  <cit> , although it is difficult to determine whether the non-cpg c methylations are generated through a novel methylation mechanism or through incomplete bisulfite conversion.

whole genome bs-seq is still too costly, especially for a comparative analysis of large mammalian genomes in multiple cell types and conditions. recently, front-end array capture  <cit>  coupled with bisulfite sequencing has become a popular cost-effective strategy to generate methylation profiling of a reduced representation of a large genome, e.g., promoters and cpg islands. although the capture assay significantly enriches  the targeted sequences, only 50â€“90%  of the captured sequences are usually within the targeted regions. the remaining reads are from non-specific genome background. therefore, we advise bs-seq users to still use the entire genome rather than reduced representation of the genome, as the searching space for bisulfite read mapping.

CONCLUSIONS
we present a novel, flexible, and efficient general-purpose bisulfite sequence mapping program, bsmap, for the analysis of whole genome shotgun bs-seq data. bsmap uses the positions of all cs in the reference sequences and applies bitwise masking to implement asymmetric c/t transition: t in bisulfite reads can be mapped to either c or t in the reference but not vice versa. the efficient seeding and hash table used in bsmap offer both improved flexibility and performance. additionally, bsmap supports the detection of multiple cpg heterogeneous methylation patterns and c methylations that are not at a cpg site. finally, bsmap is easy to use and supports gapped/pair-end alignment, iterative trimming of low-quality base pairs, and multi-thread parallel computing.

