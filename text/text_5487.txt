BACKGROUND
spreadsheets are broadly used by the scientific community. their intuitive and easily understandable user interface is a significant advantage. they are also visually appealing and feature a number of tools to visualize data using charts. hence, spreadsheets are currently the primary means to store both experimental and manually curated genomic/proteomic data in most laboratories.

spreadsheet/database paradigm
scalability
spreadsheets might be sufficient when one needs to organize simple data. however, this approach raises a number of problems as spreadsheets present numerous well-known deficiencies compared to databases when dealing with involved data. as reported in previous studies  <cit> , spreadsheets do not scale up well and, as the spreadsheet will expand to accommodate a growing number of records of increasing complexity, data handling -- from data entry to data mining and analysis -- will become increasingly cumbersome, hence reducing the utility of potentially valuable information.

spreadsheets are also inefficient to handle sparse data, both in terms of storage and performance. storage is less of a concern nowadays as costs have dramatically decreased in the past few years. however, it should still be taken into consideration when handling millions of records, as is often the case in bioinformatics and large-scale studies in general. in contrast, optimized databases lead to speed improvements.

quality control
besides the scalability issue, spreadsheets are subject to data redundancy and consequently data integrity loss. for example, if protein annotations should be displayed in different spreadsheets, they will most likely be duplicated in each document. when an annotation is updated in one place, all occurrences elsewhere may not be updated, which will result in multiple inconsistent versions of the same data. in some cases, determining which versions are obsolete and which version is correct is challenging as different sections of the spreadsheet may have been updated at different times, which can lead to data consolidation issues. moreover, unlike databases, spreadsheets do not enforce referential integrity: they do not check that resources referenced somewhere in the spreadsheet are still valid, which may be critical, in particular when those resources are frequently updated or deleted.

spreadsheets are also error-prone and do not facilitate data entry. typically, any cell can contain any type of data and validation is optional at best. spreadsheets may even incorrectly infer a data type based on the data, in particular numbers and dates in excel. for example, the ph range  <dig> -  <dig> is interpreted by excel as the date may 6th, and automatically modified and displayed as such when the user types the value in a cell, without even notifying the user.

data sharing and access control
over the past few years, the scientific community has shifted its focus from research project conducted by a single investigator to collaborations among teams of investigators. projects have effectively become increasingly complex and require more resources to be successful  <cit> . while collaborative research is not new, it raises a number of sharing issues that need to be addressed to maximize the impact of collaborations. one of the keys to successful collaborative research is the development of a centralized system that manages all project data and serves as a unique entry point for the integration of data for data exploration and analysis for all collaborators  <cit> .

however, sharing data using spreadsheets as is commonly done in small groups, proved to be difficult, when possible. for example, a shared excel spreadsheet can be checked-out and edited by only one user at a time. other collaborators can only display a read-only copy of the document until changes are committed by the first user. neither waiting for a user to complete his work or duplicating resources is a practical satisfactory solution.

finally, spreadsheets provide little -- if any -- security or access control mechanisms. spreadsheets can be password-protected. however, the password of the spreadsheet is unique and known by many users, and they do not offer the possibility to select what users or groups of users can see/edit in the document: once opened, any record can be displayed by the user. the password is also embedded within the document and it is therefore not possible to revoke access remotely. databases on the other hand provide advanced access control mechanisms, and enable system administrators to precisely grant or revoke permissions to users or groups of users to create, view, update or delete resources as needed.

technology acceptance issue
despite their deficiencies, spreadsheets have been heavily used by biologists because they offer an intuitive and generic user interface that is applicable to most of their projects. upgrading from spreadsheets to a more sophisticated lims is not trivial. to be broadly accepted by the scientific community as a valuable replacement for spreadsheets, lims need to present the five acceptance characteristics defined by rogers  <cit> :

• relative advantage: the extent to which the lims offers improvements over spreadsheets,

• compatibility: its consistency with social practices and norms among its users,

• complexity: its ease of use or learning,

• trialability: the opportunity to try an innovation before committing to use it,

• observability: the extent to which the technology's gains are clear to see.

related work
to overcome spreadsheets limited capabilities, a number of proprietary lims have been developed, for example labvantage® sapphire  <cit> , exemplar lims  <cit>  or starlims  <cit> . however, their licenses fees are usually prohibitive, even for a single user. moreover, extra features - or modules - usually come at additional costs. as an example, labvantage is charging a  <dig> .75usda fee to enable the "advanced storage and logistics" features. starlims is charging an extra  <dig> .25usda per user for the basic edition of the document management module,  <dig> .25usda per user for batch processing and  <dig> .38usda for their web services framework. those license fees were obtained on gsa on september  <dig>   <dig> and represent the lowest possible prices negotiated with the u.s. government and may not even be available to non-governmental companies or organizations.

such costs are clearly prohibitive for most laboratories and therefore restrict the intended audience of these tools to bigger laboratories or to the industry. while numerous open-source lims have been developed  <cit> , a large number of existing systems focus on stock inventory and order management and were not designed to track experimental biological results. in addition, many projects were still in very early development stages, not supported any more, or not stable enough to run properly . as a consequence, very few systems  <cit>  are effectively available to the general scientific community. the main goal of the enzymetracker is to provide a free and simple open-source alternative.

cloud-based services
cloud-based solutions, such as google docs  <cit> , microsoft office web apps  <cit>  or zoho office suite  <cit> , have recently emerged and partially address the limitations of traditional spreadsheets. those solutions offer a group the possibility to create, edit and save spreadsheets online. they improve access control and versioning mechanisms. another benefit over traditional spreadsheets is that a unique copy of the spreadsheet is created, which can be accessed and edited online at the same time by many collaborators, thereby solving some of the data consolidation issues.

however, they suffer from the same limitations as traditional spreadsheets in terms of scalability and data quality control as they offer no means to validate data upon entry and no specific features for biological projects. storage capacity is limited to a few gigabytes at most, which make those solutions inappropriate for large projects. their graphical web-based user interfaces are dynamic, they are also less sophisticated that typical desktop applications and raised numerous complaints from our collaborators when first introduced. in addition, it should be noted that data are stored on the servers of the service provider, which can raise a number of issues if data confidentially is critical as is often the case in the biomedical field. the reliability of infrastructures supporting could services has been questioned lately, as all of the major service providers have recently experienced at least some glitches, from service outage  <cit>  to data losses  <cit> .

ilap
stocker et al.  <cit>  recently developed ilap, a workflow-driven software for experimental protocol development, data acquisition and analysis. ilap relies on a relational database and a web-based interface to effectively manage complex workflows derived from biological experimental protocols. integration of external programs using java applets is also possible, in particular the popular image processing library imagej  <cit> . however, ilap does not manage biological data directly, as data remain in files that should be uploaded and associated with a specific experiment or protocol. it is therefore not possible to search for a particular piece of biological data. ilap does not provide tools for annotating pictures from experimental results such as sds-page  gels or micro-plates, nor does it provides facilities to generate reports.

slims
daley et al.  <cit>  developed slims, a sample-based laboratory information management system. slims is a web application that provides members of a laboratory with an interface to view, edit, and create sample information. unlike ilap, slims leverages the relational database to store and manage biological data. however, its web-interface does not utilize recent advances in web technologies. for example, most data are displayed to the user as static html tables, which cannot be dynamically mined nor customized. slims also features a micro-plate annotation tool. micro-plate pictures, though, cannot be uploaded nor visualized along with their annotations. similarly, slims supports sds-page gels, which can be downloaded as plain text files, but may not be properly visualized using the picture of the gel. reports can be generated and exported, but cannot be customized.

in this paper, we propose the enzymetracker, an open-source web-based laboratory information management system for sample tracking, as an efficient and user-friendly alternative that aims at facilitating entry, mining and sharing of samples and experimental biological data. our system facilitates sample tracking by using qr matrix barcodes and features advanced yet intuitive biological data annotation and visualization tools as well as a flexible and customizable report designer.

implementation
architecture overview
despite their numerous benefits over spreadsheets, database management systems still lack satisfactory user interfaces for data analysis  <cit>  whereas excel spreadsheets do provide intuitive and well-known graphical interfaces for data analysis and consolidation, provided the issues mentioned above are addressed.

web-based applications are dynamic and interactive websites that offer a rich user interface comparable to standard desktop programs  <cit> . they can be executed on any connected workstation, without software installation or specific requirements besides a recent web-browser and an active internet connection to remotely access data. most importantly, web applications have the major advantage of being always up-to-date wherever they are being accessed, thereby eluding the need for multiples copies of the same document on different workstations, effectively solving synchronization issues between local copies.

the enzymetracker was designed to present the acceptance characteristics  to maximize its utility. it consists of an integrated and interactive collection of online spreadsheets accessible over the internet and backed-up by a relational database for efficient data management. spreadsheets are organized to follow the typical workflow in experimental biology and can be used to track preliminary bioinformatics analyses of potential targets of interests, cloning experiments, screening and expression data . it features a number of novel online tools to facilitate data entry and visualization. the enzymetracker also provides a library of shared records such as experimental protocols for sample assays and a comprehensive set of reporting and system administration tools. unlike commercial lims, the enzymetracker is open-source. the main benefit for laboratories is that they can extend our system and implement new features to suit their specific needs at no additional cost. with minimal programming skills, it is possible for example to add a simple spreadsheet to accommodate new types of data in a few hours.

we implemented the online spreadsheets as a set of highly dynamic web pages implemented using asynchronous javascript and xml  web technologies  <cit> , which enable a web application to communicate with a server in the background using javascript and xmlhttprequest objects, without interfering with the current state of the page. ajax technologies provide an effective means to create dynamic web pages that can interact with the user.

existing open-source solutions  were designed using a fixed layout. fixed layouts stay the same width and float on the background regardless of the size of the monitor. it is thus possible for the designer to fine control the parameters of a fixed layout. however, a major downside of fixed pages is that the layout does not accommodate well larger monitors as the layout must accommodate smaller screens as well. for example, at the full-hd definition , nearly half of the screen is blank when using ilap, which may be frustrating. to make the enzymetracker more accessible, we implemented our system using a fluid layout that automatically fits the content to the screen definition of the user. we successfully tested the enzymetracker on various screen definitions up to 3840* <dig> . our fluid approach will become increasingly beneficial for users as the sizes of monitors have significantly increased in the past few years and large definitions  now account for over 85%  <cit> .

the implementation of the enzymetracker also relies on a number of open-source programming libraries. the web user interface  of the enzymetracker was implemented using extjs v <dig>   <cit> , the general open-source ajax framework from sencha. it is backed-up by the freely available mysql v <dig>  relational database management system  <cit> . the server-side code was implemented using php v <dig>   <cit> . the openid authentication relies on the lightopenid implementation  <cit> . the visual annotation tools were build using the wz_jsgraphics v <dig>  javascript graphics library  <cit> .

reporting
in order to facilitate reporting and data sharing data among collaborators, the enzymetracker provides a flexible and user-friendly web interface for designing report templates. a report template is similar to other tables within the enzymetracker, except that the user can dynamically select the pieces of information to include in the report. it is also valuable to aggregate data from various tables or consolidate statistical data.

for instance, one can easily create a report template to display the percentage of transformants that were successfully assayed or the molecular weight of a protein.

our report designer is particularly useful for more complex queries, such as non-trivial joins when two pieces of information from two tables are not directly related and a number of intermediate tables must be used in order to join the two tables. for example, consider the case when the user needs to list the plate assays performed on clones related to cellulase. figure  <dig>  which illustrates a simplified entity-relationship diagram of tables relevant to generate this report, shows that plate assays are performed on transformants, not on clones directly. fortunately, transformants are related to clones, hence it is possible to define an implicit relation between clones and plates assays using transformants. however, manually writing the corresponding sql query requires a deep understanding of the underlying database structure and more advanced database skills. it is therefore not a viable solution in most biological laboratory.

instead, we designed algorithm  <dig> to automatically compute the optimal implicit joins to relate two tables: when a report is designed, the corresponding sql query is automatically generated based on the report configuration. in other words, the designer enables scientists with no database expertise to effectively design complex sql queries using our user-friendly interface and generate fully customized reports that will fit their needs in a few clicks .

more formally, our algorithm relies on the findshortestpath() method derived from dijkstra's shortest path algorithm  <cit> . the optimal join is defined as the path between the two tables with the lowest cost. the cost of a join between two tables is defined as the length of the shortest path between the two tables in the undirected weighted graph implied by the database structure, where the nodes represent tables and edges, foreign keys. using the above example, the cost of the join between clones and plate assays is  <dig> 

input: explicitly listed tables tabs

input: graph representation of the database dbgraph

output: list of tables needed for the join out

 <dig> out, checked ← array();

 <dig> out <cit>  ← array ;

 <dig> checked <cit>  ← tabs <cit> ;

 <dig> for i ←  <dig> to count do

 <dig>     ta ← tabs;

 <dig>     tb ← tabs;

 <dig>     if tb not in out then

 <dig>         path ← findshortestpath;

 <dig>     end

 <dig> end

algorithm 1: list of tables needed for the optimal join

edges were weighted based on the biological significance of the foreign keys. for instance, because of the normalization of the database, a number of intermediate joining tables are created to define the relationships between real biological entities -- in particular in m : n relations -- which incorrectly increases the cost of the relationship as the path between the two biologically meaningful tables is longer. the cost of edges in m : n relations was therefore reduced to avoid the bias induced by the normalization process during the database design.

when the configuration of the report template is updated, it is sent to the server as an xmlhttprequest object and the optimal join is computed and executed by the sql engine. the results of the query are finally used to build the configuration of the extjs spreadsheet used to dynamically preview the report as the template is being built. report templates are saved in the underlying database as views.

RESULTS
user interface overview
the content of the lower panel  varies with the data being shown. on most pages, the panel displays the record selected in the spreadsheet in a more readable format. depending on the spreadsheet, it can provide links to cross-referenced databases such as the gene ontology  <cit>  or the clusters of orthologous groups of proteins  database  <cit> . it also automatically fetches complete references from the literature using pubmed's public api  <cit>  given the pmid of an article  and jobs for nucleotide or protein sequence alignment can be submitted to ncbi's blast server in one click . a qr code  also summarizes the current record and may be printed on the sample container for future reference .

data entry
the spreadsheet  is the primary means of entering data in the enzymetracker. each cell is associated with an editor whose format depends on the data within the cell. most cell editors are simple text fields. more advanced editors are provided where needed. in particular, cross-references to other tables are typically associated with a combo box, whose content is dynamically generated after the content of the referenced table. figure 3d illustrates the utilization of a combo box to select a clone in the page for annotations. combo boxes facilitate data entry by suggesting entries as the user types. they also have the added benefit of limiting data entry mistakes, in particular when users enter data that do not exist in the referenced table. specific editors are also available for boolean flags and dates. the enzymetracker also supports rich text editors with text formatting capabilities, which are mainly used for comments and free-text cells. end-users also have the possibility to undo modifications made in the active spreadsheet using the gui before saving data, so that typos can be quickly corrected without triggering the versioning and backup mechanism.

data integrity and validation
to further reduce entry errors, each cell editor can be associated with a validator. validators check the correctness of data types and send immediate feedback to the user in case of an error. they are usually based on regular expressions or more advanced customized functions as needed. validators are also useful to enforce data entry conventions and consistency within a group of users.

in addition, to minimize data entry, cells are automatically computed whenever possible. for example, the length of a protein sequence and its molecular weight  are automatically calculated when one enters a protein sequence. calculated fields are also used to reduce data redundancy compared to standard spreadsheets. for instance, the name of a protein should appear on several related spreadsheets. using standard spreadsheets, the user needs to copy/paste the name of the protein wherever needed. this will lead to inconsistencies between spreadsheets during their update. in the enzymetracker, the underlying relational database is leveraged to display the name of the protein in all tables where it is needed. the first benefit is that the protein name is automatically displayed whenever there exists a relation between proteins and the current spreadsheet. second, changes to the protein data are automatically reflected in all tables. data in the various online tables are therefore always consistent and up-to-date.

data importation/exportation
in some cases, the different enzyme assays and characterization of samples were already being recorded using excel spreadsheets. we therefore implemented importation routines to facilitate the migration process to the enzymetracker. from experience, basic data importation by uploading and parsing files is error-prone, as files formats and layouts tend to vary between files. for example, one column may be missing in one file, which will shift other columns and lead the parser to import the wrong data.

instead, we implemented a drag-and-drop importation mechanism where appropriate. the user selects the data to import in the excel file and drags and drops the selection into the browser's window. the major benefit of this semi-automatic approach is that it makes it easier for the users to review the data before importation, hence reducing the number of errors made. it also gives more flexibility as only specific records can be selected and imported. finally, users have the possibility to export enzymetracker spreadsheets to excel documents in one click. data may also be imported programmatically, using javascript and restful requests.

versioning and backups
our system is supported by a relational database, which efficiently handles versioning and backups. unlike in standard spreadsheets, when a user updates or deletes a record in the enzymetracker, existing data are always backed-up and flagged as obsolete so that is it not displayed in the web gui. the modifications are also logged for future reference as part of the record's history, which is displayed in the lower panel of the interface . the history of the record is also accessible when generating customized reports . as a consequence, while updating a spreadsheet is always possible, no data are ever deleted and restoring a record to a previous state or accessing the complete data modification log in case an error is made while updating a spreadsheet is always possible.

visualization tools
most data in the enzymetracker can be viewed using tables. in a number of cases however, tables may be improved to give the user a more visual perspective of the data. to enhance the utility of experimental screening data, the enzymetracker integrates a number of annotation and visualization tools. the following sections describe how the bottom panel of a spreadsheet  can be customized to accommodate plate assays and e-pagetm <dig> gels from invitrogen respectively. while the enzymetracker does not natively support other techniques, new functionalities and new tools that suit the specificities of each laboratory can be easily implemented with minimal web development skills.

micro-plate assays
micro-plate assays are widely used in molecular biology and high-throughput screening to simultaneously test multiple samples for their responses to chemicals, living organisms or antibodies or to detect the presence of particular proteins or gene sequences. those responses are typically quantified by measuring the fluorescence or color changes in markers associated with compounds on the plates. the plate assay is usually repeated twice, at two different sample dilution factors.

the enzymetracker enables users to upload the two micro-plate pictures for the two dilutions of each experiment . the tables describing clones and transformants are leveraged to automatically annotate the plate. a "virtual plate" representing the  <dig> wells can also be layered over the original picture  or hidden  as needed. the virtual plate is also convenient to quickly visualize and identify most active wells by simply clicking on the desired wells directly on the picture.

sds-page gels
e-pagetm <dig> gels are improved sds-page  gels broadly used for high-throughput protein separation and analysis. each gel comprises  <dig> lanes for samples and  <dig> marker lanes, which define the ladder of the molecular weights of the proteins on the gel. similarly to plate assays, the picture of the gel can be uploaded and annotated within the user interface . each sample lane in the gel  can be annotated using a form  that is displayed upon click. a tool-tip summarizing annotations of a lane is displayed when hovered by the cursor . the dropdown menus in  to select the clone and the transformation plate loaded in each lane are dynamically built based on their respective tables. in addition, specific bands can be highlighted  and annotated. finally, the ladder  can be easily setup by clicking on one of the four outer marker lanes.

the enzymetracker thus reduces the need for external tools and leverages data from other spreadsheet to facilitate the annotations of hundreds of experimental data and to reduce data entry errors.

chart visualization
in many cases, the experiments aim at characterizing the evolution of a variable given a set of parameters. representing the data using charts is then is suitable alternative to tables for data presentation.

graphs are also used in the administration console, in particular to display connection and data logs.

sample tracking with qr code
for each record, a quick response  code is generated using google chart api  <cit>  and displayed on screen. qr code is a type of matrix barcode that can be used to encode up to  <dig>  alphanumeric characters. its specifications were disclosed and it was published as an iso standard . the enzymetracker uses qr codes to summarize the content of the record. the pictogram can be downloaded at a higher resolution and printed on the sample container for future reference. it can then be read as needed by inexpensive scanners or any reasonably recent smartphone, useful in laboratories, as space on the bench is often limited.

data-mining and reporting
as of june  <dig>  over  <dig>  entries have been saved within the enzymetracker and a growing number are being recorded on a daily basis. while the enzymetracker should not be considered as a complete framework for data warehousing and data integration of complex biological types, it features user-friendly tools that enable scientists to easily mine for specific pieces of information among large amounts of heterogeneous data. for example, a principal investigator may look for "all enzymatic activities detected during liquid assays performed by his assistants in the past two months on clones from s. thermophile".

context-dependent filtering
each table in the enzymetracker is fully searchable and each column is associated with a flexible filter that depends on the type of data the column represents. five different types of filters can be configured as shown on figure 7: textual , multi-selection , numerical , calendar  and boolean . numerical filters let the user query for values above, below or equal to a given threshold. they are most useful to query biochemical properties of enzymes and samples, for example protein sequence length or molecular weight, or the temperature stability of a molecule. boolean filters are typically used to retrieve records when given a flag. for instance, this filter is convenient to list all assays where a strong activity has been reported. calendar filters are helpful to search for records given a time frame. the multi-selection filter is most effective for searching for one or more items in a given list. the list may be static or may be dynamically generated by the server based on data from other tables. for example, it is possible to search for samples from a given organism, the list of organisms being automatically generated by the database server.

report designer
the web-based user interface for designing report templates is shown in figure  <dig> and comprises three main panels. the right panel  lists all items that can be included in a report. items are grouped based on the spreadsheet where they can originally be found. the list is searchable so that relevant pieces of information can quickly be assembled together. to create a report, one needs to drag-and-drop the desired items from the list to the lower configuration panel . a preview of the report can be automatically displayed in the central panel  when the configuration of the report changes. the report can also be refined using flags, for example to decide whether to display only current values of a record or its modification log also.

once a template is created, it can be shared and displayed like other tables. in particular, the report can be further refined using filters as described in the previous section. in addition, reports are automatically updated as more data is added to the enzymetracker: there is therefore no need to re-design a report to display up-to-date data. finally, reports can be easily shared with collaborators or saved as standard excel files for further analysis.

CONCLUSIONS
the enzymetracker was designed to be flexible, easy to use and offers many benefits over spreadsheets, thus presenting the characteristics required to facilitate acceptance by the scientific community. unlike expensive commercial software, the open-source license of the enzymetracker allows laboratories to easily extend the enzymetracker as needed to fit their specific needs. our system has been successfully used for  <dig> months on a daily basis by over  <dig> scientists to monitor protocols and experiments conducted to identify, annotate and fully characterize thousands of samples from 20+ fungal species.

the initial implementation of the enzymetracker has focused on facilitating sample tracking and experimental data annotation and visualization. the future development of the enzymetracker will focus on the implementation of widgets based on the online spreadsheets, which will facilitate data sharing as widgets can be embedded in virtually any web page. widgets will also facilitate the development and sharing of new functionalities to support additional data types and material or protocols by the community. we will also enhance reporting by allowing chart generation in addition to tabular data.

availability and requirements
the enzymetracker and its documentation are available at http://cubique.fungalgenomics.ca/enzymedb/index.html under the gnu general public license v <dig> 

• project name: enzymetracker

• project home page: http://cubique.fungalgenomics.ca/enzymedb/index.html

• operating systems: platform independent

• server requirements: apache  <dig>  mysql  <dig> , php  <dig> .6

• web browser requirements: chrome, firefox  <dig> +, safari 4+

• programming languages: html, javascript, php

• license: gnu gpl3

• any restrictions to use by non-academics: none

list of abbreviations
ajax: asynchronous javascript and xml; api: application programming interface; blast: basic local alignment search tool; gnu: "gnu" is not unix ; gpl: general public license; gui: graphical user interface; iso: international organization for standards; lims: laboratory information management system; qr code: quick response code; rest: representational state transfer; sds-page: sodium dodecyl sulfate polyacrylamide gel electrophoresis; sql: structured query language; xml: extensible markup language;

authors' contributions
tt designed and implemented the system. gb defined the requirements of the system and devised the backup and versioning mechanisms. tt and gb drafted and approved the final manuscript.

endnotes
a: licence fees were obtained on gsa on september  <dig>   <dig> at: http://www.gsaadvantage.gov/. these prices represent the lowest possible prices negotiated with the u.s. government and may not be available to non-governmental companies or organizations.

supplementary material
additional file 1
brief review of  <dig> open-source lims referenced by goomedic.com. practical and free lims are extremely limited. we briefly reviewed a few open-source projects referenced by goomedic.com. first, it should be noted that open-source projects are not necessarily free to use:  <dig> of the systems were not 100% free for the end-user. more than half of the projects  are not practical solutions because they are still in early development stages or not stable enough to run without crashing .  <dig> projects were simple clinical trials or inventory/order management systems and were not designed to track experimental biological results. one system was even designed to reduce travel expenses related paperwork. while lightweight and functional, ms lims was designed for the tracking and analysis mass spectrometry data only.

click here for file

 acknowledgements
we thank adrian tsang, justin powlowski, annie bellemare, noutcheka st-felix, david taylor and their teams for providing data, beta-testing and their valuable feedback. this work was part of the cellulosic bio-fuel network project and was supported by the agricultural bioproducts innovation program of agriculture and agri-food canada.
