BACKGROUND
the eukaryotic cell is highly organized: various biological processes are associated with specialized subcellular structures , or confined to particular compartments . subcellular location provides important clues about a protein's function and this knowledge is therefore used to assist in the annotation of newly discovered or sequence-inferred proteins. on the other hand, the location of proteins with known function unravels where the corresponding biological processes take place and how they are connected amongst each other. proteomics and microscopic detection of tagged or labelled proteins are powerful experimental approaches for determining protein localization. however, for most species, these approaches are costly in time and expense, and so there is a need for in silico prediction. a plethora of bioinformatic prediction methods have been developed in the past  <cit> , and a dozen or so computational tools are publicly available . most of these tools employ machine learning methods, i.e., they learn location-specific sequence features from known examples, and then extrapolate the learned rules to make predictions for proteins of unknown locations.

the targeting peptide, a conserved sequence motif usually located at the n-terminus of proteins, is a widely used sequence feature to identify a protein's location within the cell. this signal interacts with the import machineries of organelles such as mitochondria, chloroplasts and the endoplasmic reticulum. a number of tools use this signal for identifying proteins imported into organelles, notably mitoprot  <cit> , targetp  <cit> , ipsort  <cit> , protein prowler  <cit> , signal-cf  <cit> , and predotar  <cit> . however, some organelle-imported proteins lack a n-terminal targeting peptide  and therefore remain undetected by the tools above. in addition, application of these tools for genome-sequence-inferred proteins is limited, because the n-terminus of hypothetical proteins is often uncertain.

another approach to identifying protein localization is based on sequence similarity with proteins of known location. for instance, a protein which shares a high similarity with a mitochondrial nadh:ubiquinone oxidoreductase subunit is very likely located in mitochondria. sequence similarity combined with text annotation is used, for example, by the web-server 'proteome analyst specialized subcellular localization server'   <cit> . pslt  <cit>  predicts protein localization by searching for particular protein motifs and membrane domains. the underlying assumption is that proteins belonging to the same compartment share common domains. both sequence-similarity-based and domain-based predictions have the limitation of depending on the existence of known homologs or known domains.

several prediction tools do not rely on sequence similarity to known proteins or domains, but instead exploit a protein's amino acid composition and biochemical properties. subloc  <cit> , for instance, classifies proteins according to amino acid frequency, while cello  <cit>  uses ungapped and gapped amino acid pair composition.

certain tools combine several inherent sequence features and some also include textual information. for example, eslpred  <cit>  uses n-peptide composition and physicochemical properties, together with psi-blast results. ptarget  <cit>  calculates scores based on the occurrence pattern of pfam domains  <cit>  and amino acid composition. sherloc  <cit>  exploits amino acid composition, targeting peptides, and motifs, as well as annotation and text description drawn from the literature or swissprot entries.

it has been shown before that combining various prediction methods often yields better accuracy than the individual methods  <cit> . in fact, several of the above mentioned tools integrate different classifiers. cello  <cit> , for instance, employs a two-level support vector machine  classification system. the first level builds individual svm classifiers, one each for n-peptide composition, gapped-dipeptide composition, and so on. each of these classifiers generates a probability distribution, which is then processed by a second-level svm to calculate the final probability for a protein to belong in a certain subcellular location. the second-level svm achieves a notably higher accuracy than the individual first-level classifiers. similarly, sherloc  <cit>  uses the output vectors of different sequence-based classifiers and a text-based classifier as input for the final svm classifier. an alternative approach builds bayesian classifiers based on markov chains, and constructs a hierarchical ensemble of these classifiers  <cit> .

each of the available localization prediction tools  has different strength, and no tool is clearly and globally optimal. any given loc-tool performs well on certain data but poorly on others, and often predictions by different tools disagree . this is not surprising, because loc-tools employ different machine learning algorithms, sequence features, and training data.

 <dig> the example sequences are retrieved from the yeast genome database  <cit> 

 <dig> for references see text

 <dig> "mit", predicted as mitochondrial protein; "non", predicted as non-mitochondrial protein

this report introduces a comprehensive and simple system for protein location prediction. following the maxim 'unite and conquer', our approach combines the complementary strengths of existing prediction methods. using the example of mitochondrial location, we integrated heterogeneous localization predictors by different strategies, tested performance with known data and selected the most efficient way of integration. the presented methodology is readily applicable to proteins from subcellular locations other than mitochondria, and even to the prediction of other biological features for which multiple, heterogeneous tools exist.

RESULTS
as described in the method section, we collected ~ <dig>  yeast proteins, ~ <dig>  arabidopsis proteins, and ~ <dig>  human proteins of known subcellular location. figure  <dig> shows the performance of nine individual loc-tools on these data sets: targetp, subloc, sherloc, ptarget, predotar, pprowler, pasub, mitoprot, and cello. in the subsequent step, the predictions of these heterogeneous tools were integrated by different strategies. we employed the same procedure for all three datasets. here, we show the results for yeast; those for arabidopsis and human are given in additional file  <dig> 

integration of loc-tool predictions by grouping and majority-win voting
we formed  <dig> different groups  from nine individual loc-tools. the predictions of the tools within each group are integrated by majority-win voting . figure  <dig>  shows that the performance on mitochondrial proteins varies greatly among the groups . while the false positive rate  is generally low , the true positive rate  varies from  <dig>  to  <dig> . the best result is produced by the voting group ptarget+pasub+cello , but pasub alone performs nearly as well . thus, the gain of integration by majority-win voting is only moderate.

integration of loc-tool predictions by decision tree
for integration by decision trees, we took the predictions of the loc-tools as input to construct classifiers by the c <dig>  algorithm  <cit> . a total of six different decision trees were built as summarized in table  <dig>  first, outputs of all loc-tools were employed as equivalent attributes. the resulting decision tree  recognizes mitochondrial proteins with an average tpr of  <dig>  and fpr of  <dig> , as evaluated by the ten-fold cross validation test . note that the decision tree classifiers did not retain all the loc-tools provided in the training process. the elimination of a given tool is due either to redundancy or to low accuracy such that its inclusion would cause performance to deteriorate.

a "x", if the tool is included in the decision tree listed in the leftmost column 

second, we introduced biological expert knowledge into the construction of decision trees. the mitochondrial targeting peptide  is a feature exclusive to mitochondrial proteins, and four loc-tools rely on it to make predictions. in order to better exploit this feature, we implemented a decision tree integrating four mtp-based tools used in this study, notably targetp, mitoprot, predotar and pprowler. the output of this decision tree  was then combined with the other five tools by constructing a stacked decision tree . as expected, stacking results in a major performance increase with a tpr of  <dig>  and fpr of  <dig> .

effect of including transmembrane domain prediction tools
we realized that loc-tools recognize membrane proteins less efficiently than matrix proteins . to alleviate this shortcoming, we integrated the loc-tools with four additional tools that predict transmembrane domains , i.e., phobius  <cit> , tmhmm  <cit> , hmmtop  <cit> , and sosui  <cit> . the decision trees incorporating mem-tools and loc-tools are termed loc-mem-dt, mtp-mem-dt and stack-mem-dt .

out of the six decision trees described above, stack-mem-dt displays by far the best performance. compared with the best individual loc-tool and the best voting group , stack-mem-dt excels particularly in its high tpr . this result was obtained from a dataset clustered at a cutoff of 80% sequence identity . we repeated these experiments with datasets clustered more stringently at a 25% sequence identity cutoff . the outcome was essentically the same as with data_c <dig> , which means that the good performance of stack-mem-dt is not a result of data redundancy.

 <dig> tpr: true positive rate; fpr: false positive rate; acc: accuracy 

 <dig> mit: mitochondrial proteins; non: proteins of other subcellular locations

 <dig> the best combination of tools is ptarget+pasub+cello for yeast data, pasub+mitoport+cello for arabidopsis data, and ptarget +sherloc+ pasub for human data

we were concerned that this superior performance was caused by a 20~50% overlap of our yeast data and the training data of individual loc-tools. therefore, we constructed a data subset, excluding proteins present in, or similar to, the training data of any loc-tool, to build new decision trees. the result shows that the superior performance of stack-mem-dt over both individual loc-tools and majority-win voting is retained with this subset .

to dissect how stack-mem-dt makes its predictions, we followed the specific decision paths of the mitochondrial and nuclear proteins listed in table  <dig>  proteins that individual tools predict conflictingly. the mitochondrial protein follows a path down to sherloc with all three predictions being wrong . but in the end, the decision tree recognizes the mitochondrial location due to the two correct predictions made by ptarget and pasub. similarly, the nuclear protein is first wrongly classified by cello, but the subsequent steps of the path identify its true location.

finally, we inspected the paths of three other proteins, constituents of the mitochondrial outer membrane, the plasma membrane and the nucleus, respectively. all of these proteins cannot be distinguished by the individual loc-tools , nor by trees without mem-tools. stack-mem-dt correctly classifies all three proteins due to the final two steps in the tree that employ mem-tools .

 <dig> the sequences are retrieved from the yeast genome database  <cit> 

 <dig> for references see text

 <dig> "mit", predicted as mitochondrial protein; "non", predicted as non-mitochondrial protein

implementation
stack-mem-dt was implemented as a webservice, yimloc, accessible via the public bioinformatics workbench anabench  <cit> . the current version takes the prediction results from individual tools as input, and outputs the prediction for a protein to be mitochondrion-localized or not. for thorough analyses, we recommend that users build the decision tree on their local computer, with their own training data and choice of individual loc-tools. the source code is available under the gnu licence.

discussion
the purpose of this study was to enhance prediction accuracy by integrating the available subcellular localization prediction tools. successful integration of specialized tools takes advantage of their complementary strengths, which are drawn from three sources: the different sequence features the tools exploit, the different computational algorithms they employ, and the different training sets they are built from.

integration by decision tree outperforms group voting
the best performance obtained from majority-win voting of loc-tool groups shows almost the same tpr as the best individual loc-tool , with a slightly lower fpr. some of the voting groups yield even lower tprs than individual loc-tools. in contrast, decision tree classifiers built from the ensemble of loc-tools all outperform the individual tools as well as any of the majority-win voting combinations . the most effective of the presented integrative predictors is stack-mem-dt, which exceeds by far the performance of the best loc-tool . yet, for fairness, it should be stressed that many of the tools have been developed with the aim of predicting multiple locations, while we optimize here mitochondrial location.

a fair and rigorous comparison of yimloc with all other prediction methods should use the same test data, as we did for the comparison of yimloc with nine loc-tools shown in figure  <dig>  and in additional file 1: figures s <dig> – s <dig>  unfortunately, this is not feasible for some prediction methods because of several reasons: the training data are not provided; there are no webservices or software distributions available; the webservices are available but not tuned for large-scale predictions.

among the various machine leaning methods, we chose here decision trees for integration because they have the advantage that they allow tracing back how the predictions are made, and thus may provide a biological meaningful interpretation of the predictions. note that for the more complex problem of predicting proteins targeted to multiple subcellular locations  <cit> , neural network or naïve bayes would be more appropriate than decision trees, because they allow handling of prediction probabilities in a flexible manner.

trade-off between sensitivity and specificity
for any given prediction method, an increase of the tpr is usually accompanied by an increase of the fpr. how to balance the two rates depends on the purpose of the prediction. if biologists wish to identify all mitochondrial proteins from a whole genome sequence, they should choose a prediction method with highest tpr . on the other hand, if the purpose is to determine the subcellular localization of a few candidate proteins of interest, a prediction method with lowest fpr should be favoured .

making use of prior biological knowledge
during decision tree construction, loc-tools are retained if they have a good overall performance on the training data. in this process, all tools  are considered of equal importance. to further enhance performance, we put more emphasis on certain tools based on domain-specific knowledge. in particular, the mitochondrial targeting peptide  is specific to proteins imported into mitochondria, but not all mitochondrial proteins possess one. therefore, a tool that recognizes mitochondrial proteins based on the presence of mtp has high specificity , but low sensitivity . we employed four mtp-based tools in this study. yet, loc-dt retained only one of them, although the other three tools may be complementary in recognizing the various instances.

since the targeting peptide is known to be an important determinant of protein localization, but not necessarily rewarded by decision trees, we modified the training process to make use of this external knowledge. this was achieved by a two-layer decision tree . indeed, stack-dt performes significantly better than loc-dt , testifying to the value of incorporating expert knowledge in decision tree construction.

inclusion of transmembrane domain prediction
we observed that loc-tools often misclassified mitochondrial membrane proteins . this may be due to several reasons:  the training sets of some tools do not include mitochondrial membrane proteins ;  mitochondrial membrane proteins typically lack a targeting peptide, while mtp-based tools rely on the presence of this signal  <cit> ; and  tools based on amino acid composition and physicochemical properties may confuse mitochondrial membrane proteins with membrane proteins from other subcellular compartments. we have addressed these limitations by building decision tree classifiers that integrate predictions of both subcellular localization and transmembrane domains. in fact, information on the number of such domains boosts recognition of mitochondrial membrane proteins from 81% to 89% .

CONCLUSIONS
this study devises a simple, practical and highly effective approach to exploiting complementary bioinformatics tools by integration through machine learning. using mitochondrial location as a test case, we observe that tool integration with decision trees significantly improves prediction accuracy compared to individual tools or their simple combination. inclusion of biological expert knowledge in machine learning further enhances the performance. particularly improved is prediction of membrane proteins, which is notoriously difficult. further, our approach alleviates the conundrum of how to choose between conflicting predictions from different loc-tools. the methodology is easy to implement and applicable to the prediction of other biological feature for which multiple, heterogeneous tools exist.

