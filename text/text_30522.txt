BACKGROUND
gene expression microarray data are typically characterized by large quantities of variables with unknown correlation structures  <cit> . this high dimensionality has presented us challenges in analyzing the data, especially when correlations among variables are complex. including many variables in standard statistical analyses can easily cause problems such as singularity and overfitting, and sometimes is not even doable. to manage this problem, the dimensionality of the data will often be reduced in the first step. there are multiple ways to achieve this goal. one is to select a subset of genes based on certain criteria such that this subset of genes is believed to best predict the outcome. this gene selection strategy is typically based on some univariate measurement related to the outcome, such as t-test and rank test  <cit> . another strategy is to use a weighted combination of genes of lower dimension to represent the total variation of the data. representative approaches are principle component analysis   <cit>  and partial least squares   <cit> . machine learning algorithms such as lasso  <cit>  and random forest  <cit>  have embedded capacity to select variables while simultaneously making predictions, and can be used to accommodate high dimensional microarray data.

as always, there is no one-size-fits-all solution to this problem, and one often needs to resort to a mix-and-match strategy. the univariate-measurement based gene selection is a very popular approach in the field. it is fast and scales easily to the dimension of the data. the output is usually stable and easy to understand, and fulfills the objectives of the biologists to directly pursue interesting findings. however, it often relies on over-simplified models. for instance, the univariate analysis evaluates every gene in isolation of others, with the unrealistic assumption of independence among genes. as a result, it carries a lot of noise and the selected genes are often highly correlated, which themselves create problems in subsequent analysis. also, due to the practical limit of the size of the gene subset, real informative genes with weaker signals will be left out. in contrast, pca/pls constructs a few gene components as linear combinations of all genes in a dataset. this "super gene" approach assumes that the majority of the variation in the dataset can be explained by a small number of underlying variables. one then uses these gene components to predict the outcome. these approaches can better handle the dependent structure of genes and their performances are quite acceptable  <cit> . but it is harder to interpret gene components biologically, and to assess the effect of individual genes one needs to look at the weight coefficients of the linear combination. machine learning algorithms are very attractive variable selection tools to deal with large quantities of genes. they are prediction algorithms with embedded abilities to select gene subsets. however, whether or not a gene is chosen by a learning algorithm may not be the best measurement of its importance. machine learning algorithms are constructed to achieve an optimal prediction accuracy, which often overlooks the importance of each variable. consequently, small changes in data or tuning parameters may result in big changes in variable rankings and the the selected gene subsets are instable. for example, random forest, a tree-based non-parametric method, has a variable importance measurement that greatly contributes to its popularity. this measurement is sensitive to the parameter choices of trees in the presence of high correlations among variables, because different sets of variables can produce nearly unchanged prediction accuracy  <cit> . another example is lasso -- one of the most popular regularization algorithms. assuming a sparse signal, lasso handles the high dimensionality problem by shrinking the coefficients of most variables towards zero  <cit> . a recent implementation of lasso is in the glmnet r package  <cit> . the package uses a coordinate descent algorithm and can finish an analysis of  <dig>  variables within a few seconds. to us, its result is somewhat sensitive to the choice of the penalizing parameter λ. different λs may result in gene subsets with little overlapping. in the mean time, variable importance measurements are not readily available in lasso. one can simply rank genes by their coefficients, but this can be quite subtle. although permutation tests may be used to derive p-values, how to perform the permutation is a tricky matter due to selection of tuning parameters. for small p-values, it is still computationally infeasible. in this paper, inspired by concepts of counterfactual effects from the causal inference literature, we propose a targeted variable importance measurement  <cit>  to rank genes and reduce the dimensionality of the dataset. counterfactuals are usually defined in the context of treatment to disease. it is the outcome a patient would have had a treatment been assigned differently, with everything else held the same. hence counterfactuals are "counter"-fact and apparently impossible to be observed. but it can be estimated statistically. suppose that we have an outcome y, a binary treatment a, and the confounding variables w of a, and we have worked out correctly an estimate  of the conditional expectation of y given a and w. a common way to estimate the counterfactual effect of a is to compute the difference between the  and the  for every observation and then average over all observations, referred to as the g-computation method  <cit> . although counterfactuals may not be completely relevant to gene microarray data, thinking about the data in this way is very helpful for us to assess the importance of a gene. our vim definition uses the concepts of counterfactuals and the estimation framework is built on the methodology of targeted maximum likelihood estimation   <cit> . by tailoring this recently developed technique specifically to gene expression data, we hope to introduce to the community an alternative strategy to carry out gene selection in addition to current methods. our approach takes the advantage of prediction power of learning algorithms while targeting at the individual importance of each variable. its mathematical property has been studied in  <cit> , and we will focus on its application. in brief, our approach consists of two-stages. in the first stage, we predict the outcome given all genes. in the second stage, we improve the first stage by modeling the mechanism between an individual gene and its confounding variables. both stages can be very flexible ranging from using univariate analysis to refined learning algorithms. when machine learning algorithms are used, we have the flexibility to determine how to make predictions without restricting ourselves to explicit models and distributions. in the meanwhile, as in the case of the univariate analysis, we return to a simple and well interpretable measure of the importance of each gene. this importance measurement is derived in the presence of the confounding variables of a gene, and hence can help to exploit the redundant information among correlated genes. it is generally also more stable than the variable importance produced by machine learning algorithms. in addition, our approach provides a simple way for statistical inference based on asymptotic theories, and is well suited for the exploratory analysis of microarray data.

methods
suppose the observed data are i.i.d. oi = , where y is a continuous outcome, a is the gene of interest, w is a set of confounding variables of a, and i =  <dig>  ⋯, n indexes the observation. let Ψ represents the variable importance measurement  of a. one can define the vim of a as the marginal effect of a on the outcome y at value a = a relative to a =  <dig> adjusted for w, and then averaged over the distribution of w  <cit> :  

consider the semiparametric regression model:  

where f is a function of w. with this parameterization, we have Ψ = βa. we can then view β as an index of the vim of a. in the above model, the only assumption we make is the linearity of a. the definition of the vim of a is closely related to the definition of the counterfactual effect in causal inference  <cit> . although β can not be directly interpreted as an causal effect without proper assumptions  <cit> , it serves well as a surrogate of the magnitude of the causal relationship between the outcome and a gene. the motivation of this parameterization is that by selecting more causally related genes, the resulting prediction function will be better generalized to new experiments with the same causal relation between the outcome y and a, but a different joint distribution of w. if in a next experiment, the technology or the sampling population is somewhat different, but the causal mechanism is still the same, then a prediction function that uses the correlates of the true causal variables will perform poorly while a prediction function using the true causal variables will still perform nicely. this idea will be illustrated in our simulations.

our goal is to estimate β. in  <cit> , this estimation problem was addressed in the framework of targeted maximum likelihood estimation . tmle is an estimating equation and efficient estimation theory based methodology  <cit> , and is particularly useful when it comes to semiparametric models. estimators from the traditional method such as mle perform well for parametric models, however, they are generally biased relative to their variances especially when the model space is large. this is because the mle focuses on doing a good job on the estimation of the whole density rather than on the parameter itself. tmle is designed to achieve an optimal trade-off between the bias and the variance of the estimator. it uses an mle framework, but instead of estimating the overall density, tmle targets on the parameter of interest and produces estimators minimally affected by changes of the nuisance parameters in a model. in additional file  <dig> we provide a brief overview of this methodology with a demo simulation example. the formal mathematical formulation of tmle can be found in the original paper by van der laan and rubin  <cit> . the implementation of tmle to estimate β is fairly simple and consists of two stages. first, we estimate e without any parametric restriction. we then regress the residual of y and e onto βa to conform with our semiparametric regression model. this will yield an initial estimator of β and fitted values of e, denoted by  and the . in the second stage, we update these initial estimates in a direction targeted at β. this involves regressing the residuals of y and the fitted  on the clever covariate a - e. the e evaluates the confounding of a with w, and we name it the "gene confounding mechanism". it needs to be estimated if unknown. let us denote the coefficient before the clever covariate as ε. the updated tmle estimate of β is , where εn is the estimated value of ε. the variance estimate of β can be computed from its efficient influence curve. below is a step-by-step implementation of our algorithm, and we refer to it as the tmle-vim procedure.

 <dig>  obtain the initial estimator  and . use your favorite algorithm here, for example, linear regression, lasso, random forest, etc.

 <dig>  obtain the gn estimate for the gene confounding mechanism e. as in the case of qn, a broad spectrum of algorithms can be used. in this paper, we use lasso  for its optimal speed.

 <dig>  compute the "clever covariate":  

 <dig>  fit regression .

 <dig>  update the initial estimate  with  

and update the initial fitted values  with  

 <dig>  compute the variance estimate  for  according to its efficient influence curve:  

where i indexes the i-th observation.

 <dig>  construct the test statistic:  

t follows the standard gaussian distribution under the null hypothesis β =  <dig> when the sample size n goes to infinity.

the tmle estimator  is a consistent estimator of β when either the  or the gn is consistent. when the  is consistent, it is also asymptotically efficient. the derivations of the clever covariate, the efficient influence curve, the tmle estimate and its mathematical properties can be found in  <cit>  and  <cit> . upon the construction of the test statistic, a p-value can be calculated for the adjusted marginal effect of a and used as an index of the variable importance.

in the application to dimension reduction, for each variable in the dataset, we compute a tmle-vim p-value. we then reduce our variable space based on these p-values. there are two notions. first, in principle, a separate initial estimator  should be fitted for every gene a by forcing a as a term in the algorithm used. this can become quite time consuming. to solve the problem, instead of estimating e for each a, we obtain a grand estimate gn for e. here v represents all variables in the dataset. then for every a in v, we carry out the regression y ~ βa with the offset gn to get βn and . second, when obtaining the gn, we want to be attentive to how closely w is correlated with a. the independence between w and a results in zero adjustment to the initial estimator, while a complete association causes β to be unidentifiable. a simple option is to use all variables less than a pre-defined correlation with a as w. in  <cit> , they authors suggest  <dig>  as a conservative threshold. instead of applying a universal cutoff, we can also set individualized correlation threshold for each a. below we provide a data adaptive procedure to do it. one first defines a sequence of correlation cutoffs δ. for each choice of δ, one computes the corresponding tmle p-value for a. one then sets a p-value threshold λ, and chooses the maximum δ that has produced a p-value less than λ. the degree of the protection is determined with the value of λ. in general, the smaller the λ is, the more the protection. the value of λ can be either fixed a priori or chosen by cross validation. we refer to it as the tmle-vim procedure. it allows us to adjust for the confounding in the dataset adaptively and flexibly, and protect the algorithm against the harm from high correlations among variables. it works best when many variables are closely correlated in a complex way. however, it does require more time to run, especially when λ needs to be chosen by cross validation. in many cases, a universal cutoff of  <dig>  will work fine. in additional file  <dig> we provide the mathematical formulation of the tmle-vim procedure. once we have all the variables ranked by their p-values. the candidate list can be truncated by either applying a p-value threshold or taking the top k ranked variables. both of them are sound practices. in our simulations and data analysis, we usually truncate the list at a p-value threshold  <dig> .

RESULTS
simulation studies
we performed two sets of simulations. the first set of simulations investigates how tmle-vim responds to changes in the number of confounding variables, the correlation level among variables, and the noise levels. the second set studies the tmle-vim with more complex correlation structures and model misspecification. the performance of the dimension reduction procedure was primarily evaluated by the achieved prediction accuracy using a prediction algorithm on the reduced sets of variables, illustrated in the following analysis flow:  

two prediction algorithms, lasso and d/s/a   <cit> , were used. d/s/a searches through the variable space and selects the best subset of covariates by minimizing the cross validated residual sum of squares. in our simulations, lasso and d/s/a predictions are often similar. we used d/s/a in simulation i as it provides convenience to count what variables are included in the prediction model. lasso was used in simulation ii for its faster speed. we also used multivariate linear regression  as a comparison to machine learning algorithms when applicable.

part i
in simulation i, we varied the number of non-causal variables , the correlation coefficient ρ among variables, and the noise level  to see how tmle-vim responds to them. for each simulated observation oi = , where i indexes the i-th sample, the outcome yi was generated from a main effect model of  <dig> as:  

where j indexes the j-th a, and ei is a normal error with mean  <dig> and variance . each aj was correlated with m ws, and hence the total number of ws is mw =  <dig> m. aj and its associated w s were jointly sampled from a multivariate gaussian distribution with mean  <dig> and variance-covariance matrix s, where s is a correlation matrix with an exchangeable correlation coefficient ρ. this simulation scheme resulted in  <dig> independent clusters of covariates. within each cluster, the covariates are correlated at level ρ.

simulations were run for combinations of:

• m =  corresponding to mw = ;

• σe = ;

• and ρ = .

for each combination, we simulated a training set of  <dig> data points and a testing set of  <dig> data points. the training set was used to obtain the prediction model while the testing set was used to calculate the l <dig> risk. we also calculated a cross-examined l <dig> risk using a testing set with a ρ other than that of the training set. this is to demonstrate that by identifying more causally related variables, tmle-vim is robust to the change of the joint distribution among the covariates as and ws. in specific, for each prediction model obtained from a training set, we calculated the l <dig> risk on the testing set generated with ρ =  <dig>  regardless of what ρ was used to generate the training set. as a benchmark, we also used univariate regression in parallel with tmle-vim to reduce the dimensionality of the dataset, denoted with ur-vim. once the variable importance was calculated, we cut short the variable list using a p-value threshold  <dig> . each combination was replicated  <dig> times and results took the average.

tmle-vim used lasso to obtain both the initial estimator  and the gene confounding mechanism estimator gn. in the gn, w was all the variables excluding a. tmle-vim has demonstrated a consistent advantage over ur-vim with respect to the final prediction error over a range of simulation settings. this is particularly the case when the joint distribution of the covariates changes and when predictions were made by mvr that lacks internal capacity of model selection. smaller σe, larger mw, and larger ρ tend to magnify this advantage. also, tmle-vim risks have smaller standard errors than the ur-vim risks. in table  <dig>  we present our simulation results for five different ρ values and two different mw values, with  fixed at  <dig>  the following summary quantities are reported:

bold fonts: testing set . italic fonts: testing set .

na: not available. -: the same value as the previous entry.

• rr = /ur risk: the proportion of the risk reduction of tmle-vim relative to the ur-vim risk. it measures by how much tmle-vim outperforms ur-vim. the bigger the number, the more the advantage.

•ra = tmle-vim na/ur-vim na: the ratio of the number of as  in the tmle-vim list to the number of as in the ur-vim list.

•rw = tmle-vim nw/ur-vim nw : the ratio of the number of ws  in the tmle-vim list to the number of ws in the ur-vim list.

•rrdsa = tmle-vim pa/ur-vim pa: the ratio of the proportion of as  in the final d/s/a prediction model resulted from the tmle-vim procedure to that from the ur-vim. it measures the relative chance of arriving at a truly associated variable in the final model through the path of tmle-vim, referenced to the ur-vim.

the rr was calculated on two different testing sets. one is the testing set generated with the same ρ as the corresponding training set, and we refer it to "testing set "; the other is the testing set generated with ρ =  <dig> , and we refer it to "testing set ". testing set  shares the same correlation structure as the training set, while in testing set  all the variables are essentially independent of each other. testing set  is a simple representation of the scenario that when a new experiment is conducted the overall joint distribution of the covariates changes while the causal mechanism remains the same. in table  <dig>  the bold rr was calculated on testing set , and the italic rr was on testing set . we make a few points here about table 1:

• the proportion of the risk reduction  of the tmle-vim relative to the ur-vim is typically more than 20% for the mvr prediction and 10% for the d/s/a prediction. in some cases, the risk reduction of the mvr can be very significant. for example, when mw =  <dig> and ρ =  <dig> , the tmle-vim risk is close to only half of the ur-vim risk. tmle-vim tends to deliver more advantages when mw =  <dig> than when mw =  <dig>  when the correlation coefficient ρ increases, the tmle-vim performs increasingly better than the ur-vim for the mvr prediction. for the d/s/a prediction, small or large ρs seem to benefit most from the tmle-vim. for intermediate ρ, the benefit is still there but reduced. we believe that how much the risk can be reduced by the tmle-vim is a combination of factors such as the number of as and ws in the reduced candidate list, the correlation structures among covariates and the internal optimization procedures of d/s/a. the advantage of the tmle-vim over the ur-vim does seem to be more significant on the testing set  than the testing set , in support of our hypothesis that by identifying more causally related variables the tmle-vim results generalize better to new experiments.

• most ra values are slightly higher than  <dig> while the rw values are much smaller. this indicates that on average, in the tmle-vim list, the number of correctly identified as is slightly higher than that in the ur-vim list, while the number of falsely associated ws is much less. it is especially the case when the correlations are high among variables. the low counts of false positives is a major contributing factor that the prediction made on the tmle-vim candidate list is better than that on the ur-vim.

• as to the number of as that are finally made into the d/s/a prediction model, the tmle-vim in most cases displays a slight advantage over the ur-vim. a closer look reveals that the variables included in the d/s/a model only differs by one or two between the tmle-vim and the ur-vim. but the prediction risk has a measurable difference. this probably implies that every single variable counts in making good predictions in these simulations.

• when ρ =  <dig> , the situation seems to be losing its track. the tmle-vim did worse than the ur-vim in terms of correctly identified variables as well as the prediction risk of the testing set . considering the high correlations among variables, this could possibly be attributed to the overfitting in the gn. indeed, in  <cit> , the authors showed that tmle deteriorates when adjusting for variables with correlation coefficients beyond  <dig> . however, the rrdsa indicates that the chance of including a correct variable in the final d/s/a model based on the tmle-vim list is higher than that on the ur-vim. further looking into the data, we found out that the number of as that made into the d/s/a model from the tmle-vim list is actually greater than that from the ur-vim, while the number of ws is much less. henceforth, the d/s/a model built on the tmle-vim list is closer to truth, but somehow its prediction is worse than the model built on the ur-vim list. this seems to suggest that when provided with the ur-vim list, the d/s/a has offset its model for the missed as from highly correlated ws, while for the tmle-vim, this can not be done since there are not many ws in the list. it is the same reason that the ur-vim underperforms the tmle-vim on the testing set  when those surrogates of as were lost. for the mvr, although the tmle-vim shows a dominant advantage over the ur-vim with respect to the prediction accuracy, the tmle-vim only identified 77%  and 57%  of the as identified by the ur-vim. the better prediction is merely due to the fact that the mvr breaks down when too many variables entered the model. this is particularly the case when mw =  <dig> 

part ii
simulation ii examines the tmle-vim on larger-scale datasets with much more complex correlation structures. the simulation consists of  <dig> samples and  <dig> variables. we used a correlation matrix derived from the top  <dig> genes in a real dataset published in  <cit> . for these genes, the median absolute correlation coefficient was centered at  <dig> , the 1st/3rd quartile being  <dig> / <dig> , and the maximum as high as  <dig> . hence, simulation ii tried to mimic the correlation structure in this real data set. the outcome y was generated from two different models using  <dig> as. one is a linear model, and the other is polynomial.

details of this simulation is provided in the additional file  <dig>  a test dataset of  <dig> points were simulated to assess the l <dig> prediction risk. we repeated the simulation for  <dig> times and results took the average. in tmle-vim, we tried two different initial estimators. one is the univariate regression as simple as y ~ a, and the other is the lasso estimator. lasso was also used to get the gn and to make the final predictions. we adjusted universally in the gn for the variables that are correlated with a with an arbitrary correlation coefficient less than  <dig> . all the  and gn models were main-term linear. hence, with the polynomial outcome, we could examine how tmle-vim performs when mis-specified models were provided. to summarize the result, we computed a r <dig> quantity, representing the proportion of explained variance relative to an intercept model. it is defined as  <dig> - mean risk/mst, where  and  is the mean of y. table  <dig> lists the r <dig> and the number of true positives  and false positives  in the reduced list of candidate variables, for the ur-vim, the , and the . compared to ur-vim, tmle-vim improved the prediction risk by providing lasso a candidate list with more truly and less falsely associated variables for both the linear and polynomial simulations. it is worth noting that even with an initial estimator as simple as the univariate regression , tmle-vim still achieves a significant increase in r <dig> by modeling the gn.

the candidate variable list contains all variables with p-values less than  <dig> .

the numbers in table  <dig> were based on candidate lists that were cut short with a p-value threshold of  <dig> . in table  <dig>  we provide the results based on the top  <dig> ranked genes. the numbers of ur-vim and the  are less satisfying than those in table  <dig>  while the  achieved comparable results. this suggests that the  p-values of as are among the smallest ones, and shortening the length of the list does not affect the final result. regardless of the weakened results, the  still displays a non-ignorable advantage over the ur-vim with respect to the prediction accuracy, while the number of correctly identified as is slightly smaller than that of the ur-vim. we then looked at the correlation matrix among the top  <dig> selected genes, and it occurs that the correlation among them is the least for the , the most for the ur-vim, and the  lies in between. this could explain why the  does a better job in prediction regardless of less as.

the candidate variable list contains the top  <dig> variables ranked by their p-values.

we also carried out the tmle-vim procedure with lasso as the initial estimator, allowing the data select the correlation cutoff for variables to be adjusted in the gn. results are also reported in table  <dig> and table  <dig>  tmle-vim identified more as but also more ws, and the prediction accuracy is only slightly improved. on the other hand, the correlations among the selected top  <dig> variables are quite small. it seems by data adaptively adjusting for the correlation levels in the gn, tmle-vim returns a more independent set of genes. the actual risks and standard errors are contained in additional file  <dig> 

data analysis
breast cancer patients are often put on chemotherapy after the surgical removal of the tumor. however not all patients will respond to chemotherapy, and proper guidance for selecting the optimal regimen is needed. gene expression data have the potential for such predictions, as studied in  <cit> . the dataset from  <cit>  contains the gene expression profiling on  <dig> genes for  <dig> breast cancer patients. the outcome is the pathological complete response . this is a binary response associated with long-term cancer free survival. there are also  <dig> clinical variables collected in the dataset including the er  status, which is a very significant clinical indicator for chemotherapy response.

the goal of the study is to select a set of genes that best predict the clinical response pcr. the first step is to reduce the number of genes worth of consideration, and we applied both ur-vim and tmle-vim  = ur and q = lasso) for this purpose. for the tmle-vim = lasso), the  was estimated by lasso using the top  <dig> ranked genes. we then took all the genes with the fdr-adjusted p-values less than  <dig>   <cit> , as suggested in the original paper, and upon them we built a predictor using the random forest . the clinical covariates were treated in the same way as genes. to prevent the algorithm from breaking down, we only adjusted for the confounder with correlation coefficients less than  <dig>  with a in the gn. we carried out a 10-fold honest cross validation. we divided the dataset into  <dig> subsets. each subset was regarded as a validation set and the rest as the training set. we reperformed the entire analysis, i.e. vim calculation → dimension reduction → random forest classifier, on all  <dig> training sets and predicted the outcome of the validation set using the classifier built on the training samples. we can then use these cross validated predictions to assess the true classification accuracy of our algorithm.

analysis results are tabulated in table  <dig>  the ur-vim produced a candidate list of  <dig> genes and one clinical variable the "er status", while the list of the tmle-vim = ur) consists of  <dig> genes and tmle-vim = lasso)  <dig> genes. the tmle-vim identified many more genes than the ur-vim. among all the identified genes,  <dig> overlap between the  and ,  <dig> overlap between the ur-vim and tmle-vim = ur),  <dig> overlap between the ur-vim and tmle-vim = lasso), and only  <dig> genes are shared among all three . the tmle-vim appeared to have selected almost a different set of genes than the ur-vim.

the tmle-vim = ur) and the tmle-vim = lasso) results are quite similar to each other regardless of the adequate difference between the initial estimators. it seems the modeling of the gn had played a significant role and steered away the initial univariate estimates. further investigation found out that genes in the ur-vim list are highly correlated with the clinical indicator er status, while the tmle-vim genes are not. consequently, the tmle-vim genes are less correlated to each other than the ur-vim genes. looking at the first  <dig> ranked genes, the absolute median of the correlation coefficients for the ur-vim is  <dig> , while for the tmle-vim, it is about half of that number. although the input variables to the random forest are different, the cross validated  classification accuracy are quite similar among these three methods. we also passed all  <dig>  genes to random forest and looked at its variable importance measurement. the random forest vim  is more similar to the ur-vim: about 50% of them overlap but only a few overlap with the tmle-vim. the rf-vim genes are also highly correlated with the er status, albeit the less severity than the ur-vim. its oob classification accuracy  is comparable with all three other methods.

in summary, the ur-vim and rf-vim seemed to have identified genes that are strong predictors of the clinical variable er status. the er status is a strong indicator of the outcome pcr. hence, the final prediction accuracy still seems quite good. the tmle-vim has identified a list of genes of which a small proportion is strong predictors of er status and others are not associated with the er status. its prediction accuracy is slightly better than that of the ur-vim and rf-vim.

CONCLUSIONS
we have shown in this paper with extensive simulations that the tmle based variable importance measurement can be incorporated into a dimension reduction procedure to improve the quality of the list of the candidate variables. it requires an initial estimator  and a gene confounding mechanism estimate gn. a consistent  ensures the consistency and the efficiency of the tmle estimate. when  is not consistent, a correct specification of gn can still produce consistent estimates while that estimate will not be efficient any more. we generally recommend to do as good a job as we can on obtaining the , as a better  means both a smaller bias and a smaller variance. nevertheless, algorithms as simple as univariate regression are also valid choices, and in this case, we will rely solely on the goodness of gn. the computation of gn directly affects the speed of the tmle-vim, as it has to be redone for every variable. hence, one may want to choose an approach that is reasonably fast. in our study, we chose the glmnet r package as our primary tool to get gn, and it worked very well. in practice, one needs to balance the resources used for the initial estimator and the gene confounding mechanism. with a proper design of the two estimating stages, tmle-vim is a fairly fast procedure. it is also worth mentioning that the tmle-vim can sometimes be sensitive to the overfitting in the , and hence, caution needs to be exercised when choosing an aggressive algorithm.

a popular dimension reduction approach is the principle component analysis . the pca computation does not involve the outcome, and so it could be less powerful when prediction is the primary goal. its output is a linear combination of all the genes. though not a gene selection approach, we still carried it out on our simulation i data as an interesting comparison to our approach. pca demonstrates an intermediate performance with respect to the ur-vim and the tmle-vim on small p-value cutoffs. this means a few top components carry all the prediction power. when the p-value cutoff is increased, and more components enter the candidate list, its results became quite unsatisfying. when the correlation structure changes among the genes, pca has done a poor predicting job. the pca results are contained in additional file  <dig> 

usually, the reduced set of variables will serve as the input of a prediction algorithm to build a model. such algorithms used in this article include mvr, lasso, and d/s/a. we have noticed that in most of our simulations, the mvr prediction often achieves a similar risk as lasso and d/s/a on the tmle-vim reduced set of variables. it suggests that further variable selection may not be necessary for the tmle-vim candidate list, and we can use simpler algorithms to get a good prediction. in fact, the tmle-vim can go beyond the scope of dimension reduction. it can be iteratively applied to the data until it converges to a list of several variables that are most likely to be causal to the outcome. in this case, one may want to use the super learner  <cit>  as the prediction algorithm, which works more effectively with the tmle-vim. the super learner is an ensemble learner that combines predictions from multiple candidate learners with optimal weights. it has been shown in  <cit>  that the super learner performs asymptotically equal to or better than any of its candidate learners. the super learner allows the data to objectively blend results from different algorithms rather than relying on a single algorithm chosen subjectively by an analyst. hence it enjoys a greater flexibility to explore the model space and usually produces reasonable predictions consistently across a wide variety of datasets, and serves as a very good prediction algorithm for the tmle-vim. on the other hand, it is also more computationally demanding.

tmle-vim is a quite general approach. besides gene expression data, tmle-vim can also be applied to genetic mapping problems. the genome-wide association studies  can involve more than a million of genetic markers. in this case, only the univariate analysis seems to be feasible of ranking every marker. with the tmle-vim procedure, we can run more complex algorithms on a subset of top ranked markers, taking it as the initial estimator, and then evaluate every single marker. the variable importance of each marker is thus obtained through a multi-marker approach and being adjusted for its confounder. however, the gwas in human beings is usually case-control data, and the current tmle-vim needs to be extended to accommodate such outcomes.

competing interests
the authors declare that they have no competing interests.

authors' contributions
mvdl conceived the project and designed the algorithm. hw implemented the algorithm, designed the simulation studies, and collected and analyzed the data. all authors participated in drafting the manuscript.

supplementary material
additional file 1
more detailed descriptions of the tmle methodology and the conducted simulations.

click here for file

 additional file 2
the additional materials of the conducted simulations.

click here for file

 additional file 3
the pca results.

click here for file

 acknowledgements
the authors want to thank cathy tugulus for sharing her codes and her helpful comments on this work. the authors also thank the reviewers for their precious appraisal of the earlier version of this manuscript. this work was by nih r <dig> ai <dig>  the authors declare no conflicts of interest.
