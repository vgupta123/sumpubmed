BACKGROUND
the availability of complete genome sequences from several organisms  <cit>  and complementing transcriptomes  <cit>  has facilitated the identification of genes and of highly complex biological patterns such as novel domain regions and binding or localization motifs. several web-based tools are available that allow for pattern matching in query sequences. smart  <cit> , prosite  <cit> , cdd  <cit> , and pfam  <cit>  contain libraries of predefined patterns. frequently, these patterns are formulated as hidden markov models   <cit> . other applications like prosite  <cit> , kangaroo  <cit> , patsearch  <cit> , peppat  <cit>  and patmatch  <cit>  allow users to define their own patterns to be searched for via regular expression -like terms  <cit> .

the complexity of patterns within protein sequences is a major problem in pattern matching when a mixture of rigid and variable information occurs in pattern descriptions. in most applications complex patterns are handled by simplifying the expression of these patterns. this is especially the case, where the arrangement of positions and content are variable and would thus allow for an extended set of solutions. however, this simplification frequently results in a loss of information and some pattern specifications are even disregarded in pattern matching. a comprehensive formulation also of complex pattern elements would consequently minimize the number of false matches. a second problem occurs in case of length-ambiguous patterns. commonly only the longest or the shortest hit is identified in cases where more than one match starts at the same position in a protein sequence. analysis requires to be done in two separate processes to obtain these hits while any hit of intermediate length is not detected. an enhanced fidelity would thus be desirable especially in cases of length-ambiguous patterns. finally, the formulation of more sophisticated patterns should be simple enough to meet the requirements especially of users lacking deep knowledge about algorithms.

existing web-based applications miss at least one of these aspects. on the one hand common hmm building tools  <cit>  do not allow for the definition of both rigid and variable complex patterns in a user-friendly way. patterns with varying arrangements of elements in position, order and content cannot be introduced without knowledge in programming. on the other hand, applications that are based on regular expressions, like prosite, are user-friendly but do not cover the complete variability within patterns. the construction of special algorithms is an alternative route but applications of these tools remain fixed to perform dedicated tasks like in psort  <cit> . finally no application is currently available via a web-based interface that would find all matches in case of length-ambiguous and user-defined peptide patterns.

here we present the novel 3of <dig> web application that copes with the demands described above. it is concepted as fully on-line application to search for user-defined sets of complex peptide patterns in sets of protein sequences. for the first time, all variations of elements in a pattern stretch of user specified length can be defined in one term using the new peptide pattern type n-of-m. it permits to exclude defined amino acid characters and to set numerical constraints of distinct elements in its extended version. this is applied via two, regex-like expressions, one in a standard syntax, one in an extended syntax. in addition, 3of <dig> finds all variations in protein sequences in case of length-ambiguous patterns. usage of 3of <dig> does not require theoretical background knowledge but rather enables a user-friendly and user-specified definition of terms and patterns. the algorithm is provided as interactive web-application which is freely accessible  <cit> .

implementation
definitions
an attempt is defined as search for a pattern in a sequence. a successful attempt is called a match. due to the modular processing of patterns and sequences, the 3of <dig> algorithm requires the introduction of terms on two different hierarchical levels, expressed by the denotations "sub" and "total" . one or more subpatterns make a total pattern. in analogy, a total solution is built of subsolutions. length-ambiguous patterns characterize sequence stretches which vary in length. we will use the term content-ambiguous instead of "ambiguous" to emphasize the difference to length-ambiguous patterns. the attribute "length-ambiguous" is also used to describe total patterns and subpatterns which contain such length-ambiguous properties.

the algorithm
in the preprocessing step the total pattern is initially split into its smallest parts, which may be  an individual character,  a selected set of individual characters,  the special symbol "." that can match any character,  a pattern formulation of length-ambiguous sequence stretches, and  a pattern formulation of the n-of-m pattern type. excluded subsets of characters are considered as part of the preceding patterns and treated as their attributes. these smallest pattern parts, once identified, are concatenated to form larger units applying the following fusion rules  individual characters and content-ambiguous pattern characters are always concatenated.  no unit may contain more than one length-ambiguous pattern character.  any n-of-m pattern forms a separate unit. each such unit represents a "subpattern".

using the sliding window mechanism every sequence position is analyzed for its potential to start a match. the actual matching processes are called subpattern attempts because they are performed consecutively at the level of subpatterns for each sliding window. a match of the first subpattern induces the corresponding subsequence to become a subsolution. then an attempt is made to match also the second subpattern, starting at the first position of the remaining sequence, and so on. a total solution is obtained, when the last subpattern of the total pattern has matched . the use of subpatterns allows to process the n-of-m pattern type and to work with individual sets of subsolutions that may occur in case of length-ambiguous subpatterns. the matching process itself is performed by the regex terms for every subpattern. an excluded subset of characters is considered in a second step after the matching process. exceptions of the regex matching process are n-of-m subpatterns, where any occurrence of a character is counted that has been specified in the pattern brackets and found in the subsequence. an n-of-m subsolution has to contain the same or higher number of matches than the defined number in the n-of-m expression in case of the standard syntax. in case of the extended syntax the type of comparative operator is user-defined.

in each subpattern attempt a length-ambiguous subpattern may generate a number of subsolutions with different end positions. such subsolutions of the same subpattern may result in different branches of successors and distinct sets of sequences that remain to be analyzed. such branches and branching points generate a solution tree. all consecutive subpattern attempts may have three different results:  a branch will be extended if also the consecutive subpattern leads to a subsolution.  the tree may branch again, if also a further subpattern is length-ambiguous.  no subsolution is found, resulting in one or more branches that terminate here. in any case, each subpattern attempt is only performed once in every sliding window.

in case of a length-ambiguous subpattern there is an additional cycle inside of the subpattern attempt. in this multivalence loop the decision is made about the introduction of a branch point by finding all solutions sharing the start position within the subsequence, but differing in their respective end positions. the multivalence loop begins with the longest subsolution. in successive cycles the length of the last identified subsolution is reduced by one position from the right end, and the subpattern attempt is repeated to identify any shorter subsolutions .

the subsolutions of the different branches are stored in a two-dimensional tree structure which contains the subpattern number and the branch number. finally total solutions are built from the subsolutions in a backtracking step. this matching and storage process is repeated for every sliding window.

these three nested shells represent the core algorithm to match patterns in 3of <dig>  the subpattern attempt and the multivalence loop are analogous to the sliding window principle, as these also analyze sequences within defined windows. the sliding window is always from left  to right , the individual windows are strongly overlapping and the window size is left constant. in the subpattern attempt, however, the windows are adjacent and do not overlap. the multivalence loop keeps the starting point of the window at a fixed position and successively reduces the window size from the right end in every cycle of the subpattern attempts.

programming environment
the 3of <dig> algorithm was programmed in perl  and implemented as a cgi web-application on an apache server  to allow easy and remote access. the apache server is installed on a suse linux  <dig>  server. java scripting was implemented allowing the display of details of the input in separate windows.

RESULTS
the web application 3of5
3of <dig> is an interactive web application that performs pattern matching in protein sequences. the user defines expressions to represent functional or structural parts of a protein sequence by using the most common subset of the perl vocabulary of regular expressions  <cit> . table  <dig> shows an overview of the use of these expressions. for example, the histone h2a signature   <cit>  is expressed as " gl.fpv". this expression combines single characters to describe discrete elements of the pattern  and elements of variable yet defined content in one position . the meta symbol "." allows for any character at this position. the latter two expressions are content-ambiguous, since they may have several solutions. length-ambiguous peptide pattern elements are described as length declarations in curly brackets, like in the succinyl-coa ligase pattern "g.{2}a.{ <dig> }  gh  " . this pattern matches any sequence with an arbitrary linking segment between "a" and " " that has a variable length of between  <dig> and  <dig> characters. a pattern of fixed length like ".{2}" is indicative of exactly two characters with arbitrary content. further pattern features constrain the pattern matching in different manners. a subset of characters can be excluded by setting these characters in a pair of square brackets that is preceded by a "^" symbol, e.g. " ". with 3of <dig> it is possible to combine this excluding subset of characters with any other content-ambiguous pattern type which is in contrast to other applications. for example, the pattern "  { <dig> } " will match any sequence of a defined length between  <dig> and  <dig> characters that contains the characters "r","g","t", but where "a","b","c" are not allowed to occur. this option is also applicable for the n-of-m pattern type in its standard and extended versions  and allows for a discrete non-matching against specific characters. in addition, the pattern matching can be constrained to the two ends of the sequence: a preceding "^" symbol limits the pattern to matches at the n-terminus of a protein sequence, a succeeding "$" symbol constrains it to the end at the c-terminus.

3of <dig> supports the input of single or multiple sequences in fasta formats, alternatively of a single sequence as simple text without header. patterns can be written in three formats:  in a "text only" format each line is interpreted as a distinct pattern.  a greater number of patterns can be included in the "fasta" format with a header line. then the output of the matches is arranged in the order of sequences, the sequence positions of matches, and by the patterns in their order of input. the sequence is provided for every match. individual parts of the solutions are marked in color code to discriminate between the distinct parts of the patterns.  as third formatting option, individual patterns can be grouped  with the symbol ">>" that serves as grouping element . several groups can be created within one query. the output of matches is then given for each grouped pattern individually . pattern descriptions can also be viewed in separate windows  of the result page, which help especially in cases of longer result lists.

3of <dig> contains three new features in peptide pattern matching. these are:  the new peptide pattern type n-of-m,  the ability to find all possible solutions for length-ambiguous peptide patterns, and  the option to group patterns with similar features in input and output.

the new pattern type n-of-m
limitations of software and programs frequently determine the comprehensiveness of the questions that can be applied in the analysis and consequently the completeness of detected solutions. in pattern matching such limitations are to a great extent caused by the inability to exactly describe all variations of pattern ambiguities in regular expressions. more complicated patterns are thus frequently described as mere text supplements within databases and can not be applied in searching. in consequence many protein patterns may have gone unnoticed since no tools had been available to facilitate their detection.

the implementation of n-of-m was originally based on the description of the nuclear localization sequence  of nucleoplasmin. the commonly employed definition  of the nucleoplasmin nls describes two basic residues, a ten residue spacer and a second basic region that contains at least three basic residues in a stretch of five  positions  <cit> . this definition contains a number of ambiguities that are due to the variable composition and positions of basic and non-basic residues within the stretch of five residues. eighty different unambiguous regex patterns were needed to cover all possible solution, and there would be still ten different expressions necessary to describe this pattern with common ambiguous regex terms. therefore, the comprehensive definition of such patterns that contain variable arrangements of specific elements is a general problem, when these elements vary in their position, their order and in their content within a stretch of defined length.

the 3of <dig> application for the first time allows for a complete description of such patterns in one expression, using the n-of-m pattern type. the standard syntax "" comprises two pairs of brackets. the first pair contains information on the length m of the pattern and on the minimum number of occurrences n for those characters, which are defined between the second pair of brackets. the content of the remaining, unspecified positions is arbitrary. the complete nucleoplasmin nls could consequently be expressed as "  .{10}". while for instance psort ii covers this pattern with a predefined expression, this or other programs do not permit for all necessary variability or to search for other patterns of the type  at all. for example, the pentapeptide pattern "" can also occur in another biological context as part of a mitochondrial localization sequence  <cit>  but is not defined in psort ii.

with 3of <dig>  now any pattern can be comprehensively described, where a defined number of specified residues occurs within a sequence segment by modifying the numbers and characters of the n-of-m pattern type "". this includes motifs, as series of amino acids with a typical biochemical character in a given stretch, like charged residues. thus it is possible to search, for instance, for an octapeptide stretch that contains four basic amino acids. the n-of-m pattern type can be combined with other regular expressions to further expand the spectrum of possible search patterns. this shall be demonstrated again with the nucleoplasmin nls pattern. dingwall reported the length of the spacer region between the two basic compounds not to be mandatory  <dig> residues  <cit> . its size can rather range from  <dig> up to  <dig> amino acids depending on the respective gene and species. prosite merely tolerates spacer lengths in the range between  <dig> and  <dig> positions in its search for the nucleoplasmin pattern. in contrast, 3of <dig> permits to freely define the spacer length i.e. ".{ <dig> }" for this pattern, depending on the respective biological question. furthermore, the identification of nls patterns with rotated basic compounds around the linker region is possible  <cit> .

further pattern definitions can be easily added to enhance pattern specificity. the following examples may demonstrate the effects.

 <dig>  the protein tyrosine kinase phosphorylation site exists in the documentation entries of prosite in the two variants " .{2} .{3}y" and " .{3} .{2}y" . however, the use of these two patterns in the actual search algorithm of prosite is generalized with the following more simple description " .{ <dig> } .{ <dig> }y" . in consequence, the hits obtained with this term consequently contain a number of matches comprising either two or three characters in both of the two variable positions. we obtained  <dig>  matches in  <dig>  sequences applying this prosite term to search for tyrosine kinase phosphorylation sites in the human sequence subset of swiss-prot   <cit> . then we repeated the search with a n-of-m pattern which is formulated as " .{2}.{2}y" and which covers the two relevant variants and explicitly excludes the false positive solutions that contain either two or three characters in both of the variable position. we obtained  <dig>  matches in  <dig>  sequences. this discrepancy can by attributed to the higher specificity of 3of <dig> compare to prosite, as only solutions having content-ambiguous spacers of two residues in the first and three in the second length variable position are allowed, or vice versa. we conclude that about half of the matches identified by common syntax of prosite were false hits that had originated from the limited stringency of the pattern definition in prosite.

 <dig>  the glycosaminoglycan attachment site pattern  is defined in prosite with the expression "sg.g". manual annotation in the prosite database contains additional information; two acidic residues are required at positions - <dig> to - <dig>  relative to the serine. this information is not implemented in the search tool. thus, the complete pattern can not be searched for with the prosite definition, but it can be fully described now as an n-of-m pattern with the expression ".sg.g". the prosite search for pdoc <dig> in the human sequences of swiss-prot had  <dig>  matches in  <dig>  sequences. only  <dig> matches in  <dig> sequences were obtained when the same dataset was searched with the 3of <dig> application. the number of relevant matches in the prosite search is thus less than 3%.

while patterns with only a small number of variable positions could be expressed also as a number of individual regular expressions , these numbers would become unmanageable for patterns that contain a greater number of n-of-m-like ambiguities.

the syntax of the n-of-m pattern type has been further extended. this extended syntax of the n-of-m pattern type permits the definition of a pattern part with different numerical constraints that apply to different characters or groups of characters.

when combined with the excluded subset of characters feature it is now possible to describe any pattern in an highly sophisticated manner. the extended syntax may be expressed for instance as )  for a pattern example of the length m, which should include two different groups of characters, each with four characters allowed and constrained by the operators p and q. no characters of the succeeding excluded subset of characters, here "i" and "j", are tolerated in any position. for every character or group of characters the original arrangement of the standard syntax is maintained using two pairs of brackets: the first pair contains information on the number of occurrences for the respective characters, which are defined between the second pair of brackets. this number of occurrences can be constricted by the operators "min" , "max"  or "eq" , followed by the respective limit values . more than one of these double pair of brackets may be arranged successively. this list of brackets has to be framed by a main pair of brackets. in addition a preceding pair of brackets defines the total length m of the pattern stretch in the form . here the length number m is the only true variable parameter in this bracket while the non-variable term "nof" functions simply as a connection to the standard syntax.

the standard syntax of n-of-m is sufficient to define patterns for instance of the nucleoplasmin type as well as of the sv <dig> large t antigen pattern "pat7". the extended syntax enables to express also patterns like "pat4" of the sv <dig> large t antigen pattern  <cit> , a pattern composed of  <dig> basic amino acids , or composed of three basic amino acids and either "h" or "p" by the pattern. the respective n-of-m-syntax is to comprehensively describe this pattern is  ).

while 3of <dig> allows for the definition of highly variable sequence patterns it should not be mixed up with so-called "fuzzy patterns" that simply allow for the substitution of letters at individual positions by scoring systems.

increased fidelity for peptide patterns with length ambiguities
several solutions sharing the same start position in the query sequence are possible in searches when the peptide patterns include length ambiguities. we call a complete set of solutions from such pattern matching a solution cohort . common regular expressions are often not able to find all solutions. due to the default settings the regex engine only finds the longest solution. this default can be inverted adding the operator "?", then reporting the shortest solution. regex engines consequently require two distinct regular expression terms to find the two extreme solutions, while any solution of intermediate length will always remain undetected. however, the more length ambiguities are defined in the pattern and the larger their defined variability in length is, the higher can be the number of solutions in the solution cohort. prosite at least considers the two extreme possibilities by providing the choice between the two search modes described above. however, there is currently no easy-to-use web-based application for protein sequences that would find further solutions of intermediate length. a solution cohort was the result of relatively short length ambiguities within the pattern in the example shown in figure  <dig>  the probability for the occurrence and relevance of such solution cohorts however increases with enlarged numbers of length ambiguities and with growing complexity of the pattern. this is especially true for composite peptide patterns that consist of a combination of several individual patterns occurring in variable distances.

3of <dig> also allows to group peptide patterns using ">>" as grouping element on top of the and-linkage, where all patterns need to be present to make a match. this creates an or-linkage. in consequence, user-defined combinations of patterns or groups of patterns are searched for, and the output is ordered in these groups. the grouping of results is beneficial especially in case of long lists of patterns or solutions.

comparison with other regex-like applications
the prosite application has been become the gold standard in the field of peptide pattern matching. however, prosite is not capable of dealing with the n-of-m pattern type. it can only perform pattern matching for patterns that are implemented without leaving an option of modification.

there are currently further tools that perform peptide pattern matching in a sophisticated, regex-like manner. however, none of these covers all the features of 3of <dig>  in particular, the combination of rigid rules and flexibility offered by the n-of-m pattern type is not implemented in any other application of peptide pattern matching. for instance, patmatch provides common features for peptide patterns as subsets, multiplicators and exclusions. however, n-of-m pattern features within larger patterns can not be defined. while a mismatch option is available, such mismatches are always allowed to occur at any position of the total pattern, and cannot be restricted to subpatterns like n-of-m. the extended features of n-of-m can not be addressed with patmatch either, and in case of length-ambiguous patterns only the shortest solution will be shown. peppat is an application which integrates common regex-like patterns but also this program cannot construct any n-of-m pattern type, neither of the standard nor of the extended syntax. the matching is performed only in the greedy mode in case of length-ambiguous patterns. patsearch currently offers the most sophisticated pattern syntax for nucleotide patterns. however, it does not allow for a content-ambiguity feature to describe subsets of amino acid characters, while iub ambiguity terms are implemented for nucleotide patterns. the "either/or" operator functions to select subpatterns, but it does not cover content-ambiguities. in consequence there is no possibility to define subsets, neither excluded subset of characters nor n-of-m pattern types. furthermore, users of patsearch need to register at the webpage and receive the results by e-mail. in contrast, 3of <dig> is open and also allows downloading of results in xml.

extensions
the modularity of the underlying algorithm of 3of <dig>  permits to develop further extensions of the n-of-m pattern type. for instance fixed distances inside of a n-of-m pattern could be formulated separating distinct parts of the n-of-m pattern. this would define numerical constraints over stretches of longer distances with fixed element blocks in between. this and other extensions will be implemented in the future to cope with the growing complexity and comprehensiveness of pattern specifications that shall be applied in searches.

CONCLUSIONS
we introduce the novel pattern type n-of-m with the standard syntax "" and the extended syntax " )", which can be combined with an excluded subset of characters, and further pattern types using common rules of perl regular expressions. this allows for the first time to describe ambiguities in a peptide pattern, which arise from alterations in position, order, and content of characters in a pattern stretch of defined length, using only one expression. the n-of-m pattern type results in an enhanced precision in pattern matching, as was shown in comparison with several prosite patterns applied to the human swissprot sequence set. n-of-m is implemented as basic part of the web application "3of5" which is generally accessible. this application has an unprecedented fidelity for length-ambiguous peptide patterns. with 3of <dig> all solutions are found – in contrast to the common pattern matching applications that can merely detect either the longest or the shortest solutions for any starting position in protein sequences. its easy-to-use web interface makes 3of <dig> a convenient sequence mining tool towards a refined pattern analysis. the modular structure of the underlying algorithm facilitates extensions that will cover additional n-of-m-like pattern types. thus the 3of <dig> application may serve as a module that bridges the gap between empirical experimentation and the theoretical collection of patterns.

availability and requirements
- project name: 3of5

- project home page: 

- operating system: platform independent

- programming language: perl

- other requirements: java scripting

- license: free

- any restrictions to use by non-academics: no license needed

authors' contributions
ms developed the algorithm and the web application, performed the comparison of the 3of <dig> results with the swiss-prot database. ms and sw designed the study and drafted the manuscript. am and ap helped to draft the manuscript. all authors read and approved the final manuscript.

