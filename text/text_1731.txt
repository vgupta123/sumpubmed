BACKGROUND
patient classification and gene selection related to classification are common uses of microarray data , but statistically rigorous and user-friendly tools for gene selection in the context of class prediction are rare. such a tool should address two major issues. first, it should provide unbiased estimates of the prediction error rate of the procedure. most users are by now aware of "selection bias", as originally reported in  <cit> , but bias caused by trying different methods and/or sets of genes, and choosing the one with the smallest cross-validated error rate  <cit>  is still not widely recognized. in this later case we need a nested  <cit>  or double or full cross-validation  <cit>  to estimate the error rate of the rule or procedure. second, we need to assess the so called multiplicity  problem: variable selection with microarray data can lead to many solutions that have similar prediction errors, but that share few common genes  <cit> . choosing any one particular set of genes without being aware of the variability in solutions can lead to a false sense of certainty in the selected set.

from a users' perspective, an ideal tool should also be user friendly and provide additional resources to ease the interpretation of results  <cit> . web-based tools are an excellent platform as they do not require software installation or upgrades from the user. in addition, web based tools, can be designed to allow easy access to information such as gene ontology terms, the ucsc and ensembl databases, kegg and reactome pathways, or pubmed references, thus enhancing the biological interpretation of results  <cit> . moreover, web-based tools, if implemented appropriately, can harvest computational resources rarely available to most individual users  <cit> , including the increasing availability of multicore processors and easily accessible clusters made with off-the-shelf components  <cit> . currently, the major opportunities for improved performance as well as the ability to analyze ever larger data sets do not lie in faster cpus but in being able to use parallel and distributed computing to exploit multi-core servers and clusters  <cit> . in addition to providing a benefit to the end user , tools that combine parallelization with web-based programming are important methodological developments.

finally, a tool that fulfills the above requirements is of much greater relevance if it makes its source code available under an open-source license. source code availability allows the research community to experiment with, and improve upon, the method and fix bugs, encourages reproducible research, allows to verify claims by method developers, makes the international research community the owner of the tools needed to carry out its work and, thus, creates the conditions for swift progress upon previous work, concerns of particular importance in bioinformatics  <cit> .

we have developed genesrf and varselrf , that satisfy the above requirements. the only available web-based tools with similar scope are m@cbeth  <cit>  and prophet  <cit> . these tools, however, do not examine the multiplicity problem, cannot benefit from multicore processors or computing clusters, and do not make source code available. m@cbeth, in addition, is restricted to two-class problems and does not focus on the gene selection problem. prophet, in turn, does not seem to solve satisfactorily the biased error rate problem .

implementation
the core statistical functionality is provided by the varselrf package for r  <cit> . this package implements the procedure in  <cit>  for gene selection using random forests, building upon the randomforest package  <cit> , an r port by a. liaw and m. wiener of the original code by l. breiman and a. cutler. we use mpi  <cit>  for parallelization via the r-packages rmpi  <cit>  by h. yu, and snow  <cit>  by l. tierney, a. j. rossini, na li and h. sevcikova. in the web-based application, the cgi, initial data validation, and the setting-up and closing of the parallel infrastructure  is implemented with python. our installation runs on a cluster of  <dig> nodes, each with two dual-core amd opteron processors .

the input for the web-based application are either plain text files, or files that come from other tools of the asterias suite  <cit> . genesrf has been running in production use for over a year. further documentation and examples for the web-based application are available from its on-line help, and for the r package from the standard r documentation system. a fully commented example of the output is provided in the on-line help  <cit> . sample output is shown in figure  <dig>  bug-tracking and additional tests are available from bioinformatics.org and the launchpad.

benchmarks and run time
the parallelization has been implemented over bootstrap resamples. the speedups achieved by parallelizing are shown in figure 2a), where we plot the fold increase in speed achieved by increasing the number of rslaves . parallelization makes a dramatic difference in speed for all the data sets shown. up to  <dig> rmpi slaves, the increases in speed are almost linear with number of slaves. beyond  <dig> slaves, speed increases are slower with number of slaves: as is known from the parallelization literature  <cit> , in addition to number of cpus other factors can become limiting, in our case most likely bandwith and latency of inter-node communication, and potential bottlenecks from memory and cache in nodes made of dual-core processors  <cit> .

the scaling of user wall time of the r code  with number of arrays and number of genes is shown in figure 2b), with the default parallelization scheme and with a data set that allows for exploring a range of numbers of arrays and genes. user wall time increases approximately linearly with the number of arrays and number of genes over a realistic range of arrays and genes .

the run time for the web-based application for a wide range of data sets is shown figure 2c). these timings include the time needed to upload the files  and to prepare and return to the user the final figures. note that in most cases the complete analysis is finished within  <dig> minutes.

scripts for timing experiments are included with the source code .

RESULTS
our procedure is explicitly targeted to select very small sets of genes, and has been shown  <cit>  to have a classification error rate on-par with other, state-of-the-art, classification procedures. additionally, our programs allow the exploratory usage of random forest for identifying large subsets of genes potentially relevant for class prediction. in contrast to other tools, such as m@cbeth  <cit> , we are not restricted to two-class problems.

to avoid underestimating the error rate of the classification procedure, we use the bootstrap . as in  <cit> , we bootstrap the complete procedure, including selecting the classifier with minimal out-of-bag error rate , and thus our estimates of error rate are not affected by selection biases. this contrasts, for instance, with prophet  <cit> , where the error rate reported is that of the classifier with the smallest cross-validated error rate. based upon the bootstrap results, we also show the average out-of-bag predictions for each sample, allowing to easily asses poorly predicted samples and potential outliers. there are other tools available for performing cross-validation and bootstrap of classification methods, such as the r package ipred  <cit>  by a. peters and t. hothorn, the bioconductor package mcrestimate  <cit>  by m. ruschhaupt, u. mansmann, p. warnat, w. huber and a. benner, specifically targeted to computing misclassification error rates combining the gene selection and classification steps, or the cageda web application  <cit>  that incorporates bootstrap, leave-one-out, and random resampling validation of several classifiers. our approach, however, has been tailored to our own variable selection procedure and has been parallelized. a unique feature of genesrf and varselrf are their emphasis on examining possible multiple solutions.

since we obtain  <dig> resamples in the process of bootstrapping  there is little added computational cost to providing analysis of stability and multiplicity of solutions. we report the number of genes selected and the identity of the individual genes selected in the original sample and the  <dig> bootstrap runs, including frequencies of every gene selected in the solutions. moreover, the biological interpretation of the results is enhanced by the access to additional information. if the input file contains gene identifiers for either human, mouse, or rat genomes , for each gene in the results, the web-based application provides a link to idclight  <cit> , which allows the user to obtain additional information, including mapping between gene and protein identifiers, pubmed references, gene ontology terms, and kegg and reactome pathways. the multiple solutions can be further studied by sending sets of selected genes to our tool pals  <cit>  to examine pubmed references, gene ontology terms, kegg pathways, or reactome pathways that are common to a user-selected percentage of genes or lists . a fully commented example of the output is provided in the on-line help  <cit> .

finally, genesrf is one of the very few tools for the analysis of gene expression data that uses parallelization and, as far as we know, the only web-based tool to use parallelization for gene selection and classification. this is an important methodological novelty, as we can no longer expect that increases in single-cpu speed will allow us to analyze larger data sets in shorter time: the rate of increase in cpu speed has slowed down considerably in the last five years but, in contrast, increasing numbers of cpu cores  are becoming much more affordable  <cit> . thus, further decreases in user wall time  and ability to tackle more complex problems will depend on our ability to use parallel, distributed, and concurrent programming. genesrf therefore represents a case example on combining parallel computing with a user-friendly web-based application for the analysis of gene expression data and, by making the full source code available, allows other researchers to build upon our developments.

future work focuses on extending the software to use random forest-related techniques applicable to heterogeneous types of variables such as addition of categorical data  <cit>  and other clinical information. as well, we are exploring alternative mechanisms and languages for parallelizing and distributing computations, and we are rewriting most of the code using pylons  <cit> , a python web framework, to try to simplify installation of the web-based application. installation now involves several steps , and the most time consuming are setting up and verifying the lam/mpi environment, and using the correct paths in files involved in controlling the mpi environment and executing and controlling r.

CONCLUSIONS
varselrf and genesrf implement a validated method for gene selection and provide bootstrap estimates of classification error rate, take advantage of computing clusters and multicore processors, and encourage careful examination of the multiplicity of solutions problems. thus, these are both useful tools for applied biomedical researchers using microarray and gene expression data, and represent unique methodological developments in the area of web-based gene expression analysis tools.

availability and requirements
for genesrf:

project name: genesrf

project home page: 

operating system: platform independent 

programming language: r, python

other requirements: a web browser.

license: none for usage. web-based code: affero gpl .

any restrictions to use by non-academics: none.

for varselrf:

project name: varselrf

project home page: 

operating system: linux, unix

programming language: r, python

other requirements: lam/mpi

license: gnu gpl

any restrictions to use by non-academics: none

abbreviations
cgi, common gateway interface; go, gene ontology; kegg, kyoto encyclopedia of genes and genomes; lam, local area multicomputer; mpi, message passing interface.

