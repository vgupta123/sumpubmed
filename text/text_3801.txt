BACKGROUND
metabolic networks consist of small chemical molecules that are transformed from one to another by enzymes in a specified series of reactions. predicting source-to-target routes in metabolic pathways is an interesting problem that has applications in synthetic biology, bioengineering and systems biology. for example, a biologist might be interested to know how long-chained lipids might be produced. it is also useful in tracer and genetic knockout experiments  <cit> .

the problem is defined on a set of rules which dictate how substrates are transformed into products on a given enzyme. blum and kohlbacher described two early approaches targeted at this problem  <cit> . the first models compound transforming rules into a graph and employs shortest path algorithms to predict routes  <cit> . the second approach expands a set of compounds  by applying the set of rules iteratively adding the products of reactions to the set  <cit> . a shortest path algorithm is then run on a graph constructed from the resulting set of compounds.

it is uninteresting to only output a single shortest path, because native paths seldom have the shortest topological length. for example, the path from glucose to pyruvate has a shortest length of  <dig>  but the native path requires  <dig> reactions. on the other hand, the number of paths between a source and a target can grow exponentially in a highly connected network. for example, blum and kohlbacher reported that between glucose and pyruvate, there can be about  <dig>  paths  <cit> . most reported methods use eppstein's k-shortest path algorithm  <cit>  in which the paths are not guaranteed to be simple loopless paths. routes with loops are biologically uninteresting because they overlap with a shorter route previously discovered. the problem of finding k-shortest simple loopless paths incurs higher complexity and is harder to implement. the results from shortest-path finding is also highly dependent on the weights associated with nodes or edges, which are modelled differently in different approaches. for example, croes et al. use nodes to represent chemical compounds and assigned weights to nodes based on its degree centrality  <cit> . rahman et al. assign weights to edges based on compound structure similarity  <cit> .

earlier approaches also try to avoid compounds participating in many reactions but do not play an important role in the path. these compounds are termed as 'currency' compounds since they are circulating in metabolic pathways. blum and kohlbacher use atom mapping rules which keeps track of atom transfer between substrate and product compounds to avoid paths with currency compounds  <cit> . more recent approaches relied on new information -- e.g., the rpair database  <cit>  -- to avoid 'currency' compounds and to infer more reliable routes. xia et al. use species information to model the weights of graph edges  <cit> , they believe that reactions that can be found in more species are more reliable. however, these approaches do not check whether it is possible to start with a reaction from a certain pathway/species and end with a reaction so that as little change in pathway/species is required in the route. it might be biologically unmeaningful to obtain routes where there are reactions in the middle of the route that cannot be produced from the pathway/species that the first substrate started from. we think that routes with minimal switches are more preferable. in addition, most approaches fail to recover the native source-to-target route that is used by biological systems. we suggest that plausible routes should not deviate too much from native routes.

in this paper, we propose a method, class-switching minimized path finder , to find k routes that minimizes species/pathway switching. a switch is the case when a reaction in a path leads from a plausible set of species/pathways to a distinct set of species/pathways . the routes are scored so that routes that cross many species/pathways have a higher penalty than those that do not.

methods
basic framework
one way to find paths that minimizes species crossing is to reduce this problem to the original k shortest path problem. this can be done by modelling the network using a reaction connecting graph where by the nodes are reactions and an edge connects two reactions if the product of one is the substrate of the other. unique reaction nodes are duplicated for each species that the reaction occurs in. for example, if ten species are involved in a reaction, then ten separate reaction nodes will be created. an edge is assigned weight of zero if the two nodes have the same supporting species and one otherwise. any k-shortest path produced by the algorithm also has minimum species crossing because each cross-species reaction in the path has a penalty of one, whereas reactions that do not cross species have no penalty. however, this results in a prohibitively large number of nodes and edges. for example, if every reaction is supported by  <dig> species on average, then for every two reaction nodes in the original graph, we obtain  <dig> nodes with  <dig> , <dig> edges between them.

if the reaction nodes are compacted by storing all the species supporting that reaction, then a k-shortest-path approach does not work. this is because two routes might share a common reaction and a switch is incurred in one of the routes but not the other. on the other hand, a k-shortest-path approach requires the edge weight to be unchanged. when the shared reaction has a shared edge weight, a switch cannot be captured by such a framework. this suggests that paths should be scored independently from one another .

instead, the algorithm in cmpf uses bounded depth path enumeration and scores the paths based on a scoring scheme where paths that cross species/pathways many times have higher penalty scores than those that do not. we use a bipartite graph to model the metabolic network which consists of rpair nodes r <dig>  ..., rn and compound nodes c <dig>  ..., cn. an rpair is pair of compounds with similar chemical structure on two sides of a reaction  <cit> . a directed edge connects rpair to compound and vice versa if the compound participates in the reaction represented by the rpair. we use the notation rpair and reaction interchangeably in this paper, since they represent similar concepts.

given a reaction ri in a linear path ϕ = r <dig> → ... → rn, we write pϕ  and sϕ  respectively to be the set of pathways and species that "support" the reaction ri in the linear path ϕ. we assume that the pathways and species that support the first reaction r <dig> of ϕ are all the pathways and species that r <dig> belongs to; that is, pϕ  = p and sϕ  = s. for an intermediate reaction ri in the linear path ϕ, if possible, the pathways and species that support it should be those that ri belongs to and also support the preceding reaction ri -  <dig> . thus, pϕ  = pϕ  ∩ p, provided pϕ  ∩ p is nonempty; and sϕ  = sϕ  ∩ s, provided sϕ  ∩ s is nonempty. on the other hand, when the set of pathways or species that support the preceding reaction ri - <dig> is totally different from the set of pathways or species that ri belongs to, it is not possible to transition from reaction ri - <dig> to ri in the linear path ϕ. that is, in this case, a pathway or species switch is necessary. we assume that the entire set of pathways or species that ri belongs to can be used for this switch. thus, pϕ  = p when pϕ  ∩ p is empty; and sϕ = s when sϕ  ∩ s is empty .

now, we are ready to define our basic framework of reaction transition weight and linear path score as follows:

definition  <dig> the weight of a transition ri → ri+ <dig> in a linear path ϕ = r <dig> → ... → rn based on pathways is defined as

 weightp,ϕri→ri+1=γ+δ, 

where γ is some constant denoting the cost of making a within-pathway transition and δ is the extra cost of making a pathway switch; note that δ =  <dig> if pϕ ∩ p is nonempty, as a pathway switch is not needed in this situation. we will further refine γ and δ in the next section.

the weight of a transition ri → ri+ <dig> based on species is denoted weights,ϕ , which is defined analogously.

definition  <dig> the pathway- or species-based score of linear path ϕ = r <dig> → ... → rn is just the sum of the weights of all the transitions in ϕ based on pathways or species. that is,

 scoreϕ= ∑i=1n-1weightϕri→ri+ <dig> 

where weightϕ  is either weight p,ϕ  or weight s,ϕ , for pathway- or species-based score respectively.

in our scoring scheme, the weight of a transition ri → ri+ <dig> in a linear path depends on whether the pathways  that support ri also support ri+ <dig> in that specific linear path. thus, a topologically shorter linear path may have a higher score  than a longer one. moreover, the computation of the score is independent between different linear paths, suggesting exhaustive enumeration of linear paths as a method to find and rank linear paths. since most linear paths that are useful usually do not exceed a certain topological length and also because exhaustive enumeration can be slow, we use bounded depth enumeration to speed up the search process.

we construct a global metabolic bipartite graph annotated with species/pathway information and exclude non-main rpairs to avoid 'currency' compounds. we enumerate all possible paths up to a specified depth and return the k lowest scoring linear paths based on our scoring scheme. in this way, we guarantee that linear paths generated by our method have the least number of cross-pathway/species reactions and are always optimal up to the depth to which we traverse the graph.

framework extensions
edge weights
many other approaches have tried giving paths meaning by defining meaningful edge weights. our framework allows us to reuse these ideas and incorporate these weights. for example, croes et al. use node connectivity as edge weights so that 'currency' compounds are avoided  <cit> ; and xia et al. use the inverse of organism frequency that a reaction belongs to as edge weights so that reactions that belong to more organisms are preferred  <cit> . in cmpf, we use γ <dig> and γ <dig> to denote these two scoring strategies.

penalty scores
native paths rarely involve a switch between pathways. on the other hand, alternative paths might involve such switching. the penalty given when a switch occurs can be made more meaningful, since some pathway crossing is preferable to others. our framework discussed thus far allows us to rank linear paths by their pathway switching equivalence class. a pathway switching equivalence class here refers to a group of linear paths with the same number of pathway/switches. however, the arbitration of linear paths within the same pathway switching equivalence class is random.

we can do better by defining a function which computes the distance from one pathway to another. we define the 'metabolite closure' m of a pathway x to be the set of metabolites that are generated within that pathway. we hypothesize that pathways performing similar function have similar metabolite closures because the end product often determines intermediate metabolites. hence, a switch from pathway x to pathway y would be preferred if their metabolite closures agree well with each other.

definition  <dig> the distance between two pathways x and y is the average of the normalized size of the set difference of their metabolite closures m and m.

 δ1′x,y= <dig> *mx\mymx+ <dig> *my\mxmy 

in addition, a switch can involve two sets of pathways. in this case, we take the average distance of all possible switchings.

definition  <dig> given a transition ri → ri + <dig> in a linear path ϕ and pϕ ∩ p is an emptyset, we define

 δ1=∑x∈pϕri,y∈pri+1δ1′x,y|pϕri×pri+1| 

and δ <dig> =  <dig> if pϕ  ∩ p is non-empty.

similarly, a switch between species is more likely to happen if the two species are related. the distance between two species can be similarly defined using their metabolite closures. a more intuitive measure of species similarity is one that is based on the taxonomy tree. in this case, the path length from species x to y in the taxonomy tree can be used to determine the distance between them; we denote this distance by δ2′x,y.

definition  <dig> given a transition ri → ri+ <dig> in a linear path ϕ and sϕ  ∩ s is an emptyset, we define

 δ2=∑x∈sϕri,y∈sri+1δ2′x,y|sϕri×sri+1|, 

which is the average taxonomic path length between the two sets of species that support these two consecutive reactions in the linear path ϕ; δ <dig> =  <dig> if sϕ  ∩ s is non-empty.

combination of scoring functions
we modify definition  <dig> to a weighted sum of scores defined in the previous section.

definition  <dig> the weight of a transition ri → ri +  <dig> in a linear path ϕ = r <dig> → ... → rn is defined as

 weightϕri→ri+1=w1*γ1+w2*γ2+w3*δ1+w4*δ <dig> 

where γ <dig>  γ <dig>  δ <dig>  and δ <dig> are described earlier; and w <dig> + w <dig> + w <dig> + w <dig> =  <dig> 

RESULTS
constant penalty
we compare cmpf using standard reference metabolic pathways as defined in  <cit>  against mrsd  <cit> , metaroute  <cit>  and a pathfinding method in the neat software package described in  <cit> . mrsd and metaroute use compound transform graph to model the metabolic network and use species support and node connectivity respectively to score paths. neat model the metabolic network using rpairs and the score of a path is a combination of the node connectivity and a score given for each type of rpair. our framework can easily model these approaches. for example, we can easily emulate mrsd by setting w <dig> = w <dig> = w <dig> =  <dig> in definition  <dig>  it can also easily emulate metaroute by setting w <dig> = w <dig> = w <dig> =  <dig>  at the same time, we can avoid pathway/species switches while emulating these previous approaches. we define weightϕ as w <dig> * γ <dig> + w <dig> * γ <dig> + δ. we use γ <dig>  and γ <dig>  defined in section  <dig>  and set δ to be  <dig>  to avoid penalizing long routes with no switching. we set w <dig> and w <dig> to be  <dig>  so that γ <dig> and γ <dig> have equal contribution to the edge weight. for example, a route without switching will only be ranked lower than a switching path if its topological length is greater than  <dig>  the top  <dig> paths for each method is obtained and the number of pathway switches in every path measured. for each reference case, we computed the average number of switches; see table  <dig>  we observe that most paths returned by other methods incur many pathway switches.

cmpf <dig> uses static penalty and cmpf <dig> uses dynamic penalty. 

dynamic penalty
we also used weights and penalty scores in earler sections so that switching penalties reflected how different the switched species/pathways are. we set w <dig> =  <dig> , w <dig> =  <dig>  and w <dig> =  <dig> , so that γ <dig>  γ <dig> and δ <dig> contributes equally to an edge weight. the routes obtained from assigning dynamic penalties in cmpf aligned better to native pathways and alternative routes are only a slight deviation from native pathways, suggesting that such routes are more likely to happen in real biological systems. in contrast there is little alignment observed for other methods. for example, the glucose to pyruvate route with native path in red is shown in figure  <dig>   <dig>   <dig>   <dig>   <dig> 

a linear path can be also represented by tracing which pathways are used at each reaction step. this pathway trace intuitively tells us the transitions between pathways in a linear path . native paths have a short pathway trace because they often do not cross pathways since reactions in the same pathway perform a biologically efficient function. our results show that paths produced by other methods not only deviate from the native path, they also have longer pathway traces. we chose glucose and pyruvate as source and target respectively because it is a well-studied metabolic process breaking down the carbon backbone in the glycolysis pathway.

there are two consequences to long pathway traces. the first is that pathway transitions 'hop' from one pathway to another. the number of consecutive reactions in the same pathway is small. we believe this that such transitions activates many different biological functions without achieving any specific purpose. for example, one of neat's predicted paths is shown in figure 9b. the dotted lines represent additional reaction steps in the same pathway not shown in the figure. the width of the dotted edge represents the number of consecutive reaction steps in the same pathway. it starts by breaking down glucose  and transits to converting and breaking down of lactose, half way through the process, the intermediate metabolite is converted back to a glucose analog, switching back to glycolysis followed by a transition to the pentose phosphate pathway. in contrast, cmpf prefers to stick to the same pathway until a switch is permissible, as indicated by the thicker dotted lines .

the second consequence is that a transition might be made to a non-relevant pathway. for example, one of mrsd's predicted paths is shown in figure 9a. the reaction starts from breaking down glucose to producing fructose followed by a diversion to the glycine protein pathway before finally producing pyruvate. we think this is biologically not meaningful because breaking down of glucose into pyruvate is a simple function that does not involve anabolism or catabolism of amino-acids. while it is technically possible to obtain pyruvate from glucose by going through the protein pathway, it might make more sense to produce amino acids after transiting to the protein pathway rather than coming back to break down glucose. instead, whenever a switch is permissible, cmpf prefers to switch to the most similar pathway based on our dynamic scoring function.

our method is also flexible to find non-native paths  while incurring minimal pathway switches at the same time. for example, one can simply remove glycolysis from the set p ϕ so that future reactions will avoid switching to the glycolysis pathway. the switching minimized path from glucose to pyruvate without using the glycolysis pathway is shown in figure  <dig>  one of the paths can be achieved within the nucleotide sugar metabolism pathway. while paths that do not align well to native pathways might be spurious, alternative paths do give biological insights to the processes within the cell. amongst these paths, those that have lesser switching might be more likely to be interesting as they circumvent the two biological consequences discussed above.

implementation
we build a compound-rpair bipartite 'super' graph representing the all reactions in the metabolic network from all species and pathways as described previously. the rpair database from kegg is categorized into 'main', 'trans', 'cofac', 'ligase' and 'leave' depending on their roles in a chemical reaction  <cit> . to avoid currency compounds, we used main rpairs to construct the 'super' graph. this allows us to enumerate paths in a reasonable time since many irrelevant edges are excluded from the 'super' graph. however, we note that some 'trans' rpairs are present in native paths, suggesting that some 'trans' rpairs are important for pathfinding.

on the other hand, permitting edges from 'trans' rpairs make the exhaustive search significantly slower. to allow a more comprehensive search to run within reasonable time, we permitted 'trans' rpairs edges if they do not increase the graph branching factor by too much. to do this, we measure the increase in node connectivity after adding 'trans' rpair edges. the 'trans' rpair edges would be added only if they lie within one standard deviation from the median. this is a heuristic approach and thus may miss informative paths that include 'trans' rpairs.

we developed a software package to exhaustively traverse the graph up to a user specified depth threshold . the user specifies the starting and final product as well as the weights for scoring paths. the paths are displayed using a well known graph visualization tool, graphviz  <cit> . the software also allows users to highlight paths by their score ranking.

CONCLUSIONS
the problem of predicting source target routes in a biological pathway depends on the users' searching criteria. we have shown in this paper that our proposed path scoring scheme gives users the alternative to find paths that minimizes class crossing and also allows users to evaluate predicted paths. our scoring scheme is also sufficiently flexible to allow us to find routes with minimal switching between species or any other class that a reaction can participate in. we evaluate our method against other graph-based methods and demonstrate that paths ranked by our scoring scheme align better to native paths. this suggests that alternative paths predicted by our method might be more likely to occur in real biological systems.

availability and requirements
project name: cmpf

project homepage: http://compbio.ddns.comp.nus.edu.sg:8080/cmpf/

operating system: platform independent. windows system is tested

programming language: java

other requirements: java runtime environment  <dig>  and above, at least 1gb of free ram.

license: no

competing interests
the authors declare that they have no competing interests.

authors' contributions
kl derived and implemented the algorithms, performed the experiments, and drafted the manuscript. lw conceived, directed the project and revised the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
software package for cmpf.

click here for file

 acknowledgements
this work was supported in part by a national university of singapore research scholarship  and a singapore national research foundation grant nrf-g-crp-2007-04-082

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2012: eleventh international conference on bioinformatics : bioinformatics. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/13/s <dig> 
