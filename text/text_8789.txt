BACKGROUND
the large size of the life sciences literature makes it difficult even for experts to absorb all the relevant knowledge in their field of interest. sophisticated technologies are needed, and automatic text mining techniques are increasingly used to help access and exploit online textual resources. the most widely used are information retrieval systems such as pubmed, which searches the medline biomedical bibliographic database. these systems are very efficient and robust. however, in response to a user’s query they do not provide answers , but a set of documents  that the user has to read in order to extract the required answers. for example, if a user wants an overview of the parkinson’s disease literature, a pubmed search will return tens of thousands of documents. if the user is interested in treatments for a disease, with some skill it is possible to specify an effective query, but the result will be a set of documents that have to be read.

question answering  systems, on the other hand, aim at providing answers . for the above example about the treatment of a disease, a qa system would provide as answers particular drugs that are used to treat that disease or short text passages that contain the answers. the overall goal of qa systems is to allow users to quickly get precise answers with the least amount of reading required.

evidence-based medicine  <cit>  is an important paradigm in the medical field which encourages clinicians to use the best evidence from scientific research when making decisions, and it stimulates clinicians to ask questions in order to get the evidence. research has shown that physicians ask several questions of various types per patient encounter  <cit> ; however, they have very limited time for seeking an answer, on average less than two minutes. for many questions they do not even try to search for an answer, and even if they try, often the answer is not found  <cit> . on the other hand, hersh et al.  <cit>  have shown that at least 30 minutes are needed on average to find an answer. therefore, many questions remain unanswered.

clinical medicine is not the only field that needs efficient access to the literature for answers to questions. genomic research is another example of such a field. with high-throughput technologies, such as genomic microarrays, it is now possible to measure the expression levels of essentially all genes within an entire genome scale simultaneously in a single experiment and to provide information on gene functions and transcriptional networks  <cit> . however, the successful interpretation of this information for integration into research underpinning biomedical progress is impossible without comparison to the published literature.

in this paper we present a qa tool, sembt, that we have developed. it is able to answer a wide range of biomedical questions, not only for clinical medicine, but also for medical research in general, including pharmacogenomics and microarray experiment result interpretation. the tool returns answers in a top-down fashion, first very precise answers in the form of semantic relations, and then, on demand, more detailed answers. the tool is very fast and publicly available.

question answering work by others
qa can be open-domain  <cit>  or closed-domain  <cit> . open-domain qa is concerned with questions about nearly anything and is considered as more difficult than closed-domain qa. in open-domain qa, general ontologies and sources of world knowledge are used, and the answers are extracted from very large amounts of data. closed-domain qa is sometimes also called restricted-domain qa. unlike open-domain, closed-domain qa is restricted to a particular area, for example clinical medicine. a general review of the characteristics of closed-domain qa can be found in molla and vicedo  <cit> . zweigenbaum  <cit>  provides a short biomedical qa review. a recent, much more extensive biomedical qa review, is provided by athenikos and han  <cit> . they further divide biomedical qa into medical qa, dealing mostly with clinical aspects, and biological qa, focusing on molecular biology or genomic types of questions. in our approach, we deal with both medical and biological qa. according to athenikos and han, our methods can be generally classified as semantics-based biomedical qa, and we will mention relevant work done by others in this area. jacquemart and zweigenbaum  <cit>  investigate the feasibility of semantics-based approaches for the development of a french-language medical qa system. niu et al.  <cit>  report on their epocare  project for answering clinical questions. demner-fushman and lin  <cit>  use a series of knowledge extractors, both knowledge-based and statistical, for clinical question answering according to the principles of evidence-based medicine. weiming et al.  <cit>  use umls  <cit>  semantic relations for clinical qa. they also use semrep  <cit> , but in a different way than we do. they use semrep and metamap  <cit>  for question processing, then a more traditional information retrieval method for candidate answer selection, and finally they again use metamap and semrep to extract concepts and semantic relations from the candidate answers and match them to the starting question. biomedical question-answering become the focus of the trec genomics track in  <dig> and  <dig>  <cit> , with the introduction of a new task that was concerned with the retrieval of short passages to answer questions, together with the retrieval of the passage location in the source document. cao et al.  <cit>  describe the askhermes online system for answering complex clinical questions. the linked open data  initiative makes large amounts of data from different domains, including biomedicine, available on the web and accessible through semantic web technologies. querying this distributed and heterogeneous data set is one of the big challenges in this informatics area. therefore, there has been an increasing interest in question answering over linked data. for the area of biomedicine, there has recently been a challenge called qald  within clef  <cit> .

microarray text mining
several statistical techniques have been used to manipulate features in medline citations on microarray experiments. shatkay et al.  <cit> , for example, extract gene function terms from a set of citations related to a kernel document using a document similarity algorithm. most methods use co-occurring text words  <cit> , often along with either additional information such as mesh indexing or structured information from related databases such as the gene ontology  <cit> . some systems use a thesaurus to identify concepts in text  <cit>  or compute implicit information on the basis of terms related through co-occurrence with shared, intermediate terms  <cit> .

semrep natural language processing system
semrep  <cit>  is a symbolic natural language processing system for identifying semantic predications in biomedical text. the current focus is on medline citations. linguistic processing is based on an underspecified  parse structure supported by the specialist lexicon  <cit>  and the medpost part-of-speech tagger  <cit> . medical domain knowledge is provided by the umls  <cit> . predications produced by semrep consist of metathesaurus concepts as arguments of a semantic network relation.

semrep identifies many semantic predications representing various aspects of biomedicine. the core relations addressed refer to clinical actions  and organism characteristics . semrep has recently been enhanced to address pharmacogenomics text  <cit> . relations in this semantic area refer to substance interactions and pharmacologic effects , as well as genetic etiology . the majority of semrep’s relations are drawn from the semantic network; however, several have been defined to extend the coverage of that ontology in several semantic areas, including administered_to , co-exists_with , and predisposes .

each semantic relation extracted by semrep is based on an ontological predication contained in a modified version of the umls semantic network. the arguments in these predications are umls semantic types, such as “human” or “anatomical structure”, which can, for example, appear in the predication “anatomical structure part_of human.” all predications extracted from text by semrep must conform to an ontological predication.

semantic interpretation is based on the underspecified parse structure, in which simple noun phrases are enhanced with corresponding metathesaurus concepts by metamap  <cit> . for example, processing of the phrase extracorporeal shock wave lithotripsy in the treatment of renal pelvicalyceal stones produces the structure below.

, , prep, mod, head, metaconc]]

the noun phrase extracorporeal shock wave lithotripsy has been mapped to the concept “extracorporeal shockwave lithotripsy” with semantic type “therapeutic or preventive procedure” . the parse structure enhanced with metathesaurus concepts underpins the construction of a semantic predication. semrep first applies “indicator” rules which map syntactic elements  to the predicate of an ontological predication. argument identification rules  then find syntactically allowable noun phrases  to serve as arguments of indicators. the semantic types of the metathesaurus concepts for the noun phrases must match the semantic types serving as arguments of the indicated ontological predication. in the example above, treatment is an indicator for treats, which has the corresponding ontological predication “therapeutic or preventive procedure treats pathologic function.” the concepts corresponding to the noun phrases extracorporeal shock wave lithotripsy and renal pelvicalyceal stones can serve as arguments of treats because their semantic types  and “pathologic function” ) match those in the ontological predication. in the final interpretation, ”extracorporeal shockwave lithotripsy treats kidney calculi,” the metathesaurus concepts from the noun phrases are substituted for the semantic types in the ontological predication.

methods
according to hirschman and gaizauskas  <cit> , the processing involved in qa, in general, consists of the following phases: question processing, document processing and answer processing. a user question is the input to the question processing phase. the question is usually specified in natural language, but it can also be specified with predefined question templates. the question is analyzed and classified. the major goal of this processing step is to determine the type of question and the major concepts involved in the question. the output of this phase is an appropriate query which is used as input to document processing, the second phase. a traditional information retrieval system is normally used to retrieve documents satisfying the query. then, passages are extracted which serve as answer candidates and as input to the last phase, answer processing; in this step, the candidate answers are compared to the user question and ranked by how well they satisfy the user question. finally, a normally small set of answers are grouped and shown to the user.

the processing involved in our approach differs from the general approach described above. we start with an extensive preprocessing step during which we first extract semantic relations from medline with semrep  <cit> . for us, the extracted semantic relations are elementary answer components, which are used later to answer actual questions. during preprocessing, the extracted semantic relations are organized in a database enriched with additional information, such as information from the umls and certain microarray experiments. also, during preprocessing, additional index structures are built to allow very fast access to the database. this database is the foundation for the rest of our approach. the next phase, question processing, is realized as a search in the database of extracted semantic relations. finally, in the answer processing phase, we present the resulting semantic relations as answers in a top-down fashion, first semantic relations with aggregated occurrence frequency, then particular sentences from which the semantic relations are extracted, and finally, on demand, the medline citations from which the sentences come from.

preprocessing
during preprocessing, we first extract semantic relations from medline with semrep . the semantic types provide broad classification of the umls concepts serving as arguments of these relations. for example, “levodopa” has semantic type “pharmacologic substance” , “parkinson disease” has semantic type “disease or syndrome”  and “alpha-synuclein” has type “amino acid, peptide or protein” . during the question specifying phase, the abbreviations of the semantic types can be used to pose more precise questions and to limit the range of possible answers.

we store the large set of extracted semantic relations in a mysql database. the database design takes into consideration the peculiarities of the semantic relations, the fact that there can be more than one concept as a subject or object, and that one concept can have more than one semantic type. the data is spread across several relational tables. for the concepts, in addition to the preferred name, we also store the umls cui  as well as the entrez gene id  for the concepts that are genes. the concept id field serves as a link to other relevant information. for each processed medline citation we store the pmid , the publication date and some other information. we use the pmid when we want to link to the pubmed record for additional information. we also store information about each sentence processed: the pubmed record from which it was extracted and whether it is from the title or the abstract. the most important part of the database is that containing the semantic relations. for each semantic relation we store the arguments of the relations as well as all the semantic relation instances. we refer to semantic relation instance when a semantic relation is extracted from a particular sentence. for example, the semantic relation “levodopa-treats-parkinson disease” is extracted many times from medline and an example of an instance of that relation is from the sentence “since the introduction of levodopa to treat parkinson's disease , several new therapies have been directed at improving symptom control, which can decline after a few years of levodopa therapy.” .

at the semantic relation level we also store the total number of semantic relation instances. and at the semantic relation instance level, we store information indicating: from which sentence the instance was extracted, the location in the sentence of the text of the arguments and the relation , the extraction score of the arguments  and how far the arguments are from the relation indicator word . we also wanted to make our approach useful for the interpretation of the results of microarray experiments. therefore, it is possible to store in the database information, such as an experiment name, description and gene expression omnibus id. for each experiment, it is possible to store lists of up-regulated and down-regulated genes, together with appropriate entrez gene ids and statistical measures showing by how much and in which direction the genes are differentially expressed. we are aware that semantic relation extraction is not a perfect process and therefore we provide mechanisms for evaluation of extraction accuracy. in regard to evaluation, we store information about the users conducting the evaluation as well as the evaluation outcome. the evaluation is done at the semantic relation instance level; in other words, a user can evaluate the correctness of a semantic relation extracted from a particular sentence.

the database of semantic relations stored in mysql, with its many tables, is well suited for structured data storage and some analytical processing. however, it is not so well suited for fast searching, which, inevitably in our usage scenarios, involves joining several tables. consequently, and especially because many of these searches are text searches, we have built separate indexes for text searching with apache lucene, an open source tool specialized for information retrieval and text searching. in lucene, our major indexing unit is a semantic relation with all of its subject and object concepts, including their names and semantic type abbreviations and all the numeric measures at semantic relation level. our overall approach is to use lucene indexes first, for fast searching, and get the rest of the data from the mysql database afterwards.

the qa tool presented in this paper has as a major goal answering what is currently known based on the biomedical literature. the tool is web-based and is one of the several tools available at the sembt website. the other tools’ major focus is on literature-based discovery, or discovering new knowledge from the literature. the front-end  for all sembt tools was developed with the ruby on rails application development framework. figure  <dig> illustrates the user interface of the qa tool. the details of the types of supported questions and how the answers are presented are described in the next few sections.figure  <dig> 
the user interface of the question answering tool sembt.




question processing
in contrast to the usual qa methodology, in this phase we do not create a query for document retrieval, but rather we create a query for searching in the database of extracted semantic relations described in the previous section. in the interface shown in figure  <dig>  the user enters the question in the “query” field then presses the “search” button and gets a list of semantic relations as answers. right now, the user question  cannot be entered in natural language form. in general, the question is specified as a template , which refers to various components of the stored semantic relations. at least one component must be specified, but it is possible to specify two or even all three, depending on the question. the question is forwarded to lucene which means that full lucene query syntax is allowed. if additional features are used such as query expansion and the microarray filter , the user question is intercepted and reformulated before being submitted to lucene. in what follows, the most common options when specifying questions are illustrated with examples. a question containing only one of the arguments, e.g. “alzheimer’s disease” is very general and means any relation between alzheimer’s disease and some other biomedical concepts. such question will produce as an answer a set of semantic relations that can be used for a quick overview of a concept. a more realistic question might ask “what are the treatments for alzheimer’s disease?” and can be specified in our tool in the simplest form as “treats alzheimer’s disease” as shown in figure  <dig>  in which some of the answers are: “donepezil-treats-alzheimer’s disease” and “galantamine-treats-alzheimer’s disease”. the question “what does donepezil treat?” can be asked in our tool as “donepezil treats” and the answer will contain, in addition to “donepezil-treats-alzheimer’s disease”, other relations, including “donepezil-treats-schizophrenia”. a very specific question such as “whether donepezil has been used for down syndrome?” could be asked as “donepezil treats down syndrome,” in which all three components are specified; the returned relation “donepezil-treats-down syndrome” confirms that indeed it has been used for this disorder. when specifying a question, the case does not matter – “donepezil treats down syndrome” is equivalent to “donepezil treats down syndrome”. the semantic type of the subject and/or object can also be used in questions. for example, “which pharmacologic substances cause which diseases or syndromes?” can be asked as “phsu causes dsyn”. here “phsu” is the abbreviation of the semantic type “pharmacological substance” and “dsyn” is the abbreviation of the semantic type “disease or syndrome”. when specifying a question in the current version of our tool, semantic types must be abbreviated; full names are not accepted. although this looks like a drawback, the use of semantic type abbreviations has some benefits. one is that the questions become short and simple and the other, more important, is that since the abbreviations are unique and do not appear in the names of the subjects or objects of the relations, it avoids the ambiguity possible when part of the semantic type is found in the subject or object. the semantic relation names that can be used in questions are shown in table  <dig>  a list of the semantic types and their corresponding abbreviations are shown in table  <dig> table  <dig> 
top  <dig> semantic relations extracted with semrep



predicate
relation count
instance count
only the top  <dig> relations with highest instances count are shown . for each semantic relation its name, the number of unique relations and the number of instances are shown.
umls semantic types and their corresponding abbreviations that can be used for posing questions



abbreviation
semantic type
relation count
instance count
also shown is how many times a semantic type appears as an argument in semantic relations and semantic relation instances. only the most frequent  <dig> semantic types are shown out of  <dig> 



in the examples shown above we did not refer to the subject, relation and/or object explicitly, but rather implicitly. a query such as “donepezil treats down syndrome” searches all the words in all the fields of the relations. most of the time, such a query will be satisfactory; however, it is possible to construct more precise queries by referring explicitly to particular search fields. subject related search fields are: “sub_name” meaning subject name, and “sub_semtype” meaning subject semantic type abbreviation. object related search fields are: “obj_name” meaning object name, and “obj_semtype” meaning object semantic type abbreviation. if we do not want to distinguish between the subject and the object, we can use: “arg_name” meaning the name of the subject or the object, and “arg_semtype” meaning the semantic type abbreviation of the subject or the object. and finally, there is one semantic relation related field – “relation” meaning the name of the relation. the query above with explicit search fields would look like “sub_name:donepezil relation:treats obj_name:down syndrome”.

another implicit aspect of the queries shown so far is the logical connection or operator between the question terms. if there is no explicit logical operator present then and is assumed. for example, the last query above really means and is equivalent to “sub_name:donepezil and relation:treats and obj_name:down syndrome”. in all the examples so far, the actual question is the text between the quotation marks, without the quotation marks themselves. in other words, when constructing questions, it is possible to use the standard boolean operators and, or and not and group the search terms with parenthesis. in contrast to the search terms themselves, the logical operators must be capitalized to be properly understood by the tool. the question “what are the genes or proteins known to be etiologically related to alzheimer?” can be specified with explicit boolean operators as “sub_semtype: and relation: and obj_name:alzheimer” where “aapp” stands for “amino acid, peptide or protein” and “gngm” for “gene or genome”. an example of the not operator might be the question “what has been used to treat alzheimer that is not a pharmacological substance?” which could be minimally specified as “not phsu treats alzheimer” and in full form as “not sub_semtype:phsu and relation:treats and obj_name:alzheimer”. as practical advice, we recommend that users of our tool first try specifying questions without explicit field reference and boolean operators. in any case, knowing the names of the available semantic relations and the semantic type abbreviations is essential.

automatic argument expansion is another useful feature of our qa tool. if requested, it expands the question arguments with semantically narrower concepts . for example, if we issue the query “arg_name:antipsychotic treats” we will get only relations where antipsychotic agents appears. however, if we use argument expansion by selecting from the “expand” set of options before the query is submitted, the semantic relation isa  is used behind the scenes to search for narrower concepts, and the original query is expanded with them. the results will then also contain particular antipsychotic agents, such as clozapine, olanzapine, risperidone, haloperidol and so on. as another example, we can deal with a whole class of disorders in a question such as “what are the most common treatments for neurodegenerative disorders?” this question can be answered by using expansion in the query “treats arg_name:neurodegenerative”. here, “neurodegenerative” is expanded with the particular neurodegenerative disorders, such as alzheimer’s disease, parkinson disease and so on. a similar question might be “what are the most common treatments for various neoplasms?” here again we require expansion and use the query “treats arg_name:neoplasms”. currently, there are some limitations in the argument expansion facility: explicit field reference must be used ; if there are many narrower concepts, only the first one hundred are used; and finally, only a single word can be used to specify the concepts to be expanded . the last limitation means that when using expansion, the single word entered  is used to search for all the concepts containing that word , and, finally, all the concepts found are expanded. therefore, although a single word is entered, it is possible to expand on multiple word concepts. these limitations are due to technical issues faced when parsing and modifying the original query, and we plan to remove them in the future.

when the user question is not specific enough at the beginning or when a more exploratory approach is taken, faceting is another promising avenue to explore. in our tool, faceting is turned on with the “filter” option and is used for two purposes: to show the top-n subjects, relations and objects of a query, and to use these for further query refinement or result filtering. faceting results are shown in the left column of the user interface . in our faceting approach top-n means, in case of the subjects, the top-n subjects by the number of relations in which they appear. in other words, a concept that appears as a subject most often in the semantic relations that are the answers to the original query will be shown at the top of the subject facet. the same method applies to the relation and object facets. for example, if the user wants to do some exploratory research on neoplasms and enters the query “arg_name:neoplasms” and also uses argument expansion the most common neoplasms are automatically included in the question. this is a very general question that results in several hundred thousand semantic relations. now the user can browse the facets in the left column and investigate the subject, relations and objects appearing in highest number of relations. in the relation facet, the predisposes relation is selected in the relation facet, because that is the aspect the user wants to investigate further. the original query is automatically refined with the selected relation to become “arg_name:neoplasms and relation:predisposes” . now the results of the query show which concepts are known to predispose which particular neoplasms. the facets in the left column can be interpreted as: the concepts in the subject facet are those that predispose the largest number of neoplasms; and the concepts in the object facet are the neoplasms with the largest number of known factors that predispose them.figure  <dig> 
faceting, filtering and argument expansion used together to get the factors that predispose various neoplasms.




the qa tool described in this paper is generally applicable in biomedicine; however, it has some extensions that make it especially useful for interpreting microarray results. the problem with microarrays is that although they hold great promise for the advancement of biomedicine, results are not easy to interpret. microarray experiment results are usually long lists of differentially expressed genes, which can be up- or down-regulated, meaning more or less expressed, respectively, when comparing, for example, a group of patients with a disease with healthy controls. typically, we want to know as much as possible about the function of these genes. some of the needed information can be found in specialized genetic databases, but most of it is still in the biomedical literature. in order to make it easier to ask questions about the differentially expressed genes, our tool offers a “microarray filter” feature. this filter makes it easy to specify questions about hundreds of genes simultaneously. here are some example questions: “to which diseases are my up-regulated genes etiologically related?”, “what are the known interactions between the differentially expressed genes?”, “which substances or other genes can down-regulate my up-regulated genes?” the microarray filter represents a set of conditions to be satisfied in addition to the original user query. the idea of the microarray filter is that options are offered to the user. based on the selected options, behind the scenes, a few additional queries are issued in order to construct the appropriate complex query. finally, this query is executed and the results are shown. the first option to select is the microarray experiment. right now a researcher who wants to use our tool for interpretation has to send us the required data about the microarray experiment . then we load these data into sembt, after which the experiment becomes available in the microarray filter. at this time, there are a few microarray experiments available, but we are working on allowing users to upload their own experiments into the tool directly without our intervention. the next option is selecting which argument of the semantic relations to be limited to the differentially expressed genes. for example, selecting subject here means that only those semantic relations are eligible in which the subject is one of the differentially expressed genes. the next few options allow the selection of up-regulated or down-regulated genes based on several parameters. to illustrate the microarray filter, we describe how the question mentioned earlier  can be specified. in the query field we can use “relation:  and obj_semtype:dsyn”. this query alone would search for semantic relations in which something  is etiologically related  some disease or syndrome . now we can use the microarray filter to limit the list of semantic relations to only those where the subject is one of the up-regulated genes from one of the experiments. for example, we can first select an experiment  and then in the field “limit arguments” we select “subject” and then “upregulated”. when the query is submitted, before it is executed, it is modified so that only the up-regulated genes from the selected microarray experiment can appear as subject. the resulting list of semantic relations shows the specific genes and the specific diseases that they cause.

answer processing and presentation
in the question processing phase the question entered by the user is interpreted depending on user-selected options; then it is executed. answers are presented in a top-down fashion, semantic relations first, then, on demand, semantic relation instances, and finally, medline citations. in figures  <dig> and  <dig> in the lower right is the list of semantic relations, which are presented first. in addition to the subject, relation and object fields, the table also contains a “frequency” field which is the number of instances of each relation in the table. the relations in the answer list are sorted by frequency of descending relation instance. in other words, the most frequent relation is at the top of the list.figure  <dig> 
the first few instances of the semantic relation “donepezil-treats-alzheimer’s disease” shown as highlighted sentences.




the frequency field is a hyperlink and if followed, a new browser window shows the relation instances and a list of sentences from which each relation was extracted. in the sentences, whenever possible, the subject, relation and object are highlighted in different colors to make it easier to identify the relation and its context. figure  <dig> shows the list of highlighted sentences for the semantic relation “donepezil-treats-alzheimer’s disease”. the highlighted sentences are listed in ascending order of argument-predicate distance, which is measured as the number of noun phrases between the arguments  and the word indicating the semantic relation . in this regard, research by masseroli et al.  <cit>  has shown that relations with lower argument-predicate distance have a higher likelihood of being correct. therefore, we first show the user the relation instances that are more likely to be correct.

it is important to notice that the highlighted terms are not always the same as the official names used for the subject, relation or object. for example, in some sentences the abbreviation ad appears, but semrep correctly recognizes this as alzheimer’s disease. also, the words “in” and “for” are used several times in the text to indicate treatment, which is quite frequent in medical text. this is even more common when gene symbols are mentioned in the text. many genes have more than one symbol to denote them. and often, different genes might have the same symbol. to make things even more difficult, some gene symbols can also have another, often more common, meaning. for example, ct and mr are gene symbols, but more often mean computed tomography and magnetic resonance, respectively. this problem is known as gene symbol ambiguity and semrep attempts to address it as described in the background section. at the end of each highlighted sentence, the pmid of the medline citation in which the sentence appears is shown as a link that, when followed, opens the medline citation so that the context of the sentence can be seen.

we would like to stress that this view  also allows the user to evaluate the accuracy of the relation extraction. the last column, “correct?”, allows the user to select whether the extraction is correct or not. if the relation has not been evaluated, the value of this field is “-“. in order to evaluate, the user has to sign in with a username and password that we provide.

facets, if exploited, can also be considered as part of the answers. facets convey an aggregated view of the set of answers. the type of information facets contain and their usage were described in the previous subsection and shown in figure  <dig> 

RESULTS
in this section we first describe the size of the processing involved. then aggregated counts for the most important semantic relations and semantic types are presented, and finally, the results of the extraction correctness evaluation are shown.

size of processing
in the preprocessing phase we extracted semantic relations with semrep from  <dig> , <dig> sentences. these sentences come from  <dig> , <dig> medline citations .  <dig> , <dig> semantic relations were extracted having a total of  <dig> , <dig> semantic relation instances.

table  <dig> shows the number of extracted relations grouped by relation name. for each name, the total number of unique relations is shown as well as the total number of instances. the relations are ordered by descending order of the number of instances. only the top  <dig> semantic relations with highest instances count are shown for space saving reasons . knowing the semantic relation names is very important since these are the relations for which our tool is able to provide answers. the number of extracted relations and instances provide insight into which areas are better covered.

in table  <dig> we show a break-down of the arguments  of the extracted relations by semantic type. the first column shows the semantic type abbreviations which are used when formulating questions. the second column is the full name of the semantic type. the third column is the number of semantic relations in which the semantic type is the type of the argument and the fourth column is the number of instances. the semantic types are ordered in descending order by the number of instances. for space saving reasons, only the  <dig> most frequent semantic types are shown out of  <dig> semantic types that appear as arguments to relations .

evaluation
the quality of the answers provided in our approach largely depends on the quality of the semantic relation extraction process. our questions must be in the form subject-relation-object, and thus evaluating matching semantic relation extraction is a good  indicator of question-answering performance. we currently deal with a subset of all possible questions, as illustrated by the example, “find all the drugs that inhibit the up-regulated genes from a particular microarray.” for this type of question, evaluating information extraction is very close to evaluating question answering.

since the evaluation results shown in this paper were done for questions of the type noted above, we conducted an evaluation to estimate the correctness of the information extraction. technically, the evaluation was done using the same qa tool used for browsing the answers, and the evaluation outcome was immediately stored in the database. the evaluation was conducted at a semantic relation instance level. in other words, the goal was to determine whether a particular semantic relation was correctly extracted from a particular sentence. the evaluators could select as outcome “correct”, “not correct” or “undecided”. eighty subjects, students in the final year of medical school, conducted the evaluation. they were divided into four groups of twenty persons each. each group spent three hours on an evaluation session. the subjects were organized in such a way that three of them independently evaluated the same semantic relation instance. they were not allowed to consult with each other about the outcome, and this was strictly enforced by their instructor. the idea was that each semantic relation instance included in the evaluation was to be assessed by three subjects so that voting could determine disagreement in the outcome. but in reality, since the subjects had some freedom whether to skip a relation to be evaluated and which one to evaluate from the set of assigned relations, it turned out that some instances were really evaluated by three subjects, but some were evaluated by two and some by only one person. the subjects were also instructed that the quality of the evaluation was more important than the quantity. this is probably another reason that some subjects evaluated more and some fewer relations.

in total  <dig>  semantic relation instances belonging to  <dig>  distinct relations were evaluated  <dig>  times. the instances were evaluated as correct  <dig>  times  and as wrong  <dig>  times .  <dig>  distinct instances were evaluated as correct  at least once and  <dig>  distinct instances were evaluated as wrong  at least once.  <dig>  distinct instances were always evaluated as correct  and  <dig>  distinct instances were always evaluated as wrong . if we did not take into consideration the number of persons who evaluated a particular relation instance, we found that  <dig>   distinct instances were evaluated more frequently as correct than as wrong:  <dig>   instances were evaluated more often as wrong than as correct, and  <dig>  relation instances were evaluated as correct exactly as many times as they were evaluated as wrong. if we consider only the relation instances that have been evaluated by two or more evaluators , we found that  <dig>   instances were evaluated more times as correct than as wrong, and  <dig>  instances were evaluated more times as wrong than as correct, which means that the remaining 15% were evaluated as many times as correct as wrong. however, if we consider only the relation instances being evaluated by exactly three evaluators , then  <dig>  relation instances were evaluated more times as correct than as wrong, and  <dig>  instances were evaluated more times as wrong than as correct. the relations with most instances evaluated by exactly three evaluators were inhibits , stimulates  and associated_with  with respective extraction precisions 71%, 54% and 85%.

we calculated inter-evaluator agreement as a simple ratio between the cases where all the evaluators gave the same outcome  divided by the total number of cases evaluated by the same evaluators. the inter-evaluator agreement for instances evaluated by two evaluators was 80% and for instances evaluated by three evaluators was 76%.

error analysis
we analyzed  <dig> system errors selected at random from predications deemed as false positives by three judges. from this analysis it became clear that incorrect answers returned by the system were largely due to erroneous predications identified by semrep in the source documents . efforts are being made to address the semrep errors noted in this research.

slightly fewer than a quarter of the errors  were wrong because of concept misidentification. one subtype of this class involves failure to analyze a larger structure containing a misidentified component concept. for example, the larger structure cyclin-dependent cdk system was missed, and cdk alone was consequently interpreted as an argument of a false positive predication.

another type of error involving concept identification is due to missing information in the metathesaurus, specifically not having the semantic type ‘physiologic function’, which is one of the semantic types allowed for objects of predications with predicate stimulates or inhibits. for example, in the following sentence, the correct object of inhibits is colonic aberrant crypt foci formation, but this concept does not have semantic type ‘physiologic function’ and was not allowed to be the object of this predication.

beta-escin inhibits colonic aberrant crypt foci formation in rats and regulates the cell cycle growth by inducing p <dig> in colon cancer cells.

semrep then wrongly moved to the next concept with a semantic type allowable as an object of inhibits  and produced the false positive “beta-escin inhibits cdk1a”

four errors were due to misinterpretation of a predicate. for example, semrep extracted the predication “meclofenamic acid stimulates atpase” from the following sentence based on the highlighted items.

at low glibenclamide concentrations,mfa inducedadditional inhibition of the k current.

mfa and atp were correctly mapped to the concepts “meclofenamic acid” and “atpase,” respectively. however, the correct relation between these concepts in this sentence is inhibits, not stimulates. the complex predicate induced … inhibition was not interpreted correctly , but rather induced was interpreted as stimulates by semrep.

the rest of the errors  were due to various deficits in syntactic processing. we note a few of the more prominent error types in this class. incorrect interpretation of clausal boundaries accounted for fifteen errors. semantic predications are not allowed to cross clausal boundaries, so correct identification of this phenomenon is crucial. intrasentential clause boundaries are commonly marked by and and the so-called subordinating conjunctions, such as while and when. all of these are ambiguous in that they can conjoin structures other than clauses. and is notorious for signaling a variety of coordination types, including, noun phrases and verb phrases, in addition to clauses. when semrep fails to mark a clause boundary, a false positive may result. for example, semrep extracted the predication “cdk <dig> inhibits cdka1a” from the sentence below.

 

the correct clausal boundaries for this sentence are indicated by brackets, which semrep failed to impose. this failure then wrongly allowed p <dig>  in the second clause to be an object of “decreased” in the first clause.

misinterpretation of passive voice, especially when truncated, accounted for  <dig> errors. for example, semrep extracted the false positive predication “cdk <dig> inhibits cdka1a” from the following sentence.

the tb-induced cell-cycle arrest in huvec occurred when the cyclin-dependent kinase  <dig>  activitywas inhibitedjust as the protein level of p <dig> was increased and cyclin a was decreased.

correct interpretation of the passive was interpreted requires cdk <dig> to be the object  of inhibited. further the semantic subject of inhibited is left unexpressed  in this sentence. semrep currently does not have a facility for dealing with predications missing an argument, which is the consequence of truncated passive. the interpretation of this sentence is further complicated by the fact that semrep failed to note the clausal boundary just as.

in a residue of sentences  with very complicated syntax, the etiology of error was due to multiple causes. for example, in the following sentence, semrep wrongly identified the predication “mitogen-activated protein kinases inhibits bag <dig> ”

primary cultured astrocytes exposed to  <dig> mm nh4cl for different time periods  significantly increased phosphorylation of extracellular signal-regulated kinase 1/ <dig> , p <dig>  and c-jun n-terminal kinase  1/2/ <dig>  which wasinhibitedby appropriate mapk inhibitors  <dig>  4-diamino- <dig>  3-dicyano- <dig>  4-bis butadiene , trans-1--4--5-imidazole ), and anthrapyrazol-6-one , as well as by antioxidants.

this predication was based on the three highlighted components: mapk, inhibited, and bis. mapk was correctly mapped to the metathesaurus concept “mitogen-activated protein kinases,” and the verb inhibited is the correct indicator for the semantic relation inhibits. however, the text bis is a part of the complex chemical name in which it appears and should not have been mapped to the concept “bag <dig> ” further, with respect to syntax, mapk is not allowed to be an argument of inhibited in this sentence. in addition this verb is in passive voice . any argument to its left must be its  object, rather than subject as in the false positive being discussed.

discussion
our approach to biomedical qa is, first, to extract semantic relations from medline with semrep and build a database of these relations during a preprocessing step. then, qa is implemented as a search in the semantic relation database. due to the preprocessing and the appropriate database design, our approach is very fast. a typical question is answered within a few seconds, and if faceting is used or the microarray filter is switched on, the processing time takes a few additional seconds. one of the limitations of our approach is that it is currently not possible to provide contextual information when specifying the questions. for example, it is not possible to ask “what is used to treat patients with a certain disease who also have another disease or situation at the same time?” we can answer the first part of the question separately: “what is used to treat patients with a certain disease”, and the second part of the question also, but not the full question at once. one of the first items in our further work list is to allow more complex questions, which will involve combining several semantic relations in order to answer them.

we also plan to allow asking questions in natural language format, which will be useful for processing more complex questions like the one mentioned above. for less complex questions, the current approach is quite satisfactory, provided that the user spends some time learning how to formulate a question. for example, the natural language question “what drugs can be used to treat diabetes?” can be asked in our tool as “phsu treats diabetes” where “phsu” stands for “pharmacological substance” and “treats” is the name of the semantic relation. because a lot of issues are involved with processing natural language queries, we also plan to explore another direction. we plan to develop a sophisticated user interface, based on question templates, which will allow formulating complex questions in a more structured way – a way that will be easier to process with a computer.

since important information is present in the full text of the articles, we also plan to process a considerable number of electronically available full text articles. and since in addition to the biomedical articles there are also important websites with useful information, we also plan to process the most important such sites.

we were aware before, and the evaluation conducted for this paper has confirmed, that the semantic relation extraction process is not perfect. therefore, improving the extraction performance is a permanent ongoing process. we believe that a very useful feature of our tool is the ability to evaluate the answers within the tool itself. in other words, whenever the user sees an answer  that she thinks is not correct, she can record her opinion and it is stored in our database. right now, only the users we know and trust can evaluate, but we would like to allow any user to register and evaluate the relations. the major goal of collecting evaluation-related information is that it allows us to find the weak points and improve them. there are a few more things that can be done once we have enough evaluation data. for instance, the answers can be sorted by how many positive evaluations they have received, or they can be automatically filtered out if the users believe they are not correct. the value of this kind of evaluation is that by helping us, the users of our tool will also help themselves. this is similar to a crowdsourcing approach in which we would like to involve the biomedical community.

in the future, we also plan to conduct an evaluation of the user interface of sembt to see how easy or difficult it is to use, and whether it is intuitive or not. based on the results of that evaluation, we will improve the user interface accordingly.

CONCLUSIONS
we propose a methodology and describe a tool, sembt, for biomedical qa. the system is able to provide answers to a wide array of questions, from clinical medicine through pharmacogenomics to microarray results interpretation. sembt is based on semantic relations extracted from the biomedical literature and is able to quickly provide precise answers to user questions. more details are provided only on demand. sembt is publicly available at http://sembt.mf.uni-lj.si and is a useful complement to existing information retrieval systems.

additional files
additional file 1: 
semantic relations extracted with semrep.


additional file 2: 
umls semantic types and their corresponding abbreviations that can be used for posing questions.




competing interests

the authors declare that they have no competing interests.

authors’ contributions

dh conceived the study, developed the software application, designed the evaluation, and drafted the manuscript. dd conducted the evaluation. ak processed the microarray data sets and helped draft the manuscript. tcr provided the semantic relations, participated in the study coordination and helped draft the manuscript. all authors read and approved the final manuscript.

