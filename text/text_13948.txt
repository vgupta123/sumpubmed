BACKGROUND
biological networks are known to be redundant at various levels, which makes them robust to various types of perturbations. as a consequence, it is generally difficult to change their long-term dynamics by blocking a specific gene or intervening in a specific pathway. this is one of the reasons why monotherapy is often not very effective in treating complex diseases, such as cancer and diabetes. in fact, multi-target therapeutics based on combinatory drugs are known to be much more effective, and they are commonly used these days for treating various diseases  <cit> . however, considering the huge number of possible ways to mix multiple drugs, it is practically impossible to find the optimal "drug cocktail" simply by trial and error or by exhaustive testing. clearly, we need a systematic way of identifying the most effective drug cocktail, and recently, several algorithms have been proposed to address the problem of combinatorial drug optimization  <cit> .

for example, calzolari et al.  <cit>  developed a drug optimization algorithm based on sequential decoding algorithms that have been traditionally used in digital communications  <cit> . in  <cit> , it was shown that we can algorithmically identify the optimal drug combination by testing only a relatively small number of drug combinations, compared to exhaustive search. unlike the approach proposed by calzolari et al.  <cit> , which was deterministic, wong et al.  <cit>  proposed a different approach based on a stochastic search algorithm, called the gur game algorithm  <cit> . in this work  <cit> , they formed a closed-loop optimization framework, in which the gur game algorithm was used to predict an updated drug combination that is likely to improve the current drug response, and the drug combination is iteratively updated until the response is maximized. it was shown that this closed-loop optimization method can quickly identify potent drug combinations. more recently, another stochastic search algorithm was proposed in  <cit>  that addresses the limitations of the gur game algorithm, thereby further improving the performance of the closed-loop optimization approach originally proposed in  <cit> .

in this paper, we propose a novel stochastic search algorithm, called the adaptive reference update  algorithm, that can significantly improve the performance of the existing stochastic search algorithms  <cit> . the key idea of this algorithm is to adaptively update the reference drug combination to guide the search algorithm and help it to make better informed guesses without requiring extensive prior knowledge of the underlying biological network. we demonstrate that the proposed aru algorithm outperforms existing stochastic drug optimization algorithms, in terms of both efficiency, success rate, and robustness.

methods
combinatorial drug optimization problem
suppose we have n different types of drugs, where each drug can take one of pre-specified concentrations. our goal is to predict the optimal drug cocktail, by mixing the available drugs, that maximizes the overall therapeutic effect. let xn be the concentration of the n-th drug, where xn can take one of mn distinct concentrations in the set cn={cn <dig>  cn <dig>  cn <dig> ...,cnmn}, where cnk<cnk+ <dig> for all k. the drug cocktail is represented by an n-dimensional vector x = , which consists of the n drug concentrations. let f be the normalized drug response that quantitatively measures the effectiveness of a given drug combination x. we assume the response has been normalized such that 0≤f≤1forx∈x, where x=c1×c2×⋅⋅⋅×cn is the set of all possible drug combinations. we denote the number of all possible drug combinations as m=|x|= ∏n=1nmn. fx= <dig> implies that the drug cocktail x is completely ineffective, and larger f  implies higher efficacy. in practical applications, f  may be obtained by monitoring the cell response to a drug intervention using fluorescent imaging, microarrays, or sequencing techniques. under this setting, we aim to find the optimal drug combination x* that maximizes the normalized drug response:

 x*=argmaxfx∈x. 

as we can see, this is a combinatorial optimization problem, in which we have to find the optimal drug combination out of m <dig> m <dig> . . . mn possible combinations. the total number of distinct drug combinations quickly grows as the number of drugs increases. considering the practical cost of experimentally measuring the normalized drug response function f , it is apparent that we cannot test all drug combinations to find the most effective one.

stochastic search algorithms
stochastic search algorithms  <cit>  aim to efficiently identify the potent drug combinations without exploring the entire combinatorial solution space. the basic idea is to randomly search through the solution space by iteratively updating the drug combination until an effective combination emerges. at each step, the current drug combination is incrementally updated towards the direction that is likely to improve the overall drug response. the updating decision is made in a stochastic manner, which allows the search to proceed towards directions that are deemed to be less likely to improve the response. this is an important characteristic of stochastic search algorithms, which is critical for keeping the search from being trapped in local maxima. since a stochastic search algorithm tries to arrive at the optimal solution  by performing iterative local searches, its overall performance depends on how it chooses the next solution state  from a given state . the two performance metrics of interest are:  the effectiveness of the predicted drug combination, in terms of how close its response is to the optimal response, and  the number of search steps that the algorithm needs to take until an effective combination is found. basically, we want to predict a potent drug cocktail by testing minimal number of drug combinations to minimize the actual experimental cost for measuring the cell response to combinatorial drugs. when choosing the next state, the search algorithm has to be as parsimonious as possible, in terms of the number of function evaluations, so that the overall experimental cost for identifying the optimal drug combination can be minimized. this has been one of the main design considerations of existing stochastic search algorithms that have been developed for combinatorial drug optimization  <cit> .

for example, the gur game algorithm adopted in  <cit>  determines how to update the drug combination solely based on the current drug response. suppose xc= is the current drug combination with a normalized drug response of f . the algorithm generates n random numbers rn ∈  <cit> , one for each drug. each rn is compared against the current drug response xc=, which is used to either "reward" or "penalize" the n-th drug. for example, the drug is rewarded if f  >rn. otherwise, it is penalized. this update process is repeated for each of the n drugs. according to this scheme, drug combinations with higher response are more likely to be rewarded, while combinations with lower response are more likely to be penalized. in the long run, the algorithm is expected to drive the concentration of each drug towards the one that maximizes the response. now, an important relevant question is what is the right way of rewarding  the current concentration of a given drug. the gur game algorithm used in  <cit>  uses a predetermined finite state automaton  for this purpose. for example, let xc=cnk∈cn be the current concentration of the n-th drug. suppose we have f  >rn, hence the current concentration xnc of the n-th drug should be rewarded. the fsa in  <cit>  is designed such that the drug concentration is increased further if the current concentration xnc is larger than a reference concentration cnref, and decreased further if xnc is smaller than cnref. more specifically, if xnc=cnkand f >rn, then the drug concentration is updated as follows.

  xnc=cnk+ <dig> if xnc>cnrefand k<mncnk,if xnc>cnrefand k=mncnk- <dig> if xnc<cnrefand k>1cnk,if xnc<cnrefand k= <dig> 

the reference concentration cnref is typically chosen as the median of the set cn. as shown in , the drug concentration remains unchanged if it cannot be increased  further. now, suppose that f  <rn, and therefore the current concentration xnc=cnk should be penalized. in this case, the concentration is updated in the opposite direction:

  xnc=cnk- <dig> if xnc>cnrefcnk+ <dig> if xnc<cnref 

note that penalization moves the current drug concentration closer to the reference concentration cnref. as previously discussed in  <cit> , one of the weaknesses of the gur game algorithm is that it uses a predetermined fsa for updating  the drug concentrations and does not adapt to the drug response function at hand, which is not known in advance. as a result, the algorithm may perform poorly unless the drug response function f is properly normalized and the reference concentration cnref is chosen adequately for each drug. for example, consider the one-dimensional drug response f shown in figure 1a. as we can see, the drug response has been over-normalized, hence f <  <dig>  for any allowed concentration x ∈ . since f <  <dig> , a uniformly distributed random number r ∈  <cit>  is more likely to be larger than f. this implies that the gur game algorithm always tends to penalize the current drug concentration , which will probabilistically drive the concentration towards cref although it is clearly not optimal. figure 1b shows another drug response, for which the gur game algorithm will not work properly. in this example, we have f >  <dig> , hence the gur game algorithm is always more likely to reward the current drug concentration, which tends to drive the concentration away from the reference concentration cref. this will push the concentration either towards cmin or cmax, both of which are suboptimal.

the enhanced stochastic algorithm proposed in  <cit>  addresses this problem by making the search algorithm adapt to a given drug response. the basic idea of this algorithm is to make an "informed-guess" about how to beneficially update a given drug concentration, instead of following a predetermined update rule. unlike the gur game algorithm in  <cit> , where all n drugs are simultaneously updated based on the  current drug response f, the enhanced algorithm updates the concentration of one drug at a time. as an example, suppose during the last update of the n-th drug, the drug combination has been updated as

 x=⇒x′ = , 

where x and x′ are identical except for the concentration of the n-th drug, hence xi=xi′and xi≠xi′. we assume that xn and xn′ differ only by a single concentration level, so that xn=cnkandxn′=cnk+ <dig>  or xn=cnk+1and xn′=cnk, for some k. the algorithm compares the two drug responses f  and f, thereby determine wether it would be more beneficial to further increase or decrease the concentration of the n-th drug. for example, we may have the following four cases.

  xn<x′nandf<f:increasing the concentration is more beneficialxn>x′nand f>f:increasing the concentration is more beneficialxn<x′nand f>f:decreasing the concentration is more beneficialxn>x′n and f<f:decreasing the concentration is more beneficial. 

the above rules allow the algorithm to adaptively determine how to reward  a given drug concentration based on the observed drug response values. however, the decision whether to reward or penalize the current drug is made in a probabilistic manner. for this purpose, we evaluate the following function

  g=121+α⋅maxf,f, 

where α ∈  <cit>  is a control parameter that adjusts the randomness of the algorithm  <cit> . this g is compared with a uniformly distributed random number rn ∈  <cit> . if g > rn, the n-th drug is rewarded, i.e., updated in such a way that appears to be more beneficial for enhancing the drug response according to the rules shown in . otherwise, the n-th drug is penalized, i.e., updated in a way that appears to be less beneficial based on the past observations. it is not difficult to see that this algorithm is always more likely to reward, or beneficially update, a given drug. since the algorithm proposed in  <cit>  adaptively determines how to update the drug concentration based on previous observations, it can also effectively deal with drug response functions shown in figures 1a and 1b, for which the gur game algorithm does not perform well. despite its merits, this algorithm also has its own shortcomings. for example, as the update rule for a given drug is determined only based on the two observations that correspond to its latest update, not on a longer-range trend, the algorithm may be sensitive to small variations in the drug response. as a result, it may not show satisfactory search performance for drug response functions that are similar to the one in figure 1c. furthermore, considering that f has to be experimentally estimated, where a certain level of measurement noise and small variations due to a number of practical factors may not be avoidable, such sensitivity may adversely affect the overall performance of the algorithm. another weakness of the algorithm is that it only utilizes a very small part of the past observations without fully utilizing them. in the following section, we introduce a novel stochastic search algorithm that can effectively address the aforementioned issues.

the adaptive reference update  stochastic search algorithm
in order to make the search algorithm robust to small variations in the observed drug response, the update rules have to be decided based on the general trend of the drug response change over a wide range of drug concentration, not just based on the response change resulting from a single-level concentration change. based on this motivation, we propose a novel algorithm called the adaptive reference update  algorithm. in this algorithm, we compare the current drug response f with the response f of a reference drug combination xref, which is adaptively updated based on past observations. in the beginning, xref is set to the initial drug concentration, where we start the search process. during the search, when the algorithm encounters a local maximum, the current reference combination is replaced by the corresponding drug combination. as an example, let us consider the one-dimensional drug response function f in figure  <dig>  for illustration, we consider the following hypothetical search process, where the drug concentration is constantly updated from left to right, starting from the lowest concentration cmin to the highest concentration cmax. suppose the search begins at the concentration x = cmin. initially the reference concentration is also set to this initial drug concentration xref ← cmin. as the search reaches the first local maximum, the reference concentration is updated to this local maximum solution xref ← xref <dig>  as the search continues to the right, this reference concentration is used until we reach the next local maximum. after passing the second local maximum solution xref <dig>  the reference point is updated to xref ← xref <dig>  in a similar manner, as the search continues further to the right, the reference point is updated to xref ← xref <dig> after passing the third local maximum point.

at each iteration, the current drug response f is compared to the response f of the reference drug combination, based on which the drug update rule is determined. for example, let xc= and xref=, and assume that we want to update the concentration of the n-th drug by comparing the two drug response values f and f. as before, we have the following four possible cases.

  xnc<xnrefand f<f:increasing the concentration is more beneficialxnc>xnrefand f>f:increasing the concentration is more beneficialxnc<xnrefand f>f:decreasing the concentration is more beneficialxnc>xnrefandf<f:decreasing the concentration is more beneficial. 

conceptually, we can view the above as estimating the "virtual" slope between two points ) and ) as follows

  f-fxnref-xnc, 

based on which we determine how to update the concentration xn of the n-th drug to increase the drug response f. given the update rules in , the actual update decision is made by evaluating the following function

  g=121+α⋅maxf,f 

and comparing it with a random number rn ∈  <cit> . if g >rn, the drug concentration xn is updated by a single level, following the beneficial update direction predicted by . otherwise, the concentration is updated in the opposite direction. as briefly mentioned before, the parameter α ∈  <cit>  controls the randomness of the algorithm. for example, α =  <dig> will make the search process completely random, regardless of the observed drug responses. using a larger α means that we are giving a larger weight to the past observations when deciding how to update the drug concentrations. the value of this control parameter is limited to α ≤  <dig> such that g ≤  <dig>  also note that we always have g ≥  <dig> , which implies that at any drug update step, the update is always more likely to take place in accordance with the rules in , which have been derived based on past observations of the drug response. in other words, the aru algorithm tries to effectively utilize the past response data to beneficially update the drug concentrations, and ultimately, to identify a potent drug combination, while keeping the search still stochastic. for illustration, let us again consider the drug response function in figure  <dig>  where the hypothetical search process proceeds from the lowest drug concentration to the highest concentration. the black solid arrows below the graph shows the drug update direction that gets higher probability according to the new algorithm, described above. for example, in region-a , the algorithm tends to increase the drug concentration x further, as the response f is larger than f of the initial reference concentration . as x continues to increase and passes the first local maximum point xref <dig>  the reference is updated to xref ← xref <dig>  in region-b , the search algorithm tends to drive the concentration towards xref <dig> by decreasing the concentration. suppose the search continues to increase the drug concentration x beyond xref <dig>  the second local maximum point, despite the tendency of the algorithm to decrease x back to xref <dig>  after passing xref <dig>  the reference is updated to xref ← xref <dig>  in region-c, the search algorithms assigns higher probability to the update rule that tries to bring the concentration down to xref <dig>  since f < f in the given region. however, once x enters region-d, where f > f, the algorithm begins to drive the drug concentration x further to the right until it passes the third local maximum point xref <dig>  the reference concentration is updated to xref ← xref <dig>  once the search continues to the right and the drug concentration x gets larger than xref <dig>  since f is larger than f in region-d , the search algorithm will tend to bring the concentration down to the current reference concentration, namely, xref = xref <dig> 

choosing a local maximum solution as a reference combination has a number of practical advantages. first of all, it allows the algorithm to adjust the drug update rules based on a long-range trend of the given drug response function, which makes the algorithm robust to small variations in the observed response. another advantage of using a long-range trend is that the search process will become also less sensitive to random fluctuations that may exist in the observed drug response. considering that the drug response function f has to be experimentally estimated through actual biological experiments, where random factors  that affect the estimation results cannot be completely ruled out, such robustness is critical for the algorithm to be used in practical drug optimization applications. it is also beneficial to use the drug combination that corresponds to the most recent local maximum response, instead of the drug combination that has yielded the highest response among all past combinations, as the reference point. this prevents the search process from dwelling too much on past observations, while keeping it robust to variations and random fluctuations.

drug response functions
in order to evaluate the overall performance of the aru algorithm, we used the algorithm to search for the optimal drug cocktail for several different drug response functions.

two-dimensional drug response functions for performance assessment, we first used the four two-dimensional drug response functions that are shown in figure  <dig>  the first drug response function f2a shown in figure 3a is the normalized hiv inhibitor response obtained from  <cit> , where x <dig> ∈ { <dig>   <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> } was considered for maraviroc and x <dig> ∈ { <dig>   <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> , 65} for roab <dig>  the second drug response f2b shown in figure 3b is the normalized second de jong function   <cit> . we considered x <dig>  x <dig> ∈ {c <dig>  c <dig>  ... , c20}, where ck =  <dig>  obtained by evenly dividing the range  into  <dig> distinct values. the third drug response function f2c in figure 3c is the normalized lung cancer inhibition response obtained from  <cit> , where x <dig> ∈ { <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  22} was considered for chlorpromazine and x <dig> ∈ { <dig>   <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig>   <dig> ,  <dig>   <dig>   <dig> } for pentamidine. finally, figure 3d shows the fourth response function f2d, the normalized bacterial  inhibition response reported in  <cit> . x <dig> ∈ { <dig>   <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig>  10} was considered for trimethoprim and x <dig> ∈ { <dig>   <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig>   <dig>   <dig>  40} was considered for sulfamethoxazole. all four drug response functions were normalized to span the entire range  <cit> , such that the minimum response is  <dig> and the maximum response is  <dig> 

multi-dimensional drug response functions to evaluate the performance for optimizing multi-drug cocktails, we defined several hypothetical drug response functions with up to six drugs. first, we defined two 3-dimensional drug functions f3a and f3b. the first function is defined as

  f3a=x12⋅sin2⋅cos <dig>  

where each of x <dig>  x <dig>  x <dig> can take one of the  <dig> discrete concentrations that evenly divide the range . the second function is defined as follows

  f3b=peaks⋅x <dig>  

using the matlab peaks function. we assume that each drug can take one of the  <dig> discrete values that evenly divide . next, we defined two 4-dimensional drug functions

  f4a=x1⋅e- 

and

  f4b=cos2⋅sin⋅tan⋅x <dig>  

we assume that x <dig> and x <dig> in the first function f4a can take one of the  <dig> discrete values that evenly divide the range , while x <dig> and x <dig> can take one of the  <dig> discrete values that evenly divide the range . for the second drug response function f4b, we assume that each drug can take one of the  <dig> distinct values that evenly divide . in addition, we also defined the following 5-dimensional drug response functions

  f5a=e-x1⋅cos2⋅x32⋅e-2-2+e-2- <dig> 

and

  f5b=12peaks⋅cos⋅sin⋅x <dig>  

for the first function f5a, x <dig> and x <dig> are allowed to take any value from the set of values obtained by evenly dividing the range  into  <dig> discrete concentrations. the remaining drug concentrations  can take any of the  <dig> concentrations that evenly divide . for the second drug response function f5b, we assume that each drug can take one of the  <dig> discrete values that evenly divide . finally, we also defined two 6-dimensional drug response functions

  f6a=e- <dig> ⋅sin2+cos⋅e- <dig> ⋅x <dig> 

and

  f6b=e- <dig> - <dig> ⋅cos2⋅sin, 

where every drug concentration can take its value from one of the  <dig> discrete concentrations that evenly divide the range .

RESULTS
optimizing the combination of two drugs
we first evaluated the overall performance of the aru stochastic search algorithm based on four two-dimensional drug response functions .  hiv inhibitor response f2a,  second de jong function  f2b,  normalized lung cancer inhibition response f2c, and  bacterial  inhibition response f2d. these functions are shown in figure  <dig>  for each drug response function, we searched for the optimal drug response using the proposed algorithm, starting from randomly selected drug concentrations x <dig> and x <dig>  the parameter α that controls the randomness of the search was set to α =  <dig>  which implies that the algorithm adaptively determines the search direction  by fully utilizing the past observations. note that setting the parameter to α =  <dig> in  would make the search completely random and independent of the past observations: at each step, the concentration of a given drug will be randomly increased or decreased with equal probability, regardless of the update rules given in . in each search experiment, the iterations were repeated up to two times the total number of possible drug combinations. this experiment was repeated  <dig>  times to obtain reliable results. for comparison, we performed similar experiments using the gur game algorithm  <cit>  and the stochastic search algorithm proposed in  <cit>  with α =  <dig>  we computed the following two performance metrics: the success rate and the average number of unique drug combinations that need to be tested. the first metric is defined as the relative proportion of experiments, in which the algorithm was able to identify a potent drug combination whose response is within 5% of the maximum response, i.e., f ≥  <dig> . the second metric is defined as the average number of unique drug combinations that have to be tested until a potent drug combination is identified, in case the search is successful. these performance assessment results are summarized in table  <dig>  note that the gur game algorithm has been tested using both the simultaneous update strategy as well as the sequential update strategy. unlike the aru algorithm and the search algorithm proposed in  <cit> , which update one drug at a time , the original gur game algorithm adopted in  <cit>  updates all drugs simultaneously. however, it is also possible to use the sequential update strategy with the gur game algorithm, and we have evaluated both strategies for comparison. table  <dig> shows that the proposed aru algorithm outperforms the existing algorithms in terms of success rate. furthermore, when the success rates are comparable, the aru algorithm can in general identify an effective drug combination more efficiently, as reflected in the smaller number of unique drug combinations that need to be tested. we can get a more complete picture of the efficiency of the aru algorithm from figure s <dig> and figure s <dig>  which respectively show the distribution of the number of unique drug combinations that need to be tested and the distribution of the number of iterations that are needed to identify a potent drug combination .

optimizing multi-drug cocktails
next, we tested the performance of the aru algorithm for optimizing multi-drug cocktails that consist of three to six drugs. for this purpose, we used the eight hypothetical drug response functions that were defined before . as in our previous experiments, for each drug response function, we used the proposed aru algorithm  to search for a potent drug combination whose response is within 5% of the maximum response  ≥  <dig> ). in each search experiment, we started from an randomly selected initial concentrations, and continued the search up to  <dig>  steps for  <dig> drugs,  <dig>  steps for  <dig> drugs,  <dig>  steps for  <dig> drugs, and  <dig>  steps for  <dig> drugs. this experiment was repeated  <dig>  times to obtain reliable performance assessment results. the simulation results are summarized in table  <dig>  as shown in this table, the proposed algorithm boasts a significantly higher success rate compared to the gur game algorithm  <cit> . it also results in either comparable or slightly improved success rate compared to the previous drug optimization algorithm   <cit> . however, we can see that the aru algorithm clearly outperforms the previous search algorithm in terms of efficiency, as reflected in the significantly smaller number of unique drug combinations that need to be tested until an effective combination is identified. figures s <dig> and s <dig> show the distribution of the number of unique drug combinations that need to be tested to identify an effective drug cocktail . similarly, figures s <dig> and s <dig> show the distribution of the number of search iterations that are needed by each algorithm.

drug optimization in the presence of measurement noise
in order to use a drug optimization algorithm in practical applications, the algorithm has to be robust to random fluctuations in the estimated drug response. to evaluate the robustness of the proposed aru algorithm, we evaluated its search performance in the presence of measurement noise and compared it with other existing stochastic search algorithms. in these experiments, we considered two different types of search strategies. in the first search strategy , when the search algorithm happens to revisit a drug combination that was previously tested, it does not re-evaluate the drug response and simply uses the previously estimated value. on the other hand, according to the second strategy , the search algorithm always re-evaluates the drug response, even if it revisits a previously evaluated drug combination, since the measured response may be different every time due to the random measurement noise. the first strategy may be useful when the noise level is relatively low, in which case this strategy may be able to reduce the total number of drug response evaluations, thereby reducing the overall experimental cost for identifying a potent drug combination. however, when the noise level is high, the search performance may be degraded as the search algorithm clings to the past  response, once it has been measured. in contrast, the second search strategy generally requires a relatively larger number of drug response evaluations, but it tends to be more robust to random fluctuations and noise in the measured drug response function.

in order to evaluate the performance of the different search algorithms in the presence of noise, we performed similar search experiments as before at three different levels of additive noise. 2%, 5%, and 8%. more precisely, we assume that

 fobs=ftrue+η, 

where fobs is the observed drug response, ftrue is the true response, and η is an independent random noise that is uniformly distributed over , where u ∈ { <dig> ,  <dig> ,  <dig> }. for each drug response function and a given noise level u, we tested the performance of both search strategies. for type-a search, we evaluated the success rate and the average number of unique drug combinations that have to be tested until a potent drug combination is identified. for type-b search, we evaluated the success rate and the average number of iterations, instead of the number of unique drug combinations, until an effective combination is identified. this is because, in a type-b search, the search algorithm re-evaluates the drug response even if it revisits the same drug combination that was previously tested. the simulation results are shown in table  <dig>  for drug response functions with two to six drugs. the parameter α was set to α =  <dig> for the aru algorithm as well as the previous search algorithm proposed in  <cit> .

as we can see in these tables, measurement noise certainly affects the overall performance of the aru algorithm, where a higher noise tends to reduce the success rate and increase the number of iterations as well as that of the unique drug combinations to be tested. for many drug response functions considered in our simulations, the performance degradation is typically not too significant for the proposed algorithm, showing that the aru algorithm is relatively robust to measurement noise. however, we can also observe that the extent of performance degradation will critically depend on the landscape of the underlying drug response. in most cases, the aru algorithm continued to substantially outperform other stochastic search algorithms  <cit> , demonstrating that it is better suited for practical drug optimization applications.

one interesting observation is that the performance of the gur game algorithm is typically not very sensitive to measurement noise. in fact, in some cases, its performance even improves as the noise level goes up. the main reason for this phenomenon is as follows. as discussed earlier, the gur game algorithm does not adapt to the observed drug response function, and for this reason, its overall performance crucially depends on whether or not its predetermined fsa matches the drug response function at hand. as a result, if the fsa does not match the original drug response function well, ironically enough, the measurement noise may perturb the search process in such a way that improves the overall performance. in this sense, the fact that the gur game algorithm is not very sensitive to measurement noise reflects its inaptitude for handling various types of drug response functions, rather than its robustness to random fluctuations and noise in the measured drug response.

CONCLUSIONS
in this paper, we proposed a novel stochastic search algorithm, called the adaptive reference update  algorithm, which can be effectively used for optimizing the composition of combinatory drugs. the proposed algorithm intelligently utilizes the drug response values observed in the past to reliably predict how to beneficially update the drug concentrations to improve the drug response. as we demonstrated throughout this paper, the proposed algorithm addresses several shortcomings of previous drug optimization algorithms  <cit> , thereby improving the overall search performance. numerical experiments based on various types of multi-drug response functions show that the aru algorithm results in a higher success rate  while requiring significantly fewer drug response evaluations. furthermore, the proposed algorithm is robust to random measurement noise, where its search performance is not substantially affected in the presence of noise and degrades gracefully as the noise level increases. throughout our experiments, we used α =  <dig> for the aru algorithm as well as the previous search algorithm  <cit> . as discussed earlier, the parameter α controls the randomness of the search, by determining how much weight we should give to the drug response values that we observed in the past. in general, unless the observations are very noisy or the underlying drug response function is assumed to be extremely nonlinear, it would be best to set the parameter to the largest allowed value , so that we fully utilize the past observations for making our best informed guess about the beneficial drug update strategy. for comparison, we also repeated our simulations using α =  <dig>  and α =  <dig> , whose results are summarized in table s <dig> - table s <dig> . we can see from these results that α =  <dig> indeed leads to the best performance for the drug response functions and the noise levels we have considered in this paper.

competing interests
the authors declare that they have no competing interests.

authors' contributions
conceived and developed the algorithm: mk, bjy. performed the experiments: mk. analyzed the data and wrote the paper: mk, bjy.

supplementary material
additional file 1
performance of the aru algorithm. further performance evaluation results of the proposed adaptive reference update  algorithm.

click here for file

 acknowledgements
based on “efficient combinatorial drug optimization through stochastic search”, by mansuck kim and byung-jun yoon which appeared in genomic signal processing and statistics ,  <dig> ieee international workshop on. ©  <dig> ieee  <cit> .

this work was supported in part by the national science foundation, through nsf award ccf- <dig> 

this article has been published as part of bmc genomics volume  <dig> supplement  <dig>  2012: selected articles from the ieee international workshop on genomic signal processing and statistics   <dig>  the full contents of the supplement are available online at http://www.biomedcentral.com/bmcgenomics/supplements/13/s <dig> 
