BACKGROUND
a difficulty experienced by many  users of gene expression microarrays is making sense of the complex results. after analyzing each gene in a data set, an experimenter is often left to the task of summarizing the results with little assistance. it is common for experimenters to ask questions at the level of molecular pathways or other functionally relevant groupings of genes. while "ad hoc" manual annotation of data sets is a common approach, there are numerous advantages to using a computational and statistical approach to analyze groups of genes.

the most common means of performing this analysis is to ask whether certain gene ontology   <cit>  terms are "over-represented" in a set of genes selected by fold-change or statistically-motivated approaches such as a t-test. this is easily implemented by using the properties of the hypergeometric distribution  or its binomial approximation. in our work, these methods are more generically referred to as "over-representation analysis" or ora. in addition, as the go is just one way of organizing genes, we refer to the general goal of these methods as "gene set analysis", where a gene set is any grouping of genes not derived from the data itself, typically based on biologically-motivated criteria.

the need to perform ora has led to the emergence of a variety of tools. a list of many such tools is available from the gene ontology consortium  <cit> , and a large number of them were recently reviewed  <cit> . however, to our knowledge these tools all implement ora methods; other methods or algorithms are not available, with the exception of the perl script catmap  <cit> . thus these tools primarily differentiate themselves through user interface features, ease of use, supported data types, and speed  <cit> . most tools surveyed by  <cit>  were reported to have one or more significant limitations, including slow performance, an inability to analyze gene annotations other than those directly annotated , requiring web access to use, are difficult to install , or lack the ability to visualize the go hierarchy  <cit> .

in this paper we describe erminej, a stand-alone tool that implements methods described by  <cit>  and  <cit>  in addition to ora, has a rich feature set, and does not have the limitations cited above. one of the offered analysis methods in particular is complementary to ora analysis, which we now call gene set resampling or gsr ). in gsr, the gene-by-gene scores  are not thresholded. instead, for each gene set an aggregate score is computed, such as the geometric mean of the p-values for genes in the category, and the significance of that score determined by random sampling of the data. we have recently presented some evidence that gsr can provide better results than ora in some situations  <cit> .

erminej also has methods for analysis of genes based on rankings   <cit> . roc can be thought of as a version of ora where all possible thresholds are considered simultaneously. like gsr, the roc method utilizes non-thresholded gene scores, but considers only their ranking, which might be considered more robust than using the raw gene scores. finally, erminej offers an analysis based on the correlation of gene expression profiles, gene group correlation analysis   <cit> . gca can be used as an alternative to the use of ora for the determination of whether genes in particular functional categories are "clustering together".

the first version of erminej was made available in  <dig>  recently we have completely revamped the user interface and updated the feature set, releasing erminej  <dig>  in october  <dig> and  <dig>  in june  <dig> 

implementation
erminej is implemented entirely in the java programming language  <cit> . it uses the java swing libraries to create a graphical user interface that can run on many different platforms. architecturally, an effort has been made to separate analytical and algorithmic concerns from user presentation concerns. besides being a design best practice, the architecture was also driven by the need to support command-line interfaces as well as application programming interfaces to the methods. the structure of erminej also lends itself to fairly easy extensibility, so new algorithms can be added to the software as requirements change. the analysis algorithms in erminej were previously described  <cit> .

in addition to using the java sdk, erminej depends on a number of free third-party libraries, most notably the colt library  <cit> . colt is a high-performance numerical computing library that includes implementations of many linear algebra and statistical methods, as well as useful data structures which we rely on heavily in our software. other libraries erminej uses include various jakarta commons libraries  <cit> , and the xerces xml parsing engine  <cit> , which we use to parse the gene ontology xml description. many of the low-level numerical and utility routines  are tested in an extensive unit test suite.

RESULTS
inputs
all interfaces to erminej use the same basic inputs. the first is a description of the gene ontology in xml format, obtained from the go consortium web site  <cit> . the second is a description of the microarray platform , which associates probe identifiers with gene ontology terms and additionally associates each probe with a gene  and descriptions that are useful for viewing in the context of the results. the third required input is the user's own data. for ora, gsr and roc applications, this takes the form of a list of gene scores, one for every probe set on the array design. alternatively , the input can be the expression profile matrix, as might be used as an input to a clustering tool. the gene scores can be p-values or another score such as fold-change. erminej is purposefully largely agnostic about the meaning of the gene scores, and focused on the distributional properties of the scores.

we maintain on the order of  <dig> different mouse, human and rat array annotation files for different platforms, as well as generic files for refseq  <cit>  genes that can be used to construct annotation files for other platforms . the native annotation file format is very simple and new files can easily be constructed with a modicum of bioinformatics skill. erminej can also read affymetrix "csv"  annotation files available from the manufacturer's web site. we gladly entertain requests to add support for other arrays. when an annotation file is read in, the software automatically associates each probe with all parent terms of each directly annotated terms. for example, all genes annotated with the term "regulation of cell size" are also associated with the higher-level terms "cellular morphogenesis" and "morphogenesis". this feature is only supported by some of the tools reviewed by  <cit> .

there are a number of parameters to set and decisions the user must make in order to run the software. the choice of analysis method is the most obvious, and each method has a few other settings that the user can choose to change. for example, for ora analysis a threshold score must be defined. this is in contrast to most ora software packages which take as input a list of "genes of interest"; instead, erminej takes as input all the gene scores for the experiment. this lets erminej avoid the problem of selecting the correct "null" gene set  <cit> : it is defined strictly by the genes analyzed in the experiment but not meeting the user-defined score threshold.

for gsr, the method used to compute the score for a gene set is a key parameter. the two options currently supported are the mean and the median. during the analysis, gsr uses the selected method to compute a summary of the gene scores for each resampled or real gene set, and this aggregate score is used to represent the gene set. choosing the median will tend to yield slightly more conservative results, as individual genes with very high scores are not given as much weight as in the mean computation.

some settings are used for multiple methods. for example, when a gene is represented more than once in the data set, a decision has to be made as to how to treat these "replicates" . the options supported are to use the "best" score among the replicates to represent them as a group; to use the mean; or to treat them as separate entities. use of the "best" option is somewhat anti-conservative, but is reasonable when most "replicates" are in fact assaying different biological entities. in contrast, treating replicates completely separately is not generally advised as it can lead to spurious positive findings in cases of true replicates, as the gene set gets "adulterated" with multiple copies of the same high-scoring gene. for this reason the last option is not available from the gui, though it can be accessed from the other interfaces. another important setting is the range of gene set sizes to analyze. gene sets that are very small are unlikely to be very informative, because the goal of the analysis is to study genes in groups, while large gene sets may be too non-specific to provide useful information. in addition, analyzing too many gene sets reduces the power of the analysis due to multiple testing costs. in practice we often use a range of 5– <dig> or 5– <dig> 

in addition to the pre-defined gene sets as defined by the gene ontology, users are free to input their own gene sets. these are defined in simple text files that are placed in a directory that erminej checks at startup. these text files can be created "off-line" or within the erminej gui. in addition, users can modify gene sets from within erminej. this functionality can be used to correct errors or omissions in the gene ontology annotations, though care must be exercised to avoid introducing biases into the results.

types of analysis
gene-score based methods
the ora, gsr and roc methods are closely related in that they are based on the gene-by-gene scores, with the goal of finding gene sets that are some sense "enriched" in high-scoring genes . ora is sometimes used to analyze genes which are selected by clustering, rather than a continuous score. in this situation, gsr and roc are not appropriate. however, the correlation method is specifically designed to address this situation. gsr and roc have the benefit of not requiring a threshold to divide genes into "selected" and "non-selected" genes. the choice of the threshold for ora can have a substantial effect on the results obtained, because the "selected genes" change  <cit> .

correlation analysis
gene group correlation analysis  is based on the similarity of the expression profiles of genes in a gene set: loosely speaking, how well they "cluster together". thus we propose that gca can be used as an alternative to using ora to analyze clusters. there are some differences to be noted between the typical application of ora to clusters and the erminej correlation analysis. gca is group-centric, not cluster-centric. thus we ask whether the correlation among the members is higher than expected by chance, not whether a given set of correlated genes is enriched for the genes in the group; gca does not involve clustering. this is not a trivial distinction, because while the highest scores will be obtained for gene groups that have uniform and high correlations among all the members, groups that have two or more "sub-clusters" can also obtain high scores. in the current implementation of gca, the absolute value of the correlation is always used, which allows. in future versions we may expose this as a user-settable option, as well as implementing other possible correlation metrics other than the current pearson correlation.

in all methods, for each gene set analyzed, erminej computes a score and, based on that score and the gene sets size, a p-value representing the "significance" of that gene set with respect to the null hypothesis. the definition of the raw score and the null hypothesis depends on the method being used. note that the raw scores are of limited use because it cannot be evaluated in the absence of information about the gene set size. however, they can provide the user with a helpful indication the strength of the result, not just its statistical significance.

for ora, the null hypothesis is that the genes in the gene set are distributed randomly between the "selected" genes and the "non-selected" genes. the raw score reported by erminej is the number of genes in the set which pass the threshold for gene selection. for gsr, the null hypothesis is that the mean  gene score  is drawn from the global  distribution of possible gene set mean  gene scores, as determined by resampling  <cit> . for roc analysis, the null hypothesis is that the genes in the gene set are distributed randomly in the ranking; p-values are computed using the fact that the roc is equivalent to the wilcoxon rank-sum test  <cit> . the raw gene set score is simply the area under the receiver operator characteristic curve  <cit> , which ranges from values of  <dig>   to  <dig>  . finally, for correlation analysis, the null hypothesis is that the mean pairwise correlation of profiles in the gene set is drawn from the global distribution of gene set correlation scores, as determined by resampling  <cit> . the raw score is the mean absolute value of the pair-wise correlation of the genes in the set .

erminej includes implementations of three multiple test correction methods   <cit> , is made available through the gui). the additional options, available from the command line, are bonferroni correction and a resampling-based family-wise error rate correction  <cit> . the fdr is used in the gui as a rapid and reasonable guide to which gene sets are likely to be of highest interest.

the erminej gui
most users of erminej will access it through its graphical interface. the gui of erminej was designed to be simple to use and provides "wizards" to guide users through common tasks such as running an analysis. many settings made by the user during operation of the software are remembered between sessions, facilitating repeated analysis of the same data files and maintaining the user's preferred window sizes, for example. a complete manual is provided and is accessible via an on-line help function, as web pages on our web site, or in portable document format .

some aspects of the erminej graphical user interface is illustrated in figures  <dig>   <dig>   <dig>  the main panel of the software can be viewed either as a table of gene sets  or in a hierarchical  view . these views are linked so changes in one are reflected in the other. to facilitate navigation of these displayed, gene sets can be searched by the name of the gene set or by the names of genes they contain. user-defined gene sets are displayed in contrasting colors. not shown in the figures is the initial startup screen in which the user chooses the gene annotation file to use for the session.

double-clicking on a gene set in the main panel opens a new window that displays the genes in the gene set, along with the expression profiles in a "heat-map" view . the appearance of the heat map is configurable through menus and toolbar controls. the data displayed in the table, as well as the image of the matrix, can be saved to disk using additional menu options. the hyperlinks to external web sites can be configured by the user to point to a web site of their choosing, again through a menu option. all of these capabilities are available even if the user has not performed any analysis, so erminej can be used as a "gene set browser" as well as for analysis.

an important feature of the gui is the capability to rapidly define and edit gene sets, which is accomplished in a "wizard" that takes the user through the process set-by-step. alternatively, the user can simply populate the gene set directory with files they have obtained from other sources, for example created in bulk with a python script or obtained from another user. as far as we know, no tool surveyed by  <cit>  affords the user the ability to define or modify the categories. erminej also allows the user to choose which of the go aspects  to use in the analysis.

the gui version of erminej can be installed on the user's computer or run via java webstart. the latter option simply involves clicking on a link in the user's web browser, and ensures that the users have the most up-to-date version of the software. the drawback of using webstart is that the user must be connected to the internet to use the software. with a local installation, no internet connection is needed.

running an analysis
running an analysis using the erminej gui involves using a "wizard" to set the parameters . the user is asked to choose an analysis method, select the data file to analyze, choose any user-defined gene sets to include in the analysis, and set the various parameters required for the particular analysis. all settings are documented via "tool tips" and in the manual.

once an analysis is initiated, the user is informed of its progress via a status bar. an analysis can be cancelled any time. on completion, the results are added to the tabular and tree views . multiple results can be displayed simultaneously in the tabular view, allowing easy comparison of different runs. the tree view can display only a single analysis result set at a time, but offers a pull-down menu to selected among the results sets to display. in the tree and tabular views, high-scoring  gene sets are highlighted in color. the tree view uses a simple system of icons for each node to indicate whether a significant node is contained within a given higher level node. finally, the results of an analysis can be saved to a tab-delimited file for use in other software or to be reloaded by erminej at a later time.

other interfaces
in addition to the gui, erminej offers a command line interface  and a simple application programming interface . the cli exposes some features of erminej that are not available in the gui, such as different methods for multiple test correction. the cli is suitable for scripting runs of erminej. for example, a simple perl script can be used to automate runs of erminej with different settings or on different data sets. in contrast, the api was introduced to allow programmers to include the analyses available in erminej in their own software. the api currently provides more limited access to the functionality of the software than the command line version, but will be expanded in future versions.

performance
we tested the performance of erminej using the hg-u133_plus_ <dig> affymetrix array design. this is a particularly large array design with over  <dig>  probe sets, and represents a something of a worst-case scenario with respect to performance. with our current annotation set,  <dig> different go categories  are available for analysis in this array design. we limited our analysis to gene sets with between  <dig> and  <dig> genes, leaving about  <dig> gene sets. the times reported below are for analyzing the complete set of over  <dig>  probe sets with respect to these  <dig> gene sets on a on a  <dig>  ghz pentium laptop.

with this array, erminej has an initial startup phase that lasts 15– <dig> seconds, most of which is consumed by time it takes for the gene annotation file to be read in and processed for analysis. the time for analysis once startup is completed depends on the method used. for ora, a complete analysis is completed in  <dig> seconds . while it is difficult to directly compare our benchmarks with previously published benchmarks because the number of gene sets analyzed and the size of the "null" gene set was not reported, and the times reported might in some cases include initial startup times  <cit> , the fastest reported methods on the largest data sets tested completed ora analyses in under  <dig> seconds. this indicates that erminej is at least competitive with and possibly faster than the fastest previously reported tools.

gsr analysis took about  <dig> seconds if a full resampling is performed . however, erminej implements an approximation, where limited resampling is used to estimate the parameters of a normal distribution. this normal is used to compute the p-values for each gene set. it also takes advantage that, especially for larger class sizes, the shape of the resampled distribution is very similar for similar class sizes, so not all of them need to be computed. in this mode the analysis takes approximately  <dig> seconds. roc analysis, which does not involve resampling, took about  <dig> seconds. correlation analysis is the most computationally intensive resampling method; even with the approximations enabled it currently takes about  <dig> seconds to run on the test data set . this is because computing correlations is computationally intensive, compared to the methods which use pre-computed gene scores such as p-values.

erminej is fairly memory-intensive, because it holds in memory a complex data structure describing the annotations, as well as the microarray data and information about the results for thousands of gene sets and tens of thousands of genes. for the large hg-u133_plus_ <dig> design, after startup erminej occupies approximately  <dig> mb of ram . after running the correlation analysis, this grew to  <dig> mb, reflecting the loading of the complete expression profile set and the results. therefore we recommend running erminej on machines that have at least  <dig> mb of ram.

future plans
at this writing, the current version of erminej is  <dig> . <dig>  new features planned for the software include expanding the api and allowing more flexible creation of user-defined gene sets, including allowing support of alternative nomenclatures such as the plant ontology  <cit> . we also plan to provide annotation files for more platforms and organisms.

we have been interested in the possibility of including other resampling-based methods such as gsea  <cit>  or the similar resampling method implemented in catmap  <cit>  in erminej. the primary reason to consider these methods is that they examine the distribution of gene scores by resampling over the samples, which is more correct than merely resampling over the genes. this is because the null hypotheses in the gene score analysis are some variation on a random distribution of genes within the ranking of genes. this assumption can be badly violated for gene sets containing highly correlated genes ; such genes will tend to have correlated rankings, and in some situations , spurious false positives can occur  <cit> . the ora, gsr and roc methods are all susceptible to this problem, though we stress that this is only an serious issue for gene sets that show high correlations not related to the experimental design.

it would be challenging to provide a general-purpose implementation of gsea or catmap that is easily accessible to biologists with limited computational skills. these methods require either that users can provide the gene scores for hundreds  of resampled data sets  <cit> , a task that is difficult to accomplish for the targeted user base of erminej, or computation of gene scores by the software. because each experimental design might have a different mechanism for computing gene scores , it would be difficult to provide a fully flexible tool without including a full-fledged statistical analysis package as well. a feasible solution we are considering is to cover the most frequently-encountered situations .

CONCLUSIONS
erminej is a fast, full-featured, user-friendly, multi-platform open source application for analysis of gene sets. it implements multiple algorithms for performing the analysis, and permits easy modification and creation of new gene sets. these features afford users considerable flexibility in testing different methods and parameters. perhaps the greatest current limitation to its usability at this date is the availability of gene annotation files for non-affymetrix array designs we have not encountered frequently. users who wish to develop annotation files for their platform should contact us for assistance.

availability and requirements
• project name: erminej

• project home page: 

• operating system: platform independent

• programming language: java

• other requirements: java  <dig>  or higher;  <dig> mb ram recommended.

• license: gnu gpl and lpgl for helper library.

• any restrictions to use by non-academics: none

list of abbreviations
ora: over-representation analysis

gsr: gene score resampling

roc: receiver operator characteristic

gca: gene group correlation analysis

gsea: gene set enrichment analysis

fdr: false discovery rate

go: gene ontology

gui: graphical user interface

api: application programming interface

cli: command line interface

authors' contributions
pp was the project lead and chief architect of the software, and contributed to the source code. hkl, wb and kk all contributed to the source code.

