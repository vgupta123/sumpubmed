BACKGROUND
although all cells of an organism contain the same dna, each cell only transcribes and translates a fraction of that dna. each cell has a particular interaction pattern that involves genes, proteins and molecules; these complex schema are known as gene regulatory networks. full understanding of gene interactions can be used to identify methods to control the behaviour of genes directly involved in disease processes. methods used to infer patterns of interaction among molecular components from observed data are called reverse engineering algorithms. even if gene-gene interactions only partially describe real networks because of post-transcriptional modifications and protein regulation, using microarray technology it is possible to combine measurements for thousands of genes into a single analysis step that provides a picture of cell gene expression. therefore, many reverse engineering algorithms rely on gene expression data  <cit> . these methods differ in the type of expression profiles used, so there are algorithms for time-series data  <cit> , algorithms for steady-state data  <cit>  and algorithms that work on both types of data  <cit> . a graphical representation of the gene regulatory network is often used, with bayesian networks probably the most popular graphical models used in this scenario  <cit> . the major limitation of bayesian networks is that they cannot represent cyclic structures. to overcome this limitation, methods based on dynamic bayesian networks have been proposed  <cit> .

however, the network topology alone is not enough to perform simulations and predictions of how a molecular system will respond to perturbations. the rules for interactions among the single parts are needed for a complete definition of the network behaviour. another interesting question is how to integrate the information carried by the network topology, which can be derived from the literature, with large-scale experimental data. much attention has recently been focused on the modelling  <cit>  and inference  <cit>  of activation rules between molecular components in the cell. although this can be considered a simpler problem than inference of the network topology, it is important to point out the following:

• many interaction patterns between molecular components can be obtained from the literature  and integrated in the inference algorithm.

• owing to the limited amount of experimental data, it can be convenient to solve a simplified problem and exploit as much as possible prior knowledge about the phenomenon being investigated.

• modelling of the interaction pattern between molecular components can be useful when performing large-scale simulations and deriving hypotheses about the behaviour of biological systems under different conditions  <cit> .

in the present study we follow this research direction. however, instead of considering continuous expression levels, as in  <cit> , we use a discrete representation of gene activation. indeed, methods based on graphical models often work on discrete data obtained from real-valued gene expression profiles. the discretisation step is of fundamental importance for good accuracy of subsequent computational steps. Ślęzak and wróblewski proposed a discretisation approach based on rough set theory in which quality functions are used for roughly discretised data, with inexact dependence between attribute rankings  <cit> . friedman et al. considered two different approaches to discretise real-valued data  <cit> . in the first approach they discretised expression levels to several discrete states according to a fixed discretisation rule and demonstrated that this approach is sensitive to the discretisation procedure. in the second method they combined a linear regression model with the model dependence and measurements, but this approach was strongly affected by the linear dependence. pe'er et al. proposed a new discretisation procedure for each gene in which gene-specific variation is used to estimate the normal distribution mixture by standard k-means clustering  <cit> . a probabilistic approach is used to identify interactions between genes, such as activation and inhibition, so this method provides a description of the gene network with the interaction features, but many of these interactions are undirected. moreover, the discretisation step is sensitive to the choice of the number of states that a gene may attain. in this paper we propose a new discretisation approach that depends on the expression profile data  for each gene, so that different genes with different expression profiles lead to different discretisation rules. indeed, we also use this approach to reduce the effect of noise.

after discretisation, the problem faced is how to infer the rules, and not just the pattern, by which the various molecular components interact with each other. we call this problem the inference of regulatory relations given a well-specified gene regulatory network. gat-viks et al. proposed an approach to learn improved regulatory functions from high-throughput data using a discrepancy score in which discretisation is carried out as a preprocessing step  <cit> , but the discretisation rules must be determined and tuned rather arbitrarily and each variable is discretised using the same rule. gat-viks et al. also proposed a more flexible approach to learn the regulatory functions in a gene network  <cit> , which is represented as a factor graph  <cit>  to model cyclic structures. in this approach discretisation is carried out according to an expectation maximisation  algorithm that, combined with the factor graph model, provides a very flexible discretisation scheme. however, in practice this flexibility can lead to over fitting and may decrease learnability, so the authors suggested to use the same or a few discretisation schemes for all the variables. chuang et al. proposed an approach to infer gene relations from time-course expression profiles in which first and second derivatives are used to detect time-lagged correlated gene pairs  <cit> . the basic assumption is that pairs of correlated genes exhibit either a complementary pattern  or a similar pattern . in our approach we propose a simple regulatory function inference that is particularly fast and yields rather good accuracy, even if the network is cyclic. in this step we use an observation similar to that of chuang et al.  <cit>  for expression profile patterns, but here we use discrete data. finally, we merge the inferred regulatory functions into a factor graph representation as reported by gat-viks et al.  <cit> .

implementation
biological model
we first define a simple model for biological networks  <cit> . a biological network can be modelled through a direct graph g, where each node v ∈ v represents a gene that can be in a discrete state d = { <dig> }, representing an inactive and an active state, respectively. if a gene v ∈ v has at least one parent then it is called a regulated gene and we define as rv the set of parents  of v. if a gene v ∈ v has no parents, then it is a stimulator and we define as vs the set all stimulators of the network. in addition, we represent the expression data using an n × m matrix m, where n is the number of genes in the network and m is the number of experiments performed or samples. for each  <dig> ≤ i ≤ n and  <dig> ≤ j ≤ m the value of m  is the expression level of gene i in sample j.

iris algorithm
in this section we describe our approach to infer the regulatory relations in gene networks from high-throughput data. iris needs an input network topology n, an expression profile data matrix m. the method consists of two main steps:  dicretisation and  regulation functions learning. the details are reported in the following subsections.

discretisation
this steps is aimed at computing a binary matrix from the observed gene activation levels. the discretisation step uses a matrix of local variation of the gene expression, defined as  = ms - ms, j =  <dig> ..., m, let s be the matrix of discrete states, i.e. s  contains the discrete state relative to the value ms . the discretisation procedure is iterative. it first tries to fix the lower values to zero and the upper values to one on the basis of two thresholds  and , they are computed in order that the interval , for each row i, contains a given percentage, α, of the second and third quartiles of the data. the other values are then fixed on the basis of their nearby values.

we extensively tested various values of α for various datasets, and the results showed that it can be arbitrarily chosen in the range 5%-35% without significantly affecting the results. in all the experiments reported below we choose α as the minimum of this range.

we compute the first discretisation step using the rule:   

with  <dig> ≤ j ≤ m. and for j =  <dig> we use:   

with  <dig> ≤ j <m -  <dig> and where  is the median value for the expression of gene i. to apply these rules we use an iterative approach that runs until either all values are assigned to a valid active/inactive state or no recovery action is performed in the last iteration. figure  <dig> shows an example of recovery computation.

regulation functions learning
in this step we use the matrix s to compute the pts and tts. to infer the pts we use relative frequencies. consider a gene v and the set of its regulators rv. then the matrix s contains several state assignments for the genes in rv and v itself. let Γv be the set of all possible state assignments of the variables in rv.

then we have:   

where |{rv, v = s}| are the occurrence numbers of state assignment {rv ∪ v = s} in s. let

pt be the conditional probability that gene v is in state s given the state assignment rv ∈ Γv. then we compute the conditional probabilities for v as follows:   

using  we compute the tt for each gene as:   

∀ rv ∈ Γv and where tt represents the state response of regulated gene v to the state assignment rv of its regulators. note that if  

we cannot distinguish between the active and inactive state, so we have an undefined response of regulated gene v to the state assignment {rv}. this situation is indicated as - <dig> in the tts.

integration with factor graph
a factor graph is a class of probabilistic models that were originally applied to coding/decoding problems. using a factor graph we can model complex domain knowledge in which feedback loops play a fundamental role. one of the important advantages of factor graphs is their combination with the sum-product algorithm  <cit> , which is a message-passing algorithm for efficiently computing marginal distributions, even in the presence of cycles.

in our approach the factor graph model is used to combine structural information  with the inferred regulatory functions. a factor graph contains two types of nodes: factor and variable nodes. we have a variable node for each gene and a factor node linking two variable nodes if and only if a relationship between these two nodes exists. consider the gene regulatory network depicted in figure  <dig> containing four genes: a and b are regulators of c, c is a regulator of d, and d is regulator of b. note that gene a is a stimulator of the network. since there are three regulated genes, we have three pts representing p, p and p. to translate this gene network into an equivalent factor graph network, we perform the following steps:

• each gene node becomes a variable node of the factor graph;

• for each regulatory function a factor node must be inserted to link the genes involved;

• each stimulator must be linked to a specific factor node.

applying these rules, we obtain the factor graph in figure  <dig>  this model can answer questions such as: "what is the probability that gene c is active given that genes a and b are inactive?" and "what is the likelihood that genes b and a are inactive given that gene c is active?". for this purpose, we set the state of the observed genes and use the sum-product algorithm to compute the posterior distribution of hidden genes. here we follow the propagation of belief in directed graphs for forney-style factor graphs  <cit> . if a stimulator is not fixed, then its factor node will be set with a uniform distribution.

some considerations about the presence of cycles are useful, indeed this is one of the most important problems in the field of probabilistic graphical models . the inference in pgm consists in the computation of marginal probabilities of complex probability distributions defined over many variables. many exact and approximate algorithms have been proposed for this task  <cit>  from monte carlo methods to variational methods, mean field methods and belief propagation . the sum-product algorithm, adopted in this paper, is a special case of belief propagation. it is well-known that belief propagation yields exact results if the graphical model does not contain cycles. if the graphical model contains loops, the sum-product algorithm can still yield accurate results using little computational effort  <cit> . however, if the influence of loops is large, the approximate marginals calculated by bp can have large errors and the quality of the bp results may not be satisfactory. many recent research efforts in statistical machine learning are devoted to the development of efficient approximate inference algorithms for cyclic graphical models . for the purposes of this paper we could have to deal with cycles in the case of inference, when we use pts, and computation of steady states, when using tts. we adopt the belief propagation algorithm for the former and the algorithm of gat-viks et al.  <cit>  for the latter. in any case the iris method, proposed here, is by no way influenced by the presence of cycles. in particular iris takes as input the description of the network and the expression profiles giving in output a map of the regulatory relations between sets of regulators and regulated genes, this means that all the information used by iris are based on "local" relationships between a gene and the set of its regulators. the influence of cycles appears in the successive phases for the use of these relationships in inference tasks. however, the inference in cyclic pgms is still a very important research question in the field of statistical machine learning and its solution is, of course, outside the scopes of this paper.

RESULTS
in this section we report iris results for both synthetic networks and microarray expression profiles. iris needs a well-defined gene network as input. we say that a gene network is well defined if each of its interactions allows us to distinguish between regulator genes and regulated genes. given a well-defined network, we have genes with zero regulators , genes with one regulator, genes with two regulators, and so on. if a gene has at least one regulator then it has a regulatory function that describes its response to a particular stimulus by its regulator. in our approach we suppose, without loss of generality, that a gene can be in one of two states: inactive and active, represented as  <dig> and  <dig>  respectively. this assumption is commonly used in the literature to distinguish the response of a gene to a given experimental condition.

given a well-defined gene regulatory network, iris computes the regulatory functions, providing two different descriptions: a description in which each interaction is described as a conditional probability table, which we refer to as a potential table , and a description where each regulatory relation is a truth table, which, by analogy to neural logic networks, we refer as a truth table . these two different descriptions allow different analyses. using the pts we can execute an inference step to compute the a posteriori probability of hidden genes given observed genes, so that, for example, it is possible to understand how to control a gene using particular environmental conditions. using the tts we can compute the steady states of a gene regulatory network. in this scenario, we deal with the problem of the cyclic structure of gene networks, so we use an approach based on the factor graph model  <cit>  as an inference engine and the idea of feedback sets  <cit>  to compute the steady states of the networks.

results for synthetic networks
the synthetic networks used to test iris were generated using syntren  <cit> , it creates synthetic transcriptional regulatory networks and produces simulated gene expression data that approximate experimental data. network topologies are generated by selecting sub-networks from previously described regulatory networks. several parameters can be used to adjust the complexity of the data set generated. all gene expression values are normalized between  <dig>  and  <dig> . in addition, the data generated can be altered by a specified level of biological and experimental noise. using syntren, we generated two synthetic networks representing a sub-pathway of the e. coli regulatory-network  and a sub-pathway of the s. cerevisiae regulatory network . for both synthetic networks we generated a data set  <dig> samples for each biological noise level in the set { <dig> , <dig> , <dig> , <dig> , <dig> , <dig> , <dig> ,  <dig> , <dig> }, using experimental noise levels of  <dig>  and  <dig>  for e. coli and s. cerevisiae, respectively.

most of the rules governing the activation of genes in these networks have already been investigated in several studies. in particular, for the e. coli network we use conclusions from references  <cit>  to obtain the regulatory relations for glcd, foca and lacz. for s. cerevisiae we use the results of wilcox et al.  <cit>  to obtain the regulatory relation for fit <dig>  since all the regulators of a <dig> have an inhibitory function, the gene will be in an active state if and only if both regulators are inactive. for more details on true descriptions, see additional file 1: regulation_true_descriptions.pdf.

using iris we inferred the regulatory functions for both synthetic gene networks. to evaluate the accuracy of the pts computed by iris, we used the kullback-leibler divergence   <cit> , which is a measure of the difference between two probability distributions p and q, with dkl =  <dig> if and only if p = q. figure  <dig> shows mean dkl values as a function of the noise level . the results in terms of correct tt entries inferred by the algorithm are reported in table  <dig> for a maximum biological  <dig> . the size of each regulation table, which depends on the number of regulator genes, is also reported. if |ri| is the number of regulators of the ith gene, then the regulation tt will have a size of , assuming that a gene can be in two states. the results show that all but one activation rule were correctly inferred by iris.

truth tables  were computed using the data set with the maximum biological noise level . "tt size" reports the number of possible state assignments for the regulator genes. note that the value for the i-th regulated gene is , where |ri| is the number of regulators and each gene can be in two states. we distinguish the number of correct/incorrect/undefined inferred states for each regulatory relation and compute these as percentages of the total number of states.

both networks generated by syntren have an acyclic structure, so we can use the em-map algorithm  <cit>  to compare the performance of iris. we used an em-map algorithm implementation of the bayes net toolbox   <cit>  to validate the iris discretisation scheme. figure  <dig> shows results for different discretisation methods such as equal frequency , global width  and equal width . for these methods we used discretisation into two bins. the em-map results for iris discretisation are reported in figure  <dig> . the mean values over all levels of biological noise are:

 <dig>  dkl  =  <dig>  and dkl  =  <dig>  for e. coll

 <dig>  dkl  =  <dig>  and dkl  =  <dig>  for s. cerevisiae.

each value was obtained as the mean for  <dig> runs. for em-map we also report the number of iterations to reach convergence.

since the iris discretisation scheme can be influenced by the order of the values for expression of each gene in the data set, it is interesting to investigate how the performance changes on randomly changing the order of the data. this is useful for a steady-state data set, for which the order of the expression profile has no biological meaning. actually the difference between the expression levels at successive points of the profile has been often used to characterise the behaviour of a gene in different conditions, with particular reference to time course experiments , as it can be used as an indicator of increase/decrease of expression profiles correlated in time. iris makes use of this difference in the discretisation procedure to fix the values which are not significantly low or high with respect to the mean expression level in the profile. actually we found useful to compare differences in the expression levels over different conditions even for non time course data. the intuitive reason for the use of the information carried by the difference of expression levels is based of the fact that in this way we can observe if two or more genes have a common or an opposite pattern, which are indicator of activation and inhibition respectively. for example, suppose that we have a network where the gene a is a regulator of another gene b and let e <dig> and e <dig> be two different experimental conditions of a steady state dataset. suppose also that a <dig>  and a <dig> are the expression levels of a under e <dig> and e <dig> respectively. now we can distinguish two different situations:

a) a <dig> <a <dig> and b <dig> <b <dig> : here we can state that in the experiment e <dig> both genes have an expression level greater  then in e <dig>  in other words, the two genes have a similar behaviour.

b) a <dig> >a <dig> and b <dig> <b <dig> : here we can state that in e <dig> the gene a has an expression level greater  then in e <dig>  whereas, the gene b has an expression level in e <dig> lower  than in e <dig>  in other words, the two genes have an opposite behaviour which can be observed form an opposite sign of the expression derivative for the genes in the experimental condition e <dig> 

if two genes show the behaviour of the case a) than we can suppose that these two genes have a relationship of activation, whereas, in the second case they have a relationship of inhibition. the fact that for steady state data we have uncorrelated values, suggests to choose any set of points to extract second order information. in order to maintain, a coherence with the case of time course data, without loss of generality, we use the previous point in the expression profile matrix. in order to demonstrate that the choice of the previous point does not significantly affect the results, we evaluated the results in terms of kullback-leibler divergence with the known solution on a steady state dataset performing random permutations on the expression profile of each gene. these results reported in figure  <dig> show that for different permutations the kullback-leibler divergence is nearly constant, in other words, the choice of the previous point has the same impact on the results that could have the choice of any other point for the computation of the difference. finally, the use of multiple points instead of just the previous one did not produce significant improvements, at the expenses of an increased computational time.

results for microarray expression profiles
we also applied the iris algorithm to two real data sets comprising microarray expression profiles for the yeast mitotic cell cycle and human b-cells.

yeast mitotic cell cycle
this table follows the same schema as for table  <dig> 

to infer the conditional probability reported in the "inference results" column, the sum-product algorithm was used, and the state of the "observed genes" is fixed to derive the potential behaviour of "hidden genes".

finally, the inferred tts can be used to compute the steady states of the network using an appropriate algorithm  <cit> . in this case three steady states are identified . among them the first and the third one have been described in literature  <cit> .

human b-cells
recent studies have demonstrated that the organisation of a gene regulatory network often follows a scale-free nature  <cit> . a scale-free network is characterised by an inverse relationship between the number of nodes and their connectivity. another feature of gene networks is the presence of highly connected genes . these networks typically contain short feedback loops. to test the suitability of iris for scale-free gene regulatory networks, we inferred the regulatory relations from human b-cell data, for which we considered the myc gene as a major hub. myc codes for a protein that binds to the dna sequence of other genes. when myc is mutated or over expressed, the protein does not bind correctly and often causes cancer. both the gene expression profiles and network topology were extracted from the results of basso et al.  <cit> . the network topology represents the myc gene and  <dig> genes directly connected to it. to infer the regulatory rules of this network, we used a subset of  <dig> expression profiles . here we use the myc target gene database   <cit> .

because myc-subnetwork has an acyclic structure  we can use em-map algorithm to infer the pts for this network. in order to evaluated the method in terms of scalability, figure  <dig> reports the kullback-leibler divergences obtained by iris  and em-map  for different values of m/n . as can be seen from the figure, as the ratio m/n increases the accuracy gets better. this is also evident from figure  <dig> where the percentage of correct , undefined  and incorrect  evaluations of iris algorithm are reported.

note: not specified indicates a gene for which an entry exists in myc-db but for which no information on regulation is available; not present indicates a gene for which no entry in myc-db exists; undefined indicates a situation for which iris cannot distinguish between up- and down-regulation.

CONCLUSIONS
this paper described a method to infer regulatory relations in gene networks from expression data. the basic features of iris are a simple discretisation method to translate real-valued measurements into two discrete states  and a regulatory inference rule. to compare the proposed approach with other methods, we reported results for synthetic networks. the main conclusion is that the proposed method yields similar or slightly better results than other well-known approaches, but requires much less computational resources.

we also tested iris on two real data sets to infer interaction rules for the yeast mitotic cell cycle and the human myc sub-network. iris exhibited good accuracy for these networks compared to literature-derived rules. iris relies on knowledge of the network topology, which can be extracted from on-line databases  or can be obtained from network reverse engineering algorithms. in other words regulatory network parameter estimation and model selection are treated and performed as two different tasks. this approach could be useful in studying gene regulatory networks with hundreds of genes as a set of smaller sub-networks, as reported for myc expression profiles.

iris is useful for extracting the main rules within a gene network with a well-defined topology. this information can then be used in subsequent analysis steps, such as probabilistic inference or as a preliminary step for building models of complex biological systems  <cit> .

availability and requirements
• project name: inference of regulatory interaction schema 

• project home page: http://bioinformatics.biogem.it:8081/bioplone/downloadfolder/iris-download-page

• operating system: platform independent

• programming language: matlab

• other requirements: graphviz is required if the user wants to create a file containing the gene regulatory network topology

• license: gnu gpl

• any restrictions to use by non-academics: none

authors' contributions
sm performed all the experiments and wrote the code, pz helped in devising the experiments and analysing the results, and mc proposed the biological problem and devised the method. all authors contributed to the design of the whole work and to the writing of the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
this is a pdf file that lists the true descriptions of the regulatory functions of all the gene regulatory networks used in this paper.

click here for file

 acknowledgements
we thank the anonymous referees for their comments. pz was supported by a scholarship of igrs biogem. and sm was supported by a scholarship of university of sannio.
