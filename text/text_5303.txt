BACKGROUND
with the increased use of high-throughput experimental data such as gene expression profiles, protein-protein interactions and metabolic response  <cit> , we are able to gain better understanding of the molecular mechanisms of biological functions. because molecules interact with each other to exert biological functions, it is important to understand not only the activity of individual molecules, but also their interaction. in the past decade, network biology approaches which explicitly model the molecule interactions as graphs or complex networks have been intensively used. one of the primary tasks is to explore topological properties of biological networks, such as community structure  <cit>  and network motifs  <cit> . though the topology of a biological network does not always precisely reflects the function or even disease-determined regions  <cit> , they may have some overlapped components, which then can be related back to biological functions.

active module identification is one of the most important network biology analysis algorithm, which is able to reveal the regulatory and signaling mechanisms of a given cellular response  <cit> . the algorithm aims to find an connected regions over certain biological networks that show significant changes under certain conditions. in the seminal work of  <cit> , the authors first constructed protein-protein interaction network where the nodes represent proteins, and edges represent the physical interactions between a pair of proteins. node scores which indicate the significance of expression changes over certain conditions were calculated from the gene expression data and then assigned to the nodes. the active module identification problem was formulated as a combination optimization problem, which aims to search a subnetwork that maximize the aggregated score.

this combinatorial optimization problem turns out to be np-hard  <cit> , which is equivalent to finding a maximum weight clique in a weighted graph, a famous np-complete problem  <cit> . as effective tools to solve combinatorial problems, metaheuristic algorithms have been widely applied to search satisfied solutions  <cit> . the original paper  <cit>  proposed to use simulated annealing , a generic probabilistic metaheuristic to solve this problem. other methods include extended simulated annealing  <cit> , greedy algorithm  <cit> , graph-based heuristic algorithm  <cit>  and genetic algorithm   <cit> . a comprehensive review of this filed can be found in  <cit> .

binary encoding is the most common solution representation for active module identification using metaheuristic optimization algorithms such as sa or ga. in this encoding, the module in n-nodes network can be represented by membership vector x∈{ <dig> }n, where x
i= <dig> means i-node belongs to the module. one of the prerequisites to use this representation is to ensure the connectedness of the solution, which is not only a biological requirement for resulting subgraphs . without the connectedness constraint, the maximal objective may corresponds to a set of unrelated top-ranked nodes. unfortunately most related works mentioned above either did not consider this non-trivial constraints, or did not tackle this aspect efficiently.

another problem of using generic metaheuristic optimization algorithms is that the search operators, i.e., perturbation  <cit> , mutation and crossover  <cit> , are not specifically designed for active module identification, which might result in mediocre search performance in terms of speed and accuracy. in our previous works, we have shown that by incorporating local search operators into generic metaheuristic optimization algorithms, we can significantly improve the speed and accuracy for community detection in large scale biological networks  <cit> .

in this paper, in order to address the connectedness problem, we first propose an effective encoding/decoding scheme. based on the representation, we propose a local search operator and then embed it into a memetic framework. we have evaluated the proposed method for both simulated and real-world data, which shows the superior performance over other algorithms.

methods
active module identification
commonly the an interaction network is represented as an undirected graph g=, nodes in v represent genes, and edges in e represent the interactions between two genes. we can assign each gene i a p-value p
i to indicate the significance of expression changes over certain conditions. then we can obtain a z-score z
i=Φ
− <dig> for each gene, where Φ
− <dig> is the inverse of normal cdf.

to find a subnetwork which has high nodes scores, the aggregation z-score of subnetwork a
z
a is defined as  <cit> : 
  <dig> za=1k∑i∈azi, 


where k is the number of genes in a. in order to get subnetwork which has higher aggregation z-score compared with a random set of genes, it is suggested to use a corrected subnet score s
a  <cit> : 
  <dig> sa=za−μkσk, 


where the mean μ
k and standard deviation σ
k are computed based on a monte carlo approach, taking several rounds of randomly sampling k genes from the network. the simplified problem of finding highest score module in an undirected network, which consider the subnetwork score is the sum of each node’s score, is formally defined as following:

problem 1
given a graph g= with vertex weight z= [ z
v] for each v∈v, find a connected subnetworks s= of g with maximal weight f=∑v∈vszv.

in order to solve problem  <dig>  which is a np-hard combinatorial optimization problem, meta-heuristics algorithms have been applied. for example, simulated annealing was used in  <cit> . in each iteration, if toggling the state of a randomly picked node can increase s
a of expected subnetworks, then one choose to toggle it; otherwise to toggle it with certain probability. after a number of iterations, a set of high score subnetworks can be obtained. in  <cit> , based on binary encoding scheme, genetic algorithm with genetic operators such as mutation and crossover has been proposed to search for active modules.

new binary encoding/decoding scheme for active module identification
despite the biological insightful results obtained from the algorithms mentioned above, one important detail was omitted in the papers: how to ensure the connectedness of the resulting subgraph after applying heuristic operators such as toggling, mutation or crossover. this detail is important because without ensuring the connectedness of a candidate solution, the identification of active modules could be trivial, i.e., a set of isolated top-ranked nodes.

in the source code provided by the original authors , the authors employed a sophisticated way to check whether toggling one node of a membership vector is feasible, i.e., whether the toggling will affect the connectedness of the candidate solution, which makes the whole algorithm slow. specifically, given a candidate solution, i.e., a subset of nodes, an additional hashmap has to be maintained to stores the pairwise elements {n
o
d
e,c
o
m
p}, which indicates each node and its component , respectively, during the whole progress. after toggling, the algorithm will check this hashmap to see whether the operator affects the connectedness of resulted subnetworks. such operations leads to both running time and memory overhead.

in this paper, we propose a simple but fast binary encoding/decoding scheme, which does not require the hashmap nor explicit operations when add or remove current nodes. our binary encoding scheme is the same as used in  <cit> , i.e., a binary vector of n binary values of which each represents the membership of the node . the key difference is the decoding scheme. wile the previous work  <cit>  did not consider the connectedness constraint. specifically, we conduct the connected components finding  algorithm on the binary vector presented subset, and then extract the connected subnetworks. decoding scheme based on ccf algorithm as described in algorithm  <dig>  where breadth-first search  is used to recursively to find the node’s neighbors.





since there are multiple connected subgraphs in a candidate solution, the fitness calculation can be flexible. in the simplest case, we can use the subgraph with the highest aggregated node score. however, no matter how we calculate the fitness function, genetic meta-heuristics algorithms can be directly applied based on the encoding/decoding scheme. for example, if we use sa, in each iteration, we decide to add or remove a randomly picked node by the same criterion: if toggling the state of the selected node c can increase s
a of the subnetwork a with the highest aggregated node score, then we choose to toggle it; otherwise to toggle it with certain probability p. compared with original mechanism of jactivemodules in cytoscape, this decoding is computational tractable and easy to implement.

the connected components finding algorithm  <dig> is actually based on breadth-first search  on a graph, requiring time complexity o where |v
′| and |e
′| are the number of nodes and edges of the current set respectively. notice that this time complexity is only equivalent to one case to toggle a node in jactivemodules in theory.

memetic algorithm
evolutionary algorithm  is a powerful global optimization to solve combinatorial optimization problems. inspired by biological evolution, a typical ea uses operators such as selection, crossover and mutation to improve the candidate solutions  <cit> . parameters for an ea are number of iterations t, population size p, crossover probability p
c and mutation probability p
m.

memetic algorithm  improved standard ea by enabling individuals to perform local refinements  <cit> . numerous effective local search  methods have been developed and incorporated into ma to obtain state-of-the-art results in various applications . a recent review of ma can be found in  <cit> . algorithm  <dig> describes a common framework of ma, where the standard mutation operation is replaced by a local search operator. being similar to conventional ga algorithms which partially prevent the “local optimum” problem by mutation and crossover mechanisms, algorithm  <dig> uses an enhanced mutation step. with enough number of evolutionary generations, this algorithm is supposed to convergence.





according our encoding/decoding scheme, each candidate solution consists of several connected subgraphs, we define the highest score of these subgraphs as the fitness of x, denoted by f. for multiple modules identification, we use a module extraction mechanism, i.e. to identify one active module each time and then extract it from the background network, which is left for next round.

for the local search part, here we mainly consider a simple greedy search strategy. we pick all individuals in the population with probability p
ls and conduct m times of toggle on current individual where m<n. finally we replace each chosen individual with the best scored one, followed by other genetic operators. more operations as in  <cit>  to conduct local search could be applied here.

it is necessary to make sure the identified module has reasonable size when toggling nodes. both extreme small and large module can make the interpretation difficult. but the objective  itself cannot prevent large modules. neither original work  <cit>  nor ga based method  <cit>  proposed mechanisms to achieve reasonable sized modules. furthermore, to maximize objective  may lead to single gene module or very large component in practice. as long as one large module  is connected and has high aggregated score, then this module may be found using general algorithm  <dig> 

here we make a simple modification to the mutation operator in ga and local search operator in ma to constrain the module size to be desired: as long as the number of candidate genes  exceeds some threshold n
max, there will be no more potential nodes added to the subset. on the contrary, if the module size is going to be smaller than predefined threshold n
min, there will be no more potential nodes removed out from the current subset.

the procedure of local search is described as in algorithm  <dig>  the whole procedure of ma for active module identification is combining general memetic framework  <dig> and the local search strategy. for evolutionary operations in the whole procedure, we chose the commonly used one-point crossover.





the computational complexity for memetic algorithm  <dig> is o without local refinements. the expected computational complexity of whole algorithm with greedy search is thus o) where |v
′| and |e
′| are the number of nodes and edges of a candidate solution subgraph respectively. if we consider almost half of the whole nodes may get involved in evolution and normally the number of edges |e
′| in subgraph approximately at the same level of the number of nodes |v
′|, the simplified complexity of the whole algorithm should be o. generally the size of population p is small compared with the network size n, which makes the latter dominate the running time. and the number of local search trails m in each inner iteration also has an impact on the efficiency. in theory the sophisticated mechanism of jactivemodule can also be used here, but it would makes the fitness evaluation more difficult. and the space requirement is higher due to the hashmap.

RESULTS
module connectedness validation
first of all, we validate if the modules identified by proposed algorithm are connected. the baseline algorithm is a simple ga with basic binary encoding scheme without connectedness guarantee to search highly scored module in molecular networks. we use a simulated interaction network with  <dig> nodes and  <dig> edges, to just validate the connectedness property. figure  <dig> showed the resulted module, and the red nodes are in subset of resulted module and gray ones are their neighbors but not included in the subset. we can see that the original subset is not connected at nodes like  <dig>   <dig> and  <dig> etc, which are isolated from large set of red nodes. if we use the same ga algorithm with the proposed encoding mechanism in section  <dig>  we can get a different result as fig.  <dig> shows. with the same input and algorithmic parameters, the red nodes are now connected in the identified active module. the standard ga  and visualization code are available at https://github.com/fairmiracle/eamodules.
fig.  <dig> modules identified by ga on simulated data. the red nodes are not connected though they are supposed to be


fig.  <dig> modules identified by modified ga with proposed encoding scheme on the same simulated data as in fig.  <dig>  the red nodes are connected




yeast ppi network
we first validate the proposed algorithm on a small real protein-protein network with  <dig> proteins in yeast  <cit> . the p-values on each nodes show the significance of gene expression changes in response to a single perturbation: a strain with a complete deletion of the gal <dig> gene versus wild type yeast. the network structure data and expression values are available from cytoscape sample data. the constructed network has  <dig> nodes and  <dig> edges. and the goal is to find a top-scoring subnetwork which show significant response to the perturbation.

we compare the performance of three algorithms using the encoding method in section 3: simulated annealing , genetic algorithm  and the proposed memetic algorithm . in order to compare sa with other two eas fairly, we run sa p  times and select the best result, since sa is viewed as a single population ga. the number of iterations t for all algorithm is  <dig>  and temperatures decrease from  <dig>  to  <dig>  for sa. other evolutionary parameters are crossover rate p
c= <dig>  for ga and ma, mutation rate p
m= <dig>  for ga and local search iterations m= <dig> for ma. in ga and ma we also reserve the best individual in each iteration for stability. we run each algorithm  <dig> times with randomly initialization and then compare the performance w.r.t highest module score and corresponding module size.
a
l
u
e< <dig> e
− <dig>  and a paired sample t-test is used to tell the difference between ga and ma, with p−v
a
l
u
e< <dig> e
− <dig> 
fig.  <dig> statistical comparison of performance w.r.t module scores from three algorithms: genetic algorithm, memetic algorithm and simulated annealing




besides the quality of module, we also compare the rate of convergence of three algorithms, to see how objective improves along with iterations. we define the best objective value in population as the indicator in each iteration. according to fig.  <dig>  ma reaches the stable objective earlier than ga. the local search scheme could make sure the performance of ma is no worse than basic ga, and the monotonic selection leads to early convergence compared with ga, at the cost of longer running time of local search. both ga and ma get higher objective than sa, which needs much more iterations to reach high score.
fig.  <dig> convergence rate comparison of three algorithms: genetic algorithm, memetic algorithm and simulated annealing from one trail. ma is the first to reaches the stable status




human ppi network
in order to check the biological relevance of identified modules by proposed algorithm, we apply it on the real world protein-protein interactions  network. the background ppi network for homo sapiens is obtained from two updated databases: biogrid  <cit>  release  <dig> . <dig> and string v <dig>   <cit> , specifically  <dig> protein.links.v <dig> txt. the biogrid for homo sapiens has  <dig>  interactions while string stores  <dig> , <dig> protein pairs, with a combined score ranging from  <dig> to  <dig> for each link. the gene expression profile comes from geo <dig> controlled by the differentiation of th <dig> cell, which is considered to play a key role in pathogenesis of autoimmune and inflammatory diseases  <cit> . the expression profile contains  <dig>  probes , and  <dig>  were kept after the following process: 1) remove probes those do not have gene symbols; 2) remove probes with more than 20% of missing values or nas; 3) replace the rest missing data with mean value of the row they belong to. further we select  <dig> significantly expressed genes from all of them using limma  <cit> . the gene filtering algorithm selects some potentially important candidates and reduce network size. finally we select ppi pairs according to match of expression probes.

for biogrid we simply match the gene names for each probe of expression profile. but string uses the protein name , thus we need to match that with official symbols  with database ensembl genes  <dig>  <cit> , and select the corresponded genes. the source code for genes selection and construction procedure of ppi network from multiple data sources is available at https://github.com/fairmiracle/ppinet.

the network constructed from biogrid has  <dig> nodes and string has  <dig> nodes, with  <dig> nodes in common. we conduct the algorithm  <dig> on both networks, and use a module extraction method to identify multiple modules from this network, i.e. to identify one active module each time and then extract it from the background network, which is left for next round. the largest size of each module is  <dig>  the full gene symbols lists of modules are provided in supplementary materials . we can also see that under the same condition, ma could achieve higher scored modules than ga.

in order to validate the identified modules, we follow the gene set enrichment analysis  <cit>  and use various updated tools, including basic gene ontology  database  and analysis in string, integrative and interactive web-based tools like genemania   <cit> . the basic idea of annotating a given gene list is to compare it with known knowledge database. the p-value is calculated by the following formula . 
  <dig> p=∑x=1nmxn−mn−xnn. 


generally speaking, larger module tends to be enriched multiple biological functions, which may not be very relevant to each other. the first module identified from string ppi network contains  <dig> genes and according to genemania  <cit> , among all potential links inside the module, there are  <dig> % co-expression links,  <dig> % are physical interactions and  <dig> % are pathways. the top biological processes and pathways related to this module are listed in table  <dig>  we can see several general responses found by string, and the hub nodes in this module shown as in fig.  <dig> also indicate general important genes related to receptor signaling and signal transduction . while functions given by genemania show that these functions are intensively involved in th <dig> cell differentiation. several items are also claimed in a recent publication  <cit> , which is consistent with the experimental settings.
fig.  <dig> the first identified module plotted by string, where edges represent both known interactions including curated databases and experimentally determined and predicted interactions such as gene neighborhood and gene co-occurrence





the smaller module tends to play more specific roles in the process. figure  <dig> plotted by genemania  <cit>  shows the interactions between these  <dig> genes, and  <dig> % of them are co-expression links according to previous studies. the function is more about pathways, like fc-epsilon receptor signaling and fc receptor signaling. related genes contained in this module are map3k <dig>  map3k <dig> and map3k <dig>  mitogen-activated protein kinase kinase, which play central roles in the regulation of cell survival and differentiation. the connection between map3k and th <dig> differentiation is supported by  <cit> , through encoding mekk <dig> which controls both b and t cell proliferation. and mekk <dig> regulates cdkn1b expression in th <dig> cells. other processes enriched by the module are also mentioned in a recent study  <cit> .
fig.  <dig> the relatively small module plotted by genemania, where most of edges are co-expression links according to previous studies




different sources of protein-protein interactions also make an impact. from the comparison between modules between biogrid and string networks, we can see that they share some functions such as fc-epsilon receptor signaling pathway, but they are not totally the same. interactions in biogrid are largely rely on high-throughput datasets and previous studies, which makes the identified module less focused to some functions. irreverent supporting materials make the set of genes has lower coverage and higher fdr, given by functional enrichment report by genemania. in contrast, string has many experimental and predicted interactions  <cit> , and the combined score of links can further help to pick more reliable edges of ppi network. identified modules from this network tend to have more significant biological meanings. take the first module  for example, gene ontology tells the hierarchical biological process of this module by starting with regulation of tyrosine phosphorylation of stat <dig> protein. the stat <dig> has been shown to be a master regulator of th <dig> cell differentiation  <cit>  and related immune pathways.

CONCLUSIONS
searching for connected subnetworks in biological networks is essentially a combinatorial optimization problem, which can be solved by various metaheuristic methods. we design a direct strategy on a set of node to get connected subnetworks, thus avoid complicated graph divide operations. and the binary encoding can be used in general heuristic optimization algorithms like simulated annealing and genetic algorithm. and the ga is further improved by a memetic algorithmic framework embedded with local search operators. empirical studies on real networks shows the effectiveness and efficiency of this strategy.

future works can be considered in two different aspects. from the network model, how to derived effective algorithmic model to deal with directed and weighted network is of interests. the ppi network itself is weighted and confidence score of interactions may affect results. and the direction of some edges has biological meanings as well. from the evolutionary algorithm view, the method used in this paper is rather superficial and various state-of-the-art techniques have not been employed. further improvements on ea may make it more efficient in handling large-scale networks.

