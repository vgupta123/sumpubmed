BACKGROUND
structure comparison and accurate structure-based sequence alignment are essential operations in structural bioinformatics. as of september  <dig>  the total number of structures in the protein data bank   <cit>  is more than  <dig> and is increasing by 20% per year. good structure comparison algorithms are necessary in order to compare and classify these structures and to derive accurate sequence alignments, which can help establish evolutionary relationships among the proteins.

many protein structure alignment programs include iterations of a two-step cycle: first superposing the two structures according to a given sequence alignment, and then deriving a new sequence alignment from the superimposed structures. dynamic programming algorithm  <cit>  is a widely used method for the second step. programs such as ssap  <cit> , structal  <cit> , lsqman  <cit> , ce  <cit> , matras  <cit> , sheba  <cit> , fast  <cit>  and others  <cit>  use it to generate the alignments. however, dynamic programming algorithm requires using a gap penalty function, for which there is little guidance. it also uses a score function that usually considers only the distance between matching residues. use of such a function can introduce incorrect alignments.

in order to recognize residue pairs that are structurally equivalent but not necessarily the closest ones and to avoid using a gap penalty function, we devised a novel algorithm called seed extension  for obtaining the sequence alignment from a pair of superimposed structures. the performance of the new algorithm was compared with those of three programs that use the dynamic programming algorithm, namely lsqman, chimera  <cit>  and dp, which is a program extracted from sheba. lsqman and chimera are two well-known programs and were chosen because they were easily available and could, without any modification, accept two superimposed structures and output the sequence alignment. the manually curated alignments in the conserved domain database   <cit>  were used as the gold standard. our results show that se is fast and generates more accurate alignments, especially in cases where sequence or structural similarity is low. the program can be incorporated into an existing structure comparison program or it can simply be appended to such a program to improve its alignment quality.

RESULTS
se improves the accuracy of sequence alignments
figures 1a and 1b show the average fraction of correctly aligned residues, fcar, in each rmsd and sequence identity ranges respectively by different programs. as expected, both se and dynamic programming algorithms generated correct sequence alignments for structurally similar pairs. however, for pairs with rmsd greater than  <dig> Å, the average fcar of se was 9% to 28% better than those of programs using dynamic programming algorithm. for pairs with less than 40% sequence identity, the improvement was 3% to 8%. while chimera, lsqman and dp yielded the average accuracy of  <dig> %,  <dig> % and  <dig> % respectively over the  <dig> pairs of superimposed proteins, se gave an average fcar of  <dig> %.

we also compared the frequency that a program gave best alignment for each pair. the fraction of pairs for which a given program generated the highest fcar, or tied with another programs with the highest fcar, in different rmsd and sequence identity ranges are shown in figures 2a and 2b, respectively. it is clear that se generated almost always  the best alignment in all rmsd and homology ranges. the superior performance generally becomes more pronounced as the rmsd increases or the sequence identity decreases. overall, se generated the best alignment for  <dig> % of the pairs if ties are included and  <dig> % if ties are not counted.

sheba also generates more accurate alignment when the dynamic programming algorithm is replaced by se
in order to see if the se algorithm improves the alignment quality of structure comparison programs, it was implemented in sheba to replace the original dynamic programming algorithm. in sheba, after the initial alignment is found for a given pair of structures, they are superimposed according to kabsch  <cit>  and then a new sequence alignment is obtained from the superimposed structures using either the original dp routine or the new se procedure. this kabsch-dp or kabsch-se refinement cycle is repeated until convergence or until a set number of cycles has been completed.

the average fcar values obtained by the new version sheba <dig>  with the dp or the se routines are shown in figure  <dig>  also included are the results from the original version, sheba <dig> , which uses only the dp and a slightly different iteration scheme . as can be seen, sheba with kabsch-se cycle generated more accurate alignments than the versions with the dynamic programming algorithm, regardless of the iteration scheme. on average, the fcar of sheba with se was 5% better than sheba with dp. for pairs with rmsd larger than  <dig> Å, sheba with se was 9% to 12% better while for those with sequence identity less than 40%, the improvement was 4% to 10%.

execution time comparison
to compare the speed of se and dp algorithms, we measured the cpu time spent on se and dp routines implemented in sheba. in figure  <dig>  panel a shows the average cpu time per cycle of se  and dp  routines as a function of the product of the sizes of the two proteins compared for the  <dig> structurally similar pairs. the se time increases nearly linearly with the product of the sizes whereas the dp time clearly increases much faster. a similar trend is seen in panel b, which gives the total cpu time taken for complete iteration of the refinement cycles for each pair of structures. it should be noted that sheba with dp and sheba with se may run different numbers of cycles for a given pair of structures, depending on when the alignment converges. but the average number of cycles was comparable,  <dig> for se and  <dig> for dp. sheba with se was two times faster, on average, than sheba with dp, for proteins with  <dig> residues and more than  <dig> times faster for some larger protein pairs.

above timing was for comparing a pair of similar structures. however, a common use of a structure comparison program is to search for similar structures in a structure database, which typically contains many more dissimilar structures than similar ones. in order to see how fast se algorithm runs for dissimilar structures, we selected three cdd domains, 1ryt ,3aky  and 1h18_a , with the smallest , medium  and the largest  number of residues and compared each to all  <dig> cdd domains with pdb structure. the cpu time used by dp routine divided by the cpu time used by se for each pair is plotted against all the  <dig> target structures in figure  <dig>  for the medium size query, se is more than two times faster than dp when the target structure has  <dig> residues and more than  <dig> times faster when the target has  <dig> or more residues.

discussion
obtaining the best sequence alignment from a pair of superimposed structures is a non-trivial problem when the two structures are not entirely similar. the common practice is to select a maximal number of aligned residue pairs that will minimize the aggregate sum of distances between cα atoms of the selected pairs. the natural algorithm for doing this is the dynamic programming algorithm.

however, blind minimization of the distance sum, in conjunction with the use of an essentially arbitrary gap penalty function, can produce poor alignments. the problem is particularly easy to see when two structurally equivalent helices cross each other at an angle as in the case shown in figure  <dig>  in such cases, insufficient gap penalty often leads to an alignment of the closest, but not necessarily structurally equivalent, residues, with many gaps.

the se algorithm is a heuristic algorithm, which approximately follows the mental process that one of the authors  goes through when he manually writes down the alignment from visual inspection of a pair of superimposed structures displayed on a computer screen. it starts with a few residue pairs that are clearly equivalent and then extends the alignment without introducing a gap until the inter-residue distance changes abruptly. there is no explicit notion of a gap penalty, although it is implicitly present since the algorithm attempts to extend the alignment without a gap. we have shown in this study that this algorithm produces more accurate alignments than the dynamic programming algorithms implemented in three different programs. it is also considerably faster than the latter, especially when the structures are large. an additional merit of the algorithm is that it generates strictly symmetric alignments, i.e. it produces the same alignment when the query and target structures are swapped. this is not always the case with the dynamic programming algorithm.

the algorithm requires several parameters, including the distance change cutoff value, which is used to decide when to stop extension of the alignment, the scalar product threshold value, which measures the similarity of orientation of residue triplets and which is used to identify the seed alignments, and the distance tolerance and the sequence similarity cutoff values, which are used to decide when to consider the sequence similarity in choosing among a couple of conflicting alignments. initially, we chose the values of these parameters intuitively. the values of the first two parameters were then varied within a limited range and the optimal values were chosen using the  <dig> pairs of alignments selected from the cdd database. although cdd is the most recent expert-curated database, there are other structure-based sequence alignment databases, e.g. homstrad <cit>  and fssp <cit> . it is possible that use of these other databases can alter the optimal values of these parameters. also, adjustments may be indicated as the program is tested using more structure pairs and used more widely. however, we also expect that any adjustment will be small in magnitude and, in particular, se will remain superior to a dynamic programming algorithm.

CONCLUSIONS
se algorithm produces more accurate sequence alignments from superimposed structures than the dynamic programming algorithms used in chimera, lsqman or sheba, especially in pairs of proteins with low sequence or structure similarity. se does not require gap penalties but the alignments have fewer gaps. sheba implemented with se algorithm takes less cpu time and generates more accurate alignments than the original version with dynamic programming algorithm. it is available as a software package for implementing in other structure comparison programs.

