BACKGROUND
cells respond to external stimuli often initiated by external signaling molecules such as steroid hormones or growth factors. this response is tightly controlled by complex protein-protein interaction networks, namely, signal transduction pathways  <cit> . when an external molecule binds to a specific receptor molecule located in the cell membrane or inside the cell, the receptor undergoes a conformational change and triggers a chain of signaling events to propagate the external signal inside the cell. as the appropriate response to the external stimuli, the chain of biochemical reactions culminate in the activation or suppression of a target protein  known as the reporter protein.

signaling networks are vital for proper functioning of cells as they govern key cellular processes. for instance, mitogen-activated protein kinase  signaling network is involved in the regulation of cellular proliferation, differentiation, mitosis, survival, and apoptosis  <cit> . any disruption in signal transduction in cells leads to a number of disorders such as cancer, alzheimer’s, parkinson’s, and kidney and cardiovascular disease . it is paramount that we study the topology of the signaling networks to gain insights into how cells respond to external stimuli, how its deviation results in various diseases and how the cells respond to treatments.

experimental methods such as yeast-two hybrid, rna interference  give us information about the signaling events inside the cells. in the rnai experiment  <cit> , mrna levels of a predetermined set of genes are artificially knocked down  <cit> . for each gene, the effect of the knockdown is measured in the reporter genes. the role of the knocked down gene in the signal transduction pathway is inferred by comparing the responses of rnai treated and wild type cells  <cit> . if the response deviates greatly in the rnai treated cells compared to the wild type, it shows that the knocked down gene plays an important role in signal transduction from the receptor to the reporter.

single gene knockdown rnai experiment gives insight about the importance of a single gene in signal transduction from receptor to reporter gene. however, constructing the complete network topology from rnai experiments is computationally challenging  <cit> . to alleviate the computational cost, many computational methods have been developed that use available experimental data such as gene expression, rnai knock down assay and protein-protein interaction networks . these methods often employ bayesian networks, probabilistic boolean networks, combinatorial optimization methods and differential equation models . some inference algorithms start with a network topology called the reference network. these methods assume that the network to be constructed is similar  to the reference network . the methods that utilize prior knowledge construct accurate network topology faster than methods that do not.

signaling network constructor   <cit>  is an algorithm that infers signaling networks using a reference network and rnai data. sinec starts from the signaling network of a reference organism, makes minimum number of interaction addition or deletion to this reference network so that it satisfies the rnai data  of the target organism. sinec assumes that the rnai experimental data is available for all the genes in the network. however, rnai experiments are often noisy, and there are usually genes that the rnai data is not collected  <cit> . therefore, the development of network construction methods for incomplete rnai experimental data is at most importance.

network construction using a reference network and complete rnai data is np-complete  <cit> . if rnai data is missing for a subset of genes, that further increases the complexity of the problem. assume that there are n genes for which rnai data is missing. note that each of these genes can be either critical for signal transduction from receptor to reporter genes, or noncritical, i.e., each gene has two possibilities. therefore, for n missing genes, an optimal solution must evaluate all 2n possible configurations to compute the correct values for the missing genes. it is impractical to evaluate all 2n constraint configurations since exhaustive method will fail as n increases.

our contributions
in this article, we construct signaling networks using incomplete/ missing rnai data. we design and develop two iterative network construction algorithms namely the holistic optimization and the prioritized optimization algorithms to infer signaling networks. assume that there are n genes with missing rnai data. holistic optimization evaluates each of these genes one by one to decide if it is critical or noncritical, leading to o constraint combinations. prioritized optimization lowers the number of constraint combinations by exclusively setting each gene as critical and combining the genes that yield networks with the same distance to the reference network  in subsets of genes. this divides the set of n unknown genes to k subsets of mutually exclusive genes where each subset is of size ni . in each iteration, prioritized optimization evaluates only the genes in a subset to see if it’s critical or noncritical, thus leading to only o iterations. we also develop a node ordering algorithm named topsog that takes causality into account and both holistic and prioritized optimization algorithms employ it as a subroutine.

we evaluate our methods using both synthetic and real signaling network dataset. to compare the performance with the gold standard, we also implement an exhaustive algorithm that evaluates all subsets of the genes with missing rnai data and infers the network with the closest distance to the reference network. we found that the proposed methods run much faster than the exhaustive algorithm and produce the same accuracy levels in their inferred networks. for instance, it takes less than 100ms for our method to reconstruct highly accurate wnt signaling networks for different organisms. we also evaluate our methods using synthetic networks by varying a broad spectrum of parameters, such as the number of genes with missing rnai data, the number of nodes in the network and the amount of deviation between the reference and the target network to be constructed. we found our methods to be robust as they produced highly accurate networks in all these scenarios.

the organization of the rest of the paper is as follows. in section ‘method’, we formally define the problem and propose two algorithms to solve it. we present the results of our extensive experiments in section ‘results and discussion’ and conclude the paper in section ‘conclusions’.

method
in this section we present two novel methods we developed to solve the signaling network construction problem. first, we present the key terms used in our method. then, we briefly explain the sinec algorithm. next, we describe our two methods in detail, holistic optimization algorithm and prioritized optimization algorithm. last, we explain our new sorting algorithm topsog for the critical genes.

preliminary terms
we start by introducing the key terms that will help present our method. first, we introduce an important concept, critical and noncritical genes in a network with a receptor and reporter gene pair.

definition 1
assume that we are given a directed network g= with receptor gene vs and reporter gene vt, we say that a gene v∈v is a critical gene if there is no path from vs to vt that does not contain v. otherwise, it is a noncritical gene.

a simple example in fig.  <dig> clarifies this. in this figure, node va appears on all the paths from vs to vt. thus, only node va is the critical node. single gene knockdown rnai experiments discover if a gene is important during the transmission of a signal from a receptor to a reporter gene. let us denote the rnai experiment result on the ith gene with an indicator variable ci. if a signal is unable to reach to the reporter gene from the receptor gene after the ith gene is knocked down, the variable ci= <dig>  otherwise, ci= <dig>  if the rnai experiment for the ith gene is missing, we set ci=− <dig>  we call such genes as unknown genes in the rest of the paper. suppose we want to construct a network with l genes, we represent the rnai constraints imposed on all these genes with a vector of variables c=. following definition clarifies how to impose the rnai constraints on a given network’s topology.
fig.  <dig> an hypothetical signaling network. nodes v
s and v
t are the receptor and reporter genes. nodes v
a and v
b are constrained to be critical genes



definition 2
consistent network consider a directed network g= with a receptor and reporter gene pair, and the rnai constraints c imposed on the set of genes. we say that g is consistent with c if ∀vi is a critical gene when ci= <dig>  or vi is a noncritical gene when ci= <dig> 

notice that in definition  <dig> above, only critical and noncritical genes are imposed rules. for unknown genes ci=− <dig>  they can be either critical or noncritical. next, we introduce another notation which is needed to define our problem.

definition 3
distance between two networks assume that we are provided with two networks built on the same set of genes, g1= and g2=. we denote the set difference and set cardinality with operators “ ∖” and “ ∣.∣” respectively. we define the distance between g <dig> and g <dig> as: 
 dist=∣e1∖e2∣+∣e2∖e1∣ 

in what follows we formally define the signaling network construction problem.

definition 4
signaling network construction assume that we are given a reference network gr= with respect to vs and vt, and also a vector of rnai constraints c. the problem is to construct a network g= which is consistent with c and the distance dist to the reference is minimum.

it is important to note that definition  <dig> conjectures that the topology of the reference network is close to that of target network. when reference networks from phylogenetically close organisms are available, this conjecture has already been shown to obtain accurate results  <cit> .

next, we present two novel algorithms we have developed for the problem as defined above. both algorithms apply a hill climbing strategy. they first start from an initial configuration of constraints. then they gradually update their constraints. since we observe that there are usually a few critical genes in real signaling networks, in the initial configuration, for all ci=− <dig> , we set ci= <dig> .

overview of the sinec algorithm
before introducing our method, we first take a small detour to briefly summarize the sinec algorithm, which is necessary to better understand our method. sinec is a recent network inference algorithm which uses a given reference network and the rnai data to construct the target network  <cit> . it however assumes that the rnai constraints for all genes are known. in this paper, we develop algorithms that utilize sinec and deal with the missing rnai data problem.

briefly, sinec works in three steps:  it first estimates the order of critical genes in which the signal is propagated from the receptor to the reporter genes. sinec uses the sloan algorithm  <cit>  to generate a putative ordering. the sloan algorithm assigns a priority value to each node based on its degree and its distance to the end node. it removes the node with highest priority and updates the priority of remaining nodes. it continues this process until all the nodes are processed. this greedy strategy results in an ordering which imposes that every path from receptor to reporter should pass critical genes in that order.  sinec then deletes edges that conflict with the ordering of critical genes. if there is a path of noncritical genes between two nonconsecutive critical genes, a signal is still reachable without traversing through the intermediate critical genes. sinec deletes all these edges with minimum number of edge deletions to make the network consistent with the ordering of critical genes found by sloan algorithm.  sinec inserts some missing edges to make the reference network satisfy the experimental rnai constraints. it inserts an edge if one of the following cases happens: 1) no path exits between two consecutive critical genes, or 2) at least a noncritical gene exits on all the paths between two consecutive critical genes, i.e, eventually making it a critical gene. for any further and detailed information, the interested readers can refer to hashemikhabir et al.  <cit> .

holistic optimization algorithm
holistic optimization algorithm starts to construct the network topology with each unknown gene setting to noncritical. then it iteratively tries to alter the constraint of one unknown gene at a time from noncritical to critical. it is worth mentioning that after this alteration, the constraints for all the genes are fixed, that is there are no unknown genes left at this stage. for each such constraint, it uses the sinec algorithm to construct the network topology. it then only accepts the alteration with the best result. holistic optimization algorithm describes this process in detail. it consists of following two steps.

step 1: initialization. it first sets the constraints of all unknown genes to noncritical. then it uses these constraints to construct the network with minimum distance to the reference and maintains the resulting distance .

step 2: climbing. this step is of significance. it iterates over the set of all the unknown genes. for each such gene gi, it first temporarily sets gi to critical that is the constraint ci= <dig>  then it uses this new constraint vector c and the given reference network gr as the guide to construct a new network gi by applying sinec . after temporarily altering the constraints for all unknown genes, it chooses the network gm with the least distance to the reference gr . if the distance between gm and gr is better than the current best result, it decides the constraint of the gene gm should be critical . otherwise, it concludes that no single constraint alteration can improve the result and simply returns the current best result .

here, we analyze the performance of the holistic optimization algorithm. the most time consuming step in this algorithm by far is the network construction step  using sinec. we denote the number of unknown genes with n. this step is o.



prioritized optimization algorithm
holistic optimization algorithm carefully tries to construct the network close to the reference network. however, trying o alternative constraint combinations is prohibitively time consuming as n and the network size grow. in this section, we developed a method that alleviates this problem by reducing the number of alterations in the constraint vector.

our next algorithm utilizes the distance between the network gi and the reference network gr which is obtained after altering the constraint of gene gi to  <dig> at a time. with these distances, it prioritize the role of gene gi in the network, i.e., whether gene gi is critical or not. smaller values of dist indicate higher likelihood of being critical gene for gene gi in the target network. prioritized optimization algorithm describes this idea in detail. similar to holistic optimization, it also consists of two steps.

step 1: initialization. same as holistic optimization, this step starts by initializing the constraints of all the unknown genes to noncritical. it constructs the network and maintains the distance to the reference . then for each unknown gene gi, it temporarily alters its constraint to critical , constructs a new network gi and keeps the distance dist in dist .

step 2: climbing. this step presents the major difference between our two methods. unlike holistic optimization, the prioritized one iterates over only a subset of unknown genes instead of the whole set. let us denote this subset with u′ . this subset consists of unknown genes with the smallest value of dist obtained in the first step, and it is likely that there are more than one with the same smallest value. for each unknown gene gi in the set u′, prioritized optimization temporarily sets it as critical, constructs a network gi using the new constraint vector c, and computes the distance with the reference dist . it finalizes the constraint that provides a better result than the current best and continues this process iteratively . it returns the current best result until there is no single constraint alteration can improve the result.

like holistic optimization, constructing the network using sinec  is the most time consuming step of prioritized optimization. we denote the size of unique dist values among all unknown genes with k . then for each unique dist value, there will be k different sets u′. we represent the size of these k sets as n <dig>  n <dig>  …, nk . thus, prioritized optimization executes that step o times. and we expect that when k is large and all ni have similar values, the time complexity of prioritized optimization is significantly better than that of holistic optimization.



sorting critical genes
both of our holistic and prioritized optimization algorithms employ the sinec algorithm to construct the network topology when the constraints of all the genes are determined. recall from the section ‘overview of the sinec algorithm’ that an important step of sinec is to rank the critical genes. sinec applies the sloan algorithm to do this. the sloan algorithm ranks genes based on their degrees and distances to the reporter gene . this strategy however fails to capture the causality between the genes in signal transfer and thus leads sinec to incorrect network topologies. figure  <dig> explains this on a toy example. in this example, nodes vs and vt denote the receptor and reporter genes respectively. assume that nodes va and vb are critical genes according to the given rnai constraints. therefore, we need to rank nodes va and vb. intuitively, va should appear before vb as va can pass a signal to vb, and they have the same distance to the reporter. however, since vb has a larger degree than va, the sloan algorithm prefers vb to come before va for a signal starting from the receptor. this causes many redundant edge insertions and deletions . more importantly, it results in an incorrect network topology. in summary, the sloan algorithm is not tailored for signaling network construction and better ranking algorithms are needed. next, we develop a new gene ranking algorithm named topological sorting for general graph .

the topsog algorithm  is loosely based on the classical topological sorting algorithm  <cit> , which is designed only for directed acyclic graphs . a reference network in our problem however may contain cycles. to tackle this problem, we convert the reference network gr= to a dag gr′=. initially, we set gr′ to be the same as the reference network gr. we then update both v′ and e′ using the following strategy to convert it to a dag. we start by applying the kosaraju’s algorithm  <cit>  to find the strongly connected components  in gr . let us denote the ith scc with si. each si defines a small subnetwork in gr which contains the nodes in si and the edges incident to them. we compress each si and replace it with a single node in gr′. for each si, if there is an incoming edge  where u∈v∖si and v∈si, we call v an entry point to si. note that there can be multiple incoming edges to si leading to possibly multiple entry points. among all these entry points, we designate one as the entrance to si whose sum of distances to all the other entry points is the smallest . after selecting the entrance for every scc, we replace each scc with a single node, called super node using the strategy below. we first remove all the nodes in si from v′ along with the edges incident to them from e′. we then insert a new super node si into v′. for each edge ∈er with u∈v∖si and v∈si, we insert the edge  into e′. similarly, for each edge ∈er with v∈v∖si and u∈si, we insert the edge  into e′. we repeat this process for each si. the resulting network gr′ is guaranteed to be a dag . we are now ready to rank the nodes.

in the ranking step, we first get the topological ranking r of all the nodes in gr′ using the depth-first-search  algorithm in the order they are visited starting from vs . notice that some of the nodes in this ranking are super nodes. thus they actually represent a set of nodes which still needs to be ranked. to do that, we run dfs on the subnetwork si starting from the entrance node ui, rank the nodes in si in the order that they are visited, and replace si with the ranked list of nodes in si . we repeat this for each super node si in r and obtain a complete ranking of all the nodes in the original reference network gr. then we extract the ranking of all the critical nodes from r .

finally, we emphasize that the dfs strategy used in our algorithm differs from the classical dfs algorithm  <cit> . when there are multiple unvisited successors, instead of arbitrarily selecting one to traverse next, we select the successor as follows. consider a possible successor node v. we denote the distance between v and the source node vs in the original reference network gr with ds. similarly, we denote the distance between v and the target node vt with dt. among all the unvisited successors, we select the one with the largest  value, which indicates it is close to vs but far from vt.



RESULTS
in this section, we evaluate the performance of our methods extensively on both synthetic and real datasets. we compute the performance of our methods in terms of the quality of the results and the running time. next we introduce the datasets and the quality measures used in our experiments and the implementation details.

datasets we use both synthetically generated and real datasets in our experiments. in the following, to simplify our notation, we use the size and density of the network to represent the number of nodes and the number of edges per node in a network respectively.

synthetic dataset. we run experiments on synthetic networks to observe the performance of our methods under diverse parameters including network size, mutation rate  etc. we randomly generate scale-free synthetic networks following the barabási-albert model  <cit>  by varying the network size. this model is commonly used in the literature for simulating the real biological network behavior. using this model, we generate target networks with various sizes  <dig>   <dig>   <dig> and  <dig>  in particular, we generate  <dig> random networks with density three for each network size. thus, the dataset contains  <dig>  target networks. according to the problem definition, we impose a receptor and reporter gene pair, rnai constraints for the gene set on the target network. for each target network, we choose the receptor and reporter genes in the following way. we first find all the shortest paths between all pairs of genes. among these paths, we choose the longest one as the diameter of the network. then we set the source node on this path as the receptor gene, and the sink node as the reporter gene. if there are more than one path that can be chosen as the diameter of the network, we choose one of these paths randomly. upon choosing the receptor and reporter gene pair, we set all the articulation points which appear on all the paths from the receptor gene to the reporter gene as the critical genes, and the remaining genes as noncritical.

each target network has  <dig> reference networks that are obtained by performing specific level of topological perturbations on it. to do this, we apply the degree preserving edge shuffling method  <cit>  with a given mutation rate . specifically, we use seven linearly spaced mutation rates of  <dig> %,  <dig> %, …,  <dig> %. thus, in total  <dig>  reference networks are created. a mutation rate of r means that r×|e| edges in the target network are shuffled to generate a reference network.

real dataset. this dataset consists of five wnt signaling networks in the kegg database. specifically, they are from organisms bos mutus , python bivittatus, pan paniscus , xenopus laevis, and mus musculus .

quality measures. we use various quantifiable measures to evaluate the performance of our method. we first report the distance between the inferred network g and the reference network gr, dist. this criteria measures how well our method constructs the network. smaller values of this measure indicate better results. we have described this distance criteria formally in definition  <dig>  we then report the f-score in terms of the accuracy of the result compared to the real network topology. this criteria measures how successfully our method build true biological network topology. larger values of this measure indicate better results. it is worth mentioning that only if the true result is known, we can calculate f-score to measure the result. next we describe the method to compute f-score.

f-score. f-score considers precision and recall to evaluate the accuracy of the result. we define them with the true positive , false positive , and false negative  terms. we calculate the precision as tptp+fp and recall as tptp+fn. thus, we calculate the f-score as 
 f-score=2×precision×recallprecision+recall 

implementation details & environment. we implemented the holistic optimization and prioritized optimization algorithms using java. we conducted all the experiments on a linux server which has amd opteron dual core processors  and 3gb ram.

default parameter settings. to observe how robust our methods are on the synthetic dataset, we vary a broad spectrum of parameters, such as network size, noise and the number of unknown genes. notice that the topology of the reference network is affected by the network size and the noise level, and the inference method is affected by the number of unknown genes. in our experiments, unless stated otherwise, we always set the default values for these three parameters as follows: network size , noise level , the number of unknown genes .

effects of parameters on the inference methods
to test the robustness of our methods under various parameters, we run experiments on synthetic dataset and compute the accuracy of results. in this respect, we vary the following three parameters:  network size,  noise, and  the number of unknown genes in the network. to observe the impact of each parameter on our methods, each time we only vary one parameter and fix the other parameters to their default values. to ensure the results are reliable, for each parameter, we conduct experiments on  <dig> reference networks and report their average distance dist and running time.

effect of network size. first, we explore the impact of network size. we fix the noise to  <dig> % and the number of unknown genes to  <dig>  we experiment for network size  <dig> , <dig> and  <dig> 

for all different network sizes, we observe that our two methods both successfully build a network topology which is close to the reference network . generally, both of them obtain roughly same distance values. thus, in regards to the quality of the results, no clear winner emerges. on the other hand, we also observe that the distance between g and gr lightly grows as the network size increases. this is because when the noise and density are set, the increase of the network size leads to the increase of the number of edges shuffled.
fig.  <dig> effect of parameters on the inference methods. a, b, and c show the average distance between the constructed and the reference networks for varying network size, noise and number of unknown genes respectively. d, e, and f show the running time of the inference methods for the same setup. the running time is reported in milliseconds  and presented in log-scale



the running time of our methods is significantly fast . even for networks with  <dig> nodes, the running time is only around  <dig> seconds. for all network sizes, we observe that the prioritized optimization runs faster than the holistic optimization method. this is expected since the former one tests fewer constraint combinations. moreover, we also see that the running time of each inference method grows with the network size. this is because the number of edges in the reference network contributes a lot to the complexity of our methods. as the number of nodes grows, the number of edges in the reference networks also grows when the network density is fixed.

effect of noise. next, we consider the impact of noise. we set the network size to  <dig> and the number of unknown genes to  <dig>  we experiment for noise  <dig> %, <dig> %,…, <dig> %.

for all noise values, in terms of the distance between g and gr, we observe similar results with those in . generally, the resulting distance values are roughly same. both methods successfully build a network topology close to the reference network. on the other hand, we also observe that the distance increases with the increase in noise. this is because when the noise grows, the amount of deviation between the reference and the target network will also increase. thus, in order to be consistent with the

rnai constraints, more edge insertions and deletions are expected to happen in the reference network.

the running time of our methods is very fast  . for all noise values, we see that compared to the holistic optimization, the prioritized one runs faster. moreover, we also observe that the running time increases as the noise level increases. one possible reason is that with the growth of the difference between the reference and the target network, more time is needed to reach the smallest distance value.

effect of the number of unknown genes. finally, we focus on the impact of the number of unknown genes. we fix the network size to  <dig> and the noise to  <dig> %. we experiment for the number of unknown genes  <dig>   <dig> and  <dig> 

for all numbers of the unknown genes, like our previous experiments, we observe the similar distance results . both methods have a small distance value. interestingly, as the number of unknown genes increases, we see that the distance values do not noticeably change. thus, our methods are robust to the change of the number of unknown genes.

similar to our other experiments, our methods demonstrate practical running time . both methods construct networks from milliseconds to seconds. we observe that the advantage in running time of the prioritized optimization does not change. moreover, we also see that the running time increases gradually with the number of unknown genes, which is very favorable since there are usually many unknown genes in practical applications.

in summary our experiments show that our methods are robust to various parameters. under a variety of parameter settings, both the holistic and prioritized optimization successfully infer a network topology with a small distance to the reference network. among all three parameters, we observe that the fitness between the predicted and actual network is affected most by the noise level. although both methods yield similar distance values, the prioritized optimization runs much faster. moreover, we also observe that the network size affects the running time of two methods the most. the running time grows with the network size. according to the above discussion, we conclude that the prioritized optimization is more desirable since it obtains the similar distance value as the holistic one in a much faster time. as a result, we apply the prioritized optimization in the remaining experiments.

ranking strategies: sloan vs. topsog
existing methods  <cit>  such as sinec use the sloan algorithm  <cit>  to rank the critical genes in the network. we have already discussed how the sloan algorithm works , its limitations, and developed a new ranking algorithm named topsog . here, we seek the answer to the question whether topsog indeed yields any improvement experimentally. we fix the network size and noise to  <dig> and  <dig> % respectively and vary the number of unknown genes from  <dig> to  <dig>  we compare the performance of our prioritized optimization in terms of the distance between the constructed and the reference networks and the running time when it employs sloan and topsog algorithms.
fig.  <dig> comparison of the sloan and topsog ranking strategies. a shows the distance between the inferred and the reference networks. b reports the running time of the inference algorithm when employed with each strategy in milliseconds 



comparison with the exhaustive search method
as mentioned before, our inference methods employ a heuristic strategy which greedily determine the role of next unknown gene. it is interesting to see how well our methods perform comparing to the deterministic exhaustive approach, which takes all possible combinations of unknown genes into account. to answer this question, we conduct a set of experiments with the synthetic dataset. we change the number of unknown genes from  <dig> to  <dig> with the network size and noise fixed as  <dig> and  <dig> % respectively. for each number of unknown genes, we repeat the experiment with  <dig> reference networks and compute the average.

for all numbers of unknown genes, our method obtains a high accuracy . although our method is heuristic, it obtains similar or even exactly the same distance values as the optimum results produced by the exhaustive approach.
fig.  <dig> comparison of the prioritized and the exhaustive methods. a shows the average distance between the inferred and reference networks. b reports the running time in milliseconds 



besides the accuracy, we also pay attention to the efficiency of our method. we observe that in terms of running time, our method has great advantage . as the number of unknown genes grows, the running time of our strategy grows only quadratically while that of the exhaustive search is exponential . thus, when the networks are large or with great number of unknown genes, using exhaustive strategy is impractical, whereas it only takes negligible time for our method to produce almost the same quality results as the exhaustive strategy.

evaluations on real dataset
in the above sections, we have demonstrated the robustness of our method under various parameters. even though the barabási-albert model is used to simulate the behavior of the real biological networks, slight differences might exist between the resulting and real network topological characteristics. to show the applicability of our method to real networks, in this section, we evaluate our method with a real dataset. networks in this dataset are from the following organisms, bos mutus , python bivittatus, pan paniscus , xenopus laevis, and mus musculus . we set xla and mmu to the target networks, and the rest are taken as references. when two organisms are orthologs, we say that a node  in one network has a corresponding node in another, but it is possible to have nodes not matching between two organisms. if a node is absent in the target network, we remove it and its incident edges in the reference network. we change the amount of unknown genes n from  <dig> to  <dig>  for each n value, we set the constraints of n randomly picked genes from the target gene set to “unknown”. according to the network’s topology, we decide the roles of the remaining nodes, i.e., whether it is critical or not. to ensure the results are reliable, for each parameter, we conduct the experiment for  <dig> times and compute the average f-score of the resulting network.

first, we fix xla as the target network and the rest as the reference. we set nemo-like kinase  and glycogen synthase kinase  <dig> beta  as the receptor gene and the reporter gene respectively. as fig. 5a shows, the f-score of resulting topology is as high as  <dig>  when bom or pps is the reference network. if mmu or pbi is the reference network, the accuracy drops slightly but still remains significantly high, which indicates that the choice of the reference impacts the accuracy of the result. moreover, we find that the accuracy of our method is robust as the number of unknown genes grows. this is very promising since we expect to have many unknown genes in real networks, especially for those less studied organisms.
fig.  <dig> the f-score of the constructed wnt signaling network using different reference networks. a shows the f-score for target network xla. b shows the f-score for target network mmu




then we fix mmu as the target network. we set nemo-like kinase  and naked cuticle  <dig> homolog  as the receptor gene and the reporter gene respectively. we make the similar observation that our method is robust to the growing number of unknown genes while having a high accuracy .

when the rest of the organisms are target networks, we observe the similar results . last, we turn our attention to the running time of our method. in this dataset, each network is inferred within less than  <dig> ms. in summary, our method is a practical tool for constructing real signaling networks because of its efficiency and high accuracy.

CONCLUSIONS
in this study, we presented two novel methods for constructing signaling networks with incomplete rnai data under the guidance of a reference network. these methods infer the network topology, which is consistent with the rnai experiments and is close to a given reference network. we also presented a new biologically relevant gene ranking method for signaling network construction. our experiments showed that the new ranking strategy greatly improve our methods in minimizing the distance to the reference. moreover, both of our methods construct highly accurate signaling networks in a much faster time than an exhaustive research. we observed that although the accuracy of our two methods are comparable, the prioritized optimization method outperforms the holistic method in terms of the running time. application of our method to the real wnt signaling network demonstrated its efficiency and applicability in real signaling networks.

