BACKGROUND
perturbing gene activity and evaluating the resulting phenotype is a fundamental technique for identifying the biological processes in which a gene participates . traditionally, the ability to induce complete gene knockouts on a genomic scale has been exclusively the domain of model organisms such as yeast, while experiments in higher eukaryotes, including human cell lines, have relied on rna interference  or gene trapping methods in the case of haploid human cells  <cit> . rnai uses the endogenous rna-induced silencing complex  machinery to target messenger rna transcripts, which have a very large dynamic range of abundance, resulting in data that is often diluted by incomplete target knockdown and off-target effects of variable severity .

the adaptation of crispr-cas <dig> technology to pooled library gene knockout screens in mammalian cells allows the identification of genes whose knockout contributes to gene fitness . a pooled library screen typically contains several guide rnas  targeting each gene, and large numbers of cells are treated such that each cell is affected by  a single grna clone, while each grna species targets hundreds of cells. unperturbed cells, or cells with knockouts showing no growth phenotype, grow at wildtype rates, while cells harboring a guide rna that targets a fitness gene show lower growth rates . to identify the genes whose knockout causes a fitness defect, the frequency distribution of grna in the population is assayed by deep sequencing and compared to the frequency distribution at an early control timepoint. changes in the frequency distribution of grna are measured as log fold changes  where severe negative fold changes reflect grna that cause severe fitness defects.fig.  <dig> bagel overview. a simulated growth curves of wildtype cells , which double at every time increment. when genetic perturbations are induced , moderate  to severe  fitness defects, growth arrest , and cell death  result in different relative growth rates. at sampled timepoints, fold change relative to wildtype growth is the readout from a sequencing assay. b representative data from one replicate. the fold change distribution of all grna targeting essential genes  is shifted relative to the fold change distribution of all grna targeting nonessential genes . the fold change distribution for all grna  is shown for reference. c the log likelihood functions of the red and blue curves from , left y axis. the bagel method calculates the log likelihood ratio  of these two curves, within empirical boundaries , for each bootstrap iteration; see methods for details



aggregating individual reagent effects into an accurate estimate of gene-level effect is a major challenge in the analysis of pooled library screen data . to analyze pooled library rnai screens, which have similar experimental design, we previously developed a bayesian classifier and demonstrated its superiority over contemporary approaches  <cit> . a key feature of this study was the establishment of reference sets of core essential and nonessential genes. core essential genes were defined as those genes classified as hits in at half or more of the shrna screens in  <cit>  or  <cit> , filtered for constitutive mrna expression across a panel of cell lines, while nonessential genes were defined as those which are rarely expressed across those cell lines  <cit> . together, these reference sets can be used as gold standards to evaluate other algorithms in analyzing fitness screens. here we describe bagel, the bayesian analysis of gene essentiality, an adaptation of the previously described bayesian classifier. bagel features a more robust statistical model, major performance enhancements, and an improved user interface. bagel source code, documentation, and reference files are available at http://bagel-for-knockout-screens.sourceforge.net/.

implementation
the bagel method is implemented as a python script and requires the freely available python modules numpy and scipy. likelihood functions for fold change distributions of grna targeting reference essential and nonessential genes are estimated using kernel density estimates, implemented using the scipy.stats.gaussian_kde() function in the scipy module. bagel input and output are tab-delimited text files described on the bagel website .

methods
a pooled library crispr-cas <dig> fitness screen in human cells involves having multiple grna reagents targeting each gene and is often evaluated at several timepoints, ideally with multiple replicates at each timepoint. bagel first estimates the distribution of fold changes of all grna targeting all genes in either the essential or nonessential training sets . then, for each withheld gene, it evaluates the likelihood that the observed fold changes for grna targeting the gene were drawn from either the essential or the nonessential training distributions. the result is a bayes factor: bf=prd|essentialprd|nonessential=∫prd|k,essentialprk|essentialdk∫prd|k,nonessentialprk|nonessentialdk 

where the data, d, is the set of observed fold changes for a given gene and k is the fold change distribution of the training set, empirically estimated using a kernel density estimate function .

the integral is estimated by bootstrap resampling of genes in the training sets. at each iteration the k distributions are calculated and, for each withheld gene, a log bf is calculated: bfg=prdg|kessprdg|knon  logbfg=logpr−logprdg|knon  logbfg=∑ilogpr 

where fci are the observed fold changes for grna targeting gene g. one thousand bootstrapping iterations are conducted; bayes factors for withheld genes are calculated for each iteration  and the mean and standard deviation of the resulting posterior distribution of bfs is reported.

two factors inherent in the data require that empirical boundaries be applied to the calculations. first, when taking the ratio of two curves, the ratio can take on extreme values when the denominator approaches zero. second, kernel density estimates become unstable in regions of sparse data. for these reasons, we identify the lowest fold change  at which the knon density estimate, the denominator above, exceeds 2− <dig>  and set this as a lower bound . this boundary is, in our experience, a conservative threshold that captures the smooth region of the knon kernel density estimate across all data sets we examined. all observed changes below this boundary are set to the boundary value. similarly, we calculate the fold change at which the log ratio of the curves is a minimum and set this as an upper bound . these boundaries ensure that individual observations do not dominate the final bf score while, in our experience, making no material change to gene estimates: observed fold changes outside these boundaries are not stronger evidence that a gene does or doesn’t induce a fitness defect, given the normal constraints of the experiment . note that this approach makes no statement about whether a gene knockout can increase cell fitness, only whether perturbation causes a growth defect.

for very large crispr libraries, the calculation as described can be computationally expensive. to speed up the calculations, we include two optimizations. first, we round all calculated fold changes to the nearest  <dig> . second, for each bootstrap iteration, we calculate the value of the log ratio function  at each  <dig>  within the empirical boundaries described above and store the values in a lookup table. then, instead of recalculating the values for each grna, we pull the value of the log ratio function from the lookup table. these optimizations decrease processing time by over an order of magnitude, with no impact on final results .

for knockout screens with multiple timepoints, the bf is calculated at each timepoint, and a final bf is the sum of the timepoint bfs. since the posterior bf distributions are approximately normal , the variance of the final bf is estimated as the sum of the variances at the timepoints.

screen performance is evaluated by calculating precision-recall  curves, using the reference essential and nonessential gene lists as the test set. as noted above, during the bootstrap process, bfs are only calculated for genes not selected in the bootstrap resampling of the fold change density estimates; therefore no circularity is introduced. we confirmed this by comparing bf-bootstrap results to bfs calculating using 5-fold cross-validation; the resulting bfs virtually identical . false discovery rate is , precision is 1- fdr, and recall = tp/, where positives and negatives are defined in the reference sets.

RESULTS
we demonstrate this approach with screens from the toronto knockout  library in four cell lines: a patient-derived glioblastoma cell line , hct <dig> colorectal carcinoma cell line , hela cervical carcinoma cell line , and rpe <dig> retinal pigmented epithelial cells   <cit> . all the screens were sampled at multiple timepoints. using the gold-standard reference sets from  <cit> , bfs were calculated for each timepoint and precision-recall  curves were plotted. in all cases, later timepoints showed improved recall over the earliest timepoint. the “integrated” sample is the sum of the timepoint bfs and can be considered a summary result for the entire screen; the pr curve for the integrated sample is in every case as good or better than the timepoint curves. in all cases screens yielded a very large number of fitness genes: on average, ~ <dig> genes at 5 % false discovery rate  using the integrated results, and these genes show very high functional coherence .fig.  <dig> precision-recall curves for bagel results for gbm , hct <dig> , hela , and rpe <dig>  screens using the tko library. where indicated, a single timepoint is plotted. “integrated” = bayes factors summed across all timepoints in the experiment



one question that arises from these results is whether the lower performance at the early timepoint, relative to the later ones, reflects the screening technology or the biology of the systems being perturbed. we address this question by looking at functional enrichment in genes unique to the early hits, genes unique to the late hits, or genes in the intersection, using the gorilla web service  <cit> . we find that most  early hits are also observed at the last timepoint , and that genes exclusively in the early hit set are not meaningfully enriched for annotated biological processes. looking specifically at the gbm cell line as an example, genes in the intersection are highly enriched for core biological processes one could reasonably expect to cause fitness defects . genes in the intersection comprise only 53-65 % of the total number of hits at the last timepoint; however, genes exclusive to the last timepoint typically extend coverage of the biological processes identified in the intersection, as shown for gbm cells in fig. 3b, and identify few novel processes.fig.  <dig> comparing early and late hits. a number of fitness genes detected at early timepoint , late timepoint, , or both  in each tko screen. b representative data from gbm screen. most go_bp terms enriched in late-only genes  extend observations of terms enriched in genes found in both early and late timepoints



though late fitness genes typically reflect the processes observed in early fitness genes, genes which encode proteins involved in mitochondrial function offer an interesting contrast. genes in both the early and late timepoints are enriched for some mitochondrial processes, including protein transport to the mitochondrion and mitochondrial translation. however, the late-only genes are enriched for a small number of go bp terms that are centered around functions related to oxidative phosphorylation, including “respiratory chain complex i assembly” , “respiratory chain complex iv assembly” , and “mitochondrial electron transport, nadh to ubiquinone” . this difference may reflect a more subtle phenotype  among oxphos genes that only becomes detectable at the later timepoint .

we compared bagel to mageck, a contemporary method for analyzing crispr knockout screens  <cit> . mageck ranks grnas by p-value derived from a negative binomial model comparing control to experimental timepoints, then calculates gene-level p-values using modified robust ranking aggregation. to facilitate a more equal comparison, we compared mageck results to bagel results using only the final timepoint from the tko screens described above, and plotted pr curves using the same reference sets . in all cases, bagel outperformed mageck, yielding more recall and more overall hits in a reasonable range of empirically-calculated fdr . most striking, however, was the severe lack of sensitivity using the theoretical model of mageck. although gene rankings for the two methods were generally similar , the mageck algorithm yielded only  <dig>  genes at 10 % fdr, using its own fdr estimates . we are confident that the higher numbers of fitness genes detected by bagel are in fact real: we analyze their expression level, biological function, and other functional genomic data in detail in  <cit> .fig.  <dig> comparing bagel with mageck. for each cell line, precision-recall curves were plotted for bagel and mageck results using the last timepoint of the screen. red circle indicates results at mageck-reported 10 % fdr cutoff. a-d tko screens from hart et al.  <cit>  e-h screens from wang et al.  <cit> 



we also compared the two algorithms using a newly published data set from wang et al.  <cit> , where four leukemia and lymphoma cell lines were screened for essential genes using a large grna library. as with the tko screens, the bagel algorithm yields equal or superior precision-recall curves and greater sensitivity, though with a smaller margin of improvement . mageck identifies  <dig>  hits at 10 % fdr while bagel identifies on average  <dig>  essential genes at 5 % fdr.

the reason behind the difference in sensitivity between bagel and mageck likely lies in the variable effectiveness of crispr reagents. examining the fold change distribution of all guides targeting genes in the reference set of high-confidence essentials , it is evident that many grnas targeting essential genes do not show significant dropout. the bagel algorithm chooses between the essential and nonessential distributions, and is able to detect even a slight shift in overall effect, whereas a statistical test based solely on excluding the null hypothesis – generally speaking, that the observed fold changes are not likely to be drawn from the blue curve in fig. 1a—requires either deeper sampling  or a more severe phenotype. in fact, this is reflected in the mageck results for the four tko cell lines tested: the gbm and rpe <dig> cell lines were screened with a 90 k library and mageck yielded  <dig> and  <dig> hits, respectively, while the hela and hct <dig> lines were screened with a 177 k library and mageck yielded  <dig> and  <dig> hits – on average, ~50 % more hits using the larger library. the screens described in wang et al. used a sequence-optimized 180 k grna library and used a more conservative experimental design, resulting in a lower proportion of non-performing guides and contributing to substantially improved sensitivity for both bagel and mageck, though bagel still identifies ~50 % more hits in each screen.

CONCLUSIONS
the ability to perform accurate, saturating forward genetic screens in human cell lines will transform molecular genetics in the coming years. to maximize potential—and to avoid pitfalls similar to the costly false starts encountered in the rnai field—rigorous analytical methods must be applied that are able to effectively discriminate true hits from false positives. while data suggests that off-target effects in crispr-cas <dig> pooled library screens are much less of a concern than with rnai, the variable effectiveness of early reagent pools makes it important that analytical methods are able to detect subtle phenotypes. bagel accurately models the wide variability in phenotype shown by reagents targeting known essential genes, enabling the sensitive and precise identification of fitness genes, even under conditions of suboptimal data quality.

availability and requirements
project name: bagel-for-knockout-screens

project home page: http://bagel-for-knockout-screens.sourceforge.net/

operating system: platform independent

programming language: python

licensing: this software is provided without restriction for commercial or academic use.

tko screen data are available at http://tko.ccbr.utoronto.ca/

competing interests

the authors declare that they have no competing interests.

authors’ contributions

th developed the algorithm and wrote the software; th and jm wrote and edited the manuscript. both authors read and approved the final manuscript.

