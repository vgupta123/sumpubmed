BACKGROUND
elucidating unifying features of protein-ligand interactions in systems showing a diversity of interaction modes remains a challenging problem, often requiring extensive human intervention. in this work we present an automated general approach to identify these features using inductive logic programming . we apply ilp to study the factors relevant to protein-hexose binding.

hexoses are 6-carbon monosaccharides involved in numerous biochemical processes, including energy release and carbohydrate synthesis  <cit> . several non-homologous protein families bind hexoses using a diverse set of protein-ligand interactions. several research groups have used computational techniques to model and analyze hexose- and sugar-protein interactions, often employing extensive visualization and empirical methods  <cit> . some techniques use surface and binding site similarities to search for matching functional sites in other proteins  <cit> . others apply machine learning algorithms to construct sugar-specific classifiers  <cit> . such classifiers can be combined with programs that detect protein surface-pockets of a given size  <cit>  to discriminate potential binding-sites.

recently nassif et al.  <cit>  used the ilp system, aleph  <cit> , to study hexose binding. a powerful feature of ilp is that, in addition to prediction, it automatically learns rules which can be readily understood. it has been successfully applied to predict and model various medical  <cit>  and biological datasets  <cit> . however, the complexity and size of the hypothesis space often presents computational challenges in search time which limit both the insight and the predictive power of the rules found.

recognizing the limitations of aleph and other current ilp systems, muggleton et al.  <cit>  developed progolem to facilitate the learning of long, complex rules. such rules are common in molecular biology and we propose that a sophisticated ilp system such as progolem is a promising approach to automatically learn these rules from molecular data.

the present work extends previous hexose prediction work in several ways. first we supplement the background knowledge with both atomic and amino-acid information. second, we bias the hypothesis space to reduce the search space and increase the likelihood of generating meaningful rules. third, we employ the newly-developed progolem, which has been shown to learn better than aleph in highly non-determinate domains such as this hexose-binding application. finally, we explore several approaches to curb the limitations of the recall bound, the maximum number of times a predicate may succeed, in ilp systems.

the combined usage of an extended background knowledge, a better biased search, and the ilp system progolem allowed the discovery of more accurate and insightful rules explaining the stereochemistry of hexose binding. automatically finding these stereochemical rules and providing their explanation is the main contribution of this paper. while some of the rules progolem found were already known from the literature, other rules, namely one that specifies a dependency over residues cys and leu, have never been reported but are plausible and require further investigation.

predicting whether an actual protein binds an hexose is of secondary importance to us. nevertheless, the predictive accuracy of our approach is competitive to statistical learners such as support vector machines and superior to the logic-based approach aleph applied to study hexose/protein interactions  <cit> .

dataset
for ease of comparison, we use the same dataset and cross-validation folds described in nassif et al.  <cit> . they obtained the positive examples from the protein data bank   <cit>  by selecting proteins with coordinates for bound ligands from the most common hexoses: galactose, glucose and mannose  <cit> . theoretical structures and files older than pdb format  <dig>  were ignored. glycosylated sites and redundant structures  were also ignored. the positive subset consisting of  <dig> protein-hexose binding sites  is presented in table  <dig> 

the table lists the protein’s pdb id and the hexose ligand considered.

their negative dataset consists of  <dig> pdb examples:  <dig> binding sites that bind hexose-like ligands ,  <dig> other-ligand binding sites and  <dig> non-binding sites. the non-binding sites are surface pockets that look like binding sites but are not known to bind any ligand. the negative dataset is presented in table  <dig>  and table  <dig> .

the table lists the protein’s pdb id, the ligand considered and the specified cavity center.  <dig> ligands are similar to hexoses in shape and/or size. the cavity center is the centroid of the reported pdb atom numbers.

the table lists the protein’s pdb id and the specified cavity center, computed as the centroid of the reported pdb atom numbers.

the data also specify the center for each of the resulting  <dig> examples. the binding-site center is computed as the hexose pyranose ring centroid for the positive examples, and as the ligand or empty pocket centroid for the negative ones. the hexose pyranose-ring atoms are located up to  <dig>  Å away from the ring’s centroid. since some atomic interactions can be important up to  <dig> Å  <cit> , we consider the binding-site as all protein atoms present within a  <dig> Å radius sphere around the binding center. all other atoms are discarded.

inductive logic programming
ilp is a machine learning approach that generates a hypothesis composed of a set of logical if-then rules that explains a given dataset  <cit> . ilp has three major advantages over other machine learning and data mining techniques. first, it allows an easy interaction between humans and computers by using background knowledge to guide the search. second, it returns results in an easy-to-understand if-then format. finally, ilp can easily operate on relational databases, as relational databases are naturally expressed as relations in first-order logic.

most leading ilp approaches start by a saturation step, randomly selecting a positive example for which they construct the bottom clause: the most specific hypothesis that explains the example. this most specific clause is the rule formed by the conjunction of all features  pertaining to the chosen example. in the reduction step, ilp generalizes this rule  to include other positive examples using one of two basic induction methods, generalization or specialization.

aleph, using a specialization approach, starts with the most general hypothesis, “all sites are hexose-binding sites”, calling all examples positives. it then refines this hypothesis by repeatedly adding the literal from the bottom-clause that best improves the hypothesis score. the new rule will be more specific, covering only a subset of the examples previously covered.

progolem, in contrast, uses a generalization search. starting with the bottom clause, it successively drops a minimal set of literals to allow coverage of one additional positive example. by dropping this set of literals the clause becomes more general, and will cover a superset of the examples previously covered.

both progolem and aleph stop hypothesis refinement when the hypothesis score stops improving. a rule scores well if it covers many positive and few negative examples. if the rule passes a certain performance threshold, it is added to the theory, and all the positive examples it covers are removed. the cycle of saturation and reduction continues on the remaining examples. when all positive examples are covered or no new rules can be found, the ilp system outputs its theory, the set of the best rules found so far. then, in the testing stage, a new instance is classified as positive  if it is covered by any of the theory rules, otherwise it is labeled as negative.

the newly developed progolem is more than a specific-to-general version of aleph. two additional features set it apart. aleph adopts a local theory construction method, incrementally adding a new rule to its theory after each reduction cycle. this method depends on the ordering of the positive examples, and it is possible that the best rules are not generated. this situation may occur if these better rules would be generated by examples that were removed by previous sub-optimal rules. by contrast, progolem implements a global theory construction approach, which ensures that the theory is only constructed after all rules have been generated. progolem repeatedly adds to the theory the rule that best improves the global theory score. the global-theory-construction feature of progolem is especially useful in this application.

the second feature makes progolem specifically suitable for our application. in ilp an example can have multiple instances from the same predicate. for example, a binding site has multiple atoms. if a predicate has more than one possible solution, it is called non-determinate. hence the site has_atom predicate is non-determinate. our hexose dataset is highly non-determinate.

when evaluating a clause, aleph will proceed literal by literal from left to right. this is the standard selective linear definite  resolution  <cit> , which is the only option in most ilp systems. however, progolem has to evaluate longer clauses than aleph due to its specific-to-general hypothesis search. sld-resolution is too slow to compute the coverage of such long clauses. to cope with this problem progolem supports the usage of different resolution engines, including the smallest variable domain resolution, which enumerates the possible values a variable in a literal may take and, during clause evaluation, chooses at each moment the variable with the smallest domain  <cit> . this clause evaluation engine is better suited to our problem than sld-resolution, drastically reducing the runtime per evaluated clause.

background knowledge
the background knowledge is the set of features, facts and rules known a priori. this is given to the ilp system as a basis for learning and constructing the classification rules. the piece of background knowledge central to our task is the binding site representation. table ?? is an excerpt of the background knowledge for protein 1bdg. the center_coords predicate specifies the binding-site center coordinates, which is the pyranose ring centroid of the bound glucose in this structure. the has_aminoacid predicate specifies each amino acid present within the protein binding site, listing its unique identifier and name. the has_atom predicate details the residue atoms, specifying the pdb atom name and its coordinates. by extracting the coordinates of the center and the various atoms, we compute their respective distances. we set a tolerance of  <dig>  Å on distances between atoms, a sensible error margin in a hexose binding site  <cit> .

in addition to these facts, ilp allows for a higher level of expressiveness within its background knowledge: human coded rules. using the facts of table  <dig>  and the euclidean distances between atoms that are derived from this data, we can now define the predicates atom_to_center_dist and atom_to_atom_dist. these predicates respectively compute the distance between an atom and the binding-site center, and between two atoms. we also define a diff_aminoacid predicate which allows expressing that two amino acids are different. this may be relevant when there are multiple amino acids of the same type and each amino acid needs to be individually identified.

since 1bdg is a hexose-binding protein, center_coords/ <dig> predicate states the coordinates of the hexose binding center. the has_aminoacid and has_atom predicates state the coordinates of the amino acids and atoms in a neighborhood of  <dig> Å of the binding site center.

hypothesis space
we experiment with multiple hypothesis spaces. similarly to nassif et al.  <cit> , we first exclude residue information and limit the background to the atoms and their 3d coordinates. in this atom-only representation, the binding site is a sphere of radius  <dig> Å containing atoms in space, for which distances can be computed .

the /n indicates the arity of the background knowledge predicate. for instance, given a binding site, the center_coords predicate returns the coordinates of its center .

the distances between atoms are computed by having a dist literal in the ilp background knowledge, allowing ilp systems to express the 3d conformation of the binding site. however, the number of possible distances grows quadratically with the number of atoms considered, resulting in an exponential growth of the bottom clause. starting its generalization search from the bottom clause, progolem learning time is highly sensitive to its length. to keep learning tractable, both progolem and to a lesser extent aleph, require a bound on the maximum number of solutions a given predicate may return, called the recall . in practice this recall bound limits the hypothesis search space by forcing that only the firstrecall solutions of a literal be considered in the bottom clause.

by relying on the ordering of the atoms and residues in the background knowledge, having a bound on the recall of a predicate is an approach subject to data idiosyncrasies as the ordering of the background knowledge predicates is arbitrary and only the first recall are considered. in this work we explore two alternative approaches of organizing the background knowledge to curb the limitations of having a recall bound. the first approach, randomized recall, considers all solutions first, out of which it randomly picks a number equal to recall; rather than the first recall atoms in the binding-site data representation. this is achieved by either altering the internal recall routine, as we did, or equivalently, by randomizing the order of the atoms and residues in the background knowledge.

the second approach is domain-dependent. using random forests to measure feature importance  <cit> , nassif et al.  <cit>  show that atoms closest to the binding center have higher discriminative power. closest atoms are more likely to determine whether or not the binding site binds hexose, as compared to more distant atoms. the domain-dependent approach orders the atoms and residues in the background knowledge by their distance from the binding site center. for instance, in this approach, the distance literal will attempt to match the recall atoms closest to the binding center.

another contribution of this work is the re-modeling of the problem representation and a better bias to the hypothesis space. we propose two major improvements to the atomic representation. first is the inclusion of residues using the has_aminoacid predicate. the second is imposing that atoms cannot appear dangling in a hypothesis. a residue has to be introduced into a rule first, before atom_to_atom_dist and atom_to_center_dist predicates compute its atomic distances. we thus only compute distances between atoms of residues already in a rule. in this amino acid representation, the binding site sphere is composed of amino acids, which in turn contain atoms .

by first dealing with residues instead of atoms, the binding site sphere now contains a smaller number of elements. in addition, in the amino acid representation we can express the distance between two atoms using only one literal, atom_to_atom_dist. a rule can contain up to recall residues, and for each atom of a given residue we measure its distance to recall atoms of each one of the included residues. in contrast, in the atom-only representation we need three literals to express a distance, two has_atom and one dist. a rule can contain only recall atoms, and each atom can only detect recall other atoms in the feature space. thus, for the same recall bound, the amino acid representation considers both more features and generates more informative clauses than the atom-only representation.

english translation: a protein is hexosebinding if the n and od <dig> atoms of an aspartic acid are  <dig> +/- <dig>  angstroms away from each other and the c atom of this aspartic acid is  <dig> +/- <dig>  angstroms away from the binding center, a leucine and a cysteine are also present.

methods
all materials  to reproduce these experiments are available at http://www.doc.ic.ac.uk/∖∼jcs06/hexose.

ilp settings
we apply two ilp systems, aleph and progolem, with both atom-only and amino acid representations, and use yap  <dig> . <dig> as the prolog compiler  <cit> . to ensure a fair comparison, we use the same settings for both ilp algorithms whenever possible. we set the recall bound to  <dig>  and the maximum number of negatives a hypothesis may cover to  <dig>  we evaluate clauses according to the usual scoring function in ilp, compression: positive examples covered - negative examples covered - clause length. for instance, for the same clause length, say  <dig> literals, a clause covering  <dig> positives and  <dig> negatives has a better score  than one covering  <dig> positives and no negatives .

we use progolem with its global theory construction and smallest variable domain resolution. in aleph, we set the number of nodes to be explored when searching for an acceptable clause to  <dig>  the clause length in aleph, i.e. the maximum number of literals allowed in a hypothesis, was set to match the clause length that progolem generates . if the same clause length was used in both representations, the predictive accuracies of aleph would be lower. in progolem, the user does not need to specify the maximum clause length of a rule, as the hypothesis search is from specific to general.

homology and cross-validation
our dataset consists of  <dig> binding sites, belonging to  <dig> unique proteins . these  <dig> proteins belong to a total of  <dig> cath  <cit>  superfamilies. in order to guarantee that rules are not being learned from homologous proteins, the correct procedure is that each cross-validation fold does not contain proteins whose superfamilies  also occur in other folds.

unfortunately, with this particular dataset, it is impossible to construct cross-validation folds that verify this non-sharing superfamily constraint. this is because the binding site may span multiple chains, each belonging to a different superfamily. moreover, a single chain may be subdivided into domains, each belonging to different cath superfamilies. thus, if binding site a belongs to superfamilies sf <dig> and sf <dig>  b to sf <dig> and sf <dig>  and c to sf <dig> and sf <dig>  the binding sites a, b and c must be in the same cross-validation fold. with our dataset, this constraint would result in a single cross-validation fold containing  <dig> binding sites  out of  <dig>  creating a significant imbalance between folds.

given this impossibility, and in order for our results to be comparable with previous work, we performed a 10-fold cross-validation using the same folds as  <cit> . since the number of hexose binding proteins is limited, the dataset proteins share a low sequence identity , and the main goal of this paper is to provide insight into the hexose-binding discriminating process rather than the predictive accuracy of the classifiers, we consider our methodology acceptable. each fold consists of  <dig> positive and  <dig> negative examples. following standard machine learning technique, where for small datasets a large number of folds is needed, we train progolem on  <dig> folds  and test on the remaining fold , repeating this process  <dig> times such that each fold is used for testing once  <cit> . we use the testing fold results to compute the relevant statistics. when comparing two approaches or algorithms on the  <dig> folds, we consistently use a two-tailed paired t-test at the 95% confidence level.

RESULTS
it is important to note that the main aim of this work is to discover rules describing the stereo-chemistry of protein-hexose binding. although there is empirical evidence suggesting that many hexose dockings are not accompanied by substantial protein conformational changes  <cit> , we do not aim to predict the binding sites of new hexose-binding proteins, as we would not know in advance the coordinates of the hexose ligand. nevertheless, we use 10-folds cross-validated predictive accuracies as a measure to demonstrate the robustness of the rules.

altering progolem recall
simply relying on the given order of the background knowledge introduces placement bias. both randomizing recall selection, and incorporating domain knowledge by ordering the atoms according to their distance to the binding site center, significantly improves accuracy when compared to the given pdb ordering . this showcases the importance of domain knowledge, whereas clever manipulations based on prior knowledge will have better results compared to default settings. we also argue that randomizing recall selection should be used as default since it avoids data idiosyncrasies.

as explained previously, an important parameter when running ilp systems, is the recall bound, which imposes a bound on the maximum number of solutions a given prolog predicate may return. since, for performance reasons, the recall setting has to be limited to a relatively low value, we started by performing experiments to determine how to best order the atom and residues to get the most out of a limited recall.

we considered three schemes. the first considers the atoms of the protein according to the order of their occurrence in the pdb file, which follows the order of the primary sequence. the second scheme randomizes the order of the atoms in the background knowledge. the third scheme, domain-dependent, orders the atoms by their distance to the binding-site center.

using the atom-only representation, the three approaches respectively yield an accuracy of  <dig> %,  <dig> % and  <dig> %. sorting the binding-site atoms according to their distance from the binding center outperforms randomizing them, which in turn outperforms using their pdb sequence order. we therefore adopt the domain-dependent approach to organize the atoms and residues in the background knowledge in all our subsequent runs, involving both ilp algorithms  and both data representations .

progolem performance
the  <dig> besides aleph and progolem stands for the atom-only representation and the  <dig> for the amino acid representation. svm uses a different representation .

from table  <dig> we notice that progolem performs better using the enhanced amino acid representation rather than atom-only . however, the amino acid representation yields no statistically significant improvement in aleph . a possible explanation as to why progolem takes advantage of the amino acid representation more than aleph is the myopia effect  <cit> . the myopia effect occurs because general-to-specific ilp systems, like aleph, indirectly assume literals are conditionally independent given the target class. they refine the working hypothesis by adding one literal at a time, the one that maximizes a fitness function. if literals have a strong conditional dependency, any selected literal will roughly have the same score. thus multiple literals need to be added before aleph can determine which set is optimal. if the literals are highly non-determinate, as is our case, a significant portion of the search resources is wasted searching very similar hypotheses, which results in a poorer chance of finding good theories.

progolem outperforms aleph for both representations . the differences in their predictive accuracies are statistically significant for both atom-only  and amino acid  representations, the latter being significant even at the 99% confidence level. this discrepancy is in part explained by progolem’s global theory construction, which only constructs the final theory after all hypotheses have been generated rather than incrementally, on a per-example basis, as aleph does.

finally, we compare ilp to svm. despite amino acid progolem having a higher average accuracy and a lower standard deviation than svm, the difference is not statistically significant . more surprisingly, svm does not significantly outperform amino acid aleph . svm significantly outperforms both aleph  and progolem  in the atom-only representation.

insight from rules
in this section we present the english translation and the biological explanation for some of the most relevant rules found by progolem using the amino acid representation. although these particular rules were generated from the whole data set, the rules found on each cross-validation fold are similar; the themes associated to hexose-binding are consistently identified by progolem on each fold. the actual positive and negative examples covered by each rule are presented in table  <dig> 

according to progolem, a site is hexose-binding if: 

 <dig>  it contains two different asn residues and an asp residue whose cg atom is  <dig> ± <dig>  Å away from the binding center.

 <dig>  it contains an asn whose n and c atoms are  <dig> ± <dig>  Å apart, and a glu whose cb and cg atoms are  <dig> ± <dig>  Å and  <dig> ± <dig>  Å away from the binding center, respectively.

 <dig>  it contains an asn residue whose n atom is  <dig> ± <dig>  Å away from the binding center, and an asn residue whose n and nd <dig> atoms are  <dig> ± <dig>  Å apart and whose n and o atoms are  <dig> ± <dig>  Å apart.

 <dig>  it contains a trp residue whose cb atom is  <dig> ± <dig>  Å away from the binding center, and whose n and cd <dig> atoms are  <dig> ± <dig>  Å apart.

 <dig>  it contains a tyr residue whose cb and oh atoms are  <dig> ± <dig>  Å apart, a his residue whose nd <dig> atom is  <dig> ± <dig>  Å away from the binding center, and a tyr residue whose o atom is  <dig> ± <dig>  Å away from the binding center.

 <dig>  it contains cys and leu residues, and an asp residue whose n and od <dig> atoms are  <dig> ± <dig>  Å apart, and whose c atom is  <dig> ± <dig>  Å away from the binding center.

note that the binding center is the hexose pyranose ring centroid, and that up to the first  <dig> Å of the distance between a binding-site atom and the binding center are occupied by the docked hexose. in addition, hydrogen atoms are generally not included in pdb files. thus the presence of an atom may be a surrogate for its hydrogen involved in a hydrogen-bond.

the first rule requires the presence of an asp and two asns. previously, rao et al.  <cit>  highlighted the importance of both residues in hexose binding. studying the lectin protein super-family, they report that the 3d positions of binding-site asp and asn residues are conserved. this holds despite lectins binding various types of hexoses and exhibiting different sugar-binding specificities.

that same rule requires the aspcg atom to be  <dig>  Å away from the centroid of the hexose pyranose ring. the pyranose radius itself being  <dig> Å, the asp actually interfaces the docked hexose. binding-site interface residues are key for hexose recognition and binding  <cit> , especially planar polar residues that establish a network of hydrogen bonds with the various hydroxyl groups of the docked hexose  <cit> . quiocho and vyas  <cit>  report that the most common planar polar amino acids involved in hexose binding are mainly asp and asn, followed by glu. progolem detects the role of glu in the second rule.

the second rule also implies a specific conformation with a triangular distance between glu’s cb and cg atoms, and the binding center. sujatha and balaji  <cit>  report that spatial disposition of protein-galactose interacting atoms is not conserved per se, but is conserved with respect to the docking position of the ligand. similarly, progolem often specifies the distance of an atom with respect to the centroid of the hexose.

an additional advantage of inducing rules using ilp is the straightforward reverse-engineering to find the particular proteins, residues and atoms covered by a given rule. this is achieved by executing the ilp rule in a prolog interpreter. as an example, figure  <dig> visualizes the second rule with protein 1hiz, a xylanase. the hexose ligand is depicted with its backbone in light pink. the two amino acids involved in the rule, a glutamic acid and an asparagine, have a white backbone. the relevant distances are shown.

in addition to specifying the distance from the binding center, progolem can detect specific amino acid stereochemical dispositions. the third rule determines a particular asn conformation, specifying the distances between backbone n and o atoms, and the side chain nd <dig> atom. the various spatial dispositions of the different rules need further investigation to compare them with known 3d hexose binding-site conformations.

the aromatic residues  provide a stacking platform for the hexose to dock on  <cit> . the hexose pyranose ring forms a planar apolar hydrophobic side that stacks, through hydrophobic and van der waals interactions, over the aromatic residues planar apolar hydrophobic side chain ring  <cit> . similarly, the progolem fourth rule requires the presence of trp in a particular stereochemical conformation.

the fifth rule requires the presence of one or two tyr, and a his. this rule is thus describing a conformational representation of two or three aromatic residues around the binding-site center. it is interesting that this low-coverage rule may indeed be capturing the infrequent sandwich interaction, whereby two or more aromatic residues engage both faces of a hexose pyranose ring  <cit> .

the last rule specifies cys and leu residues. both have negative interface propensity measures  and do not form hydrogen bonds with hexoses  <cit> . to quantify the disposition amino acids to be in contact with the docked sugar, taroni et al.  <cit>  devised an interface propensity measure, defined as the logarithm of the ratio between a surface residue frequency at the sugar binding site, and the average frequency of any surface residue at the binding site. they compute and report the sugar-interface propensity measure for the  <dig> common amino acids. a residue with a negative propensity measure does not favor the sugar binding-site region since it is present there less frequently than average.

this rule covers  <dig> positive examples and no negative examples, and clearly specifies the presence of cys and leu as a discriminative factor for hexose-binding site recognition. this dependency over leu and cys is not previously identified in literature and merits further attention.

CONCLUSIONS
inductive logic programming  is a leading technique to mine accurate and comprehensible rules. the newly developed ilp system progolem is well suited for complex non-determinate problems as often found in biological datasets. in our hexose-binding application, its predictive accuracy is significantly better than previous approaches, while showing a clear insight of the underlying discrimination process.

progolem was able to infer different aspects of the established biochemical information about hexose-binding, namely the presence of a docking aromatic residue, the importance of interface atoms, and the hydrogen-bonding activity of planar-polar residues . progolem also detected the less common aromatic sandwich interaction.

in addition, progolem reveals an important previously unreported finding: a dependency over residues cys and leu. it also specifies stereo configurations involving aromatic and hydrogen bonding residues. the newly reported relationship and 3d conformations require further investigation.

finally, we recommend randomizing the recall selection by default and have implemented this option in progolem. we also note that incorporating domain-dependent knowledge in parameter settings is likely to lead to the best results.

competing interests
professors muggleton and sternberg are directors and shareholders in equinox pharma ltd, a company which commercializes inductive logic programming in the areas of bioinformatics and chemoinformatics. the remainder authors have no competing interests.

authors’ contributions
jcas developed the progolem ilp system under the supervision of shm. progolem’s theoretical foundations were laid out by shm. hn created the hexose dataset and performed the support vector machines evaluation. hn and page did the initial experiments with aleph. jcas undertook the current experimental evaluation between progolem and aleph. jcas, hn and mjes wrote the paper. all authors read and approved the final manuscript.

