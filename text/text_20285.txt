BACKGROUND
bayesian markov chain monte carlo  analysis provides powerful and popular techniques for performing phylogenetic analysis. the result of such an analysis is a set of trees drawn from the posterior distribution. the set of correlated draws is often condensed into a single tree for visualistion, comprehension, annotations and presentation. when most trees agree in topology and branch lengths, the most frequent tree topology, properly annotated, can give a fair representation of the posterior distribution.

however, a single tree can be misleading, especially when the agreement between posterior trees is small. posterior tree topologies can be reduced to a set of common sub-topologies  <cit> , but this is also a fragmented view of the posterior. tree drawing programs such as figtree  <cit>  can annotate internal nodes with the clade posterior support , and the credible interval of internal node ages.

still, the choice of any specific topology highlights one alternative at the expense of others. the tree drawing program densitree draws all posterior trees transparently  <cit> . where most trees agree in topology and node height, lines are close to each other and distinct edges appear, while areas of uncertainty in topology or heights remain a blur. the composite image allows a direct assessment of posterior support and node height uncertainty by visual inspection. but even the display of the full posterior can be hard to interpret when the uncertainty gets large, and a summary tree overlaid on top can be useful in such situations.

there are many ways of obtaining a “representative” tree topology from a collection of trees. one group of methods look for consensus among the trees using splits, clusters or rooted triplets/quartets present in posterior trees  <cit> . the treeannotator utility in beast  <cit>  uses the clade frequencies as estimated by the posterior to score each tree, selecting the rooted topology of the highest scoring tree amongst the set. this results in a fully resolved topology with a non zero support, in contrast to consensus methods which often produce unresolved trees. a recently published method uses conditional clade splits probabilities to compute a probability for each posterior tree  <cit> .

however, selecting a representative topology is only the first step in generating a summary tree from the output of programs such as beast. beast trees are rooted with branches proportional to time, as is the summary tree. in the second step, treeannotator assigns a divergence time for each clade using the ages of matching clades from the posterior. if the number of trees containing the clade is small, the divergence time estimate can have high variance which may result in negative branch lengths. clades in trees from the mcmc samples which do not appear in the summary tree are essentially ignored, and sometimes a large proportion of the posterior goes unrepresented. ignoring non-matching parts appears to be the accepted practice and is used in the sumtrees utility in dendropy  <cit> .

in this paper we describe several new ways for building rooted summary trees. these new constructions use more of the information contained in the posterior even when the disagreement between posterior trees is high. some of the methods are based on rooted tree distances, and are similar in spirit to the method developed by huggins et al. for unrooted trees  <cit> . we perform an extensive simulation study and compare the trees from all methods using multiple criteria. summary trees are assessed with respect to the posterior and by their distance to the tree used in generating the sequence data. the methods are implemented in biopy  <cit> , and integrated with densitree, making it easy to examine the summary tree in the context of the full posterior.

methods
definitions and notations
we define a rooted tree as a collection of clades with ages. specifically, a tree is a strict hierarchy of clades, where each clade is a subset of the taxa, and a non-negative age is associated with each clade.

formally, a tree t is a triplet , where l=x <dig> x <dig> …,xl is the set of taxa and ℂ=c <dig> c <dig> …,cn is a set of clades. each clade ci⊆l is a subset of taxa, and h:ℂ→ℝ≥ <dig> is a function assigning an age to the clade. the set ℂ describes only the clades hierarchy and is referred to as the tree topology. sometimes we shall use c∈t as a shorthand for t=andc∈ℂ .

to qualify as a tree, the following conditions must hold: 

i the tree contains all leaves: ∀i{xi}∈ℂ.

ii the tree contains a root: l∈ℂ.

iii strict hierarchy of clades: for any two clades c <dig> c2∈ℂ, either c1⊂c <dig>  c2⊂c <dig> or c1∩c2=∅. 

iv non-negative branches: for c <dig> c2∈ℂ, c1⊂c2⇒h≤h.

for any clade c, the elements in the set a={y∈ℂ:c⊂y} are called ancestors of c, and the minimal element p in a is the parent of c. every clade except the root has a parent and by association a branch to its parent with length b=h)−h. for convenience, the branch length of a subset not in  is defined as zero. any subset of taxa x has a most recent common ancestor in the tree, the minimal clade containing all members of x. formally, ca is the minimal element of {y∈ℂ:x⊆y}. for brevity we omit the tree when the context is clear, and use ca to explicitly associate the clade with the tree t.

extending the domain of b to all taxa subsets simplifies definitions involving sets of trees with different topologies. we extend h for the same reason and define the age of any subset x⊆l to be the age of the common ancestor of x,h¯=h).

using h¯, we define the heights error, a discrepancy score between clade ages of t= and a reference tree tref, 

  εh=∑c∈ℂ|h−h¯ref|. 

the heights error is the total sum of clade age errors, whether they appear in the reference tree or not. the age of a clade which is not in the reference tree is taken to be the age of the mrca of the clade taxa, which spans a larger clade in the reference tree. note that the definition is not symmetric. alternatively we define the divergence times error which focuses on the time lineages split from each other. the divergence time for any clade x⊆l is the mean divergence time of all pairs of x. formally, we start with the pairs of taxa which split at the clade; those are the pairs in x whose common ancestor is the clade, 

  d=a,b∈x:ca=x. 

now the average split time is the mean of all pair splits, 

  h~=|d|−1∑a,b∈dh¯. 

finally, the total error is, 

  εd=∑c∈t|h−h~| 

the clade and divergence errors are equal for trees with the same topology, but they differ when topologies disagree, and the difference usually increases with the distance in topology.

the clades missed error counts the number of clades in tref not present in t, 

  εcm=|ℂref|−|c∈ℂ∩ℂref:b>0|. 

this number is equal to  the robinson-foulds tree distance  <cit>  when t has no zero length branches. a clade with a zero branch does not count as a match because it is potentially confused with its parent. the clades called error scores a  <dig> for correctly called clades and a - <dig> penalty for incorrectly called clades, 

  εcc=|c∈ℂ∖ℂref:b>0|−|c∈ℂ∩ℂref:b>0|. 

a tree sett=t <dig> t <dig> …,tk is a set of trees on shared taxa. typically those sets are samples from a bayesian analysis, and we define the posterior frequency f of x⊆l as the fraction of times x is present as a clade in the trees: 

  f=1|t||t∈t:x∈t|. 

the posterior frequency of a subset not in any of the trees is zero.

distance between trees
the rooted branch score  measures the distance between two rooted time trees, and is the total sum of the difference in branch lengths of matching clades. this definition is motivated by the distance between unrooted trees  <cit> , but the space of rooted trees is more complex than its unrooted counterpart since branch lengths are not free to vary independently of each other  <cit> . since by convention the branch length of a missing clade is zero, any clade present only in one tree contributes its total length to the score.

formally, for t1= and t2= we have, 

  rbs=∑c∈ℂ1∪ℂ2|b−b|. 

the squared branch score  is similar, but taking the square of the difference instead of the absolute value, 

  srbs=∑c∈ℂ1∪ℂ2−b) <dig>  

the heights score  takes the difference between clade ages instead of branches. like the rbs, branches appearing in only one tree are added to the sum, 

  hs=∑c∈ℂ1∩ℂ2|h−h|+∑c∈ℂ1∖ℂ2b+∑c∈ℂ2∖ℂ1b. 

the heights score is a  edit distance, where the score is the total sum of a sequence of moves which transform one tree into the other. each move involves sliding an internal node, and two nodes may “merge” into one when they meet.

the rooted agreement score  measures the disagreement between branches by treating them as intervals. two branches may be of the same length and still contribute to the distance if they span different intervals as measured from the time of the tips. the score, when divided by the sum of the length of the two trees, is the probability that a random point chosen uniformly on one of the trees has a corresponding point on the other tree. formally, 

  ras=∑c∈ℂ1∩ℂ2μb⃗△b⃗+∑c∈ℂ1∖ℂ2b+∑c∈ℂ2∖ℂ1b, 

where b⃗ is the interval spanned by the clade branch, b⃗= and △ is the symmetric difference operator, that is 

  μ=+−2max−max,0). 

rbs and ras are metrics in tree space, while srbs and hs are not. rbs is a metric since branches can be mapped to the vector space ℝ2n− <dig> <cit> , and a similar argument works for ras. however, we only require that distances are semimetrics and make no use of the triangle inequality.

summary trees
beast tree annotator
the tree annotator utility in beast generates a summary tree using a two stage procedure. first, each posterior tree is assigned a score based on topology. the clade credibility of a tree is the product of posterior frequencies ) of all clades in the tree, 

 cc)=∏c∈cf. 

the maximal clade credibility  tree is the tree with the highest score, and we shall refer to its topology as the mcc topology. in the second step, each clade is assigned an age based on the clade age in posterior trees. formally, the age is set as either the mean or the median of the set of ages 

 h=hi:∈tandc∈ℂi. 

since each age is set independently, the end result is not guaranteed to be a tree . a few “negative branches” are not an unusual occurrence in trees with a medium to large number of taxa and moderate posterior uncertainty.

minimum distance trees
the distance between the tree set  and the tree t is defined as the mean distance of t to all members of , 

  d=|t|−1∑ti∈tdt, 

where dt is one of the tree scores defined previously. a minimum distance tree is a tree which minimizes d. while the definition is simple and natural, the details are not. first, the minimal tree is not necessarily unique; there might be several or even an infinite number of minimal trees in some cases. second, with anything more than a few taxa the space of trees is vast and topologically complex, so there is no guarantee of finding the minimal tree. we therefore limit the search to the topologies present in the posterior, and designate this approach by a lowercase ‘m’ followed by the distance method . however, even this can be time consuming when the posterior contains many topologies, and in addition we examine a family of methods which consider just a single topology, using one of the heuristics outlined in the next section. the details about the algorithm for searching the best branch assignment for a specific topology are in appendix  <dig> 

selecting a topology
all of the two stage methods we considered selects a topology first and assign branch lengths conditional on that topology. we examined three alternatives to the mcc for selecting a topology.

the first alternative uses the recently published conditional clade probability distribution . the ccd computes a probability for each tree based upon the posterior probability of the splits in the tree, conditional on the clade posterior frequency  <cit> . the second is a the total clade branch , which assigns a score to each clade in the tree equal to the total length of matching branches in the posterior. the total length reflects the support for a clade by combining both the frequency  and confidence, under the assumption that longer branches are more likely to be “real” than shorter branches. the third is the highest posterior frequency , which picks the topology of the tree most frequent in the posterior. to break ties, the hpf picks the tree whose height is closest to the mean root height of the posterior.

ca tree
negative branches in the treeannotator tree result from using a different subset of posterior trees for estimating each clade age. in the common ancestor tree , every clade x∈ℂ is assigned an age using the mean of the clade age in all posterior trees. formally, 

  h:=|t|−1∑ti∈th¯ 

the generated ages always produce a tree, since x⊂y⇒h¯≤h¯. unlike treeannotator, which may end up using a small number of values for some clades, cat uses |t| posterior values for estimating the age of each clade.

taxa partitions tree
we now present the taxa partition  tree, a single stage method which does not commit to a particular topology before assigning ages. the tp is inspired by the tree operator described by mau et al <cit> . in this representation each internal node is assigned a left/right orientation, inducing a linear order on the taxa and positioning each internal node between two tips . we reverse the process by first ordering the taxa, then using the posterior to assign the ages between tips and finally reconstructing the tree topology from the ages.

for a given ordering of taxa, each posterior tree provides ages according to its topology. a clade contributes an age if it spans an unbroken range in the ordering. for example, for the order , the tree ,c),d) contributes the age of  to , the age of ,c) to  and the root height to . the tree ,) contributes only the age of  to . ,c)) contribute only its root height to .

after collecting ages for all splits from the posterior, a point estimate of the height at each split is used to build the tree. the precise definitions are given in appendix  <dig> 

tp incorporates clade ages from competing topologies before committing to the final topology. for example, take the set with a mixture of two topologies, ,c) and ). with the obvious ordering , tp uses all ages in every tree, and the choice between the two topologies is determined by the age of the  and  splits. if  is higher we end up with ,c), otherwise with ).

finding an optimal ordering is hard. assigning an orientation which minimizes the distance between taxa orders of just two trees is np complete  <cit> . we use a fast heuristic which proved effective in practice: build a distance matrix for pairs of taxa and use simple clustering to build the ordering. the distance between taxa a and b in each tree is the size of the clade of their common ancestor, d=|ca|. the overall distance is the mean of pair distances over all posterior trees. the clustering starts with each taxon in its own group, then progressively joins the two closest groups.

test cases
to evaluate the various methods we generated  <dig> test cases, divided into  <dig> groups of  <dig> repeats. for each case, a tree with n tips was drawn from the kingman coalescent distribution  <cit>  with population size ne. all repeats shared the same n and ne, and each group was assigned one pair from the 5x <dig> grid formed by n= <dig> , <dig> , <dig> and ne= <dig> , <dig> .

a sequence of length 800bp was generated for the tips of the tree, starting with an ancestral sequence at the root and mutating the sequence along the branches using the jukes-cantor substitution model  <cit>  with a mutation rate of  <dig> . the sequences were analyzed using beast- <dig>  <cit>  under the same model . the tree and population size were estimated but the mutation rate was fixed at its true value. the chain was  <dig> m steps, sampled every 2k steps. 200k of the initial samples were discarded , leaving  <dig> posterior samples. those were used as input for building a summary tree by each of the methods under consideration.

the test trees contain  <dig> to  <dig> tips and range  from a height of  <dig>  substitutions to  <dig> , or  <dig> to  <dig> million years for a nuclear mammalian gene. sampling the posterior of such trees normally requires a longer mcmc chain, but here a relatively short one is sufficient. the data was generated under a simple model and the exact same model is used for inference, resulting in excellent mixing. not only was the effective sample size high for all parameters, we made sure the clades were adequately sampled by running a second independent chain, starting with a different seed. we then computed the maximum of the absolute difference between posterior frequency of all clades; this number was well below 5% in most settings, and around 6% for the most diffuse case .

the posterior for trees with  <dig> and more taxa was completely diffuse, with a distinct topology for each sample. even the easiest cases  contained between  <dig> and  <dig> distinct topologies, with a mean of  <dig>  also note that even when the posterior has a single topology, a method may do better that others by setting more accurate branch lengths.

summary trees were compared using two main criteria: accuracy in estimating ages and model fit. the first criteria was broken into  <dig> related error measures: accuracy in estimating the root height, accuracy in estimating clade ages  and accuracy in estimating divergence times . the second criteria was also divided into three: the log-likelihood of the sequence data given the tree , the log-likelihood of the tree under the coalescent , and the overall model fit, which is the sum of the tree and coalescent likelihood.

how methods are ranked
the methods were compared by aggregating the results from all test cases. let us take the root height as an example. for each test case, an error value is computed for each method by taking the absolute difference between the summery and true tree heights. next, the methods are ranked by error using dense ranking . finally, the mean rank of each method is computed by averaging its rank over all  <dig> tests.

this scoring procedure was repeated   <dig> times. in each repeat  <dig> test cases are sampled  from the pool of  <dig> test cases, and a mean score computed for each method. method a was deemed better than b only if a’s mean ranking was greater than b’s in 90%  of the bootstraps. the method gets a final score of  <dig>  if no other method is better, and a score of r+ <dig> if there is a better method of score r.

the same process is repeated, using not the rankings of errors but the normalized error values. the normalization takes the errors of each case and transforms them to have a mean of  <dig> and a variance of  <dig>  this ranks the methods by the magnitude of the error they make compared to other methods.

this may seem overly complex but making a fair comparison requires extra care. the methods and error measures are correlated in both obvious and subtle ways. multiple criteria allows for a more nuanced comparison. ideally, the particular mix of methods should not matter: adding a duplicate  of one method should not penalize the ranking of lesser methods. using dense ranking should minimize those effects. strong correlations exist between the test settings  and the magnitude of errors, so aggregating results from the  <dig> groups requires some care. rankings based on comparison alone are insensitive to those correlations, and the normalization of errors makes aggregation possible without going through the complex exercise of modeling the relations between settings. another reason for using two rankings is that method a may be slightly better than b in  60% of the cases, yet its errors in the other 40% are large. the difference between the two ranks would alert us to such situations.

finally, any number of test cases,  <dig> included, is small when considering the size of tree space. bootstrapping provides some confidence that the results are stable and not due to random noise.

RESULTS
rankings of methods for building a summary tree from posterior samples. both the comparison and error magnitude ranking are given for each method and  <dig> error measures . the error measures are root height error , clades missed , clades called , clade ages errors , divergence times errors , model fit  and tree likelihood/coalescent likelihood . method names are as defined in the methods section, except for cons,med,avg and hso. cons is the strict consensus tree with ages set by median estimates, as implemented by dendropy. med and avg respectively use the median and average of clades ages from all matching trees in the posterior. hso also uses the same clade ages, but uses the search algorithm utilized by the tree distance methods to find heights which minimize the total squared error.

the ranks for rh, cae and dve were added to make the times rank indicating fit of clade heights, and mf, tll and cll ranks added to make model rank indicating fit of topology. the poly column shows the mean number of branches with length zero, which effectively create a polytomy in the tree. the number of zero length branches in each tree were divided by the total number of branches to turn them in percentages so that they can be averaged over all  <dig> test cases. the mf% column shows the mean percentile of the summary tree log-likelihood  in the posterior samples. for example, a value of 94% means that the summary tree log-likelihood was higher than 94% of the posterior trees. the cae% column show the mean clade age errors per clade, as a percent of tree height. the cme% column shows the mean number of missed clades, as a percentage of the number of non-trivial clades in the tree. the means are obtained by averaging the statistic over the  <dig> summary trees produced by each method.

discussion
clearly no method in table  <dig> is “best”, but several interesting trends and patterns can be identified. the agreement of ranking by comparison and magnitude is excellent, suggesting a similar distribution of errors for all methods. the table shows  <dig> of the  <dig> methods examined; most of the reduction comes from removing methods using ccd and hpf to select a topology, as mcc/tcb were significantly better for almost all combinations of methods and error criteria. this is slightly surprising, especially since we expected ccd, which assigns a proper probability to every tree topology, to fare better than heuristics such as tcb or mcc. the on-line supplement compares the four selection methods in more detail.

as expected there is a strong correlation between model fit and tree/coalescent likelihood , but in addition the tree and coalescent likelihood are strongly correlated as well . basically, methods generating trees with a good model fit tend to do well on both counts. the only exception is tp with a good tree likelihood but bad coalescent likelihood. also, low clade age errors and low divergence errors go together , again with tp as the exception. slightly unexpected at first sight is the negative correlation  between clades missed and clades called. either a method plays it safe by calling only definite clades, and tends to miss a lot , or calls everything and makes more mistakes .

the table shows a second unexpected result: strong negative correlation between clade age errors and model fit . since model fit is highly correlated with branch lengths , no method provides good clade ages and good branch lengths/model fit. methods optimizing branches, such as rbs, generate trees with good fit but worse ages, and methods optimizing ages exhibit the opposite. this negative correlation exists between all measures of age and fit. it is quite interesting that the two variants of the tp end up at different ends: medians give better model fit while means gives lower divergence errors.

another performance split can be observed between pairs employing the same method for setting branch lengths but using mcc and tcb for selecting the topology. the mcc variant has better model fit, while the tcb fares better with clade calls and misses.

while table  <dig> makes it easy to compare pairs of methods, it is quite hard to interpret as a whole. table  <dig> complements it by aggregating some performance ranking and adding a few per-method statistics. the first statistic is the mean number of zero length branches in the summery tree, which effectively create polytomies. the methods in the table are divided into three groups: those who never create polytomies, those with occasional polytomies , and those with a high number . the number of polytomies is strongly correlated with missed and called clades: methods which “resolve” conflict in the posterior by not committing and creating zero length branches miss more true clades but make less mistakes, and so have a high clade calls. somewhat surprisingly there is no connection between zero length branches and model fit. we suspected that short branches were the main cause for low model fit, since they create non-coalescent like trees, however we see that rbs methods manage to have high model fit and around 24% polytomies. the other three statistics are the mean model fit percentile, clade age errors per clade as a percent of tree height, and the percent of missed clades from the total number of non-trivial clades. those numbers can help in deciding how a difference in ranking translates to performance: for example, tp is seven ranks higher than tp in clade time errors, but this amounts only to a difference of  <dig> %, about 1/ <dig> of the total range. on the other hand there are a seven ranks between tp and cat in model fit, but here the difference is very large - from 45% to 93%.

CONCLUSIONS
properly analysing the test cases proved to be as challenging as the research itself. the number of possible methods for constructing summary trees, coupled with the number of ways of assessing the results can be overwhelming. in addition, the domain of trees is vast and the evaluation and construction methods are not independent. for example, the distance between the summary and true tree seems the most natural error measure. however, we have four ways of measuring distance and four related methods, each searching for the minimal distance tree using that distance. not unexpectedly, each distance score finds the tree produced by its counterpart to be closer to the true tree than the trees generated using other scores. interconnections such as these show the importance of using multiple error criteria when comparing methods. the space of tree sets is complex, and each measure sheds light on different aspects of that space. both “clades missing” and “clades called” measure topological distance via success in detecting clades, both seem reasonable and valid, yet one is the reverse of the other. having only one of them would give a biased view. simultaneously examining many methods – while complicating the comparison process – can reveal general performance trends.

by examining results from a large simulation study we found there is no clear “winner”. having low clade age errors and good branch lengths in a tree seems fundamentally exclusive. methods setting clade ages from posterior ages tend to have lower age errors while methods matching the branch lengths produce trees with a better fit to the model.

therefore, it makes sense to consider the purpose of the summary tree when choosing a method. if divergence times matters most, use either hs or cat. if only topology matters, use the consensus  or tp. in both cases the decision between the two alternatives depend on whether you are conservative and prefer unresolved clades  in areas of conflict, or whether you wish a “the best guess” at a fully resolved tree. use rbs to get a tree with good model fit and therefore closer to a maximum likelihood tree.

tp provides a good compromise: good model fit and low missed clades, with middle of the pack ages/divergence errors . all of these are better than the mcc as implemented in treeannotator, which is middle of the pack in all measures except for doing worse on clades called and well on root height.

while the simulations show a few surprising results, we were most surprised by the performance of the “theory based” methods. we set out to replace heuristics with methods based upon firmer theoretical consideration, and strongly expected that ras, a tree metric which takes into account both ages and branch lengths, will outperform the alternatives. likewise, we expected the ccd to fare better than other methods for selecting a topology. however, heuristics seem to do better when measured against the main objective - recovering the true tree.

we think the different types of summaries are all valuable when the posterior trees are in conflict. together with the full posterior as drawn by densitree, they provide different insights into the information contained in the posterior. we suggest that researchers generating a summary tree for annotation or publication use one of the newer methods since all of them outperform the existing consensus methods and beast’s own treeannotator.

while we focused on obtaining a single point estimate from posterior mcmc samples, we would like to emphasize that researchers should treat single point estimates as end points, and use the full posterior whenever possible, especially for secondary analyses. in addition, one should look at several methods for extracting a point estimate when dealing with the complex space of phylogenetic trees.

appendix
a taxa partitions formal definition
formally, for taxa ordering l= and clade c, let i= be the set of ordered indices of c in l, that is c= and i1<i2<…<i|c|. the span of the clade is the range of consecutive integers covering i, 

 sp=. 

now, c is compatible with l at position k if 

 compat≡|c|=|sp|andk∈spandsp,l)∩sp,l)=∅ 

 where s <dig>  are the left and right sons of c.

the contribution for the k’th split comes from all trees containing a compatible clade at this point, 

 vk=h:∈tandc∈ℂandcompat 

the ages are computed by taking the median  of vk. the tree is reconstructed by picking the maximal age as the root, and recursively building the sub-trees to the left and right of the split.

b implementation: minimum distance tree
for a tree set   and a target topology  our objective is to find a tree with topology  which minimizes the total distance to  under a tree distance metric dt . we use a generic multivariate optimizer to do part of the heavy lifting, but transforming the problem into a suitable form is far from trivial. while the details vary slightly for each distance metric, we found the following four steps essential: 

 <dig>  represent the tree as a point in ℝm.

 <dig>  pre-process posterior trees to speed up the evaluation of the total distance to all posterior trees.

 <dig>  analytically compute the derivative.

 <dig>  find a good initial starting point.

tree parametrization
the tree t= is represented as a vector of real numbers z=∈ℝm, where m=|ℂ|−|l| is the number of internal clades in the tree. hr is the height of t, and α <dig> α <dig> …,αm are m− <dig> values, one per internal clade, equal to the ratio of the clade age to the age of its parent. to retrieve a clade age from z, multiply the root height by the α for all the clade ancestors. that is, hr∏kαk, where k ranges over the clade ancestors. by traversing the tree in pre-order  all ages can be extracted from z using just m− <dig> multiplications, and an additional  <dig> subtractions would extract all branch lengths. each component in z has a simple bound independent of other components; 0≤hr<∞ and 0≤αi≤ <dig>  this makes the tree a suitable optimization target for a method such as l-bgfs-b, a quasi newton algorithm for minimizing a multivariate function with simple bounds  <cit> .

pre-processing of posterior trees
the search for the minimum distance tree involves many evaluations of the target function, the mean distance d. this evaluation is sped up by transforming the expression, which is a sum on trees, into a sum over clades. the details vary somewhat, depending on the distance metric dt. here we elaborate for the rooted branch score case , and the interested reader should consult the code for details of the other metrics.

for the tree t= the total distance is expanded as follows,

 d=∑ti∈trbs=∑ti∈t∑x∈ℂi∪ℂ|bi−b|=∑ti∈t∑x∈ℂi∩ℂ|bi−b|+∑x∈ℂ∖ℂib+∑x∈ℂi∖ℂbi=∑ti∈t∑x∈ℂi∩ℂ|bi−b|+∑ti∈t∑x∈ℂ∖ℂib+∑ti∈t∑x∈ℂi∖ℂbi=∑ti∈t∑x∈ℂi∩ℂ|bi−b|+∑x∈ℂb∑ti∈tx∉ℂi+∑ti∈t∑x∈ℂi∖ℂbi. 

the terms in parentheses do not depend on t and can be precomputed, so the last two terms take o operations to evaluate. the first term appears to require o but we can cut this down to o).

 ∑ti∈t∑x∈ℂi∩ℂ|bi−b|=∑x∈ℂ∑ti∈tx∈ℂi|bi−b|=∑x∈ℂ∑ti∈tx∈ℂib>bib−bi+∑ti∈tx∈ℂib≤bi−b+bi=∑x∈ℂ∑ti∈tx∈ℂib>bi1−∑ti∈tx∈ℂib≤bi1b−∑ti∈tx∈ℂib>bibi+∑ti∈tx∈ℂib≤bibi 

the reason for this complicated looking expression is that the last two terms in parentheses can be pre-computed, and the first is simply the number of branches in the posterior greater than b minus the number of branches smaller than it. after we pre-sort the branches from the posterior for each clade, this number can be found by a binary search, taking at most o) since there can be at most  matched branches, one for each tree in the posterior.

analytical derivative
the search is significantly faster when a derivative can be computed analytically, since estimating a derivative requires at least m evaluations . while the details are tedious the calculations themselves are simple, since the target function is composed in a series of multiplications and additions/subtractions, so the derivative is easy to compute using the chain rule at each stage. again the interested reader should consult the code for the exact details in each case.

search initialization
we found that a good starting point can be vital, as under some settings the number of multiple local minima can be large. while the procedure to obtain the initial tree seems natural and obvious in hindsight, several other obvious looking approaches did not perform well at all.

the initial tree is obtained by first examining each branch independently. each branch has its own optimal length, based on the matching branches in the posterior and the distance metric. this optimal value is computed for each branch, but since branch lengths are not independent, the next step builds a tree from those optimal values. the build assigns an age to each clade, proceeding in post-order, that is assigning an age to all descendants of a clade before assigning the clade age. the age of the clade is obtained by averaging the expected age from the direct descendants, which is the sum of their own assigned age and their optimal branch length.

abbreviations
avg: summary tree method which sets internal nodes heights using average of posterior heights; ca(): common ancestor; cae: clades ages error. equation ; cat: common ancestor tree. equation ; cc: clade credibility; ccd: conditional clade probability distribution; cce: clades called error. equation ; cll: coalescent likelihood; cme: clades missed error. equation ; dve: divergence times error. equation ; hs: heights score. equation ; hso: heights only summary tree method; hpf: highest posterior frequency; mcc: maximal clade credibility; med: summary tree method which sets internal nodes heights using medians of posterior heights; ras: rooted agreement score. equation ; rbs: rooted branch score. equation ; rh: root height; srbs: squared rooted branch score. equation ; tcb: total clade branch; tp: taxa partition tree.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
jh developed the methods and wrote the biopy implementation. rb implemented the densitree integration. both authors contributed to the manuscript. both authors read and approved the final manuscript.

supplementary material
additional file 1
supplementary material. information about lesser performing methods which are mentioned only briefly in the main text.

click here for file

 additional file 2
posterior summary rank graphs. method rank graphs for each error measure.

click here for file

 acknowledgements
many thanks to alexei drummond, david bryant and mike steel for their useful suggestions and comments. jh and rb were funded by ajd’s rutherford discovery fellowship from the royal society of nz. jh partially funded by awc.
