BACKGROUND
the sequence of a protein contains valuable information about its characteristics. various sequence-based prediction methods exploit this to classify proteins according to specific properties, such as localization  <cit> , function  <cit> , or solubility  <cit> . this has resulted in relevant and frequently used bioinformatics tools  <cit>  that are offered by a growing number of easily accessible websites and webservices  <cit> .

sequence-based protein classifiers assign class labels to proteins based on a set of features, real numbers that capture some sequence property. this process entails three distinct steps. first, feature extraction is required to map protein sequences to points in a feature space . next, a classifier is constructed to optimally separate protein classes in this feature space , using a set of proteins with known class labels. finally, the trained classifier can be applied to predict class labels for new proteins . additionally, features and feature distributions can be visualized to explore differences between protein classes by eye.

software tools are available for each of these three steps. feature extraction is available as software package  <cit>  and through web services  <cit>  and an extensive range of classification software has been developed  <cit> , some of which include feature visualization  <cit> . however, combined application requires installing different software packages and programming efforts to convert data according to the requirements of each tool. for the construction of specialized high-performance classifiers, the overhead of deploying such a pipeline may be acceptable or even required, because this usually involves extensive exploration of many combinations of  features, types of classifiers, and parameter settings. however, it precludes easy access to these methods for non-expert users.

we set out to offer basic protein classification functionality in a single environment to allow for quick and easy exploration of user-defined protein classes, without the need for any programming, data conversion or software installation. to this end we introduce spice, a web-based tool for sequence-based protein classification and exploration. spice makes powerful data exploration techniques accessible to non-experts; additionally, expert bioinformaticians can exploit the back-end software to perform customized and/or computationally expensive tasks on a local computer.

implementation
before describing the spice functionality, some classification concepts and the offered sequence-based features will be introduced in the following two sections.

classification
classifiers are algorithms that assign discrete class labels to objects. these objects are typically represented as vectors of features, real numbers that reflect a property thought to be potentially different for proteins in the different classes. protein sequences should therefore first be mapped onto such feature vectors, a process called feature extraction . this should ideally result in a small number of discriminative features. in spice, feature vectors are always normalized to zero mean and unit standard deviation.

given a training set of proteins with known labels, a classifier can then be trained, i.e. its parameters can be tuned to yield optimal performance . for problems with two classes a and b, performance is often estimated based on a receiver-operator characteristic  curve. such a curve represents all possible trade-offs between classifications of proteins in class a as being in class b and vice versa. if class a corresponds to “positive” and class b to “negative”, the roc curve is traditionally drawn as false positive rate vs. true positive rate and the area under the roc curve  is used as a measure of classifier performance, with  <dig> indicating perfect classification and  <dig>  random classification. once trained, the trained classifier can be used to predict the class label for any new protein, a process called testing .

to avoid overtraining, i.e. setting the parameters such that the training set is classified well but test samples will be classified poorly, a stratified cross-validation scheme is used. this entails splitting the training set in k parts reflecting the original class distributions  and iteratively training classifiers on k− <dig> parts and estimating its performance on the remaining part. the average performance is then an estimate of the performance to be expected on new, unseen data.

a large number of classification algorithms are available, differing in complexity and often applicable to specific problems. spice implements the most well-known classifier types . in case the classifier has parameters, they are optimized in an inner k-fold cross-validation loop  <cit>  using the parameter ranges in table  <dig> as search grid, optimizing for the auc.

1uniform resp. 2distance-based neighbor weights, 3linear discriminant resp. 4quadratic discriminant analysis.

for a more in depth discussion of classification and feature extraction, the reader is referred to relevant reviews  <cit>  or textbooks  <cit> . below, an overview of the specific features spice extracts from protein sequences is given.

sequence-based features

composition features

property profile-based features

amino acid distance-based features
*aa: amino acid, ss: secondary structure, sa: solvent accessibility, ctd: composition, transition, distribution.

composition features
these features calculate letter counts divided by sequence length for a number of sequence types: amino acid, codon, secondary structure, and solvent accessibility. the ‘number of segments’ parameter subdivides sequences into equal length parts and returns the composition of each segment separately. for the amino acid sequence, there is also the option to calculate the dipeptide composition, i.e. amino acid pair counts divided by sequence length − <dig>  and the amino acid counts for a given length of the n- or c-terminal end of the protein sequence. for the codon sequence, the codon usage can be calculated.

property profile-based features
amino acid scales map each amino acid to a value that captures a physicochemical or biochemical property, such as hydropathicity or size. these scales are used to obtain a property profile for a protein sequence by mapping all of its residues to the corresponding values. the profiles are in turn used for calculating property profile-based features. the aaindex data base  <cit>  contains a large collection of scales that can be selected for feature calculation. because the data base contains many correlated scales, a set of  <dig> uncorrelated scales derived from the entire aaindex database  <cit>  can also be selected. amino acid scales are normalized  before using them for feature calculation. 

•signal average features capture, based on the selected amino acid scale used for generating a property profile, the average property over the entire protein sequence by calculating the average profile value.

•signal peaks area features use the property profiles to capture occurrences of property peaks by calculating the sum of all areas under a protein profile above and below a given threshold. a window and edge parameter define the width and edge weights of a triangular filter with which the profile is convoluted to smooth it before calculating the features  <cit> .

•autocorrelation features employ the property profiles to calculate property correlations between two residues at a given distance over the entire protein sequence. as in profeat, three different types are implemented: normalized moreau-broto  <cit> , moran  <cit> , and geary  <cit> .

•pseudo-amino acid composition features calculate the amino composition with additional features that include sequence-order information up to a given distance λ. sequence-order information is incorporated by calculating residue correlation factors between two residues at a given distance over the entire protein sequence, for distances  <dig> ,…,λ. the correlation factors are based on one or multiple user-defined amino acid scales as offered by the pseaac web server  <cit> . both the parallel-correlation type , as introduced in  <cit>  for predicting protein cellular attributes, and the series-correlation type , as introduced in  <cit>  for predicting enzyme subfamilies, are offered by spice.

amino acid distance-based features
these feature categories use amino acid distances for feature calculation, either by using a amino acid distance matrix or by using predefined amino acid clusters. 

•property composition, transition, distribution  features were previously used to predict protein folding classes  <cit> . our implementation is based on profeat <cit> . the twenty amino acids are subdivided into three groups; a, b, and c, based on a given property. protein sequences are then mapped to the reduced three-letter alphabet , which are used to calculate i) the property composition, letter counts divided by sequence length, ii) property transitions, the number of ab and ba transitions divided by the sequence length -  <dig> , and iii) the property distribution, relative protein sequence positions of the first occurrence, the 1st, 2nd, and 3rd quantile, and the last occurrence of each property letter. the used properties – hydrophobicity, normalized van der waals volume, polarity, polarizibility, charge, secondary structures and solvent accessibility – and corresponding amino acid subdivisions are the same as in profeat.

•quasi-sequence-order descriptors have been used to predict protein subcellular localization  <cit> . they are comparable to the pseudo amino acid composition, but the schneider-wrede amino acid distance matrix  <cit>  is used for calculating correlation factors instead of amino acid scales.

functionality
spice has four main functionalities, as illustrated in figure  <dig>  first, users can upload a fasta file with protein sequences for which a range of sequence based features can be calculated . the resulting feature matrix  can then be visually explored using histograms, scatter plots, and heat maps. classifiers can be trained for a set of user-defined class labels  and the resulting classifier can finally be used to predict class labels of new protein sequences .

to access these functions, the spice web-based user interface offers four areas: home, projects, features, and classification, accessible through the main tabs. the web application can be freely explored without registration. a user account bar – situated directly underneath the main tabs  – enables users to login to their account or to create a new account, providing them with a secure personal work space in which their projects will be stored.

home contains general information and news items. additional documentation and tutorials can be accessed through the documentation link in the header menu at the top of the page .

projects are initiated by uploading a fasta file with either protein  or orf  sequences. after initiation, one or more labeling files can be uploaded in which each protein is assigned a label, for example its subcellular localization. users can also upload  secondary structure and solvent accessibility sequences, which enables the calculation of additional features.

features can be calculated for all proteins in the project. a list of available sequence-based features is given in table  <dig>  additionally, users can upload their own calculated features. the resulting feature matrix can be explored using different visualizations. feature-value distributions and class separation can be explored using histograms  and scatter plots. another way of exploring predictive features is to visually inspect the feature matrix using a hierarchically clustered heat map , in which the protein labels are added as an extra column .

classification offers the ability to train classifiers using the proteins in the current project. users can select: i) the type of classifier to use, ii) the classes to train for, iii) the features to use for training, and iv) the number of cross-validation loops k. a  k-fold cross-validation protocol is used to assess classifier performance and to optimize classifier parameters if required. after training, a table with performance measures is reported, together with a receiver operating characteristic  curve in case of two-class classification. the final classifier is trained on the entire train set using the optimized parameter settings. trained classifiers can be applied to predict class labels of new proteins by selecting any of the user’s projects, in which case class labels will be predicted for each protein in that project.

software framework
the website is developed in python  <dig> . <dig> , using the minimalist python web framework cherrypy  <dig> . <dig> . the back-end uses the python package spice for feature calculation and classification. within this package, the featext module manages feature extraction using a dataset module to manage protein sequence data and a featmat module to manage the labeled feature matrix. the classification module offers a set of classification tasks, which basically is a layer on top of the machine learning software scikit-learn  <dig> . <dig>  <cit> . feature extraction and classification tasks are put in a job queue which is handled by a separate compute server.

RESULTS
to validate the system, we reproduced results of previous work in which a data set was employed to construct classifiers predicting successful high-level production of extracellular proteins in aspergillus niger <cit> . the used data set consists of  <dig> secretory proteins that were over-expressed in a. niger and tested for detectable extracellular concentrations by putting the obtained extracellular medium on a gel after growing the culture in shake flask. a label ‘high’ was assigned to proteins for which a band on the gel was observed and a label ‘low’ to the others, resulting in  <dig> high-level and  <dig> low-level proteins. this labeled protein set can be loaded as an example project in spice.

the amino acid composition was calculated and used for the construction of a linear support vector machine , providing results that are in agreement with the results described earlier  <cit> . similar to the observations in that work, the t-statistics reveal strong predictive capacity for the tyrosine, asparagine, arginine, and lysine features , which can also be observed in the histograms . the scatter plot in figure  <dig> shows the obtained class separation by using the two features with the lowest  and highest t-value respectively. for the hierarchically clustered feature matrix in figure  <dig>  clustering of proteins  with the same label indicate that these features are useful for classification. classifier construction resulted in a cross-validation performance of  <dig>  area under the roc curve , again similar to results obtained in  <cit> .
a. niger
 secretion project using the amino acid composition features with the lowest  and highest
t
-value, arginine and asparagine respectively.

additionally, we used a yeast protein expression data set to illustrate the ease with which one can explore differences between user-defined protein classes. for this data set, yeast proteins were split into low-level and high-level expressed based on data found in  <cit> , in which saccharomyces cerevisiae open reading frames were tagged with a high-affinity epitopes and expressed from their natural chromosomal location after which protein abundances were measured during log-phase growth by immunodetection of the tag. as a pre-processing step, to avoid a bias for sets with highly similar proteins, blastclust <cit>  was used to reduce sequence redundancy. after that the list of proteins was ordered by expression level. the top and bottom  <dig> proteins were labeled ‘high’ and ‘low’ respectively. this data is also available as an example project.

using the t-statistics table in figure  <dig>  quick exploration of the amino acid composition reveals a preference for alanine, valine, and glycine in the high-expression class, whereas low-expression proteins contain relatively many asparagines and serines. the alanine and serine histograms in figure  <dig>  the features with minimal and maximal t-value respectively, indeed show shifted means of the class distributions. a classification performance, again using a linear support vector machine and 10-fold cross-validation, of  <dig>  area under the roc-curve  showed good predictive capability of the amino acid composition. the predictive capability using the codon composition proved even better, resulting in a performance of  <dig>  area under the roc-curve .

for further exploration of the system, two additional example projects can be initiated. one entails protein subcellular localization in human, a data set of  <dig> proteins categorized into  <dig> different subcellular locations as taken from  <cit> . the other is a solubility data set obtained from  <cit> , consisting of  <dig>  yeast proteins that are split into two equal sized classes: soluble and insoluble.

CONCLUSIONS
spice provides easy access to visualization and classification methods for a set of labeled protein sequences. after uploading a fasta file with protein sequences and a label file with protein labels, the website can be used to calculate sequence-based features, to visualize the resulting feature matrix, and to train and test classifiers for predicting class labels, enabling quick exploration of sets of labeled proteins. the back-end software is made available for expert users to perform customized and computationally demanding tasks on a local computer.

availability and requirements
•project name: spice

•url:http://helix.ewi.tudelft.nl/spice

•source code spice python package:https://github.com/basvandenberg/spice

•source code spice web site:https://github.com/basvandenberg/spiceweb

•web browsers: chrome, firefox, opera, safari

•operating system: platform independent

•programming language: python  <dig> 

•license: gnu gpl v3

competing interests
the authors declare that they have no competing interests.

authors’ contributions
the software was developed by bab under the supervision of ddr, mjtr, and jar. bab wrote the initial manuscript. all authors contributed to and approved the manuscript.

supplementary material
additional file 1
supplementary information. showing the use of spice by means of two example projects.

click here for file

 acknowledgements
this work was supported by the biorange programme of the netherlands bioinformatics centre  and was part of the kluyver centre for genomics of industrial fermentation, both subsidiaries of the netherlands genomics initiative .
