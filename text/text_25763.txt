BACKGROUND
during the later phase of primary immune responses to protein antigens, as well as in secondary immune responses to the same antigen, the produced antibodies display higher affinity for their antigen compared with the early phase of the response, a phenomenon known as affinity maturation  <cit> . the precise mechanisms responsible for this phenomenon are the subject of current intense research, and are known to take place in well-organized micro-anatomical structures, called germinal centers , that develop temporarily within primary follicles of secondary lymphoid organs during immune responses to protein antigens  <cit> .

the number of gcs and their average size increases dramatically within the first week after immunization and then start to decrease within days 10- <dig>  so that by days 21- <dig> very few of them remain, while those that do have small sizes. gcs consist of a dominant population of antigen-specific b cells and smaller populations of t lymphocytes, follicular dendritic cells, and macrophages  <cit> . the antigen-specific b cells proliferate intensely, undergo somatic hypermutation in the variable region of their antibody molecules, and are subject to a poorly understood affinity-based selection process  <cit> .

the long-held interest in gcs stems from being the place where a darwinian process, involving somatic hypermutation  and selection, acts on responding b cells and their antibodies, thereby leading to memory b cell generation and to the phenomenon of affinity maturation. because of the very high rate of shm , a gc reaction with an excessively long duration may not only spoil previous affinity enhancing mutations, but also generate autoreactive and even aberrant mutations leading to leukemia cells. contrarily, because of the random character of shm, affinity-enhancing mutations appear only several days after the activation of hypermutation, so that gc reactions with durations too short will have an ineffectual selection. as a result, it is not totally surprising that the time scale of gc reactions is regulated. the precise mechanisms that drive and control the dynamics of gcs are not presently known and is the focus of intense research.

recently some of us  <cit>  and others  <cit>  have shown that the dynamics of gcs is controlled by follicular regulatory cd4+ t  lymphocytes, a newly discovered distinct subpopulation of foxp3+cd4+ t cells that share with follicular cd4+ t helper cells the same responsiveness to the follicular chemokine cxcl <dig>  the impact of tfreg on the kinetics of gc sizes was made evident in studies involving confocal microscopy analysis of murine mesenteric lymph nodes at different times after immunization  <cit> . our theoretical modeling of the dynamics of the gc reaction, including tfreg cells, suggests that the intensity and life span of such a reaction is subject to two different controlling processes: an initial process driven by tfreg cells, and a later one, detectable only when the first process is too weak, controlled by follicular cd4+ t helper cell maturation . in order to properly calibrate gc models with tfreg lymphocytes, comparisons and fits to experimentally obtained gc sizes taken at different time during the kinetics of entire process is fundamental. a sufficiently accurate study, however, requires a more exhaustive analysis with the acquisition of more time points during the immune response than previously accomplished in experiments to date. also, such an analysis would require accurate determination of all the gc volumes obtained from these experiments.

presently, the estimation of gc volumes relies upon sectioning either the spleen or lymph nodes in several tissue samples of approximately ~  <dig> -  <dig> Î¼m thickness and performing immunohistochemical staining. subsequently, confocal microscopy is used to acquire images from each section at different equally spaced plane depths, usually generating more than 20- <dig> thin slices. these image slices are then digitized and assembled into z-stacks, as shown in figure  <dig>  finally, using a program such as imagej  <cit> , the analysis of gc areas is performed semi-manually slice-to-slice, in the z-stack, for subsequent 3d reconstruction. such a tedious and highly time-consuming procedure provides a crude estimation of gc volumes. moreover, the sheer quantity of data to be analyzed from this large set of confocal microscopy imaging is so prohibitively large, that manual or semi-manual extraction is not tenable. indeed, for understanding the order of magnitude of data produced, a typical experiment for study gc dynamics involves the analysis of on average ~ <dig> gcs  per mouse and per time point . as a result, there may be more than  <dig> individual gc slices to be analyzed in a single experiment.

available software a candidate software application for the proposed task would provide automatic measurements of all gc densities; that is, an accurate and automatic measure of the individual gc volumes, a count of the constituent cells, and subsequent visual confirmation of each gc using a three dimensional isosurface reconstruction  <cit> . perhaps the two most popular representative open-source software tools used for post-processing of microscopy images are imagej  <cit>   and omero  <cit> . other open-source software tools for biological visualization include vaa3d , which is a cross platform tool geared towards biological visualization of 3d/4d/5d formats, and icy , which is another powerful image analysis software that provides a powerful environment for third party developers together with visualization software. several commercial software applications, such as imaris and metamorph, are also widely used by the biology community for performing post-processing image analysis and visualization tasks. while a complete listing or comparison of all available software solutions are beyond the scope of this paper, these applications are certainly state-of the art and highly representative of other applications with their particular advantages/disadvantages. also, in keeping with our design philosophy, we have focused more upon open-source analysis tools for comparing our software and algorithms.

in the case of omero, this is a large client/server application, designed to provide centralized access of images from a disk server, and provides many types of analysis as well as data annotation and workflow. while omero has a large user base, and many analysis extensions, it presently lacks the ability to automatically perform segmentation of objects such as gcs in 3d  and does not provide a 3d output that allows for visual checking of the accuracy of the borders of the detected gcs. moreover, there is no provision in their roadmap for the addition of these difficult, yet important features  <cit> .

fiji/imagej, is a multi- platform java-based application written for the desktop that uses the powerful imagej image analysis library for a microscopy specific application. it features extendible plug-in module support, scripting in multiple languages, and supports a large collection of image formats used the microscopy community. in an independently developed branch, fiji, provides many new powerful analysis extensions; an example of which is image registration techniques  <cit> , for stitching multidimensional images from low-level autocorrelation of features. nonetheless, it also does not contain the capability for automatic segmentation of volumes with constituent cells, as envisioned in this work.

in summary, with respect to segmenting and extracting gc volumes, the microscopy software applications and algorithms that we have evaluated either  lack sufficient information about the segmented dimensions,  underestimate the number of objects segmented due to the difficulty of selecting the appropriate input parameters,  provide only gross estimates of areas/volumes, or  simply do not provide the desired functionality for automatically obtaining gc volumes. as such, with respect to extracting gc volumes, no single software tool exists, to our knowledge, able to perform the proposed automated tasks and that meets all requirements desired.

while imagej and fiji have a large user base and provide the ability to write customized plug-ins in various programming languages, we decided from the onset to deviate from this standard development course in order to develop our own microscopy infrastructure, written in python and called pybioimage. while motivated by several reasons, the principle advantage of this design choice is to leverage the growing software base for scientific computing with powerful and efficient numerical and visual libraries recently made available in the python community. given the power of the python c-extension api, available libraries, and the ability for rapid and robust open software development, other microscopy software application have recently emerged, albeit with slightly different scientific goals, but based upon a similar python/c design philosophy. two recent open source tools also written in python and c/c++, which have recently been reported in the literature for microscopy applications, are iocbiomicroscope  <cit>   and bioimagexd  <cit> .

implementation
our software suite, pybioimage, is a cross-platform bio-imaging application, written in python and makes use of low level c code exposed through the python c-extension api. the application supports multiple data formats and provides visualization and analysis of standard multi-dimensional image data. for the work described in this paper, we have developed a set of algorithms implemented either in pure python or as python/c-extension modules, that form a core feature called extractgc, which is specifically tailored for automatically extracting gc volume statistics and visualization from a collection of 3d confocal fluorescent microscopy image stacks. these images are highly magnified regions of tissue samples taken from secondary lymphoid organs. the set of such images from tissue specimens may be used to reconstruct a 3d mosaic, consisting of several gcs, and thereby making it possible visualize a large section of the organ in question. our analysis software module extractgc, which is part of the more general pybioimage application, uses a pseudo-recursive segmentation algorithm for performing simultaneous pixel level clustering in all directions xyz of a complete image stack. our segmentation technique is based upon a general segmentation algorithm, often referred to as spot finding algorithm in the context of fluorescent microscopy, first described and implemented by goldberg and col.  <cit> .

in order to maintain the goal of cross-platform interoperability, the selection and design of the libraries used, as well as our software suite pybioimage  depend upon several standard open source software libraries, as shown in figure  <dig>  in particular, in order to perform low-level pixel operations as efficiently as possible, we have written several python c-extension modules. we use numpy and scipy for several post-processing numerical routines. for image analysis operations, we use the opencv library. the graphical interface is based upon wxpython, and 2d visualization with specialized bindings with matplotlib and the enthought traits library . for 3d reconstruction, we have written python bindings for the well known powercrust algorithm  <cit> , and visualization rendering is presently performed with with the geomview , however we are presently incorporating the use of vtk .

many file formats for confocal microscopy are based upon variants of tiff, or at least the ability to include multiple images with the same file. for standard tiff files, we have used a python based wrapper of the standard libtiff library. in order to connect with loci bioformats  <cit> , that is provided through a java jar library module, we use the internet communication engine   which provides a drop-in c/c++ connectivity for i/o module.

workflow and interface
for extracting gc volumes, an initial seed value for the threshold and minimum spot size are provided by the user. the optimal global threshold is found with a simulated annealing optimization algorithm, by using this initial seed together with other parameters. this will produce the optimal 3d bounding surface together with statistics for all gcs that pass the maximum size specified by the input parameter. as with general stochastic global optimizers, further flexibility towards optimal solutions can be explored by adjusting a subset of input parameters. full 3d renderisation of all or selected gc volumes may be obtained interactively by the user.

segmentation algorithm for extracting germinal center volumes
broadly speaking, segmentation algorithms decompose an image into distinct parts for recognizing objects of interest. these algorithms can be divided into three groups: statistical feature-based, region-growing, and boundary methods  <cit> . for multidimensional images, feature based and boundary methods use image registration algorithms  <cit>  to associate image pixels of one image to those of another. there are many techniques for accomplishing this task, including pixel-wise comparisons, cross-correlations, and scale invariant feature-based methods. these techniques have been extensively studied and applied to multi-dimensional medical and microscopy imaging for reconstructing volumes from different z-stack slices. region growing methods perform segmentation by low-level pixel assembly, subject to some condition related to the pixels intensities of nearby neighbors. for multidimensional microscopy images, the findspot algorithm described by i. goldberg  <cit> , has been shown to be effective for constructing spot volumes, which are the bright/dark regions of interest, by recursively obtaining correspondence between neighboring pixels on the same and different image slices. by manually providing threshold and geometric constraints, the algorithm can efficiently encounter 3d continuous object volumes within and throughout the multidimensional image. given the power of this method, our gc volume extraction software uses the core part of this algorithm together with several practical software modifications as well as additional algorithm details, described below.

optimal global threshold
two fundamental parameters of the findspot algorithm  are the pixel threshold th, which determines which pixels are allowed into a contiguous cluster, and the minimum cluster size smin , which provides a final cut-off on contiguous volume region. the threshold may be a global parameter or based upon the mean pixel . with fluorescent microscopy, the intensity is directly proportional to the amount of b-cell membrane marker or receptor molecules, which is relatively homogeneous throughout the volume. thus, it is sensible that a global threshold should be used since it will provide the most accurate indication of the amount of cells of a particular type at a particular z-slice. also, a proper segmentation of the gc areas on each slice will be sensitive to an optimal selection of the initial values of th and smin, where each depends upon the other.

first, it is useful to understand the effect of the global threshold th and smin parameters upon the final segmentation of gc volumes, and in particular why this selection is non-trivial. for segmenting the central part of a gc, as seen in figure  <dig>  slice  <dig>  a particular threshold will perform well; however for the image slices at the extremes , it becomes unclear which parameter values lead to the best segmentation results. indeed, if the threshold is too low, pixel clusters will be unnecessarily too large . however, if the threshold is too high, or optimized to the center of the gc where the fluorescent contrast is max, then on higher/lower z-stack slices, the gc borders, and hence gc volumes, will be underestimated. with respect to the selection of the minimum spot size parameter, a small minimal spot size will result in many pixel clusters that are not germinal centers.

for the specific case of segmenting gcs from multidimensional images, we can use biological information to guide the choice of an appropriate objective function. in particular, it is well known that by staining tissue samples with flourochrome-tagged peanut agglutinin, gcs will be brightly labeled throughout the volume and consist of fluorescently marked b cells that are involved in the immune response, while adjacent regions are characterized by a pronounced dark ring or halo. this dark outer ring zone is due to both follicular b cells not participating in the immune response  and to t and dendritic cells of the adjacent t-cell zone, which are also unlabeled.

given this nearly universal observed gc structure, an ideal segmentation algorithm for gcs will include all pixels up to and including the border adjacent to the dark halo zone. since the global threshold parameter of our algorithm directly controls this segmentation, our algorithm optimizes this choice of threshold that segments the gc by the use of an iterative procedure, driven by a simulated annealing algorithm that minimize the objective function, applied to all z-slices. this objective function seeks a minimum in the sum of pixel-tone histogram differences for all z-slices, between different values of the input parameters, while at the same time strongly penalizing solutions that give rise to segmented borders outside the gc region. the algorithm for optimizing the input parameters can be formalized by referring to figure  <dig> as follows. first, let Î¸i represent the set of m input parameters to be optimized. we denote the set of values of these parameters at the iteration step t as Î»t={Î¸it}. next, we consider gc segmentation regions obtained from the findspot algorithm. the segmentation region of the j-th gc on the n-th image slice and at iteration step t is denoted by Î³jn. similarly, the segmentation region of the j-th gc region on the n-th slice at iteration t' is given by Î³jn. from this, we can obtain the fraction of the number of points above the threshold nf in the annular region between Î³jn and Î³jn as compared to the total number of pixels nt in that annular region, as nf /nt. moreover, for each of these regions, we can obtain the pixel-tone histogram, denoted h)â¡hjn. the histograms for different segmented regionsÎ³jn, for a given gc and a particular slice n corresponding to different input parameters Î»t are shown in figure  <dig>  as can be seen from this figure, the difference between histograms decreases as the segmented regions are closer. an optimal solution, found from the optimal input parameters Î»t* would produce a segmentation that wraps tightly around the gc. conversely, the value of the input parameters Î»t should tend to maximize the individual areas of the segmented regions on all z-stack slices of each gc. thus, the objective function should penalize those values of the input Î»t that eliminate areas at the extremes of the gc volumes where the pixel intensities are at the limit of threshold. this tradeoff provides a convex objective function for applying an optimization strategy.

first, we use the bhattacharyya histogram distance metric

 d=1-âk,kâ²htâhtâ²âkhtââkâ²htâ² 

where ht and ht', represent hjn and hjn, and k and k' represent the individual bins in each histogram, respectively.

now, let ajn be the area of the segmentation region Î³jn, that is, corresponding to the j-th gc at slice n using input parameters Î» at iteration t, and let

 ajn=|ajn+ajn|-|ajn-ajn||ajn+ajn| 

which is a symmetric function, sinceajn=ajn. then, we can define the objective function lj for the j-th gc as follows:

 lj=ânexpÎµ+Î²ânajn 

where â is a small nonzero constant that we insert to prevent division by zero error, while Î± and Î² are arbitrary constants  that could be useful for controlling the strength of either the histogram difference or the sum over areas, respectively. with this function, the optimization is then with respect to the input parameters Î»t={Î¸it}, that is, âlj/âÎ¸i= <dig>  notice that if the areas ajnand ajnon each slice n for each segmentation region j are very different âeither because ajn is much larger than ajn  or because, suddenly, aj=0=0) due to the disappearance of the contour at slice nâ, then ajnâ0and lj grows to very large values, thereby penalizing lj. conversely, if ajn=ajn  then ajnâ <dig> 

in general, the function lj is a nonlinear multidimensional function with many local minimima, many of which are not ideal solutions. in order to understand the behavior of lj as a function of Î»t and Î»tâ², figure  <dig> shows two hyperplane cuts with smin for different values of the threshold th. for constructing this plot, we chose consecutive values of the threshold, with thâ²=th+ <dig> , and thâ²=th+ <dig> . as can be seen, in both planes, the function experiences a dramatic global minimum for the optimal solution.

from this objective function, we use a simulated annealing algorithm that efficiently samples the space of all possible Î»t in order to find the optimal set of input parameters,Î»*, given by:

 Î»*=argminÎ»tlj 

in order to show how robuts our optimization algorithm is with respect to the choice of initial input parameters, figure  <dig> shows the difference in accumulated area  between the calculated and ground truth value for several iterations of the algorithm for three separate initial values of Î». in these studies, the ground truth determination was obtained from manual inspection by an expert. figure figure  <dig> shows a comparison, superposed on a particular germinal center image, between borders obtained with optimal parameter solution, Î»*, using our algorithm and the ground truth border obtained by manual determination.

since the original findspot algorithm finds all contiguous clusters of pixels throughout a volume, connected regions can be filled with holes. by using a convex hull algorithm, or more sophisticated computational geometry algorithms based upon alpha shapes, we can represent and visualize the 3-dimensional gc volumes with the outer bounding surface. nearby artifacts due to outliers points may be present, distorting the volume estimate, and should be corrected. we eliminate outliers by a simple heuristic algorithm that determines the full distance matrix between all points on the contour and determines whether the distance between each point and all others is greater than  <dig> Ã Ï value of all other inter point distances . conversely, we can find the geometric center and determine whether a point is  <dig> Ã Ï from that center.

optimal stitching our software pybioimage also contains a module for automatic stitching of multi-dimensional images, similar to that found in imagej. side-by-side z-stack images of draining lymph nodes were acquired to allow 3d reconstructions of larger organ areas. due to the large amount of image stacks, we developed our own software algorithms that used information from the microscope position and accelerated the task of forming large image mosaics, referred to as image stitching, from adjacent z-stacks acquisitions.

for matching adjacent image stacks, our algorithm uses a fast implementation of the fourier phase correlation technique for achieving image registration at the borders of adjacent  images. for blending adjacent images, we use a nonlinear pyramid scheme together with pixel intensity scaling for matching potential differences in acquisition exposures. the implementation of our algorithm is available in our cross-platform pybioimage package, available at the public repository . information about the installation, documentation, and other software modules , can also be found in the package distribution.

3d reconstruction
another capability of the extractgc module is the ability to accurately visualize the gc volumes in 3d. the reconstruction of the set of borders pixels obtained from each z-stack slice is used for constructing an isosurface with a computational geometry algorithm, called powercrust, described by amenta, choi and kolluri  <cit> . we have provided a full set of python bindings to the original open-source c-language implementation of these authors in order to easily expose the core algorithm to our application, pybioimage. the output of powercrust, with the points obtained from the findspot algorithm in the prior phase, is a set of files that specify the polygons and their vertex locations in 3d that define the maximum bounding surface. presently, we have maintained the original powercrust related .off extension file structure which can be visualized with geomview, an interactive 3d viewing program for unix. an example 3d renderization of a gc is shown in figure  <dig> 

details of the 3d rendering algorithm are as follows: the algorithm takes point samples from a 3d object's surface and produces both a surface mesh and an approximate medial axis. the powercrust algorithm is based on the medial axis transformation  that provides a complete description of the object's shape through maximally inscribed discs. together with the voronoi diagram computation its duality, and its weighted adaptations, the powercrust algorithm produces the so-called power diagram. then, the algorithm can be described briefly with the following steps  <cit> :  given a collection of sampled points, a bounding box is used to enclose what shall be the 3d object,  a voronoi diagram is computed and pole computation for each sample point is made,  each pole is analyzed and labeled with its relation to the voronoi surfaces, and finally  the algorithm provides output of the powercrust and powershape parameters, that can be used for constructing polygons of the external surface.

while there are several other fundamental algorithms for 3d reconstruction, including alpha shapes , marching cubes, voronoi-based algorithms, and delaunay-based algorithms, we found the crust/powercrust algorithms the most effective for our application.

RESULTS
the architecture of pybioimage, together with the extractgc module, is designed to provide a productive and intuitive workflow for the experimental and theoretical biologist for extracting accurate gc statistics.

germinal center image acquisition
in order to test our software, we applied our algorithms to a set of gc image data acquired with typical experimental conditions. in particular, balb/c mice maintained in spf facilities were immunized intraperitoneally with  <dig> Î¼g of ova  previously run through a detoxygel column  in  <dig>  mg of endotoxin-free aluminum hydroxide . seventeen days after immunization the draining lymph nodes were excised and fixed with pfa .  <dig> Î¼m vibratome sections from fixed tissue were stained with the following primary antibodies: rabbit anti-cd <dig> , rat anti-igm-txrd , and pna-fitc . anti-rabbit immunoglobulin-alexa <dig>  was used as secondary antibody.

once the regions of interest were located,  <dig> images were acquired at  <dig> Î¼m z-steps, using a lsm <dig> confocal microscope  equipped with a  <dig> Ã  objective. several images were acquired across a relatively large section of the specimen, such that each image contained at least one gc, and the set of all images formed a mosaic .

evaluation
from the data, prepared as described above, we analyzed four independent data sets that represent magnified regions of small sections of lymph nodes. for each specimen,  <dig> gcs were imaged independently, with a slight overlap of the nearby image, so that a mosaic could be formed. the images consisted of 4-color channels, were  <dig> Ã  <dig>  and contained an average of  <dig> z-stack slices. we used our algorithm to automatically collect gc statistics by loading all the images in the directory and providing initial input parameter guesses for the pixel intensity threshold and the minimum spot size: Î» = . results of extracting gcs for different datasets are shown in figure  <dig>  showing the contour encountered of the gc region at different z-stack slices.

the algorithms described are efficient, requiring no special hardware, and can run on any modern computer system. in order to appreciate the typical running times, we ran the algorithm on a standard laboratory computer , and execution times to process multi-dimensional images with sizes  <dig> Ã  <dig> Ã  <dig> never exceeded from  <dig>  s and the execution time for the optimization step was always below  <dig>  s for different image sizes.

CONCLUSIONS
our application, pybioimage with the extractgc module provides fully automatic and accurate estimates of gc volumes from an arbitrarily large collection of multidimensional images. the framework pybioimage leverages the relatively recent availability of high quality scientific software based upon python for rapid development of complex image and computation. as such, our application is positioned to tackle several problems described in this paper not provided by standard open-source solutions, such as fiji/imagej. the extractgc module is a relevant bioinformatics tool that should be of interest to scientists working with confocal and 2-photon microscopy imaging and has also served to be a proof of concept module for integrating specific applications within our general software framework. given the usefulness of the extractgc module, we are presently planning to also release a version of the algorithm for both the imagej as well as omero projects.

availability and requirements
project name: e.g. pybioimage package

project home page: http://sourceforge.net/projects/pybioimage/

operating system: platform independent

programming language: phyton, c

other requirements:

license: gnu gpl

any restrictions to use by non-academics: license needed

list of abbreviations
tfreg: follicular regulatory cd4+ t lymphocytes; gc: germinal center; 2d: 2-dimensional; 3d: 3-dimensional; 4d: 4-dimensional.

competing interests
the authors declare that they have no competing interests.

authors' contributions
jf and do conceived, designed and developed the study, do and me implemented the software code, jf, do and me wrote the manuscript. all authors read and approved the final manuscript.

