BACKGROUND
clustering of co-expressed genes has been an active data mining topic and advanced in parallel with the development of microarray technology  <cit> . there is a vast amount of literature on clustering algorithms developed for microarray data analysis  <cit> . microarray gene expression data can be classified into two categories: steady state and time-series gene expression data  <cit> . time-series gene expression data are widely used to study the dynamic behaviour of various biological processes in the cell  <cit> . they can be classified into two categories : short time-series corresponding to 3- <dig> time points  <cit> , and long time-series corresponding to more than  <dig> time points. short time-series are the most abundant type of time-series data in the literature  <cit> . short-time series data are usually very noisy. algorithms that are designed to analyze either steady state data or long time-series data do not perform well on short time-series data due to their relatively small number of time points  <cit> . hence, it is necessary to develop algorithms that can be used specifically for their analysis.

pioneering clustering algorithms such as k-means  <cit> , hierarchical clustering  <cit> , and self organizing map  <cit>  identify full space clusters. unfortunately, in many applications, subspace clusters are more meaningful than full space clusters  <cit> . biclustering algorithms were recently proposed to find subgroups of genes that exhibit similar behaviour across subsets of samples, experimental conditions, or time points  <cit> . nowadays, it is possible to collect expression levels of a set of genes for a given set of biological samples during a series of time points. such data have three dimensions, gene-sample-time , and thus are called 3d gene expression data. to take advantage of the 3d data collected, and to fully understand the biological knowledge hidden in the gst data, we have to move beyond the full space clustering concepts and develop algorithms that can effectively address the problem in the corresponding  <dig> dimensions  <cit> . a 3d cluster consists of a subset of genes of similar expression profiles along a segment of time-series, in a subset of samples. this kind of coherent clusters may contain information that could be used to identify useful phenotypes, potential genes related to these phenotypes and their interaction/regulation.

although subspace clustering algorithms are biologically more meaningful than full space clustering algorithms, the identification of full space clusters are less costly compared to subspace clusters. in fact, most subspace clustering algorithms have been shown to be np-complete  <cit> , thus making their identification computationally expensive. this is due to the fact that in full space clustering, one usually looks for clusters across the entire dataset at once, whereas in subspace clustering one looks for clusters across all possible subsets of the data space.

most clustering models, including those used in subspace clustering described above, define similarity among different objects by distances over either all or only a subset of the dimensions  <cit> . however, distance functions, such as euclidean distance, manhattan distance, and cosine distance are not always adequate in capturing correlations among the objects. in fact, strong correlations may still exist among a set of objects even if they are far apart from each other as measured by the distance functions  <cit> . pioneering works on triclustering algorithm relied on graph-based approaches and similarity measures to mine triclusters  <cit> . for example, the triclustering algorithm of  <cit>  mines the largest triclusters satisfying a constant multiplicative or additive relationship between the expression levels in a cluster. such a strict constraint considerably limits the capability of an algorithm to identify useful patterns and may not be able to fully cope with noise when dealing with time-series gene expression data in general. several of the algorithms designed for the analysis of long time-series - do not work well on short time-series due to over fitting  <cit> . also, most pioneering triclustering algorithms described in the literature only focus on the similarities between the biological samples and do not consider differences between them.

in this paper, we developed an order preserving 3d clustering algorithm named optricluster, for 3d short time-series data mining. a 3d short time series corresponds to gst with 2- <dig> samples and 3- <dig> time points. in fact most of the 3d time series gene expression data in the geo database  <cit>  have less than  <dig> samples and less than  <dig> time points. optricluster is able to identify triclusters  with coherent evolution from a given 3d dataset using a combinatorial approach on the sample dimension, and the order preserving  concept on the time dimension. we say that a matrix is order preserving if there exists a permutation of its columns such that its rows are monotonic functions  <cit> . the op concept is a well established mathematical theory, and has been used by several other authors in the past to tackle the problem of gene expression data analysis  <cit> .

the integration of the two methodologies  allows one to study similarities and differences between samples in terms of temporal expression profile and/or differential expression. basically, the novel triclustering algorithm is able to mine triclusters of genes in a subset of samples, with expression level having same directions  across the time-series experiments. optricluster takes into account the sequential nature of the time-series and the noisy nature of the data through the op concept. the op model focuses on the similarity in the relative order of the time points, rather than on the distance between the actual expression levels as in several other clustering models  <cit> . this approach is potentially more robust to the stochastic nature of the gene expression levels, and to the variation caused by the measurements procedures.

RESULTS
optricluster is applied to analyze four different 3d gene expression datasets: immune response in mice infected by malaria , systemic acquired resistance  in arabidopsis thaliana, similarities and differences between inner and outer cotyledon in brassica napus during seed development, and brassica napus whole seed development. we used these four datasets to show how optricluster can be used to tackle a variety of problems in computational biology. for example, application of optricluster to the mouse dataset shows how it can be used to study similarities and differences between biological samples in terms of temporal expression profiles. application to the arabidopsis thaliana sar dataset shows how it can be used not only to study similarities and differences between biological samples, but also to infer the transcription network, that is, the relationship between the transcription factors  and their target genes. application to the brassica napus cotyledon dataset shows how optricluster can be used to study the spatial similarities and differences between biological samples in term of temporal expression profile, whereas its application to the brassica napus whole seed dataset shows how optricluster can be used to handle classical short time-series dataset .

implementation
optricluster is implemented entirely in java and will work with any operating system supporting java  <dig>  or later. the executable optricluster java package is available as additional file  <dig>  and its user manual as additional file  <dig>  portions of the interface of optricluster are implemented using a third party library, the jfreechart  <cit> . in a post processing step, optricluster also makes use of external gene ontology files. optricluster can download the gene ontology and gene annotation files directly from the gene ontology websites. in fact the go analysis plug-in of the gene ontology analysis   <cit>  package that we recently developed is integrated into optricluster for biological evaluation of the clusters. a user of optricluster first specifies a tab delimited gene expression data file as input to optricluster. the file is uploaded and displayed as a table on the screen. the user can check their data and do other manipulations on the data once it is displayed. this includes visual check, plot and view the distribution of the input gene expression data, which may help in deciding the best ranking threshold input parameter . next, the user selects the analysis parameters through the optricluster parameter input interface. following this input phase, the optricluster executes and a new table will appear displaying the clustering results, where new columns are added to the initial table and they correspond to the ranking profile of each gene across experimental time points in each sample respectively. from this step, the user will either select between constant, conserved, and divergent patterns for further analysis as explained below.

there are three types of patterns that the user can choose from: conserved patterns, divergent patterns, and constant patterns. conserved patterns correspond to group of genes having same behaviour across experimental time points in subsets of samples. divergent patterns correspond to group of genes that behave differently in at least one sample along the time point experiments. constant patterns correspond to groups of genes that the expression levels do not change across experimental time points. once the type of patterns is selected, a new table appears on the screen, describing the subset of samples the number of genes with the selected patterns in each subset of samples. by clicking on a subset of sample, another table appears showing how the genes are grouped in the selected patterns and in the corresponding subset of samples. finally the user can view the genes in each group as a table by clicking on the corresponding ranking profile. figure  <dig> shows an example of the analysis of a conserved pattern. we refer the reader to the optricluster user manual  for more details relative to optricluster software.

note that, at each step of the analysis described above, optricluster offers the possibility to the user to perform several other tasks and gain more knowledge on the results obtained at the corresponding step. these manipulations include: open the table in excel and use the excel capabilities for other manipulations. plot and view the pie chart or the bar chart of the results. merge cluster with similar profile for further analysis. obtain the difference between patterns in different subsets of samples. perform and visualize the gene ontology enrichment analysis of the group of genes obtained at that particular step.

simulation and robustness to noise
to test the robustness of optricluster to noise, we used the adjusted rand index . ari has been used previously for clustering techniques comparison and robustness to noise  <cit> . ari's values lie between  <dig> and  <dig>  where larger value means higher similarity between the clustering results. if the experimental result is perfectly consistent with the domain knowledge , the index value will be  <dig>  if a clustering is no more than a random choice, the index will be  <dig> 

we generated a synthetic 3d microarray dataset, consisting of n =  <dig> genes, m =  <dig> samples, and l =  <dig> time points, with four order preserving triclusters across the entire four samples imbedded in it. each tricluster had  <dig>   <dig>   <dig>  and  <dig> genes respectively and there was no overlap between the four triclusters. thus the domain knowledge corresponds to the four embedded triclusters. we added 0%, 2%, 5%, 10%, and 15% noise to the original dataset and computed the ari values between the triclustering results on noisy datasets and the domain knowledge. such a process was performed using optricluster a modified version of tricluster  <cit>  gtriscluster  <cit> , and the k-means algorithm. for the k-means algorithm the 3d dataset is converted into a 2d dataset as follows. the n × m × l dataset becomes n × ml dataset. for each level of noise, each algorithm was run five times and the mean of the ari obtained were represented in figure  <dig>  it can be seen that the ari values of optricluster are larger than those of modified gtricluster, modified tricluster, and the k-means algorithm. this means that the optricluster algorithm developed in this study performs better on order preserving patterns, and it is more robust to noise than modified tricluster, modified gtricluster, and the k-means algorithm. comparative analyses were only performed by studying similarity  between samples because tricluster, gtricluster, and the k-means algorithm cannot investigate differences between samples, for which, only the proposed optricluster does.

immune responses in mice infected by malaria
the goal of this study is to examine whether immune responses to malaria  infection differ between the sexes and are altered by the presence of gonadal steroids. to tackle this problem, we used a 3d short time-series gene expression dataset downloaded from the gene expression omnibus website  <cit> , . this dataset has n =  <dig> probes and it corresponds to the gene expression profiles of mice response to plasmodium chabaudi  <cit> , representing two disease states , two genders , two protocols , and four time point experiments:  <dig>   <dig>   <dig>  and  <dig> days after inoculation . we refer to the four biological samples used in this study as follows: intact male , intact female , gonadectomized male , and gonadectomized female . for ethical issue pertaining to this dataset, see reference  <cit> .

after data pre-processing and normalization, we ended up with  <dig> significant probes, corresponding to  <dig> unique genes. the three dimensions of the data are: g , s , and t . we set the input parameters to: minimum number of genes in a cluster im =  <dig>  minimum number of samples in a cluster jm =  <dig>  and differential expression threshold  δ =  <dig> . with the minimum number of samples in a tricluster set to  <dig>  the algorithm generated 24- <dig> =  <dig> combinations of samples .

the results shown in figure  <dig> suggest that intact males  have the highest number of genes  that the expression level changed following pathogen attack. this indicates that im is probably more vulnerable to plasmodium infection compared to the other three phenotypes. this is consistent with the phenotypical observation made in  <cit> . indeed the gene ontology analysis shows that im have more genes involved in the go biological processes, such as, cell death , programmed cell death , apoptosis , than if . on the other hand, these same results showed that gonadectomy of males altered the sex-associated differences, suggesting that sex steroid hormones may modulate immune responses to infection  <cit> .

in terms of differences between the four samples tested, our analysis identified genes that were unique to only one and a combination of two or more samples. for example we identified  <dig>   <dig>   <dig>  and  <dig> genes unique to im, if, gm, and gf respectively. these genes may be the origin of the differences between the four samples after plasmodium infection. thus, they may represent potential targets or biomarkers to be used not only to understand the differences between the samples, but also to develop novel therapeutic means.

systemic acquired resistance in arabidopsis thaliana
we applied optricluster to study similarities and differences in defence mechanism of arabidopsis thaliana against pathogenesis. the goal of the study is to understand the roles of npr <dig> and some of tga family tfs during systemic acquired resistance in arabidopsis. the 3d microarray data used here was obtained using affymetrix arabidopsis genechip consisting of  <dig> probes. the columbia wild-type , mutant npr <dig> , double mutant tga <dig> tga <dig> , and triple mutant tga <dig> tga <dig> tga <dig>  were treated with salicylic acid  for  <dig>   <dig>  and  <dig> hours. after data pre-processing and normalization, we ended up with  <dig> significant genes. we set the columbia wild-type as our baseline and took the log <dig> ratio of the mutant gene expression levels over the wild-type at respective time points.

given the n × m × l gene expression matrix, our goal is to identify the set of genes that are controlled by the tfs at a given time point, to study similarities and differences between them, and to infer a temporal transcriptional regulatory network controlling sar in a. thaliana. optricluster generated 24- <dig> =  <dig> combinations of samples. below we present some of the results obtained by optricluster. figure  <dig> for example shows an example of divergent patterns. the expression levels of these genes are relatively unchanged  in three samples and behave differently in one. for example, in the first row, significant changes are visible within wt, whereas the other three genotypes stay relatively constant  across the three time point. clearly, since the expression level of these genes stay constant in three of the four experimental conditions and change considerably in only one of them, these genes may represent potential targets of the tfs tested in this study.

gene ontology analysis reveals that several of the genes that are regulated by the three sets of tfs  at  <dig> h  are associated with response to stimulus , stress , abiotic stimulus , biotic stimulus , and defence mechanism . these correspond to the fact that the plants were treated by sa, which mimic pathogen infection. they also confirm the fact that the tfs tested in this study are known to play major roles in plant defence mechanism  <cit> . in this application of optricluster, we used similarities in gene expression profiles of arabidopsis thaliana with single, double or triple mutations of key transcription factors in the defence signalling network. we studied the network dynamics over a time series after treatment with salicylic acid , which mimics a pathogen infection. we found that most sa-responsive genes were affected by at least one mutation and that most affected genes fit one of a few patterns of regulation. we then provided a first glimpse into the temporal pattern of the gene regulatory network during systemic acquired resistance in arabidopsis.

similarities and differences between inner and outer cotyledon in brassica napus during seed development
canola  has two cotyledons; one embraces the other. the outer cotyledon is bigger and has higher oil content than the inner one. there exists similarity and differences in the development of and the metabolic processes between the two cotyledons. the objective of this analysis is to unravel the spatial similarity and differences in gene expression profiles between the two cotyledons in order to identify genes that play important roles in seed development and oil production. after obtaining the respective cotyledons, dna microarray experiments were performed on each cotyledon using the dna combimatrix  <dig> k chip, developed by plant biotechnology institute, nrc  <cit> . the output yielded two time-series data matrices xi and xo representing the gene expression level in the inner and outer cotyledons, respectively. the time-series has six time points,  <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig> days after pollination . after data pre-processing and normalization, significantly expressed genes were identified for this study. the three dimensions considered in this analysis were g , s , and t .

with the minimum number of samples in a tricluster set to  <dig> and a threshold of ~  <dig>  fold change, the algorithm generated 22- <dig> =  <dig> combinations of samples . the subset of sample {i, o} yielded similar patterns between the inner and outer cotyledons, whereas the equations {o} - {i, o}, or {i} - {i, o} yielded patterns specific to outer or inner cotyledon, respectively. analysis reveals  <dig> genes depicting the main difference between the two samples across the six time point experiments  and several others across subsets of the six time points . among the  <dig> genes,  <dig> and  <dig> were highly expressed in inner compared to outer, and outer compared to inner, respectively.

brassica napus whole seed development
we also analyzed another in house combimatrix  <dig> k brassica napus microarray dataset, which corresponds to the gene expression profiles during seed development. it has eight times points:  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig> dap. each time point has six biological replicates. after data pre-processing and normalization, we ended up with  <dig> probes, from which we took the mean of the replicates. figure  <dig> show examples of patterns identified using optricluster.

biological evaluation of these clusters showed that they are highly enriched under seed development; fatty acid and lipid metabolism; fatty acid and lipid biosynthesis; lipid storage, transport, and localization; oil content and biosynthesis, with p-values <  <dig> e- <dig> . these results demonstrate that seed development and fatty acid synthesis are highly correlated. indeed, this is consistent with the fact that in higher plants, the biosynthesis of most fatty acids and lipids is physiologically coupled with seed development  <cit> . further analyses showed that most of these patterns are highly positively or negatively correlated with the expression profile of transcription factors such as: lec <dig>  wri <dig>  fus <dig>  abi <dig>  and abi <dig>  this observation is consistent with the fact that the lec <dig> function is partially dependent on abi <dig>  fus <dig>  and wri <dig> in the regulation of fatty acid and fatty acid derived complex lipid  <cit> . it is also consistent with the fact that wri <dig> plays a significant role during oil accumulation in maturing seed, that wri <dig> is a prerequisite for fatty acid synthesis, and is important for normal embryo development  <cit> . most of these results suggest that, the genes involved in these patterns may represent potential targets that could be used for the genetic improvement of oil production in b. napus.

discussion
in this paper, we developed a subspace clustering algorithm optricluster, for 3d short time-series data mining. optricluster is able to identify triclusters  with coherent evolution from a given 3d dataset using a combinatorial approach on the sample dimension, and the op concept on the time dimension. the amalgamation of the two methodologies, combinatorial and order preserving allows one to study similarities and differences between samples in terms of temporal expression profile and/or differential expression. the combinatorial approach on the sample dimension is necessary because the goal of the algorithm is not only to study similarities between biological samples, but also to study differences between them at the single and multiple samples level. because of this enumerative approach, it makes optricluster computational heavy when one is dealing with an increasing number of samples. as a result, we have restrictions for analyzing 3d short time series genes expression data. that is 3d gene expression with ~3- <dig> time points and ~2- <dig> samples. for longer 3d time series, optricluster will still work, but the computational complexity of the algorithm will increase exponentially with the increase in the number of time points and/or the number of samples.

because of this combinatorial approach in the sample dimension and the op concept in the time dimensions, the algorithm is able to mine clusters of genes in a subset of samples, with expression level having same directions across a time-series experiment. optricluster takes into account the sequential nature of the time-series and the noisy nature of the data through the op concept. the results of gene ontology analysis and statistical analysis show that optricluster is robust to noise and is able to detect the similarities and differences between samples in terms of temporal expression profile of relevant functional categories. this is due to the fact that the op model focuses on the similarity of the relative order over the time-series, rather than on the similarity of the actual expression levels based on a distance measure as in several other clustering models. this approach is potentially more robust to the stochastic nature of the gene expression values, and to the variation caused by the measurement procedure. this is clearly demonstrated in our comparison among the four clustering methods . the op model has been accepted as a biologically meaningful clustering approach, capturing the general tendency of gene expressions across a subset of conditions  <cit> .

furthermore, optricluster also offers the possibility to analyze the genes that the expression profiles change similarly across different samples for a given time point. this is easily done within the current version of the optricluster algorithm by simply swapping the time dimension with the sample dimension.

one relevant application of optricluster is the identification of genes that may play the role of housekeeping. this is revealed by the study of similarities among the samples. indeed, several of the genes with same behaviour across all the samples and over the entire time series are usually not affected by phenotypes . thus these genes may represent genes that are needed by all cells of the organism to fulfill basic cellular functions. as has been shown in the literature, housekeeping genes have many applications. they can be used as transcription and expression controls in laboratory experiments, they can be used to infer the set of basic cellular functions, and they are essential to characterizing normal and diseased states  <cit> . one has to keep in mind that in medicine, genetic diseases that are linked to housekeeping genes are more likely to affect multiple organs; in microbiology, housekeeping genes of pathogens play a role in enhancing virulence; and in evolutionary biology studies, housekeeping genes diverge more slowly than other genes  <cit> . therefore, their detection may enhance the creation of new drug targets and can also be used for subspecies discrimination.

the study of differences among samples in terms of co-expression is among the most important applications of the optricluster algorithm. this feature does not exist in the other three algorithms tested in this study. in the mice response to plasmodium infection for example, optricluster was able to identify a set of genes specific to each sample. this group of genes can be used as biomarkers for the differentiation between these samples, thus for the detection of diseases, and subsequently use as targets to design drugs that are specific to diseases at their subtype level.

in the arabidopsis data, optricluster identified genes that may only be regulated by one tf, or a combination of two or more tfs. this kind of information can be used to identify transcription networks as we did in this analysis, and subsequently to get more insights between tfs and gene regulation. figure  <dig> for example show that only a small number of genes in each or multiple mutant genotypes overlaps across different time points. this observation suggests that most of the genes that participate in sar have impulse behaviour; different sets of genes are targeted by the corresponding transcription factors at different time points during a response to pathogen infection. on the other hand, these results show that the true behaviour of the underlying biological process is captured at different time points, with each time point containing a unique piece of information that should be integrated in order to get the whole picture underlying the signalling pathway during sar. therefore, studies, such as  <cit> , that focus on a single time point to infer genetic information and generalize the results to describe the pathogen-host interaction, could miss out important information.

in the cotyledons dataset, optricluster depicted differences in the inner and the outer cotyledons in terms of direction and magnitude of the gene expression level, and thus yielded more biological information relative to the spatial distribution of gene expression at the molecular, cell, tissue, organ, or system level. the analysis of the brassica whole seed dataset showed that optricluster can not only be used to study similarities and differences among samples in a 3d short time series, but also, can be used to tackle classical short time-series problems. in several of these studies optricluster offered more biological insights to the problem compared to prior computational approaches used to tackle similar problems.

CONCLUSIONS
we developed a subspace clustering algorithm for 3d short time-series gene expression data analysis. the developed algorithm is used to identify statistically and biologically significant clusters from 3d gene expression data, to study similarities and differences between samples in terms of co-expression and/or differential expression. biological and statistical results obtained showed that optricluster is robust to noise and is able to detect the temporal expression profile of relevant functional categories in terms of similarities and differences in samples. the optricluster is implemented in java and it is available as additional file  <dig> to this manuscript.

methodology
our objective is to develop a subspace clustering algorithm that is able to cope with the sequential nature of a time-series, along with the noisy nature of a dataset. we also aim at developing an algorithm that can be used to identify biologically significant subspace clusters from a given 3d short time-series gene expression dataset. this would allow one to study similarities and differences between two or more biological samples in terms of temporal expression profile.

definitions
given a set of n genes g = {g <dig>  . . ., gn, ..., gn}, a set of m biological samples s = {s <dig>  . . .,sm, ..., sm}, and a series of l time points t = {t <dig>  . . ., tl, ..., tl}, a 3d microarray gene expression dataset or gene-sample-time  dataset is a real-values n × m × l matrix, a = {anml}. each entry anml represents the expression level of gene gn in sample sm at time tl. we shall also refer to the 3d data as a set: a = {g, s, t}. in the sequel, we denote the expression level of gene gn in sample sm across the time points as fnm, which is a row vector. the expression profile of gene gn in all samples and across the time-series fn, which is a 2d matrix. thus the 3d gene expression matrix can be viewed as a set of 2d matrices in the horizontal plane: equation  <dig> 

  a=f1f2⋮fn⋮fn 

a 3d cluster or tricluster is a 3d submatrix c = {cijk} of a, or a subset c = {i, j, k}, with i ⊆ g, j ⊆ s, and k ⊆ t, such that the content of c = {cijk} , verifies a desired pattern: constant, coherent values, or order preserving.

problem statement
given the 3d matrix a as defined above and an ordering ranking threshold δ, find all triclusters c = {i, j, k}, with minimum number of genes imin, minimum number of samples jmin, such that the content of each c = {cijk} is order preserving over a given segment of a time-series. since we are dealing with short time-series in this study, we set k = t. thus we are interested in patterns that increase, decrease, or stay constant coherently across the entire time-series experiments. note that constant patterns and coherent values are subsets of order preserving clusters.

optricluster
our triclustering algorithm identifies triclusters of genes with expression level having same direction across the time series experiments in subsets of samples. optricluster takes into consideration the sequential nature of the time-series and is able to cope with the effect of noise through the order preserving approach. basically, for a given subset of samples, we say that a tricluster is order preserving if there exists a permutation of the time points such that the expression levels of the genes are monotonic functions. such a matrix is defined by equation  <dig> below. in this example, it is obvious that whatever permutations of its columns that we do, the variation between the values in its rows across the columns will always follow the same patterns.

   <dig> 

furthermore, there exists a permutation of its columns  or  such that the values of its rows are monotonic increasing or decreasing function, respectively.

in all, after the data pre-processing and normalization, optricluster has five main steps . first, optricluster performs the gene expression data quantization. second, it ranks the expression level of the genes across the time-dimension in all the samples for a given δ. third, it identifies the set of distinct coherent 3d patterns in the 3d dataset. fourth, triclusters of coherent patterns are formed by assigning genes with similar ranking along the time-dimension and across subsets of samples to the same group, then divergent patterns are identified. finally, statistical significance and biological evaluation of the triclusters identified are performed.

gene expression matrix quantization
the first step of optricluster which is in fact optional consists of performing the gene expression data quantization. this is due to the fact that we are not only working with noisy data, but also dna experimental data contains missing values. many techniques are available in the literature to deal with noise through data quantization and to recover missing values by imputation  <cit> . optricluster uses the following approach for data quantization. given the ordering and ranking threshold δ, for each row  and a given sample, optricluster computes e = /δ, where b <dig> = min), be = max), and δ ≠  <dig>  note that e is always rounded to the next integer of /δ. then the interval  is divided into e equal intervals:  = , where be = b <dig> + eδ, and e =  <dig> to e. finally, a new expression level of the corresponding gene in the considered sample at the given time point is obtained using equation  <dig> 

  αe=/ <dig> 

specifically, if the expression level fnml of the corresponding gene gn in the given sample sm and at a given time points tl falls in the interval [be- <dig>  be[, then it is quantized to the centroid αe of that interval. subsequently, each centroid αe is assigned a ranking order .

note that, for a given microarray data, if the distribution of the expression levels of most genes in each sample and across the time points are densely located in a certain region, depending on the δ value, the quantization scheme defined above will likely put the densely related genes in the same cluster, usually the constant ones. thus the value of δ should be chosen based on the following criteria: distribution of the gene expression data, the desired fold change between the expression levels of the genes across the time series, and based on the expected level of noise in the microarray data. since the later is difficult to measure in real applications, one can also run the algorithm several times for a given value of δ, with perturbation values below and above it, and consider only the clusters that the content does not change a lot.

3d rank expression matrix
optricluster then uses the quantized 3d gene expression matrix to generate a 3d rank expression matrix in the second step. a 3d rank expression matrix is an n × m × l matrix, r =  = , in which every row along the time-dimension for a given sample is a vector of the ranks of the corresponding expression values in a, in an increasing or decreasing order. for example, if the expression levels of gene gn in sample sm along the time-dimension is fnm =  at δ ≤ <dig> , then, the corresponding row in the rank matrix would be rnm =  <cit>  in the increasing order. the ranking matrix of the example of an order preserving matrix defined by equation  <dig> above will be:

   <dig> 

without lost of generalities, one can easily see from this example  that the rows of the ranking matrix of an order preserving matrix will always be identical. in fact, this property is exploited below for the identification of order preserving patterns from a 3d short time series gene expression matrix. note that, if more than two entries have the same value, they are given the same ranking. for example  would be  <cit> . this approach allows the identification of constant patterns.

there are several advantages associated with this transformation. first, it avoids the use of greedy algorithms, probabilistic approaches, and exhaustive permutations along the time-dimension, and thus speeds up the computation time. second, it is obvious that for any k > <dig> rows fnm of similar ranking rnm, under any permutation of the time points, their order is always preserved . thus they will always belong to the same coherent tricluster. since the rank is conserved under any permutation along the time-dimension of the 3d gene expression matrix and given that we are dealing with multiple samples at the same time, the probability that a random pattern might be picked up in a cluster is very low.

identification of distinct patterns
in its third step, optricluster identifies the set of distinct 3d coherent patterns that can be found in the 3d gene expression matrix a. given the 3d gene expression matrix a =  as defined above, with a set of genes g = {g <dig>  . . ., gn, ..., gn}, a set of biological samples s = {s <dig>  . . .,sm, ..., sm} and a series of time points t = {t <dig>  . . ., tl, ..., tl}, we define the biological sample space Ω as the set of all possible combination of the samples, and Γ their number. that is, if s = {s <dig> s <dig> s3} as in figure  <dig>  then the biological sample space would be Ω = {{s <dig>  s <dig>  s3}, {s <dig>  s2}, {s <dig>  s3}, {s <dig>  s3}, {s1}, {s2}, {s3}} and Γ =  <dig>  recall that rn corresponds to a row vector of the ranks of the nth gene, in sample s and across the entire time series t. hence, for each combination Ωi∈Ω, the exact number hi of distinct order preserving triclusters that can be found in the 3d dataset is the number of distinct 2d rn matrices of its corresponding 3d ranked matrix r. thus, the set of 3d distinct order preserving patterns, v, can be identified by considering r as a set of 2d matrices rn, that is, r = {r <dig>  r <dig>  ..., rn, ..., rn}, and identify all distinct rn in it. from the above definitions, one can easily show that the exact number Λ of order preserving triclusters in the 3d gene expression matrix is:

  Λ= ∑i=1Γhi 

recall that hi is the number of distinct 2d rn corresponding to each Ωi∈Ω as defined above.

conserved clusters identification
once the exact number of distinct 3d order preserving patterns has been identified, for each Ωi∈Ω, optricluster assigns each gene to one of the hi groups by comparing each distinct pattern vk of v  to rn, and assign gene gn to the order preserving tricluster c{k} each time rn = vk . this approach is guaranteed to identify all order preserving triclusters of size i × j × k, with imin ≤ i ≤ n, jmin ≤ j ≤ m, and k = l, where imin and jmin are the minimum number of genes and samples in a tricluster, respectively.

since the goal of the optricluster algorithm is to study the similarities and differences between samples in terms of the expression profile of all genes, imin and jmin should be set to  <dig>  in this case, the algorithm will identify all the conserved clusters and perform comparison between them at the single sample and single gene level in the divergent patterns identification step, as explained below.

divergent patterns identification
the 3d procedure as presented above identifies sets of genes that behave similarly  across the subsets of samples considered. the sets of divergent patterns d can be easily derived from the sets of conserved ones using equation  <dig> 

  dpq=c{p}-c{q}=ip-iqjp-jq,p≠q 

c{p} = {ip, jp, kp} and c{q} = {iq, jq, kq} are two conserved triclusters . basically, equation  <dig> identifies sets of genes that are co-expressed in the subset of sample in c{p}, but split and co-expressed differently in one or more samples in c{q}. for example, if clusters c{p} and c{q} have the same op patterns, and if c{p} = {{g <dig>  g <dig>  g <dig>  g4}, {s <dig>  s2}, {t <dig>  t <dig>  t3}} and c{q} = {{g <dig>  g2}, {s <dig>  s <dig>  s3}, {t <dig>  t <dig>  t3}}, then dpq = {{g <dig>  g4}, {s3}, {t <dig>  t <dig>  t3}}, meaning that genes {g <dig> g4} have different behaviour in {s3} compared to {s <dig> s2}. the computational burden of this step is reduced because only triclusters with same op or ranking patterns are compared. this is due to the fact that ranking patterns are associated with the expression profile and are unique to each cluster for a given subset of samples.

statistical significance and complexity analysis
the statistical significance of each identified tricluster with i genes and j samples is assessed by computing the tail probability that a random dataset of size n × m × l will contain an order preserving tricluster with i or more genes and j or more samples in it. in principle, the probabilistic description of the reference 3d random matrix would be that of the observed noise in the microarray experiment  <cit> . since this distribution is difficult to calculate in closed form, the upper bound of this tail probability is estimated using the same approach as in  <cit> . assuming that we have a dataset with l time points that are independent and identically distributed according to the uniform distribution, the probability that a random gene-sample supports a given cluster is equal to the number of possible time points permutations or 1/l!. since the genes and samples are assumed to be independent, the probability of having at least i genes and j samples in the cluster is the i -tail of the ) binomial distribution, i.e.:

  p= ∑n=innn1l!n1-1l!n-n 

as there are ls = l! ways to choose an op tricluster of size l, the following expression z is an upper bound on the probability of having a tricluster of size l with i or more genes and j samples:

  z=jl! ∑n=innn1l!n1-1l!n-n 

we use this bound to estimate the significance of any given tricluster of size l with i genes and j samples. the best tricluster is the one with the largest statistical significance, i.e., the one with the smallest z therefore, as long as that upper bound probability is smaller than any desired significance level, the identified tricluster in the real 3d gene expression matrix will be statistically significant.

the overall complexity of the triclustering algorithm is o. recall that the 3d short time-series gene expression data a is an n × m × l matrix. the 3d rank matrix can be identified within o. the set of distinct 3d patterns can be identified with o. finally, the set of coherent conserved triclusters can be identified within o. in all, the complexity of the triclustering algorithm is o + o + o, which is o). note that the complexity for identifying the sets of divergent patterns from convergent ones is negligible. since ΓΛ >Γ and ΓΛ >ml, the overall time complexity is o.

competing interests
the authors declare that they have no competing interests.

authors' contributions
designed the algorithm and performed clustering: abt. implemented the algorithm in matlab and java: abt. conceived and designed experiments: abt, sp, and yp. performed the arabidopsis and brassica biological experiments and contributed the data: hs, pf, yh, jz, dh, and ac. analyzed the data: abt, sp, zl, and yp. wrote the first draft manuscript: abt. commented on the manuscript with important intellectual contributions: sp, ff, pf, jz, zl, ac and yp. revised the manuscript: abt and yp. 

supplementary material
additional file 1
optricluster java package.

click here for file

 additional file 2
optricluster user manual.

click here for file

 additional file 3
expression profile of npr <dig> in different samples the axis corresponds to the time point experiments, the y-axis the expression level in log <dig>  each curve corresponds to a sample.

click here for file

 additional file 4
statistic of differences between inner and outer cotyledons the x-axis corresponds to the combination of time points, the y-axis the number of genes.

click here for file

 additional file 5
gene ontology analysis of whole seed brassica napus clusters go analysis of the  <dig> clusters in whole seed development brassica napus.

click here for file

 acknowledgements
this work is jointly supported by genomics and health initiative, institute for information technology, and plant biotechnology institute of the national research council canada. we thank william leung for implementation of an earlier java version of the optricluster core algorithm, and alex gawronski for implementation of graphical user interface and tools for cluster merging.
