BACKGROUND
when modeling in systems biology and in systems medicine, the resulting data is often extensive, complex and heterogeneous. a visual representation can support users in data analysis and interpretation  <cit> . however, the manual construction of such representations is a time-consuming task. in addition, the manual exploration of the visualized networks may not even be feasible due to the size. recently, standards emerged for the representation of biological models in a consistent and reusable manner. the network for modeling in computational biology   <cit>  coordinates the development of such machine-readable standards and implements reliable and efficient model reuse. one of the combine core standards is the systems biology graphical notation   <cit>  for the visual representation of biological networks. it is widely used in systems biology and fills the previous gap of standardized visual representations for biological networks.

sbgn is composed of a set of three complementary languages: process description , activity flow  and entity relationship . pd shows “all the molecular processes and interactions taking place between biochemical entities, and their results”  <cit> . it creates detailed sbgn maps by representing hierarchical structures and biological complexes. af “shows only influences such as ‘stimulation’ and ‘inhibition’ between the activities displayed by the molecular entities”  <cit> . it is the most elementary of the sbgn languages. finally, er shows all “influences of entities upon the behaviour of others”, ignoring any temporal aspect  <cit> . sbgn diagrams are drawn using three sets of standardized glyphs for the three sbgn languages. sbgn maps are represented in an xml-based format: the sbgn-ml  <cit> , which is both human-readable and machine-readable. they can be exported from software tools such as sbgn-ed  <cit>   or celldesigner  <cit> . in this work, we consider only the pd and af languages and propose to store biological networks as graph-oriented models in a graph database. we take existing biological models represented in sbgn-ml files as input and convert them into a graph representation. the novelty of our work lies in the fact that, for the first time, sbgn maps are stored in a structured way and thus can be queried and compared to each other.

several studies show that graphs are realistic and well-suited for the representation of biological networks  <cit> . employing graph databases to store and explore biological models requires less effort and offers new insights into analyses  <cit> . our recent paper  <cit>  describes the efficient storage of computational models in a graph database and informs on the improved interrogation of data relationships when represented as a graph. in that work, we show that it is more efficient to query sbml and cellml models based on their representation as a graph. one of the many interesting possibilities of applying the queries  <cit>  is to highlight the important nodes in a network  <cit> .

the neo4j graph database  <cit>  was chosen for the representation of biological pathways. neo4j is a freely available, labelled property graph database. the concepts and associations among them are represented as nodes connected by edges . the neo4j nodes and relationships can be categorized using the “label” and “type” features, respectively. additional information about entities can be stored as attributes . an example is given in fig.  <dig>  for access to the graph database, the neo4j framework provides several apis  and integrates a web-based, intuitive graphical user interface. integration and exploration of data within the database are realized using cypher, a declarative language proposed by the neo4j framework  <cit> . neo4j recently became a popular technology in different areas of computational biology  <cit> . it is a key technology for model management tasks  <cit>  and it was discussed as a mechanism to improve performances in network analysis  <cit> . further studies show that neo4j performs well on distributed and heterogeneous data when compared to relational databases  <cit> . it is especially true when the searches are string-based, which is the case for sbgn-ml documents.
fig.  <dig> workflow of ston software. this figure shows the workflow of the ston framework: an sbgn-ml file is provided as the input to the framework. it is parsed by ston and converted into a graph representation using the mapping rules described in the additional file  <dig>  the resulting data is then stored in a local directory as nodes, relationships and properties. neo4j relies on this repository and, if run as a web server instance, offers a visualization of the data. the repository can be queried for biological entities, relations in the network, and similar nodes across networks, as described in the “results” section. the example is the ifng receptor, a biological complex composed of four subunits: ifngr <dig> and ifngr <dig> that are dimerised, and jak <dig> and jak <dig> that are macromolecules. in neo4j, all entities are connected to the complex node with the relationship belongs_to_complex





the sbgn to neo4j  framework is a graph-based tool to extend the existing infrastructure for storing and exploring biological pathways in sbgn-ml format. our work provides a transformation from sbgn maps into a graph representation, thereby enabling: i) efficient management and querying of networks; ii) identification of subgraphs in networks; iii) merging of existing pathways into larger networks.

implementation
external libraries: libsbgn and the neo4j collection
ston is a standalone, java-based framework that uses two sets of external libraries: libsbgn  <cit>  and a collection of neo4j libraries. the latest version of ston  <dig>  works with the libsbgn milestone  <dig> and the neo4j community edition version  <dig> . <dig>  the project and the source code are available on sourceforge  <cit> , under the gnu general public license version  <dig>  .

libsbgn provides access to sbgn through reading, writing and validation of sbgn-ml files and supports both, c++ and java programming languages. the library offers several test files in the three sbgn languages. test files contain small sbgn networks and are available for tool developers to check for sbgn compliance. the files are created by the developers of libsbgn whenever new functionality is added to the languages. the libsbgn project also provides example pathways to showcase the features of the sbgn specifications  <cit> . we use libsbgn to read sbgn-ml files and for validation.

the neo4j libraries encode functionality for the neo4j graph development , and provide access to the neo4j database environment, including a web interface to query the data. ston converts existing sbgn pd and sbgn af files into a neo4j representation. as input, it takes a sbgn pd or a sbgn af file, and a path to the neo4j database location.

the ston framework then parses the sbgn-ml file and maps it on a graph structure . the graph representation, which is processable by neo4j, is built according to the given sbgn-ml file; the location of the obtained graph has to be specified by the user . we ran ston with the test files available from libsbgn, with the sbgn bricks examples  <cit> , and with the inos  pathway  <cit>  that we will use in the results section to illustrate the possible applications of using ston.

workflow
the representation of biological pathways in graph databases requires translation rules. the sbgn-ml format already describes a graph-like structure: glyph nodes  interact with each other by means of glyph arcs . the translation process has been facilitated by the similarity of sbgn-ml and neo4j. sbgn glyph entities are nodes in neo4j, and sbgn arcs are relationships. additional information  is retrieved as properties for neo4j nodes and relationships.

ston provides a mapping of all concepts from sbgn pd and sbgn af. the list of translation rules and properties are available in the supplementary material . we want to highlight two particular transformation rules, which lead to different representations in neo4j than in the original sbgn. the first case involves complex glyphs in pd maps, composed of other biochemical entities called subglyphs. the complex and its entities will be represented as nodes and each node related to this complex will have a relationship belongs_to_complex targeting the complex node. figure  <dig> illustrates the visualization of a complex based on the inos pathway  in pd format and in neo4j after translation. in the sbgn visualization, the complex glyph includes the entities. in neo4j, we add a relationship  between the entities and the complex node to connect them. the second case relates to auxiliary units in af maps, representing complementary information specific to the sbgn biological activity structures. in neo4j, this information is stored as a property of the corresponding biological activity node .

data access
neo4j offers different ways to access the stored data. first, a visual interface is provided by the neo4j web server for human interaction. users can start with a cypher query and then continue to traverse the resulting graph and explore the nodes’ and relationships’ properties. in addition, the web server offers a rest api for programmatic access . using the exchange format json, one can send cypher queries to the server’s data endpoint and receive a json encoded response . on the developer’s side there are also possibilities to connect to the database using an implementation of the neo4j bolt driver in a language of choice  <cit> . once the driver established a connection one can use cypher queries to traverse the database and map the results to objects. this way, data objects can directly be manipulated with a programming language. lastly, an embedded neo4j engine provides direct access the database and without the necessity of using cypher. here, neo4j offers a variety of classes to traverse and manipulate database objects within the programming language.

RESULTS
ston supports modelers and researchers in their analysis of biological pathways. for the first time, pathways represented in the sbgn pd and af languages are programmatically queryable.

we present three biological applications of the ston framework to exemplify how networks can be represented in the neo4j graph database and later on be queried using cypher. the first application is the identification of specific entities and their neighbors in the network. second, we present a method to combine data represented on pd and af levels. third, we describe an approach for identifying common processes found in different networks using the example of the inos pathway. the map was developed by integrating data from several studies . it is composed of  <dig> glyphs and  <dig> arcs and contains most of the graphical elements found in sbgn pd . it is furthermore easily translatable into sbgn af. the inos pathway example is based on sbgn bricks, a set of basic biological patterns that can be combined to create larger maps  <cit> .

 <dig>  identifying entities in a network
when analyzing disease pathways, it is highly important to find disease-associated genes or substructures responsible to understand the organisation of a biological system and the underlying mechanisms  <cit> . therefore, for a given biological entity, it is necessary to identify functionally associated network neighbourhoods, i.e. to extract a target entity and its immediate neighbours from the graph. a reduction of the network’s complexity increases the knowledge about an entity’s environment. using the neo4j graph query facilities, we can find all occurrences of a specific entity together with its connected processes in the graph. as illustrated in fig.  <dig>  we identified subnetworks of ifng in the inos pathway. we obtained the subnetworks by running a cypher query in the neo4j’s web interface . the query traverses through each node in the graph until it matches the targeted one. the system then retrieves the neighbours. the example network in fig.  <dig> shows how ifng binds the ifng receptor to form a complex which is then phosphorylated. the cypher language is flexible and permits to customize queries. for example, users may adjust the depth of the subnetwork they would like to retrieve to explore the neighborhood of an entity. users may also search for a specific structure, e. g., protein-reaction-protein structures, which is facilitated by the use of specific cypher queries.
fig.  <dig> identification of ifng subnetworks involved in the inos pathway. the cypher query launched in neo4j allows to identify the ifng subnetworks in the inos pathway . ifng connects its receptor complex which is then phosphorylated. the statevariable and unitofinformation properties of the ifngr <dig> multimer macromolecule are highlighted to show the difference between the two complexes




 <dig>  linking levels of granularity
the linking of different levels of granularity allows researchers to compare biological networks at different levels of detail. in systems biology, it is highly beneficial to have access to computational tools that can return detailed information about processes occurring in complex biological networks by connecting information from multiple layers. by using the neo4j graph database, we are able to link pd and af diagrams. the purpose is to compare both levels and to help addressing the difficulties related to incomplete knowledge representation. when studying a complex network, for example, we may first be interested in getting an overview of the influences between the biological entities involved . at a later time, we may want to study the processes occurring in a network in more detail . to determine matching parts in the two networks, we use a cypher query  to compare the network graphs and to retrieve links between their nodes. figure  <dig> shows a set of links between the af and pd versions of the inos pathway. the different parts of the maps are highlighted. for instance, at the pd level, the ifng binds with the ifng complex receptor to form a complex, which is then phosphorylated and will stimulate the process of stat1alpha dimerization. at the af level, the activation of stat1alpha is represented more simplistically by ifng and the receptor elements only.
fig.  <dig> linking networks in pd and af representations. the figure shows different levels of granularity of the inos pathway in pd  and af . the yellow relationships represent the linking between equivalent nodes. in the pd network, ifng binds to the ifng receptor complex. this complex will then activate the dimerisation of stat1alpha. in the af network, ifng and elements of the receptor complex  are necessary to activate stat1alpha. in order to create a link, the compared nodes should have different file names, but same name, nodetype, compartment and unit of information. in addition, one node should be represented in the sbgn pd language and another on sbgn af




 <dig>  linking identical processes in two different sbgn pd diagrams
ston is capable of highlighting overlapping structures between two different metabolic graphs  by identifying and linking identical processes. figure  <dig> illustrates two different versions of the inos pathway. the difference is located on the transcription of irf <dig>  both maps show the processes triggered before transcription; however, while the first map focuses on the gene regulatory region gas, the second one shows the gene irf <dig>  in order to connect the environment of the same process node among different maps, initially, ston compares relationships that are connected to the given process node and nodes that are connected to these relationships. furthermore, processes are linked if and only if 1) relationships have the same effect  and 2) the following properties are identical for all nodes related to the corresponding relationships: nodetype, name, unitofinformation, statevariable, compartment. when all these conditions are met, a relationship called identical_process is created. linking identical processes helps to identify overlapping structures. common processes between pathways can be highlighted to support the visual analysis of the biological system.
fig.  <dig> linking identical processes found between two metabolic maps. the figure shows two pd maps: one for the activation of the gene irf <dig> pathway  and one for the inos pathway . visualization from neo4j web interface. the yellow relationships represent the linking of identical processes found in both graphs. those two maps have common processes: the ifng binds the ifng receptor, inducing the phosphorylation of the complex. this stimulates the phosphorylation of stat1alpha. on the left  the gene regulatory region triggers the transcription of irf <dig> and on the right, the pathway activated by the gene irf1




discussion
many models today are represented using standards, including sbgn, and they are getting increasingly extensive. this situation requires new methods and tools for the management and exploration of models. in this paper, we show how the ston framework supports researchers with a visual, graph-based representation of large biological networks.

ston manages heterogeneous data at different levels of biological description by integrating i) various types of biological concepts including metabolites, proteins, complexes, genes, subcellular location, and ii) different types of processes such as metabolic reactions, signalling events and gene regulatory machinery. once represented in a neo4j database, the networks can be interrogated for different topics of interest using the cypher query language. cypher allows for structure-based queries that cannot be answered efficiently on the sbgn-ml file level, nor using sql databases. we tested the capabilities of ston using a biological reference map from the kegg pathway database  <cit> : the large metabolic pathway  composed of  <dig> nodes and  <dig> relationships. the translation and storage of this network with ston takes approximately  <dig> minutes using an intel ®; core™ i7-3930k computer at  <dig> ghz and 32gb of ram .

the modular implementation of the neo4j framework allows to further extend ston to support the management of additional data types such as tissue-specific expression levels or drug target information for proteins. another reason for the easy implementation of these extensions is the adaptability of the neo4j schema. similarly, the existing mapping from sbgn-ml into neo4j can easily be adapted and extended by adding new relationships and node types to the database schema.

in the last few years there has been a growing interest in reconstruction of large disease networks. for example, the reconstruction of maps describing alzheimer’s disease  contains  <dig> reactions. the map of parkinson’s disease consists of  <dig> entities  <cit> , and the atlas of cancer signalling network has  <dig> molecular processes  <cit> . ston also enables the efficient combination of such networks thereby facilitating the identification of common substructures. it is known that functional modules are important factors in understanding the organization of a biological system. a longer-term research application could be the identification of similar substructures in two disease maps, based on the knowledge that disease-related genes are associated with a functional substructure in a certain disease map. this knowledge may give new insight into dysfunctional pathway components that are common in the two disease conditions. the neo4j backend makes such structural queries efficient, even for large networks.

the semantic interpretation of links between identified subnetworks and the judgment how feasible these links are in a biological sense remain two open research questions . ston does not provide solutions to these questions but it is already capable of extracting meaningful and self-contained subgraphs from an existing network. when reusing the subgraphs as building blocks for other models, a decision must be made, whether or not the subgraphs are compatible. for example, one protein can exist in many different states and two different diagrams potentially could have two different states of the same protein. do we merge p <dig> protein in the default unphosphorylated state with a p <dig> protein phosphorylated at serine 15? another example is generic proteins  versus specific proteins  in two different maps: do we make them a single entity or, if not, how do we show the relationships between generic and specific entities in the merged network? these are some of the current general challenges that need to be addressed by the systems biology community. for now, this is left to the user to ensure that two maps prepared for merging are compatible. a step towards automatic merging could be the evaluation of information obtained from the semantic annotations to terms in bio-ontologies. currently the sbgn community discusses about storing ids for entities in sbgn maps  <cit> . by looking at ontologies, we could reduce uncertainties during the process of merging two maps. this approach, however, depends highly on the quality and specificity of annotations. a major hindrance in applying the approach is that the level of accuracy of annotation is often not sufficient to derive reliable conclusions  <cit> .

CONCLUSIONS
ston is a framework that exploits the neo4j graph database to store biological pathways. we mapped the sbgn standard  onto a neo4j structure and we showed how ston enables i) the identification of subnetworks of interest, ii) the comparison of different layers of granularity in sbgn languages and iii) the merge of sbgn diagrams. ston provides new opportunities for managing and querying biological networks, as well as advanced manipulation of subnetworks. this will add to the infrastructure of tools for model management and exploration, which is necessary for efficient use of network approaches in systems biology and systems medicine.

additional files

additional file  <dig> supplementary material. this pdf file contains tables with translation rules of ston and a benchmark table on ston’s performances. 

 



additional file  <dig> visualization of the inos pathway in sbgn pd. this pdf visualizes the inos pathway that we designed from the www.sbgnbricks.sourceforge.net
using the sbgn-ed tool. the ifng forms a complex with the interferon gamma receptor. this will activate the phosphorylation of stat1alpha. after homodimerization, stat1alpha will bind to the gene irf <dig> to activate the transcription of irf <dig>  this protein regulates the transcription of the inos protein, which will links calmodulin to create a complex that will activate the synthesis of nitric oxide . 

 



additional file  <dig> the queries. this text file contains the queries for figs.  <dig> and  <dig> in the “results” section. 

 



additional file  <dig> sbgn files in a combine archive. this combine archive contains the five sbgn-ml files used to generate the benchmark table present in the additional file  <dig>  

 


abbreviations
afactivity flow

apiapplication program interface

combinecomputational modeling in biology network

erentity relationship

gasgamma activated sequence

gbgigabyte

ifnginterferon gamma

ifngr1interferon gamma receptor 1

ifngr2interferon gamma receptor 2

inosinduced nitric oxide synthase

irf1interferon regulatory factor 1

jak1janus kinase 1

jak2janus kinase 2

jsonjavascript object notation

keggkyoto encyclopedia of genes and genomes

masymosmanagement system for models and simulations

pdprocess description

ramrandom access memory

restrepresentational state transfer

sbgnsystems biology graphical notation

sbgn-mlsystems biology graphical notation markup language

sbmlsystems biology markup language

sbosystems biology ontology

sed-mlsimulation experiment description markup language

sqlstructured query language

stat1alphasignal transducer and activator of transcription  <dig> alpha

stonsbgn to neo4j

vantedvisualization and analysis of networks containing experimental data

xmlextensible markup language

