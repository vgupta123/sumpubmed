BACKGROUND
increasing numbers of methods are being developed for parallel nucleic acid analyses for different purposes. many of these methods employ sets of oligonucleotide probes or probe pairs that hybridize to the sequences targeted for analysis, allowing the probe sequences to be acted upon by one or more enzymes, creating new molecular species that reflect the presence or nature of the different target sequences. the reaction products generally contain identifying sequences or other features that allow the separation of signals originating from different targets. this is the case in methods such as the multiplex oligonucleotide ligation assay   <cit> , the multiplex ligation-dependent probe amplification assay   <cit> , the rna- and cdna-mediated annealing, selection, extension and ligation assays   <cit> , the goldengate genotyping assay  <cit> , multiplex minisequencing  <cit> , and the padlock or molecular inversion probe assay  <cit> . the latter method has been used to genotype more than  <dig>  single nucleotide polymorphisms  in multiplex. another method that utilizes sets of oligonucleotide probes for multiplex processing of nucleic acid molecules is the selector amplification technique. this technique uses partially double-stranded oligonucleotides, called selectors, to circularize a selection of restriction fragments from total genomic dna, and it incorporates a general sequence motif that allows parallel amplification of all circularized fragments using a single primer pair  <cit> .

with molecular solutions to many tasks of highly parallel genetic analysis now at hand, other factors become limiting, such as the design and the synthesis of reagents. in the work presented here, we address the problem of large-scale probe design. when large numbers of probes are combined, the risk for unintended interactions between probes and targets must be considered. this risk places strict requirements on the design of sets of probes to be used together. in particular, it is important that probes do not contain sequences that result in the production of detectable signal from any probe in the absence of its cognate target molecule, or that otherwise interfere with the activity of other probes in the set. due to these and other constraints and the many possible alternative probe sequences to evaluate, the difficulty of designing probe sets increases rapidly with the size of the probe sets.

many computer programs exist for the design of oligonucleotide probes such as pcr primers  <cit> , microarray probes  <cit> , and more  <cit> . these programs define algorithms to evaluate the risk of primer or probe sequences being involved in undesired interactions such as probe homo- or heterodimer formation, cross-hybridization, false priming, etc. however, the available programs are generally limited in scope, and are not applicable to the task of designing sets of complex probes containing multiple sequence elements.

the probemaker software presented herein is a framework for computer-assisted design and analysis of sets of oligonucleotide probe sequences composed of several functional sequence elements. as the composition of probes and the constraints imposed on sets of probes vary between applications, this framework has been constructed to support the design of different types of probes using application-specific constraints, as defined by the user. probemaker takes as input a set of target sequences and a number of sets of so-called 'tag' sequences. these tag sequences may serve as targets for restriction digestion, as binding sites for amplification primers or fluorescent detection probes, or as identification codes for individual amplification products that are decoded by hybridization to oligonucleotide arrays  <cit> . probes are designed for each target by construction of target-specific sequences and addition of tag sequences according to rules specified by the user. different combinations of sequence elements are evaluated for each probe, and a set of probe sequences is created that satisfies user-defined criteria.

implementation
the main objectives in the development of probemaker were to provide a framework that is flexible, in the sense that it should support design of oligonucleotide probes for different purposes, and extensible, in that it should be possible to add support for designing new types of probes and to add new types of design constraints. furthermore, the software should be adaptable to new applications, and it should have the potential to import sequence data from a variety of sources.

the flexibility is provided by the target and probe sequence data structures used. each target defines two template sequences that are used to construct target-specific sequences  to use in the corresponding probe. each probe is made up of two such tsss and a number of tag sequences, which may be located 5' of, between, or 3' of the tsss. as tsss may be of zero length, this system allows the design of many different types of probes. support for more than two tsss per probe was not deemed necessary as this is not used in any current methods. furthermore, targets may be grouped, allowing the program to perform selection of tag sequences based on the relations of target sequences, for example variants of the same polymorphic sequence.

the extensibility is realized by using an extension mechanism for much of the functionality. extensions are constructed in the form of java classes that implement defined interfaces and may be loaded into the framework at run-time. this mechanism allows the addition of new target types and support for different formats for sequence input and output, as well as design constraints and acceptor schemes, the function of which will be described below.

probemaker may be run through a graphical user interface or from the command line. for the graphical user interface, a set of target sequences and sets of tag sequences are provided as input by the user. application-specific parameters for probe design and evaluation are set through the user interface. when running probemaker from the command line, a project file defining all sequences and parameters is used as input.

the potential for supporting different file formats is provided by using the sequence input system of the moltools java library  <cit> . a combination of components for sequence file parsing, sequence notation conversion, and post-import modifications are used to allow creation of sets of any type of target from a variety of sequence file formats, with the possibility to carry out other operations on the imported data, such as selecting which position within the target sequence to design probes for, or to group or sort sequences based on some particular property.

RESULTS
for a given set of targets, and a number of sets of tag sequences, probemaker performs two tasks . firstly, tsss are constructed for each target as determined by the target type in use, forming the basis for a probe for that target. secondly, tag sequences are added to each probe sequentially in a pattern specified by the user. during this procedure, different combinations of tags are evaluated for each probe in order to find one that satisfies specified design constraints.

target-specific sequence construction
the tsss of each probe are constructed to be complementary to the template sequences defined by the target, with sequence length chosen within a specified length interval to yield a melting temperature  as close as possible to a specified preferred tm value. the tm calculations are performed using a nearest neighbor model  <cit> . the model implementation used here does not take into account the influence of dangling ends or possible stacking interactions between the two probe ends, as these are not always known at this stage of the design. it is possible to use target types that strictly determine the tss length, which is useful e.g. if other software has been used to find suitable sequences for probe-target hybridization.

tag selection
after tss construction, each probe is designed in turn by generation, evaluation, and selection of probe candidates as follows .

1) the target-specific sequences of the probe are evaluated according to selected design constraints. if found acceptable the process proceeds, otherwise the probe is skipped and reported as a failure.

2) a probe candidate is generated by allocating one tag from each set of tag sequences. this candidate is evaluated according to selected design constraints and ranked on a three-level scale. based on this rank, the candidate is either accepted, stored in a temporary list, or rejected. this step is iterated, generating a new candidate each time, until all possible tag combinations have been tried or until a candidate has been accepted.

3) one probe is selected from the list of temporarily accepted candidates and any finally accepted candidate.

probe candidates are constructed by the selection of tags from the provided tag sets based on the selection mode of each tag set. there are five selection modes available.

• a unique tag for every probe

• a common tag for all probes

• a tag common for probes within a group, but unique among groups

• a different tag for each probe in a group, same set of tags used for all groups

• any tag, regardless of use in other probes

optionally, a spacer tag may be included to extend any probe that is shorter than a specified length, if probes of identical lengths are desired. several possible tag combinations may exist for each probe, depending on the selection mode and what tags have been used previously in the probe set. also, during candidate testing, certain tags may be found unsuitable for use in a particular probe and be excluded from the selection procedure in order to reduce the number of candidates that need to be tested for that probe.

for testing and evaluation of target-specific sequences and probe candidates, the user selects tests that are suitable for the type of probes currently being designed. these tests are incorporated into the framework as extensions. typically, tests will check for potential unwanted base-pairing interactions within a probe, between a probe and its target, between probes, or between a probe and the targets of other probes. each test may generate warnings or errors for a candidate; these are then used to rank that candidate. candidates are by default of the highest rank, warnings reduce this to the intermediate level while errors result in the lowest rank.

criteria for accepting probe candidates and for choosing among stored candidates are specified by the user by selecting an acceptor scheme and a selector scheme. the acceptor schemes provided with the program include one that will temporarily store all candidates of intermediate or highest rank, and one that will accept candidates of the highest rank, while temporarily storing those of intermediate rank. when probes are designed in groups of two, an exhaustive tag selection mode is available. in this mode, the first probe of a group is not finally determined until an acceptable candidate has been found for the second probe. both probes are skipped if acceptable candidates cannot be found.

limitations
probe design is limited by the amount of available memory, and the amount of time required. using  <dig> mb of ram, it is possible to design probes for at least  <dig>  targets. however, when using tests for inter-probe interactions the design time grows exponentially with the number of targets and quickly becomes more limiting than memory. the time required for probemaker to complete a design job is influenced by many factors and is difficult to model and predict. briefly, the design time depends on the total number of candidates that are generated and the time required for the selected tests to be performed on each generated candidate. the maximum number of candidates generated depends on the size and selection mode of the tag sets used in the design, while the time required for testing of each candidate depends on the tests that are performed and the number of targets/probes being designed.

to illustrate actual time requirements, we set up a design of allele-specific pairs of padlock probes for  <dig> random snp target sequences, allocating to each probe one common primer, either of two allele-specific primers, and one target-specific hybridization tag from a set of  <dig> random 20-mers. without constraints, this design required  <dig> seconds to complete on a desktop computer system . when testing for the risk of false ligation using an adaptation of the false-priming algorithm described by kaderali et al.  <cit> , the same design required  <dig>  minutes to complete.

discussion
a number of recently developed methods for nucleic acid analyses allow large sets of oligonucleotide probes to be used in parallel for simultaneous interrogation of many qualities of a sample. these methods require design of large numbers of oligonucleotide probes. computer programs commonly used to design various types of oligonucleotides  <cit>  define a repertoire of criteria, and algorithms to evaluate oligonucleotides based on these criteria. however, the available programs are mainly dedicated for the design of amplification or sequencing primers or microarray probes, and most programs can not readily be modified for new uses.

in this work, we present a framework for computer-assisted design and analysis of sets of oligonucleotide probes. the probemaker software allows the design of sets of any type of probes with up to two elements that are complementary to the target sequence and that include a number of other sequence elements. furthermore, probemaker is equipped with an extension mechanism that allows the incorporation of new design criteria as well as criteria described in previous works. similarly, it is possible to define new types of targets, which will allow the design of new types of probes, including probes for non-nucleic acid targets, such as pairs of oligonucleotides to be attached to antibodies or other affinity reagents for protein analyses by proximity ligation  <cit> .

CONCLUSIONS
probemaker enables constraint-based design of large sets of probes. besides facilitating the deployment of large-scale assays, this can be used to systematically vary design criteria in order to experimentally optimize design parameters. furthermore, the flexibility and extensibility of this framework makes it suitable for in silico comparison and evaluation of different oligonucleotide analysis algorithms, and it could act as a common platform for further development within the field.

availability and requirements
project name: probemaker

project home page: 

operating system: platform independent

programming language: java

other requirements: java  <dig>  or higher, moltools and apptools libraries 

license: gnu gpl

any restrictions to use by non-academics: no

authors' contributions
js designed and implemented the software and drafted the manuscript. mn and ul conceived of and supervised the work. all authors read and approved the final manuscript.

