BACKGROUND
many types of genomic data can be represented as a graph , where the nodes represent genes or proteins, and edges may represent similarities between protein sequences, edges in a metabolic pathway, and physical interactions between proteins  <cit> . machine learning tools have been commonly used to analyze biological networks for knowledge discovery and pattern analysis  <cit> . in this paper, we focus on learning from biological networks for protein function prediction. this problem has been studied extensively by using computational approaches recently  <cit> . neighborhood-based methods  <cit>  assign functions to proteins based on the most frequent functions within a neighborhood of the protein and they differ mainly in how the "neighborhood" of a protein is defined. more sophisticated prediction functions have been exploited in  <cit> . methods based on network diffusion  <cit>  view the protein network as a flow network and functions of proteins are diffused from annotated proteins to their neighbors in various ways. other approaches for protein function annotation from biological networks include the graph-cut-based approaches  <cit>  and those derived from the kernel methods  <cit> .

kernel methods are versatile tools for learning from graph-based data, as they only require the characterization of similarities between objects by the use of kernel trick  <cit> . diffusion kernels  <cit> , which can be considered as the discretization of the well-known gaussian kernel of euclidean space, are commonly used for graph-based data. in kernel methods, the information on the data is conveyed only in the kernel function, which uniquely determines the mapping of the original inputs onto a feature space. thus, one of the central issues in kernel methods is the selection of a good kernel function for a specific problem at hand. a recent trend in kernel learning  is to formulate it as convex programs, which lead to a globally optimal solution  <cit> . the idea of learning a linear combination of pre-specified kernels for support vector machines  was originally proposed in  <cit>  where this problem was formulated as semidefinite programs  and quadratically constrained quadratic programs . in general, approaches based on learning a convex combination of kernels offer the additional advantage of facilitating heterogeneous data integration from different sources  <cit> .

the objective functions for kernel learning used in  <cit>  are performance measures for hard margin svm, 1-norm soft margin svm, and 2-norm soft margin svm. an alternative criterion for kernel matrix learning is the kullback-leibler  divergence  <cit>  between the two zero-mean gaussian distributions defined by the input and output kernel matrices  <cit> . one particularly appealing feature of the kl divergence criterion is that unlabeled  data can be integrated naturally into the training process, thereby improving generalizations. the formulations in  <cit>  also use unlabeled data, but in a weak form by enforcing the trace magnitude of the kernel matrix including both training and test data in the constraint. direct incorporation of unlabeled data by the formulations in  <cit>  through the kl divergence criterion involves a matrix determinant term. the resulting formulation is a so-called maximum-determinant problem  <cit> , which is a general framework that contains semidefinite programming   <cit>  as a special case. although its theoretical soundness, experiences with semidefinite programming indicate that it is computationally expensive and thus can not be scaled to large-scale problems. the maximum-determinant problem is a more general framework than sdp and the path-following algorithms used to solve it is more expensive.

diffusion kernels  <cit>  capture the long-range relationships between vertices of graphs and are state-of-the-art for building kernels for graphs. in this paper, we focus on learning diffusion kernels constructed from biological networks, using the kl divergence criterion. in particular, we show that when the kl divergence criterion is used to optimize a convex combination of diffusion kernels with different parameters, the resulting optimization problem does not involve the matrix determinant term and thus can be solved by gradient descent methods. previous studies  <cit>  have shown that the removal of the matrix-determinant term in the kl divergence criterion has limited effect on its performance. when this modified criterion is used to learn a linear combination of diffusion kernels, the resulting optimization problem is convex and thus solutions by gradient descent methods are guaranteed to be globally optimal. a protein typically performs multiple functions. most existing approaches formulate a separate task for each of the functions and they are learned independently. they decouple the functions of proteins and potentially compromise the performance as the functions of proteins are usually related. we show that our single-task kernel learning formulation based on the kl divergence criterion can be extended to the multi-task case by enforcing all tasks to share a common kernel. the resulting formulation leads to a single optimization problem, which learns multiple functions of proteins simultaneously. experimental results show that this multiple-task kernel learning in a joint optimization framework keeps competitive prediction performance, while its computational cost is similar to that for a single task, thus dramatically reducing the time complexity.

methods
we study the problem of protein function prediction from biological networks, which are represented as graphs. for a graph g, the vertices represent proteins and edges characterize the relationship between proteins. in the following discussion, the vertex and edge sets are denoted as v and e, respectively. the total number of proteins in the network is n = |v|. the adjacency matrix a is used to denote the similarity between vertices where ai,j describes the similarity between vertices vi and vj. the functions of some proteins in the network are already known and the goal of protein function prediction is to infer the functions of unannotated proteins based on the functions of annotated proteins and the network topology. in particular, for a graph g = , the vertices in v can be partitioned into a training set and a test set. the functions of proteins in the training set are already known while those of proteins in the test set are unknown. each edge in e reflects the local similarities between its ending vertices. the learning problem is to predict the functions of proteins in the test set based on the label information of training set and the topology of the graph.

background and related work
kernel methods are particularly suitable for learning from graph-based data, as they only require the similarities between proteins to be encoded in the kernel matrix. in kernel methods, a symmetric function κ:x×x→r, where x denotes the input space, is called a kernel function if it satisfies the mercer's condition  <cit> . when used for a finite number of samples in practice, this condition can be stated as follows: for any x <dig>  ...,xn ∈ x the gram matrix k ∈ ℝn × n, defined by kij = κ is positive semidefinite. any kernel function κ implicitly maps the input set x to a high-dimensional  hilbert space ℋκ equipped with the inner product ℋκ through a mapping φκ:x→ℋκ

  κ=,φκ)ℋκ. 

the adjacency matrix a can't be directly used as a kernel matrix. first, the adjacency matrix contains the local similarity information only, which may not be effective for function prediction. secondly, the adjacency matrix may not even be positive semidefinite. to derive a kernel matrix from the adjacency matrix, the idea of random walk and network diffusion has been used. the basic idea is to compute the global similarity between vertices vi and vj as the probability of reaching vj at some time point t when the random walker starts from vi. this idea is justified at least to some extent by observing that the random walker tends to meander around its origin as there is a larger number of paths of length |t| to its neighbors than to remote vertices  <cit> .

to avoid some potential problems such as the choice of value for t and assurance of positive semidefiniteness for the kernel matrix, a random walk with an infinite number of infinitesimally small steps is used instead. it can be formally described as:

  k=lim⁡s→∞s=eβl, 

where β is a parameter for controlling the extent of diffusion and l ∈ ℝn × n is the graph laplacian matrix defined as

  l = diag - a, 

where a is the adjacency matrix, e is the vector of all ones, and diag is a diagonal matrix with the diagonal entries being the corresponding row summation of the matrix a. it turns out that for any symmetric matrix l, eβl is always positive definite and thus can be used as a kernel matrix. the diffusion effect of such kernel can be explicitly seen when it is expanded as  <cit> :

  eβl=i+βl+β22l2+β36l3+⋯, 

where the local information encoded in l is continuously diffused by repeated multiplications. the parameter β in the diffusion kernel controls the extent of diffusion and it has a similar effect as the scaling parameter in gaussian kernels. if the β is too small, the local information can not be diffused effectively, resulting in a kernel matrix that only captures local similarities. on the other hand, if it is too large, the neighborhood information will be lost. furthermore, the optimal value for β is problem and data-dependent. thus it is highly desirable to tune the β value adaptively from the data.

we approach the kernel tuning problem by learning an optimal kernel as a linear combination of pre-specified diffusion kernels constructed with different values of β. this is motivated from the work in  <cit>  where the optimal kernel for svm, in the form of a linear combination of pre-specified kernels, is learned based on the large margin criteria. in particular, the generalized performance measure based on 1-norm soft margin svm used in  <cit>  is

  ωs1=max⁡α:c≥α≥ <dig> αty=0{2αte−αtgα}, 

where c >  <dig> is the regularization parameter in svm, e is the vector of all ones, g is defined by gij = kyiyj, and the i-th entry of y denoted as yi is the class label  of the i-th data point xi. lanckriet et al.  <cit>  showed that when the optimal kernel is restricted to the linear combination of the given p kernels k <dig>  ..., kp, the kernel learning problem can be formulated as a semidefinite program. furthermore, when the coefficients of the linear combination are constrained to be non-negative, the kernel learning problem can be formulated as a quadratically constrained quadratic program  <cit> . as was shown in  <cit> , an alternative performance measure is the kl divergence between the two zero-mean gaussian distributions associated with the input and output kernel matrices. we show that when this kl divergence criterion is used to learn a linear combination of diffusion kernels constructed with different values of β, the resulting optimization problem can be solved efficiently. we further show that it can be extended to the multiple-task case. such integration of multiple tasks into one optimization problem can potentially exploit the complementary information among different tasks.

diffusion kernel learning: the single-task case
we focus on learning an optimal kernel for a single task, which will then be extended to the multi-task case. the underlying idea is that the laplacian matrix l, defined in eq. , contains the connectivity information of all vertices in the graph. by adaptively tuning the kernel constructed from l on the training vertices, the entries corresponding to test vertices are expected to be tuned in some optimal way as well. to restrict the search space and improve the generalization ability, we focus on learning an optimal kernel as a linear combination of a set of diffusion kernels constructed with different values of β, indicating different extents of diffusion. in particular, we choose a sequence of values for β as β <dig>  ...,βp, and the corresponding diffusion kernels can be constructed as

  ki=eβil,i= <dig> ⋯,p. 

we may assume that the kernels defined in eq.  reflect our  prior knowledge about the problem. the goal is to integrate the tuning of the coefficients into the learning process and the algorithm can adaptively select an optimal linear combination of the given kernels. note that it is numerically favorable to normalize the kernels though this does not affect the results theoretically  <cit> . we normalize the kernels as follows:

  k˜i=eβiltrace, 

and the optimal kernel can be represented as

  kopt=∑i=1pαik˜i=∑i=1pαieβiltrace, 

for a set of non-negative coefficients {αi}i=1p

kullback-leibler divergence formulation
kernel matrices are positive semidefinite and thus can be used as the covariance matrices for gaussian distributions. it was shown in  <cit>  that the kernel matrix can be learned by minimizing the kullback-leibler  divergence between the zero-mean gaussian distributions associated with the input and output kernel matrices. in this paper, we focus on learning the optimal coefficients αi from the data automatically based on minimizing this kl divergence criterion. as described in  <cit> , the kl divergence between the zero-mean gaussian distributions defined by the input kernel kx and output kernel ky can be expressed as

  kl=12trace+12log⁡|kx|−12log⁡|ky|−n <dig>  

where |·| denotes the matrix determinant, nx and ny denote the zero-mean gaussian distributions associated with kx and ky, respectively, and n is the number of samples. when the output kernel ky is defined as ky = yyt, the kl divergence in eq.  can be expressed as

  kl=12ytkx−1y+12log⁡|kx|+const, 

where "const" denotes terms that are independent of kx, and kx is the input kernel matrix, which is defined as a linear combination of the given p kernels as

  kx=∑i=1pαik˜i+λi=∑i=1pαieβiltrace+λi. 

note that a regularization term, with λ as the regularization parameter, is added to eq.  to deal with the singularity problem of kernel matrices as in  <cit> , and we require ∑i=1pαi= <dig> as in multiple kernel learning   <cit> . the optimal coefficients α = t are computed by minimizing kl. by substituting eq.  into eq. , and removing the constant term, we obtain the following optimization problem:

  min⁡α{at−1a+log⁡|∑i=1pαik˜i+λi|}s.t.∑i=1pαi= <dig> α≥ <dig>  

where α = t, α ⩾  <dig> denotes that all components of α are non-negative, and the vector a ∈ ℝn is the problem-specific target vector, corresponding to the general target in eq. , defined as follows:

  ai={1if vi is in the positive class,−1if vi is in the negative class,0if vi is in the test set. 

note that we assign the label  <dig> to vertices in the test set so that it will not bias towards either class. similar idea has been used in  <cit>  for semi-supervised learning. in multiple kernel learning  <cit> , the sum-to-one constraint on the weights is enforced as in eq. . we present results on both constrained and unconstrained formulations in the experiments. results show that the constrained formulations achieved better performance than the unconstrained ones.

recall that the graph laplacian matrix l is symmetric, so its eigen-decomposition can be expressed as

 l = pdpt, 

where

  d = diag 

is the diagonal matrix of eigenvalues and p ∈ ℝn × n is the orthogonal matrix of corresponding eigenvectors. according to the definition of the function of matrices  <cit> , we have

  eβil=pdipt, 

where

  di=diag. 

the main result is summarized in the following theorem:

theorem  <dig>  given a set of p diffusion kernels, as defined in eq. , the problem of learning the optimal kernel matrix, in the form of a convex combination of the given p kernel matrices as in eq. , can be formulated as the following optimization problem:

  min⁡α∑j=1n) 

  subject to∑i=1pαi= <dig>  

  α ≥  <dig>  

where b =  = pt a, gj is the j-th diagonal entry of the diagonal matrix g, defined as

  g=∑i=1pαiditrace+λi, 

and d
                     i 
                  is the diagonal matrix defined in eq..

proof. the first term in eq.  can be written as:

  at−1a=at+λi)−1a=atp+λi)−1pta=bt+λi)−1b=btg−1b=∑j=1nbj2gj, 

where the third equality follows from the property of the trace, that is,

 trace=trace=trace. 

similarly, the second term in eq.  can be written as:

  log⁡|∑i=1pαik˜i+λi|=log⁡|∑i=1pαieβiltrace+λi|=log⁡|∑i=1pαieβidtrace+λi|=log⁡|g|=log⁡=∑j=1nlog⁡. 

by combining the first term in eq.  and the second term in eq. , we prove the theorem.

the formulation in theorem  <dig> is a nonlinear optimization problem. it involves a nonlinear objective function with p variables and linear equality and inequality constraints. due to the presence of the log term in the objective, it is a non-convex problem and a globally optimal solution may not exist. however, our experimental results show that this formulation consistently produces superior performance.

convex formulation
the optimization problem in theorem  <dig> is not convex. previous studies  <cit>  indicate that the removal of the log determinant term in the kl divergence criterion in eq.  has a limited effect on the performance. this leads to the following optimization problem:

  min⁡αat−1a 

  subject to∑i=1pαi= <dig>  

  α ≥  <dig>  

following theorem  <dig>  we can show that the optimization problem above can be simplified as

  min⁡α∑j=1nbj2gj 

 subject to∑i=1pαi= <dig>  

 α ≥  <dig>  

where gj and b are defined as in theorem  <dig> 

the optimization problem in eq.  is convex and thus a globally optimal solution exists. numerical experiments indicate that the simple gradient descent algorithm converges very quickly to the optimal solution. furthermore, the prediction performance of this convex formulation is comparable to that of the formulation proposed in theorem  <dig>  this convex formulation shares some similarities with the one in  <cit> , where a set of laplacian matrices derived from multiple networks is combined.

diffusion kernel learning: the multi-task case
it is known that proteins often perform multiple functions, which are typically related. many existing function prediction approaches decouple multiple functions and formulate each function prediction problem as a separate binary-class classification problem. such methods do not consider the relationship among the multiple functions of a protein and potentially compromise the overall performance.

we propose to extend our formulation for the single-task case to deal with multiple tasks simultaneously. in particular, we formulate a single optimization problem for the simultaneous prediction of multiple functions for a protein. the joint learning of multiple functions can potentially exploit the relationship among functions and improve the performance. in terms of computational complexity, the proposed joint optimization problem is shown to be comparable to that of the single-task formulation.

a key observation is that when the pre-specified diffusion kernels are computed from the same biological network with different values of β, the graph laplacian matrices are the same for all tasks. by enforcing all tasks to share a common linear combination of kernels, we obtain the following joint optimization problem:

  min⁡α∑k=1t)t−1a+tlog⁡|∑i=1pαik˜i+λi| 

  subject to∑i=1pαi= <dig>  

  α ≥  <dig>  

where a ∈ ℝn for i =  <dig>  ..., t is the vector of class labels for the k-th task as in eq. , and t is the number of tasks. note that all t tasks are related in this joint formulation by enforcing a common kernel matrix for all tasks. the objective function in eq.  uses an equal weight for all tasks. if some tasks are known to be more important than others, a more general objective function with varying weights for different tasks may be used instead. following theorem  <dig>  we can simplify the optimization problem in eq. , as summarized in the following theorem:

theorem  <dig>  given a set of p diffusion kernels, as defined in eq. , the problem of optimal multi-task kernel learning, in the form of a convex combination of the given p kernels, can be formulated as the following optimization problem:

  min⁡α∑k=1t∑j=1nbk2gj+t∑j=1nlog⁡ 

  subject to∑i=1pαi= <dig>  

  α ≥  <dig>  

where gj is defined as in theorem  <dig>  bk = pt a, a is defined as in eq.  for the k-th task, and t is the total number of tasks.

proof. the first term in eq.  can be rewritten as

 ∑k=1tt−1a)=∑k=1t+λi)−1bk)=∑k=1t=∑k=1t∑j=1nbk2gj. 

similarly, the second term can be rewritten as

  tlog⁡|∑i=1pαik˜i+λi|=t∑j=1nlog⁡. 

the detailed intermediate steps of derivation are the same as those in the proof of theorem  <dig> and thus are omitted. by combining these two terms together, we prove the theorem.

the optimization problem in theorem  <dig> is not convex. similar to the single-task case, the log determinant term in eq.  may be removed, which leads to the following convex optimization problem:

  min⁡α∑k=1t∑j=1nbk2gj 

  subject to∑i=1pαi= <dig>  

  α ≥  <dig>  

experimental evidences show that this convex optimization problem is comparable to the formulation in theorem  <dig> in prediction performance.

RESULTS
we evaluate the performance of the proposed formulations on two benchmark data sets, and compare them with relevant methods, including the neighbor counting approach  <cit>  and the fs-weighted averaging approach  <cit> . we construct  <dig> diffusion kernels from each data set using different values for β and the proposed formulations are applied to compute a linear combination of the pre-computed kernels. the performance of the obtained kernel is compared with that of the individual kernel. to see the relative performance of the objective functions, we also use the 1-norm soft margin svm criterion, proposed in  <cit> , to compute the linear combination of kernels and the results are presented. all of the formulations proposed in this paper are solved using the matlab  <cit>  function fmincon which employs the sequential quadratic programming method  <cit> . the qcqp formulation for optimizing the 1-norm soft margin svm criterion is solved using the mosek  <cit>  software package. after the kernels are computed, they are fed into svm for classification and the libsvm  <cit>  software package is used in the experiments. all of the experiments are performed on a pc with intel pentium d  <dig>  <dig> g cpu and 2g ram.

in the following experiments, a total of  <dig> diffusion kernels are pre-computed and the values of β used are βi = - <dig>  × i, for i =  <dig>  ...,  <dig>  in order to investigate the performance of each individual kernel, we use each kernel for the classification and compute the average receiver operating characteristic  values over all of the tasks. the roc value produced by the best averaged individual kernel is used as a baseline. it is called rbaseline as all tasks are restricted to use the same kernel. we further relax the requirement that all tasks use the same kernel and compute the sequence of roc values achieved by the best individual kernel for each of the tasks. this is considered another baseline called ubaseline as the kernel used by each task is unrestricted. note that the kernel matrices for both rbaseline and ubaseline represent the single best candidate kernel in the ideal case that the labels of test data are known, and their performance is not guaranteed in practice. in contrast, the kernel matrices computed by the proposed formulations are the optimal kernel matrices in the form of linear combination of the given candidate kernel matrices. in order to evaluate the effectiveness of the weights obtained by the proposed formulations, we assign each kernel the same weight and compute the performance of the combined kernel. it is called ebaseline as all kernel matrices have an equal weight.

for convenience of presentation, the formulations proposed in theorem  <dig>  eq. , theorem  <dig>  and eq.  are denoted as dklkl, dkl, mdklkl, and mdkl, respectively. for dklkl and mdklkl, we also propose to remove the constraints in their optimization problems and the resulting formulations are denoted as dklklu and mdklklu, respectively.  the method based on optimizing 1-norm soft margin svm criterion by solving qcqp proposed in  <cit>  is denoted as sm <dig>  the six proposed formulations are summarized in table  <dig> 

 these formulations are categorized in terms of the number of tasks, convexity, and whether the weights on kernels are constrained. dklkl, dkl, and dklklu denote formulations using the kullback-leibler  divergence criterion, the kl divergence criterion with the log term removed and the unconstrained version for single task, respectively. a lower case m is added before each method to denote the corresponding formulations for multiple tasks.

experiments on the ligand data set
the ligand data set was derived by vert and kanehisa  <cit>  from the ligand database of chemical reactions in biological pathways  <cit> . it contains a graph reflecting the interactions between proteins and the function information for them. the graph is a yeast biological network in which a path between vertices implies a possible series of reactions catalyzed by proteins along it. the numbers of vertices and edges in this graph are  <dig> and  <dig>  respectively. for the functions of proteins, the functional categories of the mips comprehensive yeast genome database   <cit>  are considered as the gold standard. these categories are not mutually exclusive, and each protein may have multiple functions. there are  <dig> different functions considered for this data set.

comparison of roc values
we use the roc as the performance measure and the λ value is fixed to 10- <dig> in the experiments. our experimental results show that the algorithms are not sensitive to the value of λ, as long as it is neither too large nor too small. figure  <dig> plots the number of tasks with roc value above a threshold for all methods. the average roc values achieved by all methods are also summarized in table  <dig>  in order to test statistical significance, we also compute the p-values of wilcoxon signed test and the results are reported in table  <dig>  we can observe that mdkl achieves the best performance among all methods. all the proposed formulations except mdklklu outperform the three baseline methods. this implies that the computed linear combination of kernels can potentially exploit the complementary information in different kernels and thus improve performance. the roc value achieved by sm <dig> is lower than those of the three baseline methods, implying that the svm criterion is less effective for such tasks. note that the sm <dig> criterion also uses information from unlabeled data, but in a weak form. the mdklklu formulation achieves a roc value lower than the three baseline methods. this shows that the constraints have important normalizing effects and can not be removed. by comparing the relative performance of formulations with and without the log term, we can conclude that removing this term usually does not affect the performance. another important observation is that mdkl and mdklkl outperform dkl and dklkl, implying that constraining the multiple tasks to share a common kernel does not degrade the performance if the kernel used is a linear combination of kernels obtained by the proposed formulations. in contrast, if the kernel used is a single kernel, this restriction will degrade the performance, as illustrated by the relative performance of rbaseline and ubaseline. for the ebaseline method, it can be observed that, except for mdklklu, all of other proposed formulations outperform it. this illustrates that our formulations can compute an optimal kernel matrix by assigning different weights to the candidate kernel matrices. we can observe from table  <dig> that the difference between the performance of the two baseline methods  and that of dkl and mdkl are statistically significant. all diffusion kernel based approaches are competitive with the neighbor counting approach  <cit>  and the fs-weighted averaging approach  <cit> . neighbor counting and fs-weighted averaging use the local information, more specifically the level- <dig> neighborhood  and both level- <dig> and level- <dig> neighborhoods , for the prediction. the experimental results show the effectiveness of capturing the long-range relationships  between proteins in the network in diffusion kernels  <cit> .

 rbaseline denotes the baseline method that requires all tasks share a common kernel, ubaseline corresponds to the baseline method without this requirement, and ebaseline denotes the baseline in which all of the candidate kernel matrices are assigned the same weight.

for the ligand data set, each algorithm produces an roc vector consisting of roc values over each task. we use wilcoxon signed test to test the difference of the paired data. the null hypothesis of this test is that the roc vectors produced by the two compared algorithms have the common median. the numbers reported in this table are the p-values that represent the probabilities that the null hypothesis is true. typically, the null hypothesis is rejected if p <  <dig> .

comparison of execution time
in order to compare the efficiency of various kernel learning methods, we list in table  <dig> the execution time of the compared methods. it can be observed that all methods based on multiple tasks are more efficient than their single-task counterparts. in particular, the execution time of mdkl is roughly 1/ <dig> of that of dkl, which is consistent with our theoretical analysis. in general, convex formulations are more efficient than their non-convex original formulations and the optimization problems with the constraints removed take a longer time to converge. by taking the performance into account, the dkl and mdkl may be the best choices in practice.

stability test
in order to obtain a robust performance estimate for the various methods, we randomly partition the data set into a training set and a test set ten times and the average roc values and standard deviations across splittings are reported in table  <dig>  compared with the results in table  <dig>  we can see that the relative performance of each method in these two tables is very similar. in particular, mdkl and mdklkl achieve the best overall performance. except for the two unconstrained formulations dklklu and mdklklu, all of other proposed formulations achieve higher roc values than the three baseline methods. it is worth noting that the performance of ubaseline and rbaseline is obtained by using the labels of both the training and test data and such performance is not guaranteed in practice when only the labels of the training data are used.

experiments on the von mering data set
the von mering data set was created by von mering et al.  <cit>  from protein-protein interactions identified via six different methods. it contains a graph consisting of  <dig> vertices  and  <dig> edges. there are  <dig> different functions  associated with the proteins in the graph. the performance of different methods is reported in figure  <dig>  two baseline methods, rbaseline and ubaseline, constructed exactly the same way as those for the ligand data set are used and their performance is summarized in figure  <dig> and figure  <dig>  respectively. the value for is again set to 10- <dig> in the experiments. figure  <dig> compares the relative performance of the proposed formulations with that of the ubaseline graphically.

comparison of roc values
we use the roc values of each method to compare their relative performance. similar to figure  <dig> for the ligand data set, figure  <dig> plots the change of the number of tasks with roc value above a certain threshold as the threshold varies for each of the compared method. for ease of comparison, table  <dig> also lists the average roc values achieved by the compared methods. similarly, the p-values of wilcoxon signed test for this data set are reported in table  <dig>  as the sm <dig> formulation requires excessive storage and computational time for this relatively large data set, we are not able to obtain its result in this experiment. from these results we can observe that mdkl and mdklkl achieve the best performance. in general, the performance of dkl, dklkl, mdkl, and mdklkl is very close. all of the proposed formulations except dklklu perform better than the three baseline methods. the difference between dkl and dklkl as well as the difference between mdkl and mdklkl is very small, which further confirms that the removal of the log term does not affect the performance of algorithm much. for the formulations with constraints removed, i.e., dklklu and mdklklu, their performance is the lowest among the proposed formulations. similar to the case for the ligand data set, we conclude that constraining the multiple tasks to share a common kernel does not degrade the performance if the kernel used is a linear combination of kernels obtained by the proposed formulations. in contrast, if the kernel used is a single kernel, this restriction will degrade the performance, as illustrated by the relative performance of rbaseline and ubaseline. in terms of the ebaseline, we can observe from table  <dig> that all of our proposed formulations achieve higher roc values than the ebaseline method, in which all of the kernel matrices are assigned the same weight. we can observe from table  <dig> that the difference between the performance of all of the three baselines and that of dkl and mdkl is statistically significant. we can again observe that all diffusion kernel based approaches are competitive with the neighbor counting approach and the fs-weighted averaging approach.

for the von mering data set, each algorithm produces an roc vector consisting of roc values over each task. we use wilcoxon signed test to test the difference of the paired data. the null hypothesis of this test is that the roc vectors produced by the two compared algorithms have the common median. the numbers reported in this table are the p-values that represent the probabilities that the null hypothesis is true. typically, the null hypothesis is rejected if p <  <dig> .

comparison of execution time
stability test
similar to the ligand data set, we generate ten random splittings of the data into training and test sets and report the average roc values and standard deviations in table  <dig>  by comparing with results in table  <dig>  we can see that the relative performance of each method is similar in both tables. all of the proposed formulations outperform ebaseline.

CONCLUSIONS
in this paper, we address the issue of learning an optimal diffusion kernel based on kl divergence criterion for protein function prediction. by exploiting the special structure of the diffusion kernel, we show that this kl divergence based kernel learning problem can be formulated as a simple optimization problem, which can be solved efficiently. we also extend the formulation to the multi-task case where we predict multiple functions of a protein simultaneously.

we have conducted experiments on two benchmark data sets. our results show that the performance of linearly combined diffusion kernel is better than every single candidate diffusion kernel. results also show that the removal of the log term in the kl divergence criterion does not degrade its recognition performance, while it leads to a reduced computational cost. when the number of tasks is large, the algorithms based on multiple tasks are favored due to their competitive recognition performance and small computational costs. one possible extension is to incorporate the learning of the regularization parameter in the proposed formulations as in  <cit> . the difference between the proposed learning framework and those in  <cit>  is that our formulations require that the eigenvectors of the candidate kernel matrices to be the same. thus the proposed formulations may not be applied for heterogeneous data integration. we plan to apply the proposed algorithms for the analysis of other graph-based biological data.

authors' contributions
ls designed the methodology, implemented programs, and participated in manuscript preparation. sj derived the kl divergence formulation, and drafted the manuscript. jy originally conceived the project, guided the implementation, and drafted the manuscript. all authors have read and approved the final manuscript.

