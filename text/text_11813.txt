BACKGROUND
recent progress in whole genome shotgun sequencing and assembly technologies  <cit>  has drastically reduced the cost of decoding an organism's dna, which has resulted in a rapid increase in genomic sequencing projects. according to the genomes online database v <dig>   <cit> , as of august  <dig> there are over  <dig> active genome sequencing projects, including  <dig> that have already been completed and published. of the remaining unpublished projects, there are nearly  <dig> ongoing bacterial genome sequencing projects. this high concentration of bacterial genomes currently being sequenced will soon provide access to several genomes of closely related species. in fact, the bacillus species alone will soon increase from  <dig> published genomes to  <dig> through active sequencing projects. additionally, the yersinia and salmonella species, both will soon grow from  <dig> and  <dig> published genomes, to  <dig> and  <dig>  respectively. this trend follows with e. coli and burkholderia species, each soon to increase from  <dig> to  <dig>  and,  <dig> to  <dig> published genomes. this increase in closely related dna sequence will allow for in depth studies of closely related species through multiple whole genome comparisons.

multiple genome comparison helps to identify biological similarities and differences in a set of genomes at the nucleotide level, identifying genomic regions that may have been conserved among several organisms. this information then can be used to make inferences about phylogeny, functional regions, and gene predictions. figure  <dig> offers an approximate, and by no means complete, overview of the landscape of global comparison and alignment tools  <cit>  over the last  <dig> years. for a more detailed review of recent advances and methodologies in comparative genomic tools see  <cit> . when designing m-gcat, our focus was on efficient global comparisons, involving rearrangements, of multiple, closely related bacterial species. we will now describe and analyze each of these criteria in further detail.

comparison of large genomes
multiple genome comparison tools need to be able to efficiently handle comparisons involving megabases of genomic sequence. however, large-scale sequence alignment does not come cheap  <cit> . using traditional methods, obtaining an optimal global alignment between two sequences with more than  <dig>  nt can be computationally expensive, requiring days or even months of computation time, even on well equipped computers. thus, the first classification level in figure  <dig> separates those tools able to efficiently handle small  or large  sequence comparisons through alignment.

comparison of multiple genomes
multiple genome alignments provide for rich and sensitive comparisons that are able to identify small regions that may have been conserved or evolved among several organisms. the problem of multiple sequence alignment, however, is not in its utility but rather its complexity. performing optimal multiple sequence alignment via dynamic programming requires o time and space complexity, where l is the length of the sequence and n the number of sequences involved in the multiple alignment  <cit> . this severely limits the number of genomes able to efficiently compared and aligned using such methods, which is our next classification level for the comparative genomics tools, shown in figure  <dig> 

comparison of closely related species
due to the rapid growth in published genomic sequence, several closely related species comparisons will soon be possible. recent progress in progressive alignment methods have allowed for thorough and accurate comparisons even among distantly related species  <cit> . while they offer high sensitivity when comparing multiple, distantly related species, such as human and fish, and avoid the reference sequence limitation  <cit> , these tools require a quadratic number of pairwise global comparisons and can quickly become computationally expensive when comparing several large genomes. when certain assumptions can be made about the set of genomes being compared, such as the overall level of sequence similarity, alternative techniques can be used to perform simultaneous detection of matching regions in all of the genomes being compared. methods based on multi-mums or multi-mems achieve exactly this, and are able to compare multiple, large genomes in a fraction of the time, allowing for more efficient and interactive genome comparisons. the third level of classification then separates those tools that were originally designed accurately compare and align large, multiple genomes using progressive alignment methods from those that have assumed some level of sequence conservation in the input sequences for rapid comparisons of closely related species.

comparisons involving rearrangements
rearrangements can cause major variations in gene order and content among closely related organisms. bacterial genomes often are full of rearrangements, or disorder  <cit> , and large-scale inversions in bacteria were first reported in  <cit> . for accurate genome comparisons, it is then essential to correctly identify and track these shuffled regions to ensure an accurate global comparison of multiple bacterial genomes. as a final classification level, we distinguish between methods able to detect shuffled or rearranged similarity, such as transpositions or inversions, in multiple closely related species with large genomes from those that assume collinearity.

motivation and related work
our original motivation was to design a comparative genomics tool able to keep pace with the rapid increase in the number sequenced genomes of related species and simultaneously compare  <dig> or more bacterial sized sequences. at the same time, we wanted to be able to interact with the generated genome comparison preview or framework. interaction could include inspecting highly conserved regions, analyzing gene annotation, and aligning selected or all genomic regions. we now will describe a selection of existing methods related in some aspect to our original motivation, organized in three groups:  multiple genome comparison tools,  interactive visualization tools  multiple genome comparison tools with interactive viewers.

multiple genome comparison tools
mga  <cit>  is one of the first methods capable of efficiently producing multiple whole genome alignments of closely related species. it first detects homology through searching and chaining maximal multiple exact matches, multi-mems  <cit> , which are matches occurring in all genomes that cannot be extended. however, mga was not designed to handle non-collinearity and thus it is unable to process genome rearrangements and translocations. like mga, emagen  <cit>  is able to efficiently handle multiple whole genome alignments involving collinear homology.

interactive visualization tools
enterix  <dig>  <cit>  is a collection of three web-based visualization tools  for viewing previously calculated bacterial genome alignments. these tools together support a wide variety of features, including interactive alignment visualization. genalyzer  <cit>  is an interactive tool for displaying matching substrings between two genomes. genalyzer can accurately display large inverted regions and match-free regions possibly caused by deletion events. act  <cit>  allows for interactive visualization of pairwise genome comparisons generated by ncbi-blastn, ncbi-tblastx, or mummer  <cit> . act also displays associated annotations, and makes use of robust searching and analysis features provided by the artemis  <cit>  visualization tool.

multiple genome comparison tools with interactive viewers
gata  <cit>  is an genome comparison tool consisting of two parts, gataligner and gataplotter. the gataligner is capable pairwise sequence analysis involving rearrangements. the gataplotter visualization tool of segmental homology existing between the two sequences, along with rendering of corresponding gene annotation.

mauve  <cit>  is a multiple genome alignment and visualization system capable of generating comparison frameworks similar to m-gcat. mauve consists of a core multiple genome alignment program capable of accurately aligning multiple, large genomes while detecting lateral transfer and rearrangements, and also provides a user-friendly java alignment viewer. mauve uses multi-mums to provide its comparison frameworks, detected via a seed-and-extended hashing method, similar to that detailed in  <cit> . mauve can compare more distantly related genomes than other multi-mum based methods due to its sensitive anchors based on inexact match seeds.

methods
we have designed and implemented a multiple genome comparison and alignment tool, m-gcat, that can efficiently and interactively compare and align large, multiple, closely related genomes involving rearrangements. specifically, our initial goal was to efficiently establish a reliable global comparison framework to ultimately be used for alignment through efficiently detecting highly conserved regions existing in multiple genomes, while providing interactive alignment and inspection of conserved regions existing in all genomes.

the main distinguishing features of our method include:

efficient construction of comparison frameworks in multiple species
our algorithm for generating comparison frameworks by clustering multi-mums involves the following four sequential steps:  anchoring,  recursive anchoring,  filtering and  clustering.

 <dig>  anchoring
to be able to efficiently align entire genomes it is necessary to try to limit the dynamic programming search space through heuristics. anchoring is one such heuristic, can be used to establish a framework of conserved sequence among all sequences being compared. anchoring has been used in several global alignment tools, such as  <cit> . m-gcat anchors are established by finding all statistically significant maximal unique matchings  among all genomes via an efficient multi-mum searching algorithm. the parameter min anchor length inputs the minimum allowable size for the initial set of multi-mum anchors found among all genomes. the default value is log2), where s <dig> is the reference sequence.

 <dig>  recursive anchoring
this step involves searching for significant multi-mums between established anchors common in all genomes. the goal is to scour the genomes for as much matching genomic sequence as possible by searching the regions that lie between anchors for additional shorter multi-mums and thus creating new regions small enough to be efficiently aligned. two parameters limit this step: the min mum length and the q value. the first determines the minimum allowable length for new multi-mums found between the anchors during the recursive anchoring process and the second determines the minimum allowable length in nucleotides of a searchable sequence region rn. as searchable sequence regions become smaller and smaller, so should this value. the default value is  <dig>  * log2), where rn is a searchable sequence region in sequence n and  <dig>  is a coefficient that should be decreased when dealing with more distantly related species. both the min mum length and min anchor length equations can be manually edited by the user and so can be configured to also decrease with respect to the number of the genomes involved in the comparison.

 <dig>  filtering
in order to remove any spurious matches found in the previous step we employ a filtering step. filtering attempts to remove all noise generated by the recursive anchoring process by identifying all multi-mums with length that is less than a random mum length parameter and that induce spurious breakpoints in homology. all multi-mums less than or equal to this length that are also breakpoints in conserved sequence collinearity are considered to be random will be removed in the filtering process. the default value is  <dig>  using this filtering technique, the maximum set of collinear multi-mums can be calculated by setting the random mum value to the length of the reference sequence. then, all multi-mums that do not coincide with the main collinear structure of the homology will be discarded.

 <dig>  clustering
to organize all of the highly conserved regions found in the previous steps, we group collinear multi-mums into multi-mum clusters . before clustering the multi-mums, we remove all overlaps of all of the matches so that no nucleotide is contained in more than one multi-mum cluster. there is no maximum number of multi-mums that can be stored in a given cluster, and any non-random multi-mum that is not collinear to any other multi-mum will form its own cluster. the parameter d is the maximum allowable distance, in nucleotides, between any two adjacent multi-mums in a cluster. increasing this value will generally increase the alignment time, and decreasing this value will generally decrease the percentage of the genomes that will be aligned. setting d to the length of the longest sequence will minimize the number of clusters, separating regions in the multiple genome comparison strictly by breakpoints in collinearity. the default value is l <dig> nt.

each multi-mum is compared to each other to check the collinearity and distance constraint. first, when clustering the multi-mums, we start with the leftmost mum, ordered with respect to its position in the reference sequence, and then proceed to the right considering only the multi-mums within the distance d, and that is collinear to the previous multi-mum. resultantly, each multi-mum in a cluster is collinear to its left and right neighbor and within d nucleotides.

clusters of multi-mums aid in understanding the global homology structure between the candidate genomes and facilitates the automatic computation of gapped global alignments across the entire genomes. furthermore, multi-mum clusters are designed to indicate all related regions and serve as visual cues for quickly identifying large-scale genome rearrangements, such as inversions.

interactive and visual comparison environment
m-gcat offers the ability to interactively inspect and align any conserved region among multiple genomes by simply highlighting and selecting it with the mouse. it provides a full-featured graphical user interface, with interactive visualization of matching regions in all genomes that is similar in spirit to act  <cit> , gata  <cit> , and genalyzer  <cit> .

there are five workspaces, each equipped with an array of configurable features and options, designed to provide a distinct working environment based on each interactive task. the main workspace is the gene viewer workspace in which any selected region can be aligned, displayed with gene information or sent as a ncbi-blastn web query with the results incorporated inside of the user interface. these features allow the user to manually inspect and verify the various conserved regions that have been detected by m-gcat. the gene information is provided by the ptt files of ncbi. as the ptt files are simply flat text files, revision of existing annotations and addition of new annotations is easily accomplished. all genes extracted from a genome annotation are incorporated into the multi-mum clusters of highly similar regions. then, visually all genes can be navigated and viewed region by region , which can prove useful when trying to identify islands of conserved similarities, gene duplications and insertions, or for viewing patterns of proximity and function of genes. to date, all bacterial genomes available on the ncbi ftp site have a corresponding ptt file. detailed descriptions of the five available workspaces follows.

• gene viewer workspace : this is the default workspace inside the graphical user interface of m-gcat. the topmost window displays the multi-mum clusters found between these two sequences, which is the global framework that will be used to build the alignment. the window immediately below shows information relevant to the highlighted mum cluster . any region can be aligned using muscle  <cit> , and when finished the information is stored for future reference. the quality of the alignment is scored and displayed visually, ranking from low identity  to high identity . the bottommost window is the gene map, and is derived from a ptt file that corresponds to each sequence. individual genes can be selected and any relevant information for a selected gene is displayed in the window adjacent to the gene map window. the example provided in figure was generated using a set of four yersinia genomes, further details of this comparison can be found on the m-gcat website under the experiments section.

• mum workspace: contains two windows used for displaying a visual representation of multi-mums found among all sequences, along with any relevant information. each multi-mum can be selected to view its length, start and end positions in the bottom window.

• cluster workspace: contains two windows used for displaying all of the multi-mum clusters found among all sequences, along with any relevant information. each cluster can be selected to view its length, start and end positions in the bottom window. additionally, the clusters can be lined up and traced with the mouse movement.

• mum & cluster workspace: joins all of the information in the mum workspace and cluster workspace into one. in this mode, the zoom and movement can be put in sync so that the relationships between the multi-mums, multi-mum clusters, and the d value can be easily studied.

• alignment viewer workspace: the alignment viewer workspace joins the cluster workspace with an additional window containing the alignment results from the resulting muscle alignment if the selected cluster has been aligned. if it has not been previously aligned, a new alignment can be performed by selecting align => align selected region from the main menu bar.

genome sequence partitioning
often times the smallest sequence involved the comparison is millions of nucleotides in size, and can resultantly require more than  <dig> gb of system memory to perform the comparison. to limit memory usage and allow standard desktop computers with less than  <dig> gb memory to compare large genomes, we have devised a partitioning scheme for our compressed suffix tree based multi-mum searching method such that we can partition the smallest sequence into subsequences in exchange for an increase in runtime. the increase in runtime results from the additional compressed suffix trees that are created,  <dig> per each partition, in conjunction with the time required to merge the results from each partition into a complete set of multi-mums across all of the partitions. the parameter p determines the length of the parts. the default value is  <dig> , <dig> nt. a comparison involving a sequence of  <dig> , <dig> nt would then require approximately 50% less memory, but would roughly imply a 200% increase in runtime.

sensitive and configurable homology detection
m-gcat will group all collinear multi-mums into clusters based on a distance parameter, d, which stipulates that only multi-mums that are at most separated by d nucleotides can be grouped inside of the same multi-mum cluster. this subtle requirement allows the user to either highlight only the highly conserved regions in all genomes by setting the d value near  <dig>  or to show the maximal global comparison framework separated by breakpoints in collinearity by setting the d value to the length of the largest sequence. this feature also allows for interactive tailoring of the framework before spending several hours running a full alignment.

implementation
m-gcat was implemented in the c++ and python programming languages. this software has been compiled and tested on windows, linux, macos x, and solaris. when performing large genome comparisons it is necessary to have at least  <dig> mb ram available, and  <dig> mb is recommended. m-gcat consists of two components,  the core genome comparison program written in c++, mgcat, and  an interactive viewer and alignment tool written in python, viewer.py. both components are required to achieve full functionality of the software. for supported windows versions  no additional software or libraries are required. for non-window platforms, it is necessary to install python version  <dig>  or higher along with tcl/tk  <dig>  or higher. additionally, the python script, shufflegenome.py, used to shuffle the genomes and introduce large-scale rearrangements is available for download on the m-gcat website.

program input
running m-gcat
after configuring the parameters , m-gcat can be started through the python gui by selecting run m-gcat. when python is not available or when running large comparisons, m-gcat can be called from the command line as follows: mgcat mgcat.ini. all of the parameters can be set inside of a specified configuration file, mgcat.ini. the program upon completion writes all output to the ./output directory.

output files
m-gcat generates four output files after each successful comparison, and an additional alignment output file after each successful muscle alignment. specifically, each file contains:

• anchors: all multi-mum anchors found during anchoring phase.

• mums: all multi-mums found during the anchoring and recursive anchoring phase

• mgcat: all of the multi-mum clusters, which contain multi-mums and the regions between any two collinear multi-mums.

• log: this file contains a summary of results for a successfully completed genome comparison. to view the log file, select the 'm-gcat summary' tab. this will list information relevant to the genomes such as size and name, as well as other useful information.

• align: m-gcat alignment data. this file contains a sequential list of partial alignments. the alignment output can also be saved in two additional formats, mln  <cit>   and xmfa  <cit>  .

RESULTS
a selection of results for  <dig> independent sets of closely related sequence comparisons conducted with m-gcat. size and memory usage are listed in megabytes . all experiments were performed and running times  measured on a  <dig> ghz pentium processor, with  <dig> gb of main memory, running windows xp professional. size is the total size  of the set of sequences. a
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwfaefqaaa@3821@ is the number of multi-mum anchors found, a
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwfaefqaaa@3821@size is the configured minimum size of multi-mum anchors, ℳ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwfzestaaa@3790@ is number of multi-mums found, c
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwfce=qaaa@3825@ is the number of multi-mum clusters. tanchor is the time needed to find the set of multi-mum anchors, tmum is the time needed to find the initial set of multi-mums, and ttotal the time required to perform entire comparison. mem is peak usage of system memory , and cov. is the percentage of each sequence that was aligned. the percentage that was not aligned corresponds to regions where no multi-mums were found. a p value of  <dig> , <dig> and q value of  <dig> was used for all experiments. the d value was set to the length of the longest sequence in each example to emphasize the global alignment framework. for a complete listing of the sequences used in these comparisons refer to additional file  <dig> 

multi-mum performance
we have compared the performance of our algorithm against two similar multiple genome comparison tools, mga  <cit>  and emagen  <cit> . both rely on suffix arrays for efficient multi-mum/mem search in large genomes. however, both mga and emagen assume collinearity and thus are not well suited for detecting large-scale rearrangements, such as transpositions or inversions. that said, using the results presented in  <cit> , we have conducted a comparison of their sensitivity with our approach. as the results are specifically for the longest increasing subsequence of multi-mums, or lis-mums, our algorithm had to be adapted before performing the analysis to filter out all mums not appearing in the longest collinear chain of matches. additionally, we ran the implementation of our method on a comparable sun workstation. our results we generated on a sun ultra- <dig> spare ii  <dig> mhz computer, with  <dig> mb ram. as reported in  <cit> , the remaining results in table  <dig> were generated on a sun blade  <dig> workstation  with  <dig> gigabyte of ram.

in general, the performance of our method for the data employed with respect to mum search time is significantly faster that mga, and is comparable to emagen. at the same time, the sensitivity of our multi-mum detection is near identical to that obtained by mga. however, m-gcat achieves a significant improvement in efficiency of suffix structure construction. we attribute this to our streaming method that requires only the smallest genome in the comparison to be indexed.

furthermore, it was reported in  <cit>  that: "the only obvious break between bp positions of  <dig> and  <dig> millions indicates that the major difference among three strains is located in this region." we decided to extend our analysis to include rearrangements to see if m-gcat could account for this discrepancy, as this break between the genomes has been described in  <cit>  to be a large-scale inversion between two of the genomes involved in the comparison, e. coli k <dig> and e. coli o157:h <dig>  the inversion was reported to be  <dig> kb in length, and was detected by m-gcat evident by the total match coverage increase from approximately  <dig>  mb to  <dig>  mb. as previously mentioned, inversions of this type in bacteria are not a novelty and were first reported in  <cit> . in fact, bacterial genomes are often full of rearrangements, or disorder  <cit> , making it essential to correctly identify these regions to ensure an accurate global comparison of multiple bacterial genomes. this is exemplified in the second example involving the four strains of streptococcus, which contains a  <dig> megabase x-alignment  <cit> , or symmetric inversion, accounting for the large discrepancy in the total length of the lis multi-mums.

genome comparison framework efficiency
to better evaluate the efficiency of generating genome comparison frameworks with m-gcat, we have compared it to the mauve whole genome alignment system. mauve was one of the first methods able efficiently detect rearrangements in multiple whole genomes via multi-mums, and so we have compared our method to mauve's performance on a set of closely related genomes. while we realize the inherent pitfalls with such comparisons, we felt it was a reasonable gauge of the efficiency of our approach. thus, to evaluate the efficiency we have performed a series of  <dig> experiments and compared the performance based on cpu time. the experiment involves  <dig> sets of closely related enterobacterial genomes, ranging in size from  <dig> to  <dig>  the sequences used from  <dig> to  <dig> are consistent with sequence set # <dig> from table  <dig>  the remaining  <dig> genomes were generated by shuffling  <dig> of the  <dig> published genomes with our genome shuffling script shufflegenome.py to introduce new cloned bacterial genomes, each containing five new large scale rearrangements of  <dig>  nt.

for this experiment the parameters were configured as follows. the mauve full alignment option was disabled, and a default mer size of  <dig> was used. the m-gcat min anchor length parameter was set to  <dig>  the d value to the length of the largest genome to roughly emulate the behavior of the locally collinear blocks, and the remaining parameters were configured using appropriate values for the context of each experiment. for example, min mum length was set to the default value of  <dig>  * log2) for experiments involving  <dig> &  <dig> genomes, and reduced thereafter up until the  <dig> genome experiment where it was configured to be  <dig>  * log2). similarly, the random mum length was set higher for smaller test cases, and gradually decreased for each successively larger experiment.

validating the reliability the comparison frameworks
while our approach focuses on efficiently providing comparison frameworks for large sets of closely related genomes, we also need to ensure that we are generating reliable frameworks. the reliability will directly affect the multiple genome alignments prepared with m-gcat and other methods, and if we are correctly identifying orthologous genes in the genomes we can be more confident that we will generate accurate multiple genome alignments. thus, to validate the reliability of our results, we have tested the accuracy of the generated comparison frameworks on a selected set of experiments in table  <dig> 

we have measured the accuracy by calculating the percentage of the known orthologous genes that are located in the same multi-mum cluster. we use the cog  <cit>  identifier to determine if two or more genes from distinct genomes are orthologous. if the cog identifier was not available for a gene, we then used the gene name. if neither cog or gene name is available for gene, it was classified as unknown. to limit the number of unknowns, so we have chosen a set of well annotated genomes. the results of this test of these  <dig> sets are detailed in table  <dig>  for all cases we achieve relatively high accuracy, and up to  <dig> % in the entero  <dig> example. also, the accuracy appears to increase with the number of closely related genomes involved in the comparison. this is true as multiple comparisons help to filter out the spurious multi-mums and cause less orthologous genes to be missed. most of the missed orthologs can arise with ambiguous orthology due to repetitive regions and gene duplication. another reason for lowered accuracy could be due to the sensitivity of our exact match method, while fast, it cannot account for small changes to insertions and deletions to orthologous regions. we have marked this as a opportunity for future work.

testing the reliability of five of the alignment frameworks generated in table  <dig>  c
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwfce=qaaa@3825@ is the number of multi-mum clusters analyzed for orthologs, identified is the total number of genes with one or more identified orthologs in its corresponding multi-mum cluster, missed the total number of proteins in multi-mum clusters with no orthologs, unknown the total number of genes that have yet to be fully classified, total the total number of genes in all of the multi-mum clusters in all genomes, and accuracy the number of identified orthologs divided by the total known .

verifying scalability
finally, to test the scalability of our method with respect to the number of genomes, we have generated a multiple genome comparison framework for  <dig> bacterial genomes. to create such a large set of closely related sequences, we took the  <dig> published enterobacterial genomes of e. coli, shigella, and salmonella, then we shuffled each genome  <dig> times in order to introduce large scale rearrangements of  <dig>  nt in length which could be considered consistent with those found in the first  <dig> sets. the five rearrangements per genome introduced included transpositions, inversions, and inverted transpositions. then, we performed a full comparison of all of the  <dig> related genomes and recorded the cpu time and memory usage. the multiple genome comparison framework for this large set of closely related genomes involving rearrangements was constructed in approximately  <dig> hour, and consumed  <dig>  gigabytes of memory. the comparison was run on a sun microsystems sun fire v <dig> with a sparcv <dig>  <dig> mhz cpu and  <dig> gb system memory, and all of the output files, along with a image of the genome comparison framework, is available as additional file  <dig> 

discussion and 
CONCLUSIONS
we have presented an interactive environment for efficient genome comparisons, m-gcat, which compares favorably to related existing methods. we have provided four experiments to validate this claim by testing the efficiency, reliability and scalability of our method. in general, our multi-mum based genome comparison frameworks achieve good results when comparing closely related genomes. however, our multi-mum based method has several limitations, such as the reference sequence limitation  <cit> , problems with large segmental duplications, reduced anchor sensitivity  <cit> , current inability to handle inexact matches, and relatively large memory overhead in comparison to other suffix structures  <cit> . as future work we hope to address these limitations, as well as to better extend our current method from generating reliable genome comparison frameworks to global alignments. this would allow us to better verify and test our multiple genome alignments with existing related methods. that said, our multiple comparison frameworks can currently be used directly to generate whole genome alignments, as well as a pre-processing step with several existing methods to improve runtime for otherwise computationally limiting comparisons. in addition to this, we plan to expand m-gcat's input capabilities to support common formats so that the python viewer itself can be readily used to provide an interactive and visual environment for many existing multiple genome comparison tools that lack an interactive visualization environment.

availability and requirements
project name: m-gcat

project website: 

operating system: linux, mac os x, solaris, and windows

programming language: c++ and python

license: m-gcat is freely available for download for academic and non-commercial use.

abbreviations
mum: maximal unique match

multi-mum: maximal unique match occurring in multiple sequences

mem: maximal exact match

ptt: protein table file

pyc: python compiled file

gui: graphical user interface

cog: cluster of orthologous groups

authors' contributions
tt participated in the design of the algorithms, implemented the current version in c++ and python, tested the software, created the project website, and drafted the manuscript. xm directed the project, participated in the design of the algorithms, assisted in the implementation of the software, and assisted in writing the manuscript. both authors have approved the final manuscript.

comparison of multi-mum search efficiency. mga and emagen-dm results on a sun blade  <dig> workstation with  <dig> gb ram, as reported in  <cit> . m-gcat results on a sun ultra- <dig> with a  <dig> mhz processor and  <dig> mb ram.

supplementary material
additional file 3
configuring m-gcat parameters. a detailed description of the main configurable parameters.

click here for file

 additional file 1
 <dig> bacterial genome comparison. multiple genome comparison framework involving  <dig> genomes, generated with m-gcat.

click here for file

 additional file 2
sequence data. table of sequences used in all of the experiments.

click here for file

 acknowledgements
we would like to thank aaron darling for his insightful comments. we would also like to thank benjamin schaller for his help testing the software and suggestions for additional features. this work has been partially supported spanish ministry mecd research grant tin2004- <dig> and agaur training grant fi-iquc- <dig> 
