BACKGROUND
the development of high-throughput technologies for measuring rna levels and estimating gene expression for large sets of genes has provided a new window into transcriptional regulation. rna species that vary together under a range of conditions are likely to be under common regulation, and indeed, sets of "co-expressed" genes generated by clustering of microarray expression values have proven useful for identifying potential regulatory elements and transcription factor binding sites  <cit> .

this type of analysis has been extended to look for patterns of expression correlation between genes resulting from regulatory relationships, for example increased rna levels for a transcription factor leading to an increase in the rna levels of the genes whose transcription is activated by this factor. several approaches have been proposed to identify potential regulatory relationships, including  <cit> . these regulatory relationships can be visualised as a gene regulatory network graph  <cit> , and this graph, in turn, can be further analysed in terms of global properties  <cit>  and to identify network motifs such as feedforward loops, feedback loops etc  <cit> .

a large number of algorithms based on machine learning and reverse engineering principles have been proposed to infer gene regulatory interactions from microarray data . however none of these methods has been very successful, in part due to the large amount of experimental noise in microarray data, which can be particularly problematic for "black box" batch learning methods that infer the most likely gene regulatory network from microarray data with little or no consideration for additional biological information, and keep the human biologist out of the loop. methods that integrate multiple sources of information   <cit>  are promising but face difficulty in capturing and integrating all the relevant biological information, and their complexity can be prohibitive for the biologist user.

we are proposing an alternative approach based on the philosophy of putting users in control of the process of exploring possible regulatory relationships in an interactive fashion and being able to integrate their biological knowledge with machine learning-based predictions of potential regulatory relationships. the standard paradigm is to visualize the very large networks implicit in high-throughput interaction data, then study sub-network interactions in detail. we invert this, going from individual interactions with target genes to construct a larger network centred on those genes, in an interactive process under biologist control. this approach is used in miner , a web browser-based framework that integrates machine learning of potential regulatory relationships from microarray data, presentation of biological relationships based on gene ontology  annotations  <cit> , and integration of multiple analyses into a gene regulatory network model that can be the basis for new hypotheses and experiments. this combination of dependency learning, go annotation distance and interactive visualisation provides a novel approach for investigating potential regulatory relationships in expression data which can complement standard approaches. miner has been used by our collaborators to explore different data sets, leading to the identification of potential relationships that were subsequently validated experimentally.

RESULTS
interactive exploration of potential regulatory relationships
miner is a web-based framework that analyses microarray data to suggest likely hypotheses regarding regulatory relationships between genes surveyed in the dataset. the system-level data flow of miner is shown in figure  <dig>  the system is fully user-driven and provides a convenient interface and visualisation paradigm that allows the biologist to explore the dependencies and relationships of genes of interest. a typical user workflow is shown in figure  <dig>  the user uploads normalised microarray data in tabular or colon-delimited format, and then selects one or more target genes of interest in the dataset to launch the analysis. miner applies decision tree, model tree or regression tree learning  <cit>  to identify genes in the dataset whose expression can predict the expression of the target gene, and displays the result in the form of a decision tree for the user to explore. the user can mouse-over the nodes of the trees to display potential relationships based on common gene ontology  <cit>  annotations between the node and other nodes in the tree, in the form of an overlaid graph . this visualisation is based on the arctree paradigm  <cit> . "distances" between genes are calculated based on the graph distance between their go annotation terms calculated using the czekanowski-dice formula  <cit> . the distance between two genes is represented by the thickness of the line connecting the two corresponding nodes in the tree, and the colour of the line represents the go category  represented. clicking on a node allows the user to display linked annotations in the kyoto encyclopaedia of genes and genomes  database  <cit>  or to launch a new analysis using the selected node as target gene, to build a new tree for this gene.

after decision trees have been built for multiple genes, miner allows summarising the multiple trees into a network graph, by representing each potential regulatory relationship seen in a decision tree as an edge in a graph , based on the algorithm given in figure  <dig>  these decision trees, networks and overlaid annotations can assist the user in the formulation of new hypotheses regarding the regulation of the target gene, which can be subsequently tested experimentally.

the tree-learning approach was inspired by the work of brazma and others  <cit>  and was extended by us to work on real-valued data using regression and model trees  <cit>  where it was applied to yeast microarray data. further extensions, particularly the use of a relational database, graphical user interface, support for gene interaction network construction and gene ontology distance functions were implemented in a number of follow-up projects.

evaluation
due to the large data requirements the miner system is currently not publicly available on the web but it has been implemented for two of our collaborators, in one case for s. cerevisiae data, and in the other for an acute lymphoblastic leukaemia microarray dataset  <cit> . in the latter case, miner suggested a new significant regulatory relationship in leukemic cells that was subsequently validated experimentally .

miner relies on human intervention to guide the network-building process and as such cannot be evaluated in comparison to fully automated "one-shot" network inference algorithms. however, as part of previous work  <cit>  we evaluated the tree learning methods used in miner on the standard yeast cell cycle microarray data set  <cit> . in our study three methods of tree learning were used: decision tree learning, where the dependent variable is discrete-values, and two methods of numeric prediction, regression and model trees. all systems were implemented in the weka toolkit  <cit>  and learning performance was estimated using 10-fold cross-validation. tree learning was performed for each of the twenty target genes identified by soinov et al.  <cit> .

for decision tree learning we found a mean accuracy of 72%, with twelve out of twenty trees scoring above 70% accuracy, and all scoring above 50%. correlations were above  <dig>  for five  out of twenty for regression  trees, with mean correlations of  <dig>   over all twenty target genes. given that the data is noisy with a low number of samples, high number of genes, and many missing values, these results are as expected.

subsequent experiments  using a network simulator to generate synthetic microarray data with artificial noise has shown that the tree learning in miner can recover the gene dependencies embedded in simple network motifs such as feed-forward loops. in  <cit>  we also found network links between genes across different trees, as would be discovered in automatic construction of gene interaction networks.

discussion
representing interaction networks
as is common in current genome-scale informatics, the fundamental object for miner is the "gene", although this can actually refer variously to gene products such as transcripts, proteins, intergenic  regions, etc. a network may be formalised as a graph g = , where each vertex in the set v denotes a gene, and each edge in the set e represents some kind of interaction between genes. edges may be directed or undirected, and may have labels, e.g., to distinguish between different types of interactions.

using a machine learning toolkit
miner uses the weka machine learning toolkit  <cit>  for tree learning. the advantage of a general-purpose machine learning toolkit in the exploratory analysis of genome-scale interaction data is the ease and rapidity with which many different forms of data mining can be performed. for example, it is possible to move quickly from simple visualizations of the data and summary statistics to sophisticated methods such as non-linear multi-variate regression or high-dimensionality kernel-based classifier learning.

since the predominant mode of analysis in miner is exploratory rather than hypothesis testing, it is necessary to have powerful methods capable of detecting the faint signals present in noisy data such as microarrays. although these may increase the risk of type  <dig> errors , it is understood that any detected interaction will be subject to further analysis by different techniques before they can be accepted. there is also a role in this process for integrating potential interactions with other sources of data to increase confidence. on the positive side there are many advantages in reverse engineering networks by interactively tracing out patterns of influence of genes on other genes using the powerful means of signal detection implemented in machine learning methods.

non-linear regression of multiple genes on a target using model tree learning subsumes techniques such as correlation-based construction of co-expression matrices. this is important since regulatory relationships may be non-linear. in particular, this representation can learn context-dependent  relationships: as an example, we could have that given gene a >  <dig>  and gene b < - <dig>  then the dependence of genes c, d, and e on target f is given by the linear regression equation f = - <dig>  c +  <dig>  d +  <dig>  e +  <dig> . such context sensitivity has the potential to detect regulatory signals in data that could be missed by simply finding the pairwise correlations of genes a, .., e with target gene f.

tree learning methods also perform attribute  selection during the learning process, finding a subset of genes implicated in potential regulatory relationships with a target, enabling inspection by a biologist, since typically this represents only a small subset of the whole genome. the potential for overfitting can be controlled by user-driven pruning built into the algorithms. other learning methods such as high-dimensionality kernel methods can be applied to the same data sets; in this case feature selection can be applied by either pre-processing the data, or post-processing the learned model  <cit> .

network construction from multiple trees
transforming a set of trees , each of which encodes a disjunction of conjunctive rules on the conditions  under which a single target gene is expressed, to a network that captures the combination of regulatory dependencies between multiple genes in a user-friendly way is not straightforward. we adopted a level-wise approach . at the first level all the trees learned from the expression data are retained, since they capture the details of the regulatory relationships of genes on their targets. a higher-level network is then constructed by combining the trees at the first level and removing some of the detail. recall that both levels are expanded only as the user explores the space of target genes.

at the network level, the goal is not to provide the detailed logic of combinations of condition-specific gene regulation, but rather to show the general organisation of regulatory gene interactions. to do this we use the structure of the trees. parents of terminal  nodes are more closely linked with their target genes and edges are labelled to denote the principal regulatory effect . edges linking non-terminal  nodes are then added without labels to denote an indirect regulatory interaction. note that functionally these relationships may be just as important. however, this structures the network and reduces clutter in the visualization. since all details are retained in the trees at the lower level, no information is lost. an example of such a network is shown in figure  <dig> 

integration of heterogeneous data sources
gene ontology: miner uses a distance measure on the go annotation of pairs of genes  <cit>  to evaluate their biological relatedness. this is currently implemented at the level of individual trees, but could be easily incorporated into network edges as well.

kyoto encyclopedia of genes and genomes : each gene appearing in an internal node of a decision tree is annotated with a species-specific url denoting its entry in the kegg genes database. this is then included in the svg file that displays the decision tree graphically in the browser interface. when the user clicks on a node in the tree, the browser executes a query to open the gene's annotation page and display details of its name, sequence, and other annotation using kegg's dbget method.

other sources of expression data: since tree induction methods are non-parametric they may be applied to other data sources, as long as they are in a similar format to mrna expression data, such as data from next-generation sequencing data, proteomics or glycomics. this is because data generated in the form of  abundances, such as from high-throughput mass spectrometry are similar to microarray data in the sense of being an indirect measure of concentration of gene products or other molecules. however, this is left for future work since so far we have only applied miner to microarray data.

related work
a large number of methods have been proposed to infer whole gene regulatory networks from gene expression data . these methods all apply a "one-shot" paradigm that can lack transparency for the end user and does not allow the use of the biologist's domain knowledge. miner differs from most approaches through its interactivity that allows the user to explore the data and generate testable hypotheses in the process.

other interactive methods fall into two categories: network visualisation tools that can incorporate some network inference algorithm, and interactive data mining applications.

in the first category, sebini  <cit>  is designed to be a framework to support testing of network inference algorithms using synthetic and other data sets. however, it has a limited number of inference methods incorporated, and cannot support the two level approach we have adopted. it also does not seem to be actively under development. topnet  <cit>  adopts the petri net formalism to represent interactions, which is more flexible than simple graphs, particularly for metabolic reactions. however, it does not support any data mining methods for network inference, and it is no longer supported. cytoscape  <cit>  is a widely used visualisation and integration package that supports some network inference plug-ins . all of these plug-ins perform a global network inference based on uni-variate correlation rather than the gene-by-gene approach of miner that uses more involved multi-variate non-linear tree learning.

in the second category, sysnet  <cit>  combines visualization and exploratory data analysis, however its network inference is restricted to standard methods of correlation. unlike miner, sysnet infers a global network first then allows the user to drill down to inspect properties of individual nodes rather than building the network from individual relationships.

CONCLUSIONS
miner combines advanced machine learning techniques with a "bottom-up" interactive approach to inferring gene interaction networks from gene expression data. this approach differs from most methods that attempt to reconstruct the whole network in one operation and are not very transparent to the end user, and from interactive methods that are based on relatively simple expression correlation and clustering. the miner approach allows biologists to examine the program's hypotheses as they are generated and incorporate their own biological knowledge into the interaction network exploration process. the tree learning paradigm provides explicit descriptions of regulatory dependencies with supporting evidence for the user to examine. this interactive exploration approach has already resulted in the discovery of new regulatory relationships that were subsequently validated experimentally. miner has been used with gene expression data obtained from microarray experiments but can be applied to any high-throughput molecular abundance data including those resulting from new sequencing technologies and from proteomics analyses.

