BACKGROUND
dna, like any other form of information, can be both written and read. for dna, reading is done by dna sequencing and writing by gene synthesis. most of molecular biology over the last decade has focused on reading and analyzing naturally occurring dna sequences as revealed by massive worldwide sequencing efforts. in contrast, the emerging field of synthetic biology aims to write new genetic information, thereby creating designed non-natural genes, proteins, biological processes and organisms <cit> . gene synthesis was conceived as a means of gene acquisition in the 1970s and early 1980s <cit> , but was soon overtaken by cloning from libraries and later by pcr. more recently, protein and dna sequences have become easier to obtain electronically through databases than physically from library clones. at the same time gene synthesis technology has matured. direct synthesis of genes is rapidly becoming the most efficient way to make functional genetic constructs and enables applications such as codon optimization <cit> , making rnai resistant genes <cit>  and protein engineering <cit> .

synthetic biology is the convergence of molecular biology and engineering principles that is underpinned by increasingly efficient technologies for creating full length genes, operons and even genomes denovo  <cit> . codon optimization for heterologous protein expression has been shown to often drastically increase protein expression levels <cit> . central to such efforts is the ability to design the genetic constructs as easily as possible while considering multiple design parameters in parallel. for example, considerations such as codon bias use in the desired expression system, avoidance of mrna secondary structures, degree of sequence identity to homologs and the presence or absence of specific restriction sites or motifs must all be considered simultaneously.

current commercial sequence manipulation packages are typically very feature rich with graphic user interfaces and multiple integrated tools to allow for a seamless workflow. these commercial packages are primarily built to read and analyze sequence information, giving very little freedom to design and write new genetic information. on the other hand there are a plethora of freely available software that allow the user to simply codon optimize a sequence. these free tools are usually poor on gene design features, rely on a static web interface, are never updated, and have very limited flexibility. a representative selection of free codon optimization tools can be found in table  <dig> and also in reference <cit> . these free codon optimization tools rarely use probabilistic algorithms, do not support features such as 'optimize close to' or 'far away from' a reference sequence, do not flag methylation sensitive restriction enzymes or capture manual editing in real time etc. these are all features that are incorporated in the codon optimization module of gene designer. equally important, gene designer is built to integrate codon optimization with all the tools necessary to design, write and edit sequence information within one unifying user friendly interface. the gene designer software enables the quick, reliable and robust creation of new genetic information, a process essential for synthetic biology.

RESULTS
input and manipulation of data
gene designer is easy and intuitive to learn. it has a graphically rich molecular viewer for displaying and manipulating genetic constructs using simple drag-and-drop manipulations, coupled with a hierarchical data structure for storing, managing and accessing sequence objects. gene designer is a stand-alone secure software that provides an efficient integrated solution for gene design projects.

new sequence objects in gene designer can be entered as aa , dna  or orf . each object can be imported directly in fasta format or manually imported by cut-and-paste into a data entry window. once loaded, each object can be displayed in icon, sequence or notes  view.

a set of commonly used genetic objects are provided in a tree structured design toolbox. the list includes prokaryotic and eukaryotic transcriptional and translational regulatory elements, purification and solubility tags, protease cleavage sites, secretion signals, restriction sites and recombinase cloning elements. the toolbox is not a complete and final list of genetic elements, but rather a convenient starting point for each user to assemble their own custom set of genetic objects. the software is built to enable the user to add and edit new custom objects and make notes associated with each object. these objects can be saved in the toolbox and can be shared between users. for detailed and up to date information of each existing building block, or to create new building blocks, we recommend the user searching ncbi databases and the world wide web.

the icon view provides an immediate overview of the entire design project. each genetic object is shown as a differently colored arrow indicating the orientation of the object. objects can be moved in this view by drag-and-drop. this is particularly convenient when moving affinity tags from the n to the c-terminal of a protein, creating chimeric proteins and editing restriction sites at ends of a construct.

the sequence view provides a detailed display of the nucleotide and/or amino acid sequences of each object below a single nucleic acid sequence corresponding to the entire construct. for aa objects, each amino acid  is shown immediately above its corresponding codons. codons are shown in descending order of their frequency in the corresponding codon usage table.

the notes view provides a convenient way for the user to annotate the sequence elements for future reference. there is also a feature in the notes view for reports on the entire project.

codon optimization
the genetic code uses  <dig> nucleotide triplets  to encode  <dig> amino acids and stop. each amino acid is encoded by on average  <dig> codons that are read during translation by trnas charged with the cognate amino acid. the degeneracy of the genetic code enables many alternative nucleotide sequences to encode the same protein. the frequencies with which different codons are used by different organisms and different types of genes vary significantly <cit>  and are correlated to the concentration of the corresponding trna population in the cell <cit> . rare codons are not only strongly associated with low levels of protein expression due to ribosome stalling and abortive translation <cit> , but also implicated in frameshift and amino acid misincorporation <cit> . codon usage has been identified as the single most important factor in prokaryotic gene expression <cit> .

the simplest way to design a dna sequence from an amino acid sequence is to assign the most abundant codon to all instances of that amino acid in the sequence. codon usage preference in a gene is often measured by codon adaptation index . the cai score for such a construct is  <dig> , i.e. in each case only the most abundant codon is used. this 'one amino acid â€“ one codon' or 'cai =  <dig> ' approach has several drawbacks. first, a strongly transcribed mrna from such a gene will generate high codon concentrations for a subset of the trna populations, resulting in imbalanced trna pool, skewed codon usage pattern and increased translational error <cit> . heterologously expressed proteins may be produced at levels as high as 60% of total cell mass, making an imbalance trna pool a significant problem resulting in reduced growth due to trna depletion <cit>  and increased frameshift due to translational pausing at the ribosomal a-site <cit> . second, with no flexibility in codon selection, it is impossible to avoid repetitive elements and mrna secondary structures in the gene. severe repetitive elements can affect the genetic stability of a gene and may lead to excision through recombination. third, it is often desirable to incorporate or exclude sequence elements such as restriction sites from the sequence to facilitate subsequent manipulations. these modifications are impossible to accommodate if the codon usage is rigidly fixed. fourth, in the literature there are many and sometimes conflicting data suggesting sequence elements that decrease protein expression levels. such elements can not be avoided if the codon usage is fixed. gene designer users who wish to use the cai =  <dig> optimization approach can either increase the threshold for codons used or use a modified codon usage table.

in contrast to the 'cai =  <dig> ' method, gene designer optimizes genes for expression by using a codon usage table in which each codon is given a probability score based on the frequency distribution of the codons in the genome normalized for every amino acid. the codon usage tables for  <dig> common protein expression hosts are included with the download, and new codon usage tables can be imported from the codon usage database  <cit>  or manually edited as required. the codon usage table created by one user is automatically imported when another user shares the project. for e. coli expression we recommend the user to use the ecoli_cii table that is derived from a collection of highly expressed e. coli genes <cit> . candidate sequences are generated in silico using a monte carlo algorithm by selecting codons based on the probabilities obtained from the codon usage table, with codons below the threshold value  excluded from consideration. each designed sequence is then passed through subsequent iterations to ensure a match with additional design criteria such as filtering out mrna secondary structures and dna repeats, eliminating or incorporating restriction sites and avoiding methylation sites that overlap methylation sensitive restriction sites <cit> . a pseudo code for the algorithm in gene designer can be found in appendix a.

motifs such as internal shine-dalgarno sequences have been shown to decrease gene expression <cit> . gene designer allows the user to filter out shine-dalgarno sequences, splice donor and acceptor sequences as well as any other sequence motif defined by the user. the user can also maximize or minimize the similarity of the designed sequence to a reference sequence, for example to make rnai-resistant genes <cit>  or to maximize the probability of recombination between two variants. since the algorithm is a monte carlo based algorithm where each codon choice is an independent probabilistic event, the software can iterate the optimization each time finding a new and equally good solution.

gene designer does not utilize advanced rna folding calculation software such as the popular mfold <cit>  as these types of software are designed to calculate rna secondary structures for naked rna. the translated mrna within an orf is in fact densely covered by ribosomes. chemical footprinting of mrna-ribosome complexes show that up to  <dig> codons  are covered by a single translating ribosome <cit> , and the ribosomes are translating at ~ <dig> codons /sec with one ribosome initiating translation every ~ <dig> second <cit>  leaving only ~ <dig> mrna bases available between translating ribosomes for folding an mrna secondary structure. during translation, a stem-loop structure in the coding part of the mrna does not hinder the progress of the translational machinery, and actively translating ribosomes can break up such structures, either by the energy driven translation process itself or by the support of rna helicases  <cit> .

gene designer filters out  any mrna structure with double-stranded rna stem of  <dig> bp or more. this feature is included because it is very often requested by users and also because it ensures that oligonucleotides used in the gene synthesis process will not predominantly self-anneal during gene assembly.

the codons immediately 3' of the initiation atg codon have a strong influence on gene expression <cit> . accordingly, the codon optimization module in gene designer gives the user the option to treat the 5' end of the orf separately. the default is conservatively set to include the first  <dig> codons of the orf as 5' end, but can be changed as needed. gene designer will filter out ngg codons in the 5' region <cit>  and predominantly use a/t in the wobble position <cit> . the 5' end is also set to filter out repeats of  <dig> bases or more and filter out mrna secondary structures of  <dig> bp or more.

the local context of a codon can influence the protein expression levels. back in the early 1980s it was shown that the efficiency of the uag stop codon in e. coli is typically decreased in the presence of a 3' adenine and increased in the presence of a 3' cytidine <cit> . since then, a multitude of experimentally validated codon contexts have been shown to affect ribosomal frameshift, missense and nonsense incorporations and translational efficiency  <cit> . gene designer avoids known codon context issues by omitting the use of rare codons and filtering out runs of c's and g's. we also recommend the addition of two stop codons at the end of an orf to ensure proper translational termination.

aside from the experimentally validated cases of codon context effect on protein expression levels, there are several publications where in which codon context effects have been proposed based on in silico analysis of genomes  <cit> . the absence or low level of certain codon contexts in the analysis of entire genomes does not necessarily reflect that the identified sequences affect protein expression of a recombinant gene when grown in rich media, but more likely is a consequence of other evolutionary pressures such as facilitating dna replication, mutational bias, expression during starvation, intrinsic metabolic regulation etc..  <cit>  in at least one case <cit> , the predicted codon pair bias effect on protein expression could not be experimentally validated <cit> . the current version of gene designer only includes pre-set sequence constraints that have been experimentally validated. the individual user may add to these any sequence elements they wish to eliminate.

other design features
any object can be split into two or more daughters by selecting a part of the sequence and using the split function. users can thus easily divide proteins into domains for easy drag-and-drop construction of chimeras or gene variants. objects can also be linked within and between projects; changes in linked objects then propagate throughout all open projects. all changes, such as editing an object's sequence, changing codon table or codon threshold are incorporated into the final sequence in real time.

the gene designer can also be used to design oligonucleotides. to assist with this, a real-time tm calculator can be positioned in the sequence view and dragged until a preferred location, length and melting temperature is found. the dna melting temperature calculation is performed using the nearest neighbor method <cit> . the software can also design sequencing primers for a specified region or spanning the entire construct through an integrated 'actions' module.

once a sequence has been designed, sequences can be saved with all the graphical elements and captured relationships as gene design files , saved as a graphic image  or as plain text . reports can be generated that contain the complete nucleotide sequence, the nucleotide sequence of each object, notes, translation map of each object, a restriction site summary, codon usage frequencies and gc content. finally, by clicking the 'get quotation' or 'order gene' icon, the designed synthetic dna fragment can be priced or placed in the gene synthesis pipeline of dna  <dig> .

CONCLUSIONS
gene designer provides an easily accessible means of designing synthetic genes, operons and other genetic constructs denovo. the user can combine and modify pre-defined and custom genetic building blocks directly through a user friendly drag-and-drop interface. all manipulations needed for gene design are integrated and immediately accessible under one interface.

the authors are using and have been using gene designer daily over the last year. several thousand genes have now been designed using only this software. the savings in time, increased convenience and reliability of gene designer compared to other commercial and freeware tools has dramatically improved our efficiency and ensure a robust pipeline for sequence information handling. furthermore, applications such as creating rnai resistant genes <cit>  could only be enabled using the gene designer software.

please contact the authors to suggest features to include in upcoming gene designer releases.

availability and requirements
gene designer is freely available for download from the 'tools' menu at . both mac and pc versions are available. the software is provided "as is" with no guarantee or warranty of any kind for non-commercial use. please see the download licensing agreement for further licensing details and restrictions on commercial use.

authors' contributions
av developed the software, implemented the algorithms and participated in designing the interface. jn and jm conceived the software and features to be included and participated in designing the interface and testing the software. jm also wrote the help section of the software. cg wrote the manuscript and participated in defining the scope of the software and testing it. sg lead the project, participated in developing, defining the scope as well as features of the software. all authors read and approved the final manuscript.

appendix a. pseudo-code for codon optimization in gene designer
for each a.a. sequence

Â Â Â for each codon in sequence

Â Â Â Â Â Â select a codon randomly from the probability distribution. â€ 

for each a.a. sequence that needs homologue 

Â Â Â prepare homologue alignment matrix.

Â Â Â pre select codons that are  homologue sequence.

Â Â Â if homologue dna contains unwanted restriction sites or other unwanted sequences then

Â Â Â Â Â Â ask/warn user and eliminate if necessary.

create a ukkonen suffix tree of the entire construct concatenated with its reverse compliment.

h = homologue score for all a.a. sequences that require it.

r = number of repeats over given threshold.

m = size of largest repeat.

while r >  <dig> do â€¡

Â Â Â change a codon in the largest repeat region based on the probability distribution. â€ 

Â Â Â hnew = homologue score after change.

Â Â Â rnew = number of repeats after change.

Â Â Â mnew = size of largest repeat after change.

Â Â Â if hnewâ‰¥ h and  then

Â Â Â Â Â Â accept change.

Â Â Â Â Â Â h = hnew

Â Â Â Â Â Â r = rnew

Â Â Â Â Â Â m = mnew

for each a.a. sequence that requires 5' translation optimization

Â Â Â create a ukkonen suffix tree of the 5' end concatenated with its reverse compliment.

Â Â Â find hairpins in 5' end.

Â Â Â gcgoal = cg ratio wanted Ã—  <dig> Ã— number of codons being considered in 5' end.

Â Â Â h = homologue score for the 5' end.

Â Â Â r = number of hairpins.

Â Â Â gc = total number of g's and c's in 5' end.

Â Â Â while r >  <dig> or gc > gcgoal do â€¡

Â Â Â Â Â Â change a random codon in 5'end based on the probability distribution. â€ 

Â Â Â Â Â Â hnew = homologue score after change.

Â Â Â Â Â Â rnew = number of hairpins after change.

Â Â Â Â Â Â gcnew = number of g's and c's after change.

Â Â Â Â Â Â ifhnewâ‰¥ h and ) then

Â Â Â Â Â Â Â Â Â accept change.

Â Â Â Â Â Â Â Â Â h = hnew

Â Â Â Â Â Â Â Â Â r = rnew

Â Â Â Â Â Â Â Â Â gc = gcnew

for each restriction enzyme that needs to be checked for methylation

Â Â Â find methylated sites.

Â Â Â while still methylated do â€¡

Â Â Â Â Â Â change a codon in the site based on the probability distribution. â€ 

for each restriction enzyme that needs to be avoided.

Â Â Â find restriction sites.

Â Â Â while restriction site still exists do â€¡

Â Â Â Â Â Â change a codon in the site based on the probability distribution. â€ 

â€  based on a given precompiled codon bias table.

â€¡ this can go on forever, must be stopped artificially after a given number of iterations

