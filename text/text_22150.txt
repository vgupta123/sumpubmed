BACKGROUND
some of the primary goals of systems biology are to identify and quantify the individual components of cells, organs, and organisms; to understand the interactions between these components; and to use this information to create mathematical models that enable accurate predictions. since organisms are composed of large numbers of unique elements , and since many interactions often exist between these elements, even the most basic forms of system-level data analysis or simulation cannot be done by hand. instead, software must be used to store, retrieve, analyze, and sometimes even to collect the data obtained from system-level experiments. software must also be used to implement mathematical models and algorithms required for simulation and theoretical predictions on the system-level.

we introduce an integrated software platform called the systems biology research tool  to facilitate the computational aspects of systems biology. the sbrt is useful for both the management and analysis of data, and the simulation and prediction of cellular phenotypes. the sbrt can, for example, be used to translate data files into various machine- and human-readable formats; to simulate the activity of reconstructed signal transduction and genome-scale metabolic networks using flux balance analysis and related methods  <cit> ; and to analyze the topology of experimentally determined biochemical reaction networks, such as transcriptional regulation and protein-protein interaction networks. since new data formats, methods of data analysis, and simulation techniques arise frequently during systems biology research, the sbrt is also designed to allow independent software developers to add new functionality as it is needed.

implementation
the sbrt is both an application and an application programming interface . it is written in java and has been tested in windows xp, mac os x, and two distributions of linux, requiring no modification of source code or recompilation. the sbrt is licensed under the gnu general public license and is therefore open-source, modifiable, and freely distributable. the most recent versions of the sbrt can be downloaded from the sbrt's homepage  <cit> , and an archive of the current version is provided as supplementary material .

the systems biology research tool's api contains over  <dig> well tested and fully documented classes and interfaces. the api is composed of two functionally distinct levels: the kernel, which is responsible for performing all significant computation, and the shell, which is responsible for relaying information between the user and the kernel. the kernel is completely independent of the shell, which results in a great degree of flexibility and robustness: new functionality can be added to the kernel without concern for user-level i/o details; new functionality can be added to the shell without modifying the kernel, thereby preventing the introduction of kernel-level errors. the kernel contains implementations of algorithms, methodological procedures, and fundamental objects, such as networks, chemical reactions, mathematical expressions, matrices, convex polytopes, hyperplanes, linear program solvers, etc. the shell is primarily composed of classes and interfaces for reading files from the hard drive, for parsing and formatting various types of data, and for managing and monitoring kernel-level activities.

RESULTS
use as an application
the sbrt can be used as an application to execute processes. a process is a series of actions that takes user-supplied input and produces a result. the sbrt includes  <dig> processes for analyzing stoichiometric networks, such as optimizing objective functions, computing the variability of fluxes, identifying reaction pathways, generating uniformly distributed points within flux spaces, analyzing the properties of flux vectors and intervals, and more. the sbrt also includes  <dig> processes utilizing graph theory, geometry, algebra, statistics, and combinatorics. descriptions of these  <dig> processes are provided as supplementary material .

processes can be controlled with simple text-based input files  or directly from the command line. when possible, files generated by one process can also be used as input files in other sbrt processes, allowing the user to design complex analyses by linking processes via their input and output files, without writing a single line of code. for example, the process bigg-sbml file reader can be used to translate a machine-readable file into a human-readable and -editable text file r that contains a list of chemical reactions. the file r can then be supplied to the network information gatherer process to create a text file n that contains the names  of all chemical reactions contained in r; and r can also be supplied to the random constraint generator process to create a text file c of randomly generated flux constraints. the files r, n, and c can then be supplied to the fba constraint variation-objective function analysis process to determine the maximum fluxes of the reactions in r that are denoted in n for each set of flux constraints in c. each of these files can be edited by the user at any step, and many other combinations of processes are possible.

the use of the sbrt as an application requires no programming ability, and is fully documented in a freely available html-based user's guide, which provides a detailed description of each process and contains hyperlinks to at least one complete example. an example of the path identification process is illustrated in figure  <dig> 

support for external software
the systems biology research tool's api is designed to support multiple forms of external software , making the sbrt highly modular and thus evolvable. a process plug-in is an external software package that can be written by any skilled programmer, executed as a process by the sbrt application, and shared among other users. as a consequence of the existing capabilities of the sbrt, development of process plug-ins is considerably easier and faster than development of new stand-alone applications. plug-ins can, for example, call high-level methods from the api that perform file parsing, process monitoring, algorithm execution, and error-detection. plug-ins can also call low-level methods to facilitate the development of novel high-level methods. instructions for writing process plug-ins are included in the developer's guide, and an example plug-in is also included with the package. additionally, the sbrt's api supports communication with other forms of external software, such as applications and software libraries. the ability to interact with mathematica, r, glpk, cplex, xerces, and metatool  <cit>  is already implemented.

similar software
due to its ability to communicate with other software, the systems biology research tool provides some functionality similar to that of cytoscape  <cit> , celldesigner  <cit> , and the systems biology workbench  <cit> . both cytoscape and celldesigner can also be extended via plug-ins, but their current capabilities are substantially different from those of the sbrt. the systems biology workbench is primarily intended to unify other applications by acting as a broker. the sbrt can be used in a similar way, but this is not its primary function. the sbrt can be used independently of other applications, and it also provides implementations of algorithms not currently available in any other software package  <cit> .

presently, the majority of processes offered by the systems biology research tool are for analyzing stoichiometric networks. software already exists that is capable of particular types of such analysis, such as the cobra toolbox  <cit> , cellnetanalyzer  <cit> , metatool  <cit> , fba <dig>  moma  <cit> , pathwayanalyser  <cit> , expa  <cit> , yana  <cit> , and sna  <cit> . some of these programs are stand-alone applications , and the remainder can only function within a specific programming environment, such as matlab or mathematica . in table  <dig> and the following section, we compare and contrast some of the features and designs of these programs with that of the systems biology research tool.

evolvability
due to its api and support for external software, the sbrt has the ability to evolve in conjunction with the field of systems biology itself. in contrast, none of the stand-alone applications for stoichiometric network analysis listed above  provide both a documented api and a mechanism for the inclusion of additional software . therefore, the ability of independent software developers to expand upon these programs is greatly hindered. this is not the case, however, for software written for matlab or mathematica. these mathematical programming environments both provide a large number of powerful functions, well documented api's, and mechanisms for the inclusion of external software, making the development of new software straightforward. matlab and mathematica, however, are both closed-source. consequently, certain aspects of their performance and functionality are impossible to alter, which results in additional constraints during software development and limitations during performance optimization.

cost
to our knowledge, all of the stoichiometric network analysis software listed above is free of charge, at least for academic purposes. matlab and mathematica, however, are both commercial software packages. in contrast, the sbrt is completely free of charge for every user.

ease of use
one of the most important aspects of any software package is its ease of installation and use. the sbrt differs from the programs listed above in several ways. first, some of these programs require the installation of libraries or other programs before they can be used, while sbrt installation is self-contained and guided with a graphical user interface. second, some of the existing programs must be used from a command line interface, which is cumbersome for the "typical" windows user. the sbrt can be used from both the command line and from a simple graphical user interface. third, while some existing programs require programming ability, the sbrt does not, when used as an application.

scope
the programs listed above are intended primarily for different types of stoichiometric network analyses, and they are sometimes quite limited in scope. the sbrt, however, has been explicitly designed to integrate techniques from all of systems biology.

performance
of all existing packages, the cobra toolbox is most similar to the sbrt in terms of the computational procedures offered by both. because of these similarities, we performed a comparative performance analysis of some capabilities offered by both packages. specifically, we carried out  <dig> analyses using an in silico model of s. cerevisiae metabolism  <cit> . for analyses a and b, the model was provided a minimal growth-supporting medium, where the variability of all reaction rates  and the effect of all single-gene deletions on the maximum growth rate  were computed. for analyses c, d, and e, the model was sequentially provided  <dig> randomly generated growth-supporting media, where the maximum growth rate , the variability of all reaction rates , and the effect of all single-gene deletions  were computed. the average maximum memory usage of the cobra toolbox was  <dig>  ,  <dig>  ,  <dig>  ,  <dig>  , and  <dig>   times that of the sbrt; and the sbrt was  <dig>  ,  <dig>  ,  <dig>  ,  <dig>  , and  <dig>   times faster than the cobra toolbox . a detailed description of these comparisons is provided as supplementary material .

CONCLUSIONS
the systems biology research tool represents a technological advance for systems biology. this software can be used to make sophisticated computational techniques available to everyone, to facilitate cooperation among researchers, and to expedite progress in the field of systems biology.

availability and requirements
project name: the systems biology research tool

project home page: 

operating system: windows, mac os x, linux, platform independent

programming language: java

other requirements: none

license: gnu general public license

any restrictions to use by non-academics: none

authors' contributions
jw designed and implemented the systems biology research tool and carried out all performance comparisons. both jw and aw contributed to the software's conception and participated in drafting the manuscript.

supplementary material
additional file 1
sbrt archive. an archive of the current version of the systems biology research tool.

click here for file

 additional file 2
sbrt processes. descriptions of the  <dig> processes currently implemented in the systems biology research tool.

click here for file

 additional file 3
performance comparisons. a description of performance comparisons between the systems biology research tool and the cobra toolbox.

click here for file

 acknowledgements
we sincerely thank christopher lewis for his invaluable advice during software development. we also thank christa deiwiks, mark fleharty, joão rodrigues, and annette evangelisti for helpful discussions during this project. aw acknowledges support through snf grant 315200- <dig> 
