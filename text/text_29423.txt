BACKGROUND
motivation
in most supervised classification schemes, a training set of exemplars from each class is used to train a classifier to distinguish between the different object classes. the training exemplars  usually have a semantic label assigned to them by an expert describing a category of interest or class to which they belong. each training exemplar serves as an observation of the domain space; as the space is sampled more completely, the resulting classifier should achieve greater classifier accuracy when predicting class labels for new, unlabeled  data. thus, typically, the larger the training set, the greater the accuracy of the resulting classifier  <cit> . in most cases, the training set of labeled data for each of the object categories is generated by a human expert who manually annotates a pool of unlabeled samples by assigning a label to each exemplar.

the use of computers in histopathology analysis, known as digital pathology, is an increasingly common practice that promises to facilitate the detection, diagnosis, and treatment of disease  <cit> . supervised classifiers have been applied in this context for a number of problems such as cancer detection and grading  <cit> . if the objective of the classifier is to distinguish normal from cancerous regions of tissue, exemplars corresponding to each class need to be manually labeled by a domain expert . figure  <dig> shows an image from such an annotation task, where a prostate tissue sample stained with hematoxylin and eosin  has been digitized at 40× optical magnification using a whole-slide scanner. in this case, the goal of the supervised classifier is to identify regions of carcinoma of the prostate . the black contour in figure  <dig> indicates the target class and was placed manually by an expert pathologist. we have previously shown  <cit>  that a supervised classifier can accurately distinguish between cap and non-cap, but the annotation process required to build a large training set is laborious, time consuming, and expensive. the digitized images can be over  <dig> gigabytes  in size, making it difficult to quickly identify cancerous regions within the digital slide. in addition, cap often appears within and around non-cap areas, and the boundary between these regions is not always clear . these factors increase the time, effort, and overall cost associated with training a supervised classifier in the context of digital pathology. to reduce the cost and effort involved in training these classifiers, it is important to utilize an intelligent labeling strategy. in traditional supervised classification, samples are chosen from an unlabeled pool, annotated, and used to train a classification algorithm. this is known as random learning , illustrated by the flowchart in figure  <dig> . in rl, no prior knowledge about the nature of the unlabeled samples is used, and it is possible that many non-informative samples  will be annotated; clearly a wasted effort. to improve training efficiency, a strategy known as active learning  was developed to select only "informative" exemplars for annotation  <cit> .

informative samples are those which, if annotated and added to the training set, would increase the accuracy of the resulting trained classifier. in this setup, illustrated in figure  <dig> , the al algorithm identifies informative samples  in an unlabeled dataset for annotation and addition to the growing training set. al generates training sets that yield better classifier performance compared with training sets of the same size obtained via rl. the concept of "informative" samples in this context is related to the idea of margin-based classification in support vector machines   <cit> , where labeled samples close to a decision boundary are used to classify unlabeled samples. in the al context, informative samples are difficult-to-classify unlabeled data points that improve an existing training set.

several al algorithms have been proposed to determine whether an unlabeled sample is informative.

these methods measure the "informativeness" of a sample as the distance to a support-vector hyperplane  <cit> , the disagreement among bagged weak classifiers  <cit> , variation in feature distributions  <cit> , and model-based predictions  <cit> . in a bioinformatics context, lee, et al.  <cit>  showed the benefits of using al in building a naive bayes classifier to identify disease states for several different datasets. veeramachaneni, et al.  <cit>  implemented an al training approach to build a classifier identifying patient status from tissue microarray data. previously  <cit> , we investigated the performance of different al algorithms in creating training sets for distinguishing diseased from non-diseases tissue samples.

among the results of that study, we found that the particular al algorithm chosen for learning had no significant effect on the performance of the supervised classifier.

another major issue in supervised training involves the minority class problem, wherein the target class is under-represented in the dataset, relative to the non-target classes. a labeled training set comprises two sets of samples: representing training samples from the target  class, and  being the samples from the non-target  class. in the minority class problem, , where |·| indicates set cardinality. several researchers  <cit>  have shown that this training set will likely yield a classifier with lower accuracy and area under the receiver operating characteristic curve  compared with training sets where  or . weiss and provost  <cit>  showed that for several datasets, varying the percentage of the minority class in the training set alters the accuracy and auc of the resulting classifiers, and that the optimal class ratio was found to be significantly different from the "natural" ratio. japkowicz and stephen  <cit>  found that the effect of the minority class problem depends on a number of factors, including the complexity of the target class and the size of the class disparity. chawla, et al.  <cit>  proposed mitigating the problem by over-sampling the minority class using synthetic samples; however, this method may simply introduce noise if the target class is too complex.

while some research has addressed the minority class problem in biomedical data  <cit> , there has been little related work in the realm of digital pathology. cosatto, et al.  <cit>  applied a svm al method  <cit>  in training a classifier for grading nuclear pleomorphism on breast tissue histology, while begelman, et al.  <cit>  employed an al-trained svm classifier in building a telepathology system for prostate tissue analysis. however, these studies did not account for the minority class problem in the training set, particularly relevant in the context of digital pathology, since the target class  is often observed far less often than the non-target class  and occupies only a small percentage of the overall tissue area. ideally, an intelligent training strategy for this domain would combine al while simultaneously addressing the minority class problem by maintaining a user-defined class ratio . zhu and hovey  <cit>  combined an entropy-based al technique with over-and under-sampling to overcome the minority class problem for text classification, and found that over-sampling the minority class yielded the highest classifier performance. however, they did not investigate different class ratios and did not discuss the increased cost of the sampling techniques. bloodgood and vijay-shanker  <cit>  focused on an al and classification method based on svms for unbalanced text and protein expression data; their approach involves estimating the class balance in the entire dataset, and then selecting samples to overcome this bias .

while additional sampling can help to mitigate the minority class problem, this process requires more annotations compared to a training set with unbalanced classes. because the cost of obtaining each annotation is high, it would be beneficial to be able to predict the number of annotations required to obtain a class-balanced training set of a pre-defined size. these predictions are critical for determining, a priori, the amount of resources  that will be employed in developing a supervised classifier. an analytical cost model will enable us to predict the cost involved in training the supervised classifier. additionally, such a model will provide some insight into the relationship between  the size of a training set,  its class balance, and  the number of annotations required to achieve a predefined target accuracy.

contributions and significance
in this work, we develop an al-based classifier training strategy that also accounts for the minority class problem. this training strategy is referred to as "class-balanced active learning" . we apply cbal to the problem of building a supervised classifier to distinguish between cap and non-cap regions on images of prostate histopathology. for this particular problem, training samples are difficult and expensive to obtain, and the target class  is relatively sparse in relation to the non-target class; thus, we expect cbal to yield large benefits in terms of training cost. our mathematical model is used to predict the cost of building a training set of a pre-defined size and class ratio. this is, to the best of our knowledge, the first in-depth investigation and modeling of al-based training for supervised classifiers that also specifically addresses the minority class problem in the context of digital pathology. however, cbal training can be easily applied to other domains where obtaining annotated training samples is a time-consuming and difficult task, and where the target and non-target class ratios are not balanced. the rest of the paper is organized as follows. in section  <dig> we describe the theory behind cbal, followed by a description of the algorithms and model implementation in section  <dig>  in section  <dig> we describe our experimental design, and in section  <dig> we present the results and discussion. concluding remarks are presented in section  <dig> 

methods
modeling the annotation cost of class balancing in training
notation and symbols
a table containing commonly used notation and symbols is presented in table  <dig>  our data comprises a set of square image regions r ∈ r on digitized prostate images, represented by the red squares in figure  <dig> . the regions r ∈ r are divided into an unlabeled training pool, str, and an independent labeled testing pool, ste. each sample has been identified as either belonging to the minority class ω <dig>  or the majority  class, ω <dig>  we denote membership of sample r ∈ r in the minority class ω <dig> as r ↪ ω <dig>  and these samples are "minority class samples." at iteration t ∈ { <dig>   <dig>  ⋯, t } of al, the labeled training set is denoted as , where Φ denotes the training methodology and t is the maximum number of iterations. at each iteration t, a set of m weak binary classifiers is trained by  and used to build a strong classifier, . the selectivity of the al algorithm is parameterized by τ ∈ { <dig>  ⋯,  <dig> }, the confidence margin. we denote by  and  the desired number of samples r ∈ r in the final training set for which r ↪ ω <dig> and r ↪ ω <dig>  respectively. the total number of samples annotated at any iteration t is denoted as nt.

list of the commonly used notation and symbols.

theory of cbal
in this subsection, we describe the theoretical foundation of the cbal approach. our goal in this section is to precisely define an "informative sample," identify the likelihood of observing a sample of a target class, and predict the number of samples that must be annotated before a specified number of target samples is observed and annotated. our aim is to be able to predict a priori the cost of the system in terms of actively-learned annotations, which in turn represent an expenditure of resources.

definition  <dig>  the set of informative samples , , at any iteration t is given by the set of samples r ∈ r for which .

the value of  denotes the classification confidence, where  indicates strong confidence that r ↪ ω <dig>  and  indicates confidence that r ↪ ω <dig>  the number of samples  for which r ↪ ω <dig> and r ↪ ω <dig> are denoted k <dig> t and k <dig> t, respectively. the likelihood of randomly selecting a sample r ↪ ω <dig> from  is . the number annotated in class ω <dig> is .

proposition  <dig>  given the probability pt of observing a sample r ↪ ω <dig> at any iteration t, the probability of observing samples from class ω <dig> after annotating nt samples is:

  p^t=nt+k <dig> ^-1ntntk <dig> ^ 

proof revealing the label of a sample  is an independent event resulting in either observation of class ω <dig> or ω <dig>  the probability of success  is pt, and the probability of failure is pt =  <dig> - pt in the two class case. we assume that  is large, so pt is fixed. the annotations continue until  successes are achieved. because of these properties, the number of annotations nt is therefore a negative binomial random variable, and the probability of observing  samples from class ω <dig> in nt annotations is given by the negative binomial distribution.

the consequence of proposition  <dig> is that as nt  increases,  also increases, indicating a greater likelihood of observing  samples r ↪ ω <dig>  we denote as pΔ the target probability for the model to represent the degree of certainty that, within nt annotations, we have achieved our  samples r ∈ r for which r ↪ ω <dig> 

proposition  <dig>  given a target probability pΔ, the number of annotations required before minority class samples are observed in se is:

  nt=argmink^1≤x≤|str|xk^1]. 

proof we wish to find the value of nt that causes equation  <dig> to match our target probability, pΔ. when that happens,  and . using a minimization strategy, we obtain the value of nt.

proposition  <dig> gives us an analytical formulation for nt. note that equation  <dig> returns the smallest nt that matches the pΔ. the possible values of nt range from , in which case exactly  annotations are required, to nt = |str|, in which case the entire dataset is annotated before obtaining > samples. note that we are assuming that there are at least  samples in the unlabeled training set from which we are sampling.

algorithms and implementation
al algorithm for selecting informative samples
the cbal training strategy consists of two algorithms that work in tandem: activetrainingstrategy, for selecting informative samples, and minclassquery, for maintaining class balance. algorithm activetrainingstrategy, detailed below, requires a pool of unlabeled samples, str, from which samples will

algorithm activetrainingstrategy

input: str, t

output: , 

begin

 <dig>  initialization: create bootstrap training set , set t = 0

 <dig>  while t < t do

 <dig>     create classifier  from training set ;

 <dig>     find eligible sample set  where ;

 <dig>     annotate k eligible samples via minclassquery() to obtain ;

 <dig>     remove  from str and add to ;

 <dig>     t = t + 1;

 <dig>  endwhile

 <dig>  return , ;

end

be drawn for annotation, as well as a parameter for maximum iterations t. this parameter can be chosen according to the available training budget or through a pre-defined stopping criterion. the output of the algorithm will be a fully annotated training set  as well as the classifier trained using training set . the identification of the informative samples occurs in step  <dig>  wherein a fuzzy classifier  is generated from a set of m weak binary decision trees  <cit>  that are combined via bagging  <cit> . informative samples are those samples for which half of the m weak binary decision trees disagree; that is, samples for which . this approach is similar to the query-by-committee  al algorithm  <cit> . while there are several alternative algorithms available to perform al-based training  <cit> , we chose the qbc algorithm in this work due to its intuitive description of sample informativeness and its straightforward implementation. it is important to note that poor performance of  does not degrade the ability of the algorithm to identify informative samples. we expect that at low t, the performance of  will be low due to the lack of sufficient training, and much of the dataset will be identified as informative.

however, even if  identifies the majority of unlabeled samples as informative, it is still more efficient than rl. in the worst-case scenario, where all unlabeled samples are considered informative, then we are forced to choose training samples at random - which is equivalent to traditional supervised training.

obtaining annotations while maintaining class balance
algorithm minclassquery is used by activetrainingstrategy to select samples from the set of eligible samples, , according to a class ratio specified by  and . recall that , and so k > <dig>  we expect that there will be many more samples from ω <dig>  than from ω <dig>  because these

algorithm minclassquery

input: , k >  <dig>  , 

output: 

begin

 <dig>  initialization: , , 

 <dig>  while do

 <dig>     find class ωi of a random sample , i ∈ { <dig>  2};

 <dig>     if 

 <dig>        remove r from  and add to ;

 <dig>        ;

 <dig>     else

 <dig>        remove r from ;

 <dig>     endif

 <dig>  endwhile

 <dig>  return ;

end

samples are being annotated, they are removed from the unlabeled eligible sample pool  in step 7; however, since the resources have been expended to annotate them, they can be saved for future iterations.

updating cost model and stopping criterion formulation
at each iteration, we can calculate nt using equation  <dig>  we can estimate p <dig> based on the size of the target class observed empirically from the initial training set ; for t > <dig>  we update the probability of observing a minority class sample using the following equation:

  pt+1=k <dig> t-k <dig> ^k <dig> t+k <dig> t-nt, 

and nt+ <dig> is re-calculated via the minimization of equation  <dig>  if {r ∈ str|r ↪ ω1} = ⌀, then  and thus pt+ <dig> =  <dig>  if there are no remaining samples in str, then k <dig> t + k <dig> t = nt and pt+ <dig> is undefined. essentially we must assume that  there are at least some samples r ∈ str for which r ↪ ω <dig>  and  str ≠ ⌀. the cost of the entire training is calculated by summing nt for all t:

  ℒ= ∑t=1tnt. 

activetrainingstrategy repeats until one of two conditions is met:  str is empty, or  the maximum number of iterations t is reached. a stopping criterion can be trained off-line to determine the value of t as the smallest t that satisfies:

  |at-at-1|≤δ, 

where δ is a similarity threshold and  is the accuracy of classifier  . thus, when additional training samples no longer increase the resulting classifier's accuracy, the training can cease. an assumption in using this stopping criterion is that adding samples to the training set will not decrease classifier accuracy, and that accuracy will rise asymptotically. the total number of iterations t corresponds to the size of the final training set and can be specified manually or found using a stopping criterion discussed below. classifiers that require a large training set will require a large value for t, increasing cost.

selection of free parameters
our methodology contains a few free parameters that must be selected by the user. the training algorithm employs three parameters: the similarity threshold δ ; the confidence margin τ; and the number of samples from each class to add per iteration,  and . the choice of δ will determine the maximum number of iterations, t, the algorithm is allowed to run. a small value of δ will require a larger final training set  before the algorithm satisfies the stopping criterion. additionally, if eq.  <dig> is never satisfied, then all available training samples will eventually be annotated .

the confidence margin τ defines the range of values of  for which sample r is considered informative . smaller values of τ define a smaller area on the interval  <cit> , requiring more uncertainty for a region to be selected. τ =  <dig>  indicates that only samples for which   are informative, while τ =  <dig>  indicates that all samples are informative . the number of samples to add from each class during an iteration of learning,  and , determines how many annotations occur before a new round of learning starts.

consider the following two cases:

 <dig>  : in this case,  <dig> samples  are annotated per iteration.

 <dig>  : in this case,  <dig> samples  are annotated per iteration.

in both cases, the learning algorithm for selecting informative samples is only updated after each iteration.

in the first case,  <dig> samples are added to  before new learning occurs, while in the second case, the learning algorithm is updated after each additional sample is annotated. thus, in case  <dig>  we are sure that each additional sample is chosen using the maximum amount of available information, while in case  <dig>  several samples are added before the learning algorithm is updated. although the second case requires ten iterations before it has the same training set size as the first case, each additional annotation is chosen based on an updated al model, ensuring that all  <dig> samples are informative.

experimental design
data description
we apply the cbal training methodology to the problem of prostate cancer detection from biopsy samples. glass slides containing prostate biopsy samples are digitized at 40× magnification . the original images are reduced in size using a pyramidal decomposition scheme  <cit>  to  <dig> % of their original size , matching the resolution of the images used in  <cit> . each image is divided into sets of square regions, r ∈ r such that each region constitutes a 30-by- <dig> pixel square area . these image regions constitute the dataset used for training and testing. ground truth annotation is performed manually by an expert pathologist, who places a contour on tissue regions on the original 40× magnification image. pathologists annotated both cancer and non-cancer regions of tissue, and only annotated regions were included in the dataset. a total of  <dig> biopsy images were analyzed from  <dig> patients, yielding over  <dig>  annotated image regions. all of the  <dig> patients exhibited prostate cancer, although cancer was not present in all  <dig> images. the square regions were assumed to be independently drawn from the images.

feature extraction
in  <cit> , we built a classifier for discriminating between cancer and non-cancer on a pixel level. we extracted several hundred texture features, comprising three different classes of texture descriptors: grey-level statistics of image intensities, haralick texture features based on the co-adjacency of image intensities, and gabor filter features based on a filter bank utilizing phase and scale parameters. examples of these feature types are given in figure  <dig>  we employed the adaptive boosting  algorithm  <cit> , which is a method of assigning a weight to each feature based on its discriminating power. features with a higher weight are better able to capture the differences between classes; a subset of highly informative features can be selected as those with weights above  <dig> . in the current study, we employed those  <dig> features under the assumption that the features useful for pixel-wise classification would be similarly useful in patch-wise classification of cancer. the feature values were calculated in a pixel-wise fashion for each 30-by- <dig> region, and each region r was then represented by the average value of the feature calculated over all pixels.

first-order statistical features
first-order features are statistics calculated directly from the pixel values in the image. these include the mean, median, and standard deviation of the pixels within a window size, as well as sobel filters and directional gradients. of these features, two were included in the subset: the standard deviation and the range of pixel intensities.

second-order co-occurrence features
co-occurrence image features are based on the adjacency of pixel values in an image. an adjacency matrix is created where the value of the ith row and the jth column equals the number of times pixel values i and j appear within a fixed distance of one another. a total of thirteen haralick texture features  <cit>  are calculated from this co-adjacency matrix, of which  <dig> were found to be highly discriminating: information measure, correlation, energy, contrast variance, and entropy.

steerable filter features
to quantify spatial and directional textures in the image, we utilize a steerable gabor filter bank  <cit> . the gabor filter is parameterized by frequency and orientation  components; when convolved with an image, the filter provides a high response for textures that match these components. we compute a total of  <dig> filter banks, of which  <dig> were found to be informative, from a variety of frequency and orientation values.

evaluation of training set performance via probabilistic boosting trees
evaluation of  is done by testing the trained classifier's accuracy. to avoid biasing the results, we wish to use a different classifier than  for evaluation; a probabilistic boosting tree   <cit> , denoted , is employed. the pbt combines adaboost  <cit>  and decision trees  <cit>  and recursively generates a decision tree where each node is boosted with m weak classifiers. the classifier output, , is the probability that sample r belongs to the target class. the pbt is used to classify an independent testing set ste  via area under the receiver operating characteristic curve  and classifier accuracy. the hard classification for r ∈ ste is denoted as:

  t˜t=1if t˜t>θ0otherwise, 

where θ is a classifier-dependent threshold. for region r, the ground truth label is denoted as , where a value of  <dig> indicates class ω <dig> and  <dig> indicates class ω <dig>  the resulting accuracy at iteration t is denoted as:

  at=1|r|∑r1if g=t˜t0otherwise. 

we generate receiver operating characteristic  curves by calculating the classifier's sensitivity and specificity at various decision thresholds θ ∈ { <dig>  ..., 1}. each value of θ yields a single point on the roc curve, and the area under the curve  measures the discrimination between cancer and non-cancer regions. the accuracy can then be calculated by setting θ to the operating point of the roc curve. again, it should be noted that it is possible to evaluate the performance of the training set using any supervised classifier in place of pbt. a previous study  <cit>  used both decision trees  <cit>  and svms  <cit>  as supervised evaluation algorithms in an al training experiment, and found that the trend in performance for both algorithms was similar. in this study we implemented pbts because the algorithm was different from , which avoids biasing results; however, alternative evaluation algorithms could certainly be employed.

although the classifier performance values may change, the goal of these experiments is to show that the performance of an actively-learned, class-balanced training set is better than a randomly generated unbalanced set.

list of experiments
we perform three sets of experiments to analyze different facets of the active learning training methodology.

experiment 1: comparison of cbal performance with alternate training strategies we compare the performance of cbal with four alternative training strategies to show that cbal training will yield a classifier with greater performance versus a training set of the same size trained using an alternative method.

• unbalanced active learning : the class ratio is not controlled; eligible samples  determined via al are randomly annotated and added to .

• class balanced random learning : all unlabeled samples in str are eligible for annotation, while holding class balance constant as described in minclassquery.

• unbalanced random learning : all unlabeled samples are queried randomly. this is the classic training scenario, wherein neither class ratio nor informative samples are explicitly controlled.

• full training : all available training samples are used. this represents the performance when the entire training set is annotated and available .

in random learning , all samples in the unlabeled pool str are "eligible" for annotation; that is, se = str. in unbalanced class experiments, the minclassquery algorithm is replaced by simply annotating k random samples  and adding them to . the full training strategy represents the scenario when all possible training data is used.

the classifier is tested against an independent testing pool, ste, which  is selected at random from the dataset at the start of each trial. in these experiments, t =  <dig>  the confidence margin was τ =  <dig> , and the number of samples added at each iteration was k =  <dig>  in the balanced experiments, . a total of  <dig>  image regions were used in the overall dataset, drawn from the  <dig> images in the dataset;  <dig>  regions were randomly selected for ste, and  <dig>  for str in each of  <dig> trials. the regions are assumed to be independent samples of the overall image space due to the heterogeneity of the tissue and appearance of disease. because the goal of classification is to distinguish between cancer and non-cancer regions of tissue rather than individual patients, the training and testing was drawn randomly from the overall pool of available regions. the true ratio of non-cancer to cancer regions in str was approximately 25: <dig> . a total of  <dig> trials were performed, with random selection of str and ste at the beginning of each trial.

experiment 2: effect of training set class ratio on accuracy of resulting classifier to explore the effect of training set class ratio on the performance of the resulting classifier, the cbal methodology was used, setting k =  <dig> and varying  and  such that the percentages of the training set consisting of minority samples vary from 20%  to 80% . each set of parameters was used to build a training set, which in turn was used to build a classifier that was evaluated on the same independent testing set ste.

experiment 3: comparison of cost model predictions with empirical observations at each step of the al algorithm, we estimate nt for obtaining balanced classes as described in section  <dig>  the goal of this experiment was to empirically evaluate whether our mathematical model could accurately predict the cost of obtaining balanced classes at each iteration, and could thus be used to predict the cost of classifier training for any problem domain. for these calculations, we set the initial class probability p <dig> =  <dig> , based on the observations of the labeled data used at the beginning of the al process. additionally, we set the desired sample numbers to correspond with the different class ratios listed in experiment  <dig>  from 20% minority class samples  to 80% . the aim of this experiment was to investigate the relationship between the cost of a specific class ratio and the performance of >.

RESULTS
experiment 1: comparison of cbal performance with alternate training strategies
examples of confidence or likelihood scenes generated by  are shown in figure  <dig>  obtained at iteration t =  <dig> . figures  <dig> and  <dig> show images with benign regions marked in red boundaries and cancerous regions in black. figures  <dig> and  <dig> show the confidence scenes obtained via the cbal training strategy, and  and  are obtained via cbrl training. high intensity regions represent high classifier confidence that r ↪ ω <dig>  while dark regions indicate confidence that r ↪ ω <dig>  in both cases, the cbrl training fails to properly find the cancer regions, either returning large numbers of false positives ) or failing to fully identify the cancer area ). this difference  is most likely due to the inability of random learning to accurately define the classes, given the small training set size. thus, given the constraints on training set size, a cbal-trained classifier can out-perform a randomly-trained classifier.

quantitative classification results are plotted in figure  <dig> as accuracy ) and area under the roc curve ) as a function of the number of training samples in the set  for  <dig> ≤ t ≤  <dig>  in each plot, the "full" training set corresponds to the straight black line, cbal is the red triangle line, cbrl is a black dashed line, ubal is a green squared line, and ubrl is a blue circled line. note that the "full" line indicates the maximum achievable classifier accuracy for a given training set; thus, the closer a training set gets to the straight black line, the closer it is to optimal performance.

the auc values for cbal approach the full training with  <dig> samples  while cbrl, ubrl, and ubal have approximately  <dig>  lower auc at those sample sizes. accuracy for cbal remains similar to other methods until t =  <dig>  at which point cbal out-performs other methods by approximately 3%. cbrl, ubrl, and ubal do not perform as well as cbal for the majority of our experiments, requiring a larger number of samples to match the accuracy and auc of cbal.

experiment 2: effect of training set class ratio on accuracy of resulting classifier
experiment 3: comparison of cost model predictions with empirical observations
while it may seem from figure  <dig> that the strategy yielding best performance would be to over-sample the minority class as much as possible, we also plotted the empirical cost values nt for each of the class ratios from experiment  <dig> in figure  <dig>  we find that as the percentage of the minority class increases, the cost associated with each iteration of the al algorithm also increases. this is due to the fact that as the minority class is over-sampled, more annotations are required to find additional minority samples. while there is some increase in accuracy by over-sampling the dataset, the annotation cost increases by an order of magnitude. thus, the optimal strategy will need to balance the increase in accuracy with the constraints of the overall annotation budget.

CONCLUSIONS
in this work we present a strategy for training a supervised classifier when the costs of training are high, and where the minority class problem exists. our strategy, class-balanced active learning , has the following characteristics:  active learning  is used to select informative samples for annotation, thus ensuring that each annotation is highly likely to improve classifier performance.  class ratios are specifically addressed in this training strategy to prevent the training set from being biased toward the majority class.  a mathematical model is used to predict the number of annotations required before the specified class balance is reached. we applied these techniques to the task of quantitatively analyzing digital prostate tissue samples for presence of cancer, where the cbal training method yielded a classifier with accuracy and auc values similar to those obtained with the full training set using fewer samples than the unbalanced al, class-balanced random learning, or unbalanced random learning methods. our mathematical cost model was able to predict the number of annotations required to build a class-balanced training set within  <dig> annotations, despite the large amount of variance in the empirically observed costs. this model is critical in determining, a priori, what the cost of training will be in terms of annotations, which in turn translates into the time and effort expended by the human expert in helping to build the supervised classifier. we found that by specifying class ratios for the training set that favor the minority class , the resulting classifier performance increased slightly; however, the cost model predicted a large increase in the cost of training, as a high percentage of minority class samples requires more annotations to build. thus, an optimal training strategy must take into account the overall training budget and the desired accuracy.

some of the specific findings in this work, such as the observation that over-representing the minority class yields a slightly higher classifier performance, may be specific to the dataset considered here. additionally, the observation that the al algorithm has a large amount of variance in the empirically-observed costs  indicates that the eligible sample set is unpredictable with respect to class compositions. this behavior may not necessarily be duplicable with different datasets or al strategies, both of which will yield eligible sample sets with different class compositions. additionally, we do not claim that our choice of al algorithm , our weak classification algorithm , or our evaluation classifier  will out-perform the available alternatives. however, by combining al and class balancing, we have developed a general training strategy that should be applicable to most supervised classification problems where the dataset is expensive to obtain and which suffers from the minority class problem. these problems are particularly prevalent in medical image analysis and digital pathology, where the costs of classifier training are very high and an intelligent training strategy can help save great amounts of time and money. training is an essential and difficult part of supervised classification, but the integration of al and intelligent choice of class ratios, as well as the application of a general cost model, will help researchers to plan the training process more quickly and effectively. future work will involve extensions of our framework to the multi-class case, where relationships between multiple classes with different distributions must be taken into account.

authors' contributions
sd processed the dataset, developed the training algorithm and cost model theory, ran the experiments, analyzed the results and wrote the manuscript. jm assisted with developing the training algorithm and cost model theory, as well as writing the manuscript. jt and mf provided the dataset, as well as annotations and medical insights into the data. am directed the research and the development of the manuscript. all authors have read and approved the final manuscript.

