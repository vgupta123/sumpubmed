BACKGROUND
comparison and alignment of primary structures has become the prime tool for protein sequence analysis  <cit> . comparative analysis of primary structures of amino acids can reveal useful information regarding the structure and function of proteins. many algorithms therefore have been developed and databases designed to search for similar proteins, but most of them are based on character-matching techniques. in this technique, the amino acids are considered to be distinct characters.

however, there are certain limitations of character based similarity measure approaches that cannot allow insights in the structural aspects of the protein. though two sequences with a high character based similarity are expected to depict similar structures and show close biological functions, the reverse is not always true. instances have been found where structurally closely related sequences do not provide good character based similarity measure  <cit> . two protein sequences with low sequential identity may show similarities in their physiochemical properties, tertiary structure and biological activities. there could be many reasons for this observation. the one most widely hypothesized is that nature sometimes retains the biological functions but changes the amino acids as the protein evolves. also, most of the times, researchers are interested in the active site of the protein, and not its overall backbone structure. the active site may occupy just a small part of the overall protein, therefore it is important to capture the structure and local variations in properties of amino acids at a certain location. overall similarity score based on character matching may not be able to capture the local similarities, particularly if the amino acids differ in the location but provide similar overall structure.

many algorithms have been developed based on character based similarity, though differing in their approaches. blast attempts to fragment protein sequences and establishes matches between them using substitution matrices for thresholds. psi-blast  <cit> , an extension to blast  <cit> , uses similarity matrices  based on specificity of position of an amino acid, and is probably the most widely used sequence similarity tool. all blast algorithms are based on consideration of sequences as long strings of alphabets. in addition, various heuristics are employed based on biological observations as extensions to purely character based approaches. similarly, fasta  <cit>  algorithms using optimized gap penalties are used to find homologous sequences from protein databases. ssearch  <cit>  engine implements smith-waterman  <cit>  algorithm, an extension to the n-w algorithm  <cit>  for establishment of protein similarity. pride  <cit>  establishes similarity score by considering cα - cα distances between residues separated within a threshold of amino acids. an interesting holistic approach to protein alignment developed by taylor and orengo  <cit>  present an algorithm that considers structural aspects inducing hydrogen bonding like solvent exposure, torsion angle apart from the traditional character based methods, and does indeed presents appreciable alignments for proteins with low sequence similarity. tonges et al.  <cit>  presents a general method for sequence alignment based on conventional dynamic programming and building of secondary matrices by their results. however, it works best for highly homologous sequences and therefore is of not much use for less homologous sequences. double dynamic programming approach, an interesting extension to the n-w  <cit>  algorithm is used to increase the accuracy in multiple sequence alignment by tailor et al.  <cit> . t-coffee  <cit>  also shows appreciable enhancement in accuracy over traditional alignment methods by prearchiving of alignment information. chain  <cit>  uses monte carlo optimization of a hidden markov model to establish gapped alignment of primary structures. a whole range of clustal  <cit>  softwares are available for protein alignment customized for specific needs and available resources. further, machine learning approaches  <cit>  have been used to improve the similarity searches. pearson  <cit>  and shpaer et al.  <cit>  provide an extensive review and comparison of the existing tools for searching primary protein sequence databases. however, the algorithms fail to extract subsequences that are not identical in characters but share common secondary structure. in all of the above, similarity is very closely related to identity except while incorporating discrete properties like acidic, basic, aromatic to which an aligned amino acid may belong to.

non character based approaches to establish similarity between polypeptides have also been tried with limited success like by capturing the repetitions of amino acids by considering sequences in the frequency domain using the acclaimed fast fourier transformation  <cit> . various repeats in the protein sequences can be adequately captured by using fft and its various versions, but we lose the sequence information in such attempts.

most of the algorithms for similarity detection are primarily alignment tools and are based on string managements of protein sequences that are considered as words of  <dig> characters. the algorithm presented here attempts to remove this limitation by considering the properties of the amino acids and also their variation directly during matching of sequences. our approach is inspired by a few recent researches in the field of music retrieval and the commercial success of music database and retrieval systems  <cit>   based on the spectral analysis of audio signals. we have attempted to use the ideas in the field advantageously along with the traditional methods to adapt to protein sequence similarity estimation. since the mdrs have been commercialized, new algorithms and heuristics may not be available in the public domain. the developed algorithm is capable of evaluating similarity based on any or a combination of the  <dig> attributes listed down in the aa index database  <cit>  and is intended to detect local variations in the property in the sequence along with global alignment. we present this method as an extension to traditional character based matching algorithm.

RESULTS
the algorithm was coded, with sz and f kept as variable parameters. a single property, i.e. hydrophobicity  <cit>  was taken as the property, f is kept more than twice the sz so that no information is lost while the neighborhood around the highest peak is considered. βp, the penalty factor can be changed to accommodate the parameters and can be tuned to consider the 'not so similar' segments in the sequences. the threshold for selection of subsequences of size  <dig> amino acids with β =  <dig> , was kept as a function of the actual character identities in the subsequences. the threshold t was taken as sss < =  <dig>  - n *  <dig> , so that if there is no character identity, subsequence matches with sss < =  <dig>  were looked for. this non-fixed threshold function was evolved as matchings with high character identity did produce low matches, but the "interesting" matches are typically the ones with low identity of amino acids. a detailed analysis of the matching presents subsequences that are alphabetically dissimilar, and are therefore not detected by traditional algorithms, but share common 3d structures.

 <dig>  various branches of the evolutionary tree of human kinome  <cit>  were generated by tree-generating algorithm, after finding the distance measure for various kinases. as an illustration, when closely related kinases , pak <dig> , pak <dig> , pak <dig>  and a distant neighbor plk <dig>  are run through the automation of the algorithm, expected results are obtained . this establishes the global alignment capability which is due to the dynamic programming algorithm. similarly evolutionary relationships were found for the pkc series of human kinases  with f doubled. the global alignment capability does not seem to be dependent on the f measure significantly.

 <dig>  pkcd : 1bdy) and pkce   human kinases are considered as evolutionarily similar but do not produce close alignments . the algorithm was able to identify many subsequences that are not identical but share close secondary structure similarity. results are tabulated in table  <dig> alongwith the alignment found in blast. also, results are compared with those of smith-waterman algorithm  <cit> , using the standard software called ssearch  <cit> . in both the cases, it was seen that sss was able to identify subsequences that are alphabetically dissimilar but gives low sss scores, but are structurally similar. the value of segment size sz was kept  <dig> and f  <dig>  the tertiary structures of the subsequences within the threshold were found to be closely similar using swiss pdbviewer   <cit> . the references of the figure showing alignments are given in each row in table  <dig>  the alignments shown is between the subsequences by a simple "magic fit" in spdbv using the actual pdb files of the proteins, and most of the fits obtained for sss within the threshold validate our results. therefore, it is possible that even when the subsequences have complete identity, they may theoretically not fit at all in the actual protein owing to the non-alignment of other regions.

pkcd and pkce, though share a similar fold, do not superimpose well using spdbv but our experiments suggest that the subsequences picked up by sss within the threshold do produce good fits with low rms  value apart from their similarity in the secondary structure . figure  <dig> shows the fits obtained using spdbv for subsequences that were picked by the algorithm with the exception of figure  <dig> which reported a high sss value, and also has reported a high rms value during pdb fitting. matches found with high character identity are not shown in the table, but in general their sss value is lower which is taken care of by the threshold. this demonstrates that the algorithm's ability to pick non identical subsequences if they are similar in their tertiary structure. the accounting of subsequences through sss that are found below threshold would increase the blast similarity score by more than 10% in this particular example and more than 5% in most other protein pairs. however, the potency of the algorithm essentially remains in capturing "interesting" subsequences and not perse at global alignment.

 <dig>  sss consistently was found to capture subsequences with similar secondary structures, and most of the times with similar tertiary structures purely by the primary structure. in xyna-psefl  and xynz-clotm chain a  we found interestingly subsequences that do not get aligned in blast but still show similar tertiary structures using the algorithm. table  <dig> shows subsequences that are not aligned in blast and do not share sequential similarity but are similar in tertiary structures as seen through their pdb coordinates. similar conclusions can be drawn by comparison with the results obtained by smith-waterman algorithm. ssearch engine was used for comparative analysis. this strongly suggests the potency of the algorithm to even find non aligned subsequences that are structurally similar and renders sss as a useful test after traditional alignment algorithms. this seems to be a result of the inadequacy of the simplistic dynamic programming approach compared to blast which is a better alignment tool, but depicts that sss with better alignment tools as an abstraction  can be used effectively for finding alignments between proteins where homology is not detected using traditional algorithms.

 <dig>  the algorithm was run on xyna-theau  and xynz-clotm chain a  and compared with the results from blast. subsequences that were found to be matching with large distance values  were looked for their secondary structures. appreciable similarity in secondary structures were reported though alignment was not perfect . figures  <dig> shows the fits obtained for the individual subsequences picked by the sss using spdbv. xyna-theau and xynz-clotm are abound in h , but the algorithm is able to catch the subsequences where for short duration β strands were located within two bends and align them with a similar stretch in the other sequence. it must be considered, that interesting results may be expected by the algorithm  only when the distance value d is not very small, and a micro analysis of the matching segments may produce results that are unobtainable otherwise.

 <dig>  xyna-theau  and xyna-strli  when run over by the algorithm also produced subsequences that were dissimilar in characters but highly similar in their overall structure. in table  <dig>  subsequences  <dig> and  <dig> were completely dissimilar sequences but were obtained by the algorithm and were found to be very similar in their tertiary structure with very low rms values. both the subsequences produce α helical structures.

this illustrates the chief advantage of the algorithm, wherein not only direct character alignment but similarity between subsequences is captured. analysis in the spectral domain after conversion to an orthogonal plane of property using fft allows sss to establish similarity where traditional character based algorithm may not succeed. this holds true for blast and many other algorithms based on a similar approach. though, essentially sss is suited for detailed analysis of sequences in a locality and can be wrapped over by other global alignment tools , but within the locality it scores over other algorithm due to its emphasis on the local variation of the property besides the property itself. as has been demonstrated in the results, local variation of a group of properties can also have an effect on determining the structural and functional properties of the protein in a locality. therefore, it scores over even smith-waterman  <cit>  in the cases where alphabetical similarity is either low or does not exist. further, any purely character based similarity approach cannot capture the local variation of multiple properties in a local region. if two subsequences register an appreciably low sss score, and are sequentially different, it depicts the local variation of property  to be similar in both the subsequences, which might be of interest to the analyst. taking a greater frequency component  and subsequent analysis at such locations might give useful insight into the similarity pattern where character matching is not evident. the flexibility to use the algorithm with a healthy compromise between the frequency and position offers another advantage of the developed algorithm. further, other properties like α helical propensity, β strand propensity may be used in conjunction with hydrophobicity as different property planes.

CONCLUSIONS
we present a novel method to establish similarity between two amino acid sequences that goes further than the conventional character based similarity approaches and purely frequency based similarity approaches based on repetitions of amino acids. the algorithm derives its inspiration from spectral similarity approaches employed successfully in music database retrieval systems and attempts to establish similarity based on the spectral similarity score on any general attribute of amino acids. we have demonstrated that the approach is capable of picking subsequences of amino acids as similar though they may not be identical in nature. further, tertiary structures of these picked subsequences have shown appreciable similarity and fit, though the overall structure of the protein may not fit well. this demonstrates that the algorithm is capable of establishing similarity in tertiary structure purely by processing primary structures even when the primary subsequences do not match well. further, as sss is able to find even subsequences that do not align through blast or sssearch but are nevertheless similar, it can be used as a useful tool after operation by traditional alignment algorithms. further, sss without dynamic programming can be used to pick a subsequence of interest from a corpus of subsequences that alignment algorithms would fail to achieve.

a distinct advantage of the algorithm is its ability to detect subsequences that are not similar in characters but in the property under consideration, and even in the profile of the local variation of the property in a localized region. therefore, it is able to establish similarity in those subsequences where character based similarity is not possible to establish. the algorithm is flexible and allows alteration of size of subsequences as powers of  <dig>  if fft is replaced by other fourier transformation algorithm  then this constraint on the size of the subsequence may also be eliminated. another advantage of the algorithm is its ability to encode any property of the amino acids as given in the aaindex database. therefore different indices may be used in different contexts to establish similarity in function, fold, structural, or evolutionary or superfamily relationships. these indices may be normalized to compare the results from different indices. further, multiple properties may be handled at a time either by generating property profiles in different planes or by creating a new property as a linear combination of multiple properties. effects of such extensions are currently being explored.

the dynamic programming approach can be replaced by other approaches used in character based similarity establishment with suitable modifications. smith-waterman algorithm performs an exhaustive search of all possible gapped alignments between a pair of sequences using a set of scoring parameters, and therefore can be used more effectively with sss. it is noteworthy, that though there are frequency conversion mechanisms other than fft, but the latter is a linear time algorithm and is therefore, faster. if smith-waterman algorithm is used as a wrapper for an exhaustive search of gapped alignments , usage of fft would become critically important. penalty, windowing and normalization parameters may be further tuned to get better depth in the results. histograms can be generated for a better visualization of similarity and to avoid detailed analysis of the sss results. color coding of alignment, as done in blast, can be employed and algorithms used in mdr may be used in filtering and linearity enforcing. this approach, we believe, can be used in many fields in bioinformatics to establish similarity. this algorithm can be effectively used to find similarity in genomes after suitable estimation of the parameters, and can also be used to find similarities in the 3-dimensional structures of proteins by using variations in relatively accessible surface areas of proteins.

