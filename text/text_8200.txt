BACKGROUND
transcriptional regulation of genes is controlled largely through the concerted action of combinations of cis-regulatory sites in the promoters and surrounding regulatory dna of genes. the interactions between cis-regulatory sites can be complex and may include synergistic  <cit> , competitive  <cit> , and amplifying  <cit>  interactions, and are often influenced by the spacing and orientation of the sites relative to each other and to the transcriptional start site  <cit> . the complexity of the "cis-regulatory code" makes predicting gene expression from promoter sequence a challenging problem.

computational approaches for determining the cis-regulatory code include multiple regression models  <cit> , bayesian networks  <cit> , logic operators  <cit> , and machine learning methods  <cit> . though their mathematical frameworks differ, all of these approaches use large-scale transcriptional data  and attempt to correlate expression patterns with the presence or absence of computationally predicted cis-regulatory motifs. currently, we do not have good ways to compare the performance of these different approaches to each other or to new approaches being developed. a serious problem in comparing these methods is the lack of robust test data in which the cis-regulatory interactions underlying the expression data are accurately known. we need data in which the "true" answer is known if we are to compare methodologies. to address this limitation, we built a rule based simulator to create test data sets.

simulators are playing a useful role in reconstructing gene regulatory networks . a grn models the regulatory connections between genes, as opposed to the interactions between cis-regulatory sites in a promoter. because the true grn of a cell is not known, artificially created grns are used to evaluate the accuracy of algorithms that attempt to determine network architecture and dynamics  <cit> . grn simulators provide test datasets  <cit> , which in turn are used to assess the performance of network reconstruction techniques  <cit> . we anticipate that gene expression simulators will play a similar role in the development of computational approaches to decipher the interactions between cis-regulatory sites.

we present a regulatory rule simulator that generates random promoters and produces expression data based on user-defined interactions between cis-elements. whereas a grn simulator attempts to create a web of genes connected in a biologically relevant manner, our simulator generates promoter regions and predicts the expression from those promoters. we also present test datasets, created by the simulator, which can be used to assess the performance of algorithms that attempt to determine underlying regulatory rules. the promoter generator and simulator, named relos , are available for download  <cit>  . a web interface  <cit>  is also available. the test data sets are available in additional file  <dig> 

RESULTS
simulating regulatory rules
gene expression simulations using relos are divided into discrete steps . the user first specifies the number of cis-regulatory sites that will be part of the simulation. next, the user creates a rule set that defines the interactions between cis-regulatory sites and their effects on gene expression. relos then generates a set of promoters consisting of random combinations of these cis-regulatory sites. finally, the expression of each promoter is determined by applying the rule set to each promoter sequence. the simulator outputs a list of promoter sequences with their corresponding expression values. at every step, the user may specify parameters to customize the simulations

with relos a user can encode a wide variety of cis-regulatory rules. the rules are defined in an xml simulation file to make the attributes of the simulation, including the rules, legible to the user. a single rule in a rule-set is defined by the cis-regulatory sites involved, the conditions required by the rule, conditions excluded by the rule, context dependencies for each condition, and the output expression generated by that rule. logical relationships such as or, not and and can be expressed in describing interactions between sites. constraints on the spacing, orientation, and distance of sites from each other can be incorporated into any rule. rule outputs may be combined in linear and non-linear ways . a rule may simply specify the additive contribution of a particular regulatory element, or it may determine the parameters of an epistatic  interaction between elements. promoters are parsed by each rule in the order in which the rules are specified. when a rule matches a promoter, however, that rule may specify a set of rules which should be skipped in the analysis of the matched promoter.

promoter processing by rules is delegated to the "analyzer". the analyzer is responsible for determining whether a rule will affect a promoter, based on the constraints specified for the rule. the analyzer is also responsible for specifying the effect of a rule on the expression of a promoter. analyzers serve as the central point of extensibility in relos. for each rule, it is possible to specify a custom analyzer. relos comes with a regular expression analyzer, which modifies promoter expression if the regular expression is matched. another analyzer allows user-defined mathematical functions to be used to determine rule outputs. for example, a hill function  <cit>  might be used to describe cooperativity between sites. the flexibility inherent in the design of relos allows users to simulate virtually any mode of regulation among cis-regulatory sites.

real expression data are bounded. at the lower bound, a cell cannot express less than zero copies of a gene. there is also an upper limit of detection in any experimental setup and to the levels of rna that can be produced when a promoter is fully occupied by the transcriptional machinery and transcribing at the maximum rate. these constraints produce sigmoid expression patterns. for this reason, relos allows users to sigmoidally transform the output data. users may explicitly tell relos to transform the data. in this case, relos uses a sigmoid transformation centered on the average expression for the simulation . using the simulation expression mean to center the transformation allows rule-sets to be compared in terms of the variation present in the parsed promoters. simulations with large variance will show a spread of values between zero and one. simulations with little variance will, when transformed, cluster around the value of  <dig> . one consequence of the mean-dependent transformation is that it is impossible to generate a transformed dataset in which all expression is either "on" or "off" since datasets with very little variation will result in midline expression when transformed. users may therefore specify a rule at the end of the pipeline employing a custom analyzer to transform the data. relos comes with a sigmoidaltransform analyzer  that can be used for this purpose, but users may also provide their own transformations. the sigmoidaltransform analyzer uses four parameters  to adjust the shape and scale of the transformation. these parameters are independent of the simulation dataset and determine an absolute scale of expression onto which all rule-sets are mapped. by using a consistent set of parameters, users can compare rule-sets with regard to their strength of expression and compare variances according to where the mean lies in the absolute expression scale. since this transformation does not depend on the dataset, the absolute scale is arbitrarily determined by the choice of parameters and users should be careful to use rules consistent with the scale determined by the parameters.

in addition to rules, their analyzers and constraints, and transformation parameters, the xml simulation file contains other adjustable attributes for the simulation. for example, after the promoters have been interpreted using the current rule set, gaussian noise is added by the simulator with a user defined standard deviation. relos is also capable of generating random promoters based on user-defined properties, such as promoter length, cis-regulatory elements and their frequencies and outputting promoters in either fasta or relos format. these synthetic promoters can be used directly by the simulator. for more details, see methods.

examples of simulated datasets are shown in figure  <dig>  as a visual aid to interpret the output of the simulations, histograms illustrating the distribution of expression values are shown. figure 2a shows the distribution of expression values for  <dig> fixed-length random promoters consisting of variable numbers of a single type of cis-regulatory activator site and neutral spacer elements, where all elements are equally probable. the expression is therefore a reflection of the distribution of the activator element. relos outputs the expected poisson distribution for expression. figure 2b shows the results from an activator-repressor combination. because expression is now a function of two inputs, it follows the expected gaussian distribution. figure 2c shows the results from a synergistic rule set, with noise at 5% of the expression level. in this simulation, each element has a small additive effect on expression individually, but when both regulatory elements are present in the same promoter, a large expression effect is observed. as expected, the result of the simulation is a bimodal distribution, where the second peak represents promoters containing both regulatory elements. figure 2d shows the output of a cooperative interaction, modeled by a hill function. a hill function is a transition function of the form:

 y=xn 

where x is the input and Ï• and n are parameters used to adjust the location and steepness of the transition. hill functions have been used to model biological cooperativity in proteins such as hemoglobin  <cit>  and in cis-regulatory interactions  <cit> . in figure 2d, x is the number of cooperative elements, n is  <dig>  and Ï• is  <dig>  since the expression is a function of the number of a-elements, and the number of a-elements is distributed according to the poisson distribution, the expression pattern should be a function of a poisson distribution. as expected, the simulator output in figure 2d follows a poisson distribution with an elongated right tail. this tail represents the high expression of promoters with multiple cooperative sites. see additional file  <dig> for the rule-sets used to create figure  <dig> 

test datasets
the main motivation for creating the simulator was to synthesize expression datasets for which we know the underlying regulatory rules. these datasets will be necessary to compare the accuracy of different methods that infer cis-regulatory rules because there are no experimental datasets for which the true underlying relationships between cis-regulatory sites are known. we therefore created ten test datasets using different rule-sets. the test datasets vary in the number and types of rules and in the complexity of the rule-set. we have made the datasets and rule sets used to generate them  available in both relos format and fasta format. we anticipate that the availability of test datasets will allow researchers to evaluate their own methods and compare their methods against commonly used algorithms that deduce regulatory rules from expression data. while the test data we provide will be useful for researchers who want to get started right away testing their rule-finding algorithms, we emphasize that the real power of relos is the capability it provides to quickly produce custom data sets for algorithm testing. researchers can now rapidly create their own test datasets to compare the dependency of any method on any particular parameter .

comparison to experimental data
we simulated the expression of five different regulatory modules comprised of  <dig> yeast genes described in beer and tavazoie  <cit> . a classification tree was constructed to place each gene into its correct module based on the presence or absence of different regulatory elements. overall, 80%  of the promoters were placed into their original module. we then created a rule set based on the classification tree which incorporated "and", "or", and "not" logic. this rule set was used to simulate expression values for each gene in each of the  <dig> conditions reported in beer and tavazoie . the results of the simulation and the observed expression values are shown in figure  <dig>  the median gene-wise correlation coefficient between the simulated and experimental expression was  <dig> , illustrating that simulated data closely matching observed data can be produced with relos. these results show that relos can discriminate between promoters and create biologically relevant data sets.

one noticeable discrepancy between the relos data and the beer and tavazoie data was the noise function. relos uses gaussian noise, scaled by the noise-less expression value. this results in a smaller absolute level of noise around expression values close to zero. the beer and tavazoie data does not appear to follow this trend; the absolute level of noise around zero is still quite large. accordingly, we wrote an unscaled noise analyzer that applies unscaled gaussian noise to simulated data.

we also used the same rule sets defined above to analyze relos-generated promoters. randomly generated promoters were created based on the frequency distributions of the cis-regulatory sites that comprised the five modules we simulated. when the rule set was applied to these computationally derived promoters the five expression patterns from beer and tavazoie were again recapitulated . randomly generated promoters, filtered through relos, faithfully replicate the observed expression patterns in real data.

CONCLUSIONS
we sought to create a tool that simulates expression from promoters based on cis-regulatory logic. because there are examples of additivity, synergism, cooperativity, and competition between regulatory sites we created ways to simulate these interactions in a straightforward manner. the full spectrum of interactions between regulatory sites is not known. we recognize that our knowledge of cellular regulation is still relatively limited and that new types of interactions may appear. we therefore did not want to be limited by preconceived models. with its rule-pipeline and analyzer plug-in architecture, relos allows for virtually any regulatory model to be implemented.

the ease of specifying regulatory models and the speed with which data can be generated will allow algorithms that predict gene expression from promoter sequence to be comprehensively tested. algorithms that attempt to determine regulatory logic rules from expression and sequence data can be analyzed for their performance with respect to noise, the number of underlying rules, and the complexity of the interactions between the rules. furthermore, researchers can study the size of the dataset required for an algorithm to recapitulate the rules and the ability of the algorithm to recapitulate the specified rules, as opposed to alternate rule sets which also correlate with the data. we have used relos to generate a test dataset for use in such studies. we anticipate that the ability to rapidly generate unlimited quantities of simulated expression data will speed the design and comparison of algorithms to decode the cis-regulatory logic that underlies real patterns of gene expression.

the final arbiter of the performance of cis-regulatory rule-finding algorithms will be how well they capture the trends in real data. algorithms that perform well on synthetic data sets, such as those produced by relos, will not necessarily perform well on biological data. because experimentally derived data is still of limited quantity and variable quality, extensive testing on synthetic data is the best way to understand the strengths and limitations of specific rule-finding methods. testing and training on synthetic data avoids over fitting rule finders on the limited quantities of real data that are now available. testing rule-finding methods on synthetic data sets will clearly be one of the paths forward on the way to decoding the interactions between cis-regulatory sites.

