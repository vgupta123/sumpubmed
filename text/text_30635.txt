BACKGROUND
identifying the genetic causes of common diseases has long been an important research area in genetics. where early studies were limited to studying few genes at a time, due to economical and technological constraints, development in genotyping technology has revolutionised the field. it is now cost effective to obtain hundreds of thousands of genotype markers in thousands of individuals for a single study. this makes it possible to scan the entire genome for disease associated markers in a single analysis and such genome-wide association studies have recently lead to a virtual flood of newly discovered disease genes  <cit> .

most studies search for disease association through a marker-by-marker approach where each marker in turn is tested for association to the disease phenotype, e.g. using a simple fisher's exact test or a χ2-test. however, a marker by marker approach is limited in statistical power due to the indirect testing for association, where so called "tag snps" are used as proxies for unobserved markers, but by using multiple markers, this problem can be alleviated  <cit> . a tradeoff must be made between method sophistication and computation efficiency when developing multi-marker approaches, however.

the haplotype pattern mining method is a multi-marker approach introduced in  <dig> by toivonen et al.  <cit> . it is based on the idea of extracting local haplotype similarities and locating areas where haplotypes are correlated with the disease phenotype. compared to methods based on statistical sampling  <cit>  hpm is computationally much more efficient, similar to other heuristic approaches  <cit>  capable of analysing genome-wide datasets. in this paper, we develop a faster version of hpm and show that it scales to genome-wide association studies.

methods
the goal of association mapping is to find disease-predisposing regions of the genome. this can be done by looking for differences in the frequency of genetic variants between cases and controls. since genome sequencing is expensive the whole genomes of the case and control individuals in a case-control study are usually not sequenced. instead only single base pairs that are known to frequently differ between humans, called snp markers, are sequenced.

the association mapping problem
if k snp markers are typed then we can represent a chromosome by a haplotype vector h of length k, where h =  and hi ∈ alleles for all i,  <dig> ≤ i ≤ k; alleles is the domain of the ith marker. the input to an association mapping method then consists of a set a = {a <dig> ..., ap} of disease-associated haplotypes and a set c = {c <dig> ... cq} of control haplotypes.

haplotype pattern
a haplotype pattern p over k markers is a vector , where pi ∈ alleles ∪ {*} for all i,  <dig> ≤ i ≤ k, where * is the "dont't care" symbol. the haplotype pattern occurs in a given haplotype vector  h =  if either pi = hi or pi = * for all i,  <dig> ≤ i ≤ k. the length of a pattern is defined as the maximum distance between two non-"*" characters in the pattern. gaps are subsequences of "don't care" symbols in a pattern that are surrounded by non-"*" characters on both sides. since long patterns are not likely to exist we only want look at a subset of the possible patterns. we call the patterns that we want to consider for legal patterns. a pattern is legal if the pattern length is less than the parameter l, it contains fewer than g gaps, and no gaps are longer than s.

strongly associated pattern
the signed χ <dig> measure ± χ <dig> of a haplotype pattern p is the standard χ <dig> measure where the sign is positive if the relative frequency of p is higher in cases than in controls, and negative otherwise. given a positive association threshold x, we say that p is strongly associated with the disease if ± χ <dig> ≥ x.

the hpm problem
given a set of case haplotypes a = {a <dig> ..., ap} and control haplotypes c = {c <dig> ... cq} the goal of the hpm algorithm is to find all strongly associated patterns that are legal.

localizing disease genes using hpm
haplotype patterns close to a susceptibility locus are likely to be more associated with the disease than patterns further away. if we have found all strongly associated patterns we can score each marker by counting the number of times that it is contained in a strongly associated pattern. the hpm point prediction is then the marker that is most frequently contained in the strongly associated patterns. fig.  <dig> shows an example of the localization of a validated susceptibility allele in the crohn's disease data set from the wellcome trust case-control consortium   <cit> .

old algorithm
the algorithm presented in  <cit>  recursively generates haplotype patterns using a depth-first-search strategy. to avoid looking at all possible patterns the algorithm prunes away parts of the search tree based on a lower bound on the number of disease-associated chromosomes that match a pattern.

some simple improvements can be made to this algorithm. as presented in the paper counting the number of affected and unaffected individuals that match the pattern in each call to depthfirst will take time o where n is the number of individuals and l is the length of the pattern. if we remember which individuals match the pattern at a given time then we only need to look through these when a new non-"*" symbol is inserted in the pattern. pseudo code for the algorithm with this improvement is shown in fig.  <dig>  the improvement greatly speeds up the algorithm.

new algorithm
the idea of the new algorithm is to exploit that ld structure means that you usually only see a handful of the 2n possible haplotypes if you look at n neighboring snps. instead of looking at all different haplotype patterns spanning a region we look at all combinations of haplotypes over the region. we search these haplotype sets in a depth-first-search but stop examining a branch if there is no legal haplotype pattern that could occur in all of the haplotypes in the current set.

induced pattern
given a set of haplotypes h <dig> ... hk the induced pattern of the set is the haplotype pattern that occurs in all of the haplotypes and contains fewest possible "*" symbols.

an induced pattern over a set of haplotypes that is not legal can sometimes be made legal by inserting extra "*" symbols if s >  <dig>  this happens if a pattern is illegal because it contains too many gaps but would become legal if two gaps were joined into one. if for example l =  <dig>  g =  <dig> and s =  <dig> then " <dig> *  <dig> * 0" is an illegal pattern because it contains more than g gaps. the pattern can however be made legal by substituting the "1" for a "*" yielding the pattern " <dig> * * * 0".

valid pattern
an induced pattern over a set s of haplotypes is said to be valid with regard to s, if the pattern occurs in all of the haplotypes in s but not in any of the other haplotypes found in the input data.

equivalent pattern
a haplotype pattern will split the set of individuals into those that match the patterns and those that do not. we say that two patterns are equivalent if they result in the same bipartitions of the set of individuals.

the algorithm
the new algorithm  looks at sets of haplotypes. it traverses all possible combinations of haplotypes by gradually expanding a set one haplotype at the time. if at any point the induced pattern of the current set of haplotypes cannot be made into a legal pattern by adding extra "*"-characters the current set is not expanded further. if a pattern is valid and strongly associated it is added to the output set along with all its equivalent patterns.

RESULTS
we have implemented both the old and the new algorithm in python using the snpfile library  <cit>  to read and store the input data. to evaluate the algorithms, we have used the crohn's disease data set from the wellcome trust case-control consortium   <cit> . this data set contains  <dig> markers in  <dig> disease affected individuals and  <dig> unaffected control individuals. we used the beagle  <cit>  program to phase the haplotypes and infer missing genotypes.

time vs. number of individuals
first we tested the running time as a function of the number of individuals. from the wtccc data we created test data by picking subsets of individuals, keeping the affected/unaffected ratio constant, and we then ran both algorithms on chromosome  <dig>  figure  <dig> shows the "wall time" of both algorithms for varying data sizes. both algorithms show a linear increase but with the original algorithm having the highest increment.

time vs. pattern length
an important parameter for the running time is the maximal allowed pattern length, l. figure  <dig> show the running time of the two algorithms as a function l, when analysing the full chromosome  <dig> from the wtccc data set. the running time of both algorithms clearly grows super-linear, but with the time for the new algorithm clearly growing slower.

time vs. haplotype diversity
since the time usage of the new algorithm depends on the number of different haplotypes over a region we expect it to use less time in regions with few distinct haplotypes and more time in regions with many distinct haplotypes. figure  <dig> shows the running time  and the number of haplotypes along chromosome  <dig> of the wtccc data: the plot on the left shows both the running time per marker  together with the number of distinct haplotypes starting in a given marker. figure  <dig> shows the running time for scoring a marker as a function of the number of unique haplotypes overlapping the marker.

the same dependency on haplotype diversity is not seen for the old algorithm , nor is it expected to be as the old algorithm does not depend on the number of distinct haplotypes seen in the data. instead, the running time could depend on the maximal score we see when scoring a marker, since this is the threshold used in the branch and bounds heuristic. from the data, however, we do not see a significant effect here.

genome-wide analysis
as the final comparison of the old and the new hpm algorithm, we compare the running time on the full crohn's disease data set. table  <dig> shows the time consumption of the two algorithms on each chromosome.

CONCLUSIONS
we have developed a new algorithm for the haplotype pattern mining method and shown that it outperforms the original algorithm on genome wide association data. as a function of the number of individuals or the maximal pattern length, both the new and old algorithm appears to have the same asymptotic running time, with the new algorithm having a significantly smaller time overhead.

the new algorithm is very sensitive to the haplotype diversity. the same is not the case for the old algorithm, but here the mean running time per marker is  <dig>  ±  <dig>  seconds  where for the new algorithm the mean running time per marker is  <dig>  ±  <dig>  seconds. it might therefore be worthwhile to use a hybrid algorithm where the new algorithm is used in areas with lower haplotype diversity and the old algorithm is used in areas with high haplotype diversity. if this would reduce the time usage on markers now taking more than  <dig> seconds to only  <dig>  the hybrid algorithm would spend  <dig>  ±  <dig>  seconds per marker.

competing interests
the authors declare that they have no competing interests.

authors' contributions
sb developed the algorithm and implemented the software. all authors designed the experiments. tm and sb draftet the manuscript. all authors read and approved the manuscript.

