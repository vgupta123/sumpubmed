BACKGROUND
bayesian inference using markov chain monte carlo  is today a common and trusted approach in molecular phylogenetics , and is used by phylogeny inference software such as mrbayes  <cit> , beast  <cit> , bali-phy  <cit> , prime  <cit>  and jprime  <cit> . a typical goal in phylogenetics is to determine evolutionary relationships, for a set of species or for genes of interest, but researchers may also be interested in other parameters, for example parameters related to substitution patterns or duplication/loss processes. an advantage with bayesian phylogenetic inference is that you can obtain posterior distributions of evolutionary parameters, conditional on your data, where the evolutionary parameters can be classified as discrete parameters  or continuous   <cit> . for phylogenetics, bayesian inference is often complicated by the continuous parameters’ dependency on discrete parameters such as trees, that due to their structure can have problems with mixing.

the output from mcmc, the trace, is a conditional sampling of unknown parameters, needing post-processing to yield the desired posterior distributions. users need to inspect the trace for possible non-convergence, estimate burn-in , assess mixing , and compute parameter statistics. post-processing can, however, be constrained by practical difficulties, in particular due to presence of both discrete and continuous parameters in the trace, and due to the need to manually extract useful information from mcmc runs, currently using multiple software . user-friendly interfaces supporting graphical and interactive parameter exploration currently has potential to improve.

when converged, mcmc samples are drawn from the underlying stationary distribution and the trace represents a sample from the posterior distribution of analyzed parameters. after removing burn-in samples, a converged chain displays little correlation between remaining samples, which also indicates good mixing. convergence is, in theory, guaranteed in mcmc if the chain is allowed enough iterations. however in practice, it is not possible to estimate how many iterations are needed, nor is it possible to determine whether the chain has converged. hence, heuristics are used to assess non-convergence and the initial “burn-in”. software like coda  <cit> , awty  <cit> , and tracer  <cit>  have support for this, and more, and for example mrbayes  <cit>  has a convergence diagnostic based on standard deviation of split frequencies built in. these heuristics analyze a single parameter of the chain at a time and the decision of convergence is, usually, left to visual analysis of the trace and the heuristic value proposed for the parameter. for example, tracer  <cit>  suggests the heuristic that the effective sample size   <cit>  is greater than  <dig>  for all parameters, as well as manual analysis of the trace to ascertain that the chain has indeed converged. please note that the recommendation/heuristic of ess greater than  <dig> by tracer does not have a theoretical justification or a systematic study to support it and using a sufficiently large ess for assessing convergence for high-dimensional mcmc is recommended by gong and flegal  <cit> . in the convergence analysis of large data sets, e.g., for genome-wide analysis, the manual inspection of convergence becomes a bottleneck and one would like to rely on automated non-convergence assessment and burn-in estimation based on multiple convergence diagnostics. therefore, we see a need for simplified large-scale convergence analysis.

there are several reasons to scrutinize individual traces. first, one may doubt automatic convergence/burn-in assessment, e.g., when different convergence diagnostics give contradictory assessments. second, there may be doubts regarding the mcmc proposals, in particular, when the sampled posterior distribution is multimodal and seemingly converged multiple runs provide very different samples. third, there may be questions regarding mixing of an mcmc chain, e.g., when a trace is stuck in a local optimum for a long time and the proposal acceptance ratios of parameters are low. fourth, surprising results, e.g., when a new result contradicts previous studies, a trace should be scrutinized to establish that the mcmc has not behaved strangely. mixing of parameters is an important aspect of a successful mcmc run, in particular for phylogeny analysis where one wants to make sure that the tree posterior is sampled well. although trace statistics can give important indications, various visualizations are often needed to better understand the different aspects of a chain and its trace. we have experimented with visualizations that focus on trees and their relation to the trace, that we have not found in tracer, awty, and coda, and believe the community can benefit from them.

we present vmcmc, a tool for phylogenetic mcmc analysis, with support for analysis and exploration of chain convergence, burn-in estimation, trace visualization, parameter estimation, graphical display of parameter traces, which can run both as a command-line tool and as an application with a graphical user-interface .

implementation
vmcmc presents mcmc traces statistically and visually, and enables both automatic and interactive analysis. vmcmc also supports output from many popular mcmc programs, e.g., prime, jprime, beast, and mrbayes.

there are three use cases for vmcmc that may be of particular general interest: 

large-scale automated analysis: applying mcmc on genome-wide data, with perhaps hundreds or thousands of phylogenies to estimate, users typically make arbitrary burn-in decisions and, e.g., throw away the initial 25% of a trace. vmcmc can be used on the command line, easily integrated in scripts, and can be asked to estimate a burn-in, assess non-convergence, and estimate parameters automatically.


detailed trace exploration: when trying to understand a single mcmc trace, and decide whether it is plausible that it has converged, it can be illuminating to see where in a trace certain trees are found, determine majority rule consensus trees and other parameters for different parts of a trace, and have tree space visualized. vmcmc supports a high degree of interactivity for such exploration.


simultaneous handling of both real and tree parameters: currently, there is no software that simultaneously analyzes both tree and continuous parameters of a chain. the available mcmc analysis software either handle the continuous parameter  or the tree parameter  but not both simultaneously. vmcmc supports analysis of both types of parameters simultaneously and can, e.g., show the occurrence of a specific tree topology in the trace of a real parameter or show the effect of changing burn-in on both the real and tree parameter simultaneously.




features
like awty, tracer, and coda, vmcmc can also be used for graphical trace visualization, standard parameter statistics, and posterior distribution estimation. some features unique to vmcmc are given below: 

graphical trace visualization: vmcmc employs a user-friendly gui to display the trace of a selected real parameter, which helps in seeing trends for a particular parameter as well as visually inspect whether this parameter may have converged .
fig.  <dig> graphical trace visualization. the figure depicts the “graph” tab of vmcmc from analysis of a typical mcmc trace obtained from jprime by using tetrapod dataset “ds1” collected by hedges et al.  <cit> . the trace of the “dlrmodeldensity” parameter is shown, which appears to be converged  and also shows good mixing . the left panel shows the selected burnin, the parameter statistics after removing the burn-in, and convergence diagnostics from three standard methods. the panel also provides the option to zoom in to the trace by selecting a portion of the trace and then pressing the “extract interval” button to see the behaviour of a chain in the selected interval





tree analysis: vmcmc presents a posterior distribution of trees, sorted by probability and hence easy access to the tree with maximum a posteriori probability and the closest alternatives. selected trees are shown in newick format and are visualized  in a panel using code from forester  <cit> . a majority rule consensus tree can be computed, also restricted to selected trees, thus simplifying comparative tree analysis.
fig.  <dig> screen shot of the “tree” tab in vmcmc for an mcmc trace obtained from jprime on the tetrapod dataset “ds1” collected by hedges et al.  <cit>  the left panel shows the estimated posterior on trees sorted in descending order of probability, after removing the burn-in selected in the “graph” panel. the right panel displays either the selected tree or  a consensus tree of multiple selected trees with support values for each edge. the top panel shows the displayed tree in newick format. the presented consensus tree has five nodes where the top five trees differ. note that support values are determined only by the selected trees and their probabilities





tree space analysis: vmcmc calculates unweighted robinson-foulds distance  <cit>  between each pair of trees and displays a two-dimensional projection  using a multi-dimensional scaling technique , where similar trees are expected to cluster. point sizes proportional to probabilities inform the user of the estimated posterior.
fig.  <dig> screen shots of tree analysis tab of vmcmc for an mcmc trace obtained from jprime on the tetrapod dataset “ds1” collected by hedges et al.  <cit>  the figure shows the “tree analysis” tab for the trace given in additional file  <dig>  the right panel visualizes pairwise distances between trees in the posterior distribution using a multi-dimensional scaling technique  <cit> . the panel can be used to assess mixing for the tree parameter and to visualize groups of trees that have been traversed during the run. circle sizes reflect posterior probability and color has no significance other than to improve legibility. in this example, t <dig> seems to be distant from t <dig> and t <dig>  and the chain appears to be sampling from these trees and trees around them without remaining on intermediate trees. this indicates, in agreement with whidden et al.  <cit> , that the ds <dig> dataset has a bimodal distribution. presence of many trees in the vicinity of t <dig>  t <dig>  and t <dig>  also indicates that the chain is mixing well for the tree parameter





visualizing tree mixing and parameter dependence: vmcmc can indicate where a selected tree is found in the trace, thus help visualizing tree mixing and how parameters and trees are correlated .
fig.  <dig> visualizing tree mixing and parameter dependence: we go back to the graph tab after selecting the top five trees in fig.  <dig> and clicking “mark selection”. the trace plot is then colored where the selected trees appears in the trace, which is a means of to visualize mixing and to determine the dependency between continuous parameters and trees . for the example trace , frequent change of color and no long stretches of a single color is indicative of good mixing for the tree parameter





convergence and burn-in: convergence assessment and burn-in estimation can be performed using geweke’s convergence diagnostic  <cit> , gelman-rubin’s convergence diagnostic  <cit> , and höhna-sahlin’s ess-based estimator  <cit> .


analyzing parallel chains: currently, traces from two parallel chains can be analyzed and visualized together . convergence can be tested on numerical posteriors by applying a mann-whitney u test, and tree split distributions  <cit>  can be compared using a chi-square test for two samples. vmcmc provides the flexibility to perform parallel chain analysis using user-specified burn-ins for both chains. the parallel chains are appended to each other after removing specified burnins for both chains, and statistics and posterior distribution is calculated for joint traces. this is a useful feature in cases with poor convergence or high computational demands.
fig.  <dig> parallel chain analysis. the figure shows the super-imposed traces of a selected parameter for two parallel chains on the same dataset. vmcmc uses a mann-whitney u test for the real parameters  and a chi-square test for two samples for the tree parameter to assess if both the chains have converged to the same distribution. for the example dataset ds <dig>  both chains  appear to be sampling from different distributions





command line tool: vmcmc can be used both as a gui application and as a command line tool suitable as a component when writing scripts. command line output is given in json format for easy parsing.




vmcmc tries to hide the computational costs inherent in the problem and utilizes multithreading to perform computations  independently from the user interface. some calculations are delayed: the “tree analysis” tab is not prepared until the user asks for it to avoid unnecessary calculation of the needed, and expensive, two-dimensional robinson-foulds distance matrix. furthermore, in order to show trees with non-negligible posterior frequency only and to speed up the loading of analysis on “tree analysis” tab, we have limited the computation of distance matrix to unique trees with posterior probability at least  <dig> %. while vmcmc can work with any number of unique trees in the posterior, a warning for expecting a delay in loading the tab is generated if the posterior contains more than  <dig> unique trees with frequency greater than  <dig> %.

we have applied vmcmc to real datasets and experienced response times that we feel are reasonable given the trace sizes. table  <dig> displays the system time taken by vmcmc from specifying the input file to loading of graphical results on a standard macbook pro with  <dig>  ghz intel core i <dig> processor and  <dig> gb ram.
the amount of time taken by vmcmc from input to display of results is proportional to the number of samples and the size of the trees. for average sized trees, the loading delay of “tree analysis” tab is almost negligible but for large trees, the delay becomes noticeable




RESULTS
for an example application of vmcmc, we used a tetrapod 18s ribosomal rna dataset, named “ds1”, collected by hedges et al.  <cit> . ds <dig> is known to be problematic for convergence and mixing of the tree parameter  <cit> . we ran jprime twice with the same settings , each time for  <dig> million iterations and sampling every  <dig> iterations, yielding two traces containing  <dig> samples which we name trace  <dig> and trace  <dig> . here we present how vmcmc can be used to evaluate mixing of the tree parameter for trace file . the tutorial for vmcmc is available as additional file  <dig> 

comparing two parallel chains, run independently on the same data, is another way to investigate mcmc mixing. vmcmc can load two traces and superimpose plots. figure  <dig> displays superimposed trace plots, from the ds <dig> dataset, where one can see that the red trace is different from blue trace at many places. such aberrations are also checked through statistical hypothesis testing, and we note that the mann-whitney u test  rejects the hypothesis that the traces are from the same distribution and a two-sample chi-square test on trees’ split frequencies indicates the same . we conclude that the two parallel chains are sampling from two different posterior distributions and have either not reached the stationary distribution, or need more iterations to be able to safely conclude convergence.

vmcmc has implemented various convergence diagnostics commonly used by phylogenetics community, e.g., gelman-rubin’s convergence diagnostic  <cit> , effective sample size -based diagnostics and geweke convergence diagnostic  <cit> . please note that some of these diagnostics are outdated and these will either be removed or be replaced in the newer releases of vmcmc by more accurate and recent diagnostics like fixed-width stopping rule   <cit> . to elucidate this point, gong and flegal  <cit>  have shown that geweke convergence diagnostic  <cit>  is misleading and outdated for assessing convergence. further calculations based on gong and flegal’s work  <cit>  reveal that an ess of  <dig> measured by a 95% confidence interval corresponds to computational uncertainty of approximately 5% the size of the posterior standard deviation while the ess recommendation of  <dig> made by tracer and measured by a 95% confidence interval is equivalent to having a computational uncertainty of 28% the size of the posterior standard deviation. therefore, the estimated variances used in calculations with tracer’s heuristic can be unstable for the sample size of  <dig> and the simulation has, probably, not converged yet. thus, we are looking forward to connect ess based tests available in vmcmc to computational uncertainty using fwsr in the newer releases of vmcmc.

CONCLUSIONS
vmcmc can be applied to trace files from several molecular phylogenetics mcmc tools. assessing whether a chain has converged and is sampling from the stationary distribution is a non-trivial task. as demonstrated by the example, vmcmc can help identify issues with mixing and convergence of the mcmc run for all parameters. the graphical user interface supports interactive data exploration and the command line interface enables large-scale automated application.

vmcmc simplifies tasks in mcmc analysis that we encounter in our work and we believe that our software can be valuable to the community as well.

an executable jar file, tutorial, and source code can be downloaded from https://bitbucket.org/rhali/visualmcmc/. the tutorial is also available as additional file  <dig> 

additional files

additional file  <dig> dated species tree used in the example analysis that yielded the traces in additional files  <dig> and  <dig>  





additional file  <dig> sample run file generated from jprime. can be opened using standard text editors or through vmcmc. 





additional file  <dig> sample run file generated from jprime using the same data as additional file  <dig>  can be opened using standard text editors or through vmcmc. 





additional file  <dig> tutorial file containing all information about input, output, commands to run vmcmc from command line, gui options, faq and even a list of features we have identified as interesting and which we will target for implementation in future. it is in pdf format and can be open using adobe acrobat reader. 




abbreviations
esseffective sample size

fwsrfixed-width stopping rule

guigraphical user interface

jsonjavascript object notation

mcmcmarkov chain monte carlo

the authors thank kristoffer sahlin for help on convergence statistics and burn-in estimation methods.

funding
rha was funded by a stipend from the higher education commission  of pakistan. sam was funded by eurospin  and swedish e-science research center . these funding bodies did not influence our design study, analysis, data interpretation, or manuscript.

availability of data and materials
an executable jar file, tutorial, and source code of vmcmc can be downloaded from https://bitbucket.org/rhali/visualmcmc/. the datasets analysed during this study are included in this published article and its supplementary information files.

authors’ contributions
the first prototype was developed as bachelors thesis project by jm and mb guided by la. further development has been done by rha as part of his phd project and he has been responsible for design, implementation, drafting the manuscript and the tutorial, and coordination between other co-authors. sam implemented the parallel chain analysis part. rma implemented the handling of input generated from mrbayes and beast software. js has been involved with the tree analysis tab and robinson-foulds distance metric. smz has incorporated tree visualization code from forester. la has supervised the project, generated the idea and drafted the manuscript. all authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
