BACKGROUND
inferring the topology of gene regulatory networks is fundamental to understand the complexity of interdependencies among gene up and down regulation. characterizing experimentally the transcriptional cis-regulation at a genome scale is still an expensive challenge, even for well-studied model organisms. in silico methods represent a promising direction that, through a reverse engineering approach, aim to extract gene regulatory networks from prior biological knowledge and available genomic and post-genomic data. different model architectures to reverse engineer gene regulatory networks from gene expression data have been proposed in literature  <cit> . such models represent biological regulations as a network where nodes represent elements of interactions, eg. genes, proteins, metabolites, while edges represent the presence of interaction activities between such network components. four main network model architectures can be distinguished: i) information theory models, ii) boolean network models, iii) differential and difference equation models, iv) bayesian models.

information theory models correlate two genes by means of a correlation coefficient and a threshold. two genes are predicted to interact if the correlation coefficient of their expression levels is above a threshold. for example, td-aracne  <cit> , aracne  <cit> , and clr  <cit>  infer the network structure with a statistical score derived from the mutual information and a set of pruning heuristics.

boolean networks use a binary variable to represent the state of a gene activity and a directed graph, where edges are represented by boolean functions, to represent the interactions between genes. reveal  <cit>  is an algorithm that infers a boolean network model from gene expression data. differential and difference equations describe gene expression changes as a function of the expression level of other genes. they are particular suitable to model the dynamic behavior of gene networks. the basic mathematical model of such approaches are a set of ordinary differential equations   <cit> .

bayesian models, or more generally graphical models, make use of bayes rules and consider gene expressions as random variables. the major advantage is that the bayesian framework allows for combining different types of data and prior knowledge in the process of gene networks inference  <cit> . for example, iris  <cit>  is a software tool that infers the regulatory functions of a gene network by means of a factor graph model. recently, supervised learning methods have been exploited to learn gene regulatory networks from gene expression data. they differ from the above mentioned unsupervised approaches in that they require as inputs not only gene expression data, but also a list of known regulation relationships, that act as a training set. figure  <dig> depicts the main difference between supervised and unsupervised learning approaches. in machine-learning terminology, the method consists of building a binary classifier from the expression data of a set of prior known regulatory connections, available in public databases, and using such a classifier to predict new unknown connections. a selection of gene regulatory databases are: regulondb http://regulondb.ccg.unam.mx, trrd http://wwwmgs.bionet.nsc.ru/mgs/gnw, kegg http://www.genome.jp/kegg, transfac http://www.gene-regulation.com, and ipa http://www.ingenuity.com. the necessity to know some regulations is not a serious restriction in many practical applications, as many regulations have already been characterized in model organisms . the basic principle is to use the natural inductive reasoning to predict new regulations: if a gene a having expression profile e is known to regulate a gene b with expression profile e, then all other couples of genes x and y, having respectively expression profiles similar to e and e are likely to interact. expression profiles play the role of feature vectors in the machine learning algorithm, while the output is a binary variable representing whether two genes interact or not. a similar idea has been proposed for the reconstruction of protein-protein interaction and metabolic networks. in  <cit>  a combination of data sources has been used, including protein sequences, gene ontology annotations, local properties of the network, and homologous interactions in other species. in  <cit>  the feature vector is built upon the sequence representation of proteins and metabolites. instead, s feature vector composed of six different descriptors has been used in  <cit> : cysteine-cysteine coupling,  <dig> amino acid compositions, cysteine separation distance, cysteine ordering, protein molecular weight, and protein sequence length.

a large variety of machine learning algorithms have been proposed in literature and are available as working tools  <cit> . in the context of gene regulatory networks a first attempt has been made with bayesian networks, linear regression, decision trees, and support vector machines   <cit> . among all the support vector machine algorithm has attracted the attention of the bio-informatics community.

sirene  <cit>  is the state-of-the-art method for the reconstruction of gene regulatory networks with a support vector machine algorithm. the authors test sirene on a benchmark experiment of escherichia coli genes composed by a compendium of gene expression data and a set of known regulations. a critical point of a binary supervised classifier algorithm is that the input consists normally of positive and negative examples. actually, although prior known regulatory connections can safely be taken as a partial set of positive training examples, the choice of negative examples is not straightforward as no or few information is available regarding the fact that a given pair of genes are not interacting. the only available information is a partial set of interacting gene pairs, i.e. positive examples, and unlabeled data which could include both positive and negative examples. a common adopted solution is to consider all, or a random subset of, unlabeled examples as negative  <cit> . whatever is the supervised algorithm, training with false negatives could affect the performance of the classifier, as it learns wrongly potentially positive examples as negatives. learning from only positive and unlabeled data is a hot topic in the literature of data mining for the classification of web documents  <cit> . they differ from semi supervised learning, i.e. learning with a small set of labeled examples , in the sense that the classification algorithm learns from a small subset of positive example and a huge set of unlabeled examples . in literature two main classes of approaches can be distinguished:

• selection of reliable negatives. the first class of approaches depends on a starting selection of reliable negative examples that usually depends on the application domain  <cit> . in  <cit>  a two step strategy has been proposed in text classification domains: in the first step a set of reliable negative examples are selected from the unlabeled set by using the term frequency and inverse document frequency measure ; in the second step a sequence of classifiers are applied and then the best classifier is selected. in  <cit>  a similar approach is used to predict non-coding rna genes, where the first set of negative examples is built by maximizing the distances of negative sample points to the known positive sample points by using a distance metric built upon the rna sequence. such a negative set is iteratively refined by using a binary classifier based on current positive and negative examples until no further additional negative examples can be found. in  <cit>  we proposed a method applied to gene regulatory networks that selects a reliable set of negatives by exploiting the known network topology.

• probability estimate correction. the second class of approaches does not need labeled negative examples and basically tries to adjust the probability of being positive estimated by a traditional classifier trained with labeled and unlabeled examples. a general purpose method has been proposed in  <cit>  where the authors show that, under certain circumstances, a classifier trained from only positive and unlabeled examples predicts probabilities that differ by only a constant factor from the true conditional probabilities of being positive. such a result is used to show how to learn a classifiers from a non traditional training set.

in this paper we show that the probability estimation approach introduced in  <cit> , called posonly, is a viable solution to the problem of learning gene regulatory networks without negative examples. it turns the problem of classify between positive and negative samples into the "simpler" problem of separating between labeled and unlabeled samples under the assumption that all the positive examples are randomly sampled from a uniform distribution. to this purpose we compare the posonly method with some recently proposed approaches to the supervised inference of regulatory networks: the traditional approach that considers unlabeled examples as negatives  <cit>  , and a method aimed at the selection of reliable negative examples  <cit>  .

methods
posonly method
the posonly method has been introduced in  <cit>  and works as follows. let x be a feature vector and let y = { <dig>  1} and s = { <dig>  1} be binary labels. let s =  <dig> if the example x is labeled, and let s =  <dig> if x is unlabeled. positive examples are labeled, i.e. if s =  <dig> then y =  <dig>  while unlabeled examples, s =  <dig>  may be either positive y =  <dig> or negative y =  <dig>  the goal of a probabilistic binary classifier is to learn f such that f = p, i.e. the conditioned probability of being positive given a feature vector x. in  <cit>  has been shown that f = p/p under the assumption that positive examples are labeled completely at random. the term p refers to a probabilistic binary classifier that learns from labeled and unlabeled data, while p is an unknown constant which can be estimated empirically in various way. as stated in  <cit> , this means that the conditional probabilities produced by a model trained on the labeled and unlabeled examples differ by only a constant factor from the conditional probabilities produced by a model trained on fully labeled positive and negative examples. such result can be used to learn a probabilistic binary classifier, such as svm  with platt scaling  <cit> , using only positive and unlabeled data. the binary classifier is trained on labeled and unlabeled examples to get probability estimates p. such probabilities are then adjusted with the conditional probability p computed empirically within a validation set v . among the empirical estimations of p proposed in  <cit> , we used the following average:  

where v is a validation set drawn in the same manner as the training set and p ⊆ v is the set of labeled  examples in v . a threshold, usually set to  <dig> , discriminates if x belongs to the positive, p >  <dig> , or negative, p >  <dig> , class.

pseudo-random method
the posonly method will be compared with a recently proposed method for selecting reliable negative examples proposed in  <cit>  that works as follows. a gene interaction network can be modeled as a directed graph <g, e > where g represents the set of genes, i.e. nodes of the graph, and e represents the set of directed interactions between genes, i.e. edges of the graph. let p ⊆ e be the known gene-gene interactions, q = e - p the unknown regulatory links, and n = complement the edges not contained in e. the unknown gene regulatory connections q can be inferred by a machine learning scheme trained with the set of known regulatory connections. precisely, p is the set of known positive examples, n is the set of all unknown negative examples and q is the set of unknown positive examples. a selection of reliable negatives approach selects, from the unlabeled set n ∪ q of unknown connections, a sub set of reliable negative examples s which should be as much as possible composed of negative examples, i.e. s ⋍ n and s ∩ q ⋍⊘. such negative examples are used to improve the training phase of a classifier. the pseudo-random method is built over the assumption that a regulatory network has no or few cycles and that it has a tree like structure. for complex eukaryote organisms such an assumption may not be true as many complex cell functions are based on homeostasis and feedback loops. in contrast, for simpler including escherichia coli and saccharomyces cerevisiae, such an assumption may be correct: there are unsupervised approaches, such as aracne, that prune the final network by removing 3-arc cycles  <cit> . this leads to an heuristic that selects as candidate negatives those given by the union of the transitive closure of the known network and its transpose. figure  <dig> summarizes such an heuristic as:  

where tc is the transitive closure of p, i.e. the graph composed by the same nodes of p and the set of edges  such that there is a non-null path from gi to gj in p ; while, transpose is the graph containing the edges of x reversed. such a set is further extended with a small fraction of candidate negatives drawn randomly from n ∪ q.

research questions
in the following we detail: i) the research questions we aim at answering in this paper; and ii) the methods we followed to pursue such an aim. the main goal is to evaluate, by means of a benchmark experiment, the performances of the approaches, posonly, pseudo-random introduced in the previous section, that address the problem of learning gene regulations with positive only data. such approaches are then compared with a classifier trained with labeled and unlabeled examples  and with the most widely used unsupervised information theoretic methods, aracne  <cit>  and clr  <cit> . in particular we aim at answering:

• rq1: how do posonly, pseudo-random, and svmonly performances vary with the percentage of known positives? in particular, this research question aims to compare the performances of posonly, pseudo-random, and svmonly when the percentage of known positives varies from 10% to 100%.

• rq2: how do posonly, pseudo-random, and svmonly performances vary with the number of genes composing a regulatory network? in particular, this research question aims to evaluate the performances of posonly, pseudo-random, and svmonly when network size varies from  <dig> to  <dig> 

• rq3: how do posonly, pseudo-random, and svmonly performances compare with unsupervised information theoretic approaches, such as aracne and clr? in particular, this research question aims to compare supervised learning approaches, posonly, pseudo-random, and svmonly, with unsupervised information theoretic approaches at different network sizes and at different percentage of known positives.

the learning scheme, the datasets used, and the benchmark process to answer the above mentioned research questions are introduced in the following. to compare posonly, pseudo-random, svmonly, and unsupervised methods we performed a stratified 10-fold cross validation assuming different percentage of known positive examples within a gene regulatory network of size g. to perform an assessment a gold standard of the network is necessary. simulated networks are widely used to test gene network inference algorithms as the complete set of gene-gene interactions is available. this is not true with experimental data where only a partial set of interactions is known from the literature and usually collected into public databases. this forces for different evaluation processes depending on which dataset, simulated or experimental, would be used.

learning scheme
for both posonly and svmonly we used the support vector machine , with platt scaling  <cit> , to estimate the probability p. in the case of svmonly such a probability is assumed to coincide with p, instead, in the case of posonly such a probability is scaled with the empirical estimation c ⋍ p and then obtain p ⋍ p = c. for comparison purpose we used the support vector machine with platt scaling also for pseudo-random which is trained with the set of known positives and the set of negatives selected with the transitive closure heuristic.

we used the svm implementation provided by libsvm, one of the most popular available tool  <cit> . the basic element of an svm algorithm is a kernel function k, where x <dig> and x <dig> are feature vectors of two objects to be classified. in our case an object to be classified is a couple of genes, , represented with a feature vector composed by the concatenation of e and e, i.e., ; e) ∈ ℝ2n, the n-dimensional vectors of expression levels, standardized to zero mean and unit standard deviation, respectively of gene a and b. the idea is to construct an optimal hyperplane between two classes, + <dig> and - <dig>  such that the distance of the hyperplane to the point closest to it is maximized. the kernel function implicitly map the original data into some high dimensional feature space, in which the optimal hyperplane can be found. a couple of genes, , classified as + <dig> means that gene a regulates gene b, instead, classified as - <dig> means that gene a does not regulate gene b. we used c-support vector classification  which solves the following problem:  

subject to: ytα = 0

where yi ∈ {+ <dig>  -1} is the class of vector xi;  <dig> ≤ αi ≤ c; i =  <dig>  ..., 2n; e is a vector with all elements equal to one; and k is a kernel function. we adopted a radial basis kernel function defined as:  

where c and γ are parameters that can be set empirically with a grid search cross validation  <cit> .

benchmark process with simulated data
the process consists of the following three steps:

1) random generation of a gene-gene regulatory network of g genes
we generated simulated data with genenetweaver http://gnw.sourceforge.net, a tool used to generate in silico benchmarks in the dream <dig> challenge initiative  <cit> . the genenetweaver tool is able to obtain network topologies of a given size g by extracting randomly sub-networks from the gene-to-gene interaction networks of escherichia coli or saccharomyces cerevisiae . the tool generates steady state levels for the wild-type and the null-mutant knock-down strains for each gene. this means that for a network of g genes there are g +  <dig> experiments  leading to a feature vector composed of  <dig> ×  attributes. the data corresponds to noisy measurements mrna levels which have been normalized such that the maximum value in a given dataset is one. auto-regulatory interactions were removed, i.e. no self-interactions are considered in the networks. as reported in the dream <dig> documentation, the tool takes great care to generate both network structure and dynamics that are biologically plausible.

we generated for both escherichia coli and saccharomyces cerevisiae ten random gene interactions networks composed by g =  <dig>  g =  <dig>  g =  <dig>  and g =  <dig> genes. figure  <dig> shows the distribution of positives of the generated datasets we used in the benchmark process, while figure  <dig> shows a typical gene regulatory network of  <dig> genes generated with the genenetweaver tool.

2) random selection of p non-self interactions which are assumed to be known
this leads to a remaining set q of non-self interaction assumed to be unknown, and n of all non-interactions. the fraction of with respect to is assumed to vary as: . in a learning scheme, p is the set of labeled, and positive, examples, and q ∪ n is the set of unlabeled examples. for each network of size g, the second step is repeated among ten random selection of p positives.

3) cross validation of posonly, pseudo-random, and svmonly classification performances
the validation consists of a stratified ten-fold cross validation and proceeds as follow. partition p, q, and n randomly into ten subsets each of roughly the same size , ..., . for each i-th partition a trial is performed with one subset reserved for testing , while the other nine subsets s for training the classifier. the training set is composed by the set of known labeled data, pi = ∪k≠i pk, s and the set qi∪ ni = ∪k≠i qk ∪ nk, which simulate the unlabeled data. the i-th trial yields a confusion matrix as shown in table  <dig>  where tpi and tni are, respectively, the number of positives and negatives correctly predicted by the classifier in the i-th trial; whereas fpi and fni are, the number of false positives and false negatives in the i-th trial. the precision  of positives, i.e. positive predictive value, and the recall , i.e. sensitivity, of the i-th trial are computed as:  

when no gene interactions are predicted  recall is zero and precision is assumed to be  <dig>  the average indexes are computed among the ten trials as:  and . the tradeoff between precision and recall measures the effectiveness of a classifier. among all we used the weighted harmonic mean of precision and recall, i.e. f-measure, as a measure that combines precision and recall as:  

benchmark process with experimental data
to overcome computational limitation with the huge amount of experimental data we set up a benchmark process similar to the one adopted to evaluate the sirene supervised approach  <cit> . sirene predicts regulations in escherichia coli by splitting the problem of regulatory network inference into many local binary classification subproblems, each associated with a transcription factor . for each tf, we train an svm classifier with a gaussian kernel to discriminate between genes known to be regulated and genes known not to be regulated by the tf, based on the expression patterns of such genes. the sirene inspired benchmark process we adopted with experimental data consists in the following steps:

1) selection of an experimental gene-gene network
as experimental data we used the expression and regulation data made publicly available by  <cit>  of escherichia coli, widely used in literature as an experimental benchmark  <cit> . the expression data, collected under different experimental conditions, consist of  <dig> e. coli affymetrix antisense <dig> microarray expression profiles for  <dig> genes. such data were standardized to zero mean and unit standard deviation. the regulation data consist of  <dig> experimentally confirmed regulations between  <dig> tf and  <dig> genes, extracted from the regulondb  database  <cit> .

2) random selection of p* genes regulated by a given tf, assumed to be known
with experimental data, the complete set of gene-gene interactions is unknown and the partitions, p, q, and n, cannot be simulated. then, to differ them from the actual partitions referred above, we name such partitions as p*, the set of genes regulated by a given tf assumed to be known; q*, the set of interaction assumed to be unknown; and n* the set of all non-interactions. the fraction of p* with respect to q* is assumed to vary as: . in a learning scheme, p* is the set of labeled, and positive, examples, and q* ∪ n* is the set of unlabeled examples. the second step is repeated for each tf among ten random selection of p positives.

3) cross validation of posonly, pseudo-random, and svmonly classification performances
the validation consists of a stratified ten-fold cross validation and proceeds as follow. partition p*, q*, and n* randomly into three subsets each of roughly the same size , ..., . for each i-th partition a trial is performed with one subset reserved for testing , and the other two for training the classifier. a cross validations of a classifier performance leads to precision and recall indexes, pr* and rc*, which need to be correctly interpreted. as p* ⊆ p, q* ⊆ q, and n ⊆ n*, it is easy to see that pr* ≤ pr and . hence, the value of precision, pr*, constitute a lower bound estimation of the actual precision, while the value of recall, rc*, can be correctly characterized when , which is the percentage of actually known gene-gene interactions, can be estimated in advance.

however, in domains such as escherichia coli and saccharomyces cerevisiae this can be assumed very high , which means that the fraction of unknown of gene-gene regulations is very low.

selection of c and γ parameters
for experimental data we chose the same svm parameters used by sirene  <cit> , c =  <dig> and γ = 1/ <dig>  for simulated data we selected the best svm c and γ parameters following the procedure suggested in  <cit> . we performed parameter selection for each network size by using an independent set of  <dig> random gene networks for each organism . those networks were used only for parameter estimation. accuracy was evaluated with a different dataset. for each method and for each network, we performed stratified  <dig> fold cross validation with a grid of exponential sequences of c and γ values, as suggested in  <cit> . test and training sets were the same for each method, the c parameter varied between 2- <dig> and  <dig>  and γ varied between 2- <dig> and  <dig>  we chose the parameters that give the best average f-measure for each method. within a network, all methods exhibit the best performance with approximately the same parameter values. the γ parameter is more sensitive to network size, because of the number of attributes in the feature vector. table  <dig> shows the selected c and γ parameters for each class of networks.

RESULTS
in this section we discuss the results answering rq <dig>  rq <dig>  and rq <dig> obtained in the context of simulated and, whereas possible, experimental data. to allow for replicability, raw data are available at the following url: https://www.scoda.unisannio.it/rawdata/bmc-bioinformatics <dig> tgz.

rq1: how do posonly, pseudo-random, and svmonly performances vary with the percentage of known positives?
results on simulated data
although the performance trend is the same in both organisms the absolute value could be different and it is lower for s. cerevisiae and higher for e. coli. this could be due to the fact that regulatory pathways of s. cerevisiae are more complex than those of e. coli. the positive gain obtained with posonly and pseudo-random is shown in figure  <dig>  the mean f-measure difference with respect to svmonly is shown at different levels of known positives and for networks of different size. the mean difference varies with the number of genes and appears to be independent from the organisms. the maximum is reached at p = 60% for networks of size g =  <dig>  at p = 50% for networks of size g =  <dig> and g =  <dig>  and at 40% ≤ p ≤ 50% for networks of size g =  <dig>  a paired t-test shown that the difference is statistically significant in all simulated datasets, i.e. p-value < 0: <dig> for both methods posonly and pseudo-random. this is a promising results as it confirms the necessity to take into account that a partial knowledge of the gene regulatory network under investigation can lead to bad classifiers if it is not properly managed. furthermore the difference is higher  for posonly than pseudo-random especially for small networks and a low percentage of known positives.

results on experimental data
figures  <dig>   <dig>  and  <dig> show the results, answering rq <dig>  obtained by applying the three approaches posonly, pseudo-random, and svmonly, in the context of experimental data.

figures  <dig> and  <dig> show the precision and recall obtained at different percentage of known positives. the precision of pseudo-random and svmonly decrease with the percentage of known positives, instead their recall decrease showing a similar behavior, although svmonly exhibits a better precision while pseudo-random exhibits a better recall. the precision of posonly increases with the percentage of known positives but always lower than those exhibited by pseudo-random and svmonly. instead, the recall of posonly is always higher than those exhibited by pseudo-random and svmonly. it decreases in the interval between p = 10% and p = 50%, reaching a minimum of 0: <dig>  and then increases reaching a maximum of  <dig>  at p = 100%.

rq2: how do posonly, pseudo-random, and svmonly performances vary with the number of genes composing a regulatory network?
this research question can be answered only in the context of simulated data as in experimental data the number of genes cannot be varied.

results on simulated data
rq3: how do posonly, pseudo-random, and svmonly performances compare with unsupervised information theoretic approaches, such as aracne and clr?
results on simulated data
results on experimental data
CONCLUSIONS
we performed an experimental evaluation of a supervised learning algorithm, namely posonly, which is able to learn from only positive and unlabeled examples. such a method is particulary suitable in the context of gene regulatory networks where a partial set of known regulatory connections is available in public databases. in such a contexts it is crucial to take into account that the only available information are a partial set of gene-gene interactions, i.e. positive examples, and unlabeled data which could include both positive and negative examples.

the data mining community developed a number of approaches to deal with such a problem. in this paper we adopted the approach introduced in  <cit>  that we compared, through a benchmark experiment performed with simulated and experimental data, with a negative selection method introduced in  <cit>   and with the current state of the art of supervised methods, namely svmonly  <cit> . we showed that posonly, outperforms significantly both methods pseudo-random and svmonly in simulated data, instead exhibit a slightly lower performance in experimental data. a comparison with unsupervised information theoretic methods has been performed showing that the performance of unsupervised information theoretic methods decreases drastically with the number of genes composing a regulatory network, instead the performances of posonly, pseudo-random, and svmonly decrease more slowly.

if one uses the posonly and svmonly methods to rank candidates, then the rankings should be the same. they are indeed the same in our experiments. in this case, the contribution of  <cit>  is to show that the simple svmonly method actually is correct, something that is not obvious. at first sight the svmonly method is too naive as a solution to the positive-only problem; surprisingly, it is valid if all that is needed is a ranking of test examples.

if one wants to estimate probabilities for test examples, or if one wants to categorize candidates correctly at any given threshold , then it is not correct to use probabilities produced by a standard classifier, whereas it is correct to use adjusted probabilities obtained with the posonly method. this happens, for example, if one wants to infer the overall gene regulatory network and a decision must be performed to classify the presence or absence of an arc between a pair of nodes/genes.

note that the posonly method used in this paper is not the only valid way of obtaining correct probabilities. the paper  <cit>  provides two other methods that are somewhat more complicated. in this research we use only the simplest method since it works well and will be easy for other researchers to apply. any evaluation measure that is sensitive only to rank will indicate that the posonly and svmonly methods have equal performance. an example of such a measure is auc, the area under the receiver operating characteristic  curve. however, measures that are sensitive to the correctness of conditional probabilities, for example mean squared error, will show that posonly performs better. measures that are sensitive to the correctness of thresholds for making decisions, including f-measure as used in our research, will also show that posonly performs better.

results presented in this paper are partial and no general conclusions can be drawn. threats to validity that can affect the results reported in the previous section. in particular, our results can be affected by the limitations of the synthetic network generation tool and on the measurement errors in the experimental microarray data.

threats to external validity, concerning the possibility to generalize our findings, affect the study although we evaluated the heuristics on two model organisms, and on a statistically significant sample of random regulatory networks. nevertheless, analyses on further organisms are desirable, as well as the use of different simulated network generation tools. instead, the study can be replicated as the tools are available for downloading, as well as simulated and experimental datasets. the benchmark process is detailed in methods section and we made raw data available for replication purposes.

although more data is needed to validate empirically such results a biological validation is necessary to test the effectiveness of such approaches in real contexts. with respect to other gene network inference models, supervised methods need a set of known regulatory connection being available to learn the prediction model. as more genomic data become available such a limitation becomes less critical and we believe that machine learning methods could play a crucial role in the inference of new gene regulatory connections.

authors' contributions
lc conceived of the study, participated in its design and coordination, and drafted the manuscript. ce is the author of the posonly method applied in this paper and critically reviewed the manuscript. mc participated in the design and coordination of the study and contributed to draft the manuscript. all authors read and approved the final manuscript.

