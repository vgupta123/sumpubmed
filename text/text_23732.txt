BACKGROUND
in a relatively short time, editing and processing of dna and protein sequences have left the realm of molecular biology to become a routine practice for biologists working in myriad different fields. at the same time, the number of tools and servers for performing analyses on biological sequences and related data has exploded, creating a need for resource integration  <cit> . there have been several attempts to reconcile this vast and expanding array of services with data and service integration. many of these approaches have relied on the creation of web-based service portals that seek to integrate and simplify data collection analysis with a wide variety of available tools  <cit> , while other efforts have focused on service and data integration through the use of browser-enabled interoperability between services, data providers and even desktop applications  <cit> .

the sheer scope and power of data and service integration portals and browser add-ons is also one of the main obstacles to their wide acceptance, since many users rarely need to use more than one or two services  and lack the necessary training in bioinformatics to navigate easily through interconnected repositories of data and services  <cit> . still, a wide range of practicing biologists must routinely perform relatively simple manipulation, editing and processing of dna and protein sequences on a daily basis. to perform these routine manipulations, this substantial segment of users has resorted to proprietary desktop software, like dnastar or the gcg wisconsin package  <cit> , ingenious bookmarking of specific web servers, or to services that integrate several tools for sequence manipulation, like the molecular toolkit or the sequence manipulation suite   <cit> .

web-based sequence editing toolkits like sms have enjoyed wide acceptance because they provide a simple interface for many routine sequence manipulation tasks and because, running on javascript, they are essentially platform independent. nonetheless, the use of javascript results also in some limitations, like the inability to access files on the client computer, which forces the user to rely on copying and pasting data in text format. this does not only add overhead and complicates the organization and storage of data and analysis results, but it also requires that the user have access to raw text data, which may not be the case due to the specific handling of native file formats by the operating system. last, but not least, the use of javascript requires embedding in a html file, which many users may find difficult to implement, thus reducing the likelihood of community-based code expansion. to address these shortcomings here we introduce bioword, an extensive suite of sequence manipulation tools integrated within the familiar microsoft word interface. using a macro-enabled document template, bioword provides direct and easy access to an array of tools for sequence manipulation, allowing the integration of functionality and data storage within a single interface. its object-oriented design, implemented in the standard scripting visual basic for applications  language, facilitates customization, and its integration into a well-known interface provides the means for efficient code-sharing and development.

implementation
class structure
the object-oriented implementation of bioword is based on two main classes that handle the key elements bioword is designed to process: sequences and collections of sequences . the sequence class is used to hold and process dna, rna and protein sequences. to simplify the architecture, an instance variable in the class determines sequence type  and the sequence itself is stored as a character string. during instantiation, the sequence object determines its type according to a user-specified percentage of nucleic acid characters . the class thus consolidates access to the methods and properties that can be used to process biological sequences and cross-checks their applicability according to the specific sequence type. the colsequences class is designed to handle the serial manipulation of sequences and those applications requiring the simultaneous processing of more than one sequence, such as sequence alignments. based on the native vba collection object, the colsequences class is used to store multiple sequence objects and define processing methods for them. the colsequences class thus implements generic methods to serialize single-sequence processes  and methods to process the collection as a whole, such as computing a position-specific frequency matrix  or implementing a greedy pattern search on a collection of sequences. because single sequences are instantiated as unitary colsequences objects, this class effectively centralizes all interactions with sequence objects. this primary class outline is complemented by three additional classes that define generic objects used in sequence processing. the gcode class implements a variable genetic code model able to incorporate codon usage data, and is used in any operations involving dna-protein translation or the use of codon usage tables ). the alignmentcell class is designed exclusively for use in alignment algorithms and provides the means to define all the relevant fields in a dynamic programming alignment matrix. finally, the scorematrix class consolidates the different scoring rules used by pattern matching and alignment algorithms into a single type of object  which defines the methods used to set and use scoring matrices in these different settings.


module structure
the class structure is functionally wrapped within a module structure that basically handles the interface with microsoft word document objects. this design strategy is aimed at decoupling the basic bioword objects from their running environment, thus avoiding the need for derivation of specialized classes when, for instance, specific output formats are desired. the ribboncontrol module handles basic communication between the ribbon, the colsequences objects and the document. it contains the methods the ribbon buttons are linked to, thereby defining the functionality of the ribbon. upon capture of a button-click event, the ribboncontrol parses the user selection, instantiates the necessary colsequences object and calls the appropriate colsequences method to process the selected sequences, thus implementing the fundamental control flow of bioword . the ribboncontrol module also centralizes reception of colsequences methods results and calls the appropriate method to handle their output according to sequence type and formatting options. methods for output generation are stored in the resources module, which handles both the specific format  and destination of the output. bioword allows output to be redirected to the clipboard, a new document, immediately following the selection or overwriting it. in addition, the resources module defines a broad set of handy functions to manipulate both sequence and non-sequence objects, like sorting or removing duplicates from a collection. two additional modules complement this basic module architecture. the xmlhandler module manages the interaction with the xml options file  and handles the loading, saving and updating of the option fields available in the ribbon.

integration, editing and distribution
bioword is written fully in vba and is compliant with the visual basic  <dig> standard, thus maintaining backwards compatibility with earlier versions of microsoft office. due to its explicit detachment of basic sequence and colsequences classes, which encode sequence processing functionality, from the document interface, the core of the code is readily adaptable to all versions of microsoft word supporting vba, as well as to other microsoft office programs, such as excel. bioword is fully encapsulated within a macro-enabled  template facilitating its distribution and installation through the use of the open xml format  <cit> . the code and the xml options file are embedded within the .dotm structure, which also contains the ribbon stored as a xml file. bioword code can be edited with any text editor or, more conveniently, within the integrated vba editor of microsoft word. the xml options file and the xml ribbon can be edited also with any text/xml editor. for convenience, the xml ribbon can also be edited with the freely available open xml custom ui editor  <cit> .

RESULTS
bioword provides an easily accessible and expandable toolkit for the manipulation and editing of biological sequences embedded within a microsoft word ribbon . to facilitate user interaction, the ribbon is divided into several functional groups that are discussed in the following sections.


format and sequence manipulation
in its current implementation, bioword can parse and convert to and from three widespread formats for biological sequences: fasta  <cit> , genbank flat file  <cit>  and bare/raw sequence. conversion buttons are available in the manipulation group, along with reverse and complement  buttons, but output conversion can also be made implicit by setting the format option of the basic options group to the desired format.

translation and sequence statistics
bioword features frame-dependent dna to protein translation and translation maps using different genetic codes, as well as reverse translation using a variety of approaches . reverse translation can be performed assuming a uniform codon distribution and using iub characters to encode redundancy, or following a codon usage table, provided by the user in gcg wisconsin package format, as generated by the codon usage database  <cit> . basic statistics for dna and protein sequences are also implemented in this distribution of bioword. among other, the toolkit can provide n-gram statistics and window-based analyses of dna %gc content, as well as protein-specific indices, such as the gravy score  <cit> . the output for these analyses is generated in table format and can be readily pasted into spreadsheet software for graph generation.


search methods and consensus logos
string and pattern-based search methods comprise a significant part of bioword’s functionality. the output for search methods can be overlaid on the sequence  or provided in table format. bioword provides a simple-to-use orf search tool, which can maximize orf length alone or combined with a supplied codon usage table from a reference genome. basic string search methods  enable mismatch-based search for sequences and the ability to specify variable spacers in gapped search. mismatch-based search can operate on dna sequences incorporating iub redundancy codes or apply standard  scoring matrices to weigh matches in amino acid sequences. pattern-based methods  provide a more robust approach to sequence search by incorporating psfm models and using shannon’s mutual information or relative entropy derived methods to score putative sites  <cit> . psfm models are built from collections of sites and/or iub consensus sequences provided by the user either in raw or fasta sequence format. like mismatch-based methods, pattern-based methods allow  searching for variable spacer motifs based on direct or inverted repeats of a provided pattern .


bioword also exploits the ability to handle psfm models to address a pressing need in the representation of sequence motifs. it is well known that consensus sequences are an unsuitable representation of sequence motifs because they omit information on the importance of consensus bases and the relative frequency of non-consensus bases at each position of the motif  <cit> . sequence logos are able to integrate these two missing elements, together with the consensus, in an encapsulated representation and are therefore a superior and preferred method for the representation of sequence motifs  <cit> . unfortunately, sequence logos are graphic elements and many authors continue to use consensus sequences to represent motifs in order to avoid the need for additional figures or to allow in-text discussions about the motif. bioword provides a solution to this problem by allowing the representation of sequence motifs in text format using the consensus sequence, but depicting simultaneously its information content. for instance, the lexa-binding motif of escherichia coli <cit>  would be represented as . in this representation , the vertical bar character is used to represent the y-axis scale, with the maximum value, in bits, provided next to it. the height of the consensus letter at each position corresponds to the positional information content of that position . this representation does not provide frequency information of non-consensus bases and, therefore, a sequence logo should be used preferentially whenever possible. nonetheless, the consensus logo provides the means to convey information about positional conservation in text format and its use of information theory units allows straightforward comparison of motifs .

motif discovery and alignment
bioword supports several methods for motif discovery. the user can apply a greedy search strategy or gibbs sampling to a collection of unaligned dna or protein sequences  <cit>  in order to locate underlying motifs of a given length . both greedy search and gibbs sampling are initialized randomly and iterated as many times as specified by the user. the reported motif is the one yielding larger information content across all iterations. the current distribution of bioword also incorporates a dyad motif search tool. this is a string-based motif search tool for bipartite motifs that reports all the occurrences of direct or inverted repeats with a maximum number of mismatches on the dyad and variable spacing . in addition, the package incorporates global and local pair-wise sequence alignment by implementing the needleman-wunsch and smith-waterman algorithms  <cit> . memory management and computing power are constrained in bioword by the use of microsoft word-embedded vba code. as a result, computationally or memory intensive methods in bioword, such as motif discovery cannot match the capabilities of equivalent specialized resources, like meme  <cit> . nonetheless, benchmarking of the bioword greedy search algorithm on several known e. coli transcription factor-binding motifs indicates that bioword motif discovery algorithms can provide results that are qualitatively comparable to those obtained by meme, locating the known motif in nearly all instances , and alignment of relatively long sequences  can be performed seamlessly within bioword.

.

CONCLUSIONS
bioword integrates many commonly used methods for sequence manipulation and editing in a single add-on for microsoft word, providing a powerful and easily-accessible toolkit for biological sequence processing in an environment familiar and accessible to most practicing biologists. among other functions, the current version of bioword implements bi-directional translation, orf detection, consensus logos, gibbs sampling and several powerful sequence search methods. its simple class structure and modular design based on an accessible object-oriented language  facilitate customization, code expansion and sharing. together with its encapsulation in an environment that most students know well, these features make it also a powerful educational instrument.

availability and requirements
project name: bioword

project home page:http://sourceforge.net/projects/bioword/

operating system: microsoft windows

programming language: visual basic for applications 

other requirements: microsoft office  <dig> or higher

license: gnu gpl

competing interests
the authors declare that they have no competing interests.

authors’ contributions
la implemented the bioword code and manuals. dmf implemented a legacy visual basic version of bioword for office 2003/xp and was involved in the design of the basic bioword class structure. la and ie designed the class and module structure of bioword. ie conceived the idea, defined the functionality of bioword, oversaw code development and drafted the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
motif data for several transcription factors as downloaded from the prodoric database and motif discovery results for meme and bioword .the file contains the native sites from prodoric and the expanded sites  used as input for motif discovery, as well as the sites reported by meme and bioword for the best of three reported motifs.

click here for file

 acknowledgements
the authors would like to thank naim raja díaz, for contributing to the development of an early forerunner of bioword. we thank the anonymous reviewers for their insightful suggestions, which helped us improve bioword significantly. this work was supported by the umbc office of research. writing of this paper was supported by a umbc sff award.
