BACKGROUND
one of the most basic tasks in bioinformatics is the search for homologous protein sequences, e.g. to classify newly discovered proteins or to analyze evolutionary relationships. here, the elementary step is the computation of sequence similarity of any two sequences by so called pairwise alignments using algorithms like needleman-wunsch  <cit> , hirschberg’s algorithm  <cit> , smith-waterman  <cit> , and gotoh’s algorithm  <cit> . all of these algorithms use substitution matrices to model evolutionary substitution events and gap penalty models to represent evolutionary insertion/deletion events.

the selection of the parameters in these models is a non-trivial task and an important step in homology search  and phylogeny  <cit> . over the years many different substitution matrices have been developed using different techniques such as markov chain models   <cit> , maximum likelihood estimation   <cit>  or direct derivation from highly conserved amino acid blocks   <cit> .

in order to assess the performance of substitution matrices the state of the art approach applies homologous sequence search on a standardized database with known sequence relations  <cit> . here, the astral database  <cit>  — a subset of the scope database  <cit>  — serves as a gold standard for this benchmark . typically, all sequences of the astral database are searched against the entire database to obtain a list of found homologs given a set of search parameters.

a well established method to measure the performance of these parameters is the coverage measure at a given errors per query   <cit> . in this context, the coverage is similar to receiver operator characteristics  and uses scope sequence superfamily annotations to classify found homologs as true and false positives. in order to compensate for different superfamily sizes quadratic normalization of the coverage can be applied  <cit> . as the coverage is strongly depending on the composition of the search database, significance of the results can be estimated via concerted bayesian bootstrapping  <cit> .

a frequently used reference for benchmarking are the blosum matrices as these are standard parameters for database search programs such as ncbi blast  <cit>  and ssearch  <cit> . while the blosum matrix series was introduced over two decades ago by henikoff et al.  <cit> , previous work  <cit>  revealed inconsistencies in the cluster weighting procedure of the matrix calculation. interestingly, correcting these miscalculations did not improve the search performance of the corrected blosum variant  for the best benchmark at that time .

recently, song et al.  <cit>  presented another approach to address inaccuracies in the blosum matrices by finding optimal unified eigenvectors. nonetheless, for homologous sequence search, their pblosum matrix was reported to perform consistently worse than blosum <dig>  thus, blosum serves as an upper bound on the search performance.

the ever improving coverage of the protein sequence space, allowed us to conduct a more detailed analysis of the rblosum correction  <cit>  and its impact on homology search performance. based on the corrections presented by styczynski et al.  <cit>  we modified the original blosum code  <cit>  and noticed an additional inaccuracy .

the coding problem affects cluster memberships of sequences and necessitates modifications to both the original blosum and the rblosum variant. in short, the published code contains an inaccurate integer based thresholding, so that sequences may be assigned to a particular cluster, even though they do not meet the user-specified clustering threshold. while — on the surface — the induced inaccuracies appear to be minuscule, the resulting substitution matrix entries are systematically biased away from the actual conservation tendency intended by henikoff et al.  <cit> .

the following example illustrates this effect. at a block length of  <dig> amino acids, a minimum sequence similarity of  <dig> % — corresponding to the threshold used to generate the blosum <dig> substitution matrix — leads to a similarity threshold of  <dig>  identical residues. or in other words, at least  <dig>  identical amino acids between two sequences are required to form a cluster. in the original implementation, this value is truncated to  <dig> identical residues. in fact, this corresponds to an effective clustering value of just  <dig>  % which was not intended by the user and may result in mistakenly clustered sequences. a correction of this error in combination with the problems reported earlier  <cit>  prompted us to derive a new substitution matrix series, named corblosum hereafter. a detailed description of this inaccuracy and an analysis of its impact is discussed in additional file  <dig> 

in this paper, we analyze the influence of the above mentioned error corrections on the resulting matrices derived from different blocks database compositions in combination with their respective homologous sequence search performance. we present an exhaustive analysis on all available astral releases at different maximal sequence identities. hence, our analysis covers  <dig> test databases in total and is to our knowledge the largest assessment of blosum-type matrix performance to date.

we show that fixing a small coding error results in substantially different corblosum matrices which beneficially influence homology search performance in comparison to the original matrix. in particular, these new matrices outperform their blosum counterparts in ∼ <dig> % of all tested scenarios, especially on recent test databases .

method
substitution matrices
we calculated the above introduced, different variants of the blosum matrix  using the algorithms described in  <cit>  and the aforementioned corblosum algorithm .

as the magnitude of both error corrections is influenced by the database composition and as newer blocks releases are reported to produce better performing matrices  <cit> , we derived matrices from three different databases: blocks  <dig>  blocks 13+ and blocks  <dig> .

the blocks  <dig> database represents the initial database used for the publication of the blosum  <cit>  and rblosum matrices  <cit> . the blocks 13+ covers a larger sequence space and was reported to produce better performing matrices than those created with blocks  <dig>  <cit> . blocks  <dig>  represents the latest blocks release as of april  <dig>  this release spans over the largest sequence space available in blocks and represents a more conserved starting point for the parametrization of evolutionary models, such as substitution matrices. we added the labels  <dig> , 13+ and  <dig>  as subscripts to the matrix names to distinguish from which blocks version a matrix is derived.

for the calculation of the original blosum variants, we chose clustering thresholds of  <dig> and  <dig>  since the blosum <dig>  <dig>  and especially blosum <dig>  <dig>  are two of the most commonly used blosum matrices. for example, these are used as default matrices in ssearch  <cit>  and blast  <cit> . since two substitution matrices can only be properly compared if the difference of their relative entropies is small  <cit> , we adapted the clustering values of the rblosum and corblosum variants according to the blosum <dig> and blosum <dig> variants created from the three different blocks versions. these  <dig> matrices assessed in our study, their clustering values, relative entropies and matrix scales based on unrounded log-odd scores are listed in table  <dig> 
blosum <dig>  <dig> 
rblosum <dig>  <dig> 
corblosum <dig>  <dig> 
blosum <dig>  <dig> 
rblosum <dig>  <dig> 
corblosum <dig>  <dig> 
blosum <dig> 13+
rblosum <dig> 13+
corblosum <dig> 13+
blosum <dig> 13+
rblosum <dig> 13+
corblosum <dig> 13+
blosum <dig>  <dig> 
rblosum <dig>  <dig> 
corblosum <dig>  <dig> 
blosum <dig>  <dig> 
rblosum <dig>  <dig> 
corblosum <dig>  <dig> 


notably, the difference in the clustering thresholds is rather small for matrices based on blocks  <dig> when compared to those based on blocks 13+ and blocks  <dig> . this effect is induced by the different sequence compositions in the different blocks releases. while the blocks  <dig> release only provides  <dig>  sequences for the matrix calculation, the blocks 13+ provides  <dig>  sequences and the even larger blocks  <dig>  database  <dig> , <dig> sequences. similarly, the composition of the database influences the relative matrix entropy. whereas the entropy of the matrices which originate from blocks  <dig> database is rather high, the distribution of substitution events  in the blocks 13+ and blocks  <dig>  are closer to an independent event  and hence the relative substitution matrix entropy is smaller.

databases
analogous to previous studies  <cit> , we chose the astral database as basis for our performance analysis. the astral database  <cit>  serves as a gold standard for the assessment of homology search performance and parameter selection  <cit> . the database itself is a subset of the scop/scope databases  <cit>  and consists of structural alignments  <cit>  based on the hand-curated scop classification.

as mentioned earlier, the performance study by styczynski et al.  <cit>  was solely based on the astral <dig>  <dig>  release with less than  <dig> % identical sequences. in addition, we tested all generated substitution matrices against all available astral database releases . inspired by angermüller et al.  <cit> , we used for each release three different sequence similarity thresholds  resulting in  <dig> separate benchmarks. in the following, we use the terms astral <dig>  astral <dig> and astral <dig> to distinguish between these three similarity based subsets. additionally, we use the terms scop or scope based astral datasets to refer to astral versions  <dig>  to  <dig>  and  <dig>  to  <dig> , respectively. here, we would like to note, that scop based astral releases are entirely manually curated while scope releases are based on a semi-automated approach for the database generation.

this wide variety of databases allows for the assessment of the effect of improving sequence space coverage and different database compositions on matrix performance.

search methods
in order to evaluate the performance of the different substitution matrices on the different astral databases, we conducted a homology search for each of the  <dig> astral databases against itself. here, we used the smith-waterman alignment algorithm implemented in ssearch   <cit> , as ssearch has been shown to possess higher accuracy than blast in assessing the performance of different substitution matrices  <cit> .

to address the potential bias from suboptimal gap penalty settings on the matrix performance, we varied the gap open penalty between  <dig> and  <dig> in spacings of  <dig> and the gap extension penalty between  <dig> and  <dig>  these penalties correspond to commonly used parameter settings in homology search tools  and previous performance studies such as  <cit> . for each combination of matrix, gap open and gap extension penalty, we obtained a list of homologs found for each sequence in the benchmarked astral release ordered by their respective e-value. the best performing gap parameter set for each matrix on each of the tested astral databases are listed in additional file  <dig> 

performance evaluation
in analogy to previous assessments  <cit> , we used the coverage measure q to evaluate the performance of the different matrix/gap combinations. q represents the fraction of true positives found in the search results after applying an e-value thresholding based on the errors per query  measure from  <cit> . a widely used toolkit  <cit> , to calculate the coverage measure from ssearch results is the psce toolkit by green et al.  <cit> . in order to handle the large amount of ssearch results generated in our study, we used our own coveragecalculator tool, a performance optimized reimplementation of the psce toolkit. the source code of this tool is available at  <cit> .

in our coveragecalculator, a search result is considered as a true positive relation, if the superfamily annotations, as provided by the astral database, are identical for the query and the reported sequence. in order to mitigate potential bias from different superfamily sizes, we used the quadratic normalized coverage qquad  as the average of true positive relations found per superfamily  <cit> : 
  qquad=1s∑i=1sti 

here, ti is the number of true positive relations found for a superfamily i with si sequences. s is the number of superfamilies in the database.

the e-value threshold for the filtering is selected adaptively, depending on the average number of false positive relations remaining in all search results after applying the threshold. a search result is considered a false positive relation, if its superfamily annotation does not match the annotation of the query sequence. this is contrary to the psce toolkit, where search results with different superfamily but same fold annotation are ignored in the coverage calculation since their evolutionary relationship is unknown. hence, our coveragecalculator takes all reported results into account and thus is not overestimating the “real” coverage by skipping unknown but real false positive relations within the same fold. since the true evolutionary relationship between the superfamilies is not known, this may underestimate the “real” coverage, but consistently assumes that all superfamilies are not related. hence, the coverages reported here, represent the lower bound for substitution matrix performance.

in our study, we set the maximum number of errors to  <dig>  epq in accordance with previous studies  <cit> . this corresponds to a maximum of one false positive relation identified per  <dig> queries on average for the entire database. for example, the search results of astral <dig>  <dig>  database with its  <dig> sequences are filtered to contain no more than  <dig> false positives in total.

in order to evaluate the statistical significance of the performance results for the tested matrix/gap combinations, we used concerted bayesian bootstrapping  <cit> , where sequence weights are derived from a dirichlet distribution. this method effectively analyzes the influence of slight changes in the database composition on the resulting coverage values. applying the quadratic coverage normalization to the concerted bayesian bootstrapping yields the following equations for one bootstrap: 
  q^i=∑j=1si∑m=1njδwjwm 

  wi=∑k=1si∑l=1siwkwl−∑k=1si <dig> 

  q^quad=1s∑i=1sq^iwi 

in eq. 2a, wj represents the weight of the jth query sequence of superfamily i. θj represents its superfamily annotation. likewise, θm denotes the superfamily of the mth query results for the jth sequence with the weight wm. δ is the kronecker delta, returning  <dig> if θj and θm are equal, i.e. if both sequences are members of the same superfamily, and zero otherwise. nj is the number of homologs found for the query sequence and si denotes the sequence count of the ith superfamily.

thus, eq. 2a describes the unnormalized coverage for the ith superfamily — all found “true positive” relations. equation 2b is the quadratic normalization for the ith superfamily, i.e. all possible positive interactions for the ith superfamily. summing over all relative coverages for the s-numbered superfamilies  returns the quadratic normalized coverage for a single bootstrap.

the significance of the coverage difference of two matrix/gap combinations is tested by calculating a z-score from a two-sample parametric means test using the variance from the two corresponding bootstrap distributions  <cit> . hereby, the z-score measures the significance of the difference of the two underlying distributions . 
  zp,q=q¯p−q¯qσp2+σq2n 

for two different matrix/gap combinations p and q, q¯p and q¯q represent the mean of the bootstrap coverages calculated for the pth and qth matrix/gap combinations at an errors per query  of  <dig> . σp <dig> and σq <dig> correspond to the variance of the underlying bootstrap coverage distributions. n represents the number of bootstrap rounds.

in our study, we set the number of bootstrap rounds for each matrix/gap combination to  <dig> as previously suggested  <cit> . we consider differences with z≥ <dig>  as significant which corresponds to the  <dig>  percentile.

RESULTS
matrix differences
in order to assess the impact of the code corrections  we derived all three matrix variants from the here tested blocks versions using the same clustering value. exemplary, fig.  <dig> highlights the difference in the respective matrix entries for a clustering value of  <dig>  here, we can clearly see numerous changes between the matrices created by the three algorithms. while differences for blocks  <dig> based substitution matrices are in the range of − <dig> to  <dig>  blocks 13+ and blocks  <dig>  based matrices can differ to a much greater extend  eventually implying a  <dig> fold change in frequency counts. thus, changes in the matrices cannot exclusively be related to rounding issues, indicating substantially different algorithms.
fig.  <dig> comparison of matrix entries using the same clustering value  <dig>  shown are the differences of blosum <dig> and rblosum <dig> to corblosum <dig> for blocks  <dig>  blocks 13+ and blocks  <dig> . blue tiles represent matrix entries where the respective corblosum <dig> values are larger than entries of the compared matrix. red tiles represent the opposite. while differences for blocks  <dig> based substitution matrices only range from − <dig> to  <dig>  the range of these differences is substantially larger for newer blocks versions



to properly assess the performance difference between the three different substitution matrix types it is necessary to observe their capabilities at a similar relative entropy level  <cit> . here, we compared for example the blocks  <dig> based matrices corblosum <dig>  <dig> , blosum <dig>  <dig>  and rblosum <dig>  <dig>  . on one hand, a total of  <dig> matrix entries are different between the corblosum <dig>  <dig>  and blosum <dig>  <dig>  , with  <dig> entries being reduced . on the other hand, only  <dig> entries differ between corblosum <dig>  <dig>  and rblosum <dig>  <dig> , with three entries being larger in absolute value. the comparison of the matrices comparable to blosum <dig>  <dig>  is shown in additional file 3: figure s <dig>  the smaller number of differences between rblosum <dig>  <dig>  and corblosum <dig>  <dig>  are not unexpected, as the rblosum correction is also included in the corblosum algorithm. however, the number of differences between corblosum and rblosum type matrices increases for other blocks versions. the large differences between corblosum- and blosum-type matrices observed for blocks  <dig> can also be observed for the other two blocks releases. the complete overview of differences for all entropy levels assessed in this paper is given in additional file 4: figure s <dig> and additional file 5: figure s <dig>  the comparison of matrices based on a similar entropy level further highlights that the three algorithms create substantially different substitution matrices.
fig.  <dig> comparison of corblosum <dig>  <dig>  with blosum <dig>  <dig>  and rblosum <dig>  <dig> . differences between corblosum <dig>  <dig>  and blosum <dig>  <dig>  are displayed in the lower triangle and those between corblosum <dig>  <dig>  and rblosum <dig>  <dig>  in the upper triangle, with corblosum <dig>  <dig>  values shown. light gray tiles represent entries where the corblosum <dig>  <dig>  matrix is one log-odd score point higher than the compared matrix, whereas dark gray represent a one point lower score of corblosum <dig>  <dig>  matrix. noticeably, the corblosum correction introduces further changes into the rblosum <dig>  <dig>  matrix  which results in numerous value adjustments when compared to the blosum <dig>  <dig>  matrix 



general matrix performance overview
using the above described benchmarking method we compared the different matrix variants blosum, rblosum and corblosum. the achieved coverage values for these matrices and their respective best gap parameter settings are shown in fig.  <dig>  additional file 6: figure s <dig> and additional file 7: figure s <dig>  for all test scenarios we consider performance differences with z-scores < <dig>  as insignificant and thus assume matrix performance to be almost equal. in cases where the coverage difference between a blosum- and corblosum-type matrix is insignificant as denoted by its corresponding z-score value, an o is displayed above the bar. for the corblosum/rblosum comparison, we highlight this with a small x. the underlying z-scores for estimating the significance of these coverage differences are shown for completeness in additional file 8: figure s <dig>  additional file 9: figure s <dig> and additional file 10: figure s <dig> 
fig.  <dig> progression of the maximum achieved coverage of corblosum-, rblosum- and blosum-type matrices for all astral <dig> test databases. the upper row shows the results for the respective blosum <dig> entropy level, the lower row for blosum <dig> entropy level. insignificant coverage differences between corblosum and blosum are indicated by an o and between corblosum and rblosum by a small an x above the bars. the corresponding gap parameter settings are listed in additional file  <dig>  notably, the coverage increases for all tested substitution matrices dramatically with the introduction of the semi-automatic database generation of scope. for the blosum <dig> entropy level, corblosum-type matrices performed at least as good as their blosum counterparts in ∼ <dig> % of all tested scenarios and in ∼ <dig> % showed a similar or better performance than the rblosum-type matrices. for the blosum <dig> entropy level corblosum matrices showed equally as good or better performance than blosum in ∼ <dig> % while improving performance over rblosum in ∼ <dig> % of all analyzed astral <dig> scenarios



in order to obtain a general overview, we counted the number of times a specific corblosum matrix performed equally or better than its corresponding blosum counterpart. considering all test scenarios, substitution matrices computed with the corblosum algorithm performed at least as good as their blosum counterparts in ∼ <dig> % of the time. on scope based astral releases this percentage increased to ∼ <dig> %.

since we cannot directly compare the performance of substitution matrices derived from different blocks versions due to their relative entropies, we compared the performance of each substitution matrix on all three similarity based astral subsets in identical manner to the above described. cases where corblosum matrices performed at least as good as their corresponding blosum variants derived from the three different blocks versions are shown in percent in table  <dig>  here, the corblosum matrices performed better than the blosum matrices with one interesting exception, the original blosum <dig>  <dig>  matrix. this matrix still performed better than its corblosum <dig>  <dig>  counterpart in most of the cases on the astral <dig> and astral <dig> subsets.
shown in percent is the relative frequency for which a corblosum matrix performed at least as good as its blosum counterpart



although, the achieved coverage range differs widely between the astral <dig>  astral <dig> and astral <dig> subsets, our results show a specific performance pattern within each identity subset regardless of the blocks version and entropy level used for the computation of the matrices. for astral <dig> and astral <dig>  the coverage increases drastically for astral versions based on scop  to those based on scope . interestingly, this trend cannot be observed for astral <dig>  in the following sections, we discuss the matrix performances on each of the three different similarity based astral subsets in detail.

matrix performance on astral40
the resulting coverage values for all tested astral <dig> versions and substitution matrices are shown in fig.  <dig>  the reported values reflect the respective best matrix / gap parameter combinations. the z-scores representing the statistical significance of the coverage differences are shown in additional file 8: figure s <dig> 

for the astral <dig> subset, a general performance trend can be observed for all assessed relative entropy levels. starting from astral release  <dig>  the performance increases steadily until astral  <dig> , the database used by styczynski et al. to measure the rblosum performance. here, a drastic drop in the coverages can be observed. from astral  <dig>  the coverages continue to steadily increase with a very large increment upon the introduction of scope at astral  <dig> . the highest coverage over all entropy levels, blocks versions and astral releases was obtained for corblosum <dig>  <dig>  on astral  <dig>  with a coverage of  <dig>  at a gap open/extension penalty of 15/ <dig> 

for blocks  <dig> derived substitution matrices at a matrix entropy level of ∼ <dig>  bit, the original, inaccurate blosum <dig>  <dig>  dominates the corrected variants for nearly every astral release but the newest three. for these, corblosum <dig>  <dig>  and rblosum <dig>  <dig>  performed at least as well as blosum <dig>  <dig>  at a statistical significant level. our results for the astral  <dig>  database are in concordance with the results published in the rblosum study  <cit>  — i.e. the blosum <dig>  <dig>  significantly outperforms the rblosum <dig>  <dig> . interestingly, the used blocks version significantly influences this performance difference as rblosum matrices derived from blocks 13+ and blocks  <dig>  outperform their blosum counterparts.

the corblosum <dig>  <dig>  showed higher coverages than the blosum <dig>  <dig>  for all databases but the oldest astral and the oldest scope derived astral databases  <dig>  and  <dig> . in general, blosum <dig>  <dig>  entropy level matrices achieve higher coverages than those at the blosum <dig>  <dig>  entropy level. this cannot be observed for blocks 13+ and blocks  <dig> .

for these, the corblosum <dig> 13+ and corblosum <dig>  <dig>  consistently outperformed their blosum counterparts on all test databases. corblosum <dig> 13+ and corblosum <dig>  <dig>  achieved a coverage at least as high as the blosum in ∼ <dig> % of the tested scenarios. for all scope derived astral datasets corblosum substitution matrices outperformed their respective blosum variant.

the comparison between corblosum- and rblosum-type matrices showed overall mixed results. notably, corblosum matrices derived from blocks 13+ and blocks  <dig>  achieved higher coverages than rblosum matrices in ∼ <dig> % of the analyzed scope based datasets.

matrix performance on astral <dig> and astral70
overall, the matrix performances on the astral <dig> subset showed the highest coverages followed by astral <dig> and astral <dig>  on the latter the reported coverage values are well below  <dig>  which indicates that all tested substitution matrices do not perform well on diverse sequence datasets.

while the coverage trend in respect to the astral releases on the astral <dig> subset is similar to astral <dig>  a very different trend can be observed for the astral <dig> subset . on scope based astral <dig> releases corblosum matrices outperformed their blosum counterparts in ∼ <dig> % of the test datasets, over all blocks versions and entropy levels. similarly, on the astral <dig> subset corblosum variants achieved a rating of ∼ <dig> % in comparison to blosum at the blosum <dig> entropy level. on the blosum <dig> entropy level corblosum outperformed blosum in ∼ <dig> % of the times. a detailed discussion of the matrix performance on the astral <dig> and astral <dig> subsets is given in additional file  <dig> 

CONCLUSIONS
in this paper, we presented an additional error correction to the blosum code resulting in a new and significantly different matrix computation algorithm. the matrices created by our corblosum algorithm are substantially different from blosum matrices and outperformed the original blosum matrices in ∼ <dig> % of all  <dig> test scenarios. on up-to-date scope based astral releases, the current gold standard for homology search performance assessment, the corblosum matrices outperformed their blosum counterparts in ∼ <dig> % of the cases. on these databases, the corblosum matrices also achieved the highest reported coverages for all three astral similarity subsets when compared with their blosum counterparts.

the aim of this study was not to assess optimal parameters for homologous sequence search, such as the best matrix/gap-parameter combination. nevertheless, this is an interesting question which should be addressed in the future, especially since our study showed that the relative entropy of substitution matrices is not necessarily an indicator for matrix performance.

our results for the blosum <dig>  <dig>  vs. rblosum <dig>  <dig>  setup concur with previous findings  <cit> . there, the test covered only a very specific scenario  in which the rblosum <dig>  <dig>  was outperformed by the blosum <dig>  <dig> . these previous results would have been quite different if at that time other available blocks and astral databases had been used. rblosum matrices tested in this study performed in most of the times equally or better than their blosum counterparts. our study showed that for the rblosum/corblosum comparison no consistent trend can be observed for older astral releases prior to  <dig> , as rblosum and corblosum matrices each being superior in ∼ <dig> % of the cases. however, on databases with increased sequence and structure space coverage — as provided by scope based astral versions — corblosum-type matrices achieved higher coverages than the rblosum matrices in ∼ <dig> % of the tests.

furthermore, our study revealed two contradicting effects: on the one hand, matrices with very similar entropies show a statistically significant differing performance. on the other hand, we also showed that matrices with very different entropies and matrix scales can achieve similar coverages. the latter effect is apparently enhanced by increasing sequence similarity within superfamilies and the database itself. this raises an interesting question for further research on the influence of changes in database composition on its respective searchability. we conclude that the corblosum algorithm introduced here fixes errors of the original blosum implementation and that the resulting matrices perform better for homologous sequence search. hence, we encourage the usage of corblosum matrices for this specific task.

availability of data and material
the astral databases supporting the conclusions of this article are available at http://scop.berkeley.edu/astral/. the reported coverage values supporting the conclusions of this article are included within the article and its additional files. the matrices discussed in this article are available at http://www.cbs.tu-darmstadt.de/corblosum.

information about the coveragecalculator tool:project name:coveragecalculatorproject home page:http://www.cbs.tu-darmstadt.de/corblosumoperating system: linux programming language: c++11other requirements: openmp  <dig> license: gnu gplv3

additional files
additional file  <dig> detailed description of the corblosum error correction with analysis of its impact related to blocks  <dig> and blocks  <dig>  database composition. furthermore, a detailed discussion of the matrix performances on astral <dig> and astral <dig> subsets is given. 



additional file  <dig> list of best performing matrix/gap parameter combinations. 



additional file  <dig> 
figure s <dig>  plot of the differences in entries for blosum <dig>  <dig> , rblosum <dig>  <dig>  and corblosum <dig>  <dig>  with similar entropy. differences of corblosum <dig>  <dig>  and blosum <dig>  <dig>  displayed in the lower triangle and of corblosum <dig>  <dig>  and rblosum <dig>  <dig>  in the upper triangle, with corblosum <dig>  <dig>  values shown. light gray tiles represent entries where the corblosum <dig>  <dig>  matrix is one log-odd score point higher than the compared matrix, whereas dark gray represent a  <dig> point lower score of corblosum <dig>  <dig>  matrix. white squares represent entries where the corblosum <dig>  <dig>  is two points higher than the compared matrix. noticeably, the corblosum correction introduces further changes into the rblosum <dig>  <dig>  matrix  which results into numerous value adjustments when compared to the blosum <dig>  <dig>  matrix . 



additional file  <dig> 
figure s <dig>  comparison of all analyzed corblosum matrices with their corresponding counterparts for all three blocks databases at their respective blosum <dig> entropy level. entries for which the corblosum is higher than the compared matrix are displayed in blue and red vice versa. white entries symbolize no change in value. noticeably, the corblosum-type matrices differ to a great extend from the blosum-type matrices, while the changes between corblosum and rblosum are fewer but still numerous. 



additional file  <dig> 
figure s <dig>  comparison of all analyzed corblosum matrices with their corresponding counterparts for all three blocks databases at their respective blosum <dig> entropy level. entries for which the corblosum is higher than the compared matrix are displayed in blue and red vice versa. white entries symbolize no change in value. compared to additional file 4: figure s <dig> the differences of the corblosum-type matrices to blosum-type matrices increase in number and extend, while the frequency of changes compared to rblosum is similar. 



additional file  <dig> 
figure s <dig>  progression of the maximum achieved coverage of corblosum-, rblosum- and blosum-type matrices for all astral <dig> test databases. the upper row shows the results for the respective blosum <dig> entropy level, the lower row for blosum <dig> entropy level. an insignificant coverage difference between corblosum and blosum is indicated by an o and between corblosum and rblosum by an x. the corresponding gap parameter settings are listed in additional file  <dig>  similar to the astral <dig> test scenarios, a drastic increase in coverage can be observed for scope based astral databases. for the blosum <dig> entropy level, corblosum-type matrices performed at least as good as their blosum counterparts in ∼ <dig> % of all tested scenarios and in ∼ <dig> % showed a similar or better performance than the rblosum-type matrices. for the blosum <dig> entropy level corblosum matrices showed equally as good or better performance than blosum in ∼ <dig> % while improving performance over rblosum in ∼ <dig> % of all analyzed astral <dig> scenarios. 



additional file  <dig> 
figure s <dig>  progression of the maximum achieved coverage of corblosum-, rblosum- and blosum-type matrices for all astral <dig> test databases. the upper row shows the results for the respective blosum <dig> entropy level, the lower row for blosum <dig> entropy level. an insignificant coverage difference between corblosum and blosum is indicated by an o and between corblosum and rblosum by an x. the corresponding gap parameter settings are listed in additional file  <dig>  the blosum <dig> entropy level substitution matrices derived from blocks 13+ and blocks  <dig>  consistently achieved higher coverages than those on the blosum <dig> entropy level. for the blosum <dig> entropy level, corblosum-type matrices performed at least as good as their blosum counterparts in ∼ <dig> % of all tested scenarios and in ∼ <dig> % showed a similar or better performance than the rblosum-type matrices. for the blosum <dig> entropy level corblosum matrices showed equally as good or better performance than blosum in ∼ <dig> % while improving performance over rblosum in ∼ <dig> % of all analyzed astral <dig> scenarios. 



additional file  <dig> 
figure s <dig> 
z-scores for the coverage comparison of corblosum with blosum and rblosum based on bayesian bootstrap for the astral <dig> datasets. 



additional file  <dig> 
figure s <dig> 
z-scores for the coverage comparison of corblosum with blosum and rblosum based on bayesian bootstrap for the astral <dig> datasets. 



additional file  <dig> 
figure s <dig> 
z-scores for the coverage comparison of corblosum with blosum and rblosum based on bayesian bootstrap for the astral <dig> datasets. 



competing interests

the authors declare that they have no competing interests.

authors’ contributions

mh, fk, mg and kh jointly conceived the concept of the paper. mh and fk performed the data acquisition, analysis and manuscript and supplement preparation. kh and mg supervised the work and edited the manuscript. code implementation was performed by mh and fk. fk prepared the figures. all authors discussed the results and implications and commented on the manuscript on all stages. all authors read and approved the final manuscript.

