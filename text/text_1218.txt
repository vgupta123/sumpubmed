BACKGROUND
crispr-cas  systems are adaptive immune systems in prokaryotes that provide protection from foreign genetic material, such as bacteriophages and plasmids. specificity is provided by short noncoding rnas  that recognise the invading dna or rna. these noncoding rnas are derived from crispr arrays that possess near identical direct repeats, typically 21– <dig> bases long, punctuated by short non-identical ‘spacers’ that provide the immune ‘memory’ of these systems. . crispr-cas function requires a suite of cas proteins encoded by cas genes, which are often located nearby the crispr loci .

analysis of crispr-cas systems requires the detection of crispr arrays and their entire complement of spacer sequences. the computational recognition of crisprs has been approached in a number of different ways. initially, crisprs were predicted by genomic pattern matching programs such as patscan  <cit> . then, to facilitate crispr prediction and analysis, a number of tools were developed, including both command-line executable programs  and web-applications   <cit> . recently, crispr prediction has been extended to metagenomic data .

the current prediction approaches have limitations, particularly in distinguishing crisprs from other types of repeats. in addition, many arrays show some mutation , particularly at the 3’ end. better approaches are needed to identify and represent these events. a drawback of the existing methods is that predictions do not fully utilise the available biological information. current methods mainly rely on sequence similarities  in the repeats and spacers with predefined parameters, and do not search for key features of crisprs. for example, insertion, deletion and multiple point mutations may occur, then be propagated through subsequent repeats during duplication, or a portion or whole repeat and/or spacer could be deleted through recombination . furthermore, most of the existing programs fail to detect short or degenerate crispr arrays. setting the parameters with high sensitivity may include these but will also lead to the identification of many non-crispr genomic repeats. finding the true positives from such a large list of short crispr-like regions is laborious.

crispr arrays expand by duplication of the repeats and acquisition of spacers from the invading dna  <cit> . this repeat duplication and spacer integration typically occurs at the leader end  of the array  <cit> , although internal spacer acquisition can occur  <cit> . repeats and spacers can also be lost by mutation, through small and large insertions or deletions, or recombination  <cit> . in addition, modelling has indicated there is a dynamic flux between acquisition and loss, driven by mutation and selection  <cit> .

most commonly used prediction tools do not assign strand or directionality to crispr arrays as part of the automated prediction process, resulting in roughly half of arrays being reported in the incorrect orientation. however, recent tools allow determination of crispr direction as a post-prediction step on arrays , or repeat direction after array prediction   <cit> . these developments have shown that the repeats can indicate the direction of crispr transcription . for example, conserved sequence motifs ) at the 3’ of some repeats, are an indicator of the transcriptional direction  <cit> . therefore, it is important to accurately predict the repeat/spacer boundaries while predicting crisprs to correctly assign direction. in addition to sequence motifs, crisprdirection uses a range of predictive factors to determine array direction  <cit> . defining direction is important to accurately identify spacers, since they are used to find their cognate dna or rna targets   <cit> . since spacers are short , it is difficult to identify true targets and every additional correctly annotated nucleotide  assists target detection. in type i, type ii and type v systems, the bases at one end of the spacer are usually part of a ‘seed’ sequence, that is critical for base-pairing, target recognition and interference . similarly, it is important to correctly identify the precise ends of the spacers to enable accurate prediction of important motifs flanking the protospacer, termed protospacer adjacent motifs   <cit> . pams are essential for target/non-target discrimination, so knowing their precise location is critical for identifying biologically relevant targets.

towards the leader-distal  end of crispr arrays, repeat mutations can accumulate. furthermore, insertions and deletions can occur, especially in the 3’ end of crispr arrays  <cit> . these sequence deviations  mean that the 3’ ends of crispr arrays are often incorrectly detected. piler-cr is currently the only program that handles insertions and/or deletions in repeats. the inability to detect these events means that we still have limited knowledge about how arrays degenerate to balance nascent spacer acquisitions at the leader end. the directional incorporation of new spacers implies a particular evolutionary history and can be used successfully in strain typing and evolutionary studies  <cit> . therefore, it would be informative if crispr detection provided a potential extension with lower repeat identity to test if degenerated, but still recognisable, repeats are present in the leader-distal end of the array.

here, we developed crisprdetect, a web-based and command line tool, that enables accurate identification of crispr arrays in genomes, their direction, repeat spacer boundaries, substitutions, insertions or deletions in repeats and spacers and lists cas genes that are annotated in the genome. this data is combined into a searchable database, crisprbank, currently version  <dig> . spacer outputs from crisprdetect can then be directly used to search for targets in viral and other sequence databases using the linked tool, crisprtarget  <cit> .

implementation
figure  <dig> shows a schematic overview of the crispr identification and refinement process. most existing tools identify crisprs using a default word length  and minimum repetition . by default, crisprdetect searches with > <dig> repeats and a word length of ≥ <dig> for a faster identification process, but it also allows identification of crispr arrays with only two repeats  with a word size > <dig>  crisprdetect uses five main processes to analyse a putative crispr:  <dig>  repeat detection to give putative crisprs,  <dig>  removal of crispr-like tandem repeats,  <dig>  refinement,  <dig>  determination of direction and similarity to characterised repeat families and  <dig>  quality scoring.fig.  <dig> the crisprdetect automated pipeline. the modules that make up the pipeline are shown. in some cases there is an iterative repeat of processes, . see crisprdetect.pl for details. the interactive web implementation allows dynamic alteration of the parameters to suit the particular crispr array and genome



detection of putative crisprs
crisprs are initially identified as two short stretches of identical sequences separated by a dissimilar short sequence. since the shortest length of experimentally verified crispr repeats are about 23 nt  <cit> , by default, we used a much shorter minimum word size of  <dig>  however, crisprdetect can be run with word sizes > <dig>  the minimum and maximum space  between words are calculated using the following formulae. minimumspacebetweenrepeatingwords=30–repeating-word-length  maximumspacebetweenrepeatingwords=125+repeating-word-length 

the idea of not using fixed minimum and maximum lengths is to reduce user input as well as maintaining the speed. as the shortest verified repeat length is longer than 20 nt, this approach will ensure that crisprdetect will not miss any potential crispr. the default 11 nt word size ensures that potential shorter repeat  with multiple base mismatches will be detected, while not compromising on speed for a typical bacterial or archaeal genome. this is done using regular expressions implemented in perl.

removal of tandem repeats
the genomic regions containing the putative crisprs were analysed to identify repeats. using the repeating word, the genomic regions are divided into sequence segments with every segment beginning with the repeated word. these repeated words are then aligned using clustalw  <cit>  and used to try and increase the initial repeat length of likely arrays as well as to eliminate simple tandem repeats. for the “spacers” of the putative crisprs that have < <dig> unaligned columns , the putative crispr are marked as clear tandem repeats and discarded.

refinement of the putative crispr
crisprdetect supports eight independent refinement subroutines. these methods are used by default and applied in the specified order. figure  <dig> shows the schematic diagram of the crisprdetect analysis pipeline, which is detailed in the following sections. however, each of these methods can be applied independently in an interactive manner to one or all crisprs using the crisprdetect web-server.

extending the repeat end
mutations at the ends of repeats may result in part of the repeat being included in the adjacent spacer sequences . crisprdetect progressively extends the repeat on both sides, comparing the bases from adjacent columns with minimum column identity by default of 75 % . therefore for two or three repeats perfect identity is required, for four to seven one mismatch allowed, for eight two, and so forth.

short repeats predicted initially may be bounded by a single column with low  identity, but followed by columns with high identity. crisprdetect uses an adaptive method to extend the repeat if required, where instead of using only the primary column identity as a cutoff , it also uses an additional lower, ‘alternate column identity’ permitted for one column. the ‘alternate column identity’ is by default 50 % for arrays < <dig> repeats and 40 % for longer arrays. it is applied when a column has greater than the ‘alternative column identity’ but is followed by two or more columns with identity higher than the primary column identity . the permitted minimum gap between newly identified repeats and existing repeats is  <dig> nucleotides to address total spacer loss, and the default upper limit is  <dig> nucleotides. the flanking region is compared with the smith-waterman algorithm  with an increasing gap-penalty  to identify the best non-gapped alignment. once such an aligned region is identified, the region is extended either side accordingly, to match the representative repeat length. it is then further checked to ensure that the minimum repeat identity  is met , and for all valid matches, a new repeat-spacer set is added to the array. this process is by default a dynamic one with the comparison being made to the adjacent repeat.

refine the repeats
initial repeat prediction may consist of additional bases at the ends that correctly belong to the spacers. this is due to situations where the first or last base of multiple spacers is nearly identical in an array. crisprdetect utilises a set of methods ) found in the end of repeats, repeat end region degeneracy ) to predict the correct repeat/spacer boundary. in the interactive mode, users can trim both sides of the repeats by any number of bases, as long as the repeat retains the minimum word length specified in the parameters for initial array prediction.

trim the array - remove repeats that match poorly the representative repeat
highly degenerated repeats can be falsely included after dynamically extending the crisprs, for example, if  <dig> repeats were added successively with 67 % identity the final repeat would have 45 % identity to the first. repeats can be removed by requiring a minimum percentage identity between the representative repeat and terminal repeats. trimming stops when a repeat has an identity above the cutoff  or the minimum number of repeats  specified is reached. this enables the user to have a simple means to remove sequences that are incorrectly assigned as degenerate repeats.

correct gaps at repeat ends
after the initial repeat and spacer prediction, the repeat may contain terminal gaps or additional bases from the spacer, which can also make the spacer prediction incorrect. to refine the ends of the repeat, crisprdetect uses matching bases from the initially predicted spacer. for terminal insertions, the bases are labelled as insertions.

representation of insertions in a small number of repeats of an array
during alignment of the repeats, insertion of base may have been identified. this results in introducing gap in the visualisation of other repeats, including the representative repeat. to avoid these visual gaps in columns, crisprdetect denotes inserted bases as insertions in the array, which prevents the need to insert a gap character in the representative repeat .

identify mutated repeats in sequences initially predicted to be long spacers
when a substantial portion of a repeat and/or a repeat-spacer junction is deleted, the repeats fail to retain the minimum percentage identity and could be erroneously added to the next spacer, making these spacers appear unusually long. crisprdetect looks for such cases where the spacers are longer than the median spacer length with a user given minimum percentage identity between the representative repeat and the whole spacer, revealing not only partial repeat deletion, but also partial and/or total spacer deletion. these insertions and deletions are labeled in the output.

predicting direction
the direction of a crispr is predicted using the crisprdirection algorithm  <cit> . the arrays predicted in the reverse direction are automatically reverse complemented . in the crisprdetect output, those that have been reversed are labelled accordingly.

predicting crispr-cas type
to give an indication of the crispr-cas type , two independent methods are used. firstly when the representative repeat matches a known repeat that has been associated with a particular type of crispr-cas system  the type is indicated in the output. the reference set of validated repeats is also utilised in correcting repeat boundaries, scoring and validation of the arrays . second if genomic annotation information is available , crisprdetect utilises the presence of annotated signature cas genes  in the genome. the output lists all of the crispr-cas type reported in the genbank file.

scoring the quality of the predicted arrays
a scoring system gives each predicted array a score based on known biological properties. each parameter has a positive or negative score and these are summed. these scores are detailed in additional file 1: s <dig> and include:  <dig>  the presence of annotated cas <dig> or cas <dig> genes in a gbk or gbff file ;  <dig>  a close match to known or confidently predicted repeats ;  <dig>  specific sequence motifs at the 3’ end ;  <dig>  a metric for identity within the repeats ;  <dig>  a penalty for dissimilar repeats ;  <dig>  metrics for the representative repeat length ;  <dig>  metric for spacer length ;  <dig>  a penalty metric for identity among the spacers  and  <dig>  a penalty metric for dissimilarity among the repeats . each of these scores is listed in the output. a final score for each crispr array is determined by summing all the scores from the individual methods. the crisprs with negative scores are discarded, and the remaining crisprs are listed in order of position on the genome. arrays with scores above  <dig>  were classified as good quality based on comparison to the scores of arrays from experimentally validated species.

RESULTS
overview
we aimed to develop a tool for improved detection of crisprs. crisprdetect was constructed to facilitate the identification and visualisation of the correct orientation of crisprs, spacer-repeat boundaries, substitution, insertion and deletion mutations, repeat similarity and the presence of cas genes in the genome. we define ‘true’ crisprs as experimentally determined arrays and ‘putative’ crisprs as those predicted computationally by crisprdetect or other methods. putative crisprs are classified by crisprdetect as ‘good’, based on quality scoring criteria , or ‘questionable’  . the most common repeat for each array is termed the representative repeat. the overall crisprdetect process is shown in fig.  <dig> 

crisprdetect was run on  <dig> complete bacterial and archaeal genomes from genbank/genomes . this set of genomes was chosen to be comparable to that available for crisprfinder/crisprdb online . using the default settings, a total of  <dig> crisprs were found, of these  <dig>  were classified as ‘good’ arrays with a score of ≥ <dig> , repeats ≥ <dig> and minimum repeat length ≥ <dig>  these arrays are further analysed here. there were  <dig>  arrays flagged ‘questionable’ with scores ≥  <dig> and < <dig> . of these,  <dig> were further flagged as ‘potential tandem repeats’.

crisprdetect modules performed iterative refinements on the arrays . of the repeats in  <dig> arrays, 12 % were not identical to the representative repeat, with  <dig> below 70 %, and  <dig> below 80 % identity. about half  were corrected in direction by crisprdetect and  <dig> of these were corrected with high confidence . one hundred and sixty arrays were flagged as likely direct repeats  and are all ‘questionable’ arrays.

we compared these  <dig> ‘good’ arrays to those predicted by three existing programs using their default parameters. a table of features in crisprdetect compared with crt, piler-cr and crisprfinder is presented in additional file 1: table s <dig>  crispi was not tested as it is available online in an interactive mode only. crt predicted  <dig>  piler-cr  <dig> and crisprfinder  <dig> good crispr arrays .fig.  <dig> crisprdetect predictions for e. coli k-12- text output. crisprdetect identifies two crispr arrays in a k- <dig> genome, corresponding to the well characterised crispr  <dig>  and  <dig>  loci. this genome is provided as one of the test sets at http://bioanalysis.otago.ac.nz/crisprdetect/. crisprdetect output. e. coli arrays - both arrays are reverse-complemented in the crisprdetect prediction  a crispr  <dig>  the array section of the crisprdetect output is shown, showing base differences e.g. a. tt mutations in the repeat toward the predicted 3’ end. b. the full output is shown, and specific features are in bold. for crispr  <dig>  the reference repeat match also permitted inclusion of the experimentally verified last base  in the repeat, although it varies in two of six repeats . the score is high  and the components are shown below. the directional analysis gives a ‘high’ confidence for the reverse orientation as shown. the cas genes identified in the ‘.gbk’ file are listed as are the signature genes for any family present . c. crisprfinder prediction for e. coli crispr  <dig>  for comparison. prediction obtained from crisprdb predicted by crisprfinder



all programs predicted  <dig> common arrays . crisprdetect showed the highest concordance with piler-cr and crt . compared with the other methods crisprdetect predicted an additional  <dig> arrays. all arrays with scores > <dig> could be further analysed if desired . arrays can be selected for analysis by using a user selected cutoff score .

arrays predicted using crisprdetect with similar settings to those used by crisprdb  were found in 75 % of archaeal genomes  and 45 % bacterial genomes . for crisprfinder/crisprdb the percentages of archaeal and bacterial genomes with predicted ‘convincing’ crispr structures are currently 83 % and 45 %.

each of the other programs reported arrays that were not predicted when using the default settings for crisprdetect . there were only  <dig> arrays predicted by the other three tools and not by crisprdetect. these arrays had between  <dig> to  <dig> repeats and all were predicted by crisprdetect, but had lower confidence scores. these arrays had scored lower, typically due to high similarity in spacers, or high numbers of mismatches in the repeats.

we used crisprdetect to determine the range of sizes of repeat and spacers . to minimize potential skew from overrepresented strains belonging to the same species in the databases, one strain from each species was analysed, and the length of the representative repeat and average spacer length determined. when compared with the same analysis performed on all arrays, there is no significant difference in the distribution . the length of most repeats  are 24-37 nt and they can be classified into three major size ranges   <cit> . in contrast, there was a wide variation in spacer length across all genomes, but 97 % of the spacers are 29–43 nt . the most common spacer lengths are 32–37 nt in bacteria and 35–40 nt in archaea. these repeat classes are differently represented in archaea and bacteria. small repeat  are common in archaea  but not in bacteria . in bacteria, the large class is more common . each range contains some repeat similar to experimentally determined crispr repeats. a new class including forty-four ‘extra large’ bacterial repeats  is well supported by our predictions . this class was previously noted as associated with type ii-c proteins  <cit> . most are in the order flavobacteriaceae within the phylum bacteroidetes and include capnocytophaga canimorsus  47 nt,  <dig> repeat; riemerella anatipestifer species  47 nt, 11– <dig> repeats; weeksella virosa  50 nt,  <dig> repeats. these arrays typically are adjacent to annotated cas <dig>  cas <dig> and cas <dig> genes, and approximately half of these repeat have similar sequences at the 3’ end . to see if prior analyses had omitted short repeats of genuine crisprs, we lowered the length restriction during detection. crisprdetect predicted  <dig> short repeats in bacteria and archaea with sizes < <dig> . however, all but one are short arrays with typically less than  <dig> repeats, further experimental evidence would be required to determine if these are functional. across all crisprs, the array with the greatest number of repeats is from the marine bacterium haliangium ochraceum with  <dig> repeats of 36 bp .fig.  <dig> crisprdetect web output. an example of a predicted and automatically refined array from cronobacter sakazakii es <dig>  which has  <dig> repeats, the last of which has degenerated. options a-i are available for further interactive application of the selected processes to the selected array . the array is shown in a standard format with substitutions in the repeat sequence shown. insertions in one a repeat is indicated at the right. the quality score is high  <dig>   and the score would be detailed in the next lines . a link to crisprbank and initial analysis is shown in the top right and indicates that this exact repeat is found in five genomes . the annotation file in gff can be downloaded for visualisation or further analysis 



it is possible for crispr arrays with only  <dig> ‘repeat’ and a portion of the leader to function for adaptation  <cit> . for common putative crisprs with only  <dig> repeats, they are flagged as ‘questionable’ by crisprfinder, and are not predicted by default by crt or piler-cr, as they would introduce many false positives. crisprdetect is able to discriminate between false positive and genuine crispr arrays by characterising the repeat and other scores. crisprdetect predicted an additional  <dig> arrays with just two repeats with score ≥ <dig> . although none of these putative crisprs had a known reference repeat,  <dig> had the signature attgaa sequence at the 3’ end so are likely new or divergent repeat sequences.

algorithms to refine the structures of arrays
the abovementioned benefits of using crisprdetect over other currently available software are nicely illustrated by analysis of escherichia coli . crisprdetect predicts two ‘good’ crisprs near  <dig>  mb on the genome  . these arrays are well characterised experimentally  <cit> . all previous programs made array predictions in the incorrect  orientation and inaccurately predict the repeat boundary for crispr <dig>   by missing an incompletely conserved repeat base g on the 3’ end . this g has been experimentally shown to be an incompletely conserved part of the repeat  <cit> . crisprdetect automatically corrected the direction  and the repeat boundaries . the boundaries were automatically corrected in the step where the representative repeats are compared to the library of known repeats . the orientation and boundary corrections result in the precise spacer length and sequence identification, facilitating accurate subsequent analyses of protospacers, their target strand and their pams. finally, identification of the likely crispr-cas types  was made by the presence of signature cas genes  <cit>  in the annotated genome .fig.  <dig> comparison of the number of crispr arrays predicted by three existing methods compared with crisprdetect. arrays with three or more repeats, and for crisprdetect a good quality score  and ≥ <dig> base repeat were counted



insertion/deletion in repeats and spacers
insertions, deletions and substitutions can occur in repeats and may be copied into new repeats during spacer acquisition  <cit> . crisprdetect detects repeat mutations, including insertions, deletions and substitutions. of the existing tools, only piler-cr represents substitutions in the repeat. in the cases of deletion , the other tools usually incorrectly assign part of the spacer as part of the repeat in order to maintain the consensus repeat length. piler-cr does not consistently predict the cases where the repeat-spacer junction has mutations within a few bases  of the end of repeat. furthermore, in piler-cr, insertions are represented in one repeat, which creates a gap in all other repeats and the representative repeat. in crisprdetect, this is resolved with a new output notation . insertions/deletions are listed to the right of the repeat-spacer unit, with their location denoted . the deletion notation eliminates the need to artificially introduce gaps into multiple repeats, especially the representative repeat. in other cases, insertion of multiple bases towards the centre of a repeat may cause splitting the entire crispr into two or more short crisprs, which results in the inability to detect internal spacers. for example, in carboxydothermus hydrogenoformans, a crispr array is split in two by piler-cr , which crisprdetect corrects, leading to the identification of three extra spacers . these crispr splitting events also complicate the analysis of leader regions, and the accurate assessment of the evolutionary history of acquisition events, since they would be analysed as two arrays rather than one. partial deletions in spacers were detected by previous programs. however, these programs do not support the identification and visualization of complete spacer loss.fig.  <dig> sizes of crispr array repeats and spacers. a distribution of sizes of the representative repeats for each array, the percentage of each length is shown separately for bacteria  and archaea . four size ranges- small, medium, large, and extra large are indicated. b distribution of the median spacer size for each array. in  and  crispr arrays with ‘good’ scores  and three or more repeats from one strain for each species from genbank/genomes were counted. for the same analysis including all strains, see additional file 1: figure s3



identification of degenerated repeats in the spacer sequence
if repeats degenerate, they may not be recognised and can be included in subsequent spacers, resulting in erroneously long spacers. crisprdetect addresses this by searching for variant repeats with a lower identity threshold in all spacers with length  <dig> -fold greater than the median spacer length in that array. if degenerate repeats are found, these are represented as repeats. for example in an atypical  <dig> repeat array from salmonella enterica , piler-cr detects six repeats, with degenerated repeats being included as an unusually long 5th spacer . crisprdetect predicts this array including  <dig> repeats  with  <dig> typical spacers and  <dig> missing spacers at the 5’ end.

improving arrays by adjusting the repeat ends
crisprdetect uses a library of reference repeats  to automatically refine predicted repeat . this can be used in both an automatic and interactive way. if the new representative repeat matches a known reference repeat, then the repeat is extended or trimmed to have the reference length as described above for e. coli . in addition, if the representative repeat contains a known repeat boundary motif  3’), then the 3’ end of the repeat is adjusted. this motif was found in  <dig> arrays. additionally, the web interface has the option to interactively increase or decrease the repeat length in an interactive array based on expert knowledge of the user.

identification of degenerated repeats and/or spacers beyond the end of an array
repeats beyond the end of the array may degenerate by mutation and not be recognised. crisprdetect applies a lower match threshold to extend arrays. at the default settings this is set stringently, and arrays in the reference databank are predicted with this stringency . however, this is user-tuneable in both the automatic and interactive versions of the program. this allows users to investigate the decay of crisprs. array extension is useful for analysing closely spaced arrays, separated by deleted or degenerate repeats or insertions. crisprdetect supports an extension, permitting repeat detection with identity as low as 35 % . it also supports a ‘dynamic adaption’ method, where instead of using the global representative repeat, the nearest neighbouring repeat is used as a reference. one advantage of this method is that it allows dynamic adaptation where a repeat mutation has been propagated at one end of the array .

false positive predictions from tandem repeats
other types of tandem repeats may be mis-identified as crispr arrays. no arrays with scores above  <dig> are flagged, there are  <dig> arrays with scores below  <dig> flagged as tandem repeats, . additional file 1: figure s8a provides an example of a predicted five repeat crispr  with degenerated repeats being denoted as four spacers, crisprdetect does not predict this as an array. however, some likely arrays have a number of exactly identical spacers, followed by few non-identical spacers. for example, seven identical spacers are present in a  <dig> repeat array in methanocaldococcus jannaschii, which is identified by crisprdetect .

array orientation
previous tools did not predict array orientation, until we developed crisprdirection, which corrects crispr orientation with ~94 % accuracy  <cit> . crisprdirection has a separate confidence score in the crisprdetect output . an alternative would be to use crisprstrand  <cit> , which predicts orientation using repeat but is not currently available as a command line program.

internal database of crisprs 
as yet, there are no dynamically interactive crispr prediction tools to enable users to refine arrays. although, crisprfinder and crispi are supported by some post-processing tools and a database , interaction between the prediction program and the database is not available. crisprdetect addresses this by incorporating a database of pre-computed crisprs  generated from all complete bacterial and archaeal genomes. users can test newly predicted crisprs with a minimum score  during initial prediction, or once the output is generated. the representative repeat of each array can be directly searched in the crisprbank database, showing occurrences in other genomes. crisprbank currently contains  <dig>  possible crisprs  with detailed information including family, direction and scores .

crispr-cas type indication
in crisprdetect and crisprbank predicted types are indicated. this is based on the presence of signature cas genes   <cit>  and by similarity to repeat from known types. in the output, crisprdetect lists the cas genes annotated, together with the sets of signature cas genes that were identified . however, the lack of annotated cas genes in an output does not mean they are absent and further user analyses are advised. analyses to find missing cas genes could include more sensitive searches for the cas genes, or use of the recently published compilation of cas genes  <cit>  or crisprmap/crisprstrand analysis  <cit> . proposed updates of the classification of crispr-cas systems would be able to be incorporated into crisprdetect  <cit> .

scoring the quality of the arrays
the ‘quality’ of the final prediction is scored by a set of rules in crisprdetect. it scores each array with nine different crispr properties that includes both positive  and negative scores  . arrays that score below a user given cutoff score are flagged as ‘questionable’. arrays with scores < <dig> are not reported. these parameters are adjustable in both the automatic and interactive version. the presence of a known repeat gives an additional score , therefore such repeats often have scores > <dig> . however, many arrays score as good arrays  without a previously predicted repeat. the scores for all the predictions > <dig> from crisprdetect, and the scores for the arrays with experimentally confirmed repeats are shown in additional file 1: figure s <dig>  crisprdetect defaults to a conservative score of  <dig> , but lower values e.g.  <dig>  could also be used for greater sensitivity .

direct link to crisprtarget for spacer analysis
from the crisprdetect output webpage, spacers can be sent directly to crisprtarget for target prediction in foreign dna   <cit> . crisprtarget uses a flexible algorithm that takes the formatted and predicted spacer sequences from crisprdetect  and uses these to search databases for targets.

repeat analysis
crisprdetect shows any repeats that have an exact match in crisprbank. if desired, these repeat could be further analysed by crisprmap  <cit> . crisprmap can classify the repeats based on sequence and structural similarity into one of  <dig> families or  <dig> structured motifs. this can then be used to predict the phylogenetic distribution of the family that the repeat matches.

use in prokaryotic genome annotation pipelines
crisprdetect produces a gff output, which can be used for genome annotation or visualisation. currently, crispr arrays may be annotated using a combination of modified crt and piler-cr . prokka also uses a modified version of crt   <cit> , whereas rast uses perl regular expressions to find repeat > <dig>  <cit> . typically ncrna predictions  are made then excluded from subsequent cds prediction. crisprdetect could be incorporated into these pipelines in place of existing software using a high stringency  to avoid false positives and subsequent missing cds predictions. for semi-automated finishing of genomes the gff output can be read into editors/viewers for example artemis  <cit>  or the integrative genomics viewer   <cit> . an array from the greenhouse gas producing archaea methanobrevibacter ruminantium is shown in fig.  <dig>  the gff output is displayed alongside the refseq annotation of this genome. the fine structure of the array is shown in the likely orientation. the refseq pipeline annotation  <cit>  broadly described as a ‘repeat-region’ is shown in light blue above.fig.  <dig> crisprdetect results on a genome browser. genome feature format  visualised in a genome browser   <cit> . this region has an array followed by an operon that includes some crispr associated genes. the figure shows a section of the refseq annotated version of methanobrevibacter ruminantium genome  <cit> . the top line shows the annotation from the refseq file in genbank  format. in the ncbi annotation pipeline the arrays are predicted by a combination of crt and piler-cr. these are annotated as a ‘repeat_region’s on the genome . the crisprdetect gff output file has been added to this annotation. each repeat and spacer is shown in the indicated orientation



CONCLUSIONS
crisprdetect was designed to address limitations in current crispr prediction tools, and to include additional information that is now available. we focused on the prediction of crispr arrays by analysing both the crispr properties and distinguishing these from ‘crispr like’ repeats which can easily be predicted incorrectly as a crispr. crisprdetect, in combination with crisprbank and crisprtarget, now provides an integrated resource for the detection and analysis of crisprs . we expect this suite will replace most existing crispr prediction tools.

the enhanced annotation of arrays reveals orientation, precise repeat-spacer boundaries, small and large mutations  in spacers and repeats, and additional features. this can be interrogated using a web interface, or be incorporated into genome annotation pipelines for improved gene annotation, where it would be included along with protein and other noncoding rna predictions. we are now investigating these new features revealed by crisprdetect to generate further biological insight into crispr-cas evolution and function.

availability of data and materials
project name: crisprdetect

project home page: http://bioanalysis.otago.ac.nz/crisprdetect/

operating system: platform independent

programming language: perl

other requirements: local installation- emboss-water and seqret, rnafold, clustalw, blastn, cd-hit-est

license: gnu gpl

any restrictions to use by non-academics: no

additional file
additional file 1: crisprdetect additional files 1– <dig>  



abbreviations
crisprclustered regularly interspaced short palindromic repeats

cascrispr associated

crrnacrispr rna

drdirect repeat

pamprotospacer adjacent motif

competing interests

the authors declare that they have no competing interests.

authors’ contributions

ab wrote the software, predicted and refined arrays, and drafted the manuscript. cmb and pcf conceived the study, and participated in its design, implementation and coordination. rs and sm refined and critically evaluated the software and data. all authors analyzed the data, wrote, read and approved the final manuscript.

