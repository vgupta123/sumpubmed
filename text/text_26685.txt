BACKGROUND
from the onset of systems biology, visualization of networks has played a key role in communicating the relations between objects of interest and the structure of the problem domain. gene networks  <cit> , protein interactions  <cit> , synergistic relations between snps  <cit> , gene-based disease similarities  <cit> , enzymatic relations and metabolic processes are just a few examples of domains where visualization of networks can aid in understanding the layout of the biological systems. the interest in this area has sparked the development of a large variety of software tools and approaches that deal with network layout optimization, data integration, interactive exploration of the networks and data analytics  <cit> .

formally, a network is a graph which consist of vertices  linked by edges. in systems biology, vertices can represent genes, proteins, metabolites, diseases, or other objects of interest. edges abstract the relations between these objects.

the network often consists of a large number of unconnected components, like the recently published yeast protein interaction network  <cit>  and a drug similarity network  <cit>  with  <dig> and  <dig> unconnected components, respectively. classical network layout techniques such as fruchterman-reingold  <cit> , kamada-kawai  <cit>  and frick et al.  <cit>  algorithms arrange unconnected components arbitrarily, which can wrongly suggest a relation between otherwise unrelated components.

for illustration consider the network from figure  <dig>  which depicts four components from the leukemia gene network shown in figure  <dig>  from the layout in figure 1a with an arbitrary component placement one could  conclude that genes blvra-hmox-blvrb are more similar to dars-aars than to other genes in the graph. misinterpretations like this can be avoided by displaying the network's main component, if one exists, separately, and then listing other  components. this type of display has been used, for instance, in the recently published disease gene network  <cit> . we discuss several other approaches and their shortcomings in related work.

in the paper we introduce a generally applicable technique called fragviz for placing the components according to the background data on their similarity. for example, rendering a network from figure 1a. by our algorithm yields the layout in figure 1b, from which we can infer that there is a relation between blvra-hmox-blvrb and alas1-urod. these are indeed correct relations as all of the mentioned genes have a function in heme metabolism. notice that in the same visualization components dars-aars and eif2s2-eif2s <dig> are close to each other and all genes comprising them participate in protein translation. to render this network fragviz used additional information on mutual similarity between network nodes. it is clear that consideration of this additional information can improve the placement of unconnected components and expose additional information, thus avoiding misinterpretations based on the proximity of arbitrarily placed components.

fragviz uses a two-step network layout optimization procedure. it first applies the standard fruchterman-reingold algorithm separately on each unconnected component to optimize the layout of its vertices. then it optimizes the global placement and orientation of components using a semi-physical model where the forces between components are inferred from similarities between the corresponding vertices in these components.

the data on similarity of the network nodes can either come from the same data source used to infer the structure of the network, or can be provided by supplying any additional information. most often, the network's structure itself is derived from the scored relations between objects . edges then connect pairs of vertices for which the corresponding score exceeds some user-defined threshold. in such cases, the node pair similarity scores can be used as additional data for our procedure. if relations in the graph are not obtained by imposing thresholds on numerical data, other data source can be used to describe the vertex similarities. for instance, in the experimental study reported in the paper we show a protein-protein interaction network in which the vertex similarities are computed based on the biological function of the proteins.

related work
the proposed approach belongs to the family of algorithms for force-directed placement of objects into two-dimensional projections, and is strongly related to two kinds of algorithms: the optimization of network layout and multidimensional scaling   <cit> . network layout algorithms typically consider undirected graphs and optimize their layouts so that the pairs of connected vertices are placed closer to each other than to other vertices. if graph edges are weighed, shorter distances in the layout indicate stronger relations between objects represented with vertices. multidimensional scaling considers an input matrix of object dissimilarities. it represents objects with points in euclidean plane, and optimizes their placement so that the plotted distances match the dissimilarities as accurately as possible.

the two kinds of algorithms are related. it is possible to lay out a network by representing it with a distance matrix and performing mds-based optimization. or, vice versa, we can convert a distance matrix into a weighed complete graph and use a graph layout optimization in place of mds. the optimizations would yield different results, as each of the methods uses its own stress function that is being optimized and was designed to match the goals of particular projection. for instance, in network layout optimization, projected distance between unconnected vertices has no effect for as long as it is large in comparison with distances between the connected vertices. in contrast, mds optimizes distances between all pairs of objects, including the most distant.

with regard to the optimization procedure, algorithms make assumptions about the structure of the data. network layout algorithms work best for graphs in which most vertices have only a small number of neighbors. mds, on the contrary, considers distances between all pairs of objects, a data structure that can be represented with a complete weighed graph. force-directed network layout optimization algorithms do not work well on densely connected graphs . the time complexity becomes prohibitive, and optimization may get trapped in the local optimum. in contrast, mds is inapplicable to data with a large number of objects due to space complexity , whereas the fruchterman-reingold algorithm might still be useful if the number of edges is small enough.

there are a number of algorithms that use the metaphors from either network layout algorithms or mds or both, trying to adapt each one for a particular data structure or heuristically improve runtime performance. clustered graphs, for one, include groups of vertices that are related to each other. clusters can be determined by observing the density of mutual connections between vertices or they can be based on data describing the vertices. various algorithms have been designed that can detect such clusters  <cit> . eades et al.  <cit>  proposed a method for plotting clustered graphs, which models them in terms of four layers representing the entire graph, clusters, abridgments and pictures . a corresponding model includes forces between connected vertices, between all vertices in each cluster, and between meta-vertices representing entire clusters. the performance of mds can be improved by various heuristics. morrison et al.  <cit> , for instance, propose an algorithm which first projects a sample of points, then interpolates the remaining points between their positions, and finally fine-tunes the projection using a force model. these and similar methods can be used to speed up the layout optimization, increase the readability of the graph and construct user interfaces for interactive graph exploration. a complete survey of information visualization methods that focus on graph visualization techniques, can be found in  <cit> .

the method described in this paper, fragviz, is a representative of context-specific methods for layout optimization. unlike other methods we have reviewed in this section, it specifically addresses the layout optimization for graphs consisting of isolated components, which are given in advance and represent meaningful entities, such as groups of genes related to a particular process. the components, in turn, need to be considered jointly, based on their mutual relations which may stem from individual relations between member vertices. the natural approach that deals with this particular data structure is to first optimize the layout of each component independently, and then optimize the position and rotation of the components. we achieve this by combination of network layout and mds-based algorithms. notice that, as further addressed in the discussion, other, perhaps more straightforward adaptations of existing approaches could address such data, but perform worse both in terms of runtime and quality of the resulting layout.

methods
the input to fragviz is a list of network components and a matrix of similarities between the network's vertices. fragviz first uses a network layout optimization technique, like fruchterman-reingold algorithm  <cit> , to determine the placement of vertices within each of the connected components. then, it finds a placement of components which reflect their mutual similarities. it is this second step that is an original contribution of our method, and which we in detail describe below.

formally, we are given a graph g =  that consists of p disjunct components v=∪k=1pvk, and a |v| × |v| dissimilarity matrix d. the internal layout of each component vk is fixed and given by positions of its vertices inside its own fixed coordinate system. we will denote the position of vertex vi by vi. we also assume that the internal coordinate systems are centered, i.e. ∑vi∈vkvi= <dig> for each component vk. the task is to find the placement ck and orientation ϕk of coordinate systems for all components, which reflect the given dissimilarities d.

description of a physical system
we will base the method on a physical metaphor. imagine each component as a board with vertices as pegs. pegs from different components are connected with springs of different lengths corresponding to the given dissimilarities d. the nature  "optimizes" the system by finding the lowest energy configuration of the boards .

assume that all vertices have equivalent mass m. the mass of the component vk is

  mk=|vk|m 

and component's moment of inertia is

  ik=m∑vi∈vk||vi|| <dig>  

the force between a pair of points  is defined by hooke's law,

  fij=gi−gj|| gi−gj ||, 

where gi and gj are positions of vertices in a global coordinate system,

  gi=vi+ck, 

where k is such that vi ∈ vk.

let fi be the sum of forces acting on vertex vi

  fi=∑vj∈vfij. 

the force causes linear acceleration

  ak=∑vi∈vkfimk 

and angular acceleration

  αk=∑vi∈vkfi×viik 

of the component. we shall assume infinite friction, so the component does not retain any momentum. at each instance, the component moves by a distance proportional to the linear acceleration, Δck ~ ak and rotates by an angle proportional to the angular acceleration, Δϕk ~ αk, so

  Δck~∑vi∈vkfi|vk| 

  Δϕk~∑vi∈vkfi×vi∑vi∈vk|| vi || <dig>  

these equations allow for a computer simulation of the physical process. starting from a random placement of components, we iteratively compute the forces fi, and move and rotate the components accordingly until the system reaches an optimum in which all fi are negligible.

approximate simulation
computer simulation of the system described above is rather slow. we can speed it up by first computing the positions of components and then rotating them in place. the result is only approximately optimal with regard to the total stress , yet we will experimentally show that the difference is negligible.

for positioning the components, the approximate method measures and optimizes distances between components rather than the distances between vertices. we define the distance between components vk and vl as the average of distances between the corresponding vertices, similar to average linkage in hierarchical clustering analysis  <cit> :

  δkl=1| vk || vi |∑vi ∈ vkvj∈ vldij. 

the task is then to find the positions in a two dimensional plane, in which the distance between every pair of component centers ck and cl matches the given δkl as close as possible. this approach is much faster than the simulation from the previous section since the computation of all pairwise distances at each step of optimization is replaced by a single such computation in . this translates the problem of placing the components into the familiar multidimensional scaling problem . there exist many efficient solutions of the mds, such as, for instance, smacoff  <cit> , which optimizes the overall energy of the system without computing its gradient, the force .

by considering only the centers of components, mds ignores their sizes, which can cause the components to overlap. this can be fixed by introducing a scaling factor between the global coordinate system and the internal coordinate systems of components by replacing  by

  gi=vi+kck. 

the scaling factor is equal for all components and should be such that the components are just as large as possible without too much of overlap. a simple rule of a thumb is to use the ratio between the average size of components v¯ and the average distance between them, g¯, so

  k=v¯/g¯ 

where

  v¯=1p∑k=1p1|vk |∑vi,vj∈vki≠j|| vi−vj || 

and

  g¯=2p∑k<l|| ck−cl ||. 

for rotation of components we use the original vertex-wise definition of force  computed in the scaled coordinate system . we apply the same procedure as in the exact simulation, except that we only compute the rotation without the translation. to avoid ending up in local minima, we use simulated annealing where the component can also rotate in the "wrong direction", with the probability of doing so decreasing with time. although this optimization recomputes the pairwise distances between all vertices at each step, it is not overly time consuming since it requires only a small number of iterations.

in the remainder of the paper we only show layouts optimized by the approximate method.

data
the performance of the proposed algorithm was assessed on four different networks  showing relations between genes which were most differentially expressed in the leukemia gene expression data set  <cit> . the original data set includes  <dig>  genes whose expression was measured using dna microarrays in  <dig> tissue samples classified either as acute lymphoblastic leukemia  or acute myeloid leukemia . for n <dig>  n <dig>  and n <dig>  we selected  <dig>  differentially expressed genes with expression levels significantly smaller or larger  according to student's t-statistic with respect to the null distribution of the statistic. the null distribution was obtained by randomly permuting the class labels and calculating the t-statistic for all the genes. network n <dig> was built with  <dig> out of  <dig>  originally measured genes for which the information on their protein interactions was available in the mips mammalian protein-protein interaction database  <cit> . in the visualizations in the paper, genes represented with solid circles were significantly over-expressed in the all samples and genes shown as hollow circles had higher expression in the aml samples.

based on different means to estimate the gene similarity, we have defined four distinct gene networks:

• n <dig> - biological function similarity score: the similarity of genes relates to their biological functions and was calculated based on their membership in canonical biological pathways using the jaccard index  <cit> . the information on the membership of genes in biological pathways was acquired from the molecular signature database  <cit>  . figure  <dig> shows the network where the similarity threshold was set to  <dig>  and all the unconnected genes were ignored.

• n <dig>  - huttenhower similarity score: the similarity between genes as computed by  <cit>  using the information on all publicly available gene expression and protein interaction data, combined with prior knowledge from the gene ontology, kegg, hprd and other biological databases. similarity scores above  <dig>  for the leukemia genes were used to build the network. only the genes connected to at least one other gene are included in the network .

• n <dig>  - huttenhower similarity score: the same similarity scores and threshold as in n <dig>  were used  for the n <dig>  network. differently to n <dig> , n <dig>  also includes isolated vertices  in order to observe the similarity of all the differentially expressed genes .

• n <dig> - protein-protein interaction network : the leukemia genes were connected into the network based on their protein interactions from the mips mammalian protein-protein interaction database  <cit> . we additionally used the biological function similarity score  for placing the interacting protein components based on the similar biological functions of the proteins comprising them.

the average local clustering coefficient  <cit>  and the number of vertices, edges and components for these four networks are presented in table  <dig>  the local clustering coefficient of a vertex in a network quantifies how close its neighbors are to being a clique and describes the connectedness of a network.

RESULTS
the goal of fragviz is to find the network layout in which the arrangement of components uncovers new insights on relations between them and their constituents. we evaluated the method in an experimental study that considered fragviz visualization of the leukemia gene networks n <dig>  n <dig> , n <dig>  and n <dig>  for additional assistance to the domain expert, the network components were named according to their most specific term from biological process or molecular function aspect of gene ontology  <cit> .

the leukemia gene network 
our goal was to obtain a clear visualization relating the most important genes and their biological functions for two major types of acute leukemia, yielding insight and valuable clues about the disrupted biological processes and pathways in leukemic cells. solid vertices in figure  <dig> represent genes significantly over-expressed in the all samples while empty circles are genes that had higher expression in the aml samples.

fragviz allows for the exploration of biological processes related to acute myeloid and acute lymphoblastic leukemia on different levels, from specific to more general ones. in figure  <dig> additional gene ontology terms were assigned to groups of clusters which were determined manually by the expert to elucidate the disrupted biological pathways on a more general level as they cover higher number of differentially expressed genes. these ontological terms apply to all the genes in the marked areas and are significantly enriched with a p-value <  <dig> . the components of the graph that are close to each other have similar biological and/or molecular functions according to gene ontology, demonstrating similarity between genes constituting them.

for example, the "guanylate cyclase activity", "nucleotide metabolic process", "rna polymerase activity", and "dna replication" components in figure  <dig> all connect genes significantly over-expressed in acute lymphoblastic leukemia. all of these genes have a function in nucleotide metabolism and dna biosynthesis. it is well known that lymphoblastic cells typically have severalfold higher activity of enzymes responsible for nucleotide metabolism enabling excessive proliferation of transformed cells  <cit> . moreover, some of the pathways active in nucleotide metabolism, for example de novo purine synthesis , have been recognized as important targets of antileukemic agents . in combination with other therapeutical agents, these drugs have improved survival of children with all to an overall cure rate of approximately  <dig> percent  <cit> . the network shown in figure  <dig> clearly demonstrates this characteristic of acute lymphoblastic leukemia.

the huttenhower similarity network 
the n <dig> and both n <dig> networks contain the same  <dig>  differentially expressed genes from the leukemia data set. however, in n <dig>  and n <dig>  a combined gene distance score was used, computed from multiple biological data sources  as proposed by huttenhower et al.  <cit> . n <dig>  shows only vertices with at least one edge. n <dig>  also includes isolated vertices , in order to observe the similarity of all the differentially expressed genes.

as in the n <dig> network, most of the graph components in n <dig> networks  connect genes that are over-expressed in one of the two investigated kinds of leukemia . one can observe that the genes significantly differentially expressed in the two investigated leukemias cluster together . this reflects the well known phenomenon that not only individual genes, but whole processes and pathways are disrupted in cancer cells  <cit> . in figure  <dig>  the empty circles  are clustered in the right part of the graph and the solid ones  in the left part, again demonstrating that expression changes in cancer tissues are disrupted on the level of pathways and processes.

for example, the genes in components "spliceosomal snrnp biogenesis", "trna aminoacylation for protein translation", "sequence-specific dna binding" and the nearest genes in the component "protein binding" participate in processes of cell proliferation. all these genes have higher expression in all samples. excessive cell proliferation is a characteristic of all leukemic cells. however, previous studies  <cit>  have shown that the proliferative index of all cells is significantly higher compared to aml cells.

since the distance information is used to adjust the position of unconnected components, the layout allows for the exploration of the data on different levels, using genes from a single component or from clusters of biologically related components.

the protein-protein interaction network 
the placement of unconnected components in a fragmented network can be optimized using the vertex distance information from a source other than that used in the inference of network structure. for example, the n <dig> network  shows the protein-protein interactions for the leukemia genes from the mips database. the network is fragmented into many smaller unconnected components. we used the biological function similarity score for calculating the similarities between the components and optimizing the network layout.

several gene products  that lie close to each other in the fragviz optimized network  are actually in interaction, as is reported in human protein reference database   <cit> , a different public repository that stores protein-protein interactions identified by experimental results. for example, in hprd, the protein integrin beta  <dig>  is in interaction with protein integrin beta  <dig> . also, proteins poly a polymerase alpha  and smad <dig> are both in interaction with protein smad <dig>  according to hprd, protein interactions also exist among proteins in the components il4r-htatip and the near-lying component in the optimized layout. to outline them in the network, the vertices that correspond to these proteins  are labeled accordingly. while our goals was not to use network layout optimization for protein interaction prediction, the cases mentioned here demonstrate the potential utility of different data sources in network layout optimization.

we added an optional component similarity visualization to the network. the similarity between network components is visualized by blue lines in figure  <dig>  each component is connected to two most similar components and the line width represents the magnitude of the similarity. in figure  <dig>  most connected components are placed close to each other. however, in few cases similar components are positioned apart. besides the technical problem - the optimization getting stuck in a local optimum - this may happen when two components belonging to different clusters of components nevertheless share a common function or when some component essentially belongs to two clusters. for example, genes in the component "g1/s transition of mitotic cell cycle" influence gene expression, as do most of the genes in the nearest cluster of components. the same component however also participates in the apoptotic pathway which is reflected in its connection with the "phosphoinositide 3-kinase cascade" component, a representative of components related to the apoptotic processes.

performance comparison
all measurements have been conducted on a desktop pc, with intel core  <dig> duo  <dig> ghz processor and  <dig> gb of ram, using the 64-bit windows  <dig> os. the results represent an average over  <dig>  runs of the algorithms on the n1-n <dig> networks, starting from random positions of vertices.

the fruchterman-reingold algorithm is by far the fastest, but it uses less data than the others and the resulting projections are much less informative. running times of eades  <dig> are comparable to those of fruchterman-reingold. this was expected, as both approaches run on a similar graph. eades  <dig> employs a complete graph, which makes it much slower. on large networks, eades  <dig>  is even slower than mds. the running times of fragviz simulation are similar to those of mds, which is also expected. the approximate method runs much faster, except for the large network n <dig> , where most vertices are unconnected, which essentially translates the visualization problem to mds.

for all four networks, the correlation coefficients of the fragviz algorithms are very similar. the correlation was always lower with the fr algorithm and, for three out of four networks, the highest correlation was obtained with mds. in one of the compared networks  mds performed slightly worse than approximation, suggesting mds got trapped in a local minimum. as expected, when the vertices were arbitrary placed in the graph, the correlation between the position of vertices in the graph and their actual distances is close to  <dig> 

clustered graph approaches  are in general faster than fragviz, but performed worse in terms of layout quality. eades  <dig> performed better than eades  <dig> on smaller graphs , whereas eades  <dig> had a high correlation for a large network . however, eades  <dig> approach is not appropriate for analyzing large fragmented networks as it works prohibitively slow.

note that the compared algorithms pursue different goals. the tests were run on data suitable for the method presented in this paper, while in other contexts another method could give better results. in particular, clustered graph methods could not be directly applied to the original data, so its results depend on the proposed transformation of the original problem.

impact of the network fragmentation
we also investigated the behavior of layout optimization methods with respect to the degree of network fragmentation. we constructed  <dig>  networks of the most differentially expressed genes from the leukemia data set  with similarity threshold required for an edge from  <dig>   to  <dig>  . figure 6a shows the correlations between the network layout and the similarities matrix for the fr, mds and fragviz algorithms. figure 6b shows how the average local clustering coefficient  <cit>  and the number of components change with different threshold values.

fragviz and fr algorithms are equivalent when the network consists of only one component . for the fr algorithm, the correlation decreases when the network gets more fragmented. however, when the fragmentation increases , the correlation score of the fragviz algorithm increases and rises above the best score obtained by the fr algorithm. correlation for mds does not depend on the threshold.

alternative approaches
projections similar to those by fragviz could in principle be obtained with other algorithms . the graph can be augmented with virtual  edges with small weights corresponding to the distances between the vertices and then optimized using graph layout optimization algorithms. alternatively, we can construct a distance matrix in which the distances combine a term representing the graph edge  and the term from the original distance matrix, scaled to have only a minor influence. such combinations are, though, inefficient. first, force-based optimization techniques often get stuck in local optima. graphically, if optimizing the entire picture at once, they are unable to pull together the vertices belonging to the same component if too many other, unrelated vertices are randomly scattered between them and push them apart. we discovered that using the two standard algorithms, fruchterman-reingold algorithm and the smacoff algorithm for mds, in such manner consistently fail to optimize the projection in quite common cases where the network includes components with more than  <dig> vertices. a typical example is shown in figure 7c. our two-step procedure avoids that problem by first composing the components.

besides the projection quality issues, fragviz is also faster than the above approaches since it splits the optimization problem into a set of much smaller problems, laying out small individual components and then arranging a small number of components instead of all vertices at once. using the graph layout optimization algorithms instead of fragviz, as described above, would be slower since these algorithms do not perform well on complete graphs. for mds, to get similar running times as fragviz, one needs to employ fast heuristic mds algorithms, which gain speed by somewhat compromising the quality of the projection  <cit> .

figures 7d and 7e show some shortcomings of cluster based approaches on this particular data. when the problem is transformed so that the cluster structure is defined by graph components and applied over the complete graph , the optimization is more likely to end up in a local minimum due to a higher number of forces involved. in figure 7d, we cannot spot any regions containing mostly solid or empty vertices, as opposed to figures 7a and 7b by fragviz and by fruchterman-reingold algorithms. this may also be one of the reasons behind the worse pearson correlations of this approach in general . the second way in which we used cluster based layout optimization, eades  <dig>  gives better correlations and running times, yet the resulting layouts are visually unsatisfactory: the cluster structure does not correspond exactly to the graph components, so the vertices belonging to the same component may be pulled apart since they ended up in different clusters. we were unable to alleviate this problem by tweaking the parameters of the method.

CONCLUSIONS
we have recently witnessed the emergence of large repositories of biomedical research and clinical data. methods are needed that would allow the domain experts to sieve through these data sets to gather information, reason on the hidden patterns and form plausible hypotheses to be tested in subsequent studies. here, visualization combined with visual data analytics plays a major role, as it can reveal the data patterns and allow the experts to explore the data.

visualizations require the development of dedicated algorithms that craft the proper placement of the object under consideration. explorative data analysis requests these to be fast to be able to construct responsive interfaces. we have developed a layout optimization technique fragviz that meets these requirements and specifically addresses the visualization of fragmented networks, where standard algorithms do not consider similarities between unconnected components.

fragviz is neither faster than all existing algorithms nor more accurate in terms of the match between the given and the projected distances. fragviz is slower than the fructherman-reingold algorithm, which is a direct consequence of considering more information. the resulting vertex distances may match the given distance matrix worse than in multidimensional scaling, a consequence of fixing the layout of the components. this is a matter of design decision: the goal of fragviz is to provide a sensible local picture and a global overview, thence the two level optimization. it can happen, for instance, that in a chain-like component the two vertices on the edge are weakly related to a common third vertex not belonging to the component. while other layout optimization algorithms would bend the chain, fragviz keeps it straight. our experiments confirmed usefulness of the proposed solution. the case study on the leukemia gene networks shows that derived visualizations may be helpful in uncovering the relations between the components.

the data, networks, their visualizations, and the implementation of the described methods in an open-source analytics framework orange  <cit>  are available on the supplementary web page at http://www.ailab.si/supp/fragviz. an online network optimization web application is available at http://www.ailab.si/fragviz.

availability and requirements
project name: orange fragviz

project home page: http://www.ailab.si/orange

operating system: platform independent

programming language: python, c++

other requirements: pyqt, pyqwt, numpy

license: gnu gpl

any restrictions on use by non-academics: none

authors' contributions
bz identified the problem and suggested its solution. ms developed and implemented the algorithm, performed the experiments and drafted the manuscript. mm designed and interpreted the case study. jd formulated the optimization problem based on the physical metaphor. all authors co-wrote the article and approved its final version.

