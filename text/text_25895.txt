BACKGROUND
genomics efforts continue to yield a myriad of new protein sequences. among the most valuable are those expressed by mammalian pathogens, organisms that successfully grow and disseminate despite a hostile host immunologic environment. a subset of pathogen-encoded proteins, "immunoevasins", facilitate this success by mediating cellular adhesion and entry, and by distorting the interactions of host receptors and cell-surface ligands  <cit> . study of immunoevasins gives insight into host-defense mechanisms, insight that can help guide development of therapies and vaccines against refractory organisms  <cit> .

though immunoevasins frequently possess protein-recognition domain  folds common to mammalian proteins of immunologic importance, their divergent amino acid sequences may fall into the "twilight-" or "midnight-" zones where pair-wise sequence identities to known sequences fall below 25% and purely sequence-based attempts at annotations often fail  <cit> .

to better annotate these, and any other highly divergent sequences, more generally, some means of explicitly incorporating three-dimensional structural information into the sequence evaluation is required. inclusion of even rudimentary structural considerations enhances the performance of sequence scoring heuristics such as local alignment tools  <cit>  and hidden markov models   <cit> . indeed an hmm constrained with crystallographically determined secondary structure data allowed discovery of a previously unsuspected mhc class i-like immunoevasin in the genomes of orthopoxviruses  <cit> . a vast literature covers various schemes for structural data incorporation and fold classification. nevertheless, much progress remains to be made  <cit> .

we are pursuing an approach whereby structural patterns common to a protein fold are collected, assessed for their classification value, and mapped onto statistical models of protein sequences , and conditional random fields). as a first step, a comprehensive and objective means is required of identifying and assessing the above common structure patterns, or structure fingerprints.

automatic identification of structure fingerprints from a group of diverse protein structures is challenging for a number of reasons. first, we have only limited knowledge about the possible location, composition, and geometric shape of these structure patterns. second, protein structures are large geometric objects that typically contain hundreds of amino acids with thousands of atoms and chemical bonds. third, due to accumulated mutations in evolution the same structure pattern may appear slightly different in different proteins. if we use terms from computer algorithm design, we say that the problem of automatic structure pattern identification is challenging since  the problem has a large combinatory search space  and  we should use approximate matching rather than exact matching in retrieving such patterns .

in this paper we demonstrate a novel data mining technique that efficiently extracts and scores structure pattern from diverse proteins. specifically in our method, we encode a protein structure as a geometric graph where a node represents an amino acid residue and an edge represents a physical or a chemical interaction between a pair of residues. we encode structural motifs as subgraphs of a geometric graph and we identify conserved structure fingerprints by searching for frequently occurring approximately subgraphs in a group of graph represented proteins.

our contributions in designing a new graph data mining method are to develop a solid theoretic framework, to offer a practical software implementation for incorporating prior domain knowledge, such as substitution matrices as studied here, and to devise an efficient algorithm to identify approximate matched frequent subgraphs. by doing so, we expanded the analytical power of data mining algorithms in dealing with large volume of complicated and noisy protein structure data. as evaluated in our driving biological application of recognizing common structure patterns in immunoevasins, our proposed method identifies many structure patterns and affords better structure classification accuracy compared to existing graph mining algorithms.

the rest of the paper is organized in the following way. in the related work section, we give an overview of related work on subgraph mining and protein structure pattern identification. in the methods section, we introduce the technique about how to translate protein structures into graphs, provide our model for approximate subgraph mining, and present the details of our algorithm. in the results section, we show an empirical study of the proposed algorithm using protein structure data sets. in the discussion section, we discuss the biological significance of the structural motifs mined by our method. finally in the conclusions section, we conclude with a short discussion of our approach.

related work
there is an extensive body of literature on comparing and classifying proteins using multiple sequence or structure alignment, such as vast  <cit>  and dali  <cit> . here we focus on the recent algorithmic techniques for discovering structure motifs from protein structures. the methods can be classified into the following five types:

• depth-first search, starting from simple geometric patterns such as triangles, progressively finding larger patterns  <cit> .

• geometric hashing, originally developed in computer vision, applied pairwise between protein structures to identify structure motifs  <cit> .

• string pattern matching methods that encode the local structure and sequence information of a protein as a string, and apply string search algorithms to derive motifs  <cit> .

• delaunay tessellation   <cit>  partitioning the structure into an aggregate of non-overlapping, irregular tetrahedra thus identifying all unique nearest neighbor residue quadruplets for any protein  <cit> .

• graph matching methods comparing protein structures modeled as graphs and discovering structure motifs by finding recurring subgraphs  <cit> .

graph database mining is an active research field in data mining research. the goal of graph database mining is to locate useful and interpretable patterns in a large volume of graph data. recent exact matching graph mining algorithms can be roughly divided into three categories. the first category uses the level-wise search strategy, which includes agm  <cit>  and fsg  <cit> . and the second category takes the depth-first search strategy, which includes gspan  <cit>  and ffsm  <cit> . the third category works by mining frequent trees, for which spin  <cit>  and gaston  <cit>  are the representative. there are many other existing graph mining algorithms, and we refer to  <cit>  for a recent survey.

frequent subgraph mining with approximate matching capability has also been investigated. the current approximate subgraph mining algorithms can be divided into four categories:  proximity measures between graphs  <cit> ,  given a proximity measurement, compute representative frequent subgraphs  <cit> ,  pattern discovery in a single large graph  <cit> , and  pattern discovery from a group of graphs. the last category is what we concentrate on. for algorithms in , subdue  <cit>  does not claim completeness. monkey  <cit>  handles only edge missing and edge label mismatch. partially labeled graphs  <cit>  uses a wild card method to handle node label mismatches. the algorithm may be viewed as a special case of our algorithm.

different from the existing work, to our best knowledge, we are the first group that incorporates a probability matrix in a graph mining method. we also developed a general framework to fully utilize a probability matrix for approximate match, which we can apply to a number of different applications. in addition, we have developed two ways to demonstrate the statistical significance of the patterns mined from a graph database. statistical significance is an important but often overlooked issue in evaluating the quality of identified pattern in frequent pattern mining. finally we offered a practical implementation and evaluated its performance using the synthetic sets.

methods
in this section, we first briefly describe the technique that translates protein structures into graphs. then we demonstrate our method called apgm with two steps: introducing the theoretic model, and showing our algorithm in detail.

almost-delaunay graph
since the protein backbone trace defines the overall protein conformation, we choose the cα atoms as the nodes of protein graphs. based on this simplified protein model, we compute edges using almost-delaunay tesselation  <cit> . the almost-delaunay edges are a superset of the delaunay edges. all nearest neighbor residues connected by delaunay edges are defined using delaunay tessellation  <cit> . this tessellation is defined for a finite set of points by an empty sphere property: a pair of points is joined by an edge iff one can find an empty sphere whose boundary contains those two points. the definition of the delaunay tessellation depends on the precise coordinate values given to its points, but these coordinate values are not exact in the case of proteins due to measurement imprecision and atomic motions. in order to address this problem, almost-delaunay edges are defined by relaxing the empty sphere property to say that a pair of points p and q is joined by an almost-delaunay edge with parameter ε, or ad, if by perturbing all points by at most ε, p and q can be made to lie on an empty sphere. in figure  <dig>  we show one segment of the 3d structure and the corresponding ad graph of 1fp5a immunoglobulin c1-type protein as an example. more detailed information is available in  <cit>  and  <cit> .

theoretic framework
definition 1
a labeled graph g is a 5-tuple g = {v, e, Σv, Σe, λ) where v is the set of vertices of g and e ⊆ v × v is the set of undirected edges of g. Σv and Σe are  sets of labels. and labeling function λ: v → Σv ∪ e → Σe maps vertices and edges in g to their labels. a graph database d is a set of graphs.

we also use v to denote the node set of a graph g and e to denote the edge set of g. we also use Σv to denote the node labels, Σe to denote edge labels, and λg to denote the labeling function for a graph g. before we introduce approximate matching, we define compatibility matrix, which offers a probability framework for approximate subgraph mining.

definition 2
a compatibility matrix m =  is an n × n matrix indexed by symbols from a label set Σ . an entry mi,j in m is the probability that the label i is replaced by the label j.

a compatibility matrix m is stable if the diagonal entry is the largest one in the row . a compatibility matrix being stable means that any label i is more likely to be replaced by itself rather than by any other symbol. for our biological application, we consider substitution matrices as being, in essence, stable matrices since most or all rows fit the criterion. for example, in the blosum <dig> substitution matrix, there is only one violation of the criterion – the row for methionine. hence for the rest of the discussion, we will treat substitution matrices as stable compatibility matrices.

example  <dig>  we show a graph database d with three labeled graphs p, q, r on the left side of figure  <dig>  in this database, the node label set is {a, b, c} and the edge label set is {x, y}. on the right part of figure  <dig>  we show a compatibility matrix m, which is a 2d matrix indexed by the set of node labels in d. the probability that the vertex label a is substituted by b is ma,b =  <dig> . in m, we use probability  <dig> to simplify the matrix. in reality these probabilities are never  <dig> 

definition 3
a labeled graph g = {v, e, Σv, Σe, λ} is approximately subgraph isomorphic to another graph g' = {v', e', Σ′v, Σ′e, λ'} if there exists an injection f : v → v' such that

• ∏u∈vmλ,λ') ≥ τ, and

• ∏∈em′λ,λ′,f)≥τ′

the injection f is an approximate subgraph isomorphism between g and g'. m is a compatibility matrix for node label sets Σv ∪ Σ′v. m' is a compatibility matrix for edge label sets Σe ∪ Σ′e. in an edge compatibility matrix, we assume Σe and Σ′e both contain a special label called empty edge. in this way, we handle both topology distortion  and edge label mismatches in the same unified way through an edge compatibility matrix. τ  is the threshold for node mismatch and τ' is the threshold for edge mismatch.

for simplicity in the following discussion, we assume that we only need to handle node label mismatches . in principle, edge label mismatch  can be handled in a similar way as node label mismatch. hence our assumption does not reduce the complexity of algorithm design, but the assumption significantly simplifies our demonstration and makes our algorithm easy of access.

with the assumption, the new definition of approximate subgraph isomorphism is:

definition 4
a graph g is approximate subgraph isomorphic to another graph g', denoted by g ⊆a g' if there exists a 1- <dig> injection f v to v, such that

• ∏u∈v mλ,λ') ≥ τ,

• ∀ u, v ∈ v,  ∈ e ⇔ , f) ∈ e', and

• ∀  ∈ e, λ = λ, f)

given a node injection f from graph g to g', the co-domain of f is an embedding of g in g'. m is a compatibility matrix for node label sets Σv ∪ Σ′v. the approximate subgraph isomorphism score of f, denoted by sf, is the product of normalized probabilities: sf=∏mλ,λ′)mλ,λ. for the case of exception in mutation matrix, we use max, *) as the normalizing factor instead of mλ,λ. for a pair of graphs, there may be many different ways of mapping nodes from one graph to another and hence may have different approximate isomorphism scores. the approximate matching score  between two graphs, denoted by s, is the largest approximate subgraph isomorphism score, or

 s=max⁡f{sf} 

similarly, we define exact subgraph isomorphism below.

definition 5
a graph g is subgraph isomorphic to another graph g', denoted by g ⊆ g' if there exists a 1- <dig> injection f from the node set v of a graph g to v' of a graph g', such that

• ∀ u ∈ v, λ = λ')

• ∀ u, v ∈ v,  ∈ e ⇔ , f) ∈ e', and

• ∀  ∈ e, λ = λ, f)

example  <dig>  in figure  <dig>  we show a graph database d = {p, q, r} and a compatibility matrix m. we set isomorphism threshold τ =  <dig>  and with this threshold, graph p is approximate subgraph isomorphic to graph q with the approximate subgraph isomorphic score equaling  <dig> . to see this, there are a total of  <dig> different ways to map nodes of p to those of q. the only two that satisfy edge label constraints are f <dig> = p <dig> → q <dig> p <dig> → q <dig> p <dig> → q <dig> and f <dig> = p <dig> → q <dig> p <dig> → q <dig> p <dig> → q <dig>  the approximate subgraph isomorphism score of f <dig> equals that of f <dig> 

definition 6
given a graph database d, an isomorphism threshold τ, a support threshold σ , the support value of a graph g, denoted by supg, is the average score of the graph to graphs in the database:

  supg=∑g′∈d,g⊆ag′s/|d| 

g is a frequent approximate subgraph if its support value is at least σ. with this definition, we only use those graphs that a subgraph g is approximate subgraph isomorphic to  to compute the support value of g. we do this to filter out low quality  graph matchings in counting the support value of a subgraph. for a moderate sized graph database , according our experience, the number of frequent subgraphs identified is usually not sensitive to the isomorphism threshold, which makes sense since low quality graph matching has low "weight" in the support computation nevertheless.

problem statement
given a graph database d, an isomorphism threshold τ, a compatibility matrix m, and a support threshold σ, the approximate subgraph mining problem is to find all the frequent approximate subgraphs in d. in figure  <dig>  we show all the frequent approximate subgraphs in the graph database d shown in figure  <dig>  by comparison with the frequent subgraphs acquired by the exact graph mining, the approximate mining method identifies meaningful patterns that cannot be identified by exact graph mining methods. since the support value of approximate subgraph mining and that of frequent subgraph mining have different meaning, it is generally hard to do a comparison of approximate subgraph mining and that of frequent subgraph mining. fortunately with the assumption of stable compatibility matrix, we can see frequent subgraph mining as a special case of approximate subgraph mining.

example  <dig>  given a graph database d, a compatibility matrix m in figure  <dig>  the support threshold σ = 2/ <dig> and isomorphism threshold τ = 0: <dig>  we show how to calculate the isomorphism score and support value for the approximate frequent patterns in figure  <dig> 

 s =  <dig>  s =  <dig>  s =  <dig>  sup = 3/3; 

 s =  <dig>  s =  <dig>  s =  <dig>  sup = 3/3; 

 s =  <dig>  s =  <dig> , s =  <dig> , sup = 2/3; 

 s =  <dig>  s =  <dig> , s =  <dig> , sup = 2/ <dig>  

algorithm design
here we demonstrate a new algorithm apgm for approximate subgraph mining. apgm starts with frequent single node subgraphs. at a subsequent step, it adds a node to an existing pattern to create new subgraph patterns and identify their support value. if none of the resulting subgraphs are frequent, apgm backtracks. apgm stops when no more patterns need to be searched. before we proceed to the algorithmic details, we introduce the following definitions to facilitate the demonstration of the apgm algorithm.

definition 7
given a graph t, one of the embeddings e = v <dig>  v <dig> ⋯,vk of t, a node v is a neighbor of e if ∃u ∈ e,  ∈ e.

in other words, a neighbor node of a embedding e is any node that connects to at least one node in e. the neighbor set of an embedding e, denoted by n, is the set of e's neighbors.

definition 8
given a graph t, one of the embeddings e = v <dig>  v <dig> ⋯,vk of t in a graph g, a node v ∈ n, and a node label l, the approximate subgraph, denoted by g|t,e,v,l, is a graph  such that

• v' = {v <dig>  v <dig> ⋯,vk} ∪ v

• e' = v' × v' ∩ e

• Σ′v = Σv

• Σ′e = Σe

• ∀ u ∈ e : λ' = λt

• λ' = l

• ∀ u, v ∈ e : λ') = λg)

example  <dig>  in figure  <dig>  we show a pattern t and one of its embeddings e =  in a graph q. node s <dig> is a neighbor node of e since it connects to at least one node of e . given a node label l ="a", we obtain an approximate subgraph g' = q|t,e,v,lof q shown in the same figure. the g' has an embedding e' =  in q and the score of the embedding is mmmmmm=mm= <dig> . 

with the two definitions, we present the pseudo code of apgm below. follows.

algorithm  <dig>  apgm_main

1: begin

2: c ← {frequent single node}

3: f ← c

4: for each t ∈ c do

5:    apgm_search

6: 
                     end for
                  

7: return f

8: end

algorithm  <dig>  apgm_search

1: begin

2: c ← ∅

3: for each , e is an embedding of t in g, v ∈ n do

4:    cl ← approximatelabelset

5:    for each l ∈ cl 
                     do
                  

6:       x ← g|t, e, v, l

7:       c ← c ∪ {x}

8:       h = h ∪ 

9:    end for

10: 
                     end for
                  

11: remove infrequent t from c

12: f ← f ∪ c

13: for each t ∈ c do

14:    apgm_search

15: 
                     end for
                  

16: end

h is a hash function to store candidate subgraphs and their embeddings. the hash key of the function in our implementation is a canonical code of the subgraph x, which is a unique string presentation of a graph. we use the canonical adjacency matrix  and the canonical adjacency matrix code, developed in  <cit> , to compute the canonical code of a graph.

algorithm  <dig>  approximatelabelset

1: begin

2: r ← ∅

3: l <dig> ← λg

4: for each l ∈ Σv do

5:    if s×mm≥τ
                     then
                  

6:       r ← r ∪ l

7:    end if

8: 
                     end for
                  

9: return r

10: end

example  <dig>  applying apgm to the graph database shown in figure 2with the support threshold σ = 2/ <dig> and the isomorphism threshold τ =  <dig> , we identify one frequent single-node pattern a . adding one node to the pattern a <dig>  there are two candidate single-edge patterns and both of them are frequent. these two are shown as a <dig> and a <dig> in the same figure. from pattern a <dig>  we enumerate one additional pattern a <dig>  we stop here since there is no more candidate patterns to explore.

RESULTS
experimental setup
we performed all the experiments on a cluster with  <dig> intel xeon  <dig>  ghz em64t processors with  <dig> gb memory each. the approximate graph mining algorithm was implemented in the c++ language and compiled by using the g++ compiler in linux environment with -o <dig> optimization.

we downloaded all protein structures from protein data bank . we followed  <cit>  to use the same software as  <cit>  to calculate almost-delaunay for graph representation of protein geometry. we took blosum <dig> as the compatibility matrix and back-calculated the conditional probability matrix by following the procedure described in  <cit> . we normalized the matrix according to definition <dig> 

data set
we investigated two immunologically relevant protein domain families: the immunoglobulin v set and the immunoglobulin c <dig> set. immunoglobulin domains are among those used by immunoevasins  <cit> . we collected proteins from scop release  <dig> . for each family we created a culled set of proteins with maximal pairwise sequence identity percentage below some threshold by using pisces server  <cit> . the characteristics of the complete domain sequence sets are shown in table  <dig>  and the pdb ids of individual proteins for the two culled sets are shown in table  <dig> 

experimental protocol
we randomly divided proteins from each family into two groups:  <dig> proteins to serve as sources for feature extraction, and the remainder for training and testing in "leave-one-out" cross validation. a negative sample set of the the same size as the positive sample set was randomly chosen from pdb. the negative sample was used along with the positive sample in testing. the complete flowchart of our experiment procedure is shown in figure  <dig>  during this experimental research, we mined frequent clique subgraphs  <cit>  in order to enforce biological constraints on the patterns. we compared apgm with the exact graph mining methods mgm  <cit> . we chose mgm as the counterpart for the comparison because it is an available clique pattern mining algorithm. 

number of patterns identified
we identified frequent approximate subgraph patterns from  <dig> positive proteins in each family. there are two parameters that may have significant influence on the set of mined patterns. the first is the support threshold and the second is the isomorphism threshold. for simplicity, in following experiments in this section we use the new support threshold σ' = σ × |d|, |d| is the size of graph database, and the same change applied in support value. in figure  <dig>  we run apgm with different combinations of τ and σ and collect the total number of identified patterns. our results show that the total number of patterns is not sensitive to the isomorphism threshold, and rather depends on the support threshold heavily. such fact eases the worry that the parameter τ may be too strong for deciding the number of patterns.

for the purpose of comparison, the number of patterns mined by two mining methods are shown in table  <dig> and  <dig>  and the number of patterns acquired by apgm from immunoglobulin c <dig> proteins are also shown in figure  <dig>  in our experiment, we treat a pattern set with the number more than  <dig> as a meaningless one because our sample space is comparatively small and the isomorphism check is computationally expensive. from table  <dig>  we see that exact match fails to provide useful patterns on the immunoglobulin v proteins, which is the typical data set with very noisy background. in comparison, apgm does find some pattern set with a reasonable size in such situation.  in order to evaluate the quality of these patterns, we use the identified frequent subgraphs in classification tests as discussed below.

classification performance
in this experimental section, we used libsvm svm package  <cit>  for protein structure classification. we treat each mined pattern as a feature and a protein is represented as a feature vector v =  where i ≤ i ≤ n and n is the total number of identified features. vi is  <dig>  if the related feature occurs in the protein and otherwise vi is  <dig>  we used the linear kernel and default parameters for svm leave-one-out cross validation. the classification results are summarized in table  <dig> and  <dig>  for some parameter combinations, there are no accuracies – an event which happens under two circumstances. first, there are no patterns found. second, the pattern set is too big to be useful. from the tables we see that the classifications with apgm-based feature highly outperform those based on exact match. for immunoglobulin c <dig> set, the classification based on feature identified by mgm only can reach 73%, while apgm is between 69%~91%. for immunoglobulin v set, since the exact match method cannot mine any meaningful patterns, it fails in classification, while by using apgm, we have the accuracy around 78%. this shows that our apgm has more capability to mine useful structure information from very noisy background than general exact match graph mining algorithms.

tp, true positive; fp, false positive; tn, true negative; fn, false negative.

accuracy = /.

- means accuracies are unavailable.

statistical significance of patterns
in order to further demonstrate the quality of the patterns mined by using apgm, we chose the parameter combination with the best accuracy for the immunoglobulin c <dig> proteins and the immunoglobulin v proteins to check the distribution and significance of patterns. figure  <dig> shows the number of the patterns that the  <dig> immunoglobulin c <dig> proteins contain and the significance scores. figure  <dig> shows those for the  <dig> immunoglobulin v proteins. proteins in figure  <dig> and  <dig> are numbered according to their appearance order in in table  <dig>  for example protein "10" in figure  <dig> is protein 1nfa . the proteins in figure  <dig> and  <dig> are sorted according to the number of patterns contained in the proteins. the significance score p is defined as follows.

  p=log⁡f+/n+f−/n−,if f−≠0f+≠ <dig> 

there are three special cases of p's value. if f- =  <dig> and f+ ≠  <dig>  we set p = 10; if f- =  <dig> and f+ ≠  <dig>  we set p = -10; and if f- =  <dig> and f+ =  <dig>  we set p =  <dig> 

although the patterns do not distribute uniformly among immunoglobulin c <dig> proteins, they cover all the positive proteins. the significance score of these patterns shows strong bias toward the immunoglobulin c <dig> proteins, and among  <dig> only  <dig> noise features exist. for immunoglobulin v proteins, the features miss two positive proteins, but these features are highly correlated with positive samples with all p equalling  <dig> 

computational performance
since the support value of approximate subgraph mining and that of frequent subgraph mining have different meaning, it is generally hard to compare the computational performance of approximate subgraph mining and that of frequent subgraph mining. if τ is less than  <dig>  approximate subgraph mining may obtain more patterns than that of general frequent subgraph mining by taking more running time. because of this reason, we use the pattern discovery rate , which is computed as the number of discovered patterns n divided by the running time t. we use rate rather than running time as the criteria to compare computational efficiencies of different algorithms. we evaluated the computational efficiency of apgm with synthetic data sets.

we generated the synthetic data set by the same synthetic graph generator as  <cit> . the synthetic graph generator takes the following set of parameters: d is the total number of graphs; t is the average size of graph; i is the average size of potentially frequent subgraphs; l is the number of potentially frequent subgraphs; v is the number of vertex labels; e is the number of edge labels. the default parameter values that we use are d =  <dig>  t =  <dig>  i =  <dig>  l =  <dig>  e =  <dig>  v =  <dig> 

we compare the performance rate between mgm and apgm using different isomorphism threshold values . we use the support threshold  defined in definition <dig> in this experiment. from figure  <dig>  we see that with the change of isomorphism threshold, performance of apgm differs narrowly. even if apgm takes approximate matching, its performance is very similar with mgm. indeed, with some values of support threshold, apgm with low isomorphism threshold  even has much higher rates.

discussion
finding features  that discriminate one protein family from random selected proteins motivated us to further investigate the possibility of examining these motifs as characteristic signatures of a protein family. we investigated the spatial distribution of the residues covered by our mined structure motifs in individual proteins. we found the residues of structure motifs are highly centralized on a limited number of positions for each protein. we picked up the protein 1mju  in immunoglobulin c <dig> set as one example.  <dig> patterns, which we obtained, maps to  <dig> amino acids among the total of  <dig> residues in 1mju. through literature search, we found residues identified by apgm are related to the known functional sites in the protein. for example, position  <dig> and  <dig> are residues in contact with ligand gol <dig> as studied in  <cit> . both positions are not discovered by the exact pattern mining method. this result suggests that apgm is more sensitive in recognizing functional related residues, as compared to exact pattern mining methods. however, we admit that comprehensive experimental study, involving multiple protein families, is needed before we could draw the conclusion convincingly.

CONCLUSIONS
in this paper we present a novel data mining algorithm, apgm, to perform structure comparison and structure motif identification in diverse proteins. in our method we encode structural motifs as subgraphs of geometric graph of proteins. instead of using a general graph mining method to extract frequent subgraph motifs, we have developed the approximate graph mining algorithm and taken advantage of known substitution matrices in protein structure motif identification. compared with general graph mining algorithms, apgm not only offers more qualified patterns that achieve higher classification accuracy, but also shows a reasonable computational performance. by applying this method to other protein families, "structure fingerprints" can be collected and used in domain classification schemes where structural information is desired. furthermore, without loss of generality, choice of appropriate compatibility matrices allows our method to be employed in any domain where subgraph labels have some uncertainty. for example, networks of personal contacts "mutate" as people die or change employment. compatibility matrices assigning probabilities of 'label substitution' within families or organizations may allow the essential natures of personal contact subgraphs to be preserved nevertheless.

competing interests
the authors declare that they have no competing interests.

authors' contributions
yj developed methods, implemented the software, and drafted the manuscript. vb and jz were involved in testing the data set. jh was responsible for all aspects of the project, and helped revise the manuscript. lc provided advices on the biological aspect of the work, and helped revise the manuscript.

