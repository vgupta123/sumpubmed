BACKGROUND
in the field of microbial genomics, successful laboratory cultivation of naturally occurring microbes has become a major bottleneck  <cit> ; this limits and biases our understanding of the biochemical capabilities and ecological roles of microbes in their habitats. since cultivation is a prerequisite for standard genome sequencing approaches, we are still lacking genomic information for many important microbial lineages . in addition, there is a sequencing backlog even for those strains that have been cultivated successfully; this however is being addressed now by directed sequencing efforts that are underway  <cit> . nevertheless, the severe biases and the large gaps in the worldwide collection of cultivated isolates make it difficult to fully appreciate evolutionary processes and microbial ecology, or to exploit the large repertoire of microbial genes that might be relevant to medicine and biotechnology. while techniques that analyze single cells, such as multiplexed microfluidics pcr  <cit>  or single-cell genome sequencing  <cit> , can provide unequivocal genomic data in the absence of cultivation, these methods are still limited in terms of throughput and usability. thus, the approach that presently generates the largest amount of unbiased microbial genome sequence data is 'metagenomics' .

more than  <dig> metagenomics projects are currently registered  <cit>  at various stages of completion; these address a wide variety of habitats and microbial lifestyles  <cit> . typically, in such projects, an environmental sample is processed by lysing cells and indiscriminately isolating genomic dna; the latter is then fragmented and shotgun-sequenced to a desired depth. however, even when employing the latest next-generation, high-throughput dna sequencing technologies, the large complexity and genomic heterogeneity of natural microbial communities often preclude de novo assembly of complete genomes from the data - instead, a large number of short to medium-sized sequence fragments are obtained. from these, quantitative inferences can already be made regarding genome sizes  <cit> , recombination rates  <cit> , and functional repertoires  <cit> , among others. however, many of the perhaps more important ecological questions require the assignment of the sequence fragments to the microbial lineage they originate from, a process called 'binning'  <cit> .

an increasing number of algorithms have been devised for this task; these can largely be divided into two groups. the first consists of 'unsupervised' approaches  <cit> , in which sequences are binned using signature-based algorithms that focus on nucleotide compositional signals . these approaches require no external reference information a priori; instead, they learn to distinguish the major taxonomic groups from the data itself . in contrast, 'supervised' approaches  <cit>  require extensive, annotated, external reference information. for the most part, these approaches interpret the results of large-scale homology searches against sequence databases, sometimes followed by phylogeny reconstruction; the external reference information is usually derived from the available fully sequenced microbial genomes. for both types of approaches, the various implementations differ greatly in their speed, accuracy, coverage, ease of installation and use, and in the interpretation and visualization of the results. owing to the size and nature of the input data, formal phylogenetics algorithms are relatively rarely used in these pipelines, with three exceptions: maximum parsimony in  <cit> , neighbor joining in  <cit> , and an approximate maximum likelihood approach in  <cit> . that the maximum likelihood approach has not been applied more frequently is somewhat surprising, since it is arguably among the most accurate and best-described techniques in phylogenetics  <cit> . one reason for this is presumably the high computational cost of this approach, which makes it difficult to execute for very large numbers of sequence fragments.

here, we describe a software framework  that does employ full maximum likelihood, and which is specifically designed for metagenomics sequences. we significantly reduced the computational costs through algorithmic improvements, as well as through a focus on a restricted  set of informative gene families. the aim of the framework is to cover the high-accuracy end of the tool spectrum, with a particular focus on consistency across different sources of input data. to achieve this, the package, a) starts from raw nucleotide sequences to avoid inconsistencies arising from different gene-calling strategies, b) corrects for frame-shifts and other errors on the fly to optimally extract marker genes, c) includes searches against 'off-target' reference sequences to avoid the detection of undesired deep paralogs, d) concatenates marker genes when several of them are observed in a given sequence fragment, and e) offers intuitive visualization features, both via the command-line as well as via the web-server. the framework contains hand-curated reference phylogenies and alignments; in the first full release that we describe here , these references encompass a total of  <dig> distinct gene families that have been selected to address both taxonomic as well as functional aspects of microbial assemblages.

RESULTS
we have previously outlined  <cit>  and used  <cit>  a preliminary version of the mltreemap pipeline; however, this initial implementation was not designed for deployment, only focused on phylogenetic information, and was computationally very inefficient . we have since achieved a more than 100-fold speed-up, mainly by using more efficient pipeline code, and by switching the employed maximum likelihood phylogenetics engine from tree-puzzle  <cit>  to raxml  <cit> . this switch also enabled us to deploy recent optimizations inside raxml that were specifically devised for this purpose . the basic work-flow of a fully automated mltreemap run proceeds as follows : first, a batch of input sequences  are searched for the presence of marker genes, by running blastx against a curated collection of reference proteins . in a next step, all detected instances of these marker genes are extracted using genewise  <cit> , based on hidden markov models  that are provided as part of the mltreemap pipeline; this establishes protein-coding open reading frames and exhibits some tolerance to sequencing errors such as frame-shifts or gaps. the query proteins are then aligned to the corresponding reference proteins using hmmalign  <cit> , and the resulting alignments are concatenated in case more than one marker gene is located on a given fragment . next, alignments are subjected to mild gap-removal  <cit> ; and subsequently they are submitted to raxml. there, the sequences are placed in their most likely position within the corresponding reference phylogeny. importantly, raxml is instructed to fully maintain the input topology of the reference phylogeny and to keep it fixed during the computations. upon launching, raxml initially optimizes the maximum likelihood model parameters and computes all branch-lengths of the reference tree, based on the alignment provided. next, raxml will insert  the query sequence one at a time into every possible branch of the reference tree, re-optimizing the three branch lengths at the insertion position for each attempt. the best-scoring position  for each query sequence is then reported. optionally, raxml can use non-parametric bootstrap to account for placement uncertainty. for the bootstrap replicates, heuristics are deployed that only assess the top 10% most promising placement branches as computed on the original  alignment and thereby reduce run times for bootstrap placements by one order of magnitude. note that, under the settings chosen for mltreemap, the actual likelihood computations in raxml follow the standard maximum likelihood approach under a standard protein evolution model, for maximum accuracy. finally, the results are aggregated, reported in human-readable form and visualized graphically in the context of the reference trees . currently,  <dig> of the reference protein families that we provide are collectively used to assess the taxonomic composition of the input sequences . another four families serve as indicators for the presence of crucial metabolic pathways . in the current implementation, the processing of an amount of dna sequences that is equivalent to an average microbial genome takes about three to four hours on a single cpu . the performance scales roughly linearly with the amount of dna to be processed; for example, a medium sized metagenome  requires about  <dig> hours to compute on a single cpu; a larger metagenome  requires close to  <dig> hours. since the individual dna fragments can be assessed independently, the pipeline can seamlessly be deployed onto a compute cluster .

to validate the performance of the mltreemap pipeline, we first tested its accuracy on short sequences of known origin. these were generated by artificially fragmenting fully sequenced genomes into non-overlapping stretches of 1' <dig> base pairs each . to avoid circularity, we removed the corresponding genomes from our reference alignments and pruned them from the trees. thus, our testing amounts to leave-one-out cross-validation. note that our phylogenetic reference tree is already non-redundant at the genus level , meaning that removal of the query genome usually results in the next best relative to be available only at the phylogenetic rank of 'family' or higher. the performance of our approach was compared to that of two widely used, previously published approaches, megan  <cit>  and amphora  <cit> , which are based on blast searches or maximum parsimony insertions, respectively. the algorithmic challenge of our test varies from query genome to query genome, depending on its phylogenetic position  in the reference phylogeny. this is illustrated, for two exemplary genomes, in figure 2: all three approaches deliver a good accuracy when the query genome remains in the reference . however, when removing the query genome from the reference, together with increasingly distant relatives, the accuracy of all three approaches decreases, as expected. this is relevant, because actual environmental sequence fragments will often be fairly unrelated to any fully sequenced genome. since in our test each query genome is represented by  <dig> independent reference genes, the resulting placements are spread out over the tree; this is a good visual indication of the nature and extent of the placement error . for the two arbitrary genomes that we chose as examples in figure  <dig>  maximum likelihood and maximum parsimony were both performing significantly better than the blast-based heuristics implemented in megan. between the two, maximum likelihood performed better in three instances, whereas parsimony insertion performed better in one instance .

we next performed this test systematically, based on  <dig> complete genomes ; see figure 3). this involved testing 406' <dig> sequence fragments, of which 4' <dig> were found to contain at least one of our phylogenetic marker genes . we observed that, overall, maximum likelihood placed  <dig> % of the query sequences at precisely the correct position in the tree, and another  <dig> % in close vicinity . this compares favorably to maximum parsimony insertion, using the exact same sequence input . this can also be described in taxonomic terms: maximum likelihood places  <dig> % of the query sequences within the correct phylum, and  <dig> % even within the correct order; these numbers are  <dig> % and  <dig> % for maximum parsimony, respectively. the gain in accuracy over maximum parsimony is not dramatic, but it is statistically significant: when re-testing the fragmented bacterial genomes in  <dig> bootstrap runs , the distributions of accuracy scores for the two approaches were at least four standard deviations apart - testing each of the levels 'phylum', 'order' and 'family'. overall, there are notable differences with respect to the three kingdoms of life: bacteria are currently placed with the highest accuracy, with archaea being a close second, whereas eukaryotes are assigned with comparatively low accuracy. the difficulties with eukaryotes can be partly attributed to the presence of more paralogs, and introns , but presumably also to mitochondria and other organelles, which introduce non-eukaryotic versions of the marker genes we employ.

we also assessed our procedure by applying it to entire metagenomics datasets, both simulated  <cit>  and real  <cit> . for the latter, independent taxonomic information is available, which is based on  <dig> s ribosomal rna genes that have been pcr-amplified and sequenced from the very same sample  <cit> . as is summarized in figure  <dig>  the results for both datasets are in good quantitative agreement with the known  composition of the input data. in the case of the simulated dataset  <cit> , the task is necessarily somewhat easier, since this set has been assembled by fragmenting known genomes, and many of these genomes are also contained in our reference phylogeny. nevertheless, of the  <dig> genomes that contributed to the 'simmc' dataset  <cit> , more than half  are not contained in our reference; and of these,  <dig> are not even represented at the genus level. in addition, the simulated set contains genomes at widely differing levels of sequence coverage, and the genome sizes are also quite variable . in spite of this, the overall taxonomic composition is reliably recovered by mltreemap, and none of the phyla known to be present in the sample have been missed. for the real metagenomics dataset  <cit> , the actual 'target' composition is not known with much certainty, since the pcr-based assessment that has been reported together with the sample could itself exhibit intrinsic quantitative error. indeed, we observe that the mltreemap classification appears somewhat more 'balanced' than the pcr-based classification . this observation is of course not conclusive: the actual composition of the original sample could well be more biased than reflected in the metagenome. we do note that the distribution of  <dig> s genes in the metagenome  agrees somewhat better with the mltreemap classification than with the pcr-amplified  <dig> s genes , so the observed discrepancy might at least partially be due to the known amplification biases of pcr reactions on mixed templates  <cit> , or due to biases in cloning efficiency  <cit> .

finally, we tested the mltreemap pipeline not only with respect to taxonomic assignment, but also with respect to the functional characterization of samples. currently, the pipeline covers four important enzyme families . these families are represented by hand-curated alignments, and visualized in the form of annotated protein trees. future versions of mltreemap will extend this set in order to cover a significantly larger number of important diagnostic protein/enzyme families that are indicative of core functions . figure 4a shows a typical result of mltreemap for the functional classification of a set of environmental sequence samples. three datasets are shown, that each contain representatives of the rubisco enzyme family . the mere presence of these genes in the sample could also have been deduced from simple blast searches on the data; however, the summary shown in figure 4a reveals crucial, additional information: first, the mapped sequences show a clear separation into distinct sub-families of rubisco. the surface seawater sample is dominated by subfamily # <dig>  the plant surface sample by subfamily #4b, and the distal human gut by subfamily #4a and other unclassified parts of the tree . second, the functional placements tend to corroborate the taxonomic assignments that mltreemaps reports for the same samples ; this enables checks for consistency and/or unexpected horizontal transfers. and third, the placements can be seen to differ dramatically in their distance from the root, that is, in their evolutionary 'depth' with respect to previously known members of the family. for example, in the case of the surface seawater, virtually all sequences were very close to the tips of the tree, in other words closely related to known examples of rubisco . in contrast, instances of rubisco-like proteins in the human gut were observed much closer to the root, i.e., at a greater evolutionary distance from previously known sequences and in non-canonical subfamilies. from this, it would be much harder to predict their functions, and it is indeed conceivable that they are not functioning in co <dig> fixation, but rather in other, possibly sulfur-related metabolic pathways . the standardization and ease of use provided by mltreemap allow for consistent, semi-quantitative analysis of the functional coding potential of entire collections of metagenomics samples - as an example, figure 4b shows combined data for  <dig> distinct metagenomes. in this case, the coding capacities for nitrogen fixation and co <dig> fixation have been compared across samples and sites. large differences become apparent, including the known paucity of nitrogen fixation genes in some environments  <cit> , but also surprises such as nitrogenase-like genes in the distal human gut. here again, the availability of the annotated reference trees in the mltreemap output is crucial: the sequences are likely of a non-canonical, archaeal type, related to genes in methanobrevibacter smithii, and are thought to function in a process other than nitrogen fixation  <cit> .

for both, functional as well as taxonomic assignments, mltreemap offers a number of user-definable parameter settings. users can chose which of two phylogenetic reference trees to use , and whether to use maximum likelihood or maximum parsimony . when choosing maximum likelihood, users can also request bootstrap replicates. however, bootstrapping will in most cases not be necessary since the input data is already divided into many independent sequence fragments . bootstrapping could of course be turned on for specific cases of interest, but for assessing entire datasets it is probably less advisable. this is because individual raxml runs using all the columns of a given sequence alignment yield more accurate results than each individual bootstrapping run in which columns have been re-sampled . the overall accuracy of mltreemap is fairly good already, but it could be further enhanced by improving the coverage and evenness of the reference trees and also by optionally giving deeply assembled contigs  correspondingly more weight in the final aggregation step. future versions of the pipeline could also likely be optimized further with regards to computational speed - we note that currently much time is still spent outside raxml, in the pre-processing steps. if further speed-ups can indeed be achieved, then the pipeline should cope well with further advances in sequencing technology - perhaps even to a point in the future when much of the raw data will be discarded immediately after sequencing, and only genes of interest  will be kept.

CONCLUSIONS
mltreemap performs consistent and rapid placements of metagenomics sequence fragments into high-quality, manually curated reference phylogenies - with high accuracy, albeit covering only a restricted fraction of any given sample . it focuses on phylogenetically and functionally informative genes, thereby aiming to capture and characterize core aspects of a microbial community. mltreemap is one of only a few frameworks that can address microbial eukaryotes on an equal footing with prokaryotes, and it can easily be extended by the user . the pipeline will likely be best put to use when analyzing hundreds of samples in comparison: this should ultimately reveal quantitative correlations between certain taxonomic clades and certain functional gene abundance profiles, thus helping to address the classic question of 'who does what' in microbial assemblages.

materials and methods
data sources
annotated protein-coding genes from fully sequenced genomes were downloaded from string  <cit>  and refseq  <cit> . the phylogenetic 'tree-of-life' references were obtained from  <cit>  and  <cit> , but were subsequently modified: we removed genomes for which we were unable to obtain sequences, at the time, and added others. for the tree of  <cit> , we made the representation of organisms non-redundant at the genus level, with a small number of exceptions for fast-evolving genera, and recomputed the best maximum likelihood tree, while keeping fixed the original topology of the published tree . this computation was based on concatenated alignments of the exact same  <dig> reference genes as used by mltreemap. note that the purpose of mltreemap is not to generate tree-of-life phylogenies de novo; instead these trees are provided externally  <cit> , we therefore chose to maintain their published topology. for the four functional reference families, gene family information was obtained from kegg  <cit>   and from string  <cit>  . in total, the current release  <dig>  of mltreemap contains  <dig>  genes in the reference data; on average, each gene family of interest is represented by  <dig> genes.

implementation and use
mltreemap is provided both online  as well as offline in form of a command-line executable. the latter is designed with as few external runtime dependencies as possible: blast, genewise, hmmer and raxml. visualization of the results is optional, and a separate perl-script  is provided for this purpose. when using the pipeline, individual reports are generated for each sequence fragment on which marker genes were detected. aggregated reports are also generated, but this step may have to be repeated by the user .

the mltreemap pipeline has only a few configurable parameters ; other settings are hardcoded with the following default values: required significance of initial blastx hits , gap removal parameters for gblocks , and required sequence length of the marker genes after alignment and gap removal . due to this latter threshold, the pipeline will not yield much useful information for samples with typical read lengths below  <dig> base pairs . the maximum likelihood insertion in raxml is typically done under the following settings: "-f v -m protgammawag" . for only  <dig> of the  <dig> protein families, a substitution model other than wag is used . raxml works with unrooted trees; however, the mltreemap pipeline reports all results in the context of rooted trees, for convenience . note that the actual maximum likelihood insertion step in mltreemap is clearly defined and fairly generic - it could in principle be performed also by software other than raxml . mltreemap can be compiled and executed locally, and previous versions are maintained at our website, for reference . we plan to update mltreemap yearly - each time updating the reference alignments with data from newly sequenced genomes, and extending the repertoire of functional reference families.

validation
for the validation tests based on whole genomes, the query genomes were artificially fragmented into non-overlapping, consecutive stretches of 1' <dig> base pairs each. prior to each test, the respective genome was removed from the reference phylogeny to avoid circularity, and mltreemap placements were made using either maximum parsimony or maximum likelihood . the resulting placements were then compared to the known positions of the query genomes in the reference tree, either by assessing the node distance or the taxonomic assignment. for the latter, the newly placed fragment was assigned to the highest taxonomic rank for which all genomes in the clade below the placement branch were in agreement. for the tests based on simulated metagenomes, we chose the phrap assembly of the 'medium complexity' simulated dataset, available at http://fames.jgi-psf.org/. the expected target composition of this set is not simply defined by the list of constituent genomes  <cit> ; instead, since the relative genome representation depends on the read coverage of each genome in the simulated set, we weighted all genomes accordingly.

list of abbreviations
pcr: polymerase chain reaction; ml: maximum likelihood; mp: maximum parsimony; rubisco: ribulose- <dig> -bisphosphate carboxylase oxygenase; mmo: methane monooxy-genase.

authors' contributions
ms implemented the entire pipeline, conducted all validation testing and wrote the manuscript. as developed and implemented the placement algorithms and heuristics in raxml, defined the interface to the rest of the pipeline, and helped writing the manuscript. sab supported the systematic validations of the pipeline, validated the improvements in raxml, and helped writing the manuscript. cvm implemented the initial versions of both the pipeline as well as the website, and wrote the manuscript.

additional data files
all reference information contained in mltreemap  is available from the associated website http://mltreemap.org/.

