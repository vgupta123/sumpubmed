BACKGROUND
one type of data collected and used by geneticists involves the scoring of markers in a genetic cross of two parents whose markers are known. such data are used to create genetic maps, associate markers with traits of interest, and to study recombination. for some organisms such as yeast and arabidopsis, all four products of meiosis can be scored giving rise to tetrad data. assuming the order of the markers is known or has been inferred, the geneticist can look at adjacent marker patterns and determine if the tetrad has parental ditype, tetratype, or non-parental ditype configuration for the interval. see figure  <dig>  the simplest explanation for parental ditype is that there are no crossovers in the interval. similarly, the simplest explanation for tetratype and non-parental ditype patterns are one and two crossovers in the interval, respectively. however, two crossovers in an interval can lead to any of the three possible patterns . under the assumption that the pair of parental strands involved in the crossover is chosen independently for each of the two crossovers , the respective probabilities of these three outcomes are 1/ <dig>  1/ <dig>  and 1/ <dig>  the no chromatid interference assumption has been supported statistically in most of the experiments where the matter was considered  <cit>  and the general formula for the conditional probability of observing any particular tetrad pattern  in an interval given the number of crossovers was worked out by mather in  <dig>  <cit> .

the placement of crossovers along the tetrad, however, often does show crossover interference; that is, a crossover discourages another one from occurring nearby. crossover interference has been observed in many organisms including fruit flies  <cit> , yeast  <cit> , bread mold  <cit> , mice  <cit> , humans  <cit> , and green plants such as arabidopsis  <cit> . the only successful statistical model for crossover interference is the counting or chi-square model whose mathematical formulation dates back to payne in  <dig>  <cit>  and which was given an elegant formulation in a text of bailey as the segmental calculus in  <dig>  <cit> . if the crossovers were distributed at random, the spacing between them would be exponential, which is equivalent to the scaled chi-square distribution 12χ22
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqacigacagaaeqabaqabegadaaakeaadawcaaqaaggaaiab=fdaxaqaaiab=jdayaaacqwfhpwydawcaaqaaiab=jdayaqaaiab=jdayaaaaaa@322c@. if the spacing between crossovers is the sum of two exponential random variables, then the distribution is the scaled chi-square distribution 14χ24
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqacigacagaaeqabaqabegadaaakeaadawcaaqaaiabigdaxaqaaiabisda0aaaiiaacqwfhpwydawcaaqaaiab=jdayaqaaiab=rda0aaaaaa@3246@. in general, if the spacing between crossovers is the sum of m +  <dig> exponential random variables, then the distribution is 12χ22
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqacigacagaaeqabaqabegadaaakeaadawcaaqaaiabigdaxaqaaiabikdayiabcicaoiabd2gatjabgucariabigdaxiabcmcapaaaiiaacqwfhpwydaqhaawcbagae8nmaijae8hkagiaemyba0maey4kasiaegymaejaeiykakcabagae8nmaidaaaaa@3c26@. the model gained biological credibility when foss et al.  <cit>  proposed that the double strand breaks that initiate recombination events were distributed at random but only every m + 1st one was resolved as a crossover, the intervening ones being resolved with noncrossovers  the number of noncrossovers between pairs of crossovers, m, is known as the interference parameter. the counting model has been shown repeatedly to fit genetic data well, both statistically and graphically, and provides a substantially better fit than other statistical models of interference  <cit> .

the mathematical details of the use of the segmental calculus for analyzing tetrad data under the counting model and for the extension of the counting model to include an independent subset of crossovers not subject to interference, which provides a better fit to data from arabidopsis, humans, and yeast, can be found in  <cit> . the basic idea is to use matrices to keep track of the number of noncrossovers to the left  and to the right  of the first and last crossovers in the interval, respectively. the dimensions of the matrices required in the analysis are  ×  where m is the interference parameter. the estimate of m is chosen to maximize the statistical likelihood function the data.

calculating the likelihood function involves summing over all possible patterns for the relative positions of the crossovers among the noncrossovers, which is accomplished by the multiplication of matrices that are determined for each interval and each tetrad pattern . in the case of the extended model, we also have to sum over all the possibilities for the number of crossovers that are non-interfering. the estimates of m  and p  are chosen jointly to maximize the likelihood function of the data. since the interference parameters in some organisms can be quite large, the numerical optimization for either model can be quite time-consuming. we save some computational time by using the formula of perkins  <cit>  for estimating the intermarker distances rather than using maximum likelihood to estimate these values. for most practical applications, the maximum likelihood estimates and the perkins estimates will be close.

implementation
interferenceanalyzer is written in java. the original source code and executable .jar files are available for windows, linux, and macos. the application is also available as a windows executable. the source code, executables, sample data sets, and sample results are available at  <cit> .

RESULTS
we demonstrate how to use the software to analyze a specific dataset, use simulations to give confidence intervals for parameter estimates and assess the significance of the fit of the extended counting model, and discuss the relative speed of our software compared to comparable sas code.

raw data analysis
genetic data must be in tab-delimited format and stored as a text file. the first two lines specify the parental marker values. the next four lines specify the values for the first tetrad, the four lines after that specify the values for the second tetrad, etc... the file must end with one  carriage return after the last line of data. any symbol may be used to specify the parental values for the markers. common possibilities include the use of the numbers  <dig> and  <dig>  the use of the symbols + and -, or marker names such as ura and ura. an example of the first  <dig> lines of two of the common types of codings is provided in table  <dig>  note that the first tetrad in the second data set contains entries indicating that the second marker could not be properly scored. tetrads with entries that match neither parental type or with entries that indicate that a gene conversion occurred at a marker  are discarded from the analysis.

the file containing the data is uploaded to the software using the "load file" button on the "analyze raw data" tab of the software. the user may decide to analyze the data only under the original counting model, only under the extended model which allows for a portion of the crossovers to be free from interference, or under both models by checking the appropriate buttons. after the user clicks on the "analyze" button, a progress bar displays. the progress bar allows the user to know that the program is running but is not a good measure of the time remaining because it is linked to the current value of the interference parameter, m, which is allowed to run from  <dig> to  <dig>  it takes much longer to calculate the likelihood for larger values of m than for smaller ones but the program terminates as soon as the peak of the likelihood function has been reached and so often does not reach the larger values allowed for m. there is no linear measure available for the time remaining to complete the calculation of the maximum likelihood estimator.

the results are displayed and buttons that allow exporting the results and the intermarker distances to files for use later are displayed. exporting the intermarker distances is highly recommended in order to be able to use the simulations panel to give confidence intervals for the parameters and assess the significance of the extended model over the original counting model.

a picture of this panel of the software is given in figure  <dig>  the data used for this analysis are the raw tetrad patterns for arabidopsis chromosome  <dig> originally analyzed in  <cit> . under the original counting model the results show that the estimate of the interference parameter is m =  <dig>  under the extended model, the interference parameter estimate can only increase because the extended model removes a portion of non-interfering crossovers. for the extended model, the results are that the interference parameter is m =  <dig> and the proportion of non-interfering crossovers is p =  <dig> . the log likelihood ratio, used below to calculate the significance of the increase in fit provided by the extended model, can be calculated as the difference in the log likelihoods provided:  <dig>  -  <dig>  =  <dig> .

use of simulations
the analysis of the original tetrad data discussed in the previous section gives point estimates for the interference parameter, m, in the counting model and the interference parameter, m, and the proportion of crossovers that are free of interference, p, in the extended model. interval estimates can come from using the asymptotic normality of the maximum likelihood estimators and fisher's information function or via simulations. simulations are more appropriate with small datasets and with large estimates of m because the distribution of the maximum likelihood estimators tend not to be close to normally distributed. also, while we can form the standard likelihood ratio test statistic for determining how much better the extended model fits the data than the original counting model, the null hypothesis that the original counting model is an adequate model for the data is on the boundary of the parameter space . thus, the distribution of the usual likelihood ratio test statistic need not be approximately chi-square and simulations are needed to accurately assess the significance of the hypothesis that the extended model fits the data better.

confidence intervals for parameter estimates
for the arabidopsis data, the extended model estimate of the interference parameter was m =  <dig> and the estimate of the proportion of crossovers free from interference was p =  <dig> . to place confidence intervals around these estimates, we use these parameter estimates from the original data analysis and the estimates of the intermarker genetic distances obtained from the original data using perkins's formula to simulate new data sets. in each simulated data set, we re-estimate the model parameters m and p. the variation we see in these estimates reflect our uncertainty in the original parameter estimates. if, for each parameter, we place the simulated values in order and extract the  <dig>  and  <dig>  percentiles, we obtain the 95% percentile bootstrap confidence interval.

to use the simulations panel for this purpose, we would load the file containing our intermarker distances, enter the number of tetrads in our original data set  in the "sample size" textbox, choose m =  <dig> and enter  <dig>  in the textbox for p, and uncheck the box for analyzing the data using the original counting model since we are not interested in those results.

we give the results for  <dig> simulations in table  <dig>  these results demonstrate the limitations of simulations to provide confidence intervals for the interference parameter when that parameter is large and the sample size is small. the largest value for m allowed in the program is  <dig> and the analysis of the data when m is large takes an extremely long time. these  <dig> simulations took approximately  <dig> minutes on a dell latitude c <dig>  with  <dig>  ghz cpu and  <dig> gb ram. also, the maximum likelihood estimate for m for the simulated data reached and was truncated at  <dig> twice in these five simulations. thus, it is not computationally feasible to place accurate, bounded, confidence intervals around the interference parameter when m is large and the sample size is relatively small. further, the confidence intervals around the proportion of non-interfering crossovers, p, is likely to be slightly biased due to the truncation of the interference parameter at m =  <dig> 

since data sets from yeast avoid these problems, we include a set of yeast data generated in the stahl lab and analyzed in  <cit> . the sample size is large  and the interference parameter estimates are relatively small . the estimates for the model parameters for the extended model for the original data set were m =  <dig> and p =  <dig> . two hundred simulations of data sets of  <dig> tetrads using these parameter estimates for m and p took approximately eight hours on a macintosh  <dig>  ghz powerpc g <dig> laptop computer with  <dig> gb ddr sdram. after exporting the results, opening them in a spreadsheet program, and sorting the data by the interference parameter estimate under the extended model, pulling off the 5th and 195th values gives a 95% percentile bootstrap confidence intervals for m of  <cit> . similarly, sorting the data by the proportion of non-interfering crossovers, p, and pulling off the 5th and 195th values gives a 95% percentile bootstrap confidence interval for p of .

assessment of the significance of the fit of the extended model
for the arabidopsis data set, we assess the significance of the fit of the extended model by simulating data under the best fitting original counting model . since the estimate of the interference parameter for the original counting model is m =  <dig>  the simulations are feasible. we then analyze the simulated data sets under both models. figure  <dig> shows the output and the "export results" button located at the bottom of the results panel. to determine the significance of the fit of the extended model to these data, the researcher would calculate the difference between the likelihoods of the counting model and extended model for the original data:  <dig>  -  <dig>  =  <dig> . the researcher would then open the simulation results in a spreadsheet program, calculate a column of such differences , sort that column, and determine what proportion of the differences are greater than that of the observed data . in our  <dig> simulations, no difference was greater, so our best estimate of the significance is 0/ <dig>  this significance level indicates that the extended model provides a much better fit to the original data than the original counting model does.

performance
the intermarker distances for the arabidopsis data used in our worked example are . for  <dig> simulations with m =  <dig> and p =  <dig> analyzed under both the original counting model and its extension to include a proportion of noninterfering crossovers, interferenceanalyzer took approximately  <dig> hour on a dell latitude c <dig>  with  <dig>  ghz cpu and  <dig> gb ram whereas the equivalent code in sas took approximately  <dig> hours. thus, the java program seems to be approximately  <dig> times faster than similar code in sas on the same computer.

discussion
the development of inferferenceanalyzer should make the powerful multilocus techniques for assessing interference accessible to geneticists. future development planned includes allowing for the analysis of spore data where only one product of meiosis is observed, allowing for analysis when positions of the crossovers along a tetrad or spore are known using the algorithms in  <cit> , and the inclusion of the ability to simulate data under the mechanical stress model for crossover interference  <cit> . while the mechanical model does a good job approximating the observed interference patterns in real data, it is not a statistical model and its best fitting parameter values cannot be obtained feasibly from data. thus our software will not be able to fit the mechanical model to data but only allow the simulation of such data.

CONCLUSIONS
we recognize the need for easy-to-use software in order to make sophisticated and powerful multilocus statistical techniques readily available to all geneticists. interferenceanalyzer is our attempt at this goal.

availability and requirements
project name: interferenceanalyzer

project home page: 

operating syatems: platform independent

programming language: java

other requirements: java  <dig> . <dig> or higher

license: open source

any restrictions to use by non-academics: none

authors' contributions
lv translated the original sas and visual basic code of eah into java and programmed the user interface. eah debugged and refined the java code, helped design and test the user interface, and wrote this article. both authors read and approved the final manuscript.

