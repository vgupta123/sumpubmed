BACKGROUND
similarity search is one of the very first computational analyses in the annotation of a genomic/metagenomic dataset. among many computational tools for this task, blast is most commonly used  <cit> , owning to its two main advantages: the statistical model for measuring the significance of local sequence similarities  <cit>  and its speed. blast pioneered the "seed-extension" approach , which runs much faster than the rigorous smith-waterman local alignment algorithm  <cit>  but achieves approximately the optimal alignment in practice.

the rapid advance of genome sequencing, in particular the ngs techniques that enabled the generation of dna sequences at several magnitudes higher throughput than the conventional dna sequencers, has posed new challenges for sequence comparison. for instance, it will take a 1000-cpu computer cluster approximately a month to search a set of dna sequences of 20g bases total  against a protein database of current size  by using blast search. for clarity, we do not specify blast programs in this paper--if the input sequences are dna sequences, blastx will be used, which translates dna sequences in all  <dig> frames. note that the current metagenomic approach, i.e. the direct dna sequencing of environmental species, represents an urgent need for this kind of database searching  <cit> . in metagenomic studies, blast results are used not only for the identification of protein/gene families   <cit> , but also for the taxonomic analysis of the microbial community . without further improvement, database searching will become a bottleneck for the downstream computational analysis of high-throughput sequencing data.

the bioinformatics community was aware of the speed limitation of blast tools in the application for the whole genome alignment. consequently, many ultra-fast tools were developed to replace blastn and megablast in aligning long genomic sequences, e.g. mummer  <cit> , patternhunter  <cit> , blat  <cit>  and blastz  <cit> , which typically use sophisticated algorithms to select seeds that can be chained to form long alignments. most of these novel algorithms, however, are not directly applicable to protein sequence database searching owning to a few distinctions between protein and genomic sequences. protein sequences  are much shorter than genome sequences , while the alphabet of protein sequences  is much larger than that of dna sequences . furthermore, some amino acids  are chemically similar, and often can be replaced by one another without changing the global structure  or the function of a protein. hence, the alignment of homologous genomic sequences usually contain relatively long and exact matched seeds , whereas the alignment of homologous protein sequences often contain only short exact matches. as a result, in order to achieve high sensitivity, protein database searching tools must retain many false seeds in the fast seed detection step for the seed extension, which is time-consuming.

we proposed a new kind of seeds for protein sequence comparison based on a reduced  amino acid alphabet , and developed a new protein database search tool rapsearch, based on the representation of protein sequences in the reduced amino acid alphabet. previous studies have shown that the homologous proteins with low sequence identities may still share significant common sequence patterns, for example, the sequence profiles  <cit>   or strings of reduced alphabets  <cit>  . rapsearch follows the seed-extension approach--it first attempts to identify maximal exact matches  between the reduced alphabet sequence of a query protein and the reduced alphabet sequence of all proteins in the database using suffix array , and then uses the same heuristic extension algorithm as used in blast  <cit>  to extend and evaluate each of these seeds.

we illustrate the advantage of using seeds composed of reduced amino acids for protein database searching using a schematic example in figure  <dig>  in the alignment between a query protein and a subject protein in the database, the longest exact seed match on the  <dig> amino acid alphabet is  <dig>  whereas the longest exact match on the reduced alphabet shown in figure 1a is  <dig>  therefore, in order to identify a protein in the database that is similar to the query protein, we should test all seeds with  <dig> residues or longer if the 20-aa alphabet is used, whereas only seeds with  <dig> residues or longer should be retained if the reduced alphabet is used. as a result, approximately  <dig> times more seeds on 20-aa alphabet need to be evaluated than the seeds on the reduced alphabet.

we compared the performance of rapsearch with blast, blat and hmmer <dig>  blat achieves  <dig> times faster, as compared to blast, for protein alignments at sensitivity settings typically used when comparing vertebrate sequences  <cit> . blat was designed to achieve fast similarity search for closely related sequences, and therefore it may not work for detecting remote protein homologs . hmmer was developed to achieve accurate detection of remote homologs by using profile hidden markov models  of protein families as compared to the other database search tools. the new hmmer <dig> achieves similar speed as blast by implementing a new probabilistic model of local sequence alignment and a new heuristic acceleration  <cit> . our comparison demonstrates that rapsearch achieves much faster similarity search than blast , and its speed is slightly lower than blat but achieves much higher sensitivity as compared to blat.

implementation
rapsearch adopts the seed-extension approach of blast, which identifies the seeds, the maximal exact matches  between the reduced alphabet sequence of a query protein and the reduced alphabet sequence of all proteins in the database, followed by extending and evaluating each of these seeds. rapsearch employs a linear time algorithm to retrieve the mems, which first builds a suffix array and a corresponding longest common prefix  array to index all proteins in the database  <cit> , and then traverses the suffix array based on each query protein. all identified mems are subject to a heuristic extension algorithm including an ungapped extension and then gapped extension, similar to blast.

protein sequence seeds using a reduced amino acid alphabet
the first reduced amino acid alphabet was introduced by dill in the hydrophobic-polar  model for the study of the folding of globular proteins  <cit> . since then, there are more than  <dig> reduced alphabets of different size that have been proposed for various purposes  <cit> . a recent study even demonstrated that reduced alphabet is more sensitive and selective in identifying remote homologous proteins  <cit> . these observations suggested that homologous proteins exhibit a higher sequence identity on the reduced alphabet than that on the 20-aa alphabet, indicating that it is possible to design efficient and sensitive seeds based on a reduced amino acid alphabet.

to select an appropriate reduced amino acid alphabet for rapsearch, we carried out the following experiments. using the balibase database  <cit> http://www-bio3d-igbmc.u-strasbg.fr/balibase/, we collected  <dig>  pairs of distant homologous proteins that share ~20-40% sequence identify, and  <dig>  pairs of proteins from different families . for each alphabet and each length, we computed the coverage and efficiency of the corresponding seeds: the coverage is defined as the fraction of homolog proteins containing at least one seed match, and the efficiency is defined as the log ratio of the numbers of homologous and non-homologous proteins containing at least one seed match.

seed identification by using suffix array
an essential procedure in rapsearch  is how to choose appropriate seeds for extension . a commonly used strategy is to define a cutoff for the minimum seed size--a small cutoff may result in a huge amount of seeds to be extended , whereas a large cutoff may miss some seeds that otherwise may lead to significant alignments. blast uses minimum size of  <dig>  but also requires that there are two seeds in the same diagonal that span no more than a certain length. rapsearch will extend all single seeds that have been identified by looking up in the suffix array of target protein sequences. as rapsearch uses reduced alphabets to present proteins, rapsearch can use longer seed cutoff, thus achieving faster similarity search.

minimal seed selection algorithm
rapsearch generates seeds of a minimal length of 6- <dig> amino acids, with longer seeds for frequent words and shorter seeds for rare words. rapsearch decides the minimum length of seeds starting at a particular query position based on the frequency of the 6-mers starting at that position. once the minimum length of the seeds is selected for a particular position, all the seeds of at least the required length will be retrieved by looking up in the pre-computed suffix array of protein similarity search database. the minimum seed length selection algorithm is shown as follows .

seed length selection algorithm :

minseed ← 6

addlen ← 0

hexmerf ← the frequency of the 6-mer starting at position i

medianf ← the median of the frequencies of all 6-mers in the protein database

expectf ← hexmerf

if :

# aacomp is the frequency of the corresponding amino acid at position k

while expectf * aacomp < medianf:

addlen ← addlen + 1

expectf ← expectf * aacomp

minseed ← minseed + addlen

return minseed

seeds with mismatches
we further consider seeds with mismatches . long seeds  that allow at most one mismatch either at position  <dig>   <dig>   <dig>  or  <dig> as in the following patterns, oooxoooooo, ooooooxooo, ooooxooooo and oooooxoooo . we replace the residue at each of the positions allowing mismatches  by one of the reduced amino acids in the reduced alphabet in turn to search for exact matches, achieving identification of seeds with mismatches using suffix array.

ungapped and gapped alignment
we implemented ungapped and gapped extension procedures following the same approach used in blast  <cit> .

statistical significance evaluation
we used the statistical evaluation method from blast, and used the same model and parameters  as blast to evaluate the significance of the resulting local alignment.

protein similarity search databases and other datasets
we tested rapsearch on several public metagenomic datasets with various read lengths  <cit> . the nucleotide sequences were downloaded from the ncbi short read archive, and the mg-rast server http://metagenomics.nmpdr.org/. the protein similarity search databases we used include a 98% non-redundant dataset  of protein sequences from prokaryotic genomes, plasmid and viral genomes, collected in the img  <dig>  http://img.jgi.doe.gov, eggnog database  , and ncbi non-redundant  database . the complete genomes  and their gene annotations we used for the simulation study were downloaded from the ncbi ftp site.

other computational tools
rapsearch was compared to blast, blat and hmmer. the blat source codes were downloaded from http://hgwdev.cse.ucsc.edu/~kent/src/blatsrc <dig> zip. the default filtering option in blast automatically masks low complexity regions of amino acids by using the seg approach  <cit>  prior to similarity search. the seg masking is also implemented in rapsearch. for comparison purpose, seg was also applied to the six frame translations of the short reads for  blat similarity search.

RESULTS
selection of reduced amino acid alphabet
we started with the testing of the performance of different reduced amino acid alphabets to select an appropriate reduced amino acid alphabet for seed detection. desirable seeds are those that can be found in homologous proteins, but not in unrelated proteins. we tested more than  <dig> reduced amino acid alphabets that have been proposed for various purposes  . for each alphabet, we calculated its coverage and efficiency at seed length ranging from  <dig> to  <dig>  as shown in figure  <dig>  seeds in highly compressed alphabets  generally have higher coverage than seeds in alphabets of larger sizes , although the coverage varies for alphabets of the same size that are derived using different methods  . this is consistent with previous observations that highly compressed alphabets such as gbmr. <dig> achieved higher sensitivity in fold recognition  <cit> . but highly compressed alphabets also tend to show low efficiency   so that they are not appropriate for fast database searching. based on these results, a reduced amino acid alphabet   <cit>  was picked as the reduced alphabet for seed identification by rapsearch, aiming to achieve the greatest speedup while keeping minimal loss of sensitivity.

the alphabets were downloaded from http://www.rpgroup.caltech.edu/publications/supplements/alphabets/hp/welcome.html.


selection of seed lengths
we also observed that, given a protein sequence database, words of the same length  are of very different frequencies in the database because of the composition bias , with a small number of extremely frequent words. for example, in a protein database that has  <dig> , <dig>  amino acids , the most frequent hexamer has  <dig> , <dig> copies, whereas the median frequency of all hexamers is a mere  <dig> . if a fixed minimal seed length  was used, the matches between a few extremely frequent words would dominate the seed pool, the majority of which will not lead to meaningful, long alignments. instead, we used the minimal seed selection algorithm to automatically determine the minimum length of the seeds starting at a particular position of a query sequence based on the frequency of its first  <dig> residues--which can be retrieved from a pre-computed lookup table quickly--and the amino acid composition for the positions after. using this strategy, seed matches of length 6- <dig> will be detected by rapsearch among query sequences and the protein sequences in the database. this length range 6- <dig> works best in practice, and figure 2b also shows this is where the seeds  achieve highest efficiency.

comparison of rapsearch with blast and blat
we tested rapsearch on several published metagenomic datasets  <cit>  with various read lengths to demonstrate its performance for short reads acquired by different ngs-sequencers. rapsearch achieved ~20- <dig> times speedup as compared to blast, with a small loss of sensitivity . the results suggest that rapsearch gained its speedup by more efficiently selecting seeds from pairs of homologous proteins. the speedup is more significant for shorter reads. for example, rapsearch is >  <dig> times faster than blast for the srr <dig> dataset . by contrast, rapsearch only achieved ~ <dig> times speedup for the ts <dig> dataset, which has reads of ~ <dig> bp and >70% of the reads have similarity hits in the img database. this contrast can be partially explained by: 1) a relatively smaller proportion of reads will have homologs for shorter reads   <cit> ; and 2) shorter reads require significantly less gapped extension as compared to longer reads, and gapped extension is more time consuming than ungapped extension. here rapsearch was compared to blast programs in blast <dig> . <dig>  note that blast in a newer blast package , denoted as blast+, did not produce significantly different results on the datasets we tested, but the running time is more than doubled .

a: the reads are searched against the 98% non-redundant dataset of proteins collected in the img database with a total of  <dig> , <dig> proteins, and an e-value cutoff of 1e- <dig> was used to define homologs  for the illumina reads  considering the reads are extremely short, and an e-value cutoff of 1e- <dig> for the rest. b: the dataset was downloaded from the ncbi website , and only 2% of the reads were used for testing because the blast search of the entire dataset will require a computer farm. c: dataset was from the nine biomes project  <cit> . d: ts <dig>  and ts <dig>  datasets were from the twin study  <cit> .  <dig>  ts <dig> and ts <dig> datasets were downloaded from the mg-rast server. e: the percentage of reads that have homologs in the img database as identified by blast. f: the running time was estimated based on the running time of blast search of a small fraction of the original dataset on the same computer  on which rapsearch was carried out for comparison purposes; the actual blast search of the original datasets was carried out on bigred, a computer cluster maintained at indiana university. g: the overlap column lists the total number of reads that have homologs in the img database detected by both blast and rapsearch, while the total number of reads that have homologs in the img database detected by blast or rapsearch only are listed in the blast-only and rapsearch-only column, respectively.

the detailed comparison of the performances by blast , blat and rapsearch on one query dataset is shown in figure  <dig>   rapsearch tends to miss some distant similarities, but better captures closely related proteins. under the stringent e-value cutoffs , rapsearch has minimal loss of sensitivity as compared to blast. by contrast, blat tends to miss more similarity hits . note that the difference at the query level  is smaller than the difference at the level of individual hits . we also tested the performance of rapsearch as compared to blast when searching against different protein databases, and the results showed consistent speedup by rapsearch . we examined some of the similarities that are missed by rapsearch--they are usually due to the lack of proper seeds between the query and the subject protein sequences. interestingly, rapsearch also detected some homologous proteins that are missed by blast search. and there is no obvious significance  difference between the unique hits detected by either rapsearch or blast  . an example of similarity detected only by rapsearch is shown in supplementary figure  <dig> .

a: extended cog contains sequences collected in eggnog database; b: nr is the ncbi non-redundant database. the total number of sequences and amino acids included in each database are shown in the "total sequences" and "total aa" columns, respectively.

comparison of rapsearch with hmmer3
we were only able to compare rapsearch with hmmer <dig> on one similarity search database, the extended cog database   <cit> , for which we built hmms of the cog families using muscle  <cit> , a multiple alignment program, and the hmm builder from the hmmer <dig> package.  the comparison shows that hmmer <dig> does not necessarily achieve higher sensitivity as compared to rapsearch  for the short reads at the same similarity significance level. for example, for the query dataset  <dig>  in total  <dig>  reads have annotations at an e-value cutoff of 1e- <dig> based on the hmmer <dig> search results, whereas in total  <dig>  reads have annotations based on the rapsearch search results. in addition, hmmer <dig> may be too slow  for some applications, such as the similarity search of large datasets of short reads.

evolutionary distance matters
detecting distant homologs is difficult for sequence-based comparison methods; and detecting distant homologs using short reads is even more challenging  <cit> . we simulated short reads from complete genomes and then applied similarity searches to show the impact of sequence divergence on the performance of similarity search tools. as shown in table  <dig>  none of the methods we tested could detect all homologs based on similarity search of simulated short reads. overall, blast shows higher sensitivity than rapsearch and blat on detecting distant homologs, i.e., similar proteins from evolutionarily distant species , whereas rapsearch achieved comparable sensitivity as blast on detecting close homologs, i.e., homologous proteins from evolutionarily close species . and rapsearch achieved higher sensitivity than blat for detecting both close and distant homologs using short reads. we expect that rapsearch will become more useful for annotating metagneomic datasets as more microbial genomes are being sequenced, resulted from, for example, the effort of sequencing reference genomes from human microbiome  <cit> .

a: short reads of ~ <dig> bps simulated from the gene sequences of salmonella typhi were searched against the proteins of escherichia coli k <dig> . b: short reads of ~ <dig> bps simulated from the gene sequences of desulfococcus oleovorans hxd <dig> were searched against the proteins of escherichia coli k <dig> . only the genes of at least  <dig> bp  were included in the statistics, and two genes with 40% or higher amino acid identity spanning at least 50% of the length of one gene were considered as homologs. c: "no" indicates that no e-value cutoff was applied to filter out the similarity hits for the short reads, and e-value =  <dig>  indicates that only similarity hits with e-value < =  <dig>  were included for the statistics.

CONCLUSIONS
the comparison of rapsearch with other tools demonstrates that rapsearch can be used to achieve a fast protein similarity search with minimal loss of sensitivity. this improvement relieves the computational need for database search for short reads that are derived from ngs techniques. instead of running blast searches on a computer farm with many cpus, a rapsearch search against a large protein database  for a dataset from a single run of  <dig> sequencer or illumina sequencer can be achieved on a single pc with multiple cores, or a small computer cluster.

the tests of rapsearch on detecting similarities at different evolutionary distances  showed that rapsearch and blat missed more similarity hits between distantly related proteins. the same trend was observed in the tests on real metagenomic datasets , in which rapsearch missed proportionally more hits at more stringent e-value cutoffs . this problem may be alleviated when more reference genomes become available and more proteins are added to the similarity search database.

a simple calculation shows that rapsearch can potentially achieve > <dig>  speedup as compared to blast: a seed  can be found in  <dig> out of  <dig> possible matches in blast, and a seed can be found in  <dig> out of  <dig> matches in rapsearch . the actual speedup varies, depending on the read length and the nature of the microbial community from which a metagenomic dataset is derived. generally, rapsearch achieved more significant speedup on shorter reads, and on the datasets derived from communities with better-characterized microbial organisms . rapsearch achieved ~20- <dig> times speedup as compared to blast on the metagenomic datasets that we tested; this represents the speedup that rapsearch can achieve on a typical metagenomic dataset in practice.

we will work on several improvements of rapsearch, aiming to further accelerate the similarity search. the first improvement is to implement a new version of rapsearch that supports multiple threads, best utilizing the multiple cores that a modern computer typically has. the second strategy we will try is to pre-process the queries to eliminate redundant similarity searches.

availability and requirements
rapsearch  was implemented in c++, and has been tested extensively in linux platforms. the inputs of rapsearch can be either amino acid sequences or nucleotide sequences . rapsearch produces result files that are similar to blast outputs. rapsearch source codes are available as supplementary software . the details of the comparison between the blast and rapsearch search results, and the source codes of rapsearch can be found at the rapsearch website, http://omics.informatics.indiana.edu/mg/rapsearch.

authors' contributions
ye and tang designed the algorithm. all authors were involved in the implementation of the algorithm and writing the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
supplementary table and figures. the file contains supplementary table  <dig>  and supplementary figures 1- <dig> 

click here for file

 additional file 2
rapsearch package. a package of rapsearch source codes, implemented in c++.

click here for file

 acknowledgements
this research was supported by the nih grant 1r01hg <dig>  and the nsf career award dbi- <dig>  the authors thank the university information technology services team in indiana university for their help with high-performance computing . the authors would like to thank the anonymous reviewers for their helpful suggestions.
