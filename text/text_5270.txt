BACKGROUND
the development of a multi-cellular organism begins from a single fertilized egg and proceeds as cell division and differentiation, controlled by the spatio-temporal expression of a multitude of genes over time  <cit> . study of the gene regulatory network is a crucial step towards unveiling the mechanism governing cell-fate differentiation and embryonic development  <cit> . for many years, drosophila melanogaster has been established as the canonical model organism for the study of the fundamental principles of animal development  <cit> . to facilitate a systematic understanding of transcriptional regulation during drosophila embryogenesis, the berkeley drosophila genome project   <cit>  has produced a comprehensive atlas of gene expression patterns in the form of two-dimensional  digital images using high-throughput rna in situ hybridization  <cit> . these images capture the spatial pattern of individual genes at a particular developmental stage . the images in bdgp are annotated with anatomical and developmental ontology terms using a controlled vocabulary to facilitate text-based search of gene expression patterns  <cit> . currently, the annotation is performed manually by human curators. with the rapid accumulation of available images generated by high throughput technologies, it is imperative to design effective computational methods to automate the annotation  <cit> .

in the bdgp database, a collection of images from the same developmental stage range and the same gene are annotated by multiple ontology terms. the multi-image multi-label nature of this problem poses significant challenges to traditional image annotation methodologies. this is partially due to the fact that the assignment of a particular term to a group does not imply that all images in this group are associated with this term. hence, special formalism needs to be designed to retain the group membership information. in addition, the shape and appearance of the same body part may vary from image to image due to the effects of stochastic processes during embryogenesis and the distortions introduced by the current image acquisition techniques. hence, invariance to local distortions is a crucial requirement for an accurate annotation system. several prior studies on the automatic annotation of drosophila gene expression images have been reported. zhou and peng  <cit>  constructed their system based on the assumption that each image in the group is annotated by all the terms assigned to that group; ji et al.  <cit>  considered a learning framework that incorporates both the image group information and the term-term interactions; yuan et al.  <cit>  designed a bag-of-words based approach in which the spatial information of the images is utilized. to date, no systematic comparison between the image-level and the group-level methods has been reported. in addition, it is not clear which scheme performs the best in combining and pooling images in the same group. moreover, little attention is paid to the highly imbalanced intrinsic structure of the gene expression pattern images, which will significantly compromise the performance of traditional learning algorithms that expect balanced class distributions or equal misclassification costs  <cit> .

in this article, we propose an image-level approach for the automated annotation of gene expression pattern images. in this approach, the images are first partitioned into several local patches; and the sift descriptor is used to construct a representation for each patch. we apply both bag-of-words and the sparse coding approaches to compute high-level representations from the sift descriptors. to obtain image features, a pooling algorithm is utilized to combine patch-level representations to generate image-level features. we propose to achieve this by a max pooling algorithm, which takes the strongest signal of the patches into consideration and is shown to perform comparably well to other pooling algorithms including average pooling and sqrt pooling. after the features are generated, we propose an image-level scheme to perform the annotation. by assuming each image in the group contain all of the terms in the group, the training set is constructed from individual images . the model built from the training set is applied to each image in the test groups. a union operation is applied to perform prediction for each group, that is, the predicted labels from all images within one group are properly combined to generate the final prediction for this group . note that our image-level representation is different from the method in  <cit> , as we still treat a group of images as one annotation task, and our image-level annotation scheme is different from the one in  <cit> , since we build a feature representation for each image in the group. the mechanism of undersampling is introduced in order to provide a balanced distribution for the binary classification problem. to reduce the random factor introduced by undersampling, we repeat the undersampling mechanism for multiple times and use majority vote to perform the prediction. we test our proposed approach on the bdgp images retrieved from the flyexpress database   <cit> . annotation results from our study indicate that the image-level scheme outperforms the group-level scheme. results also show that majority vote together with undersampling produces promising results in dealing with imbalanced data.

methods
in this section, we describe the image representation and keyword annotation schemes. given a bdgp image, we apply sparse coding as well as the well-known bag-of-words  method to represent the gene expression pattern. we then employ three different pooling methods to generate the image features. based on the image features generated, an image-level scheme and a group-level scheme are developed to annotate the keywords. the data set exhibits an imbalanced data distribution; we propose to adopt undersampling to retain the efficacy of the standard svm classifier.

image representation
first, we present our framework for image representation, which is closely related to the bag-of-words  framework  <cit> . the bow approach treats each image as a vector recording the frequency of every presented visual word detected from the image. the vector representation is then used to classify images into different categories  <cit> .

in our framework, we first apply the sift descriptor to generate invariant visual features from local regions on images. a visual codebook is then constructed by applying the clustering algorithm on the invariant raw descriptors for a subset of images. the cluster centers are considered as the visual words of the images . after the codebook is generated, each descriptor will be represented by a numerical vector using either bow or sparse coding approach. a pooling function is then adopted to summarize hundreds of representers to form one feature vector for one image. an overview of our framework is given in figure  <dig> 

step 1: feature detection and description
the image feature detection step involves partitioning the original image into multiple regions that serve as local patches for visual description. the images in the flyexpress database have been standardized semi-automatically, including alignment. we use a series of overlapping circles to generate multiple local patches from each image and adopt the scale-invariant feature transform   <cit>  descriptor to represent each patch. sift converts each patch to a 128-dimensional vector. after this step, each image is represented as a collection of vectors of the same dimension . the collection of vectors are known as descriptors.

we construct the codebook based on the descriptors by selecting a subset of images and applying the k-means clustering algorithm. visual words are then defined as the centers  of the clusters. a visual word can be considered as a representative of several patches with the same characteristics. the codebook length is the number of clusters, which can be set manually. in our work, we set this number to  <dig> as in  <cit> . after the codebook is constructed, the descriptor for each patch is mapped to a numerical vector based on its relationship with the codebook through two different ways: the hard assignment  and the soft assignment . we present both approaches in the following section.

step 2: descriptor assignment
the bow performs hard assignment for descriptors; that is, it chooses the closest visual word in the codebook to represent each descriptor. then each image can be represented by a histogram of the visual word. assume the number of patches for a given image is n and the size of the codebook is m. denote i
ij
= <dig> if the i
t
h
 patch is assigned to the j
t
h
 visual word, and  <dig> otherwise. then the given image can be described as h= [ h <dig> h <dig> …,h
m
], where 

 hj=∑i=1neij. 

a recent study  <cit>  shows that combining bow and spatial information would deliver better performance than using only bow. we add spatial information into bow in our study.

the spatial bow can be obtained via augmenting the simple bow representation to a larger vector with extra spatial information. we implement the spatial bow by adopting the spatial pyramid matching scheme  <cit> . denote h as the histogram of an image generated by a non-spatial bow; the spatial histogram bag can be written as s
n
=[h <dig> h <dig> …,h
n
] where n is the number of spatial sections. in our work, we partition patches into  <dig> by  <dig> sections on each image, which enlarges the non-spatial bow representation of the same image by a factor of  <dig> 

the bow approach assigns each patch to the closest visual word in the codebook, which involves solving the following optimization problem: 

  minimizex12∥ax−y∥ <dig> subject toxi∈{ <dig> },∑i=1cxi= <dig>  

it is clear that bow is a vector quantization from y to the codebook, which means only one visual word can be picked to represent the patch represented by y. the hard assignment ignores the relationship between y and other visual words, while the soft assignment method overcomes the limitation with assigning each descriptor to a limited number of visual words with different weights simultaneously.

denote the codebook matrix as a∈rd×m and the descriptor for a given patch as y∈rd, the soft assignment can be characterized as the following optimization formulation: 

  minimizex12∥ax−y∥22+λ∥x∥ <dig> subject toxi≥ <dig> i= <dig> …,c. 

where λ is a parameter that controls the sparsity. this is essentially a linear regression problem with ℓ <dig> norm regularization, known as lasso  <cit>  in the machine learning literature and can be solved efficiently by slep  <cit> . we also consider the spatial sparse coding, which is expected to produce a more accurate description of images.

step 3: feature pooling
next, we apply different pooling methods to transform a collection of representers to one numerical vector . after feature detection and description, each image is represented by a collection of representers  of the same dimension. pooling is used to achieve more compact representations and better robustness to noise and variance. let x be the sparse coding representers of sift descriptors. we compute the image features by a pre-defined pooling function: 

  z=f 

where f is applied on each column of x. recall that each column corresponds to the responses of all the descriptors to one specific item in the codebook. therefore, different pooling functions construct different image statistics. we transform a collection of representers into one vector serving as the feature of the image using three different pooling functions: average pooling, the max pooling and the square root  pooling.

average pooling
for any image represented by a set of descriptors, we can compute a single feature vector based on some statistics of the representers. for the bow, a common choice is to compute the histogram: 

  z=1m∑i=1mxi, 

where x
i
 is the representers generated through bow and m is the number of patches we have created. in this method, we have actually taken the average value of all the bow representers. for the more sophisticated spatial bow, the representation z for one image is the concatenation of histograms associated with various locations. in this case, z can be seen as again a histogram after normalization. the average pooling is the most commonly used pooling functions  <cit>  and it can be applied to sparse coding representers accordingly.

max pooling
average pooling can be used on both hard-assignment and soft-assignment representers. due to the intrinsic continuity property of soft assignment, there are other ways to proceed the pooling operations. the max pooling function was introduced in  <cit> , and it maps each column of x to its max element: 

  zj=maxx1j,x2j,…,xmj. 

the max pooling basically uses the strongest signal among multiple patches to represent the information of the image, and the characteristics of that image are potentially well captured by the max pooling. max pooling has been shown to be particularly well suited to the sparse features  <cit> .

sqrt pooling
the p-norm is one of statistics that continuously transitions from average to max pooling, of which a special case is the square root of mean squared statistics  pooling . mathematically, it is defined as: 

  zj=1m∑i=1mxij <dig>  

it is clear that the sqrt pooling takes advantage of all the information in x, and the only difference between the sqrt pooling and average pooling lies in the statistics they choose to evaluate the information.

each of these pooling functions captures one aspect of the statistical property of representers. we consider all three pooling functions in our empirical studies for comparison, and the results indicate that all three pooling functions perform comparably well in our application.

keywords annotation schemes
in this section, we describe two different annotation schemes for the keywords annotation based on various types of features extracted from the bdgp images, e.g., the max-pooling spatial sparse codes, the average-pooling bow, etc. the group-level annotation scheme takes each group of images as one sample in the training and testing and is used in previous studies  <cit> . it has been shown to give promising results. we propose the image-level annotation scheme in this paper which treats individual image as one sample.

group-level annotation
in the current bdgp database, groups of images are manually annotated with a set of keywords. it is possible that not all images in a group are associated with each keyword in the set. following this intrinsic structure of the bdgp data, we first illustrate the group-level annotation scheme.

given a group of images and the corresponding keywords, the sift descriptors are generated for each image in the group. we then perform hard assignment as well as soft assignment from the sift descriptors to obtain the representers. by concatenating all the representers of the group together, various pooling functions can be applied to produce the feature vector. in the group-level scheme, one group of images are treated as one sample, and the pooling functions are used to extract the information from all images within this group. we train our model using the training samples and the model is used to predict the keywords for the testing samples.

the group-level annotation scheme is built directly from the data structure, where each group of images is represented by one sample in the training and testing procedure . since previous studies  <cit>  have shown that the group-level scheme gives promising results in keywords annotation for drosophila gene expression images, we implement the group-level scheme and use it as a baseline for comparison.

image-level annotation
different from the group-level scheme, each image serves as one sample in the image-level scheme and the pooling function is applied on an individual image rather than a group of images. in the training procedure, we assume that each image in the group is associated with all the keywords for that group. hence, a larger number of positive training samples are generated for training our models. the training procedure is illustrated in figure  <dig> 

we train our model from samples representing individual images and apply it to individual images as well. after obtaining the predicted keywords for individual images, we make a union of the keywords from the same group . the evaluation of the scheme is done by comparing the predicted keywords and the ground truth for that group, which is the same as group-level evaluation. the union operation is introduced to reduce the noise since not all images within a group are associated with all the keywords for that group. we also include the image-level scheme without union for comparison purpose.

both the group-level annotation scheme and the image-level annotation scheme are implemented in our study, and our results indicate that image-level scheme outperforms the group-level scheme as it captures more information from each bdgp image.

undersampling and majority vote
our image data set is highly imbalanced. for example, there are  <dig> groups of images in stage range  <dig>  while only  <dig> groups contain the term ‘anlage in statu nascendi’ . it has been shown that direct application of commonly used classification algorithms on an imbalanced data set would usually provide sub-optimal results and one effective approach is to generate a balanced training set  <cit> . intuitively, we may do random sampling to generate a balanced sample set from the imbalanced data, such as oversampling and undersampling. oversampling adds a set a sampled from the minority class to the original data. in this way, the total number of samples increases by |a|, and the class distribution is balanced accordingly. on the contrary, undersampling removes data from the majority class and reduces the size of the original data set. in particular, denote the minority class as b, we randomly select a subset of size |b| of majority class examples while keeping the minority class untouched.

in this table, we show the total number of groups and the corresponding groups which contain the top  <dig> terms. for most of the terms, the number of positive samples  is less than the number of negative samples .

in  <cit> , oversampling is utilized to deal with imbalanced gene pattern images data set. we apply the undersampling in our study as oversampling may cause overfitting  <cit> . compared with the results in  <cit> , our experiments produce better sensitivity in prediction. to reduce the random factor in undersampling and further improve the performance, we do undersampling for multiple times and combine multiple predictions by majority vote. in our experiment, we perform undersampling for  <dig> times and summarize all the models to evaluate the system we have built. majority vote  <cit>  is adopted to perform the final prediction in our study. we use mean prediction as the baseline for evaluation and our results show that majority vote performs better.

RESULTS
we design a series of experiments to compare aforementioned approaches for keywords annotation, and report and analyze the experimental results. in this section, we present the comparison in four directions: 

• comparison between spatial and non-spatial features;

•comparison between group-level and image-level schemes;

• comparison between bow and sparse coding;

• comparison of different pooling methods.


data description and experiment setup
the drosophila gene expression images used in our work are obtained from the flyexpress database, which contains standardized images from the berkeley drosophila genome project . the drosophila embryogenesis is partitioned into  <dig> stage ranges  in bdgp. we focus on the later  <dig> stage ranges as there are very small number of keywords appeared in the first stage range.

the drosophila embryos are 3d objects  <cit> , and the flyexpress database contains 2d images that are taken from different views   <cit> . as majority of images in the database are in lateral view  <cit> , we focus on the lateral-view images in our study.

since most keywords are stage-range specific, we build a codebook for each stage range. based on the codebook, the spatial bow features and the spatial sparse coding representers are computed. we adopt both group-level and image-level annotation schemes to compare the performance. various pooling functions are applied to generate the features for annotation.

given the feature representation, we carry out the undersampling for prediction. we focus on the most frequent  <dig> terms for each stage range. the groups that contain a particular term are selected as our positive samples. we use 80% of the positive samples as the positive training set tr
p
, the remaining 20% as testing set tst
p
. we also select a subset of samples tst
n
 which do not contain the term. the test set tst=tst
p
+tst
n
 is kept untouched during our experiment. as the data distribution is imbalanced, we apply undersamplings for  <dig> times on the remaining negative groups to form tr
n
. thus, we have  <dig> training sets tr=tr
p
+tr
n
, i= <dig> …, <dig>  which are made up of the same positive set and different negative sets.

we employ the one-against-rest support vector machines   <cit>  to annotate the gene expression pattern images, where the svm builds a decision boundary between tr
p
 and tr
n
 and produces the predictions for tst. the average and majority vote are used to summarize multiple undersamplings . the results of the experiment verify the superiority of our proposed approach.

comparison between spatial and non-spatial features
we first carry out the comparison between spatial bow and non-spatial bow based on the traditional group-level schemes. we fix the same settings in both cases, including the training samples, test samples and the pooling functions. the only difference between the two cases lies in the length of sift descriptors: the spatial descriptors is  <dig> times the length of those for non-spatial representation. the extra part of the descriptors captures the location information of multiple patches for the images. as the positive samples for most terms are less than the negative samples, we perform  <dig> under-samplings to balance the training samples for the annotation. we choose four measurements: accuracy, auc, sensitivity and specificity to evaluate the performance of different approaches.

comparison results for all  <dig> stage ranges by weighted averaging top  <dig> terms are shown in table  <dig>  from the comparison, we conclude that using spatial information improves the performance. hence, all of the subsequent empirical studies employ the spatial representation.

spatial bow performs slightly better than nonspatial bow.

comparison between group-level and image-level schemes
in this experiment, we compare the group-level scheme and the image-level scheme. for the group-level scheme, a group of images serve as one sample, and the corresponding keywords act as the labels. for image-level scheme, each image of the group is treated as one sample, and the keywords of the group are assigned to all the images within the group . given a group of images, the group-level models will predict the terms associated with the whole group; the image-level models will predict the terms associated with each image within the group and the union of predicted terms from all images within the group will be used as the final prediction.

to support our image-level scheme, we implement another image-level scheme without union which evaluates the prediction on the image-level. the results are reported in figure  <dig>  under the same condition, the union operation significantly improves the performance of the image-level scheme over all stage ranges .

image-level with union performs much better than without union .

our empirical study also shows that the image-level scheme with union outperforms the group-level scheme, which can be seen in figure  <dig>  thus, in the later part of this paper, we focus on the image-level scheme. the comparisons over all stages are summarized in table  <dig> 

image-level spatial bow performs slightly better than group-level spatial bow.

comparison between bow and sparse coding
in this part, we compare the performances of spatial bow and spatial sparse coding based on image-level scheme, which produces the best result in the previous study. the bow method assigns each sift descriptor to its closest visual words, and uses a histogram to summarize all of the representers. on the other hand, the sparse coding assigns each sift descriptor to multiple visual words with different weights, and different pooling functions are used to summarize the representers. for the sparse coding, we use a subset of images to tune λ via cross-validation. we use average pooling for both bow and sparse coding.

we compute the weighted average for all of the  <dig> terms for comparison. overall, spatial sparse coding performs better than spatial bow , which is consistent with previous studies  <cit> .

spatial sparse coding performs slightly better than spatial bow .

comparison of different pooling methods
to study the difference of various pooling functions, we conduct another experiment to compare three different pooling methods based on spatial sparse coding. recall that the max pooling takes the max element of each column of x, the average pooling takes the mean value of each column of x, and the sqrt pooling take the square root of ℓ <dig> norm of each column of x. different pooling functions utilize different statistics to summarize the representers.

overall, the experimental results show that our image-level max-pooling approach achieves the best performance among different combinations of image representation methods and keywords annotation schemes. in particular, all three pooling methods perform comparably under the same condition. furthermore, the max pooling and the sqrt pooling produce slightly better results than the average pooling .

in our experiment, all the three pooling methods produce comparable performance. in particular, max pooling and sqrt pooling perform slightly better than average pooling.

comparison with previous work
there are three main differences between the approach in reference  <cit>  and our paper. first, we propose different ways of pooling the representers: the sum pooling is used in  <cit>  while we provide three different poolings in our study . secondly, we apply different ways of treating imbalanced data: the oversampling is used in  <cit>  while we use undersampling in our paper. finally, we adopt a different classification scheme: the group-level scheme is used in  <cit>  while we propose the image-level scheme in our study. compared with the results in  <cit> , our approach produces better prediction performance .

here is a sample comparison between the previous results  and our results  for stage range 11– <dig> 

CONCLUSIONS
this article proposes an image-level undersampling scheme for annotating drosophila gene expression pattern images. in our study, images are represented by bow and spatial sparse codes. to transform the representers to sample features, different pooling functions are adopted. in addition, an image-level annotation scheme is presented to boost the performance. the random undersampling mechanics are applied to deal with the imbalanced data in our study. results on images from the bdgp database demonstrate the effectiveness of our proposed approach.

the current approach is only applied to the drosophila embryo images in lateral view. there are also images in dorsal view and lateral-dorsal view which are not used in our study. we plan to extend the proposed method to other views of images in the future.

availability of supporting data
images used in this paper are available at http://www.flyexpress.net/.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
all authors analyzed the results and wrote the manuscript. jy conceived the project and designed the methodology. qs and sm implemented the programs. qs and ly drafted the manuscript. sn, sk and jy supervised the project. all authors have read and approved the final manuscript.

