BACKGROUND
difficult problems in structural bioinformatics are often studied in simple exact models to gain insights and to derive general principles. protein folding, for example, has long been studied in the lattice model  <cit> . recently, researchers have also begun to apply the lattice model to the study of rna folding  <cit> . in the lattice model, the folding of a biopolymer takes place on a lattice: each monomer occupies a unique lattice point; consecutive monomers in the sequence occupy adjacent lattice points. the structure prediction problem then reduces to the simplified problem of finding a lattice conformation of the biopolymer to achieve certain desirable properties: for protein folding, to maximize the number of contacts between hydrophobic amino acids; for rna folding, to maximize the number of hydrogen bonds between complementary bases. the simplified problem does not reflect the full reality of underlying biological process, but at least gives a first-order approximation and is more tractable. schuster  <cit>  remarked that "rna secondary structures, together with lattice protein models, are at present the only biological objects for which conformational landscapes and sequence-structure maps can be computed and analyzed in sufficient detail."

in this paper, we present a method for predicting rna secondary structures with pseudoknots by folding simulation on the 3d triangular lattice. a drawback prevalent in the existing models for rna secondary structure prediction is that they are static: the predicted secondary structures are selected only because they have the lowest free energies. but rna folding is a dynamic process. rna pseudoknots that are too complex are difficult to realize naturally because of the barriers in the energy landscapes due to the steric constraints of excluded volume. to cope with this problem, various restrictions may be imposed on the predicted secondary structures; for example, the hairpin constraint requires two bases forming a base pair be separated by at least three other bases in the sequence. the steric constraints of excluded volume, however, are inherently geometric; it is impossible to capture them all with only a few combinatorial restrictions. our method overcomes this difficulty by simulating the folding of rna tertiary structures on the 3d triangular lattice directly, as a dynamic process; the secondary structures are then extracted from the tertiary structures. folding simulation can be computationally intensive  because of its exaustive-search nature, especially for complex models that include considerable details. thus the simulation of rna folding dynamics has only been used in mapping and analyzing the energy landscapes of certain small rnas  <cit> . nevertheless we show that by using a simple lattice model and an efficient move set, and by careful algorithmic engineering, folding simulation can be turned into an effective method for rna secondary structure prediction. experiments on sequences from pseudobase  <cit>  show that for short rna sequences, our method is even more accurate than the hotknot algorithm of ren, rastegari, condon and hoos  <cit> , a leading method for predicting rna secondary structures with pseudoknots. in the context of protein folding, the recovery of protein tertiary structures from contact maps has been studied by many researchers  <cit> . the analogous problem of reconstructing rna tertiary structures from secondary structures, however, has not yet been seriously considered. this is understandable because a polynucleotide chain is not as rigid as a polypeptide chain: the rna secondary structure alone does not contain enough spatial information to decide the rna tertiary structure. nevertheless, a method for reconstructing a 3d conformation of an rna sequence from a given list of base pairs is still valuable, at least for validating predicted secondary structures, considering that some secondary structures are so unnatural that they cannot be completely realized in 3d due to the steric constraints. we will show that our method for rna secondary structure prediction can be adapted to a very efficient method for rna tertiary structure reconstruction in this limited sense.

rna secondary structures can be visually represented in many different ways. besides the simple representations of the dot-bracket notation, the feynman diagram, and the dot plot, most rna software packages such as mfold  <cit>  and vienna  <cit>  include programs that visualize the rna classical structures  <cit>  using flat drawings in the plane. advanced visualization tools such as rnaviz  <cit> , pseudoviewer  <cit> , and jviz.rna  <cit>  can even generate flat drawings of rna secondary structures with pseudoknots. in such flat drawings, each rna base is represented by a letter, consecutive bases in the sequence and base pairs in the secondary structure are then connected by edges between the letters. ideally, the bases should be placed such that the edges connecting them are straight and of uniform length, to signify their geometric proximity. also, crossing edges are undesirable and should be avoided. but real rna structures are not flat. for example, the pseudoknot of regulatory region of alpha ribosomal protein operon of e. coli  has the following secondary structure  that includes three groups of inter-crossing base pairs:

ugugcguuuccauuugaguauccugaa

)))))))))))

uauuaaauaguaggagugcauaguggc

::::::::::::::::::::::::::]

ccguauagcaggcauuaacauuccuga

]]]:::::]]]]:::::::::::}}}}

despite the best effort, flat drawings of such complicated secondary structures will inevitably contain crossing edges or edges of different lengths that distort the true geometric structures. the simulation of rna folding on the 3d triangular lattice provides an alternative method for the visualization of rna secondary structures. given a secondary structure of an rna sequence, we can first reconstruct a lattice conformation of the sequence that realizes the base pairs in the secondary structure, then display the lattice conformation using a 3d visualization software. the lattice conformation of an rna secondary structure may not represent the true tertiary structure, but at least it preserves geometric properties such as proportion and distance and hence looks more realistic.

we implemented a suite of computer programs for the simulation and visualization of rna folding on the 3d triangular lattice. these programs come with detailed documentation and are accessible from the companion website of this paper: rna folding on the 3d triangular lattice http://www.cs.usu.edu/~mjiang/rna/deltais/.

the 3d triangular lattice
in this section, we introduce the 3d triangular lattice and explain our choice of this particular lattice over other alternatives.

we first examine the 2d triangular lattice as a warm-up exercise. refer to figures  <dig> and  <dig>  let  and  be the two primary axes of the square lattice. add an auxiliary axis  along the xy diagonal, then skew the square lattice until the angle between  and  becomes 120°, and we obtain the 2d triangular lattice. on the 2d triangular lattice, each lattice point can be specified by its coordinates along the two primary axes  and . for example, the lattice point  =  has six neighbors , , , , , and . using the auxiliary axis  besides the two primary axes  and , the six neighbors of  can be more succinctly represented as , , and . we now examine the 3d triangular lattice. there are two common types of 3d triangular lattices: the ccp lattice, formed by a cubic closest packing of spheres, consists of layers of 2d triangular lattices repeating in an abcabc pattern; the hcp lattice, formed by a hexagonal closest packing of spheres, consists of layers of 2d triangular lattices repeating in an abab pattern. we use the ccp lattice.

refer to figure  <dig>  besides the two primary axes  and  of the square lattice, the 3d triangular lattice has an additional primary axis  pointing outside the xy plane at an angle of 120° from both  and . refer also to figure  <dig>  an interesting property of the  3d triangular lattice is that, from one perspective, it can be viewed as layers of 2d triangular lattices repeating in an abcabc pattern, but from another perspective, it can be viewed as layers of square lattices repeating in an abab pattern. the distance between two parallel planes supporting two consecutive layers of square lattices is exactly  units of the square lattice. on the 3d triangular lattice, each lattice point can be specified by its coordinates along the three primary axes , , and . for convenience, we also define three auxiliary axes , , and . then each lattice point  has exactly  <dig> neighbors , , , , , and . using the three auxiliary axes besides the three primary axes, the lattice conformation of an rna sequence s of n bases can be represented as a turn sequence t of n -  <dig> directions over the alphabet  that simulates a self-avoiding walk on the lattice.

many types of lattices have been proposed by researchers in structural bioinformatics. besides the 2d and 3d triangular lattices  <cit>  and the very common square and cubic lattices  <cit> , we also have the 2d hexagonal lattice  <cit> , the diamond lattice  <cit> , the face-centered cubic lattice  <cit> , and the  lattice  <cit> . our choice of the 3d triangular lattice for rna folding is based on three considerations:

regularity: on the 3d triangular lattice, all lattice points have the same number of neighbors, and all pairs of adjacent lattice points have the same distance. this allows a uniform handling of geometric proximity in base pairing.

density: the coordination number of a lattice is the number of neighbors of each lattice point. the 3d triangular lattice has a coordination number of 12; the cubic lattice has a coordination number of only  <dig>  thus the 3d triangular lattice is better than the cubic lattice in approximating the 3d space. indeed the 3d triangular lattice is the densest regular lattice in 3d. there exist, admittedly, alternative 3d lattices with even higher coordination numbers. the  lattice  and other extensions of the cubic lattice by skolnick et al.  <cit>  are notable examples. such lattices are irregular however. at the expense of regularity, the 3d triangular lattice can be similarly extended to acquire higher coordination numbers.

parity: each element of a sequence has a parity of either odd or even depending on its position in the sequence. when an rna sequence folds on the cubic lattice, complementary bases of the same parity can never become adjacent to form base pairs. this unnatural constraint is intrinsic to the cubic lattice and renders it unsuitable for folding simulation. the 3d triangular lattice is not susceptible to such parity problems.

these considerations has led us to believe that for folding simulation the 3d triangular lattice is superior to the other 3d lattices. indeed the cubic lattice and its variants are popular mainly because of the ease of programming on such lattices. our previous mathematical exposition shows that, with the auxiliary axes, the 3d triangular lattice is not much more difficult to implement than the cubic lattice. we hope that our first use of the 3d triangular lattice will encourage its wider adoption by the other researchers. for example, the recent work by cao and chen on predicting rna pseudoknot folding thermodynamics  <cit>  could benefit from a switch from the  diamond lattice to the 3d triangular lattice.

methods
in this section, we present our method for rna folding on the 3d triangular lattice. the following discussion focuses on a novel method for predicting rna secondary structures with pseudoknots, which works in two stages: first simulate the folding dynamics of the rna sequence on the 3d triangular lattice, next extract and select a set of base pairs from the best lattice conformation found by the folding simulation. we then adapt this method for rna secondary structure prediction to a method for rna tertiary structure reconstruction, and introduce our 3d visualization program for rna folding.

simulating rna folding dynamics on the 3d triangular lattice
we use the classical combinatorial optimization technique of simulated annealing  <cit>  for the simulation of rna folding dynamics on the 3d triangular lattice. in the following, we first introduce the basic annealing procedure, next describe the move set for transforming the lattice conformations and the scoring function for each lattice conformation, then discuss three techniques that improve the efficiency and effectiveness of the folding simulation.

basic annealing procedure
a basic iteration of the annealing procedure goes as follows. in the beginning, the sequence is initialized to an arbitrary lattice conformation v <dig>  then, in each step i, a candidate move is selected at random to transform the old conformation vi- <dig> into a new conformation vi. each conformation v has a corresponding score s ≥  <dig>  if s ≥ s, then the move is accepted and the annealing procedure continues to the next step. otherwise, the move is either accepted with a probability of pi or rejected with a probability of  <dig> - pi. the acceptance probability  depends on both the score difference s - s and the system temperature ti. given a number n of annealing steps, a cooling schedule of ti = c/log <dig> is adopted because of its desirable statistical properties  <cit> . when i =  <dig>  t <dig> = ∞; when i = n, tn = c. thus the system slowly cools down as the annealing procedure progresses from step  <dig> to step n. the constant c is set to 1/log <dig>  <dig> so that, as the system temperature ti drops from ∞ to c, the acceptance probability pi drops correspondingly from  <dig> to about  for a score difference of - <dig>  in particular, since all random moves are accepted with probability close to  <dig> during the initial stage of the annealing procedure, the starting conformation is quickly tranformed into some random configuration . the physical interpretation of the annealing procedure is that the system starts in any conformation with equal probability at high temperature, and tends toward a good conformation at low temperature.

note that the acceptance probability  in our annealing procedure is adapted from the probability  in the classical metropolis criterion. the sign in the exponent is reversed because we use positive scores instead of negative energies. for convenience, we use  <dig> instead of e as the base of the exponent. since  the coefficient of log2e is absorbed in the tunable constant c in the definition of ti.

move set
to simulate the folding of biopolymers on a lattice, we need to define a move set for structural manipulation. two types of moves are often used for self-avoiding walks on lattices: flip moves  and pivot moves . flip moves are local and typically operate on a small number of consecutive elements in the sequence . pivot moves  <cit> , on the other hand, are global and can affect on average half of the sequence, thus incurring a high running time in folding simulation. we note that kennedy  <cit>  has invented a faster implementation of pivot moves that runs in o time per move on the cubic lattice, where α ≈  <dig>  and l is the sequence length. but even this sub-linear running time is still too high, especially considering the large number of moves necessary for folding simulation.

we use pull moves for structural manipulation. pull moves were used by lesh, mitzenmacher and whitesides  <cit>  for protein folding on the square lattice, and were later adapted by jiang and zhu  <cit>  to the hexagonal lattice. we here adapt pull moves to the 3d triangular lattice. refer to figures  <dig> and  <dig> for an example. as we pull an element e <dig> to an adjacent lattice point, a gap may appear between e <dig> and a consecutive element e <dig>  to fill this gap, we may shift e <dig> to the former location of e <dig>  but then a new gap may appear between e <dig> and, say, e <dig>  repeat the shift step until an element ek, after being shifted to the former location of ek- <dig>  remains adjacent to ek+ <dig> and no more gaps appear. this whole sequence of movements is called a pull move.

pull moves are reversible: each pull move that transforms a conformation a to another conformation b has a corresponding pull move that transforms b back to a. pull moves are also complete: any conformation can be transformed to any other conformation by a sequence of pull moves. the complete property essentially follows from the reversible property: observe that any conformation can be easily transformed into a simple conformation in which all elements are in a straight line.

pull moves are clearly more powerful than flip moves: on the 3d triangular lattice, flip moves are only a special case of pull moves. moreover, pull moves have a semi-local property that makes them very efficient in folding simulation: although each pull move may relocate a large number of elements in the worst case , the average number of relocated elements is only a small constant . this semi-local property, first observed by lesh, mitzenmacher and whitesides  <cit>  for pull moves on the square lattice, was confirmed by our experiments  <cit>  for pull moves on the 3d triangular lattice. refer to table  <dig>  for various sequence lengths ranging from  <dig> to  <dig>  which are typical of biopolymers such as rnas and proteins, the average numbers of elements relocated by random pull moves on the 3d triangular lattice are small constants.

another important feature of pull moves is their biological relevance. in certain aspects, pull moves are very similar to the shift moves proposed by flamm, fontana, hofacker and schuster  <cit>  in their study of rna folding kinetics by direct manipulation of base pairings . flamm, fontana, hofacker and schuster showed that shift moves  allow a fast chain sliding process that closely models an important mechanism in rna folding dynamics called defect diffusion.

scoring function
according to the tinoco model  <cit> , an rna structure can be recursively decomposed into loops with independent free energy. the free energy of each loop is an affne function in the number of unpaired bases and the number of interior base pairs. stacking pairs are the only type of loops without unpaired bases; they have negative free energy and stabilize the rna structure. our scoring function is designed to approximate the magnitude of total free energy contributed by the stacking pairs in a lattice conformation. this energy model is not the most accurate to date, but it captures the predominant factor and allows a fast implementation.

on the 3d triangular lattice, each lattice point has  <dig> neighbors. thus in certain lattice conformations some bases may be adjacent to two or more complementary bases, although biologically each base of an rna sequence can participate in at most one base pair. to avoid the expensive computation of a maximum-weight matching  <cit>  for the actual base pairings in a lattice conformation, our scoring function simply computes a sum Σi score  over all bases i in the sequence, where each score is computed by examining the local neighborhood of the base i on the lattice. more precisely, we set score = minj score, where j ranges over all complementary bases adjacent to i, and each score depends on possible stackings of the three pairs , , and :

 <dig>  if  and  are both watson-crick pairs, then score includes the absolute value of their stacking energy . similarly, if  and  are both watson-crick pairs, then score includes the absolute value of their stacking energy.

 <dig>  if  is a wobble pair and the two pairs  and  are both watson-crick pairs, then score includes the doubled absolute value of the stacking energy of  and  and the stacking energy of  and .

the unequal treatments of wobble pairs and watson-crick pairs here are motivated by the biological fact that wobble pairs are rather weak and thus have little contribution to the stability of a secondary structure unless stacked with the stronger watson-crick pairs. in the calculation of score, we deliberately use minj score instead of maxj score or Σj score to discourage clusters of base pairings that are unrealistically tight.

by using the stacking energy of consecutive base pairs, the scoring function implicitly encourages longer helices . for example, the four consecutive base pairs , , ,  in a long helix of length four have three stackings, while the same number of base pairs , , ,  in two shorter helices of length two have only two stackings.

optimizing annealing steps
the lattice conformation of an rna sequence of n bases can be represented compactly as a turn sequence of n -  <dig> directions along the lattice axes. this representation is ideal for storing lattice conformations externally as files, but is not suitable for computing the scores of lattice conformations, a repeated task in simulated annealing. in our implementation, the lattice conformation is stored as an array of lattice coordinates organized into a hashtable, which is updated after every pull move. using the hashtable, collision detection and neighborhood exploration can be performed very efficiently. recall that the average number of bases relocated by a random pull move is a small constant. also observe that the score difference of a conformation change due to a pull move depends on only the relocated bases and their neighbors. thus we optimize the computation of the score difference so that each annealing step takes on average only constant time. without this optimization, the running time of each annealing step would be linear in the length of the rna sequence, and the folding simulation would take much longer time on longer sequences.

mixing two cooling schedules
the basic cooling schedule of our annealing procedure is a slowly decreasing function ti = c/log <dig>  where n is the total number of annealing steps. schmitz and steger  <cit>  observed that certain annealing procedures can be improved by sampling the system temperatures from the basic cooling schedule at random, instead of following the decreasing function faithfully from start to finish. more precisely, in each annealing step i, the randomized cooling schedule chooses a random number i' between  <dig> and n, then uses ti' instead of ti in the calculation of the acceptance probability.

in our experimentation with both cooling schedules, we indeed observed that, given the same running time, the randomized cooling schedule is slightly more effective than the basic cooling schedule. moreover, we observed that even better performance can be achieved by mixing the two cooling schedules together. we eventually settled on a mixed cooling schedule that, in each annealing step i, chooses either ti or ti' at random, with equal probability, as the system temperature.

multiple iterations with doubling steps
because of the random nature of the simulated annealing approach, the best conformation found by the annealing procedure may vary from one iteration to another. to predict the secondary structure of an rna sequence reliably, we repeat five iterations of the annealing procedure, then take the best among the best conformations of the five iterations. for an rna sequence of length l, the number of annealing steps in each iteration is set to 100·l <dig> initially. this number may be sufficient for some sequences but not for others, depending the complexity of the underlying folding landscape. we use a doubling strategy to estimate the ideal number of annealing steps. after the initial round of five iterations, we execute a second round of five iterations with the number of annealing steps doubled. this doubling process continues round after round until the improvement  of the current round over the previous round drops below 2%. note that  <dig> +  <dig> +  <dig> + ⋯ + 2k = 2k+ <dig> -  <dig> < 2·2k. thus the total running time of the multiple rounds in this doubling process is at most two times the running time of the last round. we are not aware of any previous usage of this doubling technique in bioinformatics. but in theoretical computer science, this technique is folklore. for example, this technique has been used to estimate the number of points on the convex hull in chan's output-sensitive convex hull algorithm  <cit> .

selecting disjoint base pairs for secondary structure prediction
given the best lattice conformation of an rna sequence found by repeated annealing procedures, we need to determine a set of base pairs as the predicted secondary structure. we accomplish this in three steps:  extract base pairs from the lattice conformation,  group the extracted base pairs into helices and extend each helix until maximal,  select a disjoint set of base pairs from the maximal helices.

to extract base pairs from the lattice conformation, we use a simple criterion: two bases are complementary if they are either a watson-crick pair cg or au, or a wobble pair gu. two complementary bases form a base pair if they are adjacent in the lattice conformation, and are separated by at least three other bases in the rna sequence . if two stacking base pairs  and  are both watson-crick pairs, then both base pairs are extracted. if a base pair  is a wobble pair and is stacked with two other base pairs  and  that are both watson-crick pairs, then all three base pairs are extracted.

given the initial set of base pairs extracted from the lattice conformation, we group consecutive base pairs into helices. we do not allow bulges or internal loops in the helices. then each helix can be specified by three numbers , where  the outer-most base pair in the helix, and ℓ is the helix length, i.e., the number of base pairs in the helix. for example, the helix  consists of three stacking base pairs , , and . we then extend each helix into a maximal helix: first extend  inward to  incrementally, for k =  <dig>   <dig> ..., while the inner-most base pair satisfies the hairpin constraint  -  >  <dig> and the helix energy becomes lower; next extend the helix outward, from  to , in a similar manner. here the energy of a helix of length ℓ is the sum of the ℓ -  <dig>  stacking energies of consecutive base pairs.

recall that each base may be adjacent to two or more complementary bases on the 3d triangular lattice since each lattice point has  <dig> neighbors. thus the initial set of base pairs extracted from the lattice conformation may not be disjoint. it follows that the maximal helices obtained from these base pairs may not be disjoint either. we use a greedy algorithm to select a disjoint set of base pairs from these maximal helices. the greedy algorithm is based on a classical concept in graph theory called the page number  <cit> . define the page number of a secondary structure as the smallest positive integer k such that the base pairs in the structure can be partitioned into k pseudoknot-free sub-structures. then a pseudoknot-free secondary structure has page number one, and a simple h-pseudoknot has page number two. rna secondary structures with page number two have been studied previously as the bi-secondary structures  <cit> . recent research on the classification of rna pseudoknots  <cit>  has shown that most known rna secondary structures have page number two, and that almost all known rna secondary structures have page number at most three. considering these facts, our greedy algorithm repeats the following selection round until every helix is either assigned to a page or deleted:

 <dig>  among the helices not yet assigned to any page, find one helix h with the lowest energy.

 <dig>  if h does not cross any helices on page  <dig>  assign h to page 1; else if h does not cross any helices on page  <dig>  assign h to page 2; else delete h.

 <dig>  if h is assigned to either page  <dig> or page  <dig>  trim each unassigned helix to remove its base pairs that overlap with h. delete any unassigned helix that contains less than three base pairs after the trimming.

after the greedy algorithm, the base pairs assigned to either page  <dig> or page  <dig> are then output as the predicted secondary structure.

reconstructing tertiary structure from predicted secondary structure
our method for tertiary structure reconstruction is based on the same folding simulation approach that we use for secondary structure prediction. in fact all aspects of the annealing procedure remain the same except the scoring function. the new scoring function for reconstruction has two components: the match bonus and the sharp turn penalty. given a set of base pairs as input, the match bonus includes a constant positive score for each base pair in the input that is realized by two adjacent bases in the lattice conformation. for aesthetic purpose, the sharp turn penalty includes some negative score for each base i at which the turn angle of the three consecutive bases  is either 60° or 90° . since finding a conformation that realizes all base pairs in the input is more important than minimizing the number of sharp turns in the conformation, we choose the magnitude of penalty for each sharp turn to be a constant  times 1/l of the match bonus for a single base pair, where l is the length of the rna sequence. this sharp turn penalty, although very low in magnitude, is still effective in discriminating alternative structures. we observed that the tertiary structures reconstructed by the folding simulation indeed became noticeably smoother with the sharp turn penalty in the scoring function.

visualizing lattice conformation of rna secondary structure
we implemented a 3d visualization program that, given a sequence of rna bases and a turn sequence of lattice directions, decodes a lattice conformation of the rna sequence from the turn sequence, and displays the rna structure in the ball-and-stick model: each base is represented as a ball; two consecutive bases in the sequences are connected by a stick. optionally, two complementary bases adjacent in the lattice conformation  are connected by a line segment. all figures of rna structures included in this paper are actual screenshots of our visualization program.

as we would expect from a typical 3d visualization program, the user is able to rotate, zoom, and adjust the 3d view using mouse and keyboard. moreover, the user can manipulate the rna structure interactively, by executing pull moves, and save the modified structure in a file. the most attractive feature of our visualization program is perhaps its ability to play rna folding movies  <cit> . each frame of animation corresponds to an incremental change to the lattice conformation due to a single pull move. the whole sequence of pull moves for the movie can be read either from a file, in which each line contains two numbers for the base index and the lattice direction of a pull move, or directly from the output of a running annealing procedure, in real time. as we observed in bioinformatics classrooms, the visualization program is a great pedagogic device.

software
we implemented a suite of computer programs for rna folding on the 3d triangular lattice. our software package consists of the following components:

 <dig>  the delta library delta.c and delta.h, which includes basic data structures and functions for the 3d triangular lattice, pull moves, file input/output, and rna-specific information such as stacking pair energies. 

 <dig>  the folding simulation program fold.c for the prediction of rna secondary structures and the reconstruction of rna tertiary structures.

 <dig>  the 3d visualization program show.c for displaying the lattice conformations of rna secondary structures and for playing rna folding movies.

 <dig>  the selection program is.c for selecting disjoint base pairs from the output of folding simulation.

 <dig>  data conversion tools such as db2bp.c , bp2hx.c , hx2bp.c , etc.

 <dig>  traditional unix makefiles for automating program compilation and experiments, and helper programs such as ssa.c  for the analysis of experimental results.

we refer to figure  <dig> for a typical use of the programs in our software package. given an rna sequence, the folding simulation program fold  finds a good lattice conformation and extract the base pairs, the conversion tool bp2hx converts the base pairs to helices, the selection program is selects a disjoint set of helices, the conversion tool hx2bp converts the helices back to base pairs, the folding simulation program fold  reconstructs a lattice conformation of the rna sequence as a turn sequence of lattice directions, and finally the 3d visualization program show displays the reconstructed lattice conformation of the predicted structure.

the whole pipeline is encapsulated by the makefiles in two simple commands. given an rna sequence in the file pkb <dig> seq, the command make pkb <dig> result automatically goes through the pipeline and saves the output to the three files pkb <dig> delta.hx, pkb <dig> delta.is.hx, and pkb <dig> seq <dig>  then the command make pkb <dig> show prints a textual representation of the predicted secondary structures pkb <dig> delta.hx  and pkb <dig> delta.is.hx  to the console, and displays the reconstructed lattice conformation pkb <dig> seq <dig> using the visualization program. we refer to figure  <dig> for an example output of the visualization problem. an example output to the console is the following:

aggggggacuuagcgccccccaaaccgua

 ______        ______

       __                 __

         __          __

         __           __

             __          __

>

 ______        ______

            ___           ___

to watch the folding simulation of the sequence pkb <dig> seq in real time as a movie, run the command make pkb <dig> movie.

RESULTS
to evaluate our rna folding programs, we use the rna sequences with known secondary structures from pseudobase  <cit> . as of may  <dig>   <dig>  the pseudobase contained  <dig> partial rna sequences, of which  <dig> are consecutive sequences without gaps. we collected these  <dig> sequences and their known secondary structures  in a fasta file pseudobase.fasta as the data set for our experiments. the sequences in the data set have maximum length  <dig> and minimum length 20; the average length is about  <dig> with a standard deviation of  <dig> 

three low-end desktop computers were used in our experiments: for pseudoknot prediction, two dell optiplex gx <dig> with  <dig> - <dig>  ghz pentium d processor and  <dig> gb ram running microsoft windows xp professional service pack  <dig> and cygwin  <dig> .25; for reconstruction and visualization, an apple imac with  <dig> ghz powerpc g <dig> processor and  <dig> gb ram running mac os x  <dig> . <dig> 

we compare our rna pseudoknot prediction method, code named deltais, with the hotknot algorithm of ren, rastegari, condon and hoos  <cit> . hotknot is an effective heuristics that has been shown  <cit>  to outperform the well-known pseudoknots algorithm of rivas and eddy  <cit> , the nupack algorithm of dirks and pierce  <cit> , and the iterated loop matching algorithm of ruan, stormo and zhang  <cit> , and to give better results in many cases than the genetic algorithm from the star package of van batenburg, gultyaev, and pleij  <cit>  and the pknotsrg-mfe algorithm of reeder and giegerich  <cit> .

we refer to figure  <dig> for a flow chart of our experiment on pseudoknot prediction. for each sequence in the data set, the top branch  computes a secondary structure following the simulation and selection steps of our pipeline in figure  <dig>  the middle branch  extracts the known secondary structure of each sequence, and converts it from dot-brackets to base pairs and then to helices. the bottom branch  also computes a secondary structure for each sequence, using hotknot, and converts it from the bpseq format to our helix format. the secondary structures predicted by deltais and hotknot are then compared with the known secondary structures from pseudobase using the analysis program ssa. since deltais is randomized, we computed  <dig> different runs of the deltais branch for the analysis, where each run took 20- <dig> hours to complete. a single run of the  hotknot branch, on the other hand, takes only a few minutes to complete. thus deltais is not advantageous over hotknot in terms of speed. note however that the running time of deltais depends on the tunable parameters of the program. by default, the initial number of annealing steps in each iteration is set to 100·ℓ <dig> for a sequence of length ℓ. with multiple rounds of doubling steps and with five iterations in each round, the runnning time of deltais on individual sequences ranges from less than a minute  to more than an hour . this running time can of course be reduced by using fewer annealing steps, but when the number the annealing steps is reduced to a certain point, the prediction accuracy will also be affected.

to compare a predicted secondary structure with a known secondary structure, we count the true positives tp as the base pairs that are known and are predicted, the false negatives fn as the base pairs that are known but are not predicted, and the false positives fp as the base pairs that are not known but are predicted. then we define three quality measures:  

both sensitivity and selectivity are standard quality measures that are widely used. we introduce the measure of accuracy here as a combination of sensitivity and selectivity. intuitively, consider the predicted secondary structure and the known secondary structure as two sets of base pairs, then the measure of accuracy is the intersection of the two sets over the union of the two sets.

we first compare the overall performances of deltais and hotknot. for this we calculate the three quality measures  using the equations above with the three numbers  summed over all  <dig> sequences in the data set. since delta is randomized, we first compute the three measures using the best prediction of  <dig> runs for each sequence, then compute the averages and standard deviations of the measures over the  <dig> runs. the results are shown in table  <dig>  from the results we can see that deltais is comparable to hotknot in selectivity and outperforms hotknot in both sensitivity and accuracy. also note that the best and the average are very close for deltais. this shows that the performance of deltais is consistent over different runs.

we next compare the performances of deltais and hotknot on individual sequences. refer to figure  <dig> for a scatter plot in which each of the  <dig> sequences corresponds to a point ⊙ for deltais and a point × for hotknot, with the sequence length  as the x-coordinate and with the prediction accuracy  as the y-coordinate. there are no clear patterns on the distribution of these data points, but linear regressions of the two point sets produce an almost horizontal line for hotknot and a slightly decreasing line for deltais. the intersection point of the two lines corresponds to the sequence length of about  <dig>  this implies that the improvement of deltais over hotknot in overall prediction accuracy is especially pronounced on the shorter sequences.

after analyzing the scatter plot of prediction accuracies for individual sequences, we count the number of sequences whose secondary structures were predicted perfectly, with all three measures sensitivity, selectivity, and accuracy equal to 100%. out of the  <dig> sequences in the data set, hotknot predicted the secondary structures of  <dig> sequences perfectly. in contrast, deltais predicted the secondary structures of  <dig> sequences perfectly in all  <dig> runs . moreover, deltais predicted the secondary structures of  <dig> sequences perfectly in at least one of the  <dig> runs . among the  <dig> sequences whose secondary structures are predicted perfectly by hotknot,  <dig> sequences are included in the  <dig> sequences whose secondary structures are predicted perfectly by hotknot in all  <dig> runs, and  <dig> sequences are included in the  <dig> sequences whose secondary structures are predicted perfectly by hotknot in at least one of the  <dig> runs. the overlaps do not seem big enough to signify any strong correlation between the prediction accuracies of deltais and hotknot on individual sequences.

in addition to the experiment on pseudoknot prediction, we also performed an experiment on reconstruction. our reconstruction method, based on the same folding simulation approach as our prediction method, can successfully reconstruct the lattice conformations of all  <dig> sequences from their known secondary structures in less than  <dig> minutes. moreover, most of the sequences need only one iteration of the annealing procedure for a successful reconstruction. we refer to figures  <dig> and  <dig> for the reconstructed lattice conformations of two sequences.

discussion
reconstruction versus prediction
our methods for rna tertiary structure reconstruction and rna secondary structure prediction are based on the same folding simulation approach. the experimental results, however, show that reconstruction is much easier than prediction: for reconstruction, 100% success rate in less than  <dig> minutes; for prediction,  <dig> % sensitivity  <dig> % selectivity  <dig> % accuracy in 20- <dig> hours. we give two explanations for this disparity:

 <dig>  the 3d triangular lattice is a dense regular lattice that approximates the 3d space very well. by a comparison of the sequence space and the shape space  <cit> , one can show that for any given rna sequence, the number of all possible conformations on the 3d triangular lattice far exceeds the number of all possible secondary structures as sets of disjoint base pairs. thus each distinct secondary structure has many corresponding lattice conformations. the abundance of "witnesses" for each secondary structure makes it easy for a random search to find a corresponding lattice conformation.

 <dig>  the annealing procedure is a biased search. as remarked by zwanzig, szabo and bagchi  <cit>  on levinthal's paradox, it is difficult for an uneducated monkey to type a verse of shakespeare accidentally, but if the letters typed correctly are forever locked in place while incorrect letters can still be changed, then the chance of such a feat becomes significantly higher. the same logic explains why our reconstruction method based on folding simulation is so effective. indeed a similar argument also explains the effectiveness of hofacker et al.'s heuristic for the rna design problem  <cit> .

an interesting aspect of our approach is that it can be used to complement the existing methods. given a secondary structure predicted by any other method, we can first reconstruct a lattice conformation of the structure, then obtain an improved structure by folding simulation using the old structure as the starting point.

multiple predictions
the random nature of our folding simulation approach may cause different iterations of the annealing procedure to find different best structures, although our experiment showed that the predictions are typically consistent . this may seem like a disadvantage, if our goal is simply to predict a unique structure. the biological reality, however, is not so simple. the disadvantage may turn out to be a desirable feature in certain scenarios. some rna sequences are "switches" in the sense that they can assume several very different meta-stable structures. the conformation spaces and folding trajectories of such rna sequences cannot be studied adequately with the thermodynamic approach alone, which aims at a supposedly unique best structure with the minimum free energy. flamm, fontana, hofacker and schuster  <cit>  showed an effective kinetic approach based on elementary-step simulation. one of their examples for illustrating the kinetic approach is an rna switch with two highly stable secondary structures:

ggccccuuugggggccagaccccuaaagggguc

)))))))))))))

))))):)))))

using our folding simulation program on this sequence, we were able to predict both structures within five iterations of the annealing procedure. the lattice conformations are shown in figures  <dig> and  <dig>  note that the first structure is a stem-loop and the second structure is indeed a kissing-hairpin:

ggccccuuugggggccagaccccuaaagggguc

)))))))))))))

))))):)))))

although the two structures are very different, they have roughly the same number of base pair stackings and hence very close scores in the folding simulation. we recommend that the users of our program always run the prediction program multiple times on each sequence and consider each predicted structure as a possible candidate.

longer sequences
as we observed from the scatter plot in figure  <dig>  the prediction accuracy of deltais tends to deteriorate as the sequence length increases. we believe the reason is the following. each pull move relocates on average only a constant number of bases. while this semi-local property is desirable for making individual annealing steps efficient, it also means that the average impact of a single pull move on the lattice conformation becomes less significant for longer sequences. as a result, the annealing procedure becomes less capable of escaping local optima. moreover, longer sequences typically have a much larger number of local optima than shorter sequences. possible ways to improve the prediction accuracy for long sequences are  to design a more effective move than the pull move,  to combine several pull moves into an atomic unit as a combo move, and  to use alternative monte carlo schemes such as simulated tempering  <cit>  instead of simulated annealing. we will try these ideas in our future work.

CONCLUSIONS
folding simulation on the 3d triangular lattice is effective method for rna secondary structure prediction and tertiary structure reconstruction. the visualization software for the lattice conformations of rna structures is a valuable tool for the study of rna folding and is a great pedagogic device.

availability
our rna folding programs have been tested on three major platforms: microsoft windows , linux, and mac os x. the complete source code, documentation, data set, and experimental results can be downloaded from the companion website of this paper: rna folding on the 3d triangular lattice http://www.cs.usu.edu/~mjiang/rna/deltais/.

authors' contributions
mj conceived of the study and designed the algorithms, the software, and the experiments. mm and mj implemented a basic version of the software and performed initial experiments in a preliminary study. jg and mj improved the accuracy of the rna secondary structure prediction method, optimized the source code, revised the documentation, and created the companion website. all authors read and approved the final manuscript.

acknowledgments
we thank jeremy j. neff for his help in extracting pseudoknot data from pseudobase  <cit> . we thank yuguang zeng for his help in acquiring stacking pair energy parameters from mfold  <cit> . we also thank the students of utah state university in the class bioinformatics ii spring  <dig>  shanhong cheng, d. scott fechser, ramoni o. lasisi, pedro j. tejada, and yu zhou, for enthusiastically evaluating our software and reviewing the source code. this work is supported by nsf grant dbi- <dig> 
