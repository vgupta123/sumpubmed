BACKGROUND
protein phosphorylation is one of the most studied posttranslational modifications . it is an important regulatory event, playing essential roles in many aspects of cell life  <cit> . the protein phosphorylation data have increased rapidly in the past decade, thanks to the high-throughput studies  <cit>  and web resources  <cit> . however, experimental identification of phosphorylation sites is still an expensive and time-consuming task. computational prediction of phosphorylation sites provides a useful alternative approach for phosphorylation site identification, and hence has become an active research area.

musite  <cit>  was the first open-source framework specifically designed for phosphorylation-site prediction that meets the open source initiative  open standards requirement . there are more than a dozen phosphorylation-site prediction tools available before musite, including disphos  <cit> , netphos  <cit> , scan-x  <cit> , scansite  <cit> , netphosk  <cit> , gps  <cit> , kinasephos  <cit> , predikin  <cit> , crphos  <cit> , automotif  <cit> , pkaps  <cit> , phoscan  <cit> , predphospho  <cit> , and netphorest  <cit> . machine learning techniques were adopted in most of these tools. although there are general open-source machine learning frameworks such as bioweka  <cit>  that support feature extraction from local sequence properties, there was no open-source framework specifically designed for phosphorylation-site prediction before musite.

we have developed musite, an open-source software tool for large-scale prediction of both general and kinase-specific phosphorylation-site prediction. in  <cit> , we introduced its methodology and validated it by applying to several proteomes and comparing it to other tools. in this paper, we will describe the underlying open-source software framework of musite.

implementation
machine learning based framework
in musite, we formulated the problem of phosphorylation-site prediction as a machine learning problem, specifically a binary classification problem, i.e., protein residues can be classified into two categories: phosphorylation sites and non-phosphorylation sites. the musite framework is an implementation to solve this machine learning problem, which consists of three main procedures: data collection, feature extraction, and training/prediction, as shown in figure  <dig> 

the data collection procedure is designed for collecting phosphorylation data from various sources and converting them into formats that musite accepts. for example, phosphorylation sites can be easily retrieved from uniprot/swiss-prot using the utility of converting uniprot xml to musite xml. musite also has functionalities of merging phosphorylation annotations from different sources and building non-redundant datasets.

the feature extraction procedure extracts features from the collected data to characterize patterns of phosphorylation sites. to date, three sets of features have been integrated in musite, namely k-nearest neighbor  scores, protein disorder scores, and amino acid  frequencies  <cit> . we are currently in the process of evaluating more features, such as solvent accessibility and secondary structure information. a feature will be integrated after evaluation if it meets the following criteria: 1) it is relevant to the biological context, i.e., it is related to protein phosphorylation; 2) it helps to improve prediction performance; and 3) it is computationally feasible for large-scale predictions.

in the training and prediction procedure, binary classifiers are trained using the features extracted from training data. the trained classifiers can then be used to predict phosphorylation sites in users’ query protein sequences. we have integrated a support vector machine  classifier, and we also implemented a bootstrap classifier and a boosting classifier, which were combined to implement a bootstrap aggregating procedure.

other utilities were also provided to assist phosphorylation-site prediction and analysis in musite, including prediction model management, customized model training, specificity estimation, filtering, statistics, etc.

java api
musite is written in java and released under the gnu gpl open source license.figure  <dig> illustrates its overall architecture and application programming interface . musite architecture contains six modules that are loosely coupled with each other.

the data module defines the core data structure in musite, representing protein information, posttranslational modification, prediction model, and prediction result, etc. this module also contains several utility classes, for example, ptmannotationutil is a class for annotating phosphorylation and other ptm sites in proteins. all other modules are dependent on this module.

the classifier module, feature extraction module, and training and prediction module form the core modules of machine learning. the classifier module contains a set of binary classifiers. we have incorporated svmlight <cit>  and implemented a bootstrap aggregating procedure  <cit>  to handle the highly unbalanced large training datasets. a developer can easily define/incorporate a new classifier such as random forest  <cit>  by implementing the binaryclassifier interface and integrate it into the bootstrap aggregating procedure and/or the machine learning framework.

the feature extraction module defines the features to be extracted from data and used in a classifier. currently, we have integrated three sets of features: k-nearest neighbor  scores, protein disorder scores, and amino acid  frequencies. a developer can incorporate new features into musite simply by implementing the featureextractor interface.

the training and prediction module defines the machine learning procedure by utilizing the classifier module and feature extraction module. musitetrain defines the model training procedure. it extracts features from training sequences and trains prediction models using the extracted features. musiteclassify defines the prediction procedure. it extracts features from query sequences  and makes predictions using the extracted features based on some prediction model trained by musitetrain.

the i/o module provides utilities for reading/writing different types of files and converting between them. currently musite supports file formats of fast a, musite xml, uniprot xml, and phospho.elm report. to support other file formats, a developer can implement the reader and/or writer interfaces. the musiteioutil class provides uniform methods to access different readers /writers.

the ui module provides users with a biologist-friendly graphical user interface  to most functionalities in musite. with the gui, one can easily perform phosphorylation-site prediction, result analysis, stringency adjustment, customized model training, prediction model management, file format conversion, etc.

RESULTS
open framework for phosphorylation-site prediction
with its extensible api, musite provides an open framework for phosphorylation-site prediction. with the rapidly accumulating data and better understanding of protein phosphorylation over time, more evidence needs to be integrated for better prediction performance. musite provides a platform for integration of increasingly more diverse data and knowledge on protein phosphorylation. for example, phosphoproteomics data are scattered among different web resources. musite can already read different file formats and can be easily extended to support more. it also provides functionality of merging phosphorylation annotations from different sources. moreover, musite makes it simpler to incorporate more biological evidence as features for phosphorylation-site prediction. with the open framework of musite, it is possible to build a community-based tool, which could integrate the different expertise of various people from diverse areas and coordinate a joint effort towards better prediction and understanding of protein phosphorylation.

better utilization of the large magnitude of data
one challenge in phosphorylation-site prediction, similar to many other bioinformatics problems, is how to handle the magnitude of data. there are two issues: 1) how to utilize the large amount of experimentally verified phosphorylation data; 2) how to perform proteome-scale applications. musite’s i/o module and its associated xml format provide a solution for collecting phosphorylation data from various sources. the bootstrap aggregating  procedure  <cit>  implemented in musite provides a solution for utilization of large datasets in machine learning applications and it also solves the problem of highly unbalanced data between positive and negative data. this procedure samples representative small datasets from large unbalanced datasets for training prediction models and aggregates prediction results from multiple classifiers for more robust performance. at the application level, musite, as standalone software, can perform phosphorylation-site prediction up to the proteome scale on personal computers in an automated fashion. moreover, users can utilize the customized model training utility to take advantage of the latest phosphorylation data.

integration into experimental design
musite is a good candidate for integration into experimental studies because of its two unique utilities: customized model training and continuous stringency adjustment. customized model training enables the users to train their own models from any phosphorylation dataset. continuous stringency adjustment makes it possible for users to choose any stringency to meet their requirements for confidence level. using these two utilities, musite can be integrated into experiments for more efficient identification of phosphorylation sites. for example, in a hypothesis-driven experiment, after an experimental biologist gets some initial phosphorylation data from experiments, he or she could make proteome-scale predictions based on the initial dataset, and then focus more on predictions above a certain confidence level  in the next stage; after each stage, the prediction model can then be refined  based on the new data and guide the experiments in the next stages. using such an iterative design combining experimental and computational approaches, phosphorylation site identification could be much more efficient and less expensive.

case study: training an aids-specific model using musite
a common limitation of all phosphorylation-site prediction tools is that prediction results cannot be correlated with different cell states or tissue conditions. similarly, prediction results based on pre-trained models released in musite  <dig>  may only indicate whether a query site can be phosphorylated or not, but have no implications for cell types or states. however, it is possible to train tissue- or disease-specific models using the customized model training utility in musite. in this section, a sample recipe of training an aids-specific phosphoserine/threonine prediction model is provided as follows.

• step 1: retrieve aids-specific protein data from uniprot.

i. open http://www.uniprot.org and search for keyword:aids and reviewed:yes.

ii. download the complete data in xml format.

• step 2: convert the downloaded uniprot xml file to the musite xml format.

i. start musite.

ii. open menu tools => file processing => file conversion => convert uniprot xml to musite xml.

iii. select the downloaded file as from file, and specify a save to file,

iv. select all checkboxes in the site annotation status section.

v. click ok and wait until it is finished.

• step  <dig> : check the abundance of phosphorylation sites

i. open menu tools =>statistics=>sites statistics.

ii. select the converted musite xml file,

iii. select phosphorylation as ptm type.

iv. as of september  <dig>   <dig>  there were  <dig> proteins in the musite xml file, out of which  <dig> were phosphoproteins, and there were  <dig> phosphoserines and  <dig> phosphothreonines.

• step 4: predict disorder scores.

i. open menu tools => feature extraction => disorder prediction.

ii. select the converted musite xml file as the sequence file, and specify a save to file.

iii. click ok and wait until it is finished.

• step 5: train a prediction model.

i. open menu tools => prediction model training.

ii. select the musite xml file with the disorder scores saved in the last step.

iii. select serine and threonine as residue types.

iv. click ok and wait until it is finished.

• step <dig> : edit the trained model.

i. open menu file =>manage trained model.

ii. double click on the model file just trained,

iii. right click on the model to rename,

iv. add comments and save.

• the trained model is ready for phosphorylation-site prediction from query sequences.

CONCLUSIONS
with the rapidly accumulating phosphoproteomics data in recent years, the area of phosphorylation-site prediction has attracted increasingly more interest and attention. musite provides an open-source framework for easy integration of new evidence and/or methodologies for better phosphorylation-site prediction. by providing an open resource for protein phosphorylation research, we hope that musite could eventually evolve into a joint effort in the phosphorylation research community for both bioinformaticians and biologists. we are also expanding the scope of musite to predict other types of ptm sites, such as acyletation, ubiquitination, protein methylation, and tyrosine sulfation.

availability and requirements
• project name: musite

• project home page:http://musite.sourceforge.net

• operating system: platform independent

• programming language: java

• other requirements: java  <dig> or higher

• license: gnu gpl v3

• any restrictions to use by non-academics: musite has no general restriction
to use by non-academics. however, musite integrates svmlight  and vsl <dig> , which require permissions from their authors for commercial use.

list of abbreviations
aa: amino acid; api: application programming interface; gpl: general public license; gui: graphical user interface; i/o: input/output; knn: k-nearest neighbour; osi: open source initiative; ptm: posttranslational modification; xml: extensible markup language; svm: support vector machine;

competing interests
none.

authors' contributions
dx conceived the project. dx and jg design the methodology. jg implemented the software. jg drafted the manuscript. both authors read and approved the final manuscript.

