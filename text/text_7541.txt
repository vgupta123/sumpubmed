BACKGROUND
the explosion in the availability of mutation data, resulting from the application of snp chips  <cit>  and next-generation sequencing  <cit>  has led to a huge demand to analyze and predict the effects of mutations. the genes for many genetically linked diseases are now routinely sequenced in the clinic.

while a mutation is defined as 'any change in the dna', most work has focused on studying 'single nucleotide variations' . broadly these can be classified into single nucleotide polymorphisms  and pathogenic deviations . snps which, if strictly defined, occur in at least 1% of a normal population, are estimated to occur once every 100- <dig> bases in the human genome  <cit> , giving rise to subtle phenotypic variation without causing major deleterious phenotypic changes; pds occur at much lower frequencies and are causative of disease.

in reality, snvs form a spectrum from completely silent snps at one end, to 100% penetrance, mendelianly inherited pds at the other end. in between, snvs show partial penetrance; that is, only a fraction of individuals having the mutation show altered phenotype and this can be influenced by the presence of other mutations and/or environmental factors.

to date, most effort has gone into understanding the effects of missense snvs that lead to changes in protein sequence. we use the term 'single amino acid polymorphism'  to refer to such amino acid changes whatever the frequency and resulting phenotype of the mutation. more than a dozen groups have devised methods to analyze the effects a given saap will have and in some cases attempt to predict whether the mutation will have a deleterious effect on phenotype  <cit> . however, the best known methods are sift  <cit>   and polyphen- <dig>  <cit>  which uses machine learning on a set of eight sequence- and three structure-based features. a recent addition to the set of tools is condel  <cit> , a consensus predictor which makes use of sift, polyphen- <dig> and mutationassessor  <cit> . condel significantly outperforms any of its component predictors. until recently, rather than trying to predict whether a given saap will result in a deleterious phenotype, our focus has been on trying to understand the effects that mutations have on protein structure, comparing these effects in snps  and pds. our approach has been to map saaps onto protein structure and to perform a rule-based analysis of the likely structural effects of these mutations in order to 'explain' the functional effect  of the mutation. since we map mutations to structure, we only consider mutations in proteins for which a structure has been solved. data resulting from the analysis of snps and pds have been collected into a relational database and made available over the web in the resource saapdb  <cit>  .

in this paper we describe  an update of the data in saapdb,  enhancements to methods used to analyze the structural impact of snps,  a new web interface allowing the analysis of new mutations and  results of the application of machine learning to predict the phenotypic effects of mutations based on our structural analyses.

RESULTS
saapdb update
considerable effort has been made to improve the code for updating saapdb. a summary of the datasets comparing the old and new builds of the database is shown in table  <dig>  while figure  <dig>  shows a comparison of structural effects seen for snps and pds. other sources of mutation data have been considered including hgmd and swissprot variants . however hgmd data are only available to registered users meaning that we have not been able to reproduce their data in our database and swissvar is not terribly reliable in annotation of disease status. for example, known pds in g6pd are annotated as 'natural variants' of unclassified disease status. other locus specific mutation databases  can easily be added  <cit> , but as explained below, we have now implemented saapdap, a pipeline version of the system allowing users to analyze novel mutations, which we now regard as our primary resource.

since we map mutations to protein structure and therefore require a structure to be solved of the protein of interest, we are not able to analyze all mutations. of the amino acid mutations in omim, we are only able to map approximately 57% to structure, while only approximately 22% of 'valid' snps from dbsnp, which result in an amino acid change, map to structure. consequently the coverage of our analysis is currently somewhat limited, but clinically relevant proteins tend to be key targets for structural studies, so we expect this figure to improve. where multiple structures have been solved, we analyze the effects of the mutations in all available structures.

in summary, the number of snps in the database has risen by 41% and the number of pds by 36% . the comparison of structural effects between snps and pds shows the same trends as in the previous analysis, but the 'surfacephobic'  and 'corephilic'  analyses no longer show significant differences between snps and pds.

analysis enhancements
in saapdb, all assignments of structural effects are boolean -- that is, any mutation either does, or does not, have a given effect. while boolean assignment is appropriate in some cases , in other cases, it relies on some cutoff  as described previously  <cit> .

we found that assigning a mutation as  having a structural effect is very sensitive to precise structural details; where multiple structures are available for the same protein, one structure may indicate that a mutation has a value just below a cutoff while another structure has a value just above. wherever appropriate, we have now implemented real-number scores or pseudo-energies for each effect. in particular, we have enhanced the analysis of clashes and torsion angles to provide energy values.

clashes
in analyzing clashes, our previous work defined a damaging clash as any sidechain that has at least  <dig> van der waals overlaps  with other atoms  <cit> . we now perform a more complete energy calculation incorporating lennard-jones and torsion energies using charmm  <cit>  parameters:

  e=ar12-br6+k1+cos 

this accounts for any clashes between atoms of the sidechain being replaced with its surroundings, together with preferences for staggered conformations . testing the new method on  <dig>  residues from cath o-representatives  of high resolution  shows that 99% of sidechains have an energy of < <dig>  kcal/mol .

using the new energy evaluation we went on to analyze how the old clash method performed. in the old method, no account was made of the degree of clash -- overlaps of  <dig> Å or of  <dig> Å were treated the same. figure  <dig> shows the energy distribution for sidechain replacements considered to make 0- <dig> clashes by the old method. looking at sidechain replacements that made no clashes using the old method , we see that 99% of the data have an energy below  <dig>  kcal/mol using the new energy-based method. panels  <dig> and  <dig> show cases evaluated as making one or two clashes using the old method. using  <dig>  kcal/mol as an energy cutoff, these graphs indicate that  <dig> % and  <dig> % of potentially damaging clashes  were not detected using the old method. panels  <dig>   <dig> and  <dig> show the energy distributions for sidechain replacements having 3- <dig> clashes by the old method which would have been classified as damaging. however, using the new method,  <dig> %,  <dig> % and  <dig> % of cases  have energies below the threshold and are therefore unlikely to be damaging.

overall, approximately 32% of mutations previously classified as not clashing are now found to clash while approximately 15% of mutations previously classified as clashing are now found to have only minor clashes which could be relieved by very slight movements in the structure.

glycine and proline mutations
glycine and proline are the 'structural' amino acids which show an unusual ramachandran distribution. because glycine has no sidechain, it is able to access a wider range of phi/psi combinations while the cyclic sidechain of proline restricts the available phi angles. consequently, backbone conformational changes may be necessary to accommodate mutations from-glycine or to-proline.

previously, we used a very simple set of allowed boundaries for backbone phi/psi angles. we have now developed a pseudo-energy potential based on ramachandran plots. a non-redundant set  of high resolution protein domains  was selected from cath and ramachandran plots were generated on a 1-degree grid for proline, glycine and 'other' amino acids. the plot was smoothed by averaging each of the cells with its eight neighbours . for each cell, we can then calculate:

  e=-logobsexp 

where 'obs' is the  observed number of residues with a given phi/psi combination while 'exp' is the expected number, calculated as the total number of observations divided by the number of cells. a threshold energy was calculated for each plot based on 1% of observations in high quality non-redundant structures having a worse energy.

saap data analysis pipeline 
saapdb was designed as a regularly updated pre-calculated resource. however, it has proved very difficult to maintain and changes in licensing of omim data mean that we may no longer be able to use this as our primary source of pds. in addition, with the increasing routine use of high-throughput sequencing methods to detect mutations, more and more people want to be able to analyze their own mutations.

consequently we believe the value of saapdb has diminished and have now implemented saapdap . this is a complete rewrite of the mutation analysis software in saapdb using a plugin architecture and making use of the new non-boolean analyses. while we still indicate whether a mutation is likely to have a detrimental effect on structure using cutoff values, we also provide continuous values for each of the analyses.

results from the saapdap pipeline are presented as shown in figure 6a. results are summarized at the top where the effects on each structure to which the mutation maps are shown. below, the analyses of structural effects on each structure are presented and these can then be expanded to provide more detail on the analyses as shown in figure 6b. analysis descriptions are much more comprehensive than was the case in saapdb to make the results easier to understand.

we have now implemented a web interface to allow users to enter mutations for analysis. because some of the analyses  are quite time consuming , the web interface makes use of ajax  to update the user with the progress of the analysis. the submission page is available at http://www.bioinf.org.uk/saap/dap/.

predicting damaging mutations 
the data in saapdb  show clear differences in the sequence and structural characteristics of snps and pds: pds have additional, and more severe, structural effects. thus there is a clear signal that can be used to predict the pathogenicity of a novel mutation.

in preliminary experiments, we used a balanced set of mutation data from saapdb with random forests implemented in weka obtaining an accuracy  of  <dig>  and a matthews correlation coefficient  of  <dig>  . the balanced dataset consisted of  <dig>  snps mapped to unique pdb structures  and processed without any errors, and a random selection of  <dig>  pds . where several structures are available for a mutated residue, each is used as an independent data point in training the machine learning. while the 10-fold cross-validation in weka ensures that there is no direct overlap between the training and test sets, in these preliminary experiments, there may be some 'structural' overlap -- in other words, for a given mutation in the test set, the same mutation in a different pdb file of the same protein may be present in the training set.

in some cases, several hundred structures are available  and, on average there are approximately two copies of each chain in each pdb file.

gonzález-pérez and lópez-bigas  <cit> , report that well known individual methods  give accuracies between  <dig>  and  <dig>  evaluated on the humvar dataset developed for polyphen <dig>  their consensus method  gives an accuracy of  <dig> . while our preliminary value of  <dig>  is considerably better, we are using a different dataset.

however, having trained on saapdb, if we test on  <dig> snps and  <dig> pds from the humvar dataset that mapped to structure we obtain acc =  <dig> , mcc =  <dig>  --essentially a random prediction. this appears to be because of the different definition of the 'boundary' between snps and pds. as stated above, snvs form a spectrum from completely silent snps at one end, to 100% penetrance, mendelianly inherited pds at the other end. as shown in figure  <dig>  different datasets use different thresholds to separate the data into two sets or may consider only the extremes. prediction of the extremes may appear to be a trivial problem, but this is not always the case -- some damaging mutations are very hard to predict. humvar uses a broader definition of pds than the saapdb data; in contrast, the saapdb definition of snps is rather wide  while the definition in humvar enforces the requirement that snps are present in at least 1% of a normal population. since, in this experiment, we use very different definitions for the training and testing, it is not surprising that we obtain poor performance. we considerably over-predict snps, consistent with our broader definition of snps in the saapdb dataset.

consequently, for the final version of saappred, we both trained and tested our method on the humvar dataset . humvar  contains  <dig>  deleterious mutations and  <dig>  neutral mutations of which  <dig>  and  <dig> , respectively, can be mapped to structure. consequently, to obtain a balanced dataset, only  <dig>  mutations  can be used. ten runs were performed, each of which used all  <dig>  neutral mutations with a random selection of  <dig>  deleterious mutations from the total of  <dig> . results from the ten runs were then averaged. in each run, to avoid the 'structural overlap' between the training and testing data during cross-validation , the mutations were split into  <dig> sets of approximately the same size. each of these  <dig> sets in turn was chosen as a test set. the remaining  <dig> sets were used for training by randomly drawing balanced datasets of different sizes from the mutations as mapped to protein chains . this manual cross-validation ensures that there are no cases of the same mutation in the training and test sets but from different pdb chains.

as expected, the performance  is rather worse than with the saapdb data, simply because the size of the humvar dataset that can be mapped to structure is much smaller than the saapdb dataset. figure  <dig> shows the effect of dataset size on training and testing using subsets of the saapdb data. the same procedure described above was used to avoid structural overlap between training and testing sets during cross-validation. the graph clearly shows that the smaller datasets perform considerably worse.

nonetheless, our results from training and testing on humvar mutations that map to structure considerably outperform other well-known individual methods including sift and polyphen <dig> as reported by gonzález-pérez and lópez-bigas  <cit>  . however these results are still not directly comparable with the other methods as those methods are evaluated on the complete humvar dataset and it may be argued that the subset of mutations for which structures are available somehow outperform those for which structures are not available in these other methods. for example, polyphen <dig> makes limited use of structural data where these are available.

consequently, we have evaluated the performance of polyphen <dig>  sift and mutationassessor using balanced datasets  used to assess the performance of our method.  in fact this gives a significant advantage to polyphen <dig> which is itself trained on humvar leading to an overlap between the training and test set. it is not clear precisely what data are used to train sift; in their latest paper, sim et al.  <cit> . state that sift was originally trained and tested on laci, lysozyme and hiv protease, and refer to the original sift papers, but they do not state whether the training has since been modified. mutationassessor does not appear to use a training set per se.

results are summarized in table  <dig> where it can be seen that our method  evaluated using 10-fold cross-validation  performs better than competing methods where there may be overlap between testing and training data. in particular, polyphen- <dig> was trained on the complete humvar dataset from which our test set is extracted. if we allow overlap in our own set  then we outperform polyphen <dig>  by an even larger margin.

the values for the cross-validated assessment of saappred were obtained from 10-fold cross-validation performed during the weka training and used all  <dig> snps from humvar that mapped to structure with a random sample of  <dig> of the  <dig> pds that mapped to structure. this was repeated 10-times and the results averaged. non cross-validated results were performed by using a slightly smaller set of  <dig> snps that mapped to structure and could be assessed by all the other methods together with a random sample of  <dig> pds that could be assessed by all methods. again this was repeated 10-times and the results averaged. the non-cross-validated values for saappred give the fairest comparison with polyphen <dig> which is trained on the humvar dataset. it is unclear exactly what data were used in training the most recent version of sift so there may be some overlap between training and test sets while mutationassessor has no training set per se.

while saappred is clearly performing extremely well, we expect to be able to improve results further through feature selection , feature combination  and feature normalization . we also hope to develop methods to make more complete use of unbalanced datasets and intend to use our predictor as a component predictor of the consensus predictor condel  <cit>  which outperforms the other individual methods .

CONCLUSIONS
in conclusion, we have updated the data in saapdb, improved the analyses and integrated these into the new saapdap pipeline and web interface. it is intended that saapdap will replace saapdb . the submission page for saapdap is available at http://www.bioinf.org.uk/saap/dap/.

we are currently working on new analyses that examine sequence differences at the dna and rna level. in addition to changes to the protein structure, mutations can have effects on expression, rna splicing and rna folding and stability  <cit> .

results of machine learning using the structural parameters calculated in saapdap considerably out-perform any other individual predictor and approaching the performance of the combined predictor, condel. future work will further optimize the performance of this method using feature selection, feature combination and feature normalization as well as exploiting strategies to make more complete use of unbalanced datasets. we will integrate our predictor as a component of condel and expect performance to outperform the current condel method.

while the coverage of our method is currently somewhat limited by the need for a structure of the protein, we plan to investigate the use of modelled structures. however, we currently don't know how well this will work given the detailed structural analysis  that our method performs. however clinically relevant proteins tend to be key targets for structural studies, and as more structures become available, the number of mutants mapped to structure will increase, improving the coverage of our method. in addition, more structural data will allow us to train the machine learning methods with more data. consequently, as shown in figure  <dig>  we expect performance to increase further.

materials and methods
snp data were extracted from the xml format dump of dbsnp  <cit>  obtained from the ncbi. non-synonymous, 'valid' human snps , were extracted and combined into a single xml file. any mutations not annotated as having disease involvement were assumed to be neutral. pds were obtained from online mendelian inheritance in man  and a number of locus-specific mutation databases   <cit> , see table  <dig>  all mutations were then mapped to protein sequences and thence to structure as described previously  <cit> .

saapdb and saapdap perform fourteen analyses: interface:  residue is in an interface according to solvent accessibility criteria; binding: residue makes specific interactions with a different protein chain or ligand; sprotft: residue is annotated as functionally relevant by uniprotkb/swissprot; clash: mutation introduces a steric clash with an existing residue; void: mutation introduces a destabilizing void in the protein core; cis-proline: mutation from cis-proline, introducing an unfavorable omega torsion angle; glycine: mutation from glycine, introducing unfavorable torsion angles; proline: mutation to proline, introducing unfavorable torsion angles; hbond: mutation disrupts a hydrogen bond; corephilic: introduction of a hydrophilic residue in the protein core; surfacephobic: introduction of a hydrophobic residue on the protein surface; buriedcharge: mutation causes an unsatisfied charge in the protein core; ssgeometry: mutation disrupts a disulphide bond; impact: residue is significantly conserved. from these analyses  we derive  <dig> features that are used for machine learning. random forests  were used for all predictions. random forests are ensemble classifiers that consist of multiple decision trees, each of which uses a random subset of the available features. the output of the predictor is the fraction of trees voting for the most popular class . initial trials were performed using saapdb and humvar data with  <dig> trees and between  <dig> and  <dig> features per tree.  <dig> features performed best with saapdb while  <dig> features performed best with humvar and these values were used for building the final machine learning models. data are stored in a postgresql relational database.

note added in proof
an additional predictor fathmm  has become available since this work was completed . predicting the functional, molecular and phenotypic consequences of amino acid substitutions using hidden markov models. hum. mutat., 34:57-65). evaluation of fathmm on the same dataset shows a performance of acc= <dig> , mcc= <dig> . while approaching our cross-validated performance, it is likely that some of the humvar data were included in training fathmm.

competing interests
the authors declare that they have no competing interests.

authors' contributions
nsan updated the saapdb code and data, wrote some of the enhanced analysis methods, performed the machine learning and all testing, drafted the paper and created the figures. acrm implemented saapdap and the remaining enhanced analysis methods, revised the paper and contributed to the machine learning.

