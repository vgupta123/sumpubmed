BACKGROUND
as more genome sequences become available, comparing multiple genomes becomes an important research method that can lead to the discovery of new biological insights. in this paper, we are interested in discovering sets of grouped protein genes , that are present in unknown subsets of genomes. in general, we do not have prior knowledge in which sets of genes are commonly present in which sets of genomes, thus this is a data mining problem.

in  <cit>  and  <cit> , the authors presented a method to detect conserved clusters of genes, called pcbbh , which are pairs of genes that appear close to each other in multiple genomes. however, the problem of this approach is that it only identifies pairs of genes that are conserved clustered in genomes. the number of discovered pairs is too large for interpreting. on the other hand, there are several well developed algorithms for predicting gene patterns in a pair of genomes. indeed, this problem is similar to the well known biological sequence alignment problem. there are successful local multiple sequence alignment  algorithms, such as pratt  <cit>  and teiresias  <cit> , based on a character enumeration approach. we argue that the pattern mining problem can be solved by the enumeration approach, as opposed to the optimization approach, since the basic unit to enumerate is a gene or family, not a single character.

in the case where family classification information of genes in the genome set is known, this problem can be thought as predicting sets of families in multiple genomes by interpreting a genome as a sequence of families. this requires well designed algorithms for several reasons. first, two predicted family sequences in two different genomes, say ga and gb, can be different since the order of families can be different and some families can appear multiple times. second, we do not know which genomes, ga and gb in this case, share a common family sequence. prediction of family sequences leverages the fact that functionally related genes occur in a physically clustered form, especially operons in bacteria. this observation leads to an interesting problem formulation known as the gene team model  <cit> , which searches for a set of gene groups that co-occur in a pair of closely related genomes. in particular, these algorithms use cog families  <cit>  for a pair of genomes  <cit>  and the problem is referred to as cog teams.  <cit>  presents an improvement of the cognitor program that is used to fit new proteins into the cogs. the original cognitor program uses multiple genome-specific best hits  as the only criterion for assigning new proteins to cogs.  <cit>  introduced an estimate of the probability that the query protein is assigned to the given cog by chance. under the assumption of uniform distribution, they calculate the probability of a specified number of bets into a particular cog. when the specified number of bets is large, they calculate the probability in a simplified way. the requirement of all genes being within a certain physical distance, say  <dig> bp, is often too strict. recently, we extended the gene team model by defining and using the hybrid gene team model  <cit> . we will call the problem of predicting family sequences common to multiple genomes the family pattern mining problem.

however, there are many genomes whose genes have not been classified into families. for example, only about  <dig> genomes are well characterized as cog teams among more than  <dig> genomes available at genbank. this requires putative family assignment of genes as well as gene patterns prediction.

unfortunately family assignment of genes is still an open research problem. thus this problem is more challenging than the family pattern mining problem, and this problem will be called the gene pattern mining problem. one of the most well accepted formulations of the gene pattern mining problem is to search for patterns with optimal scores. fish  <cit>  and dagchainer  <cit>  are two recent algorithms based on the optimization problem formulation. for example, fish finds all maximal k-clumps for a directed acyclic graph where vertices are genes. if two genes are within a neighborhood distance, then there is an edge between the corresponding vertices. since all gene matches are treated equally, the score of a clump is simply the number of points , thus this problem can be easily formulated as a recursive scoring function, which can be solved using a dynamic programming technique. these two methods are primarily developed for a pair of genomes. the major hurdle to extending them for predicting patterns in multiple genomes is the computational complexity; the time and space complexity of the dynamic programming technique grow rapidly in regard to the number of genomes.

the main problem this paper solves is efficiently discovering gene patterns in multiple genomes where gene family classification is incomplete. the proposed algorithm can quickly identify gene patterns using the interchangeable gene sets from a large number of genome sequences. these genes patterns can be used to predict the annotation  of unknown genes. to validate the algorithm, we proposed the ortholog prediction method based on the gene pattern mining algorithm. this ortholog prediction outperforms bbh in ortholog identification which shows the usefulness of the gene patterns discovered by our algorithm. our algorithm is necessary for two reasons: first, although there are methods to classify genes into families, there are plenty of cases where these gene classifications are incomplete, and discovering gene patterns in these cases remains an unsolved problem. our proposed algorithm addresses this gene pattern mining problem by using the interchangeable gene sets. on the other hand, there are well developed algorithms to identify gene patterns from pairs of genomes, while discovering gene patterns from multiple genomes is a highly complex problem. our paper proposes a pruning based algorithm to efficiently identify gene patterns in a large number of genome sequences, instead of using enumeration or a dynamic programming approach.

in this paper, we introduce a novel algorithm for mining gene patterns from genome sequences using interchangeable sets. we apply the proposed dispattern algorithm on a set of prokaryotes genomes to discover gene patterns. then we use these gene patterns to predict orthologous groups of certain genes.

methods
in this section, we present the definition of gene patterns and the algorithm to efficiently discover frequent gene patterns from genomes using interchangeable sets. the main difference between the gene pattern mining problem and the family pattern mining problem  <cit>  is that the annotation of the entire set of genes is known in the family pattern problem while the annotation of some  genes is unknown in the gene pattern mining problem. the family pattern mining problem can be considered as a special case of the gene mining problem. a genome can be represented g = {, ,..., }, where gi are genes at the genome, and si and ei are the starting position and ending position of gi. two genes are considered interchangeable if they have the potential to exhibit same biological functions. there are several ways to determine whether two genes have the potential to exhibit same biological functions. one is to use known biological knowledge. if they belong to the same orthologous family , then they have the same biological function. in the case that this type of annotation information is unavailable, sequence comparison can be used for this purpose. if the pairwise sequence similarity of two genes is above a certain threshold, these two genes are considered as interchangeable. a more relaxed requirement may be applied for assessing whether two genes are interchangeable. for example, the triangle merge in  <cit>  can be used for this purpose. if genes g <dig>  g <dig> and g <dig> from three genomes are interchangeable, then they form a triangle. if genes g <dig>  g <dig> and g <dig> form an other such triangle , then these two triangles can be merged. so genes g <dig>  g <dig>  g <dig> and g <dig> will be put into the same interchangeable gene sets.

under this relaxation, triangle merges will be conducted until no triangle can be merged. the interchangeable gene sets are therefore maximal. this relaxation could give better flexibility for computing the interchangeable gene sets. on the other hand, one gene can be in several interchangeable gene sets, which enables the proposed algorithm to handle multi-domain genes. the formal definition of interchangeable gene sets and gene patterns is as follows:

definition  <dig> an interchangeable gene set, or interchangeable set for short, is a non-empty set of interchangeable genes.

definition  <dig> a gene pattern is a set of interchangeable gene sets and in the format gc = , where f <dig>  f <dig> ...,fm are interchangeable gene sets. the length of a gene pattern is the number of interchangeable sets in the gene pattern. an unordered gene set  is called an unordered instance of gc if gj ∈ fj for every j . a permutation on an unordered instance of gc is called an ordered instance of the gene patterns gc.

for instance, a gene pattern gc =  has two unordered instances  and . moreover, both  and  are ordered instances of gc.

definition  <dig> a genome sequence gc = {, ,...,} supports a gene pattern gc =  if and only if the reexist integers j <dig>  j <dig> ...,jm, such that

• a subsequence of g, gsub = , is an order edinstance of gc.

• for every ji , sj1+1−eji≤tgap, where tgap is a pre-defined value called the gap threshold.

we call a gene pattern a frequent gene pattern if at least tsup genomes in a genome set support this pattern. tsup is called the support threshold.

that is to say, if in a genome there exist m positions, where m is the length of a gene pattern, the genes at these positions in the sequence form an ordered instance of the gene pattern; and if in this genome the distance between any two consecutive genes of these m genes is no larger than the gap threshold tgap, then this genome is said to support the gene pattern.

example: gc =  is a gene pattern, which contains three interchangeable sets: {g1}, {g <dig>  g3} and {g4}. let tgap be  <dig>  genome sequences {, , } and {, , } , , } does not support gc. if the support threshold tsup is set to  <dig>  and gc appears in  <dig> genomes, then gc is said to be a frequent gene pattern.

we invented a novel dispattern algorithm to discover frequent gene patterns from a set of genomes. the dispattern algorithm solves the following problem: given a set of genome sequences, the interchangeable gene sets, the gap threshold tgap, and the support threshold tsup, we want to find frequent gene patterns among these genome sequences.

in theory, any combination of interchangeable sets can be a candidate for frequent gene patterns. if we enumerate all candidate patterns by combining any interchangeable sets, a set enumeration lattice  <cit>  can be built. the top level nodes of the lattice are single interchangeable sets, and lower level nodes at the lattice are combinations of single interchangeable sets. we can then systematically search the entire set enumeration lattice for frequent gene patterns. when computing the support of a gene pattern, we compute the support of all ordered instances of gc. if the overall support is above the threshold, then gc is considered frequent.

however, in the set enumeration lattice, the number of candidates grows exponentially with the number of the interchangeable sets. thus, the exhaustive search of the set enumeration lattice is not efficient or even not possible when the number of interchangeable sets is large. therefore, a more efficient algorithm needs to be devised to solve the problem. in our proposed dispattern algorithm, possible candidates for gene patterns are identified in two scans of the genome sequences, then are pruned by a reachability property. the dispattern algorithm works as follows: first we record the information of the sequences in a data structure called reachable cases. originally interchangeable sets in every reachable case could be a candidate for a frequent gene pattern, thus the number of candidate patterns is very large. armed with the reachability property, we can first identify some pairs of interchangeable sets that can not be in a frequent gene pattern, then use these pairs to prune the set of reachable cases. after pruning the reachable cases, more pairs of interchangeable sets that cannot coexist in the same frequent gene pattern can be identified. this two-way pruning process is conducted iteratively. finally the remaining reachable cases are verified to produce all frequent gene patterns.

the flowchart of the dispattern algorithm is given in figure  <dig>  three main phases of the dispattern algorithm are explained in the remainder of this section.

initial scanning
in the first phase of our algorithm, two scans of genome sequences are conducted. with the first scan, the frequency of every interchangeable set in all genomes is collected. if a gene belongs to multiple interchangeable sets, its occurrence counts for all of its interchangeable sets. infrequent interchangeable sets, which can not participate in a frequent gene pattern, can be pruned after the first scan.

next we define the terms of "reachable" and "reachable case" based on the given gap threshold tgap.

definition  <dig> in a genome sequence g = {, ,..., }, genes gi and gj  are said to be reachable, if one of the following two cases happens:

• sj - ei ≤ tgap, which means the gap between gi and gj is no larger than tgap. we say gi and gj are directly reachable.

• there exist integers m <dig>  m <dig> ...mm  such that sm1−ei≤tgap,sj−emp≤tgapand for every mq, smq+1−emq≤tgap. genes gm <dig> gm <dig> ..gmpare called the intermediate set of gi and gj. we also say gi and gj are reachable through gm <dig> gm <dig> ..gmp.

two interchangeable sets f <dig> and f <dig> are said to be reachable in a sequence if there exist g <dig>  g <dig> , and g <dig>  g <dig> are reachable in this sequence.

a reachable case is therefore a case in which two interchangeable sets are reachable either directly or through some interchangeable sets in certain genome. the second scan of the genome sequences records all reachable cases in all genomes. these reachable cases are candidate gene patterns, which will be pruned in a later stage. note that the initial scanning transforms an original gene sequence into a sequence of interchangeable sets. some interchangeable sets may not be correct in terms of gene functions. incorrect interchangeable sets are most likely pruned at the next stage  since a gene pattern requires that multiple interchangeable sets appear in a set of genomes. the correctness of the final gene patterns prediction is empirically shown in the experimental section.

pruning reachable cases
at this phase, we prune the set of reachable cases. first we give the definition of "instance sequence", then we present a reachability property using the definitions of "reachable" and "instance sequence".

definition  <dig> if a sequence supports a frequent gene pattern, we call this sequence an instance sequence of the gene pattern.

in an instance sequence of a gene pattern, any two interchangeable sets of the pattern will be reachable either directly or through the interchangeable sets of this frequent gene pattern.

a reachability property for frequent gene patterns can be identified as follows:

property  <dig> any pair of interchangeable sets from a frequent gene pattern, say gc, have to be reachable in at least tsup number of sequences. additionally, in every instance sequence of gc, any pair of interchangeable sets from gc are reachable using only other interchangeable sets from gc as the intermediate set.

proof  <dig> the proof comes directly from the definitions of reachable and gene patterns. assume two interchangeable sets fi and fj are in a frequent gene pattern, say gc. according to the definition of frequent gene patterns, gc occurs in at least tsup sequences. a gene pattern's occurrence in a sequence implies that in this sequence, fi, and fj are reachable either directly or through some interchangeable sets from gc. therefore, in these tsup sequences, fi, and fj are reachable through interchangeable sets in gc only.

armed with the reachability property, we can prune the set of candidate patterns as follows. first, if we can identify pairs of interchangeable sets that are reachable in less than tsup sequences using any interchangeable set as intermediate sets, then these pairs of interchangeable sets can not be in any frequent gene pattern. this pruning is based on the first portion of the reachability property. moreover, we can use these pruned pairs to further prune the remaining pairs of interchangeable sets. the following lemma is derived to support this pruning step.

lemma  <dig> if in one sequence, two interchangeable sets from a frequent gene pattern, e.g. gc, are only reachable through a certain interchangeable set which does not belong to gc, then this sequence cannot be an instance sequence of the gene pattern gc.

the above lemma, which is easy to derive from the reachability property, can be used to prune the number of instance sequences of a candidate pattern. the intuition behind this pruning is: in order to confirm two interchangeable sets f <dig>  f <dig> are in an frequent gene pattern gc, we need to identify at least tsup instance sequences of gc. if we know another interchangeable set f <dig> cannot be in a frequent gene pattern with f <dig>  and in some sequence f <dig> is only reachable to f <dig> through f <dig>  then this sequence cannot be an instance sequence of gc according to the above lemma.

after the above pruning, two interchangeable sets may become reachable in fewer sequences. this may help us to further identify pairs of interchangeable sets that cannot form a frequent gene pattern. after identifying these pairs, we conduct the pruning of the reachable cases again since more pairs are known to be unable to form a frequent gene pattern. this two-way pruning is iteratively conducted until no interchangeable set pairs can be pruned or no reachable cases can be pruned, as illustrated in the flowchart of the algorithm .

final verification
in the last verification step, for each remaining reachable case, we sort the labels of interchangeable sets by their lexical order. by sorting interchangeable set labels, we can transform different permutations of a gene pattern into a unique representation. for example, the reachable case that interchangeable set f <dig> is reachable to f <dig> through f <dig> and the case that f <dig> is reachable to f <dig> through f <dig> are both transformed to the same list f1f2f <dig>  now we count the number of sequences that each list occurs in by traversing all reachable cases. if a list of interchangeable sets occurs in tsup sequences, then these interchangeable sets form a frequent gene pattern.

RESULTS
in this section, we present the experimental results of our proposed gene pattern mining model. compared with previous gene cluster discovery methods, e.g.,  <cit> , the gene pattern model proposed in this paper can handle the genes without annotation. in  <cit> , it is required that the annotation of every gene is known and each gene belongs to one family. however, in the problem context studied in this paper, the annotations of some genes are not available. thus, our gene pattern model can be used to  predict the annotation of a gene and  find gene clusters with non-annotated genes. in this section, we will analyze the effectiveness of the gene pattern model and methods with respect to these two goals.

gene patterns from four new genomes
we also performed other experiments using four genomes, azotobacter vinelandii, bdellovibrio bacteriovorus, myxococcus xanthus, and rhodospirillum centenum. these four genomes are good for testing our algorithm since they belong to proteobacteria and they are not well characterized, that is, family information is not available. one genome, rhodospirillum centenum, is a new genome that has not been published but obtained from our collaboration at indiana university. since cog assignments are not available for these four new genomes, we used best hits and triangle merging method to construct the interchangeable gene sets in this case. as shown at the website  <cit> , our algorithm successfully predicted many biologically meaningful gene patterns according to the current annotations of the genomes. predicted gene patterns can be used either to confirm functions of genes that were predicted by similarity match or to predict de novo functions, especially for genes with annotation of hypothetical or unknown functions. for example, one gene pattern covers three cell division proteins ftsz, ftsa and ftsq among three genomes. another gene pattern contains electron transfer flavoprotein subunits which appear in bdellovibrio bacteriovorus,myxococcus xanthus, and rhodospirillum centenum. clustering non-annotated genes can only be done in the gene patterns proposed in this paper, but not by the family pattern methods proposed in  <cit> .

application of gene patterns to ortholog prediction
to further show the effectiveness of our gene pattern model, we used the discovered gene patterns to predict orthologous groups of genes.

ortholog detection is critically important for accurate functional annotation, and has been widely used to facilitate studies on comparative and evolutionary genomics. in  <cit> , the authors proposed an approach for identifying orthologous gene pairs between mouse and human genomes. the approach combines the mutual selection of the best blast hits between human and mouse transcripts, and inferring gene orthologous relationships based on sharing synthetic anchors, collocating in the same synthetic blocks and sharing the same annotated protein function. however, their approach can only find pairs of orthologs, not groups of orthologs. also, their method is restricted to a the comparison between mouse and human genomes, which may not be widely applicable to other species.

our method of ortholog discovery consists of three steps. first, pair-wise protein sequence comparisons are conducted to assign corresponding genes whose family information are unknown to some candidate orthologous groups. then using these candidate orthologous groups as interchangeable sets, we discover gene patterns from genome sequences by the dispattern algorithm. finally the discovered patterns are used to predict the orthologous groups of genes. these three phases are explained in details as follows: in the first step, the blast program  <cit>  is used to perform pair-wise protein sequence comparison. the unassigned genes, whose gene family information is unknown, are classified into some candidate orthologous groups according to the protein sequence similarity. two types of orthologous groups are used as candidate groups for an unassigned gene. first, the orthologous groups of the unassigned gene's best hit on any genome sequence will be used. second, if the unassigned gene is the best hit of a gene of another genome, that gene's orthologous groups will also be used. in this way, an unassigned gene is classified to multiple existing orthologous groups. we choose the top-k most common groups as the candidate groups of this gene, where k is usually set to a small number . if k is set to  <dig>  then each gene will be assigned to the annotation to which the gene is most similar. however, in many cases, the gene should not be assigned to the most similar annotation. these candidate orthologous groups will be further pruned by the gene patterns discovered in the next step.

after assigning each gene into its candidate orthologous groups, we use these candidate orthologous groups as interchangeable sets in the dispattern algorithm. we run dispattern to discover frequent gene patterns from these genomes. for each interchangeable set in the discovered gene patterns, we also record which gene appears in each genome for the interchangeable set.

once the gene patterns are discovered from genome sequences, we analyze these gene patterns to assign genes to their orthologous groups. if a gene appears in a gene pattern as a member of an orthologous group, then this gene is assigned to this orthologous group. other candidate orthologous groups assigned to this gene previously will be pruned. if one gene appears in multiple gene patterns as different orthologous groups, we use the following rules to solve conflicts:

• if multiple patterns cover the same gene, the longest pattern will be used for prediction

• if all patterns are of the same size, the pattern with the highest support will be used for prediction

we discovered that in many cases, the gene will be assigned to the annotation to which it is not most similar. if a gene never participates in any gene patterns , then we use bi-directional best hits to assign this gene to an orthologous group. in bbh, to predict the orthologous group of a gene, we count the cog assignments of this gene's bi-directional best hits  in other genomes. the most common cog assignment of its bbhs is considered as the predicted orthologous group.

as bbh only uses the best bi-directional hits as the ortholog predictions, it misses a significant number of orthologs. by introducing the gene patterns, we allow more ortholog candidates at the first stage for each gene to be predicted. the gene patterns help to decide which ortholog candidate is more likely to be the correct prediction. the role of gene patterns is important since it filters out incorrect predictions using the intrinsic biological meaning of these patterns. as the experimental results show, the gene patterns will correct a large portion of mistakes made by bbh method.

in this section, we present the experimental results of our proposed computational ortholog discovery approach based on gene patterns. to validate the effectiveness of this approach, the cluster of orthologous groups  were used as the benchmark. cog  <cit>  uses single-direction best hits and triangle merging to construct orthologous groups. we compared our results against those of bi-directional best hits , which is another computational method for ortholog prediction and it is used at the first stage of cog. in the experiments, we removed the cog information of certain genes, then used our method and bbh to predict these genes into orthologous groups. we evaluated the results using the original cog assignments in terms of recall and precision. the recall is defined as ccorrect/cremoved, where ccorrect is the number of genes correctly assigned by our method, and cremoved is the total number of genes whose cog information is removed. the precision is defined as ccorrect/cassigned, where cassigned is the total number of ortholog assignment our method predicts. in essence, the recall measures how likely that a gene can be correctly annotated while the precision measures how likely an assignment is correctly. in our method, since we use the above rules to solve conflicts, one gene is predicted to exactly one orthologous group, therefore the recall of our method is the same as the precision.

two types of experiments were conducted to evaluate our proposed method. the first scenario was to remove the cog information of randomly chosen genes from multiple genomes, then try to recover their orthologous groups. the second scenario was to remove the cog assignments of all genes in a single genome, then try to predict the orthologous groups of every gene.

in both scenarios, we downloaded ten genomes from national center for biotechnology information  web site. each genome contains thousands of genes along with their positions at the genome. these genes are pair-wise compared by the blast program. the full list of these  <dig> sequences is available at our website. for the dispattern algorithm of gene pattern discovery, the distance threshold was set to  <dig> base pairs and the support threshold was set to  <dig>  the execution time of gene pattern generation from the  <dig> genomes  is around  <dig> seconds. we also experimented with the gene pattern mining method on a much large data set. for example, the execution time for discovering gene patterns from  <dig> genomes from the ncbi website is between  <dig> to  <dig> seconds depending on the support thresholds.

next we will present the experimental results in both scenarios.

predicting genes on multiple genomes
in this setting, we randomly removed the cogs of  <dig> genes from any genome. bbh resulted in an average recall of 87%, while our model achieved a recall of  <dig> %. as stated above, our approach also had a precision of  <dig> %, while bbh's precision was 87%.

predicting genes on single genome
in this setting, we removed the cogs of all genes on one genome , then kept the cog information of other genomes as reference genomes. the approach proposed above was then used to predict the orthologous groups of genes on the target genomes. we conducted the experiments on different target genomes and computed the average recall and precision of both bbh and our method. on average our method achieved a recall/precision of  <dig> % while bbh had a recall and precision of  <dig> %. the average improvement on recall and precision of our method was thus 3%.

parameters
in this subsection, we examine how the parameter settings affect the results of ortholog prediction. two parameters can be varied in the ortholog discovery approach proposed above: the support threshold for frequent gene patterns tsup, and the top-k value when choosing the candidate orthologous groups for a gene.

in the gene pattern mining algorithm, tsup is the support threshold which defines frequent patterns. varying the support threshold will vary the number of patterns discovered. the lower the tsup value is, the more patterns will be discovered. the recall and precision of our proposed ortholog discovery approach change with different support thresholds tsup, which is plotted in figure  <dig>  in this test, a gene is mapped to one ortholog group, thus the recall is equal to the precision.

to assign a gene to its candidate orthologous groups, we choose the top-k most common orthologous groups of this gene's hits on other genomes. when k is set to  <dig>  it is essentially the same as bbh. when k is larger, more candidate groups will be assigned to each gene. the effect of the k value on the precision and recall of the ortholog discovery method is shown in figure  <dig>  the recall/precision increases when k changes from  <dig> to  <dig>  however, the recall and precision will decrease slightly when k becomes larger than  <dig>  the reason for this is that assigning each gene to too many candidate orthologous groups introduces too much noise. even when the pruning step is conducted later by applying the discovered patterns, the errors introduced by the noise will not be fully removed. in this experiment, the bhh is used as the baseline model. since the bhh always assigns a gene to the cog group with best hits, the recall of bhh stays constant.  the benefit of our method comes from the fact that the gene pattern can be used as a tool in finding the correct orthologous group if a gene can be grouped into multiple groups, i.e., the gene has high similar with genes in multiple groups. when k =  <dig>  each gene is assigned to one orthologous group. thus, there is no benefit of our method. however, with a larger k, i.e., a gene may be associated with multiple groups, our method can prune out the incorrect group assignment. for instance, if gene g has higher similarity with genes in group a than genes in group b, the bbh will assign a to g. however, g's true annotation may be b. in this case, the gene pattern may be able to correctly assign g to b based on the location of gene g.

comparison on example genomes
here we present the detailed comparison of our method and bbh on a few example target genomes. the first genome to test is the complete genome of mycobacterium tuberculosis h37rv . the second genome is bordetella pertussis tohama i . the summary of the results is presented in table  <dig>  in the complete genome of mycobacterium tuberculosis h37rv there are  <dig> genes in total, in which  <dig> genes have cog assignments. bbh correctly predicted  <dig> genes out of  <dig>  which resulted in a recall of  <dig> %. our approach outperformed bbh by successfully predicting  <dig> genes which leads to a recall of  <dig> %.  <dig> genes were correctly predicted by our method but not by bbh. table  <dig> are some example genes correctly predicted by our method but not predicted by bbh.

nc_002945
nc_ <dig> nc_002755
nc_002945
nc_002945
nc_002945
in the complete genome of bordetella pertussis tohama i, there are  <dig> genes in total, in which  <dig> genes have cog assignments. bbh had a recall of  <dig> % , while our approach predicted  <dig> correctly out of  <dig> genes, which has a recall of  <dig> %.

nc_ <dig> nc_002929
nc_ <dig> nc_003902
nc_002928
nc_002928
CONCLUSIONS
in this paper, we proposed a novel algorithm for mining gene patterns in multiple prokaryote genomes using interchangeable sets for the cases where family classification information is not available. unlike the existing algorithms that predict gene patterns in a pair of genomes using the dynamic programming technique, our algorithm is highly scalable as shown in the experiments with genomes of  <dig> species. the scalability of our algorithm is achieved by extending the pattern mining technique from the data mining community. we also showed that our pattern mining algorithm can be used for detecting orthology correctly as gene patterns can be used as context of gene matching. in an experiment detecting orthologies in  <dig> genomes, our algorithm achieved an average of  <dig> % increase in recall compared to bbh without sacrificing the precision of ortholog detection.

authors' contributions
mh did the implementation and experiment of gene pattern algorithm. kc and sk helped prepare the biological data and analyze the biological meaning of the discovered patterns. ws finalized the paper. jy supervised the entire project. all authors have read and approved the final version of the manuscript.

