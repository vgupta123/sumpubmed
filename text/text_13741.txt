BACKGROUND
in the post-genome era, genome-scale stoichiometric models have gained popularity, as the absence of the need to experimentally determine model parameters one enzyme at a time made it possible to build bigger metabolic models than ever before  <cit> . however, genome-scale stoichiometric models quickly get so large that efficiently editing them requires advanced tools. it is not even a trivial matter to run a model and visualize the results, as this requires at least a linear solver and some program to interpret the solver's output.

although tools that facilitate common tasks are available , and some cater to more than one need , none have proven to be the panacea that bridges these gaps. broad adoption of tools is often impeded by complicated installation procedures, required proprietary software , not scaling up to genome-scale proportions, or results visualization that requires extensive user input in order to produce intelligible results.

we identified and experienced the need for an open-source, user-friendly and portable  software environment for most routine questions a  biologist would want to ask a genome-scale metabolic model. based on our own extensive experience in developing and using such models, we have developed fame: the flux analysis and modeling environment, a "one stop shop" that addresses these issues.

comparison with existing tools
in an analysis of available applications, the programs that approach fame's functionality the closest are the aforementioned cobra toolbox, optflux, and cellnetanalyzer. we will discuss these tools here, but also refer to table  <dig>  where we have summarized a more complete assessment of the alternatives.

notes:

 <dig>  gene/reaction associations are used to build models, but no analyses are performed on them.

 <dig>  model seed has only limited editing capabilities once a model has been produced.

 <dig>  the cobra toolbox uses an sbml dialect specific to this tool.

 <dig>  certain dependencies must be installed first.

a comparison of the features offered in fame and existing alternatives. a ‚óè indicates a feature that is present; an open circle  denotes a partial implementation of the feature in question. under visualization, "supervised" means the application uses predefined network topologies, "unsupervised" means networks are drawn on the fly, as graphs, and "user-supplied" means that visualization is performed on user-supplied network topology maps.

under "run", moma represents minimization of metabolic adjustments, which is described in  <cit> . most packages feature additional analyses besides the ones listed in this table. as many of these tools are custom-built for these analyses, or vice versa, we do not list those analysis options in this table. the tools whose functionalities most resemble fame's have no web interface or have inferior visualization capabilities. on the other hand, tools featuring  superior visualization lack the powerful analysis features unlocked by pysces-cbm.

the cobra toolbox  <cit>  is one of the most widely used toolkits for  systems biology modeling. it has a very complete editing and analysis feature set, and features results visualization on user-supplied network maps. although the toolbox itself is open-source, it is dependent on matlab, which may deter impecunious users. moreover, to perform any routine tasks or data analysis, users must first learn to use matlab.

optflux  <cit>  and cellnetanalyzer  <cit>  are tools that integrate some or all of fame's key functionalities, particularly model editing and visualization. however, neither tool has a web interface, and cellnetanalyzer is based on matlab, which makes it suffer from similar limitations as the cobra toolbox. in both tools, as well as in the cobra toolbox, visualization is dependent on user input of the network topology in a tool-specific format, such as a celldesigner  <cit>  map or cobra toolbox-specific "map file". fame offers supervised visualization in a web interface, and this can be considered an enhancement of existing functionality in three ways: first, users need not supply a custom-made map file to visualize results; second, fame scours models for meta-information that might aid in the visualization of run results ; and third, fame uses this information to generate maps that are interactive, with elements that can be clicked to access additional information. it is the first application to open up this feature set in an installation-free manner, and to harness the functionality of the web for this kind of analysis.

implementation
besides the externally visible html and css that convey its markup, the parts of the fame web application that do the work are implemented in php <dig> and javascript. php was chosen because it is a fast, browser independent language that integrates well with other programs. fame uses the python-based pysces-cbm   <cit>  as an interface to a linear solver. model information, which is encoded in xml, is communicated to pysces using soap, the simple object access protocol. run results are retrieved over the same protocol, and this setup of fame as a soap client opens the door for it to gather data from a variety of resources in future releases ). moreover, as both fame and pysces have a modular architecture, future expansions of the analysis capabilities of pysces-cbm will conveniently translate to cognate expansions of fame's functionality. when visualizing, fame generates pathway maps as svg images , using an algorithm designed specifically for fame. the svg format was selected because of its open nature , cross-platform compatibility and scalability. in addition, svg images natively support the inclusion of hyperlinks, which adds a layer of interactivity to run results. fame, pysces, and mariner, the soap interface to pysces, are all open source.

RESULTS
a web-based application, fame aims to address the needs of modelers on three key points of focus: model creation, result generation, and interpretation  . traditionally, transitions between these tasks often impeded work flow and could themselves become a source of errors. for example, running a model after editing it, or visualizing the results after running it, would require the user to save a file, launch another program, and then load the file into the new program. in fame, these labor-intensive transitions are eliminated by teaming up with mariner, a soap interface of pysces-cbm  <cit> . throughout this section, we will illustrate fame's functionality based on an example use case .

creating and editing models
fame allows users to either upload their own preexisting model , or to build a new model based on the information in kegg. when building from scratch, it is possible to select a subset of pathways from kegg, foregoing the inclusion of unnecessary reactions that may be present in existing genome-scale reconstructions. to allow for fast model construction, fame uses a cached copy of the required information from kegg for the assembly of new models. in addition, the kegg ids in such models can be used to find more information from kegg if the need should arise. fame's visualization module makes use of these ids when mapping run results onto kegg maps. importing non-kegg, non-fame models may inactivate some of these capabilities, although measures have been taken to use metadata that is available in imported models, for example the models from the bigg database  <cit> . as an alternative to building from scratch, any stoichiometric model can be loaded into fame, provided it is encoded in the systems biology mark-up language , the de facto standard for representing such models. a proposed sbml level  <dig> package "flux balance constraints" allows the definition of constraint based models  <cit> . models that lack information about constraints, however, will also load in fame, and will be automatically converted to constraint based models as necessary. fame is intentionally very flexible with respect to the integrity of the input sbml, accepting even a bare minimum of information about a model's stoichiometry.

once a model is loaded, fame offers all tools a seasoned constraint-based modeler would need to study physiology. this includes easy editing of the flux bounds on all internal and exchange reactions, editing existing reactions, adding/deleting objectives, recognizing dead-end metabolites , recognizing synonymous reactions, and assigning reactions to different or new compartments . adding exchange reactions is supported, as are performing operations in batch and setting constraints on a per-reaction basis. the current version of a model can be exported as sbml at any time.

result generation
analysis commands are forwarded to pysces-cbm, which handles the mathematical operations and returns the results to fame. operations supported by pysces include flux balance analysis  and flux variability analysis . given the more compute-intensive nature of the latter, if a subset of pathways is selected, only reactions in those pathways will be included in the variability analysis. for instance, whereas an fba of the s. cerevisiae model  <cit>  from bigg  takes under ten seconds , the equivalent fva takes roughly ten times as long. in addition, fame can minimize the sum of absolute fluxes of an fba solution, which leads to results that are more biologically relevant, as it can reduce complex loops in fba solutions to their underlying net fluxes. fame can also perform analyses on metabolites, rather than reactions or fluxes: per metabolite, it can list right hand side sensitivities, shadow prices, and it also features the option of checking whether a specific metabolite can be produced by the model. the latter can also be performed for all metabolites in the model at once. once generated, results can be visualized, but they are also always presented as a human-readable table  and as a machine-readable, tab-separated format file that can be imported in e.g. excel .

the included gene association workbench allows users to intuitively take advantage of gene association information present in the model metadata, e.g. by simulating  knockout mutants. results are presented in the same interactive manner as the other analyses. if on any occasion the model system is over-determined, fame will relay the solver's message that the solution status is 'infeasible' and additionally issues a warning to the user. under-determined systems will run and produce a result; upon interpreting run results, users may run further analyses such as fva to assess the properties of the solution space.

visualization
the visualization module generates images in svg format, based on the analysis results returned by pysces. the advantages of using svg are manifold, some of the more notable being image scalability and ease of editing using third party software. depending on the web browser used, users may need to download a  plug-in to view the images.

for each selected pathway an interactive kegg-like image is drawn , on which the run results are superimposed. to the biologist, this readily recognizable representation is an improvement over unsupervised visualization algorithms , and while this approach to data visualization was already applied some years ago  <cit> , to our knowledge, fame is the first web-based application that both generates data and automatically visualizes results.

many elements in the results images are clickable , to make more information available more conveniently. for instance, clicking a metabolite will display an overview of reactions producing or consuming it, along with the kegg information page for the metabolite, while clicking a reaction will display that reaction's kegg information page.

CONCLUSIONS
with fame, we present the community with an easy to use web-based "one stop shop" for the manipulation and execution of stoichiometric models. it enables biologists to create or import models, edit them, run them at the click of a button, and visualize the results from the browser window. we expect that its install-free integration of execution and visualization will appeal to investigators and educators alike. future releases of fame will feature integration with web-based annotation services and further analysis options. finally, the novel soap interface to pysces-cbm will facilitate the creation of user-friendly interfaces based on pysces that will uncover powerful modeling functions that may otherwise remain hidden behind the ever-enigmatic command line cursor.

availability and requirements
fame is intended and offered as a web service, but can also be installed locally, as source code will be made available upon request. fame can be accessed online at http://f-a-m-e.org/, where a full user manual and guided tutorial are available. pysces-cbm and mariner are also open source, and can be downloaded from http://pysces.sourceforge.net/cbm. fame and pysces/mariner are covered by their own respective bsd-style licenses, which can be found on the respective web pages and, in short, entail that they are open-source and free to use for both academic and non-academic users.

authors' contributions
jb created fame. bgo created mariner and pysces. jb, bgo and bt wrote the paper. all authors read and approved the final manuscript.

