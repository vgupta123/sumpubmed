BACKGROUND
the past two decades have seen an explosive growth of biodiversity databases, providing access to millions of species observations. the more prominent large databases include compilations of museum records and observations , fossil datasets , ecological inventories , trait measurements , molecular sequences  and phylogenies . collectively, these databases encompass hundreds of thousands of species  <cit> . this vast and growing information resource is being used to address fundamental questions in ecology, evolution and systematics  <cit>  and to explore patterns in the distribution of organismal form, function and diversity at previously impossible temporal and spatial scales  <cit> . researchers are only beginning to explore the potential applications of these global biodiversity data sources for agriculture  <cit> , plant products research  <cit>  and conservation biology  <cit> . integration of such large, disparate, and heterogeneous datasets has involved overcoming numerous challenges of data exchange, interoperability, and scaling  <cit> . despite considerable progress  <cit> , however, one critical challenge remains largely unsolved: the correction and standardization of taxonomic names in scientific data and literature.

incorrect, ambiguous or synonymous taxon names present a fundamental problem for the study of comparative biology and biodiversity  <cit> . ecological studies that encompass large numbers of species, conservation decisions based on data from many sources, and phylogenetic analyses linking sequence data to phenotypic traits all require accurate matching of species identities among datasets. if uncorrected, lack of standardization of species names can result in mismatched observations and inflated measures of species richness, leading to erroneous scientific conclusions, faulty conservation policy, and an inability to make reliable predictions across space and time  <cit> . although progress has been made toward developing an authoritative global taxonomy , the growing availability of digitized sources of names , identifiers  and taxonomic opinion , has yet to provide a solution to the rapid accumulation of erroneous names in the scientific literature and data repositories.

recent applications for the automated recognition of taxon names  <cit>  have accelerated the digitization of biodiversity literature  <cit> . unfortunately, the inability of these applications to recognize and correct ambiguous or erroneous scientific names means they fall short of meeting the needs of researchers. combining large datasets from different sources requires careful standardization of hundreds or thousands of taxon names—a task that must be performed manually or with ad hoc scripting, resulting in duplication of effort and propagation of error. in short, the lack of automated tools and standardized workflows for correcting taxonomic names is a major impediment to conducting synthetic science with heterogeneous sources of biodiversity data  <cit> .

how widespread is taxonomic error? a recent study of new world plant distributions and species richness  <cit>  illustrates the severity of the problem. compilation of  <dig>  geo-referenced plant observations from  <dig> digitized sources of herbarium specimens and forest inventories resulted in  <dig>  unique species names; after correcting misspellings and updating synonymous names, that total was reduced to  <dig>  accepted species. thus, over 42% of the names in the original data were erroneous, obsolete, or otherwise inconsistent with currently accepted names. uncritical use of the original, uncorrected taxon names would have grossly inflated species richness and led to distorted, possibly biased distributional patterns due to spurious species with artificially small ranges. at best, erroneous taxon names limit the usefulness of the data they mislabel by preventing linkages among observations of the same organism; at worst, they represent an insidious source of error.

misspelled names are just one component of the larger problem of taxonomic semantic heterogeneity  <cit> . such ambiguity can arise for a number of reasons:  misspellings, vernacular variants, and lexical variants ;  homotypic synonyms ;  heterotypic synonyms ;  homonyms ; and  differing taxonomic concepts . while automated and semi-automated applications can frequently address the first and second sources of error, the third, fourth and fifth present significantly more difficult challenges. for example, resolution of complex, or pro parte, synonyms  requires additional information such as when and where the name was used. disambiguating homonyms requires information on higher taxa such as family or kingdom . even if a name is correctly resolved to an accepted taxon, the exact circumscription of that taxon can vary from expert to expert; such taxon concepts are not easily or precisely communicated by names alone  <cit> . while no automated system can perfectly resolve all the kinds of taxonomic problems listed, a service that corrects variant and erroneous spellings, disambiguates homonyms by means of higher taxonomic filtering, and updates simple synonyms with reference to authoritative taxonomic sources would go a long way toward solving the "names problem". here we present such a solution, the taxonomic name resolution service.

implementation
overview
the taxonomic name resolution service, or tnrs, is an application for automated and user-supervised correction and standardization of plant taxonomic names. developed by the iplant collaborative  <cit>  as a collaboration between the iplant tree of life project  <cit>  and the botanical information and ecology network  <cit> , the tnrs standardizes names according to one or more authoritative taxonomic sources. capable of processing thousands of names in a single operation, the tnrs detects likely misspelled taxon names, transforms names and authorities to a single canonical form, converts synonyms to accepted names, discriminates among many types of homonyms, and detects and flags ambiguous results. the tnrs also handles features peculiar to both ecological data  and phylogenetic data . the tnrs is accessible both as a web service and a user-friendly web interface.

four core principles guided the development of the tnrs. first, use existing sources of high-quality, digitized taxonomy that provide information on synonymy in addition to names. second, build on existing applications whenever possible. third, use open source tools and adhere to open source principles  <cit> , including public release of all source code. fourth, provide a generalizable solution extendable to other organisms and nomenclatural codes—not just plants.

taxonomic sources
the tnrs resolves names against a local cache of external taxonomic sources . currently, the default taxonomic sources used by the tnrs are the missouri botanical garden's tropicos database  <cit> , the global compositae checklist  <cit>  and usda plants  <cit>  ; users select one of these sources as a standard against which to standardize their names. combining sources is also possible; this should be done with caution due to different spelling conventions and potentially conflicting synonymies. a partial solution to such conflicts is to assign priority to each source, such that a second source is consulted for a particular name only if that name cannot be matched using the first source . ncbi taxonomy  <cit>   is also provided as an optional source for users wishing to match their names to taxa with molecular sequence data in genbank  <cit> . however, due to missing taxa, inconsistent taxonomy and the presence of numerous informal names or "dark taxa"  <cit> , users are cautioned against using ncbi for taxonomic standardization.

total names includes higher taxa and infraspecific taxa in addition to species. taxonomic scope refers to the subset of the database used for the tnrs . "embryophytes" are flowering plants, conifers, ferns, mosses, hornworts and liverworts.

taxonomic sources currently accessed by the tnrs provide nearly complete coverage of land plants  for the new world . with the exception of the flowering plant family asteraceae, coverage of old world plant names is less complete. a central goal of the tnrs is to enable users to resolve names of all organisms governed by the international code of nomenclature for algae, fungi and plants   <cit> , and we invite curators of high quality taxonomic databases to help fill gaps in our current taxonomic coverage by exposing their content via the iplant tnrs. the tnrs website provides information on how to become a data provider to the tnrs, including a description of a simple exchange schema which can be used to expose taxonomic content to automatic validation and ingest by the tnrs . alternatively, taxonomic data providers can deploy their own instance of the tnrs using source code available from the iplant opensource repository on github .

components
the tnrs consists of four main components:  the tnrs database, which contains names and synonymy from external taxonomic sources;  a name resolution engine consisting of a name parsing application and a fuzzy matching application;  a web services layer and application programming interface ; and  a web-based user interface.

the tnrs database
the tnrs database is a periodically refreshed local cache of external sources of taxonomy, and consists of two interrelated components:  a mysql core database containing the normalized and indexed names, synonymy and higher classifications, and  partially denormalized representations of the same taxonomic content, optimized for use by the fuzzy matching application. information stored in the core database includes names and authors, an indication of taxonomic rank, a pointer to the immediate parent within the taxonomic hierarchy, and assertions as to the validity of a name  accompanied by a pointer to the accepted name for synonymous names.

parent-child links and synonym-accepted name assertions are stored separately from the names themselves, thus allowing storage of multiple classifications and taxonomic opinions. retrieval of ancestor and descendent taxa to arbitrary depth is supported by secondary indexing according to a modified preorder tree traversal algorithm  <cit> . two sources  serve as alternative family classifications; genera, species and infraspecific taxa from all sources are joined to these families by genus.

taxonomic content is normalized to the source database by loading scripts written in php. the normalization process separates names from classifications and assertions of synonymy, joining new names to alternative family classifications and building foreign keys and indexes. the loading scripts also pre-load the fuzzy matching tables and perform critical validations such as checking for missing or conflicting parent-child links. taxonomic content can be exposed to the tnrs using an exchange schema based on simple darwin core  <cit> . for details of the "tnrs simple darwin core format" see http://tnrs.iplantcollaborative.org/sources.html#dwc.

name resolution engine
name resolution by the tnrs consists of four steps: pre-processing, name parsing, fuzzy matching and post-processing.

pre-processing
prior to submitting names to the parsing and fuzzy-matching applications, family names pre-pended to species names are removed by searching the initial string of the name for standard family endings  and checking against a list of conserved plant family names . indications of uncertain identification such as “cf.” and “aff.”  <cit>  are also removed. for names submitted as all capital letters, case is adjusted by capitalizing the first letter and setting all remaining letters to lower case. this last step is necessary as the name parser uses case to identify name components and cannot correctly parse all-caps names.

the final step in pre-processing is to match the remaining string directly against the core database. strings matching completely are given an overall match score of  <dig>   and removed from further processing. unmatched names are passed to the name parser . the results of parsing are matched a second time against the core database before passing the remaining unmatched names to the fuzzy matching application .

name parsing
separation and classification of name components is performed by the gna scientific name parser  <cit> , which is distributed as a ruby gem library, a command line utility and a server script. it is based on treetop gem which implements the parsing expression grammars algorithm  <cit> . the parser defines the components of a scientific name as a series of recursive regular expressions. it begins by using white spaces to separate the components of the scientific name and authorship, and then moves to identifying each components as a genus, specific epithet, infraspecific epithet, author, year, etc. the higher level definitions describe how simpler components combine together as a name or a conglomerate of names . at first the parser follows the rules of all nomenclatural codes inclusively; if something is allowed in the icbn , it is allowed by the parser. if the parser fails to atomize a name it moves into ‘relaxed’ mode, where common mistakes in writing names or authorship are taken into account. for example, relaxed mode allows diacritic characters not permitted by zoological or botanical codes, double parentheses surrounding author names, year without an author, square brackets and question marks around years , etc. relaxed mode does not perform fuzzy matching. if relaxed mode fails as well the parser uses ‘salvage’ mode, which tries to extract the canonical form of the name from the string, discarding anything to the right of it.` parsing is case sensitive, which means, for example, that the genus part of a binomial must be capitalized, and the species epithet must be in lower case to be recognized. scientific names that do not follow a rigid linear structure  hartman × dactylorhiza majalis  p.f. hunt & summerhayes ssp. praetermissa  d.m. moore & soó) are also supported as a result of a recursive nature of the algorithm.

in addition to separating the author from the taxon name, the parser detects and separates the genus from specific and infraspecific epithets, and extracts rank indicators such as “var.”, “ssp.”, “subsp.”, etc. for example, “bromus inermis var. confinis  stapf” is separated into genus "bromus", specific epithet "inermis", infraspecific rank indicator "var.", infraspecific epithet "confinis", basionym author "nees ex steud." and combining author "stapf". the results of parsing are also used to determine the overall taxonomic rank of the name submitted . this information is required for flagging partial matches and for constraining matches by higher taxonomy .

fuzzy matching
fuzzy matching is performed by a modified version of the php implementation  <cit>  of taxamatch  <cit> . the taxamatch algorithm speeds matching of taxonomic names by matching higher taxonomic name components first, then searching only for taxa within the best-matching higher taxon . matches to names minus the authority are determined using two separate tests: phonetic similarity and orthographic  similarity. a name passing either of these tests, or both, is considered a "match" .

phonetic similarity is assessed using a custom algorithm that substitutes specific characters or character pairs for others, thereby transforming each name to a simplified phonetic equivalent. although similar to approaches such as soundex  <cit>  and phonix  <cit> , the taxamatch algorithm also takes into account specific lexical conventions of scientific names and incorporates a degree of “stemming” of species epithets, in which a range of possible variant word endings are transformed to a single standardized form . the stemming  in taxamatch equates -a, -is -us, -ys, -es, -um, -as and -os when they occur at the end of a species epithet  by changing them all to -a. thus  the epithets “nitidus”, “nitidum”, “nitidus” and “nitida” will all be considered equivalent following this process. once transformed, names are compared using an exact match; this operation is very fast as reference names are transformed in advance during the loading of each taxonomic source to the tnrs database.

orthographic similarity for each name component  is calculated using a modified damerau-levenshtein distance  <cit>  with additional corrections for transposed syllables , hereafter referred to as edit distance . “classic” ed using levenshtein’s original algorithm  <cit>  is a measure of the minimum number of single-character deletions, insertions, or substitutions required to transform one string into a second string. thus, “faveolata” and “flaveolata” have an edit distance of  <dig> by that measure  as do “ficus” and “fucus” . the “damerau-levenshtein” version of the algorithm also allows single character transpositions  at a cost of ed  <dig> which under “classic” levenshtein would incur a cost of  <dig> , since transpositions are not recognised in the original case. the additional modification introduced for taxamatch, termed modified damerau-levenshtein distance or mdld, further permits multi-character transpositions , at a cost of the number of transposed characters only  rather than the more expensive cost  that would be incurred if each character were to be substituted individually, as in either of the preceding algorithms.

due to its variable spelling, abbreviation and format, similarity of the author is calculated using the more relaxed n-gram method  <cit> , which produces an author match score  ranging from 0- <dig>  this index is calculated as a blend of 2/ <dig> bigram and 1/ <dig> trigram similarity between the strings, for which known botanical author abbreviations are expanded according to a dictionary of stored abbreviations prior to the comparison. the abbreviations are chiefly a subset of the standard abbreviations found in brummitt & powell  <cit> , supplemented with additional abbreviated forms, including some for animal names, as compiled in one of the authors'  interim register of marine and nonmarine genera database  <cit> . the index is calculated twice, once using the original utf <dig> strings and a second time using plain ascii version, so as to reduce differences solely due to presence or absence of diacritical marks. the final author similarity score is the unweighted average of the two calculations. for example, consider the authority portions of the two species name strings “jovetia erecta guédès” vs. “jovetia erecta m.guedes”. treating the letters with diacritics  as different characters from their non-diacritic equivalents  would result in an undesirably low similarity  whereas treating both as identical to “e” results in arguably too high a similarity . therefore, in order to score these variants as similar but not identical, the average value of the two approaches is used . this example of multiple accented characters in a comparatively short word is somewhat unusual; in most cases the difference between the two approaches will be apparent but less extreme.

extensions to the original taxamatch code and schema were made to support matching of family names, trinomials  and quadrinomials . an overall match score based on both name and author similarity scores is calculated during the post-processing stage .

post-processing
after fuzzy matching is complete, the following "post-processing" steps are performed:  calculating and scaling the overall match score,  applying thresholds to select the candidate best matches,  ranking results to select the single best match, and  assigning warnings. after these steps are complete, the results are returned as json  to the web services layer.

match score calculation. after fuzzy matching is complete, the eds of each name component  are combined and transformed to an overall match score . the oms provides a more intuitive measure of the confidence that a submitted string matches a name, with  <dig> indicating no confidence in a match  and  <dig> indicating certainty that the returned name is the correct match for the submitted name. with the exception of names matching perfectly to the tnrs database—which are automatically assigned an oms of 1—calculation of the oms involves the following four steps.

first, each name component  is assigned a partial match score  based on the ed between it and the closest name in the tnrs database as follows:

  pms=1−2×ed/maxed 

where maxed, the maximum possible value of ed, is equal to the length of the longest of the two strings compared. pms thus ranges between - <dig> and  <dig>  where  <dig> is an exact match. a penalty of - <dig>  is applied if a rank indicator  is present in the submitted string but is not the correct one. for example, in the case of chondrophora nudata var. virgata, if the user submits chondrophora nudata fo. virgata, the infraspecific taxon will receive a score of  <dig> :  <dig> for the infraspecific epithet, minus  <dig>  for the incorrect infraspecific rank indicator .

the second and third steps involve calculation of the original and transformed scientific name match scores . snms is simply the sum of the pmss of all name components. snmstr is a non-linear transformation of snms, scaled to provide a more intuitive measure of the confidence that a submitted string matches a name. snmstr , which ranges from 0- <dig>  where  <dig> is a perfect match, is tolerant of variation in snms when the submitted name has a very good match or no match, but sensitive to small differences in the middle of the range of snms. this reflects the intuitive perception that it takes more evidence to change an opinion when one has very high confidence that it is correct than when one is uncertain. snmstr is an arctangent transformation of snms, normalized by the number of name components:

  snmstr=atans*snms/k^2*t+1/2*atans^2*t+1+ <dig>  

where k is the number of name components, s >  <dig> and t ≥  <dig> are two parameters that change the shape of the transformation, from a linear relationship , to different forms of logistic  and double-logistic functions . the parameter s >  <dig> can be used to control the steepness of the curve, whereas t >  <dig> controls the size of the center. the tnrs uses values of s =  <dig> and t =  <dig>  this configuration divides the curve in  <dig> regions:  <dig> regions of certainty at the two extremes, a central region of uncertainty and  <dig> regions of discrimination that fall in between . in the regions of certainty and in the central region, differences in snms produce only small changes in snmstr whereas in the regions of discrimination, small differences in snms are amplified by the transformation.

the fourth and final step in the calculation of oms takes into account the authority and unmatched name components, if any. a fixed penalty of  <dig>  is subtracted if any unmatched text was found that did not matched to a name, an author, or a standard annotation such as "cf.". if an author was submitted, the oms is calculated as a weighted average of the snmstr and the ams. the tnrs is implemented with  <dig>  and  <dig>  as the weights for the snmstr and ams, respectively. thus, for a name plus author,

  oms= <dig> *snmstr+ <dig> *ams−p 

where p is a penalty which equals  <dig>  if unmatched text was found, otherwise  <dig>  if no author was submitted,

  oms=snmstr−p 

this is the final oms that is presented to the user.

candidate match selection. to qualify as a candidate match, a name must pass the maximum ed test and also pass either the phonetic test or the match threshold test. the phonetic test is performed during fuzzy matching . the remaining two tests are performed during post processing, as described below.

to pass the maximum ed test, the following must be true: ed ≤  <dig> * . rank indicators of infraspecific taxon names  are not counted as name parts. thus, for a variety such as poa annua var. spuria, the number of name parts is three, and the maximum ed is  <dig>  for a species name, which consists of two parts, the maximum ed is  <dig> 

the match threshold test is based on the eds of each name component, weighted by the lengths of the strings compared. the following conditions must be satisfied for each name component:  and  or ), where msl is the minimum length of the two strings being compared and maxedr is the maximum edit distance ratio, a constant which takes on one of two values depending on the value of msl. for msl <  <dig>  maxedr=  <dig> ; for msl ≥  <dig>  maxedr=  <dig> . the values of maxedr were determined empirically by examining performance for samples of names. although in general maxedr=1/ <dig> provides intuitively "reasonable" matching of most names , it is increased for strings of five characters or less to compensate for a bias against matching short strings. for example, "marsilleya", which differs from its target genus "marsilea" by an ed of  <dig> , passes the match threshold test . "ulleya", which also differs from its target "ulea" by an ed of  <dig> , passes the match threshold test at the less stringent maxedr of  <dig>  , but would fail at maxedr= <dig> .

ranking and best match selection. once candidate matches have been determined by applying the phonetic, match threshold and maximum ed tests, multiple candidate matches to a single submitted name are ranked to select the best match. during name processing, the tnrs performs and stores two alternative sets of rankings, one unconstrained and the other constrained by higher taxonomy.

using the unconstrained algorithm, the tnrs ranks all candidate matches by descending snms, oms and taxonomic status. taxonomic status is ranked as follows: “accepted” > “synonym” > “no opinion” . the highest ranking candidate match is then presented to the user as the best match. if two or more candidate matches have identical values of snms, oms and taxonomic status, the name with the lowest alphabetical sort order is presented as the best match but flagged as “ambiguous match” .

the taxonomically-constrained rank calculation is similar to the unconstrained algorithm, except that the calculation is performed separately for each name component, starting with genus , then species, then infraspecific taxa, if any. the result of the taxonomically-constrained algorithm is that the best  match for a species name with a misspelled genus but perfectly spelled specific epithet will be the best-matching genus, whereas the best match using the unconstrained algorithm will be best-matching species. for example, the best overall match for fucus insipida is the species ficus insipida  in the moraceae , whereas the best genus match is fucus  in the fucaceae . under the default unconstrained ranking algorithm, ficus insipida will be displayed as the best match and flagged with the warning "better higher taxonomic match available". under the taxonomically-constrained ranking algorithm, fucus will be displayed as the best match and given two warnings: "partial match" and "better spelling match in different higher taxon" .

both sets of rankings are calculated and stored during name processing, and the user may switch between taxonomically-constrained or unconstrained matches after name processing is complete by checking or unchecking "constrain by higher taxonomy" under "best match settings" . in addition, a second user setting provides the option of constraining best matches by taxonomic source. this ranking is performed "on the fly" by checking "constrain by source" under "best match settings", and causes all candidate matches from the top-ranked source to rank above those of lower-ranked sources. thus, a candidate match with a low oms will appear as the best match even if candidate match with a higher oms is found for a lower-ranked taxonomic source. adjusting this setting only has an effect if > <dig> taxonomic source has been used. this setting is recommended if using multiple sources simultaneously, as it minimizes the effect of spelling and synonymy conflicts between sources.

warnings. the tnrs issues four types of warnings about names matched. "partial match" indicates that the name matched is of a higher taxonomic rank than the name submitted by the user. for example, if the user submitted a species name but the tnrs was able to match only the genus, the tnrs would return the genus along with the warning "partial match". "ambiguous match" indicates a “tie”, meaning that one or more other candidate matches have identical match scores and taxonomic status. two additional warnings indicate that the name submitted matches to taxa which are not closely related. "better spelling match in different higher taxon" indicates that another candidate match with a better overall match score is available in a different higher taxon. "better higher taxonomic match available" indicates that a another candidate match with a lower overall match score provides a better match to the higher taxon of the name submitted .

web services and application programming interface
the tnrs web-services layer acts as an asynchronous job execution and data management server. it controls traffic between the user interface and the tnrs name resolution. these services manage input and output files and schedule jobs submitted for parsing and fuzzy matching.

the tnrs web services can be accessed programmatically via a restful api, using a get call with two parameters: retrieve  and names . results are returned from the web service as json. details of the tnrs api are provided at http://tnrs.iplantcollaborative.org/about.html#api . as a demonstation of how to use the tnrs in third-party software, additional file  <dig> provides an example r script that calls the tnrs api in the context of adding taxon names to a phylogeny.

web interface
the tnrs web interface uses a rich internet application   <cit>  front end and is built using the google web toolkit for a high degree of user interactivity within a web browser. the interface is supported by a layer of web services that provide a bridge between the user interface  and the underlying algorithms that perform the matching .

the tnrs web interface allows the user to submit names in a text box or by uploading a file . names submitted via the file load utility may also be preceded by an integer id separated by a tab. including a numeric id provides an alternative way of joining results back to the original database.

name resolution results are displayed below the data entry panel . only the single best match is displayed by the web interface; however, users may view alternative matches by clicking on the “” hyperlink. additional hyperlinks allow the user to view matched names and accepted names in their original source databases. taxonomic status of each name is indicated as “accepted”, “synonym” or “no opinion” . for matched names that are not accepted according to the sources consulted a link to the accepted name is provided. results can be copied directly from the results display or downloaded as a comma-delimited text file.

user options. users can configure two types of options: name processing settings and best match settings. name processing settings must be adjusted prior to submitting names for processing, and are displayed to the right of the data entry panel . best match settings affect how the best match is selected by adjusting the algorithm used to rank multiple candidate matches . these settings are adjusted "on the fly" after names have be processed by the tnrs, and are displayed in a drop-down menu on the upper left of the results display . changes in best match settings are reflected immediately in the display and in the downloaded results file.

these user options must be set prior to submitting names for processing. best match settings  are adjusted after processing is complete.

RESULTS
performance evaluation
comparison with existing name resolution applications
although some the functionality of the tnrs can be found within existing name resolution applications, none combine all the capabilities of fuzzy matching, synonym correction, partial matching, return of alternative matches, and homonym resolution within both an api and user-friendly web interface . web services such as the tropicos web service  <cit>  and catalogue of life  <cit>  are capable of bulk resolution of plant names but do not use fuzzy matching to correct misspelled names or standardize variant spellings. the tropicos batch name matching utility  <cit>  performs exact matching but does not correct misspelled names. the taxamatch implementation used by the interim register of marine and nonmarine genera   <cit>  performs fuzzy matching but does not currently handle infraspecific taxa or perform batch correction of misspelled names. the grin taxonomic nomenclature checker   <cit> , an important early name resolution application, performs fuzzy matching based on levenshtein eds and is capable of bulk name resolution; however, resolution must be done in stages by first correcting genera, then resubmitting species. the grin-tnc does not provide confidence scores or alternative matches and is available only via a web user interface.

to our knowledge, plantminer  <cit>  and the global names resolver   <cit>  are the only applications in addition to the tnrs that combine batch resolution of plant scientific names, spelling correction via fuzzy matching, and access via both a user interface and web services. like the tnrs, both these applications convert synonyms to accepted names. like the tnrs  the gnresolver can provide alternative matches and also returns a score indicating overall level of confidence in the match. to compare the name matching abilities of plantminer and the gnresolver relative to the tnrs, we submitted to each application a list of  <dig> uncorrected plant names from a database of ecological inventories . the list contained a variety of errors such as misspelled taxon names, annotations, frame shifts, unconverted extended ascii codes, morphospecies, etc. for the tnrs, we used tropicos as the only taxonomic source; all other options were left at the default settings. as plantminer checks names against both the plant list and tropicos, we expected that all names resolved by the tnrs should also be discoverable by plantminer. tropicos taxonomy is not available for use by the gnresolver; instead, we selected the international plant names index   <cit>  as the taxonomic source due to the high overlap between the two databases  <cit> . we scored a name as successfully resolved if the application returned the expected name, as determined by inspection against the tropicos database. for the gnresolver, we excluded from error counts any names which failed to resolve because the intended name was not in ipni. due to different conventions for spelling and abbreviation of author names between the source databases, we did not require matching of authorities.

the tnrs processed the  <dig> names in  <dig> sec, or  <dig>  sec/name, successfully correcting  <dig> names. of the  <dig> failed matches,  <dig> were incomplete , one was a non-match, and two were incorrect matches . plantminer processed the names in  <dig> min  <dig> sec, or  <dig>  sec/name, successfully correcting  <dig> names. of the  <dig> failed matches,  <dig> were incomplete,  <dig> were non-matches, and  <dig> were incorrect matches. the gnresolver processed the names in  <dig> min  <dig> sec or  <dig>  sec/name successfully correcting  <dig> names. of the  <dig> failed matches,  <dig> were incomplete,  <dig> were non-matches, and  <dig> were incorrect matches.

most errors made by the tnrs  were incomplete matches due to badly-misspelled names outside the match threshold . the remaining failures were caused by numbers in the authority, capitalized specific epithets, and mistaking morphospecies names or non-standard annotations for scientific name components  was converted to the specific epithet "nana"). the largest category of name resolution errors by plantminer  were due to failure to recognize the standard annotations "cf.", "aff." and the non-standard but commonly-used "indet.". in most cases the presence of these terms resulted in non-matches rather than partial matches. also common was failing to make a partial match  for names accompanied by annotations or morphospecies strings . by far the largest source of error for the gnresolver  were non-matches caused by names in all capital letters. even when perfectly spelled, such names resulted in non-matches. other major causes of error were misspelled names outside the match threshold, failure to recognize some annotations , and parsing errors triggered by special characters such as pipe  in the name submitted.

features of the tnrs that enabled it to achieve a higher rate of success than both plantminer and the gnresolver included recognition of a larger diversity of botanical annotations and alternative formulations of infraspecific rank indicators , the ability to perform partial matches to genus or family when the full name cannot be matched, and reduced sensitivity to case. in addition, the above results suggest that most tnrs match failures are easily remedied by allowing a less strict match threshold than the current default . finally, this test compared only the abilities of the three applications to match names. features such as warning flags, constraining by higher taxonomy, and tools for comparing and selecting alternative matches are unique to the tnrs and cannot be compared to other applications.

improving linkages between taxonomic databases
as a test of the ability of the tnrs to increase linkages among biodiversity datasets, we compared overlap between two major taxonomic databases, pre- and post-standardization with the tnrs. the databases compared were the integrated taxonomic information system  and the national center for biotechnology information taxonomic database . from each database, we extracted all plant names at the rank of species or below . from ncbi, we included only formal scientific names, excluding informal names referring to samples or accessions .

the lists of unique names from both databases combined were then standardized using the tnrs. as both usda plants and ncbi can be used as taxonomic sources by the tnrs , we used only tropicos and the gcc  as taxonomic sources. all other options were left at their default settings.

prior to standardization,  <dig>  names out of a combined total of  <dig>   were shared between the two databases. after standardization and matching of names by the tnrs, plus conversion of synonyms, total names dropped to  <dig>  and the overlap between the two databases increased to  <dig> , or 18% . interestingly, much of the gain in overlap  occurred during matching , rather than conversion of synonyms . overall, at least  <dig>  names in the combined databases, or  <dig> %, were erroneous or redundant entries due to spelling errors, variant spellings or synonymy.

totals after matching include the original name if no match was found by the tnrs. totals after matching and synonym conversion use accepted names in place of synonymous matched names.

the most important outcome of name resolution was the nearly five-fold increase in taxonomic overlap between the two taxonomic databases. this result highlights the potential of taxonomic resolution as a general tool for integrating and building linkages between biodiversity databases.

future directions
one of the primary strengths of the tnrs is to provide a repeatable and efficient workflow for accessing existing, best available taxonomic sources. the ease with which new sources are added to the tnrs database suggest that future efforts should be directed to encouraging providers of high-quality taxonomy to make their information available via the tnrs.

although the tnrs provides a way to resolve many common forms of taxonomic semantic heterogeneity—in particular ambiguities due to misspellings and lexical variants, nomenclatural synonyms, and many forms of homonyms—major challenges remain. in particular, divergent taxonomic concepts can translate to differences in traits and geographic distributions; yet such differences are not reflected by differences in taxon names and authorities  <cit> . for example, depending on the concept used, abies lasiocarpa  nutt.  is either  widely distributed throughout the pacific northwest and the interior rocky mountains of north america or  restricted to the coastal ranges of british columbia and alaska. a more complex example is provided by the grass andropogon virginicus where the name has at least  <dig> meanings that overlap with  <dig> different taxon concepts that are variously given  <dig> scientific names  <cit> . unfortunately, at the present time, disambiguating such taxonomic ambiguity due to differing taxon concepts requires information on usage not communicated by the name alone, and rarely provided by most current taxonomic sources . as such information becomes available, future efforts should be directed toward the resolution not simply of names but of biologically more meaningful taxon concepts.

although the tnrs was developed to resolve plant names, relatively minor changes are needed to extend coverage to other organisms and nomenclatural codes. such improvements are beyond the scope of the current project, but we encourage others in the community to adapt the tnrs to their needs by accessing the source code at our publicly available repository.

CONCLUSIONS
the increasing availability of large, digitized biological datasets, while clearly a boon for biodiversity research, is also leading to an accumulation of incorrect, ambiguous or outdated taxon names, with negative consequences for comparative biological science, policy making, and data discovery. in an effort to provide a way forward we have developed the taxonomic name resolution service or tnrs, an application for correcting and standardizing taxonomic names with reference to existing sources of high-quality taxonomy.

the tnrs combines, within a single application, automated name parsing and correction with tools for inspection and resolution of ambiguous results. the tnrs provides a labor-saving and repeatable workflow for standardizing taxonomic names across an array of legacy and contemporary biodiversity data. a web interface makes the tnrs accessible to non-specialist users, while web services support programmatic access by expert users in need of automated name resolution. tests demonstrate the potential of the tnrs for reducing error and increasing integration among major organismal databases.

availability and requirements
project name: taxonomic name resolution service

project home page:http://tnrs.iplantcollaborative.org/

operating systems: linux based

programming languages: php, mysql, ruby, java

other requirements: java jdk  <dig> . <dig> or higher, git  <dig> . <dig> or higher, mysql  <dig> . <dig> or higher, php  <dig> . <dig> or higher , maven  <dig> . <dig> or higher, apache tomcat  <dig> . <dig> or higher, apache http server  <dig> . <dig> or higher, apache jk modules  <dig> . <dig> or higher, yaml  <dig> . <dig>  ruby  <dig> . <dig> or higher, rubygems  <dig> . <dig> or higher. the setup has been tested on centos  <dig> . details are available at http://github.com/iplantcollaborativeopensource/tnrs/blob/master/install.

licences: the tnrs was built on two existing open-source projects, each of which retain their original licensing. the silverbiology php port of taxamatch  <cit>  uses the apache  <dig>  license, and gni's name parser uses a bsd style license. all other code is licensed using a standard bsd license  <cit> .

any restrictions to use by non-academics: none

access to source code: the tnrs user interface is freely accessible via the tnrs website at http://tnrs.iplantcollaborative.org/. instructions for accessing the tnrs matchnames web service can be found at http://tnrs.iplantcollaborative.org/api.html. developers wishing to modify the tnrs for their own needs can download source code from the iplant github repository at https://github.com/iplantcollaborativeopensource/tnrs/. a virtual machine image of the tnrs pre-loaded with an example database can be launched from within iplant's atmosphere cloud computing environment .

abbreviations
ams: author match score; api: application programming interface; ed: edit distance; maxedr: maximum edit distance ratio; msl: minimum length of the two strings being compared; oms: overall match score; pms: partial match score; snms: scientific name match score; snmstr: transformed scientific name match score.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
initial concept for the tnrs was developed by bb and bje, with later suggestions from whp, rkp, zl, jarg, cf, sjm, nm, mn and nh. bb, cf, wp and rkp participated in the preliminary tnrs planning meeting at the missouri botanical garden. the gni parser was designed by dm. taxamatch was conceived and developed as a standalone product by tr, who assisted with advice regarding its implementation within the tnrs. the core database and database loading scripts were developed by bb, with assistance from zl and tr. pre- and post-processing code and taxamatch extensions were written by zl. user interface and web services layer were coded by jarg. scoring and ranking algorithms were developed by tr, dm, zl, bb and nm. project direction was provided by nh, mn and sl. the initial draft of the paper was written by bb. all authors read, participated in revision, and agreed with the final manuscript.

supplementary material
additional file 1
example r script which uses the tnrs api to correct names on a phylogeny.

click here for file

 additional file 2
taxonomic names used to compare performance of tnrs, plantminer and gnresolver.

click here for file

 additional file 3
list of submitted names, expected targets, and descriptions of errors for names which failed matching by one or more name resolution applications.

click here for file

 acknowledgements
we thank the missouri botanical garden for sharing data from tropicos, for modifying their web service api to enable improved access to these data and for their collaboration throughout this project. we thank michael giddens  for access to his php implementation of taxamatch. david shorthouse collaborated with dm in developing the algorithm upon which the tnrs score transformation is based. several iplant developers made important contributions: andrew muir and sriram srinivasan developed the framework for the user interface, hariolf haefele provided database support, john wregglesworth assisted with the job execution framework, and members of the core software team  deployed services and provide ongoing support. bob magill, charles miller, paul morris, peter jørgensen, jay paige, alan paton, cam webb, and amy zanne attended the preliminary tnrs planning meeting and provided many valuable suggestions. finally, we would like to acknowledge shannon oliver for her invaluable contribution to the website design and documentation.

bje was supported by nsf grant dbi  <dig> and tr by csiro marine and atmospheric research, australia,. bb and bje acknowledge early financial support from conservation international and team who funded the development of early prototypes of taxonomic name resolution. the iplant collaborative  is funded by a grant from the national science foundation .
