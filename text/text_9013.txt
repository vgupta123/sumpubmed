BACKGROUND
many types of molecular and functional associations, such as protein-protein or genetic interactions, can be usefully combined and represented as networks using graphical models. understanding how molecular complexes and groups of functionally related gene products, or "modules", are organized within molecular interaction networks - both physically and in terms of functional dependencies - can lead to a better understanding of how cellular and developmental processes are coordinated. because gene products within complexes or modules are expected to physically interact more frequently and to show stronger functional dependencies with each other than with other molecules in their environment, they are expected to share many more linkages in any network representation of functional associations. topological analysis of network graphs can identify densely interconnected regions, which often correspond to functionally related groups of genes or proteins that can be identified as molecular complexes and modules, and can also reveal how different modules may be functionally linked.

several algorithmic approaches have been developed to identify densely interconnected groups of vertices  within a graph . these can be broadly classified as agglomerative methods that grow clusters nucleated from densely interconnected regions , or divisive methods that partition graphs into regions of differing connectivity . some general features differ between these approaches: for example, divisive methods usually attempt to assign all nodes in a graph into some cluster, while agglomerative methods do not; some methods assign nodes exclusively to a single cluster, while others allow membership of a single node in multiple clusters. we describe these five methods briefly below. mcode is a popular clustering method that uses vertex weighting  to grow clusters from a starting vertex of high local weight by iteratively adding neighboring vertices with similar weights. cluster boundaries can be adjusted using options to trim vertices linked by a single edge  or to draw in additional neighboring vertices . these options can allow nodes to remain unassigned or to be included in multiple clusters -- both likely scenarios in vivo, where the precise composition of functional modules and pathways may vary in different biological contexts. cfinder is a clique-finding algorithm that identifies fully connected subgraphs of different minimum clique size, and then merges cliques based upon their percentage of shared members, so that each node typically assumes membership in an entire hierarchy of clusters of differing sizes. cfinder results vary widely with each increment of minimum clique size . nemo identifies frequent dense subgraphs in input networks based on splat  <cit>  and codense  <cit> , which look for recurrence of dense subgraphs and coherent edge recurrence across subgraphs, respectively. nemo is designed for dense, large-scale networks because it uses coherent edge frequencies, which can lose statistical power in sparse networks with few edges. mcl is a markov clustering method that is based on a flow simulation  that partitions a graph into areas of high and low flow. nodes are grouped together as complexes when edges that link them have similar 'flow', or probability of edge use based on path. spici is a computationally efficient, local network-clustering algorithm that emphasizes optimizing cluster density. spici seeds clusters with nodes according to their weighted degree and accounts for local density around the growing cluster with each iteration. spici is promoted for its speed and ability to process large networks.

we applied all of these methods to molecular interaction networks from sacchromyces cerevisiae  and caenorhabditis elegans  and compared their performance with respect to the modularity, density, and size of clusters, as well as the total number of clusters identified and their ability to group genes with similar functional annotations. to be as fair as possible in all comparisons and tests, we used the final clustering output from each implementation exactly as it was provided to the user. for the yeast networks we achieved some success using all of these methods, but we found them not as well suited for the worm interactome: the clusters identified were highly variable in quality, and adjustable parameters could not accommodate the higher interconnectivity of the worm network to produce consistently sensible results. we found the yeast network to have slightly higher density overall than the worm network , while its characteristic path length  was nearly double that of for worm . this indicates that nodes in the worm molecular interaction network are more highly interconnected, and consequently would be expected to manifest less modularity, or separation of distinct clusters from the rest of the network. as a result, the methods described above were unable to identify consistently high quality clusters. for example, different algorithms variously tended to recover low-density, stringy clusters , produce many small subnetworks that were subsets of larger modules , lacked suitable parameter adjustability , partitioned the network exhaustively leaving no unassigned nodes , or tended to generate numerous small, exclusive  clusters .

here we describe module identification in networks , an alternative method we have developed that can effectively identify functional modules in the c. elegans molecular interaction networks. mine at once robustly identifies highly interconnected clusters that are biologically coherent, has the flexibility to handle many different types of networks, and contains a small number of adjustable parameters that can be optimized for different network topologies - all within a simple graphical user interface. mine is an agglomerative clustering algorithm very similar to mcode, but it uses a modified vertex weighting strategy and can factor in a measure of network modularity, both of which help to define module boundaries by avoiding the inclusion of spurious neighboring nodes within growing clusters. we have evaluated mine as applied to interactomes from yeast and worm, and we show that it performs favorably with respect to modularity and density in comparison with other current methodologies.

RESULTS
overview of algorithm and design considerations
the clustering approach used by mine is summarized in figure  <dig> and additional file  <dig> figure s <dig>  mine first assigns weights to all nodes in a graph according to their edge degree and local neighborhood density. it then performs an iterative, agglomerative cluster finding procedure, in which clusters are seeded from nodes in order of their descending weight. with each iteration, the seed node is grouped together with neighboring nodes of similar weight and any neighbor nodes that improve the modularity score. after a cluster is delineated, it is compared to previously identified clusters and merged if there is significant overlap. this procedure is then repeated, starting with the next most highly weighted node, until all nodes have been inspected as a seed.

in developing mine we reasoned that the algorithm should not attempt to force all vertices into a cluster, as it may not be feasible to assign every gene/protein to a physical complex or module in a real-world example - this may either reflect the underlying biological reality, or may occur because available network data is sparse and incomplete. we thus opted for an agglomerative clustering approach, and focused on three specific factors that are important for biologically and topologically meaningful cluster identification: neighborhood edge density calculation, optimization for modularity, and treatment of overlapping clusters. we discuss these three issues and their influence on performance separately.

neighborhood edge density
to build clusters, mine uses a strategy similar to that of mcode, which we had found to return good results in yeast . the primary differences lie in the method that mine uses to calculate how vertices are weighted and the inclusion of a local modularity score at each step. to retain information about the precise local neighborhood of a vertex , we assign the vertex  a weight  that is the product of its own clustering coefficient, i.e. its density , and the number of edges  of the most highly connected node in the local neighborhood of v, inclusive of v :  

this weighting scheme improves the scores of densely grouped genes that are linked to a highly connected node, or 'hub'. the topological effect of this scoring scheme is to place higher weight on vertices connected to hubs, which have been shown to be important for robustness in biological interaction networks and tend to occur within functional modules  <cit> .

modularity
we include an additional parameter that takes into account a modularity score, which represents the level of connectivity within a group of nodes relative to the group's connections to the rest of the network. modularity is defined as the ratio of the number of edges between nodes in a cluster  to the number of edges between members of the cluster and any neighbors not designated as members of the cluster :  

a high modularity score will indicate that a cluster is very isolated from the rest of the network. thus in expanding a cluster, not only is the weight of a vertex considered, but also whether its inclusion will improve the modularity score. thus, nodes that satisfy the vertex weight threshold but which decrease the modularity score by more than Δcmod are not added; conversely, nodes that improve the modularity score of the cluster by at least Δcmod are added, even if they do not satisfy the vertex weight threshold. finally, all clusters undergo an iterative culling procedure that removes nodes if this will increase the score of the remaining cluster by at least Δcmod. Δcmod is implemented as the user-specified parameter msp .

overlapping clusters
one of the attractive features of cfinder is its ability to recover overlapping clusters, which is compatible with the idea that complexes in a biological system are not necessarily static; all or part of a complex may be activated at a specific time or location, and component parts may even be included in multiple complexes. clusters identified algorithmically should reflect this property, and thus we designed mine so that it can return both exclusive and non-exclusive clusters, and can merge together clusters that appear to overlap above a user-defined threshold . among all the algorithms we compared, cfinder is the only other method that is able to cluster while permitting overlaps; however in contrast to cfinder, mine has been designed to avoid returning both the parent and child clusters  where it would be more appropriate to combine them.

performance evaluation
mine was tested using protein-protein interaction data from s. cerevisiae and c. elegans and compared with the performance of five other algorithms. the yeast s. cerevisiae is a classic model organism for which a great deal is known about protein complexes, and thus presents an ideal opportunity to test a new network clustering algorithm. we used as our test networks all yeast two-hybrid data from biogrid  <cit>  and the 'filtered yeast interactome'   <cit> , which represents very high confidence protein-protein interactions. for annotated complexes, we used mips  <cit>  and go-slim macromolecular complex annotations  <cit>  as gold standards against which to measure complex identification within these networks. clusters identified by mine were then compared with annotated complexes contained in the yeast networks. for c. elegans, we used protein-protein interaction networks based on wi <dig>  <cit> , as well as all physical interactions from both mint  <cit>  and intact  <cit> . in contrast to yeast, c. elegans is a biologically more complex organism for which, despite its well-studied genetic and developmental networks, there is no well-annotated database of protein complexes. we used c. elegans gene ontology  annotations for biological process, cellular component, and molecular function to provide a comparable validation set. only go terms with at least  <dig> and at most  <dig> members were considered to avoid categories that are too general or too specific. mine was tested over a broad range of parameters for vertex weight percentage vwp  and modularity score percentage msp . four of the five tested algorithms  also include adjustable parameters and were evaluated across a wide spectrum of their settings. the performance of all algorithms was then assessed in terms of recall and precision, modularity, and geometric accuracy of identified clusters with respect to annotated complexes.

recall and precision
for both measures, all annotated complexes  were matched to predicted clusters with the most significant overlap as measured by the hypergeometric test . recall is defined as the number of true positives  over the sum of all true positives and false negatives : recall = tp/. precision was calculated for the same cluster, and is defined as the number of true positives divided by the sum of true positives and false positives : precision = tp/. in both measures, true positives are defined as gene products that are annotated as members of a protein complex by either go or mips.

in yeast, mine was consistently among the top performing algorithms with respect to both recall and precision for capturing mips and go complexes in both networks . when examining the higher density c. elegans interactome, mine generally achieved a balance of recall and precision slightly higher than mcode and cfinder when considering go molecular function, biological process and cellular component . while mcl and spici can reach a higher precision and recall, they typically do so at the expense of producing many more  and/or generally smaller  clusters than any of the other algorithms. average precision and recall are inflated in these cases by the higher contribution of very small clusters, which necessarily have a lower bound on the proportion of potential false negatives and false positives when at least one node is a true positive . though there are parameter settings at which spici can perform better than other methods on the c. elegans protein interaction network, like most of the algorithms tested it does so with the constraint of identifying only exclusive clusters.

modularity
we evaluated global cluster modularity using a measure defined in  <cit> . the global modularity score is calculated from a composite of the local modularity scores across all clusters and accounts for edges inside each cluster, edges connecting each cluster to the rest of the network, and the total number of edges in the network. the composite score provides a clear assessment of each algorithm's ability to delineate clusters that are well separated from the rest of the network.

when evaluated over a range of parameters, we find that mine produces clusters with good separation from the rest of the network, and also produces more clusters of higher modularity than other methods, for both the yeast and worm interactomes . in the yeast networks, mine consistently outperforms other methods, with the exception of a single setting for cfinder and nemo in the fyi network . for worm, only a single setting of cfinder achieve comparable modularity and total number of clusters identified by mine ; spici can produce higher overall composite modularity, but there is an insignificant difference between the distribution of modularity scores for spici and mine . other algorithms also tend to produce a much greater variation in the total number of clusters identified across their parameter settings, while still producing clusters of lower modularity; this is particularly striking for mcl .

geometric accuracy
geometric accuracy simultaneously reports on the recall and precision of clustering performance, and is defined as the geometric mean of these two measures. this single score provides an effective measure for evaluating performance against annotation sets. using the mean geometric accuracy of all clusters at different parameter settings, mine consistently performs better than most other methods over a range of parameters, with a typical geometric accuracy of ~70% in yeast and ~22% in worms . results from mcode, mcl, spici and cfinder vary in geometric accuracy over a much wider range. when plotted against the composite modularity , mine performs favorably with respect to topological separation from the network and the ability to identify high-quality clusters of varying sizes that capture commonly recognized biological modules.

discussion
for both yeast and worm interactomes, mine surpasses other methods in recovering clusters that are well separated from the rest of the network, while achieving good recall of annotated complexes . of the algorithms that do not allow cluster overlap, spici appears to have better performance with respect to mean geometric accuracy and composite modularity; it even is slightly higher than mine with respect to these measures. however, mine maintains comparable performance while allowing nodes to be shared between clusters, a feature that spici lacks. we consider this to be of high biological relevance in a multicellular organism like c. elegans, in which different functional modules are reused in different spatiotemporal contexts where their precise molecular composition may vary. additionally, mine results are robust to a variety of parameter settings and consistently identify high quality clusters with respect to the defined measures. this is in contrast to other methods, for which the user must test over a broad range of parameters to find the optimal setting. thus, mine offers a simpler tool for the end user to identify high quality clusters without the need for extensive optimization irrespective of any a priori knowledge of the network. mine does show excellent performance when all six algorithms are compared at settings that provide an optimal balance between modularity, geometric accuracy, and cluster number in c. elegans wi <dig> . here again mine is one of the top performers; its slightly lower modularity with respect to spici is the result of its cluster overlap feature. moreover, if methods are compared at settings optimized solely for geometric accuracy , mine remains one of the top performers with respect to modularity, geometric accuracy, mean cluster density and mean cluster size . this performance advantage is illustrated graphically in figure  <dig>  where the top fourteen clusters from mine and mcode  are displayed from an analysis of the c. elegans protein-protein interactome, using optimal parameters with respect to geometric accuracy and modularity for both algorithms. clusters identified by mine are more highly interconnected and less prone to comprise multiple distinct clusters of nodes that have been gathered together and reported as a single module; mcode clusters progressively lose cohesiveness as cluster scores decrease.

we also note that mine specifically filters for clusters that are of size  <dig> or  <dig>  as those are too small to be considered valid groups of genes . this size criterion also accounts for some of the differences in coverage  between mine and other methods. by eliminating clusters of size  <dig> and  <dig>  many genes remain isolated, consistent with the biological intuition that not every gene can be clearly associated with a functional module in any particular dataset.

mine performs very competitively with existing methods and offers a small number of tuneable parameters, rendering this method highly adaptable for different input networks. with an emphasis on graph-based clustering and modularity, mine behaves well on both spare, modular networks and large, dense networks. in contrast to mcl, cfinder, spici and mcode, the results produced by mine do not change dramatically with small parameter adjustments, thereby offering the user both the ability to quickly discover high quality clusters and fine-grained control over the final set of clusters. this is likely because the evaluation of modularity for each vertex addition acts as a buffer that prevents large changes in cluster results. we found that mine also outperformed most other methods when additional noise was introduced to test networks . across all methods, the geometric accuracy obtained for the worm interactome was significantly lower than for the yeast network. this is likely because the c. elegans interactome, although densely interconnected, still has relatively low coverage and is missing many known interactions  <cit> . combined with the low coverage of go annotations for the worm genome, the likelihood of recovering all components annotated with a given go category is reduced relative to the comparatively well-annotated yeast genome.

CONCLUSIONS
mine is a highly tuneable graph-clustering algorithm whose strengths for the identification of molecular complexes are more pronounced in dense, highly interconnected networks, such as the c. elegans protein-protein interaction network. mine uses a small number of adjustable parameters that enable it to identify high quality clusters that share common functional annotations. mine is implemented both as a cytoscape plug-in and a perl script. the cytoscape plug-in provides a simple graphical user interface , whereas the perl version allows automated batch processing and offers several extensions to the core mine package, which include: edge weighting, requiring vertex weights above background distribution for inclusion in a cluster, identification of vertices that act as linkers between clusters , and the ability to utilize expression or localization data to generate sub-networks for condition-specific cluster identification. these additional features position mine as a particularly versatile tool for identifying the composition of functional modules within molecular networks.

