BACKGROUND
sequence comparisons are one of the most important computational tools in molecular biology. sequences are good symbolic representations of biological molecules that encode relevant information about their structure, function and history. from the analysis of functionally related sequences, biologically significant facts can be inferred. for instance, genomic sequence comparisons are performed in order to identify genes or regulatory sites across evolutionarily related genomes, as these functional elements tend to exhibit conservational patterns different from those observed in regions that are not functional.

in attempt to allow for multiple sequence comparisons, the basic dynamic programming recurrences introduced in the 1970s to align efficiently two sequences of n symbols in time proportional to the square of the length of the sequences  <cit> , can be naturally extended for k sequences, with an exponential cost o <cit> . as this cost is unaffordable in practice, many heuristics have appeared to provide acceptable solutions with a minor cost. the most popular of them is the progressive alignment  <cit> .

this procedure is a greedy algorithm that runs in o time. in a first step, the progressive alignment performs all of the pairwise alignments to build an evolutionary tree. in a second step, an initial alignment is constructed from the two closest sequences, incorporating then the rest to the profile following the guide tree. such a procedure does not guarantee to find the optimal solution in mathematical terms. however, the results are generally meaningful from the biological standpoint.

these comparisons at the sequence level have limitations however. although similar sequences do tend to play similar biological functions, the opposite is not necessarily true. often similar functions are encoded in higher order sequence elements that are not necessarily conserved at the sequence level. as a result, similar functions are frequently encoded by diverse sequences which are undetectable by conventional sequence alignment methods.

gene promoter regions are a good example. the information that governs the rna synthesis is mostly encoded in the gene promoter, a region normally  <dig> to  <dig> nucleotides long upstream of the transcription start site of the gene . transcription factors  bind to sequence specific motifs  within the promoters. tfbss are 5– <dig> nucleotides long and one promoter region contains on the order of  <dig> to  <dig> of them  <cit> . such motifs appear to be arranged in specific configurations that define the temporal and spatial transcriptional program of each gene. genes presenting similar expression patterns are assumed to share similar configurations of tfbss in their promoters  <cit> .

however, tfbss associated to the same tf show often little sequence conservation. therefore, promoter regions of genes with similar expression pattern may not be similar at the sequence level.

in a previous work  <cit> , we showed that pairwise alignments between sequences of labels representing tfs binding to sites predicted in promoter regions  could often uncover high-level common regulatory patterns which could not be found by typical nucleotide sequence comparisons.

here, we present an efficient implementation of the multiple tf-map alignment based in the progressive alignment paradigm. we have introduced some modifications in the pairwise global tf-map alignment algorithm to allow the alignment of tf-map alignments. in addition, we have extended the algorithm to allow for non-collinear alignments, which are rarely considered in conventional dynamic programming algorithms, being only partially identified by combining global and local alignment strategies  <cit> . the ability to predict non-collinear alignments may be particularly relevant in the case of promoter regions, where the linearity of tfbss configurations can be weakly conserved  <cit> .

the structure of the paper is the following: first, we briefly review the concept of tf-map and provide the formal definition of a multiple tf-map alignment. then, we introduce the algorithm to compute the optimal pairwise alignment of two alignments. next, we describe the main algorithm that performs the progressive alignment of multiple tf-maps. later, we define formally a non-collinear alignment, introducing some modifications in the basic algorithm. finally, we systematically estimate the optimal parameters of the alignment to distinguish promoters from other gene regions in a set of well characterized human-rodent gene pairs extracted from the abs database  <cit>  and their corresponding orthologs in chicken and zebrafish. these results are compared to those obtained by conventional sequence alignment methods. three particular examples are presented in which multiple tf-map alignments characterize conserved regulatory elements that are otherwise imperceptible in sequence-level comparisons.

tf-maps
let ∑dna be the alphabet of four nucleotides. let ∑h be the alphabet of symbols corresponding to higher-order elements that can be annotated over a genomic sequence, for instance tfs. we define a generic mapping function as a procedure to translate a sequence of nucleotides s = s1s <dig> ... sk where each nucleotide si∈ ∑dna, into a sequence of tuples m = m1m <dig> ... mn where each tuple mi=<mif,mip <dig> mip <dig> mis>
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdawgaawcbagaemyaakgabeaakiabg2da9iabgyda8iabd2gatnaadaaaleaacqwgpbqaaeaacqwgmbgzaagccqggsaalcqwgtbqbdaqhaawcbagaemyaakgabagaemicaanaegymaedaaogaeiilawiaemyba02aa0baasqaaiabdmgapbqaaiabdchawjabikdayaaakiabcycasiabd2gatnaadaaaleaacqwgpbqaaeaacqwgzbwcaagccqgh+agpaaa@489e@ denotes the match of a motif for the higher-order element mif
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaemozaygaaaaa@30ec@ ∈ ∑h occurring between the position mip1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaemicaanaegymaedaaaaa@31f0@ and the position mip2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaemicaanaegomaidaaaaa@31f2@ over the sequence s with score mis
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaem4camhaaaaa@3106@.

we introduced the concept of mapping for the promoter characterization problem in a previous work  <cit> . let ∑tf be the alphabet of tfs denoting symbols. a mapping function is a procedure to translate a promoter region s = s1s <dig> ... sk where each nucleotide si ∈ ∑dna, into a sequence of tf-tuples m = m1m <dig> ... mn where each tf-tuple mi=<mif,mip <dig> mip <dig> mis>
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdawgaawcbagaemyaakgabeaakiabg2da9iabgyda8iabd2gatnaadaaaleaacqwgpbqaaeaacqwgmbgzaagccqggsaalcqwgtbqbdaqhaawcbagaemyaakgabagaemicaanaegymaedaaogaeiilawiaemyba02aa0baasqaaiabdmgapbqaaiabdchawjabikdayaaakiabcycasiabd2gatnaadaaaleaacqwgpbqaaeaacqwgzbwcaagccqgh+agpaaa@489e@ denotes the match of a binding site for the tf mif
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaemozaygaaaaa@30ec@ ∈ ∑tf occurring between the position mip1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaemicaanaegymaedaaaaa@31f0@ and the position mip2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaemicaanaegomaidaaaaa@31f2@ over the sequence s with score mis
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaem4camhaaaaa@3106@.

in the context of the detection of regulatory elements, different mapping functions can be used to obtain the translation from s to m such as a collection of position weight matrices  representing tfbss , or a pattern discovery tool that identifies a set of unknown motifs conserved in several promoters . in practice, for each match over a given threshold, we register a new tf-tuple in m defined by the label  of the tf or the pattern, the positions  and the score  of the match , for an example). this translation preserves the order of s in m, that is if i <j in m then mip1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakgabagaemicaanaegymaedaaaaa@31f0@ <mjp1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemoaaogabagaemicaanaegymaedaaaaa@31f2@. matches to different tfs may possibly occur at the same position, being false positives in most cases ). we refer to the resulting sequence of tf-tuples m as a transcription factor map, or simply a tf-map.

in the implementation here, matches to pwms are considered strandless, that is, they are annotated at a given location, irrespective of the orientation in which they occur. while biological evidence suggests that some tfbss are functional only when present in a given strand, in other cases tf activity appears to be independent of the orientation of the binding site  <cit> . since in general, we do not have information of the strand in which a binding site may be functional, we have not considered strand in our analysis.

multiple alignment of tf-maps
let m <dig>  m <dig>  ..., mk be a set of tf-maps. each map is denoted as mi = mi, 1mi,  <dig> ... mi,|mi|
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdawgaawcbagaemyaakmaeiilawiaeiifawnaemyta00aasbaawqaaiabdmgapbqabawccqgg8bafaeqaaaaa@362c@ where mi,jf
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaemozaygaaaaa@3329@ ∈ ∑tf. let m1∗,m2∗,...,mk∗
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaegymaedabagaey4fiocaaogaeiilawiaemyta00aa0baasqaaiabikdayaqaaiabgehiqaaakiabcycasiabc6cauiabc6cauiabc6cauiabcycasiabd2eannaadaaaleaacqwgrbwaaeaacqghxiikaaaaaa@3c0a@ be the extended set of tf-maps. each extended map is denoted as mi∗=mi,1∗,mi,2∗...mi,|mi∗|∗
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakgabagaey4fiocaaogaeyypa0jaemyba02aa0baasqaaiabdmgapjabcycasiabigdaxaqaaiabgehiqaaakiabcycasiabd2gatnaadaaaleaacqwgpbqacqggsaalcqaiyagmaeaacqghxiikaagccqgguaglcqgguaglcqgguaglcqwgtbqbdaqhaawcbagaemyaakmaeiilawiaeiifawnaemyta00aa0baawqaaiabdmgapbqaaiabgehiqaaaliabcyha8bqaaiabgehiqaaaaaa@4bac@ where mi,j∗f
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaey4fioiaemozaygaaaaa@3418@ ∈ mi∪ {-}. the symbol '-' indicates a gap, which can be considered as a particular tf-tuple < '-', · , ·, γ >. the value · denotes a null value, γ is the penalty for introducing a gap in a column of the alignment.

the multiple alignment of k maps m <dig>  m <dig>  ..., mk is defined as a rectangular array t where each column t=
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgubavcqggoaakcqwgpbqacqggpaqkcqgh9aqpcqggoaakcqwgtbqbdaqhaawcbagaegymaejaeiilawiaemyaakgabagaey4fiocaaogaeiilawiaemyba02aa0baasqaaiabikdayiabcycasiabdmgapbqaaiabgehiqaaakiabcycasiabc6cauiabc6cauiabc6cauiabcycasiabd2gatnaadaaaleaacqwgrbwacqggsaalcqwgpbqaaeaacqghxiikaagccqggpaqkaaa@4a7b@ is the multiple match among the tf-tuples in position i from the extended maps m1∗,m2∗,...,mk∗
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaegymaedabagaey4fiocaaogaeiilawiaemyta00aa0baasqaaiabikdayaqaaiabgehiqaaakiabcycasiabc6cauiabc6cauiabc6cauiabcycasiabd2eannaadaaaleaacqwgrbwaaeaacqghxiikaaaaaa@3c0a@:

 t=.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgubavcqgh9aqpdaqadaqaauaabeqaeqaaaaaabagaemyba02aa0baasqaaiabigdaxiabcycasiabigdaxaqaaiabgehiqaaaaoqaaiabd2gatnaadaaaleaacqaixaqmcqggsaalcqaiyagmaeaacqghxiikaaaakeaacqwimaysaeaacqwgtbqbdaqhaawcbagaegymaejaeiilawiaemidaqhabagaey4fiocaaagcbagaemyba02aa0baasqaaiabikdayiabcycasiabigdaxaqaaiabgehiqaaaaoqaaiabd2gatnaadaaaleaacqaiyagmcqggsaalcqaiyagmaeaacqghxiikaaaakeaacqwimaysaeaacqwgtbqbdaqhaawcbagaegomaijaeiilawiaemidaqhabagaey4fiocaaagcbagaesojgseabaaabaaabagaesojgseabagaemyba02aa0baasqaaiabdugarjabcycasiabigdaxaqaaiabgehiqaaaaoqaaiabd2gatnaadaaaleaacqwgrbwacqggsaalcqaiyagmaeaacqghxiikaaaakeaacqwimaysaeaacqwgtbqbdaqhaawcbagaem4aasmaeiilawiaemidaqhabagaey4fiocaaaaaaogaayjkaiaawmcaaiabc6cauaaa@6987@ 

such a multiple tf-map alignment – or simply, a multiple map alignment , in contrast to a multiple sequence alignment  – satisfies the following conditions:

 <dig>  the extended maps have the same length.

 <dig>  if the gaps are removed from each mi∗
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakgabagaey4fiocaaaaa@3046@, the original mi is recovered.

 <dig>  at least one element in every column is different from a gap.

 <dig>  the elements that are aligned in a column correspond to the same tf.

note that the first three conditions define the classical multiple alignment of sequences. the last one, however, introduces a new constrain that is related to the match state, according to the notion of pairwise tf-map alignment provided in  <cit> .

the score of a multiple alignment of tf-maps
given the multiple alignment t, we compute the score of the mma s as:

 α∑i=1t∑j=1kmj,i∗ss=−λ−μ∑∀i,i′f
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqaaewaeaaaaeaaaeaaaeaaaeaaiigacqwfxoqydaaewaqaamaaqadabagaemyba02aa0baasqaaiabdqgaqjabcycasiabdmgapbqaaiabgehiqiabdohazbaaaeaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgrbwaa0gaeyyeiuoaasqaaiabdmgapjabg2da9iabigdaxaqaaiabdsha0bqdcqghris5aagcbagaem4camnaeiikagiaemivaqlaeiykakcabagaeyypa0dabagaeyoei0cabagae83udwmaeiikagiaem4zacmaeiykakcabaaabaaabagaeyoei0cabagae8hvd02aaabeaeaacqwgmbgzcqggoaakcqwgtbqbdaqhaawcbagaegymaejaeiilawiaemyaakgabagaey4fioiaemicaanaegymaedaaogaeyoei0iaemyba02aa0baasqaaiabigdaxiabcycasiqbdmgapzaafaaabagaey4fioiaemicaanaegymaedaaogaeiilawiaeiola4iaeiola4iaeiola4iaeiilawiaemyba02aa0baasqaaiabdugarjabcycasiabdmgapbqaaiabgehiqiabdchawjabigdaxaaakiabgkhitiabd2gatnaadaaaleaacqwgrbwacqggsaalcuwgpbqagaqbaaqaaiabgehiqiabdchawjabigdaxaaakiabcmcapawcbagaeyiaiiiaemyaakmaeiilawiafmyaakmbauaaaeqaniabgghildaaaaaa@81d0@ 

where α, λ, μ, >  <dig>  g is the number of columns with only one element different from a gap in the mma , and f is a function that measures the conservation of distance between the sites of every map in two consecutive columns  with at least two aligned elements in the mma. that is, the score of the alignment increases with the score of the aligned elements , and decreases with the number of gaps , the number of unaligned elements , and with the difference in the distance between adjacent aligned elements . see  <cit>  for further details about the tf-map alignment parameters.

the algorithms
there are many possible alignments among multiple tf-maps. the optimal alignment is the one scoring the maximum  among all possible alignments. in a previous work  <cit> , we implemented a dynamic programming algorithm to obtain such an alignment efficiently for the case of two tf-maps. the optimal multiple sequence alignment problem  is, however, much more difficult, being formally a np-complete problem  <cit> .

here, we propose to adapt the popular progressive alignment strategy to the tf-map alignment. the solutions obtained by this method are not guaranteed to be optimal. however, multiple progressive alignments usually capture the sequence features underlying the common functionality shared by the aligned sequences  <cit> . we have generalized the basic pairwise tf-map alignment algorithm developed in  <cit>  in order to allow the comparisons between two single tf-maps, a tf-map and a mma, and two mmas.

the alignment of two mmas
let ax = mx, 1mx,  <dig> ... mx,|ax|
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdawgaawcbagaemieagnaeiilawiaeiifawnaemyqae0aasbaawqaaiabdiha4bqabawccqgg8bafaeqaaaaa@3650@ and ay = my, 1my,  <dig> ... my,|ay|
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbqbdawgaawcbagaemyeaknaeiilawiaeiifawnaemyqae0aasbaawqaaiabdmha5bqabawccqgg8bafaeqaaaaa@3654@ be two mmas that have been already computed. let s be the scoring dynamic programming matrix where s = s denotes the score of the best tf-map alignment of the alignments ax = mx,  <dig> ... mx, i and ay = my,  <dig> ... my, j as defined previously . the computepairwisesimilarity algorithm shown below is a generalization of that developed in  <cit>  to align two tf-maps that computes the optimal pairwise tf-map alignment between ax and ay.

this algorithm basically searches the maps of both alignments to find matches between one site in the first alignment and one site in the second one. once a new match is identified, the previous matches must be evaluated in order to construct the optimal alignment with this new one . because this class of scoring matrices are highly sparse  <cit> , we register the coordinates in s of the matches computed previously. thus, to compute the optimal score at the cell s, only the non-empty cells in s that are visible for the current match need to be accessed. in addition, we maintain the list sorted by optimal score, so that the cell scoring the maximum value is at the beginning of the list and, in most cases, only a few nodes will need to be accessed before a critical node is reached beyond which the optimal score can not be improved  <cit> .

the number of computations p in this algorithm is very similar to that obtained in the conventional pairwise tf-map alignment algorithm  <cit> . the exact complexity of this algorithm is difficult to be studied – depending mostly on the size of the input maps and the sparsity of the resulting matrix s. an expected time cost analysis reveals that the cost function can be explained in terms of  a first quadratic term derived from the necessary comparison between all of the tfbss of both maps to detect the match cells and  a second quadratic term necessary to search for each match the best adjacent previous pair in the optimal tf-map alignment. in  <cit> , we studied the positive contribution of using a list of non-empty cells in s that reduces the second component to an expected cost of o, where p is the percentage of the similarity matrix that is occupied. in the case of pairwise tf-map promoter comparisons, this value was estimated to be below  <dig>  .

implementation
in the pseudocode below, the alignments ax and ay are represented as two arrays of sites sorted by the position in their promoters, where each site corresponds to an input tfbs. the mmas are internally encoded with pointers among the sites that form each match. gaps here are not explicitly represented. each site mx, i is a structure as described above with the functions factor, pos <dig>  pos <dig> and score returning the values of the corresponding fields.

the variable maxsim stores the optimal score computed so far. the sites in the optimal tf-map alignment can be easily retrieved using a supplementary structure path that points to the previous cell in the optimal path leading to cell s. in addition, the function computeinitialsimilarity calculates for each match s the initial score of a hypothetical alignment that includes only the sites mx, i and my, j. once the match between two sites mx, i and my, j has been identified, the best previous match between two other sites mx, i' and my, j' is used to construct the new alignment . the list l is used to locate the non-empty positions in s. each node of the list l is represented as structures p and n with the functions abscissa and ordinate returning the corresponding coordinates in s of each previous match.

the score of the new match between mx, i and my, j is the sum of the scores of the columns in which both elements were aligned in their respective mmas. unaligned sites are scored with the gap penalty γ . the function computelambda counts the number of sites in each group that are not included in the alignment, taking into account the size of each individual mma.

in practice, we do not allow overlap in the primary sequence between adjacent sites in the alignment. this is not a practical limitation of the algorithm, but a requirement introduced according to our observations in available annotations of regulatory elements. the function computeoverlap calculates the average distances d <dig> and d <dig> between any pair of consecutive matches in the maps of each alignment, verifying the absence of physical overlap in their promoters. the function |d <dig> - d2| scores the conservation of distance between the sites of every map in two consecutive columns on each mma .

computepairwisesimilarity
require: ax, ay: tf-map alignments, l: list of <abscissa, ordinate>, l = ∅

   {calculating the element i, j in s}

      for i =  <dig> to |ax| -  <dig> do

         for j =  <dig> to |ay| -  <dig> do

            if factor = factor then 

5:             s← computeinitialsimilarity;

               x ← α  + score);

               {searching the best previous match in l}

               p ← first ;

               i' ← abscissa;

10:            j' ← ordinate;

               while end = false and s+ x >s do

                  {compute the μ value and check overlap}

                   ← computeoverlap;

                  if overlap = false then

15:               y ← λ );

                  z ← μ ;

                  maxsim ← s + x - y - z;

                  if maxsim > sthen

                     s ← maxsim;

20:            p ← next;

               i' ← abscissa;

               j' ← ordinate;

            n ← createnewnode;

            insertnode;

progressive mma algorithm
let  be the initial list of k tf-map alignments, where each alignment ai contains a single tf-map. let s be the similarity matrix where s denotes the similarity between two tf-map alignments ai and aj.

the progressive mma algorithm shown below builds up a multiple tf-map alignment in a stepwise manner. in a first step, all pairwise tf-map alignments are performed. the initial multiple alignment is created with the two most similar ones. these maps are substituted for the alignment of both. the similarity between this new alignment and the rest of the tf-maps is then estimated, updating the s matrix .

in a second step, an iterative procedure selects at each round the pair of alignments that are more similar from the pool of available ones. these two alignments are then merged into a new mma, estimating the similarity to the remaining ones. at the end of the process, there is only one alignment that contains the multiple alignment of the input maps.

the cost of the progressive mma can be expressed in terms of the number of pairwise tf-map alignments that must be computed. let k be the number of maps to be aligned and n be the length of each map. the initial round performs o pairwise alignments. next, the progressive rounds perform o alignments involving two previous alignments. let p be the cost of each pairwise operation , then the cost of the progressive map alignment algorithm is o).

implementation
in the progressive mma algorithm shown below, the variable maxsim saves the maximum score so far computed at each round. the identifiers of the alignments that produce such a score can easily be retrieved using a supplementary pair of variables isim, jsim.

the function computepairwisesimilarity is a generalization of the tf-map alignment algorithm presented in  <cit> , as explained in the previous section. the optimal pairwise alignments between the input tf-maps in the initial round are saved, as they could be required during the iterative procedure.

once a new tf-map alignment is created from the two most similar ones, their binding sites must be merged . the order of the tfbss in the new alignment must take into account the position of the binding sites in their primary promoter sequences. in the approach here, we do not create a profile of each mma. instead, all of the tfbss of each alignment are always available for subsequent tf-map alignments.

the alignments between this new tf-map alignment and the others are not explicitly computed. the similarity of them is instead estimated with the wpgma method , in which the similarity of the previous alignments between aisim and ajsim to the other alignments is weighted according to the number of maps of each one. if an estimated alignment between two mmas is identified as the most similar one during the progressive step, then it must be explicitly computed before merging both tf-map alignments.

progressive mma algorithm
require: a: list of tf-map alignments 

   {initial step: pairwise alignment all vs all}

   maxsim ← -∞

   for i =  <dig> to k do

5:  for j = i +  <dig> to k do

         s ← computepairwisesimilarity;

         {select the pair with maximum similarity}

         maxsim ← max);

   {create a new mma: estimate the similarity to others}

10:aisim-jsim ← merge alignments;

   {progressive step: select the two most similar alignments}

   while |a| >  <dig> do

      maxsim ← -∞

15:   for i =  <dig> to |a| do

         for j = i +  <dig> to |a| do

            {select the pair with maximum similarity}

            maxsim ← max);

      {create a new mma: estimate the similarity to others}

20:   aisim-jsim ← merge alignments ;

non-collinear tf-map alignments
the existence of regulatory elements that are conserved in different order among related regulatory regions has been documented in a few cases, specially in enhancers  <cit> . the identification of these regulatory rearrangements is very difficult at the sequence level. we have here introduced some subtle changes in the pairwise tf-map alignment algorithm shown before to deal with non-collinear alignments. the aligned tfbss in such mmas are therefore not necessarily located in the same relative order in every map.

definition
let t be an alignment between two tf-maps m <dig> and m <dig> formally defined as a correspondence t = {, ..., }  <cit> . let  and  be two matches in t, not necessarily contiguous, with i <k. then, we define the collinearity or non-collinearity of t in terms of the partial order between j and l, for all the match pairs of t as:

 <dig>  if j <l then t is a collinear alignment

 <dig>  if j > l then t is a non-collinear alignment ).

the generalization of this definition for k >  <dig> tf-maps is trivial ).

algorithm
the non-collinear matches shown in figure  <dig> can not be detected in the basic pairwise tf-map alignment algorithm  <cit> . let a and b be two tf-maps in which two matches could form a non collinear alignment . the normal implementation fills the matrix in row by row, from top to bottom .

according to this, when the first match is being processed , the second one  is not yet available . conversely, when the second match is processed, the first one is not accessible as the basic algorithm only allows the search for best previous aligned elements in the list of computed values that are in the area delimited by the current match .

to overcome such a limitation, we propose to compute the optimal values of the matrix s following a different order, to allow the second element  to be visible when the first one is being processed . a diagonal filling of the matrix calculates first the match between circles .

thus, this element will be available to compute the best alignment for the match between squares that is processed later. while this strategy still produces the same alignments obtained with the ordinary implementation, non-collinear alignments produced by new combinations of matches can also be constructed.

adjusting the non-collinearity
we have designed a simple mechanism to adjust the frequency of non-collinear aligned sites in the output. an additional parameter c has been introduced in the basic mma algorithm to weight those alignments involving non-collinearity.

let a and b be two tf-maps in which a previous match has been identified ). then, a second match between one element in a and another one in b is being processed ). the dotted lines indicate that such a site in b can be located either on the left or on the right of the circle site in the same map. in the first case, a non-collinear alignment is produced; in the second case, a normal collinear alignment is constructed. the case in which the non-collinear match occurs in a can be similarly defined.

the algorithm to align two mmas must be slightly modified to accomodate the non-collinearity parameter c. the variable z in the computepairwisesimilarity is defined now as:

 z={if→μ|d1−c⋅d2|,c≥1if→μ|d1−d2|.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg6bgecqgh9aqpdagabeqaauaabaqacmaaaeaacqqgpbqacqqgmbgzaeaacqggoaakcqwgebardawgaawcbagaegomaidabeaakiabgyda8iabicdawiabcmcapaqaaiabgkziuigaciab=x7atjabcyha8jabdseaenaabaaaleaacqaixaqmaeqaaogaeyoei0iaem4yammaeyyxictaemiraq0aasbaasqaaiabikdayaqabagccqgg8bafcqggsaalcqwgjbwycqghljyscqaixaqmaeaacqqgpbqacqqgmbgzaeaacqggoaakcqwgebardawgaawcbagaegomaidabeaakiabgwmizkabicdawiabcmcapaqaaiabgkziukab=x7atjabcyha8jabdseaenaabaaaleaacqaixaqmaeqaaogaeyoei0iaemiraq0aasbaasqaaiabikdayaqabagccqggpaqkaagaeiola4cacagl7baaaaa@62ee@ 

the optimal positional conservation between both matches occurs when d <dig> = d <dig>  however, the parameter c is used in the μ, penalty to punish only those matches that do not respect the collinearity of the current alignment ).

informally, if c =  <dig> then both collinear and non-colinear matches are indistinctly combined into the resulting mma. high values of c, however, produce a higher amount of collinear matches into the results. in order to establish formally the behaviour of this parameter, we have counted the number of non-collinear matches in the tf-map alignment of the human and mouse promoters  of the mmp <dig> gene . in figure  <dig>  there is a clear correspondence between the amount of inversions in the mma and the value of c. no inversions are produced for large values of c. identification of non-collinear configurations of tfbss in regulatory regions is poorly known, and only a few cases are documented  <cit> . we recommend, therefore, to use this option very carefully. in addition, we also suggest the use of a small set of matrices to perform the mapping, which can reduce the number of artifacts in the resulting non-collinear mma .

datasets and software availability
the datasets used in this paper are available at  <cit> . an implementation of this algorithm has been written in c and is publicly available at  <cit> . a web server that performs the mapping and the alignment of multiple promoter regions with such an algorithm is accessible at  <cit> .

the input of the program consists of a file that contains the tf-maps to be aligned. the file must be in general feature format  <cit> . options allow to control the values of α, λ, μ, γ and c as well as to display the results in plain format or gff format. the output includes the score and the length of the optimal mma, and the matches in the input tf-maps . a graphical representation of the mma is also displayed using the program gff2ps  <cit> .

RESULTS
the optimal mma of a set of tf-maps is obviously dependant on the values of the α, λ, μ, γ and c parameters. in addition, the optimal parameter configuration is likely to depend on the particular problem to be addressed , and the particular protocol to map the tfbss on the sequences.

results in a previous work  <cit>  indicated that tf-maps alignments are able to characterize promoter regions of co-regulated genes even in absence of sequence similarity. thus, tf-map alignments were shown to detect high-order regulatory signals conserved in a collection of related promoters that were undetectable with current sequence alignment methods. it is important to mention that two or more different tfbss can be aligned if and only if they correspond to the same tf, even though they may not show sequence similarity.

here we have conducted a similar systematic training over an extended set of orthologous promoters to obtain the optimal parameter configuration. in order to verify the ability of mma to identify regulatory elements that are rarely detected in conventional comparisons, we have compared the results to those obtained by several multiple sequence alignment methods. we have focused on two specific examples to show the abilities of mma in the characterization of multiple collinear related promoters. finally, we have characterized non-collinear arrangements of tfbss on an early developmental enhancer conserved in several species of drosophila.

multiple tf-map training
for the pairwise tf-map alignment, we estimated the optimal parameters in a set of experimentally characterized human and rodent gene promoters  <cit> . here we have extended such a dataset by searching the corresponding orthologs in chicken and zebrafish as well. using the refseq  <cit>  gene set as mapped into the ucsc genome browser, we have correctly identified the ortholog in both species, if available. we refer to the resulting set of human-mouse-chicken-zebrafish homologous genes as the hrcz set. this dataset contains  <dig> human-rodent-chicken-zebrafish orthologs,  <dig> human-rodent-chicken orthologs,  <dig> human-rodent-zebrafish orthologs, and  <dig> human-rodent orthologs.

the lack of available collections of experimentally verified tfbss is an important limitation for the evaluation and the training of phylogenetic footprinting systems. despite several databases of annotations and promoter sequences have recently appeared  <cit> , there is not enough regulatory information conserved among species other than human and mouse to train the mma.

thus, we can not repeat the training procedure used in  <cit>  to evaluate the ability of mma to detect conserved regulatory elements at larger evolutionary distances – at which the degree of conservation may be negligible. however, we can use another method also presented in  <cit>  to show that mmas are much more informative than primary multiple sequence alignments.

we first have mapped the tfbss occurrences in the promoter sequences using the collection of  <dig> most informatives matrices in jaspar  <dig>   <cit> . in a previous work  <cit> , we observed a substantial gain of specificity in the detection of real tfbss  when using such a subset of matrices instead of the entire jaspar collection. the original frequency coefficients of the matrices were converted before into log-likelihood ratios, to which we referred as jaspartop <dig> in  <cit> , using the random equiprobability distribution as a background model. a prediction obtained with a given pwm from jaspartop <dig> was accepted if it had a score above 50% of the maximum possible score for such matrix  <cit> .

then, we have compared the mmas obtained in the  <dig> nucleotides of the promoter region of the  <dig> gene pairs from the hrcz set, with the mmas obtained using the same mapping function in fragments of  <dig> nucleotides from intergenic , 5'utr , 3'utr , coding , intronic , and downstream  sequences .

we have computed the average score of the mma on each one of the genomic regions, identifying the alignment that produces the highest score for each orthologous set. we have repeated this test using different combinations of parameters. systematically, the parameters α, λ, and μ were allowed to independently take values between  <dig>  and  <dig> , in incremental steps of  <dig> . at the same time, the parameter γ  was tested between  <dig> and - <dig> with a step of - <dig>  the optimal parameter configuration is considered to be that set of parameter values that better discriminate between promoters and the rest of genomic regions.

we have also performed the multiple sequence alignments of the same regions using the following programs : clustalw  <cit> , mlagan  <cit>  and footprinter  <cit> . clustalw and mlagan perform global multiple sequence alignment.

footprinter performs local multiple sequence alignment. the number of significant motifs  identified by footprinter on each gene region was used to rank the alignments of this program.

results appear in table  <dig>  as expected, nucleotide sequence alignments score the highest in the coding regions , followed by the alignments in the 5'utrs  and in the promoters . only in one case, the 3'utr was the most conserved region among orthologs . the scores of the sequence alignments indicate that promoter regions are less conserved than coding regions.

tf-map and sequence alignments  of different genomic regions between the human, mouse, chicken and zebrafish orthologous promoters in the hrcz set. top <dig> is the number of genes in which the highest scoring alignment is found in a given genomic region. the mma results were obtained with the optimal configuration α = 1; λ =  <dig> ; μ =  <dig> ; γ =  <dig> 

despite this, the optimal collinear mma configuration  scores the highest in the promoter regions . in addition, the average score of map alignments is notably higher than that of the coding regions . only in  <dig> out of  <dig> cases the tf-map alignments score the highest in coding regions. interestingly, while 3'utr sequences in the human-mouse-chicken-zebrafish orthologs are much less conserved than coding regions or 5'utrs, mmas score the highest in them in  <dig> cases. this is consistent with recent investigations about the existence of regulatory motifs in the 3'utr regions of the genes  <cit> . a similar result is obtained in the case of introns: intronic sequences are much less conserved than coding and utr sequences. however, mmas score the highest in intronic regions in  <dig> cases. this fact is noticeable as first introns are also known to often contain regulatory motifs  <cit> .

we have also performed a complementary test to measure the specificity of the tf-map alignments. as a negative control, we have shuffled the orthologous associations in the hrcz set to construct a pool of  <dig> unrelated human-mouse-chicken-zebrafish gene entries. then, the corresponding multiple tf-map alignments of these non-orthologous paired promoters were obtained using the parameters previously optimized. results appear in table  <dig>  the tf-map alignments of unrelated promoters were significantly worse with an average score more than 50% smaller than tf-map alignments that involved "bona fide" orthologous promoters. for instance, the average score of the tf-map alignments among orthologous promoters when using the jaspartop <dig> collection was  <dig>  . in contrast, the score of the tf-map alignments between non-related promoters was  <dig> . the sites in the alignments involving non-orthologous gene promoters may correspond to general regulatory elements present in most core promoters of our dataset.

comparison between average and maximum scores of tf-map alignments of several regions from orthologous genes from the hrcz set and average and maximum scores of tf-map alignments of several regions from randomly shuffled genes from the hrcz set .

to validate this hypothesis, we have analyzed the composition of the tf-map alignments of non-orthologous gene promoters. we have detected an enrichment in tata and caat boxes , which are well known to be part of core promoters. such a bias is not observed in the composition of the alignments of the coding sequences of unrelated genes. these alignments are therefore partially capturing common regulatory elements present in unrelated gene promoters of our dataset. in addition, we also found an overrepresentation  of tfs mainly expressed in the liver . such a trend is not detected in the composition of the alignments of the coding sequences of non-related genes. this enrichment correlates well with the composition of the hrcz set, which contains experimental regulatory annotations from liver-specific genes .

we have performed an additional test to assess the significance of the scores of the mmas. the previous tests have involved alignments of orthologous gene regions of the same type . we have compared now the score of the mmas among orthologous promoters of the same gene in the hrcz set with the scores of the alignments of the same maps in which one tf-map was randomly substituted by the tf-map of another segment of the same gene .

average score of multiple tf-map alignments of groups constituted of orthologous promoters from the hrcz set , introducing one or two non-corresponding orthologous sequences . last row shows the average score of pairwise tf-map alignments that involve each human promoter  and the corresponding rodent region of the same gene  in the hrcz set.

results appear in table  <dig>  the average score of mmas exclusively constituted by promoter maps was  <dig>  . indeed, the average score of the mmas involving only promoter maps was more than 60% higher than alignments in which one of them was substituted by another gene region map . the average score of such alignments dropped even more when a second substitution was permitted .

finally, we analyzed the scores of pairwise tf-map alignments between each human promoter in the hrcz set  and the corresponding orthologous gene regions  in mouse. the average score of the tf-map alignments involving the two promoters was substantially higher  than any other incorrect combination . these results show that orthologous promoter-promoter tf-map alignments are more significant than alignments of any other combination of gene region maps.

promoter characterization
we have selected three particular examples that show the ability of mmas to characterize promoter regions in the absence of sequence conservation. in all cases, we have compared the multiple tf-map alignment to the corresponding multiple sequence alignments, as in the section above, to measure their accuracy to detect the tfbss experimentally annotated on these promoters.

actin α-cardiac gene
actins are highly conserved proteins that are involved in various types of cell motility. the alpha actins are found in muscle tissues and are a major constituent of the contractile apparatus. the actin α-cardiac gene has been identified in many kinds of cells including muscle, where it is a major constituent of the thin filament, and platelets  <cit> .

the promoter of the human and mouse actin α-cardiac genes  has been extensively characterized by experimental means  <cit> . in the abs database  <cit> , the entry a <dig> includes the known orthologous binding sites in the respective human and mouse promoters . the human actc promoter is constituted of three srf sites , a sp <dig> site , and a tata box .

using the refseq gene annotations  <cit> , we have also identified the corresponding orthologous promoters in chicken and zebrafish .

we have then aligned the four promoters and compared the resulting mma with the functional annotations in the abs database. in general, the multiple tf-map alignment of the four orthologous promoters of actc contains many of the known functional sites in human and mouse, detecting as well the corresponding orthologs in the other species.

the mma of the actc promoters and the experimental evidence are shown in figure  <dig> . while the region proximal to the tss is not more dense in predicted tfbss than other regions, most of the aligned elements cluster next to the near tss. in addition, the alignment agrees well with the functional annotation available in human and mouse, providing novel orthologous sites in chicken and zebrafish:

 <dig>  the second srf binding site is correctly identified in human, mouse and also in zebrafish.

 <dig>  a rreb- <dig> site that overlaps the sp- <dig> active site is identified in the mma. rreb- <dig> and sp- <dig> are members of the zinc finger protein family with different binding specificities. however, the consensus of both matrices in jaspar are very similar, being constituted of several occurrences of the motif cccc  <cit> .

 <dig>  a squa site that overlaps the third srf active site is identified in the mma. squa and srf are both members of the mads family  <cit> .

 <dig>  a novel forth srf binding site is located immediately upstream of the experimental first one at the four species.

 <dig>  the tata box is correctly detected in human, mouse and zebrafish as well.

no significant conservation among the sequences was, however, detected in the multiple sequence alignment of the four actc promoters .

myoglobin gene
the myoglobin gene is a member of the globin superfamily and is expressed in skeletal and cardiac muscles. the encoded protein is an haemoprotein contributing to intracellular oxygen storage and transcellular facilitated diffusion of oxygen  <cit> .

the promoter of the myoglobin gene in human  and in mouse  has been experimentally characterized  <cit> . in the abs database  <cit> , the entry a <dig> includes the known orthologous binding sites in the respective human and mouse promoters . the human mb promoter is constituted of a ccac box , a mef- <dig> site  with two surrounding e-boxes  and a tata box . using the refseq gene annotations  <cit> , we have also identified the corresponding orthologous promoters in chicken and zebrafish .

we have then aligned the four promoters and compared the resulting mma with the functional annotations detailed above. the multiple tf-map alignment of the four orthologous promoters of mb contains several of the functional sites in human and mouse, detecting some of the orthologs in the other two species. the output coverage is again very small.

the mma of the mb promoters and the experimental evidence are shown in figure  <dig> . most of the aligned elements are present next to the tss, while this spatial trend is not observable in the predictions at each promoter. the alignment also contains several of the functional human and mouse sites, providing their counterparts in chicken and zebrafish:

 <dig>  a rreb- <dig> site that overlaps the functional ccac box is identified in the mma. in fact, the rreb- <dig> matrix consensus in jaspar represents an a/c rich area that contains the ccac motif  <cit> .

 <dig>  the tata box is correctly detected in the four species.

the multiple sequence alignment of the four mp promoters did not reveal any significant conservation .

even-skipped stripe  <dig> enhancer
proximal promoters are adjacent to the gene. enhancers, however, are other type of regulatory regions  positioned several kilobases upstream or downstream of the regulated gene. such elements can function in either orientation, being distance and position independent  <cit> . the regulatory logic of enhancers is different from the promoters, allowing a great plasticity in the arrangement of the tfbss . enhancers are constituted of multiple binding sites to recruit four or five different tfs that define space and time specific aspects of gene expression  <cit> ).

the body patterning of early embryo in drosophila is governed by a hierarchy of maternal and zygotic genes. in particular, maternal and gap gene factors together control pair rule gene expression in  <dig> alternating stripes, which in turn regulate segment polarity and homeotic gene expression in  <dig> stripes  <cit> . the stripe  <dig> enhancer of the pair-rule gene even-skipped has been experimentally characterized in several species of drosophila, showing considerable evolutionary change in the binding site composition and spacing  <cit> . such annotations have been extensively used to train several computational regulatory module prediction approaches  <cit> .

the stripe  <dig> enhancer of the even-skipped gene , af <dig> , af <dig> , af <dig> ) is governed by  <dig> tfbss of four tfs  <cit> :  <dig> activators  and  <dig> repressors . we have obtained from transfac  <dig>   <cit>  the pwms to recognize bicoid , hunchback  and kruppel sites . we will focus therefore only on the occurrences for these three tfs. the positions of the experimentally verified binding sites in the drosophila melanogaster enhancer are  <cit> : bicoid , hunchback  and kruppel . we have obtained the tf-maps of bicoid, hunchback and kruppel in these enhancers . we have then aligned the four enhancer maps allowing non-collinear rearrangement in the alignments . we have compared the resulting mma with the available functional annotations. matches to one of the elements in overlapping sites for activators/repressors are considered to be correct. the mma of the four orthologous enhancers and the experimental evidence are shown in figure  <dig> 

despite we trained our algorithm specifically on human-mouse-chicken-zebrafish genes , the mma of the four drosophila enhancers still agrees well with the regulatory annotation available for drosophila melanogaster, providing the orthologous known sites in the other species and two additional putative non-collinear rearrangements :

 <dig>  five out of six known kruppel sites are correctly identified in the four enhancers.

 <dig>  three out of five known bicoid sites are identified in the four enhancers.

 <dig>  two out of the three hunchback sites are identified.

the mma contains a non-collinear rearrangement between the hb <dig> site and the kr <dig> site in d. erecta . the hb <dig> site is not detected in d. erecta and d. pseudoobscura in the conventional sequence alignment of the four enhancers  <cit> . non-collinearity is also observed between the bc <dig> site and a hypothetical kruppel site predicted in d. pseudoobscura.

discussion
among the many codes that shape the sequence of the genomes, the one regulating their transcriptional activity remains remarkably elusive. indeed, it is usually impossible to infer the specific spatial and temporal expression pattern of a given genomic locus simply from the analysis of the sequences presumably involved in its regulation. it is well known that the initiation of the transcription by rna polymerase ii requires the interaction between this enzyme and a number of tfs that bind to the dna sequence in the promoter region upstream of the transcription initiation site. while transcription factors bind short dna motifs on the promoter region, these motifs are often degenerated, and their effective recognition by the factors is dependent on the structural conformation of the region harboring them.

as a result of these and other circumstances, the relation between primary sequence and regulatory code is far from being trivial. indeed, recent genome-wide studies based on chromatin immunoprecipitation  of dna bound by promoter-associated proteins, followed by either direct sequencing of the bound region or hybridization in a tiling array  underlined the complexity of this relationship. often no occupancy by a given tf has been experimentally detected for many genomic sites where binding motifs can be computationally predicted  <cit> . therefore, promoter regions of genes sharing similar expression programs often do not show nucleotide sequence conservation.

to overcome this limitation, we introduced recently a novel approach based on abstracting the nucleotide sequence of gene promoters and replacing it by a sequence of labels, each label denoting, at a specific location on the primary sequence, the tf for which a known binding site has been predicted. we used the term tf-maps for denoting such sequences of labels  <cit> . pairwise alignments between tf-maps can occasionally reveal underlying configurations of tfbss shared by co-regulated genes, which escape detection by typical nucleotide sequence comparisons.

here, we introduce the multiple tf-map alignments. multiple comparisons increase the power to detect the underlying features common across the compared elements by increasing the signal to noise ratio. multiple sequence comparisons, in particular, have been used to identify regulatory motifs and coding exons in genomic sequences  <cit> . the rationale is that since the probability of mutation is lower in functional than in non-functional regions, by increasing the number of sequences in the comparisons, nucleotide divergence increases in non-functional regions proportionally more than in functional ones, producing a sharper contrast in the sequence conservation landscape  <cit> . a similar rationale can be applied to the multiple-tf map alignments. tf-maps, obtained usually through computational predictions of binding sites, contain many non-functional elements . one expects that, among multiple tf-maps corresponding to genes with similar expression patterns, only the functional elements  will be conserved.

indeed, as we have shown, the main effect of the multiple map alignments  is the dramatic reduction in the number of predicted tfbss that typically result after a pwm-based search . for instance, we aligned  <dig> human sites to  <dig> mouse sites,  <dig> chicken sites and  <dig> zebrafish sites mapped in the respective actin α-cardiac gene promoter orthologs. the resulting multiple tf-map alignment included only  <dig> tfbss, which approximately represents a 13-fold reduction. in addition, most aligned sites in the mmas are concentrated in the proximal promoter region of each gene . this gain in specificity is not simply due to the selection of an arbitrary set of non-overlapping tfbss, since many experimentally annotated tfbss on these promoters are successfully covered by the resulting mmas.

we have trained our approach on a human-mouse-chicken-zebrafish dataset mostly constituted of tissue-specific genes, because of the enrichment of such a promoter class in the regulatory annotation literature  <cit> . a recent study states, however, that the classical tata-box promoter architecture of such genes represents a minority of the set of mammalian promoters in human and mouse  <cit> . the structure of tata-independent promoters occurring within a cpg island is more flexible and evolvable. we consider, however, the evaluation of the mma presented here is still correct as our approach does not distinguish the tata-box and the other core promoter elements from the rest of tfs during the alignment. mmas can therefore also deal with flexible regulatory rearrangements . in addition, in a previous study the tf-map alignments showed to be also effective in more general regulatory datasets that contained both classes of promoters  <cit> . map alignments were introduced in the early 1980s to compare restriction enzyme maps  <cit> . several improvements on the basic pairwise algorithm were developed since then  <cit>  but this is the first time a multiple alignment implementation is proposed. in practice, guaranteeing the optimal solution to the multiple sequence comparison problem is difficult. our approach is based on the progressive alignment paradigm, which produces not necessarily optimal alignments despite the results are biologically meaningful  <cit> . here we have generalized the data structures and algorithms shown in a previous work for the pairwise comparison  <cit> , to deal with multiple maps without adding supplementary complexity. thus, the cost of the final implementation is proportional to the number of pairwise comparisons performed by the progressive approach.

in addition, we have redefined the way in which the dynamic programming matrix is processed in order to capture non-collinear configurations in the maps of regulatory elements. we have shown an example in which non-collinearity helps to find rearrangements of tfbss that can not be detected using a conventional linear approach. despite it is actually very difficult to train the non-collinear algorithm due to the lack of abundant experimental annotations, we believe this kind of approach will be very important in the future as collinearity can not be always assumed in regulatory regions  <cit> .

the tf-map alignments are able to unveil characteristic regulatory patterns that are difficult to be detected at the sequence level. to test this hypothesis, we have used collections of position weight matrices as external mapping functions. however, the tf-map alignment algorithm can also deal with other kind of regulatory maps as those produced by pattern discovery programs. for instance, we have used the meme program  <cit>  to discover novel motifs  in the promoters of the actin α-cardiac and myoglobin genes. we have then performed the mma of such patterns. the input motifs and the resulting alignment in both cases are shown in figure  <dig>  such an approach can be useful to enrich the results obtained when the same promoters are aligned using jaspar .

while here we have focused on tf-maps, the algorithms and software that we have developed can also be applied, in principle, to any other problem in which the primary sequence can be annotated with higher-order features . thus, comparisons between the annotations  can reveal more biological clues. examples could include comparisons between exons/introns that have been annotated with matches to binding motifs for splicing regulatory factors  <cit> . the mmas, in this case, could reveal classes of exons whose splicing is regulated in a similar way. or comparisons between protein sequences which have been annotated with functional  or structural domains. the mmas could help here to infer functional super-families. or comparisons between entire genomes, which have been annotated with the biological functions  terms  <cit>  of the genes across the genomes). the mmas could help to investigate whether function and chromosomal localization are related.

CONCLUSIONS
in general, as the functionality of the primary sequence becomes better understood, more innovative alignment techniques between higher-order representations of the sequences, such as the approach we presented here, will become increasingly useful to uncover the features that underlie common functionality.

authors' contributions
eb, rg and xm conceived and designed the experiments. eb performed the experiments. eb, rg and xm analyzed the data. rg contributed reagents/material/analysis tools. eb, rg and xm wrote the paper.

