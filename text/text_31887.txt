BACKGROUND
reconstruction of the history of change in a protein family provides valuable insight into processes of mutation and selection. evolutionary reconstruction can reveal the context and order in which changes occurred, distinguish between shared history and convergent evolution, and identify interacting mutations that together result in a functional shift. further, considering protein evolution in the context of species evolution makes it possible to correlate mutations with metabolic, physiological, and morphological changes, indicating which mutations are likely to be functionally important.

despite tremendous advances in molecular evolution and phylogenetics, methods for reconstructing the evolutionary history of multidomain families are lacking. genes that encode this large and important class of proteins are characterized by a mosaic of sequence fragments that encode structural or functional modules, called domains. multidomain families are central to the two-component histidine kinase signaling systems that are the backbone of cellular communication in prokaryotes. in metazoans, the expansion of multidomain families drove the evolution of cell signaling and cell adhesion. in human health, multidomain families are implicated in tissue repair, apoptosis, inflammation response, antigen recognition, and innate immunity.

multidomain families evolve via domain shuffling , a process that includes insertion, internal duplication, and deletion of domains. because gain, loss, or replacement of a domain that encodes specificity can result in an immediate and dramatic change in function, domain shuffling enables rapid evolution of functional variation within gene families that perform core molecular functions.

understanding the evolution of multidomain protein function requires understanding how domain architectures change over time. simple domain architecture  models have been used to achieve the computational efficiency necessary for genome-scale analyses  <cit> , and work cited therein]. in the da model, a multidomain sequence is treated as a set or sequence of tokens  representing its domain composition. the da model has been used to study domain co-occurrence and variation in the domain repertoire across taxonomic lineages  <cit> , plasticity in domain order  <cit> , domain occurrence graphs  <cit> , and domain promiscuity, i.e., the propensity of a domain to co-occur with many other domains  <cit> .

in a phylogenetic context, patterns of domain gain and loss have been investigated by treating domain architectures as binary character data; a domain is either present or absent in a given architecture. given a tree with architectures on the leaves, wagner and dollo parsimony have been used to infer ancestral domain architectures and the history of domain gains and losses  <cit> . inferring multidomain trees by applying standard phylogenetic methods to domain architectures treated as character data has been proposed, either by calculating the pairwise edit distance between architectures  <cit>  or by employing a parsimony model  <cit> . however, these approaches have not been applied in practical settings. approaches to infer ancestral states using domain phylogenies have also been proposed  <cit> , but these models have resulted in np-complete optimization problems.

the benefits of the da model include computational and conceptual tractability. however, it relies on several unrealistic simplifying assumptions: first, the da model ignores sequence variation within domain superfamilies, treating all instances of a domain family as indistinguishable. second, the da model captures change in the form of domain gain and loss, but is not sufficiently powerful to infer the events that caused the change. for example, a domain gain could result from a domain insertion or an ancestral duplication followed by losses. without an explicit event model, it is not possible to distinguish between these two scenarios. third, the da model will make incorrect inferences and underestimate the degree of domain shuffling activity in the presence of parallel gains or losses, as illustrated in figure  <dig> 

here, we introduce a reconciliation-based framework for multidomain event inference. reconciliation is the process of inferring evolutionary events by comparing the phylogenies of entities at two levels of biological organization. given a rooted, binary gene tree, a rooted, binary species tree, and a mapping from extant genes to extant species, reconciliation seeks to infer the association between ancestral genes and ancestral species and the optimal history of gene duplications, gene losses, and horizontal gene transfers  that explains this association.

reconciliation for the duplication-loss  model was first proposed by goodman et al.  <cit>  and formalized by page  <cit>  for a parsimony model. hallett and lagergren  <cit>  introduced models with transfers and proved that reconciliation under the duplication-transfer  model is np-complete. the field has expanded with further algorithmic development for both the dl and dt models  <cit> , and work cited therein]. transfers introduce complications that do not occur in a duplication-only model. transfers introduce degeneracy: there may be more than one optimal combination of transfers, duplications, and losses that gives rise to the same pattern of tree incongruence. some reconciliation programs generate a single solution, selected at random. more recently, programs that generate all solutions have become available  <cit> . transfers also introduce temporal constraints: a transfer can only occur between contemporaneous taxa. an event history is only biologically valid if it is temporally feasible; that is, if there exists a partial ordering of the nodes in the species tree that satisfies the temporal constraints imposed by the transfers in the inferred event history. there is no known constructive algorithm for generating minimum cost, temporally feasible dtl-reconciliations. instead, dynamic programming is used to construct candidate minimum-cost reconciliations, which are then tested for temporal feasibility. a restricted model that only considers transfers between contemporaneous species, reviewed in  <cit> , avoids this problem, but requires a tree with branch lengths in units of time, which are frequently difficult to estimate.

here we present an event inference algorithm for reconstructing domain evolution. we define a set of domain shuffling events that includes domain duplication, domain loss, domain insertion within the same genome, and horizontal domain transfer between different genomes. we also consider a restricted model that allows domain insertion, but not horizontal transfer of genes or domains. in the context of this model, the events in the history of a multidomain family are inferred by reconciling a domain tree with a gene tree that has been previously reconciled with a species tree. this procedure also yields the timing of those events relative to gene and species divergences, as well as ancestral domain content. consideration of the co-evolution of domains with both genes and species enables our algorithm to distinguish between domain losses and gene losses, and between domain insertions within the same genome and domain transfers across genomes. further, our algorithm can determine whether a domain tree co-divergence is due to a species divergence  or a gene divergence . in order to ensure the biological validity of the inferred evolutionary histories, we present criteria for temporal feasibility that capture the complex temporal constraints associated with reconciliation involving domains, genes, and species. the implementation of these algorithms is freely available at http://www.cs.cmu.edu/˜durand/notung. to illustrate the inferential power of our approach, we apply our methods to the membrane associated guanylate kinase  family.

RESULTS
model
given a rooted, binary gene tree, tgs = , a rooted, binary domain tree, td = , and a mapping, mldg from l, the leaves in the domain tree, to l, the leaves in gene tree, the goal of domain shuffling event inference is to infer the association between ancestral taxa in the species, gene, and domain trees and the set of events that best explains this association. in our model, we define the following set of events:

co-divergence  a bifurcation in the domain tree that arose through a bifurcation in the gene tree. the gene tree bifurcation may have arisen via speciation , gene duplication , or gene transfer .

duplication a single domain is copied resulting in two separate copies of the domain within the same gene.

loss a domain is deleted from the gene .

domain insertion  a new copy of the domain is inserted into a different gene within the same genome.

horizontal domain transfer a new copy of a domain is inserted into a gene in a different genome.

reconciliation is the process of inferring mdg : vd → vg, the association between ancestral domains and ancestral genes. the result is a reconciled domain tree, tdg = , in which every node, d ∈ vd, is annotated with mdg = g, where g is the ancestral gene that contained domain d; ld, the domains lost on the edge leading to d; and e, the event that caused the divergence at d. co-divergences and domain duplications correspond to internal nodes in tdg. each insertion and transfer corresponds to an edge,  ∈ ed, where d <dig> is the inserted  domain and d <dig> is the donor domain. in a parsimony framework, the cost of a reconciliation is κ=∑∀εκε⋅nε, where κε is the cost of event ε and nε is the number of occurrences of ε in the reconciliation.

formally, we define the problem of inferring a domain event history as follows:

domain event inference with transfers 
domain events: {cs,cd,ct,d,t,i,l}.

input: a rooted, binary domain tree, td = ; a rooted, binary, dtl-reconciled gene tree, tgs; and a leaf mapping, mldg:ltd→ltgs.

output: the set of all temporally feasible, domain shuffling histories tdg that minimize

 κ=κdnd+κtnt+κini+κlnl. 

solving de-dtl entails challenges that do not arise in gene tree-species tree reconciliation. first, when a domain co-divergence is inferred, additional information is required to determine whether the co-divergence is the result of a speciation, a gene duplication, or a gene transfer. second, domain insertions are horizontal events between genes in the same species. in contrast, domain transfers are horizontal events between different species. an extra test is needed to ensure that the correct event is inferred. third, a missing taxon in the domain tree may be due to a domain loss or the loss of a gene. if the latter, then the loss should not be included in the event cost of the domain-gene reconciliation. finally, when testing for temporal feasibility, temporal constraints arising from gene transfers, domain transfers, and domain insertions must all be considered.

notation: given a tree ti = , ρi designates the root of the tree. for nodes u, v ∈ vi, p denotes the parent of v and l and r denote the left child and right child of v, respectively. if u is on the path from v to ρi, then u is an ancestor of v, designated u ≥i v, and v is a descendant of u, designated v ≤i u. if v≱iu and u≱iv, then u and v are incomparable, designated u≶iv. given a reconciled gene tree tgs and a reconciled domain tree tdg, s = mgs  is the species s ∈ vs that contained gene g ∈ vg and g = mdg  is the gene g that contained domain d ∈ vd. the species containing d is s = mds , where mds  = mgs ).

domain shuffling with transfers and insertions
here, we present an algorithm for the domain event inference problem for multidomain families evolving according to a locus model  <cit> , in which novel domain arrangements arise through internal duplication, loss, and insertion of domains into an existing gene. this restriction justifies the premises that the history of the family as a whole can be described by a tree. this assumption is consistent with the existence of promiscuous domains that lend themselves to insertion in new chromosomal environments  <cit>  and reports of young genes that arose through duplication of existing genes, followed by acquisition of additional domains  <cit> . moveover, domain insertion into an existing gene is more likely to be viable since all regulatory and termination signals required for successful transcription are present. in addition, we assume that domain insertions and transfers only involve domains within the same gene family. in other words, for a given domain family, we assume that the domain instances that appear in the gene family under consideration form a clade in the domain tree.

in the context of this model, we introduce an algorithm  for inferring domain events by reconciling a domain tree with a gene tree that has been previously reconciled with a species tree.

algorithm  <dig> de-dtl

input: ts; tgs; td; mldg:ltd→ltg


output:
tdg1…tdgf,κ

 <dig>     tgs*=addloss

 <dig>     costcalcρd,tgs*,ts

 <dig>     tdg1…tdgm=tracebackρd,tgs*,ts

 <dig>     tdg1…tdgf=checkfeasibilitytdg1…tdgm

the algorithm proceeds in four steps. first, an additional data structure, tgs*, is constructed. tgs* consists of an extended reconciled gene tree that contains additional nodes and leaves representing taxa that are missing due to gene losses. this additional data structure is used to determine whether or not the donor and recipient of a horizontal event are in the same genome or a different genome, and to distinguish between domain losses and gene losses. next, candidate reconciliations are generated in two passes over the domain tree. in the first pass, the dynamic program costcalc visits each d ∈ vd in post-order and determines the cost of the subtree rooted at d for each possible event at d. this information is stored in the cost and event tables, kd and hd. in the second pass, traceback traverses td top-down to generate candidate reconciliations from the information stored in the cost and event tables. in general, there may be more than one optimal set of domain events that reconcile td with tgs. the second pass generates all candidate event histories of minimum cost, tdg1…tdgm, where m is the number of candidate histories. in the final step, each candidate history is tested for conflicting temporal constraints. the output is the set of all temporally feasible histories, tdg1…tdgf, where f is the number of feasible, optimal reconciliations.

our domain shuffling event inference algorithm is based on the existing framework for gene-species tree reconciliation with a dtl model  <cit> , but contains additional features to address the complications that arise in reconciliation with three nested trees. we discuss these features in detail, here.

addloss: we construct tgs*=vg*,eg* from tgs by placing pseudonodes on each edge , g) ∈ eg, on which losses occurred. each pseudonode represents an ancestral gene that was present in the species lineage from mgs ) to mgs , but cannot be observed because of a gene loss in one child of each of the intervening species. let s1⋯sl be the species between mgs  and mgs ) that are absent from tg due to gene losses. we insert pseudonodes ϕs1⋯ ϕsl between g and p such that ϕs1becomes the new parent of g, ϕsi is the parent of ϕsi−1for i =  <dig> ⋯ l, and p becomes the new parent of ϕsl. for each pseudonode, ϕs, we attached a pseudoleaf, λs, where s′=ls, if mgs≶l, and s′=rs, otherwise. in other words, s' is the child of s that is not on the path from mgs  to mgs ) and s′,s is the species tree branch on which the loss occurred. note that a pseudoleaf in tgs* may correspond to an internal node in ts, because if a gene is missing from an entire clade of species, then the most parsimonious explanation is a single gene loss in the root of the clade.

the addition of pseudonodes allow for more precise estimation of the association between a node in the domain tree and a lineage in the gene tree. consider, for example, the evolutionary history of the hypothetical family shown in figure  <dig>  and the reconcilied gene and domain trees for this family, shown in figure  <dig>  we can infer that the ancestral domain associated with node u in td was in a genome on the eudicot-rosid lineage because of the position of the pseudonode ϕr, between u and d1_g1_a. without the pseudonode, it would not be possible to determine whether or not u predates the divergence between apple and berry.

pseudoleaves are also used to distinguish between gene and domain losses. the domain tree in figure  <dig> has three stubs indicating missing taxa. two of these are associated with gene losses , indicating that only one of the missing domains is due to a domain loss .

costcalc: once the extended reconciled tree has been constructed, the first pass takes td and tgs* as input and calls costcalc for each d ∈ vd in post-order . the gene association and event at d depend on gl and gr, the genes associated with the children of d. the outer loop in cost calc enumerates all possible  pairs, and for each pair determines the gene associations and events implied by mdg) = gl and mdg ) = gr . the cost of each configuration is stored in kd. a tuple consisting of the event and the mappings of the children of d are stored in hd. the logic for these assignments is as follows.

domain duplication is the only event that results in children mapped to comparable genes. thus, if gl and gr are comparable, then ε=d and the gene associated with d is g = lca. horizontal events and co-divergences both result in gl≶gr. therefore, if gl and gr are incomparable, both possibilities are considered. for the co-divergence case, the associated gene is again g = lca. the type of co-divergence is determined by inspecting the gene event associated with gene node g in tgs*. for the horizontal case, the event is a domain insertion if the donor and recipient gene are in the same genome and a domain transfer if they are in different genomes. for both insertions and transfers, either gl or gr may be associated with d; i.e., either gl or gr could be the donor of the domain.

for each scenario, the cost of domain losses must also be determined, excluding cases where domain loss is due to gene loss. recall that pseudonodes correspond to gene losses. therefore, the number of losses, nl, on the edge from d to p is the number of non-pseudonodes between g = mdg and gp = mdg). if g and gp are not pseudonodes, then this quantity is Δ − Δ −  <dig>  where Δ  is the depth of g in the original gene tree, tg. however, if g is a pseudonode, ϕ, then Δ  is undefined. we define Δ  to be the depth of the first non-pseudonode ancestor of ϕ in tgs*. in other words, Δ  = Δ , where u ≥g ϕ and there exists no v ∈ vg, such that u ≥g v ≥g ϕ. this effectively jumps over all pseudonodes between ϕ and u. if g is a pseudonode and its first non-pseudonode ancestor is a loss, then directly using the depth of the first non-pseudonode ancestor will fail to count this loss. in this case, the number of losses is incremented by one . no such correction is needed when gp is a pseudonode.

this formulation allows for efficient calculation of the number of losses under each scenario considered in costcalc. if e is a co-divergence, then the number of losses is  − Δ  − 1) +  − Δ  − 1). if e is a duplication, gl, gr, and g should all be at the same depth, and the number of losses is  − Δ ) +  − Δ ).

traceback: once the first pass is complete, the cost and event tables are filled for each node in td. the traceback algorithm constructs a minimum-cost reconciliation using these tables in a pre-order traversal. at every node d ∈ vd, the appropriate tuple in the event table hd is used to assign an event to e and determine the labels of the genes associated with the children of d. the losses that occurred between d and p are inferred in a climbing procedure  <cit> . for each ancestral node g that is missing between mdg  and mdg), a loss is inferred in g', the child of g that is incomparable to mdg. if g is a pseudonode in tgs, then g' is a gene loss, λs. otherwise, a domain loss in g' is inferred.

algorithm  <dig> de-dtl: costcalc

input:tgs*; td; mldg:ltd→l

output: kd, hd∀d∈vd; ν

costcalc {

 <dig> if d ∈ l {

2    for each g∈vg* {

3        if mldg≶g {table }

4            else {

5                nl=Δmldg-Δ

6                table

7            }

8        }

9    return

 <dig> }

 <dig> costcalc), costcalc)

 <dig> for each gl,gr∈vg*×vg* {

 <dig> g = lca

 <dig> nl=Δgl+Δgr-2⋅Δg+1

 <dig> if { nl + + }

 <dig> if { nl + + }

 <dig> if not gl≶gr {

 <dig>     // duplication case;

 <dig>     ε←d

 <dig>     nl=nl+2

 <dig>     table

 <dig> }

 <dig> else {

 <dig>     // co-divergence case;

 <dig>     if e=dε←cd           // duplication

 <dig>     else if e=tε←ct   // transfer

 <dig>     else { ε ← cs }                     // speciation

 <dig>     table

 <dig>     // domain insertion or transfer case;

 <dig>     if mgs  = mgs {          // same genome

 <dig>         // domain insertion case;

 <dig>         table      // gl to gr

 <dig>         table     // gr to gl

 <dig>     } else if mgs≶smgsgr{

 <dig>         // domain transfer case;

 <dig>         table // gl to gr

 <dig>         table // gr to gl

 <dig>     }

 <dig>   }

 <dig> }

table {

 <dig> 
κ←κ+klgl+krgr+κl⋅nl


 <dig> ifκ<kd {

 <dig>     kd←κ

 <dig>     hdg←listε,gl,gr

 <dig> } else ifκ=kdg { list ) }

 <dig> }

if there is more than one optimal candidate reconciliation, td is traversed repeatedly until all minimum cost histories have been generated. the traceback requires no modification to address reconciliation on three levels and is essentially the same as the traceback algorithm for gene tree-species tree reconciliation, as described in  <cit> .

checkfeasibility: once all candidate reconciliations have been returned, their temporal feasibility is checked to ensure that each solution is valid. this requires criteria for temporal feasibility that accommodate the interplay of domain evolution with gene and species evolution. to be temporally feasible, an inferred domain event history must satisfy two criteria. first, it must be possible to assign a timestamp to every species tree node, such that the timestamps are consistent with the temporal constraints imposed by the combined set of gene and domain transfers. second, it must be possible to assign a timestamp to every gene tree node, such that the timestamps are consistent with the temporal constraints imposed by the combined set of domain transfers and domain insertions.

for the first criterion, we introduce a species timing graph, gts=vts,ets, in which the nodes represent species  and the edges represent temporal constraints introduced by gene and domain transfers, as well as the temporal relationships imposed by directed tree edges. if gene g is horizontally transferred from species s <dig> to s <dig>  then every domain in g is also implicitly transferred from s <dig> to s <dig>  thus, every gene transfer, , corresponds to one or more edges in the domain tree. let Λg⊂eg* and Λd ⊂ ed be gene and domain transfer edges in tgs* and tdg, respectively, and let Λg- be the set of edges , such that ∃ ∈ Λg, where g <dig> = mdg, g <dig> = mdg. then, Λg-1∪Λd represents all the temporal constraints arising from horizontal transfers of both genes and domains.

the temporal constraints on species are encoded in gts by adding edges to ets that represent the following three temporal constraints:

 <dig> if species si = p, then si must have predated sj. ∀ ∈ es, add  to ets.

 <dig> if a transfer from species si to species sj occurred, then si and sj must have co-existed. further, the parent of sj must have predated si, and vice versa. ∀∈Λg-1∪Λd, add , sj) and , si) to ets, where si = mds and sj = mds.

 <dig> if two transfers occur in the same lineage in the reconciled domain tree , then the species corresponding to the donor and recipient of the more ancestral event must have occurred no later than the donor and recipient species of the more recent event. let  and  be a pair of transfers in Λg-1∪Λd, such that d2≥dd1′. then s <dig> = mds and s <dig> = mds must have occurred no later than species s1′=mdsd1′ and s2′=mdsd2′. add , s1′), , s2′), , s1′), and , s2′) to ets.

note that the third constraint considers all pairs of comparable transfers. when mapping gene transfer events to the reconciled domain tree, each pair of transfers that is comparable in tg corresponds to at least one pair of edges in Λg- that is comparable in td.

for the second criterion, we construct a gene timing graph, gtg=vtg,etg, in which the nodes represent genes and the edges represent temporal constraints implied by domain transfers, Λd, and insertions, ○d, where ○d ⊂ ed denotes the set of domain insertions in tdg. the nodes in gtg are the nodes in tgs*, including pseudonodes . edges are added to etg to represent the following three temporal constraints:

 <dig> if gene gi = p, then gi must have predated gj. ∀∈eg*, add  to etg.

 <dig> if a domain was transferred or inserted from gene gi to gj, then gi and gj must have co-existed. further, the parent of gi must have predated gj and vice versa. ∀ ∈ {, mdg) |  ∈ Λd ∪ ○d}, add , gj) and , gi) to etg.

 <dig> let  and  be domain insertions and/or transfers in Λd ∪ ○d, such that d2≥dd1′. then g <dig> = mdg  and g <dig> = mdg must have existed no later than g1′=mdgd1′ and g2′=mdgd2′. add , g1′), , g2′), , g1′), and , g2′) to etg.

a domain event history is temporally feasible iff both timing graphs are acyclic. if either graph contains a cycle, then the candidate history is infeasible and is not reported. a modified topological sorting algorithm in Θ   <cit>  is used to test for cycles in gt.

complexity
our algorithm infers domain shuffling events in polynomial time. addloss constructs tgs* by adding pseudonodes to tgs. the number of pseudonodes that can be added to the edge above a node in tgs is at most hs, where hs is the height of ts. therefore, the complexity of addloss is o|vg*|=ohs|vg|. costcalc visits each domain node d ∈ vd and loops through all pairs of gene nodes gl,gr∈vg*×vg*. since the calculations for each combination of d, gl, and gr requires only constant time, the total complexity is o|vd||vg*|2=o|vd|hs2|vg| <dig> 

traceback constructs a single candidate solution in a preorder traversal of the domain tree. looking up the event, the number of losses, and mapping of each node requires constant time. for each node d ∈ vd, the losses between d and p are calculated by climbing from mdg to mdg). this requires ohg* time for each d, where hg* is the height of tgs*. therefore, the total complexity for returning a single condidate reconciliation in the second pass is ohg*|vd|. since the number of pseudonodes added to an edge in tgs is bounded by hs and there are at most hg nodes that are not pseudonodes contributing to hg*, hg*≤hshg. as a result, the complexity of the second pass is o.

to determine whether a candidate solution is temporally feasible, checkfeasibility tests both the gene and species timing graphs for cycles, using a topological sorting algorithm that runs in o.

for the species timing graph, vts=vs. the number of edges in ets depends on the three constraints described in the previous section:

 <dig> |es| edges are added to ets, one for each species tree edge.

 <dig> two edges are added to ets for each transfer in Λg-∪Λd. this results in the addition of at most 2|ed| edges because |Λg-∪Λd|<|ed|.

 <dig> four edges are added to ets for every pair of comparable transfers in Λg-∪Λd. since the number of pairs is bounded by |ed| <dig>  the number of added edges is bounded by 4|ed| <dig> 

combining all three constraints, the complexity of cycle checking in the species timing graph is o. because |vs| = o and |ed| ≥ es|, |ed| <dig> is the dominant term. therefore, the complexity can be written as o.

for the gene timing graph, vtg=vg* and the number of edges in etg depends on the three previously described constraints. the first constraint contributes |eg*| edges to etg. in the worst case, the second and third constraints contribute the same number of edges for the gene timing graph as for the species timing graph, that is o and o. thus, the complexity of cycle checking in the gene timing graph is o|vg*|+|eg*|+|ed|+|ed| <dig>  recall that |eg*|=o|vg*|=ohs|vg|. because |ed| ≥ |vg| and |ed| ≥ hs, this complexity can be written as o|ed2|.

domain shuffling with insertions only
the de-dtl model includes horizontal transfer of both genes and domains and is suitable for reconstructing the history of domain shuffling events in species that accept foreign dna. however, this model is not appropriate for analysis of multidomain families in species that do not participate in genetic exchange with other species. for such families, we also consider domain shuffling inference for the restricted model without transfer events. this model is particularly well-suited to the large and complex multidomain families in vertebrates  <cit> , in which hgt is thought not to occur.

domain event inference without transfers 
domain events: {cs,cd,d,i,l}.

input: a rooted, binary domain tree, td = ; a rooted, binary, dl-reconciled gene tree, tgs; and a leaf mapping, mldg:ltd→ltg

output: the set of all temporally feasible, domain shuffling histories tdg that minimize

 κ=kdnd+κini+κlnl. 

the overall structure of the algorithm for de-dl is the same as for de-dtl, i.e., alg.  <dig>  however, since transfers are not allowed, the input gene tree must be reconciled with a species tree under the dl model, not the dtl model. an extended gene tree, tgs*, is constructed using the same procedure as before. with minor modifications, alg  <dig> generates solutions to the de-dl problem. in the co-divergence case, line  <dig> is omitted to exclude co-divergences with gene transfers ct from the event set. the domain transfer case  is eliminated altogether. the second pass is identical for both problems, with the exception that transfers do not appear in the cost and event tables.

the worst-case time complexity for costcalc is the same as in de-dtl, but because domain transfers are not considered and domain insertions are only allowed between genes in the same species, the number of mappings that can be considered is greatly restricted. this suggests a faster run-time in practice.

determining temporal feasibility is a simpler procedure, since only the gene timing graph must be constructed and tested for cycles. the complexity for gene tree timing graph is o.

case studies
here we demonstrate the practical application of our approach using several examples from the membrane-associated guanylate kinase  family  <cit> .

the maguks are multidomain scaffolding proteins  that play important roles in cell-cell communication and adhesion including mediating cell polarity  <cit> , cell proliferation  <cit> , and synaptic plasticity  <cit> . scaffolding proteins assemble the components of a signaling cascade in the appropriate configuration  <cit> . the multidomain architecture is integral to this function because each of the constituent domains is responsible for anchoring specific proteins to the signaling complex. therefore, acquisition, loss, or replacement of a domain with another from the same family could result in an immediate and dramatic change in interaction partners.

all maguks have an inactive guanylate kinase  domain, in combination with various adapter domains that anchor downstream pathway proteins to the scaffold. there are six maguk subfamilies, each with a characteristic domain architecture . the identity, copy number, and order of the auxiliary domains is largely conserved within each subfamily, with minor variations.

to analyze the history of domain shuffling in the maguk family, we require a species tree, a gene tree, and a tree for each domain of interest. for these case studies, we restrict our analysis to three species, human, mouse and chicken, for which the species tree is well known. for the gene tree, we require a phylogeny that represents the history of the entire gene family locus. this can be a challenge for multidomain families with variable domain content, including the maguks, because it is not possible to obtain a full length sequence alignment, from which to construct a gene tree. in this analysis, we use the phylogeny of the guk domain as a proxy for the history of the gene family. this domain is present in all maguk architectures and is unique to the maguk family. in maguks, the guk and sh <dig> domains participate in intramolecular interactions that cause them to function together as a unit  <cit> . this suggests that the guk domain is under tight structural and functional constraints and, hence, is unlikely to participate in domain shuffling, making it a suitable proxy for the history of the locus.

with this in mind, we constructed a guk domain phylogeny  for all members of the maguk family in mouse, human, and chicken . using this gene tree, we investigated possible domain shuffling for two maguk constituent domains: the l <dig> domain in the membrane-associated proteins, palmitoylated  subfamily, and the pdz domain, which is found in all maguk subfamilies, except the calcium channel β  proteins.

the l <dig> domain. the mpps mediate protein complex formation at cell junctions and play a role in establishing cell polarity during development  <cit> . all mpps contain a core guk-sh3-pdz domain architecture and, except mpp <dig>  two n-terminal l <dig> domains .

to determine whether the l <dig> domains co-evolved by vertical descent with the maguk structural core, we constructed trees from the sequences of the first and second l <dig> domains  in human, mouse, and chicken mpps . outside of the mpp subfamily, only a few proteins encoded in the human genome possess l <dig> domains . these proteins possess only a single l <dig> domain, rather than a tandem pair. structural studies partition single-copy and tandem l <dig> domains into two distinct subtypes, with distant sequence homology  <cit> . this suggests that mpp l <dig> domains are more closely related to each other than to other l <dig> domains and, thus, satisfy the assumption of our algorithm, which only considers domains within the current gene family.

the l <dig> phylogeny was reconciled with the guk reference tree ) using the de-dl model and event costs κd= <dig>  κi= <dig> , and κl= <dig>  the l27- <dig> subtree  is consistent the hypothesis that the l27- <dig> and guk domains co-evolved without shuffling. however, the reconciled l27- <dig> tree ) suggests that the l27- <dig> domain in the mpp2/ <dig> ancestor was replaced by a copy of l27- <dig> from the mpp3/ <dig> ancestor, by a single domain insertion ).

phylogenetic error is of particular concern in domain tree reconstruction, because domain sequences tend to be short and weakly conserved  <cit> . to investigate the impact of phylogenetic error on the inferred l27- <dig> domain insertion, we generated the 95% confidence set of trees with high likelihood scores  <cit> , as described in methods. only two topologies are supported by at least 25% of the trees in the confidence set, as shown in the consensus network  <cit>  in figure  <dig>  in both topologies, mpp2/6/3/ <dig> form a clade, which is consistent with the hypothesis that the l27- <dig> domain was replaced in the mpp2/ <dig> ancestor.

previous models of mpp evolution  <cit>  predicted that the l27- <dig> domains in mpp2/ <dig> and cask share a unique, common ancestor. in contrast, our analysis predicts that the l27- <dig> domains in mpp2/ <dig> and mpp3/ <dig> are more closely related. this has functional, as well as evolutionary, implications. a vertical descent model implies that mpp2/ <dig> are likely to be most functionally similar to cask, their closest mpp relative. our analysis predicts that mpp2/ <dig> are more likely to be similar to mpp3/ <dig>  with respect to l <dig> mediated interactions. this is consistent with recent experimental results that show that mpp <dig>  mpp <dig>  and mpp <dig> share a common l27-mediated complex formation mechanism, while cask uses a different mechanism  <cit> .

the pdz domain. all members of the maguk family, except for the cacnbs, have at least one pdz domain. using our newly developed methods, we sought to understand how the varied number of pdz domains arose in this family. was there a single pdz in the earliest maguk that expanded independently in different subfamilies? or was there a round of ancestral domain duplication followed reciprocal, independent losses?

the maximum likelihood  tree for the pdz domains  suggests a number of domain shuffling events when reconciled with the guk reference tree. however, many of the relationships in this tree are associated with low bootstrap values and may not reflect an accurate evolutionary history. to investigate the robustness of the inferred domain shuffling events, we generated the 95% confidence set of pdz trees as described in methods. all  <dig> trees in this set imply that a number of domain shuffling events occurred - some of these events are unique to a single tree, while others are common to a large fraction of the trees. we defined the support of an inferred event in this set to be the fraction of reconciled pdz trees in which that event occurs . the inferred events were scored and ranked based on this support score . the reconciled trees from the pdz confidence set were then ranked based on the number of high-scoring events found in their history. tree  <dig>  has nine of the top ten high-scoring insertion events. only one tree has all top ten events, but that tree results in a much higher reconciliation cost , compared with a cost of  <dig>  for tree  <dig>  we therefore use tree  <dig> in the following analysis of pdz domain evolution in the maguks .

our reconstructed history of pdz domain shuffling shows several interesting trends that disagree with prior analyses based on wagner parsimony. this is especially true for the zo and carma subfamilies.

all members of the zo/dlg <dig> subfamily have a cassette of at least three tandemly arranged pdz domains . it has been previously been proposed  <cit>  that two domain duplications in the zo/dlg ancestor gave rise to this cassette, which was subsequently inherited by all zos and dlg <dig>  with an additional duplication resulting in the fourth pdz in dlg <dig> 

our reconstruction, based on domain tree reconciliation, tells a very different story . first, the zo ancestor had a single pdz domain that was vertically inherited in zo <dig> and zo <dig>  but lost in zo <dig>  second, the cassette expansion was the result of a domain insertion from magi into the common ancestor of zo <dig> and zo <dig>  while these insertions are weakly supported, the fact that both the donor domains  and the recipient domains  are adjacent is suggestive. third, the pdz cassette in zo <dig> was the result of three, highly supported domain insertion events from zo <dig> in amniotes. considering the fact that these three pdzs are tandemly located in the domain architecture, it is possible that this was the result of a single insertion event involving all three pdz domains simultaneously. interestingly, the c-terminal pdz domain in dlg <dig> and the c-terminal pdz in the zo proteins were both vertically inherited from the same ancestral copy. the other dlg <dig> pdz domains were the result of insertions from the dlg and carma subfamilies.

also of particular interest are the high-scoring insertion events in the carma subfamily. all carma genes have a single pdz domain that is predicted to be the result of vertical inheritance in wagner parsimony analysis. according to our domain tree reconciliation analysis, however, this is not the case . although the single pdz domain in carma <dig> and carma <dig> was vertically inherited, carma <dig> experienced both an expansion and contraction of its pdz repertoire in the amniote ancestor. this expansion was due to two independent and highly-supported insertion events - one from mpp <dig> and the other from carma <dig>  parallel losses followed, with the copy from mpp <dig> lost in birds and the copy from carma <dig> lost in mammals. as a result, even though all contemporary carma3's have the same domain architectures, the pdz domain in chicken carma <dig> is paralogous, not orthologous, to the pdz domain in mouse and human.

these case studies highlight the importance of using information from three levels of evolution - domain, gene, and species - when analyzing the history of a multidomain family. without multiple species, the divergent history of the pdzs in carma <dig> in birds and mammals would not be apparent. note also the pseudonode representing the ancestral carma <dig> in amniotes. this was the result of a loss of the carma <dig> gene in chicken. our algorithm correctly identifies the missing pdz in chicken as a gene loss, not a domain loss.

CONCLUSIONS
here we propose a reconciliation-based framework that captures several aspects of multidomain evolution not represented in the wagner and dollo parsimony models that are widelyused in domain architecture analysis. based on a model that considers domain sequence, as well as domain content, and incorporates an explicit model of events, our reconstruction algorithms are capable of inferring the correspondence between domain architecture evolution and gene and species evolution; the domain duplications, insertions, deletions and transfers that gave rise to present-day proteins; and the ancestral domain architectures from which they evolved.

as a demonstration of the power of a reconciliation-based approach, we presented an analysis of the domain shuffling in the multidomain maguk family. this analysis uncovered multiple evolutionary scenarios that could not be reconstructed with wagner parsimony, including parallel gains , parallel losses , and replacement of a domain with another domain from the same family . further, our results suggest that some orthologous proteins with identical architectures nevertheless contain paralogous domains. this has intriguing implications for orthology-based function prediction.

our analysis of the maguks suggests that domain architectures may be much more plastic than previously thought. this contradicts prior studies suggesting that domain architectures rarely form more than once in evolutionary history, based on the argument that domain pairs that co-occur are selectively favorable and once united tend to persist  <cit> . however, if the same domain architectures were forming repeatedly, this pattern would not be discerned by wagner parsimony. in contrast, our approach, which incorporates sequence information and an explicit event model, could reveal such patterns. to what extent is our understanding of multidomain evolution driven by the algorithms we use to study them? the results presented here argue for the reexamination of current theories of multidomain protein evolution using more information-rich approaches.

our empirical study also reveals some of the challenges involved in applying this abstract approach to real data. reconciliation-based event inference requires accurate domain and gene trees, yet mobile domains tend to be short and have low sequence conservation, making it particularly difficult to infer accurate trees for such domains. in our analysis, we developed an event support score that combines information from multiple phylogenetic hypotheses and focused on events with the strongest support. development of rigorous approaches for accommodating uncertainty is an essential prerequisite for robust reconciliation-based analyses.

the reconciliation algorithms presented here are the first to consider the co-evolution of domains with both genes and species. a few other studies have considered reconciliation using domain trees for the purpose of inferring domain content in ancestral species  <cit> . the optimization criteria used in those studies do not model domain shuffling events in individual families explicitly. it is therefore unclear whether they can be adapted to the problem of reconstructing the history of events in the evolution of multidomain protein families. wu et al.  <cit>  considered co-evolving domain trees using a model based on gene fusion and fission in a study of domain rearrangements in drosophila. their approach is inextricably linked to the problem of conserved sequence motif discovery and, similarly, is not well-suited to our question.

expanding the model presented here is an important area for future work. our algorithm reconstructs domain events within a single gene family. however, domain shuffling is likely also occurring across gene families. further, many approaches to domain shuffling, including ours, make the implicit assumption that individual domain events are independent. algorithms that capture the movement of multiple domains in a single event  <cit>  are needed, as are algorithms that take domain order into account. recent work integrating spatial information with phylogenetic reconciliation  <cit>  is a promising direction for reconstructing domain order.

probabilistic reconciliation models  <cit>  are a particularly appealing direction for future work, because they require fewer simplifying assumptions, do not restrict the search space, can be instantiated with different evolutionary models to suit the needs of the data, and provide a context for formal testing of alternate hypotheses. adapting this approach to the domain architecture context will be challenging. in contrast to gene and protein sequences, which are long strings of symbols from a small alphabet, domain architectures are short sequences from a very large alphabet and may not contain enough information to infer family-specific rates of insertion and deletion.

