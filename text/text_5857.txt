BACKGROUND
“because evolutionary patterns and processes unroll over long time spans, their simulations has become an important ingredient of evolutionary research”  <cit> .

stochastic mapping   <cit>  is a simulation-based, increasingly popular technique of ancestral-state reconstruction . unlike maximum parsimony  or maximum likelihood  based reconstructions, stochastic mapping allows for changes to occur along branches  instead of assuming that they only occur when lineages split , a strictly cladogenetic  view of character evolution. mp- or ml-based asrs imply that, at most, one single change in a character state will be recovered at any given node regardless of the length of the incident edge . with the advent of dated phylogenies, it has become evident that some of these edge lengths may actually span millions of years. given such timescales and the fact that most lineages that have ever lived are now extinct, several cladogenetic events will be missed when one samples extant taxa  and even when extinct ones are included in the analysis, for the fossil record is all but guaranteed to be incomplete. hence, even in the rare situation of exhaustive taxon sampling, there will be plenty of room left for missed state changes along phylogenies with deep splits. the bias introduced by the missing nodes is known as the node density effect   <cit> , a positive relationship between the number of nodes through which a lineage passes and the amount of estimated evolutionary change.

nde is particularly pervasive in mp reconstructions because they do not factor branch lengths in their estimates. ml reconstructions are built on markov models which assume that character evolution is a stochastic process, fully expressed as a matrix  of instantaneous, pairwise rates of change between character states. these rates can be analytically integrated to probabilities of state change along a branch of known length. markov models are based on a fundamental property: future states depend only on the present state and not on the sequence of events that preceded it. this model reflects the memory-less nature of stochastic processes, i.e. they tend to become independent of their initial conditions in time. this implies that state probabilities on a node will converge to their underlying equilibrium frequencies when the length of the incident branch tends to infinity  <cit> . thus, inferred probabilities will become more evenly split among possible character states when focal nodes are closer to the root of a phylogeny with long internal branches. this somewhat compensates for nde because reconstructions tend to become more ambiguous as the distance between the focal node and the phylogeny tips increases. this ambiguity reflects the uncertainty about the existence of missing nodes along ancient lineages. however, such uncertainty may be rather frustrating if the researcher is only interested in knowing, for instance, whether the underlying topology supports more transitions away from a state than towards it. this type of information is readily obtained via sm.

sm also has issues of its own. unlike bayesian phylogenetic analysis  there are no convergence diagnostics to assess how many simulations must be run in order to obtain a sufficient sample size. if not enough simulations are run, the posterior distribution will be undersampled. otherwise, the analysis will waste computational resources. given the ever increasing power of most personal computers, it seems wiser to err on the side of the second option because execution times tend to be small anyway. however, the other strong assumption embedded in asr is that the chosen topology is the correct one, which is hardly, if ever, satisfied. this assumption can be relaxed by conducting asr on a set of trees that represent the uncertainty inherent to the process of phylogenetic inference. this is normally done by running asr on every tree in a posterior distribution, sampled via metropolis-coupled mcmc  . because the sizes of these distributions tend to be quite large, computation time may now become an issue. additionally, one is faced with the challenge of how to summarize the results of such analyses. several sm simulations must be conducted on each tree in order to reduce the stochastic error intrinsic to this approach. when applied to a posterior distribution of trees, this means tens of simulations per tree, being each one of its branches potentially replicated thousands of times. conceivably, one could approximate a per-branch expectation of the character’s evolutionary history by averaging across different simulations conducted on a single branch and then integrating expectations for this branch across all trees. this is analogous to the popular “relaxed molecular clock” approach to divergence time estimation  <cit>  because it effectively factors phylogenetic uncertainty into the posterior distribution of the variable of interest.

it has been demonstrated  that per-branch expectations of the number of transitions  and dwelling times  can be approximated analytically in execution times which are orders of magnitude faster than simulation based stochastic mapping. to our knowledge, this algorithm is only implemented in the library bio++. besides being restricted to molecular data, this  implementation will likely have a much smaller user base among researchers interested in asr than a package written in r, a high-level programming language tailored for statistical computing. here, we introduce sfreemap , an r-based implementation of the algorithm described in , specifically designed to allow fast ancestral character state reconstruction on thousands of phylogenetic trees. additionally, our package offers an easy, intuitive way of creating synoptic charts of the results on any reference topology provided by the user.

implementation
r  <cit>  is a multiplatform computer language that provides a high level environment for data analysis and plotting. it is a broadly used tool for phylogenetics  <cit>  with dozens of related packages  <cit>  written by researchers and developers around the globe. sfreemap has it’s interface written in r with parts of it’s core transcripted to c , which can significantly improve performance on computing intensive calculations. the source code was made freely available under gpl  <cit>  license and can be found on https://github.com/dpasqualin/sfreemap. the reference manual and vignettes are available as additional files  <dig> and  <dig>  please see  and .

RESULTS
performance evaluation
we benchmarked the performance of sfreemap against an open source implementation of the simulation-based, stochastic mapping algorithm simmap  <cit> , available as the function make.simmap from the package phytools  <cit> . experiments evaluated three main parameters thought to affect execution time: i) the number of trees, ii) the number of taxa and iii) the number of character states. trees were always ultrametric and generated using phytools’ function pbtree. while evaluating one parameter, the others were held constant . also, due to the stochastic nature of simmap simulations, the researcher would want to perform several simulations  to reduce the error inherent to the method. we employed  <dig>   <dig> and  <dig> simulations. make.simmap experiments were performed setting the parameter q to “empirical”, meaning that a single q matrix is estimated and subsequently used in all simulations. all experiments were conducted in a machine with 256gb of ram memory,  <dig> cores processor intel xeon e5- <dig> v <dig> running at  <dig> ghz. execution time increases linearly with the number of trees in all experiments . due to the high determination coefficients of the regression lines , we can use slopes as accurate estimates of average performance, expressed as seconds spent on each tree . in the case of simmap- <dig>  the slope is  <dig>  ±  <dig>  s/tree. it took roughly  <dig> × as long  for  <dig> simulations  and  <dig> ×  for  <dig> simulations . although execution times scale modestly with the number of simulations, sfreemap’s performance was far superior, approximately  <dig>  ±  <dig>  s/tree, or roughly 5× faster than simmap- <dig>  10× faster than simmap- <dig> and 12× faster than simmap- <dig>  total execution time for the latter was almost 2900 s  for  <dig> trees, while sfreemap completed the same task under  <dig> mins . usually, posterior distributions sampled by bayesian phylogenetic analyses are made up by thousands to tens of thousands of trees. in order to obtain a new distribution made up of quasi-independent samples, they are normally sub-sampled  in order to break high temporal auto-correlations among parameters, characteristic of mcmc-based sampling  <cit> . nevertheless, even after thinning, posterior distributions will typically retain hundreds of trees , meaning that it should take a couple of hours for make.simmap to reconstruct the evolution of a single 4-state character, even when a relatively small number of per-tree simulations is employed.fig.  <dig> benchmarking results for sfreemap. the curve labeled simmap- <dig> was obtained using a single simulation, simmap- <dig> using  <dig> simulations and simmap- <dig> using  <dig> simulations. a) increase in execution times with numbers of trees  during the mapping of a single 4-state character. average performances were estimated from slopes , computed using r’s linear model , as seconds spent on each tree . intercepts were forced to  <dig> and determination coefficients  exceeded  <dig>  in all experiments. b) increase in execution times with number of taxa for the reconstruction of a 4-state character on a single tree. average performances were estimated from slopes  as seconds added per taxon . intercepts were forced to  <dig> and determination coefficients  were over  <dig>  in all experiments. c) exponential increase in execution time with number of states. experiments were run using one tree with  <dig> terminals. lines were fit using the function nls, also implemented in r, assuming the formula y = bxa. we verified goodness-of-fit by adjusting a linear regression to log-log transformed data. r <dig> exceeded  <dig>  in all experiments




algorithmic complexity was also o with respect to the number of taxa , although it increased modestly with the addition of new taxa i.e., under 1 s/taxon in every experiment . again, increasing number of simulations had a limited impact on execution time , but performance was substantially higher in the case of sfreemap, whose increase in execution time was, on average, only 7x10−3s per taxon, running 6× faster than simmap- <dig> and 13× faster than simmap- <dig> . although the performance gain may appear small in absolute numbers, it is worth noting that a 4-fold increase in the number of terminals, from  <dig>  to  <dig>  means that execution time for one tree would go from  <dig>  to 90 s in the case of simmap- <dig>  in contrast, the difference would be  <dig>  s/tree  if the user chose sfreemap. given the results for  <dig> trees with  <dig> terminals, sfreemap would finish in approximately  <dig> mins if the number of terminals were increased to  <dig>  whereas computation time would go from  <dig> mins to more than 3 h in the case of make.simmap.

the estimation of the q matrix, a first step for both make.simmap and sfreemap, is a high complexity nonlinear optimization problem, implemented in the latter using the quasi-newton  <cit>  method available through nlminb function from the r stats package, and only solvable in reasonable time due the low dimensionality of the matrix. still, performance was most affected by the number of character states, as evidenced by the exponential increase in execution time depicted in fig. 1c. this is highlighted by the nearly identical make.simmap’s curves corresponding to increasing numbers of simulations, whose effect is virtually obliterated by that critical first step in all experiments. once again, sfreemap’s estimated performance was superior, although the difference was not as large as the previous experiments . the range of simulated states is not very realistic, for most biological characters would seldom have more than  <dig> states. a notable exception are proteins, whose state space may be as large as  <dig> amino acids. however, in this case, the researcher would probably start the analysis with a user-provided q matrix, computed from empirically derived substitution matrices such as the ones in the blosum or pam series, thus reducing execution times considerably. at any rate, these results show that q matrix estimation is the main performance bottleneck for both make.simmap and sfreemap. optimization of phytools’ implementation of this step should yield the greatest performance gain for asr algorithms built on that package.

algorithm complexity can thus be generalized as o, where t is the number of trees, n is the number of terminals and s is the number of character states. because a fixed number of steps is performed on each branch , algorithm complexity increases linearly as more terminals and/or trees are added to the problem. the term s <dig> comes from the decomposition and multiplication of square matrices whose dimensions are set by the number of character states, as described in steps  and  of minin & suchard's paper  <cit> , on page  <dig>  this formula excludes q matrix estimation, the first step in the algorithm. as discussed above, performance is strongly limited by this single step as currently implemented in phytools, classified as a nonlinear optimization problem with exponential search space regarding the number of character states.

accuracy verification
sfreemap returns the expectation  of the number of transitions and dwelling times on a given state along a branch. we evaluated the accuracy of the method by comparing these values to the numbers of transitions and dwelling times of a binary character with known  evolutionary history. an ultrametric tree with  <dig> terminals was generated via “pure-birth”, with exponentially distributed speciation times, using the function pbtree from phytools. character evolution on this tree was simulated via sim.history, also part of phytools. additionally, we evaluated the accuracy of the results obtained using make.simmap for the same simulated data. as make.simmap is based on stochastic simulations, the number of replicates for each simulation becomes another parameter of interest because the error inherent to the algorithm should decrease as replication increases. when the option q = “mcmc” is set, make.simmap first samples a number  of q matrices using mcmc and then generates one simulation of the character history for each sampled matrix. we ran simulations with varying numbers of replicates, from  <dig> to  <dig> 

figure 2a shows the tree-wide dwelling times for state  <dig>  the boxplot summarizes make.simmap simulations results and the blue line is the overall mean dwelling time, computed across all these simulations. the red line corresponds to the grand mean of the per branch expectations, computed by sfreemap, which corresponds to the overall dwelling time on state  <dig> across the entire tree. results for tree-wide numbers of transitions away from that state are shown in fig. 2b. the blue line represents the overall mean obtained using make.simmap and the red line is the sum of the per branch expected number of transitions, computed by sfreemap.fig.  <dig> comparison of sfreemap and make.simmap estimates. make.simmap estimates were obtained for stochastic mappings from a range of replicates, from  <dig> to  <dig>  boxes correspond to standard deviations, dashes to means, whiskers to the min-max ranges and dots to outliers. a) dwelling times, i.e. the fraction of the tree expected to have been “spent” on a given state, represented as percentages of tree length. b) absolute numbers of transitions summed across tree branches




figure 3a and b represent the accuracy of sfreemap and make.simmap with respect to the simulated data. accuracy was computed as the difference between estimated  and observed  evolutionary trajectories. the blue and red lines in fig. 3a represent the accuracy of dwelling-time estimation for make.simmap and sfreemap, respectively. the same color coding was used for the numbers of transitions in fig. 3b. this experiment yielded three interesting results. the first is the closeness, on average, between estimates obtained using the make.simmap and sfreemap . it suggests that the simulation-based approach can be replaced, with significant computational advantage, by the algorithm proposed in , whenever per-branch estimates will suffice. the second is that make.simmap’s stochastic error does not seem to taper off with increasing number of replicates. and finally, although both methods tend to overestimate dwelling times and numbers of transitions, sfreemap had, on average, greater accuracy than make.simmap . nevertheless, virtually every set of make.simmap simulations had at least one replicate that recovered observed dwelling times and numbers of transitions with 100% accuracy , although outliers were abundant in the case of numbers of transitions , highlighting the need to replicate the analysis in order to obtain more reliable estimates.fig.  <dig> accuracy verification. absolute error for dwelling times and number of transitions. errors were computed by comparing the differences between simulated  and estimated dwelling times and absolute numbers of transitions across trees obtained using sfreemap and make.simmap. the latter were obtained for a range of replicates, from  <dig> to  <dig>  boxes correspond to standard deviations, dashes to means, whiskers to the min-max ranges and dots to outliers. a) dwelling times, i.e. the fraction of the tree expected to have been “spent” on a given state, represented as percentages of tree length. b) absolute numbers of transitions summed across tree branches




the results of this experiment should be taken with caution because observed data were obtained from a single simulation. accuracy evaluation results could change if a larger number of empirical simulations under the same model and/or different parameters  were tested. the full evaluation of the algorithm’s accuracy is beyond the scope of this paper. the aim of this section is merely to demonstrate that the results generated by sfreemap agree with the theoretical expectations of its underlying algorithm.

graphical summarization
when working with a posterior of trees obtained via bayesian phylogenetic analysis, it is desirable to summarize the probability distributions of the parameters of interest onto a target topology. for example, clade posterior probabilities may be mapped onto a maximum likelihood phylogeny obtained from the same data, or the distribution of divergence times may be represented as error bars centered on the internal nodes of a time-calibrated map  tree. the latter approach is commonly used in studies focusing on bayesian divergence times estimation and it is implemented, for instance, in the treeannotator package, which is part of the beast suite  <cit> .

we introduce a graphical approach to summarize the results of simulation-free stochastic mapping conducted on several trees. the data in fig.  <dig> were published in  <cit> . the tree corresponds to a map rrna phylogeny of scleractinian  corals generated using beast. the binary character reconstructed onto each one of the  <dig> trees in the posterior is the presence or absence of coloniality . given a branch, sfreemap returns the expected dwelling time on a state, expressed as a fraction of that branch’s length, and the absolute number of transitions away from that state. in order to summarize dwelling times , values are first normalized as percentages and converted into a corresponding color scale, whose tonality varies in 5% steps. each branch in the target tree is then painted according to that scale, being the fraction covered by each tone proportional to the posterior probability of branches with corresponding dwelling times. for instance,  red is used to represent 100% in the color scale. if 80% of the trees in the posterior have a branch a whose dwelling time on state  <dig> is 100%, then 80% of the total length of branch a in the target tree will be painted red. if the remaining 20% of the trees in the posterior had dwelling times on state  <dig> of 50% for branch a, the remaining 20% of branch a in the target tree will be painted green . a similar approach is adopted for the number of transitions, but in this case the color scale is adjusted between the  <dig> and the maximum number of transitions observed . if a branch in the target tree is not found in the other trees in the posterior, it will be colored gray.fig.  <dig> example of graphical summarization of mapping results. evolution of coloniality in scleractinian corals, data from  <cit> . in both cases, the map  tree from a “thinned” posterior distribution of ultrametric trees  was used to summarize sfreemap’s results. the branch fraction painted with a given tone corresponds to the posterior probability of that tone. gray branches are not present in other trees. a) number of transitions from colonial to solitary states. scale goes from  <dig> to over  <dig>  transitions per branch. branch coloring follows the same rationale as dwelling time. note how greater number of transitions  are observed on longer branches which, in the framework of stochastic mapping, offer more evolutionary opportunity for state change. b) dwelling times in colonial state. color scale goes from 0%  to 100% dwelling time on the colonial state. if 80% of a branch is painted pure red, this means that 80% of the trees in the posterior had equivalent branches expected to have been colonial throughout the entire duration of the corresponding lineage. if 80% of a branch is painted in pure green, then 80% of the equivalent branches were expected to have been colonial during half of the lineage duration. note that coloring shifts to either red  or blue  towards the tips of the tree, matching the state observed on the terminals, whereas most of the internal branches closer to the root are green, due the uncertainty associated with increasing internal branch lengths




CONCLUSIONS
sfreemap provides a fast and accurate alternative to ancestral state reconstruction via simulation-based stochastic mapping. the package is specifically aimed at fast integration and intuitive representation of phylogenetic uncertainty associated with asr. it does not return detailed estimates of the character’s evolutionary trajectory, which is needed, for instance, for character correlation analysis  <cit> , as implemented in  <cit> . nevertheless, dwelling times and number of transitions are important quantities for evolutionary biologists. the first allows the researcher to evaluate how prevalent a certain character state was during the evolution of a group. quantifying numbers of transitions allows for testing of possible biases in character evolution . besides being an useful quantity in itself, this latter variable may be converted to rates of evolution when normalized by branch lengths. rate of evolution is a fundamental concept in biology, found inevitably at the core of virtually all hypotheses on the origin of genotypic, phenotypic and taxonomic biodiversity  <cit> . one major limitation of the current implementation in this regard is the fact that expectations correspond to transitions away from a state. thus, this method does not allow direct computation of expected pairwise changes among states of non-binary characters . nevertheless, in cases where character states may be lumped into binary categories , it is possible to circumvent this limitation by estimating a q matrix for this new  parameter space. interested readers are referred to  <cit>  for an example with synonymous vs. non-synonymous substitutions in hiv sequences.

stochastic mapping is a powerful resource in the evolutionary toolbox, but we must guard against its unwarranted accuracy when a single topology is assumed to depict the “true tree”. the importance of accommodating uncertainty about the phylogenetic history of a group in comparative analysis is well established  <cit> . we believe this package provides an efficient way of accomplishing that within the framework of stochastic character mapping.

availability and requirements

project name: sfreemap


project home page:
https://github.com/dpasqualin/sfreemap



operating systems: platform independent


programming languages: r


license: gnu gpl v3

additional files

additional file 1: af <dig> vignettes. sfreemap vignettes. 


additional file 2: af <dig> ref. manual. sfreemap reference manual. 




abbreviations
asrancestral-state reconstruction

gplgeneral public license

mapmaximum a posteriori


mcmcmarkov chain monte carlo

mcmcmc/mc3metropolis-coupled markov chain monte carlo

mlmaximum likelihood

mpmaximum parsimony

ndenode density effect

smstochastic mapping.

we thank daniel weingaertner and marcio pie for comments on an earlier version of the manuscript.

funding
not applicable.

availability of data and materials
software and datasets are freely available at https://github.com/dpasqualin/sfreemap.

author’s contributions
dp and mb conceived the study, dp implemented the software and benchmarked its performance with the aid and under the supervision of mb and fs. dp, mb and fs wrote the paper. all authors have approved the final version of their manuscript and have made all required statements and declarations.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
no human or animal subjects were used in this study.
