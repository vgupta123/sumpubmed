BACKGROUND
the ambiguity problem in biosequence analysis
biosequence analysis problems are typically optimization problems – we seek the best alignment of two protein sequences under a similarity score, or the most stable secondary structure of an rna molecule under a thermodynamic model. in such a problem, there is a "good" and a "bad" type of ambiguity. the good one is that there are many solutions to choose from. the bad one is that our algorithm may find the same solution several times, or even worse, it may study seemingly different solutions, which in fact represent the same object of interest. the cause of all these phenomenona has been called ambiguity, because it is closely related to the ambiguity problem of formal languages. it is not quite the same problem, however. in striving for avoidance of ambiguity, we want to get rid of the bad type and retain the good.

ambiguity is not a problem with a dynamic programming  algorithm that returns a single, optimal score, together with a solution that achieves this score, and does not make assertions about other solutions in the search space. then, it does not matter whether this solution is analyzed several times, or that there are other solutions achieving the optimal score. in other cases, ambiguity can cause a dp algorithm to return an "optimal" answer which is plainly wrong. in the presence of ambiguity, the viterbi algorithm cannot report the most likely structure  <cit> , a folding program cannot produce a complete and non-redundant set of suboptimal structures  <cit> , and statistics like counts, sum over all scores , or expected number of feasible or canonical structures  <cit>  cannot be computed.

previous work
the phenomenon of ambiguity has been formalized and studied in  <cit>  in a quite general framework of dynamic programming over sequence data. there, it is shown that for a proof of non-ambiguity, a canonical model of the studied domain is required. the canonical model plays an essential role. it is the mathematical formalization of the real-world domain we want to study, and "canonical" means one-to-one correspondence. any formal proof can only deal with the formalization of the real-world domain, and when the one-to-one correspondence does not hold, all proofs of  ambiguity would be meaningless for the real world. in general, it may be quite difficult to find a canonical model for some real-world domains. our case, however, is easy. when rna secondary structure is our domain of study, base pair sets or the familiar dot-bracket strings can serve as a canonical model, as they uniquely represent secondary structures. to ensure non-ambiguity, there must exist an injective  mapping from derivation trees  to the canonical model. while such a mapping may be easy to specify, the proof of its injectivity remains a problem.

recently, dowell and eddy have re-addressed this problem  <cit>  in the framework of stochastic context free grammars . in a probabilistic framework, ambiguity matters when a best, i.e. most likely solution is computed. this solution is wrong if several "different" solutions represent the same real-world object. dowell and eddy experimented with two ambiguous scfgs, and showed that the quality of results may range from just slightly wrong to totally useless. after having shown that one cannot get by with ignoring ambiguity, they provide four non-ambiguous scfgs for rna structure analysis; however, a proof of their non-ambiguity is not given. instead, they suggest a testing approach to check for the presence of ambiguity, which, of course, cannot prove its absence.

in this contribution, we first review the ambiguity problem in the framework of scfg modeling, explain some of its sources, prove its algorithmic undecidability, and suggest three ways to deal with it: ambiguity avoidance, testing for ambiguity, and, best of all when successful, a mechanical proof of absence.

formalization of ambiguity
we formalize the problem at hand in two steps, going from context free grammars  to stochastic context free grammars, and then differentiating between syntactic and semantic ambiguity.

formal grammars
a formal language is a subset of the set of all strings over a finite alphabet. formal languages are typically described by formal grammars. in general, a formal grammar consists of an alphabet, a set of nonterminal symbols, and a set of production rules. there exist various grammar types, differing in the laws for construction of these production rules. the expressive power of a grammar type depends on these laws. in  <dig>  noam chomsky introduced a hierarchy of formal grammars that ranks grammar types by their expressive power, the chomsky hierarchy  <cit> . it consists of four levels: regular grammars, context-free grammars, context-sensitive grammars, and unrestricted grammars. here, we only address context-free grammars. these are suitable to describe the pseudoknot-free secondary structure of rna. when considering pseudoknots, context-sensitive grammars are needed.

context free grammars
a context free language is described by a context free grammar g, given by a set of terminal symbols , a set of nonterminal symbols, including a designated axiom symbol, and a set of production rules of the form x → α, where x is a nonterminal symbol, and a is a string of terminal and nonterminal symbols, α may be the empty string, denoted ε. starting with the axiom symbol, by successive replacement of nonterminal symbols by right-hand sides of corresponding productions, we can derive a set of terminal strings. they constitute the language of the grammar, denoted l without loss of generality, derivations are canonized by replacing, in each step, the leftmost nonterminal symbol in the string obtained so far. each such derivation can uniquely be represented as a derivation tree, and if the same terminal string has two different derivation trees, the grammar is called ambiguous.

our first example is dowell and eddy's grammar g <dig>  <cit>  to describe rna secondary structures:

g1: s → asu | usa | csg | gsc | gsu | usg

s → as | cs | gs | us

s → sa | sc | sg | su

s → ss

s → ε

in the following, we shall use a shorthand notation, where a stands for any base a,c,g,u, while α and  occurring in the same rule stand for either one of the base pairs , , , , , or .

g1: s → as| as | sa | ss | ε

four different derivation trees of the grammar g <dig> are shown in figure  <dig>  as they all emerge from the same terminal string acaggaaacuguacggugcaaccg, this grammar is ambiguous.

stochastic context free grammars
stochastic context free grammars associate a  probability with each production, such that the probabilities for all alternative productions emerging from the same nonterminal symbol add up to  <dig>  as a string is derived, probabilities of the involved rules multiply.

we extend the cfg g <dig> to a scfg by the following example probabilities:

ps→as =  <dig> 

ps→as =  <dig> 

ps→sa =  <dig> 

ps→ss =  <dig> 

ps→ε =  <dig> 

for simplicity, we chose probabilities independent of certain bases. in scfg design, often also non-canonical base pairings are allowed with a low probability.

for grammar g <dig>  the derivations shown in figure  <dig> have probabilities of  <dig> ·10- <dig>   <dig> ·10- <dig>   <dig> ·10- <dig> and  <dig> ·10- <dig> .

all derivations for a string can be constructed by a cyk-type parser  <cit> . the parser may compute the overall probability of a given string, summing up probabilities over all its derivations, in which case it is called the inside algorithm. or, the parser can return the most likely derivation of the input string, in which case it is known as the viterbi algorithm. for grammar g <dig>  the corresponding cyk-based viterbi algorithm is shown here:

input: sequence x = x <dig> ... xn

initialization: for  <dig> ≤ i ≤ n

s = ps→ε

iteration: for  <dig> ≤ i ≤ j ≤ n



syntactic versus semantic ambiguity
above, we introduced the formal language-theoretic notion of ambiguity: if the same symbol sequence has two or more different derivation trees, the grammar is called ambiguous. for clarity, we will refer to it as fl-ambiguity. in this sense, grammar g <dig>  is in any case fl-ambiguous. this is demonstrated by the fact that the four derivation trees of figure  <dig> all belong to the same symbol sequence. we now need to refine this notion of ambiguity.

in modeling with scfgs, derivations do not merely produce strings, but they represent objects of interest themselves. with rna, a derivation of an rna sequence represents a possible secondary structure of this sequence. a more compact representation of a secondary structure is the widely used dot-bracket notation, as shown at the bottom of figure  <dig>  in the following, we will use the term annotation sequence for the dot-bracket string representing one secondary structure of the underlying rna sequence. the one-to-one correspondence between  structures and  annotation sequences qualifies the latter as a canonical model of the grammar.

by the term syntactic ambiguity we denote the fact that typically an rna sequence has many secondary structures, i.e. annotation sequences, hence many derivations. figure  <dig> shows two example annotation sequences of the same rna sequence.

semantic ambiguity exists when there are, for some sequence, several derivations that represent the same annotation sequence, and hence, the same secondary structure. this is our point of study. in this case, the probability of a certain annotation sequence is split up into the probabilities of its multiple derivations. in figure  <dig>  this is exemplified by the two derivations on the left that both represent the annotation sequence ))).))), and the two derivations on the right, that both represent the annotation sequence .)))....... thus, grammar g <dig> is syntactically as well as semantically ambiguous.

semantic ambiguity is the "bad", syntactic ambiguity the "good" type of ambiguity in scfg modeling and dynamic programming that was mentioned above. on the pure formal language level, they cannot be distinguished – both are manifest as fl-ambiguity. the bad ambiguity hides with the good, which is why its presence is sometimes overlooked.

semantic ambiguity is not a problem with the inside algorithm, as a probability sum over all derivations is computed anyway. with the viterbi algorithm, we can certainly obtain the most likely derivation, but we do not know whether it represents the most likely annotation sequence. some other annotation sequence may be more likely, but as its probability is the sum of many different derivations, none of these derivations may come out optimal. and even if the most likely annotation sequence is returned by the viterbi algorithm, its computed probability is too small when there are further derivations of this annotation sequence.

as dowell and eddy have shown, this happens in practice and the effects are severe. for correct modeling with scfgs, we need grammars that are syntactically, but not semantically ambiguous.

semantic ambiguity in dynamic programming
our treatment here extends to all dynamic programming algorithms that fall into the class known as algebraic dynamic programming   <cit> . however, some definitions must be refined, as the adp approach uses so-called yield grammars rather than cfgs. we will not introduce the adp formalism here, but remain within the scfg terminology. still, we shall refer to some dp algorithms that are not based on scfgs, where our treatment also applies.

scfgs for rna secondary structure analysis
we will further exemplify the above using the grammars g <dig> to g <dig> studied by dowell and eddy:



dowell and eddy showed that grammars g <dig> and g <dig> are semantically ambiguous, while g <dig> to g <dig> passed a partial test for non-ambiguity.

RESULTS
in this section, we first review some sources of ambiguity and suggest three ways to deal with it: ambiguity avoidance, testing for ambiguity, and, best of all when successful, a mechanical proof of absence.

sources of ambiguity, and how to avoid them
we first study some standard patterns that give rise to ambiguity in our grammars. thereafter, we make some observations with respect to the potential of testing procedures.

three simple cases
ambiguity does not sneak into our grammars by chance and non-awareness. there are two competing goals in grammar design, and both may foster ambiguity.

small grammars have the advantage that they require fewer parameters and can be trained more quickly. larger grammars allow a more sophisticated distinction of cases, hence providing a more fine-tuned model. however, if the underlying "distinct" cases lead to the same annotation sequence, then the grammar is ambiguous. this case is witnessed by grammar g <dig>  where along with the introduction of base pair specific rules, another source of ambiguity is introduced.

often, non-ambiguous grammars require more space in their implementation via a cyk parser. for example, the non-ambiguous wuchty algorithm  requires four tables for storing intermediate results, while the ambiguous zuker-stiegler recurrences  require only two. two other cases in point are  and  below, while  shows that the non-ambiguous grammar can also be smaller.

ambiguity can have many sources. here, we present three common situations that lead us to write ambiguous rules, but can be easily avoided.

 lists of adjacent elements of the same type, {sn}:

consider s → ss|u versus l → ls|s, s → u. the left-hand rule generates the language {sn} in an ambiguous way. for example, s <dig> has the two derivations s → ss → sss and s → ss → sss, where the generating nonterminal symbol is written in bold face. by contrast, with the right-hand rules there is only the derivation l → ls → lss → sss. the price for non-ambiguity is the new nonterminal symbol l, more parameters in the training set, and possibly another dp table in the implementation.

 embedded elements, {amtan}:

consider r → ar|ra|t versus r → ar|v, v → va|t.

for a given string amtan, the first two alternatives of the left-hand rule produce the initial string am and the terminal an in arbitrary order, while the right-hand rules produce amcompletely before an, allowing for only one derivation. an analog case is the embedding {amtbn}. as above, an extra nonterminal symbol is required to achieve non-ambiguity.

 ε-rules, l → ε:

sometimes it is tempting to add a special case by using ε. consider l → ls|s|ε, which generates {sn |n ≥ 0} by adding an ε-rule to the non-ambiguous rules in . now, each string of length >  <dig> has two derivations, e.g. l → ls → s and l → s. the solution here is to drop the middle alternative, l → s.

the general case of ε-rules may be more tricky to handle. in general, all context free languages can be described without ε-rules, except possibly one for the axiom symbol. however, if ε-rules were used relentlessly, eliminating them without affecting the language may require a major redesign of the grammar.

degree of ambiguity and consequences for testing
dowell and eddy showed that semantic ambiguity produces sometimes mildly, sometimes drastically false results. in one experiment, they showed that the cyk algorithm for the semantically ambiguous grammar g <dig> does not give the optimal secondary structure for about 20% of a sample set of  <dig> sequences. the same experiment for grammar g <dig> even gave a rate of 98% false results. the explanation of the difference in effect lies with the degree of ambiguity. the degree of ambiguity of a given annotation sequence is the number of its derivations, i.e. a degree of  <dig> means that this annotation sequence is not ambiguous. depending on the involved productions, a particular string can have a constant, polynomial, or exponential number of derivations. the latter is the rule rather than the exception. it is easy to calculate for the left production rule of case  above that the sequence {amtan} has  derivations starting from s. moreover, if derivations emerging from t are also ambiguous, the degrees of ambiguity multiply.

studying sources of ambiguity helps to better understand the nature of the error. depending on the grammar, certain types of rna structures may have their probability split up over a large number of derivations, while others are unaffected. this makes it difficult to judge the amount of testing required, and the confidence achieved with the approaches presented in the next section.

testing for ambiguity
performing a test for semantic ambiguity allows us to obtain more confidence in the grammar, although testing cannot prove non-ambiguity, but only ambiguity.

algorithmic arsenal for ambiguity testing
first, we create several variants of the inside and viterbi algorithms, which are our algorithmic arsenal for testing. gl serves as the expository example here; for any other grammar, recurrences can be given in an analogous way:

input: sequence x = x <dig> ... xn

initialization: for  <dig> ≤ i ≤ n

s  = ps→ε

iteration: for  <dig> ≤ i ≤ j ≤ n



scoring schemes:









 = 1

pv→α =  <dig> for all other rules

by different interpretations of the operations h, o and p, different scoring schemes can be plugged in. the recurrences may also be "conditioned" by annotating the symbol sequence x with a given annotation sequence s  <cit> . in that case, the rule s → as is only allowed when the bases involved are anno-tated to form a base pair in s. this version of the recurrences will be denoted by gs.

using the first two scoring schemes, we obtain the viterbi and the inside algorithm. using the other two, we obtain an algorithm for counting the number of derivations for the input string, and an algorithm for base pair maximization. base pair maximization will not be used in the sequel, it is included only to indicate the swiftness of transition from scfg modeling to other dp-based analyses. these algorithms are available at the accompanying website  <cit> , where readers are welcome to practice their insight on ambiguity matters.

in the following, we write g  for running the cyk parser based on grammar g with scoring scheme σ on input x.

we recalled above that the formal treatment of semantic ambiguity requires a canonical representation of the objects under study. for rna secondary structures, there is an obvious choice, our annotation sequences in the widely used dot-bracket notation . each secondary structure  is uniquely represented by such a string. the scoring scheme dotbracket makes the cyk algorithm report all the structures it has analyzed for a given input sequence by producing their annotation sequences.



here, the objective function h merely collects lists of dot-bracket strings, each pv→α is a function adding dots or brackets to strings.  is string concatenation. ps→ss is also string concatenation, but has the unusual type string → , in order to fit into our recurrences smoothly. here, o expects a dot-bracket string as its left argument, a function as its right argument, and applies the latter to the former. for example, the function calls ps→ss ) ) generate the annotation sequence ". ()" for the symbol sequence "agu". the reader may verify  that g <dig>  = , where the duplicate entries result from the ambiguity of g <dig> for example, the annotation sequence "..." is found  <dig> times.

using these algorithms in concert for some rna sequence x, we obtain from g the probability of the most likely derivation for x, from g the number of possible derivations, and from g the complete list of the annotation sequences associated with these derivations – possibly containing duplicates in the case of semantic ambiguity.

testing procedures
brute force testing
checking for duplicates in g. we can simply enumerate the dot-bracket representation of all structures exhaustively for a given input string and check for any repeats. there are some duplicates in g if and only if x can fold into an ambiguous annotation sequence . performing this test on a large number of inputs x should give a good hint whether ambiguity is present. of course, enumerating the annotation sequences for all possible derivation trees creates voluminous output, and the automated check for duplicates requires some careful programming. hence, this test is practical only for short sequences.

sampling structures from sample sequences
test g = gs? dowell and eddy suggested a testing procedure that relies on a comparison of the results from the viterbi and the inside algorithms, where the latter is conditioned on the most likely annotation sequence s returned by the viterbi run. gs sums up probabilities over all derivations representing annotation sequence s. the tested equation therefore holds if and only if the annotation sequence s has exactly one derivation tree. if there are more than one, the inside algorithm will return a higher probability than the viterbi run, which indicates ambiguity of s . similarly, gs directly computes the number of derivations for s, where a result larger than  <dig> signals ambiguity.

dowell and eddy suggest to run the test also for a sample of suboptimal annotation sequences for x. as a variant, we can do the same test based on a minimizing viterbi run . since the minimizing viterbi run gives us the least probable derivation tree, we may have a higher chance to find an ambiguous one  than in the maximizing run.

in any case, this test works with samples of sub-optimal annotation sequences for a test set of sequences, and it is difficult to give general guidelines how much testing is required. the four grammars g <dig> - g <dig> passed the dowell-eddy test in  <cit> , and in the next section we shall prove their non-ambiguity. in this sense, we can state that this test has already worked quite well in practice. however, the eternal dilemma of testing persists – only if we confirmed the above equation for all x, semantic non-ambiguity would be assured.

structure counting for sample sequences
test g = r? an even stronger test is possible when we have a reference grammar r available that generates the same language and is known to be semantically non-ambiguous. grammar g will produce counts that are larger than those of r if and only if g allows ambiguous derivations for x. still, if this test succeeds, this does not imply non-ambiguity of g. but this test is much more thorough than our previous one, as the entire structure space of each tested x is analyzed. for example, a sequence of length  <dig> has an expected number of  <dig> feasible structures  <cit> . thus, one run of this test has the testing power of  <dig> runs of the previous one. several non-ambiguous reference grammars for rna are known – the critical part here is to assure that our grammar g to be tested describes the same language as r. both grammars must impose the same restrictions on loop sizes, lonely base pairs, etc. this may be obvious in many cases, but in general, language equivalence is an undecidable problem in formal language theory.

just-in-time testing
test g = r? while testing cannot guarantee the non-ambiguity of the grammar, we can convert the previous idea to a test that ensures for each application run that the results are not affected by ambiguity. prior to running g for a given x, we test whether the property g  = rholds. this costs a constant factor in runtime, but solves the problem in the sense that when we get a positive test, we know the viterbi result is correct for this input. if the grammar is ambiguous, this will be detected with the first application where it occurs.

proving non-ambiguity
proving the absence of ambiguity in a grammar is of course better than any test procedure.

semantic ambiguity in dynamic programming is unde-cidable
ambiguity of context free grammars is well-known to be algorithmically undecidable  <cit> . there exists no program that can determine for an arbitrary grammar g whether or not g is fl-ambiguous. here, the problem is to decide whether a given scfg is se-mantically ambiguous. it is not surprising that this problem is not easier:

theorem  <dig> semantic ambiguity in dynamic programming is formally undecidable
proof
we show that for a given cfg g there exists a dp problem and an associated canonical model such that the dp algorithm is semantically am biguous if and only if the grammar is fl-ambiguous. given an algorithm to decide ambiguity for dp problems, we could hence decide ambiguity for context free grammars, which is impossible. details are given in the appendix. □

while this result rules out an automated proof procedure for arbitrary grammars used in scfg modeling, there might still be the possibility to design such a procedure for a restricted class of grammars, say all grammars which describe rna secondary structures. however, no such method is currently known.

hand-made proof of non-ambiguity
a hand-made de-novo proof of the non-ambiguity of a new grammar g requires an inductive argument on the number of parses corresponding to the same annotation sequence. we constructed one such proof for the grammar published in  <cit> . it is not mathematically deep, but rather a tedious exercise, and the likelihood to produce errors or oversights is high. an easier approach is the use of a known, non-ambiguous "reference" grammar r, such that l = l. by showing that a one-to-one mapping between parse trees of g and r exists, it is possible to prove the non-ambiguity of g. such a proof remains manageable if the grammars are rather similar and the correspondence between derivations is easy to maintain. for grammars that are rather distinct, the proof is as messy as the de-novo proof.

mechanical proof of non-ambiguity
we now present a mechanical technique that is a partial proof procedure for the case of modeling rna structure with scfgs: if it succeeds, it proofs non-ambiguity, if it fails, we do not know. we shall show that the method succeeds on several relevant grammars.

the technique described in the following comprises two steps. first, we remove the syntactic ambiguity of the grammar and reduce a possibly existent semantic ambiguity to fl-ambiguity. then we use a parser generator to check the transformed grammar for fl-ambiguity. this test can prove non-ambiguity of a large number of grammars.

ambiguity reduction
paired bases can always also be unpaired – this creates the syntactic  ambiguity. for example, grammar gl has four rules of the form s → as, one for each base a, c, g, u, and six rules of the form s → as for the six valid base pairs. used in concert, they create the "good" ambiguity that allows us to parse "caaag" either as "" or as ".....".

remember that the dot-bracket notation is a canonical representation for rna secondary structure. for any g, we denote by g* the transformed grammar that arises when we replace base pairs a,  by "", and other base symbols by ".". take for example

g <dig> : s → as | ass | ε , which is transformed to

g5* : s → '.'s | '' s | ε .

this transformation removes the syntactic ambiguity of g <dig> by differentiating between paired and unpaired bases and reduces the semantic ambiguity -if present – to fl-ambiguity of g5*. note that the transformation from g to g* works for any grammar for rna structure, as long as we can identify the corresponding bases of a base pair.

theorem  <dig> let g* be derived from g according to the above rules. then, g* is fl-ambiguous if and only if g is semantically ambiguous
proof
every dot-bracket string describes exactly one possible secondary structure. if g* is fl-ambiguous, there exist different derivations in g* for the same dot-bracket string z. then, for an rna sequence x compatible with z, using the corresponding productions there are different derivations in g which represent the same secondary structure z. this is equivalent to semantic ambiguity of g. if g* is non-ambiguous, only a single derivation exists for every z in l. a single derivation exists in g for a compatible rna sequence x, and hence, g is semantically non-ambiguous. □

non-ambiguity proof
by the transformation described above, the task of proving semantic non-ambiguity of g is transformed to the task of proving fl-non-ambiguity of g*. as stated above, this question is undecidable in general. however, compiler technology provides a partial proof procedure: if a deterministic parser can be generated for a grammar, then it is non-ambiguous  <cit> . we shall apply a parser generator to g*.

simply speaking, a parser generator takes a file with a context free grammar as input, and generates a program which implements the parser for this grammar. this parser must be deterministic, and, in contrast to our cyk parsers, it only exists for non-ambiguous grammars. there are many such generators available; we will focus on the class of lr grammars  <cit>  and their parser generators. a context free grammar is called lr if a deterministic shift reduce parser exists that uses k symbols of lookahead. by definition, an lr grammar is non-ambiguous, and for a given k it is decidable whether a grammar is lr. this decision can be assigned to a parser generator. given the grammar and the lookahead k, a parser generator tries to construct a parser that uses k symbols of lookahead. when successful, the non-ambiguity of the grammar is proved. when the grammar is not lr, the generator will not be able to create a deterministic parser and reports this situations in form of "shift-reduce" and "reduce-reduce"-conflicts to the user. in this case, we do not know whether the parser generator might be successful for a larger k, and the question of ambiguity remains undecided.

applications
for our experiments, we used the msta parser generator of the cocom compiler construction toolkit  <cit> . msta is capable of generating lr parsers for arbitrary k. note that compiler writers prefer other parser generators like yacc  <cit>  and bison  <cit> , which for efficiency reasons only implement lr parsers. we, however, are not planning to run the parser at all. its successful construction is the proof of non-ambiguity; for applying our scfg, we need the original grammar and its cyk parser.

msta accepts input files in the widely used yacc format. the following shows the input file for grammar g5:



feeding this file into msta with k =  <dig> yields a deterministic shift-reduce parser for grammar g <dig>  this proves that g <dig> is lr, has a deterministic lr parser, and is therefore non-ambiguous.

grammar g <dig> is lr and g <dig> to g <dig> are lr. therefore, we have proved mechanically that the four "good" grammars studied by dowell and eddy are definitely non-ambiguous. the two additional grammars g <dig> and g <dig> from  <cit> , not reproduced here, were also included in the study and proved to be non- ambiguous.

in table  <dig> we also report on the number of conflicts found by the parser generator for increasing values of k. while the nature of these conflicts is not relevant for us, the table shows that various behaviors are possible. their numbers may grow  or may remain constant  before they go to zero for some k.

experience from a larger example
the parser generator test works quite well for the small grammars we presented so far. however, there exist cases where, due to the finite lookahead of the generated parser, the parser generator reports conflicts while the grammar is in fact non-ambiguous. in the following, we report on one such case, and show how to deal with this situation.

in his thesis  <cit> , björn voss introduced a new grammar that promises to handle dangling bases of multiloop components in a non-ambiguous way. with  <dig> nonterminal symbols and  <dig> rules, the grammar is quite large. in such a case, mechanical assistance is strongly required. our first approach with the parser generator succeeded, except for one small part of the grammar for which it reports a con-flict. figure  <dig> shows two example derivations where this conflict occurs.

the central nonterminal of the grammar is cl, which splits up into closed structures like hairpin loops, bulges, and multiloops. due to the necessity to handle dangling bases in a non-ambiguous way, the rules for multiloops are the most complicated of this grammar. altogether,  <dig> nonterminals and  <dig> rules are used exclusively for this purpose. the construction of these rules guarantees, that every derivation of a multiloop must lead to at least two closed substructures. one of these derivations is shown on the left side of figure  <dig>  therefore, a derivation of a multiloop can by no means conflict with a derivation of a left bulge, which must include a single closed substructure. however, the parser generator runs into a conflict here. consider the following annotation sequence:



here, the string ", the parser generator is not able to construct a deterministic parser for this situation and reports a conflict.

however, we can circumvent this problem by extending the alphabet of the annotation sequence by an additional character  for unpaired bases in left bulges1:



since a multiloop's derivation can not conflict with that of a bulge, this modification does not alter the ambiguity or non-ambiguity of the grammar. the important difference is that positional information is turned into symbolic information.

after this modification, the parser generator runs smoothly through the grammar, which proves its non-ambiguity.

CONCLUSIONS
in this work, we have presented testing methods and a partial proof procedure to analyze the semantic ambiguity of scfgs. we have shown that the problem is not decidable for dynamic programming over sequence data in general, and that hence there is no standard solution that works for all cases. it remains open whether specifically for the class of grammars that describe rna secondary structure, this problem is decidable. we have proposed several tests, and a partial, mechanical proof procedure. we mechanically proved that the six grammars that passed dowell and eddy's test for non-ambiguity are actually non-ambiguous. we also reported on a proof of the non-ambiguity of a new and large grammar for rna secondary structures, whose sophistication makes it inadvisable to rely solely on human reasoning.

we want to point out that the non-ambiguity proofs for the grammars studied here do not solve the problem of ambiguity for modeling of rna secondary structures once and for all. new scientific interests and research questions will always demand new grammars. an example is a grammar that is restricted to a special class of structures of an rna family. this allows us to define a thermodynamic matcher, which uses the minimum free energy as a scoring scheme and focuses only on a specific realm of secondary structures. here, for every new rna family, a new grammar must be devised. this demonstrates a continuous need for new, specialized grammars. every time we develop a new grammar, the dragon of ambiguity raises its head, but with the weapons presented here, we can be confident to defeat it.

