BACKGROUND
recent years have seen an explosion in the amount of biological data available from large-scale genome sequencing projects, but this increase has not been met by a corresponding increase in single-core computer power to bioinformatically analyze this data. it is therefore predicted that the scientific community will face serious computational problems in the coming years in their efforts to interpret genomic data. the prediction of rna secondary structure remains a particularly challenging problem, in a large part due to its computational complexity: even without pseudoknot prediction, the execution time of state-of-the-art algorithms scales as o or worse with the length of the sequence, l. one way to address this problem is by exploiting heuristics to reduce complexity, but this happens at the cost of accuracy in predictions, which is particularly detrimental in the case of already inaccurate algorithms. another possibility is to apply emerging multithreading paradigms to more accurate algorithms, and obtain the precise results in a fraction of the time.

rna secondary structure prediction algorithms are typically based on either thermodynamic or stochastic context-free grammar  models, and are implemented using dynamic programming. a recent review  <cit>  gives an overview over existing tools. previous attempts to parallelize rna structure prediction algorithms have included thermodynamic prediction  <cit>  and the scfg-based profiling of rnas  <cit> , as well as massively parallel genetic algorithms  <cit>  and hardware-accelerated folding on fpga chips  <cit>  and gpus  <cit> . despite improved runtimes, the accuracy of these algorithms remains low, due to models that may not be appropriate for very long sequences.

here we focus on pfold  <cit> , which couples a phylogenetic model to a scfg to accurately predict the consensus structure of rna alignments in o time  <cit>  . due to the combined approach, the pfold model is theoretically capable of obtaining high-quality predictions of large and biologically significant rna structures, such as the genomes of rna viruses. however, it has not been possible in practice to use pfold for such predictions: it is single-threaded, so it can take days to fold a long alignment, and it fails to predict large structures correctly due to floating-point underflow errors  <cit> .

in this study, we address both of these issues, and create ppfold, an improved and multithreaded version of pfold. to our knowledge, ppfold is the first example of a multithreaded comparative rna secondary structure prediction algorithm. we demonstrate its practical use by predicting the secondary structure of an alignment of  <dig> hiv- <dig> genomes.

RESULTS
algorithm
ppfold uses the same combined evolutionary and scfg model as pfold  <cit> . a summary of this model is provided in the methods section. here we focus strictly on the parts of ppfold that present improvements on pfold.

multithreading the phylogenetic calculations
after estimating the phylogenetic tree, the pfold algorithm calculates column- and column-pair likelihoods, based on post-order traversal through the tree. we have only distributed the calculation of column-pair likelihoods, as this is the most time-consuming part with a time complexity of o, where l is the length of the alignment. it is desirable to distribute the calculations as evenly as possible, so all processing units have an equal workload. as all column-pairs are treated independently, a natural division for multithreading arises by grouping a number of column pairs together in such a way that there are as many groups with equal numbers of column pairs as processing units. however, a unique mapping from the number of groups, n, to the size of each group, s, does not exist.

column-pair likelihoods are symmetric, so in total there are  column pairs to calculate. for simplicity, we chose to distribute these on the basis of the first iterator column: to each group, we incrementally assign as many first iterator columns  as possible, such that the total number of column pairs in all groups up to group number k >  <dig> does not exceed  

this provides an approximately even distribution of workload to the processing units, and we observe a corresponding reduction in running time on multicore machines. 

multithreading the inside-outside algorithm
the inside-outside algorithm fills two lower triangular matrices of dimension l for each nonterminal symbol of the grammar, through dynamic programming. the knudsen-hein grammar contains  <dig> nonterminal variables, so in total there are  <dig> such matrices to be filled. the algorithm exhibits heavy dependencies, making its distribution into independent "jobs" nontrivial. in ppfold, we have chosen an asynchronous wavefront computational approach that exploits the geometry of the algorithm.

we divide the triangle into equal-sized parallelogram-shaped "sectors" . we will refer to the number of sectors in the first row of the triangle by n. the dependency of the sectors on each other in the inside and outside parts of the algorithm is illustrated by figure 4; the values for all nonterminals in each sector can be evaluated once all dependencies are completed. a "job" thus entails the evaluation of either the inside or the outside variables corresponding to a sector for all nonterminal variables in the grammar. the workload in jobs is not equally distributed, as illustrated by figure  <dig> 

by design, jobs are self-sufficient objects created only when their dependencies are completed: they contain all data necessary for the calculation of the values in the corresponding sector in order to also allow distribution to a non-shared memory framework. asynchronous implementation makes it possible to execute jobs immediately after the necessary dependencies are completed, rather than waiting for all jobs in the same row to complete.  this is ideal for a setting where executor units have different capabilities, such as a grid of personal computers.

it is important to note that multithreading is not possible for all parts of the algorithm: for example, the job at the top of the triangular matrix has to be executed by one processing unit without any simultaneous calculations. therefore it is ideal to choose n >>u, where u is the number of available processing units. in the limit n → ∞, the theoretical execution time on u processing units is reduced to  of the execution time on one processing unit, and this is also what we observe in practice.  we note that this method of divisions is generally applicable to any bifurcating scfg, and thus may be used for the parallelization of other algorithms also.

memory use is optimized with a large number of divisions, where only the lower triangular matrices are stored. however, the space complexity of the algorithm remains o, and roughly  <dig> gb of memory are needed to fold a  <dig> nucleotide-long alignment.

multithreading expectation maximization
in contrast to many scfg-based rna secondary structure prediction programs, pfold returns the structure with the maximum number of expected correctly predicted nested structural elements, instead of the maximum likelihood estimate. to find this structure, it is necessary to calculate a matrix of expectation values for every fraction of the alignment, similarly to the inside algorithm. the details of this are described in the methods section. as these calculations also contain bifurcations, they are distributed analogously to the inside algorithm.

underflow
floating-point underflow arises commonly in dynamic programming for the folding of long rnas, due to the multiplication of several thousands of low probabilities with each other. it has effectively prevented the correct folding of large rna alignments with pfold, as the values of the inside-outside variables decrease both with the length of alignment the number of sequences in it. a common solution is to calculate with log-probabilities, implementing addition as a "log sum" function with a lookup table. other possible solutions include multiplying the rules of the grammar with a factor, such that underflow is reached more slowly, thus extending the foldable length of alignments, or multiplying a block of probabilities lower than a certain cutoff value by a scaling factor.

in ppfold we have taken an alternative approach and implemented an extended exponent datatype, consisting of a float "fraction" and an integer "exponent"  part. together,  <dig> bits are used to store each number - the same amount of space as a double-precision floating point number, so the overall memory requirements of the algorithm are not increased substantially. for each nonterminal symbol , we store two 2-dimensional arrays: one for the exponents and one for the fractions. for every operation, we combine numbers from these arrays using custom bitmasking and bitshifting methods.

implementation
ppfold has been written in java  <dig> , and integrated into the clc workbenches using the clc developer kit  api. the source code and executables are available for download at http://www.daimi.au.dk/~compbio/pfold/downloads.html. ppfold consists of an "algorithm" package that can be compiled and run independently of the clc workbenches, and a "plugin" package that provides interfacing with the clc workbenches.

the "algorithm" package includes all classes that are involved in the processing of sequences and alignments and creating the final structures. it has no dependencies on any clc classes, is capable of taking command-line arguments and provides a simple graphical user interface for the selection of input files. export formats currently supported by ppfold include. ct, .seq  and white text, as well as basepairing probability data.

the "plugin" package makes use of the clc developer kit api such that ppfold becomes a full-featured plugin to the clc workbenches. futhermore, integration into "minigrid-enabled" clc workbenches makes it possible to distribute calculations to a collaborative mini-grid of computers  <cit> . the details of this aspect of our work will be published elsewhere.

testing and benchmarking
performance
we have evaluated the speed of our algorithm for alignments of various sizes, with a varying number of cores and divisions of calculations.  the algorithm is fast, scales well with the number of cores and makes the folding of long alignments practically possible.

the actual execution time of ppfold  on a dell precision t <dig> workstation with dual quad core intel®xeon®x <dig>  <dig>  ghz cpu,  <dig> gb ram, is shown, for alignments of different lengths, choosing different divisions, and enabling different number of cores to be used by ppfold by varying the size of the thread pool. a small number of divisions can in some circumstances result in disproportionately long runtimes, due to the higher number of extra  points that are present in the calculations. the algorithm is intended to be run using a high number of divisions on all architectures. for comparison, we also include the runtimes of the original pfold implementation , which suffers from underflow, making the results unreliable for alignments of these lengths.

accuracy
we have replicated the bralibase i benchmarking tests  <cit> . ppfold performs as well as pfold for short sequences , and significantly better than pfold for longer sequences , as it does not suffer from the underflow problem. 

the results of our tests on the bralibase i dataset, using the comparison script available at http://projects.binf.ku.dk/pgardner/bralibase/bralibase <dig> html, are shown, both for pfold and ppfold. we carried out stem-extension separately on the ppfold predictions, as it is not implemented in ppfold at present. m: medium-similarity, h: high-similarity

folding of the hiv- <dig> genome
to demonstrate the speed and accuracy of our algorithm, we have folded an alignment of  <dig> full hiv- <dig> genomes using ppfold in  <dig> minutes on a dell precision t <dig> workstation with dual quad core intel®xeon®x <dig>  <dig>  ghz cpu, using  <dig> gb of memory. in addition to predicting the consensus structure within a practically reasonable timeframe, ppfold has also predicted a number of known rna structures, including the tar, poly, pbs, dis, aug hairpins, the gag-pol frameshift and the rre region.   <cit>  the prediction of the full consensus secondary structure of a large viral genome alignment, including phylogenetically supported long-distance interactions, has not previously been possible on practical timescales without the need for specialized hardware.

numerical stability
in ppfold, we have reduced the representation of significant digits to  <dig> bits . to assess potential numerical errors arising from this, we have folded a large hiv alignment with different divisions, such that the same computations were carried out in a different order each time. our results show that the inside-outside variables are correct to at least  <dig> significant digits for a 9840-nt long alignment of  <dig> sequences, which we do not consider to be significant. 

the value of the s variable from the inside algorithm representing a full-length hiv- <dig> genome alignment ), stays stable correct to at least  <dig> significant digits, when carrying out the calculations in a different order .

CONCLUSIONS
ppfold is a new, multithreaded version of the pfold algorithm, capable of obtaining high-quality, phylogenetically supported structures for large rna alignments in a practically reasonable time, which has not been possible previously. ppfold distributes both the phylogenetic and the inside-outside calculations of pfold, and our tests show that its speed of execution scales well with the number of executing cores. using ppfold, we have been able to obtain a high-quality prediction for an alignment of  <dig> full hiv- <dig> genomes in  <dig> minutes on an 8-core computer. we anticipate that our algorithm will be used also for the prediction of other long rna alignments, such as viral genomes and genomic transcripts.

