BACKGROUND
bioinformatics is an area where we can find many large combinatorial optimization problems  <cit> . the high size of the space of solutions causes these problems can not be tackled by means of exact searching techniques, which require an excessive computational effort. in these cases, the usual way of obtaining optimal solutions is to consider metaheuristics  <cit>  and particularly evolutionary algorithms   <cit> . nevertheless, even these algorithms can be slow for complex problems, demanding more hardware resources based on current general-purpose processors or central processing units . if we identify what part of the algorithm takes more time to be computed, a hardware coprocessor specifically designed to accelerate this function is a direct solution to further speed up the performance. in this sense, the fitness function is a simple but critical operation involved in the metaheuristics. most of the computing time of the algorithm that solves the optimization problem may be spent running the fitness function, although it could mean a small part of the code.

the core of this work deals with the hardware-level parallelization of the fitness functions used in two bioinformatics problems: gene selection for cancer classification and biclustering of gene expression data. the reason for designing fitness hardware accelerators is twofold. on the one hand, every fitness function is applied to each individual of a population in many bio-inspired metaheuristics; this fact allows us to parallelize the computation of the fitness evaluation phase if we place several copies of the same fitness hardware implementation. on the other hand, fitness functions are usually formulated by means of floating-point arithmetic equations that can involve many operation steps; this way, parallelization of some of these steps using repeated units of the same floating-point operator increases the performance of the design.

both reasons represent two levels of parallelism: in the bottom, a fine-grained parallelization of the fitness equation; in the top, a fast computation of the fitness evaluation phase applying replicated fitness units in parallel to several individuals of the population. we focused our research mainly on the fine-grained parallelization of the fitness formulation, although on-chip concurrent fitness evaluation has been explored as well. figure  <dig> illustrates these considerations, comparing usual cpu sequential programming to custom on-chip parallel systems. we can accelerate the computation of the fitness phase making good use of parallelism: replicated fitness functions working in parallel at the top-level, and parallel computation of the fitness equation at the bottom-level. we can observe that cpu requires sequential steps not only for the evaluation of the fitness of each individual, but for the calculation of the fitness equation.
fig.  <dig> two possible parallel levels for a fpga implementation of the fitness phase in a general metaheuristic



the hardware implementation of fitness equations is made easier thanks to hardware description languages  and field programmable gate array  devices  <cit> . the fpga technology favoured the rise of a computing domain that combines software flexibility with hardware performance exploiting the parallel paradigm: reconfigurable computing   <cit> . this way, a fitness function carefully designed can surpass the cpu performance in similar experimental conditions, as rc has demonstrated in many applications  <cit> . in addition, we decide on fpgas instead of other competitive technologies as graphical processing units  since fpgas usually provide better performance and lower power consumption than gpus  <cit> .

reconfigurable computing has been successfully applied to many bioinformatics problems, because they have a high parallelism degree. knowing how to make the most of this parallelism, we can obtain speedups and energy savings needed for intensive computing or real-time applications. in this area, we can find fpga implementations for dna matching based on the blast algorithm  <cit> , bowtie short-read mapping  <cit> , epistasis detection  <cit> , molecular modeling  <cit> , and many other algorithms involved in sequence comparison, multiple sequence alignment, rna and protein secondary structure prediction, gene prediction and phylogenetic tree computation  <cit> , among many others. nevertheless, these works are usually focused on solving specific problems, dealing with their special characteristics and constraints. contrary to these approaches, our work tries to get a wide insight into important aspects to take into account when designing accelerators.

this way, our main contribution in this paper is to demonstrate that the fine-grained parallelization of fitness functions based on floating-point arithmetic can surpass the performance given by cpus, in time and power terms, when they are massively used by metaheuristics for solving large combinatorial optimization problems in bioinformatics. the conclusions of our work can be applied in general to similar cases, because of the representativeness of the fitness functions we have chosen. for this purpose, we have selected two specific fitness functions used in the above mentioned optimization problems by two reasons: on the one hand, there is not enough information about their implementation in fpgas in the existing literature; on the other hand, they provide different computational workloads and parallelization levels because of their floating-point arithmetic formulations, being representative formulations of other similar functions widely used in bioinformatics.

the hardware implementation of the fitness function can be used as a coprocessor of an embedded cpu running the metaheuristic in the same fpga. nevertheless, the need for scalability that large and real-world applications require, and the metaheuristic request of handling many individuals of the population in parallel, make it necessary to consider computing systems consisting of several fpgas in multicore architectures. this coarse-grained parallelization belongs to the high-performance reconfigurable computing , a promising paradigm that exploits the possibilities of fpgas  <cit> , although it requires to design according to computing models based on specific communication and data-handling techniques  <cit> . nevertheless, if we want to develop a computing system based on such large fpga platforms, the first and mandatory step is to know if the unit to be massively replicated  is able to give enough speedup with regard to usual cpus. this is the reason why our research is focused on a worthwhile fine-grained parallelization of the fitness function, since it is the basis for a success scalability that is left as future development.

summarizing, our proposal presents the performance from a computational perspective. other performance features closer to the specific bioinformatics problems only can be tackled by the corresponding algorithmic methods and software packages, which are out of the scope of this work.

related work
as we pointed out in the previous section, bio-inspired and evolutionary optimization algorithms are very appropriate to be parallelized, not only by applying repeated fitness hardware units in parallel on several individuals of the population, but parallelizing other important parts. for example, the intrinsic parallelism in popular genetic algorithms   <cit>  allows better speedups. in this line, fpgas have been successfully applied to parallelize many metaheuristics and optimization algorithms, like differential evolution   <cit> , particle swarm optimization   <cit> , artificial neural networks   <cit> , and ant colony optimization   <cit> , among many others.

the high performance cost of the fitness evaluation phase in relation to the overall computing time of the metaheuristic is a well-studied fact in the literature. fitness evaluation can take up to  <dig> % of the total execution time in genetic programming  <cit>  or  <dig> % in gas with evolutionary mapping  <cit> . in general, many works have demonstrated that the execution time of the applications will mainly depend on the execution time of the fitness function  <cit> .

the above considerations move us to implement the fitness functions in hardware to enhance the system performance. these functions have been accelerated by means of fpga devices in genetic programs for financial markets  <cit> , spatial image filters  <cit> , filtered image signals  <cit> , test cases  <cit> , and many other engineering applications.

the first bioinformatics problem in our study is gene selection for classification of high dimensional microarray data in cancer disease. this optimization problem has been studied using mainly gas and support vector machines , where the ga is used to evolve gene subsets whose fitness is evaluated by a svm classifier. in this line, there are approaches based on single objective  <cit>  and multi-objective  <cit>  points of view. nevertheless, we have not found any fpga implementation of fitness functions associated to this problem. therefore, we offer novel insight into its hardware parallelization.

the second optimization problem considered in our research deals with biclustering of gene expression data, which has been tackled by means of custom evolutionary algorithms  <cit> . we have not found any fpga implementation of the fitness function as it is formulated in these works. nevertheless, fpgas have been applied in a related work, in order to accelerate the geometric biclustering  algorithm  <cit> ; in this work, we compared the fpga implementation with multi-core cpu and gpu architectures, and found out that fpga achieved higher speedup for large microarrays, as well as lower power consumption.

two case studies in bioinformatics
we have tackled the implementation of the two above mentioned bioinformatics problems following the same strategy: first, we design a fine-grain parallel circuit that implements the fitness function; then, we measure the speed-up with regard to current general-purpose processors for just one fitness evaluation; finally, we estimate the performance when several fitness circuits evaluate individuals in parallel, taking into account the area constraints for a single fpga. this approach allows us to apply the fitness circuits as coprocessors of an embedded processor that drives different optimization algorithms. this methodology is similar to other studies, as  <cit> , where a single fpga contains multiple instances of fitness circuits to evaluate possible solutions in parallel, together with the optimization algorithm driven by an embedded processor.

there are many other bioinformatics problems involving metaheuristics with fitness functions similar to these two cases, specifically with regard to the floating-point arithmetic  <cit> . this way, analyzing the fpga implementation of the two case studies can contribute to expect good computing speedups in other works.

gene selection for cancer classification
the analysis of microarray-based gene expression allows us to compare between the gene expression levels of cancerous and normal cells, in order to select the genes under suspicion  <cit> . these genes are useful for cancer classification, but hard to be selected when the number of genes  and samples  are very high, shaping a combinatorial optimization problem.

a common approach to face this challenge consists in selecting a subset of suspicious genes for cancer classification. this is the basis of many metaheuristics where the individuals of the population are gene subsets. we have considered a fitness function given by , where x is the subset, a is the leave-one-out-cross-validation accuracy provided by a classifier, r is the number of selected genes in the subset, and w <dig> and w <dig> are weights for the accuracy level and the number of selected genes, respectively  <cit> . this fitness function must be maximised by the metaheuristics in order to find an optimal gene subset. 
  <dig> f=w1a+w2m−rm 

the top-level circuit to test the fitness function  is composed of nf instances of the fitness circuit, nc instances of a floating-point comparator, and a controller that drives and parallelizes the operations involved in f. the value of nf depends on the fpga area.

the mission of the controller is to handle the different steps of the test process, which follows this scheme: 
the controller simultaneously sends different subsets to the fitness units, together with a start instruction and other values involved in the fitness calculation.

the fitness units start to compute f in parallel for each subset. the calculation in each unit is parallel too.

once all the nf units have calculated the fitness values, they are sent in parallel by pairs to nc=nf/ <dig> floating-point comparators.

the comparators determine the highest values of the fitness pairs. once all the comparisons have finished, the best values are compared again by pairs, this time by means of nc/ <dig> comparators.

the comparison process continues up to reach the last pair of higher values, where the highest one is given back to the controller.



the fitness circuit implements the arithmetic operations involved in f, some of them in parallel. the architecture of the fitness unit  is composed of several arithmetic modules and a fitness controller. the fitness controller drives the arithmetic operations according to , where three operations are performed in parallel: w1a, w2/m and m−r. this architecture needs three floating-point arithmetic operators  and an integer to float converter. the fitness controller supplies the operands to the arithmetic modules and receives the results. once the calculation of f has been completed, the fitness controller gives it back to the controller.

biclustering of gene expression data
this problem deals with numerical matrices that represent information extracted from microarray data. these matrices can be built using clustering or biclustering methods  <cit> . clustering methods gather together genes with a similar behaviour under all the experimental conditions, using algorithms based on genes similarity, whereas biclustering methods find subsets of genes with the same behaviour under a subset of experimental conditions.

a general bicluster is represented by a matrix b of i rows  and j columns , where the element bij is the expression level of the gen j under the experimental condition i.

since biclustering is more complex than clustering, several evolutionary algorithms have been applied in order to find biclusters. these algorithms consider as fitness function a measure for assessing the quality of biclusters. one usual measure is the mean squared residue , that provides lower values for better biclusters. the msr value is calculated following these steps:
calculation of the means bij of each row i .

calculation of the means bij of each column j .

calculation of the mean bij of the entire matrix .

calculation of the residue rij of each matrix element .

calculation of the msr .



  <dig> bij=∑j=0j−1bijj=sum_bijij 

  <dig> bij=∑i=0i−1biji=sum_bijji 

  <dig> bij=∑i=0i−1∑j=0j−1bijj=sum_biji·j 

  <dig> rij=bij−biji−bijj+bij 

  <dig> msr=∑i=0i−1∑j=0j−12i·j 

this procedure is highly parallelizable. there are different ways to parallelize the calculation of msr, according to the experimental constraints: the more resources we have, the more parallelization we can achieve. since the parallelism comes basically from the use of replicated circuits of the floating-point arithmetic operators, the fpga device can host different number of these units depending on two factors: the specific fpga device  and the size of the bicluster. due to this reason, we have considered two different parallelization models to compute msr.

we name the first model as msr partially parallelized. this is a procedure useful for bigger matrices or fpga devices with lower area, where we can only use a limited number of repeated circuits for the arithmetic operators. this procedure involves more sequential steps than in the case where we have as many multipliers as elements bij in the matrix. this way, the computation of msr follows six sequential steps, each of them composed of parallel tasks, as fig.  <dig> shows an example of a  <dig> × <dig> bicluster:
fig.  <dig> partially-parallel msr computation for a  <dig> × <dig> bicluster

the elements bij of each row and column are added in parallel, obtaining at the same time the values of sum_biji and sum_bijj.

the sum sum_bij of all the elements bij of the matrix  is obtained in parallel together with the values of biji  according to .

the values of bijj are obtained in parallel dividing the corresponding sum_bijj by i, according to .

the value of bij, according to , is calculated dividing sum_bij by i·j.

the values of rij, according to , are calculated in parallel by rows, but sequentially by columns, taking into account that the number of parallel floating-point multipliers is limited.

finally, the value of msr, according to , is obtained parallelizing the calculation of r <dig> 



the msr fully parallelized model parallelizes the msr computation in a higher grade. this procedure can be applied to large fpga devices or smaller matrices. in this case, the msr calculation follows five sequential steps, each of them also composed of parallel tasks, as fig.  <dig> shows for an example of a  <dig> × <dig> bicluster: 
the first step is the same as in the msr partially parallelized model: calculation of sum_biji and sum_bijj.

now we increase the parallelism with regard to the first model, calculating in parallel sum_bij, biji and bijj.

this step corresponds with the fourth step in the first model: calculation of bij.

now we can calculate rij in a fully parallel way, because we have more parallel floating-point multipliers.

the last step calculates msr as the previous model does.

fig.  <dig> fully-parallel msr computation for a  <dig> × <dig> bicluster



the top-level circuit that measures the msr performance , just like the fitness function for the first bionformatics problem, is composed of nf instances of the fitness circuit, nc instances of a floating-point comparator, and a controller. the value of nf and the corresponding nc=nf/ <dig> also depend on the fpga area.

the controller and the fitness circuits have different implementations according to the parallelization model and the bicluster size. the implementation version is identified by one letter  followed by the matrix size. in addition, the number of fitness and comparator units is specified for the controller. for example, controller-f16x8-nf6-nc <dig> denotes the circuit implementation for a bicluster of  <dig> experimental conditions and  <dig> genes driven by the partially parallelized model using  <dig> parallel fitness units; in this case, the fitness circuit associated with this controller is identified as msr-f16x <dig> 

the architecture of the fitness circuit  may contain different number of adders, multipliers, dividers and integer-to-floating point converters, according to the implementation version. each implementation version takes into account specific parallelization and resource use. for example, the design controller-f8x8-nf4-nc <dig> hosts  <dig> comparators and  <dig> fitness units of type msr-f8x <dig>  each of them containing  <dig> adders,  <dig> multipliers,  <dig> dividers and  <dig> converters, whereas a controller-a4x4-nf4-nc <dig> circuit counts the same number of comparators and fitness units of type msr-a4x <dig>  each of them containing  <dig> adders,  <dig> multipliers,  <dig> dividers and  <dig> converters. obviously, the designs following the fully-parallelized model need much more hardware resources than the partially-parallelized model, even for smaller biclusters.

RESULTS
this section summarizes the tools, hardware resources, and implementation keys from which the results were obtained.

design tools
we have designed the fitness units, controllers and assistant circuits using programming languages and tools specifically used for designing with reconfigurable hardware. the main cores were programmed using vhdl hardware description language  <cit> . this is a is very efficient and known language, specially when we are programming at the register-transfer level, allowing to program algorithms abstracting away the hardware as far as it is possible.

on the other hand, we have used xilinx ise  <dig> software suite  <cit>  for the simulation, synthesis and implementation of the top-level circuits. this suite contains two important tools: on the one hand, core generator system tool was used for generating the circuits for the floating-point arithmetic operators; on the other hand, isim simulator was used for testing the top level circuit and measuring the time responses, very useful to calculate the speedups of the fpgas with regard to cpus.

the design methodology follows some steps, starting from the programming of the circuits using vhdl and core generator tool. in this step is mandatory to do the maximum parallelization effort in order to design an efficient architecture. once built the codes, the synthesis and implementation step allows obtaining the minimum clock frequency for a determined fpga device. using this information, a vhdl testbench customized with the corresponding clock period can simulate the top level design using isim, obtaining the time response of the circuit, which will be used to calculate the fpga speedup.

hardware resourcestable  <dig> hardware resources



the selected xilinx fpga devices offer a representative range of features, including the low-cost spartan <dig> , the high-performance virtex <dig>  and the balanced virtex <dig> . these devices may be characterized by four important features that describe the process technology , the number of logic cells , the number of internal digital signal processor  slices  and the number of memory blocks .

we measured the performance of our three fpga devices with the post-placement and routing simulation tool provided by the implementation environment. the validation of the results consisted in comparing the simulation times of the virtex <dig> device with those measured with custom circuits on a prototyping board that hosted the xc5vlx <dig> device: xilinx university program virtex <dig> development kit. since both times were almost equal, we can approve the simulation results corresponding to the other fpga devices.

in order to establish a valid fpga vs cpu comparison, and properly analyze the performances, we should consider the use of contemporary devices with similar technologies. this reason led us to use several processors of different cmos technologies and clock frequencies, as we can see in table  <dig> 

implementation keys
we designed custom circuits to test the performance of the fitness function instead of using embedded processors because these ones take up an area that, otherwise, would be useful for hosting more parallel fitness circuits.

each synthesis was repeated several times following different strategies in order to obtain the highest clock frequency. on the one hand, we considered three optimization synthesis profiles: default, timing performance with physical synthesis, and timing performance without input/output blocks packing; other synthesis profiles were discarded because of their worse results. on the other hand, we have tested two possibilities when it comes to synthesizing the floating-point arithmetic operators by core generator: using internal dsps or logic blocks in the architecture optimization. if we consider dsps, the performance can be better, but the limited number of dsps forces us to consider digital logic if we want to have more parallel units, involving more area consumption; this tradeoff between number and performance of parallel operators must be evaluated in each case.

this way, each design was synthesized up to  <dig> times , recording the best result among the obtained ones. for example, for the fitness function in the gene selection for cancer classification problem, we tested  <dig> cases ; therefore,  <dig> cases x  <dig> synthesis profiles x  <dig> operator optimizations =  <dig> synthesis experiments were performed. depending on the nf value considered, the synthesis took from  <dig> hour to  <dig> days, also according to the processor used among those listed in table  <dig>  this means many days running synthesis processes. for the fitness function in the biclustering of gene expression data problem,  <dig> cases corresponding to different matrix sizes and parallelizing strategies were tested , totalizing  <dig> syntheses.

each synthesis reports interesting data with regard to the scalability and performance of the fitness circuits: 
area occupation. several indicators  allow us to calculate the number of circuits that we can replicate in the same fpga device in order to work in parallel. depending on the values returned by these indicators and the fpga family and model, a different number of such circuits can be considered.

timing performance. the value of the maximum frequency   allows us to determine the time to process the fitness function; if we consider nf parallel units of the fitness circuit, the time to process the different solutions is equal to that time.

power consumption. nowadays, it is very important to design energy-aware circuits in order to minimize operation costs when solving problems that involve massive computations along the time. the synthesis process tells us the power  consumed by the fitness circuits.



discussion
among the many data returned by the synthesis processes, we analyze mainly the timing reports, since they provide the speedup of fpga versus cpu . we understand by timing performance the reciprocal of the computing time t  <cit> . to compare the performance of fpgas and processors, we say that the speedup of fpga versus cpu is tcpu/tfpga. hence, a speedup greater than one means that fpga is faster than cpu; otherwise the processor wins. it is important to realize that both values, tcpu and tfpga, measure the same number of fitness evaluations; in the first case, using a loop of sequential computations, whereas the second case considers a parallel computation of nf fitness circuits.

according to this speedup definition, and taking into account the maximum number of parallel fitness circuits that can operate in parallel in the same fpga, fig.  <dig> shows that fpgas are much faster than cpus computing the fitness phase in the gene selection for the cancer classification problem, according to the different fpga devices, two processors, and a wide range of values for nf. the fpgas provide better speedups than cpus , even for the highest performance processor. we can observe that, the more parallel fitness units we consider, the better speedup we obtain, although this increase is not linear, because of the more dense top level circuits that slow down the clock frequency. in addition, virtex <dig> provides better performance than virtex <dig> because of the memory constraints to handle the synthesis of large designs . finally, since the spartan <dig> device is a low-cost fpga, it provides much lesser area than the other devices, making it impossible to host more than  <dig> parallel fitness units.
fig.  <dig> speedup fpga vs cpu for the fitness function in the gene selection for cancer classification problem



a similar analysis can be done seeing fig.  <dig>  that shows the speedups in the biclustering of gene expression data problem for experiments that use different matrix sizes and parallelizing strategies. here, we have considered the high and medium-performance fpga devices and other two different cpus. now, we obtain higher speedups than in the former bioinformatics problem , and for all the cases, because of the higher parallelization degree in both, the fitness equations and the matrix operations. in addition, we can extract two interesting conclusions. on the one hand, the msr fully parallelized model provides better performance than the msr partially parallelized model for equal bicluster sizes, as the first one involves more parallel operations. nevertheless, the highest number of replicated floating-point arithmetic operators runs out first the fpga area available: this is the reason why we can not consider large matrix sizes in the fully parallelized model. on the other hand, when using the msr partially parallelized model, since it parallelizes mainly by rows, we should compare matrix sizes with the same number of rows, for example f16x <dig> with f16x <dig>  in this case, we find that the performance is better with fewer columns, as the lower number of floating-point arithmetic operators allows more area to host more fitness units working in parallel, which has more weight in the performance than the bicluster size.
fig.  <dig> speedup fpga vs cpu for the fitness function in the biclustering of gene expression data problem



the speedups for the second bioinformatics problem  are good in all the cases and higher than for the first problem . we find the reason mainly in the parallelism degree of the fitness circuit design, rather than in the number of such circuits working in parallel. the bottom level of the fine-grained parallelization is the fitness circuit, which is composed of some basic floating point operators: adders, dividers, multipliers and integer to float converters. this way, the more floating point operators running in parallel, the better performance we expect. we find  <dig> operators in the fitness circuit for gene selection, whereas the fitness implementations for the different bicluster sizes and architectures go from  <dig> to  <dig> operators. the number of floating-point operators running in parallel has great influence on the final performance, even more than the number of replicated fitness circuits. in fact, the number of parallel units is higher in the first problem: the performance speedup for the gene selection test with  <dig> fitness units is x <dig>  whereas  <dig> units in a f8x <dig> bicluster gives x <dig>  the reason is simple: a greater number of parallel fitness units in the same fpga device implies more circuit density in the top level architecture , which produces smaller clock frequencies with the corresponding time response decrease.

the ratio of the area occupied by just one fitness circuit to the maximum number of such circuits that the fpga can host can be seen in fig.  <dig>  for the second bioinformatics problem: we can have more fitness units in larger fpgas or considering designs that use lower slice resources. summarizing, there is a strong relationship between the area required to implement a single fitness function and the bicluster size. furthermore, increasing the area required for the fitness function decreases the total number of parallel units that can be implemented on fpga. therefore, it is needed to establish a tradeoff for each experimental framework.
fig.  <dig> fpga area occupied by just one fitness circuit and maximum number of such units to work in parallel in the biclustering problem



finally, it is interesting to know the power consumption of the fitness circuits, since they have an important impact in the metaheuristics as we saw in the related work section. this impact involves high energy when the optimization problems demand intensive computations along the time.

the power consumption in the fpga is calculated by the xpower analyzer tool inside the place&route phase of the implementation, and the cpu energy is measured by the powerstat tool under linux, using the advanced configuration and power interface  battery data of a laptop. considering the gene selection for cancer classification problem with nf = <dig>  we obtained a power consumptions of  <dig>   <dig>  and  <dig>  watts for virtex <dig>  virtex <dig> and spartan <dig> devices respectively, whereas the core2-e <dig> processor used around  <dig> watts for the same configuration. this means that the fpga reduces the power consumption at least  <dig> % with regard to the cpu.

CONCLUSIONS
the interest of applying the reconfigurable computing technology based on fpgas to implement the fitness function lies in the possibility of accelerating the evaluation phase in many metaheuristics. this phase evaluates a population of solutions to a combinatorial optimization problem in the bioinformatics domain. the design of a custom circuit that implements the fitness equation allows its replication in several processing units that work in parallel and, thus, accelerate the evaluation phase.

since many optimization problems in bioinformatics define fitness functions as floating-point arithmetic operations, we have tested two of them in order to check specific implementation features: area occupation, response time and energy, mainly. from these values we can obtain the number of replicated units working in parallel and the time for the evaluation phase. the results show that fpgas provide better performances than cpus, not only because of the parallelization of the arithmetic operations of the fitness, but also thanks to the concurrent fitness evaluation for several individuals of the population in the metaheuristic.

finally, the very low power consumption of the fpga devices in comparison to cpus proves that fpga-based parallel computing environments are excellent low-cost computing solutions for intensive computing scenarios.

as future research line, we will tackle the connection of these accelerated fitness functions with evolutionary frameworks for solving the combinatorial optimization problems. the main idea is to implement an ea in software, leaving the intensive fitness computation to the hardware.

