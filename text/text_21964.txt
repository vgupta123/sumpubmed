BACKGROUND
immunoglobulins  are a family of proteins that identify and bind foreign pathogens, e.g., bacteria and viruses. diversity in the antigen-binding region of ig provides an appropriate immune response to the wide array of pathogens confronting individuals. this diversity is generated by vdj recombination, which joins a variable  gene segment, a diversity  gene segment, and a joining  gene segment from distant regions of dna to potentially create about  <dig> billion different antibodies, each of which binds to a distinct epitope.

during recombination, nucleotide excision of the germline gene termini and the addition of nontemplated n nucleotides by terminal deoxynucleotidyl transferase  at the v to d and d to j junctions provide additional diversification. furthermore, during germinal center reactions b cell receptors undergo further changes including somatic hypermutation as well as nucleotide insertions and/or deletions  of various length which creates a larger potential repertoire of antibodies.

previously the joinsolver  <cit>  algorithm was used successfully to compare an unknown vdj rearrangement against a set of v-, d-, and j-germline sequences to provide information about gene utilization in the ig repertoire in a wide variety of conditions including: s. aureus immune evasion  <cit> , cdr <dig> characteristics and vh mutations in systemic lupus erythematosus  <cit> , immunological memory in chronic granulomatous disease  <cit> , rheumatoid arthritis,  <cit> , cdr3h characterization of the fetus and neonates  <cit> ; x-linked hyperigm  <cit> , and the analysis of the neutralizing hiv antibodies  <cit> . unfortunately, joinsolver was not designed to handle indels.

this paper addresses the challenge of both accurately aligning heavily mutated ig rearrangements, potentially with indels, to the nearest matching v, d, and j germline gene and identifying junctional n nucleotides. we introduce a sequence alignment algorithm that approximates the results of a dynamic programming  algorithm, which can save up to 98% of the computational time.

dynamic programming algorithms have been used to align sequences since  <dig>  <cit> . typically, dp alignment algorithms align sequences by creating a matrix with the rows corresponding to the bases of one sequence, and columns corresponding to the bases of second sequence. matrix element  is the best alignment up to the ith base of the first sequence and the jth base of the second sequence. dynamic programming algorithms have rules that define how to initialize the matrix, how to fill matrix elements after initialization, and where to find the highest score. a traceback is kept to mark the path of the best alignment through the matrix starting from the highest score matrix element. most dp algorithms rules allow for insertions, deletions, mismatches, and matches. a match or mutated base is a one base step forward in both sequences, corresponding to a diagonal step in the dp matrix. insertions and deletions increment one sequence, but not the other, corresponding to a right or downward step, respectively. typically dp algorithms have poor performance, of order o where n and m are the lengths of the two sequences being matched  <cit> . durban  <cit>  provides an outstanding, in depth explanation of the use of dp algorithms for sequence matching.

previous work suggests that banding, or working along a diagonal band in the dp matrix, improves the performance of dp algorithms  <cit> . in the same spirit, our method uses prior biological knowledge to lock down the alignment at highly conserved motifs in v- and j-germline genes and traverses along the diagonal of the dp matrix to significantly improve the speed and accuracy of alignments. when the motifs are not found, the algorithm falls back to a more traditional dp algorithm.

the alignment of the v-segment accounts for most of the computational work. the amount of work is related to the length of the segments and the number of sequences being compared against the segment. in germline database used by joinsolver, there are many more v-germline genes  than d- or j-germline genes , and the v-germline genes have the longest germline sequences  used in the analysis. the algorithm balances the need for aligning these irregular v-segments with the need to analyze large numbers of sequences provided by next generation sequencing. a new desktop application, htjoinsolver, is provided as an implementation of the new partitioning method.

methods
partitioning sequences using conserved motifs
similar to the original joinsolver algorithm, conserved motifs initiate the alignment process  <cit> . in preparation for heavy chain vdj alignment, the rearrangements are split into smaller regions using the conserved 3’ vh-motif “tat tac tgt” and jh-motif “c tgg gg”. if a motif is not found, we fall back to other methods of finding the motif, which are described below. figure  <dig> provides an overview of the partitioning process with an example sequence. in the figure, many of the v and j nucleotides are replaced with dots to preserve space. first the conserved motifs are found in the sequence . the sequence is split just before the highly conserved 3’ v-motif . the sequence on the 5’ side of the v-motif, which includes the nucleotides encoding codons 1– <dig> of the v-germline using imgt numbering  <cit> , is aligned using our approximate backwards dp algorithm . in the figure, the arrows show the alignment direction. the sequence on the 3’ side of the v-motif consists of the 3’ of the v-segment, the vd junction, d-segment, dj junction, and the j-segment. our v-end algorithm, an overlap dp algorithm described below, aligns the sequence on the 3’ side of the v-motif and identifies the end of the v-segment. the two parts of the v-segment are merged to produce a completely aligned v-segment. the remainder of the rearrangement consists of the unaligned vd junction, the d-segment, the dj junction, and the j-segment.figure  <dig> overview of vj partitioning. partitioning ig vdj rearrangements at conserved vh & jh motifs for alignment with the approximate backwards algorithm and other dp algorithms. a) a vdj nucleotide sequence before subdivision and algorithm processing. the dots between cag…gta and gga…cag represent the nucleotides that are omitted for brevity. the v and j motifs, tat tac tgt and c tgg gg, respectively are shown in bold face type. b) the vdj rearrangement is divided into  <dig> sections: the 5’ end of the v-segment containing codons 1–101; and the 3’ end of the v-segment, the vd junction, the d-segment, the dj junction, and the j-segment. the 5’ end of the v-segment is aligned backwards , and the reset of the sequence is aligned forwards . the v-end is identified and the two parts of the v are merged. c) the rest of sequence is split just before the j motif, which is where the j-start dp algorithm aligns the sequence to a j gene  and determines the 5’ end of the j-segment. the v-end algorithm is also used to identify the 3’ end of the jh . the 5’ and 3’ ends of the j are merged. d) a specialized local dp algorithm is used to align a d-gene within the vd-d-dj subunit. in the figure, the v-, d-, and j-segments within each partition of the sequence are labeled. the intervening nucleotides labeled vd and dj represent n addition nucleotides in the junctions.



next the partitioning method identifies the jh segment using a highly conserved j motif in a process similar to the vh alignment . the remaining unaligned sequence is split just before the j-motif. a dp algorithm is used to align this fragment to j germline genes and to identify the 5’ start of the j-segment. the v-end algorithm is used to align the 3’ end of the j-segment. the two j fragment alignments are merged to produce a fully aligned j-segment. finally, the d-segment is matched using a specialized local dp algorithm  to produce a fully partitioned and aligned rearrangement . those nucleotides that are not partitioned with the vh, d, or jh segment are considered n addition nucleotides.

the approximate backwards algorithm
unlike the dp algorithms commonly used for sequence alignment, the approximate backwards algorithm starts from a known point and works backwards to the start of the matrix formed by the germline gene and the unknown or query sequence. in this study, the scoring rules are + <dig> for a match and − <dig> for a mismatch; gap opening  is penalized − <dig>  and gap extension  is penalized − <dig>  the numbers in the matrix elements are the scores of the best alignment up to the bases corresponding to the column and row. the algorithm starts at the location of the 5’ t of the conserved v-motif in both the germline sequence and the query ig sequence. the score is initialized to zero. the algorithm steps one base backwards, toward the 5’ end in both sequences. a traceback, which points to the previous matrix element, is kept to mark the alignment. as long as the bases match, the algorithm continues stepping in the 5’ direction.

if the bases don’t match, the algorithm considers the possibility of a mutation or an indel. the algorithm steps forward  <dig> bases  and calculates a small 40 ×  <dig> dp matrix using an algorithm similar to the needleman-wunsch algorithm  <cit>  to find the best alignment in this small section of the sequences. the small matrix is initialized by assuming inserts, which fill the elements in last column, and deletions, which fill the bottom row. every other element in the small matrix is the maximum of a match, a mismatch, an insertion, or a deletion using the scoring rules. the tracebacks maintain the alignment through the small matrix. by calculating all elements of the small matrix, the algorithm determines the best alignment through the matrix taking insertions, deletions, mutations, and matches into account. the algorithm continues aligning from the highest scoring entry in first row or column of the matrix.

figure  <dig> demonstrates how the algorithm aligns sequences. in the examples provided in figure  <dig>  the starting point uses the most 5’ t from the conserved v-motif, tat tac tgt. the germline and unknown sequences match for the next  <dig> bases , so the algorithm walks along the diagonal in the 5’ direction of the dp matrix. when a mismatch occurs, it traces back and calculates the score over a small rectangular submatrix. in figure 2a, which corresponds to a single c to a mutation, the high score traces straight along the diagonal. in figure 2b, which corresponds to a two base insert , the traceback has two steps down. figure 2c, which has a two base deletion , the traceback has two right steps. in all the examples in the figure, arrows represent the trace backs, the top rows and first columns are shown in bold, and the highest scores are circled. the algorithm continues stepping back in the 5’ direction along the diagonal from the high scoring element. finally, the algorithm terminates at the top left matrix element. to conserve space in the figure, the algorithm traced back  <dig> step and a 5 ×  <dig> square matrix was calculated. however, these parameters are too small to avoid falling into local maxima, thus, in actuality, the algorithm uses a 40 ×  <dig> square matrix on a mismatch, and traces back  <dig> steps.figure  <dig> matrix calculation of the alignment score for a sequence with a mutation or indel. matrix calculation of the alignment score for a sequence with a mutation or indel.  matrix for a single nucleotide mismatch.  matrix with a two-base insertion .  matrix with a two-base deletion . the dynamic programming matrix for the approximate backwards algorithm begins at the initial t of the vh-motif . the algorithm goes backwards along the diagonal until it hits a mismatch, in which the algorithm backs up a step and generates a submatrix . the algorithm can choose to step up , step to the left , or continue diagonally . for a deletion or insertion, the score initially decrease by  <dig>  but subsequent indels have a score decrease of  <dig>  matches increase the score by  <dig>  and mismatches decrease the score by  <dig>  the maximum score in the first column or row  is selected . the algorithm continues stepping backwards on the diagonal. backtraces are shown as arrows, and label the alignment of the sequences.



after completing the alignment, sequences with indels are re-aligned from 5’ end of the alignment to the 3’ end of the v-motif. the two alignments are compared for consistency. this quality control step catches suboptimal alignments caused by local maxima.

3’ v-end alignment algorithm
after aligning the 5’ end of the v-segment, we align the 3’ of the v-segment starting at the conserved vh-motif. the v-end alignment algorithm, which is a type of overlap dp algorithm  <cit> , begins at the first “t” in the vh-motif for both the query and germline sequences. a full matrix calculation is required, however the matrix is fairly small because only a few nucleotides occur after the v-motif in the v-germline genes. the 3’ end of the v-segment is defined by the maximum score, which can occur anywhere in the matrix. the 5’ j-end alignment uses the same algorithm, starting at the “c” from the conserved jh-motif.

j-start alignment algorithm
the start of the j-segment is aligned using a dp algorithm similar to a needleman-wunsch algorithm; however, the maximum score can be anywhere in the dp matrix, and the algorithm is run backwards from the j-motif. the maximum score corresponds to the start of the j-segment. the alignment is determined by tracing back from the highest scoring matrix entry.

d matching alignment algorithm
the d alignment uses a local alignment algorithm similar to a smith-waterman algorithm. a match is given a score of + <dig>  however a mismatch sets the score back to  <dig>  when the score =  <dig>  the algorithm looks back  <dig> steps to check for a potential mutation, if the score before the match start is greater than  <dig>  the current score is increased by the previous score. this allows a mismatch to be recognized as a mutation in the d-segment if and only if there are at least  <dig> consecutively matching bases on both sides of the mutation. the probability of randomly matching  <dig> bases is around  <dig> % or 3% on either side of the d-segment, and  <dig> was chose to keep the probability of random matches below 5%. the termination condition is the maximum score anywhere in the matrix. these modifications to the smith-waterman algorithm maintain the basis of the original joinsolver, matching d-segments based on consecutive matching bases.

falling back to other algorithms
in the event, the v-motif is not found in the sequence, the algorithm looks for the motif with one mutation. if the motif with a single mutation is found, the approximate backwards algorithm is run using the mutated motif location. because the j-motif is shorter, mutations are not allowed in the j motif.

when the location of the v-motif is wrong, the alignment is very poor resulting in a low score. setting a score threshold of  <dig> /base effectively catches an incorrect motif location. before relinquishing to a slower algorithm, one last attempt is made to identify the location of the motif. the sequence is aligned to the first germline sequence in our database . the motif location from this alignment is used to align the query sequence to all other germline genes to determine the best match or alignment. if the highest scoring alignment is still below  <dig> /base, we run an overlapping sequence dp algorithm for the v or a smith-waterman algorithm for the j alignments. our only modification is that the end of the v- or j-segment occurs at the maximum score anywhere in the matrix, not just in the last row or column.

simulations
artificial vdj rearrangements were generated by randomly recombining a vh-, d-, and jh-germline gene from the joinsolver germline database. a random number of terminal nucleotides from the 3’ v, 5’ & 3’ d and 5’ j were removed to mimic exonuclease activity. various random numbers of nucleotides were added to the v-d and d-j junctions to mimic tdt activity. in our simulation, each base had a fixed probability of being mutated . the mutation probability should not be confused with the mutation frequency, which is the number of mutations is a sequence divided by the sequence length. the number of indels in our simulation was randomly selected using a distribution that heavily favors one indel per sequence, p = cne- <dig>  where n is the number of indels, and c =  <dig> is a normalization constant. in our simulator, the indel length is selected from a poisson distribution. if a length of zero is selected, the distribution is re-sampled. table  <dig> shows the default parameters of our simulations. our simulations do not intentionally mimic the molecular mechanism of activation-induced cytidine deaminase , which specifically targets the g in rgyw motifs and the c in wrcy motifs or the at bias introduced by mismatch repair mechanisms  <cit> .table  <dig> 
default parameter used in simulations, unless otherwise mentioned



excision
junction
mutation
the amount of excision and addition for an artificial rearrangement are randomly selected from a normal distribution. the μ and σ are the means and standard deviations. indel lengths are selected from poisson distribution, therefore only a mean is needed. the number of indels is selected from a distribution of the form p = cne-3n to require an indel, but heavily weight n =  <dig>  location of indels are randomly selected.



two sets of simulations were performed. in the first simulation,  <dig>  rearrangements were generated with mutation probabilities ranging from 0% to 95% in increments of 5% throughout the vdj sequence. using these rearrangements, the approximate backwards algorithm was compared against a complete dp algorithm, to calculate the success rate. the second set of simulations with  <dig>  rearrangements engineered with a mutation probability of  <dig> % was performed to compare htjoinsolver with the original joinsolver using the original joinsolver germline database. the results of an alignment are considered a successful match to a germline if the algorithm returns the correct gene; the exact allele is not required.

comparison with a standard dataset of biological vdj rearrangements
additionally  <dig>  human sequences from the stanford.s <dig> dataset  <cit>  were analyzed to compare htjoinsolver with several other frequently employed algorithms. briefly, the stanford_s <dig> data were produced by  <dig> sequencing of peripheral blood mononuclear cells from a single donor. the s <dig> individual genotype was determined using an individual analysis of ihmmune-align  <cit>  results. the stanford_s <dig> dataset and the s <dig> genotype form a standard dataset to evaluate the performance of vdj partitioning algorithms. an online evaluation tool, evaluation of igh partitioning tools  compares the performance of vdj partitioning tools on the stanford_s <dig> dataset. as a performance metric, the tool reports the percentage of v, d, or j assignments to germlines that are not present in the predetermined s <dig> genotype.

germline database
the germline genes used in htjoinsolver are imgt reference sequences  <cit> , www.imgt.org/download/gene-db/imgtgenedb-referencesequences.fasta-nt-withgaps-f+orf+inframep, downloaded july  <dig>  2014). htjoinsolver provides methods to download and reformat germline genes from imgt. these methods allow the user to maintain an up-to-date library of germline genes usable by htjoinsolver. when comparing htjoinsolver with joinsolver, we used the joinsolver germline database, which was derived from imgt and included pseudogenes.

access to htjoinsolver
htjoinsolver is available for public use, and can be downloaded from https://dcb.cit.nih.gov/htjoinsolver.

RESULTS
the approximate backward algorithm was designed to quickly estimate the alignment score of a complete dp algorithm for overlapping sequences without sacrificing accuracy. figure  <dig> shows the score differences between the approximate algorithm and the full dp algorithm for simulated sequence alignments with mutation probabilities ranging from 0% to 80%. score differences between the approximate backwards algorithm and the full dp algorithm for sequences with no mutations  were very rare. for mutation probabilities up to 30% , which far exceeds the ~6% mutation frequency of average memory b cells  <cit>  and includes the elevated nucleotide mutation frequency of some hiv antibodies  <cit> , a sharp peak at zero indicates that the approximate algorithm replicates the expected score very well. as the mutation probability increases , slight differences in scores between the two methods cause the distribution to spread. the dashed lines are presented to emphasize the differences in the y-axis caused by the wider distribution. these results show that the approximate backwards algorithm can provide a good estimate of the alignment score calculated by a full dp algorithm.figure  <dig> the difference in scores between the approximate backwards algorithm and an overlapping dp algorithm. the difference in scores between the approximate backwards algorithm and an overlapping dp algorithm for mutation probabilities between  <dig> and 80%. the counts on the y-axis are the number artificial rearrangements and the score difference is on the x-axis. in , the sharp peak at zero shows that the difference in score between the two algorithms is zero for most of the sequences. as the mutation probability increases , the scale for the counts changes as the difference between the algorithms becomes more apparent. the dotted lines indicate a constant count level at  <dig> and  <dig> across the figure. negative score differences indicate the approximation had a higher score than the full algorithm.



the results of the htjoinsolver approximate algorithm were then compared to the original joinsolver v-alignment algorithm. although the joinsolver algorithm was not designed to identify indels, large portions of the rearrangement can align correctly up to the position of the indel, but the remaining v-segment was mismatched. unfortunately, the results were not usable for mutation analysis because the offset alignment appeared as a region of high mutation instead of a single indel. adding v-segment indels to our simulations hurt the overall performance of the original joinsolver. with a  <dig> % mutation probability and simulated indels, the original algorithm selected the correct v-germline 61% of the time, whereas the new algorithm selected the correct v-germline over 99% of the time. the percent of success for the old vs. new algorithms were 73% vs. 91% and 98% vs. 99% for the d- and j-germlines, respectively. these simulations show that the approximate backwards algorithm performs as well or better than the original joinsolver algorithm.

as the mutation probability increases, sequence alignment becomes more difficult. the effect of the mutation probability on the success rate can be seen in figure  <dig>  the success rates for the v, d, and j have sigmoidal curves. the v-segment has a success rate of around 95% even when the mutation probability is approximately 40%. the sigmoidal curve decreases sharply from around 95% success rate to below 10% as the mutation probability changes from 40% to 60%. a leveling off of the success rate at around 3% is due to random matching to the correct v-germline. the sigmoidal shape of the j has a gentler slope and levels off at around 13%, which is less than the 17% expected from randomly matching j-germlines. however, if the highly mutated sequences matched the wrong v, it is possible that there are no nucleotides left for a j match. no j germline would be assigned, which would tend to decrease the j success rate.figure  <dig> the success rate for simulated sequences as a function of the mutation probability. at each mutation probability,  <dig>  artificial rearrangements were generated. the success rate is the percentage of rearrangements with correctly identified v- , d- , and j-  germlines. the all success  line is the percent of rearrangements with all gene utilization correctly identified.



 the d-segment, which is relatively short, is the most difficult segment to identify and align. the d-segment nucleotides must be found within the cdr <dig>  which is the most complex region of the vdj rearrangement. in order to locate the cdr <dig> 5’ and 3’ boundaries the algorithm must first correctly identify the 3’ end of the v-segment and the 5’ end of the j-segment whose nucleotide sequences may differ from the germline gene if nucleotide excision and/or mutation has occurred. n addition may be present or absent and varies in the number of nucleotides flanking the d-segment. furthermore, d-segment mutations decrease the number of consecutively matching d-nucleotides. thus, the d alignment success rate drops off almost immediately as the mutation probability increases. the curve in figure  <dig> labeled “d success rate” levels off at around 4%, which is around what is expected by randomly matching d-germlines. the success rate drops from 93% at a mutation probability of zero to 89% at a mutation probability of 5%. the solid line with ‘x’ marks labeled “all success rate” corresponds to matching the full vdj rearrangement. this curve strongly resembles the d success curve, reinforcing the fact that the d alignment is the most difficult and performance-limiting step.

in our simulations, the alignment scores tend to decrease as the mutation probabilities increase. however, for most biologically relevant situations, the success rate remains high. figure  <dig> shows the success rate for v, d, and j matching of simulated sequences with mutation probabilities of  0%,  20%,  30%, and  50% as a function of score. this simulation is important, because in real sequences, the mutation frequency is unknown. the success rate for v-, d- and j-rearrangement alignments improves as the score increases and is inversely related to the mutation probability. the score distributions are presented to allow the reader to focus attention to regions where the success rate is most relevant. as seen in the figure, as the mutation probability increases, the alignment score distribution shifts to smaller scores for the v, d, and j alignments. however, the success rate remains high at the peak of the score distribution . the success rate is only shown for scoring bins that have more than  <dig> counts in the score distribution. the first column in the figure is the success rate for v-matching. for v-alignments, the scores decrease from approximately  <dig> to  <dig> going from a mutation probability of 0% to 20%, however the success rate remains near 100%.figure  <dig> the success rate and score distribution of v, d, and j alignments for simulated rearrangements with mutation probability: a) 0% b) 20% c) 30% and d) 50%. the success rate is a function of the alignment score and mutation probability. the success rate  is the frequency at which a v-, d-, or j-alignments in the simulated sequences are correct. the score distribution is calculated from the number of times an alignment score occurs in  <dig>  simulated sequences. scores that occur less than  <dig> times  are not shown to prevent discontinuities. v-segments scores are normalized by the length to account for differences in the size of the v-germlines, which may have 5’ or 3’ truncations. the solid vertical line in the d-alignment score at score =  <dig> corresponds to the suggested minimum length for the size of a d-match in joinsolver. the increase in the success rate of low scoring j-matches is a result of ties in which most or all j germlines are selected.



the second column in figure  <dig> is the success rate for the d-segment. the solid vertical line is at alignment score equals nine, marking the shortest acceptable d-score suggested in the original joinsolver paper  <cit> . the effect of mutation is pronounced. as the mutation probability increases, fewer sequences have scores that cross the 9-base threshold needed to avoid random matches. when the mutation probability gets high, even though random matches of length  <dig> are rare, they occur as likely as real matches. therefore, the success rate drops even at scores as high as  <dig>  the j-segment success rates are shown in the right column of figure  <dig>  for low mutation probabilities, the j-segment is well identified. as the mutation probability increases to 20%, the success rate drops significantly for low scoring alignments.

the “evaluation of igh partitioning using inferred genotypes tool”  <cit>  was used to compare the performance of htjoinsolver with other applications. the results are shown in table  <dig>  the initial evaluation was performed using the original joinsolver germline database. the comparison of the d-segment alignment was problematic since htjoinsolver provides d results only when the score is greater than  <dig> for the d length. many of the errors were caused when short d-segments rejected by htjoinsolver. to overcome the restriction in d length, the s <dig> dataset was repartitioned using htjoinsolver so that d results were always provided, even when the score is less than  <dig>  the rows in table  <dig> are labeled  for our results that do not include score less than  <dig>  and  for the all the d results regardless of the score. the d score does not affect the v and j assignment. for both cases the results compare favorably to those reported in  <cit>  using  <dig> different alignment applications. after the evaluation, the germline database was updated to use the imgt reference sequences. the re-evaluated results are found in the rows labeled . by switching the germline database, the performance of the algorithm decreased according to the evaluation tool. if the performance tool is evaluating the algorithm, switching the germline database should not effect the evaluation.table  <dig> 
evaluation of igh partitioning using inferred genotypes tool



database
v 
d 
j 
total 
htjoinsolver alignment of the s <dig> dataset of human vdj rearrangements. the percentage of selected germline alleles that is not present in the s <dig> genotype. in parentheses is the percentage of genes, not just allelic variants, not present in the genotype. htjoinsolver was evaluated using the original joinsolver database and a more recently updated germline database from imgt. the total column is the percentage of v-, d-, or j-germline allele that is not present in the genotype.



discussion
high-throughput sequencing of b-cell receptor vdj rearrangements produces vast numbers of sequences and requires extremely fast algorithms for vdj alignment. the original joinsolver algorithm was fast and accurate, but was not designed to handle indels. one of the main reasons for creating htjoinsolver was to handle alignments with indels, while maintaining or improving the speed. aligning a sequence to approximately  <dig> vh-germlines takes about  <dig>  second on a  <dig>  ghz intel core i <dig> imac. our approximate algorithm takes around 207 ms. falling back to standard methods can take over 7x longer. one million lightly mutated sequences  took approximately 6 hours to run on  <dig> threads on a 4 ×  <dig> core opteron  <dig>  <dig>  ghz computer.

the increase in speed occurs because we use the available biological information to avoid unnecessary calculations. we know that the highly conserved motif “tat tac tgt” begins at codon  <dig>  and we know that insertions or deletions occur in less than 5% of the expressed repertoire, and are usually less than  <dig> bases  <cit> . given these pieces of information, the algorithm calculates only a small fraction of the total dp matrix, even at high mutation probabilities. our approximate solution was successful at replicating the score of a complete dp matrix.

when the motif is not found, the algorithm makes several attempts to align the sequence before falling back to the complete overlapping dp algorithm. however, without knowing the position of the motif, we lose the increased efficiency that comes with the use of this prior information.

a potential problem can occur if a sequence has a long stretch of mismatches that is longer than the rectangular block matrix used to determine if a mismatch is a mutation or an indel. the algorithm may incorrectly fall into a local maximum,  and may be incorrectly aligned. usually, the score threshold will catch the incorrect alignment, and fall back to the overlap dp algorithm. if it is known beforehand that long stretches of indels or mutation will occur, increasing the block size may improve the performance. the larger the block size, the less likely the algorithm will fall into a local maximum requiring a fall back algorithm. however, the price for a large block size is increased computation time.

we were not surprised by the comparison between the original joinsolver and htjoinsolver. we wanted to show that the htjoinsolver can perform complete alignments of vdj rearrangements containing indels. therefore, all of our simulations included indels, which hindered joinsolver’s performance. the increased success rate of the improved algorithm is due to the ability to identify the size and position of indels. the d and j results were very similar because the dp algorithms used to align the d and j regions resemble the original joinsolver algorithms, which were designed to prevent random d matching at the 95% confidence level  <cit> .

the ability to successfully match a sequence to a germline is heavily affected by the length of the v-, d-, or j-segment and the mutation probability. matching v-segments is easiest because longer germline sequences are available for comparison. as the mutation probability increases, the success rate drops. both of these cases can be explained by the loss of information from the original germlines by truncation and mutation. additional studies on whether the success rate can be explained by a noisy-channel model could give additional insights into the theoretical performance of any alignment algorithm.

germline sequence similarity presents an additional challenge for htjoinsolver, especially for aligning heavily processed sequences. the problem is compounded by the fact that the d-germline sequences can be similar to the 5’ end of the j-germline sequences. a small fraction of our simulations show a vh-jh distance of zero, even though we know a d-germline is present along with vd and dj junctions. this ambiguity cannot be resolved without additional information.

when compared against the original joinsolver algorithm using the evaluation of igh partitioning using inferred genotypes tool, we see an improvement in the v, d, j, and overall results. however, the improvement is small because the sequences are minimally mutated. the median mutation frequency for the s <dig> dataset is 0% and the mean is  <dig> %.

the results of the evaluation tool are highly dependent on the set of germlines used in the comparison. when compared against other partitioning tools using the original joinsolver database, the results show that htjoinsolver makes fewer v, d, and j assignment to germlines and alleles not present in the s <dig> genotype than the tools in the study by  <cit> . when the germline database was updated, the resulting evaluation changed. more v-alleles not in the s <dig> genotype where matched, hurting v and total performance.

the development of an evaluation tool with a standard dataset is an important first step, but without a better method of assessing the quality of results, and a standard library of germlines, comparison between partitioning tools remains difficult. we have shown that for the original joinsolver® database, always including the highest scoring d alignment, even when we would not recommend using the alignment, improves the partitioning performance according to the evaluation tool. furthermore, providing a d-segment that occurs in the s <dig> genome will always improve the performance as measured by the evaluation tool, even if the d-segment is very likely to be wrong. relaxing the criteria for including a match  should not have improved results of the evaluation. after updating the germline database, the performance for the v-segment dropped. with more allelic variants to choose from, the system is more likely to match previously unknown allelic variants causing the evaluated performance to decrease. improvements in the d alignment can be explained by the removal of the reverse germlines from the database when we switched from the joinsolver germline database to the imgt reference database for htjoinsolver. interestingly, always including the highest scoring d-germline, regardless of whether the score is high enough, does not improve the d-segment performance using the updated database. evaluation results for the same algorithm changed because of differences in the germline database and not on algorithmic differences.

these results suggest that evaluating a partitioning tool based solely on whether or not a germline occurs in an assumed genotype is not sufficient. consider a partitioning algorithm that only assigned ighv1-3* <dig> to all query sequences. since ighv1-3* <dig> is in the s <dig> genome, 0% of the sequences would come from outside the s <dig> genome. the partitioning algorithm would be evaluated as perfect. however, this algorithm would not make a useful tool. whereas the evaluation tool is a good idea, currently the tool is too sensitive to similarity between the s <dig> genome and the germlines present in the partitioning tool’s database.

CONCLUSIONS
all of the simulations and the comparison with the partitioning tool evaluation software show that htjoinsolver can identify v-, d-, and j-segment to very high accuracy for reasonably mutated sequences. as the mutation probability increases, alignment becomes more difficult but problematic only for unnaturally highly mutated or truncated sequences. the v-segment is identified very accurately for most biologically relevant cases. the j-segment is fairly well identified from 0-20% mutation probability but above 20% the success rate falls below 90%. at the 20% mutation probability, the d-segment has about a 55% chance of being correct. regardless of the partitioning software, biologists should be skeptical of short d-matches to highly mutated sequences, even if mutations are not seen in the d.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

der and nsl conceived the project. der developed the algorithm and methodology. der and k-yh implemented the htjoinsolver code. k-yh ran the simulations. nsl tested the software with real human sequences. der and nsl wrote the manuscript. all authors have read and approved the final manuscript.

