BACKGROUND
over the last ten years molecular biologists and biochemists have shifted their focus from the study of single molecular entities to the study of mechanisms that govern molecular regulation and behavior within the cellular environment. thanks to these efforts and the advent of high-throughput experimental technologies, researchers in the past have been able to dissect part of the intricate network of molecular interactions existing inside cells. computational modeling of these regulatory networks aims at further understanding how their components are controlled, thus allowing the prediction of a set of non-obvious conclusions that can be subsequently addressed experimentally.

while data on the connectivity among molecules is becoming increasingly available, the stoichiometry and kinetic data of the biochemical reactions behind most of these connections remain to be elucidated. this knowledge gap is currently one of the major problems encountered by modelers, particularly when addressing the study of non-metabolic networks, such as signaling cascades. to tackle this issue, we have previously developed a methodology named standardized qualitative dynamical systems  <cit> , which is a hybrid modeling method combining boolean  and continuous modeling methodologies. this approach enables the dynamic simulation of regulatory networks in the absence of kinetic data.

boolean networks have been used as a convenient modeling tool due to their computational simplicity, giving rise to a large body of literature regarding their suitability for modeling diverse biological processes . in boolean models, nodes are represented as variables that can attain only two values:  <dig> or  <dig>  which represent the minimal and maximal state of activation, respectively. these nodes are connected through directed relationships, which can be either positive  or negative . in most cases, the specification of the network connectivity is not sufficient to determine the response of a given node to all its possible inputs. because of this, modelers have to specify a boolean function for every node, incorporating as much information related to the biological system as possible. while boolean models give appropriate qualitative descriptions of the real biological systems, models can be refined by incorporating nodes with more than two levels of activation. this is usually possible when enough experimental evidence is available, allowing to distinguish among different levels of activation  <cit> . in other cases, however, defining multiple activation levels helps to incorporate distinct functional levels into the nodes  <cit> . also, boolean models have been extended by introducing stochasticity in the updating order of the nodes  <cit> .

the standardized qualitative dynamical systems modeling approach can also be seen as an extension of the boolean methodology, because it creates a system of ordinary differential equations  that have a similar overall form to the step functions of boolean models. in this way, the nodes in the network can attain a continuous range of values while at the same time allowing a direct comparison with boolean nodes, since both implementations have their lowest value at  <dig>  and their highest value at  <dig>  this approach permits the qualitative modeling of networks, but allowing for the possibility of incorporating quantitative information into the model via the fitting of parameters.

in order to facilitate the use of standardized qualitative dynamical systems, we developed the squad modeling suite, which provides a graphical interface accessible to modelers and biologists to perform simulations of regulatory or signaling networks. this tool can speed up the process of modeling signaling networks, because it provides a rapid way to obtain the set of all stable steady states of a network as implied by its topology. also, it provides a convenient graphical user interface to make dynamical simulations and evaluate the effect of altering parameters.

simulations using squad are divided in three main parts. first, we supply the program with a directed graph representing the topology of a network, which can be done in the form of simple text or sbml file formats . the program converts the network into a discrete dynamical system, and uses boolean algorithms to identify all its stable steady states. second, the program converts the network into a continuous dynamical system, in the form of a set of odes, and uses the steady states found in the discrete model as a guide to localize the stable steady states in the continuous model. and third, squad allows the user to perform dynamic simulations, which may include perturbations, to assess the behavior of the network and identify the roles of specific nodes within the network. we describe the use of squad, exemplifying it with simulations of the t-helper cell signaling pathway, which has been amply studied using different formalisms  <cit> .

implementation
squad is written in java version  <dig> . the network topology is loaded using any of three possible formats: net, mml and sbml . sbml files are parsed using the jigcell sbml parser  <cit> . in order to represent the graphs both in memory and graphically, we use an extension to the jung library  <cit>  built purposely to integrate parameters required for the dynamic simulations. the steady states of the loaded graphs are computed using a reduced order binary decision diagram algorithm, described in detail in  <cit> . this algorithm is written in c++ and is integrated to the package through the java native interface . the ordinary differential equations used for the dynamic simulations are implemented using the open source physics framework   <cit> , using an adapted version of the runge-kutta <dig> solver to do the numerical computation. furthermore, the osp library is also used to display the activity using dynamic plots. the results of the simulations are stored in matrices using the dcolt package  <cit> , which allows mapping of the matrices to a file system in order to reduce the memory expenditure. finally, the user interface is built using java swing components, and the synthetica library is used to provide a consistent aspect on multiple platforms.

RESULTS
definition of the network topology
the first step towards modeling signaling networks is to define the components of the network and their connectivity. we symbolize the components of a network through nodes, represented as variables whose values reflect a state of activity. nodes do not necessarily represent single molecules, but rather functional entities such as molecular complexes. in the t-helper network for example  the node describing the interferon-γ receptor  represents a complex of multiple subunits that when active elicits the activation of the nodes downstream. the connectivity among nodes is expressed in terms of "activations" or "inhibitions". once the topology of the network is established, it can be loaded into squad to perform analyses and simulations.

squad accepts three types of input formats: net, mml and sbml files. the net format is a simple text file, and the mml format is a xml file; both were developed specifically for squad . since defining a network topology for large networks in text format can be difficult and error-prone, we have included the possibility of using celldesigner  <cit>  generated files as input. celldesigner is a free, widely used graphical tool that allows the easy construction and edition of diagrams of metabolic and regulatory networks. celldesigner has an implementation of the sbml  format  <cit> , used by a large number of modeling tools. whenever celldesigner files are used as input, squad retains the spatial layout of the nodes providing a more intuitive interpretation of the simulation results . the distribution of squad includes a folder containing the t-helper network sample files in the three aforementioned formats.

identification of network steady states using squad
biological systems are governed and regulated by intricate networks, most of the time containing feedback loops, whose activity is influenced by environmental stimuli. an illustrative example is the process of differentiation of precursor t-helper cells into effector th <dig> or th <dig> cells, in which a complex network controls the transition from a cell type to another according to the cytokines to which the precursor cells are exposed  <cit> . dynamical systems may contain stable steady states, defined as specific activation states of the network, which do not change over time and are resistant to small perturbations. to find these stable steady states, it is necessary to translate the network topology into a dynamical system. we have previously published a methodology to automate this process  <cit> ; hence, users of squad only have to provide a network topology. the static representation of a network can be converted into a discrete dynamical system using the equation  <dig> .

 xi={∨x2a…∨xna)∧¬∨x2i…∨xmi)ax1a∨x2a…∨xnab¬∨x2i…∨xmi)c∨,∧,and ¬ are the logical operators or, and, and notxi∈{ <dig> }{xna} is the set of activators of xi{xni} is the set of inhibitors of xiais used if xi has activators and inhibitorsbis used if xi has only activatorscis used if xi has only inhibitors 

once the network has been translated into a discrete dynamical system, it is possible to locate all its stable steady states using the generalized logical analysis   <cit> , which is based on the analysis of the functionality of all the feedback loops that constitute the network. gla is a well-established methodology to analyze the behavior of regulatory networks, even when they contain nodes with more than two levels of activation. however, the methodology has proved to scale badly for large networks. to address this issue, we implemented a reduced order binary decision diagram  algorithm  <cit>  in squad. in contrast to gla, the robdd algorithm works for networks containing only binary nodes.

robdd is a memory efficient data structure for representing the exponential state-space of logic functions, widely used in the field of electronic design automation and model checking. using robdds we can compute a set of subsequent network states in such a way that the state-space traversal can be performed very efficiently. our implementation optimizes the use of robdds by finding steady states without testing all the possible states of the network, allowing analysis of large regulatory networks. using this algorithm we are able to identify the steady states of complex networks  on a desktop computer in a matter of seconds . to support our claim, we provide a network of  <dig> nodes  that can be tested for speed by the users. another advantage of using the robdd algorithm is the identification of cyclic attractors, i.e. oscillating states. these states occur when the system does not reach a steady state, but rather a cycling pattern. we used squad to identify the steady states of the t-helper cell network  either through gla  <cit>  or robdd. in both cases squad identifies  <dig> stable steady states visible through the steady state selector panel , or on the graphical network layout . as previously reported  <cit> , the steady states identified in the t-helper network can be mapped to a specific biological states of t-helper cells, namely the th <dig>  th <dig> and th <dig> cell types.

using squad for studying the dynamic behavior of a network
squad allows the identification of the stable steady states present in the network, but it does not provide information on the events that lead to these states. in other words, it finds the attractors but it does not give any information on the basins of attraction.

squad automatically converts the static network into a continuous dynamical system  using equation  <dig> 

 dxidt=−e <dig> h+e−h)−γixiωi={)ab)c0≤xi≤10≤ωi≤1h,αn,βm>0γi≥1{xna} is the set of activators of xi{xni} is the set of inhibitors of xiais used if xi has activators and inhibitorsbis used if xi has only activatorscis used if xi has only inhibitors 

within this methodology, variables representing the activity of nodes are normalized, thus providing continuous levels of activation between  <dig> and  <dig> where, as in the discrete model,  <dig> represents the full-activation of a node.

in order to perform simulations, squad solves numerically the continuous dynamical system starting from a given initial state, and a set of values for all parameters. by default, squad sets all values of α's , β's  to  <dig>  and a value of  <dig> to h . users may change these values in the tables presenting the node and edge configurations. as for the initial states, the software uses the set of stable steady states found in the discrete implementation of the network. here again, the user is able to specify any initial state that best matches the biological question addressed. in the case of the t-helper network for example, we can use the th <dig> steady state, where all the nodes are set to  <dig>  as a starting point for the dynamic simulations.

squad provides a number of graphical utilities to perform simulations. in the steady state selector panel it is possible to choose the starting state from the list of stable steady states automatically found by the system. the selected state can then be further modified to simulate alternative initial states, allowing for the inclusion of perturbations. the results of the simulations are shown by a plot of the activity of each node against time . importantly, since the equations used for the dynamic simulation are not fitted with experimentally determined kinetic values, the time is expressed in arbitrary units.

simulations in squad can be performed in two modes. the complete run option sets the dynamic simulation to stop either at a pre-defined time point, or when a steady state is reached. by contrast, in the progressive simulation mode the user is able to control the speed of the simulation and stop it at will. in addition to the plot of time-series, squad also displays the activation status of all nodes. this is particularly useful to make a more intuitive display of how some signals propagate through the network. to exemplify the use of these graphical tools, figure  <dig> presents a simulation of the behavior of the th <dig> steady state in which the il- <dig> node is activated, thus mimicking the addition of il- <dig> ligand to the network. we observe that the network moves to the th <dig> steady state in response to the il- <dig> ligand.

the algorithm behind squad has already been shown to correctly describe the qualitative behavior of a large regulatory network  <cit> . different networks, however, might require special manipulations before being analyzed by squad. this is the case whenever there are nodes implementing the and logical function. equation  <dig> indicates that a node integrates the total input by means of or functions, apparently hindering the use of and relationships between input nodes. this seeming problem can be solved by the introduction of an intermediary node. suppose the user needs to include a node x that becomes active only when nodes a and b are both active. in this case, it is necessary to decompose one of the direct activations, say from a to x, into a pair of inhibitions via an extra node, c, created ad hoc. the final topology would then become a¬c¬x ← b. by applying equation  <dig> we can see that x = b ∧ ¬ c, but since c = ¬ a then x = a ∧ b, which is the desired and relationship between the a and b nodes over x. this solution for including and gates increases the number of nodes in the network, and thus it might introduce some extra states in the attractors. hence, the user has to be careful to eliminate from the final list of attractor the states of these intermediate nodes. nevertheless, we are currently working on the explicit incorporation of and gates into our methodology.

using laboratory protocols for modeling
as discussed in the previous section, dynamic simulations are extremely useful for assessing how a network behaves in response to different stimuli. in the work described so far we have addressed the influence of stimuli such as il- <dig> on the initial steady state. biological experimental protocols however often rely on perturbations using multiple stimuli, at different times and for varying durations. to map the computational simulations to such biological experiments we have included in squad a framework for performing dynamic perturbations.

the perturbations to be performed are listed within a protocol file written in a dedicated xml format . the file describes a set of initial network states and a set of perturbations. each perturbation corresponds to a separate experiment containing an initial state and a set of actions specifying the node to perturb, the perturbation value as well as the duration and timing of the perturbations. different types of actions can be specified. for example the singlepulse action modifies the node at a single time point, while rangepulse maintains the perturbation for a determined time period. the protocol file can be created within squad using a wizard tool, which ensures that the protocol file has a valid format . using these protocols it is possible to reproduce existing biological experiments computationally, or to test new experimental designs. furthermore, having a file format to specify dynamic simulations allows for the storing, exchanging and comparisons of protocols.

we have used the perturbation framework on the t-helper cell network to assess the effects of il- <dig> and ifn-γ . as shown in the previous section, the addition of il- <dig> to the th <dig> state moves the network towards the th <dig> steady state . similarly, using the perturbation protocols we tested the effect of adding an ifn-γ pulse on the th <dig> steady state . under these circumstances the th <dig> state is temporarily perturbed, but returns to the th <dig> state, consistent with experimental data showing the stability of th <dig> cells  <cit> .

CONCLUSIONS
here, we demonstrate how the use of squad helps to simulate the behavior of regulatory networks, modeled with the standardized qualitative dynamical systems methodology. this method can be used to study signaling or regulatory networks where there is little or no kinetic data available, but there is a good knowledge of the network topology. while there are no restrictions in the kind of biological phenomena that can be modeled with our methodology, it seems to be particularly suitable for differentiation processes, where multiple stable steady states can be interpreted as different cell types, as we have shown for the th model  <cit> . squad automatically locates the alternative stable steady states of the system, and the user can gain further knowledge of the model by using the several simulation tools provided, specially the ability to perform perturbations, mutations, and changes in the parameters to observe the effect on the nature and number of attractors.

the methodology implemented by squad is able to find the attractors of the network under study. this information is relevant because it permits the user to know which are the alternative asymptotic behaviors that can be reached by the system. in its current implementation squad does not provide information regarding the basins of attraction. that is, the software does not provide the user with a list of all the possible states that can reach a given steady state. however, we have introduced the possibility to export the model to a file in gnu octave format  <cit> , which can be modified to accomplish this job. the user has to be aware that the dynamical system exported by squad is the one obtained by applying equation  <dig>  which is a deterministic set of ordinary differential equations.

the algorithms behind squad have been thoroughly tested for the location of fixed-point attractors. nevertheless, the methodology used by squad can also identify cyclic attractors . if a cyclic attractor is found, squad displays one of its transitory states which, if used as an initial state in the dynamic simulations, will resume the oscillatory behavior of the system. the software, however, does not provide an automated way to visualize all possible cycles in the network when it is modeled as a discrete dynamical state, as ginsim does  <cit> .

with squad we have extended the original methodology published in  <cit>  to allow the analysis of large regulatory networks  by implementing a reduced order binary decision diagram algorithm. in addition we have streamlined the whole modeling process by developing squad with an intuitive interface that provides a dynamic visualization of the network. many modeling software packages rely on their own input format. while this is the case for squad, the program is also able to read celldesigner sbml files  <cit> , a file format widely used in the modeling community providing a seamless integration with several network drawing software and model repositories  <cit> .

squad is aimed at helping the scientific community to understand the global qualitative dynamical behavior of signaling networks. first, people may use the software to gain insight on the dynamical implications of a given network topology. it is often the case that there is enough information about the topology of a particular network, but there is no information on the biochemical reactions behind it. in this case, squad can be of help by adding a dynamical dimension to such topologies, by creating dynamical systems based only on the network architecture. experimental biologists may be specially benefited by testing different topologies and deciding which one offers the most accurate dynamical description to their phenomena of interest. users with a moderate knowledge in modeling can benefit of the user-friendly interface that allows to modify the initial states, strength of interactions, decay rates, perturbation protocols and plotting capabilities of squad. all these capabilities will help the user in predicting the dynamic behavior of a network in response to multiple stimuli or mutations, being knockouts, over expression, or a mixture thereof, as well as pinpointing the roles of specific components within a network.

there are other software packages that are used to generate qualitative models of regulatory networks, notably ginsim  <cit> , genetic network analyzer   <cit>  and cellnetanalyzer   <cit> . these modeling suites simulate networks implemented as dynamical systems, using either discrete  or continuous systems . these packages have been shown to qualitatively reproduce the activation patterns of experimentally validated regulatory networks. for example, gna has been used to analyze the network underlying the initiation of sporulation in bacillus subtilis  <cit> , ginsim to study the formation of discrete expression region of gap-genes drosophila  <cit> , and cellnetanalyzer in t-cell activation  <cit> . squad complements these approaches by allowing the qualitative modeling using a set of non-linear ordinary differential equations. with the increase of published signaling networks, it will be possible in the future to realize a benchmark among these software packages to compare their strengths and weaknesses. for doing that, however, it would be very useful to develop a common file format. for the time being, squad and cellnetanalyzer have the possibility to read sbml files, which is becoming a widely used standard in the modeling community.

squad has been implemented as part of the enfin project  <cit>  committed to provide an integration of computational approaches in systems biology and the development of tools for harnessing biological system-level data. squad constitutes an easy-to-use regulatory network modeling tool, accessible to both computational and experimental biologists.

availability and requirements
squad can be downloaded from  <cit> . the website contains a quick-start guide and a detailed tutorial. also, a copy of the squad executables is provided in additional file  <dig> 

operating system: windows and linux .

requirements: java  <dig>  or higher.

programming language: java and c++ for the robdd algorithm.

restrictions of use by non-academic users: none.

authors' contributions
ad and lm wrote the code for squad. ag wrote the robdd algorithm. ix and gd supervised and coordinated the project. all authors have read and approved the final manuscript.

supplementary material
additional file 1
description of squad input formats. description of the file formats used for loading network topology data into squad.

click here for file

 additional file 2
t-helper regulatory network in celldesigner sbml format. representation of the t-helper regulatory network using the celldesigner sbml format. the file can be viewed using celldesigner  <cit>  and imported directly into squad for the analysis.

click here for file

 additional file 3
network file. a sample network file containing a network of  <dig> nodes and  <dig> edges.

click here for file

 additional file 4
perturbation protocol. example of perturbation protocol file used to perform the simulations. the file describes two perturbations. the first one on the th <dig> state with il- <dig>  the second on the th <dig> state with il- <dig> and subsequent ifn-γ addition. the file can be loaded from the perturbation tool in squad. the file also contains three different perturbations of the il- <dig> node aimed at demonstrating the use of the different pulse types: "constant", "range" and "single".

click here for file

 additional file 5
squad software. compressed zip file containing the binaries of squad. to run squad: unzip the folder, in linux type chmod +x squad <dig> and run it with ./squad, or in windows click on squad <dig> bat. a quick-start guide and a more detailed tutorial can be found on the squad home page  <cit> . the zip file encloses a samples folder containing all the files described in this manuscript.

click here for file

 acknowledgements
this work was supported in part by enfin, a network of excellence funded by the fp <dig> programme of the european commission, under the thematic area "life sciences, genomics and biotechnology for health", contract number lshg-ct-2005- <dig>  we would like to thank christophe cleva for his insights in code optimization and the development of the dcolt package; mark ibberson for reviewing the manuscript; massimo de francesco and merck serono for providing the necessary infrastructure; and two anonymous reviewers for their valuable comments on the manuscript.
