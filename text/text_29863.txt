BACKGROUND
there has been a tremendous increase in the volume and variety of data about biological systems and many biological databases have been developed for storing and querying the rapidly accumulating data <cit> . there are increasing efforts to create databases that allow representation of biological processes at higher levels of abstraction.

in particular, knowledgebases which represent biological pathways in an abstracted, structured manner are being developed on a large scale  <cit> . such pathway knowledgebases will enable qualitative modelling and reasoning about large biological systems using computational tools for thought <cit> .

knowledgebase developers realize the importance of providing reliable, complete, and consistent knowledgebases. for example, the pathway hole filler algorithm developed by green et al attempts to find missing enzymes in automatically generated metabolic pathway databases <cit>  and fills them using information about sequence homology and annotation <cit> . methods have also been developed to compare the differential content in metabolic databases, using petri nets to capture pathway representations from different databases <cit> . this paper complements such efforts and presents methods to evaluate the ability of a pathway knowledgebase to support computer-aided information integration and inference tools <cit> . another key difference is that this work also provides a general methodology for proofreading knowledgebases, one based upon the formalism of model checking.

hybrow, reactome and proofreading knowledgebases
locating, retrieving and integrating biological data have become increasingly burdensome tasks, leading to a growing need for tools that offer an organizing framework to facilitate the interpretation of biological data <cit> . we are developing such a tool, which we have called the hypothesis space browser . in previous work, we described a hybrow prototype implementation that uses a small knowledgebase containing information about the yeast galactose regulatory gene network <cit> . we would like to use hybrow in conjunction with the larger, more sophisticated knowledge repositories  that are currently being developed <cit> .

the reactome project is a collaborative effort involving the cold spring harbor laboratory, the european bioinformatics institute, and the gene ontology consortium. reactome is a knowledgebase containing representations of the core pathways and reactions in human biology, authored by expert biological researchers and maintained by the reactome editorial staff. the basic unit of reactome is the reaction, which reactome defines as any biological event that converts inputs to outputs <cit>  where the inputs and outputs of a reaction are biological entities such as small molecules, proteins, lipids, nucleic acids, or complexes of these. reactions include the chemical conversion of one set of entities to another as well as the formation and dissociation of complexes and the transport of entities from one compartment to another. during the construction of the knowledgebase, biologist domain experts assigned the individual reactions stored in reactome to pathways.

the existing hybrow prototype evaluates hypotheses on the event scale by checking the individual events and the logical combinations of events in each hypothesis for agreement with stored information. in the case of reactome, we cannot check individual reactions, as they are provided "as is" by domain experts and the corresponding primary data are not stored. however, if we assume that the individual reactions are valid, we can check higher order properties for pathways. this exercise has dual benefits: we not only obtain a quality check for an important knowledgebase, but also develop methods that we can use in the future for principled evaluation of higher-order hypotheses. we propose logical proofreading as a pre-processing step to precede the use of a pathway database for other automated inference procedures. this would bring several advantages. for example, if a knowledgebase contains inconsistencies or gaps, automated pathway tracing can encounter ambiguities or dead-ends, causing problems for programs attempting to investigate possibilities for metabolic engineering. logical proofreading facilitates human reasoning as well as automated reasoning. human curation often encounters complications if multiple curators are involved. logical proofreading can help by, for instance, identifying instances where two differing opinions exist, or where one curator assumed that a particular relationship was recorded elsewhere and thereby chose to record neither this assumption nor the original relationship.

investigation summary
biologists will increasingly need tools for thought <cit> , and so we must develop tests to determine whether or not a given knowledgebase can support tools of this kind. it is possible to use a portion of the hybrow logical framework <cit>  to check an existing knowledgebase for internal consistency and other desirable properties that would ensure its compatibility with machine-aided inference tools. we discussed this possible application with the reactome development team to secure their support for a test case involving hybrow and reactome. we then developed a method for proofreading reactome that is based upon composition and evaluation of second-order hypotheses in the hybrow framework. we used this method to identify issues in past releases of reactome and to design scripts that will be used by the reactome team to troubleshoot new releases. we believe that there is a need for logical verification of structured molecular biology data resources, and this paper represents a first step in that direction. in future work, we will move beyond this case study to define a generic set of desirable knowledgebase properties and then evaluate multiple knowledgebases with respect to their expressive power and conformance with these properties.

RESULTS
using the event-level relationships  described in the methods section, we defined a set of testable desirable properties that we believe should hold for pathway-models stored in reactome. these properties were formulated to identify errors that can cause problems for computer-aided information integration and inference tools such as hybrow.

testable properties for pathways
 <dig>  we say that a sequence of events in a pathway representation is well-formed if the direct precedence relation holds whenever the direct supply relation holds over the events in the sequence.

 <dig>  we say a pathway representation is complete if every event in the pathway is either supplied by a preceding event or supplied and enabled by the axioms.

 <dig>  we say that an acyclic pathway representation is inconsistent if an event comes before another event in the pathway order, but the opposite is true in the precedence order.

 <dig>  we say that a pathway representation is verbose if there exist events a and c such that  in the precedence order, and there exist "extra" events ei, i ≥  <dig>  such that ,  ...  in the pathway ordering.

 <dig>  we say that a representation pathway is terse if there exist events a and c such that  in the pathway ordering, and there exist "extra" events ei, i ≥  <dig>  such that ,  ...  in the precedence order.

 <dig>  we say that a pathway representation is gapped if there exist events in the pathway for which supply is violated, and there exist preceding events in the database which are capable of supplying those pathway events.

 <dig>  we say that a sequence of events in a pathway representation is unfounded if there exist cycles in the precedence order that are not also defined to be cycles by the pathway annotation.

desirable properties
in order for reactome to become a reliable resource of core pathways and reactions for automated inference about human biology, it is greatly desirable that its representations satisfy completeness, consistency and gap-free properties:

• each pathway in the reactome database should be complete. if a pathway is incomplete, a reasoner is unable to "backtrace" reactants to find their requisite precursors.

• none of the pathways in reactome should be inconsistent. if a pathway is inconsistent, it is possible for a reasoner to arrive at two conflicting event orders. in the absence of further information, the reasoner would not be able to tell which of two events could possibly be a cause for the other.

• none of the pathways in reactome should be gapped pathways. if a pathway contains gaps, a reasoner cannot verify the presence of all of the possible output entities that should be available at the end of the pathway.

of less crucial importance are directness, well-formedness and well-foundedness properties:

• the directness criterion requires that as many pathways as possible should be adjusted so that they are neither verbose nor terse. this will enable reasoners that work with both the curated  and stored  data to get compatible information from both sources. this compatibility is essential if we want to "borrow" a pathway representation, based on precedence, from one organism and compare it to a curated pathway representation from another organism.

• the well-formedness criterion states that every sequence of events in reactome should be a well-formed sequence. if not, this is a cue that precedence data are missing.

• the well-foundedness criterion mandates that there should not be any cyclical sequences in the database that are not also annotated to be cyclical pathways and that for no events should the precedence relation be reflexive. an unlabeled cycle in precedence or a reflexive precedence relation  can lead to non-terminating traces or require cutting the cycle at an arbitrary point.

proofreading reactome
we developed scripts  to test the concrete human pathways stored in reactome for these properties. we focused on concrete pathways because the properties we have defined and the results of our analyses are easily interpreted for concrete pathways. this section summarizes the results of tests performed on release  <dig> of reactome, the earliest publicly available release.

supply and enabling
direct supply is often violated, due to missing events, the incomplete state of current experimental knowledge, and lapses in annotation.

for example, the pathway cdk-mediated phosphorylation and removal of cdc <dig>  has four events identified by ids:  <dig>   <dig>   <dig>  and  <dig>  of which the event, cytoplasmic phosphorylated cdc <dig> is ubiquitinated by the anaphase-promoting complex , is unsupplied. this event requires ubiquitin  as an input, which is not supplied by any other reaction. ubiquitin is also not identified as one of the concrete simple entities that are assumed to be present. to remedy this, ubiquitin would have to be accounted for as a product of another reaction, or else it must be declared to be a concrete simple entity.

the concept of enabling is not yet tracked by reactome, even though there are events that create physical entities which act as catalysts in other pathways. no events specifically modify or create catalysts for other events in a pathway.

data format integrity
overall, reactome adheres to its data format specification. however, generic entities are allowed to interact with concrete physical entities in generic pathways. this leads to peculiarities such as a generic event preceding a concrete event e, which precedes events that are instances of the generic event preceding e.

for example, the concrete reaction identified by id  <dig> has the generic reaction  <dig> as a preceding reaction. however, the concrete instances of this generic reaction  have reaction  <dig> as their preceding event and thus we have  <dig> ≺  <dig> ≺ .

these reactions describe how the enzyme complex ribonucleotide reductase catalyzes the reduction of each of four nucleoside diphosphates, adp, cdp, gdp, and udp to the corresponding deoxynucleoside diphosphates, dadp, dcdp, dgdp, and dudp. these reactions are represented by ids  <dig>   <dig>   <dig>   <dig>  in the course of doing so, the enzyme complex itself is oxidized, and must be regenerated by reduction, before it can catalyze another round of ribonucleotide reduction. there are two ways of carrying out this reduction, one of which is in a reaction involving glutathione .

the reactome curators created a generic reaction, named reduction of cytosolic ribonucleoside 5'-diphosphates to deoxyribonucleoside 5'-diphosphates   with four concrete instances  and linked the concrete regeneration event  to this generic reduction reaction. this leads to the case where  <dig> ≺  <dig> ≺ . we pointed this out to the reactome team and they agreed that this was indeed a problem.

this situation should ideally have been annotated as four cycles involving the four concrete reduction events  and the concrete regeneration event for each case.

to fix the problem, the curators decided to delete the "preceding event" link between the generic reduction reaction  and the concrete regeneration reaction , and replace it  with links directly from the concrete reduction to concrete regeneration events .

completeness
since we found that reactome does not consider enabling, we decided to include an assumption of universal enablement.  reactome also does not track the creation and use of concrete simple entities, so we had to assume the availability of such entities to avoid systemic judgments of incompleteness. we also assumed the presence of the input reactants to the first step in each pathway.

after incorporating these assumptions, we were able to locate several pathways that were not complete. one such pathway is the inosine formation pathway.

the inosine formation pathway  has two reactions: adenosine + h2o → inosine + nh <dig> and inosine 5'-monophosphate + h2o → inosine + orthophosphate. 

the events that precede  <dig> are  <dig> and  <dig>  however, these events are not part of the inosine formation pathway and the event that is listed in the pathway does not supply inputs to event  <dig>  thus, the inosine formation pathway is not yet complete.

overall, we found that  <dig> of the  <dig> pathways in reactome were incomplete, and that there were  <dig> events in those  <dig> pathways that were the cause of the judgments of incompleteness. since there are  <dig> events in these  <dig> pathways, these  <dig> events constitute 2% of all events.

consistency
our tests identified a number of inconsistencies in reactome. one example is the ornithine metabolism pathway.

the ornithine metabolism pathway  has  <dig> events. of these, event  <dig>  is listed directly before  <dig>  in the pathway ordering. however, the preceding event of  <dig> is  <dig> according to the preceding event relationship specified in reactome. this assertion is therefore inconsistent with the pathway ordering.

eight of the  <dig> pathways had consistency problems and two of these are incomplete pathways. there were  <dig> reactions that were the cause of these inconsistencies and these  <dig> reactions comprise about 3% of all reactions.

gap-free pathways
there were very few gapped pathways in reactome. of the  <dig> concrete human pathways, only  <dig> were found to have gaps. there were  <dig> events in release  <dig>  which could supply the necessary patches to seal the gaps.

consider the glycogen breakdown in liver cells pathway , which has  <dig> events. event  <dig> in the pathway requires{-alpha-glucosyl}poly{-alpha-glucosyl}glycogenin- <dig> as input, which is not provided by any of the previous events in the pathway. however, it can be supplied by event  <dig>  which is listed as its preceding event but is not considered part of the pathway.

directness 
our test for terseness revealed that only  <dig> of the  <dig> pathways were too terse and in each case, there was only one occurrence of terseness.

again, consider the glycogen breakdown in liver cells pathway . there are two events between events  <dig> and  <dig> according to the preceding event relationship.

upon testing for verbosity,  <dig> of the  <dig> pathways in reactome release  <dig> were found to be verbose.

consider the xanthine formation pathway , event  <dig> and  <dig> directly precedes event  <dig> according to the preceding event relationship. however, the xanthine formation pathway lists four events  <dig>   <dig>   <dig>   <dig> grouped in the guanine formation pathway  as occurring either in parallel or before event  <dig> 

we assert that verbosity is not that serious a problem, because excessive verbosity indicates that descriptions of pathways by domain experts can include extra steps for which evidence of the exact sequence of events is not explicitly specified or known. although not optimal, this situation is not surprising for a biological process still under investigation.

well-formedness
on testing for well-formedness between consecutive events in pathways, we found that  <dig> of the  <dig> reactome pathways were completely well-formed and  <dig> pathways presented 80% or more of their constituent events in well-formed sequences . table  <dig> shows the number of pathways at each level of well-formedness. overall,  <dig> of the  <dig> pathways were at least 50% well-formed.

consider the pyrimidine biosynthesis pathway . event  <dig> produces all the required inputs for event  <dig> and hence supplies event  <dig>  however, event  <dig> is not considered event 75124's preceding event. this violates well-formedness.

well-foundedness
there were no concrete reactions that violated this property.

reactome itself is constantly changing and evolving. this raises the possibility of studying how pathways evolve over time as curation progresses. table  <dig> shows the comparison of release  <dig> through  <dig> in terms of the properties tested. because pathways contain different numbers of reactions, it is more informative to compare the number of reactions for which a particular property was violated with the total number of reactions in that release rather than to directly compare the number of pathways with property violations. table  <dig> shows the properties compared across releases based on the percentage of reactions in each release that were responsible for the violation of a particular property. figure  <dig> shows a plot of the trends. we observe that inconsistencies are steadily declining along with the increase in the size of the knowledgebase. there is an increase in incompleteness as the number of pathways increases and new, possibly less characterised, pathways are added. table  <dig> lists the numbers of well-formed pathways at various cut-offs in the successive release and we see that the percentage of well-formed pathways is steadily increasing over the releases.

discussion
we are developing computer-aided information integration and inference tools such as the hypothesis space browser  <cit> . in order for such tools to be useful, they should be able to use existing sources of structured information directly, rather than requiring users to create custom knowledgebases. the structured information stored in existing pathway knowledgebases is an obvious resource that can be used to serve such tools. the pathway resource list  <cit>  currently lists about  <dig> such pathway knowledgebases, indicating that a wealth of such information is becoming available.

we believe that evaluating pathway knowledgebases by proofreading and assessing their compatibility as well as a level of support for tools such as hybrow is an important step toward the overall goal of using knowledgebases as effective resources for tools that perform information integration and computer-aided inference about biological processes.

the reliability of a knowledgebase for supporting information integration and computer-aided inference can be estimated by the kinds of tests outlined in the current work. a reliable pathway knowledgebase should be free of internal conflicts, represent as many steps as possible in each pathway, and provide the most complete set of pathway descriptions possible. omissions, inconsistencies, errors in the order of steps in a pathway, missing steps, and extra steps all limit the performance of a knowledgebase. we believe that a reliable knowledgebase should minimally be complete, consistent, direct, gap-free, well-formed and well-founded. in this work, we provided precise mathematical definitions for each of these necessary properties and presented a logical framework for assessing a knowledgebase's reliability. we applied our tests to the latest releases of a deployed pathway knowledgebase and thereby demonstrated how these tests can be used to proofread and monitor the quality of a knowledgebase while it is being developed.

reliability is, of course, not the whole story. to allow comparison of alternative representations of biological processes across organisms and databases, it is essential to have formal mechanisms to compare the richness and differences among representations of biological processes across existing knowledgebases. even a completely reliable knowledgebase may lack the ability to support queries such as type-checking of stored relationships or be unable to capture certain kinds of biological relationships such as context dependent changes in the function of proteins.

in future work, we will evaluate a spectrum of knowledgebases for the purpose of comparing their expressive power. the situation we face when comparing different knowledgebases is complicated by the fact that the knowledgebase languages may not be in one-to-one correspondence. one approach is to consider only the subset of the language that many knowledgebases can express in a common interchange format, such as biopax. alternately, we may choose to formulate a definition of expressiveness for comparing the expressiveness of knowledgebases given their  ontologies and associated logics over their distinct languages. our model theory formalism allows for rigorous comparisons of expressiveness. however, further work is required to examine which particular approach will yield the most meaningful comparisons.

CONCLUSIONS
we used a model theoretic approach to check a deployed and maturing knowledgebase with respect to its suitability for machine-aided reasoning. we identified a desirable set of logical properties a pathway knowledgebase should satisfy to support machine-aided reasoning, including consistency, completeness and other desirable properties. checking these properties during the design stage can predict and eliminate errors, as we demonstrated in this work.

we tested pathways from the available releases of reactome for the satisfaction of our criteria. we implemented "proofreading" scripts to make our tests available for future use in the curation process. after reviewing our results, the reactome team not only decided to make specific changes in response to errors we found, but also chose to incorporate our proofreading methods and scripts into their pre-release quality control process.

