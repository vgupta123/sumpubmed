BACKGROUND
etymology of the term “warehouse”, by definition, evokes imagery of a single, huge, meticulously organized building filled with densely stacked shelves, pallets and boxes. in informatics, however, we often abstract physical implementation behind logical representation. this paper leverages the physically distributed properties of bittorrent to create a massive logical data warehouse.

taking an architectural lesson from data transfer solutions of decades past, spanning the emergence of decentralized distribution  over the internet, multicast udp, even interplanetary networking -- it may be that the essential complexity  <cit>  of globalized “big data” fields is of sufficient magnitude that congruity may not emerge organically. given additional strong economic and practical interest in bioinformatic cloud computing  <cit> , bioinformaticians sorely need sophisticated data transfer solutions to shuffle data between wet lab and iaas environments in a controlled manner. we present bittorious as a free and open tool for private data syndication in translational genomics and other data intensive fields.

a primary architectural benefit of distributed data distribution protocols such as bittorrent, upon which bittorious builds, is to improve overall systems performance at scale, such that a new node may, given enough peers, use the maximum amount of available local bandwidth. protocol variations such as transparent compression and use of udp may improve effective throughput, but such design decisions cannot nullify hard bottlenecks in the network limitations of centralized silo distribution models. as previously demonstrated, existing bittorrent technology exhibits better performance characteristics than traditional centralized transport methods such as ftp at large scales  <cit> . bittorious unifies a standards-compatible bittorrent tracker with a custom integrated management portal for investigators to implement controlled access restrictions on data feeds. this marriage of existing p2p “swarm” semantics with bittorious’s secured web service gui  and api both substantially reduces the resource needs of publishing parties and enables easier automated integration of workflow across collaborating institutions.figure  <dig> 
bittorious dashboard for a sample feed. the bittorious dashboard, allowing for access management, peer tracking, discussion, and data syndication.



implementation
foremost, any proposed standards for worldwide consideration should support high performance, high availably data transfer over existing internet connections for computational locality and archiving. while no approach is universally best, in the case of genomics data we argue that modifying individual purpose-specific data warehouses to expose a common, generic transfer layer based on common interaction standards is most suitable.

core bittorious concepts
bittorious primarily addresses the needs of data transport across the internet to/from a changing and heterogeneous set of peer nodes. core ideas are a combination of existing popular concepts from the bittorrent content distribution protocol, really simple syndication  -- as used by content publishers and subscribers such as bloggers -- and modern web-based application concepts, as explained below.

torrent
a "torrent" refers to a set of files that is published as a cohesive package of data ready for distribution. the data can be a single file, directory of files, or any combination thereof, and is initially defined using client software that produces a .torrent file. the .torrent file contains basic metadata and checksum information for the data being published, but does not contain the data themselves.

publication
a user ready to publish data does so by registering the torrent with a data rss “feed” via the bittorious portal, and initiates the “seeding” process to other client subscribers via the local client software. it is expected, though not technically required, that the publisher set additional metadata on the torrent via the bittorious portal so subscribers can find the content via future search features.

subscription
in the most basic case, an authorized user wanting a specific package uses the bittorious portal to find a download link to the .torrent file that is then loaded into the users desktop download client. in the more advanced case, wherein a user wants a “subscription” to all torrents published to a given feed, the user enters the url for the feed into their bittorrent client instead. all current and future data published to the given feed will be automatically downloaded as it becomes available.

seeding
a client that has a full or partial copy of a torrent will, by default, be available to distribute the data to other subscribers. limits can be set on throughput usage, time of use, quality of service, hard download/upload caps, or be turned off completely for each individual client.

deployment components
from a deployment perspective, bittorious has only two types of components: a centralized web application portal, and any number of clients, some of which many be semantically declared as “dedicated” to the task.

portal
the bittorious portal is a cross-platform web application that supports the latest stable versions of mainstream web browsers. specifically, support is included for firefox , chrome , safari , and internet explorer .

internally, the portal's web application stack utilizes the ruby on rails framework on top of a postgresql rdbms instance to store active peer connection data, system accounts, feeds, torrents and torrent metadata, but not the published data. web front-end rendering and interactivity is provided by standard html <dig>  css <dig>  and javascript .

clients
a client is simply a machine running a standard bittorrent client to seed and/or download content to/from feeds, respectively. after a publication machine completes the initial seeding process to a similar dedicated client in the cloud, for example, it can be taken offline without disruption of the network as a whole. as long as data on the aggregate of online client machines contains all pieces of a given torrent, the data can be downloaded to completion by any current or new client. this characteristic of collective data replication provides an extremely resilient, high-ability architecture.

note that it is generally assumed that the throughput rates of the underlying file system greatly exceed the throughput available over internet connections at most institutions. if this is the case -- which it almost certainly is -- higher capacity disks will likely prove better investments than higher throughput disks.

dedicated clients
the optional addition of "dedicated" clients adds another availability component to the high-availability nature of the client system. the notion of a "dedicated" client is purely semantic, and there is no technological difference versus a normal client, with the understanding that a dedicated client is expected to:seed all torrents for the feed to which it is dedicated.

have enough bandwidth and underlying storage space to appropriately accommodate the needs of the publisher and subscriber base. this requires estimation on behalf of the deployment team to provide enough underlying storage.



every instance of the bittorious portal manages and controls one “network”, though there are no restrictions on the number of networks that may be deployed. most clients will only be able to use one network at a time for security reasons, though deployment of two physically adjacent clients on two logically different networks is not an issue.

management
accounts are defined within the portal and are managed in a role-based manner.  each role, below, is applied per user per feed.figure  <dig> 
role-based access for user accounts. every data feed supports individualized role assignment for all users approved to access the network managed by the bittorious portal.

none – this is the default. when a user has not been granted access to a feed, they may neither view feed details nor join any torrents within it.

subscriber - the default role. may log into the portal, use download links, and join torrents.

publisher - all abilities as subscribers, plus the ability to create, update and delete feeds.



additionally, a global “administrator” bit may be given to any user, which grants publisher rights on all feeds, plus the ability to manage user accounts.

bittorious groups torrents into access-controlled rss feeds, allowing subscribers to automatically receive data based on the existing bep- <dig> draft specification.  <cit>  the rss urls also include user-specific authorization tokens passed over encrypted ssl connections, allowing the tracker to securely authenticate every request. since all peers are authenticated and authorized via combination of authorization token, ssl, and bep- <dig>  the p2p protocol between peers remains unchanged.

security
unlike standard bittorrent, authentication and authorization checking are performed at three stages:web portal login.

client data feed  update requests.

client registration and keep-alive with the web portal.



bittorious controls access to metadata and torrent links behind the authenticated and authorized portal via simple email/password accounts granted by the system administrator. new users may request access via the portal homepage, though a portal administrator must approve new accounts before those users are allowed to log in. additionally, a portal administrator or publisher must grant each user access to any number of available feeds, as appropriate.

as an additional layer of security, we encourage the use of password-protected compression such as zip or gzip prior to publication of sensitive data, though this may limit future tasks related to distributed computing. nevertheless, payload encryption is encouraged to mitigate the impact of users forwarding their .torrent files via email or other means. unlike normal bittorrent trackers and portals, each downloaded .torrent file contains an authentication token for the logged in user. thus, any such out-of-band forwarding of the .torrent files will include those credentials. while the same forwarding problem exists with sensitive information included in any downloaded .pdf, .doc, or other file, it is important for users to understand that the .torrent files provided by the portal are only for that user, and should not be shared.

compliance of different systems in the network is, to some extent, given to client sites to enforce according to local policy, as bittorrent is generally friendly to heterogeneous networks of individual sites. bittorious  are agnostic to computing environment and can be run in any cloud computing environment that provides iaas, but cannot programmatically determine which data, if any, are subject to special local compliance rules. for uses subject to environmental restrictions such as hipaa, the bittorious portal as well as transfer nodes can be hosted on appropriately protected it infrastructure. users should consider the nature of data and metadata needing publication prior to deploying an instance of the bittorious portal.

most bioinformatics studies involve data bound by some form of “controlled data” access agreement, and data is rarely truly placed in the public domain. when .torrent metadata files are uploaded to bittorious by a publisher, bittorious forces the enablement of a “private” flag within the torrent as defined by the bep- <dig> draft specification  <cit> , as well as customizes the tracker url with an authentication token specific to each user joining the swarm. this logical data partitioning enforcement is necessary to address heterogeneous international contexts of licensing rights and statutory restrictions. in the future, ‘omics data may also require treatment as personal health information , further underscoring the need to proactively develop such tools.

RESULTS
to test the bittorious portal software, we established  <dig> clients at differing hosting environments each running the utorrent client, which supports the specific configuration and extensions required of bittorious. each was configured to force p2p encryption. each site was physically distinct using various internet service providers. sites included amazon web services and linode platforms, private data centers, as well as home office machinery. two clients were run on ubuntu linux  <dig> , three on osx  <dig>  and three on windows  <dig> x.

seven of the accounts were given “subscriber” access to a test rss feed, with the remaining client granted “publisher” access. torrents of content sizes ranging 1mib -10gib were created with random binary data, as well as  <dig> reference rna and several dna data sets with payloads up to approximately 500gib. the torrent files were generated with the ctorrent v <dig> . <dig> software using a 4mib piece size. all operating systems supported the x <dig> instruction set to avoid potential 32-bit boundary issues. node-specific settings and network configuration were left to the local operator.

initial seeding and additional replication of these data performed as expected due to the compliance with the bittorrent protocol. more importantly, the peer tracker integrated into bittorious performed well in both the standards-compliant tracker as well as the integrated account management, providing near real-time status updates to the operators via the portal ui, including the percentage completion status and approximate geographic location of each node.

discussion
as it is implausible to separate the discussion of technologies from the dollars that fund them, we also note that a distributed approach to data syndication is likely more resilient to disruptive budgetary and political concerns. at sufficient scale, events such as localized national disasters or congressional budget cuts cannot single-handedly end a collaborative effort. at envisioned scale consisting of millions of clients, it would likely take a cataclysmic world-wide physical disruption of both internet communications infrastructure as well as the destruction of multiple data centers to cause irrecoverable data loss.

regardless of scale, both bittorious and bittorrent are agnostic to payload. use of the system has been designed with bioinformatics in mind, but any “big data” field with distributed collaboration workflows may make use of their own portal deployment without modification. functions specific to bioinformatics pipelines have been left to the client side to ensure that the system is truly as generic and repurposable as possible.

CONCLUSIONS
the experiments in this paper were driven by a small number of clients only due to limited availability of suitable computing environments. we intend to focus future research and development on expanding the number of test clients at least several orders of magnitude, portal indexding and search features, as well as a custom client providing anonymous users the ability to donate local storage for any given feed up to a user-specified limit.

while in this study we have focused on demonstrating the feasibility of privatized bittorrent for genomics studies, the available worldwide goodwill of individual citizen scientists and their unused storage capacity and bandwidth is not to be discounted. world community grid  alone reports around  <dig> ,000+ active devices on their network.  <cit>  while volunteer storage  <cit>  has already been suggested, implementations designed based on this model have not surfaced. the natural next step is to develop a lightweight, cross-platform “bittorious home” application for anonymous micro-philanthropic volunteerism of local storage. storing a lower approximate 40 pb of genomic data for archival purposes -- a significant number as described in the million cancer genome warehouse  <cit> – at a participation level of 50 % of the devices on a network such as wcg would require approximately 32gib of donated storage per device for a single replicated data set.

given both the economic and technological advantages of distributed big data collaboration and archival, solutions such as bittorious are a compelling proposition worthy of future research and development.

availability and requirements
the bittorious portal software may be downloaded and deployed via the public source code repository at https://github.com/preston/bittorious. non-administrative evaluation may be performed by requesting an account from the demo site, below, in conjunction with the free utorrent client software.project name: bittorious

project home page:○ source code: https://github.com/preston/bittorious

○ demo: https://try.bittorious.com

○ tutorial: https://try.bittorious.com/getting_started



operating system: both portal and clients are platform independent.

programming language: ruby on rails, jquery, bootstrap

other requirements: ruby  <dig>  or higher

license: mit

any restrictions to use by non-academics: none



competing interests

the authors declare that they have no competing interests.

authors' contributions

pvl provided architecture, design, development and authorship. vd provided advisement, guidance and manuscript editing. all authors read and approved the final manuscript.

