BACKGROUND
microbial typing methods are fundamental tools for epidemiological studies and for the study of bacterial populations. these techniques allow the characterization of bacteria at the strain level providing researchers with important information for the surveillance of infectious diseases, outbreak investigation, pathogenesis studies, natural history of an infection and bacterial population genetics. the recent advances in sequencing technologies and the resulting decrease in costs, are promoting sequence based typing methods over traditional mole- cular methodologies, due to their reproducibility and portability of results, which allows for straightforward inter-laboratory comparison of microbial strains.

multilocus sequence typing   <cit>  and multilocus variable number of tandem repeats analysis   <cit>  are examples of such methods that are available for a multitude of bacterial species and are being used globally in epidemiological microbial typing and bacterial population studies  <cit> . over seventy different microorganisms have public mlst databases available at five different online locations, namely mlst.net  <cit> , pubmlst  <cit> , institut pasteur mlst databases  <cit> , ecmlst  <cit>  and mlst databases at the eri  <cit> . with the advent of next generation sequencing , single nucleotide polymorphism  analysis of entire bacterial genomes is being increasingly used  <cit>  and may eventually in the future replace mlst as the typing method of choice in global epidemiological studies.

these advances created the need for algorithms and tools to make sense of this wealth of data in the context of epidemiology, population genetics and evolution. existing free software tools for data analysis and visualization of microbial typing data are focused on mlst analysis, including the algorithms start  <cit> , eburst  <cit>  and goeburst  <cit> . however, these tools lack the capacity to integrate epidemiological data, which is crucial for the correct inference and analysis of relationships between strains. other well known software tools, provide the ability for network visualization and data integration, usually of generic use, such as gephi  <cit>  and tulip  <cit>  or more focused on biological networks such as regulatory, protein interaction or metabolic networks, as is the case of cytoscape  <cit> . neither these nor any other current tools for network visualization  <cit>  are specifically directed towards population or evolutionary analysis and all depend on already defined trees or networks, lacking the ability to infer them directly from data origi- nating from sequence-based typing methods. moreover, given their focus on general use, their configuration and customization for epidemiological data analysis requires expertise on graph theory and network mining and frequently calls for programming skills, so that their use for this purpose is restricted only to a few advanced users.

in order to cover the existing gap between the potential users and the tools available for data analysis and visualization of sequence-based typing methods and associated epidemiological and population data, we developed phyloviz. the most similar tool currently available is the eburst software  that offers a heuristic implementation of the burst algorithm, a radial static display of the generated trees and was designed to analyze solely mlst data. phyloviz was designed with an open architecture, building upon the goeburst implementation . it allows the expansion of the types of data that can be analyzed as well as of the algorithms and metrics used to analyze it. its main goal is to integrate and to display multiple sources of information. in the current implementation, both allelic data from mlst, as well as from mlva and the actual nucleic acid sequence data are supported for analysis by phyloviz. the software is also able to integrate ancillary information that may consist of clinical or patient demographic data or additional isolate information such as the results of other phenotypic or genotypic typing methods. phyloviz and the implemented algorithms are capable of handling large data sets, a growing requirement in the microbial typing field, with the constantly increasing developments in sequencing technology. phyloviz’s design adhered to the visual information seeking mantra of “overview first, zoom and filter, then details on demand”  <cit> , aiming to allow users to both find a narrow set of items in a large collection and display the relationships between them, but also to develop an understanding of unexpected patterns within the collection by empowering the user with query and display tools. the capacity to dynamically explore the data is what allows an effective analysis of large data sets.

implementation
overview
phyloviz allows users to manipulate multiple data sets of sequence-based typing data for analysis, which are presented within a window with a tree based navigation menu. each data set is described by a file containing typing data, i.e., allelic profiles or nucleotide sequences generated by a sequence based typing method such as mlst, mlva or snp data. moreover, a file containing ancillary data, sometimes also refered to as metadata, such as epidemiological, demographic information or any other relevant data may also be added and linked to the allelic profile data, representing information available for different isolates. both typing data profiles and isolate data can be visualized in a table or a tree view. these views allow the user to query and filter the data using regular expressions or by using a simple point and click interface as described in detail below. figure  <dig> displays the basic interface functionalities of the phyloviz interface.

once the data files are loaded, the user can infer probable patterns of evolutionary descent between allelic profiles using the goeburst algorithm or its expansion to generalized minimum spanning tree  like structures using different distance metrics. the unrooted trees resulting from the algorithms are displayed using a force-directed layout, where they can be interactively visualized, freely manipulated by the user to explore the existing links and interrogated, either through clicking on the nodes or links of interest to display additional information or by searching the graph for specific nodes.

users can then combine or query specific characteristics of either typing or ancillary data and overlay the results onto the graphical display. queries can be easily performed in a tree menu view, by selecting character values to be displayed onto the tree using selection boxes. a regular expression composition box is also provided to allow more complex queries. the resulting annotated trees can then be exported in a variety of common graphic formats, including both vector and bitmap formats. a complete tutorial for phyloviz and a description of its features is available at http://www.phyloviz.net/wiki/tutorial.

architecture
the software architecture is based on the netbeans platform , which includes a plugin system. users can develop and use new plugins according to their requirements and make them available for the community through their own website or by depositing them at the phyloviz repository.

it is our objective to keep phyloviz as modular and extensible as possible, allowing a seamless integration of new data analysis methods and visualization features. phyloviz is written in java and is compatible with any operating system running java  <dig>  or higher. the software uses several well-known open source libraries for data export and visualization, notably the prefuse toolkit for interactive information visualization  and the freehep java libraries for image exporting . the code for phyloviz core and most plugins is available under the gnu general public license  version  <dig> or any later version, with a classpath exception. the classpath exception means that the copyright holders of a library give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules. more complete information on the license is provided at http://www.phyloviz.net/wiki/download/. both the source code and binary versions for major operating systems, as well as the documentation are available at http://www.phyloviz.net.

algorithmics
the current version of phyloviz supports the inference of patterns of evolutionary descent using the goeburst algorithm  <cit>  and its extension to a full mst-like approach.

the first improvement over the original implementation of the goeburst algorithm is that phyloviz allows any possible distance for linkage comparison. the user can choose among available distances, or add new distances by implementing the interface abstractdistance  and providing a new plugin as described in supplemental material. in order to allow such extensibility, we have identified basic distance requisites. thus, any implemented distance should provide a way to compare two links , and it should also compute a level for each link. note that only a link comparator is required for most mst like approaches and, in particular, for goeburst. the level is only relevant for link filtering, as is traditionally done for filtering links at different number of locus variants in the case of mlst data analysis. when link levels are not applicable for a given distance measure, we can define the level as being equal for all links.

secondly, our implementation extends the goeburst rules to any number of variable loci in order to create a single tree. this approach uses the goeburst rules to identify, out of all the possible mst-like trees, the one that is concordant with the evolutionary model supporting the rules, guaranteeing a unique and consistent solution. the mst analysis allows the user to dynamically visualize the groups formed at any linkage level, including those formed at single-locus variant  level . the information of the group in which each isolate is classified, for each linkage level, can be exported to the ancillary data file and combined with existing data for later analysis.

the capacity to create groups at any linkage level is particularly useful to analyze mlva and snp typing data, since schemata can have much larger number of loci than traditional mlst schemes, frequently relying only on seven loci. the higher number of loci could be expected to yield a larger number of differences between individuals, motivating the exploration of higher linkage levels to generate useful trees translating evolutionary hypotheses.

note that by allowing any possible distance for link comparison and thereby fully generalizing link comparison, any problem of tree construction becomes a graphical matroid instance  <cit> , that can be solved by well known algorithms, such as the borǔvka algorithm  <cit> , the kruskal algorithm  <cit>  or the prim algorithm  <cit> . for goeburst, we enumerated explicitly all possible links, because we computed tie statistics for them, and we built the tree using the kruskal algorithm. however, for the full mst computation, we are now using the prim algorithm. the main reason for this is to avoid enumerating explicitly all links, the number of which, in the generalized version, grows quadratically with the number of nodes. the prim algorithm only requires us to generate links implicitly, involving at most to keep in memory as many links as the number of nodes and, thus, making the approach more scalable for large data sets. moreover, since we may have dense graphs, we also implemented a more efficient priority queue for prim’s algorithm, based on rank relaxed heaps as proposed by driscoll et al.  <cit> . these improvements are part of the phyloviz algorithms plugin. the visualization of the full mst was also optimized to support large data sets, with thousands of nodes. this was made possible by incrementally adding nodes to the force directed display following a breadth first search approach starting from the node with greater number of links. this lead to increased optimization speed and lowered the memory requirements for the mst display.

creating new plugins
the phyloviz plugin system allows new algorithms and visualization tools to be easily added. the implementation of these features must also use the netbeans platform respecting the documentation regarding the creation of new modules available at http://netbeans.org/kb/trails/platform.html.

in order to have access to the visualization and querying capabilities of phyloviz, the developer must add the intended phyloviz plugins as library dependencies of the new plugin. extensive documentation, describing the data model and algorithms api, is available on the website and in the data model section. a plugin implementation example is provided in supplemental material.

the graphical user interface for the incorporation of newly developed plugins is found in the plugins entry of the tools menu. the user has the option of adding a plugin stored locally, or through the use of a remote update center. the latter is periodically checked for new versions of the installed plugins and the user notified in case of the availability of updates. the update center can also be used to install new publicly available plugins from within phyloviz.

data model
the underlying data model of phyloviz was designed to provide a suitable and flexible enough abstraction to represent data from different typing methods, and to provide an unified interface for developing different algorithms and tools for data analysis. the basic unit is the dataset, which aggregates typing data and isolate ancillary data, as depicted in figure  <dig>  both typing and ancillary data are collections of tuples. each data tuple can be seen as a vector, named dataitem in the data model. by using such abstraction, we can implement data viewers and filters for both types of data at once, as we did in phyloviz table/tree viewer plugin and in phyloviz category plugin. let us now consider how typing data and ancillary are represented and distinguished. ancillary data is represented as a tuple of values for each isolate and, thus, in the data model, we have isolate and population, i.e., a collection of isolates. one of the isolate tuple entries is distinguished as the foreign key that allows relating ancillary data to typing data. similarly, typing data is represen- ted as a collection of identified tuples, known in the data model as typingdata and profiles. these types have different apis when compared with population and isolate, and in particular they provide all the frame- work required for algorithm implementation. although typingdata is just a container that is used to represent collections of profiles, a profile is an interface that must be extended by each implementation that makes available a new kind of typing data. in the current version of the software, the profile interface is implemented by the phyloviz mlst, phyloviz mlva, phyloviz snp and phyloviz aligned sequences plugins, allowing the input of different data files. this data model and several other helper classes are implemented in the phyloviz core.

we also provide a common api and utilities for algorithm implementation in the plugin phyloviz algorithms. the most relevant types are the algorithmprovider and the abstractdistance. the first one is an interface that should be implemented by any algorithm so that phyloviz can recognize it at runtime. the second one, abstractdistance, is also an interface that should be implemented whenever we want to extend algorithms based on link comparison with new distances, as is the case of the mst and goeburst algorithms. the documentation of this plugin, as well as the documentation of the full data model, is available online for users interested in developing new plugins.

RESULTS
phyloviz aims to be an efficient and user-friendly software, providing an interface where users can analyze and visualize their data, and export the results in several commonly used graphic formats.

to achieve these goals, it allows users to create data sets by loading the data from tab separated files for any kind of allelic profile data , that can be easily exported from excel worksheets, or fasta formatted files for sequence data, a common format easily obtained from any sequence analysis editor software. nevertheless, as previously pointed out  <cit> , the use of sequence information to infer relatedness between microbial isolates can be confounded by recombination that may introduce multiple nucleotide changes in a single event. on the other hand for microbial species where recombination is infrequent or for chromosomic regions where recombination is rare, this may be an approach that can be pursued. the users can also use the available plugins to download data directly from public databases that provide their data through a web service interface such as pubmlst.org  <cit>  or as simple flat files. this flexibility, coupled with the ability to use the goeburst algorithm and its expansion to a mst, allows the user to load multiple data sets simultaneously for the analysis, visual exploration and comparison of multiple typing results for the same isolate collection. any available additional ancillary clinical or typing data can be similarly easily exported from excel worksheets or from other database software, or directly retrieved from pubmlst.org from within phyloviz .

also, by applying the same analysis algorithms to different typing techniques, namely mlst, mlva or snp typing, phyloviz provides researchers with a more direct comparison of the different typing methodologies results, since using the same underlying evolutionary models and assumptions avoids possible artifacts or differences resulting from using multiple data analysis techniques for each typing method and then comparing the results. for the analysis of mlva data, an alternative distance based on goeburst is also made available in the software. in this implementation, the algorithm still creates trees only linking slvs, however instead of simply using the goeburst rules to decide which links should be drawn, it starts by considering the euclidean distance between two profiles. this distance is calculated as the sum of the differences across all loci in the mlva profile. for instance in a two locus scheme the difference between profiles 1- <dig> and 1- <dig> would be calculated as  <dig> in this metric whereas the profiles would be slvs in the classic mlst distance. this assumes that the genetic distance between two mlva profiles is proportional to the difference in the number of repeats at each locus. this is in accordance with models of accumulation of tandem repeats in each loci  <cit> , and for some data sets could create a more realistic and meaningful representation than using only the goeburst rules.

the ability to analyze data sets comprising thousands of isolates, with thousands of target loci, also allows phyloviz to efficiently handle the large volumes of data generated by ngs when applied to molecular epidemiology. this, coupled with its ability for data integration with a simple query system and dynamic visualization capabilities provide a user friendly platform aimed at non-bioinformaticians such as clinical microbiologists, epidemiologists and infection control specialists.

phyloviz usage example
to demonstrate a typical usage of phyloviz for exploring sequence-based typing methods databases and related epidemiological data, we show the analysis of the mlst database from streptococcus pneumoniae retrieved from https://spneumoniae.mlst.net. this data set  contains  <dig> unique sequence types and information on  <dig> isolates. the available data on penicilin susceptibility was curated and recoded for r , i  and s  based on the clinical and laboratory standards institute breakpoints for oral penicillin  <cit>  and saved on a tab delimited file. in subsequent analysis isolates classified as r or i are collectively referred to as non-susceptible. a new data set was created on phyloviz were  <dig> unique sts and respective allelic profiles were used as typing data and the penicillin resistance information was used as isolate data. the goeburst algorithm  <cit>  was computed at slv level for the data set dividing it in  <dig> groups of two or more sts and  <dig> singletons . the largest clonal complex , currently having  <dig> unique sts and representing  <dig> isolates is presented in figure  <dig> 

by selecting the penicillin resistance column in the isolate data, and selecting view in the interface, the user can instantly display how the penicillin resistance varies throughout the whole data set. figure  <dig> illustrates the overall representation of penicillin resistance for the largest cc. we can see that in the whole cc, penicillin non-susceptibility is concentrated in some areas of the whole tree.


focusing on one of those areas we can explore the graph locally. in figure 5a we focused on the st <dig> and st <dig> subgroups. in streptococcus pneumoniae, the major determinants of penicillin resistance are alterations of membrane proteins, known as penicillin binding proteins   <cit> . pbps are involved in the synthesis of peptidoglycan, the major component of the bacterial cell walls, and become inactivated when bound to penicillin. some alterations in the pbp genes cause amino acid changes that impair the binding of beta-lactams antibiotics, leading to decreased susceptibility to penicillin  <cit> . in s. pneumoniae, the remodelling of the pbps leading to resistance is frequently driven by recombination with exogenous dna, probably through transformation  <cit> . it was shown that ddl, one of the genes used in the s. pneumoniae mlst scheme, shows variation due to a hitchhiking effect driven by its proximity on the chromosome to the gene encoding pbp2a involved in penicillin resistance  <cit> . the incorporation of dna fragments encoding both genes from closely related streptococci was shown to affect the variability at both loci and could to also contribute to this effect. this can be easily visualized by displaying the ddl allele identifier onto the goeburst results . in the goeburst tree, st <dig> representing mostly penicillin susceptible isolates is surrounded by slvs that share the same ddl allele . in contrast, the slvs of st <dig> representing mostly penicillin non-susceptible isolates, show significant diversity in their ddl alleles. in fact, all the slvs of these two sts that differ in the ddl locus are assumed by goeburst to have originated from st <dig>  further supporting the hypothesis that the variability in the ddl locus is a consequence of a hitchhiking effect with penicillin resistance is the fact that only  <dig> out of the  <dig> ddl alleles found among the slvs are exclusively associated with penicillin non-susceptibility.


a screencast to demonstrate how fast and easy it is to produce this comparison is available at http://www.phyloviz.net/wiki/videos/.

remote mlst public repositories
the phyloviz loadmlst dbs plugin allows phyloviz to load allelic profiles and sequence data from public mlst repositories. it is currently capable of retrieving data from five public repositories: pubmlst  <cit> , mlst.net  <cit> , mlst databases at eri  <cit> , institut pasteur mlst databases  <cit>  and ecmlst  <cit> . these repositories make their data available through flat files. additionally, this plugin allows the integration of a local file, containing the isolate ancillary data, to complement the retrieved allelic profiles.

as described in additional file  <dig>  each developed plugin must specify which are the necessary dependencies. in this case, the phyloviz core, phyloviz mlst and phyloviz aligned sequences need to be specified, since the plugin permits the retrieval of allelic profiles and sequence data.

the phyloviz loadmlst dbs plugin creates an entry under the file menu, to launch a wizard-like interface guiding the user through the loading process. the interface is composed of four distinct steps. the first, presents the user with the list of all the possible data sets available in the five public repositories, together with a mandatory text field where the user specifies the name of the selected data set. the second, presents the full list of genes constituting the allelic profile of the selected data set, as well as the number of sts composing it. the complete set of allelic profiles can be downloaded by a single click. in the third step, the user can integrate with the retrieved allelic profiles, a local file containing isolate ancillary data. finally, in the last step of the wizard, the user is presented with two choices: the immediate creation of a data set without any sequence data, or to add the complete sequence data for each loci. in the latter, the user can import the sequence data independently for each locus, either by downloading it directly from the public repository or by specifying a local file in fasta format. by pressing finish, the new data set is created with the selected typing data.

since both allelic profiles and sequence data are specific instances of typingdata, both the goeburst algorithm and its mst-like approach can be directly applied. this means that phyloviz permits the inference of patterns of evolutionary descent, not only from the mlst data but also directly from the sequence data of the selected data set .

a similar plugin  takes advantage of the pubmlst web services to also automatically retrieve isolate ancillary data from the database. both the phyloviz loadmlst dbs and the phyloviz pubmlst plugins allow phyloviz to directly access, analyse and visualize the latest epidemiological data available in remote mlst public repositories.

CONCLUSIONS
phyloviz provides the research community with a freely available and easy to use software tool for the analysis of sequence-based typing methods. it is in continuous development, focusing on user-friendliness, platform independence, modularity, reusability and efficiency and offering a plugin architecture gives users the possibility to create modules tailored to specific needs. its flexibility in terms of epidemiological typing data analysis, relies on its ability to use any data format currently used for the established methods, such as mlst and mlva, as well as those of upcoming methodologies based on ngs.

we are currently working on new analysis methods and improved visualization capabilities in order to support and efficiently analyze the continuously growing data sets. we are also extending the software to directly interact with online databases, with the ultimate goal of providing a unified and simple interface for users to interact and explore currently available data.

availability and requirements
∙project name: phyloviz ∙project home page:http://www.phyloviz.net/∙operating system: platform independent ∙programming language: java ∙other requirements: java  <dig>  or higher ∙license: gnu gpl v <dig> w/ classpath exception ∙any restrictions to use by non-academics: only those imposed already by the license.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
apf and cv proposed the software architecture and developed phyloviz. ptm evaluated the software and implemented plugins for both statistical analysis and remote data retrieval. jmc, mr and jac proposed the project idea, evaluated the software, tested it with real data sets and analysed results, pointing out errors and improvements. all authors wrote, read and approved the final manuscript.

supplementary material
addtional file 1
phyloviz. plugin implementation example.

click here for file

 acknowledgements
this work was partly supported by fundação para a ciencia e tecnologia, portugal, projects pptdc/sau-esa/71499/ <dig> and ptdc/eia-cco/118533/ <dig>  and inesc-id multiannual funding through the piddac program funds, by fundação calouste gulbenkian and by an unrestricted grant from glaxosmithkline.
