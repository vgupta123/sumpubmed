BACKGROUND
the use of boolean models i n the study of biological networks was proposed and worked out already in the 1970s  <cit> . a boolean network model is characterized by the topology of a biological interaction network and a set of qualitative parameters termed “logical functions” by thomas and d’ari  <cit> . logical functions determine the activation state, or value, of any node in a network as a function of its activating and/or inhibiting inputs. in general, for a target node with k different input nodes, each of which can again be either “active” or “inactive”, the logical functions assign the resulting values of the target node for each of the 2k possible input patterns.

boolean networks are best suited to analyze and describe steady states of systems . as demonstrated by thomas, non-trivial steady states are determined by the presence of negative or positive feedback loops, with the former characterizing homeostatic or oscillatory processes, and the latter leading to switch-like or differentiation behaviour.

the analysis of boolean networks comprised of more than a few nodes is feasible thanks to tools developed by various groups. garg et al.  <cit>  introduced the concept of binary decision diagrams and developed squad <cit> . ginsim, a tool implementing thomas’ program was provided by gonzalez et al.  <cit> . himkelman et al.  <cit>  used algebraic methods to develop adam, helikar et al.  <cit>  developed the simulation platform chemicalchains and müssel et al. developed boolnet <cit> .

algorithms were also developed that simplify network architectures without affecting the steady state properties. they eliminate iteratively single nodes that: do not regulate their own function  <cit>  or: have one incoming and one outgoing edge  or have the same value in all attractors  <cit> . both approaches preserve the fixed point structure of the network. the latter preserves also the cycle attractors, while the former may, in certain cases, introduce spurious ones.

for a binary boolean network with n nodes, there are 2n possible activation patterns that form the state space: every state is represented by an n-dimensional binary vector. in the case of multi-valued boolean networks, where some of the nodes can have more than  <dig> values, the number of activation patterns grows even faster. we refer to this number as the “state complexity” of a network.

for every node in a network, the logical parameters determine how it reacts to the input it receives from other nodes, more specifically, to which value  a node will tend under any given input pattern, also referred to as the “image” of the node for this input pattern. in general, for a node with k inputs , there are 2k possible input patterns and corresponding logical parameters. we refer to this as “parameter complexity” of a network. for the choice of logical parameters, there are some obvious constraints, e.g., adding an activating input to an already active node should not lead to its inactivation. for simplicity reasons, boolean network analyses often adopt the convention that a node under the influence of at least one inhibitor always tends towards being inactive irrespective of the presence of any activators; in the absence of any inhibiting influences, a single activator will be sufficient to activate it. this effectively eliminates the parameter complexity of the problem. here, we deviate from this convention, motivated by biological examples where, for example, both a transcription factor and a co-activator are required for a certain function, or where co-activators and co-repressors compete for a target transcription factor . the only assumption we make here is that under “optimal” conditions, i.e., presence of all activators and absence of all inhibitors, a node must be activated, and likewise, in the presence of all inhibitors and absence of any activators, it must be inactivated. these minimum assumptions ensure that every node must in principle be able to switch between its two values. we note that state and parameter complexity are related and it is often possible to reduce parameter complexity by adding symbolic nodes to the network that represent complexes or intermediate steps along a process; however, this comes at the expense of higher state complexity.

for any given network and network state, it is not obvious if all nodes satisfy the logical functions, i.e., have values in agreement with their inputs; in fact, it is not even obvious if such a state exists. node values can be updated by switching them in agreement with the input pattern. whenever stated that in a given state a node satisfies the equations, it is meant that the node will retain its value should we choose to update it . for simplicity, we refer to such a node as a “content” node. a fixed state of the network is, by definition, a state in which all the node equations are satisfied, i.e. all the nodes are content. in contrast, a node whose current value is in disagreement with its current input, and which will be modified when chosen for an update, is called a “discontent” node.

boolean networks have often been studied using “synchronous” update strategies, where the values of all discontent nodes are switched simultaneously.  while this approach is technically convenient, it does not properly reflect the characteristics of biological networks, and it may even introduce artifacts in their behavior. “asynchronous” updates proceed with one node at a time, often selecting them in random order. this method, referred to as “general asynchronous” in  <cit> , is the one we choose.

in the following, we are referring to random asynchronous updating and to binary boolean networks . furthermore, all results were generated from testing on networks having:  values of the ratio of edges to nodes between  <dig> to  <dig> and  all their nodes with non-zero in- and out-degrees and with at least one of them larger than one .

implementation
the software application has been written in ansi c and it is single-threaded. the only hardware requirements concern available random access memory. the network topology can be loaded using the straightforward format also used in  <cit> . in the input text file each line corresponds to either an activation a → b or to an inhibition c − | d.

the source code is freely available from the authors.

RESULTS
fixed states detection
crucial for the development of the algorithm is the realization that the discrete nature of boolean networks allows us to restrict the search to selected subspaces of the state space in which the fixed states  reside. these subspaces turn out to be orders of magnitude smaller than the actual state space rendering possible an exact enumeration. this is achieved via a two-step process .

assume a boolean network of n nodes. for k of them , generate the 2k × k matrix representing all their 2k possible states. then for each one of the remaining n-k nodes go through the following iterative process:

extend the matrix by first duplicating it and then adding to it an extra column with the values of an appropriately chosen st node . the outcome is a 2k+ <dig> ×  matrix. the choice of the new node is crucial: all its incoming nodes must be present in the initial k-member group . then, for each row, we check whether the value of the added node satisfies its node equation. if it violates it then we remove the row, for it cannot lead to a fixed state. by doing so, all its 2n- downstream successors are effectively removed once and for all. the same procedure is followed for any of the k initially selected nodes, if all its incoming nodes are in the matrix.

then a nd node is added, further extending the matrix, its equation is tested against all rows, and the process is repeated until all the nodes have been taken into account. at each iteration step, if no remaining node is found having all its incoming nodes already present in the matrix, the one with the maximal out-degree is chosen. the algorithm is simply trying to increase the probability that at each step at least one node having all its incoming nodes already present will be available. the choice of the first k nodes is based on this reasoning too: the ones with the highest out-degree values are selected.

the successive removal of equation-violating states  leads to a dramatic decrease of the number of states examined. it can simplify the problem by many orders of magnitude, depending on network size and complexity. in a typical network the number of examined states reaches its maximum value at about or just after the time half of the nodes have been included in the matrix. then it decreases rapidly as many of the node equations are taken into account during the evaluation. when the full set of nodes has been processed, only the fixed states remain in the final matrix.

we note that the approach described here simultaneously copes with both state and parameter complexity. when testing if the actual value of a node is compatible with the node equations, we accept any states for which this condition holds for at least one choice of the logical parameters. thus, the algorithm does not only yield fixed states for a concrete combination of logical parameters, but for all possible ones. the conditions on the logical parameters needed to realize a fixed point can then be read from the final matrix . this aspect is of key importance for reverse-engineering problems.

the generalization to multiple-valued case is straightforward: at each iterative step, instead of just duplicating the rows, the algorithm adds m- <dig> replicates of the previous matrix when adding a node with m levels, with the corresponding level  appended. then it proceeds as previously described, namely by removing all equation-violating states.

cycle detection
preliminaries
the system equations direct each state to flow to neighboring states and  neighboring states differ by the value of at most a single node. the changing node is set to a value that satisfies the system equations, which increases the number of content nodes by one; however, this change will typically have effects on other nodes, and other discontent nodes can result. if the state space contains basins of attraction then the system will eventually flow towards them. basins of attraction signal the existence of fixed states or of stable cycles, i.e., sets of states out of which the system cannot escape once it reaches them. once a system enters a basin of attraction then the equations drive it deeper into it, gradually increasing the number of content nodes. however, for any basin of attraction, it is not trivial to find out if it can be reached from any given current state.

we consider a state to be the more unstable/disordered the higher the number of its discontent nodes, and we refer to the state as being 1-, 2- up to n-discontent. intuitively, the system equations tend to drive the system towards the more stable/ordered regions of the state space. we note that most of the interesting stable cycles reside in sufficiently ordered space state regions, where a good part of the node values of their members satisfy the equations. stable cycles including states with a large number of discontent nodes are less relevant which is apparent from the following considerations .

if a state of a system with n nodes is k-discontent, it has k successor states, because each one of the k discontent nodes could be updated, and the equations do not change the values of content nodes.

a cycle is stable when all its member states flow within the cycle. a single cycle member having a successor that is not part of the cycle renders the cycle metastable .

a stable cycle containing a state with even a moderate number of discontent nodes is necessarily a long cycle ; this state has multiple successors and all of them must be members of the cycle as well as all their successors, etc. on the other hand, cycles whose members have very few discontent nodes are often short. we refer to a k-cycle to indicate that its most discontent member state is  k-discontent states. a 1-cycle, in which each state member has a single successor, is also referred to as a simple cycle . otherwise it is a mixed cycle and in such cycles “branching” is present . simple cycles are necessarily stable. a typical example is: a 1-cycle that consists of  <dig> states distinguishable by the  <dig> combinations  of the values of two nodes. the remaining k- <dig> nodes in the network are all content and shared by all the  <dig> cycle states.

we note that, in principle, there can be cycles that are long despite the fact that all their states have few discontent nodes.

stable cycle finding
the fixed point search described above is performed in states that satisfy all the system equations. it cannot be used to detect a cycle since each member state of a cycle has to be at least 1-discontent. it follows naturally that relaxing the above restriction can be used for cycle finding. namely, a search in the enlarged subspace that includes all the states up to and including k-discontent states will result in the detection of all j-cycles, where j ≤ k). unavoidably, the enumeration of more states results in a reduction of the size of resolvable networks.

the value of k can vary from k =  <dig>  to n . the number of selected states grows very fast as k increases. cycle finding is feasible only when the number of selected states is manageable because of memory restrictions. in addition, execution running times increase fast because the algorithm, in line with the “standard” graph-theoretical approaches, first finds all parent–child state relationships and then searches for stable cycles. if and when one is found, it “creates” its basin of attraction via a bottom-up approach.

the algorithm goes through two main stages:

 determine the appropriate subset of the state space.

a. as in the fixed state case, go through iterations adding a node at a time and keeping at each step all states up to and including k-discontent states. each state is labeled by its number of discontent nodes . the end result is the set of all these states. the current implementation can readily handle sets with up to tens of millions states. note that all network fixed states are included and labeled by zero.

a. the predecessors and successors of each selected state are recorded in appropriate data structures. all states that do not have any of their successors in the selected set of states  cannot be assessed and are from now on excluded.

 search for cycles within the selected set of states:

a. first, identify the basin of attraction of each fixed state. this is done by “walking uphill” the collected information on successor/predecessor relationships, labeling and counting along the way all states belonging to the current basin. any remaining, non-labeled states belong exclusively to basins of cyclic attractors. in subsequent steps, the search is restricted to these states . absence of non-labeled states clearly implies the absence of cycles in the selected state set; the search is effectively terminated at this point.

a. starting from state with the lowest k-value, look for directed cycles using again the successor/predecessor data structures, by creating all directed walks in the graph of selected states. if any such cycle is found then it is checked whether any of its member states belong to any of the currently detected basins. if this is the case then the cycle is discarded as unstable. otherwise, check whether the cycle is “closed”, i.e., whether the children of all its members are also members of the cycle. if this is not the case, the cycle either has members  belonging to a basin that was not yet found or it is part of a larger mixed cycle. at the current step, such a cycle is simply registered; it will be dealt with at a later stage. if the cycle is found to be closed, then it is stable and constitutes an attractor. all its basin states are counted and any non-previously labeled ones are now labeled.  this step is repeated until all registered states have been considered.

a. detected cycles, whose members do not flow towards identified basins, can still remain. each one of them may be part of a larger mixed cycle. an iteration process is called which, starting from an appropriately chosen “seed” cycle, keeps enlarging it by adding any new states from cycles with states flowing into it. the iterations continue until this enlarged cycle becomes “closed”. as previously, the corresponding basin is determined and the process continues for any remaining non-labeled states.

the time needed for the exact determination of all successor/predecessor relationships and for the enumeration of the members of a basin grows linearly with the number of selected states. this fact is instrumental in rendering the algorithm fast. another crucial element is that the size of the search space is reduced each time an attractor basin is determined.

benchmarking
for benchmarking purposes we generated programmatically a number of sufficiently complex boolean networks that have features similar to known, biologically relevant examples. as mentioned above, nodes with a single incoming and a single outgoing edge were excluded. the ratio of edges to nodes was around  <dig>  for most of the networks  and no more than  <dig> incoming edges per node were allowed. we chose to compare lnet to genysis and ginsim because these two packages support both true asynchronous updating and guarantee detection of all cycles . lnet and genysis share a common input format; for ginsim a compatible version was generated for all relevant runs.

only the lnet test runs, which involved hundreds of networks, were automated the genysis runs, as seen below, were limited to smaller-size networks while the ginsim ones were difficult to automate. therefore, we ran just a few of them that still generate sufficiently representative results.

the tests were performed on a linux computer with a xeon  <dig>  ghz processor and  <dig> gb of physical memory. the ginsim version was  <dig>  and it ran on java  <dig> .

genysis was found to be superior in detecting all fixed points and all cycles for networks up to approximately  <dig> nodes. the execution time for the larger ones can reach  <dig> hour and the memory requirements are minimal. for even larger networks the execution times were higher than our testing time  and memory utilization was becoming important. these results are in overall agreement with those of ferhat et al.  <cit> . it should be emphasized that genysis by design detects all existing cycles, also covering cycles with thousands of member states.

ginsim detects fixed states for networks up to approximately  <dig> nodes fast and in a memory-efficient manner as previously reported by hinkelman  <cit> . being multithreaded, ginsim took also advantage of our multicore testing environment. the execution time for larger networks was, however, higher than our testing time and sometimes seemed not to terminate at all. its performance when searching for stable cycles was rather poor. it needs already few minutes to analyze 20-node networks and fails for even moderately larger networks. the reason is that it attempts exhaustive enumeration of all network states. here it should be noted that ginsim can handle multiple-valued networks too.

lnet detects fixed states for networks up to  <dig> nodes, detects all cycles for networks up to  <dig> or so nodes and detects a subset of the cycles for networks with up to  <dig> nodes. the limiting factor is available computer memory because the size of the space state regions enumerated by lnet grows, inevitably, too large.

for cycle detection, up to 20-node networks, lnet’s performance is equivalent to that of genysis. from  <dig> to  <dig> nodes it is still the same provided, however, that the lnet search is restricted to k-discontent states with low k . otherwise, it can be significantly slower, for similar reasons as ginsim. the slowdown can be important in the absence of attractors with very low k  because these are always detected first and have their basin states immediately removed from any downstream consideration. elucidating further the different performances of the two algorithms, a 30-node network analysis may take several hours in genysis irrespective of the numbers of fixed states or cycles . on the other hand, while lnet may fail to detect a very large cycle, it will find fixed states and small cycles in sub-second time.

above  <dig> or so nodes lnet is alone in detecting cycles. for increasing numbers of nodes, we have to decrease the allowed number of discontent nodes for any enumerated state because of limited computer memory. this results in fewer detectable cycles. recall, however, that k-cycles with low k values are likely to be the most relevant ones in boolean networks representing biological systems.

a schematic representation of the comparison of the three algorithms is shown in figure  <dig>  the remaining figures focus exclusively on lnet results.

the first series of tests targeted the fixed states of networks having nodes ranging from  <dig> up to  <dig>  for each one node number analyzed, a set of  <dig> networks was generated, subject to the rules mentioned earlier. then each one of these networks was analyzed by lnet either searching exclusively for fixed states or for stable cycles as well. the computer execution times were recorded and the results were used to generate the plots shown in figures  <dig>   <dig>   <dig>   <dig> and  <dig> 

in figure  <dig> a semi-log plot of the number of nodes versus the computer execution time in seconds is shown. data are not shown for the  <dig>   <dig> and  <dig> cases because insufficient memory caused termination for 20%, 68% and 68% of them respectively. 

next, as has been already explained, the lnet algorithm relies on a drastic reduction of the number of enumerated states. this becomes evident in figure  <dig>  where the enumerated states are plotted versus the total number of system space states .

in figure  <dig>  the focus is on cycle searches. the  <dig> plots show computation times for cycle searches in networks of  <dig>   <dig> and  <dig> nodes, respectively. data from higher number of nodes  are not shown but follow similar trends.

figure  <dig>  also concerning cycle searches, shows counts of system states having equal or less numbers of discontent nodes, for increasing numbers of discontent nodes. for a single 30-node network, states with up to  <dig> discontent nodes still cover less than 6% of the entire state space. enumerating this fraction is sufficient to detect existing cycles with up to a few thousand member states.

figure  <dig> summarizes all the lnet results concerning both fixed states and cycles.

finally, figure  <dig> shows the effect of increasing the number of edges for networks with a fixed number of nodes .

CONCLUSIONS
we present an algorithm that, based on a build-up approach, greatly reduces the search space for fixed states and fixed cycles in boolean networks. it allows for the fast and reliable detection of all fixed states in networks of up to  <dig> nodes, for an edges-to-nodes ratio of up to  <dig>  highly ordered cycle attractors, which correspond to the biologically most relevant cycles, are detected for networks of approximately half the number of nodes.

key characteristics of the approach are the exact enumeration of well-defined regions of the network state spaces and the faithful reproduction of the corresponding state transition graphs. the result is the detection of all the attractors residing in these regions. depending on the overall fraction of the enumerated subspaces, it may be possible to deduce information about the size of each attractor basin.

execution times of lnet are comparable to or faster than other approaches. its limitation is clearly the available memory. with growing network size, even focusing on small sub-spaces of the entire network state space becomes prohibitively complex at some point. programming-inspired optimizations will only lead to marginal improvements because the state space of a boolean network doubles in size each time a single node is added. a promising alternative is to apply first one of the existing network reduction methodologies and then submit the resulting network to lnet. such a scenario should be able to handle networks having  up to few hundred nodes.

during the preparation of the manuscript we became aware of a publication by sq zhang et al.  <cit> , where a fixed state detection algorithm, similar to the one presented here, is described. the authors also provide a conceptual outline of a cycle-finding version of their algorithm based on a simple periodicity check which, however, could detect reliably only simple cycles. we did not test this algorithm because no sufficient information is available. finally, there is no discussion of the role of the number of discontent nodes in cycle detection.

availability and requirements
the lnet executable, a file with instructions on how to use it and examples of input files are provided in additional file  <dig> 

operating system: the source code can be compiled on windows, linux and apple computers.

programming language: ansi c

restrictions of use by non-academic users: none

competing interests
nikolaos berntenis and martin ebeling are full-time employees of f. hoffmann–la roche ltd.

both authors declare that they have no competing interests.

authors’ contributions
nb wrote the lnet code and performed the comparison tests. nb and me conceived the algorithm and wrote the manuscript. both authors read and approved the final manuscript.

supplementary material
additional file 1
includes the 
lnet 
executable , a help file  with detailed instructions on how to run 
lnet 
and  <dig> input network files that are used to illustrate the software in the help file.

click here for file

 acknowledgements
the authors would like to thank abhishek garg, julien dorier and ioannis xenarios for valuable discussions and laurent essioux for his support.
