BACKGROUND
the amount of biomedical data stored in public databases has grown extensively in the last couple of decades and will most likely continue to increase just as rapidly in the coming years  <cit> . however, for researchers to make optimal use of this large amount of information, it has to be structured and annotated in such a way that data from different labs, different instruments and even of different types can be compared and analyzed efficiently. data must therefore be annotated using precisely defined terms agreed upon by all data providers. with this requirement in mind, controlled vocabularies  and ontologies have been created. a cv is defined as a limited list of clearly defined terms, with optional relationships between the terms, while an ontology moves beyond a mere cv by attempting to extensively model a part of the real world  <cit> .

but even though systems for annotating biomedical data in consistent ways are available, finding and using the correct cv terms to annotate a data set may in some cases be a difficult task. partly as a response to this the ontology lookup service  was created  <cit> . the ols provides interactive and programmatic interfaces to query, browse and navigate a long list of biomedical ontologies, thus making it easier to find the desired cv terms. however, using the ols as a web service is not always feasible, especially for researchers without bioinformatics support.

we have therefore created a java front end to the ols, called the ols dialog http://ols-dialog.googlecode.com, which can be plugged into any application requiring the annotation of data using cv terms, making it straightforward to find and use cv terms without requiring any additional knowledge about web services or ontology formats.

implementation
the ols dialog has been implemented in java, is platform independent and requires java  <dig>  . as the name suggests, the ols dialog is implemented as a java dialog, which depends on a parent frame or dialog. selected terms are communicated to this parent through the olsinputable interface, defined in the package no.uib.olsdialog. this interface contains two simple methods that fully represent the interaction of the ols dialog with its parent.

platform independent java binaries, additional documentation and source code are freely available at http://ols-dialog.googlecode.com. ols dialog is released under the permissive apache <dig> license http://www.apache.org/licenses/license- <dig> .html allowing for easy reuse of the code and tool in other settings.

RESULTS
four different cv term search strategies are supported in the ols dialog:  term name search, locates a cv term by a  match to a search term;  term id search, locates a cv term by its cv term accession number;  psi-mod mass search, finds the cv term for a modification in the psi-mod ontology  <cit>  using the mass of the modification; and  browse ontology, browses the ontology as a tree structure and allows the user to locate the desired term. furthermore, ols dialog also provides a term hierarchy graph view that can be used to locate or verify a cv term by inspecting the term hierarchy. note that the term name search supports both fuzzy/partial searches  and synonym searches .

the main interface of the ols dialog is split into three main parts. at the top, the desired ontology is selected. at the time of writing more than  <dig> different biomedical ontologies are supported in the ols, including over  <dig>  <dig> cv terms. a full list of the supported ontologies can be found at http://www.ebi.ac.uk/ols. these ontologies are constantly updated and maintained by specialists in the various fields  <cit> , and new changes will be automatically picked up daily by the ols. it is important to note that the ols dialog does not store the ontologies locally but accesses the ols web service whenever a search is performed. this ensures that the latest versions of the ontologies are always used.

in addition to searching a specific ontology it is also possible to search in all ontologies at once by selecting 'search in all ontologies' at the top of the list. this makes it possible to locate a cv term for which the ontology is unknown. searching in all ontologies slows down the search however, and is not the recommended standard search option.

below the ontology selection there are four tabs, one for each search option. although each tab provides a search-specific interface, the overall structure stays the same. the search parameters are inserted or selected at the top of the tab, and the results of the search, i.e., the matching cv terms, are inserted into the 'search results' table. by selecting a cv term in the results table the term's associated details will be presented in the 'term details' table. the browse ontology tab is slightly different, as it replaces the 'search results' table with a tree structure of all terms in the currently selected ontology. it is also possible to view the term hierarchy as a graph by clicking the 'view term hierarchy' link at the top of the 'term details' text area. when a cv term is selected in the table  clicking the 'use selected term' sends the selected term to the parent frame or dialog.

for examples of how the ols dialog can be used, see figure  <dig>   <dig> and  <dig>  in figure  <dig> term name search is used to find the possible cv terms for the search term 'oxidation', while in figure  <dig> the same term is found using psi-mod mass search. figure  <dig> shows how the browse ontology feature can be used to locate the term 'go:001250'.

to display how the ols dialog can be used in other projects we have implemented a simple application, ols_example, located in the no.uib.olsdialog.example package. to run the example, download and unzip the ols dialog and double click the jar file . more details can be found at the ols dialog web page: http://ols-dialog.googlecode.com.

CONCLUSIONS
the ols dialog greatly simplifies the usage of the ols in end-user tools, without requiring any additional knowledge about web services or ontology formats, making it much easier to annotate data using cv terms. the ols dialog has already been in use for quite some time in pride converter  <cit>  for annotating mass spectrometry data. we believe that many other tools could also benefit from the usage of the ols dialog, and that this could increase the usage of cv terms for annotating data, which ultimately makes these data even more valuable to the biomedical community.

availability and requirements
project name: ols dialog

project home page: http://ols-dialog.googlecode.com

operating system: platform independent

programming language: java

other requirements: java  <dig>  or newer

license: apache license  <dig>  http://www.apache.org/licenses/license- <dig> .html

any restrictions to use by non-academics: none

list of abbreviations
cv: controlled vocabulary; ols: ontology lookup service.

authors' contributions
hb did the most of part of the programming and contributed in writing the manuscript. rc assisted in the programming and contributed in writing the manuscript. ie monitored the programming and contributed in writing the manuscript. lm monitored the programming and contributed in writing the manuscript. all authors read and approved the final manuscript.

