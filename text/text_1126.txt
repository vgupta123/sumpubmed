BACKGROUND
in computational modeling of cell biological processes, a formal representation, i.e. a model, of the dynamics of the system under study is the central subject of investigations. cell biological models typically focus on the processes of molecules like proteins and small chemicals. however, in addition, dynamics at cell level, e.g. proliferation and differentiation of stem cells, and cell-cell interaction, influence these intracellular dynamics as well, just like such high-level dynamics are influenced by processes at the molecular level. this hierarchical organization and the causalities between different levels, i.e. from the lower to the upper  and vice versa , are universal characteristics of biological systems  <cit> . hence, multi-levelness has been identified to be an important and general principle of systems biology  <cit> . depending on the question that shall be pursued with the model, capturing processes that happen at different levels, e.g. proteins, individual cells, and cell populations, and their interrelations within the model is of relevance  <cit> . the question is how can this multi-levelness be supported by modeling methodologies? we will pursue this question in the context of rule-based modeling.

rule-based modeling
in the past years, many different modeling languages have been introduced to support modelers in their task, for example  <cit> . the idea is to write down a model not directly mathematically, like in ordinary differential equations  or stochastic processes, but in terms of a tailor-made syntax. a semantics is then provided that bridges the gap between what is written and the mathematical definition of its computation. a carefully designed syntax can increase the accessibility of models for discussion and presentation, especially for domain experts that are not extensively familiar with modeling and the underlying mathematical formalism. formal modeling languages can also extend the flexibility in the choice of methods for model analysis, since more than one semantics can be defined for the same syntax .

rule-based modeling languages use the notation of chemical reaction equations , which denote a natural choice of syntax to model cell biological systems. consider, for example, a simple reversible process of dimerization as it occurs in many signaling pathways  <cit> . it can be described by the two chemical species monomer and dimer and the following reversible reaction, where kf and kr are the respective rate constants for the forward and backward reactions:

 monomer+monomer⇌krkfdimer 

chemical solutions, i.e. mappings from species to concentrations or alternatively to their discrete integer amounts, describe a model's state. a formal semantics can then be defined as mapping of chemical solutions and reactions to, for example, stochastic processes or odes  <cit> .

many rule-based approaches, for instance  <cit> , allow to describe species with attributes as well as rules with reactant patterns, i.e. by specifying structured molecules and rule schemata they allow to model basic reactions as an alternative to the entire network of all possible chemical species and reactions. thus, due to rule schemata, complexity - in terms of the number of required rules - can be significantly reduced  <cit> . 

let us illustrate this with the help of a simple example. proteins, in particular those involved in signaling pathways, often show various sites for binding other molecules. furthermore, modifications like phosphorylation or methylation at diverse sites might determine the ability for binding other molecules and thus influence the interaction pattern of a protein. hence, combinatorial explosion easily leads to very complex network models with hundreds or even thousands of species and reactions. consider a system of ten interacting proteins. one of them is a large scaffolding protein that might reversibly bind each of the other nine proteins at nine distinct sites. we assume each of the nine binding reactions to be independent from other bindings. this at first view quite simple model requires to define  <dig>  molecular species, i.e. distinct combinations of bindings, and  <dig> reactions. attributes and rule schemata help to deal with the system's complexity by specifying only the basic molecules and reactions. as the binding reactions are assumed to be independent from each other, each of them may be described individually without taking the state of other binding sites into account. by omitting such irrelevant information, one rule might then be translated into multiple basic reactions of a large network by which the model is kept small and manageable. hence, a rule-based modeling language like bionetgen  <cit>  allows to model the above system by specifying a set of only ten molecules and nine reversible rule schemata instead of  <dig> molecular species and  <dig> reactions. for a more comprehensive review of rule-based modeling and its advantages for formal descriptions of signal transduction pathways, we would like to refer to  <cit> .

summing up, due to schematic rules, the complexity of a model may be effectively reduced and an intuitive modeling metaphor along the lines of well-known chemical reaction equations facilitates the process of modeling and the accessibility of models. consequently, the number of rule-based approaches to describe biochemical reactions has increased during the last years, e.g.  <cit> , and also an increasing number of publications can be observed that utilize rule-based languages for concrete modeling studies, e.g.  <cit> . 

in this paper, we identify concepts for supporting rule-based multi-level modeling. we show a realization of these concepts as part of ml-rules, a modeling and simulation approach we developed. thereby, we start with concepts that nearly all current state of the art rule-based approaches support to successively approach concepts that are obviously related to multi-levelness, i.e. nesting. thereafter, an example in which intracellular and intercellular dynamics are combined will illuminate the role that each of these concepts play in supporting multi-level modeling. finally, to complete the results and discussion part of the paper, related work will be revisited to discuss which of the identified concepts are already supported.

RESULTS
overview of concepts
a very brief introduction to rule-based modeling is already given in the previous background section. in the following, we will focus on the concepts we use in our rule-based multi-level approach . their respective role in supporting multi-level modeling will be shown in the subsequent example model. 

for first studies, we base ml-rules on continuous time markov chains . the semantics is discrete population-based, i.e. we work with natural copy numbers of identical species instead of real valued concentrations. the reason for a stochastic semantics lies in the observation that at higher levels of organization  no longer abundant numbers will be able to balance fluctuations as can be often observed at lower levels, e.g. proteins that are involved in metabolic pathways. and also when looking at levels further down in the hierarchy, e.g. gene regulatory processes, stochastic events may play a crucial role due to low copy numbers of involved species. hence, stochasticity is often an essential feature for multi-level modeling of cell biological systems  <cit> . however, it should be noted that stochasticity is not necessarily constrained to ctmcs, as sometimes at higher levels other than exponential time delays are required, e.g. normal distributions  <cit> .

species, attributes, and solutions
the basic building blocks of ml-rules models are called species which may represent any object of interest, e.g. small chemicals, macro-molecules like proteins, or membrane bound cellular compartments. each species has a name, e.g. a, and each name has a fixed arity ar ∈ ℕ <dig> that specifies the number of attributes of a species. attributes are not restricted to a finite set of values and they may be of any kind of numerical value and textual string. for convention throughout this paper, species names start with a capital letter and attributes are written in a bold font type within parentheses behind the name. parentheses are omitted if ar =  <dig>  for example, a, a, a, and a are valid examples for a species a with ar =  <dig>   <dig>   <dig>  and  <dig> respectively. however, these examples are invalid when two or more of them are being used within the same model, as the arity of a species name is fixed and therefore may not vary between species with identical names, i.e. a in this case. each defined combination of attributes is a distinct species, i.e. a and a share the same name but are different species.

a solution is a multiset of species, i.e. can be either a single species or a composition of multiple sub-solutions. the '+' is the delimiter symbol for composing multiple solutions and a solution can be also an empty set ∅. we write na with n ∈ ℕ <dig> to refer to a solution which is composed of n identical copies of a . for example,  describes a solution consisting of three different species with an amount of  <dig>   <dig>  and  <dig> respectively.

reaction rules, rule schemata, and their instantiation
reaction rules describe the dynamics of a model, i.e. they define how certain species are removed from or added to a given solution. when firing, a rule substitutes a reactant solution s by a product solution s'. the general syntax follows the notation of chemical reaction equations and the majority of other rule-based modeling languages, e.g.  <cit> , namely reactants are written on the left-hand side and products on the right-hand side of an intermediate right-headed arrow:

 s→s′. 

for simplicity reasons, our syntax only allows for uni-directional rules. thus, two complementary rules have to be defined for modeling reversible reactions. however, it would be straightforward to extend the syntax to reversible reaction rules if needed.

rule schemata are a notational convenience, which uses variables to bind attributes of reactants. by doing so, each rule schema may encode for several rule instantiations, i.e. reactions. let us take a reaction which converts a species a into another species b. consider the situation, that a is an attributed species with an arity ar =  <dig>  but the attribute is of no interest for its reaction to b. without schematic rules, we would need to specify one rule for each possible value of the attribute of a, which can be tedious and error-prone.

moreover, as we do not fix the set of attribute values, i.e. the state space might be infinite, it is impossible to define each potential reaction. therefore, instead of specifying rules with the defined reactant species, we define a reactant pattern by inserting a variable x for the attribute of a:

 a→b. 

for convention, we write variables in a non-bold font type and starting with a lower case letter throughout this paper. mapping the above rule schema to the solution  evaluates to the following two rule instantiations:

 a→b and a→b. 

besides such very simple variants, rule schemata can be also defined by employing expressions to specify attributes. for instance, a reactant pattern a + a matches every solution where at least two as exist, one of which attribute's value is exactly twice the attribute's value of the other one. expressions can be also used to specify the attribute of the products, e.g. the rule a → b applied to a solution  would lead to . please note, arbitrary functions can be used for expressions .

a further reduction in the number of rules can be achieved by using attributes to represent links between species, e.g. to model noncovalent bonds within protein complexes. by doing so, individual subunits of a protein complex can be preserved instead of specifying numerous species names, each of which would reflect a different combination of subunit states and bindings . entirely new values can be created with the help of the ν-operator:

 a+b→a+b. 

f is a constant that denotes a free binding site and νx creates a fingerprint-like unique value which does not already occur in the current model state. it is assigned to the products on the right hand side of the rule via variable x, i.e. in an instantiation of the rule, x is replaced by a newly created unique value which serves as identifier for this particular binding. this method for representing linkage of species is identical to private channels in the π-calculus  <cit>  and allows to model molecular complexes similar as can be done with rule-based languages that have explicit notions of complexation, e.g.  <cit> . moreover, once created, unique values can be used in a highly flexible manner, e.g. to describe bonds shared by more than two binding partners  or across level boundaries . species can also be marked with an unique indentifier to observe the dynamics of individual entities.

however, note that the approach also has some drawbacks compared to explicit notions of molecular bindings: first of all, without profound knowledge or decent annotation of the model, it might be difficult to find out whether certain attributes of species represent binding sites. the approach would also allow to reset just one species to its unbound state while its former binding partner remains unchanged. therefore, the modeler is responsible for describing a correct model without such unrealistic dynamics. furthermore, at least in the current implementation of ml-rules, using identifiers for modeling links between species may slow down the simulation as the number of distinct species increases and therefore matching reactants may take significantly more time .

kinetic rates and constraints
each reaction rule is assigned a stochastic kinetic rate r∈ℝ0+:

 s→rs′. 

the higher the rate of a rule, the more likely the rule will fire at a time calculated according to this rate. the kinetic rate can be a simple constant numerical value, for example, to describe a chemical reaction with constant speed, i.e. a zeroth-order reaction whose speed is independent of the amount of any chemical species. however, most reaction rules that describe biological systems need to take the amount of one or more reactant species into account for specifying correct system dynamics. probably in most cases the kinetics of a rule follows the law of mass action, but in systems biology alternative kinetics, e.g. michaelis-menten kinetics for enzymatic reactions and hill functions for describing cooperativity, are also frequently applied  <cit> . that is why we allow for arbitrary reaction rates using mathematical expressions. any kind of mathematical expression is allowed that evaluates to a non-negative numerical value, see also  <cit> .

species identifier are used to refer to the amount of species in a given solution. we assign reactant a a species identifier a, i.e. aa, which evaluates to the amount of species a in the solution. assuming mass action kinetics, the rate of a first-order reaction a → b with rate constant k can then be correctly described as follows:

 aa →k.ab. 

the evaluation of its mapping to the solution  leads to two rule instantiations with different propensities:

 a→k.2banda→k.4b. 

like in the attributed π-calculus  <cit>  and react  <cit> , reaction constraints allow for more powerful control on the dynamics of a model.

for example, we can constrain the preceding rule to only fire when the amount of a exceeded a certain threshold value t:

 aa→ifa>tthenk.aelse0b. 

if the amount of a in a given solution does not exceed t, the if-then-else expression evaluates to a kinetic rate of  <dig>  which determines that the rule will not fire.

to enhance the readability of rules with such constraints, we use an extra notation. instead of a complex rate consisting of the expression if e then r else  <dig>  we write the conditional expression e below the arrow that is assigned the basic kinetic rate r:

 s→ers′≜s→if e then r else 0s′ 

the preceding example now looks as follows:

 aa→k.aa>tb. 

multi-level rule schemata
the features listed so far are not new. species with attributes and schematic rules are standard features that can be found in nearly every rule-based language in the field of systems biology, e.g.  <cit> . the requirement for modeling biological systems with rate kinetics different from those following the law of mass action seems to be also widely accepted nowadays. biocham  <cit> , lbs  <cit> , and react  <cit> , for example, support arbitrary reaction rates. also recent developments for the bionetgen language now allow to specify user-defined rate law functions, and moreover, modeling of conditional expressions to support the construction of logical sequences of control  <cit> . all together, they will play a role in supporting multi-level modeling.

however, a truly salient feature of multi-level modeling are hierarchies. hierarchical structuring facilitates modeling of complex biological systems by defining them in terms of their components and the interactions that exist between them. hierarchies help to structure the knowledge about a given system  <cit> . in addition, they allow to describe multiple nested solutions similar to the multiple separated reaction compartments that can be found in biological systems, e.g. cells, organelles, and vesicles. 

to address the need for hierarchical model structures, we introduce the concept of nested species. that means species may not only be characterized by names and their attributes, but also by a potentially enclosed solution of further species. let us give an example where a, b, c, d, and e denote different names of species. solution s consists of two species a and b of which both contain solutions with further species on their own. species a consists of a sub-solution sa = ], i.e. a single atomic species c and a nested species of type d with an amount of two and a sub-solution sd = . equally to sd, the sub-solution enclosed by b consists also of species with name e, but here with an amount of three: sb = . the whole nested solution can be written as:

 s=ac+2de+b3e. 

to avoid confusion by too many brackets and to get a quick visual impression of the nesting, in the following we will use a graphical representation of nested nodes:  

please note that nested species may still have assigned attributes . in the textual syntax, attributes and the enclosed solution are embraced by different kinds of brackets, i.e. a denotes the existence of an attribute  <dig> for the above nested species a. the graphical syntax is straightforward:  

the ability to assign attributes to nested species allows to equip each hierarchical level with an own state that is not only determined by the enclosed species. such high-level states are of particular interest for multi-level modeling as they allow to describe dynamic behavior similar to observations performed at different levels of organization. the later example model will illustrate this in detail.

a nested hierarchical model structure opens the door for reducing model complexity not only by specifying rule schemata as described above, i.e. by specifying reactant species with variables instead of defined attribute values. the number of rules needed may be also reduced by applying rules to multiple solutions, so that reactants can be matched at different levels and within solutions enclosed by different species types . however, this has an important consequence for the semantics. when applying rules to solutions and calculating the propensity of a reaction, one needs to take the context of this application into account, which is given by the amount of species at higher levels . the propensity of the rule has to be adjusted according to the whole hierarchy above, as a reaction is more likely to happen the more solutions exist it could potentially take place in.

to let different levels of a hierarchical model interact with each other, a rule may involve nested reactants and/or products. such rules look pretty much the same as rules of flat models do. in principle, also the enumeration of such rules works similar. for example, the rule  

describes a reaction from a to a under the condition that a encloses at least one species c. please note, this rule may also match species where a contains further species in addition to the c , for instance like in the previous example. however, such a sub-solution gets lost when the rule fires, as the product species contains just exactly one c. the same holds true for a potential sub-solution of c; the reactant pattern matches every species where a c is part of a sub-solution of a, but it says nothing about a sub-solution of c. hence, if the reactant species c would contain further species, they would get lost as well.

to prevent this from happening, we would need to specify this explicitly, by binding the solution to the variable x, defining a guard for the reaction, i.e. c ∈ x, and inserting x into the product:

 aa→k.ac∈xa. 

as it is often the case that we want to preserve the rest of the solution, we provide a specific rule schema for this case where a variable binds to the entire rest of a solution  and can be used to reinsert this solution on the product side of the rule. the above rule can be specified now as:  

such bound solutions can be freely reused for defining the products, i.e. migration, copying, and merging of solutions are easy tasks. the problem of splitting is another matter, for which specific operations on solutions are needed, e.g. to split a solution equally into two new solutions. whereas ml-rules and its current simulator allow the use of arbitrary functions on attributes, the application of functions on solutions is not yet supported. however, an integration into ml-rules requires only slight adaptations of the syntax and semantics and is therefore planned for the near future.

later, we will provide a more detailed explanation of our multi-level approach based on a realistic biological system. with the help of this example, we will also motivate again the need for multi-level modeling and illustrate how to realize upward and downward causation.

implementation
the modeling and simulation environment for ml-rules has been realized within the modeling and simulation framework james ii  <cit> . figure 3a gives a very brief overview of the james ii framework, which consists of a core and a large set of different plug-ins. for ml-rules, a set of new plug-ins has been implemented: an editor that allows to create and edit ml-rules models supporting syntax highlighting  and a simulator which is based on the direct reaction method of gillespie  <cit>  and thus implements an exact stochastic simulation algorithm . in addition, plug-ins for model reading and writing and for observing the model have been realized . these are the typical plug-ins that have to be implemented if a new formalism shall be added to james ii. other plug-ins can simply be reused, e.g. for random number generation and event queues. also plug-ins for  optimization, validation, trace analysis, data storage, etc. can be reused to support the execution of entire simulation studies  <cit> .

below we provide a basic description of the simulation algorithm. please note that in james ii simulation algorithms are not designed as monolithic blocks. by using plug-ins, alternative sub-algorithms can be easily exploited and combined. it has been shown that the performance and suitability of algorithms depend to a large degree on the concrete model, that details  matter, and that a suitable configuration can significantly speed up simulation  <cit> . in combination with methods that help to automatically select and configure simulators on demand, this type of simulation design supports a high flexibility for executing multi-level models. therefore, the simulator is structured as follows.

require: s, rules

   for ru ∈ rules do

      rts ← matchreactants

      rcts ← rcts | createreactions

   end for

   for r ∈ rcts do

      rprop ← calcpropensity

   end for

   reaction ← ssa

   for reactant ∈ reaction do

      removereactant

   end for

   for product ∈ reaction do

      putproduct

   end for

matchreactants selects all matching reactants of the selected rule schema ru. the next step is to instantiate the rule schema ru and grouping equivalent rule instances by calculating the reactions rtcs. now the propensity is calculated for each reaction r. please note, as now the number of reactants  is part of the reaction, calculating the propensity is only dependent on r. also, all information needed is directly available for each product in r, such as bound attribute values or solutions that are used on the rule's product side. after that an ssa is invoked. we have so far integrated the direct reaction method of gillespie. the selected reaction is executed by removing reactants and adding products. 

the complexity of matchreactants for matching a reactant is on+mk where n denotes the number of species in the solution, m the number of species in one context and k the depth of nesting of the reactant. the complexity of createreactions is o where l is the number of reactants of a rule. some optimizations are employed, e.g. to restrict the search space for matching reactants. for example, when evaluating a rule a → b, all as whose attribute does not equal  <dig> will not be considered for matching the reactants of a rule to a solution. however, most of the simulation efforts still goes into calculating rts, i.e. matching the rules . therefore, current efforts are dedicated towards developing alternative approaches for matching, e.g. integrating special index methods. to avoid time-consuming instantiation of all possible reactions, an alternative kinetic monte carlo simulation approach  <cit>  based on individual particles rather than populations of identical species, might also be worth to explore for simulating ml-rules models.

with calcpropensity the propensity of each generated reaction is calculated using the specified expression and taking the context of the matched solution into account. this means that the propensity is adjusted according to the amount of possible contexts the matched solution is part of . based on java reflection, currently functions provided by java can be used within the expressions. the integration of a library of own functions as a plug-in will be realized in the future.

maintaining the consistency of populations when executing removereactant and putproduct is a crucial part during simulation and requires, given the nested species, special attention. this means whenever a species s is removed from a solution ssub from the overall solution s, the populations within s need to be updated accordingly. sometimes it might not be enough to just decrease the population value of s in ssub, because by removing s from ssub, ssub becomes a different species which means it needs to be split from the previous population it was attached to and needs to be merged with an already existing population of that species . this actually has to be carried on upwards the hierarchy until no splitting and merging is needed anymore. the following example shows splitting and merging. given a solution:

 s=2a2b+2a3b. 

removing one b from a, would first lead to a split of the population of a and result in the solution

 s=2a2b+a3b+a2b. 

where a has to be merged with the already existing population of 2a, so the correct solution will be

 s=3a2b+a3b. 

the current simulator proceeds basically as a discrete event simulator. therefore, only slight adaptations are required to support also events that are not distributed exponentially. this feature is important as many biological phenomena at higher levels are not necessarily exponentially distributed, as argued in  <cit> . also, as multi-level models operate often at different temporal scales, the calculation effort for simulating these models in a pure discrete event manner might easily become prohibitive. therefore, hybrid simulation approaches, e.g.  <cit> , shall be exploited in the future.

with additional file  <dig> we provide a prototypical demo software tool comprising a model editor, simulator, a rudimentary line chart visualization, and simulation data export. the following examples as well as additional example models can be loaded and demonstrate the concrete syntax of ml-rules. its source code will be made available under an open source licence as part of a following james ii release at http://www.jamesii.org.

example model
we would like to motivate and illustrate our multi-level approach with an abstract multicellular model of the fission yeast  cell division and mating type switching in dependence of an intracellular control circuit. this intracellular regulatory network of interacting proteins in turn depends on the size of the cell and specific pheromone molecules. to prepare for mating, fission yeast cells may secrete pheromones that cause an arrest of the division cycle of cells with opposite mating type. so, the different parts of the model at multiple levels are highly interconnected and influence each other in various ways . in addition, to investigate the relation between pheromone signaling and the location of cells, the model comprises also some simple spatial dynamics that cover pheromone diffusion and cell displacement from crowded areas.

the presented model illuminates the importance to consider different levels of organization for modeling certain phenomena in cell biology and shows the previously introduced concepts at work. particularly the extension of the model from a single cell to multiple cells illuminates the benefits of the presented rule-based multi-level approach.

as the model is not intended to be a contribution for fission yeast science, it may not be sound in each aspect and may not reflect the current level of knowledge about this system. also certain parameters are simply estimated. however, we payed attention to presenting a realistic case study that shows how a rule-based multi-level approach like ml-rules facilitates modeling of such systems.

cell division cycle
the eurkaryotic cell cycle consists of four distinct phases: g <dig>  s, g <dig>  and m. during the first three phases, a cell is increasing in size and its dna is replicated. at the end of the cycle, a cell enters the m phase  and finally divides into two daughter  cells. these major events of the cell division cycle are controled by certain proteins and the underlying regulation processes in fission yeast have been extensively studied  <cit> .

in our example model, the regulation at protein level is based on an early model by tyson  <cit> . this deterministic continuous model consists of two proteins, cyclin and cdc <dig>  that form a complex called maturation promoting factor  which in turn controls traversion through the cell cycle. today, there exist much more detailed models of this system than the relatively simple tyson model, e.g.  <cit> . however, the purpose here is not to provide the most accurate model of yeast cell cycle control but to show why multi-level modeling is important for studying certain aspects of cell division and how it can be realized. in this sense, the tyson model is well suited as it is simple but at the same time captures the essential dynamics.

most reactions of this model follow the law of mass action and we do not discuss each rule in detail here. instead, we would like to refer to the supplementary material where the whole model can be found . the interesting reactions from our point of view are the activation of mpf and the subsequent dissociation of this complex. activation of inactive mpf, i.e. the dephosphorylation of its cdc <dig> subunit, is assumed to be an autocatalytic process:  

the higher the amount of activated mpf , the higher is the activation rate; dtot is a model parameter that denotes the total amount of cdc <dig> 

tyson identified a region for two parameters  where regular cycle oscillations with bursts of the amount of the inactive and activated mpf complex can be observed. although comprising fluctuations due to the stochastic processes, the intracellular reactions of our example model show similar oscillatory behavior . the period of roughly  <dig> minutes between two peaks is much shorter than the mean mass-doubling time of wild type fission yeast of  <dig> minutes  <cit> . to achieve a longer oscillation period, with increasing cell size, tyson assumes a dilution of an enzyme that catalyses the breakage of mpf into cdc <dig> and cyclin-p. therefore, the orginal model adjusts the rate constant during the cycle so that it is proportional to exp, where t is the time and td the doubling time of cell size. in comparison to the amount of intracellular proteins, the size  of a cell is a good example for denoting high-level information at cellular level. hence, implicitly downward causation and the multi-levelness of the system are taken into account by the tyson model.

we want to make these multiple levels and their interrelation explicit now. therefore, we introduce an attributed species name c that describes the cell and its current volume, i.e. its size. by doing so, we can adjust the rate of mpf dissociation inside the cell dynamically and individually for different cell instances:  

please note, unlike cyclin , we do not distinguish between phosphorylated and unphosphorylated cdc <dig> . this is a simplification in accordance with the original model, as the phosphorylation and dephosphorylation reactions of cdc <dig> are very fast compared to the others and thus can be neglected. please further note, the constraint  ensures that ma will never be completely degraded, so that there is at least one molecule of activated mpf at any time. this assumption is needed as otherwise the above rule of mpf activation is not able to fire when the amount of ma is zero. alternatively, one could introduce an additional cell attribute that denotes the current amount of enclosed ma and serves as high-level information to describe the autocatalytic reaction:  

the only processes that are still missing for completing the cell cycle dynamics with varying rates of mpf dissociation, is the growth of a cell, i.e. its volume increase over time, and the abrupt reduction of the volume that mimics cell division. therefore, we discretize growth in volume to be increased by 1/td with a rate constant k <dig> =  <dig> per minute, where td is the mean doubling time:  

the cell volume here is only a relative value where  <dig> and  <dig> denote typical volumes at birth and division respectively. that is why the above rule for cell growth is constrained to only fire as long as the volume is below  <dig>  i.e. the double value of the typical volume at birth. consequently, cell division, i.e. halving of the cell's volume, happens after the volume exceeded or is equal to 2:  

please notice that it would be easy to increase the amount of cells here by putting two cells on the right-hand side of the rule. later we extend the model in this way. however, as the interplay between a high-level state and processes at lower level is subject of our interest here, we keep the cell number constant and just mimic cell division by halving the cell volume. at this stage, the model comprises the intracellular processes shown in  <cit>  and explicit downward causation where the state of a cell  influcences a process at lower level. however, as figure 5b depicts, although the mean oscillation period is longer than before and thus closer to observed cell cycle durations, now it is highly variable and still significantly shorter than the mass-doubling time  of  <dig> minutes. moreover, this leads to nonconformity of active mpa bursts and cell division times. hence, to get lifelike oscillatory behavior and to achieve better accordance between protein peaks and division time, we need to further extend the model. let us therefore take a look on how low-level states influence dynamics at the cell level, i.e. how intracellular dynamics trigger high-level events so that the cell traverses through the different cell cycle phases.

the accumulation of inactive mpf, i.e. a complex where both subunits cyclin and cdc <dig> are phosphorylated, denotes the initiation of dna synthesis, i.e. inactive mpf controls the transition from g <dig> to s phase. therefore, we first equip the cell c with an additional attribute for the current phase of the cell cycle to model such transitions. as dna replication  takes a rather constant time for each cell cycle and we are more interested in the control of the g <dig> and g <dig> checkpoints, we combine the s and g <dig> phases to a single phase s/g <dig>  we then define a rule for the g1-to-s/g <dig> transition that is constrained to only fire if the amount of mi exceeds a certain threshold value t7:  

similarly, the transition from g <dig> to m phase is guarded by a threshold t <dig> of the amount of active mpf:  

the last transition of the cell cycle changes the phase from m back to g <dig>  and in reality, at the same time the cell splits into two daughter cells. however, we are still interested in the interplay between high-level and low-level states only. thus, we keep the amount of cells constant but reduce the volume of the cell like we've already seen above. the division occurs after active mpf falls below a second threshold value t <dig> which is much lower than t8:  

in all three cases of phase transitions, the content of the cell remains the same as the only change governed by the rules is dedicated to the cell cycle phases. the rules describe typical examples of upward causation, i.e. low-level states  determine dynamics at higher levels . they also show the necessity for flexible reaction constraints to model inter-level causalities.

now that the model has defined states for the different cell cycle phases, we do not have to restrict the cell to grow in size until its volume has doubled. instead, we allow the cell to grow at any time but not during the m phase:  

simulation results of this multi-level model show that the mean period of oscillations is now in accordance with the mass-doubling time td . cell division may happen at volumes larger than  <dig> and consequently the cell cycle may take more time than td, but if so this has implications for the next cycle. due to the unusually large volume at birth, mpa activation occurs relatively fast and thus the following cycle tends to be a bit shorter than normal. in this way, upward and downward causation regulates both, the cell cycle duration and cell size homeostasis.

the results emphasize the role of multiple levels and their inter-relation in studying phenomena like cell division. therefore, ml-rules provides nesting of species and rates with arbitrary kinetics based on constraints. so far the model appears still to be manageable in other less expressive modeling approaches. however the next step, i.e. moving from a single cell model to multicellular dynamics, illuminates the importance to be able to express multiple levels and their inter-level causalities explicitly and flexibly.

cell division and mating type switching
the unicellular fission yeast may undergo sexual reproduction when environmental conditions are getting poor, e.g. when cells are starving. different mating types  exist enforcing fusion of cells of opposite types only  <cit> . the product of fusion is a diploid zygote which rapidly enters a sporulation process. later, when the environmental conditions improve, spores germinate to spawn haploid cells which then undergo normal asexual proliferation again. the mating type of proliferating cells switches sporadically when a cell divides. this phenomenon is regulated by rather complex mechanisms at gene level  <cit> . however, rather stable phenomenological patterns of switching can be observed  <cit> . one important characteristic is that cells do not only show one of the two different mating types p or m, but can be also categorized into cells that are able to switch their type and those that are not .

although comprising multiple levels, the example model so far describes the dynamics of a single cell only. in order to model a multicellular system, we extend the previous cell division rule  to produce two distinct cells. at the same time, instead of modeling detailed processes at genetic level, simple phenomenological alterations of the cell's mating type are assigned according to the regularities depicted in figure 6a. therefore, species c is equipped with two additional attributes:  

the above rule describes cell division of an unswitchable cell . the complementary schema for division of switchable cells looks pretty much the same and is therefore not shown here. the only differences affect the last attribute of the reactant  and the assignment for the mating type of the unswitchable product cell: the conditional expression if t = p then m else p is assigned which makes the rule valid for matching both mating types p and m. 

now that we have introduced multiple instances of cells , it becomes clear that modeling of such systems becomes only viable due to the ability to specify rule schemata. otherwise one would need to specify defined reaction rules for each potential species, i.e. for each combination of cellular attributes and intracellular protein amounts. this is highly impractical for smaller systems with a finite state space and impossible for systems like the presented one. it shows the importance of rule schemata for supporting multi-level modeling.

the above rule also illustrates the need for binding solutions to variables so that entire solutions can not only be preserved for the reactant species, but can be treated like any other variables and thus also be copied and placed into multiple product species. unlike the volume of the dividing cell and similar to the single cell division rule in the previous section, the cell's content will not be splitted and distributed among both daughter cells. the contained sub-solution will be entirely copied instead, as  the total amount of cdc <dig> protein, i.e. the sum of the amount of species d, mi, and ma, is assumed to be constant in each cell. however, by applying specific functions, it would be also possible to split a solution according certain constraints. an integration of such functionality into ml-rules is planned for the near future.

mating type switching ensures that - in the long run - both types are equally present in a population of cells. an initial population consisting of only one type of cells nicely shows distinct time points of the first appearance of cells that comprise other combinations of mating type and the ability to switch . also the calibration to equally distributed cell types after just a few division cycles can be observed.

pheromone secretion and response
besides the restriction to cells of opposite mating types, conjugation of fission yeast cells is also regulated by diffusible pheromone molecules  <cit> . when growing in a nitrogen-poor environment, cells are starving and begin to synthesize mating type specific pheromones that are secreted to the extracellular medium. the pheromone secreted by cells of mating type p is called p-factor and m-type cells produce the m-factor pheromone. fission yeast cells of different mating type are able to communicate with each other via pheromone molecules. sensing of pheromones released by the opposite type causes several regulation processes that prepare the cells for mating. one of the main effects is an arrest of the division cycle at the g <dig> phase  <cit> . we would like to extend our cell model by adding communication via pheromone molecules and the respective responses so that a g <dig> arrest can be observed.

at first, we add some simple rules for pheromone secretion and degradation . for instance, each cell of mating type m produces the m-factor pheromone fm:  

m-factor molecules may then influence dynamics of p-type cells in the same solution. conversely, cells of mating type p may communicate with m-type cells via p-factor molecules . in addition to the m-factor, cells of type m produce and release a p-factor-specific protease  which lowers the effect that p-type cells have on m cells  <cit> .

instead of modeling a detailed pheromone response signaling cascade including receptor binding, we would like to simply measure the amount of the respective molecules and take this information into account for changing the dynamics of the intracellular control circuit. as already mentioned, pheromones may cause a g <dig> arrest of the cell cycle. it has been shown that inhibition of the cyclin-cdc <dig> complex is crucial for this process  <cit> . therefore, we introduce a new species mr denoting a repressed mpf complex that prevents inactive mpf from being activated . the reaction rate of mpf repression is dependent on the amount of extracellular pheromone. the way to describe this is similar to the cell cycle transition rules, where intracellular protein amounts are taken into account in an upward causation manner. however, here we have a downward causation, as mpf resides at a lower level than the pheromones. also different from the previous examples, the inter-level causation here acts across the boundaries of a nested species, i.e. across the cell membrane, and not just between an attributed species and its enclosed solution:  

in fact the above rule includes two different downward causalities at the same time. the first one is the amount of extracellular pheromone, which is included in the rate factor h=k <dig> f3k113+f <dig> describing a hill type sigmoidal response curve for mpf repression. the second downward causation is a volume-dependence again. this reflects the observation that inhibition of mpf activity is partly lost due to increasing cell size  <cit> , which could, for instance, be a consequence from a dilution of involved  enzymes.

the single-cell simulation experiments given in figure  <dig> show how the added reaction rules influence the intracellular processes and by that have an effect on the dynamics at cell level, i.e. progression through the cell cycle phases. as pheromone secretion and mating takes place when nutrition is poor, the mass-doubling time td has been increased to  <dig> minutes. without pheromone, the cell cyle length then increases to roughly  <dig> minutes . similar dynamics can be observed with a low amount of extracellular pheromone . the amount of repressed mpf molecules is not enough to have a significant effect on mpf activation. this is different with a higher pheromone concentration. figure 7d indicates a strong suppression of inactive mpf by the repressed variant. with increasing cell size , repression gets partly lost, i.e. the cell adapts while it grows and completes the cell cycle finally after more than  <dig> minutes. please notice the dramatically increased duration of the g <dig> phase while s/g <dig> and m phase take only slightly more time than without pheromone sensing.

compared with exponential population growth unaffected by any pheromones, multicellular simulations with interacting cells show significantly reduced cell numbers, i.e. the mean cell cycle duration is increased . with increasing pheromone concentrations, one can also observe larger fractions of cells being in the g <dig> phase of their cell cycle. after  <dig> minutes nearly half the population of cells is arrested in this phase. at this time point, the amount of pheromones is between  <dig>  and  <dig>  molecules. however, although the p-factor-specific protease sxa <dig> lowers the amount of p-factor pheromone and thus lowers the effects on m cells, mating type switching ensures equal distributions of cells with mating types p and m.

spatial layer
the model so far assumes all cells as well as each secreted pheromone molecule residing in the same solution, i.e. there is no distinction between different locations. this assumption might be appropriate in many cases. however, especially when it comes to modeling of multicellular systems comprising of communication either via direct cell-to-cell interactions or via diffusible molecules, capturing different species locations might be important  <cit> . therefore, to investigate cell division and pheromone signaling in an inhomogeneous solution, we extend the model by some simple spatial dynamics covering pheromone diffusion and different locations of cells.

we adopt the idea of the next subvolume method  <cit>  to add space in a discretized manner. rules and reaction rates are responsible to describe reactions between molecules and their diffusion into another voxel in the spatial grid. a new attributed species g is introduced, which represents virtual reaction compartments within a two-dimensional grid. each voxel g may comprise a solution of cells and pheromone molecules with a homogeneous distribution like before, but species may migrate to adjacent voxels according to certain rules . 

the initial solution comprises xmax × ymax  species g, each with a unique combination of attribute values g with x ∈ { <dig> ..., xmax} and y ∈ { <dig> ..., ymax}. in this way, a defined relationship between each species g is specified to represent the spatial coordinates of a two-dimensional grid. diffusion of molecules can then be described by simply moving the species from one voxel to an adjacent one. a constraint comparing the coordinates of two species g guarantees that migration takes place between neighbored locations only. the rule schema for diffusion of p-factor pheromone in a von neumann neighborhood looks as follows:  

with nb = if ) ∨ ) then true else false.

like before, the model shall still include diffusion out of the system, i.e. for particle diffusion the grid shall be an open system. therefore, another rule checks whether a certain voxel is part of the boundary of the grid. if so, a pheromone molecule is simply removed with a certain probability:  

besides pheromone diffusion, we would like to also describe different locations of cells. however, instead of random diffusion we would like to model some sort of excluded volume effect to avoid that too many cells occupy a voxel. therefore, if a location gets crowded, cells may be pushed to an adjacent less crowded voxel. in principle, the rule for such a displacement from crowded areas looks quite similar to rules that describe diffusion. constraints guarantee moving under certain conditions only, e.g. to a neighboring voxel only, and the kinetic rate depends on the amount of species, i.e. cells. the main difference is that due to the fact that cells typically have different attributes and sub-solutions, we can not use a species identifier to get the total number of cells within a solution. therefore, an additional attribute of g is introduced that holds the current number of cells in each voxel:  

the number of cells is a high-level property of g and can be used to specify the probability with which a cell may move to an adjacent location. the rate of the above rule makes migrations to empty locations more likely than those to crowded ones. please notice the assignments of values  for updating the current cell number of each voxel when the rule fires. as the number of cells may also change due to cell division and death, the according rules have to be extended such that they have an extended context where the attribute of g can be explicitly manipulated. for example, the cell division rule for an unswitchable cell looks as follows:  

an elegant alternative to the above strategy would be the already discussed concept of applying functions to solutions, so that the amount of cells in a given solution can simply be counted. in any case, the examples show how spatial effects like diffusion and excluded volume can be modeled in an ad hoc way, although ml-rules has been developed without explicit notions of space. approaches which are aimed at spatial rule-based modeling explicitly deal with such problems and emphasize the need for describing spatial phenomena for larger entities  <cit> .

simulation of population growth within the described spatial setting reveals that the overall ratio between the different mating types remains nearly constant over time. however, local differences in the amount of p and m type cells can be observed .

related work
the aim of this paper has been to identify essential concepts for rule-based multi-level modeling, to present their realization in ml-rules, and to show their role based on a case study. ml-rules could built on ideas developed in a rule-based approach for multi-level modeling of ecological systems  <cit>  where attributes, components of specific types, and interfaces are assigned to individual entities. the approach combines hierarchical nesting and the description of constrained dynamics in terms of rule schemata. ml-rules shares also central features with the rule-based formalism react, which supports molecules with attribute values of any type and reaction constraints to flexibly define reaction rates  <cit> . being of arbitrary type, attributes can also encode solutions and thus hierarchically nested entities. however, react has no notion of nesting: rules cannot be applied to a solution nested within an entity. instead, rules can only be applied to an entity attributed with a specific solution, i.e. top-down. considering that nested hierarchies may be dynamically changed, e.g. in models describing vesicles that fuse with membranes, this limits the expressive power of react with respect to multi-level modeling. 

recently, oury and plotkin have presented a stochastic multi-level multiset rewriting language  <cit> , in which rules can be applied to nested species to support multi-level modeling in systems biology. however, downward and upward causation cannot easily be expressed, because attributes and corresponding constraints on reactions are not yet supported. however, this is announced among the next steps to do. 

as has been already discussed, ml-rules does not provide an explicit notion of linkage, e.g. to describe bonds within protein complexes. hierarchical graphs with multiple edge types offer a natural and explicit representation of such bindings within hierarchical model structures. in this context, a generalized graph isomorphism and labeling algorithm like hnauty  <cit>  may be of particular importance. although originally developed for the structured annotation of flat rule-based models, hierarchical graphs and the hnauty algorithm are promising techniques for the development of an efficient multi-level approach based on graph-rewriting rules.

spatial structuring of models shares general concepts with multi-level modeling as different levels are defined by a separation from each other in a broader sense. in systems biology, the most common representation of space is realized by simple compartmentalization, i.e. by separating different chemical solutions from each other and allowing for basic transport rules to change the location of molecules, see e.g. biocham  <cit>  and little b  <cit> . more sophisticated capabilities for membrane-mediated transport and interaction rules are supported by cbngl  <cit> , an extension of the original bionetgen language  <cit> . structures and rules in cbngl are tightly coupled with the concept of compartments and membranes, e.g. the language distinguishes between three-dimensional  and two-dimensional  compartments.

other approaches focus on supporting dynamic compartment structures. bioambients  <cit> , for example, which is based on the π-calculus  <cit> , supports wrapping of processes by so called ambients. both, processes and ambients, are allowed to enter or exit other ambients and two ambients are allowed to merge into a single one. similarly, the bioκ-calculus  <cit>  also allows to fuse multiple membranes resulting in a single compartment. it aims at combining rule-based modeling with dynamic membrane formalisms like the brane calculi  <cit>  and p systems  <cit> . however, although rooted in the rule-based domain, bioκ shows limited expressiveness for modeling biochemical systems compared to other rule-based languages, e.g. the κ-calculus  <cit> . another rule-based formalism with explicit means for dynamic nested model structures is the calculus of wrapped compartments  <cit> . none of these approaches equips compartments with a state and a behavior of their own; dynamics at the level of compartments are initiated by the enclosed processes or rules in a "bottom up" way.

bigraphs  <cit>  is different from the above formalisms as there is no distinction between structural and behavioral elements of a model and thus the approach pursued is rather similar to ml-rules. each node of a bigraph may be enclosed by another node and may contain further nodes itself. so, nesting is an inherent property of the bigraphical components. equipped with a stochastic semantics  <cit> , reactive bigraphs have been successfully applied for modeling cell biological systems. however, the state of a node is defined by its linkage to other nodes only. also the lack of constraints on reactions limits the modeling of inter-level causalities.

beyond ordinary compartment-like spatial approaches , diverse methods have been developed for modeling and simulation of more complex spatial phenomena. smoldyn, for example, supports simulation of spatial compartments with diffusing molecules, membrane interactions, and excluded volume effects  <cit> . the latter is also an important feature of ml-space, a modeling and simulation approach that supports hierarchical nesting and combines population-based reaction-diffusion systems with individual particles for representing different spatial resolutions  <cit> . meredys is another simulator that supports reaction-diffusion events taking place in multiple compartments. however, the main feature of meredys is that molecules and molecular complexes may have realistic shapes in two and three dimensions  <cit> .

multi-level models that comprise a wide range of spatial scales, e.g. from the molecular to tissue or even organ scale, often need to consider different spatial relationships at different levels. for example, while at the molecular level well-stirred compartments or heterogenously distributed reaction-diffusion systems are appropriate representations, modeling the dynamics at tissue level might need to take physical mechanics of interacting cells into account. the strong diversity in applied methods is one reason why such multi-scale models typically lack a unifying formal modeling language. instead, different model parts are described and interpreted differently. to integrate these different parts efficiently, either monolithic mixtures of model descriptions and simulators are programmed from scratch or specialized multi-scale software platforms are used that have been developed for certain applications, see e.g.  <cit> . 

mgs provides integration of explicit descriptions of space in a generic uniform setting  <cit> . the approach combines rule-based modeling with topological collections to specify which and how model entities may interact with each other. various topological collections define different local relationships of individual entities, e.g. ordinary multisets or delaunay triangulation. although mgs does not have an inherent notion of nesting, its underlying concepts allow to describe multi-level models in a versatile manner and across various spatial scales.

the need to describe systems at different levels has also been addressed by petri nets approaches, see e.g.  <cit> . for instance, hornets  is a formalism that allows to have petri nets as tokens of petri nets  <cit> . however, hornets are executed in equidistant time steps as they are aimed at modeling software systems, e.g. workflows, rather than biochemical systems.

CONCLUSIONS
rule-based languages are a suitable starting point for developing a concise and compact language for multi-level modeling of cell biological systems. therefore, a combination of concepts, part of which are already well established, can be exploited.

rule schemata help reducing the size of models and equally important, add the required flexibility to express dynamics at different levels in a general manner. nesting species, assigning attributes to these species, and constraining reactions according to attributes have been identified as further essential ingredients in supporting multi-level modeling. species are described by attributes and the species they contain. both of which might constrain rules  or be altered by them. thereby, the boundaries of levels might be crossed.

how dynamics at different levels can be described in a rule-based approach has been shown with a model of fission yeast to analyze the regulations between cell cycle control, cell division, mating type switching, and cell-cell communication via diffusible pheromone molecules.

the concepts have been realized in ml-rules which has been implemented in james ii. the use of a plug-in-based modeling and simulation framework has allowed a rapid prototyping of a suitable modeling and simulation environment for our experiments. however, the current simulator is a prototype and realizes a purely stochastic discrete event approach. although james ii offers a coarse grained parallel execution - e.g. to speed up multiple simulation runs - already the single run execution of a more complex ml-rules model, like the presented multicellular fission yeast model, takes a significant amount of time in the current implementation. this is due to the expressiveness of ml-rules which requires specific effort to keep calculation costs at bay. thus, the next steps with respect to implementation will be to look into exploiting different variants of the ssa algorithm, e.g. the optimized direct method, speeding up the matching of reactants, and exploring the potentials of an alternative monte carlo method as well as hybrid approaches. 

from the modeling point of view, the developed concepts shall be put to test in concrete applications that might be difficult to describe with currently available modeling approaches. for example, potential application areas for ml-rules are various systems where the relation between intracellular and intercellular dynamics play a role, e.g. quorum sensing, tumor growth, and plant root growth. the presented approach appears also suitable for modeling dynamic processes with multiple membrane bound compartments, like endocytosis, active vesicle transport along cytoskeletal filaments, and processes at the golgi apparatus.

authors' contributions
ideas and concepts were jointly discussed among all authors. the manuscript was also jointly written. cm identified central requirements for multi-level modeling in cell biological systems, developed the model, and executed the corresponding simulation study. sr implemented the model editor and simulator for ml-rules in james ii. all authors read and approved the final manuscript.

supplementary material
additional file 1
ml-rules demo program the zip file comprises a prototype tool of ml-rules including a model editor, the simulator, and a rudimentary line chart visualization of simulation trajectories. also a user manual and several example models are part of the tool package. to start the demo tool, please unzip the file and execute the run.jar file. java runtime environment  is required for execution.

click here for file

 additional file 2
example models the pdf file contains descriptions of the entire example models including initial solutions and parameter values that have been used for the simulation studies.

click here for file

 acknowledgements
this work has been supported by the deutsche forschungsgemeinschaft  as part of the project dier mosis  and the research training group diem osiris . we would like to thank mathias john for constructive comments during developing this paper.
