BACKGROUND
increasingly, molecular and systems biology is concerned with describing various types of subcellular networks. these include protein-protein interaction networks, metabolic networks, gene regulatory and signaling pathways, and genetic interaction networks. while some of these networks can be partly deciphered by high-throughput experimental methods, fully constructing any such network requires lengthy biochemical validation. therefore, the automatic prediction of edges from other available data, such as protein sequences, global network topology or gene expression profiles, is of importance, either to speed up the elucidation of important pathways or to complement high-throughput methods that are subject to high levels of noise  <cit> .

edges in a network can be inferred from relevant data in at least two complementary ways. for concreteness, consider a network of protein-protein interactions derived from some noisy, high-throughput technology. our confidence in the correctness of a particular edge a - b in this network increases if we observe, for example, that the two proteins a and b localize to the same cellular compartment or share similar evolutionary patterns  <cit> . generally, in this type of direct inference, two genes or proteins are predicted to interact if they bear some direct similarity to each other in the available data.

an alternative mode of inference, which we call indirect inference, relies upon similarities between pairs of genes or proteins. in the example above, our confidence in a - b increases if we find some other, high-confidence edge c - d such that the pair {a, b} resembles {c, d} in some meaningful fashion. note that in this model, the two connected proteins a and b might not be similar to one another. for example, if the goal is to detect edges in a regulatory network by using time series expression data, one would expect the time series of the regulated protein to be delayed in time compared to that of the regulatory protein. therefore, in this case, the learning phase would involve learning this feature from other pairs of regulatory/regulated proteins. the most common application of the indirect inference approach in the case of protein-protein interaction involves comparing the amino acid sequences of a and b versus c and d .

indirect inference amounts to a straightforward application of the machine learning paradigm to the problem of edge inference: each edge is an example, and the task is to learn to discriminate between "true" and "false" edges. not surprisingly, therefore, several machine learning algorithms have been applied to predict network edges from properties of protein pairs. for example, in the context of machine learning with support vector machines  and kernel methods, ben-hur and noble  <cit>  describe how to map an embedding of individual proteins onto an embedding of pairs of proteins. the mapping defines two pairs of proteins as similar to each other when each protein in a pair is similar to one corresponding protein in the other pair. in practice, the mapping is defined by deriving a kernel function on pairs of proteins from a kernel function on individual proteins, obtained by a tensorization of the initial feature space. we therefore call this pairwise kernel the tensor product pairwise kernel .

less attention has been paid to the use of machine learning approaches in the direct inference paradigm. two exceptions are the works of yamanishi et al.  <cit>  and vert et al.  <cit> , who derive supervised machine learning algorithms to optimize the measure of similarity that underlies the direct approach by learning from examples of interacting and non-interacting pairs. yamanishi et al. employ kernel canonical correlation analysis to embed the proteins into a feature space where distances are expected to correlate with the presence or absence of interactions between protein pairs. vert et al. highlight the similarity of this approach with the problem of distance metric learning  <cit> , while proposing an algorithm for that purpose.

both of these direct inference approaches, however, suffer from two important drawbacks. first, they are based on the optimization of a proxy function that is slightly different from the objective of the embedding, namely, finding a distance metric such that interacting/non-interacting pairs fall above/below some threshold. second, the methods of  <cit>  and  <cit>  are applicable only when the known part of the network used for training is the set of all edges among a subset of proteins in the network. in other words, in order to apply these methods, we must have a complete set of high-confidence edges for one set of proteins, from which we can infer edges in the rest of the network by assuming that edges not observed among the proteins in the training set are really absent. this setting is often unrealistic. in practice, our training data will generally consist of known positive and negative edges distributed throughout the target network. for example, in the case of protein-protein interactions, one typically derives positive examples of interactions from experimental assays, while negative examples can be sampled randomly among non-interacting pairs or generated from pairs of proteins known to be present in different cellular localization or expressed under different conditions; the methods of  <cit>  and  <cit>  can not be used in this setting.

in this paper we propose a convex formulation for supervised learning in the direct inference paradigm that overcomes both of the limitations mentioned above. this formulation stems from a particular formulation of the distance metric learning problem  <cit> . we show that a slight relaxation of this formulation bears surprising similarities with the supervised approach of  <cit> , in the sense that it amounts to defining a kernel between pairs of proteins from a kernel between individual proteins. we therefore call our method the metric learning pairwise kernel . an important property of this formulation as an svm is the possibility to learn from several data types simultaneously by combining kernels, which is of particular importance in various bioinformatics applications  <cit> .

several authors have proposed algorithms for distance metric learning with kernels related to our method. tsang and kwok  <cit>  propose a quadratic program  formulation of the problem, while weinberger et al.  <cit>  propose a semidefinite programming formulation in the context of distance metric learning for k-nearest-neighbour classifiers. in both cases, however, a specific algorithm must be implemented. to the contrary, the formulation we propose builds upon the well-known svm algorithm. any practitioner of svm can therefore easily use it with most public svm implementations, at the price of using a specific kernel. a second advantage of our svm formulation is that it can be easily combined with other svm formulation, such as the tppk approach, by forming linear combinations of different kernels.

we validate the mlpk approach on the task of reconstructing two yeast networks: the network of metabolic pathways and the co-complex network. in each case, the network is inferred from a variety of genomic and proteomic data, including protein amino acid sequences, gene expression levels over a large set of experiments, and protein subcellular localization. we show that the mlpk approach nearly always provides better prediction performance than the state-of-the-art tppk approach, and that the combination of the mlpk and tppk together almost always leads to the best results.

RESULTS
in this section we present a comparison of the previously described tppk kernel and the new mlpk kernel for the reconstruction of two biological networks: the metabolic network and the co-complex protein network. for each network, we cast the problem of network reconstruction as a binary classification problem, where the presence or absence of edges must be inferred from various types of data relevant to the problem. because the network contains relatively few edges compared to the total number of possible pairs, we created a balanced dataset by keeping all known edges as positive examples and randomly sampling an equal number of absent edges as negative examples. we compare the utilities of the tppk and mlpk kernels in this context by assessing the performance of an svm for edge prediction in a five-fold cross-validation experiment repeated three times  with different random folds. at each fold, the regularization parameter c of the svm is chosen among  <dig> values evenly log-spaced on the interval  <cit>  by minimizing the classification error estimated by five-fold cross-validation within the training set only. we also assess the performance of the pairwise kernel obtained by summing the tppk and mlpk kernels, which we call mlpk + ttpk below. the mlpk + tppk kernel is a simple way to combine the information contained in the mlpk and ttpk kernels. we also test two approaches to integrate the various genomic and proteomic data for edge prediction. first we construct an integrated kernel over genes, obtained by adding together all kernels defined by the various data, and deduce a tppk, mlpk or mlpk + ttpk pairwise kernel from this integrated kernel. this is a simple approach to data integration that has proved useful in previous work  <cit> . alternatively, we consider the pairwise kernels deduced from each individual genomic data, and add them together to form an integrated pairwise kernel.

as a baseline method for direct inference, for each kernel between genes we also assess the performance of a direct method that ranks the candidate edges by increasing distance between the two gene involved, where the distance between two genes is derived from the kernel value by the equation:

 dk=k+kâˆ’2k. 

metabolic network
most biochemical reactions in living organisms are catalyzed by particular proteins called enzymes, and occur sequentially to form metabolic pathways. for example, the degradation of glucose into pyruvate  involves a sequence of ten chemical reactions catalyzed by ten enzymes. the metabolic gene network is defined as an undirected graph with enzymes as vertices and with edges connecting pairs of enzymes that can catalyze successive chemical reactions. the reconstruction of metabolic pathways for various organisms is of critical importance, e.g., to find new ways to synthesize chemical compounds of interest. this problem motivated earlier work on supervised graph inference  <cit> . focusing on the budding yeast s. cerevisiae, we collected the metabolic network and genomic data used in  <cit> . the network was extracted from the kegg database and contains  <dig> vertices and  <dig> undirected edges.

in order to infer the network, various independent data about the proteins can be used. in this experiment, we use four relevant sources of data provided by  <cit> :  a set of  <dig> gene expression measurements obtained from dna microarrays;  the phylogenetic profiles of the genes, represented as 145-bit vectors indicating the presence or absence of each gene in  <dig> fully sequenced genomes;  the protein's localization in the cell determined experimentally  <cit> , represented as 23-bit vectors corresponding to  <dig> cellular compartments, and  yeast two-hybrid protein-protein interaction data  <cit> , represented as a network. for the first three data sets, a gaussian rbf kernel was used to represent the data as a kernel matrix. for the yeast two-hybrid network, we use a diffusion kernel  <cit> . all data were downloaded from 

the table lists, for each type of data, the accuracy and area under the roc curve obtained by each pairwise kernel. values in the tables are means and standard errors in a  <dig> Ã—  <dig> cv experiment. tppk is the tensor product pairwise kernel, and mlpk is the metric learning pairwise kernel. the column mlpk + ttpk shows the results when an svm is trained with the sum of the mlpk and tppk pairwise kernels. the row sum shows the results when the kernel between the genes is the sum of the expression, localization, phylogenetic profile and yeast two-hybrid kernels. the line pairwise sum shows the results obtained with the svm when the pairwise kernel used is the sum of pairwise kernels derived from the expression, localization, phylogenetic profile and yeast two-hybrid kernels, respectively. the direct column shows the result of the direct method, where gene pairs are ranked according to their distance as defined by each kernel to predict edges.

interestingly, we note that although connected pairs, i.e., pairs of enzymes acting successively in a pathway, are expected to have similar expression, phylogenetic profiles and localization , the indirect approach implemented by the tppk also gives good results for these data. this result implies that for these data, interacting pairs in the training set are often similar not only to each other but also to other interacting pairs in the training set. this observation is not surprising because, for example, if two proteins in the test set are co-localized in a particular organelle, then it is likely that interacting pairs of proteins co-localized in the same organelle are also present in the training set.

in the case of yeast two-hybrid data, on the other hand, the kernel between single proteins is defined as a diffusion kernel over the yeast two-hybrid graph. one can speculate that, in that case, similarity between pairs can be easily assessed and used by the mlpk to predict edges, but similarity between pairs as defined by the tppk kernel is less likely to be observed. in a sense, the dimensionality of the feature space of the diffusion kernels is much larger than that defined by the other kernels, and a protein is only close to its neighbors in the yeast two-hybrid graph.

regarding the integration of heterogeneous data sets, the pairwise kernels deduced from the sum of the individual kernels performs slightly better than the sum of the pairwise kernels deduced from individual kernels, which performs itself always better than the best of the pairwise kernels deduced from individual kernels. this confirms that the simple addition of kernels is a simple and powerful means to learn from heterogeneous data, and shows that in the case of pairwise kernels it seems better to first integrate heterogeneous data at the level of individual genes, before converting this integrated kernel into a pairwise kernel.

protein complex network
many proteins carry out their biological functions by acting together in multi-protein structures known as complexes. understanding protein function therefore requires identification of these complexes. in the co-complex network, nodes are proteins, and an edge between proteins a and b exists if a and b are members of the same protein complex. some high-throughput experimental methods, such as tandem affinity purification followed by mass spectrometry, explicitly identify these co-complex relationships, albeit in a noisy fashion. also, computational methods exist for inferring the co-complex network from individual data types or from multiple data types simultaneously  <cit> . we derived the co-complex data set based on an intersection of the manually curated mips complex catalogue  <cit>  and the bind complex data set  <cit> . the co-complex network contains  <dig> edges connecting  <dig> proteins. in addition, our data set contains  <dig> proteins with no co-complex relationships.

for this evaluation, we again use four different data sets that we consider relevant to the co-complex network. the first data set is the same localization data that we used above  <cit> . the second is derived from a chip-based version of the chromatin immunoprecipitation assay   <cit> . this assay provides evidence that a transcription factor binds to the upstream region of a given gene and is likely to regulate the expression of the given gene. our data set contains data for  <dig> transcription factors, and so yields a vector of length  <dig> for each protein. the final two data sets are derived from the amino acid sequences of the yeast proteins. for the first, we compared each yeast protein to every model in the pfam database of protein domain hmms  and recorded the e-value of the match. this comparison yields a vector of length  <dig> for each protein. finally, in a similar fashion, we compared each yeast protein to each protein in the swiss-prot database version  <dig>  using psi-blast  <cit> , yielding vectors of length  <dig> . each of the four data sets is represented using a scalar product kernel.

we used the same experimental procedure to compare the quality of edge predictors for the co-complex network using mlpk, tppk and their combination mlpk + tppk. the results, shown in table  <dig>  again show the value of the mlpk approach. using either performance metric , the mlpk approach performs better than the tppk approach on three out of four data sets. both methods strongly outperform the direct approach on all datasets.

the table lists, with the notation conventions explained in figure  <dig>  the results of the different methods on the reconstruction of the yeast co-complex networks.

most striking is the improvement for the chip-chip data set . this result is expected, because we know that proteins in the same complex must act in concert. as such, they are typically regulated by a common set of transcription factors.

in contrast, the mlpk approach does not perform better than tppk on the localization data set. this is, at first, suprising because two proteins must co-localize in order to participate in a common complex. this problem is thus an example of the direct inference case for which the mlpk is designed. however, the localization data is somewhat complex because  only approximately 70% of yeast proteins are assigned any localization at all, and  many proteins are assigned to multiple locations. as a result, among  <dig> positive edges in the training set, only  <dig>  of those protein pairs share exactly the same localization. furthermore,  <dig>  of the  <dig> negative edges used in training connect proteins with the same localization, primarily "unknown." these factors make direct inference using this data set difficult. the indirect method, by contrast, is apparently able to identify useful relationships, corresponding to specific localizations, that are enriched among the positive pairs relative to the negative pairs.

the fact that the mlpk and tppk capture complementary information is further demonstrated by the good performance of the combined mlpk + tppk approach, which is always better than both tppk and mlpk alone on all datasets. finally, the relevance of heterogeneous data integration by kernel summation is again demonstrated by the excellent results obtained in this case, with a slight advantage to the construction of a pairwise kernel over the integrated kernel for genes. the combination of mlpk + tppk over the integrated kernel results in the best performance.

CONCLUSIONS
we showed that a particular formulation of metric distance learning for graph inference can be formulated as a convex optimization problem and can be applied to any data set endowed with a positive definite kernel. a relaxation of this problem leads to the svm algorithm with the new mlpk kernel  between pairs. experiments on two biological networks confirm the value of this approach for the reconstruction of biological network from heterogeneous genomic and proteomic data.

the mlpk kernel is derived from a new formulation for distance metric learning. contrary to other formulations  <cit>  the resulting algorithm is a classical svm with a particular kernel. this formulation can therefore benefit from the popularity of svm in the computational biology community coupled with the availability of numerous public implementations of svm, to solve various problems of gene or protein network inference, or more generally pairwise relationships inference.

this formulation, however, is obtained at the price of relaxing a positive definiteness constraint for the sake of computational efficiency. while the experimental results validate the approach for practical gene network inference, the relaxed formulation can not be considered as a distance metric learning algorithm anymore, because the final metric matrix may have negative eigenvalues. this discrepancy between the motivation of our approach  and the final algorithm might complicate the interpretation of the results obtained, and will be subject to further investigations in the future.

beyond the direct and indirect approaches to graph inference mentioned in the introduction, there exist many alternative ways to infer networks, such as estimating conditional independence between vertices with bayesian networks  <cit> . an interesting property of methods based on supervised learning, such as the svm with the tppk and mlpk kernels, is the limited hypothesis made on the nature of the edges; the only hypothesis made is that there is information related to the presence or absence of edges in the data, and we let the learning algorithm model this information. the good accuracy obtained on two completely different networks  supports the general utility of this approach.

an interesting and important avenue for future research is the extension of these approaches to inference of directed graphs, e.g., regulatory networks. although the tppk and mlpk approaches are not adapted as such to this problem, variants involving for example kernels between ordered pairs could be studied.

