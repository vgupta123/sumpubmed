BACKGROUND
sequence statistics and unique substrings
word statistics is a traditional field of genome research. for word-length  <dig>  gc-content is a basic characteristic noted for each organism, and dinucleotide relative abundance profiles provide a reliable genomic signature  <cit> . dinucleotide content also distinguishes natural rna from random sequences  <cit> . trinucleotide  usage can reliably predict bacterial genes  <cit>  even in the presence of horizontal gene transfer. short palindromic words mark the characteristic sites of restriction enzymes in bacteria, and are therefore under represented in bacterial genomes  <cit> . a theory of over- as well as under-represented words has been laid out in  <cit> .

unique words are of particular interest. they provide sequence signatures, and microarray probes are often designed to match them. unique sequences from several genomes exhibiting a perfect match serve as reliable anchors in a multiple genome alignment  <cit> . recently, haubold et al.  <cit>  addressed the problem of efficiently computing shortest unique substrings  in a sequence, and provided a program called shustring for this purpose. using this program, they found that there is typically much more unique sequence in a genome than one would expect in a random sequence of the same length. while this observation by itself is not a surprise, given the repetitive nature of genomes, their approach and software allows to quantify this fact. furthermore, they found unique words to be significantly clustered in upstream regions of genes in human and mouse.

absent words
one may take such investigations farther and investigate words that do not occur in a genome. we suggest the term "unwords" for shortest words from the underlying alphabet that do not show up in a given sequence.

a first approach at the unwords problem was recently presented by hampikian and andersen  <cit> . their motivation was to "discover the constraints on natural dna and protein sequences". however, there is no evidence that such constraints exist. the absence of certain shortest words in a sequence data base, no matter what  size it has, is a mathematical necessity. speculations about negative selection against certain words have been refuted convincingly in  <cit> . there, it is shown that human unwords computed in  <cit>  can be explained by a mutational bias rather than negative selection.

still, there is twofold interest in the capability of efficiently computing unwords. statistically, it is interesting to see how length and number of unwords in a given genome deviates from expectation in random sequences.  practically, it is useful to know all the unwords when a genome or chromosome is to be extended by insertion of foreign dna. combinations of unwords can directly serve as tags that are guaranteed to be unique in the modified dna sequence.

software for unwords computation
unfortunately, the software presented in  <cit>  is slow and difficult to use: it reads genbank files rather than the more space efficient fasta format – and space matters a lot when dealing with genomes as large as human and mouse. it runs an internal conversion routine for over  <dig> minutes before starting unwords computation. the program generates an excessive number of files that may break your file systems. the c code is platform dependent and internal constants must be adapted. finally, the human unwords data computed with the program according to  <cit>  appear to be incomplete .

in order to make unwords computation possible in an efficient and reliable way, we present here a new algorithm and the software implementing it. efficient computation of unwords can be done from an index data structure such as a suffix tree or an  suffix array  <cit> . for example, in  <cit>  a suffix tree was used to compute unique substrings. in fact, our first unwords-program was an extension to the vmatch software  <cit> , which is based on enhanced suffix arrays. however, index data structures must be built in memory and are space-consuming. hence, we developed a direct approach that works more efficiently, because the overall sequence need not be kept in main memory. computing the unwords of the human genome, for example, takes about  <dig> minutes computation time on a linux pc with a single  <dig>  mhz cpu. the space requirement is  <dig>  megabytes.

in this article, we describe the new program unwords and report its application to the genomes of human, mouse, and other organisms, covering a genome size range from  <dig> down to  <dig> bp.

RESULTS
problem statement
let Σ be a finite alphabet of at least two letters. let |Σ| denote the cardinality of Σ. in genome analysis, Σ = {a, c, g, t} and |Σ| =  <dig>  a word is a sequence of letters from the alphabet. the terms "word" and "sequence" are equivalent, but are used here to indicate that a word is short and a sequence is long. |w| denotes the length of a word. if |w| = q, we speak of a q-word.

a word w over Σ is an unword of a sequence g if  it does not occur as a substring of g, and  all words over Σ shorter than w do occur in g. note that the unword length is uniquely defined for a given genome g.

the built-in minimality requirement in this definition is motivated by the fact that when w is an unword of length q in g, it has 2|Σ| one-letter extensions that also do not occur in g. therefore, asking for missing words longer than q would introduce a substantial proportion of redundant results.

similar to shortest unique substrings, the length of unwords is expected to increase with genome size. for fixed unword length, the number of unwords is expected to decrease while |g| increases. given g, let q be the unword length. it is easy to see that  <dig> ≤ q. to derive an upper bound on q, let w be a shortest unique substring in g and let ℓ = |w|. consider the following cases:

• if |w| = |g|, then for any a ∈ Σ, wa is an unword. hence q ≤ |wa| = ℓ +  <dig> 

• if |w| < |g| and w is not a suffix of g, then wa occurs in g for exactly one letter a. hence wb for any b ∈ Σ\{a} is an unword. this implies q ≤ |wb| = ℓ +  <dig> 

• if |w| < |g| and w is not a prefix of g, then aw occurs in g for exactly one letter a. hence bw for any b ∈ Σ\{a} is an unword. this implies q ≤ |wb| = ℓ +  <dig> 

thus we conclude  <dig> ≤ q ≤ ℓ +  <dig> 

the problem of unword analysis of a given sequence g  is to determine all unwords of g. the double-stranded nature of dna lets unwords always show up in complementary pairs, as each word present implies the presence of its watson-crick complement on the opposite strand. sometimes, however, an unword is self-complementary, and hence a "pair" represents only a single word. therefore, we report unword numbers rather than numbers of pairs .

computation of q-word statistics for small q is straightforward. efficient computation of unwords when q is unknown, however, requires more advanced techniques. our unword analysis algorithm is described in the section on computational methods.

unword statistics
the unword analysis problem is mathematically well defined. unwords must exist for any sequence. the interesting question is their size and number, compared to what one would expect given the alphabet size and the length of g.

let w be a word of length |w|, w  the i-th letter in w, g a genomic sequence and ℙ] the relative frequency of nucleotide w  in g. the probability for w to occur by chance  is then ℙ=∏i=1|w|ℙ]. the expectation value for  w in s is e ≈ ℙ·|g|.

calculating the probability for a word not to occur in a specific sequence is quite difficult and not much literature is available. following rahmann et al.  <cit> , a good approximation of the probability can be given using the expectation value. a poisson distribution is expected for word counts in a genomic sequence, which is ℙ=λkk!⋅e−λ with λ = e, and k the number of occurrences of the word w. now let k =  <dig>  then

  ℙ=1⋅e−λ 

the expected number n of q-words that do not occur is therefore

  n ≈ |Σ|qe-λ 

as an example, for a random sequence g of length  <dig> · <dig> and an unword w of length  <dig> and typical composition, we obtain a probability of  <dig> ·10- <dig> for w not occurring in g. still, the expected number of unwords of length  <dig> is  <dig> , while for length  <dig>  it is only  <dig> ·10- <dig>  for even shorter unwords, it is practically zero.

unwords algorithm
for convenience, we map each of the four letters of the dna-alphabet to an integer in the range  <dig> to  <dig> as follows: ā =  <dig>  c¯ =  <dig>  g¯ =  <dig>  t¯ =  <dig>  moreover, for any fixed value q, we use a standard method to map each possible q-word to a number in the range . that is, we define ϕq=∑i=1qw¯⋅4q−i for any q-word w. in other words, q-words are mapped to their rank in the corresponding lexicographic order. substrings in g containing at least one wildcard  are ignored. the integer value φq  serves as an index into a bit table Ωq such that for all sequences w of length q we have: Ωq  =  <dig> if and only if w occurs as a substring in the genome g. let |Ωq| denote the number of 1-entries in Ωq.

initially we set all bits in Ωq to  <dig>  this requires o time, where w is the computer word size. then we sweep a window of width q over g from left to right. for the first window g  we determine the integer code φq  as defined above in o time. for each of the remaining n - q windows, say at start position i +  <dig>  we compute φq  in constant time from φq  according to the following equation:

  ϕq=−4q−1⋅g¯)⋅4+g¯ 

thus the computation of the n - q +  <dig> integer code requires o time. the multiplication and addition in can be implemented by fast bit-shift and bit-or operations. if j is the current integer code and Ωq  is  <dig>  then we set Ωq  to  <dig> and increment a counter of the number of 1-entries in Ωq. this can be done in constant time. note that once |Ωq| = 4q, we can stop scanning g. while the time requirement of this algorithm is o it uses o + 2q + 4q bits of space, as only q consecutive letters in g need to be stored in memory.

if |Ωq| = 4q, i.e. all 4q entries in Ωq are  <dig>  then we know that all possible q-words occur in g. hence there is no unword of length q in g. on the other hand, if after processing all q-words in g, |Ωq| < 4q, there are some unwords of length q. if additionally |Ωq-1| = 4q- <dig>  then we know that q is the smallest value such that unwords of length q exist. the unwords can easily be computed by determining all j such that Ωq  =  <dig>  given j, one determines the corresponding q-word w satisfying φq  = j in o time. thus the unwords are enumerated in o time where z is the number of unwords.

let q* be the smallest value such that there are unwords of length q*. consider the possible range of values for q for a given genome length n. let qmax = ⌈log <dig> ⌉. then 4qmax⁡=4⌈log⁡4⌉≥n+1>n≥n−qmax⁡+ <dig>  note that g contains n - qmax +  <dig> substrings of length qmax. hence g is too short to accommodate all possible qmax-words and therefore there are some unwords of length qmax. thus q* ≤ qmax, i.e. we can restrict the search for q* to the range .

there are basically two strategies to determine q*. the first strategy  starts with q =  <dig> and increments q until |Ωq| < 4q. then q* = q. the space requirement is o + 2q* + 4q* and the running time is

  o+∑q=1q∗o=o+o+o, 

where z is the number of unwords. note that we have n≥4q∗−1=4q∗+142≥4q∗+1ω under the realistic assumption that the machine word size ω is at least  <dig>  hence n dominates the last term in . thus the overall running time for the linear search is o).

the second strategy determines q* by a binary search in the range , as described in table  <dig>  the strategy is optimal in the sense that it tests a minimal number of possible values of q before it arrives at q*. unfortunately, a value q' determined in line  <dig> of table  <dig>  may or may not be modified later in the loop, which means that one has to store the corresponding table Ωq' or recompute it later. the running time of the binary search is o+log⁡2qmax⁡. its space requirement is o + 2qmax + 4qmax⁡.

testing
we used our first implementation  of an unwords algorithm to cross-validate the program presented here. applied to the human genome, both algorithms  produce the same set of unwords. this makes us sure that our set of  <dig> human unwords is indeed complete, in contrast to the  <dig> unwords reported in  <cit> .  we computed unwords for six eucaryotic genomes: homo sapiens, release ncbi <dig>  <cit> , mus musculus, release ncbim <dig>  <cit> , drosophila melanogaster, release  <dig>   <cit> , caenorhabditis elegans, release ws <dig>  <cit> , neurospora crassa  <cit>  and saccharomyces cerevisiae, release sgd <dig>   <cit> , including nonchromosomal sequences which could not be assigned to a chromosome. additionally, unwords for two bacterial genomes were calculated: staphylococcus aureus subsp. aureus strain mssa <dig>  refseq number nc_ <dig> and mycoplasma genitalium, refseq number nc_ <dig>  as well as for two archaea genomes:

thermococcus kodakarensis, release kod <dig>  <cit>  and methanocaldococcus jannaschii, release dsm  <dig>  <cit> . table  <dig> gives a summary of genome sizes and unword lengths and numbers. in table  <dig>  we show the unwords computed from the human genome. we also indicate the number of occurrences expected for each unword – if the genome was a random sequence, which of course is not the case. deviation of gc content in unwords is summarized in table  <dig>  unwords for the other genomes are given in tables  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig> 

CONCLUSIONS
genomic unwords may not have a functional meaning, but they do have relevance in practice and in theory. when planning experiments such as large scale mutagenesis  <cit> , a high number of markers is to be included in the inserted dna. such markers should be disjoint from each other and from the original genome. given   <dig> unwords of length  <dig>  we can directly compose  <dig>  markers of length  <dig> which have a guaranteed hamming distance from the genome of at least  <dig>  from this supply of candidates, markers can be selected according to other criteria such as melting temperature.

unwords analysis is fast enough to be applied to the large mammalian genomes. and even to larger data sets resulting from ultra-fast sequencing projects. the fact that the genome sequence need not be kept in main memory makes the program applicable to even larger data volumes in pan- or meta-genome projects. for demonstration, we have applied our program to a recent version of the nt-database . it requires  <dig> minutes and  <dig> mb of main memory to compute all  <dig>  unwords of length  <dig>  a further interesting application would be for genomic fragment data. in meta-genome projects based on ultrafast sequencing technology, unwords analysis may prove useful in monitoring coverage.

unwords, by definition, always have a fixed length  in a given genome. longer absent words may also be of interest. they are easily determined with our program: adding all unwords as additional sequences to the genome and re-running the program, it will produce all absent words of length k +  <dig>  since they are the unwords of the extended genome.

no evidence has been collected for selection against specific words in a genome-wide fashion. naturally, unwords tend to have atypical cg content in the at-rich genomes we studied . cpg methylation and subsequent mutation favors unwords containing cg dinucleotides, and leads to an overabundance of their mutated variants  <cit> . these observations suggest that length and number of unwords, and in particular their deviation from expectation in random sequences, are statistical footprints of the process of real genome evolution. mathematical models or reconstructions of genome evolution should be tested whether they produce a similar footprint.

the program unwords is available from the bielefeld university bioinformatics server  <cit> . while online use is restricted to sequence uploads of at most  <dig> mb, the unwords source code is available at  <cit> , which has no such restriction.

authors' contributions
rg designed and guided the study. sk provided two implementations of unword computation, one as an extension to vmatch, and the unwords program described here. jh ran the unword computations as well as all the additional analyses. all authors contributed to writing the article.

