BACKGROUND
the recent completion of genomes from organisms of vastly differing complexity has highlighted a key aspect: gene number does not directly correlate with organismal complexity. while drosophila melanogaster was predicted to have just over  <dig>  genes  <cit> , the current estimate for the human genome at  <dig>  to  <dig>  genes is barely double that  <cit> . to account for this apparent discrepancy, it has been postulated that post-transcriptional modifications may play a large role in the generation of complexity from the limited complement of genes available in a given genome  <cit> .

of the many post-transcriptional modifications known, rna editing is perhaps the least well understood. rna editing encompasses a variety of processes that involve the modification, insertion or deletion of nucleotides in a mrna transcript. this can significantly alter the final protein product. proteins may be truncated by the introduction of premature stop codons, or the protein sequence and subsequently its structure are altered. in some organisms, up to 50% of the bases in a given transcript may be edited, resulting in minimal correspondence with the original genomic template  <cit> . little is known about the actual mechanisms that direct rna editing, but instances of rna editing appear across the eukaryotic spectrum  <cit> .

here we focus on a specific form of rna editing in which cytosine nucleotides are deaminated to form uridines . four instances of such editing are known in humans  <cit> , but the best data set for studying this phenomenon computationally is derived from plant mitochondrial transcriptomes  <cit> . the exact mechanism by which a given cytosine  is selected for rna editing in plant mitochondrial genomes is unknown at this time. however, multiple previous reports have established the need for certain cis factors upstream and downstream of the edited c  <cit> . in particular, the nucleotide immediately 5' of the edited c appears to be significant and is a pyrimidine in 93% of known instances  <cit> . other features of edited cs include several aspects of the downstream protein product. in the original publication reporting editing sites in arabidopsis thaliana, for example, giege and brennicke noted that the majority of edited cs were in the second codon position. in addition, they observed that the majority of edited cs lead to codons that encoded more hydrophobic amino acids than the pre-edited codon  <cit> .

we used these and other features to develop a method for identifying c → u editing sites in plant mitochondrial genomes using a machine learning approach known as a genetic algorithm . we have trained our method on a subset of the known editing sites from a. thaliana, and tested the method on the mitochondrial genomes of a. thaliana, brassica napus and oryza sativa. regal  has a mean accuracy of 87% across three genomes , with a mean specificity of 91%  and a mean sensitivity of 82% . regal significantly outperforms the other ab initio computational methods for the identification of c → u rna editing sites in plant mitochondria  <cit> . in addition, regal has a comparable sensitivity, and higher specificity and accuracy than an approach that utilizes sequence homology to predict these sites  <cit> . we present the regal approach and propose some applications of the underlying method to other problems in this realm.

problem statement
since the discovery of rna editing in a variety of organisms, the key challenge has been finding instances of rna editing in a given genome. most instances of rna editing have been uncovered by serendipity followed by painstaking experimental analysis  <cit> . given the large volume of genomic and other sequence data now available for a variety of organisms, a computational approach could provide a more rapid means for the identification of new c → u rna editing sites. ideally, we would seek a computational method with the ability to predict novel instances of rna editing given a genomic sequence and some knowledge of the features of edit sites specific for that organism. an optimal method would be one that can be easily extended to the wide spectrum of eukaryotes that exhibit c → u rna editing. we wished to develop such a method using the best data set available, and the plant mitochondrial genomes provide a platform for demonstrating the feasibility of our approach.

there are essentially two approaches to any predictive algorithm. the first is to draw on sequence homology to identify putative sites of editing. several computational approaches developed recently have utilized this approach. for example, insertion c editing in physarum polycephalum has been modeled by reverse translating closely related protein sequences and comparing to the relevant nucleotide sequence. any differences between the nucleotide sequence and the reverse translated protein sequence are then candidate regions for c insertion editing  <cit> . a similar approach, known as prep-mt, has been applied to the specific realm of c → u editing in the plant mitochondrial genomes  <cit> .

the advantage of these approaches is that it is relatively easy to identify the sites where editing must occur in order for a transcript to yield the known protein product. while such approaches can have high accuracy, they are contingent upon the availability of sequences that are highly conserved. furthermore, such approaches can only reliably identify rna editing sites in which an amino acid change is effected. however, a certain proportion of all rna editing appears to alter codons without necessarily altering the downstream translation product  <cit> . these silent edit sites cannot be reliably predicted by reverse translation of protein sequences.

an alternative to reverse translation of protein sequences is to use expressed sequence tags  and mrnas to identify putative edit sites. two recent approaches to identifying adenosine to inosine  substitution editing utilized these data to identify sites of a single nucleotide mismatch. these sites were then analyzed for evidence of rna editing using criteria such as secondary structure constraints and conservation across genomes  <cit> . again, the advantage of such an approach is that accuracy is likely to be relatively high. however, the limitation is that a large set of transcriptomic data must be available to reliably survey all possible edit sites in a genome.

in contrast, an ab initio approach attempts to predict edit sites based on the intrinsic properties of the sequences being analyzed. the primary advantage is that the need for highly conserved sequences does not constrain the set of problems that can be explored. ab initio methods can potentially identify edit sites even in newly identified genes and genomes, and it can identify both silent and amino acid altering edit sites with equal precision. the chief concern with ab initio methods is the risk of false positives, or the prediction of edit sites where none exist. however, with sufficient training data, this concern can usually be overcome.

the challenge of predicting edit sites ab initio is primarily one of classification. for the specific case of c → u editing, the question is: given a candidate genome, which cytosines are most likely to be edited? classification problems have essentially two kinds of solutions. linear approaches evaluate variables sequentially for their ability to accurately classify a given cytosine. a linear approach known as the classification tree was used in a previous effort to identify c → u editing in plant mitochondrial sequences  <cit> . another common linear approach, the hidden markov model , is often used in such cases to generate probabilistic predictions based on given features. such approaches have the advantage that each variable can be tested individually for its relevance to the classification problem. however, it is difficult to then combine these variables, or to assess the relative importance of one variable with respect to a similarly effective variable.

in contrast, non-linear approaches utilize combinatorial analysis to arrive at a solution to the problem at hand. we suspected that predicting c → u edit sites would be a combinatorial problem, so we chose a non-linear approach with good results. genetic algorithms  represent a class of function optimization techniques that are derived from observations on the genetics of natural selection. in a ga simulation, solutions to the problem at hand are represented as virtual 'organisms' whose 'genome' encodes a specific solution. performance of virtual organisms is ranked according to a fitness function, and data on the fitness of organisms in the population is used to select organisms for mutation, breeding and death. by applying genetic operators to organisms in a manner corresponding to their fitness, the ga will converge to an optimal or near optimal solution relatively quickly  <cit> . parallelism is implicit to the algorithm, and an important characteristic is the ability of genetic algorithms to search through very large sets of possible solutions  <cit> .

definitions
since the language of gas invokes common biological terms such as genomes and chromosomes, confusion is often inevitable when gas are applied to biological problems. our convention here is to indicate the ga entities by the use of the following font: organism.

the initial phase of a ga implementation involves creating a population of organisms, each with an unique genome. the genome or chromosome is a string of digits that encode the variables of interest for the problem at hand. in this instance, we used a binary encoding, so the alphabet of available characters is the set { <dig> }. each organism is evaluated for its fitness. the key to a successful ga simulation is the fitness function. in this case our fitness function is the ability of a given organism to accurately classify candidate edit sites as likely edited or unedited.

a ga simulation essentially mimics evolutionary processes by creating organisms that are evaluated for fitness using the fitness function. the evaluation occurs across hundreds of iterations, or generations. in each generation, the fittest organisms are retained and allowed to crossover. in essence, the genomes of these organisms are allowed to mix and match, much as they do in a real population. organisms that fail to meet the fitness threshold are killed off in each generation, ensuring that successful organisms dominate the "gene pool" in successive generations.

in addition, in each generation, organisms are selected for mutation. that is, a random change is introduced into the chromosome of a given organism. this step ensures that new organisms can be generated, avoiding stagnation caused by repeated recombination of a limited set of genomes. mutation generally occurs in a probabilistic manner, but the actual changes introduced are random events. that is, some organisms may be targeted for higher levels of mutation based on their overall fitness. the actual modifications to the genomes, however, are driven by a random generator. after many iterations of mutation, crossover and fitness evaluations, one or a few organisms remain, each capable of generating highly accurate solutions to the problem at hand. each of these organisms can now be deconstructed to better understand which variables and in what combination were required to yield the solutions of interest.

we used a genetic algorithm to identify the best solution, which we then encapsulated into the method we call regal. when we refer to the training phase of our analysis, we use the generic term ga because the genetic algorithm was applied to identify the best solution. we use the term regal to refer to the best solution identified and its use in predicting edit sites in the three mitochondrial genomes.

implementation
data
the c → u editing process has been observed in the mitochondria of many plant species  <cit> , but we focused on the genomic data from three: arabidopsis thaliana, brassica napus and oryza sativa  <cit> . sequence data were obtained from genbank:  for each of the three genomes respectively.

to map edit sites to coding regions, an ad hoc perl script utilizing modules from the bioperl project  <cit>  was used. after extracting annotated coding sequences, each edit site was assigned to a coding sequence based on the genomic coordinates for that edit site. while there is sometimes overlap between coding sequences in the plant genomes, this overlap never contained an edit site so that assignment of an editing site to a single coding sequence was unambiguous. there were several inconsistent annotations, but these were either corrected by hand to the best of our knowledge or excluded from the final data sets. the total set of all editing sites and their positions relative to the coding sequences makes up the set of true positives. we utilized  <dig> edit sites from a. thaliana,  <dig> from b. napus, and  <dig> from o. sativa. next, a set of true negatives was defined. unedited cytosines were randomly selected from the set of coding sequences so that the number of unedited and edited cytosines were equal . the full set of true positives and true negatives utilized for each genome are included .

training and testing regal
during training, a subset of the edited and unedited sites from a. thaliana were utilized. of the  <dig> sites , an equal number of edited and unedited sites were selected at random to create training and testing subsets. in each iteration of data preparation,  <dig> known edited sites and  <dig> known unedited sites were randomly selected for use as a testing subset. the remaining data were used to train the ga. the best organism from each simulation was stored in a mysql database.

once we had identified the most accurate organism from the set of possible organisms in the ga simulations, we applied this solution to the data from the a. thaliana testing data sets as well as the b. napus and o. sativa genomes. the genomes of b. napus and 4o. sativa were used solely for testing and independent validation. for each set of known edit sites in these genomes, we randomly selected an equivalent number of non-edited sites so that we could estimate measures of performance including accuracy, sensitivity and specificity.

designing the genetic algorithm
encoding variables for the ga
for our ga, we decided to incorporate six variables based on features that had been reported to be of importance in selecting candidate cytosines for editing. these are listed in figure  <dig>  as discussed, several of these features were noted in previous work on rna editing in this system  <cit> . we noted the codon position of the candidate c , included whether the edited codon was more hydrophobic than the unedited codon , and considered information on the nucleotide immediately upstream  and downstream  of the candidate c.

in addition, we included two new measures, based on what we term the editing transition probability. we wanted to capture the fact that some codons are edited more frequently than others , and that some amino acids are more frequently altered than others. to do so, we used transition probabilities, a standard measure of estimating the likelihood of finding a given codon or amino acid in a sequence  <cit> . in this case, we measured transition probabilities for both pre- and post-edited sequences. we derived these transition probabilities from the training data using maximum likelihood.

we chose a simple objective function that would assign a numeric value for each of the six variables based on the frequencies observed in the training data. in each iteration of cross-validation, these numeric values were calculated from the appropriate training data set and then applied to the testing data set. for example, in one training data set,  <dig> % of the a. thaliana edit sites fall in the second codon position. therefore, a putative edit site would receive a value of  <dig>  for the variable codon_position if the cytosine under consideration was in the second codon position .

defining the scoring function
definition of the objective functions for the variables was simple and intuitive, but a method for combining these values into an overall score was not. the problem of combining the objective functions was formulated in terms of a linear scoring function for scoring putative editing sites. it was denned as:

s = w <dig> s <dig> + w <dig> s <dig> + ...wn sn     

where s represents the score that would be assigned to a given cytosine based on its likelihood of being an edited site. sn corresponds to the nth objective function from one of the six variables and wn corresponds to an integer weight for that objective function. from this definition, the problem becomes one of function optimization: a need to define a set of weights that will most effectively separate the true positive and true negative groups. we utilized the ga to optimize this function.

evaluating the fitness function
definition of a fitness function for evaluating individual members of a population is perhaps the most crucial step in designing a genetic algorithm. in discriminating between edited and non-edited sites, the goal was to derive a fitness function that achieved maximal separation between the scores  for edited and non-edited groups of cytosines. we utilized the following fitness function:

f = mean)/mean)     

where f is the fitness value for a given organism, s would be the overall score for a given edited cytosine from equation  <dig>  and swould be the overall score for a given unedited cytosine. we take the mean score generated by an organism for all known edited cytosines in the training set and compare it to the mean score for all known unedited cytosines in the training set. the ratio of the mean scores provides a measure of the classification accuracy of a given organism. this fitness function rewards organisms that score edited sites with higher values than non-edited sites to encourage the development of effective classifiers.

overview of implementation
there are many approaches to implementing gas  <cit> . our implementation is similar to other gas applied to biological problems  <cit> .

 <dig>  genomes for all organisms in the population were initialized by setting the weights within equation  <dig> to random values. there were  <dig> organisms per simulation.

 <dig>  organisms were probabilistically selected for mutation and crossover in a manner proportional to their fitness. that is, highly successful organisms were selected for crossover and point mutations more often than less successful organisms.

 <dig>  organisms were selected for death in a manner inversely proportional to their fitness. in other words, organisms that were poor classifiers were rapidly eliminated from the general population.

 <dig>  new organisms initialized as in step  <dig> replaced any organisms killed in step  <dig> 

steps 2– <dig> were repeated until algorithm termination. we ran the ga for  <dig>  iterations in each simulation, and we had  <dig> simulations. the evolution of the ga over the first  <dig> generations in one of the simulations is shown in figure  <dig>  while some convergence was obtained as early as  <dig> generations, we noted additional improvement in later generations. we therefore allowed the ga to continue to evolve until no further improvement was noted.

the fundamental idea in a ga is that the fitness of an organism governs how likely its genetic material will be preserved in future generations. three evolutionary operators were used to manipulate the fitness of the organisms: mutation, crossover and death. mutation is used to introduce new genetic material into the simulation, so that the initial step of defining a population does not permanently limit the genetic material available. when using binary strings, a mutation operator simply selects a point along the chromosome at random. the value is flipped to zero if it were previously one, and to one if it were previously zero. in our implementation, one bit was flipped in each selected chromosome. all bits had an equal probability of being flipped.

we used single-point crossover, where a point is randomly selected along the chromosomes of two organisms. the chromosomes are split at this point, with the left hand portion of organism a's chromosome being swapped with the left hand portion of organism b's chromosome. by shuffling around bits of successful organisms within the population through crossover, this algorithm has a chance to try novel combinations of previously successful solutions.

death is simply the removal of an organism and its genome from the population. in our implementation, the death of an organism triggers the initialization of a new organism to take its place. thus, the population size remains stable throughout the simulation.

the fittest organisms from each generation and their associated fitness values were stored in a mysql database for later examination. code for the ga was implemented in the perl programming language. organisms were represented using a 96-bit binary genome, with  <dig> continuous binary numbers representing a single weight for a given variable.

developing regal
after training on the appropriate data, the best organism was selected and embodied as our rna editing site predictor regal. the organism embodied within regal had the form:

001111000100111111100011101100101011110111110110111001001000011001111101101111011100000011100100

when run on genomic sequence, the output from regal is a score for each cytosine considered. this score is derived from the scoring function . we determined a threshold score for classifying known edited and unedited sites by evaluating scores in the training data sets. this threshold score would allow us to classify a given cytosine as edited  or unedited . to identify the best threshold value, we evaluated the sensitivity and specificity of regal in the a. thaliana training data sets at a variety of threshold values. threshold values were tested in increments of  <dig>  peak sensitivity and specificity were achieved at a mean threshold score value of  <dig>  thus, in regal, any cytosine with a score of  <dig> or greater would be predicted to be an edited site. cytosines with scores less than  <dig> would be marked as unedited sites. regal was evaluated by cross-validation on the a. thaliana mitochondrial genome and on the entire set of known edited sites and an equivalent number of randomly selected unedited sites from the b. napus and o. sativa genomes.

RESULTS
implementing a genetic algorithm for rna editing
we wished to determine the relative importance of each of the six variables described in implementation for accurately identifying cytosines that are edited. in ga parlance, the importance of a variable is captured by its weight. the set of optimized weights from the best performing organism is shown in figure  <dig>  the larger the numerical value of the weight, the greater its importance for accurate classification. as can be seen, the highest weight was assigned to amino acid transition probability, indicating that rna editing yields a strong bias toward certain amino acids after editing compared with pre-edited transcripts. in addition, the position of the c with respect to the codon was also highly significant, as were the codon transition probability  and a preference for edits that yielded a more hydrophobic amino acid.

building regal: a predictor of rna editing sites
once we had optimized the weights for the variables based on the ga, we could incorporate them into a method for predicting which cytosines were most likely to be edited in a given sequence. we utilized the weights and the scoring function optimized by the ga to score each cytosine in our test data sets. to classify cytosines as likely edited or unedited, we next identified a threshold score of  <dig>  that maximized accuracy . we evaluated regal's performance on three mitochondrial genomes: a. thaliana, b. napus and o. sativa. in the case of a. thaliana, we used cross-validation as described in implementation. for the other two genomes, we utilized all the known edit sites and an equal number of randomly selected, known unedited sites. the results are summarized in tables  <dig>   <dig> and  <dig>  the overall accuracy is quite high, 87%. in particular, specificity, or the ability to eliminate non-edited sites, is consistently high at 91% for the three genomes. sensitivity, or the ability to identify known edited sites is somewhat lower, ranging from 81% in the b. napus and a. thaliana genomes to 85% in the o. sativa genome. the complete predictions for all three genomes are provided in the accompanying files .

to assess the effectiveness of regal as a classifier, we generated a receiver operating characteristics  curve. roc curves are used to measure the ability of a classifier to distinguish between true positives  and false positives . figure  <dig> shows the roc curve for regal. as can be seen, the classifier is quite good, keeping the false positive rate low even while ensuring that most true positives are correctly identified. these results suggest that regal is a robust predictor of c → u editing in mitochondrial genomic sequences.

comparing regal to other methods
the results of our approach compare favorably with the other ab initio method for rna editing prediction  <cit> . that study utilized both classification trees and random forests that analyzed codon position, the nucleotides in a 40-base pair window around each cytosine, and the folding energy of the transcribed mrna within the same window. performance measures for this study are shown in tables  <dig> and  <dig>  the overall accuracy of classification trees is 70% compared with 87% for regal. in addition, both sensitivity and specificity are much higher for regal . similarly, regal outperforms random forest trees, which have a reported accuracy of 84% compared to regal's 87%. the sensitivity of regal is much higher  as is specificity .

comparing the performance of regal to the sequence homology based approach, prep-mt, was more difficult. before we could compare our performance to prep-mt, we needed to address what we perceive to be a serious concern in the reported results for prep-mt. when evaluating the accuracy of prep-mt, the author compared the small set of known edited sites against the entire set of all known, unedited cytosines. accuracy calculated under these circumstances will yield uninformative, skewed values.  <cit> .

in order to explain our concerns, we must digress momentarily to discuss how performance measures are calculated. three measures are commonly used: sensitivity, specificity and accuracy. sensitivity, or the ability to identify known edited sites, is calculated as tp/ where tp are true positives and fn are false negatives. in this instance, true positives are known edited sites that are predicted to be edited sites. false negatives are known edited sites that are predicted to be unedited . specificity is usually calculated as tn/ where tn are true negatives and fp are false positives. in this case, true negatives are known unedited sites that are predicted to be unedited, and false positives are known unedited sites that are predicted to be edited. as might be expected, when a large number of true negatives are compared to a small number of true positives, even a very poor classifier will have a high accuracy. this is because proportionately fewer true negatives need to be identified correctly to achieve the same level of performance  <cit> . the author of prep-mt attempts to address this by using what he terms the "balanced accuracy," which he calculates as the mean of sensitivity and specificity. given the potential skew in specificity values, simply averaging the specificity with sensitivity does not address the problem. in these circumstances, the correct approach is to use the positive predictive value  rather than specificity as in calculating accuracy. ppv is calculated as tp/  <cit> .

for us to make a reasonable comparison of accuracy between prep-mt and regal, we had to re-calculate both the specificity and accuracy based on the raw numbers reported for prep-mt. to address the skew in specificity, we have calculated the ppvs for each of the three genomes shared in common between the prep-mt analysis and our approach. these values are shown in table  <dig>  based on the ppv values, we also re-calculated accuracy as the mean of sensitivity and ppv. we used the reported sensitivity values for all edit sites predicted by prep-mt, including silent edit sites.

overall, the performance of regal improves upon that of prep-mt. regal has a much higher specificity  and a comparable sensitivity . regal has a higher accuracy . the higher accuracy of regal is likely a result of its greater specificity in these data sets. in only one genome, b. napus, does regal have lower sensitivity than prep-mt. this leads to a slightly lower accuracy for regal  in this genome. however, we note that the b. napus genome presents some challenges for all computational methods, in part because of uncertain annotations for some coding sequences and edit sites  <cit> . therefore, the lower sensitivity may be a consequence of the data set rather than a direct reflection of regal's performance in this instance.

these results demonstrate the value of an ab initio method that utilizes a non-linear approach in prediction of c → u rna editing sites. our accuracy, sensitivity and specificity are higher than other ab initio approaches, and regal has comparable sensitivity and higher specificity than sequence homology based methods. moreover, there are certain general advantages to our approach which we outline in the following section.

discussion
the computational prediction of c → u rna editing sites has recently become feasible with the release of data sets such as the set of known editing sites in plant mitochondria  <cit> . at first glance, it might seem redundant to develop yet another method for the prediction of rna editing sites in plant mitochondria, given the previous efforts in this field. however, our objective was to demonstrate the feasibility of our approach to the general challenge of predicting c → u rna editing sites. in this context, the plant mitochondrial genome data represent the best data sets for the development and testing of computational methods.

here, we demonstrate the advantages of an ab initio approach that utilizes a non-linear, combinatorial method to identify known edit sites. regal, our predictive method derived from a genetic algorithm, is 87% accurate, with a sensitivity of 82% and a specificity of 91%. regal significantly outperforms the other ab initio approach, and it is more specific and more accurate than the sequence homology approach. this is especially striking since ab initio approaches generally tend to have lower specificity  than sequence homology based approaches. as a result, our work demonstrates not only the feasibility of the approach, but also improves upon existing methods for identifying edit sites in plant mitochondrial genomes.

there are two advantages to an ab initio approach compared with sequence homology approaches. as mentioned earlier, sequence homology approaches rely on strong conservation of sequences. when such conservation is weak or non-existent, these methods fail to reliably predict edit sites. for example, when we consider prep-mt predictions on a per gene basis, sensitivity  has an astonishing range: 25% to 95% depending on the gene considered  <cit> . such variability limits the applicability of the method in systems where prior knowledge of editing sites is limited. in contrast, regal has a consistently high sensitivity .

secondly, an ab initio approach can identify edit sites that effect changes in the downstream protein product as well as silent edits. silent edits in mrnas may not have much impact on the downstream protein and are therefore difficult to predict by a sequence conservation method  <cit> . it is possible that silent editing nevertheless plays a critical role. a related phenomenon, synonymous substitutions across mammalian lineages, has been shown to have a dramatic impact on mrna stability  <cit> . given this finding, it is possible that silent editing serves a similar purpose in some mrna transcripts. a method for identifying all rna editing sites in a genome regardless of impact on downstream protein products is therefore highly desirable. as our results suggest, regal is a reliable predictor of all known edit sites in a given genome.

from a computational perspective, reliably predicting rna editing sites seems to require more information than is present solely in the mrna sequence. this would explain the relatively weaker performance of the other ab initio method, which focused exclusively on mrna signals. sequence homology approaches ignore all evidence at the mrna sequence level, with the consequence that performance depends heavily on conservation across proteins. our approach combines information from both the mrna and downstream protein sequence, and we believe this contributes to its overall performance. three of the four variables with the greatest weights in our algorithm are essentially variant measures of the same phenomenon: the impact of editing on the downstream protein sequence . the second highest weighted variable, however, is codon position. this is derived from the mrna sequence. thus our method is a synthesis of the two previous approaches and appears to benefit from the inclusion of information from both the mrna and the protein sequence levels.

furthermore, the ga approach we have developed can be used to investigate the nature of rna editing in plant mitochondrial genomes. that is, we can consider the highest weighted variables and investigate these features in more detail. for example, our approach re-asserts the importance of codon position in selecting the edit site  <cit> . it is perhaps not surprising that the second codon position is preferentially edited over the other two positions. if the end result of rna editing is to alter amino acid residues to yield a functional protein from an otherwise incorrect or damaged transcript  <cit> , then editing the second codon position is most likely to yield this result. in the standard and mitochondrial genetic codes, the second codon position is nondegenerate for all codons . in other words, any change to the nucleotide in the second codon position will always yield a different amino acid. thus, the most efficient solution for altering the composition of the protein product would be to edit the second codon position.

in contrast to the earlier ab initio approach, however, we were able to obtain good performance without the use of mrna stability measures such as secondary structure. while cummings and myers reported significantly improved performance after incorporating free energy calculations into their algorithm  <cit> , there does not appear to be much experimental evidence for the role of mrna secondary structure in the selection of c → u edit sites  <cit> . given this experimental evidence, we decided to model edit sites without mrna structural features. the fact that regal outperforms the cummings and myers approach without secondary structure features is in keeping with the experimental evidence in this regard. nevertheless, it is possible that some aspect of mrna secondary structure is involved in edit site selection. this is certainly an area for further investigation, both at the computational and experimental levels.

one of the most intriguing findings of our analysis is that the hydrophobicity of the edited amino acid tends to be higher than its pre-edited counterpart. this finding was noted in the original work detailing edit sites in the mitochondria of a. thaliana  <cit> , but to our knowledge has not been investigated further. why might hydrophobic residues be critical to the functionality of a protein? while we cannot speculate on specifics, we do note a recent study which demonstrates that increasing the number of hydrophobic residues can at times improve the stability of a protein  <cit> . highly speculative as this is, it does inspire some intriguing questions with regard to the exact role of rna editing in cellular systems.

as a general approach, the use of gas to identify edit sites should be extensible to many other systems where c → u rna editing appears to play a role in gene expression. a primary constraint until recently has been identifying a sufficiently large data set of putative edit sites. such a data set would serve two important purposes. first, it would provide a basis for developing the set of features required to identify edit sites. second, sufficient data is required for adequate training and testing of an approach such as the one we describe here. the recent release of a comprehensive analysis of putative edit sites in the human transcriptome  <cit> , for example, includes a large enough data set to both identify a set of likely features and train and test a method such as ours. we would suggest that the use of ab initio, nonlinear approaches could bring significant power to bear on the challenge of identifying c → u rna editing sites in genomes across the eukaryotic spectrum.

CONCLUSIONS
regal is a robust classifier of c → u rna editing sites in plant mitochondrial genomes. our method is quite accurate  with high specificity  and sensitivity  across all three mitochondrial genomes tested. regal outperforms previous attempts at an ab initio approach and has comparable sensitivity and higher specificity than the sequence homology based approach. we believe regal's improved performance compared with previous efforts is a consequence of combining information from the mrna and protein sequence levels. we would suggest that regal can be extended to other systems given some knowledge of the features of editing sites and sufficient training and testing data.

availability and requirements
regal is a collection of perl scripts freely available under the gnu general public license . there are no restrictions on its use by non-academics. it has been tested on the unix platform but may be extensible to other operating systems. regal requires several perl modules and a mysql database to store successful organisms during ga training. the full set of module and other requirements are listed in the user guide included with the distribution. the home page for regal is available online  <cit> .

authors' contributions
jt designed and implemented the ga and developed the software required for regal. sg conceived of and guided the design of the ga and regal. both authors contributed to the writing of this manuscript.

supplementary material
additional file 1
parsed cds entries. the final set of edit sites extracted from each of the mitochondrial genomes are included in the format of modified genbank files. for each entry, we include the complete cds and note the locations of edit sites within the cds sequence.

click here for file

 additional file 2
objective function values obtained from a. thaliana. the set of values for each of the six variables utilized in the ga are reported here. these values are derived from the observed frequencies in the training data from a. thaliana.

click here for file

 additional file 3
objective scores and predictions for a. thaliana. the full set of known edit sites and known unedited sites used in one iteration of the cross-validation test data set from a. thaliana are included here. the values for each of the six variables, the overall score for each edit site and the regal prediction are listed.

click here for file

 additional file 4
objective scores and predictions for b. napus. similar to the previous file, this includes all the variable values and predictions for the set of known edited and unedited sites in the b. napus genome.

click here for file

 additional file 5
objective scores and predictions for o. sativa. the equivalent file containing the set of variable values and predictions for the set of known edited and unedited sites in the o. sativa genome.

click here for file

 acknowledgements
this work was supported in part by a small grant for summer salary support from the rochester institute of technology dean's summer fellowship program to sg. we thank s. sadasivan for valuable comments on the manuscript. we thank the authors of the relevant mitochondrial genome sequencing projects for making their data publicly available.

figures and tables
