BACKGROUND
given the massive amount of new research that has been published in the life sciences in recent years, the scientific community needs solutions that lead to the creation of self-readable document repositories, which could automatically classify and provide structural representation of the knowledge expressed 'implicitly'  in the scientific articles. achieving this goal would be an important step, that eventually could lead to improving current information access and retrieval methods, which are mostly based on keyword queries. the in-adequacy of currently available tools and approaches has been mentioned in the domain literature, e. g.  <cit> . establishing semantic relatedness between concepts or their textual representation is one of the key enabling components in automated knowledge extraction from texts, as many text processing applications need a numerical equivalent of how the concepts fit together. according to  <cit> , successfull applications of approximations of semantic relatedness include general domain tasks such as: word sense disambiguation  <cit> , text summarization  <cit>  and information retrieval  <cit> . according to  <cit> , applications of semantic similarity  and relatedness measures in life sciences include direct data analysis , semantic search  <cit> , redundancy detection in clinical records  <cit> , sense disambiguation  <cit> . applications of semantic similarity to compare gene products have been reviewed in  <cit> .

most existing state-of-the-art measures use some kind of pre-existing knowledge base in order to produce a numerical approximation of semantic relatedness between two concepts or their lexicalizations, as reflected in a relatively recent survey presented in  <cit> . this trend has also been reflected in a recent review presented in  <cit> . it can be argued that the notion of semantic relatedness is connected with such resources due to its concept-based nature  <cit> . however, as pointed out in  <cit> , corpus-based methods have been used with some success as approximations of semantic relatedness. to the best of our knowledge, all the state-of-the-art measures that are applied in life sciences make use of highly specialised knowledge-rich resources, which makes them barely suitable for scenarios in which the knowledge base does not exist, or is extremely large or subject to frequent changes. furthermore, their methodologies are not easy to repeat for even a slight change of settings, as reflecting each change in the knowledge resource would require substantial effort. our aim is to propose a method that is as general and flexible as possible, with respect to a chosen corpus, given that finding a document collection for a domain is normally a much easier task than creating a comprehensive knowledge base for this domain. as it is reasonable to assume that composing a document collection is relatively easy as long as the collection size remains small to moderate, the method should work with a corpus significantly smaller than the web-scale.

in this paper we present a method, which can be used as an approximation of semantic relatedness for life sciences in knowledge-poor settings. it is purely corpusbased, therefore it does not need any additional artifacts, apart from a domain oriented document collection. its distributional nature means that the costly pre-processing stage of the method can be executed offline, regardless of the predefined set of entities of interest, on a 'per-document' basis. this means that the setup of the method does not depend on the entities of interest, nor on their quantity, hence the entities can be unknown a priori. an atomic goal of the method is to pro-vide a numerical approximation of semantic relatedness for a pair of input queries . our method is based on an idea that contexts of related lexical representations of concepts will be similar , i.e. scientific articles on related concepts should contain similar vocabulary. for each input text we recover a set of best fit documents from the corpus and compose a term vector related to the given input. the term vector is aggregated through the extraction of rep-resentative terms from the best fit documents. the comparison of vectors results in a numerical approximation of semantic similarity between the respective textual representations. this idea is similar to those presented in  <cit>   and in  <cit> , only here the vectors are obtained for each document in the preprocessing and then aggregated at runtime for each lexicalization in the function of the most suitable documents. by doing this, our method is not dependent on a pre-existing knowledge base nor on the quantity of the entities of interest, thus making it more adaptable to different use cases, which may not have suitable dictionary/ontological resources. in a sense, we postulate a novel approach for the rough approximation of contexts for relatedness approximation, while existing methods focus more on the preprocessing that enables context extraction for a closed set of entities.

an important feature of the design is that the method can work with very large , flat  and dynamic  sets of entities, possibly unknown until runtime. this characteristic is especially important, given that modern application designs often depend on distributed data provided by third parties. also, many commonly used databases present only a specific perspective on the possible relationships between their entities, which does not necessarily correspond to the perspective of the intended usage. moreover, the relationships defined within the databases rarely provide enough structure for approximating relatedness of objects. the method presented here is unaffected by these limitations, and can be used in a dynamic environment for applications such as relatedness based query expansion, where a query for a specific entity is expanded to encompass the objects that are closely related to the entity of interest.

in the following section we present both the method itself, together with its key components, as well as the experimental settings used for its evaluation. in the third section the results of the experiments are presented and discussed. we additionally provide a comparative analysis of two diferrent approaches to document preprocessing. moreover, we compare the results achieved for two versions of a document corpus, which covers a wide range of life sciences domains and subdomains, while being manageable in terms of the corpus size. remarks on the usability of the method are also presented together with discussion points on corpus driven methods in general. in the last section we summarize the work presented here.

methods
overview
as indicated in the previous section, our method uses a document collection of a fairly general nature and moderately large size, with respect to the relative scope and size of the domain of interest. the size and scope of the corpus is discussed in more detail in the data section of this paper. as the method is expected to deal with free input or very large databases, in cases where per-instance preprocessing would have been too costly, the corpus is the only data used in the preprocessing stage. it was implemented as an apache lucene  <cit>  index. in the preprocessing stage each document included in the corpus is analyzed individually so as to extract its most important terms and/or phrases . the results of this analysis are stored as sparse vectors in a separate database, which is described in detail further on in this section. the database implementations can be based on any persistent key-value map. these two elements, the document corpus and the database of document vectors, are used at runtime to process requests for a given input, i.e. a pair of text labels. a general overview of the components and processing flow  is given in figure  <dig> 

as already mentioned, the method requires two key components for its online processing, namely the document corpus and the database of document vectors. those artifacts are also referred to as the document index  and the vector database . the runtime input consists of two texts, for which, the relatedness score is to be calculated. first, we establish a set of the most relevant documents for each of the input texts. second, we calculate a vector representation of the key-phrases associated with the respective document sets. once the vectors have been extracted, the relatedness score is calculated and returned, thus terminating the procedure. the processing performed for the relatedness calculation for each input pair of texts can be presented in a more structured way with the following breakdown:

step  <dig> step  <dig> is performed offline and globally, so it is also referred to as a preprocessing step; it takes the document corpus as input in order to create its vector-based representation - the vector database.

step  <dig> step  <dig> is the first online processing step; its goal is to return a set of n most adequate documents from the corpus for each of the user-provided inputs; for this purpose the typical information retrieval model is used, i.e. inputs are treated as queries.

step  <dig> during step  <dig> the sets of the most relevant documents retrieved in the previous step are substituted by sets of vector-based representation of those documents; as obtaining the vectors on the fly would be too costly, they are retrieved from the vector db created during the preprocessing step.

step  <dig> in step  <dig> the output from step  <dig>  i.e. two sets of vectors, is converted into a pair of vectors in an aggregation process; each of these vectors corresponds to one of the inputs.

step  <dig> in step  <dig> the vectors aggregated in step  <dig> are used to calculate the relatedness score between the input texts, which concludes the online processing for a pair of inputs.

the specific elements of the method outlined here are discussed later in this section.

preprocessing and key-phrase database
as stated, the preprocessing is done on a 'per-document' basis. the goal of the preprocessing step is to come up with a vector-based representation of each document from the original corpus. in this paper we evaluate two approaches for vector extraction:  plain tf-idf  with low-weight cutoffs performed for each vector;  extracting possibly important frequent key-phrases and producing a vector representation for frequent keyphrases only. in either approach the focus is on the very simple assumption that the most relevant scientific articles for related concepts should contain similar vocabulary or keywords in the same way that related wikipedia entries share common categories, links, key-words, etc. the latter observation served as the basis for approaches presented in publications such as  <cit>  and  <cit> .

for extracting candidate key-phrases from texts we have chosen a very simple t-gsp  <cit>  approach, principally because it is efficient and easy to configure. t-gsp  is a text mining algorithm, which uses a single pass sliding window to extract the most frequent terms and their collocations from within a scope of a single document. t-gsp leverages shallow natural language processing techniques, i.e. part-of-speech tagging, to consider only those frequent candidates that fulfill one of the predefined grammar conditions. in the simplest case, one might consider a one element grammar that accepts only nouns . in a slightly more complex case, a grammar that accepts noun collocations may apply . other grammars may accept  or  collocations, etc. as a result, t-gsp generates a table of all candidate key-phrases sorted by their occurence frequency. at this point, in order to substantially reduce the computation space for further processing, we apply trimming, so that we include only a portion of the most frequent potential key-phrases in the document vector representation. the cutoff point here is defined as in line  <dig> of the pseudocode example presented in figure  <dig>  the size of the portion is determined in function of phrase frequency as related to the sum of all phrase frequencies from a given document. key-phrases are stored and passed on in descending order by their frequencies. when the sum of the frequencies of the included phrases exceeds a threshold, the inclusion process continues until a less frequent key-phrase is encountered.

in the second part of the preprocessing procedure the key-phrases collected from each document are treated as a bag-of-words representation , which means that each document generates a key-phrase based bow. bow of a document is a set of its unique terms with their frequency counts . the bows can be perceived as representations of the original documents. each bow is then represented as a vector in a vector space model  of tf-idf weighted vectors. weights for individual terms are calculated as in formula  <dig>  this means that bows are processed as if they were documents in a typical vsm. they are tokenized  and in-document frequency is calculated for each meaningful token. the tf factor may be based either on the original document's frequency for the same token or on the frequency of the token inside the abbreviation. the idf factor is based on abbreviations vector space only. each term token has a position assigned to it within the vector space. vectors are stored as lists of position - value pairs  in the vector db , which is later used at runtime, together with the corpus index. for tf , where t denotes a term and d denotes a document, raw frequency is used. it can be obtained either from the bow itself or from the general document. the inverse document frequency component is calculated as follows:

  idf=log|d||d∈d:t∈d|+ <dig>  

where d denotes the document corpus, t denotes the term and d a document. those elements lead us to the formula for tf-idf :

  tfidf=tf×idf 

alternatively , vector representations of documents are produced directly through a traditional vsm approach with trimming applied individually for each vector at positions with lower statistical significance for the documents. in this approach tf-idf weights  are associated directly with the bow representation of the document itself. as well as in the case of t-gsp generated bows, here too are tokenization, normalization and stopwords elimination applied to the process, through the mechanism provided by the lucene standardanalyzer.

note that cutoffs are defined differently for the two variants of the vector extraction method. in the t-gsp version the threshold is defined in the function of total frequencies of all possible key-phrase candidates, whereas the second variant simply includes a percentage of the most significant  dimensions of each vector, leaving zeros in the positions not included.

runtime processing
as mentioned, runtime processing is executed for two terms/phrases being tested for relatedness. the procedure can be broken down into three steps:  establishing a set of the most relevant documents for each text,  aggregating vector representations of these documents into a vector for each input text,  calculating relatedness approximation based on a vector based metric. in this subsection we describe each of these steps in more detail. the first step, i.e. finding the most relevant documents for a given input, is resolved straightforwardly through standard mechanisms of the lucene index, through which the document corpus element from the overview provided in figure  <dig> can be queried. the input texts are parsed as queries to the index, using the least restrictive approach for the boolean retrieval . the results of the search are passed on as input for the second step. the number of the most relevant documents to be included in the output is a preset parameter, the implications of which are covered in more detail in the results section of this paper. aggregating a vector representation for a textual input is done by vector addition. at this point each of the input terms/phrases has an aggregated vector assigned to it to represent its approximated context. the issue of context approximation in the specific settings of scientific documents is discussed in more detail in the results and discussion section of this paper. as for the actual calculation of the numerical approximation of the semantic relatedness, we decided to use cosine similarity.

experiments
the method has been evaluated in a series of experiments, the settings of which are described in this section. in each of the experiments presented, the method was used to produce a relatedness score for each input pair of textual labels. the number of pairs per experiment varies from  <dig> to  <dig>  in order to evaluate the performance we have measured coverage. coverage can indicate how well the method adapts to different scenarios without any specific recalibrations. coverage can be defined for a space of single inputs:

  rs=1-|{v∈v:|v|=0}||s|, 

where s is a set of inputs, rs denotes coverage over s and v  denotes a set of vectors generated for inputs s. this notion seems quite informative, as it corresponds to the percentage of inputs from a given set, that generate non-zero vectors. however, in the literature the most common notion is one of coverage based on input pairs found in a given dataset:

  rp=1-|{∈v:|vi|=0v|vj|=0}||s|, 

where s is a set of input pairs, rp denotes coverage over s and v  denotes a set of vector pairs generated for inputs s.

in the case of direct evaluations, i.e. when comparing automatically obtained results with human judgement, the quality of the results has been reflected by measuring spearman's rank correlation coefficients, with average values assigned for tied ranks, as defined in formula 5:

  ρ=∑i <dig>  

where xi and yi are ranks obtained for raw scores xi and yi of variables x and y .

apart from the performance evaluation, the experiments were also used for testing different aspects of the method itself, i.e. its sensibility to parameters and corpus. as mentioned, the method depends on two input parameters, these being the candidate cutoff rate applied at the preprocessing stage and the number of relevant documents recovered for each input label. additionally, every corpus-based method depends heavily on the choice of corpus, therefore the performance on two different corpora has also been reflected to some extent in the course of the experimental evaluation . the following subsection presents all the data used in the experiments, both as benchmarks and as document repositories.

data
our method has been evaluated directly with the following datasets:  <dig> label pairs rated by medical residents for semantic similarity  and  <dig> pairs rated for relatedness   <cit> ,  <dig> label pairs ranked by medical coders  for relatedness, set of  <dig> pairs rated by coders  and physicians  for relatedness  <cit> . all the datasets used as references  <cit>  in the evaluation process are summarized in table  <dig>  table  <dig> which has been compiled according to the study presented in  <cit>  and results reported in  <cit> , presents reported reference results for the benchmarks. to the best of our knowledge, this data is henceforth accurate. nonetheless, and more importantly, it gives an idea as to how the state-of-the-art measures could perform across various reference standards.

it is worth noting, that methods and benchmarks can be focused on one of two distinct notions, i.e. semantic similarity and semantic relatedness. semantic similarity tells us how two entities are similar to each other, while relatedness is a broader term, associated with any kind of semantic relationship between the entities of interest. e.g. clostridium perfringens and gangrene should display a low similarity, as one is a bacteria and the other is a health condition. at the same time those two entities should be semantically related, because c. perfingens is a microbe that can produce the condition, therefore this pair should have a high relatedness score. the difference between the notions is important for understanding particular results, nonetheless it would require very specific features in a benchmark to have an important effect in the course of the evaluation. furthermore, the distinction between the two notions will often depend on a semantic perspective, and therefore might not be very clear to human annotators. in practice, the semantic relatedness approximation methods are often evaluated against similarity benchmarks and vice versa, which is partially reflected in tables  <dig> and  <dig>  we assume that taxonomy-based measures are all focused on similarity, as suggested in  <cit> , as they are aimed at capturing taxonomical relationships only.

for each of the datasets mentioned in table  <dig> the experiments were executed for both corpus versions  with different values of in-document cutoff rate . as for the document corpus, an open access subset of pubmedcentral  <cit> , containing  <dig> life sciences research articles, was chosen as the reference material. the corpus we have used was last updated in the spring of  <dig>  the currently available one is signifantly larger. for testing the robustness of the method with respect to the document corpus the method was set up with two versions of the corpus, full documents vs. abstracts-only. it is worth noting, that although we describe the corpus as 'moderately large' and 'fairly general', it actually contains almost half a million documents devoted to life sciences. our phrasing is closely related to the size and scope of the domain, which contains fields as diverse as computational biology, chemistry and plastic surgery. also, there is a massive number of life science publications, with more than  <dig> million article records in medline  <cit> . nonetheless, the size and nature of the corpus will depend on the application domain and specific use cases. our assumption is, that for the presented method to work, it should be enough to consider a moderately large and fairly large sample of the publications from a given domain.

additionally, the method has also been tested on a larger scale dataset, two experiments were performed: first, for pairwise comparisons of all possible of genes and disorders retrieved from orphanet dataset  <cit> ; second, for disorder-disorder pairs, with data from the same dataset. genes include all genes mentioned in the original dataset, while disorders are diseases believed to have a genetic background . the experiments involved  <dig> gene-disorder pairs and  <dig> disorder-disorder pairs, respectively . without additional human annotation, the quality of the method is not measurable in the orphanet experiment , so more focus was placed on showing specific interesting results, both positive and negative in terms of the correctness of the approximation. in other words, it is not possible to evaluate the actual results obtained from the orphanet experiments, although some interesting examples from these experiments  are also presented in the next section.

the pairs extracted from the orphanet dataset and used in our experiments can be found in the results files, included as supplementary material, at  <cit> .

RESULTS
the following section presents the results of the experimental evaluation of the method. the section is divided into three main parts: firstly, the results of direct evaluation are presented and discussed; then the orphanet experiment is examined. in the third part some general discussion points are presented, mainly those that are only loosely related to particular evaluation results. table  <dig> presents statistics of vector-representation databases obtained for different settings.

approximating human judgement
figures  <dig> -  <dig> show the pearson correlation coefficient of the results vector with average human answers in the function of number of relevant documents aggregated as vectors for each input. each figure corresponds to one of the benchmarks and each includes six plots: best t-gsp, best without t-gsp and average results; all three for each of the corpus versions . average and best values for different vector database settings are presented in table  <dig> 

the table presents both average and best results obtained for each combination of parameters. for best results, information about n value  is also included. parameter c is the trimming threshold, while f denotes 'full corpus' and a stands for 'abstracts only'. '-' denotes an aggregation  over all parameter values.

in the presented method, coverage depends on the corpus only, therefore its value is the same across the different databases for each of the respective datasets. the coverage values are summarized in table  <dig>  figure  <dig> shows the relationship between the results of our method and average human answers in the best-case scenario for the residents-r dataset. figure  <dig> shows the same relationship obtained for the best-case settings for the compact corpus .

the results obtained clearly show that, given the state-of-the-art results cited in table  <dig> the proposed method is capable of performing on a level comparable to other methods, outperforming them in  <dig> out of  <dig> of the reference datasets with some of the possible configurations , thus adding a new perspective to the evaluation presented in  <cit> . more importantly, the 'good' trimming threshold and document number configurations, given a corpus, seem to work for different reference datasets. there is a certain drop in quality of results with the abstracts-only corpus, more significant for the residents datasets. it can be partially explained by data insufficiency, as for the datasets in question it is also accompanied by a plunge in coverage reflected in table  <dig>  our choice was to model the inability to retrieve a vector representation of the input with a zero relatedness score. the interpretation of this choice is, that when a concept does not appear in the corpus, there is a good chance that it is unrelated to the concepts that do appear in the corpus. although not perfect, some assumptions have to be made in this 'null interpretation' issue. the one presented here, results in the scores of the method becoming even more bottom-loaded with the decrease of coverage, which is reflected in figures  <dig> and figure  <dig>  nonetheless, the results for the abstracts-only corpus can still be considered as fairly good, especially given the relative sizes of the respective vector dbs. one way of solving the coverage issue could be to use the compact corpus for the vector db construction and full corpus for retrieval of the most relevant documents, when both versions of the corpus are available, but time/resource constraints are important.

when it comes to the t-gsp vector extraction vs plain tf-idf vector extraction, one can see that plain tf-idf seems to work slightly better, at least without additional optimization of the t-gsp parameters, which is beyond the scope of the work presented here. nonetheless t-gsp extraction results in a method that still provides results comparable with those of the state-of-the-art methods, therefore it performs reasonably well in terms of noise reduction. its interesting property is that the documents can be processed independently up to the point at which the trimming is performed  and it does not use the statistics of the entire corpus until this moment. as a result, the idf part of tf-idf scheme is computed after the trimming has been done. all this makes the t-gsp variant potentially more appealing in terms of parallelism and memory efficiency.

data analysis
potential data analysis application of the method is presented through example experiments with the orphanet dataset, which involves relatedness calculations for pairs of terms/phrases related to orphaned and rare diseases. two experiments have been carried out, for disorder - gene  and disorder - disorder  relatedness. the same setup of the method has been used for both experiments: full article corpus, aggregation of  <dig> documents per input, preprocessing without t-gsp, with trimming threshold set at  <dig> . the method performed well regarding recall, as it managed to retrieve representation vectors for  <dig> % and  <dig> % of the inputs involved in the respective experiments. tables  <dig> and  <dig> present some of the results obtained in the course of the experiments. in each of the tables rows 1- <dig> present potentially relevant results, while rows 4- <dig> illustrate a visible flaw of the approach in the orphanet experiments. full results of the orphanet experiments can be accessed at  <cit> .

t
1
t
2
in the positive examples, the approach works as expected. the negative examples illustrate one of the differences between knowledge-based and distributional methods for approximating relatedness between concepts or their lexical representations. the method might display undesired behavior when input collocation of words share common tokens. obviously, this might occur in a 'true positive' situation , but sometimes inputs will produce a high score because they are tied by a common token of little significance. an example is presented in table  <dig> row  <dig>  the inputs share the word 'syndrome', while the other terms of both inputs fail to influence the retrieval of the most relevant documents, as they are most probably not present in the corpus. this problem can be dealt with by adding more elements to the method. solutions could include adding more restrictive boolean filtering at the point of document retrieval or using query-document weights to reduce the impact of low importance documents at the point of vector aggregation. both solutions were tried in the course of the direct evaluation, but in the case of the reference datasets they only resulted in a slight decrease in the quality of the results.

t
1
t
2
this issue, although it seems to be related to data sparseness, also points to a deficiency, characteristic of all lexical distributional proxies for semantic relatedness. one may notice, that the methods in this class are not able to cope with synonymy and polysemy, as the representations of concepts are assigned in the funtion of their lexicalizations, i.e. the input texts. although this is true, it is also worth noting that neither of the kb-based methods resolve this problem without additional information, i.e. it is not possible to correctly disambiguate an ambiguous textual input to a specific taxonomy node without contextualizing the input . the architecture of our method enables a seamless incorporation of additional information available at runtime, as it can be done through reformulating the queries in step  <dig> of the method . this strategy seems reasonable in knowledge poor settings as in many cases it could work with partial or incomplete knowledge. we assume that evaluating this approach is an interesting line for future research. on the other hand, when no additional information is available, polysemy can be inferred through context mining, as suggested, for example, in  <cit>  or more recently in  <cit> .

having said which, the output of the orphanet experiments does present value for the data analysis. depending on the actual needs of the final user, different heuristic strategies of results filtering can be employed. for example, rows 2- <dig> of table  <dig> and rows 1- <dig> of table  <dig> were extracted with a script that returns high scoring pairs with no common tokens. if the actual task was to create relatedness clusters for an application such as query expansion, there is a good chance that replacing the scores for the entities that share common tokens with a null /missing value would still produce good clustering results.

general remarks
the method presented here relies heavily on the idea that related concepts/phrases share common contexts. moreover, it was assumed that it would be enough to roughly approximate the contexts, by representing them with selection of the most important ones only. although this approach does display flaws, characteristic to distributional methods , some of them can be dealt with  by fine tuning the method for given usage scenarios. tuning a general method in many cases is still a lot more feasible than creating a comprehensive, domain-spanning knowledge base with an extensive lexical layer, which in many cases is either impossible or requires a substantial effort on the part of the community. thus, in knowledge-poor environments the corpus-based methods can produce reasonably good results, given an adequate document collection.

the experimental evaluation has shown that using research documents/abstracts for context approximation can lead to good evaluation results. one hypothesis, potentially to be pursued in future work, is that the good quality of the results is related to the properties of research articles and research corpora. a research article, although technically is processed as free-text, does actually have a fairly rigid structure and use of words is much more restrictive than in general domain texts. it is also worth pointing out that the open subset of pmc is an ever growing full article corpus, whose potential often seems to be overlooked.

while it is true that distributional measures are corpus dependent, this does not have to be seen as a flaw. this characteristic means that distributional measures are more likely to evolve with a domain of knowledge, as corpora follow the developement of a domain much more naturally than thesaurus-like resources. in fairly static domains this might be less important, but in the dynamic fields, such as genomics or metabolomics, where the panorama shifts quickly, the distributional methods will not only be more usable, but will also cater to different needs. for example, a measure coupled with an evolving corpus can be used to monitor changes in concept/word relatedness over time, something which is complicated to model with other approaches.

overall, our impression is that, even in the static cases, the corpus dependent methods are easier to use and adapt, unless there is an available knowledge base suitable for a specific application scenario. at the same time, the available life sciences databases are often insufficient and it is unrealistic to assume that there will be kb representations adequate for each specific case that involves semantic relatedness, whereas the research papers are published on an extremely wide variety of problems and subproblems. therefore, scientific texts contain knowledge, which is less dependent on a specific perspective of a given kb, whereas the structured sources, such as ontologies, often represent only a very specific vision of a domain, e.g. modeled through the taxonomic relationships. because of that, the distributional methods will be more likely to capture a wide variety of semantic relationships between the objects, regardless of the structured description of the domain. additionally, scientific texts in an up-to-date corpus also contain knowledge on newly minted entities, as opposed to the formalised domain descriptions, which tend to follow with a delay. whether or not free text is the best way of representing the knowledge acquired through research, constitutes a separate discussion point, raised for example in  <cit> . nonetheless, this is the current state of the academic publishing and it might not change in the immediate future. therefore, it is essential to provide the basic enabling techniques that work in knowledge-poor settings.

CONCLUSIONS
in this paper we have presented a corpus-based methodology for calculating an approximation for lexical semantic relatedness for use in the life sciences domain in knowledge poor settings. its quality and properties have been demonstrated through direct evaluation, i.e. tests with reference datasets that contain term/phrase pairs scored by human annotators. the method outperformed the state-of-the-art solutions in  <dig> out of  <dig> reference datasets. additionally, it has been used in an open experiment with label pairs extracted from the orphanet database. the results of the experiments have been included as additional file  <dig> with the larger files, related to the orphanet experiments, made available at  <cit> .

list of abbreviations used
bow - bag of words

kb - knowledge base

nlp - natural language processing

pmc - pubmed central

t-gsp - text general sequential pattern

tf-idf - term frequency - inverse document frequency

vsm - vector space model

competing interests
the authors declare that they have no competing interests.

authors' contributions
both authors contributed to design of the method and expriments. mr was responsible for the implementation, performing the experiments and writing of the manuscript. both authors read and approved the final manuscript.

supplementary material
additional file 1
results obtained for reference datasets. the file contains the raw results obtained for the  <dig> unique label pairs that appear within all  <dig> reference datasets. the results were obtained for the method based on an entire corpus  with the trimming threshold of  <dig> , with  <dig> documents aggregated per input. please note that the orphanet result files, which are too large for being included in the publishing process, can be accessed at  <cit> .

click here for file

 acknowledgements
work presented in this paper was partially supported by grants tin2011- <dig>  and p11-tic- <dig> and p12-tic- <dig> .

declarations
publication costs for this article were funded by grants tin2011- <dig>  and p11-tic- <dig> and p12-tic- <dig> .

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2014: semantic, social, mobile applications for bioinformatics and biomedical laboratories: selected works from the 13th international workshop on network tools and applications in biology . the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/15/s <dig> 
