BACKGROUND
since darwin’s the origin of species, the evolutionary history of life has been widely depicted as phylogenetic trees. however, the simplified tree-like evolutionary models are being challenged by the accumulating amount of evidence of lateral genetic transfer between lineages, particularly in prokaryotes . additionally, other reticulate evolutionary events also cause complications in constructing tree-like models, such as hybridization and introgression between species  <cit> , and recombination of various forms  <cit> . the recognized limitations of phylogenetic trees motivated the adoption of phylogenetic networks to model these reticulation events  <cit> . phylogenetic networks can be used to either visualize conflicting phylogenetic information or model reticulation events explicitly. the former are typically unrooted, whereas the latter are rooted, which is the focus of this study. in recent years, phylogenetic networks have been the subject of intensive theoretic studies . however, considerable challenges in reconstructing phylogenetic networks still exist  <cit> .

in a phylogenetic tree, the taxa below a node form a unique subset of the taxa, called its cluster. a phylogenetic tree is uniquely determined by the set of “nested" clusters in the tree .

a phylogenetic network is a generalization of a phylogenetic tree in which there are additional reticulation nodes, which are the nodes with an in-degree of at least two. since most gene families have tree-like evolutionary histories, the network model of the evolution of a set of genomes is often built and validated by checking its consistency with the available related gene trees and/or clusters  <cit> .

in a phylogenetic network, a non-reticulation node is called a tree node. each tree node represents a cluster and a set of soft clusters. similar to the case of phylogenetic tree, a node’s cluster consists of all taxa below it, whereas its soft clusters are the clusters represented by this node in the phylogenetic trees that are displayed in the network. here, a phylogenetic tree is said to be displayed in a phylogenetic network if it can be obtained by deleting all but one incoming edges from each reticulation node and then contracting all the nodes of degree two.

the tree containment problem  and the cluster containment problem  have arisen from reconstructions of phylogenetic networks  <cit> . the tcp asks whether a phylogenetic tree is displayed in a phylogenetic network. the ccp asks whether a cluster is a soft cluster of some tree node in a phylogenetic network. both the tcp and ccp are np-complete  <cit> , even for restricted networks  <cit> .

a polynomial-time algorithm for the ccp is given for reticulation-visible networks  <cit> . a network is reticulation-visible if, for each reticulation node, a leaf exists such that every path from the network root to the leaf contains this reticulation node. recently, a linear-time algorithm is presented for the ccp on this class of networks  <cit> . given that a large fraction of phylogenetic networks are not reticulation-visible  <cit> , however, it is necessary to develop an algorithm for the ccp for arbitrary networks for the following reason.

measuring the dissimilarity between phylogenetic networks is important for assessing a network reconstruction method. one of the metric functions that has been proposed for this purpose is the robinson–foulds  distance, which is a generalization of the same metric for phylogenetic trees. simply put, it is the half of the cardinality of the symmetric difference of the two sets of clusters respectively contained in the two networks  <cit> . it takes linear-time to compute the rf distance between phylogenetic networks  <cit> .

by replacing clusters with soft clusters, we obtain the soft robinson–foulds  distance  <cit> . since the ccp is np-complete, there is unlikely a polynomial-time algorithm for computing the srf distance. to the best knowledge of the authors, only a straightforward method has been implemented in the software dendroscope  <cit> . the method exhaustively searches the clusters that are in a phylogenetic tree displayed in one network but are not in any phylogenetic tree displayed in another.

recently, gunawan et al.  <cit>  developed a computer program for solving the tcp on arbitrary networks. although it has exponential-time complexity in the worst case, it runs fast enough to be used in practice.

here, we first develop an algorithm for the ccp by using the decomposition theorem in  <cit> . we then extend it into an algorithm for computing the srf distance. we implemented these two algorithms in c and tested them on empirical and simulated network datasets. as an application of the programs, we examined the differences of networks reconstructed for two datasets in the literature. we also conducted a preliminary study of the distributions of the rf and srf distances in the phylogenetic network space.

methods
we first introduce the basic concepts and notation, then recap the decomposition technique for arbitrary phylogenetic networks, and finally describe the algorithms for the ccp and the srf distance.

concepts and notation
let x be a set of taxa. a rooted phylogenetic network  over x is an acyclic digraph in which the leaves  are bijectively mapped to x. a taxon typically represents some extant organism or species. a network has a unique root .

there can be two types of internal nodes in a network: tree nodes, which include the root and nodes of in-degree one and out-degree of at least one, and reticulation nodes, which have out-degree one and in-degree of at least two. the tree nodes represent speciation events and the reticulation nodes represent reticulation events. we allow degree-two nodes in a network.

here, we use the following notation for a network n: 

t: the set of tree nodes in n.


l: the set of leaves in n.


r: the set of reticulation nodes in n.


v: the set of all nodes in n, namely t∪l∪r.


e: the set of edges in n.


ρ: the root of n.


n−e: the subnetwork ,e∖e) for a subset e⊆e.


n−s: the subnetwork ∖v,e
′), where e
′={∈e | {x,y}⊆v∖v} for a subnetwork s of n.




for u,v∈v, u is a parent of v and v is a child of u if ∈e. we use c to denote the unique child of r∈r. if there is a direct path from u to v, v is called a descendant of u.

we use n to denote the subnetwork below r∈v, which consists of all the descendants of r and the edges between them in n. for a leaf ℓ below r, we use n−n+ℓ to denote the subnetwork obtained by replacing n with ℓ so that ℓ becomes the child of r.

if each reticulation node in a network has exactly two parents, the network is bi-combining. a bi-combining network is binary if each tree node is of out-degree two. a phylogenetic tree is a binary network without reticulation nodes. if the unique child of each reticulation node in a network is a tree node or a leaf, this network is called reduced.

following gunawan et al.  <cit> , we allow a network to have dummy nodes  because such a network may be generated in a recursive step of our algorithms.

given the set of taxa x, a cluster is any proper subset of x . a cluster is trivial if it contains only one element.

in a phylogenetic tree t over x, each non-root node induces a unique set of taxa that consists of the labels of the leaves below the node, which is called the cluster of the node. a cluster is in t if it is the cluster of some node in t.

given a network n over x and a phylogenetic tree t over x, we say that t is displayed in n if t can be obtained from n by the following operations: removing all but one incoming edges for each reticulation node in n, removing nodes that are not in any path from ρ to a leaf ℓ∈x, and contracting degree-two nodes . to contract a degree-two node w which has two incident edges  and , we merge the two edges into one edge .

a cluster b⊂x is a soft cluster in n if there is a tree t displayed in n such that b is a cluster in t. a tree node in a network may represent multiple soft clusters, which could be obtained from different trees displayed in the network. we use s
c to denote the set of soft clusters in n.

given b⊂x and a network t on x, the ccp asks whether b is a soft cluster in n  <cit> , which is formulated as below:



cluster containment



instance: a phylogenetic network n over a set of taxa x and b⊂x.


question: is b∈s
c?




let n
 <dig> and n
 <dig> be two networks over the same set of taxa x. the srf distance between them is defined to be ∖s
c|+|s
cs
c|)/ <dig> denoted by d
srf.

it is worth noting that the srf distance is not a strict metric, since two distinct networks may represent the same set of soft clusters and hence the srf distance between them will be zero  <cit> . nevertheless, the srf distance provides a useful measure of network dissimilarity.

a decomposition theorem
the key to solving the ccp and computing the srf distance is the decomposition theorem, which was first proposed by gunawan et al.  <cit>  for reticulation-visible networks and used later for arbitrary networks in  <cit> .

the decomposition theorem says that an arbitrary network n can be decomposed into a set of connected tree components which are separated by reticulation nodes. specifically, there is a tree component c
r for each r∈r∪{ρ}, which is either {c} if r∈r and c∈r, or a subtree induced by all the tree nodes and leaves that are reachable from r. a tree component is trivial if it contains only one leaf or if it is empty .

a node is visible on a leaf ℓ if it lies on all the paths from ρ to ℓ. if a node r∈r∪{ρ} is visible on a leaf ℓ, its tree component c
r is visible on ℓ as well. given two tree components cr′ and cr′′, r
′ and cr′ are right below
cr″ if a parent of r
′ is in cr′′. a tree component is exposed if it contains only one leaf or if all the tree components right below it are trivial.

obviously, n contains at least one exposed non-trivial tree component. in addition, an exposed tree component c
r is visible if and only if c
r contains a leaf or if a reticulation node r
′ exists right below c
r such that all the parents of r
′ are in c
r.

these concepts are briefly illustrated in fig.  <dig>  see  <cit>  for more details of the decomposition theorem.
fig.  <dig> a network n and its tree components. there are nine tree components in n. five of these components are non-trivial: c
r, c
r <dig>  c
r <dig>  c
r <dig>  and c
r <dig>  where c
r6={r4}. c
r <dig> and r <dig> are right below c
r <dig>  c
r <dig>  and c
r. c
r is visible on all the leaves. c
r <dig> and c
r <dig> are visible, but neither of them is exposed. c
r <dig> is exposed but not visible




description of the algorithm
the ccp algorithm
with the aid of the generalized decomposition theorem, we extend the linear-time ccp algorithm for reticulation-visible networks in  <cit>  to arbitrary networks.

roughly speaking, our new ccp algorithm works as follows: 
to determine whether or not a cluster c is in a phylogenetic network n, the algorithm selects a non-trivial exposed component m of n. if m is visible, we either find the negative answer to the problem by working on m or we obtain an instance of the problem that is simpler than the input instance  in linear time proportional to the size of m. in the latter, we reduce the original instance of the ccp to a simpler instance.



if m is not visible, there is then a reticulation node which has a unique leaf child and does not have all parents in m. in this case, two phylogenetic networks 
n
1
 and 
n
2
 are derived from n, which contain fewer nodes than n. the algorithm is then called on both instances  and  recursively.





although this algorithm seems simple, it has significantly less time complexity when the input network is binary. in the rest of this section, we present a formal description of the algorithm.

let n be a network over x and b⊂x, respectively. we examine a non-trivial exposed tree component c
r of n.

the reticulation nodes below c
r are divided into inner-reticulation nodes for which the parents are all in c
r, and cross-reticulation nodes for which some parents are not in c
r. we use i
r and c
r to denote the sets of inner- and cross- reticulation nodes, respectively. for example, in fig.  <dig>  i
r=∅ and c
r={r <dig> r <dig> r8}.

we use l
r to denote the set of leaves on which c
r is visible: 
 lr={c|r′∈ir}∪l.  we use Ľr to denote the set of leaves below c
r which are in b and on which c
r is not visible: 
 Ľr={c|r′∈crs.t.c∈b)}. 


for example, in fig.  <dig>  l
r5=∅ and we can get Ľr5={leaf <dig> leaf2} when assuming b={leaf <dig> leaf <dig> leaf5}.

suppose that l
r is non-empty. c
r is then visible with respect to a leaf ℓ∈l
r. we first check whether b is a soft cluster in c
r. this can be solved by a linear-time algorithm  <cit> . if not, we then solve the ccp according to the relationship between l
r and b.

let b¯=x∖b. if l
r∩b≠∅ and lr∩b¯≠∅, b must be a soft cluster of a node in c
r if b is a soft cluster in n  <cit> .

if lr∩b¯=∅, b may be a soft cluster of ρ or a node in a larger subnetwork containing c
r. assuming that r
′∈c
r, we then define: 
 na=n−{∈e|∉b∧u∈v}−{∈e|∈b∧u∉v)}. 


the leaves below the root of c
r in n
a ]na)) are then lr∪Ľr. we denote l]na) as b^ for convenience.

since l
r⊆b and Ľr⊆b, b^⊆b. if b^=b, b is a soft cluster of ρ in n
a. otherwise, if b^⊂b, we set: 
  <dig> b′=∖b^,na′=n−na+ℓ. 


if l
r∩b=∅, b may be a soft cluster of a node in c
r if Ľr≠∅. otherwise, when b is not a soft cluster of a node in c
r and r
′∈c
r, we define: 
 nb=n−{∈e|∉b∧u∉v)}−{∈e|∈b∧u∈v)}.  we can then set: 
  <dig> nb′=n−ρnb+ℓ. 


with this notation, we can get theorem  <dig> for arbitrary networks, which is similar to a theorem proved for reticulation-visible networks in  <cit> . theorem  <dig> is proved in the additional file  <dig> 

theorem 1
assume that c
r is a non-trivial, exposed and visible tree component in a network n over the taxa set x, and that b⊂x. let l
r, b^, b
′, n
a′, and n
b′ be defined above. 

 if b^⊂b, b is a soft cluster in n if and only if b
′ is a soft cluster in n
a′.


 if b is not a soft cluster of a node in c
r and l
r∩b=∅, b is a soft cluster in n if and only if b is a soft cluster in n
b′.




suppose that c
r is not visible. if c
r≠{c}, there is at least one reticulation node r
′ right below c
r such that cr′ is trivial and at least one parent of r
′ is not in c
r. if c
r={c} and c=r′, then at least one parent of r
′ is not r. we can now define: 
  <dig> n′=n−{∈e|u∉cr}ifcr≠{c}n−{∈e|u≠r}ifcr={c} 


and 
  <dig> n′′=n−{∈e|u∈cr}ifcr≠{c}n−{∈e|u=r}.ifcr={c} 


clearly, b is a soft cluster in n if and only if b is a soft cluster in either n
′ or n
″.

in consideration of all the cases above, we have come up with an algorithm for solving the ccp on an arbitrary network, which is given in fig.  <dig> 
fig.  <dig> an algorithm for solving the ccp on an arbitrary network




the srf distance algorithm
we now use the ccp algorithm to compute the srf distance between two arbitrary networks on the same taxa set x.

for x, we define a k-cluster as a cluster having k taxa. we enumerate all the possible clusters over x by generating all the k-clusters of x for each k ranging from  <dig> to |x|− <dig>  we then call the ccp algorithm on each cluster to see whether it is a soft cluster in only one network.

the time complexity of this srf distance algorithm is o|
t), where t is the time complexity of the ccp algorithm.

the program for computing the srf distance in dendroscope first finds trees displayed in each network, then extracts clusters from these trees to get the soft clusters in each network, and finally traverses the two sets of soft clusters to compute their symmetric difference. if the networks are bi-combining, the time complexity for this method is o|∗2|r|+2q), where q is the number of the soft clusters in a network. we will compare this approach and our srf distance program in next section.

RESULTS
performance of the ccp program
in this subsection, we first analyze the time complexity of the ccp algorithm. we then report the performance of the ccp program on both simulated and empirical networks. the simulated networks were generated by using a network generator reported by zhang  <cit> .

theoretical analysis of the time complexity
according to the analysis in  <cit> , the runtime of step  <dig> of the ccp algorithm is o|), where e is the set of edges in the tree component c
r. thus the time complexity of the ccp algorithm is o|e|) for a general network n, where m is the number of times step  <dig> is executed. note that m should be an exponential function of |r| because of the np-completeness of the ccp. if n is a bi-combining reduced network, the time complexity of the ccp algorithm is ||e|)  <cit> .

we denote log <dig> as b and call it the effective reticulation number of the ccp algorithm for the network n and the cluster b  <cit> . we use b= maxb
b to represent the effective reticulation number of the ccp algorithm for the network n.

to the best of our knowledge, the only previously known algorithm for solving the ccp on an arbitrary network is the naive algorithm which considers all the trees displayed in a network and checks whether the input cluster is in one of them. the number of possible trees displayed in a network n can be as large as ∏r∈rdeg−, where d
e
g
− is the in-degree of r. this number equals 2|r| when n is bi-combining. it takes o|) time to check whether a cluster is in a tree t  <cit> . thus the effective reticulation number seems to be a good indicator of the efficiency of the ccp algorithm. if log <dig> is smaller than |r|, the ccp algorithm will be faster than the naive algorithm in theory.

performance on random networks
we examined the performance of the ccp program on random networks in term of the effective reticulation number. the tests were done on computers each with  <dig> gb ram and a  <dig>  ghz amd opteron 32-core cpu.

we tested the ccp program on random networks with  <dig> to  <dig> leaves and  <dig> to  <dig> reticulation nodes. given that the number of clusters over  <dig> leaves is huge, it was hard to conduct the evaluation on the whole space of clusters. we therefore generated random clusters for testing on networks with more than  <dig> leaves. according to the results, the effective reticulation number for each network–cluster pair was frequently smaller than half the number of reticulation nodes in the network.

here, we report the performance of the ccp program on five groups of networks with  <dig> leaves and all the possible  <dig>  clusters. each group contained  <dig> networks, and the networks in the k
th group had  <dig> reticulation nodes for each k from  <dig> to  <dig>  the wall clock time on  <dig>   network–cluster pairs was  <dig> minutes and  <dig> seconds, implying that on average, the program took about one centisecond for each network–cluster pair.
fig.  <dig> summary of the performance of the ccp program on five groups of random networks with  <dig> leaves. along the x-axis, the five groups were arranged from left to right in increasing order of the number of reticulation nodes. the  <dig> networks in each group were arranged roughly in increasing order of the smallest effective reticulation number. each stacked bar in a column represents the percentage of clusters that had the same effective reticulation number when the program ran them against the corresponding network




application to a network in the literature
we selected one of the largest networks in the literature to validate the performance of the ccp algorithm. this is a bi-combining network  from  <cit>  that has  <dig> leaves and  <dig> reticulation nodes. this network is an ancestral recombination graph reconstructed to study the phylogenetic relationships among the m <dig> double-stranded rna in the rhizoctonia species complex.

our test showed that all the clusters on the seven taxa appear as soft clusters in the network a. we calculated b for each cluster b on the seven taxa. the distribution of b is shown in table  <dig>  the effective reticulation number b is  <dig>  1/ <dig> of the number of reticulation nodes in a. this suggests that the ccp program is about thousands of times as fast as the naive method for this real network.


#cluster refers to the number of soft clusters with the same value of b




performance of the program for the srf distance on random networks
in this subsection, we first compare the program in dendroscope and our program for the srf distance. we then report the performance of a parallel version of our program.

the tests were performed on computers each with  <dig> gb ram and a  <dig>  ghz intel xeon e5- <dig> 24-core cpu. for the generation of random networks, we considered six cases. in the k
th case, we generated six groups of network pairs. the j
th group consists of  <dig> pairs of networks with 4k leaves and k
j/ <dig> reticulation nodes, where k was from  <dig> to  <dig> and j= <dig> , <dig> , <dig> 

for the comparison test, we computed the srf distance for each pair of networks in every group. the results are summarized in fig.  <dig> 
fig.  <dig> performance of our program  and the program in dendroscope  on random networks. the x-axis represents the number of reticulation nodes in a network.the random networks examined had  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> , and  <dig> leaves 




our program ran faster than the program in dendroscope for networks with up to  <dig> leaves. however, our program became slower than the latter when there were more than  <dig> leaves. this is reasonable, since the number of clusters increases exponentially with the number of taxa and it takes even long time for our program to merely list all the possible clusters when there were more than  <dig> leaves.

additionally, the memory usage of our program was extremely low compared with the program in dendroscope. the memory usage of the dendroscope program increased rapidly with the number of reticulation nodes in a network. for example, the average maximum resident memory for networks with  <dig> leaves and  <dig> reticulation nodes was around  <dig> gb, which is approximately six times that for networks with  <dig> leaves and  <dig> reticulation nodes. because of this, the average runtime of the dendroscope program for networks with  <dig> leaves and  <dig> reticulation nodes sharply increased. during test, the dendroscope program failed to get results for networks with more than  <dig> leaves and  <dig> reticulation nodes. hence, some data points are missing for the dendroscope program in the two panels at the bottom in fig.  <dig>  in contrast, our program can run on networks with more than  <dig> reticulation nodes. even for networks with  <dig> leaves and  <dig> reticulation nodes, the average maximum resident memory of our program was less than  <dig> mb. thus the test shows that our program is computationally efficient when the number of reticulation nodes in the input network is large.

although our program runs slow for networks with many leaves, it can be easily parallelized for speeding up. we used openmp to implement a parallel version of it by parallelizing the enumerations of clusters. this parallel version ran at least  <dig> times faster than the original program with slightly extra memory. for  <dig> pairs of networks each with  <dig> leaves and  <dig> reticulation nodes, the parallel version finished in about  <dig> seconds with less than  <dig> mb memory on average.

computing the srf distances on real biological data
in this subsection, we examine the srf distance between phylogenetic networks reconstructed from two datasets in the literature.

computing the srf distance between networks over a set of grass species
the proaceae dataset, originally from the grass phylogeny working group  <cit> , has often been used for validating network reconstruction methods. the dataset contains sequences for six loci: its , ndhf , phyb , rbcl , rpoc , and waxy . rooted binary gene trees were built for these loci previously by schmidt  <cit> . from the six trees, van iersel et al.  <cit>  constructed  <dig> subsets of gene trees for comparisons of network reconstruction methods.

a recent method called hybroscale  <cit>  can compute all the representative networks with the minimum number of reticulation nodes from a set of multiple binary phylogenetic trees. we ran hybroscale on three subsets of gene trees from the grass dataset, which are on  <dig>   <dig>  and  <dig> taxa, respectively . the reconstructed networks have less than seven reticulation nodes. since there are tens of output networks for each input dataset, we computed their pairwise srf distances to examine their dissimilarity. as shown in table  <dig>  the average srf distances between the networks for all the datasets are relatively small, which implies that the computed networks are rather similar.

rbcl, waxy, its

ndhf, rbcl, waxy

phyb, rbcl, rpoc
#ret refers to the number of reticulation nodes in the reconstructed networks




on the other hand, different network reconstruction methods on the same data could produce very different networks. using five gene trees , we constructed three networks: a cluster network  obtained from a program in  <cit> , a galled network  obtained from a program in  <cit> , and a reticulate network  obtained from pirn  <cit> . since the original network reconstructed by pirn had reticulation nodes with more than one child and leaves with more than one parent, it was transformed into an equivalent one satisfying our definition in this paper. the three networks have  <dig>   <dig>  and  <dig> reticulation nodes and contain  <dig>   <dig>  and  <dig> soft clusters, respectively. the srf distance between the cluster network and the galled network is  <dig>  the srf distance between the galled network and the reticulate network is  <dig>  the srf distance between the reticulate network and the cluster network is  <dig>  this suggests that the galled network is more similar to the reticulate network than to the cluster network. this also reflects that the srf distance is sensitive to the structural properties of phylogenetic networks.

computing the srf distance between networks over six mosquito species
to study phylogenetic relationships and introgression among six mosquito species in the anopheles gambiae species complex, fontaine et al.  <cit>  constructed a network  by employing tree-based methods on the whole-genome sequences. later, wen et al.  <cit>  rebuilt a similar network  for the six species by directly applying a network inference method on the gene trees. the two networks are shown in additional file 1: figure s <dig>  m <dig> has three reticulation nodes and m <dig> has four reticulation nodes. there are  <dig> and  <dig> soft clusters in m <dig> and m <dig>  respectively. the srf distance between m <dig> and m <dig> is  <dig>  implying that the two networks are still quite different in the embedded soft clusters.

comparison of the rf distance and the srf distance
although the rf and srf distances were proposed to measure the dissimilarity of networks, their relationship is unclear  <cit> . in this subsection, we present our preliminary comparison of these two measures.

given a fixed number of leaves and reticulation nodes, we generated  <dig>  random network pairs and computed their rf and srf distances. figure  <dig> shows the distributions of these two measures in the space of networks with different numbers of leaves and reticulation nodes. the results suggest the following three facts: 
 there are at least as many soft clusters as clusters in a network. therefore, as expected, the srf distance has larger range than the rf distance.

 the rf distance seems to have a normal distribution of small mean and small variance.

 the distribution of the srf distances seems not to be normal. it is skewed towards small distances  and a small fraction of network pairs had much larger srf distances than the average srf distance.


fig.  <dig> the distribution of the rf  and srf  distances between random networks. histograms of the number of network pairs with k leaves and m reticulation nodes, where = ,  ,  ,  ,  , and  




taken altogether, these three facts indicate that the srf distance is a fine metric for networks and hence more suitable than the rf distance for measuring the dissimilarity of networks.

CONCLUSIONS
the generalized decomposition technique developed in  <cit>  was shown to be powerful for solving the tcp on arbitrary networks. in this work, by applying this technique, we have developed efficient algorithms for solving the ccp and computing the srf distance for arbitrary networks. these two algorithms were implemented in c.

both programs facilitate reconstructing and validating network models in evolutionary and comparative genomics. our simulation experiments showed that the srf distance program ran fast for networks with an intermediate number of leaves and reticulation nodes. therefore, the srf distance program is ready for assessing a network reconstructed by a new method via comparing it with other networks.

additional file

additional file  <dig> supplementary material. supplementary material contains the proof for theorem  <dig> and supplementary figures. 

 


from the fifteenth asia pacific bioinformatics conference shenzhen, china. 16– <dig> january 2017

