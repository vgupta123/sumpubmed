BACKGROUND
several recent genome-wide and experimental studies suggested that the genome consists of chromosome regions of strong inter-marker linkage disequilibrium   and has discrete boundaries defined by recombination hotspots  <cit> . there are a few common haplotypes of limited haplotype diversity within each haplotype block, which can be characterized by only a small number of haplotype tagging snps . haplotype blocks and htsnps have great implication for association-based mapping of disease genes, by significantly reducing the genotyping effort with only a modest loss of power  <cit> . a new genomic map  for characterizing the haplotype structure in human genome is now underway to speed up the searching for genes involved in complex diseases.

a range of operational definitions has been used to identify haplotype block structures  <cit> , which can be roughly cataloged into three groups  <cit> . first, there are methods based on diversity in the sequence, such as those of patil et al.  <cit>  and zhang et al.  <cit> , which define blocks with low sequence diversity by some diversity measure. the second group is based on ld methods, such as that of gabriel et al.  <cit> , which defines blocks with generally high pairwise ld within blocks and low pairwise ld between blocks. finally, there are methods that look for direct evidence of recombination, such as that of  <cit> , using the four-gamete test developed by hudson and kaplan  <cit>  and defining blocks as apparently recombination-free regions.

there is still no consensus on the performance criteria of htsnps selection. broadly, these criteria are categorized into two groups. one comprises the diversity criteria which evaluate the information captured from the original haplotype diversity  <cit> , such as the α-percent coverage, requiring that the total frequencies of all haplotypes completely distinguished by the htsnps set should be no less than α. the other group consists of the association-based criteria, concerned most directly with the issue of prediction – the ability of the reduced set h to detect unknown snps in the set a of all snps within the genome region of interest  <cit> .

to provide molecular geneticists more convenience in analyzing haplotype block structures and in selecting htsnps, we develop a computational tool, htsnper <dig> , with a graphical user interface  implementing the above algorithms for block structure partition and htsnps selection.

implementation
htsnper <dig>  is a computer program with a gui for characterizing the haplotype block structure and selecting htsnps. the core algorithm is implemented in c++ language, and the graphic interface is coded in java. the software is platform-independent.

here, we will be concerned with haplotype block partition and htsnps selection of unphased autosomal snps genotype data. for the block definitions that can directly handle unphased genotype data such as gabriel et al.  <cit>  and those based on pairwise ld  <cit> , the unphased data are first partitioned into blocks over which there is sufficient restriction of haplotype diversity. then, haplotypes are estimated approximately within each block . finally, based on these estimated haplotypes, htsnps are selected according to certain htsnps performance criterion  <cit> . for those block definitions that can only handle phased haplotype data  <cit> , haplotypes are estimated first  from unphased genotype data. then block partition and htsnps selection are both based on these estimated haplotypes.

haplotype estimation – em algorithm
we apply the em algorithm used by snphap to estimate haplotypes from genotype data  <cit> . when the data consist of a large number of snps, the number of possible haplotype instances may become extremely large. in order to avoid this problem, the program starts from the first two snps and extends the solution by sequentially adding the rest snps. as each new snp is added, the number of possible haplotypes is expanded considering all possible larger haplotypes. after em algorithm estimating the posterior probabilities, the program deletes genotype assignments with posterior probability lower than  <dig> . then the posterior probabilities of the rest genotype assignments are recomputed.

we use the em algorithm in snphap because it is simple and fast, and can be easily integrated in our c++ code. there are other algorithms like haplotyper  <cit> , phase  <cit>  and plem  <cit>  that are better studied and more widely used. however, one distinctive feature of htsnper <dig>  is to estimate haplotypes within each haplotype block. within the blocks there is very limited haplotype diversity, so in such cases the algorithm in snphap performs reasonably well. if one likes to do the haplotype phasing before block partition, he/she can use haplotyper  <cit> , phase  <cit>  or plem  <cit>  to get more accurate estimation, and then input the estimated haplotypes to htsnper <dig>  to do the block partition and htsnp selection.

definitions for haplotype blocks
htsnper has integrated four haplotype block definitions: chromosome coverage  <cit> , average pairwise ld |d'|  <cit> , estimated pairwise ld confidence limits  <cit>  with minor modifications by wall and prichard  <cit> , and no historical recombination  <cit> .

 <dig>  chromosome coverage  <cit> . a block is defined as a region in which the sum frequencies of common haplotypes  is no less than a threshold. for this definition of blocks we apply a dynamic programming for haplotype partitioning  <cit> . we define a boolean function block  =  <dig> if the consecutive snps from snpi to snpj can be defined as a block according to the above definition, and block  =  <dig> otherwise. let f  be the size of the minimal htsnp set found by gbb algorithm  for α-percent coverage within the block from snpi to snpj. given a block partition , ,..., , the total number of htsnps for these n blocks is f  + f  +...+ f . the optimal block partition is defined to be the one that minimizes the total number of htsnps.

denote sj to be the total number of htsnps for the optimal block partition of the first j snps, and set s <dig> =  <dig>  according to dynamic programming theory, we have . through this recursion the dynamic programming partitions the haplotypes for the optimal block partition.

 <dig>  average pairwise ld |d'|  <cit> . within a block the average pairwise |d'| is no less than a threshold.

 <dig>  estimated pairwise ld confidence limits  <cit>  with minor modifications by wall and prichard  <cit> . for details see additional file  <dig> 

 <dig>  no historical recombination  <cit> . a block is defined as a region without any historical recombination, which is examined by four gamete test.

the above definitions of  <dig>   <dig> and  <dig> do not guarantee a unique solution for partition. in htsnper <dig> , blocks are searched from the start of the input data and expanded as long as possible by sequentially adding the next snps.

htsnps selection criteria
htsnper <dig>  can find the minimal htsnp set of global optimum. different definitions of optimum can be derived according to different htsnp performance criteria  <cit> . a generalized definition of "optimum" can be described as the minimal set of htsnps that satisfies a given htsnp performance criterion. for example, weighted-average haplotype r <dig> is regarded as one of the most informative association-based htsnp performance measure by weale et al.  <cit> , which is defined as following:

weighted-average haplotype



where



and we denote  as the the frequency of haplotypes with allele  <dig> at snp i,  as the frequency of haplotypes in the gth htsnp-defined group , and  as the frequency of haplotypes both in the gth htsnp-defined group and with allele  <dig> at snp i.

if the htsnp performance criterion is defined as the weighted-average haplotype r <dig> of the selected set of htsnps should be at least 90% of the maximum possible value , then the "optimum" according to this criterion can be described as the minimal set of htsnps whose weighted-average haplotype r <dig> is at least 90% of the maximum possible value.

we have integrated the three htsnp performance criteria into our htsnper software: α-percent coverage  <cit> , explained proportion of clayton's haplotype diversity  <cit> , and weighted-average haplotype r <dig>  <cit> .

α-percent coverage: the total frequencies of all haplotypes that are not completely distinguished by the htsnp set is less than  <dig> - α.

explained proportion of clayton's haplotype diversity: , where fi, fhaplo = g and fi,g are defined in the same way as above.

weighted-average haplotype r <dig> : see above.

htsnper <dig>  takes advantages of a novel heuristic algorithm – generalized branch-and-bound  algorithm, which is applicable for all kinds of htsnps performance criteria, to search the minimal htsnps set with both efficiency and global optimum, comparing to the exhaustive searching  <cit>  which guarantees global optimum but runs very slowly, and to the greedy algorithm  <cit>  which is faster but doesn't guarantee global optimum.

the gbb algorithm
consider a block b containing n haplotypes and each haplotype has m bi-allelic snps markers. each snp marker can divide n haplotypes into two groups: one consists of all the haplotypes with its major allele, and the other with its minor allele. gbb algorithm is based on the following branching rule and generalized prune-rule, using the depth-first searching strategy .

1) each node {t, r} in the searching tree consists of two parts: the test-set t and the discard-set r where t is the set of snps that have been selected, and r is the set of snps that should not be selected for the future. if the set of all snps is denoted as s, then the set of snps that can be used at the node is s\. the search tree starts from the root node for which t = Φ and r = Φ.

2) a child node is generated by adding a snp to t according to the branching rule. the node is pruned if it meets the generalized prune-rule.

importance calculation
given a certain node {t, r}, snps in t divide all the haplotypes into t non-overlapping groups  called equivalence classes. any haplotypes that belong to the same group are identical at all snp sites in t. a biallelic snp divides all the haplotypes into two groups: gmajor and gminor. to evaluate the competence of the snp, the importance of a snp is defined by



branching rule
given a node {t, r}, sort the snps in s\ according to the importance calculation non-increasingly: i ≥ i ≥ … ≥ i, create the children {t ∪ snp <dig>  r}, {t ∪ snp <dig>  r ∪ snp1}, {t ∪ snp <dig>  r ∪ snp <dig> ∪ snp2}, ..., {t ∪ snp|s|-|t|-|r|, snph}, and explore the children in this order.

generalized prune-rule
check whether the snp subset t meets the htsnp performance criterion. if it does, prune the node when |t| ≥ u, or update u when |t| <u ; otherwise, prune the node when |t| ≥ u or |s| - |t| - |r| <  <dig> where u is the size of the best solution found so far.

the importance calculation in branching rule is originally devised for the α-percent coverage criterion  <cit> . but it is also applicable for other criteria, although it may not be the best one. actually, one can devise specific branching-rule and prune-rule according to specific htsnps selection criterion in the gbb framework to achieve super efficiency and global optimization. the gbb framework and algorithm we proposed are applicable to all htsnp criteria, and are at least more efficient than enumeration.

RESULTS
htsnper <dig>  takes advantages of a novel heuristic algorithm, generalized branch-and-bound algorithm. it is applicable for all kinds of htsnps performance criteria. the algorithm is of high computational efficiency and it can reach the global optimum.

htsnper <dig>  has integrated three htsnps performance criteria and four haplotype block definitions. besides genotype data, htsnper <dig>  can also handle haplotype data directly. it takes a simple flat-file as input. a dialogue box is used to set up parameters and for htsnps selection algorithm . in the tabbed-output panel, htsnper <dig>  demonstrates the results both in the form of graphics and plain-texts. a graphical representation of haplotype block partition and htsnps selection is provided in the graphic panel . in this example, there are  <dig> snps and  <dig> haplotypes in its input. the ld-based definition was used for haplotype partition, weighted-average haplotype r <dig> for htsnps performance criteria, and branch-and-bound algorithm in htsnps selection. in the text-output panel, there is more information about the analysis and results, such as the methods/criterion used on haplotype block definition and htsnps selection. users can also select different haplotype definitions and htsnps performance criteria to compare the results from the result tree in the left panel.

application example
study sample
in order to compare the time used and the htsnps numbers chosen with different softwares, we used the human chromosome  <dig> haplotype  <cit>  as the test data. this dataset consists of  <dig> haplotype samples, and  <dig>  common snps . about 21% of the chromosome  <dig> data are missing data.

results based on various haplotype block definitions and htsnp selection criteria
results of the three different htsnps performance criteria by htsnper <dig> :

alpha-percent coverage:  <dig>  blocks and  <dig>  htsnps.

haplotype diversity:  <dig>  blocks and  <dig>  htsnps.

weighted-average haplotype r <dig> : with this criterion and gbb algorithm, htsnper can not run on our computer because of the large amount of required memory. using greedy algorithm instead of gbb , we get  <dig>  blocks and  <dig>  htsnps.

using the same data set, the same htsnps performance criterion of α-percent coverage but the different block searching algorithm, patil et al.  <cit>  reported  <dig>  blocks and  <dig>  htsnps. zhang et al.  <cit>  reported  <dig>  blocks and  <dig>  htsnps. about 21% of the chromosome  <dig> data are missing data and different programs use different strategy to handle missing data. all these contribute to the differences between the results of the above programs.

we also ran the different programs to compare the computational efficiency. the algorithms used for comparison were the gbb algorithm in htsnper <dig> , the greedy algorithm by zhang et al.  <cit>  and the enumeration algorithm in zhang et al.  <cit> . for comparison, we used the diversity-based haplotype block definition and α-percent coverage criterion in htsnps selection . running on our computer with  <dig>  ghz amd athlon processor , with the block definition of patil et al.  <cit> , α-percent coverage htsnps performance criterion and a dynamic programming for haplotype partition, htsnper <dig>  requires  <dig> hours  <dig> minutes to identify  <dig>  blocks and  <dig>  htsnps. for comparison, the greedy algorithm in zhang et al.  <cit>  requires  <dig>  seconds, identifying  <dig>  blocks and  <dig>  htsnps, and the enumeration method in zhang et al.  <cit>  was too slow to apply on our computer on this human chromosome  <dig> dataset. the difference in efficiency may be partially due to the different block partition searching strategies applied by these three programs. zhang et al.  <cit>  uses greedy algorithm for block partition, while htsnper <dig>  and zhang et al.  <cit>  use dynamic programming algorithm.

CONCLUSIONS
in conclusion, htsnper <dig>  is a java-based program with graphic user interface. it allows molecular geneticists to perform haplotype block analysis and htsnps selection using different definitions, different performance criteria, as well as different algorithms. the software is a powerful tool for those focusing on association mapping based on haplotype block and htsnps strategy.

availability and requirements
htsnper <dig>  is a graphic user interface and a platform-independent software. the software is available at . the source code is available on request to the authors.

htsnper <dig>  takes a plain text file as input, either unphased autosomal snps genotype data or phased haplotype data. it requires the java running environment  to run the program properly. detailed tutorials, htsnper <dig>  help system and examples are distributed within htsnper <dig>  software. please inform the corresponding author if you are a non-academic user.

authors' contributions
k. ding and j. zhang provided software design, development and testing of the software, and j. zhang wrote the source codes. k. zhou participated in its design. y. shen and x. zhang provided biological direction and validation of the tool. y. shen conceived of this project, and participated in its coordination. all authors have read and approved the final manuscript.

supplementary material
additional file 1
it provides more details of the methodology that are not covered in the main text.

click here for file

 acknowledgements
we thank dr. michael q. zhang for valuable discussion. this work is supported in part by china national key program on basic research , china national high-tech r&d program , and nsfc .

figures and tables
