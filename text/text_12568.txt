BACKGROUND
gene duplication is a fundamental process in the evolution of species  <cit> , especially in eukaryotes  <cit> , where it is believed to play a leading role for the creation of novel gene functions. several mechanisms are at the origin of gene duplications, among them tandem repeat through unequal crossing-over during recombination. as this phenomenon is facilitated by the presence of repetitive sequences, a single duplication can induce a chain reaction leading to further duplications, eventually creating large tandemly arrayed gene  clusters: groups of paralogous genes that are adjacent on a chromosome. tags account for about one-third of the duplicated genes in eukaryotes  <cit> . in human, they represent about 15% of all genes  <cit> . in arabidopsis, 17% of the total predicted genes are members of tag clusters  <cit> , and in maize, about 35% of the genes were predicted to belong to tag clusters  <cit> .

deciphering the evolutionary history of a tag cluster is important to provide new insights into the mechanisms of gene amplification, and to answer several questions regarding the nature and size of duplication and other evolutionary events that have shaped tag clusters. in most biology-oriented studies, a gene tree is obtained by applying a classical phylogenetic method to an alignment of the amino acid sequences corresponding to the collected gene sequences, and a duplication scenario is proposed for the gene family, based on a careful analysis of this gene tree . although such manual analysis may be useful to propose amplification scenarios for families of limited size and simple organization, it is usually impractical to infer more general evolutionary scenarios for large tag clusters affected, in addition to duplications, by other events such as segmental deletion, that may lead to gene loss, and rearrangements , that may affect gene order and transcriptional orientations.

the tandem-duplication model of evolution, first introduced by fitch in  <dig>  <cit> , assumes that, from a single ancestral gene at a given position in the chromosome, the locus grows through a series of consecutive duplications placing the newly created copy next to the original one. such tandem duplications may be simple  or multiple . based on this idea, a number of theoretical studies have considered the problem of reconstructing the tandem-duplication history of a tag cluster  <cit> . however, due to rearrangements and losses, it is often impossible to reconstruct a duplication history for a tag cluster  <cit> , even from well-supported gene trees. in  <cit> , we considered a generalization of the tandem-duplication model allowing for inversions. the model was then extended in  <cit>  to the study of orthologous tag clusters in different species. a similar work, considering more operations , but requiring more preliminary information  has also been done  <cit> . various other heuristic and probabilistic methods have been developed for reconstructing a hypothetical ancestral sequence and a most parsimonious set of duplications  and other evolutionary events leading to the observed gene cluster  <cit> . they are based on a preprocessing of a self-alignment dot-plot of a cluster, or the dot-plot of a pairwise-alignment of two clusters. although these methods are useful to infer evolutionary events in well-conserved regions, they are less appropriate when there is a lot of noise in the dot-plots due to the alignments of nunfunctional regions which are continuously affected by mutations. in both of our previous cited methods  <cit> , only simple duplications were considered. this assumption, while allowing for exact algorithmic solutions, is an important limitation to its applicability . for this reason, we have developed a more general heuristic, the diltag algorithm  <cit> , allowing us to infer a set of optimal evolutionary histories for a gene cluster in a single species, according to a general cost model involving variable length duplications, in tandem or inverted, deletions and inversions. experiments on simulated data showed that the most recent evolutionary events can be inferred accurately when the exact gene trees are used. despite the uncertainty associated with the deeper parts of the reconstructed histories, they can be used to infer the duplication size distribution with some precision. diltag has been used recently in  <cit>  to infer an evolutionary scenario for the maltase gene clusters in drosophila.

a clear limitation of diltag is the fact that it is applicable only to a single cluster. the benefit of an extension to multiple species is obvious, as comparative genomics is clearly a more appropriate approach to infer loss and inversion events. in particular, considering an outgroup may help in choosing among many possible optimal evolutionary scenarios for a gene cluster.

in this paper we present an extension of diltag to the study of a set of orthologous tag clusters in multiple species. in other words, in addition to multiple duplication , deletion and inversion events, the speciation events reflected by a given phylogenetic tree for the set of species are also taken into account. we develop multi-diltag, a heuristic algorithm that is shown on simulated data sets to be very accurate in inferring the total number and size distribution of duplication events.

methods
data
preliminary to all the developments in this paper is the identification of m orthologous tag clusters in m genomes of interest. in other words, given a gene family f of interest, a tandemly arrayed sequence  of paralogous genes from f has already been identified in each genome, and such m tag clusters have already been pointed out as orthologs. for example, gene orders and clusters orthology for the protocadherin gene family has been identified for human and several other mammalian and fish species  <cit> .

we denote by  the set of m tag clusters, i.e. for  <dig> ≤ i ≤ m, oi is the signed order of the family members in genome i. the sign  of a gene represents its transcriptional orientation. in addition to the observed gene orders, we also assume that a gene tree is available for the tag family, i.e. the set of genes contained in the m tag clusters. a gene tree t for a tag family is a rooted binary tree with labelled leaves, where each label represents an unsigned gene copy. a leaf labelled by a gene copy in genome i is said to belong to genome i. for conciseness, we make no distinction between a leaf and its label. the pair  is called the ordered gene tree for the gene family. finally, we assume that the species tree, reflecting the speciation history of the m considered genomes, is also available. see figure  <dig> for an example.

the evolutionary model
our evolutionary model is an extension of the one introduced by fitch  <cit>  for tags, which considers only tandem duplications resulting from unequal crossing-over during meiosis. however, tags are shaped during their evolution by other events affecting the gene order, orientation and content of the clusters. for example, shoja and zhang  <cit>  have observed that more than 25% of all neighbouring pairs of tags in human, mouse and rat have non-parallel orientations. the fitch model of evolution does not apply to such data. our model extends the fitch model of evolution by considering deletion events affecting gene content, as well as inversion and inverted duplication events affecting gene orientation. below is a formal definition of the evolutionary model considered in this paper. in this definition, a cherry of t is a pair of leaves  separated by a single vertex, called its root.

definition 1: an evolutionary history for  is a sequence of ordered gene trees , such that for each  is a set of nk gene orders corresponding to orthologous tag clusters on nk genomes, where:

 <dig>  t <dig> is a tree consisting of a single leaf u, and .

 <dig>  for  <dig> ≤ k <h, there is a unique genome i such that  can be obtained from  by applying one of the following evolutionary events on :

 duplication: a sub-sequence  of  is replaced by a sequence of new elements , where, for each p ≤ x ≤ q, lx and rx have the same sign as ux. moreover, each leaf ux in tk is replaced by the cherry .

 inverted-duplication: a sub-sequence  of  is replaced by , –, …, –, rp, rp+ <dig>  …, rq) or , –, …, –), where, for each p ≤ x ≤ q, lx and rx have the same sign as ux. moreover, each leaf ux of tk is replaced by the cherry .

 inversion: a sub-sequence  of  is replaced by , –, …, –) and tk remains unchanged.

 deletion: a sub-sequence  of  is deleted, and the corresponding leaves  are removed from tk .

 speciation: the complete order  is replaced by {, }, where, for each  <dig> ≤ x ≤ t, lx and rx have the same sign as ux. moreover, each leaf ux belonging to genome i is replaced by the cherry .

any evolutionary history  for  induces a unique species tree s obtained from the speciation events of . we say that  is consistent with s.

finally, a simple-event, will refer to an event acting on a single gene. for example, a simple-deletion will refer to the deletion of a single gene. a simple-deletion event is also referred to as a loss event. moreover, a general-duplication will refer to a duplication that does not necessarily place the duplicated genes next to the original copies . an example of an evolutionary history is given in figure  <dig> 

we are now ready to formulate our optimization problem:

minimum-evolution problem:

input: an ordered gene tree  and a species tree s.

output: a most parsimonious evolutionary history  for  consistent with s.

the “most parsimonious” constraint given above can be most naturally expressed in terms of number of events. alternatively, a cost can be associated to each event depending on the type and size of the event , and the “most parsimonious” history would be the history of minimum cost, where the cost of a history is simply the sum of costs associated with its events. this latter approach is the one considered in  <cit> .

the diltag method
the diltag algorithm  <cit>  allows the inference of a set of most parsimonious histories of duplications, inverted-duplications, inversions and deletions , originally acting on a single ancestral gene to produce a given extant tag cluster represented by a given ordered gene tree .

diltag proceeds by exploring a “history graph” , where vertices correspond to ordered gene trees and edges correspond to evolutionary events. more precisely, an edge from  to  is defined if and only if  can be transformed into  through one event, and each edge is weighted by the cost of its corresponding event. this graph is actually simplified into a finite graph, without loss of information, by considering deletions only in combination with duplication events. the history graph is constructed backwards, i.e. starting at vertex , and constructing edges in their opposite direction  by exploring the neighbourhood of each vertex.

it is shown in  <cit>  that, given a vertex representing an ordered gene tree , its duplication and inverted-duplication neighbourhoods are both linear  in space, where as its inversion, duplication-with-deletion and inverted-duplication-with-deletion neighbourhoods are all quadratic in space. however the size of the whole search-space is clearly exponential, which makes an exhaustive search through the whole graph impossible for gene trees of reasonable size. a greedy heuristic is therefore developed that only conserves, in a queue, the most promising partial evolutionary histories obtained after exploring a given depth of the history-graph.

the input of diltag is an ordered gene tree  with n leaves, and the output is a set of shortest backward-paths in the history graph from  to a tree containing a single vertex. for the purpose of our new multi-diltag algorithm, it is easy to modify diltag in order to reach an ancestral genome with g genes, for any  <dig> ≤ g ≤ n: simply stop the procedure as soon as we attain the right number of genes. notice that the attained ancestor is ordered, i.e. defined by an ordered sequence of g genes. it can be seen as an ordered tree  with t′ being reduced to a set of g vertices and no edges. we will make no distinction between an ordered tree with no edges and a gene order.

in section  <dig> , the input and output of diltag will be as follows:

input: an ordered gene tree  and a number g of ancestral genes;

output: the cost of a shortest backward-path from  to an ancestral genome with g genes, together with the solution graph composed by the actual set of shortest paths, and the solution set of ancestral gene orders attained.

finally, we need the following definition for the subsequent developments: given two vertices x and y of the oriented history graph, if there is an edge oriented from x to y , then we say that y is a predecessor of x.

a two step method for multiple species
back to our evolutionary model on multiple species, we aim to find a most parsimonious evolutionary history for  that is consistent with s. this problem has been considered in  <cit> , but in the more restricted case of simple-duplications, and no inverted-duplications. a two step methodology has been considered:

 <dig>  reconciliation step: ignoring gene orders, infer a history of simple-general-duplication, simple-deletion and speciation for t consistent with s, by using a reconciliation approach  <cit> . conceptually, a reconciliation r between a gene tree t and a species tree s is a tree accounting for the evolutionary history of the species and all genes of the gene family, including lost and missing gene copies, by simple-general-duplication, speciation and loss. r can be “embedded” into s, reflecting the duplication and deletion events leading to the observed tree t. such embedding allows to infer the number of genes at the speciation nodes of s, as well as the evolutionary relationships between ancestral gene copies. a reconciliation between the gene tree t and the species tree s of figure  <dig> is given in figure  <dig>  notice that this reconciliation does not lead to the observed gene order.

 <dig>  minimization step: reinserting the gene order and sign information  on the leaves of s, infer the order and sign of genes at internal nodes of s allowing to minimize the total number of events involved in a history of .

we use the same two-step methodology here. as for the first step, any existing reconciliation method can be used. in particular, the so called lowest common ancestor  mapping between a gene tree and a species tree, formulated in  <cit>  and widely used  <cit> , defines a reconciliation tree r that minimizes both the simple-general-duplication and simple-deletion events.

in the following developments, we will consider the “embedded” representation of a reconciliation tree r into the species tree s. more precisely:

• a leaf of r is an extant gene and maps to a leaf of s, i.e. the extant genome to which it belongs.

• a duplication vertex of r is an internal vertex which corresponds to a duplication event. it maps to a branch of s, i.e. the lineage in which the duplication occurred .

• a speciation vertex of r is an internal vertex which corresponds to an ancestral gene at the time of a speciation event. it maps to an internal vertex of s, i.e. the ancestral genome to which it belongs. it has either one child , or two children each belonging to a different lineage. the set of speciation vertices mapping to a vertex a of s is the genome set g of a. if a is not the root, let b be the father of a. then the pre-speciation genome set pg of a is the subset of g containing the vertices of g with a child in the branch , in other words, the genes in g that have not been lost after speciation on the branch going to a. we have |pg| ≤ |g| .

considering now the minimization step, if only simple-duplications are allowed, the problem has been shown in  <cit>  to be equivalent to the one of finding gene orders at internal nodes of s minimizing a global inversion distance. in this context, the evolutionary model can be reduced to the one where all duplications occur first, followed by all inversions. the problem is then to find the minimum number of inversions, yielding a forest of simple-duplication trees. using properties of simple-duplication trees, it is possible to define an exact and efficient algorithm for this problem. all these simplifications and shortcuts do not hold anymore for simultaneous duplications and deletions of multiple genes. in the following section, we focus on the minimization step.

multi-diltag: extension of diltag to multiple species
our algorithm is a generalization of diltag that proceeds with the whole species tree s and produces a solution set for each internal vertex, and a solution graph with additional speciation edges. figure  <dig> illustrates the algorithm execution at each internal vertex a of s.

initially, the solution set of each leaf is reduced to the gene order observed at that leaf, and the solution graph is reduced to the set of vertices defined by the ordered gene trees at the leaves. we then extend the solution graph by exploring s bottom-up, and for each internal vertex a, we compute a solution set  by performing diltag respectively on the left branch  and right branch  of s , and taking, as potential orders at a, the union of genome sets pg and pg obtained respectively in the left and right branch. however, due to gene losses, gene orders in pg do not necessarily have the same number of genes as gene orders in pg. we therefore consider all possible extensions of gene orders, by reinserting lost copies in any possible way, and take the union of all sets obtained as the solution set . we then define a single “speciation edge” in the solution graph from each vertex representing a gene order in  to each vertex representing a gene order in pg ∪ pg. as the only evolutionary events likely to have occurred on these edges of the history graph are inversions and deletions, we label each speciation edge  by the minimum inversions+deletions  distance allowing to transform x into y. in the literature, the problem of computing the id-distance between two permutations has already been considered, and a polynomial-time algorithm exists  <cit> .

more precisely, the multi-diltag algorithm traverses the tree bottom-up, and for each internal node a proceeds as follows:

 <dig>  for each of s ∈ {l, r}, execute diltag on each element of , and stop as soon as the attained gene order contains |pg| genes. the set of all ancestral gene orders obtained  form an initial pre-speciation set , further truncated as follows: if min is the minimum cost obtained over all elements of , we remove from  all elements o that are not attained with the cost min. moreover, we remove from the partial current solution graph all the predecessors of o that are not linked to another element of  by a minimum-cost path.

 <dig>  for each of s ∈ {l, r}, construct the set  by replacing each gene order o of  by the set of all possible orders obtained from o by inserting the genes lost on the branch .

 <dig>  compute . the solution graph is extended by adding one vertex per each element of .

 <dig>  let , and suppose, w.l.o.g. that . then complete the solution graph by constructing an oriented “speciation edge” from o to the vertex corresponding to its originating order in al, and an oriented edge from o to the vertex corresponding to each element of  giving rise to the minimum id-distance with o.

RESULTS
we implemented our algorithm and applied it to simulated data sets to evaluate its execution time and precision in terms of the number and size distribution of the inferred duplications. then, we applied it to the protocadherin gene clusters of four mammalian species to infer the duplication size distribution and the number of events that occurred in the evolutionary history of these species.

experiments on simulated data sets
ordered gene trees were generated by simulating evolutionary histories consistent with balanced species trees of  <dig>   <dig> or  <dig> leaves. note that we also tested our algorithm on unbalanced species trees to ensure that it does not affect its accuracy . unless stated otherwise, the size of each event was sampled according to a geometric distribution of parameter p =  <dig> , truncated by the number of genes in the ancestral cluster immediately preceding this event. the geometric distribution was chosen to represent biological data, in which smaller events are observed more frequently. we also tested p =  <dig>  and p =  <dig> , which give respectively more and less large events, and the results were similar . all the results shown below are averaged over  <dig> replicates.

similarly to the diltag algorithm, we define the penalty cost of an event e of size m  as αe + mβe, where αe is the opening cost and βe the extension cost of e. our results were obtained with the same values used in  <cit>  to test the diltag algorithm, namely:

• αt–dup = 100; βt–dup =  <dig> 

• αi–dup = 100; βi–dup =  <dig> 

• αdel = 500; βdel =  <dig> 

• αinv = 500; βinv=  <dig> 

execution time
our algorithm was implemented in c++ and runs on a typical linux workstation. figure  <dig> shows the execution time of multi-diltag. the left diagram shows results for balanced species trees of  <dig>   <dig> and  <dig> leaves. the depth d of the extant genomes for trees with  <dig>   <dig> and  <dig> leaves are respectively  <dig>   <dig> and  <dig>  we generated histories with n single, n double tandem duplications  and  <dig> inversions on each branch of the species tree. at each step in the curves, n is incremented by  <dig> and thus the number of genes in each extant genome is equal to 3dn +  <dig>  note that this is the only experiment in which we used fixed tandem duplication sizes , and we did this only to get the same number of genes in every genome.

clearly the execution time of multi-diltag is exponential in the number of genes in extant genomes. nevertheless, it is possible to get results in under  <dig> seconds for a family of approximately  <dig> genes in  <dig> species. on the other hand, deletions of size greater than  <dig> slows down multi-diltag dramatically. the idea of considering all possible extensions of gene orders, by reinserting lost copies in any possible way, results in an exponential number of orders in the number of copies to reinsert and the size of the orders in which we make the insertions.

number of duplications
we now evaluate the ability of multi-diltag to infer the correct total number of duplications . we simulated evolutionary histories containing as many duplications as inverted duplications with  <dig> ,  <dig>  and  <dig>  extant genomes, and we plotted the total number of duplications inferred for histories generated with  <dig> %,  <dig> % and  <dig> % of inversions.

more precisely, for each x, we generate a history with a total of x duplications together with  <dig>  x/ <dig> or x inversions, respectively leading to the curves for  <dig> %,  <dig> % and  <dig> % of inversions. the total number of events performed for each value of x is distributed evenly on the branches of the species tree.

as we see, multi-diltag is almost perfect in inferring the total number of duplications when there are no inversions. the presence of inversions induces a small overestimation in the inferred number of duplications. as noticed in  <cit> , this can be explained by the size limit of the diltag priority queue used to explore the search space and the chosen cost configuration, which may lead to choosing a history with more duplications in order to infer fewer inversions.

notice that the overestimation is a little bit more pronounced in figure  <dig> left. this can be easily explained by the fact that there are fewer branches in the balanced species tree containing  <dig> extant genomes than in the ones of  <dig> and  <dig> extant genomes. therefore, for the same total number of duplications, more inversions are present on each branch of the smallest species tree.

duplication size distribution
finally, we measure the accuracy of multi-diltag for inferring the duplication size distribution. histories containing  <dig> ,  <dig>  and  <dig>  extant genomes were generated. in all cases,  <dig> tandem duplications,  <dig> inverted duplication,  <dig> inversion and  <dig> deletion of size  <dig> or  <dig> were simulated on each branch of the corresponding balanced species tree.

clearly, multi-diltag is able to infer the duplication size distribution very accurately for the three data sets. we can only observe a slight overestimation of duplications of size  <dig> and underestimation of duplications of size  <dig> 

we do not report the correctness of the inferred duplication events because a lot of equivalent optimal evolutionary histories are obtained by multi-diltag, so it is possible that most of the inferred duplications do not correspond to the simulated duplications.

experiments on the protocadherin gene clusters
we applied multi-diltag to the three protocadherin  gene clusters  in human, chimpanzee, mouse and rat . it is believed that protocadherins play a role in synaptic development and neuronal survival  <cit> . each gene in the protocadherin clusters consists of a single variable exon. in the α and γ clusters only, there are three additional constant exons at their 3’ end that are alternatively cis-spliced to each variable exon. this kind of genomic organization suggests a mode of evolution through tandem duplications and deletions of the variable exons in each cluster .

we downloaded most of the protein sequences for the three protocadherin gene clusters from the ucsc genome browser  for human , chimpanzee , mouse  and rat . missing genes in the downloaded sequences for chimpanzee were downloaded manually from uniprot . the rat β and γ clusters were discarded from our experiments because some gene sequences could not be found. we restricted our analysis to the regions of the variable exons encoding ectodomains  <dig> and  <dig>  since it has been shown that these regions are the most divergent and retain most of the phylogenetic signal  <cit> . the human and mouse cdh <dig> genes were used as an outgroup. the protein sequences were aligned with probcons version  <dig>   <cit>  and rooted gene trees were obtained with mrbayes version  <dig> . <dig>  <cit> , using the jones-taylor-thornton substitution matrix  <cit>  and  <dig>  mcmc iterations.

we then applied multi-diltag to the first hundred most probable trees obtained for each pcdh cluster, averaging our results proportionally to the posterior probability of each tree. however, recall that our algorithm computes the minimal id-distance on each speciation edge of the solution graph. as mentioned earlier, inversions are not allowed in the case of the protocadherin gene clusters, so the inferred evolutionary histories that contain inversions are discarded from our results. the presence of these inversions might be the result of an incorrect input gene tree, or might simply show that multi-diltag is unable to find the correct evolutionary history for this input tree. note that only  <dig> gene trees  caused inversions to appear in the inferred histories. the posterior cumulative probability  of the considered gene trees for the α, β and γ clusters are respectively  <dig> ,  <dig>  and  <dig> .

to ensure that the results do not significantly depend on the choice of the cost parameters, we used three different configurations: ,  and .

the number of events inferred by multi-diltag on each branch of the species tree and the duplication size distributions for the three protocadherin gene clusters are presented in figure  <dig> 

as we could expect from the well-conserved number of genes between the studied species, almost all the events occurred on the branch above the last common ancestor of these species . we can also see that there is an important fraction of multiple gene duplications in the size distributions . another interesting fact is that approximately the same number of double tandem duplications and single tandem duplications were inferred in the pcdh-γ cluster  right). this tends to confirm the hypothesis suggested in  <cit>  that the pcdh-γ cluster evolved by duplications involving pairs of genes.

CONCLUSIONS
we presented multi-diltag, a generalization of diltag for the study of the evolutionary history of a set of orthologous tag clusters in multiple species, with an evolutionary model allowing for simple or multiple tandem duplications, direct or inverted, simple or multiple deletions, and inversion events. our results showed that our algorithm is very robust in inferring the number and size distribution of duplications. we then applied multi-diltag to the protocadherin gene clusters of human, chimpanzee, mouse and rat to estimate the number of events among the different branches of the species tree and the duplication sizes. a short-term future work will concern the application of our algorithm to other sets of orthologous gene clusters.

however, a clear limitation of multi-diltag is the time complexity of the approach taken to deal with deleted genes. an important future work will be to develop a fast heuristic to find an optimal set of extensions of gene orders without reinserting the lost copies in any possible way.

competing interests
the authors declare that they have no competing interests.

