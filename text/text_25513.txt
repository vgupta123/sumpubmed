BACKGROUND
several biotech companies provide gene synthesis services at an affordable price. any dna sequences can be designed and synthesized with a fast turnaround time of less than  <dig> month. at the present time, the bottom line price has already dropped to about $ <dig> /base for individual customers. so it currently costs only $ <dig>  to synthesize a typical gene of  <dig>  kilo base pairs with sequence confirmation. although researchers relied on natural sources or collaborators to get genes in the past, direct synthesis of genes has become a more economic and reliable way to obtain source genes.

moreover, it has a great advantage in that it allows the redesign and optimization of native dna sequences to improve gene expression. there have been many successful reports demonstrating over-expression after sequence optimization. one of the most popular approaches is codon optimization for heterologous gene expression. the idea is that host species have different preferred codon usages for amino acid incorporation and unfavorable codons in a foreign gene can be replaced with favorable codons while maintaining the expression of the same amino acids. although it is still controversial and recent work has called into question its usefulness as a predictor of expression in some hosts, cai  or codon bias has been one of the most commonly used indexes to evaluate genes. in a rational manner, codon optimized genes that imitate a codon bias of especially highly expressed genes or exclude rare codons could significantly increase gene expression level  <cit> . according to results from recent large scale experiments, gene expression level varied more than  <dig> fold in  <dig> variants and up to  <dig> folds in  <dig> variants  <cit> . these studies provide compelling evidence that synthetic gene design can have a significant impact.

however, the mechanism of gene expression is complicated at the molecular level and codon bias is not the only determinant for gene expression efficiency. for example, there is an active debate on the relationship between codon bias, mrna folding energy, and gene expression. welch et al. synthesized more than  <dig> variants of two genes each and compared actual expression levels in e. coli  <cit> . they identified the most important  <dig> codons encoding a subset of amino acids that strongly accounted for expression level. however, they couldn't find a correlation between mrna folding energy and expression probably due to weak mrna binding energy across the synthetic gene library. tuller et al. have a slightly different finding from a genome scale study  <cit> . they concluded that although the gene expression level of individual genes can't be determined simply from a correlation between folding energy and expression level, mrna folding energy still strongly modulates translation efficiency which is correlated with codon bias determined by trna adaptation index. moreover, kudla et al. developed a larger collection of  <dig> synthetic genes coding for gfp and tried to find a rule for gene expression  <cit> . their results showed that mrna folding energy at sites near the ribosomal binding sites had a dominant effect on gene expression for efficient translation initiation and also that codon bias measured by cai wasn't associated with gfp expression level. therefore, the issue of the influence of codon bias and mrna folding energy on protein production is currently open to discussion. moreover, regarding gene design criteria, there are many other factors such as shine-dalgarno or kozak's context sequence, repeated sequences, potential polyadenylation sites, cryptic splice sites, introns, and nuclease cleavage sites as well as restriction enzyme sites, gc content, utr , and use of rare codons that affect gene expression.

due to the complicated gene design criteria, gene optimization is not easy since it requires huge repetitive computations. thus, it is highly necessary to use software design tools to assist in the process of gene design, analysis, and optimization. there are several software packages currently available such as codon optimizer  <cit> , dnaworks  <cit> , dynavacs  <cit> , gems  <cit> , gene composer  <cit> , gene designer  <cit> , genedesign  <cit> , geneoptimizer  <cit> , jcat  <cit> , optimizer  <cit> , synthetic gene designer  <cit> , and upgene  <cit> . however, one of the challenges arising in the implementation of gene optimization algorithms is that the "ideal" gene optimization algorithm has not been fully established since we still have very limited understanding of gene expression and regulation mechanisms. furthermore, the development of algorithms will require extensive coupling, perhaps in an iterative fashion, between experimental studies and computational model development. currently, high level expression and/or accurate prediction of heterologous synthetic gene expression cannot be guaranteed, particularly in diverse host organisms. therefore, there is a need to develop flexible software that offers a greater variability of gene optimization strategies as well as modeling tools, and the ability to couple experimental studies with algorithm development. at the same time, the software needs to provide diverse options and toolboxes for gene analysis to help researchers with the study of synthetic gene design.

in order to facilitate gene design, we have developed a unique gene design software called visual gene developer . the software provides a user-friendly interface and includes many useful functions such as mrna secondary structure/binding energy prediction, codon usage/mrna optimization, gc content/nc /cai calculation, sequence comparison, repeated sequence search, multiple query sequence search, and silent removal of undesirable sequences. visual gene developer's interface has been optimized to handle a large number of genes and can perform batch analysis for a genome-scale study. in particular, the function to predict mrna secondary structure or optimize the stability of mrna is important for optimization since mrna structure or gibbs free energy may affect translation initiation and elongation and consequently protein synthesis. a recent review paper provides a good summary on the issue  <cit> . furthermore, the software not only supports network and multi-threaded computing that reduce the processing time significantly but also includes an artificial neural network prediction toolbox, a nonlinear multivariable method that has not been implemented in other software. the artificial neural network regression toolbox may be potentially useful to analyze and optimize sequences since some researchers have used artificial neural network models to identify gene expression patterns  <cit> , signal peptides  <cit> , intron splice sites  <cit> , and translation initiation sites  <cit> , and others have demonstrated the usefulness of linear empirical modeling tools such as the pls  prediction toolbox to identify important codons and predict gene expression level  <cit> . one of the powerful features that only visual gene developer has, is that the software supports script language programming using visual basic script  and java script , and allows a user to develop new algorithms in an integrated programming environment where built-in editing/test tools,  <dig> helper functions of gene analysis and optimization, and a customizable graphics interface are provided. therefore, the software allows researchers to test new optimization strategies or gene analysis metrics possibly allowing the discovery of novel rules in terms of gene expression with minimal programming effort. as a result visual gene developer enables more flexibility and expandability compared with other commercial or free software that is currently available.

implementation
as a microsoft windows application, visual gene developer has been developed using microsoft visual studio  <dig> and built on .net™ framework. like other windows software, visual gene developer contains interactive windows for gene design, analysis and optimization, and has an intuitive interface for the user. the software consists of several functional modules as shown in figure  <dig> and most algorithms were compacted into classes. for simplicity, a class can be defined as a reproducible programming object that contains a collection of functions. in order to provide a programming environment like mathematica™ or matlab™, a script programming engine was developed along with a module editor and in the current version  there are  <dig> essential classes  available for module development. each class contains many useful functions. for instance, the 'geneservice' class contains more than  <dig> helper functions to assist with sequence manipulation and analysis. in addition, several specialized routines are also available to access gui  objects of visual gene developer. for example, a user can use the function 'workspace_value' of the class 'appservice' to read  a sequence from  a text box of the workspace window and utilize graphics functions of the class 'customui' to generate user-defined gui windows to show analysis results as a figure. meanwhile, three service modules such as artificial neural network, mrna secondary structure prediction, and network and multi-threaded computing are implemented that can be used either as classes, user-friendly windows or toolboxes.

interface
the software consists of a main menu bar, a toolbar, and other module windows with a graphical user interface. the main menu bar that is located at the top of the screen contains all features and functions. as a collection of sub menu items, the 'project explorer' window provides quick links to other module windows in connection with the target codon usage table, the gene construct, and configuration for gene optimization strategy or parameters. the 'gene construct view' window shows a graphical representation of a gene construct including dna/amino acid sequence, gene construct component name, and size or location of bases. the 'toolbox' window has a configurable menu system where user-defined functions selectively can be added as menu items. double-clicking on one of menu items, a user can execute its algorithm. the 'workspace' window is a place where a sequence is analyzed and manipulated. many menu functions will work for the sequence in the 'workspace' window. for module development, there are four essential windows such as 'module library', 'module editor', 'property bag library', and 'property bag editor' windows. regarding the data file format, visual gene developer saves, exports, and imports all data files as a standard ascii text format that is easily accessible by other editing software. we disclosed the data file structure and allow anyone to make use of generated data files including project, script, property bag, codon usage table, and neural network files. furthermore, for convenient data exchanges between visual gene developer and other software such as microsoft excel™, sigmaplot™, or origin™, we provide copy and paste function at many locations of the software.

 gene design, analysis, and optimization
as one of the most important features, visual gene developer not only contains many useful functions to facilitate gene design and analysis but also provides versatile optimization strategies. since most basic functions are integrated into the main menu of the software, a user can easily manipulate and analyze a sequence. for example, the 'function' section of the main menu includes parsing, translating, reversing a sequence, and generating complimentary sequence as well as silent removal of undesirable sequences and codon/mrna optimization for a sequence in the 'workspace' window. the 'analysis' section of the menu covers calculating codon usage, cai, gc content, nc, searching multiple query sequence or repeated sequence, comparing two sequences, and predicting mrna secondary structure. to build a codon usage table for cai calculation or codon usage adaptation, the software has a function to directly import codon usage tables from cutg  website  and calculate rscu , rscumax, and w value , and also helps users build their own local codon usage database for highly expressed genes within genomes under translational selection. regarding sequence optimization, although a user can simply use basic functions mentioned above, the software provides a more advanced tool to solve complicated optimization problems. using 'gene construct designer' window, a user can design a gene construct that has several different gene construct components, configure optimization conditions in the 'configuration of gene optimization' window, and run the optimization process in the ''gene optimization' window. the optimization system is based on the combination of multiple algorithms. a user can select several different algorithms to design a unique optimization strategy. for example, the simplest combination may be using 'monte-carlo codon optimization' and 'check cai' functions. the former function is to optimize a gene and the latter is to screen out an improper gene when its cai value is lower than a setpoint. the implemented algorithms include performing silent removal, checking repeated sequences, restriction enzyme sites, gibbs free energy of mrna secondary structures, and etc.

 programming capability
as already mentioned, there have been numerous trials to improve heterologous gene expression by modifying the dna sequence, including codon optimization. however, it is still not clear what the best gene design criteria is because of insufficient knowledge of gene expression and regulation mechanisms at the molecular level, particularly for a wide variety of potential host organisms. therefore, currently there exists no generally accepted way to optimize gene designs and many researchers are trying to develop and improve gene optimization algorithms. of course each algorithm needs to be confirmed by experiments.

in order to provide a very flexible way to design a new algorithm, visual gene developer supports script language programming and allows users to develop new functions and plug-ins to expand the functionality of the software . for example, although several useful gene analysis index parameters such as cai, gc content, mrna secondary gibbs free energy, and nc are known and also available in visual gene developer, there are still many opportunities to identify other useful indices. to test a new finding, a user can manipulate algorithm and easily add the function to the software. to offer programming capability, the software has an integrated script engine and interface to process two popular script languages: vbscript  and jscript . a user can develop and test a new module in the 'module editor' window and manage modules in the 'module library' window to delete or edit modules. to facilitate code development, visual gene developer has a unique ui called a configurable property bag that can contain several different properties. as a window ui object where an end-user can set parameter values, a property bag can be defined by the user and associated with the module. using a specialized class, 'propertybag', a module developer can read or write a value of a property calling property name. in that way, a property bag works as a visual communication port between an end-user and a module developer to change the behavior of a module even though an end-user may not recognize user-defined algorithm and interface. two module windows  are used to define property bags. a user can deploy a module to a specified location of a window according to defined module category.

as platform software, visual gene developer provides more than  <dig> helper functions that are compacted into classes. essential classes and their functions are summarized in table  <dig> 

- access to workspace window
- calculate cai, nc, gc contents
- search query/repeated sequences
- do codon/mrna optimization
- get current gene construct index
- visualize predicted structure
- set input variables
- assign parameter array
 mrna secondary structure prediction
visual gene developer carries a sophisticated mrna prediction engine that can be used to optimize a gene construct by adjusting mrna binding energy or structure. the engine was developed as a class by embedding the stand-alone mrna prediction software called vienna rna secondary structure package developed by hofacker  <cit> . for module developers, visual gene developer provides a user accessible class named as 'mrnapredict'. the class contains many simplified functions that can be used with a single line code in visual gene developer's programming environment to predict mfe  mrna secondary structure, calculate mrna binding energy, visualize a predicted structure, or read raw data of the predicted structure. therefore, it is highly useful to develop more complicated optimization algorithm modules that utilize mrna structure prediction. for example, local gibbs free energy of mrna structure can be repeatedly calculated to generate a binding energy profile over a test sequence.

visual gene developer also includes simple menu functions and a specialized window form for mrna structure prediction. after putting a sequence into a textbox in the 'workspace' window or 'mrna structure' window and clicking on menu or 'calculation' button, a predicted mrna secondary structure will be quickly shown in the 'mrna structure viewer' window with a graphical representation of base pairing, probability of base pairing, energy, and locations. the 'mrna structure viewer' window also has a function to export the image or raw data to a clipboard.

with regard to mrna structure optimization, a common problem is that it usually requires a large number of repeated calculations of mrna binding energy. definitely, it takes a much longer time to find optimal mrna structure compared with codon optimization. to reduce the overall calculation time, the mrna prediction engine was designed and optimized for network and multi-threaded computing as will be explained later. utilizing several computers or multiple threads in a computer, multiple processes of mrna structure prediction can be performed at the same time to analyze multiple gene constructs or gene construct components. thus visual gene developer can be used to analyze mrna secondary structures of several thousand genes for genome-scale studies as well as gene optimization in itself.

 artificial neural network module
an artificial neural network model can be defined as a non-linear computational model that consists of a number of highly interconnected artificial neurons to simulate the structure and function of biological neural networks. the goal is mapping a set of input patterns onto a corresponding set of output patterns. it has been widely used to model complicated nonlinear systems that consist of multiple variables to predict data patterns.

due to the potential application of artificial neural network models for gene analysis and optimization, visual gene developer includes an artificial neural network prediction toolbox. the software has a configuration window to design the topology and adjust learning parameters and can directly import  a data set from the clipboard or typical ascii text format files. a typical feedforward neural network with a standard back propagation learning algorithm to train networks was implemented  <cit> .

as with other classes, visual gene developer allows a user to programmatically access the neural network toolbox and class. this means that users can utilize artificial neural network models when they develop new modules. for example, it is possible to predict gene expression levels of gene constructs in real time during the gene optimization process if a user has already developed and trained neural networks to correlate several different parameters to the expression level. in addition, the software contains useful functions to analyze the trained neural network map and test input and output variables as 2-d or ternary diagrams.

 network & multi-threaded computing
since gene analysis and optimization processes usually require extensive computations, it may take long time to find optimal genes if there are a lot of genes to analyze and/or if the gene analysis algorithms are complicated. for example, in the case of mrna secondary structure prediction, it takes about  <dig> seconds to calculate a global mrna secondary structure for a typical size gene of 1~ <dig>  kilo base pairs and it will take at least  <dig> days to generate mrna secondary structures of  <dig>  genes using a pentium  <dig> computer. in order to reduce the calculation time, a grid/parallel computing using a workstation or a supercomputer is very useful  <cit> . however, the problem is that it is not easy for non-experts to access to those computing resources.

network or multi-threaded computing can be a good alternative and visual gene developer supports this approach for the calculation of mrna structure or binding energy as well as user-defined functions. the term 'network computing system' generally refers a system that utilizes multiple computers that are connected to a network to perform computational tasks. the idea is that if several computers are available and they are connected to the internet, visual gene developer connects those computers and splits the server's work load to the connected computers. for example, in order to calculate mrna binding energy of  <dig> genes, visual gene developer's server transfer gene sequence data to  <dig> client computers and then receives calculated results from them. thus the theoretical processing time can be reduced to 1/ <dig> of the original processing time if data transfer time is neglected. on the contrary to network computing, multi-threaded computing means a utilization of multiple threads in a single core or a multi-core computer. the concept of multiple threads or multiple processes has a close relationship with multi-tasking in a computer. for reference, a computer or an operating system runs an application on a process and each process consists of at least one thread. as an actual programming code, a thread performs a certain job. however, in spite of great advantages of multi-tasking, it significantly reduces overall performance of a single application. to overcome this intrinsic problem, visual gene developer executes multiple client processes on a single computer and links them together on a local network. in this way, visual gene developer simulates a multi-threaded computing system that makes use of all computer resources more efficiently.

visual gene developer has a robust network & multi-threaded computing module with a user-friendly interface and provides a specialized class that contains several useful functions to monitor network connections. because all functions including data communication protocol were implemented into a single executable file, the software doesn't require any expensive hardware and has an ability to operate both a server and multiple clients at the same time. once computers are connected to the internet, visual gene developer allows a user to easily setup a server and clients in the 'server' window. on the client side, a user can add new clients by choosing 'add client' in the main menu. the 'job list' window shows the current status and includes functions to pause the service or cancel reserved jobs.

RESULTS
gene design
visual gene developer has a hierarchical and expandable system to define a gene construct and gene construct components. a gene construct is defined as a full length sequence that consists of several gene construct components as building blocks. each gene construct component has a collection of predefined properties that is referred to as gene construct component type. a property which has its own name and storage space works as a variable that can be used to store information such as dna sequence. a gene construct component type determines the data structure of a gene construct component, and each gene construct component can possess several different sequence or non-sequence data.

as an example, a gene construct may have  <dig> different gene construct components such as 5' hindiii restriction enzyme site, shine-dalgarno sequence, gfp coding sequence, and 3' multiple cloning site in consecutive order. each gene construct component belongs to one of the predefined gene construct component types such as 'coding sequence', 'non-coding sequence', 'restriction enzyme site', or 'multiple cloning site'. in case of 'coding sequence', it has  <dig> different properties whose names are 'original aa', 'original dna', and 'modified dna' where aa stands for amino acid. each property holds amino acid sequence or dna sequence information. in contrast to 'coding sequence', 'non-coding sequence' like shine-dalgarno sequence doesn't need amino acid sequence data. therefore, the gene construct component type of 'coding sequence' has only two properties: 'original dna' and 'modified dna'.

for reference, the 'original dna' sequence data can be used only for special purposes such as to calculate mismatched bases or codons between the original and variant sequences whereas 'modified dna' is inevitably used as an essential property that most modules utilize to modify, optimize, analyze, read, and write. with regard to sequence or data size, the software permits both variable length and null size  of a sequence. therefore a user can modify the sequence length during the gene optimization process and even generate an "invisible" gene construct component that will not be shown in the 'gene construct view' window by setting the 'modified dna' to be null.

furthermore, the software lets a user define new gene construct component types to hold unique information and functions. a gene construct component type can be easily designed in the 'propertybag editor' and 'module editor' windows. however, to be functional, it is usually necessary to develop new modules or modify existing modules to handle new properties.

as a main part of the user interface, the software has the 'gene construct designer' window. a user can design a gene construct by adding or deleting gene construct components, or changing a location of a gene construct component. when adding a new gene construct component to a gene construct, a user can choose a gene construct component type among the defined gene construct component types that are listed in a drop down list box in the window.

sequence analysis
visual gene developer includes basic functions to manipulate a sequence such as sequence parsing, back translation, and conversion into the reverse sequence or the complementary sequence. after putting the source sequence into a text box in the 'workspace' window, a user can click on one of the main menus to perform the function. otherwise, a user can develop a module to modify the input sequence in the 'workspace' window and then expose the module on the 'toolbox' window as a typical menu item. for gene analysis purposes, the software includes several gene analysis algorithms for calculating the cai, gc content, and nc, codon usage table, and performing sequence comparisons, repeated sequence searches, multiple sequence searches, and mrna secondary structure prediction. the software also supports a batch processing to analyze several thousands of genes. after setup in the 'gene optimization' and 'gene construct designer', a user can import a ascii text file that contains multiple sequence data and then check the analysis result in the 'gene optimization' window. owing to the programming capability, a user can make use of implemented classes and add new gene analysis metrics or predictions to visual gene developer.

 cai 
the cai has been widely used as an effective measure of synonymous codon usage bias. it was originally proposed by sharp and li to quantify the extent of codon usage similarity between a reference set of genes and a gene of interest  <cit> . the cai ranges from  <dig> to  <dig> where higher cai means highly codon biased or higher codon usage similarity between two different codon usage tables. in order to calculate the cai, we follow the same procedure and make use of the original definition given by sharp and li  <cit> . for reference, the software calculates the rscu  from a codon usage table of a reference gene and then computes wi  value for each codon by dividing rscu by rscumax. finally, cai value can be calculated using the following equation.

 cai= exp1l⋅∑i=118∑j=1kixij lnwij 

where xij is the total number of the jth codon for the ith amino acid in the test gene, wij is the relative adaptiveness of the jth codon for the ith amino acid in the reference gene, ki is the number of synonymous codons for the ith amino acid, and l is the total number of codons excluding aug  and ugg  in the test gene. as a special case, if wij is smaller than  <dig> , it is adjusted to  <dig>   <cit> .

 nc 
this quantity was originally defined by wright  <cit>  to measure a degree of codon bias. it is a number between  <dig> and  <dig> where  <dig> means extremely biased and  <dig> stands for equally biased between synonymous codons. in contrast to cai, the calculation of nc doesn't need a reference codon usage table. first of all, the software calculates codon homogygosity  of the amino acid  <cit> .

 f^i=n∑j=1kipj2-1n- <dig> 

where f^i the codon homogygosity of the ith amino acid, n is the total number of the amino acid in the test gene, ki is the total number of synonymous codons of the ith amino acid, and pj is the codon frequency of the jth allele .

the effective number of codons is then calculated by summation of the average homogygosities.

 n^c=2+9f^¯2+1f^¯3+5f^¯4+3f^¯ <dig> 

where f^¯m  is the average homogygosity for the amino acids whose total number of synonymous codons is m. for example, f^¯6=f^arg+f^leu+f^ser∕ <dig> 

as wright suggested, if some amino acids are missing then visual gene developer computes the average homogygosity by taking an average of homogygosities of amino acids present in the test gene. if isoleucine is absent or rarely used, fuglsang's estimation is used to calculate f^¯ <dig> <cit> .

 f^¯3=f^ile=2f^¯2-1-1+23f^¯4+13-1+25f^¯6+35- <dig> 

 repeated sequence search
the software allows a user to identify repeated sequences in a test sequence. it detects not only forward directional and backward complimentary repeated sequences but also palindromic sequences and consecutively connected repeated sequences. in order to find repeated sequences, a moving window method was employed. the algorithm generates a short sequence clipped from a test sequence and then compares the partial sequence with the test sequence to find matched locations. the search process is repeated while the moving window scans along the test sequence. when the scanning is completed, potentially duplicate findings are removed if they are already included in other findings. the feature is named as the 'smart filter' in the 'search sequences' window.

 multiple query sequence search
this function was developed to identify locations of query sequences within a sequence. a user can input a set of multiple query sequences or restriction enzyme names separated by tab, comma , or carriage return  in the 'search sequences' window. for in-depth analysis a query string is split into multiple strings of single query sequence. in case of restriction enzyme names, they are converted into dna sequences. after performing repeated searches for all query sequences in a test sequence, the software shows detailed information about the total number of occurrences and their locations in a gene for every query sequence. a user can choose one of a predefined sequence set such as common restriction enzyme sites, potential intron cryptic splice sites or polyadenylation signal sequences.

 profile calculation of cai, mrna gibbs free energy, or gc content
the software contains  <dig> implemented modules that are used to calculate a profile of cai, mrna binding energy, or gc content of a test sequence. their algorithms are quite similar between them as the moving window approach was equally adopted and their codes were developed from the same template code. in general, any single calculation such as gc content can be repeatedly performed while a moving window is sliding over a test sequence. the procedure is initiated when a moving window is located at the first base of the test sequence. for example, mrna binding energy of the first  <dig> bases is calculated if the size of the moving window is set to be  <dig> bases that can be adjusted by the user. after the first calculation, the moving window steps forward to the next location such as to the 11th base of the test sequence if the step size of the moving window is  <dig> bases. in this way, the rna binding energy is repeatedly computed at an interval of  <dig> bases until the moving window arrives at the end of the sequence. to generate data for a profile plot, both the location of the moving window and its corresponding mrna binding energy are recorded as a table format. since the codes were written in vbscript, a user can easily modify source codes to develop new profiling functions.

sequence optimization
visual gene developer contains useful modules to optimize a gene construct in terms of codon usage, mrna binding energy, known conserved sequence, or undesirable sequence. owing to programming capability, a user can develop new modules utilizing simplified helper functions of the classes mentioned earlier.

 codon optimization
the software provides a predefined module that is based on a well-known monte-carlo simulation or a predefined probability table  <cit> . it utilizes a codon usage table and replaces original codons with new ones while maintaining the identity of the same amino acids. to be specific, visual gene developer not only has a function to import codon usage tables from cutg  but also provides a manual edit mode for the target codon usage map and allows a user to generate a local database of reference sets of optimal codon usage tables. the software automatically calculates the rscu, rscumax, and wi values, and then generates a look-up table  of synonymous codons. for example, if alanine has four synonymous codons such as gca, gcc, gcg, and gct whose expected fractions are  <dig> ,  <dig> ,  <dig> , and  <dig> , respectively, the lut will consist of  <dig> gcas from  <dig> to  <dig>   <dig> gccs from  <dig> to  <dig>   <dig> gcgs from  <dig> to  <dig>  and  <dig> gcts from  <dig> to  <dig> in a memory array. finally, one of  <dig> codons is randomly chosen and then it replaces the original codon. by utilizing the look-up table, it is possible to perform codon optimization very quickly. in addition, the software has a pre-defined function that allows a user to keep track of changes in codon usage bias as a graphical representation. meanwhile, since the current version of the software doesn't have a built-in database of optimal codon usage maps of highly expressed genes, a user may need to rely on other available sources including papers and web databases where a user can get an optimal codon usage map for a specific host genome and then put it into visual gene developer.

 mrna optimization
in order to optimize a gene in terms of mrna binding energy, the algorithm was developed utilizing both mrna prediction and codon optimization modules. at the code level, an original sequence is continuously modified until its gibbs free energy is in a specific range given by minimum or maximum gibbs free energy where the modification refers to synonymous substitution. with regard to the modification strategy, the simplest approach is that the number of mutations is gradually increased one by one when the calculated gibbs free energy is out of range. meanwhile, the base module was also used to develop more complicated modules. for example, a binding energy profile of a long test sequence can be optimized by repeatedly applying the base algorithm to all local sequences with a moving window method. in this way, all local mrna structures can be optimized while minimizing the number of base changes. similarly, a user can increase or decrease binding energy at specific locations in a sequence. visual gene developer has a specialized window for mrna optimization for a typical user and provides related class functions for a module developer.

 removal of undesirable sequences
the coding region of a gene may include undesirable sequences such as restriction enzyme sites, potential polyadenylation signal sequences, or cryptic splice sites. visual gene developer provides a function to remove such unwanted sequences without changing the resulting amino acid sequence. the algorithm is based on the synonymous substitution and similar to that for codon optimization except it replaces only a few codons with correspondent synonymous codons in the target sequence region that needs to be modified . the first step is to identify the location of the target dna sequence in a gene and then determine the location of the site for synonymous substitution. to simplify the substitution process, terminal sequences of the target sequence are truncated if they are located outside of complete codons. the current version of the software carries  <dig> relevant modules that are written in vbscript. a user can easily remove undesirable sequences including predefined potential polyadenylation signals and intron cryptic splice sequences.

optimization process
to help users design unique optimization processes, visual gene developer has a versatile and configurable optimization strategy and interface. first of all, the optimization process is based on a novel combination of multiple modules. each independent and fully functional module does a simple job like codon optimization or silent removal. by integrating individual modules into a comprehensive optimization process, it is possible to implement a more complicated and diverse gene optimization strategy. a user can easily add new modules by choosing one of the listed algorithms in the 'configuration for gene optimization' window. at the same time, a user can determine their priority or the order of module execution. for module development, there are  <dig> different types of optimization modules such as 'sequence optimization', 'mrna structure optimization', 'gene manipulation', 'constraint' and 'search strategy'. especially, 'search strategy' belongs to a global optimization module that determines the optimization process and controls all other modules.

secondly, the software has an ability to generate and handle a large quantity of candidate gene constructs that satisfy the user's gene design criteria. this is important because the number of possible variant genes is practically infinite even after codon, mrna structure, or utr optimization in spite of screening out of undesired gene constructs. simply, the number of possible variants of a gene can be calculated to be  <dig> n if we assume equal probability between  <dig> amino acids where n means total number of amino acids of the gene and  <dig>  is an average number of synonymous codons of  <dig> amino acids that have multiple codons. for instance, if a gene consists of  <dig> amino acids, total number of possible variants is about  <dig>  ×  <dig>  one cycle of the optimization process will generate single candidate gene constructs and multiple cycles will produce many candidate gene constructs. a user can check all generated gene constructs in the 'gene optimization' window. as one interesting feature of the software, a generated gene construct can have its origin like a relationship between mother and daughter, and a user can specify a source gene construct for the next round of the optimization process. the option is useful to find desirable sequences step by step in a short time.

thirdly, the software has a built-in screening system to remove undesirable gene constructs. a researcher may prefer using active processes such as silent removal of unwanted sequences. however, the screening process can be a faster and simple way to find good candidate gene constructs. any designed modules that are registered as 'constraint' type will be used to determine whether a gene construct satisfies a certain set of criteria or not. if a module returns a 'not pass' value, the current gene construct will be discarded.

 excluding query sequences or specified restriction enzyme sites
the purpose of the module is to avoid undesirable dna sequences including potential cryptic splice sites, polyadenylation signal, and restriction enzyme sites. when those sequences are found, the gene construct will be excluded from the candidate gene construct list.

 checking stability of mrna secondary structure
this algorithm is a modification of the 'mrna gibbs free energy plot'. it is used to analyze mrna secondary structures of all partial sequences of a sequence. if the calculated gibbs free energy of a local sequence in a moving window is lower than a threshold value, the module returns 'not pass' value and consequently the gene construct will be screened out.

 removing repeated sequences
in order to prevent repeated sequences in a gene construct, the module is developed to count the total number of repeated sequences in a sequence. if the number is more than a prescribed set point, the gene construct will be ruled out.

comparison with other similar web servers and software
basically, most available software including visual gene developer share a similar codon optimization strategy. monte carlo algorithm or 'one amino acid-one codon method' is frequently adopted  <cit> . for high gene expression, several programs such as gene composer, gene designer, jcat, optimizer, and synthetic gene designer include optimal codon usage maps of highly expressed genes. regarding mrna secondary structure optimization, gene composer and visual gene developer carry the most sophisticated modules. both software have functions to eliminate stable mrna hairpin structure and control gibbs free energy utilizing advanced mrna folding algorithms. geneoptimizer, gene designer, gems, and jcat don't calculate gibbs free energy of mrna folding. however, they indirectly eliminate potential mrna structure sequences by analyzing sequence repetitions or calculating energy scoring functions in a short range of a test sequence. the other software tools such as codon optimizer, dnaworks, dynavacs, genedesign, optimizer, synthetic gene designer, and upgene don't have a function to predict mrna secondary structure and don't perform mrna optimization that means the use of gibbs free energy analysis to assess the stability of mrna secondary structure. compared with other available software, visual gene developer has several novel implementations that have not been implemented elsewhere such as artificial neural network modeling, integrated programming environment using vbscript and jscript , network/multi-threaded computing, and sophisticated batch analysis and optimization process for multiple gene construct candidates. however, one of the limitations is that visual gene developer is platform-dependant as a microsoft windows™ application whereas other software supports multiple platforms or web browsers . in addition, further development is needed to include other useful features such as a built-in database of codon usage tables of highly expressed genes or robust regression toolboxes like pls  or svm  model that have not been implemented yet.

CONCLUSIONS
as an emerging research area, synthetic gene design studies have demonstrated that well designed gene constructs can greatly improve gene expression level. not to mention that good software is definitely an essential tool to optimize a gene or discover new gene design optimization criteria. visual gene developer offers a variety of built-in features as well as the ability for the user to incorporate new functions. the software's framework is well designed and the built-in design concepts or features are good examples that can inspire the development and incorporation of new modules by other workers, including unique optimization algorithms for complicated non-linear, multivariable systems.

availability and requirements
visual gene developer is available for free download at http://www.visualgenedeveloper.net. the website provides a full description of the software and functions, and includes helpful tutorials covering common gene design approaches to custom module development. the software supports windows xp/vista/ <dig> and requires at least an intel pentium 3-class processor or equivalent working at  <dig> mhz and  <dig> mb of ram.

authors' contributions
skj conceived and developed the software. skj also wrote the manuscript and built the software website. km initiated the project and provided feedback on the software development and manuscript. both authors read and approved the manuscript.

