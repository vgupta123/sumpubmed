BACKGROUND
traditional network visualization
despite the increasing importance of analyzing and understanding very large networks of data, the traditional way of visualizing networks has difficulties scaling up, and typically ends up depicting these large networks as “hairballs”. this traditional approach does indeed have a deeply intuitive foundation: nodes are depicted with a shape such as a circle or square, which are then connected by lines or curves that represent the edges. however, although there are many different ways to apply this basic underlying idea  <cit> , it needs to be revisited in light of current and emerging needs for understanding increasingly complex networks.

the traditional way depicting networks has the following characteristics:


•though nodes are typically depicted as small two-dimensional glyphs, they are, in essence, zero-dimensional points positioned in two-dimensional space.

•edges are shown as lines or curves, i.e. essentially one-dimensional objects, positioned in the same shared two-dimensional space.

•when there are many edges to or from a node, they are all converging on a single zero-dimensional point. furthermore, since node locations are not constrained, overlapping zones of edge convergence result in unavoidable ambiguity, as do edges that may intersect intervening nodes between the two true endpoints.

•since edges are arbitrarily positioned, they can easily overlap each other, and invariably create a huge number of arbitrary, meaningless intersections that can completely obscure the paths of individual links.

•the addition of each new edge to the network degrades the existing presentation, as the edge will typically overlap existing network features. this property means the traditional approach is inherently unscalable.

biofabric visualization technique
biofabric tackles the problem of depicting large networks by changing the underlying representation. figure  <dig> illustrates how biofabric renders a network of yeast protein-protein and protein-dna interactions with over  <dig>  nodes and  <dig>  links. this is the yeasthighquality.sif sample network distributed with the cytoscape  <cit>  download  <cit> ; it is based upon  <cit>  and  <cit> .


the biofabric approach has the following characteristics:


•the key feature is that nodes are represented as one-dimensional horizontal line segments, one per row.

•edges are represented as one-dimensional vertical line segments, one per column, terminating at the two rows associated with the endpoint nodes.

•both ends of a link are represented as a tiny square. this provides sufficient contrast to make the ends of the link stand out even at large scales. in the case of directed edges, the appropriate end is tagged with an arrowhead.

•edges are unambiguously represented and never overlap. in networks that have multiple edges between the same nodes, i.e. representing different types of relationships, all edges show up clearly.

•as nodes are represented as horizontal lines, there is no requirement that all edges converge upon a single point, allowing for complete flexibility in where a link is drawn. links can originate, and terminate, anywhere along the length of the node segment. this flexibility introduces the powerful ability to create sets of links that share some semantic property and depict them as discrete groups arranged horizontally in the visualization.

•the addition of a new edge just increases the width of the visualization, and does not degrade the existing presentation in any fashion. and increased width can be thought of as simply adding pages to a book; the network is being represented as a fundamentally linear, sequential entity, where the horizontal scroll bar provides the basic navigation tool for addressing the entire network.

•edges are drawn darker than nodes; this has the effect of emphasizing the links and making them appear to float in front of the nodes. so despite the existence of a vast number of orthogonal intersections, links and nodes are unambiguous.

•the visualization technique produces a distinct edge wedge for each node, created by the close-set juxtaposition of the parallel links. the wedge provides clear visual cues about how the node is connected, and how it compares to other similar nodes.

•a set of  <dig> colors is used, not randomly, but in a repeating cycle to render node and edge segments. colors are not used to apply semantic meaning to network elements, but are crucial for providing a framework that allows the user to visually trace features over long distances. also, the use of cycling insures that antialiased rendering will produce larger-scale color patterns that provide useful visual cues even when individual links cannot be discerned.

•note that the traditional technique overloads the two-dimensional plane, using the same space to represent both nodes and edges. biofabric effectively segregates the plane into two separate one-dimensional spaces, and assigns each space to either nodes or edges; the imposition of orthogonality and the use of judicious rendering allow the user to visually distinguish the two. thus, biofabric can provide additional clarity of the network structure while using the same underlying two-dimensional resource.

previous work
using lines to depict nodes has appeared previously in the literature. mcallister  <cit>  used the technique to illustrate an algorithm for the linear arrangement problem , which finds an ordering of nodes arranged along a line that minimizes the sum of the edge lengths in the graph. in this instance, it is a natural representation that allows the edges to be clearly shown despite the one-dimensional nature of the problem. another common use where nodes have a linear representation is in unified modeling language  sequence diagrams, where objects have an associated vertical lifeline <cit> . however, in that context, the lines are specifically being used to represent the objects over the passage of time.

contrast to adjacency matrix
it is also useful to contrast biofabric with another common method of visually representing a network: an adjacency matrix. for a network of n nodes, the matrix is laid out as an n x n grid of points, symbols, or cells. in general, each node m is assigned to both row m and column m. each edge in the network between node r and node c is then depicted with a symbol in row r and column c. though this approach has the powerful advantage of being unambiguous, it still suffers from some critical shortcomings:


•the area of the representation increases as n <dig> 

•many large networks are sparse; a network with  <dig> nodes has over  <dig> possible edges, and thus  <dig> edges would only have one edge cell filled for every thousand available spots. the depiction of the network is mostly empty space.

•the representation of edges as essentially zero-dimensional points gives them much less visual impact than one-dimensional lines, yet the edges in a network are arguably the essential aspect that needs to be conveyed to the viewer.

contrast to power graph analysis
various other techniques have been employed to try and handle the scalability problem; one such technique is power graph analysis  <cit> . the method explicitly identifies recurring network motifs  and uses simplified graphical representations for these structures that implicitly represent a large number of edges without needing to render them. this clever method can result in a significant edge reduction, but still has the same limitations as the traditional method for the remaining edges that still need to be drawn. note that biofabric can use some of these same simplifications, such as symbolic representations of cliques, as well. one planned future enhancement for the software will allow cliques to be represented compactly as multiple endpoints glyphs on a single vertical segment. variations on this technique could also be used to depict hyperedges.

implementation
platform and libraries
biofabric was quickly built using the pre-existing java code base that has been developed for biotapestry  <cit> , a java application for modelling and visualizing genetic regulatory networks. thus, it uses many of the same core java libraries that biotapestry is built upon: java swing, java2d, and java imageio.

the java2d library proved to be an excellent platform for biofabric development, particularly due to its antialiasing support. this is important because the biofabric approach is prone to aliasing artifacts: it involves rendering many very tightly spaced parallel lines, which are being drawn with a repeated cycle of colors. in fact, with large networks and full-network zoom levels, there are multiple lines  being rendered through each pixel. yet it was not necessary to spend any development time working on specialized low-level, resolution-dependent pixel coloring code to handle this; the standard java2d draw() method was sufficient, in combination with setting the corresponding java2d renderinghint to value_antialias_on. the only caveat that has cropped up so far is a requirement to use java  <dig>  on apple macs to get the desired network display. with java  <dig>  on the mac, the biofabric networks appear too light compared to all other platforms , yet this problem disappears using java  <dig> .

rendering cache
biofabric is intended to provide useful visualization of a network with  <dig> or even  <dig> edges. in order to keep rendering times down for the large-scale zoom levels, biofabric starts rendering the network to image buffers in memory as soon as the network is loaded from a file. with the exception of the single top-level zoom image, a grid of image tiles is used to render each zoom value above the level where the program can get adequate performance using immediate mode rendering. after the first two zoom levels are cached, the file load is completed and control passes to the user. from then on, subsequent user pans and zooms are handled using tiles from the image cache. if a needed tile has not yet been generated, a low-resolution tile is created immediately from an available large-scale existing image tile, while the needed final high-resolution tile is queued up for creation on a background thread. those results are then swapped in as they become available. this approach allows the program to remains responsive even when dealing with large numbers of links and edges, yet the user experience is familiar to users of online resources such as google maps  <cit> .

“shadow links” can improve the user’s understanding of the network
biofabric has two different modes for rendering network edges. in the standard mode, each edge appears only once in the network. this has the advantage of being clean, compact, as well as being consistent with the traditional way that networks are depicted: one line is drawn per edge. however, the addition of a shadow link mode provides a powerful alternative visualization technique.


link grouping
link grouping is a biofabric feature that leverages both the wide flexibility for assigning columns to network edges, as well as the advantage of edge wedges for highlighting differences in node connectivity. if the user has assigning unique suffix tags to the link relation descriptors that partition the edges into distinct sets, biofabric can use these tags to order and layout the edges incident on each node according to this scheme. as case study iii will illustrate below, this allows the user to unambiguously and directly compare how the connectivity of a node, or a set of nodes, varies across multiple networks.

layout algorithms
a network layout for biofabric is very simple, and just consists of: 1) the linear ordering of the n nodes, assigned to rows  <dig> to n, and 2) the linear ordering of the e edges, assigned to columns  <dig> to e. but this simple framework still provides a variety of different, powerful ways to organize a complex network.

default layout
the default layout was designed to provide a fast technique for organizing the network in an understandable and useful fashion. it is simply a breadth-first traversal of the network from most connected component, where the neighboring nodes are visited in the order determined by their degree. the network shown previously in figure  <dig> has been laid out using this technique. some general principles are:


•the algorithm works in two passes, where the node rows are assigned first, followed by the edge columns.

•all edges are treated as undirected, even with directed networks.

•duplicate edges  are ignored when calculating node degree.

•ties are broken using lexicographic ordering of node names.

for the base case  the algorithm proceeds as follows:

node assignment:

 <dig>  set row  <dig> as the next available row.

 <dig>  find the highest degree node not yet processed, and assign it to the next available row. make that row the current row; increment the next available row.

 <dig>  take the node assigned to the current row and order its neighbors based upon their degree, highest degree first.

 <dig>  traversing the neighbor nodes using that order, if the node has not yet been assigned, assign it to the next available row and increment the next available row.

 <dig>  increment the current row. if a node has been assigned to that row, go to step  <dig>  if not, go to step  <dig> 

edge assignment:

 <dig>  set column  <dig> as the next available column. make row  <dig> the current row c.

 <dig>  for current row c, get all the unassigned edges for the node in that row. note that since we are not dealing with shadow links, all unassigned edges must connect to rows ≥ c.

 <dig>  for each row r ≥ c, create a set s of edges incident on c and r. order these sets by increasing row number r, so that edges will be assigned in order of increasing length.

 <dig>  iterating through the ordered list of sets, for each set s, order those edges in s based on lexicographic ordering of the link relation description, and assign them to the next available columns in this order; increment next available column appropriately. if there is a pair of directed edges with the same link relation description, downward links are assigned before upward links.

 <dig>  increment the current row, and go to step  <dig> 

connectivity layout
one of the characteristics of a biofabric network is that it creates a linear ordering of the nodes, and sometimes it can be useful to be able to visually compare sets of nodes with similar connectivity, thereby being able to quickly assess the similarities and differences between these nodes. biofabric’s connectivity layout is designed to support this capability; figure  <dig> shows a detail of a network laid out in this fashion.


for a network of n nodes and e edges, the algorithm first tags each edge with a coefficient that represents the similarity between the connectivities of the two endpoints nodes. two methods are available: cosine similarity  <cit>  or jaccard similarity  <cit> . note that in both cases, directed edges are treated as undirected, so the similarity coefficients are symmetric.

cosine similarity
each node m has associated connectivity n-vector cm =  where xj =  <dig>  iff the network has an edge  or , else xj =  <dig> . for an edge e: , the cosine similarity se is:

  se=cj·cm/cjcm 

jaccard similarity
each node m of degree d has an associated connectivity set of neighbor nodes nm = . for an edge e: , the jaccard similarity se is:

  se=|nj∩nm/nj∪nm| 

nodes are brought into the set of placed nodes p one at a time, only considering nodes from the front f, which is the subset of nodes in the set of unplaced nodes u that have at least one edge to a node in p. a simple approach would be to select a node from f with the highest similarity coefficient of all the edges from p to f. but if the algorithm is in the process of “mining” a region of the network that is richly interconnected, the simple approach would tend to easily abandon this growing chain of similarly connected nodes if a slightly higher similarity coefficient appears anywhere else along the front. to create longer runs of similar nodes, it is preferable to make the algorithm “sticky”.

to achieve this, the algorithm maintains an ordered chain of the r most recently used nodes, as well as a threshold fraction  <dig>  ≤ t ≤  <dig> ; both these values r and t are user-configurable. if the highest coefficient sb to the front is assigned to a link from node a, but there is a coefficient sd assigned to an edge from node c in the chain to the front, such that sd >sb * t, the node connected to c would be added to the placed set p. otherwise, if the node in the front connected to a wins and is placed in p, the algorithm empties the current chain. regardless, the connected node  in p is either added in the first slot, or  moved up to the first slot of the chain, and the newly added node is inserted into the second slot in the chain, pushing all other elements back. if the new addition causes the chain to exceed the maximum size, the least recently accessed node is removed from end of the chain.

interoperation with other software tools
cytoscape  <cit>  is a powerful and popular platform for analyzing networks, and the platform supports an extensive ecosystem of users and plug-in developers, so it is highly desirable to be able to leverage this platform. the gaggle  <cit>  is a software system that allows users to exchange data between heterogeneous, independent software tools, and the cygoose plug-in allows cytoscape to work with gaggle. since biofabric is a tool that supports a unique way of visualizing, navigating, and exploring networks, but is not a tool for supporting computational analysis, it has been gaggle-enabled to allow it to work with, and leverage the strengths of, these other analysis tools. using gaggle, networks and selections can be exchanged between biofabric and other gaggle-aware tools running on the user’s desktop. to support this, a gaggle-aware version of biofabric can be launched from the biofabric web site using java web start.

RESULTS
biofabric advantages
the following four case studies highlight the advantages of using biofabric to explore large networks. some of these advantages are:


•the ability to use a single, coherent, rational, unambiguous layout of an entire large network as a basis for navigating and exploring that network.

•a means of quickly assessing the connectivity of nodes through the depicted edge wedges.

•a superior way of unambiguously depicting the edge relationships in clustered networks.

•a way of visually identifying differences in network connectivity between multiple conditions through the use of link grouping and the connectivity layout.

•the ability to identify interesting network structures and properties at large scales through simple inspection.

networks need to first be imported into biofabric
the current incarnation of biofabric is designed to be a network viewer, not an editor, and thus networks need to be first imported either as a cytoscape tab-delimited. sif file, or using the gaggle network import method described above. in order to retain the final chosen layout and display options, the network can then be saved and reloaded as a biofabric .bif file, which is an xml-based format.

case study i: introduction to the biofabric interface using a large network
to illustrate how biofabric can be used to explore a large-size network, we will use the sample network data file human_interactome_may.sif  <cit>  available from the cytoscape web site; this file is described as combining interactions reported in several databases  <cit>  and papers  <cit> . the network has over  <dig>  nodes and  <dig>  links. by using the file → import → import sif with node attributes… command, the network definition can be imported simultaneously with the accompanying annotation file that supplies node names . once it is loaded, and the directionality of edge relationships is specified in a pop-up dialog, the biofabric application appears as in figure  <dig>  note that biofabric does not display duplicate edges, and so one of the edges in the .sif file gets dropped during the load.


in addition to the main network presentation panel, biofabric contains four other features in the main window:

 <dig>  mouse location: this thin bar is located immediately under the main network view, and reports the node row, link column, and node link zone currently under the mouse. in most cases, the node link zone can be thought of as the node associated with the edge wedge currently under the mouse.

 <dig>  network magnifier: this gives a magnified view of the network under the mouse, along with a listing of all the links that display an endpoint glyph in that magnified view. the magnification can be easily varied; at maximum magnification, detailed information about the visible link ends and nodes are shown on the view boundary. the magnifier is manipulated using the displayed key shortcuts, so it can be operated simultaneously alongside the mouse. when desired, the magnifier can be locked, thereby disconnecting it from the mouse, and panned and zoomed independently.

 <dig>  network overview: this panel always shows a fixed full-network view, while the current viewport, mouse location, and  magnifier location are shown in context.

 <dig>  network tour: this panel drives the network tour feature. the user can select a link endpoint, and then navigate orthogonally through the network. for example, buttons allow the user to jump along the current node row between adjacent link endpoints, or from one end of a link to the other. this tool allows the network features to be explored in a systematic, organized fashion.

note that figure  <dig> demonstrates that even zoomed out to the full network level, some features of the network stand out. for example, there are long, clearly visible stretches of similarly interacting proteins that turn out to be, for example, ribosomal proteins or rna polymerase proteins.


a subset view is then shown in figure  <dig>  this is a very useful tool for directly comparing nodes that may be widely separated in the main layout. even with runs of adjacent nodes, this view provides the valuable service of displaying a compact representation that squeezes out all the irrelevant rows and columns, while still retaining the exact relative positioning of all the network elements. to launch this subset view, the user does the following:


 <dig>  find interesting nodes, either by browsing or using the search tool. select each node either by clicking on the node row, or the node name. if using search, the results are selected already.

 <dig>  click on the add first neighbors to selection button on the toolbar, which adds the neighboring nodes, as well as the connecting edges, to the current selection.

 <dig>  click on the send selections to subset view button on the toolbar.

 <dig>  the subset view appears in a separate window, which behaves just like the main window, except that only one level of subset view creation is currently supported.

finally, figure  <dig> shows a network tour in progress. the user starts a tour either by clicking the choose start button and clicking on an edge endpoint, or  the start at selection button in the network tour panel. the current tour location is then indicated by a blue circle, and is also textually described in the tour panel. the tour panel buttons allow the user to either navigate to other edges incident on the current node , or to navigate to the distal node for the current edge . the user can change the zoom level as needed during the tour to maintain the desired level of context, but can always return to the exact current tour location using the tour zoom button.


case study ii: understanding clustered networks
the traditional network layout method is frequently used to depict the results of applying network clustering algorithms. while the proximity of clustered nodes provides a useful visualization, the edges are typically cluttered, so that the user cannot see the internal edge structure of the cluster, nor can she see where inter-cluster edges terminate. furthermore, edges just passing through a cluster can be mistaken as representing a non-existent relationship between clusters.

biofabric’s ability to segregate links into bundles of distinct functionality along the horizontal axis can instead create a clear and unambiguous representation of a clustered network. to illustrate this, we will use a network depicted in figure  <dig> of  <cit> , which presents clustering results for altered genes from the cancer genome atlas  data set applied to their underlying functional protein interaction network. a biofabric version of this network is shown in figure  <dig>  to create this presentation, the required node and link orderings were generated and then specified in two files, which were imported using the layout → layout using node attributes command followed by the layout → layout using link attributes command. this is necessary because biofabric does not yet have a built-in cluster layout algorithm. however, this layout was prepared externally by applying the default layout to each cluster separately, ordering the clusters by the cluster number used in the original analysis  <cit> , and assigning the remaining inter-cluster edges to the appropriate interstices between each cluster. two crucial aspects of using biofabric for presenting clustered networks stand out:


•nodes and internal edges in a cluster can be assigned to contiguous sets of rows and columns, creating clear and concise depictions of each cluster as it stands as an independent sub-network.

•the edges connecting clusters are shown as discrete bundles, completely separated from intra-cluster edges, and are assigned to target clusters in a logical, ordered fashion. edge endpoints are not obscured, allowing any primary inter-cluster hubs in each cluster to appear clearly in the depiction. additionally, there are no ambiguous inter-cluster edges that can create the false impression that two clusters are directly linked.

case study iii: visualizing the differences between cancer subtypes
the center for systems analysis of the cancer regulome  website  <cit>  provides a wealth of tcga cancer data, such as analyses of significant pairwise feature associations iidentified via standard statistical tests. these features are heterogeneous, and can include quantities such as gene expression, mutations, copy number variations, and clinical outcomes. by constructing networks of these associations, researchers can study how these heterogeneous features interact in the various cancer types.

one type of cancer studied is glioblastoma multiforme   <cit> , of which there are four different subtypes: classical, mesenchymal, neural, and proneural  <cit> . separate csacr pairwise feature association studies have been carried out for these four types, as well as a unified study that combines all four  <cit> . this case study will use these data to demonstrate how biofabric can graphically compare the differences between a set of networks; i.e. the differences in associations between these gbm subtypes. this example also illustrates how the researcher can visualize and linearly browse a very large network. of course, the best way to actually find a comprehensive list of these differences at this scale is not to browse this network, but to use computational tools that calculate and compare node degree across the subtypes.

this example uses the pairwise associations of gene expression levels from the five different analyses, taking just those associations with a correlation coefficient of absolute value ≥  <dig> . these were all combined into a single network comprised of over  <dig>  nodes and  <dig> edges, which were written to a .sif file and imported into biofabric. additional file  <dig> is a biofabric file for a reduced-size version of the resulting network, with a coefficient threshold of  <dig> . the full-size network file used here is available from the biofabric web site. shadow links were activated , and the connectivity layout was applied. most importantly, the edges for each of the five different studies were annotated with a unique tag, and this tag was used to group the edge using the previously described biofabric link grouping feature; the edge wedges of the five analyses are ordered left-to-right in the order listed above. the result is shown in figure  <dig>  as the biofabric network overview panel in the figure implies, little can be surmised from this particular full-network view, which has an aspect ratio of  <dig> . however, this vast network is now represented as basically a linear, sequential catalogue. the connectivity layout has usefully imposed a systematic low-level structure onto this very large network, as nodes with similar connectivity are located adjacent to one another. furthermore, the node zone shading feature, in combination with link grouping, helps the user browse the different association patterns for each gene, as each gene typically shows five separate wedges, one for each analysis. figure  <dig> demonstrates how it is possible to simultaneously visualize the different association patterns across the subtypes for a large number of nodes even at the global scale. the user can slide the scrollbar, or drag the mouse while holding down the ctrl  key, and zoom in with the network magnifier, to systematically browse any part of the entire network in a linear fashion.


to show how networks can be visually compared in detail, we will focus on cd <dig>  which is known to be overexpressed in the mesenchymal subtype  <cit> . creating a first-neighbor subset network for cd <dig>  as shown in figure  <dig>  indeed reveals that only three of the subtypes, plus the unified analysis, seem to appear. on close inspection, the mesenchymal subtype does appear, but it consists of a thin wedge of only six associations. this is not necessarily unexpected for this analysis, since detecting a pairwise association of cd <dig> expression with other genes requires appreciable variation among the different patient samples. cd <dig> expression consistently fixed near a high level might therefore be expected to lead to a reduction of the number of pairwise associations.


exploring this cd <dig> subset model, the edge wedge shapes help to spot differences between the subtypes, and the presence or absence of an association for each of the various subtypes can be quickly scanned left-to-right along any node line. for any association, right-clicking on a link endpoint allows the user to launch a web browser for a user-defined hyperlink that has been previously specified in the edit display options dialog. 

in this particular example, a right-click launches a web application built on top of the csacr regulome explorer data portal  <cit>  that queries the tcga database and displays scatterplots of the underlying data for the five different analyses. this particular association shown in the figure, between the gene expression levels of cd <dig> and msn, actually only appears in the network for the classical and unified analyses; inspecting and comparing the different scatterplots provides insights into why this is the case.

case study iv: full-network shapes with the default layout
recall that the biofabric default layout algorithm is simply a breadth-first traversal of the network from the most connected component, where the neighboring nodes are visited in the order determined by their degree. keeping this in mind, a quick glance at a network that is laid out using this algorithm can provide useful insights into the structure and global properties of the network. to illustrate this, figure  <dig> presents three different random networks, which were all generated using the r igraph v <dig>  package  <cit> . the biofabric files for these three networks are included in additional file  <dig>  the first two networks are undirected erdos-renyi random graphs  <cit>  with  <dig> nodes; network a has  <dig>  edges, while network b has only  <dig> edges. in contrast, network c is an undirected barabasi-albert scale-free graph  <cit>  with  <dig>  nodes and almost  <dig>  edges. as would be expected, networks a and b show no discernable edge patterns, while the scale-free network shows a distinct sawtooth pattern for the edge wedges. a quick perusal of the network c edge wedges also allows the viewer to quickly estimate the fraction of previously visited and unvisited nodes being encountered at each step of the breadth-first search used in the layout.


biofabric lays out node rows and edge columns using a fixed, square grid. this feature means that the slopes of the upper and lower boundaries also provide visual clues about network structure. in particular, when the lower boundary is at a 45-degree angle, each newly added edge is adding one new node. but where the slope is zero degrees, each newly added edge is incident on a previous visited node. thus, network b, which has the same number of nodes as edges, has a lower boundary slope that is unsurprisingly approaching the 45-degree limit.

current limitations of biofabric
biofabric’s pervasive use of its fundamental underlying abstraction of nodes and edges as simple orthogonal lines has a significant advantage in being able to consistently represent a network at all scales. however, this approach does result in a very simple, abstract representation of the network, and so it currently lacks the expressive power that is available through the traditional method of representing networks when used on networks of medium size or smaller. for example, one area where these limitations are apparent is the representation of signalling and metabolic pathways, where rich symbol libraries for nodes and edges can succinctly convey significant amounts of information. the flexibility afforded by the traditional technique also means that important features such as information flow and paths  can be given particular emphasis for clarity, so such features can be more difficult to identify in a biofabric presentation.

perhaps some or all of these limitations can be addressed through further extensions to biofabric, including the additional development of new layouts techniques and tools for interactively investigating and illustrating network structures such as paths. these limitations can also be sidestepped if biofabric’s presentation technique were more tightly integrated as a complement to traditional techniques. allowing the researcher to toggle between traditional and biofabric visualizations inside a single tool such as cytoscape could do this, for example.

future work
much work remains to be done to leverage the new visualization technique introduced by biofabric, including improvements to the usability, scalability, and feature set of the first-generation implementation. some particular directions to pursue include:


•introducing compact representations of network motifs such as cliques.

•investigating new layout algorithms, perhaps applying existing heuristic algorithms for the linear arrangement problem, bandwidth reduction, and profile reduction  <cit> .

•extending the representation of nodes as lines in two dimensions into representing them as planes in three dimensions.

•incorporating a model hierarchy into the software, in a manner similar to that used in biotapestry  <cit> . this will allow complex models to be systematically organized into relevant subsystems.

•implementing navigational features, such as bookmarks, that leverage biofabric’s presentation of a network as an extended sequential representation.

•implementing metanodes to allow biofabric to support more complex network models.

•providing additional layouts methods and interactive tools to help the researcher better visualize network features such as paths . improving the network magnifier to give a more visual  sense of first neighbors will also help to provide a more intuitive sense of connectivity.

•porting the technique into browser-based technologies such as html <dig> canvas may prove challenging given the demanding graphics requirements, but will allow the method to be used by the emerging class of purely browser-based web applications.

finally, since the advantages of biofabric can be complementary to the advantages provided by traditional network presentation techniques, a combination of the two should provide the most expressive power. the new cytoscape version  <dig>  is designed to support alternate renderers , and this provides an avenue for creating such a combined tool. it would also be fruitful to investigate how one could seamlessly move back and forth between the two types of representations.

CONCLUSIONS
biofabric is a new network visualization software application that challenges the traditional underlying concept of how network nodes and edges are represented in two-dimensional space. in doing so, it gives researchers a powerful tool that provides an organized, comprehensible, scalable way of visualizing large and complex networks.

availability and requirements
project name: biofabric

project home page: http://www.biofabric.org/index.html

operating systems: cross-platform. windows and mac version  <dig> . <dig> executables are provided in additional files  <dig> and  <dig>  respectively. download the most current executables from the project home page.

programming language: java

other requirements: minimum requirement is java  <dig>  although code outside of the gaggle subsystem can be compiled using java  <dig>  if desired. the large network presented in case study iii required the java heap allocation to be set to  <dig> gigabytes to import and layout, with the corresponding appropriate hardware. on mac os x, java  <dig> is required to render the networks with the desired brightness.

license: lgpl v  <dig> . some of the toolbar image files are freely distributed under a separate license from sun microsystems, now oracle. the launch4j wrapper  <cit>  used to create the windows executable is licensed under the bsd and mit licenses. the author of the code forming the basis for browser launching  <cit>  has declared it to be public domain. per the lgpl license, the source code for version  <dig> . <dig> is provided in additional file  <dig> 

any restrictions to use by non-academics: none

competing interests
the author declares that he has no competing interests.

authors’ contributions
wjrl conceived, designed, and wrote biofabric, developed the case studies, and wrote the manuscript.

supplementary material
additional file 1
file format: zip archive containing a biofabric.bif  file. title of data: human interactome network for case study i. description of data: this is the biofabric file of the network built from the human_interactome_may.sif file and associated node annotations file obtained from  <cit>  and shown in case study i. unzip the file and extract the humaninteractomemayannotshadconn.bif file , which can be loaded into biofabric.

click here for file

 additional file 2
file format: zip archive containing a biofabric .bif  file. title of data: reduced network for case study iii. description of data: this is a reduced version of the biofabric file containing the tcga csacr network of paired gene expression associations for four different gbm subtypes  used in case study iii. the full file could not be included due to space limitations, so this only contains correlations with an absolute value ≥  <dig>  . however, as the illustrated cd44-msn associations have a correlation coefficient of  <dig> , they are not present in this file. unzip the file and extract the gexp_gbm_comb_6_5div_sha_connlo.bif file , which can then be loaded into biofabric. the full file can be downloaded from the biofabric project web site.

click here for file

 additional file 3
file format: zip archive containing three biofabric.bif  files. title of data: random networks for case study iv. description of data: these are the three random networks shown in case study iv. unzip the file and extract the three files , each can then be loaded into biofabric.

click here for file

 additional file 4
file format: zip archive containing the version  <dig> . <dig> biofabric.exe executable for windows computers. title of data: biofabric windows executable. description of data: this contains the biofabric application bundled for windows, configured with a maximum java heap space of  <dig> gb. as this is version  <dig> . <dig>  it is preferable to download the latest version of biofabric from the project web site.

click here for file

 additional file 5
file format: mac disk image. title of data: biofabric mac os x executable. description of data: this disk image contains the biofabric application bundled for mac os x, configured with a maximum java heap space of  <dig> gb. as this is version  <dig> . <dig>  it is preferable to download the latest version of biofabric from the project web site.

click here for file

 additional file 6
file format: gzipped tar file containing packages of java source code, image, and property files. title of data: version  <dig> . <dig> biofabric source code. description of data: this file contains the source code needed to build biofabric. if gaggle support is not needed, it can be compiled with java  <dig> .

click here for file

 acknowledgements
the author was supported by national institute of general medical sciences grant gm <dig>  and award number u24ca <dig> from the national cancer institute. this content is solely the responsibility of the author and does not necessarily represent the official views of the national institute of general medical sciences, national cancer institute, or the national institutes of health.

thanks to guanming wu for providing the network analysis results used for case study ii, and to hamid bolouri for the apt characterization of biofabric used in the title of this article. thanks also to ilya shmulevich, hamid bolouri, hector rovira, and brady bernard for reviewing and commenting on the manuscript.
