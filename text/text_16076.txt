BACKGROUND
the volume that a protein occupies in solution is an important thermodynamic parameter: the change in protein volume upon unfolding defines the changes in stability as a function of pressure, Δv = t. experimental studies have shown that such changes upon unfolding of proteins are small and range from − <dig>  to + <dig> %  <cit> . the volume of a protein in solution can be divided into its protein-solvent interaction volume and geometric volume. the protein-solvent interaction volume is affected by the hydrophobicity, polarity, and charge distribution of surface residues of the protein. the geometric volume is the solvent-excluded volume, which is enclosed within the solvent-excluded surface . the solvent-excluded surface was termed the molecular surface by richards in  <dig>  <cit> . in this paper, we will refer to the solvent-excluded volume as the molecular surface volume . the molecular surface volume comprises of the intrinsic volume of protein atoms termed van der waals volume , and the intramolecular void volume  that arises due to imperfect packing between protein atoms . the solvent accessible surface is the surface delineated by the center of a solvent probe rolling around the protein. the volume enclosed by this surface is termed the solvent accessible volume . the volume enclosed between the solvent accessible surface and molecular surface is the envelope volume . it is well established that the voids in the native protein structure determine the pressure unfolding of proteins  <cit> . in this paper, we will focus on the calculation of the geometric volume of a protein enclosed within the molecular surface, which can be computed knowing the cartesian coordinates of protein atoms found in pdb structure files.figure  <dig> 
schematic diagram depicting surface and volume definitions. the solvent accessible surface is made by tracing out the center of solvent probes  rolled around the entire protein surface. the molecular surface definition cleanly separates geometric or solvent-excluded volume  from the envelope volume  reflecting to solute-solvent interactions. the molecular surface volume  is the sum of the van der waals  and void volumes .



currently there are several algorithms to calculate geometric volumes of proteins. they can be divided into three distinct categories. the first is 3d grid-based calculations and include voidoo  <cit> , avp  <cit> , 3 v  <cit> , voronoia  <cit> . the second category uses analytical methods and includes msroll  <cit> , vorlume  <cit>  and alphavol  <cit> . the third category includes calculations based on delaunay triangulation such as vadar  <cit>  or monte carlo method such as mcvol  <cit> . each of these methods has its own advantages but more importantly some disadvantages. for example, 3d-grid methods have irreproducibility issues due to the positioning of protein structure on the grid. the delaunay triangulation does perform well in the protein interior but suffers from uncertainty of how protein boundaries are delineated. these issues are sometimes further amplified upon implementation in software packages that are usually written to evaluate a particular property .

several methods calculate vvdw and vsa. voidoo  <cit>  is a 3d grid-based algorithm that calculates the vvdw and/or vsa of a protein. vorlume  <cit>  and alphavol  <cit>  are analytical alpha-shape methods that also calculate vvdw and/or vsa. another method to calculate protein volume involves partitioning the space around each atom into voronoi polyhedra, as implemented by finney in  <dig>  <cit>  and richards in  <dig>  <cit> . however, this method does not calculate any of the volumes individually, but instead calculate the sum of the vvdw, vvoid, and portions of the ve. parts of the ve are assigned to surface atoms because the boundary separating protein and bulk solvent is drawn between the surface atoms and neighboring solvent molecules. thus, the boundary separating protein and bulk solvent is highly dependent on the method used for the placement of the solvent molecules. depending on the placement method, the volume and packing density of surface atoms will vary. since parts of the ve are grouped with protein atoms, it is impossible to separate hydration or geometric volume components from the total volume computed using voronoi polyhedra methods.

it is crucial to separate geometric and hydration volumes of a protein to understand the magnitude of contribution of each of these components to the total volume of a protein in solution. therefore, it is necessary to calculate the vms of a protein instead of vsa and vvdw. unfortunately, there are a limited number of non-grid based programs that can calculate vms. mcvol  <cit>  uses a monte carlo algorithm to approximate the vms of a protein, whereas msroll  <cit>  analytically calculates vms. however, both programs have inherent limitations. mcvol will underestimate vvoid when the diameter along the shortest axis of a cavity is larger than  <dig>  Å, because a point is considered part of the solvent if it is more than  <dig>  Å away from the surface of any protein atom  <cit> . msroll is extremely fast, but it suffers from lower robustness when encountering degenerate geometry. finally neither is available as a web-server. we present proteinvolume, a robust method to numerically calculate vms, vvdw and vvoid using a flood-fill algorithm to generate the molecular surface and fill the surface interior with high-resolution probes. volume probes can dynamically reduce their radius when needed, increasing the accuracy of numerical approximation.

implementation
proteinvolume is available as free-standing software as well as via a web-based interface from http://gmlab.bio.rpi.edu. below we describe the overall properties of the proteinvolume followed by the description of web-server.

surface generation
the surface of a protein is generated from the user provided protein data bank  coordinates using a flood-fill algorithm operating in the spherical coordinate system, analogous to rolling a ball on the surface of a protein. the furthest atom from the protein center of mass is selected as the starting atom. then, an exhaustive ray-sphere intersection test is carried out on all angles around the starting atom to find an unoccupied position for a probe with  <dig>  Å radius. this is the starting position for the surface algorithm. the starting spherical coordinates are converted into cartesian coordinates and then the surface is grown from that starting point using a flood-fill algorithm. a hashset is used to store all previously visited locations on each atom surface to prevent backtracking. to detect inter-atom surface probe collisions, all surface probes within nearby spatial bins are tested for distance below a minimum cutoff, the surface probe minimum distance . for reference, this method generates approximately  <dig>  surface probes for the native structure of ubiquitin  in ~2 seconds on a single core of an i7-3630qm.

volume calculation
the total volume and van der waals volume of a protein is also calculated using a flood-fill algorithm . the atom closest to the center of mass of the protein is selected as the starting point. a volume probe is then placed at the center of the starting atom and volume probes are grown outwards until they are  <dig>  Å away from any surface probe, thus filling the molecular surface. upon collision with any surface probe, a volume probe is replaced by  <dig> new volume probes with half its radius as to increase the volume calculation resolution. this process continually repeats itself upon collision until the new volume probe is less than the preset minimum volume probe radius. volume probes are treated as cubes for the purposes of volume calculations. the sum of all volume probes is calculated and reported as the total protein volume . van der waals volume is also calculated during the same step as the total volume calculation procedure, but with an additional check of whether the volume probe is within the van der waals radius of a protein atom. a probe which lies on top of a van der waals boundary will be randomly accepted based on its magnitude of overlap with the atom. this increases the accuracy of the van der waals volume calculation and reduces the volume underestimation of numerical integration methods. the sum of all van der waals volume probes is calculated and reported as van der waals protein volume . void volume, vvoid, is calculated as the difference between the total volume and the van der waals volume.figure  <dig> 
cartoon representation of probes filling the voids inside a protein. for illustrative purposes this picture was generated with the probe size  fixed at  <dig>  Å. actual calculations were run with the starting probe size of  <dig>  Å .



optimizations
grid-based spatial binning is employed to reduce the number of collision checks when placing a new volume probe in the protein. the entire 3d coordinate space is divided into cubic spatial bins of 2 Å diameter. this value is slightly larger than the radius of the largest protein atom which will minimize the number of possible bins an atom can occupy. each existing protein atom and generated surface probe is added into a hashmap of spatial bins before volume calculation. the data structure of the hashmap is a spatial bin index and an arraylist of atoms/probes. the spatial bin index is calculated from the  <dig> possible extreme edges of each sphere and duplicate bin indices are ignored. when testing for a collision between volume probes and surface atoms or nearby protein atoms, only spatial bins surrounding the volume probe are selected for collision testing as to reduce computational time. this results in an overall runtime complexity of o, where n is the number of atoms in the system.

language and libraries
proteinvolume was programmed in java  using the trove collections library for higher performance and overall lower memory usage. proteinvolume is platform independent and can be run on any platform with a java runtime environment.

proteinvolume web interface
proteinvolume web interface allows users to upload pdb files and run proteinvolume from any device without expending their local computing resources. we have strived to create a clean, user-friendly, and responsive interface for ease of use. all interactions with the server are ajax-powered, which provides a native feel to the application. users are presented with a form that allows them to upload file of interest and fill in their names and email addresses. anonymous users are allowed to upload one pdb file whereas users providing their name are allowed to upload up to ten pdb files. after the pdb files are uploaded, users are placed into a queue. as resources become available, the job is executed and the output of the program is displayed in real time to the user and a progress bar is displayed. the progress bar shows the percent completion value, estimated based on the total number of atoms in all submitted pdb files and the selected proteinvolume options.

input structure preparation
the default option of proteinvolume uses explicit hydrogen atoms and bondi  <cit>  van der waals radii for all atoms due to overestimation of van der waals volumes when united atom radii are used. it is highly recommended to energy minimize all structures before volume processing to reduce unfavorable steric clashes that will skew volume results and make volume comparisons inaccurate. for example, we routinely energy minimize our proteins using the charmm <dig>  <cit>  all-atom forcefield in gromacs  <cit>  for 1 ps using the steepest decent method in implicit solvent and a 1 nm cutoff for electrostatic interactions. this will also add all hydrogen atoms to the structure. the user can add minimization as a preprocessing option to web server calculations. alternatively, the hydrogen atoms can be explicitly  <cit>  modeled using reduce software  <cit> . in the executable version of proteinvolume, the user can modify the van der waals radii set by editing parameter file. if hydrogen atom radius is set to zero, hydrogens will be ignored in the calculations.

performance
the volume calculation of a protein ranges from seconds to minutes depending on protein size and program options. on a single core of an i7-3630qm @  <dig> ghz, the structure of ubiquitin  takes ~1 minute to calculate with  <dig>  Å starting probe size,  <dig>  Å ending probe size, and  <dig>  Å surface probe minimum distance. with the current server hardware the same protein with the same parameter settings takes ~9 min. the computational complexity of the algorithm is o or linear, where n is the number of atoms in the system, due to spatial binning optimizations which limit the number of pairwise distance calculations.

robustness
a set of  <dig>  high-resolution  crystal structures had their native ensembles modeled and calculated with proteinvolume. modeller  <cit>  was used to model the native ensemble, which contained  <dig> structures per protein. the range of protein sizes was between  <dig> to  <dig>  amino acid residues. the total number of structures tested was  <dig> . for all structures, proteinvolume successfully calculated volumes without runtime errors.

RESULTS
the effects of the probe size parameters
three parameters, starting probe size, ending probe size, and surface probe minimum distance, have a significant effect on the running time and accuracy of the algorithm.

the starting probe size is the initial radius of probes prior to collision with protein atoms or surface probes. probes halve in radius upon collision with protein atoms or surface probes to increase the accuracy of calculations. the ending probe size specifies the minimum radius of all probes. probes that would become smaller than the ending probe size after division are prevented from dividing. increasing the starting and ending probe sizes speeds up computational time at the expense of volume accuracy due to imperfect packing of the probes around the edges of protein atoms and the protein surface. the default value of starting and ending probe sizes is  <dig>  Å and  <dig>  Å, respectively, which provides a good balance between runtime and accuracy .figure  <dig> 
the effects of the probe size parameters on the running time and accuracy of the algorithm. panel a. dependence on the starting probe size. panel b. dependence on the surface probe minimum distance. blues lines – the running time; red bars – default parameters used in all calculations .



the surface probe minimum distance is the minimum distance at which two surface probes can be placed next to each other. when this value is increased, surface probe density decreases which causes a significant reduction in pairwise distance calculations made and reduces processing time taken. the default value for surface resolution is  <dig>  Å. increasing this up to  <dig>  Å will decrease computational time at the expense of accuracy of the calculations . a surface probe minimum distance of  <dig>  Å generates a very high-resolution surface of approximately  <dig>  probes per a single isolated atom.

benchmarking
proteinvolume was benchmarked against two volume calculation programs: mcvol  <cit>  and msroll  <cit> . mcvol uses a monte carlo algorithm to approximate the vms and vvoid of a protein. msroll analytically calculates the vms of a protein. triangles occupying the intersection volume between atoms are discarded. vms is calculated by summing the volume of each triangular pyramid formed by the tessellated surface to the center of each atom.  <dig> ultra-high resolution  crystal structures  <cit>  were selected for benchmarking volume calculations additional file  <dig>  ultra high resolution protein set . these two programs were selected because they directly compute vms. the average vms deviation between proteinvolume and mcvol or msroll was  <dig> % and  <dig> %, respectively . the excellent agreement of proteinvolume, with msroll and mcvol shows that proteinvolume is accurately calculating vms. since voidoo, vorlume, and alphavol directly compute vsa instead of vms, direct comparison with proteinvolume volumes is not possible, yet the vvdw computed by for example voidoo is in excellent agreement with vvdw computed by proteinvolume . to test whether proteinvolume accuracy was dependent on crystallographic resolution, calculations performed on a set of proteins, solved to an ultra-high resolution  was compared to a set solved to high resolution . as expected  <cit> , both sets display the same slope and intercept for the dependence of volume on the protein size . this indicates that accuracy of proteinvolume is independent of the crystallographic resolution.

scaling behavior of geometric volumes of proteins
figure 4a compares the dependences of vms, vvdw and vvoid on the number of amino acid residues in proteins. the dependence is linear in all three cases suggesting that as the protein size increases, the corresponding geometric volumes also increase. the slopes of the dependences, however is not the same, it is the largest for vms and smallest for vvoid. in other words, as the total volume of protein increases the fraction of void volume, fvoid = vvoid/vms increases nonlinearly. in fact smaller proteins have smaller fvoid than the larger ones . the dependence plateaus at ~200- <dig> amino acid residues which is considered to be an upper limit of protein domains  <cit> . longer proteins with more than ~ <dig> amino acid residues usually consist of multiple structural domains  <cit> .figure  <dig> 
the size scaling behavior of geometric of volumes of proteins. panel a. dependence of the molecular surface volume , the van der waals volume  and void volumes  on number of amino acid residues in proteins . panel b. dependence of fraction of void volume on protein size.



the void volumes inside the proteins, i.e. the magnitude of vvoid, have been implicated in determining the pressure unfolding of proteins  <cit> . the prediction based on the scaling behavior of vvoid is that larger proteins will be more prone to unfold under pressure. this prediction still awaits experimental validation.

CONCLUSIONS
we present proteinvolume, a volume calculator that reports the van der waals , void , and total volume  enclosed within the molecular surface a protein. the vms, or solvent-excluded volume, can be thought of as the geometric volume contribution of a protein which consists of van der waals and intramolecular void volume. this allows us to clearly separate the volume contribution of the protein geometry  and the protein-solvent interactions . the sum of these two components should result in a better approximation of the apparent volume of a protein molecule in solution than other computational models which are based on the volume enclosed by the accessible surface area. finally, partitioning the volume components into geometric  and hydration components will lead to a quantitative insight of each term, and will allow rational engineering of volume changes in proteins.

availability and requirements
project name: proteinvolume

project home page: http://gmlab.bio.rpi.edu

operating system: platform independent

programming language: java

other requirements: java runtime environment  <dig>  and above

license: closed source proprietary

any restrictions to use by non-academics: none

additional files
additional file 1: table s <dig>  comparison of different software packages for calculation of volumes of proteins.

additional file 2: 
ultra high resolution protein set .


additional file 3: figure s <dig>  the size scaling behavior of geometric of volumes of proteins and comparison of the volumes calculated using proteinvolume with other software packages. panel a. dependence of the molecular surface volume , the van der waals volume  and void volumes  on number of amino acid residues in proteins  from ultra-high crystallographic resolution  set  and high crystallographic resolution  set  calculated using proteinvolume. the linear regression lines for proteinvolume calculations on ultra-high and high resolution sets are indistinguishable, indicating that proteinvolume results are not dependent on crystallographic resolution. the results from proteinvolume are also compared to relevant volumes calculated using mcvol  and msroll . the van der waals  volumes calculated by voidoo are shown in cyan circles. panel b. dependence of fraction of void volume on protein size for ultra-high crystallographic resolution  set  and high crystallographic resolution  set  calculated using proteinvolume.



competing interests

both authors declare that they have no competing interests.

authors' contributions

conceived and designed the study: cc and gim. performed the study: cc and gim. implementation: cc. analyzed and interpreted the data: cc and gim. wrote the paper: cc and gim. both authors read and approved the final manuscript.

