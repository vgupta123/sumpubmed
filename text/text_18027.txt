BACKGROUND
high-throughput technologies such as dna microarrays provide the opportunity to elucidate the underlying complex cellular networks. there are now many genome-wide expression data sets available. as an initial step, several computational clustering analyses have been applied to expression data sets to find sets of co-expressed and potentially co-regulated genes  <cit> . as a next step, there have been efforts to elucidate gene regulatory networks  embedded in complex biological systems. a growing number of methods for reverse engineering of grn have been reported as follows: boolean networks  <cit> , bayesian networks  <cit> , algorithm for the reconstruction of accurate cellular networks   <cit> , linear models  <cit> , neural networks  <cit> , methods using ordinary differential equations  <cit> , a sparse graphical gaussian model  <cit> , a method using a genetic algorithm  <cit> , a method using sparse bayesian learning  algorithm  <cit> , and etc.

in the reverse engineering of grn, essential tasks are developing and comparing alternative grn models to account for the data that are collected . there are two levels of inference involved in the task of data modeling process  <cit> . the first level of inference is fitting one of models to the data with an assumption that our chosen model is true. the second level of inference is the task of model comparison. it is desired to compare the alternative models with the help given by the data, and give some level of preference to the alternative models. thus, the reverse engineering method should be used as a framework for fitting several different grn models to the data to compare the models. for instance, there are several grn modeling studies in which the reverse engineering algorithm could be applied: 1) system of ordinary differential equation   <cit> , 2) dynamic bayesian networks based methods   <cit> , 3) a linear stochastic differential equation for a transcriptional regulatory network  <cit> , and etc. it is noted that these three models can be represented by linear systems. by a "linear system", we mean a system represented as a linear equation in matrix form such as eq.  <dig> in methods section.

microarrays have been used to measure genome-wide expression patterns during the cell cycle of different eukaryotic and prokaryotic cells. the review paper of cooper and shedden  <cit>  presents various published microarray data sets, which have been interpreted as showing that a large number of genes are expressed in a cell-cycle-dependent manner. from this point of view, it is assumed that the underlying grn is dependent upon cell-cyclic time. therefore, this study uses the dbn because it can represent how the expression levels evolve over time.

in this paper, we address two main challenges in reverse engineering with linear systems and present a novel algorithm to overcome these difficulties. firstly, reverse engineering of grn will be computationally less challenging task if significantly large amount of experimental data is available. however, this is limited due to the expensive cost of microarray experiments. this problem makes the reverse engineering of grn to be underdetermined, which means that there is substantially greater number of genes than the number of measurements. secondly, reverse engineering of grn with linear systems is ill conditioned because small relative changes in design matrix e in eq.  <dig> due to the noise make substantially large changes in the solution. therefore, the reverse engineering algorithm named as bayesian orthogonal least squares  is developed to overcome these difficulties. the bols method is created by combining three techniques: 1) orthogonal least squares method   <cit> , 2) second order derivative for network pruning  <cit> , and 3) bayesian model comparison  <cit> .

we evaluate the bols method by inferring grn from both synthetic and yeast expression data. we provide the performance comparison between bols and one of state-of-the-art reverse engineering methods, sbl algorithm  <cit> . the sbl algorithm has been recently used in grn studies with linear systems  <cit> . for evaluation with yeast expression data, we validate the inferred grn using the information from the database that contains large data sets of known biological interactions.

RESULTS
case study 1: in silico experiment
our in silico experiment follows the methodology for the generation of synthetic expression dataset for systems of dbn as used in rogers and girolami  <cit> . we generate synthetic networks using power-law distribution. to create a network structure, we decompose the entire network into a set of small networks that are defined as unit network and proceed a unit network by a unit network. figure  <dig> presents a unit network consisting of a target gene and a list of genes as regulators. it should be noted that there is no requirement for the network to be acyclic. all created unit networks will be combined to create a whole grn. the combination of all  unit networks is straightforward process based on the definition of a graph . this unit network approach is similar to the approach adopted in bayesian network based methods  <cit>  and sbl based method  <cit> . for each target gene, we sample the number of genes  regulating this target gene from the approximate power distribution

 p={m−1mi−ηmmin⁡≤mi≤mmax⁡0otherwise
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgqbaudaqadaqaaiabd2gatnaabaaaleaacqwgpbqaaeqaaagccagloagaayzkaagaeyypa0zaaiqaaeaafaqaaegacaaabagaemyta00aawbaasqabeaacqghsislcqaixaqmaagccqwgtbqbdaqhaawcbagaemyaakgabagaeyoei0cccigae83tdggaaagcbagaemyba02aasbaasqaaigbc2gatjabcmgapjabc6gaubqabagccqghkjyocqwgtbqbdawgaawcbagaemyaakgabeaakiabgsmijkabd2gatnaabaaaleaacyggtbqbcqgghbqycqgg4baeaeqaaagcbagaegimaadabagaem4ba8maemidaqnaemiaagmaemyzaumaemocainaem4dacnaemyaakmaem4camnaemyzaugaaagaay5eaaaaaa@5c98@ 

where the normalization constant is given by

 m=∑i=mmin⁡mmax⁡mi−η.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtcqgh9aqpdaaewbqaaiabd2gatnaadaaaleaacqwgpbqaaeaacqghsisliigacqwf3oaaaaaabagaemyaakmaeyypa0jaemyba02aasbaawqaaigbc2gatjabcmgapjabc6gaubqabaaaleaacqwgtbqbdawgaaadbagagiyba0maeiyyaemaeiieaghabeaaa0gaeyyeiuoakiabc6cauaaa@4559@ 

following rogers and girolami  <cit> , wagner  <cit> , and rice et al.  <cit> , the constant η is set to  <dig> . mmax  is the maximum  number of allowed regulator genes in a unit network respectively. the condition mmax << k  ensures the sparseness of the synthetic network. note that mmax is set to  <dig> for all experiments. the more details of creating synthetic network can be found from the supplementary information of rogers and girolami's study  <cit> . in this study, the matlab code from rogers and girolami's study for creating synthetic network is used, which is available from  <cit> . we first randomly generate the synthetic networks unit network by unit network to combine them for a whole grn, and then we generate the synthetic expression data with randomly generated synthetic grn. using these synthetic expression data, we infer the network with bols and the simulated data set. it should be noted that bols and the generation method of synthetic networks are not cooperative to work because the generation and inference of networks are completely separate processes.

in this experiment, the synthetic expression data is generated based on dbn using eq.  <dig>  in which the expression data are evolved over the time. however, as the simulation process is continued over the time, the expression data diverge by constantly either increasing or decreasing. thus, we collect a single time point only after the expression data are simulated for a certain period of time  to avoid expression levels being too high. we proceed in a single time point by a single time point manner. for a single time point, the generation of expression data is started with initial synthetic data. for each gene, the initial condition is assigned with random number between  <dig> and  <dig>  with given initial condition, we simulate the expression data for each gene i from t =  <dig> to t = t using eq.  <dig>  we take the measure with t = t- <dig> for design matrix e and with t = t for yi in eq.  <dig>  we repeat these process n times to collect n data points and apply the reverse engineering algorithms to reconstruct the synthetic network.

we make the performance comparison between bols and sbl methods to show the efficiency of bols method. the sbl method is one of the state-of-the-art algorithms, which has been recently applied to grn studies with linear systems  <cit> . we use the matlab code of sbl algorithm that is available from  <cit> . at first, we investigate the effect of the number of data points  and noise  on the performance using synthetic grn and expression data with fixed number of genes . sensitivity and complementary specificity are used as measures for the performance of the algorithm  <cit> . we compute the sensitivity = tp/ and the complementary specificity = fp/, where tp is the number of true positive, fn is the number of false negative, fp is the number of false positive, and tn is the number of true negative. in other words, the sensitivity is the proportion of recovered true positive interactions and the complementary specificity is the proportion of false positive interactions. to investigate the variability of test results, we have run both algorithms  <dig> times with same control parameters, i.e. the number of data points, noise, and etc. for each run, new random synthetic network has been created. we find that the sensitivity and the complementary specificity are constant over  <dig> experiments with small variability . the systematic effect of noise and the number of data points on the performance can be analyzed from table  <dig>  as the number of data points increases with the fixed number of genes and noise level ε, the performance of both algorithms increase. as noise level ε increases, the performance of both algorithms decreases. for the number of data points ≥  <dig>  the sensitivity of sbl is slightly greater than bols and the complementary specificity of sbl is significantly greater than the ones of bols. it means that bols algorithm produces significantly smaller proportions of false positive interactions than sbl algorithm. it should be noted that results from sbl algorithm with n =  <dig>   <dig>  and  <dig> are not available because the matlab code of sbl algorithm dose not run when the number of data points n is relatively low. sbl algorithm includes the cholesky factorization of their hessian matrix that is required to be positive definite. note that the hessian matrix is consisted of design matrix and hyperparameters  <cit> . when the number of data points is relatively smaller than the number of genes in the data set, this hessian matrix becomes non positive definite. our experiments show that sbl algorithm is not suitable for the reverse engineering with limited number of data points and it doesn't even run with significantly limited number of data points. on the other hand, bols algorithm produces relatively small proportion of fp interactions with limited number of data points. it should be noted that rogers and girolami  <cit>  generate 2r expression levels for each gene in each knock-out experiment-r in the normal  system and r in the knock-out  system. in a network of k genes, in which each is knocked out individually, they have 2rk data points. since the evaluation of bols with rogers and girolami's knockout approach  <cit>  is beyond the scope of the objectives of our study, i.e. the underdetermined problem using dbn model, we provide the comparisons between bols and sbl based on their approach as additional file  <dig> 

n is the number of data points, and ε the noise level. mmax is set to  <dig> and the number of genes k  <dig> 

we use the receiver operating characteristic  analysis  <cit>  to characterize the trade-off between the proportions of true and false positive interactions with limited number of data points  in figure  <dig>  this roc analysis shows that bols algorithm produces the solution with extremely small proportion of false positive interactions when the number of data points is extremely small. we also analyze the effect of the number of gene k with limited number of data points n =  <dig>  in figure  <dig>  it is shown that the performance of bols algorithm decreases as k increases from  <dig> to  <dig>  therefore, it can be concluded that performance of the proposed algorithm is dependent on k, n, and ε.

from the experiments, it is shown that bols produce solutions with significantly low complementary specificity regardless of k, n, and ε, because bayesian model selection scheme is efficiently enough to discover the optimal solution. since we do not have any information on noise in the data, we completely over-fit the data to dbn model using ols as a first step. then, we remove the unnecessary inferred parameters  to obtain the optimal solution by a trade-off between minimizing the natural complexity of inferred grn and minimizing the data misfit. as the complexity of inferred grn decreases with network pruning process, we use the bayesian model selection to select the most optimal solution. it should be noted that the bayesian model selection includes occam's factor, which automatically suppresses the tendency to discover spurious structure in data. thus, we can say that bols is efficient to infer grn with significant small portion of fp interactions with the noisy and limited number of data set for dbn. in figure  <dig>  we present an example showing that the performance of bols increases as the network pruning step proceeds. we first generate the synthetic networks of  <dig> genes  and then simulate  <dig> data points  with this networks and noise level ε =  <dig> . we concentrate on an output unit-network with highest evidence value logp for evaluation. it should be reminded that as the network pruning continues the number of inferred interactions in the unit network decreases. figure 5b shows that the number of errors  decreases, as the network pruning proceeds. the complementary specificity also decreases along the network pruning . on the other hand, the sensitivity remains constant, which is equal to  <dig> . it means that the over-fitted solutions after ols step contain only tp and fp interactions . it is observed that the number of errors and the complementary specificity converge at  <dig> as the network pruning process proceeds, in which the unit network has the highest evidence logp . therefore, it can be concluded that the ols method can cope with underdetermined problems using noisy data, provided that the method is combined with network pruning process and bayesian model selection techniques.

the bols algorithm should be run k times producing k unit networks, which are combined to build the whole network. each unit network is assigned with p. for each unit network, we compute the number of errors = fn + fp. the relationship between p and the number of errors for each unit-networks is shown in figure  <dig>  the number of errors decreases as the number of data points increases on the synthetic data. unit networks with higher ps are more accurate than those with lower ps. this signifies that unit networks with higher ps have a higher confidence that unit networks are correctly reconstructed. thus, when low numbers of data points and extremely high numbers of genes are given, the algorithm should be able to recover a partially correct network with unit networks only having relatively high ps. it should be noted that bols algorithm does not provide the confidence levels among interactions inside unit network. however, it can be noticed from figure  <dig> that many unit networks with relatively high evidence values have zeroed number of incorrectly inferred interactions. therefore, the evidence values for unit networks are efficient enough to cope with problems for locating unit networks without fp or fn interactions.

case study 2: application of bols to saccharomyces cerevisiae data
to evaluate our algorithm for reverse engineering of grn, we use the microarray data from spellman et al.  <cit> , in which they created three different data sets using three different synchronization techniques. we focus our analysis using the data set produced by α factor arrest method. here we concentrate on our study with the expression data set of  <dig> genes known to be involved in cell cycle regulation  <cit> . thus, we have a data set with  <dig> genes and  <dig> data points in this experiment. based on the previous simulation experiment, it is expected to have sensitivity as  <dig>  ,  <dig>  ,  <dig>   and complementary specificity as  <dig>  ,  <dig>  ,  <dig>  , respectively. it means that the output is expected to have approximately less than 3% of complementary specificity if we assume that ε ≤  <dig> , the sparseness mmax of grn =  <dig>  and etc.

the output unit networks using this data set are presented in table  <dig> including the p of unit networks, in which there are  <dig> inferred interactions from bols. among those interactions,  <dig> of them are identified as physical or genetic interactions from the biogrid database  <cit> . later in this section, we provide the logical basis such that some of unidentified interactions might be possible physical or genetic events. biogrid is a freely accessible database including physical or genetic interactions from the saccharomyces cerevisiae available at  <cit> . the output in table  <dig> shows that the interactions with higher ps have higher likelihood of having known physical or genetic interactions identified from the biogrid than the interactions with lower ps: 1) among the elucidated interactions with p > 66th percentile of all ps,  <dig> of them are identified as physical or genetic interactions from biogrid database. 2) among the elucidated interactions with 66th percentile > ps > 33rd percentile,  <dig> of them are identified as physical or genetic interactions, 3) among the elucidated interactions with ps < 33rd percentile,  <dig> of them are identified as physical or genetic interactions. this could be explained from the previous simulation experiment showing that bols has less false positive interactions with relatively high p than with low p. it is noted that the overall values of p in table  <dig> are relative small compared to the ones in figure  <dig>  it should be noted that number of genes is set to  <dig> in table  <dig> and the number of genes is set to  <dig> in figure  <dig>  from figure  <dig>  it is also noted that the overall values of p decreases as the number of data points decreases. it is also found that the overall values of p decreases as the noise level increases. therefore, the overall values of p can be relatively different depending on the number of genes, noise level, and the number of data points.

s indicate that the regulator gene is identified as having known interactions with its target gene from the biogrid database, which is a freely accessible database of physical and genetic interactions available at  <cit> .

we pool both physical and genetic interactions from biogrid to validate the output interactions in this experiment. the rationale for this pooling can be described as follows. several proteins join together to form multi-protein complex having certain functions or regulating other proteins. for example, scf complex consists of skp, cullin, and f-box proteins, which promotes g1-s transition by targeting g <dig> cyclins and cln-cdk inhibitor sic <dig> for degradation. from breeden's  <cit>  review study, it is known that cell cycle regulated complexes with at least one sub-unit are regulated at the transcript level. this means that certain protein complexes might regulate other complexes with time delay. with only expression data sets, we only have information that which proteins are present for certain time. in terms of efficiency and logical order, it is assumed that the cell only makes the proteins when it is needed. if the proteins are made all the time, the cell could be inefficient in an environment without the substrates of the protein  <cit> . from these points of view, there can be two possible cases to be considered when certain two proteins are present: 1) two proteins form a multi-protein complex by interacting each other, 2) one protein might form a complex with some other proteins. this complex might regulates the other protein that could also form a protein complex. therefore, those two types of interactions can be pooled together to validate the output interactions.

unit-networks having relatively many identified physical or genetic interactions are the ones with cln <dig>  cln <dig>  clb <dig>  cln <dig>  cdc <dig>  swi <dig>  cdc <dig> and cdc <dig> as target genes. for example, we present a unit network with cdc <dig> as a target gene. cdc <dig> is identified as having physical or genetic interactions with cln <dig>  <cit> , cln <dig>  <cit> , cln <dig>  <cit> , clb <dig>  <cit> , clb <dig>  <cit> , clb <dig>  <cit> , hct <dig>  <cit> , sic <dig>  <cit> , cdc <dig>  <cit> , swi <dig>  <cit> , and swi <dig>  <cit> . cdc <dig> is a catalytic subunit of the main cell cycle cyclin-dependent kinase , which alternatively associates with g <dig> cyclins  and g2/m cyclins  that direct the cdk to specific substrates. hct <dig>  and cdc <dig> are cell cycle regulated activators of the anaphase-promoting complex/cyclosome , which direct ubiquitination of mitotic cyclins. one of cdc28's gene ontology definitions gives another evidence that cdc <dig> might have associations with hct <dig> and cdc <dig>  because cdc <dig> is involved in the progression from g <dig> phase to s phase of the mitotic cell cycle. sic <dig> is an inhibitor of cdc28-clb kinase complexes that controls g1/s phase transition, which prevents premature s phase and ensuring genomic integrity.

among the list of genes inside cdc <dig> unit network, there are several genes not identified as having physical or genetic interactions with cdc <dig> from the biogrid: clb <dig>  mbp <dig>  mcm <dig>  cdc <dig>  cdc <dig> and skp <dig>  however, the definitions of these genes from the biogrid give enough evidences such that some of them indirectly interact with cdc <dig>  for example, clb <dig> is a b-type cyclin involved in dna replication during s phase, which activates cdc <dig> to promote initiation of dna synthesis. clb <dig> also has a role for the formation of mitotic spindles along with clb <dig> and clb <dig>  thus, clb <dig> indirectly regulates cdc <dig> along with clb <dig>  cdc <dig>  cdc <dig> and skp <dig> also indirectly regulate cdc <dig> through sic <dig>  they form a structural protein of scf complexes, called cullin, with an f-box protein. the scf promotes the g1-s transition by targeting g <dig> cyclins and the cln-cdk inhibitor sic <dig> for degradation. mbp <dig> is a transcription factor involved in regulation of cell cycle progression from g <dig> to s phase, which forms a complex with swi <dig> that binds to mull cell cycle box regulatory element in promoters of dna synthesis genes. thus, mbp <dig> is associated with cdc <dig> by forming a complex with swi <dig> 

for another example, we present a unit network having clb <dig> as target gene. clb <dig> is identified as having physical or genetic interactions with clb <dig>  <cit> , sic <dig>  <cit> , clb <dig>  <cit> , cdc <dig>  <cit> , cln <dig>  <cit> , hct <dig>  <cit> , swi <dig>  <cit> , and swi <dig>  <cit> .

among the list of genes inside clb <dig> unit network, there are several genes not identified as having physical or genetic interactions with clb5: cln <dig>  clb <dig>  mcm <dig>  mbp <dig>  swi <dig> and clb <dig>  however, there are evidences that some of genes in the list might have indirect interactions with clb <dig>  for example, clb <dig> has an association with clb <dig>  because clb <dig> is a b-type cyclin involved in dna replication during s phase and has a role for the formation of mitotic spindles along with clb <dig> and clb <dig>  for another example, mbp <dig> and clb <dig> have an indirect interaction. mbp <dig> is a transcription factor involved in regulation of cell cycle progression from g <dig> to s phase, which forms a complex with swi <dig> that binds to mlui cell cycle box regulatory element in promoters of dna synthesis genes. it is already identified that swi <dig> regulates clb <dig>  thus, mbp <dig> indirectly regulate clb <dig> through swi <dig> 

we also evaluate both bols and sbl using the same data set in table  <dig> to compare the efficiency of bols with sbl. for direct comparison purpose, we make the graphs of inferred grn by bols and sbl . there are  <dig> inferred interactions  by bols  and  <dig> interactions  by sbl . figure 7c shows that  <dig> interactions are inferred by both bols and sbl, in which  <dig> of them are known interactions. figure 7d shows  <dig> interactions only by bols in which  <dig> of them are identified as known interactions from the database. on the other hand, figure 7e shows  <dig> interactions only by sbl in which only  <dig> of them are known interactions from the database. it is reasonable to assume that the complete information of biological interactions of yeast is not available from the database yet. it is believed that the more depositions of the information concerning yeast interactions are still on the way to reach the more complete understanding of the underlying complex cellular networks of yeast. based on the currently available information from the database, we can say that sbl algorithm infers grn with relatively more complexity and less identified known interactions than bols. therefore, based on our evaluation experiments with synthetic and yeast expression data, it is sufficient to conclude that sbl produces more over-fitting solutions  than bols.

CONCLUSIONS
in the evaluation of bols using synthetic data, it is shown the proposed bols algorithm is able to reconstruct networks using a very limited number of experimental samples. in this study, we assume that there is significantly limited number of data points and the noise level in the data is not known. this is a common situation in expression data analysis. to handle these difficulties, we adopt a decomposition strategy to break down the entire network into a set of unit networks. this decomposition makes the inferring of a whole grn into several separate regressions. thus, if we have extremely small number of data points, our method can not provide 100% correct solutions, but provides each unit network with p, which can be used as confidence level. the unit network with a higher p has a higher confidence such that the unit network is correctly inferred . previously, basso et al.  <cit>  validated their aracne algorithm using  <dig> nodes synthetic network. with  <dig> sample size, the sensitivity and complementary specificity are approximately 80% and 20%, respectively. the inferred interactions from their method contain approximately 20% false positive and false negative interactions, respectively. with our method, it is possible to locate false positive or false negative interactions with ps, which is the unique property of bols algorithm. our in silico experiment shows that the performance depends on the number of data points, genes, and noise level. further study will be required to investigate the relationship between these parameters and the performance so that the bols algorithm can be generally applied to the microarray data with any number of genes, data points, and noise level.

another evaluation is conducted with the yeast saccharomyces cerevisiae data of  <dig> genes, which are involved in cell-cycle regulation. in the output network, there is noticeable number of interactions that are identified as physical or genetic interactions from the literature. there are also several interactions that are not identified from the literature. however, it is shown that the definition of these genes from the biogrid database gives enough evidences that some of them have indirect interactions. thus, this experiment shows that bols algorithm is able to elucidate remarkable number of known physical or genetic events.

for both evaluation experiments with synthetic and yeast expression data, we compare the performance between bols and sbl algorithms. the sbl algorithm  <cit>  is a general bayesian framework to obtain sparse solutions utilizing linear models. this method is known as type-ii maximum likelihood method  <cit> , in which the solutions are obtained by maximizing the marginal likelihood. on the other hand, bols utilizes the bayesian model selection that is an extension of maximum likelihood model selection, in which the posterior is obtained by multiplying the best fit likelihood by the occam's factor. from our both evaluation experiments, it is concluded that bols produces sparser solutions with less fp than sbl does.

