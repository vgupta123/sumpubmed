BACKGROUND
a thrust in bioinformatics is to acquire and transform contemporary knowledge from biomedical literature into computable forms, so that computers can be used to efficiently organize, retrieve and discover the knowledge. the gene ontology   <cit>  is a controlled vocabulary used to represent molecular biology concepts, which is the de facto standard for annotating genes/proteins. the concepts in go, referred to as go terms, are organized in directed acyclic graphs  to reflect hierarchical relationships among concepts. currently, the process of extracting biological concepts from biomedical literature to annotate genes/proteins is manually performed by domain experts, whose roles are indispensable to ensure the accuracy of the acquired knowledge. however, the rate of manual annotation is outpaced by the growth of information in the biomedical literature  <cit> . automatically performing literature-based go annotation has drawn wide attention from the biomedical text mining community  <cit> . in addition to numerous publications by individual researchers, a special track was devoted to the task in the biocreative conference in the form of a challenge from the biomedical text mining community  <cit> . similar tasks were also investigated in the genomic track of the text retrieval conference   <cit> .

generally, the task of go annotation based on free text of the literature can be cast as a text classification problem. given a protein and the literature associated with it, one can potentially annotate the protein according to the classification  of the literature, for which various supervised classifiers can be trained, with the go terms as target classes and the tokens in the training texts as input features. due to the hierarchical nature of the go concepts, go annotation is also intrinsically a multi-label classification problem in that, when a protein is annotated with a go term t, it is also considered to be annotated with all ancestors of t. a common approach to deal with multi-label classification in the machine learning field is to train multiple one-vs-rest binary classifiers, such that each classifier learns to discriminate cases of one class from the remaining classes  <cit> . given a test case, all classifiers in such a system are invoked to make calls, and the case is labeled with the classes which turn out to be positive. although such an approach can be adopted to perform go annotation, it ignores the structure of go and suffers from the following shortcomings. firstly, the unbalanced training cases make learning difficult. this is because the number of training cases for an individual class is usually much smaller than the number of cases of all other classes combined in a multi-label classification scenario. secondly, the outputs of such a system might not be compatible to the existing structure of classes, e.g., a case is labeled with a class, c, but not the parents of c.

hierarchical classification takes into account the relationships among the target classes during training and outputs multi-labels that comply with the class relations. hierarchical classification has received growing attention in the machine learning field in recent years  <cit> . in the bioinformatics domain, the hierarchical structure of go was utilized to classify proteins based on various biological data, e.g., gene sequences and microarray  <cit> . with respect to literature-based go annotation, reports from text mining workshops have explored hierarchical text classification for go annotation, e.g., biolink  <cit>  and biocreative  <cit> . in the study by kiritchenko et al  <cit> , a hierarchical classification system was built with adaboost algorithms as base classifiers. on the other hand, verspoor et al  <cit>  attempted to classify documents by utilizing the go hierarchy structure to identify a set of candidate go terms. in our study, we investigated and evaluated the performance of hierarchical classification systems built with state-of-the-art text classification methods, namely the support vector machine  and na√Øve bayes classifier. in addition to conventional hierarchical classification, we also introduced a novel stochastic classification algorithm, referred to as random go walk , to perform probabilistic, graph-based multi-label classification. the motivation for rgow is, by employing a stochastic mechanism, to alleviate the potential local maximum problem that results from the greedy search of top-down hierarchical classification.

the main goal of this study is to systematically investigate and evaluate the advantage, or lack of it, of a general class of graph-based multi-label classification methods . more specifically, we have studied the conventional non-hierarchical multi-label classification for go annotation, the rgow algorithm, and two top-down hierarchical classification algorithms. our results show that graph-based multi-label classification methods significantly enhance the classification performance evaluated with metrics that measure exact matches. in addition, our methods are also capable of suggesting go annotations closely related to the original annotations on the go graph, even when they fail to predict them directly.

RESULTS
pubmed augmented go graph
in this study, the task of literature-based gene/protein annotation was cast as a graph-based classification problem. we constructed a pubmed augmented go graph  using the biological process branch of the go combined with the gene ontology annotation   <cit>  corpus. in this graph, a node represents a go term, an edge represents the semantic relationship between a pair of go term, and the structure of the graph follows the definition of the biological process ontology from the gene ontology consortium. in addition, we further augmented the information of the graph by adding sets of pubmed identification numbers to each go node as attributes of the object. this enables us to further associate each go node with a text classifier to perform graph-based classification. although we only studied the performance of graph-based classification on the biological process domain of the go, the results would likely generalize to the molecular function and cellular component domains because the tasks are essentially the same.

we further investigated the distribution of pubmed documents over the go graph, which provides information on the state of current manual go annotation processes, the degree of difficulty of training a literature-based go annotation algorithm, and the motivation for graph-based classification. in figure  <dig>  panel a shows the histogram of the unique go terms grouped according to the number of training documents associated with each term . it can be seen that many go terms are associated with fewer than  <dig> training documents. one may reason that it is very difficult  to train accurate and generalizable text classifiers for the go terms with so few training documents. therefore, a more effective approach is to pool the training cases from these nodes to their ancestors and train more reliable classifiers at the ancestor nodes, which naturally leads to the graph-based multi-label classification approach. panel b of figure  <dig> shows the count of annotation instances of the go terms, grouped according to the number of training documents associated with them. it can be seen that, although a relatively small number of go terms have more than  <dig> training cases, the instances of observing these go terms constitute a fairly large portion of all observed go annotations. thus, enhancing the capability of correctly predicting these go terms will have a great impact on the overall performance of the classification systems.

performance evaluation
evaluation of multi-label classification
since the gene ontology consortium adopts a principle of annotating proteins with go terms that are as specific as possible, the observed go terms in the goa documents are usually the leaves of multi-label subgraphs. in order to evaluate multi-label classification, we reconstructed a multi-label subgraph for each test document based on its true/predicted go annotations. the steps for constructing such a subgraph are as follows: 1) map a test document's go annotations onto the pubmed augmented go graph; 2) find the shortest path between the root and each of the true/predicted go annotations; 3) join the paths using a union of the edges of the paths to make a subgraph of go.

for graph-based multi-label algorithms, we used the outputs of each classification system as leaves to reconstruct the multi-label subgraph. for flat-svm, we used two ways to evaluate its outputs: one is directly using the system outputs in multi-label evaluation; the other is treating its outputs as leaves  and building the multi-label subgraphs. using the metrics specifically designed for graph-based multi-label classification described in the methods section, we evaluated the performance of different classification algorithms, and the results are shown in figure  <dig>  in figure  <dig>  the first four groups represent the performance of the flat-svm evaluated with the direct outputs, the top-down svm , the top-down naive bayes , and the random go walk . from these four groups, it can be seen that the td-svm, td-nb, and rgow systems significantly outperform the flat-svm, with folds of increase in recall and f-score. the last group  in the figure is the performance of the flat-svm evaluated on the multi-label subgraphs built based on its outputs. this procedure is equivalent to evaluating the result from a flat svm classifier as if it is from a hierarchical classifier, even though it does not utilize the go graph during training. it is interesting to see that, although its performance is better than that of the flat-svm, the flat-svm <dig> is outperformed by the two top-down algorithms and the rgow in terms of recall and f-score. these results indicate that the better performances by the graph-based classifiers indeed resulted from utilizing information from the go graph structure during training the classifiers, rather than due to the differences in evaluation procedures.

leaf-to-leaf evaluation
the multi-label evaluation measures the accuracy of the systems by comparing subgraphs, such that it evaluates the overall capability of predicting both specific and general terms on the graph. in practice, protein annotation requires predicting the go terms that are as specific as possible, and therefore we evaluated how accurately the predicted leaves  matched the true annotations, a procedure referred to as leaf-to-leaf evaluation. the results are shown in figure  <dig>  again, the results show that the graph-based multi-label classification methods significantly outperform the flat-svm. td-nb achieves a recall of around 17%; this recall represents that ~ <dig>  out of  <dig>  instances of go annotation in the goa corpus were correctly predicted. it is interesting to note that precision for the flat-svm decreases significantly in the leaf-to-leaf evaluation when compared to that in the graph-to-graph evaluation. this difference indicates that many of the correct predictions by the flat-svm are general go terms at the top levels of the go graph, which can be detected in graph-to-graph evaluation. however, the flat-svm is less capable of predicting more specific go terms observed in the test cases, and thus it performs much worse in the leaf-to-leaf evaluation.

evaluating performance using graph-based metrics
as shown in figure  <dig>  a large number of observed go terms in the goa corpus have only a few training documents, so it is almost impossible to train reliable classifiers for them. we conjectured that the misclassification of these cases  constituted the majority of the test errors in multi-label classification. instead of treating the misclassification of these terms as complete losses, it would be interesting to quantify and evaluate how closely the predicted and observed labels are located in the go graph. one may argue that the loss incurred from predicting a label only one step away from the true label is more acceptable compared to predicting a label  <dig> steps apart from the true label. indeed, one motivation of graph-based multi-label classification is to pool the training cases through training case propagation, so that it is possible to train more reliable classifiers associated with the ancestors of a go node that has sparse training cases. therefore we would like to evaluate how closely the predictions by these relatively reliable ancestor classifiers relate to the true classes. to this end, we devised graph-based metrics to evaluate results.

during graph-based evaluation, for each true go term in testing cases, we searched for the shortest path from the true label to the leaves of the predicted subgraph, and the number of edges in the path was used as a metric to reflect how close to the true label the predicted labels were. the shorter the path, the better the performance. panel a of figure  <dig> shows the distribution of the shortest distances of the predicted labels to the true go annotations in the test set. note that the paths with the length of zero reflect the correct predictions, and thus these numbers essentially agree with the recall of classification systems. it is interesting to note that many observed go annotations are within one or two steps from the predicted multi-labels, and all graph-based classification systems perform better than the flat-svm multi-label classification system. panel b of figure  <dig> plots the cumulative percentile of go terms  with respect to the number of steps from the predicted labels. it can be seen that 33% ‚Äì 42% of the true go annotations are within only two steps from the labels predicted by the td-nb, td-svm and rgow. the results indicate that these graph-based classification systems are capable of predicting go annotations very close to the true annotations, yet they are treated as misclassifications according to the conventional evaluation methods for multi-label classification. if we relax the criteria for correct predictions to include the predictions within two steps from the true labels, the graph-based systems can achieve even better performance : 29% ‚Äì 35% in recall, 20% ‚Äì 31% in precision, and 24% ‚Äì 32% in f-score. the results are encouraging given the difficulty of the classification problem for go annotation.

enhanced classification for classes with fewer training cases
one of the motivations of employing graph-based classification methods is to address the problem associated with the training case imbalance that plagues flat classifiers. the assumption is that, by performing one-vs-rest classification locally rather than globally, the training case imbalance can be alleviated. to illustrate the impact of the size of training set on the prediction, we plotted the number of correctly predicted instances for each classification algorithm, grouped according to the number of training documents associated with each go term in figure  <dig>  the figure illustrates that, for the go classes with fewer than  <dig> training documents, the graph-based multi-label classification systems significantly outperform the flat multi-label classification method. as the number of training cases increases, the differences between the classification algorithms begin to diminish. these results indicate that the graph-based multi-label classification algorithms improve the performance on the classes with small training sets. these results are highly encouraging because go terms with few training documents are the most difficult to predict.

discussion
in this study, we transformed the problem of literature-based prediction of go annotation to a graph-based multi-label classification problem. our results indicate that, through utilizing the structure of the go graph, the graph-based multi-label classification algorithms significantly outperform the conventional flat multi-label classification approach. furthermore, our results demonstrate that graph-based classification is capable of suggesting annotations that are semantically close to the true annotations. these results indicate that the graph-based multi-label classification methods have better potential than the conventional flat multi-label classification approach to facilitate protein annotation based on the literature.

controlled vocabularies such as the go and the unified medical language system   <cit>  provide computable forms of biomedical concepts, which are critically important in knowledge representation and are widely used in molecular biology and medicine. interconnections between biological concepts can often be best represented as dags rather than trees. although there have been many investigations on tree-based hierarchical text classification, studies of utilizing a graph structure for multi-label classification of text are few. recently, barutcuoglu et al. have proposed a sophisticated bayesian network framework to perform graph-based hierarchical multi-label classification and employed it to predict go annotations of proteins based on biological data, e.g., gene expression and protein-protein interactions  <cit> . their framework requires a relatively large number of training cases in order to train their model, such that they limited the target classes to about  <dig> go terms with at least  <dig> training cases. this requirement would have eliminated most biologically specific go terms in our case. in contrast, our methods can be applied on the full graph of the biological process domain of go.

our work is closely related to that by kiritchenko et al  <cit>  in terms of problem formulation and evaluation. in their work, the investigators employed a global hierarchical classification system with an adaboost algorithm as the base classifier. in this study, we further investigated the performance of systems consisting of svm and na√Øve bayes classifiers, which are well established as the best text categorization classifiers  <cit> . in terms of evaluation, our graph-to-graph evaluation is essentially equivalent to the hierarchical recall and precision from kiritchenko et al, in that they all evaluated the performance of overall multiple-label classification. in addition, we also performed the leaf-to-leaf evaluation which is more relevant to the real world evaluation from biologists' point of view. furthermore, their evaluation concentrated on exact matches, which may not fully reflect the benefit of graph-based classification revealed by our relaxed graph-based evaluation. thus, our evaluation methods demonstrated additional advantages of graph-based multiple-label classification to previous studies. although it would be ideal to include their method in our evaluation, the lack of available software makes it difficult to perform a fair comparison due to potential minute variances in re-implementation.

graph-based multi-label classification from this study is readily carried out as a series of localized classifications. for the td-svm and td-nb algorithms, the localized classification is performed in a breadth-first-search manner, which is guaranteed to stop when all feasible paths are visited. in addition, to improve classification accuracy, employing top-down classification algorithms is more efficient due to their branch-and-bound nature. on the other hand, the rgow algorithm transforms the dag into an undirected graph and traverses the graph following the most probable paths. in addition to a more thorough search of the graph, the advantages of this algorithm also include the probabilistic outputs that accommodate the uncertainty of the predictions. our results indicate that the probabilistic outputs by rgow correctly reflect the uncertainty of predictions and can be further utilized to determine the decision threshold of classification.

the more important advantage of the graph-based multi-label classification algorithms lies in the fact that, even when not exactly matching the true target annotations, many of the predicted go annotations are semantically close to the target annotations. this is the underpinning characteristic and motivation of our approach ‚Äì suggesting and predicting annotations that are as close as possible to the go terms with few training cases, and the classification on these go terms would be impossible otherwise. note that, since most of the observed go annotations are very specific per the guidelines of the gene ontology consortium, the predicted go annotations that are only one step away from the true annotation should be fairly specific too. if these predictions are counted as correct, the systems can achieve around  <dig>  in recall, which may potentially be helpful to human annotators during annotation processes.

although outperforming the flat classification system, the current graph-based multiple-label classification methods need further improvement in order to meet the requirements of real-world literature-based annotation. reasonable directions for improvement include, first, further fine-tuning the base classifiers. for example, one may fine tune and vary the classification threshold based on the level of the node. second, a refined approach would use more specific training data. ideally, the most relevant part of a document related to the go terms should be identified through semantic analysis  <cit>  and used for training classifiers.

CONCLUSIONS
in this paper, we investigated and studied the methods of enhancing automatic multi-label classification of biomedical literature by utilizing the structure of the gene ontology graph. we systematically evaluated and compared three graph-based classification algorithms to a conventional flat multi-label algorithm and concluded that through utilizing the information from the structure of the gene ontology graph, the graph-based multi-label classification methods have better potential than the conventional flat multi-label classification approach to facilitate protein annotation based on the literature.

