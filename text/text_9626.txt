BACKGROUND
the ncbi taxonomy  <cit>  provides one of the most powerful ways to navigate the national center for biotechnology information  sequence data bases. every sequence in genbank is associated with a taxon , and each taxon has a unique place in the ncbi taxonomy. hence, not only can the user retrieve sequences for a given species , but also for a group of species, such as mammals  or animals .

the ncbi provides a single classification, assembled from a variety of sources including published literature, a panel of expert advisors, and the taxonomy provided by users when they submit new sequences. given that there is not universal agreement on the classification of organisms, providing a single classification places constraints on the questions biologists can ask.

to give a concrete example, figure  <dig> shows a simplified classification of animals, based on the current ncbi taxonomy. in this classification, the bilateria are split into three groups  based on the nature of the internal body cavity . the coelomata are themselves split into two groups, the protostomia and the deuterostomia, characterised by the fate of the blastopore during development .

an alternative view of animal classification is shown in figure  <dig>  the three-fold division based on body cavity disappears, leaving the fundamental split being between the protostomia and the deuterostomia. the protostomia are divided into the lophotrochozoa and the ecdysozoa, the latter comprising arthropods, nematodes, and other moulting animals  <cit> . this classification has implications for comparative genomics. the best known animal genomes are homo sapiens , drosophila melanogaster , and caenorhabditis elegans . under the classical classification , the coelomates human and drosophila are more closely related to either other than either is to the aceolomate c. elegans, suggesting it would be most productive to compare our genome with that of drosophila, rather than the more distant nematode. however, in the alternative classification  drosphila and c. elegans are more closely related to each other than either is to humans, and we have no  reason for choosing one over the other as a point of reference for interpreting the human genome. there is considerable debate about the merits of the two classifications  <cit> . however, because the ncbi provides only one classification users cannot, for example, easily query genbank for all ecdysozoan sequences – this taxon simply does not exist in the ncbi database. instead, users are forced to construct boolean queries such as . while in this simplified example this is not a great hardship, as the trees get larger and the differences more profound, it becomes harder to pose a query that captures the taxa required.

one solution is simply to download the ncbi taxonomy, edit it to reflect the desired alternative classification, then use that to obtain sequences from taxa such as ecdysozoa. it is reasonably straightforward to store a tree in a relational database an query it using sql  <cit> . however, the ncbi taxonomy is continually growing as new organisms are sequenced. hence, a locally edited classification will quickly become obsolete. having to download a fresh copy and then manually edit it would quickly become tedious.

implementation
taxonomic classifications
although ideally classifications mirror phylogenetic relationships, it is important to distinguish between classifications and phylogenies. a taxonomic classification can be modelled as a rooted, labelled, unordered tree. unlike classifications, internal nodes of phylogenetic trees need not be labeled, although the internal nodes of a phylogeny may be decorated with measures of support .

subtree isomorphism
our approach is to first find subtree isomorphisms between the two trees, t <dig> and t <dig>  a subtree is a connected subgraph of a tree. we distinguish between top-down and bottom-up subtree isomorphism. a top-down node matching the parent of each node in the matching is itself in the matching . in a bottom-up matching, all the children of a node in the matching are also in the matching .

the algorithm first finds all subtrees, including bottom-up and top-down subtrees, that are common to t <dig> and t <dig>  we find all kinds of subtree because, by themselves the subtrees found by each method can be small .

script
having identified common subtrees, we then list the operations needed to transform t <dig> into t <dig>  the first step is to delete nodes in t <dig> that are not in any of the shared subtrees. the deletion of a node entails deletion of all the edges incident with the deleted node. we then add nodes found only in t <dig>  and the corresponding edges. the size of the script depends on the size of the shared subtrees, hence it is desirable to find the largest such subtrees.

complexity
in general, computation of the least number of operations needed to transform t <dig> into t <dig> is an np-hard problem  <cit> , even for binary trees with a label alphabet of size two, as long as node and edge deletions, insertions, and label substitutions are allowed. however, in the case of trees with unique node labels, node label substitutions are forbidden because they may generate trees with non-unique node labels  <cit> , and the least number of operations or edit distance becomes a function of the size of shared subtrees  <cit> . by identifying the largest common subtrees, we obtain the shortest possible edit script.

computing an edit script
taxonomic classifications are modelled as trees with unique node labels, and this fact makes it easier to deal with trees in terms of their sets of node labels and node label pairs, as done for graphs with unique node labels in  <cit> .

definition  <dig> let t =  be a tree. the label representation of t, denoted by r, is given by r = , where l = {ℓ | v ∈ v} and c = {,ℓ) |  ∈ e}.

thus, the label representation r of a tree t defines the equivalence class of all those trees that are isomorphic to t. the use of label representations simplifies the notation, because isomorphic trees have exactly the same label representation.

the edit operations of node and edge deletion and insertion, allow one to transform any given tree into any other tree. label substitutions are forbidden because they may generate trees with non-unique node labels  <cit> .

definition  <dig> let t <dig> =  and t <dig> =  be trees, let r = , and let r = . let also c = l <dig> ∪ l <dig> ∪ {λ}.

a node edit operation between t <dig> and t <dig> is a pair  ∈ c × c with a ≠ λ or b ≠ λ. a node edit operation of the form  establishes deletion of the node v ∈ v <dig> with ℓ = a together with the edge , v), if v is not the root of t <dig>  and deletion of edge  for each child x of v in t <dig>  a node edit operation of the form  establishes insertion of the node w ∈ v <dig> with ℓ = b.

an edge edit operation between t <dig> and t <dig> is a triple  ∈ c × c × c with b ≠ λ and a ≠ λ or c ≠ λ. an edge edit operation of the form  establishes deletion of the edge  ∈ e <dig> with ℓ = a and ℓ = b, and an edge edit operation of the form  establishes insertion of the edge  ∈ e <dig> with ℓ = b and ℓ = c.

an edit operation is either a node edit operation or an edge edit operation.

an edit script between two trees is just a set of edit operations that, if applied in the right order , allow one to transform one tree into the other.

definition  <dig> an edit script between two trees t <dig> =  and t <dig> =  is a set of edit operations that transform r into r.

given r =  and r = , an edit script between t <dig> and t <dig> can be easily obtained by sorting the label sets and computing set differences, as follows:

• delete all nodes with labels in l <dig> \ l2

• insert all nodes with labels in l <dig> \ l1

• delete all edges with labels in c <dig> \ c2

• insert all edges with labels in c <dig> \ c1

however, such a procedure does not, in general, lead to the shortest possible edit script, because some of the edge deletion operations may be redundant, given that deletion of a node entails deletion of all the edges incident with the deleted node. while any edit script would suffice to transform one tree into the other, the shortest edit script leads to a faster computation of the edited tree, given the script and the original tree.

the following, alternative procedure is based on the set of common node labels between the two trees, which can be easily obtained as the intersection of the sets of node labels in the label representation of the trees, that is, c = l <dig> ∩ l <dig> = {ℓ | v ∈ v1} ∩ {ℓ | w ∈ v2}. the procedure can be sketched as follows:

• delete all nodes v ∈ v <dig> with ℓ ∉ c.

• insert all nodes w ∈ v <dig> with ℓ ∉ c.

• delete all edges  ∈ e <dig> with ℓ, ℓ ∈ c and such that the node w ∈ v <dig> with ℓ = ℓ is not the parent in t <dig> of the node y ∈ v <dig> with ℓ = ℓ.

• insert all edges  ∈ e <dig> with ℓ, ℓ ∈ c and such that the node v ∈ v <dig> with ℓ = ℓ is not the parent in t <dig> of the node x ∈ v <dig> with ℓ = ℓ.

• insert all edges  ∈ e <dig> such that ℓ ∉ c or ℓ ∉ c.

a detailed description of the algorithm is given in fig.  <dig>  correctness of the edit script algorithm is easy to establish.

theorem  <dig> let t <dig> and t <dig> be trees, let c ⊆ ℓ ⋂ ℓ, let e = edit script , and let be the result of applying the set of edit operations in e to t <dig>  then, and t <dig> are isomorphic.

proof it has to be shown that . let r =  and r = . the edit script establishes the deletion of all nodes with labels in l1\ c and the insertion of all nodes with labels in l <dig> \ c. thus,  = l <dig> \  ∪  = c ∪  = l <dig> 

the edit script also establishes the deletion of all edges with source and target labels in  \ c <dig>  the insertion of all edges with source and target labels in  \ c <dig>  and the insertion of all edges with source or target label in l <dig> \ c, that is, of all edges in c <dig> \ . furthermore, the deletion of all nodes with labels in l <dig> \ c entails the deletion of all edges with source or target label in l <dig> \ c, that is, of all edges in c <dig> \ . 

now, c <dig> =  ∪  =  \ c2) ∪ ) \ c2) ∪ . in a similar vein, c <dig> =  \ c1) ∪ ) \ c1) ∪ .

thus,

 = c <dig> \  \ c2) \ ) \ c2) ∪  \ c1) ∪ ) \ c1) =  ∪  \ c1) ∪ ) \ c1) = c <dig> and therefore,  =  = r, that is,  and t <dig> are isomorphic.

the edit script algorithm can be implemented to take time quasi linear in the size of the trees, by using any efficient dictionary data structure to represent the set of common node labels. the same dictionary data structure allows one to compute the set of common node labels within the same time bound and thus, the whole procedure can be implemented to take time quasi linear in the size of the trees. in particular, our c++ implementation uses the stl associative container set<string> as representation of the set of shared node labels.

RESULTS
here we suggest a solution based on the notion of an "edit script" that summarises the differences between two trees. given two trees, t <dig> and t <dig>  a script lists the operations required to convert t <dig> into t <dig>  the script could be constructed manually, but it would be more efficient to generate it automatically. hence, we imagine the following scenario. a user downloads the ncbi taxonomy tree , then edits the tree to reflect their preferred classification. using the algorithm we describe below, the user then computes the edit script that transforms the ncbi tree into their classification. when a new ncbi tree appears on the ncbi ftp site, the user downloads that tree and applies to edit script to regenerate their classification. in this way, the user need only edit the ncbi tree once.

as an example, given the two trees in figs.  <dig> and  <dig>  the edit script for these trees is:

delete node pseudocoelemata

delete node coelomata

delete node protostomia

delete node acoelomata

insert node ecdysozoa

insert node lophotrochozoa

insert node protostomia

insert edge bilateria -> deuterostomia

insert edge bilateria -> protostomia

insert edge ecdysozoa -> nematoda

insert edge ecdysozoa -> arthropoda

insert edge lophotrochozoa -> annelida

insert edge lophotrochozoa -> brachiopoda

insert edge lophotrochozoa -> bryozoa

insert edge lophotrochozoa -> mollusca

insert edge lophotrochozoa -> nemertea

insert edge lophotrochozoa -> platyhelminthes

insert edge protostomia -> lophotrochozoa

insert edge protostomia -> ecdysozoa

applying the script to the ncbi tree  yields the tree shown in fig.  <dig>  which is identical to the tree shown in fig.  <dig> 

discussion
the size of the edit script will be a function of the size of the input trees, and the degree to which they differ. at the time of writing, there are  <dig>  metazoan taxa in genbank. given that the disagreement between the coelomata and ecdysozoa hypotheses concerns the deep level relationships, we can simplify the task by reducing the subtrees about which there is little or no disagreement to single nodes. for example, the  <dig>  arthropod taxa can be represented by a single node. hence, the tree shown in fig.  <dig> is greatly simplified, compared to the complete ncbi tree.

one issue we don't directly address here is using the tree that results from applying the edit script to query genbank. there are at least two approaches to doing this. the first is to store the tree in a local database and use a method such as visitation numbers  <cit>  to generate queries involving higher taxa .

another approach would be to use the tree to rewrite queries in terms of the original genbank taxonomy. for example, in our rather simplified example in fig.  <dig>  we could use the tree to automatically rewrite the query term "ecdysozoa" as the sum of its children  as both trees  agree on the composition of these two taxa. one advantage of this approach is that we can continue to use tools such as blast, but in the context of a different taxonomic classification.

CONCLUSIONS
we present a solution to the problem of generating modifications of the ncbi taxonomy, based on the computation of an edit script that summarises the differences between two classification trees. our algorithms find the shortest possible edit script based on the identification of all shared subtrees, and only take time quasi linear in the size of the trees because classification trees have unique node labels. we have implemented the edit function in a c++ program that makes use of the graph template library  available from . the code has been compiled and tested with the gnu gcc compiler on mac os x and linux machines, and is available from . the software comprises two programs, forest and script. the program forest takes two trees in gml format  and computes an edit script. given this script and the original tree, script generates the edited tree.

availability and requirements
• project name: forest

• project home page: 

• operating system: unix/linux, tested on mac os x and red hat  <dig> 

• programming language: e.g. c++

• other requirements: graph template library  ()

• license: gnu gpl

• any restrictions to use by non-academics: forest depends on gtl, which can be downloaded free of charge for non-commercial use. commercial use of gtl requires a licence from brainsys – informatiksysteme gmbh ()

authors' contributions
rdmp posed the problem, and gv developed the algorithm. rdmp and gv jointly developed the software and wrote the manuscript.

