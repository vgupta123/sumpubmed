BACKGROUND
restriction enzymes in genetic engineering
restriction enzymes and methylase are components of a bacterial mechanism aimed at resisting attack from bacteriophages and removing foreign viral dna sequences. a restriction enzyme cuts a dna molecule and forms a sticky or blunt end at each side of the incision site without damaging the nitrogenous bases. a dna ligase can then splice a cut end to that of another dna molecule. each restriction endonuclease is an enzyme that recognizes a specific dna sequence and cuts the dna molecule at a particular position in relation to the recognition sequence, producing a blunt or overhanging end, depending upon the enzyme chosen. while restriction enzymes typically recognize specific short dna sequences, the genetic code is redundant, with most amino acids being represented by more than one codon. therefore, with creative use of sequence modifications, and use of synonymous codons, one can create restriction sites without changing the precise amino acid sequence coded for.

a dna sequence can be synthesized by assembling short synthetic oligonucleotides using pcr amplification. using this approach, several oligonucleotides with overlapping end sequences can be assembled into a whole dna sequence  <cit> . dna synthesis using this pcr-based ligation method, however, has some limitations. for example, it can only produce dna sequences with length up to approximately  <dig>  kbp. in long dna segments, the primer extension will stop at an unpredictable position in the dna sequence, and the probability of base pair mismatches will increase. additionally, the proportion of gc content is limited to 40-60% by this approach. due to such limitations, a long whole dna can not be synthesized by pcr technology alone. using restriction enzyme cutting technology, several dna segments can be connected to form a longer full-length dna sequence  <cit> . there is an increasing interest in artificially synthesizing in vitro large dna constructs and even whole genomes with restriction enzyme cleavage followed by ligation of segments <cit> .

informatics support for restriction site analysis
there are several informatics tools for finding existing restriction enzyme recognition sites in a dna sequence. nebcutter works in browser-based client-server mode  <cit> . the server maintains a restriction enzyme database, and accepts a dna sequence and several parameters from a user. after calculating, the server returns to the user the locations of recognition and cleavage sites and displays the sites in the user's browser. the nebcutter algorithm for locating restriction sites is written using the gcc environment. filtering and queue management tasks are also implemented in c. graphical rendering of results is performed by the gd libraries. gd libraries allow functionality such as zoom in, zoom out, and automatic adjustment of the number of tags of recognized sites. the web user interface is dynamically generated by php scripts, and the web server is supported by apache. nebcutter supports manually input dna sequences, a sequence loaded from a local file, or a sequence identifier. if a sequence identifier is used the server will retrieve data from ncbi databases. linear and circular input sequences are both supported. the current version also supports a list of generally used genomes or plasmids as default input sequences.

nebcutter is a powerful tool to locate restriction enzyme recognition sites. it supports a wide range of restriction enzymes. the illustration of results is flexible and clear. but nebcutter has several limitations. the first is the potential for network bottlenecks. if the input sequence is large, such as that of a plasmid or a genome, the network response time becomes long and the process may even error out. the second limitation is that nebcutter only locates recognition sites in the original dna sequences as input. it does not support recoding to create a new restriction site. sometimes users may need a specific restriction enzyme site at a certain location. nebcutter provides no solution for such situations.

another similar informatics toolkit, the sequence manipulation suite , supports many operations for sequence analysis, including restriction site identification  <cit> . it is a javascript based web application and runs on the client machine. since there is no information transferring between server and client, it has no network delay. it supports both linear and circular sequence input. but, like nebcutter, sms only locates recognition sites in the original dna sequences, with no support for designing alternative restriction sites created through silent mutations.

watcut, created at the university of waterloo, is another online tool for restriction enzyme analysis  <cit> . it supports functions both to locate restriction enzyme cleavage sites directly in a given dna sequence and to search for potential restriction sites that can be created in a dna sequence using silent mutations. input dna sequences can be typed in the online form or loaded from the local drive. then six sequences, three in the forward strands and the other three in the reverse strands, are read with frame shifting. after one of the six sequences is chosen, candidate restriction sites are listed. results can be displayed graphically or listed textually in a table. although watcut introduces support for silent mutations, the functionality is limited. it can only find restriction enzyme recognition sites in a dna sequence of at most  <dig> nucleotides. like nebcutter, the tool needs a server with php support and runs in a client-server mode, with potential performance bottlenecks in server response and network bandwidth.

the increasing interest in artificially synthesizing in vitro large dna constructs and even whole genomes with the aid of restriction enzymes underlines the importance of creating robust informatics tools that can not only identify existing restriction enzyme recognition sites but also support the design of new restriction sites at a desired location without changing the protein sequence through the use of silent mutations. based on this rationale, we designed a novel fast pattern finding algorithm, named inverse codon replacement pattern finder . in this paper, we describe several key aspects of the icrpfinder algorithm and provide sample results using icrpfinder to find or create restriction enzyme recognition sites in target coding sequences. icrpfinder is a web-based application and can be accessed using a standard internet browser or run as a stand alone application on a local machine.

implementation
algorithm
challenges of brute force approach
to design novel restriction enzyme recognition sites, a brute force approach would start with the translated protein sequence. it would find all codons that encode each amino acid in the protein sequence; it would generate an exhaustive list of ordered codon combinations; then, it would look for the desired pattern  in each candidate dna sequence. a challenge of this brute force approach is that the number of dna sequences which can be translated into the target protein grows exponentially with the length of the protein. for example, assume a researcher wants to find a recognition site for the restriction enzyme noti, gcggccgc, in the human tp <dig> protein . tp <dig> has  <dig> amino acids and it does not include the desired sequence, gcggccgc. consider a  <dig> amino acid subsequence, irgre, located at the position 332- <dig> of the tp <dig> protein. there are  <dig> codons  which can be translated into the amino acid ile/i,  <dig> codons for arg/r,  <dig> codons for gly/g,  <dig> codons for arg/r, and  <dig> codons for glu/e . a total of  <dig>  possible dna sequences can be constructed encoding for this 5-amino acid sequence alone. as the average number of codons coding for each amino acid is close to  <dig> , given a protein of length n, the number of possible dna sequences is approximately 3n. since the computational complexity is exponential ), the brute force look-up approach becomes intractable as the length n of a protein increases.

there are total  <dig>  possible dna sequences created by combining codons from each position. any combination, for example attcgtggtcgtgaa, or the original sequence, atccgtgggcgtgag, can be translated to the same amino acid sequence irgre. the brute force approach is not practical because of the exponential growth in the number of possible sequences.

proposed non-brute force approaches
we propose two approaches that avoid the generation of all possible dna sequences as required by the brute force approach. for illustration, we continue using the example with noti, with the gcggccgc restriction site pattern.

approach 1
at each position  of the target protein all possible codons are compared to the noti sequence. if no codon matches then we proceed to the next position and start a new match. if one codon is matched, however, then we continue to check the neighboring amino acids for potential complete matches. as numerous locally unmatched dna sequences are discarded, the computational complexity is decreased to o.

approach 2
an alternative approach would be to "translate" the noti sequence into three amino acid sequences, one for each reading frame. for example, we shift and "translate" the noti sequence as:

gcg gcc gc -> "aa" with "gc" right overhang;

g cgg ccg c -> "rp" with "g" left overhang and "c" right overhang;

gc ggc cgc -> "gr" with "gc" left overhang.

there might be "overhangs" of one or two nucleotides at the right, left or both sides. we compare the "translated" noti sequence to the target protein sequence first. if the "translated" sequence and the target protein sequence are matched, continue to compare the left and right overhangs.

we compare the "aa", "rp" and "gr" one by one to the target "irgre", and find "gr" in the target sequence . then we proceed to investigate whether the left overhang "gc" is also matched by the left amino acid "r" . there are six codons for the amino acid r, and one of them, cgc, matches the left overhang "gc" . this means that either the noti recognition sequence  is found in the original target protein tp <dig> or that one can create a recognition site in the target protein by using a few silent mutations. that is the solution. in this approach the computational complexity is o, so execution time falls dramatically. we chose approach  <dig>  which is more efficient, for implementation. since we "translate" the object dna pattern into an amino acid sequence and compare it to the target protein sequence, we call this algorithm inverse codon replacement pattern finder . the object pattern can be a restriction enzyme recognition sequence, or any other nucleic acid sequences of interest, such as promoter sequences.

source code
icrpfinder is an open source javascript application. it runs on most commonly used web browsers, including netscape navigator, internet explorer, firefox and safari. icrpfinder can be easily mirrored on a user's web site, or run on a local computer off-line. the code is freely available under the gnu general public license.

icrpfinder includes  <dig> common restriction site patterns, and additional sequence patterns can be input by the user. all information regarding the restriction enzymes used in icrpfinder was retrieved from rebase  <cit>  version  <dig> 

RESULTS
find all possible potential matches for a specific pattern figure  <dig> illustrates the graphical user interface  of the web application in which users input the target dna coding sequence and object pattern and configure the parameters. from the menu bar, users can select from two options:  find all potential matches for a specific pattern; or  find unique matches for all patterns. below the menu bar, a text box allows for entering and configuring the target dna coding sequence. nucleotide sequences in plain text or fasta format are accepted. the coding sequences  can be specified and accepted one by one if the input sequence includes not only cds but also introns or sequences from bacterial vectors. below the target dna box, another text box allows the configuration of the object dna pattern. a list of restriction enzyme recognition sites is pre-loaded as default patterns. user-defined patterns as well as their names can also be accepted.

the results are rendered graphically, and appear in text format if the target coding sequence is short or by zooming in on the results.

create unique patterns around a specific position
performance benchmarking
a benchmark test to evaluate the relative performance of icrpfinder, nebcutter and watcut was performed. the experiments were performed on a server with  <dig>  ghz of cpu and  <dig> gb of ram. the server has excellent network connectivity with a speed of  <dig>  gbps on the .edu domain. the data used in the experiments are the tp <dig> dna coding sequence and a random coding sequence created by sms  <cit> . the lengths of the two sequences are  <dig> nt and  <dig> nt respectively. for watcut, only  <dig> bp were used, since watcut limits the length of the input coding sequence to  <dig> bp. the details of searching and response times are shown in table  <dig> 

the performance of icrpfinder, nebcutter and watcut are compared on same data. in the first column icrpfinder  <dig> stands for the function to find all potential positions for a specific pattern and icrpfinder  <dig> stands for the function to find all unique patterns in a given region.

*only  <dig> bp were used to run watcut, since the application limits the length of the input coding sequence to  <dig> bp.

typical response times for icrpfinder were under  <dig> second, while for nebcutter the repose times were between  <dig> and  <dig> seconds. there could be two reasons why response times of nebcutter are quite long compared to icrpfinder. the first reason is the delay due to network transport. although the server has excellent network connectivity, the transport latency can not be neglected. the second reason could be due to gui rendering of results. the gui rendering in nebcutter is relatively slow as nebcutter has to choose and display partial results according to the width of the display region. the nebcutter response time also can vary depending on the number of results to be displayed. it appears that in the zoomed out display, nebcutter only displays a fraction of the possible restriction enzyme cut sites, while icrpfinder displays all the restriction sites. if nebcutter were to display all the restriction sites, we can presume that the response time for nebcutter would be even slower.

for watcut, the response times were 2- <dig> seconds; however, one must note that only a small fraction of the sequence was used, since watcut limits the input coding sequence to  <dig> bp. watcut was run with the default set of enzymes , while icrpfinder was run with a larger default set, of  <dig> enzymes.

CONCLUSIONS
icrpfinder is a powerful tool for finding or creating a specific dna sequence in a given coding sequence. it translates both the target coding sequence and object dna pattern to amino acid sequences and finds the matches between two amino acid sequences. in addition to finding restriction enzyme recognition sites in the given target coding sequence, icrpfinder can create recognition sites without changing the translated protein sequence. in addition to restriction enzyme recognition sites, as a general purposed tool, icrpfinder can also accept users' dna patterns and then help to analyze any dna-protein binding events by given dna patterns. the non-brute force approach with dna translating can dramatically decrease the computation time for the pattern finding/creating process. since icrpfinder is a browser-based application, it can run on any platform, in on-line or off-line mode. this tool should be useful for experimental biologists who manipulate or synthesize large dna sequences or even whole genomes.

availability and requirements
project name: icrpfinder

project home page: 

operating system: platform independent

programming language: javascript and dhtml

license: gnu gpl

any restrictions to use by non-academics: see gnu gpl license for details

authors' contributions
cl and xz conceived this work, cl wrote the manuscript, yl performed the test, vd advised this work and revised the manuscript, and ps gave advice and revised the manuscript. all authors read and approved the final manuscript.

