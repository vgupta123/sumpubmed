BACKGROUND
biomedical science can be characterized as the pursuit of deeper, more useful mechanistic insight into biological phenomena to facilitate advancing health. in silico modeling and simulation  can accelerate this process when models are designed for particular use cases. we define use case as a detailed, very particular description of the way a model will be used, including specifications for input, output, parameters, execution protocols, the interpretation of data, and qualitative and quantitative comparisons to other models. we follow software engineering terminology in referring to similarities between use cases as usage patterns. for a scientifically useful model, use cases must be highly specific and explicit, which enables clear specification of requirements. such models are perpetual works in progress, satisfying various use cases throughout model development. in silico m&s methods are also viewed broadly as a promising countermeasure to the recent decline in pharmaceutical r&d productivity  <cit> .

what m&s requirements must be satisfied to advance biomedical science and help reverse this productivity decline? there are many, including modularity, semi-autonomy of model components, and semi-automation of in silico experimentation and parameter searching. further, biological software analogs must exhibit increasingly explanatory mechanisms and become increasingly biomimetic during execution. this work focuses on one requirement: modularity. modularity is an important requirement in itself and also facilitates the satisfaction of other requirements. namely, modularity is required to ease the reuse and integration of software analogs for the many particular, diverse use cases of individualized medicine and virtualized patients.

the heterogeneous nature of the objects of biomedical research and vast range of wet-lab experimental platforms make modularity especially desirable yet challenging. biology is modular in its own sense, in that many phenomena are functionally separable  <cit> . efforts to identify functional modules in biology entail identifying common causal event cascades or reaction networks  <cit> . on the other hand, biological components  are not standardized; even individual cells within the same cell population can vary in phenotype  <cit> . furthermore, wet-lab measurements in biology are complicated by the fact that many attributes are experimentally inaccessible, necessitating vastly different experimental platforms . the nature of biology and the challenge presented call for modular biological models designed to satisfy a variety of use cases.

but currently, most biomedical models exist in isolation. it is difficult to reuse or integrate models or their components for many reasons. an important reason is the lack of modularity or, if modular, a modularity method that fails to facilitate reuse and integration. even in object-oriented models, in which model components are encapsulated into discrete software objects, components are usually tightly coupled yet not cohesive, rendering them difficult to be reused. tightly coupled, non-cohesive models are those in which distantly related model components are highly interdependent. that is, they heavily rely upon each other via references, shared memory, or other a priori knowledge. components of these models cannot be used in another model context without significant code refactoring. modularization strives to circumvent these challenges, resulting in loosely coupled components that can function both in isolation and within the broader model context.

modularity has established methods and demonstrated importance to m&s in many domains outside biology, including ecological modeling  <cit> , agricultural modeling  <cit> , and virtual manufacturing  <cit> . established modularity methods also exist for particular modeling formalisms like discrete event systems specification   <cit> , <cit> . the term modularity is closely related to terms like model reuse  <cit> , integration  <cit> , and composability  <cit> ; we focus here on reuse. michael pidd defines a reuse spectrum of modularity methods, within which we set the context for our modularization methods  <cit> , <cit> . at the right end of the spectrum is code scavenging, followed by function reuse, component reuse, and ultimately full model reuse at the left end. he notes that complexity of the required modularization methods increases from right to left, but the frequency in which model reuse is employed increases from left to right. under pidd’s spectrum, our modularization methods below focus on component reuse. modular components  allow the modeler to think more deeply about the role of the model and to more completely address a modeling project’s requirements. in particular, modularity facilitates component reuse and model integration for models with different use cases, including the ability to exchange modules during or between simulations. having modules that have achieved degrees of validation separately and can be easily altered, both alone and when composed, will increase the pace toward better mechanistic explanations.

what is an appropriate target for component modularization in biological models? at specified levels of abstraction, many biological mechanisms are common to a variety of cell and tissue types. paraphrasing darden, we refer to mechanisms as entities and activities orchestrated such that they generate the changes characterizing a phenomenon from initiation to termination  <cit> . it is often at the mechanism level in which changes occur between normal and diseased states. thus, software analogs of biological mechanisms are reasonable candidates for modularization. as an example, hepatocytes often respond to xenobiotic  exposure by up-regulating  xenobiotic metabolizing enzymes—a process called enzyme induction   <cit> . the cytochrome p <dig> family of enzymes metabolize xenobiotics according to specific metabolic pathways  <cit> . the intracellular event types are common to many pharmacodynamic responses  <cit> , <cit> . thus, a generic pharmacodynamic response module that can be easily reused is expected to be useful within a broad range of biomedical models. such physiomimetic mechanism modules  are expected to broadly improve model usefulness without requiring significant refactoring of implementations.

existing efforts toward modularity
the need for modularity in biomedical m&s is broadly recognized, but existing efforts toward modularity are largely limited to equation-based modeling in the context of biochemical reaction networks. there are tools and frameworks for developing modular equation-based models of biochemical reaction networks, including metabolic, signaling, and regulatory pathways  <cit> – <cit> . typically, these modularization approaches involve breaking down a larger hypothesized network into smaller components or “modules” that are then recomposed to form a coherent whole  <cit> . the unit of modularization is a set of equations that usually maps to one part of a hypothesized biochemical reaction network. we refer to these modularity methods collectively as “network-based” modularity. the following examples illustrate the state-of-the-art. note that, while most of the examples below are developed within the context of biochemical reaction networks, some of them can be applied more broadly.

 mallavarapu et al. provide a framework for developing and reusing equation-based models, confined to ordinary differential equation models following the chemical master equation  <cit> . the framework facilitates abstraction, which allows generic properties of components or sub-systems to be specified independently of specific instances. their methods also focus on hiding internal complexity of each module and allowing user-defined rate functions.

 promot is a tool that facilitates modular setup and editing of network models, including biochemical reaction networks  <cit> . it is unique in its support of both differential algebraic equation systems and boolean network models.

 in the context of synthetic biology, tinkercell allows for the modular construction of ordinary differential equation models describing genetic circuits or regulatory networks  <cit> . a user creates models from a list of “parts,” and the program assigns rate equations describing dynamics of transcription and translation reactions. the unit of modularization is an equation that maps to a “biological part,” defined as “a functional unit of dna that encodes for a specific biological function” .

 snoep et al. demonstrate integration of many sub-network modules, aimed at modeling the entirety of biochemical processes in a living cell  <cit> .

 blinov et al. semi-automate modularization by first extracting sub-systems  of biochemical reaction networks and then specifying the rules of module interaction  <cit> .

while network-based modularity may be an essential requirement for its specific model type and use cases within its specific domain, accelerated generation of increasingly explanatory mechanisms requires more generalized modularization methods. a future research question, which is beyond the scope of our current work, is when and how network-based modularity methods might be employed productively within more generalized modularization methods. the efforts described above have limitations. namely, they are inextensible to model types other than equation-based models. each method above is limited to one or a few model types—usually a combination of ordinary differential equations , differential algebraic equations, and boolean logic. many of the supported equations are further limited to a specific functional form, e.g. ordinary differential equations following the chemical master equation  <cit> . these methods are inextensible to other model types, which is significant given that other model types, including agent-based, actor-oriented, discrete-event, and hybrid, are proving increasingly useful  <cit> , <cit> . further, most of the methods above rely on using standardized markup languages and/or ontologies. models or modules that cannot be described using supported markup languages and/or ontologies cannot be modularized or integrated using the above methods, absent considerable reengineering. as examples, the modularity methods of blinov et al. require interchangeable modules to be described using either the systems biology markup language  or their proprietary markup language  <cit> ; tinkercell uses strict ontologies for model components like parts, promoters, and transcription factors, without the capability of editing or defining new ontologies  <cit> . the exception is mallavarapu et al., whose platform circumvents this limitation by allowing user-defined ontologies. they note that ontologies, like those available in sbml, are agreed upon by the community and cannot be altered by any one user  <cit> . the greater flexibility of user-definable ontologies is essential when a goal is improved mechanistic explanatory power. often, non-equation-based models cannot be feasibly described using standard markup languages and/or ontologies, especially when those models are upstream in the development process. thus, modularity methods must be applicable even to those models that are difficult or not possible to describe using those languages.

from the perspective of multi-scale, multi-attribute modeling, existing methods are not without additional practical problems. even when restricted to the appropriate model type and domain context, current reuse and integration efforts often require significant model-specific refactoring. for example, palsson et al. integrate three distinct models of immune cell interaction using a modular framework; included is a three-page table summarizing the model-specific integration issues they overcame  <cit> . thus, accelerated progress requires more generalized modularization and integration methods that facilitate limiting, if not eliminating, model-specific refactoring.

the limitations above inform us of the challenges to address in a more generalized modularization method. namely, the methods should not be limited to a single model type , domain context , or markup language . drawing on many of the advantages from the above examples, herein we favor a “physiologically-based” modularization method  aimed at overcoming these challenges. while the methods here are extensible to strictly equation-based models, our drive to achieve new, demanding requirements  <cit>  forces us to focus on other model types  that do not yet have established modularization methods.

it is worth noting that methods will or should always be driven by requirements, whether or not the requirements are explicitly stated. for most existing methods, the modularity goal is to reuse or curate biochemical reaction network models  expressed as systems of mathematical equations. achieving this goal entails the following requirements:

 methods are applicable to a subset of equation types.

 methods can be described using standardized markup languages and/or ontologies.

 methods are independent of modeling framework or programming language.

the generalized modularity goal is different. it is to reuse, repurpose, or integrate model mechanisms within different model use cases of potentially different model types. achieving this goal entails the following requirements:

 methods are applicable to a variety of model types and methods, beyond equation-based models.

 methods need not be restricted to models describable using standardized markup languages and/or ontologies. allow user-defined  ontologies that may be needed as mechanistic insight improves.

 methods are independent of modeling framework or programming language.

a final example of a modularity approach, with requirements more closely aligned to the generalized modularity goal, is exemplified by liu et al.  <cit> . they employ an object-oriented strategy to integrate four models of angiogenesis in skeletal muscle, focused on exchanging data among modules written in different programming languages. a comparison to our approach is given in methods.

our contributions
in this work, we present a generalized method of modularizing mechanisms into software objects that we call pmms. we then demonstrate the approach by applying these methods to develop a generic pharmacodynamic response module. since most existing models were not initially constructed with modularity in mind  <cit> , <cit> , we developed the methods to be either applied to existing, non-modular models or applied at the start of model development. pmms are designed to be reusable, biomimetic analogs reflecting current understanding of the underlying biology. they are designed to be flexible in their ability to produce results that are indistinguishable from wet-lab experiments embedded in considerable uncertainty. their design enables mechanisms to be as robust as feasible to changes in model context, including model-to-time mappings. we exemplify these capabilities by achieving validation targets from two different experimental platforms. to do so, we modularize four intracellular mechanisms adapted from an in silico liver . the four analog mechanisms map to enzyme induction, enzyme elimination, drug metabolism, and enzyme-substrate binding. we first verify that the modularization process itself did not alter simulation results. the modularized isl then achieves validation targets drawn from in vivo propranolol outflow profile data.

in addition, we create a modularized in silico hepatocyte culture . it uses the same pmms as the isl and required no refactoring. though the pmms are identical, groundings are relational and thus free to differ between the isl and ishc, and we demonstrate the value of enabling that freedom. we describe ishc validation against in vitro propranolol intrinsic clearance data from multiple sources. the feasibility of this task has been demonstrated in an earlier model in sheikh-bahaei and hunt  <cit> , and we present several extensions of that model. in this work, the ishc demonstrates exchangeability and reusability of pmms and the ability to separately validate software mechanisms against validation data spanning multiple wet-lab platforms.

model use cases
the isl and ishc are biomimetic analogs. a biomimetic analog is a software model that, when executed, produces phenomena that mimic attributes measured or observed during referent wet-lab experiments  <cit> . unlike traditional inductive models, biomimetic analogs also rely on abductive  <cit>  and analogical  <cit>  reasoning. most mathematical  models are inductive: they start with data and then infer computational mechanisms that might produce that data; for example, fitting an equation to a pattern observed in data  <cit> . in contrast, analogs rely on abductive reasoning: they start by focusing on a phenomena of interest, hypothesizing model mechanisms, synthesizing an explanatory composition of those mechanisms, and then testing that composite model against data. whereas inductive models are useful for positing explanations of patterns observed in large amounts of data and when precise prediction is required, abductive models are useful for exploring mechanistic hypotheses and when uncertainty is pervasive  <cit> , <cit> . thus, analogs are suitable for experimentation and mechanistic hypothesis testing. an experiment on an analog is called an in silico experiment. it is precisely analogous to a wet-lab experiment.

the isl simulates drug clearance experiments in an in vivo setting. one use case configuration maps to a portion of an in situ isolated, perfused rat liver. an important use case is the multi-indicator dilution technique to measure the hepatic outflow profile in response to a bolus of drug  <cit> – <cit> . at the start of this experiment, the bolus is administered to the portal vein. as blood flow carries drug through the sinusoid tract to the central vein, a fraction of drug is taken up by hepatocytes, where it may be metabolized. central venous outflow is collected at distinct time intervals and the amount of drug in each elution is measured, resulting in an outflow profile curve. because a fraction of drug reaches the central vein without being metabolized or taken up by hepatocytes, the outflow profile yields a characteristic peak anywhere from a few seconds to several minutes after the initial drug administration  <cit> . features of the outflow profile curve depend on factors including liver disease state  <cit> , drug lipophilicity  <cit> , <cit> , and sinusoid volume  <cit> .

the ishc simulates drug clearance experiments in an in vitro setting. it maps to a portion of a monolayer culture of isolated rat hepatocytes. its use case is measuring hepatocytes’ intrinsic clearance—a measure of the intrinsic ability for hepatic enzymes to metabolize drug  <cit> , <cit> . at the start of this experiment, a bolus of drug is administered into the surrounding media, and hepatic enzymes metabolize drug as it is exchanged between cell and media. the amount of remaining drug is measured over time, and the resulting curve is used to calculate the hepatocytes’ intrinsic clearance. intrinsic clearance is often used as a predictor of various in vivo clearance measures, including hepatic clearance  <cit> , in vivo intrinsic clearance  <cit> , <cit> , and extraction ratio  <cit> .

methods
to avoid ambiguity between in silico components and their referent biological counterpart, capitalization is used when referring to the former, e.g. hepatocyte. pmms are named using the suffix handler, e.g. metabolismhandler. java interfaces are named using the suffix info, e.g. cellinfo. parameter names are italicized. for a full list of isl and ishc parameters and their explanations, see table  <dig> 

in the isl and ishc, solutes are mobile objects that map to a group of small molecules. solutes can have any number of properties that map to pharmacodynamic properties. each solute is assigned a type: one of various drugs or metabolites. binders are objects that bind  solutes. enzymes are a subtype of binders that can metabolize bound solutes. solutes can either exist inside or outside cells; herein binders exist only within cells. cells are objects that map to groups of cells, and can be further delineated into hepatocytes and epithelial cells. all cells can undergo binding between solute and binder; however, metabolism, induction, and elimination events occur exclusively in hepatocytes. analog time advances in simulation cycles. the above capitalized entities establish an implicit ontology, inherently semantic with respect to the model and components.

we describe two sets of modularization methods. the first is general and scientific, applicable to any multi-scale biological model; the methods can be applied using almost any programming language and modeling environment. the second is specific and engineering-focused; it describes how we specifically applied the general methods to the isl and ishc.

general modularization methods
the following list describes the general modularization methods. we set these methods within a broader biological m&s approach called the iterative refinement protocol   <cit> . the ir protocol provides a scientific method for developing and validating multi-scale biological models that are increasingly biomimetic. it focuses on iterative model refinement following a strict parsimony guideline. in figure  <dig>  we present the methods below as an extension of the ir protocol.

 mechanisms – identify the software mechanisms to be modularized. these mechanisms may be algorithms, rules or governing logic, sets of equations, or other computations. mechanisms need not map to specific biological or physiological functions, but should do so if they are to maximize the benefits of modularization listed in discussion. examples of common mechanism types in biology include: movement and transport ; biochemical reaction networks ; biophysical phenomena ; changing activity state ; damage, injury, and repair ; disease progression; therapeutic intervention; cell growth, division, and morphogenesis; and induced environmental changes .

 users – identify the objects intended to use the pmms. a mechanism user may be an entire model or a component. again, each mechanism user need not map to a specific biological or physiological entity, but should do so if it is to maximize the benefits of modularization listed in discussion.

 state information – identify the state information used and/or altered by the mechanisms; that is, all parameters and input/output variables, including any units associated with these quantities. state information can be of any data type, specific or not to the modeler’s framework.

 partition – partition the state information into physiologically meaningful or similar groupings. for example, variables mapping to concentrations of different mobile objects may be partitioned into one group, and variables mapping to rate constants in another. partitioning decisions will be influenced by many factors, including model use case and mechanism granularity.

 exposure – create parametric containers, named according to the physiological information they contain. parametric containers must be able to find and expose individual sub-elements within the state information at runtime. so doing allows the mechanism user to ask for specific data deemed useful while ignoring unknown or unused information. the mechanism user provides the correct data types and/or units required by the parametric container; data type and/or unit conversion may be necessary. placing this responsibility on the mechanism user allows new or different mechanism users to execute pmms without altering or refactoring pmm code. the implementation will depend on the programming language and modeling environment. examples include using: java, c++, or .net interfaces; objective-c protocols; scala traits; xml schemas in xml-based languages;or json, for use in web-based applications.

 encapsulation – implement and encapsulate the behavior of each mechanism in the appropriate language of the environment. in the implementation, use the parametric containers to hold, access, and/or manipulate state information. the encapsulated mechanism is a pmm. again, the implementation will depend on the programming language and modeling environment. examples include using: java, c++, .net, objective-c, or scala classes; threads or processes; promises/futures or actors, for use in the actor model of computation; or xslt or xpath, for use in xml-based languages.

to summarize, there are three key software aspects comprising the above mechanism modularization process: physiomimetic parametric containers, the pmm, and the mechanism user. parametric containers facilitate communication of state information between pmm and mechanism user: they identify which state information is required by the mechanism user to use a particular pmm. the pmm executes the mechanism logic: it uses the parametric containers to access and manipulate the contained state information. the mechanism user is the entity using the pmm: it exposes the required state information as parametric containers and executes the pmm.

isl and ishc modularization
the following list of method descriptions, illustrated in figure  <dig>  provides details for our application of the above methods to the isl and ishc. furthermore, it generalizes our implementation to biological models written in java. steps  <dig> –  <dig> above are independent of modeling environment; thus, steps  <dig> –  <dig> below simply describe how we applied them to the isl/ishc. steps  <dig> and  <dig> above depend on the modeling environment; thus, steps  <dig> and  <dig> below first describe our implementation generalized to models written in java, and then describe how we applied this approach specifically to the isl/ishc. though the details in steps  <dig> and  <dig> below are java-specific, the implementation easily translates to other programming languages supporting software interfaces.

 mechanisms – the mechanisms are four intracellular mechanisms of the isl  <cit> : enzyme induction, enzyme elimination, metabolism, and binding. prior to modularization, the logic governing enzyme induction, enzyme elimination, and metabolism were handled together within the hepatocyte object. binding events were handled within the cell object, from which hepatocyte derives. the remainder of this description focuses on the metabolism mechanism.

 users – the users of the metabolism mechanism are hepatocytes.

 state information – the state information used by the metabolism mechanism includes  drug objects,  enzyme objects,  bound drug-enzyme pairs,  metabolism probabilities,  metabolite production probabilities, and  the types of solutes included in the simulation. the ishc is grounded relationally , so analog-to-referent mappings to real-world units depends on use case and is handled post-simulation.

 partition – we partitioned the state information into two groups: - above are related to drug and enzyme binding, whereas - are specifically related to metabolism.

 exposure – generalized java implementation: we exposed each partition using java interfaces that contain methods to access and manipulate the state information. a java interface defines a behavior protocol to which unrelated classes of objects can adhere using potentially very different implementations. here, each java interface contains methods to access or manipulate the physiological state information in its group. applied to the isl and ishc: the first partition is exposed as a java interface called bindinginfo. it contains methods to access - above. the second partition is exposed as a java interface called metabolisminfo. it contains methods to access - above. since the addition or removal of solute may be defined differently in different modeling frameworks, metabolisminfo also includes methods to add or remove solute.

 encapsulation – generalized java implementation: for each pmm, we defined a new java class, each with a single function called “run” that takes java interfaces as parameters. we copied the pre-existing governing logic into the “run” function and replaced references to state information with corresponding methods from the java interfaces, thereby encapsulating the mechanism. mechanism users then implement the java interfaces. to use a pmm, a mechanism user instantiates it and calls its “run” function when desired. applied to the isl and ishc: we created the java class metabolismhandler, whose “run” function takes bindinginfo and metabolisminfo as parameters. hepatocyte implements bindinginfo and metabolisminfo as follows. java interface methods to access - above simply return the corresponding state information. metabolisminfo methods to add  solute do so by adding  a solute object to  three locations: a master list of all solutes, a hepatocyte-specific list of solutes, and the grid space at the location of the hepatocyte. to use metabolismhandler, a hepatocyte instantiates it and calls its “run” function once per simulation cycle.

we summarize the java-specific modularization methods applied to the isl and ishc by describing the same three key software aspects. the physiomimetic parametric containers are java interfaces, e.g. bindinginfo and metabolisminfo. they contain methods to access and manipulate state information. the pmms are java classes, e.g. metabolismhandler. they take java interfaces as parameters and use the contained information to execute the mechanism logic. the mechanism users are hepatocyte and cell. they implement the java interfaces and execute the pmm once per simulation cycle. java interface implementation may require unit conversion when the mechanism user provides data in different units than required by the pmm. once each java interface is implemented, the mechanism user is free to use any pmms requiring any combination of these java interfaces. abridged java code for representative examples of each of the three key software aspects is available in additional file  <dig> 

the following example demonstrates the three software aspects in the isl and ishc. cellinfo  contains an accessor for a variable that maps to the resources  made available to the cell. inductionhandler  uses this information to determine the capacity to up-regulate enzymes. hepatocytes  implement the java interface differently in the isl and ishc. in the isl, a hepatocyte implements the resources accessor by applying a gradient function related to its distance from the portal vein, which maps to the decrease in available resources deeper into the tissue. in the ishc, a hepatocyte implements the accessor as a constant value because the monolayer of cells directly contacts well-mixed culture media. thus, the two different models utilize the same pmms but with different java interface implementations.

the parametric containers required by a particular pmm are based on available wet-lab experimental data related to the referent mechanism. continuing the above example, enzyme induction has been found to be influenced by drug and enzyme identity and cell type  <cit> . to represent this knowledge, the pmm inductionhandler requires the java interfaces bindinginfo , cellinfo , and inductioninfo . thus, the mechanisms are based on referent physiology. however, we prefer the qualifier “physiomimetic” over “physiologically-based” to emphasize distinctions between model and referent that cannot be ignored. that emphasis  helps avoid model reification. reification is ignoring or failing to recognize this distinction; it is a logical fallacy in which model and referent are confused or conflated  <cit> .

since pmms are packaged into distinct software entities, they can easily be exchanged for alternative mechanisms, different versions, or new mechanistic hypotheses within the same analog . these different versions may exhibit different mechanistic granularities and/or represent different cell states . pmms can even be exchanged “on the fly”—at any time within a simulation. note that such dynamic module replacement may incur technical challenges, and we point the reader to established guidelines and technical conditions to facilitate successful on the fly pmm exchange  <cit> , <cit> .

by design, a particular pmm is not aware of the existence of its mechanism user; that is, it requires no a priori knowledge of the mechanism user. rather, pmms communicate with the mechanism user via parametric containers, which are not specific to the mechanism user. thus, completely different models can reuse and/or repurpose pmms simply by exposing the appropriate state information in parametric containers . for example, rather than requiring hepatocyte-specific parameters, pmms developed here only require generic parameters like bindinginfo. thus, a hypothetical heart cell can use the pharmacodynamic response pmms originally used within hepatocyte. additional mechanisms used by heart cell—whether or not they have been modularized—will not be disrupted by the use of pharmacodynamic response pmms.

the general method we outline and exemplify using java interfaces is also exemplified by the specifics of liu et al.  <cit> . they encapsulate mechanisms  as modules, use shared memory for information exchange between modules, provide for dynamic loading and parameterization of interface implementation, and explicitly design inter-module mapping interfaces. because their integration is driven in a fundamental way by the high computational expense of the mechanisms, it is a low-level integration, thereby requiring a very technology-oriented description. although the methods used may seem different than those presented herein, there are similarities. an important distinction, however, is that, for this work’s use cases, our strict parsimony guideline allows us to operate largely within the high-level java environment, far above the virtual machine, whereas computational requirements of liu et al. demand that they puncture the virtual machine layer and implement their modularity at and below the interface between the virtual machine and the underlying language runtimes. to engineer a fully general software infrastructure facilitating either their or our methods would require “lifting” the model-specific modularizations into a standardized architecture for plugins. the general method we outline is intended to help guide that engineering effort.

logic governing the pharmacodynamic response pmms
induction and elimination mechanisms are detailed in ropella et al.  <cit> . the mechanisms function by creating  or removing  enzymes as a function of the number of drugs present in the entity using the mechanism . an important parameter is resources . for induction, the number of enzymes to be created varies inversely with resources. for elimination, the number of enzymes to be removed varies directly with resources. this is consistent with the findings that oxygen-rich environments result in increased elimination and decreased induction of drug-metabolizing enzymes both in vivo  <cit> , <cit>  and in vitro  <cit> .

the metabolism mechanism samples each solute in the map of bound solute-binder pairs. for each solute, a pseudo-random  draw from the uniform distribution, u, determines whether the solute is metabolized. the probability of metabolism is based on a solute-specific parameter, allowing different types of solutes to have different metabolism probabilities. a metabolized solute is replaced with a metabolite. if the solute can produce multiple types of metabolites, one is randomly selected using a probability map. otherwise, the metabolized solute is simply removed from the system. this mechanism is kept sufficiently general so that additional users of metabolismhandler can implement their own model-specific metabolic pathways by changing solute-specific parameters rather than refactoring the entire mechanism.

the binding mechanism samples each unbound solute inside a cell. for each solute, a random draw from u determines whether the solute binds  to one unbound binder in that cell, forming a bound solute-binder pair. upon binding, the solute is scheduled to be released from the binder after bindcycles simulation cycles. scheduling events  depends on the specific modeling framework being used. since we expect others using pmms to utilize different modeling frameworks, the user of bindinghandler must implement scheduling solute release as part of implementing the bindinginfo java interface.

model development
the isl and ishc are both implemented in java, utilizing the mason multi-agent simulation toolkit  <cit> . they are object-oriented, multi-scale, agent-based, discrete-event simulation systems. they are used to falsify  software mechanisms that serve as mechanistic hypotheses about, for example, acetaminophen-induced hepatotoxicity in an in vivo  or in vitro  setting. both analogs use the same pmms but have different model structure and operating principles. as we discuss isl and ishc specifics, refer to table  <dig> for important similarities and differences between them.

isl development
full details of the isl structure and operating principles are provided elsewhere  <cit> , <cit> , <cit> – <cit> . briefly, the isl consists of a directed graph—or sinusoid network—of interconnected nodes and edges. each node is a sinusoid segment. edges map to direction of blood flow, from the portal vein to the central vein. the sinusoid segment is the functional unit of the isl. each sinusoid segment contains hundreds of cells contained within distinct spaces . the innermost space is the core, which maps to blood carrying referent compounds through sinusoid networks from portal vein to central vein. the outermost space is the bile canal, which contains solutes excreted from cells. between the core and bile canal are concentric cylindrical grids that can contain hundreds of cells. immediately surrounding the core is an empty grid, followed by a grid containing endothelial cells; the next grid contains hepatocytes. each simulation cycle, the isl reports the fraction of drug objects contained in the central vein. the resulting plot is an isl outflow profile .

ishc development
ishc components and scales are illustrated in figure 3b-c. the ishc structure is composed of two stacked, rectangular grids, each mapping to different in vitro spaces. cellspace maps to the monolayer of hepatocytes, and each grid point contains at most one hepatocyte. mediaspace maps to culture media. both grids may contain solutes. solutes can move between grids or laterally within a grid. we recognize that there are many alternatives to using two-dimensional grids to map to referent spaces. for example, we could implement continuous space in which hepatocytes have distinct area or volume. alternatively, mediaspace could be a three-dimensional grid in which height is explicit. we chose stacked, two-dimensional grids because doing so is both parsimonious and computationally inexpensive. however, when future use cases or the addition of new targeted attributes require alternative representations of space, the current ishc structure will be falsified and iterative model refinement will lead to a new structure.

at the start of a simulation, hepatocytes are randomly assigned to grid points on cellspace. each hepatocyte contains enzymes. the number of enzymes in each hepatocyte is subject to a uniform random draw between the parameters binderspercellmin and binderspercellmax. drugs are then randomly assigned to mediaspace grid points. total drugs equal the value of the parameter dosage. hepatocytes are randomly selected for execution each simulation cycle. during execution, a hepatocyte executes its four mechanisms modules—metabolismhandler, bindinghandler, inductionhandler, and eliminationhandler—in random order. the analog’s state information, for example the number or locations of solute objects, changes as a consequence of mechanism execution.

during each simulation cycle, each drug has a chance to move one grid point: laterally , downward , or upward . for a drug to move into or out of a hepatocyte, the solute-specific boolean parameter membranecrossing must be true. a drug attempting to move downward or upward is further subject to a random draw from u using the parameters pexitmedia and pexitcell, respectively. these parameters map to an encapsulation of the ability for drugs to enter or exit hepatocytes via cell-surface transporters or simple diffusion  <cit> . we invoked the following constraints on parameterization choices to facilitate biomimesis. to bypass the need to explicitly model diffusion and track each drug’s height in mediaspace, values chosen for pexitmedia are much smaller than pexitcell. to simulate a coarse-grained mechanism for a well-mixed environment, each drug contained in mediaspace is reassigned to a random grid point in mediaspace at the end of each simulation cycle. to simulate the relatively large volume of media compared to cells, each grid point in cellspace and mediaspace has a capacity that controls the number of solutes allowed within. the parameter scale controls the capacity of cellspace: a grid point in cellspace can contain a number of solutes equal to the value of scale. a grid point in mediaspace can contain any number of solutes.

the ishc takes measurements at the beginning of each simulation cycle, which maps to removing aliquots of media at pre-specified times. specifically, it reports the combined number of drug objects contained in cellspace and mediaspace. intrinsic clearance is calculated at the end of each simulation using the equations below, and values are averaged over  <dig> simulations.

one simulation cycle maps to 1 minute of wet-lab  time.  quantitative similarity criteria were established  to ensure that in silico results fell within acceptable similarity of wet-lab values. the ishc achieved validation targets drawn from propranolol intrinsic clearance data from griffin and houston and lavé et al.  <cit> , <cit> .

calculating intrinsic clearance
intrinsic clearance was calculated assuming mono-exponential depletion of substrate. this assumption is reasonable when drug concentrations are much less than the michaelis constant, km. under this assumption, intrinsic clearance can be calculated in two ways. it can be found using exponential regression fit to the following curve  <cit> :  ct=c0⋅exp−cl⋅d⋅t, 

where c is the concentration of drug, cl is the intrinsic clearance , d is the cell density , and t is the model time . alternatively, it can be found using the dose to auc ratio, where auc is the area under the concentration-time curve:  cl=doseauc 

the dose is equal to the initial concentration normalized by the cell density. thus, when the auc is normalized by the initial concentration, the dose to auc ratio simplifies to:  cl=1d⋅aucnormalized 

the auc is theoretically calculated from time zero to infinity or until the concentration reaches zero. since the validation data take time points until 120 min, the formula for intrinsic clearance can be adjusted using the normalized auc from zero to 120 min. assuming a mono-exponential depletion:  cl=1−f120mind⋅aucnormalized,0to120min, 

where f <dig> min is the fraction of drug remaining at 120 min  <cit> .

both sets of validation data used the dose to auc ratio to calculate intrinsic clearance. in designing analogs, in silico methods should mimic the wet-lab methods where possible, including measurements and calculation of derived measures. thus, for these validation data, it is appropriate to determine in silico intrinsic clearance using the dose to auc ratio. auc was calculated using the linear trapezoid rule.

in silico experiments
in silico experiments were run for  <dig> to  <dig> simulation cycles, depending on the analog  and use case. in silico results reported are averages ± standard deviation of  <dig> monte carlo trials. results analysis, including averaging among monte carlo trials, time-course plots, calculation of intrinsic clearance , and comparison of in silico results to validation data was performed using scripts written in r  <cit> .

relational grounding
the units, dimensions, and/or objects to which a variable or model constituent refers establish groundings. during development, grounding decisions impact model flexibility, adaptability, and reusability  <cit> . guidelines about groundings are typically built into use case statements and requirements. because pmms are designed for straightforward reuse within a broad range of model contexts, it is especially important that grounding decisions in pmms be carefully considered. most equation-based models, including pharmacokinetic compartment models, rely upon absolute grounding: model variables, parameters, and input-out are expressed in real-world units. so doing complicates expanding the model to include additional phenomena, changing the model context, integrating multiple models, or reusing model components—all desirable goals of pmms. in contrast, isl and ishc components are grounded relationally: variables, parameters, and input–output are represented in terms of other system components. so doing facilitates exchanging or recombining components and switching model contexts  <cit> , <cit> . relationally grounded models require a separate analog-to-referent mapping protocol. for example, in ishc experiments here,  <dig> simulation cycle maps to 1 minute of wet-lab  time. our requirements include the ability to use simulation measurements of the same analog to achieve validation targets from different wet-lab experiments. so doing requires different analog-to-referent mapping protocols, which is facilitated by employing relational grounding.

RESULTS
verification of modularization process
modularization is part of the analog mechanism engineering process, unrelated to referent biological mechanisms; from a software perspective, it is an organizational feature. thus, the modularization process should not significantly affect analog behavior; it affects the phenomenal analogy but not the structural analogy. to verify that the modularization process did not interfere with simulation results, isl in silico experiments were run before and after modularization using the same parameters, including random number seed. experiments were run over a wide range of parameterizations. in all cases, the two outputs are identical . though the isl is largely stochastic, mason’s random number generator produces duplicable simulations; thus, our modularization implementation resulted in not only statistically indistinguishable but also identical simulation results.

isl validation experiments
isl in silico experiments were run for  <dig> simulation cycles, which maps to 100 seconds of wet-lab time. this time range is consistent with wet-lab measurements of outflow profile for a single-pass, in situ perfused rat liver. the isl validation target is that at least 80% of outflow values fall within ± <dig> standard deviation of corresponding wet-lab values. the modularized isl successfully achieved that validation target for propranolol  <cit> . a representative outflow profile is provided in additional file  <dig>  note that the outputs before and after modularization are identical.

ishc validation experiments
ishc experiments ran for  <dig> simulation cycles, which maps to 120 minutes of wet-lab time. that duration is similar to those used in vitro to measure intrinsic clearance. there are two quantitative measures of similarity for the ishc. first, intrinsic clearance must fall within ± <dig> standard deviation  of the wet-lab value. second, to verify the shape of the concentration-time curve, an acceptable exponential regression fit required an r <dig> value of at least  <dig> . wet-lab values for propranolol intrinsic clearance exhibit considerable variability, ranging from  <dig>  to  <dig>  μl/min/ <dig> cells  <cit> , <cit> . the ishc successfully achieved validation targets for both values, demonstrating its flexibility in covering a large range of measured values.

various parameterizations were found that satisfy the similarity criteria. time-course plots of several successfully validating experiments are shown in figure  <dig>  the relevant parameters among runs and corresponding intrinsic clearance values are shown in table  <dig>  for all validating runs, r <dig> values of the exponential regression fit were greater than  <dig> . although various parameterizations satisfied the similarity criteria, there are differences in the microstructure of the time-course plots. we anticipate that some or all of these parameterized ishcs will be falsified when additional targeted attributes are included.


pexitmedia

pexitcell

pbind

pmetabolize

dosage

cl
one can posit a variety of plausible explanations for the large variability in these and other reported wet-lab intrinsic clearance measurements. for example, differences in hepatocyte heterogeneity among experiments are expected to affect intrinsic clearance measures. in this case, a contributing factor may be the difference in culture geometry. while the calculation for intrinsic clearance is normalized by cell density  and initial substrate concentration, it does not account for the experiment geometry, i.e. the ratio between height of the culture medium  and area of the well or dish bottom . the following is a parsimonious theory limited to culture geometry. when this ratio is small , drug must travel a relatively short distance to reach cells, resulting in a larger measured value of intrinsic clearance. when this ratio is large, cells are closer together but drug must travel much farther, resulting in a smaller measured value of intrinsic clearance. for griffin and houston, who used 400 μl of medium and a 48-well plate, the ratio is approximately  <dig>  mm/cm <dig>  lavé et al. used 3 ml of medium but the dimensions of their culture dishes are unspecified. had they used 6-well or 12-well plates, we would obtain values of  <dig>  and  <dig>  mm/cm <dig>  respectively. thus, the ratio is likely much smaller for lavé et al., providing a plausible explanation for the much larger measure of intrinsic clearance. we can make corresponding adjustments to ishc analogs and mechanisms if and when additional information  becomes available.

the above explanation is supported by the fact that validating parameterizations for griffin and houston required relatively small values for pexitmedia . thus, drugs enter cellspace much less frequently, lowering the frequency of metabolism events. this information is consistent with the hypothesis that the larger height to area ratio contributes to smaller intrinsic clearance.

pmms are robust to changes in model context
pmms are designed to mimic the underlying referent biological mechanism without being tied to model context. for example, they are not intrinsically tied to a particular time mapping; rather, they are tied to the time mapping of their client model . drug clearance experiments span considerably different time scales in vivo  versus in vitro . thus, there is a corresponding fold difference in the simulation cycle-to-time mapping between the isl and ishc. that the pharmacodynamic response module can achieve validation targets for both experimental contexts demonstrates that the modules are robust to changes in analog-to-time mappings.

there is over a five-fold discrepancy in intrinsic clearance values between griffin and houston and lavé et al., though their experimental protocols are very similar. such experimental variability, coupled with uncertainty arising from other sources, is a troubling reality. such differences in absolute, quantitative wet-lab measures have real explanations. while we may speculate explanations based on experimental details or in silico results, we typically lack the precise knowledge required to systematically reduce that uncertainty. for m&s methods to be able to achieve validation targets for the same or similar experimental protocols, it is desirable to use models, modules, and methods that enable spanning these ranges of wet-lab measures. that the ishc can achieve validation targets for both intrinsic clearance values using the same pmms demonstrates that flexibility.

phenotype and mechanism overlap
when object-oriented software engineering methods are used to implement a concrete mechanism, the product of the process is an extant hypothesis: analogs produce a mechanism upon execution. by doing so, we have instantiated  a mechanism in silico. a consequence of mechanism execution will be measureable phenomena that are similar  to pre-specified phenomena, such as a response following exposure to a xenobiotic. we measure simulation features; those measurements enable testing the hypothesis. if phenomena meet pre-specified similarity criteria, then the simulation stands as a challengeable, tested theory about mechanistic events at a coarse grain level that may have occurred during the wet-lab experiments  <cit> .

the isl and ishc include pmms that encapsulate individual mechanisms and structural components that simulate objects and space. executing each analog instantiates the mechanisms, producing measurable phenomena: outflow profile for the isl and intrinsic clearance for the ishc. we have demonstrated that the phenomena meet pre-specified similarity criteria based on results from both in vivo and in vitro experiments. the isl and ishc share certain phenotypic attributes with their wet-lab counterparts. their in silico mechanisms thus stand as challengeable, plausible explanations of referent mechanisms of drug response that may have occurred during the wet-lab experiments. these conclusions are explicated below, driven by schematics of overlap in phenotype and mechanism among different models systems .

an implicit hypothesis of wet-lab, biomedical experiments, illustrated in figure 5a, is that attributes of the objects or system of study  measured in a particular, controlled experimental context  are quantitatively similar to corresponding attributes in particular humans. however, such precise phenotypic overlap is rare. attributes of mammalian epithelial cells in one experimental context—a particular wet-lab use case—may be absent in another. a precondition for achieving the long-term goal of simulating human component attributes is having analogs capable of mimicking different wet-lab use cases characterized by different areas of phenotypic overlap. for example, there are similarities in drug response attributes between in vitro and in vivo systems, but there are few with precise, quantitative, one-to-one mappings. we have demonstrated that different regions of phenotypic overlap can be achieved with two analogs of different structure, use case, and quantitative validation targets, but which use the same pmms and separate simulation-to-validation target mappings.

though the ishc contains hepatocytes that are mechanistically similar to those used by the isl, they need not map one-to-one with isl hepatocytes. this robustness enables a transformation between analogs . we hypothesize that isl-ishc transformations may be instructive of differences in related attributes between in vitro and in vivo systems. when researchers isolate hepatocytes from livers to study them in culture, in vitro-in vivo extrapolations are embedded in considerable uncertainty. m&s methods can help shrink those uncertainties if validated analog tissues can be disaggregated into cells that separately achieve validation targets drawn from in vitro data. we would not assume that attributes are unchanged when the cells are “reassembled” into tissue. however, we do know that the tissue cells transformed themselves into what was observed in vitro. in silico, possibly drawing on other wet-lab observations, we can explore plausible explanatory analog transformations. in doing so we can shrink the set of analog options and build confidence in transformation explanations. at a minimum, the validated in vitro parameterizations can serve as a starting point in the search for granularity-specific parameterizations, which achieve new tissue or organ validation targets.

we now move our focus from phenotype space to mechanism space. while the in silico experimental context  differed between the isl and ishc, the pmms were identical. yet, they separately achieved validation targets for different wet-lab systems  with different measures of drug clearance . for this to be the case, we assume that some aspects of the generative mechanisms are similar between isolated, perfused rat livers and in vitro hepatocyte culture cells. taken together, these observations support our claim that pharmacodynamic behaviors of pmms during execution have similarities with both wet-lab counterparts—that is, they are biomimetic during execution.

additional benefits of modularity
we identify six additional benefits of pmms that are unique or especially important to multi-scale, biomedical m&s:

 pmms enable concrete component-to-biological counterpart mappings. state information is grouped into physiologically meaningful groupings. modules require  these groups according to what has been found to influence the referent mechanism. as a result, non-physiological, mechanism-specific data required for software implementation purposes  are kept hidden from the modeler. thus, model components are made explicit, intuitive, and easily understood.

 pmms increase transparency to wet-lab biologists. for wet-lab researchers to easily follow, interpret, and challenge—unassisted—on simulation details, models must be transparent in both representation and execution—form and function. transparency in representation is achieved by using physiologically meaningful components that map concretely to biological counterparts. transparency in execution is achieved because interacting model components produce discrete events with hypothesized biological counterparts.

 pmms facilitate separate validation of individual components. each module can achieve validation targets for data gathered from a variety of wet-lab experimental protocols. components can be tested in isolation or within the broader model context. when modules are falsified, modularity simplifies the reengineering involved in iterative refinement. as demonstrated here, pharmacodynamic response pmms can achieve validation targets for data drawn from both in vitro and in vivo drug metabolism experiments. so doing improves face validity of mechanisms and trust in their surviving analogs.

 pmms can be exchanged “on the fly”—that is, during a particular simulation. the pmms being used by an entity can therefore differ at different simulation cycles. thus, the set of pmms being used can be considered part of the entity’s state information. this capability has various applications. mechanisms can switch among different versions  based on an entity’s state at a given simulation cycle. different types of state transitions can lead to different versions of mechanisms. for example, a cell analog that transitions from a normal to diseased state during a simulation can switch between corresponding normal or diseased versions of pmms. disease progression and spread can be measured during a simulation. mechanisms can also switch between coarse- and fine-grained versions when specified events occur. future progeny of current pmms can exhibit increasingly tunable mechanistic resolution by including additional “nested” pmms.

 pmms can be exchanged between in silico experiments. in this case it is also useful to think of the set of pmms being used as part of an analog’s parameterization. separate in silico experiments can test hypotheses about the differences between normal and diseased states, active and inactive states, coarse- and fine-grained mechanisms, etc.

 pmms enable biomedical domain knowledge to be embedded within concrete analogs. the first type of knowledge embedded in pmms is the types of physiological information that have been found to directly affect a biological mechanism. this type of knowledge is made explicit because the information is partitioned into physiologically meaningful groupings. it is embedded in logic and algorithms of a pmm, apart from its implementation in a particular analog like the isl or ishc. this knowledge will likely be further generalized when additional cell types  falsify existing pmms. in such cases, pmms may require additional physiological information via new or altered parametric containers. in this way, the falsification of one cell type may inform models of other cell types. the second type of embedded knowledge arises from the implementation of a pmm in a specific model. this knowledge is flexible because each model defines the parametric containers independently, resulting in different mechanisms for different analogs. for example, we embed the knowledge that in vivo hepatocytes experience a gradient in available resources based on their distance from the portal vein, whereas in vitro hepatocytes have uniform resources because they directly contact well-mixed culture media. as new mechanistic insight accumulates, knowledge may be embedded in new or altered versions of pmms, which can be easily exchanged. thus, models utilizing pmms can be concrete instantiations of current understanding about the referent biological system in a particular experimental context.

limitations and goals
the modularization methods presented here have several limitations. they are currently limited to object-oriented models, though they could be adapted to functional or logical programming paradigms. alternative strategies exist for modularizing mathematical models  <cit> , <cit> . including modular mathematical models within or alongside object-oriented ones is feasible but may present technical challenges. mathematical pmms therefore require additional m&s methods. the java-specific implementation we used for the isl and ishc is limited to programming environments supporting software interfaces  or something similar .

a long-term goal of building pmms is to facilitate development of an analog-based knowledge repository. such a repository will be an easily accessible, organized framework feature  <cit> . it will contain annotated records of analogs  and their mechanisms, along with records of in silico experiments. to be both useful and productive, analog components within the repository should be modular. thus, pmms are expected to be integral repository components.

multi-scale models like the isl and ishc are designed to have a long lifetime. they are perpetual works in progress whose set of targeted attributes will expand according to iterative model refinement and new validation data. during this process, new pmms will develop that are increasingly biomimetic during execution and generate phenomena that overlap increasingly large areas in phenotype space. in parallel, we anticipate that pmms will be adopted, reused, and repurposed by in silico analogs of different cell and tissue types.

CONCLUSIONS
we present a modularization method that defines analog modules based on referent physiological mechanisms. doing so facilitates separate validation of individual components, enables facile component exchange during or between simulations, and allows analogs to become increasingly transparent, flexible, and biomimetic. the ishc demonstrates the feasibility of pmms and their usefulness across multiple model use cases. the pharmacodynamic response module developed here is robust to changes in model context and flexible in its ability to achieve validation targets in the face of considerable experimental uncertainty. adopting the modularizations methods presented here is expected to facilitate model reuse and integration, thereby accelerating the pace of biomedical research.

abbreviations
: modeling and simulation

: discrete event systems specification

: physiomimetic mechanism module

: in silico liver

: in silico hepatocyte culture

: iterative refinement protocol

: intrinsic clearance

: area under the concentration-time curve

: systems biology markup language

competing interests
the authors declare that they have no competing interests.

authors’ contributions
bkp modularized the isl, developed the ishc, performed the simulations, generated the figures, and drafted the manuscript. gepr developed the isl, helped generate the figures, and helped draft the manuscript. cah directed the study, helped generate the figures, and helped draft the manuscript. all authors read and approved the final manuscript.

additional files
supplementary material
additional file 1:
sample abridged java code for each of the three key software aspects: physiomimetic parametric container, pmm, and mechanism user. the code is intended to illustrate the java-specific implementation of the three software aspects. for simplicity, it omits many mechanism details, only leaving those features important to the modularization process. thus, the code is not intended to compile as is.

click here for file

 additional file 2:
characteristic isl propranolol outflow profile before and after modularization. the band represents ± <dig> standard deviation from the wet-lab validation data. the results before and after modularization are identical; thus, all black data points completely overlap red data points.

click here for file

 acknowledgements
this work was supported in part by the cdh research foundation, the alternatives research and development foundation, and the epa . the funding bodies had no role in study design; in the collection, analysis and interpretation of data; in the writing of the manuscript; or in the decision to submit the manuscript for publication. we gratefully acknowledge commentary and suggestions provided by hessam sarjoughian, severine urdy, and andrew smith.
