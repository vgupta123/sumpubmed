BACKGROUND
advances in genomics have enabled the large scale reconstruction of biochemical reaction networks where the main information provided concerns the stoichiometry and reversibility of the involved reactions. while such models disregard the kinetics of the reactions, biologically meaningful predictions can nevertheless be obtained by analysing the stoichiometrically viable steady states of the network  <cit> . the aim of sna is to provide a comprehensive interactive environment for such stoichiometric network analysis.

in mathematical terms the stoichiometrically viable steady states form a convex polyhedral cone which is called the flux cone. recently  <cit>  it has been pointed out that instead of analysing the full flux cone, one can consider a simpler object, the conversion cone. this amounts to giving a black box description of the metabolism which only takes into account the consumption and production of external compounds. so, the conversion cone describes the overall reactions,  which can be effected in steady state between the external metabolites of the network, disregarding the internal mechanism.

linear programming, as in flux balance analysis  <cit> , can be used to search for specific points in these cones. but executing a linear program will just return a single point in the cone, providing only limited information about the whole range of possible steady states the biochemical reaction network can assume. more complete descriptions are obtained by computing a minimal generating set for each cone, i.e. a minimal subset such that each vector in the cone can be represented as a linear combination, with non-negative scalar coefficients, of the subset vectors. if all reactions in the network are irreversible, the flux and the conversion cone are pointed and computing their minimal generating sets amounts to listing the edges of the two cones. in the presence of reversible reactions, however, the description provided by a minimal generating set is less satisfactory. on one hand the cones then may no longer be pointed and many quite different minimal generating sets then exist. on the other hand, if there a reversible reactions, cancellation can occur when combining the vectors of a minimal generating set. so, from the fact that, e.g., each vector in the minimal generating set of the flux cone has a non-zero flow through a specific reversible reaction, one cannot conclude that this reaction must run in any steady state. hence, in presence of reversible reactions, one may wish to precompute all possible cancellations. this leads to the problem of enumerating all the elementary vectors  <cit>  of the flux and of the conversion cone. in the case of the flux cone cone, an elementary vector represents a minimal stoichiometrically viable pathway through the network and is often called an elementary mode  <cit> .

by computing the set of elementary flux vectors a complete and very explicit description of the possible steady state behaviour is obtained and the answers to many questions about the metabolism, such as the maximal yield of some compound and the reactions essential for its synthesis are immediately found by inspecting this set. however, for large networks, enumerating all elementary fluxes may not be desirable, or even feasible, since their number can be very large. it is then often useful to first consider the conversion cone which is much simpler than the flux cone when many elementary fluxes are equivalent with regard to the consumed and produced compounds, differing only in the details of the internal synthesis. while this provides a less complete description of the metabolism than the flux cone, many interesting questions can nevertheless be answered by computing the elementary conversions. cases in point are  the determination of minimal media  <cit>  and  checking whether the metabolic model is consistent with an experimentally observed overall reaction and gauging the effciency of the latter  <cit> .

implementation
i shall only consider the architecture of the toolbox here since the main mathematical and computational concepts implemented in sna have been described elsewhere. in particular the nullspace algorithm used by sna for calculating elementary fluxes, which runs significantly faster than previous procedures  <cit> , is described in  <cit> . further, the concept of a conversion cone is introduced in  <cit> , together with the procedure for computing elementary conversions.

the user interface for sna is mathematica and the functionality described in the preceeding section is provided by a mathematica package called snasym. the matrix level computational geometry routines underpinning the operation of snasym are delegated to the lower level package snamat. snamat may be of independent interest to people wishing to avoid using sna proper and only interested in a computational engine for calculating elementary modes from a stoichiometry matrix.

in contrast to snasym, which is pure mathematica code, the lower level package is a hybrid consisting of mathematica code communicating with a binary program compiled from matlab and c sources. the division of labour is that the mathematica part of snamat does the arithmetic, whereas, for speed, the purely logical operation are done by the binary. an important motivation for this arises from the fact that in mathematical terms only rational operations are required in the network analysis tasks implemented by sna, i.e. no irrational functions such a root taking are needed. hence, if the stoichiometric factors in the networks are represented by fractions the entire analysis can only lead to numbers which are rational as well and thus have an exact numerical representation. sna exploits this, by doing all of the arithmetic in mathematica and using the built-in functionality of this software, to always provides numerically exact results. due to the division of labour between mathematica and binary code, sna is nevertheless fast enough to handle large scale problems. for instance, it takes only  <dig> minutes to calculate the  <dig> ×  <dig> elementary fluxes for the model of the central carbon metabolism of e. coli  <cit>  on a state of the art pc.

RESULTS
biochemical reactions are represented in sna by mathematica expressions such as

adpm+3 hc+pim⇀ atpm+2 hm+h20mco2xte⇋ co2c.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqabegabaaabagaeeyyaemaeeizaqmaeeicaa3aawbaasqabeaacqqgtbqbaagccqghrawkcqaizawmcqqggaaicqqgobaadaahaawcbeqaaiabbogajbaakiabgucariabbchawjabbmgapnaacaaaleqabagaeeyba0gaamrr1ngbprwthrhaxaqeguudjxwakbsthrhag8kblbaceagccqwfgaaicqwfahitcqqggaaicqqghbqycqqg0badcqqgwbacdaahaawcbeqaaiabb2gatbaakiabgucariabikdayiabbccagiabbigaonaacaaaleqabagaeeyba0gaaogaey4kasiaeeiaagmaegomaijaegimaazaawbaasqabeaacqqgtbqbaaaakeaacqqgjbwycqqgvbwbcqqgyagmdaqhaawcbagaeeiwaglaeeidaqhabagaeeyzaugaaogae8hiaaiae83yhcsaeeiiaaiaee4yammaee4ba8maeeomaizaawbaasqabeaacqqgjbwyaagccqgguaglaaaaaa@6cb9@

each metabolite has a body which is a string denoting the chemical species  and a superscript designating the compartment. above the strings 'm', 'c', and 'e' are used for mitochondrial, cytosolic and, respectively, extra-cellular metabolites. in addition each metabolite has a rôle, the default rôle being internal while other rôles are specified by a subscript. the subscript xt denotes an external metabolite which can be used both as an input and an output to the network, whereas metabolites with subscript xtin or xtout are restricted to being inputs or, respectively, outputs. note that rôle and compartment are treated as quite distinct concepts. the reason is that in a study focusing on just an organelle, such as mitochondria, one might wish to treat all cytosolic metabolites as external.

functionality
based on a list of such reactions and an appropriate naming scheme for the reactions, sna is used to construct the abstract data type mnet . the toolbox provides a large set of functions for the basic manipulation of mnet's: e.g. joining them, extracting subnetworks and changing the rôle of the metabolites in the network. less basic functions include, determining which reactions are feasible, i.e. admit a non-zero steady state flow, or simplifying the network in a way that preserves e.g. the conversion cone.

but, of course, the main functionality of sna is related to the tasks mentioned in the first section. besides supporting flux balance analysis, the toolbox provides functions analysing the flux or the conversion cone by calculating a minimal generating set or enumerating all the elementary vectors. a session, demonstrating some of the functions of sna, is shown in fig.  <dig> 

documentation
the main documentation for sna consists of  <dig> tutorial mathematica notebooks. after a basic introduction to the toolbox, the tutorials quickly move on to show how sna can be used to analyse quite large metabolic networks, considering as examples models of the human cardiac mitochondria  <cit> , the central carbon mechanism of e. coli  <cit>  and, finally, a genome-scale model of s. cerevisiae  <cit> . in addition, two of the tutorials demonstrate how metabolic networks can be imported into sna from external formats. the first shows how to construct an mnet given a table of numbers representing a stoichiometry matrix. the second shows how to parse textual representations of metabolic networks such as the ones used by the palsson group. e.g.  <cit> . further, sbml models can be read into mathematica using the mathsbml software developed by b.e. shapiro  <cit> .

CONCLUSIONS
currently, the most widely used program for calculating elementary flux vectors probably is metatool  <cit> . the latest version of metatool  uses the same basic approach  <cit>  as sna, and the two are also quite similar in terms of required computing time. however, in contrast to metatool, sna does not rely on machine precision and always produces numerically exact results. this can be of advantage when analysing large metabolic networks where the stoichiometric factors can span many orders of magnitude, e.g.  <dig> orders of magnitude for the above mentioned s. cerevisiae. further, compared to metatool, sna has as much expanded functionality and, in particular, provides functions for calculating elementary conversions. finally, the design of sna is very modular. while this may make the learning curve steeper, it provides the flexibility required to tackle the computational challenge still posed by the analysis of large metabolic networks.

availability and requirements
sna is distributed under an open source license and can be downloaded from . the toolbox runs under pc-linux and additionally requires mathematica . further, if one wants to recompile the binary program mentioned in the implementation section, matlab  <dig>  is needed.

