BACKGROUND
mass spectrometry using matrix assisted laser desorption ionization coupled to time of flight analysers, maldi-tof-ms, referred to herein as maldi, has become popular during the last decade due to its high speed and sensitivity for detecting proteins and peptides. large sets of samples are analysed quickly in one single batch. the aforementioned reasons have led to the use maldi for the classification of large sets of samples from different sources and/or characteristics  <cit> . in this sense, computational tools play a key role in maldi experiments, as they are able to preprocess raw data registered in different formats, compare them, and apply complex algorithms in order to finally extract new knowledge and useful conclusions.

raw data generated by maldi is usually composed of large spectra sets. each single spectrum contains thousands of measurements entailing mass-to-charge ratio  signals and intensity . these spectra are usually stored using open xml-based formats such as mzxml  <cit> , mzml  <cit>  and peakml  <cit> . in addition, several open-source libraries to handle these data formats have been developed in the last years, among which the following are noteworthy: mzmatch  <cit> , jmzml  <cit> , jmzreader  <cit> , the proteomecommons.org io framework  <cit>  and different r packages  <cit> .

the spectra generated by maldi apparatus usually contain a high level of noisy signals, making data preprocessing a crucial task that must be carried out before subsequent analysis  <cit> . this preprocessing is an extensive low-level procedure able to clean raw data and identify true signals in the noisy spectra  <cit> . preprocessing comprises several tasks, such as baseline correction, smoothing, normalization, peak detection and peak matching. the use of inadequate or incorrect preprocessing methods can result in a biased dataset, hindering the achievement of meaningful biological conclusions  <cit> . therefore, preprocessing is a critical stage in rigorous maldi data analysis. to accomplish the aforementioned tasks, different algorithms and tools have been developed. most of them are publicly available as r packages  <cit> , matlab packages  <cit> , java libraries  <cit>  or standalone applications .

although maldi is commonly used to identify and characterize molecules, such as peptides or proteins, it can be also used in combination with machine learning  techniques and statistical methods  <cit>  to perform biomarker discovery  <cit> , automatic sample classification , and sample clustering  <cit> . however, there are no tools devoted to performing these analyses, thus forcing researchers to use more general tools such as r, spss, weka  <cit>  or rapidminer  <cit>  to carry out them. this makes it necessary to include an intermediate adaptation step to convert the preprocessed maldi data into the input format required by each tool.

in order to make the development of mass spectrometry  proteomics applications easier, some frameworks such as openms  <cit>  and proteowizard  <cit> , in c++, and msinspect  <cit>  in java have been published. an example of a tool developed using such frameworks is topp   <cit> , which is based on the openms framework.

in spite of the existence of such a great variety of tools and techniques for both the preprocessing and data analysis of maldi based proteomic datasets, there is still a lack of specific tools that cover the whole process of maldi data analysis, allowing the users to manage raw datasets, preprocess them and perform several analyses in a row, and allow the user to apply different ml and statistical techniques to analyze maldi data. moreover, most of the tools are intended to be used by a user with a bioinformatic profile, requiring programming skills.

this paper presents mass-up, an extensible open-source platform for maldi data processing and analysis with ml and statistical techniques that has arisen from our previous experience working with maldi data . mass-up is an aibench  <cit>  based desktop application specifically created to perform complete analyses of maldi data, allowing the users to:  import raw data from different formats ;  preprocess raw data; and  perform different type of analyses, including supervised  as well as unsupervised  techniques.

the mass-up design is focused on two main objectives: coverage of the whole process of data analysis and simplicity of use. the first objective is accomplished in the way mass-up covers the whole process of maldi data analysis, from data preprocessing to different types of analysis. the second is achieved through a design that allows mass-up to be used in a straightforward manner by non-informatician users. in addition, mass-up is multiplatform, open source and designed using a pluggable architecture which makes it easier for programmers to develop and include new algorithms and analysis tools.

implementation
mass-up is a computer application for managing, preprocessing and analyzing maldi data. mass-up is implemented in java and it was constructed using the aibench framework, which has been demonstrated to be suitable for developing proteomics applications  <cit> , as it is the base framework of previously developed ms applications  <cit> . currently, mass-up has distributions for windows and linux operative systems.

this section briefly describes the mass-up workflow and the main algorithms and third-party libraries employed in each mass-up task.

mass-up workflow
mass-up includes a serie of operations that can be classified into  input/output operations,  preprocessing operations, and  analysis operations. figure  <dig> depicts the mass-up main workflow, where the most important operations are represented, along with the input files and data types managed by the application.fig.  <dig> mass-up main workflow. mass-up main workflow operations and datatypes. different colors have been used to identify input/output operations , preprocessing operations , analysis operations , and datatypes 



third-party libraries
with the main goal of covering the whole process of maldi data analysis, mass-up integrates several open source third-party libraries in order to accomplish different tasks, such as reading different ms data formats, preprocessing spectra, applying ml techniques, or visualizing data, among others. additional file 1: table s <dig> shows a general overview of the mass-up, including the algorithms and libraries used by each operation. all of these libraries has been transparently integrated into mass-up so that final users does not have to install them manually, since they are built-in in each mass-up distribution.

mass-up uses jmzreader  <dig> . <dig>  <cit>  in order to read the mzxml and mzml ms data formats. to visualize ms spectra and to display quality control charts, mass-up uses jfreechart  <dig> . <dig>  an open source java library.

mass-up integrates two r packages for raw maldi data preprocessing: maldiquant  <cit>  and massspecwavelet  <cit> . in addition, custom implementation of a fast peak matching algorithm based on a forward sliding window, named forward, is also incorporated. similarly to the alignment algorithm proposed by kazmi et al.  <cit> , this algorithm iterates the peaks from minimum to maximum m/z, adding them to the last cluster created if their m/z is within a distance from the average m/z of the cluster or creating a new cluster if not. this clustering algorithm does not allows clusters with two peaks from the same spectrum. in such case, only the peak that minimizes the average m/z of the cluster is kept.

mass-up makes use of weka  <cit> , a collection of ml algorithms for data mining tasks implemented in java. these algorithms are used for classification and for principal component analysis . three-dimensional pcas are rendered by using jzy3d  <cit> , an open source java library which can easily draw three dimensional scientific data. clustering is executed using a custom implementation of an agglomerative hierarchical clustering algorithm and is rendered using an adapted version of jtreeview  <cit> .

biclustering is performed with bimax  <cit> , a powerful algorithm capable of generating all optimal biclusters, and bibit  <cit> , a novel approach for the extraction of biclusters from binary datasets that can obtain similar results to bimax by using significantly less computation time and reducing the total number of generated biclusters. the aforementioned software, as well as a biclusters viewer, is integrated through the adaptation available in bims  <cit> .

RESULTS
mass-up is a flexible tool that includes several operations whose application depends on the analysis objectives. therefore, there is no single way to use mass-up, and researchers must determine which analyses apply in their studies. in this section, several practical applications of the mass-up operations are presented, in order to demonstrate its usefulness and applicability.

sample datasets
two datasets from previous studies were selected to illustrate the mass-up functionality. a brief description of the main characteristics of both datasets is given in this section.

cancer dataset
r. lópez-cortés et al.  <cit>  propose the use of gold-nanoparticles to separate the proteins and peptides in human serum as a way to improve maldi-based sample profiling. the protocol described in this work divides each sample into two sub-samples: pellet and supernatant. the maldi spectra of both sub-samples are grouped by their corresponding conditions using three-dimensional pca. the dataset is composed of sera from  <dig> patients with lymphoma, sera from  <dig> patients with myeloma, and sera from  <dig> healthy donors. as the clasifications using pellet or supernatant are similar, only the latter sub-samples are used in the present work.

wine dataset
nunes et al.  <cit>  propose a fast maldi-based methodology to identify different types of wines. the authors carry out a preliminary study with  <dig> wines of different denominations of origin, in order to identify the most appropriate maldi matrix. the study of the matrices found that chca is the most suitable for the purpose of classification. each wine was spotted five times . those  <dig> samples corresponding to the use of chca matrix are used as proof of concept.

preprocessing
as previously stated, the preprocessing of ms data is a critical stage that converts raw data into a suitable input for further analysis. inadequate or incorrect preprocessing methods can result in biased datasets, hindering the achievement of meaningful biological conclusions  <cit> . preprocessing is essential since raw data contains both m/z values belonging to analytes, as well as m/z values derived from several forms of noise . the main objectives of preprocessing are  <cit>  to remove noise without discarding any of the m/z values of interest, and to determine the m/z and intensity values with the best accuracy. the most common preprocessing tasks  are smoothing, baseline correction, normalization, peak detection, and peak matching.

usually, spectra are jagged, making it difficult to detect the m/z values of interest from the noise  <cit> . thus, smoothing algorithms are usually applied to soften the spectra. the simplest techniques are based on the use of a sliding window, where the intensity of each m/z value is adjusted based on the intensity of the neighbor m/z values. commonly used filters are moving average, savitzky-golay, gaussian and the kaiser window. mass-up provides two smoothing methods: moving average window and savitzky-golay, both from the maldiquant library  <cit> .

baseline is a specific form of noise mainly driven by chemical perturbations, defined as an offset of the intensities of peaks that often show a dependency on the m/z value such that it is highest at low m/z values, presenting an exponential decay towards higher masses  <cit> . the most common baseline correction methods are monotone minimum, linear interpolation, loess, moving average of minima and continuous wavelet transform, all of which are available as free software in different packages such as cromwell  <cit>  , process  <cit>  , maldiquant  <cit>   or specalign  <cit>  . mass-up allows the user to make use of all the baseline correction methods provided by maldiquant .

a major constraint of maldi is that the intensity of the m/z values is relative and can vary among spots of the same sample. for this reason, normalization is typically used, making the intensities of different spectra comparable. the most common normalization methods are total ion current , probabilistic quotient normalization , z-score, linear, mean or median. mass-up allows the user to perform normalization using tic, pqn or median, all provided by the maldiquant library  <cit> .

the m/z detection can be defined as the process of selecting values of interest  from a given spectrum, and it is normally applied after baseline correction and smoothing. most of the peak detection methods are based on setting a threshold value in order to discard low intensity m/z values. the threshold can be absolute  or relative . however, du et al.  <cit>  proposed a method that performs m/z detection without explicit smoothing and baseline correction. this method is based on the continuous wavelet transform  and is publicly available in the massspecwavelet package. mass-up includes two m/z selection methods: the cwt-based method implemented in massspecwavelet  <cit> , and a snr-based method provided by maldiquant  <cit> , which uses a sliding window.

finally, m/z matching is needed in order to make different spectra comparable. without this matching procedure, the same molecule or metabolite  can have different m/z values across replicates or samples. the objective of m/z matching methods is to find a common set of m/z locations in several spectra, so that all spectra will have the same m/z values for the same biological entities. in mass-up there are two fundamental types of m/z matching: intra-sample and inter-sample. the intra-sample matching is applied to the spectra obtained for the replicates of the same sample, while the inter-sample matching is applied to match m/z values across different samples, making them comparable and suitable for the subsequent analysis stage. peak matching algorithms, are classified into two main groups: sequential algorithms based on a sliding window  and clustering based approaches .

the mass-up workflow also incorporates an additional filtering step that is very closely related to the matching process. this step is performed after the intra-sample matching and before the inter-sample matching, and allows the creation of a consensus spectrum for a sample, which summarizes the replicates of a sample in one single spectrum. in this step, the percentage of presence  parameter allows the user to set the number of replicates where an m/z value must be present in order to be considered a valid consensus m/z value.

finally, it is important to note that, while smoothing, baseline correction, normalization, and m/z detection are applied individually to each single spectrum in the preprocess data operation, the m/z matching is applied to several spectra at the same time and is carried out by using the match peaks operation.

the new data generated by the preprocess data and match peaks operations can be exported as comma-separated value files, allowing users to load them later with mass-up or to analyse them with other software packages. mass-up documentation includes information about exporting data and examples describing how it can be loaded in other languages such as r.

quality control
when working with maldi, low quality spectra may occasionally be generated. for example, spectra showing a low number of m/z values in comparison with other spectra, or containing many unique m/z values not present in their sibling replicates. these spectra may lead to failure when carrying out an analysis, or to incorrect conclusions. to prevent such a scenario, a quality control  step was included, which may be performed between the preprocessing and the analysis tasks. the qc can be done at two levels: replicates, a low level qc analysis focused on the replicates of each sample; and samples, a high level qc analysis with additional information from the intra-sample m/z matching process.

at the replicates level, the user can check basic information about each individual spectrum  and compare all spectra in the dataset. figure 2a shows a replicate qc analysis applied to the samples from conditions a, b, c, d, and e of the wine dataset previously described. as can be noted from the boxplot, there are two outliers  and one extreme outlier  in the masses count chart. specifically, the qc analysis has marked the e-chca.3- <dig>  a-chca.1- <dig> and e-chca.2- <dig> samples as outliers due to the number of m/z values of their spectra. therefore, before continuing with further analysis, it is recommended to carefully revise these samples and even to repeat their analysis.fig.  <dig> quality control view. details of the quality control analysis views for a replicates, and b samples. box plot charts are used to summarize the more detailed information presented in the tables



at the samples level, the user can check the performance of the intra-sample peak matching process, by comparing the percentages of presence  counts  and the pops of each sample. as previously stated, the data table is more detailed and contains additional information from the intra-sample peak matching process, specifically:  popxx columns, where xx is a percentage of the number of spectra, which show the number of peaks with a pop value exactly equal to xx;  align. masses column, which shows the number of masses that have been matched across the spectra in the sample;  split > = xx columns, which show the percentage of masses that have a pop value higher or equal to xx; and  count > = xx columns, which show the number of masses that have a pop value higher or equal to xx .

figure 2b shows a samples qc applied to the same samples as in the previous example. in this case, the box plot corresponds to the global pop count and shows that there are two outliers for the category “count > = 60” and one outlier for the category “count > = 100”. again, the outliers are highlighted in bold in the table.

biomarker discovery
one of the main purposes of the ms analyses is the biomarker discovery  <cit> . a biomarker is a peptide, protein or other element of a sample that can identify and differentiate certain conditions such as phenotypes, strains, diseases or infections.

when identifying new biomarkers, it is necessary to distinguish between two types of data sets that can be analyzed:  those cases where there are a known and well defined number of conditions , and  those cases where there are no conditions or where they are not clearly defined. in accordance with this differentiation, mass-up provides two types of biomarker discovery analysis:  the inter-label analysis, for the former type of data, and  the intra-label analysis, for the latter.

in the inter-label analysis, the user can perform the appropriate statistic tests to identify those peaks that can be potential biomarkers to differentiate the conditions. four different tests of independence were included in mass-up following the recommendations given by mcdonald  <cit> , where tests are chosen depending on the number of samples and conditions of the dataset, as shown in table  <dig>  taking into account that the number of samples in maldi experiments is generally below  <dig>  the fisher’s exact test and the randomization test are the tests more commonly applied. as each test is performed independently for each m/z value, the benjamini-hochberg fdr correction is applied to take into account the number of m/z values analyzed and reduce the number of false positives.table  <dig> tests of independence applied depending on the number of samples and conditions



by using the inter-label analysis in the wine dataset , we can analyze all the samples of conditions a, b, c, d, and e. in this case, the randomization test is applied in order to identify statistically relevant m/z values, as the number of samples is lower than  <dig>  and the number of conditions is higher than  <dig> . the first three columns contain the m/z value, the p-value, and the q-value respectively; while the other columns show in which samples the m/z values are present. as can be seen, the peaks with a q-value <  <dig>  are clear candidates to be biomarkers as they differentiate certain conditions from others.fig.  <dig> inter-label and intra-label biomarker discovery analysis views. a inter-label biomarker discovery view. depending on the number of samples and conditions, mass-up automatically selects the appropriate statistical test to apply. b intra-label biomarker discovery view. filters are configured to select only the m/z values present in the ma samples and absent in the other samples



in the intra-label analysis, the user can identify those m/z values that are representative of one or more samples, in a more exploratory fashion. in this scenario, it is possible to identify the biomarkers of a specific sample or discover groups of samples with a similar profile that may, therefore, be related. this analysis is particularly useful, for example, when working with different strains of the same bacteria and the user wants to identify those peaks that are unique for a certain strain.

by using the intra-label analysis in the cancer dataset , we can analyze the samples of the condition myeloma and configure the analysis to identify those peaks present in the “ma” sample  and not present in the rest of the samples. the identification of these peaks may be useful, for example, to explain the abnormal behaviour of a sample when compared to other samples from the same condition. specifically, the intra-label biomarker discovery view shows how we are looking for specific peaks of the sample ma , that is, peaks that are in this sample but not in the others.

principal component analysis
pca is a mathematical procedure that uses orthogonal transformation to convert a set of observations  of possibly correlated variables  into a set of values of linearly uncorrelated variables called principal components , whose dimensionality is expected to be lower than the dimensionality of the original data set.

once the pc are calculated, they can be used to represent the samples in a 3-dimensional space. by assigning a different color to each condition’s samples, users can visually identify if there is a separation between conditions. if such were the case, then the conditions would be distinguishable. the pca view also includes additional information about the pca, such as the eigenvectors and their corresponding eigenvalues and retained variances, for a better results interpretation.

as previously stated, lópez-cortés et al.  <cit>  demonstrate that the spectra of supernatant sub-samples of the cancer dataset can be grouped by their corresponding conditions using pca. figure 4a shows the result of applying pca to this set of samples in mass-up. as it can be clearly seen, the three conditions are separable in the 3-dimensional space.fig.  <dig> pca, clustering, and bi-clustering analysis views. a principal component analysis view presenting three different clusters, one for each condition. b detail of the hierarchical clustering visualization using jtreeview. the upper dendrogram automatically colors the tree branches that only include samples from the same condition, while the side dendrogram groups the more similar m/z values. c class-biclusters of the cancer dataset extracted with the mass-up biclustering viewer. purple rectangles denote the existence of biclusters associated with one condition



cluster analysis
cluster analysis allows finding groups of similar spectra among all the samples being studied. in the case of unlabeled data, it allows discovering hidden or previously unknown subgroups of samples. in the case of labeled data, it allows the user to check if the different conditions present in a dataset are separable by means of the m/z values of each sample.

mass-up incorporates a hierarchical clustering algorithm for the construction of a hierarchy of sample groups . the algorithm included is agglomerative and follows a bottom-up approach, meaning that it is constructed iteratively, starting with each sample in its own cluster, and merging the closest pair of clusters on each step. in order to decide which clusters should be merged, a measure of dissimilarity between clusters is required. in our case, this is achieved by using a distance metric, which measures the distance between two samples, and a linkage criterion, which specifies the dissimilarity of clusters. mass-up includes the euclidean and hamming distances as distance metrics, and the complete, single and average functions as linkage criteria. the results of a hierarchical clustering are usually presented in a dendrogram.

an important aspect when performing a cluster analysis in mass-up is that the user can decide whether to use intensities  or not . the euclidean distance is the most suitable when using intensities while the hamming distance is the most appropriate when using presence/absence of peaks.

in each cluster analysis, two hierarchical clusterings are constructed: one for the samples and one for the m/z values. for the visualization of the results, mass-up incorporates an adapted version of jtreeview, a software for the visualization and analysis of gene expression data. we have adapted it to ms, so that in our specific case the rows represent peaks instead of genes, while columns still represent samples. this representation also includes a heat map, which is combined with two dendrograms that represent the aforementioned hierarchical clusterings. the individual values contained in the heat map matrix are displayed as colors and they can represent  the intensity level of the corresponding peak , or  the presence or absence of the peak . it is important to note that to achieve a correct representation using intensities, the m/z values must be scaled between  <dig> and  <dig> during the raw data preprocessing.

figure 4b shows the results of applying hierarchical clustering to the cancer dataset used as proof-of-concept. as the dendrogram illustrates, the three conditions are well separated since the samples of each condition can be grouped together.

finally, it is worth noting that the cluster analysis can be used with a list of previously selected peaks. this way, the cluster analysis will be focused on analyzing only these peaks. this list can be obtained by exporting the biomarkers identified in the inter-label analysis. in such a situation, this feature is useful to qualitatively verify if a list of potential biomarkers is enough to separate or differentiate between the conditions of study.

bicluster analysis
although biclustering techniques have been successfully used with gene expression data for over a decade, it is only very recently that those techniques have been applied to ms data  <cit> . biclustering is a data mining technique that allows simultaneous clustering of the rows and columns of a matrix. it has been successfully applied to analyze microarray data due to their ability to discover co-expressed genes under certain samples  <cit> . in contrast to traditional clustering techniques, where each gene in a given cluster is defined under all the samples, biclustering algorithms propose groups of genes that show similar activity patterns under a subset of the experimental samples.

in previous studies, we have proposed a novel workflow for the application of biclustering to maldi data. in addition, the adequacy of applying biclustering to analyze such data by comparing biclustering and hierarchical clustering over two real datasets has also been evaluated  <cit> . biclustering has shown the ability to discover groups of samples that are similar but only in a subset of m/z values, which represent a new kind of hidden hypothesis that are difficult to be discovered by classic clustering algorithms, such as hierarchical clustering, which are based on a global comparison of samples including all m/z values.

the biclustering algorithms selected in the study and included in mass-up  use a binary dataset as input where  <dig> represents a peak presence, and  <dig> represents a peak absence. these algorithms will look for groups  of 1’s, that we call presence patterns. nevertheless, in certain cases, it can be desirable to extract other type of patterns, such as absence patterns  or simple presence/absence patterns . lópez-fernández et al.  <cit>  further discuss how to prepare an input maldi dataset into a suitable form to look for these three types of patterns.

mass-up provides an operation to apply this technique to both labeled and unlabeled samples. the user has to select the biclustering algorithm to use, the type of pattern and the biclustering mode . in addition, the user can also establish the minimum dimensions of the output biclusters. if the input data is labeled, the user can also indicate whether the output of the biclustering must be filtered in order to only retrieve those biclusters where most of the samples belong to the same condition or label, known as class-bliclusters. after performing a biclustering analysis, results can be inspected in the biclustering viewer, an intuitive view that shows a list of the generated biclusters as well as a heat map. if a bicluster is selected, it will be highlighted in the heat map, which is automatically rearranged in order to show the bicluster in the upper left corner.

in order to demonstrate the usefulness of this module, we considered the cancer dataset used in previous sections, and applied biclustering by means of the bibit algorithm in the hope of finding presence class-biclusters. figure 4c shows one presence class-bicluster for each class, where each column represents one m/z value and each row represents a sample. as shown, each class bicluster includes a group of m/z values with the same pattern of presence in the samples of one condition, and a variable pattern of presence in the rest of the samples. when using a presence class-bicluster, only presence is taken into account to create the class-bicluster, whereas when using a presence/absence class-bicluster, the absence is also taken into account.

classification analysis
sample classification is the ability to predict the label of a sample given a training set of labelled samples, therefore, the capacity of producing a diagnosis machine  <cit> . through the “classification analysis” operation, the user can determine which classifier performs best for the data under analysis. this operation provides an interface adapted from the weka software that allows the user to select and to configure a classifier, and to evaluate its performance by means of a cross-validation scheme. the output log of the evaluation process summarizes the performance of the classifier using different statistical measurements, such as accuracy, kappa, precision, recall, etc. in addition, you can make a receiver operating characteristic  analysis per condition.

classification analyses are performed in the classification view , which was adapted from the weka software. through this view, the user can select a classifier and a validation scheme  to perform an evaluation. as shown, the results report includes several global and per-class statistics, as well as the resulting confusion matrix. using these operations, users can assess whether the data being analyzed is suitable for classification, as well as determine which classification algorithm is best.fig.  <dig> classification analysis view. classification analysis view presenting the result of executing a bayes net classifier using a 10-fold cross validation scheme. the resulting confusion matrix is presented along with several statistical measurements. roc curve corresponding to condition c of the wine dataset is also showed



performance notes
although the performance is very dependent on the number of samples and the computer being used, some tests has been carried out in order to provide some performance guidelines. we have created a test dataset of  <dig> samples based on the wine dataset, and then, we have executed the most common workflow of mass-up under an intel core i <dig> m <dig> with 8gb of ram and kubuntu  <dig>  as os. it is important to note that the size of this test dataset clearly exceeds the common size of a dataset in a maldi-tof ms experiment, which usually are no longer than  <dig> samples.

it took about 90 s to load  <dig> raw samples and about 200 s to fully preprocess them. once the data is preprocessd and prior to perform any analysis, we must apply the match peaks operation, which could be executed in less than 30 s using the maldiquant algorithm and in less than 3 s using the forward algorithm. most of the analyses  could be executed in less than 5 s, while clustering, biclustering and inter-label analysis took more time. on one hand, clustering analysis took less than 20 s and the biclustering execution time depends on the algorithm selected . on the other hand, inter-label biomarker discovery based on  <dig> randomizations took about 8 min.

CONCLUSIONS
in this paper we have presented mass-up, a new software for the analysis of maldi data. this is an application that covers the whole process of maldi data analysis, from data preprocessing to complex data analyses.

mass-up incorporates the most common analyses, aside from protein identification and focusing in biomarker discovery, such as statistical tests-based biomarker discovery, clustering, pca, and classification. in addition, other less common analyses such as quality control and biclustering are also included. therefore, mass-up provides users with a wide range of tools to analyze and explore their maldi data.

unlike other ms tools, mass-up provides a friendly graphical user interface designed to avoid the need for a bioinformatics expert to use it. the tutorial and examples included in mass-up tool and in the project homepage will guide users through the different operations included, making it use suitable for any user.

finally, mass-up is open to further extension, such as including new operations or improving the available ones.

availability and requirements
the mass-up software is freely available from the project homepage on http://sing.ei.uvigo.es/mass-up. additionally, source code can be downloaded from https://sourceforge.net/projects/mass-up/.

project name: mass-up.

project home page:http://sing.ei.uvigo.es/mass-up

operating system: platform independent, packaged for windows and linux.

programming language: java version  <dig> 

other requirements: mass-up has no other requirements since distrubitions are self-contained.

license: version  <dig> of the gnu general public license .

additional file
additional file 1: table s <dig>  detailed list of the source and version of the algorithms and libraries used in mass-up. 



competing interests

the authors declare that they have no competing interests.

authors’ contributions

jlc, hms, ff and mr conceived the idea of the software. ff, mr, hl and dg designed the software architecture. mr, hl and dg implemented the software. all authors wrote, read and approved the final manuscript.

authors’ information

not applicable.

