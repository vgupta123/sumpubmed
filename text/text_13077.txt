BACKGROUND
metabolomics, the study of an organism’s biochemistry, has become increasingly relevant along with other “omics” technologies during the last ten years. some of the techniques of choice to distinguish the metabolites present in a biological sample of an organism are separation techniques coupled to sensitive detectors, such as gas chromatography-mass spectrometry  and liquid chromatography-mass spectrometry . in contrast to flame ionization detectors, uv absorbance detectors, and other one-dimensional detectors, these hyphenated methods provide high-dimensional data of analyte molecular ions or analyte molecular ion fragments collected over the runtime of the separation. in the context of metabolomics, this usually involves the observation of potentially hundreds of ion signals of different masses simultaneously in every recorded scan. these numbers may be even higher for proteomics, owing to the larger masses of peptides and peptide fragments. comparing such data manually to find corresponding signals is very labour intensive, as each experiment usually consists of thousands of individual scans. thus, the goal must be to obtain a high level of automation during data acquisition and data processing, allowing scientists to focus on the informative parts of their data, while still alerting them to potential errors or problems.

often it is the goal of a metabolomics experiment to detect differences between a treated and a control group of measurements. therefore, an accurate alignment and matching of corresponding features in all measurements is an extremely important part of data preprocessing. data matrices representing the detected and aligned features across all measurements may be generated in order to be used for further statistical analysis. it is essential that an alignment algorithm captures fluctuations in the chromatographic system that lead to non-linear distortions of the retention time of individual features
 <cit> . further, it needs to group those features that are most similar to each other and to discover whether features are present or absent. in the end, a matrix of grouped peak features of single or related coeluting analyte ions should be generated to establish relationships in abundance between different experimental conditions. then, based on other characteristics such as parent ion mass, ion fragments or isotope pattern, an identification of those features for integration with downstream analysis is required. here we focus on the first few steps of such an analysis pipeline, including the generation of a matrix of grouped features for retention time normalization.

the currently available algorithms for retention time alignment can be distinguished into two general categories: peak-based and raw data-based alignment. the peak-based algorithms require prior peak- or feature-finding and often also peak deconvolution to reduce the effect of overlapping signals, before a score function is applied to establish correspondence between peaks
 <cit> . raw data-based algorithms on the other hand require little or no preprocessing, but are computationally very expensive
 <cit> . we will now give a brief characterization of existing algorithms for the two categories before we introduce and categorize the algorithms presented in this paper.

peak-based algorithms are very sensitive to the correctness of the a priori peak detection. a peak may be defined as the time-resolved signal intensity trace of an analyte ion’s corresonding mass matching predefined criteria, such as the goodness-of-fit to a predefined peak model shape, together with a signal-to-noise ratio threshold
 <cit> . if a peak is tagged to be absent during preprocessing, it cannot be aligned by a peak-based algorithm. in order to handle missing peaks in data matrices for statistical analysis, smith et al. <cit>  then filled the gaps by using estimates based on prior grouping of the data. such a grouping usually consists of at least two groups, e.g. control and treated group. then, for a peak missing within a group, where most other peaks are present, the missing value can be estimated from the present members of the group. however, such peak imputation may be erroneous if it is only based on the final peak tables and does not access the original data to ensure that a peak is really present.

to be able to assign peaks that may not have been aligned, krebs et al. <cit>  proposed an approach based on prior peak detection and grouping, followed by polynomial interpolation to infer warping in between grouped peaks. prince and marcotte introduced a similar interpolation scheme for raw data-based alignment with dynamic time warping
 <cit> .

a further division of peak-based algorithms may also be applied concerning the use of mass spectra  for peak similarity calculation. warping based on peaks detected in the total ion chromatogram  is usually supplemented by using ms, to increase the number of true positive peak assignments
 <cit> . some algorithms work on a more complete set of extracted features, e.g. points of retention time, m/z and intensity
 <cit> , but often resort to linear regression in order to compute a retention time correction, due to the large amount of points that need to be processed. a more exhaustive overview of existing feature-based alignment algorithms to align point sets is given by lange et al. <cit> , especially for the application to lc-ms data in proteomics and metabolomics. aberg et al. <cit>  described the peak correspondence problem for nmr, showing that there is a significant amount of overlap considering the algorithms for these, at first sight different, application domains.

raw data-based algorithms operate on the complete collection of  ms data, also termed the uniform matrix, such as obiwarp
 <cit> , which is based on dynamic time warping  with pairwise similarities between binned mass spectra, or the signal maps approach by prakash et al. <cit> . therefore, these algorithms should find more and possibly better correspondences compared to the peak-based algorithms, which only have access to a limited amount of reported peak features. other approaches use correlation optimized warping 
 <cit>  for tic alignment, or generalizations thereof
 <cit> , selecting specific mass traces to improve over simple tic-based alignment. however, using many mass traces increases the computational demand, as well as the amount of data in need of processing, and may also increase the tendency of aligning noise
 <cit> . possibly owing to that computational demand, most raw data-based algorithms do not consider alignment or matching of individual points of retention time, m/z and intensity, but instead only try to correct the retention time deviation for each mass spectrum as a whole. the advantage of raw data-based methods is that they assign a definite position to each mass spectrum together with its corrected retention time after alignment. they use a pairwise similarity function between either tic or sequences of mass spectra, finding an optimal global similarity with respect to their objective function
 <cit> . the local correspondences between two raw data sets then allow to select the mass spectra with the highest pairwise similarities after the alignment to pinpoint peaks of interest for further investigation
 <cit> .

in this paper we introduce two novel methods for retention time alignment of multiple gc-ms and lc-ms experiments, which may be used individually and in combination as a hybrid method. the first method, bidirectional best hits peak assignment and cluster extension , is related to the clique-finding method described by styczynski
 <cit> , but without relying on deconvoluted peaks and choosing a different criterion for peak correspondence and clique coherence, which drastically decreases computation times. it is a peak-based alignment method that automatically finds conserved groups of peaks among an arbitrary collection of chromatograms, based on the bidirectional best hit criterion as introduced by tatusov et al. <cit>  and later by overbeek et al. <cit>  for the matching of orthologous genes. peaks are compared using user-definable similarities based on their mass spectra, for example with the similarity introduced by robinson et al. <cit> , or by derived similarity functions, that we will introduce in this work, and are successively grouped into clusters of best pairwise correspondence. this method allows to find clusters of arbitrary size, up to the number of chromatograms under consideration. it may be applied to different experimental protocols with more than just two groups of treatment and control, since the algorithm requires no prior knowledge of an existing grouping.

the second method, center-star multiple alignment by pairwise partitioned dynamic time warping , involves the application of dtw as in
 <cit> , but to all pairs of chromatograms. dtw was first introduced and used in speech recognition for the alignment of time dependent feature traces of speech samples
 <cit> . one of the first applications of alignment methods to low-resolution gc-ms data was performed by reiner et al. <cit> , based on the local squared distance of the tic. more recent applications have been reported by christin et al. <cit> , clifford et al. <cit> , prince and marcotte
 <cit> , and ramaker et al. <cit> . prince and marcotte
 <cit>  showed that different local score or cost functions can be used in order to align data from lc-ms experiments with good performance. other methods for the alignment of raw chromatographic data exist, such as aligning the time series data to a latent trace, which is constructed from training series, with an underlying stochastical model
 <cit>  or by different means of regression
 <cit> . we use the grouped peaks from bipace as anchors to constrain the pairwise dtw alignments, as outlined in a previous publication
 <cit> . this results in faster computation and at the same time considerably less memory usage than in the unconstrained cases through the use of an optimized data structure, while providing comparable alignment results. building on the pairwise alignments, we choose the chromatogram with the highest sum of pairwise similarities as the reference for the final alignment of all remaining chromatograms to the reference. we use dtw to compute the pairwise alignment, due to its applicability to data with non-linear time scale distortions, its relatedness to classical sequence alignment algorithms
 <cit>  and its proven power to perform retention time correction and signal alignment
 <cit> .

methods
first we describe the peak and raw data-based alignment algorithms bipace and cemapp-dtw in detail. then we combine them to create a new hybrid method that benefits from the speed and accuracy in peak matching of the peak-based alignment algorithm, while still providing a profile multiple alignment of all gc-ms datasets in reasonable time and space.

bipace - multiple alignment by bidirectional best hits peak assignment and cluster extension
given a chromatogram c = {p <dig> p <dig> …,pℓ} as an ordered set of peaks, we define a peak p= as a triple of a mass vector m, an intensity vector i, both with the same dimensions, and a retention time t. peaks can be matched between chromatograms by exhaustive search, if a feasible criterion for their identity exists. based on gc-ms electron ionization  fragmentation mass spectra alone, such a criterion is hard or even impossible to find especially due to the ambiguity of the mass spectra of isomers. additionally, we have to deal with inherent noise, introduced by contaminations of the sample from external sources  or internal sources . thus, we use a proven similarity function, the modified cosine similarity between mass spectra, represented as  mass intensity vectors, weighted by an exponentially penalized difference in retention time   of the spectra
 <cit> . for two peaks p =  and q =  and a retention time tolerance of d, following
 <cit>  we define this similarity function as: 

  f:=s·exp22d <dig>  

where s would typically be the cosine value of the angle between the two peaks’ mass spectral intensity vectors: s = cos∠. however, s could also be realized by any other similarity function defined between two vectors, such as the negative euclidean distance, the dot product, pearson’s linear correlation or spearman’s rank correlation. the similarity function f  leads to a good prefiltering of candidate peaks for matching throughout our input chromatograms.

in order to assign peaks to their best corresponding counterparts, we calculate all pairwise similarites using the similarity function f  between all peaks from distinct chromatograms. the time required to calculate all pairwise similarities between peak candidates within the different chromatograms can be reduced by using a cutoff for the maximum allowed time deviation. this is achieved by first calculating the time deviation penalty, whose value ranges between  <dig>  indicating a large rt difference, and  <dig> for perfect rt correspondence, and then deciding, based on that value, whether the proximity indicates a good candidate to go on and calculate the cosine score. however, the overall complexity for this first step remains quadratic in the number of peaks to be compared.

apparently, the simplification should only be applied if the retention time deviation between two chromatograms is expected to be within a fixed time tolerance and as long as the order of elution of compounds is roughly preserved locally. otherwise, potential candidates are pruned too early from the search space. other similarity functions than f  may also be applicable for some datasets. however, our experiments show, that f  gives the best overall performance on undeconvoluted spectra with low mass resolution.

assignment of peak pairs
we calculate the pairwise similarities using f  as defined above for all possible pairs of peaks from k different chromatograms c <dig> c <dig> …,ck . this allows us to define a k-partite edge-weighted similarity graph s = , where each vertex in one of the k disjoint partitions represents a peak from a distinct chromatogram cj and each edge represents a similarity value of a peak pair from two different partitions. ultimately, we want to enumerate all cliques of s, a problem that relates to the classic np-complete problem clique <cit>  with a runtime complexity that is unbearable for realistic problem sizes. we thus prune s using different heuristics to create the reduced weighted k-partite graph s’. s’ is then used to construct the unweighted k-partite bidirectional best hit graph s”. on this special graph, the clique problem can be solved by a polynomial time algorithm since the maximum degree of each vertex in s” is always smaller or equal to k <cit> .

since only the similarities between peaks of different chromatograms are considered by our algorithm, we do not calculate the self-similarity of peaks from the same chromatogram, which differentiates our method from the method of styczynski et al. <cit>  and allows us to neglect all edges within partitions. additionally, we exclude edges from s if they are outside the maximum retention time difference window as defined by d, which reduces the candidate space for peak matching, but may exclude valid peak assignments. figures
 <dig> and
 <dig> show this examplarily for two peak lists. we then define s’ as the graph with this reduced edge set e’ and v  as its vertex set.

bidirectional best hits merging
in order to identify all bidirectional best hits , that are all cliques of size  <dig> of s’, we look up for each pair of peaks p∈c and q∈c′ from distinct chromatograms c and c’, the peak with highest similarity to p in c’, denoted q’, and the peak with highest similarity to q in c, denoted p’. if p = p′and q = q′, then p and q are bbhs of each other and all peak similarities of p to other peaks in q’s parent chromatogram and of q to other peaks in p’s parent chromatogram are set to a minimum similarity value, while the similarity of the two associated peaks p and q is retained. we then define v’ as the set of all vertices that are part of at least one bbh and define s′′ =  as the reduced k-partite graph with v’ as its vertex set and e” as its unweighted bbh edge set. we now want to enumerate all maximal cliques of s”, a problem that is known to be solvable in polynomial time on graphs with a polynomial bound on the number of maximal cliques contained in the graph
 <cit> , as is the case for s” by construction.

we proceed greedily by trying to merge each pair of bbhs into a clique containing at least k and at most k peaks, where k ≥  <dig> is the minimal clique size  parameter. merging is only performed if the new cluster remains a complete subgraph, which is equivalent to all peaks within the cluster being bbhs of each other. otherwise, we select the largest common fully connected subgraph and omit all peaks that are not fully connected. we continue merging until all bbhs have been processed. finally, we report cliques with at least k peaks ordered by their median retention time in a multiple alignment table. the clique finding is illustrated for three chromatograms and a limited number of peaks in figure
 <dig> for a maximal bidirectional-best hit clique and for a non-maximal clique with one not completely connected peak in figure
 <dig> 

time and space complexity of bipace
we need
k2ℓ <dig> comparisons to calculate all pairwise peak similarities between k chromatograms with ℓ peaks each, using a symmetric similarity function f = f. thus, the calculation of similarities requires
o time and space, if we need to keep all pairwise similarities, e.g. for plotting purposes. however, we can save space by recording for every peak p from chromatogram ci only its best hit set of size k −  <dig>  containing the best matching peaks q <dig> q <dig> …,qk, where each qj is from a different chromatogram cj,j ≠ i. then, the total size of all best hit sets is proportional to the number of peaks, kℓ, multiplied by the number of partitions a peak can have best hits for, k −  <dig>  giving a total space requirement of
o for s’.

finding the bidirectional best hit for each peak p of the kℓ peaks in s” requires that we retrieve p’s best hit q and q’s best hit p’, and test whether p = p′. this amounts to
o comparisons for all peaks.

in order to identify all maximal cliques, we employ a greedy, bottom-up approach based on the bbhs of each peak. storing all bbhs clearly requires
o space. then, for each pair of peaks  from different partitions, we try to merge their corresponding cliques. this requires checking whether all peaks in the candidate cliques p and q are fully connected, which takes 2|p||q| comparisons per pair. since |p| + |q| ≤ |k|, this amounts to
o time.

in total,bipace requires
o time and
o space.

multiple alignment projection
up to now, only the grouped peaks have been aligned, so we have a peak-based multiple alignment. for a full multiple alignment of the complete datasets, all unassigned signals should also be aligned. in this situation, one could choose to implement an approach like the one proposed by krebs and co-workers
 <cit> , selecting a representative chromatogram as alignment reference and calculating a cubic spline or other higher order polynomial, to interpolate between the aligned peaks. however, such a method can only work well if the number of aligned peaks is high and there are no large areas of unknown peak assignments in the chromatograms. to circumvent these problems, we will show in the next section how to use dynamic time warping  to calculate signal assignments in between paired peaks, using the same similarity function as in bipace. additionally, we show how the aligned pairwise peak groups from bipace, or any other peak alignment method, can be used as alignment anchors for dtw, before using the pairwise dtw scores to automatically select a reasonable alignment reference using the center-star heuristic.

cemapp-dtw - center-star multiple alignment by pairwise partitioned dynamic time warping
in this section, we introduce an improved version of dtw for series of time-resolved feature vectors, as they occur in gc-ms and lc-ms data processing. in
 <cit> , we described how to speed up dtw using predefined anchors of features which could be matched a priori with high confidence, while still allowing the alignment flexibility by defining a neighborhood radius r around the positions of the anchors. here, we extend this approach and show how anchors can also be combined with other constraints, such as the sakoe-chiba band constraint
 <cit>  to save both execution time and space, using an optimized data structure for alignment matrix storage.

pairwise dtw is a global alignment of two series a =  and b =  of lengths m and n, respectively, where ai,
bi∈rl are the individual feature vectors of equal dimension l. in the context of gc- and lc-ms, a feature vector corresponds to a binned mass spectrum of intensities, a base peak ion intensity or a tic value. we assume that mass resolution and range are equal for the experiments to align, thus only the intensity distribution over a fixed range of mass channels is used as feature vector.

the common definition of dtw involves a local distance function and a global distance or objective function that should be minimized
 <cit> . to be consistent with our previous notation, we use an equivalent formulation using similarities, which then requires maximization of the objective function. since a and b are series sampled at discrete intervals, we seek an optimal matching of elements  connecting every element in a to at least one element in b and vice versa, termed a path or simply alignment. in order to find an optimal alignment of a and b, an × alignment matrix q is set up, in which the optimal similarity value for aligning the prefixes  and  is stored at position q. a path
p= thus consists of elements pk = , where the path length k is bounded by  <dig> ≤ k < 2·max for non-empty a and b.

pairwise dtw usually performs a global alignment of two series of features, requiring that the start and end of both series have to be aligned: p <dig> =  and pk = . however, this constraint can be relaxed for subsequence matches to gain the equivalent of a free-end gaps alignment
 <cit> . note that dtw allows mapping of an element to multiple counterparts, which differentiates it from classical sequence alignment, where an element can only map to at most one counterpart
 <cit> . additionally, a continuity constraint requires that
p must move only to directly adjacent cells of the alignment matrix vertically, horizontally or on the diagonal, such that if pk = , and pk +  <dig> = , then i′ −i ≤  <dig> and j′ −j ≤  <dig> must hold. a third constraint requires monotonicity of the path, such that i′ − i ≥  <dig> and j′ − j ≥  <dig> hold, and  +  >  <dig> 

an optimal alignment path satisfying the above constraints maximizes the sum of pairwise similarities. this allows us to define the optimal dtw alignment between non-empty a and b through the following expression: 

  dtw:=maxp∈p) 

where
p is the set of all possible global alignment paths of a and b.

maximization alone would favor the highest number of steps to align a to b, given the above constraints, resulting in alternating combinations of vertical and horizontal steps. hence, additional weighting factors need to be included to treat diagonal , vertical  and horizontal  steps equivalently
 <cit> . expansion and compression are similar to insertion or deletion in classical sequence alignment. we thus define three weight parameters, wmatch, wcomp and wexp, which allow to vary the degree of flexibility of the alignment between overadaptation and the shortest possible alignment.

finding an optimal warping path to actually recover the mapping between a and b can be achieved by applying the dynamic programming principle and tabulating intermediate optimal results. we thus calculate the value of each q by applying equation  <dig> recursively, with f  corresponding to the same similarity function as used in the section about bipace. initialization of row  <dig> and column  <dig> with −∞ is required to only allow a global alignment, effectively forcing the alignment of . 

  q:=0ifi=j= <dig> −∞ifi=0and0<j≤n−∞ifj=0and0<i≤mmaxq+wmatchfq+wcompfq+wexpffor1≤i≤n,1≤j≤m 

the optimal score can then be found in the bottom-right entry of the alignment matrix q, such that dtw = q. we finally correct the optimal score for the weights to achieve a score that can be used to compare series of different lengths
 <cit> .

postprocessing - obtaining bijective maps
as described in
 <cit> , the obtained map from dtw may not be bijective, depending on the similarity function used. the authors of
 <cit>  describe a method to select bijective anchors as control points for a polynomial fit, in order to interpolate in between the anchors. in cemapp-dtw, however, we choose to define path weights that either boost diagonal moves by user-definable factors, resulting in a less or more adaptive alignment path. for symmetric dtw, these factors can be used to efficiently reduce the problem of overadaptation of the path, when maximizing a similarity function and avoiding the need to predetermine additional gap penalties. cemapp-dtw reports a list of the maxima of the similarity function found along the alignment trace, which coincide with aligned, highly similar mass spectra.

an efficient datastructure for pairwise dtw alignment with anchors
the unconstrained pairwise dtw algorithm requires
o time and space, where n is the number of feature vectors to be compared. additionally, due to the pairwise similarity used, the method requires another factor of l for each pairwise similarity calculation. for long feature vectors, l may be larger than n. however, most regions of the calculated pairwise similarities are never needed in practice, as chromatograms tend to be distorted most around the diagonal of such a pairwise similarity matrix. in practice, the sakoe-chiba band
 <cit>  or the itakura parallelogram
 <cit>  constraints are often used to prune regions that are too far away from the diagonal.

these constraints still do not capture the chromatographic reality, where retention time distortion is mostly caused by large peaks eluting from the column, shifting all subsequent peaks by a nonlinear factor
 <cit> . we therefore introduced easily identifiable peaks as anchors to dtw
 <cit> . these anchors define regions within which the alignment is calculated exactly, whereas outside of these regions no calculations are performed at all. in order to implement this idea, here we introduce a partitioned array data structure to store only those elements that are contained in the anchor-constrained regions. this requires the previous association of anchors, e.g. by bipace or other methods.

efficient storage of partitioned array
we use the row compressed storage  technique to store all elements of an alignment matrix in a linear array d, where each element is accessed via an offset index array idx for each row in the virtual matrix and a length len for the number of elements stored contiguously in that row. an element of the virtual matrix at row i and column j can be accessed using the index k = idx + j in array d. iteration for virtual row i can be performed from idx to idx + j,j < len. query of elements outside of the defined regions returns a configurable default value, such as positive or negative infinity. setting of such elements has no effect, since the layout is static and determined before initialization of the matrices.

layout calculation
the layout of the partitioned array is determined by explicit constraints, regarding the elements that require evaluation during the alignment. these constraints are defined by geometric primitives within the 2-dimensional plane, e.g. rectangular regions defined by the alignment anchors, as well as trapezoid or arbitrary other regions. however, the layout needs to satisfy the monotonicity and continuity constraints of dtw. thus, directly neighbouring adjacent anchors and anchors with inverted order are detected and removed.

the final shape of the partitioned array is determined by the intersection of the set of constraints
l, where
l consists of all pairs  for which the alignment is calculated. this may lead to a less optimal alignment concerning the optimization function, but allows for further speedup and smaller memory footprint. one option here is to include either a global or a local sakoe-chiba band constraint between successive anchors. the width w for such bands can be defined by the user either for the whole alignment matrix  or for every partition .

we then define
q^ as the dtw recursion to calculate q using the constraint set
l: 

  q^:=−∞if∉lqotherwise. 

a schematic of the corresponding partitioned array with a constraint set
l using anchors and a local sakoe-chiba band constraint is shown in figure
 <dig> 
l defines the final layout of the pairwise alignment matrix and thus the number of elements that are compared and stored.

multiple alignment of chromatograms
in order to capture machine dependent fluctuations in retention times and signal intensities, multiple chromatograms are usually measured from the same original sample as technical replicates. these often exhibit notable, but rather small deviations in retention times and intensities, when compared pairwise.

however, biological replicates show larger deviations due to the heterogeneity of the sampled population and corresponding differences in the metabolic state of cells at the time of harvesting
 <cit> .

when comparing the metabolic response of an organism under different conditions, deviations are even larger, as some metabolites may not occur at all, and others occur in different quantities, depending on the affected pathways of the organism. thus, a multiple alignment algorithm needs to handle all of these aspects as good as possible.

reference selection
a general method for multiple alignment of chromatograms does not necessarily require a reference to align to. however, most published algorithms either use a manually selected reference
 <cit> , or construct a reference by adding otherwise unassigned peaks
 <cit>  or by averaging over total ion chromatograms
 <cit> . automatic selection of a reference among the available chromatograms is seldomly reported
 <cit>  but is beneficial to methods using a manually defined reference
 <cit>  that can introduce a bias in the process of alignment early on.

in metabolomics and proteomics applications, the number of measurements typically ranges from dozens to hundreds, such that a multiple alignment algorithm should scale well and be as memory efficient as possible, since file sizes may approach several hundred mbytes or even gbytes per raw data file. to avoid a direct multiple alignment, we calculate pairwise dtw scores between all pairs of chromatograms first. these scores can be obtained from the pairwise dtw scores, but faster methods can also be used to estimate the true scores, e.g. based on peak-matching and scoring as performed by bipace, although these may not be as accurate. then, we select the chromatogram that has the highest sum of scores to all other chromatograms as the alignment reference. all remaining chromatograms are then aligned to this center chromatogram independently of each other
 <cit> . other authors report to use comparable clustering methods
 <cit> .

multiple alignment construction
the construction of the multiple alignment differs slightly from the approach taken in standard sum-of-pairs multiple sequence alignment, since we use dtw, which is potentially a non-metric similarity function
 <cit> . additionally, every pairwise alignment is a global alignment without gaps, so in principle we can not worsen the multiple alignment by introducing gaps. however, since dtw uses compressions and expansions, chromatograms having peaks which are absent in the selected reference may artificially decrease the quality and score of the alignment. hence, we can not guarantee that the multiple alignment will be within a specific error bound of the optimal multiple alignment. nontheless, our method performs well in practice, which will be discussed in detail in the results section.

we finally obtain a dense matrix of aligned feature vector indices, e.g. of the binned mass spectra, or derived figures, such as the retention time of each mass spectrum for all chromatograms. in case of cemapp-dtw, and in contrast to bipace, there are no missing features within the table, as all features are aligned. these matrices will be used for evaluation of the alignment performance.

time and space complexity of cemapp-dtw
following the notation for time and space complexity of bipace, we need
o comparisons to calculate all pairwise alignments between k chromatograms with ℓmass spectra each. using the pairwise dtw alignment similarities, we select the center chromatogram in
o time and align all remaining k− <dig> chromatograms to it in
o time. if we store the pairwise alignments, they can be reused at this point, otherwise, they need to be recalculated in
o time. thus, the calculation of all unconstrained pairwise dtw alignments takes
o in time and space.

for partitioned dtw, the runtime and space requirements for each pairwise alignment are a function of the partition length s and of ℓ. we then need
o time and space to calculate each pairwise alignment. using an additional local sakoe-chiba band constraint with width w, the space and time requirements for partitioned dtw are
o. in total cemapp-dtw then requires
o time and space.

RESULTS
in this section, we first give a short review of existing strategies for the evaluation of peak and profile-based multiple alignment algorithms in the context of metabolomics. we then describe our approach and define useful metrics to compare alignment quality before we evaluate bipace and cemapp-dtw on two metabolomics datasets. in order to evaluate our methods we need to define what a good alignment is. to achieve this, we can use a ground truth of highly conserved and putatively grouped peaks, which are confirmed by ms/ms. for lc-ms in the domain of metabolomics and proteomics, such data sets were prepared and used for the evaluation of alignment algorithms
 <cit> . however, the ground truth defined by these datasets is only well defined for feature-based alignments and also requires a grouping of individual mass-to-charge ratio , retention time  and intensity features, which are currently not provided by either bipace or cemapp-dtw. for gc-ms metabolomics data, robinson et al. <cit>  compare their method against a ground truth defined by a human specialist.

each alignment evaluation requires ground truth files, containing grouped features, such as triples of m/z, rt and intensity in the case of lange et al. <cit> , and simply rt in the case of robinson et al. <cit> . in the first case one scan may have multiple features, while in the second case a scan is a feature that is only identified by its rt. in order to perform the evaluation, we focused on the correctly assigned rts and the corresponding scan indices, since those will usually have the largest deviation across samples.

the ground truth peak group defines whether a peak is present in a sample or absent. the results of an alignment algorithm are then tested in turn against each ground truth group. if the alignment algorithm reports an aligned peak group, we count all of the group’s peaks that are present in the corresponding ground truth group as true positives . peaks that are absent in the ground truth group and in the reported peak group are counted as true negatives . a peak that is reported as absent in the ground truth group, but as present in the alignment algorithm’s reported group, is recorded as a false positive . finally, if a peak is reported as present in the ground truth peak group, but as absent in the reported peak group, it is reported as a false negative .

we then use the following commonly applied measures to assess the quality of a multiple alignment: 

  precision=tptp+fp 

  recall=tptp+fn 

  f1=2·precision·recallprecision+recall 

we evaluate the performance of bipace and robinson’s method using precision and recall, as well as the total tp and fp numbers. for cemapp-dtw, however, the tn and fn values are not available, since cemapp-dtw reports an alignment for all peaks, so we will compare cemapp-dtw only using absolute tp and fp numbers.

the three major configurations that we will evaluate are schematically shown in figure
 <dig>  we evaluate each of bipace and cemapp-dtw individually, before we evaluate cemapp-dtw using the bipace alignment with the highest f <dig> score as a constraint set. the actual alignment is preceded by a preprocessing phase, in which the peak features are imported and converted for use in our pipeline. then, bipace is applied with its processing steps to calculate a multiple alignment, before cemapp-dtw is used first without anchors and then with the anchors as defined by the best multiple alignment of bipace. throughout all evaluations, we used five different local similarities to compare the binned mass spectra, namely the cosine , the dot product , the negative euclidean distance , pearson’s linear correlation , and spearman’s rank correlation , each with and without a retention time penalty, as defined in equation  <dig> 

evaluation of bipace and cemapp-dtw on a reference dataset
we evaluated the bipace method on the leishmania parasite raw data and peak lists published in
 <cit> , using as ground truth the manual multiple alignment reference from the same paper.

data preparation and parameter settings
preprocessing was performed by removing intensites linked to the derivatization agent at masses  <dig> and  <dig>  due to lack of access to the manually edited peaks lists, we used the chemstation  peak data provided as supplementary material directly and imported them as peak annotations into our processing pipeline. the peak data files contained between  <dig> and  <dig> peaks and were stored in tab delimited format. a line in such a file reported the apex scan index of the corresponding peak for retrieval of the raw mass spectra from the  <dig> different andi-ms/netcdf chromatogram files. each of these files contained approximately  <dig> centroided mass spectra. the spectra were binned with nominal mass accuracy in a range from  <dig> to  <dig> dalton for further processing.

the reference manual alignment containing  <dig> aligned peak groups was then used in order to calculate the classification performance numbers, as defined in equation  <dig>  this was performed for each multiple alignment reported by either bipace or cemapp-dtw individually, or in conjunction, where cemapp-dtw used the multiple alignment of bipace as anchors, following figure
 <dig> 

we varied the minimum clique size  parameter from  <dig> to  <dig> chromatograms in order to control the size of the smallest clique that should be reported by bipace. other varying parameters for the time penalized instances included the width parameter d of the retention time penalty function, as defined in equation  <dig>  we also used a threshold parameter t on the value of this function so that the costly pairwise similarity function was only evaluated if the retention time penalty function’s value was greater or equal to t. this pruning leads to lower runtimes of bipace and cemapp-dtw, visualized in figure
 <dig> 

for cemapp-dtw, we assessed two different approaches, one without any anchors from bipace, and one using the anchors as reported by the best bipace instance, as determined by the f <dig> measure. each cemapp-dtw configuration was further parameterized on the weight w  used for diagonal matches and on the sakoe-chiba band constraint bc, given as the percentage of scans from a chromatogram. for those cemapp-dtw instances which used the best bipace anchors, we additionally varied the use of the sakoe-chiba band to be applied globally or locally and the size of the radius around anchors. in total, we evaluated  <dig> different parameterizations.

the exact configuration and evaluation results for all parameterizations together with memory usage details are available in additional file
 <dig> 

results of bipace
our results for bipace show good performance for the time-penalized dot product, which was also used for robinson’s method, but also for the time-penalized variants of pearson’s linear correlation  and spearman’s rank correlation . all instances using a time-penalized variant of the similarity function are indicated in the similarityfunction column of additional file
1: table s <dig> and are shown in figure
 <dig> for varying t and d parameters. the impact of the different similarity functions on the runtime of bipace can be seen in figure
 <dig>  showing that for bipace the runtime median was close to  <dig> seconds, while it was reduced for bipace with retention time penalty d and threshold t to less then  <dig> seconds. our best result is achieved for bipace with pearson’s linear correlation as pairwise similarity using the time penalized variant with a minimum clique size of mcs =  <dig>  t of  <dig>  or  <dig>  and d of  <dig>  seconds. the results of the cosine similarity function are equal. for these best cases, we achieve  <dig> true positives,  <dig> false positives,  <dig> false negatives and  <dig> true negatives. this results in a precision of  <dig> , a recall value of  <dig> , and a f <dig> value of  <dig> . figure
 <dig> indicates that, for the best performing similarities, the choice of the mcs parameter is not critical, unless a false positive number of  <dig> is wanted.

figure
 <dig> shows that robinson’s
 <cit>  result performs better than any of our parameterized instances and achieves  <dig> true positives and at the same time only  <dig> false positives. additionally,  <dig> false negatives and  <dig> true negatives improve the precision to  <dig>  and the recall to  <dig> , giving an f <dig> value of  <dig> . an explanation for this result can be found in our best performing alignments. there we see a larger number of false positives, meaning that our method reports more potential matches, which are scored as false positives against the given reference, but would otherwise be true positive matches. thus, we suspect that robinson’s manually defined ground truth that we evaluate against is probably not error-free. additionally, our best parameterizations report a number of potential aligned peak groups with significant sizes, which are not contained in the reference at all and are thus not assignable for the evaluation. if only the number of false positives is important, for example to retrieve only highly conserved peak groups with as few errors as possible, a number of parameterizations achieve that goal with  <dig> true positives and only  <dig> false positive assignment with maximum clique size of  <dig>  a retention time threshold t of  <dig>  and retention time penalty d of  <dig> .
 <cit>  performs best using a time penalized dot product similarity.

results of cemapp-dtw
the best scoring cemapp-dtw result using the dot product as a pairwise similarity with diagonal match weight w  of  <dig> , a local sakoe-chiba band of bc =  <dig>  and d =  <dig>  using the anchors as defined by the best-scoring bipace instance with an anchor radius of  <dig> achieves  <dig> true positives and  <dig> false positives. however, the number of false positives is potentially exaggerated since the manual reference alignment contains absent peaks, which are of course reported by cemapp-dtw and are thus counted as false positives. the best cemapp-dtw result used the dot product without using anchors and a match weight of  <dig> , a global sakoe-chiba band of bc =  <dig>  and d =  <dig>  and achieved  <dig> true positives and  <dig> false positives. the results for cemapp-dtw are visualized in figure
 <dig> for varying match weight w  and anchor radius r and in figure
 <dig> for varying global or local  sakoe-chiba band constraint bc.
 <dig> shows alignment true positives and false positives conditioned on anchor radius  and alignment match weight . it is clearly visible that an anchor radius of r =  <dig> combined with a match weight of w =  <dig>  gives the best results for linear correlation and the dot product. subfigure
 <dig> shows alignment true positives and false positives conditioned on sakoe-chiba bandwidth constraint as relative number of scans . rows show whether the constraint was applied globally, indicated as false, or locally, indicated as true. the best results were obtained for a local window of sc =  <dig> ·max{|a|,|b|}.

evaluation of bipace and cemapp-dtw on a real world dataset
in order to assess the quality of bipace and cemapp-dtw with and without bipace anchors on a gc-ms dataset of a more realistic size, we used samples from a plant metabolomics experiment
 <cit> . spring wheat  was grown under atmospheric and increased co <dig> concentration conditions
 <cit>  in a free-air carbon dioxide  enrichment  field experiment. the wheat was grown, harvested, and sampled at maturity in two successive years , and prepared for analysis with gc-ms according to the protocol published in
 <cit>  in order to determine whether the plants showed a metabolic response in their grains evident through co2enrichment.

our evaluation was based on a total of  <dig> chromatograms and  <dig> interspersed blank chromatograms. each year was represented by  <dig> chromatograms, divided into two groups of  <dig> chromatograms each, with one technical replicate per chromatogram, summing to  <dig> chromatograms per condition and year. blank runs were excluded from this evaluation. the chromatograms contained between  <dig> to  <dig> centroided mass spectra. the maximal scan difference that we found was around  <dig> scans which amounts to a maximum retention time deviation of  <dig> seconds between the groups of  <dig> and  <dig> 

data preparation and parameter settings
the acquired raw data was exported using the andi-ms/netcdf export function of the xcalibur software . for all further preprocessing steps, we used our framework maltcms. the data was first binned along the mass axis with nominal mass accuracy by arithmetic rounding to create a dense signal matrix. then, for each signal matrix individually, the intensities were normalized to length one for each column  to remove linear scaling effects in intensities.

in order to assess the grouping performance, we performed a peak detection with xcms
 <cit> , using the matched filter method with a signal-to-noise ratio of  <dig> and full-width at half height of  <dig> in order to find well represented peaks. the peak finding step reported between  <dig> and  <dig> peaks per chromatogram. the apex scan indices for each chromatogram’s peaks were stored in one tab separated value file for each chromatogram.

we then chose signals within a retention time window of + /− <dig> seconds. to be counted as a complete group, the scans corresponding to the tags were required to have a pairwise cosine similarity between their binned mass spectra of > <dig>  throughout all chromatograms and a maximum mass deviation of  <dig>  dalton. the selection process lead to  <dig> peak groups containing peaks appearing in all chromatograms, which defined our ground truth for the evaluation of the multiple alignments produced by our methods. this reference selection and grouping was performed by a profiling method, which was recently added to meltdb
 <cit> .

the evaluation was then performed following the flowchart in figure
 <dig>  bipace was run using the raw andi-ms/netcdf files as input together with the tab separated value peak lists. subsequently, the cemapp-dtw instances without anchors from bipace were run, before finally the cemapp-dtw instances using the bipace anchors from the best scoring multiple peak alignment were executed.

the reference data was then compared to the alignment results generated by the three separate evaluation workflows for bipace, cemapp-dtw, and bipace+cemapp-dtw using the five different similarity functions mentioned at the beginning of the results section, all of them plain and in combination with a retention time penalty, as described by robinson et al. <cit> , who only report use of the time penalized dot product. we combined each similarity function with the time penalty function as in equation  <dig> 

in order to assess the precision of bipace, we started with a minimum clique size  parameter value of  <dig> chromatograms, meaning that only those groups that contained exactly one peak from each file were reported. for the time penalized instances we varied the width parameter d of the retention time penalty function. we also used the threshold parameter t on the value of this function so that the costly pairwise similarity function was only evaluated if the retention time penalty function’s value was greater than or equal to t. the positive effect of this pruning on the runtime of bipace and cemapp-dtw is visible in figure
 <dig> 

for cemapp-dtw, we assessed two different approaches, one without any anchors from bipace, and one using the anchors as reported by the best bipace instance, as determined by the f <dig> measure. each cemapp-dtw configuration was further parameterized on the weight w  used for diagonal matches and the sakoe-chiba band constraint width bc, given as the percentage of scans from a chromatogram. for those cemapp-dtw instances which used the best bipace anchors, we additionally varied the use of the sakoe-chiba band to be applied globally or locally and the size of the radius around anchors.

the exact configuration and evaluation results for all  <dig> parameterizations including memory usage are available in additional file
 <dig> 

results of bipace
the results for bipace on the wheat dataset show very good performance in absolute and relative numbers. figure
 <dig> shows the absolute numbers of true positive versus false positive assignments for varying t  and d  parameters. the overall best result is achieved using the dot product  for instances using the time penalty function, and the cosine  for instances not using the time penalty function. the instances using no additional retention time penalty are visible at the bottom left of figure
 <dig>  these do not achieve as many true positives as the time penalized variants, however, they tend to produce fewer false positives as well. the negative euclidean distance  in combination with a time penalty, produces the fewest number of false positives, regardless of the value of d.

figure
 <dig> shows the dependency of true and false positives with regard to the mcs parameter. this parameter shows the relation of a small mcs value to a high number of true positives, but also to more false positives, since a larger number of small cliques with lower individual support are reported. larger cliques have a high support for each contained peak and are thus more influential for the total number of true positives, but they occur less often, as is visible for mcs =  <dig>  where each peak group must contain peaks from all  <dig> chromatograms. again, as in figure
 <dig>  dot product and cosine give the best results in absolute numbers of true and false positive assignments.

the precision and recall plot in figure
 <dig> does not clearly visualize a superior parameterization, but from additional file
2: table s <dig> we see, that the dot product is the best similarity function for retention time penalized instances with mcs =  <dig>   <dig> true positives,  <dig> false positives, and  <dig> false negatives. the best parameterization without retention time penalty also used the cosine with mcs =  <dig>  resulting in  <dig> true positives,  <dig> false positives and  <dig> false negatives. however, the retention time penalized variants tend to have a lower runtime, depending on the t parameter used.

there are no true negatives reported for the wheat evaluation, as there were no missing peak annotations in the ground truth. this explains the high number of false negatives for bipace, due to not completely connected peak groups, which prohibits bipace to form larger cliques. the peaks which could not be assigned to any cliques are consequently missing from the reported multiple alignments.

results of cemapp-dtw
for cemapp-dtw, the results are comparable to those obtained for the leishmania dataset. without the anchors defined by bipace, cemapp-dtw has fewer true positive results and more false positive results. here, the time penalized variant of the dot product with d =  <dig> seconds, bipace anchors, a local sakoe-chiba band constraint of bc =  <dig> , and a matchweight =  <dig>  achieves the best result with  <dig> true positives,  <dig> false positives and  <dig> false negatives. the best result using no anchors from bipace uses the dot product with d =  <dig> seconds retention time penalty, a global sakoe-chiba band constraint of  <dig> , match weight w =  <dig> , achieving  <dig> true positives,  <dig> false positives and  <dig> false negatives. these results are illustrated in figure
 <dig>  showing the dependencies of true and false positives on the different parameters. figure
 <dig> shows that a small anchor radius r =  <dig> combined with a match weight w =  <dig>  yields the highest number of true positives. in figure
 <dig>  the dependency between the use of a global or local  sakoe-chiba band versus different values for the band width parameter bc is shown. in general, a local band of width  <dig>  yields the best results.
 <dig> shows alignment true positives and false positives conditioned on anchor radius  and alignment match weight . it is clearly visible that an anchor radius of r =  <dig> combined with a match weight of w =  <dig>  gives the best results for linear correlation and the dot product. subfigure
 <dig> shows alignment true positives and false positives conditioned on sakoe-chiba bandwidth constraint bc as relative number of scans . rows show whether the constraint was applied globally or locally . the best results were obtained for a local window of  <dig> ·max{|a|,|b|}.

discussion
the results of bipace and cemapp-dtw presented in the previous sections show the advantage of using a retention time penalty as an additional criterion together with the mass spectral similarity function. the runtime boxplots in figures
 <dig> and
 <dig> show the advantage of using the t parameter as a threshold on the retention time penalty function. if the value of the retention time penalty function is larger than the t, then the costly similarity functions are applied, otherwise, the calculation is stopped immediately for that peak pair.

therefore, tuning of the t parameter is one possible option to speed up the calculation of both bipace and cemapp-dtw. since the time penalized similarity variants consistently perform better than the non-penalized ones, it is also advisable to check on the t parameter. our results show that this parameter should initially be set to a rather small number, since it does not directly correspond to the expected retention time deviation. finally, the minimum clique size mcs is an important parameter for bipace and influences the number of cliques that are reported in the multiple alignment. using a high value for mcs returns only those cliques whose peaks are all bidirectional best hits of each other and thus support each other as members of the clique. lower values for mcs return more cliques, but at the expense of returning a higher number of smaller cliques with potentially more misaligned peaks.

cemapp-dtw on the other hand has a few other parameters to tune. our results show that the most important ones are the use of anchors and an anchor radius of  <dig>  meaning that the dtw alignment must pass through the anchor positions for example defined by bipace . additionally, the use of a local sakoe-chiba band constraint and a match weight of  <dig>  are beneficial for the number of true positives cemapp-dtw is able to achieve.

concerning the best similarity function to use, there is no decisive answer possible from our results. in accordance with
 <cit> , pearson’s linear correlation and spearman’s rank correlation give good results in terms of low false positive numbers, but time penalized dot product and cosine tend to give significantly higher true positive numbers. using the time penalty function as a pre-filter for the actual similarity function seems to reduce the differences of the individual similarity functions. however, the instances using a correlation-based similarity have a significantly longer runtime , than the ones using the dot product or cosine similarity.

CONCLUSIONS
we have introduced a fast and accurate method for multiple peak alignment of gc-ms data, bipace, that is capable of finding groups of similar peaks between chromatograms from different experimental groups , achieving a high number of true positive and a very low number of false positive assignments. our method achieves results comparable to that of robinson et al. <cit> , while being easily tunable to a very low false positive rate via the minimum clique size parameter.

with the use of the peak groups aligned by bipace as anchors within partitioned dtw, we address one major issue of similar profile-alignment algorithms, namely their quadratic time and space complexity by partitioning the pairwise alignment matrix into adjacent regions. thus, strong peak candidates, such as reference compounds with unique mass traces  or characteristic fragmentation patterns  are definitely aligned, while weaker peaks that were not discovered during peak finding are also aligned, but with more flexibility.

we have shown that the partitioned dtw algorithm used in cemapp-dtw on its own is able to calculate a profile-based multiple alignment in less time and with fewer space requirements when compared to unconstrained dtw. combining cemapp-dtw with the aligned peak groups from bipace as alignment anchors allowed us to improve both on the runtime, as well as on the number of true positives recovered by the alignment. this combination of the two algorithms is feasible if a definite alignment is not the main requirement, but instead the output of cemapp-dtw is used for a subsequent retention time correction of the profile data. for a definite multiple peak alignment bipace is the better alternative.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
nh designed and implemented bipace and cemapp-dtw and drafted the manuscript. mk, ph and kn provided the biological background and data for the wheat dataset evaluation. mw helped with the implementation and testing of bipace and cemapp-dtw. hn reviewed and contributed to cemapp-dtw and provided the reference data for the wheat dataset evaluation. js suggested the bidirectional best hits approach and reviewed the bipace and cemapp-dtw algorithms. all authors read and approved of the final manuscript.

supplementary material
additional file 1
archive containing evaluation tables for theleishmaniaparasite dataset. the complete evaluation table giving the parameters and classification results for bipace, cemapp-dtw and robinson’s
 <cit>  method for the leishmania parasite dataset is contained in a zip-archive along with the corresponding figures. table s <dig> in the manuscript corresponds to the file ‘evaluation.csv’ in this archive.

click here for file

 additional file 2
archive containing evaluation tables for the wheat dataset. the complete evaluation table giving the parameters and classification results for bipace and cemapp-dtw for the wheat dataset is contained in a zip-archive along with the corresponding figures. table s <dig> in the manuscript corresponds to the file ‘evaluation.csv’ in this archive. the corresponding raw dataset together with experimental parameters, peak lists and reference multiple peak alignment is available from the metabolights database at
http://www.ebi.ac.uk/metabolights/mtbls <dig> 

click here for file

 acknowledgements
we acknowledge support of the publication fee by deutsche forschungsgemeinschaft and the open access publication funds of bielefeld university.
