BACKGROUND
genome browsers are necessary genomics tools as they enable visualization of multiple data simultaneously at a specific genomic locus. recently, massive amounts of data have been produced from high-throughput microarray and next-generation sequencing  platforms. for example, the more commonly used ngs platforms  can produce gigabases of data per run  <cit> . traditionally, the data generated by microarrays and ngs have been visualized at the candidate gene level using the ucsc genome browser  <cit> . the ucsc genome browser is currently the most commonly used tool and much public data can be found in their databases. further, one’s data can be uploaded to examine it against these public datasets. however, there are limitations to the ucsc genome browser, some of which are inherent in its web-based application, such as the length of time to process large files .

the recently developed genome visualization tool, zenbu  <cit> , integrates transcript annotation with sequence analysis functions such as peak calling for chip-seq and cage data, and normalization and quality filtering. however, zenbu does not display individual raw reads, which is a valuable feature for biologists that are interested in splice variants. on the other hand, igv  <cit>  can display individual reads and all mapping attributes such as snps, indels and customized bed and wiggle tracks, which is a very useful feature for biologists that enables them to simultaneously check multiple customized tracks in the same genomic region.

thus, we have created rnaseqbrowser which is a stand-alone tool that accepts the ucsc genome browser bed and overlaid wiggle files  <cit> , and was created using the platform independent java computer language. further, overlaying multiple wiggle data in one track is a much simpler process in rnaseqbrowser compared to the ucsc genome browser and other strand-specific genome browsers such as igv  <cit> , and savant  <cit> .

igv is a useful and arguably the most widely used stand-alone genome browser. thus, rnaseqbrowser has been designed to add more functionalities such as predicting secondary dna/rna structures using the vienna algorithm  <cit> . furthermore, similar to the tablet genome browser  <cit> , the memory and cpu time consumption is displayed in the main window.

implementation
currently, most genome visualization tools  <cit>  are modeled off the ucsc genome browser  <cit> . a features comparison of current genome browsers is listed in table  <dig>  these genome visualization tools need three types of information:  general genomic data such as the genome sequence and gene annotation.  initial setting information such as visualization screen size and which species is displayed in the view.  custom track information such as the wiggle file showing the coverage of sequencing data, or the bed file showing the genomic region of interest. genome sequence data is very big, therefore, in rnaseqbrowser, it is kept in a zipped format, and while gene annotation is in text format. rnaseqbrowser has two tabs: “genome browser” and “track information” tabs . the initial setting and track information can be added/deleted/modified in the track information tab.table  <dig> 
features comparison of current genome browsers



track type
tablet
[
9
]
igb
[
10
]
igv
[
4
]
savant
[
11
]
genomeview
[
12
]
ucsc genome browser
[
13
]
zenbu
[
3
]
rnaseqbrowser
s: stand alone.

w: web based.
genome browser view showing the  wiggle track,  snp track,  indel track,  individual reads track, and  pop-up window for the individual reads. all tracks have mouse over display functionality that shows detailed information such as transcript name, indels’ sequences, snp p-value and reads’ information.



genome browser
rnaseqbrowser’s genome browser comprises a reference transcriptome track and other custom tracks for the display of wiggle, bed, indel and snp data . wiggle plots for transcripts that are expressed from either the positive or negative transcript strand are displayed above  or below  the central line . multiple wiggle plots can also be overlaid in one custom wiggle track. the advantage of overlaying multiple wiggle tracks is that it enables easy comparison of multiple datasets.

snps are called using the varscan <dig> algorithm  <cit>  based on the “md” attribute in bam files. snps are represented as a colored line , and the proportion of each allele that is expressed and the p-value can be shown by mousing over the snp line . the snp calling uses the default varscan <dig> parameters, although this can be modified by the user in the track information tab . indels are represented by a red  or blue  line and the inserted or deleted sequence can also be viewed by mousing over the indel line . insertion information is obtained from the cigar string of the bam file, and the deletion information is from both the cigar string and the deleted sequence in the “md” attribute  <cit> . rnaseqbrowser can also display secondary dna/rna structure by clicking on the dna or rna button, respectively.

the individual reads track is a valuable track in rnaseqbrowser as it details the read strand, any mismatches, split reads, and paired reads for each mapped read . a limited number of individual reads are embedded in the main browser window, but all reads can be viewed using the scrollbar to the left of the track. read information such as id, mapping location and read mate location can be viewed by mousing over each read. an optional popup window is also available to view all reads in one window figure  <dig> . this window can be disabled by selecting the ‘hide’ option when adding bam read tracks, or by editing the xml file in the track information tab.

multiple exact read pairs are aggregated into one read pair, and the thickness of these read pairs represents how many reads are represented and the number of the exact same reads can be found in mousing over display. all reads or paired reads above the central line are from a positive strand transcript, and reads below the central line are from a negative strand transcript. the red  and blue  arrows represent the direction of the read. paired reads are connected by a green line, with dashed lines representing a split read. properly mapped reads are indicated by arrows pointing towards each other. paired reads are plotted on the same level in the browser. rnaseqbrowser can also save the displayed genomic view in either eps, pdf or svg format using the ‘save button’.

track information
the xml format is employed in rnaseqbrowser to describe track files . each track -- which contains the data file name and other information -- is enclosed by < track_xxx > and </track_xxx>. tracks can be added/edited in the xml text box after clicking the “xml edit” button. alternatively, users that are not familiar with the xml format can select “add track” or “track deletion” from the pull down menu button to add or delete tracks, respectively. track changes are saved by simply clicking the refresh button which will also update the genome browser display.figure  <dig> 
customize tracks. xml is used to change all configurations and track display.



rnaseqbrowser accepts many different file formats to output different visualization tracks . furthermore, visualization tracks such as wiggle plots can be generated using different input file formats. the track types and their corresponding input file types are as follows:reference track: data can be downloaded from the ucsc table . the default reference transcriptome track in rnaseqbrowser is gencode v <dig>  a user can add or change transcript track to ensembl or aceview annotations for the user preference. a reference transcriptome track, as its name suggests, is necessary to query a gene from the rnaseqbrowser interface in order to examine expression data that are input from bed, wiggle, or bam files. hence, reference track is considered as housekeeping track.

bed tracks: rnaseqbrowser accepts ucsc genome browser bed formats of  <dig>   <dig> and  <dig> columns. bed tracks are displayed as per the ucsc genome browser. the reference track is a bed track with  <dig> columns.

wiggle tracks: rnaseqbrowser accepts ucsc wiggle files using the standard four column format: chromosome name, start, end, and value. the value can be positive or negative to indicate the strand of the rna. display of wiggle tracks using ucsc genome browser files can be input using the “ucsc wiggle” option in the pull-down menu. rnaseqbrowser also accepts bam files for direct and dynamic output of expression data into wiggle tracks. however, it is necessary for bam files to be indexed  in order to maximize interface response from user queries. the bam oriented tracks are generated from bam files without the need for any intermediate files such as bedgraph . display of wiggle tracks using sorted bam files can be input using the “bam wiggle” option in the pull-down menu. implementing an overlay of multiple wiggle tracks in the ucsc genome browser within one track is a very involved process. thus, rnaseqbrowser provides this functionality by simply inputting multiple ucsc wiggle or bam files for an overlaid one track display in the genome browser.

snp: rnaseqbrowser uses bam files to determine snps and thus, does not require any intermediate files such as vcf , which is usually generated by snp calling algorithms such as gatk  <cit> , to display snp tracks. since rnaseqbrowser intuitively shows the mismatch nucleotide to the reference genome, the snp calling here adapted the varscan  <cit>  strategy. a position to make a call, the following criteria have to be satisfied:  minimum read depth minimum number of reads with variant allele  minimum variant allele frequency  minimum base quality  max p value. these five parameters can be changed by the user in the “track information” tab in the interface. the snp information is shown when mouse moving over the snp line ).

indel: rnaseqbrowser uses bam files to determine indels. the indel track shows insertions  and deletions  from the rnaseq data ).

individual reads track: rnaseqbrowser uses bam files to output the individual reads track. in the genome browser, the reads track has a scrollbar on the left side for a user to visualize all reads in the chromosome range. the information of a read, including read id, read mapping location and mate chromosome location if it is pe, can be seen when mouse moving over on it. a popup window figure  <dig>  for each read track is optionally provided for close study of read track.



speed is one of the main issues for any genome browser tool. consequently, bam sequencing data has to be indexed before it is input into rnaseqbrowser. for reference, bed and ucsc wiggle files, rnaseqbrowser indexes all data files when first input. we used the most effective genome indexing strategy, tabix  <cit> , which results in an almost instantaneous retrieval of chromosome regions. in addition, the genome browser images are generated dynamically according to the genomic location, and then pasted onto the panel. this method results in much faster panel scrolling when compared with drawing figures directly onto a panel. finally, every track corresponds to one image in the genome browser window for relocating tracks. therefore, rnaseqbrowser only needs to replace images according to the tracks’ replacement without redrawing every image. however, visualizing large locus ranges can cause some display delays due to accessing of large amounts of genomic data.

to show the memory usage and cpu time consumed, on the main window title, the current used memory/total available memory and escaped time for the last query are appended. compared to other genome tools such as tablet and igv, rnaseqbrowser used more memory and cpu time because rnaseqbrowser keeps snp, indel and coverage information dynamically calculated and is kept to save time for coming queries that are close to current query. another reason is that rnaseqbrowser plots all paired reads at the same level in the canvas. to show 5 m reads, rnaseqbrowser takes about 500 m memory and 30 seconds cpu for normal pc.

as second generation sequencing projects increase sequencing depth, the window height required for plotting raw sequence reads rapidly increases. this results in huge memory requirements to store the information on the canvas, and long processing time to calculate read positions on the canvas. our approach considers that large numbers of reads within a locus are likely to have the exact sequence reads. thus, unlike igv  <cit> , rnaseqbrowser aggregates these exact reads into one, resulting in much less memory requirement and cpu processing time compared to igv.

RESULTS
detecting chimeric transcripts
split reads represent rna splicing that is distinct from the continuous dna sequence. thus, rnaseqbrowser can assist users to find chimeric transcripts and novel introns. figure  <dig> shows a klk4-klkp <dig> chimeric transcript, whereby the third klk <dig> exon and the fourth klkp <dig> exon are spliced together. this chimeric transcript is supported by the large number of reads that are split between chr19: 51391131– <dig>  this chimeric transcript has also been reported  <cit> .figure  <dig> 
chimeric transcripts between klk <dig> and klkp <dig> 




detecting and quantifying novel isoforms
one of the limitations of wiggle plots is they are unable to identify novel splice sites for alternative transcripts. although current rnaseq reads are not long enough to identify the whole transcript for most genes, rnaseqbrowser can identify splice-sites by displaying individual split reads at these splice junctions. figure  <dig> shows a novel isoform for ltbp <dig> in prostate cancer cells . the individual reads window demonstrates that one third of the reads at this locus skip the two adjacent exons .figure  <dig> 
isoform identification from split reads.




overlaid wiggles for differential expression analyses
wiggles represent gene expression at genomic loci. therefore, it is useful to have a genome browser that can easily overlay multiple wiggle tracks from different conditions in the one track. this is highlighted in figure  <dig>  which shows the differential expression of the cirbp gene  and transcripts on the opposite strand  between mock  and androgen  treated lncap cells. overlaid wiggle data for each treatment are displayed as brown wiggle plots on both the plus and minus strand. all wiggles have the same scale, so it will enable users to intuitively identify differential expression.figure  <dig> 
overlaid wiggles to show the differential expression.




CONCLUSIONS
in this paper, we introduce a strand specific rnaseq-oriented genome browser . rnaseqbrowser maintains the main functions of the ucsc genome browser , as well as adding four new track types . coverage tracks  and individual reads tracks have similar function to that of igv, but the wiggle file in rnaseqbrowser can overlay multiple wiggle tracks into one track. the display of these new track types are all dynamically generated from bam files without the need for any intermediate files. thus, rnaseqbrowser should be easy to install and use for bioinformatic novices. in fact, the whole integration and use of rnaseqbrowser functionalities, such as the uploading of custom tracks using the graphics user interface, was designed to be user-friendly enough for general biologists to use. rnaseqbrowser’s individual reads track is also a useful feature for interrogating transcript structures, particulary for chimaeric transcripts and alternative exon usages. further, data files that are commonly used in the ucsc genome browser are compatible with rnaseqbrowser. finally, rna/dna secondary structures for genomic regions can be dynamically generated in a pop up window, extending the functionality of rnaseqbrowser over other useful strand-specific stand-alone genome browsers such as igv.

availability and requirements
project name: rnaseqbrowser.

project web page:http://www.australianprostatecentre.org/research/software/rnaseqbrowser.

operating system: windows, linux, mac os.

programming language: java.

other requirements: jdk.

license: gnu general public license.

any restrictions to use by non-academics: none.

additional file
additional file 1: 
rnaseqbrowser manual.




competing interests

the authors declare that they have no competing interests.

authors’ contributions

ja developed the software, ja, jl, dlaw, as, cw, gt, mll and ccn planned the development. jl, dlaw, as, cw, gt and mll tested the tool. ja wrote the article. all authors read and approved the final manuscript.

