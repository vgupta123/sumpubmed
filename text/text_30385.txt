BACKGROUND
reproducibility of results is a basic requirement for all scientific endeavors. this is not only true for experiments in the wet lab, but also for simulations of computational biology models  <cit> . reproducibility of simulations  saves time in modeling and simulation projects. the minimum information about a simulation experiment  is a reporting guideline describing the minimal set of information that must be provided to make the description of a simulation experiment available to others. it includes the list of models to use and their modifications, all the simulation procedures to apply and in which order, the processing of the raw numerical results, and the description of the final output. miase is part of mibbi  <cit> , a project aiming at federating minimum information guidelines  in the life sciences. mis are standards that specify which information should be provided as a minimum to ensure that published results of a given type can be understood, reused, and reproduced. mi standards focus on the information to be provided, but do not specify under which form it must be provided.

different data formats have been developed to support the encoding of computational models of biological systems. such model representation formats include, for example, sbml  <cit> , cellml  <cit>  and neuroml  <cit> . however, while these formats are widely accepted and used to describe model structure, they do not cover the description of simulation, or analyses performed with the models. to address this need, we created the simulation experiment description markup language , an xml-based format for the encoding of simulation experiments performed on a set of computational models. here, we describe sed-ml and its development process as a community project in detail.

RESULTS
sed-ml encodes the description of simulation experiments in xml, in an exchangeable, reusable manner. figure  <dig> shows how sed-ml could fit into a modeler's simulation workflow: ideally, model authors will provide sed-ml files together with their publications, describing how to reproduce the presented simulation results. end-users will then be able to download models together with applicable simulation setups, enabling them to directly run the simulation in a simulation software. end-users might in addition share their own simulation experiment descriptions by exporting sed-ml from their simulation tool.

sed-ml is built of five main descriptive elements:  the models used in the experiment;  the simulation algorithms and their configurations;  the combination of algorithm and model into a numerical experiment;  post-processing of results;  and output of results. the relations between these elements are illustrated in figure  <dig> 

 model elements
define the identity and location of the model to be simulated and specify the model's native encoding format. the location is to be given as a uniform resource identifier , which enables software interpreting sed-ml to retrieve the model. in case of a relative uri, the base is the location of the referring sed-ml file. to share model and simulation descriptions together, we advise the use of the sed-ml archive format, described in the specification. to link the sed-ml file to remote model descriptions, we recommend using persistent, consistent and accessible model resources. persistent model resources include, for instance, repositories or databases having a miriam uri  <cit> . we have restricted sed-ml to model encodings in xml-based languages . in order to improve interoperability, the particular language a model is encoded in should be specified using one of the predefined sed-ml language uniform resource name ; the list is available from the sed-ml website. using urns, one can specify a language precisely  or generically "). further languages can be registered via the sed-ml website.

in addition to defining the source model's location and encoding, sed-ml model elements can also list changes to be applied to a model before simulation. such changes could be altering attribute values  or changing the model structure. attribute values may undergo a simple substitution or more complex calculation using content mathml  <dig>   <cit> . the model structure may be changed by adding or removing xml elements. xpath  <cit>  expressions identify the target xml to which a change should be applied, thereby identifying model entities required for manipulation in sed-ml.

 simulation elements
define the simulation algorithms to be used in the experiment and their configuration. simulation algorithms are specified using terms from the kinetic simulation algorithm ontology . kisao classifies and characterizes kinetic simulation algorithms, such as those commonly used in systems biology. furthermore, configuration details of the simulation can be described in sed-ml, such as the start and end times, or the number of time points to output. the current implementation supports the description of time course simulation setups. extensions towards further experiment types are already being discussed and will be available in the next versions, including the description of steady-state analyses and nested simulations, such as parameter scans.

 task elements
apply a particular simulation algorithm to a specific model. because simulations and models are described independently, they can be combined in diverse ways. for example, the behavior of one model can be tested with a deterministic and a stochastic simulation algorithm, or a simulation can be applied to different versions of a model with varying parameterization 

 data generator elements
define transformations of raw simulation output generated by a task into the desired numerical form. for example, the simulation output might need normalization or scaling before output. data generators can simply be references to a model variable, but may also be defined through complex mathematical expressions encoded using content mathml. some variables used in an experiment are not explicitly defined in the model, but may be implicitly contained in it and therefore not addressable using xpath. the 'time' variable in sbml is a common example. to allow sed-ml to refer to such variables in a standard way, the notion of implicit variables has been incorporated into sed-ml. these so-called symbols are defined following the idea of miriam urns and using the aforementioned sed-ml urn scheme. to refer to the definition of sbml 'time' from a sed-ml file, for example, the urn is urn:sedml:symbol:time. the list of predefined symbols is available from the sed-ml website. from that source, a mapping of sed-ml symbols onto possibly existing concepts in the individual languages supported by sed-ml is provided.

 output elements
describe how numerical data from the data generators are grouped together. in sed-ml level  <dig> version  <dig>  one can relate two data streams or three data streams, allowing to generate 2d and 3d plots, or provide all the data streams as a set of unrelated arrays.

sed-ml documents can contain zero or more instances of the element types described above. a document describing several simulation experiments in a single file enables multiple simulations on the same set of models; for example, the output obtained from different simulation algorithms could be compared. alternatively, a sed-ml document linking to several models enables the encoding of experiments to determine the influence of changes to models on the simulation output. moreover, a sed-ml document describing several outputs provides the user with different views of the simulation results. future versions of sed-ml may also allow the encoding of chained simulations .

all sed-ml elements can be complemented with human-readable notes written in xhtml, and machinereadable annotations. furthermore annotations enable users to extend sed-ml to cover simulation and analysis procedures that are not  part of the core language. the re-use of other standardized formats inside sed-ml annotations is encouraged; for example, simulation outputs can be annotated with terms from the terminology for the description of dynamics . when annotating sed-ml elements with meta-information, miriam uris  <cit>  should be used. in addition to providing the data type  and the particular data entry inside that data type , the annotation should be related to the annotated element using the standardized http://biomodels.net qualifiers. the list of qualifiers, as well as further information about their usage, is available from http://biomodels.net/qualifiers/.

clearly, the interpretation and execution of sed-ml files will require software support. this is increasingly available, both in the form of application support for end-users wishing to execute simulations encoded in sed-ml, and as software libraries to facilitate the uptake of sed-ml support amongst application developers. to demonstrate the capability of sed-ml to facilitate the exchange of simulation experiment descriptions, we chose several freely available independent applications that support sed-ml: sed-ml web tools , libsedmlscript  and sbsivisual . in sbsivisual, we ran a simulation of a simple circadian clock model  <cit>  to produce oscillating behavior, and exported the simulation configuration in sed-ml format. we then edited this sed-ml file using libsedmlscript to describe how the model can produce chaotic behavior, and uploaded it to sed-ml web tools to execute and display both simulations. the workflow is shown in figure  <dig> 

discussion
in this article, we describe sed-ml, a language to encode procedures performed during computational simulation experiments, and its development process. the first version of sed-ml focuses on encoding uniform time-series experiments, since these are the most widely-used types of numerical model analysis in systems biology. they generally only require a model, and no additional resources such as experimental data.

we expect to extend future versions of sed-ml to include references to experimental data, as the standards and availability of relevant data develop. this is an essential first step towards encoding more complicated experiments such as nested simulations, parameter sweeps, parameter estimation, and sensitivity analysis. the limited scope of sed-ml level  <dig> version  <dig> lays a firm foundation from which to proceed, and any issues arising from its implementation can be dealt with better at an early stage. moreover, an early release of a subset of the anticipated future functionality, with widespread community support, fosters participation and uptake amongst the modeling communities targeted by sed-ml.

as sed-ml evolves to describe more complex simulation experiments it will be increasingly useful to link models, simulation descriptions, and experimental data together in a machine-readable way. sed-ml describes the computational steps needed to reproduce particular results of a computational simulation, but it does not encode the simulation results themselves. the latter could be achieved, for instance, by the numerical markup language . numl initially had been part of the systems biology result markup language , a format to link a model with simulated and experimental datasets. sbrml used a free text 'software' element to define the software tool, version and algorithm used to generate results. in addition, it will now provide the possibility to point towards a sed-ml file from the sbrml 'method' element. both sbrml and sed-ml will use numl to store lists of numbers, either results or datasets.

sed-ml is agnostic about the underlying model representation formats and the software tool that gave rise to the experiment. the model variables that a sed-ml model needs to be aware of are addressed directly by xpath. sed-ml can thus encode simulation experiments involving models in different formats. currently sed-ml is restricted to models encoded in xml-based formats. however, we envision that miase-compliant models may not always be xml-based and sed-ml should endeavor to address those formats in the future. whilst many applications are tied to a particular modeling language, the increasing provision of simulation tools as web services  <cit>  would enable a computational workflow to execute such a sed-ml description. the goals of sed-ml closely align with those of the earlier rdf-based cellml simulation and graphing metadata specifications  <cit>  and in the interests of developing a common standard, development of those metadata specifications has been migrated to sed-ml.

while the contributors to the development of the language are primarily from the systems biology community, there is no reason why sed-ml could not be used in other domains that use computational simulation, such as environmental or agricultural modeling, neuroscience or pharmacometrics. various communities, working on biological model representations, have already committed to the use and support of sed-ml, including sbml, cellml, and the virtual cell. promotion of sed-ml in other realms of science and model representation communities  is an ongoing focus. some of these communities have implemented software support for sed-ml in different tools, including sed-ml validators and a sed-ml visual editor. an up-to-date list is available at the sed-ml website.

the model changes specified in a sed-ml file result in implicit new models. these new models are only instantiated by the simulation environment interpreting the sed-ml file. this important feature of sed-ml allows the exploration of many different model structures to be stored in a compact way. other methods have been proposed in the past, such as xml diff and patch  <cit> . this allows not only to change the parametrization of a model by changing the value of an xml attribute, but also to change the structure of the model by adding or removing xml construct. if a user then decides that the result of such changes is a new model, he may choose not to export a simulation description with that set of changes, but to store the modified version as a new model and use it as such in the simulation description. sed-ml is intended to be used by simulation software, as an export/import format. therefore, the changes that are applicable to a model have to be specifiable within the software tool. as such, the software is responsible for only allowing valid model updates - and also for correctly translating them into sed-ml concepts. sed-ml itself does not restrict the changes that can be applied to the models mentioned in a sed-ml file.

a number of software libraries have already been made available in c++, java and .net. we briefly describe a few of them in the following paragraphs.

libsedml http://libsedml.sf.net/ is a set of .net libraries for supporting sed-ml. the core library libsedml supports reading, validating and writing of sed-ml descriptions, along with all necessary utility functions for resolving models and xpath expressions. two additional libraries are included: libsedml-runner, which allows to schedule and execute simulation experiments encoded in sed-ml files using either roadrunner  or a variety of simulators exposed through the systems biology workbench , such as ibiosim  <cit>  and copasi  <cit> . a third library, libsedmlscript, provides a script-based language for defining sed-ml experiments.

jlibsedml  is a java library for creating, manipulating, validating and working with sed-ml documents. it provides support for retrieval and pre-processing of models, by application of xpath expressions, and also post-processing of raw simulation results as specified by sed-ml datagenerator elements. the jlibsedml application programming interface  follows a similar organization to that of libsbml  <cit> , a successful and popular library for manipulation of sbml documents.

spros  is an api described in interface definition language  for creating, reading and manipulating sed-ml documents, and so can be used by multiple software packages. the cellml api  <cit>  provides an implementation of spros. future versions of spros will also provide support for running simulations described in sed-ml and involving cellml models .

we see an important role for sed-ml in the publication workflow, and in the enrichment it can bring to manuscripts containing mathematical models. many journals currently require that models described in a manuscript be made available in electronic form, often in sbml, but software-specific formats are also accepted. although reviewers would ideally test these models during the review process, this is often not done, perhaps due to time pressure or unfamiliarity with modeling software. as a consequence, many figures that show simulation results cannot be reproduced by the models linked to the manuscript, resulting in a labor-intensive curation step for model repositories, such as biomodels database  <cit>  and jws online model repository  <cit> . to aid in the reviewing process and prevent discrepancies between manuscript and model, jws online, to give one example, has set up a model reviewing workflow with a number of journals. the workflow consists of an initial check by the curators to reproduce simulations in a submitted manuscript. sed-ml will make this workflow significantly easier. ideally, modelers would provide sed-ml scripts with their manuscript submission, these scripts can be run directly by the curator and make the curation job much easier. if the sed-ml scripts are not provided upon model submission they are generated by the curator and made available to the manuscript reviewer. the script loads the respective model and returns the model simulation. a sed-ml script can be linked to each simulation figure in the manuscript. this publication workflow is shown in figure  <dig> 

sed-ml level  <dig> version  <dig> provides a foundation for storing simulation experiment descriptions. it is designed to be easily extensible through the definition of further simulation  types. the community is already discussing several such extensions, and in particular to cover nested simulation experiments  and steady state experiments. in addition to new simulation types, another important extension is the ability to consume experimental data and directly address previously-performed simulation results. this will open the door to further analyses such as parameter fitting and optimization tasks. eventually, this will make sed-ml the format of choice for a compact but comprehensive description of simulation experiments, allowing for the seamless exchange of model, experimental data and simulation results between software tools. we also are hopeful that sed-ml will be used by taverna-based workflows such as those presented in  <cit> .

CONCLUSIONS
reproducibility of simulation procedures is a basic requirement when working with computational biology models. sed-ml provides structures to describe simulation procedures and allows to reproduce them. the provision of a sed-ml file together with publicly available models simplifies the models' reuse, as the simulation settings can be directly loaded into the simulation software. together with sbml and sbgn to describe and represent the models, sed-ml is a new cornerstone of the edifice enabling to completely encode a computational systems biology project. since sed-ml is independent of particular model formats, we believe its use will also play a role in bridging different communities towards integrative systems biology.

