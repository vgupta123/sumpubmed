BACKGROUND
annotating genes with respect to the function of their proteins is essential for understanding the wealth of genomic information now available. a direct approach to identifying gene function is to eliminate or inhibit expression of a gene and observe any alteration in the phenotype. however, analysis of all genes for all possible functions is not feasible at present. statistical methods have therefore been employed for this purpose. one statistical approach attempts to predict the functional class of a gene based on similar sequences for which the function is known. the similarity measures used for this task are produced by computer algorithms that compare the sequence of interest against all other sequences with known function. two commonly used algorithms are blast  <cit>  and fasta  <cit> .

a problem with using such similarity measures is that a gene's function cannot be predicted when no homologous gene of known function exists. to improve the quality and coverage of prediction, other sources of information can be used. for example, king et al.  <cit>  used a variety of protein sequence descriptors, such as residue frequency and the predicted secondary structure . derisi et al.  <cit> , eisen et al.,  <cit>  and brown et al.  <cit>  used gene expression data, on the assumption that similarly expressed genes are likely to have similar function. marcotte et al.  <cit>  recommended an alternative sequence-based approach that regards two genes as similar if they are together in another genome. deng et al.  <cit>  predict the function of genes from their network of physical interactions. to address some of the problems associated with similarity-based methods, such as their non-robustness to variable mutation rates  <cit> , annotation of protein sequences using phylogenetic information has been suggested by some authors . in this approach, the evolutionary history of a specific protein, captured by a phylogenetic tree, is used for annotating that protein  <cit> .

the above-mentioned sources of data can be used separately, or as proposed by several authors , they can be combined within a predictive model. a variety of statistical and machine learning techniques for making such predictions have been used in functional genomics. these include neighbourhood-count methods  <cit> , support vector machines  <cit> , and markov random fields  <cit> . a common feature of these models is that they treat classes as unrelated entities without any specific structure.

the assumption of unrelated classes is not always realistic. as argued by rison et al.  <cit> , in order to understand the overall mechanism of the whole genome, the functional classes of genes need to be organized according to the biological processes they perform. for this purpose, many functional classification schemes have been proposed for gene products. the first such scheme was recommended by riley  <cit>  to catalogue the proteins of escherichia coli. since then, there have been many attempts to provide a standardized functional annotation scheme with terms that are not limited to certain types of proteins or to specific species. these schemes usually have a hierarchical structure, which starts with very general classes and becomes more specific in lower levels of the hierarchy. in some classification hierarchies, such as the enzyme commission  scheme  <cit> , levels have semantic values  <cit> . for example, the first level of the ec scheme represents the major activities of enzyme like "transferaces" or "hydrolases". in some other schemes, like the ones considered here, the levels do not have any uniform meaning. instead, each division is specific to the parent nodes. for instance, if the parent includes "metabolism" functions, the child nodes could be the metabolism of "large" or "small" molecules. rison et al.  <cit>  surveyed a number of these structures and compared them with respect to their resolution , depth  and breadth .

all these hierarchies provide additional information that can be incorporated into the classification model. the importance of using the hierarchy in classification models has been emphasized by many authors . one approach for modelling hierarchical classes is to decompose the classification model into nested models, one for each node of the hierarchy. goodman  <cit>  showed that using nested models can significantly reduce the training time of maximum entropy-based language models and results in slightly lower perplexities. he illustrated his approach using a word labelling problem, and recommended that instead of predicting words directly, we first predict the class to which the word belongs, and then predict the word itself. weigend et al.  <cit>  also used a two-level hierarchical model for document classification. they evaluated their model on the reuters- <dig> corpus and showed significant improvement, especially for rare classes. for text classification, mccallum et al.  <cit>  proposed a hierarchical naive bayes model that smoothes parameter estimates of a child node by shrinking toward its parents in order to obtain more robust parameter estimates. more recently, new hierarchical classification models based on large margin principles, specifically support vector machines , have been proposed  <cit> . dekel et al.  <cit>  introduced a large margin hierarchical classification model that uses the sum of parameters along the tree for classifying cases to the end nodes. these parameters are estimated based on a set of classifiers that assign cases to the intermediate nodes. cai and hoffmann  <cit>  suggested a similar approach based on the generalization of multiclass svm.

many approaches to using the hierarchy of gene functions have been proposed. eisner et al.  <cit>  build multiple binary classifiers with training sets modified according to gene ontology . for each classifier associated with a node, they regard a gene as a positive example if it belongs to that node, and as a negative example if it does not belong to the node, or to the node's ancestors and descendants.

barutcuoglu et al.  <cit>  also use a set of independent classifiers, whose predictions are combined using a bayes network defined based on the go hierarchy. in the methods recommended by both  <cit>  and  <cit> , the individual classifiers are built independently. although the classifiers are modified to become consistent, it is more natural to model classes simultaneously. many authors have shown that learning a set of related tasks at the same time will improve the performance of models . king et al.  <cit>  attempted to use the additional information from the hierarchical structure of gene functional classes by simply using different decision tree models for each level of the hierarchy. clare and king  <cit>  investigated a modified decision tree model, in which assignment of a functional class to a node in the decision tree implies membership of all its parent classes. they evaluated this method based on saccharomyces cerevisiae data and found that the modified version is sometimes better than the non-hierarchical model and sometimes worse. blockeel et al.  <cit>  suggested an alternative modification of decision trees for hierarchical classification models. their model uses a distance-based measure, where distances are derived from the hierarchy. struyf et al.  <cit>  followed the same idea but advocated a different distance measure, which is easier to interpret and is guaranteed to be positive. they evaluated their approach based on different datasets available for saccharomyces cerevisiae, and showed that their model has better precision than the hierarchical c <dig>  model proposed by  <cit> .

in a previous paper  <cit> , we introduced an alternative bayesian framework for modelling hierarchical classes. this method, henceforth called cormnl, uses a bayesian form of the multinomial logit model , with a prior that introduces correlations between the parameters for classes that are nearby in the tree. we also discussed an alternative hierarchical model that uses the hierarchy to define a set of nested multinomial logit models, which we refer to as treemnl. in this paper, we apply these methods  to the gene function classification problem.

RESULTS
we used our bayesian mnl, treemnl and cormnl models to predict the functional class of open reading frames  from the e. coli genome. e. coli is a good organism for testing our method since many of its gene functions have been identified through direct experiments. we used the pre-processed data provided by  <cit> . this dataset contains  <dig> orfs identified by  <cit> . only  <dig> of these orfs, for which the function was known in  <dig>  are used in our analysis. the functional hierarchy for these proteins is provided by  <cit> . this hierarchy has three levels, with the most general classes at level  <dig> and the most specific classes at level  <dig>  for example, lipoate-protein ligase a  belongs to class 'macromolecule metabolism' at level  <dig>  to class 'macromolecule synthesis, modification' at level  <dig>  and to class 'lipoprotein' at level  <dig>  after excluding categories  <dig> and  <dig> at level  <dig>  the data we used had  <dig> level  <dig> categories,  <dig> level  <dig> categories, and  <dig> level  <dig> categories.

since  <dig> many additional gene functions have been determined by direct experiment . however, we use the same dataset as  <cit> , with the same split of data into the training set  and test set , in order to produce comparable results. king et al.  <cit>  further divided the training set into two subsets and used one subset as validation data to select a subset of rules from those produced by the c <dig> algorithm based on the other part of the training set. our bayesian methods do not require a validation set, so we did not subdivided the training set.

the covariates are based on three different sources of information: phylogenic descriptors, sequence based attributes, and predicted secondary structure. following  <cit> , we refer to these three sources of data as sim, seq and str respectively. attributes in seq are largely based on composition of residues  and of pairs of residues  in a sequence. there are  <dig> such attributes . information in sim  and str  is derived based on a psi-blast  search with parameters e =  <dig>  h =  <dig> , j =  <dig> from nrprot 05/10/ <dig> database. king et al.  <cit>  used the inductive logic programming  algorithm known as warmr  <cit>  to produce binary attributes based on the identified frequent patterns  in sim and str data. the rules created by warmr and their corresponding attributes can be found at  <cit> . there are  <dig> such attributes generated for sim and  <dig> attributes for str. as described below in the methods section, we reduced the dimensionality for each dataset using principal component analysis . we used  <dig> components for seq,  <dig> components for str, and  <dig> components for sim.

to provide a baseline for interpreting the results, for each task we present the performance of a model that ignores the covariates and simply assigns genes to the most common category at the given level in the training set.

as we can see in table  <dig>  cormnl outperforms all other models. for the seq dataset, mnl performs better than treemnl. compared to mnl, the cormnl model achieves a slightly better accuracy at level  <dig> and more marked improvements at level  <dig> and level  <dig>  for the str dataset, both hierarchical models  outperform the non-hierarchical mnl. for this dataset, cormnl has a slightly better performance than treemnl. for the sim dataset, the advantage of using the cormnl model is more apparent in the first and second levels.

for analysing these datasets, king et al.  <cit>  used a decision tree model based on the c <dig> algorithm. they selected sets of rules that had an accuracy of at least 50% with the coverage of at least two correct examples in the validation set. in table  <dig>  we compare the accuracy of our models to those of  <cit> . in order to make the results comparable, we used the same coverage values as they used. coverage is defined as the percentage of test cases for which we make a confident prediction. in a decision tree model, these test cases can be chosen by selecting rules that lead to a specific class with high confidence. for our models, we base confidence on posterior predictive probability, which is defined as the expected probability of each class with regard to the posterior distribution of model parameters. we assign each test case to a class with the maximum posterior predictive probability. the higher this probability, the more confident we are in classifying the case. we rank the test cases based on how high the highest probability is, and for a coverage of g, we classify only the top g percent of genes. in table  <dig>  the coverage values are given in parenthesis. all three of our models discussed here substantially outperform the decision tree model. overall, cormnl has better performance than mnl and treemnl.

in an attempt to improve predictive accuracy, king et al.  <cit>  combined the three datasets . although one would expect to obtain better predictions by combining several sources of information, their results showed no additional benefit compared to using the sim dataset alone. we also tried combining datasets in order to obtain better results. initially, we used the principal components which we found individually for each dataset, and kept the number of covariates contributed from each data source the same as before. principal components from each dataset were scaled so that the standard deviation of the first principal component was  <dig>  we did this to make the scale of variables from different data sources comparable while preserving the relative importance of principal components within a dataset.

using the combined dataset, all our models provided better predictions, although the improvement was only marginal for some predictions. we speculated that some of the covariates may become redundant after combining the data . one may often obtain better results by removing redundancy and reducing the number of covariates. to examine this idea, we kept the number of principal components from sim as before  but only used the first  <dig> principal components from seq and str. the total number of covariates was therefore  <dig>  reducing the number of covariates from seq and str may also prevent them from overwhelming the covariates from sim, which is the most useful single source. this strategy led to even higher accuracy rates compared to when we used the sim dataset alone. the results are shown in table  <dig> . it is worth noting that when seq and str are used alone, using  <dig> principal components  results in lower accuracy .

to improve the models even further, we tried an alternative strategy in which different sources of data are combined such that their relative weights are automatically adjusted. as we can see in table  <dig> , this strategy, which is described in more detail in the methodology section, resulted in further improvements in the performance of the models. we also examined this approach with larger numbers of covariates. we found that when we increased the number of principal components for seq and str back to the original  <dig>  the accuracy of predictions mostly remained the same, though a few dropped slightly.

in practice, we might be most interested in genes whose function can be predicted with high confidence. there is a trade-off between predictive accuracy and the percentage of the genes we select for prediction . table  <dig> shows this trade-off for results on the test set from the cormnl model applied to the combined dataset. in this table, the accuracy rates for different coverage values are provided. as we can see, our model can almost perfectly classify 10% of the genes in the test set.

finally, we trained the cormnl model on all orfs with known function to annotate the function of unknown orfs. many of these orfs, whose function was previously unknown, have been recently annotated using direct biological experiments. however, since the functional ontology of e. coli genome  has changed over time, it is not possible to compare our results directly. king et al.  <cit>  also faced this problem. they evaluated their predictions manually for a subset of orfs. we present our predictions for the same set of orfs [see additional file 1
]. we use the multifun classification system  <cit>  to obtain the function associated with each orf through direct experiments.

for many of these orfs, our prediction is closely related to the confirmed function. for example, we classified yojh  hierarchically as "metabolism of small molecules" at the first level, "degradation of small molecules" at the second level, and "carbon compounds" at the third level. through a direct experiment, the function of this gene was classified as "metabolism", "energy metabolism ", and "tricarboxylic acid cycle", at levels  <dig>   <dig>  and  <dig> respectively. in some cases, such as ybho , there is an exact match between our prediction  and the function provided by multifun  biosynthesis : phospholipid). for some other cases, although our prediction does not exactly match the functions provided by multifun classification system, the results are comparable up to the first or second level of the hierarchy. for example, we predicted that yded  is "transport/binding proteins" and belongs to "abc superfamily". direct experiment also show that in fact this gene does belongs to the "transport" group, however, it is more specifically in the "major facilitator superfamily"  class instead of abc. the comparison of our predictions with multifun classification system is not always as straightforward as the examples provided above. for instance, we predicted bfd  to be in the "metabolism of small molecules : energy metabolism, carbon : anaerobic respiration" categories. the hierarchical function provided by multifun is "cell processes : adaptation to stress : fe aquisition". at the first glance, these two seem to be unrelated. however, it is known that oxygen induces stress and results in enormous changes in e. coli  <cit> . e. coli adapts to this environmental change by switching from aerobic respiration  to anaerobic respiration. more detailed examination of these predictions will be needed to definitively evaluate performance.

our predictions for orfs of unknown function  are available online at  <cit> . in this website, we also provide the combined dataset for e. coli, and the matlab programs for mnl, treemnl and cormnl along with their respective outputs for the test set.

CONCLUSIONS
in this paper, we investigated the use of hierarchical classification schemes to perform functional annotation of genes. if the hierarchy provides any information regarding the structure of gene function, we would expect this additional information to lead to better prediction of classes. to examine this idea, we compared three bayesian models: a non-hierarchical mnl model, a hierarchical model based on nested mnl, referred to as treemnl, and our new cormnl model, which is a form of the multinomial logit model with a prior that introduces correlations between the parameters of nearby classes. we found cormnl provided better predictions in most cases. moreover, we introduced a new approach for combining different sources of data. in this method, we use separate scale parameters for each data source in order to allow their corresponding coefficients have appropriately different variances. this approach provided better predictions compared to other methods.

while our emphasis in this paper was on the importance of using hierarchical schemes in gene classification, we also showed that even the non-hierarchical bayesian mnl model outperforms previous methods that used the c <dig> algorithm. overall, our results are encouraging for the prospect of accurate gene function annotation, and also illustrate the utility of a bayesian approach with problem-specific priors. for our experiments, we used the pre-processed datasets provided by  <cit> , who used the warmr  <cit>  algorithm to generate binary attributes. it is conceivable that the accuracy of predictions can be further improved by using other data processing methods. similarly, it is possible that a method other than our use of pca might be better for reducing dimensionally before doing classification.

in the e. coli dataset we used here, each orf was assigned to only one function. in the more recent classification system provided by riley's group  <cit> , orfs may belong to more than one class. for such problems, one can modify the likelihood part of the models described here so that if a training case belongs to several classes, its contribution to the likelihood is calculated based on the sum of probabilities of those classes.

the functional hierarchies considered here are simple tree-like structures. there are other hierarchical structures that are more complex than a tree. for example, one of the most commonly used gene annotation schemes, known as gene ontology , is implemented as a directed acyclic graph . in this structure a node can have more than one parent. our method, as it is, cannot be applied to these problems, but it should be possible to extend the idea of summing coefficients along the path to the class in order to allow for multiple paths.

our approach can also be generalized to problems where the relationship among classes can be described by more than one hierarchical structure. for these problems, different hyperparameters can be used for each hierarchy and predictions can be made by summing the parameters in branches from all these hierarchies.

