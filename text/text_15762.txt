BACKGROUND
the prevalence of computer-aided technologies for modeling large-scale biochemical networks causes a strong demand on visualization tools for intuitive presentation of the complex network structures. the key part of drawing a network is to place nodes in low dimensional  space such that the geometric distances between nodes reflect topological proximities described by the network. for very large complex networks involving many thousands of nodes, drawings may aim at grasping the global features, or macro characteristics, of the whole networks  <cit> , the network details are often not readable. in contrast, a typical biochemical network like a metabolic network has some hundreds of nodes, which needs the visualization to clearly show both the global features  and all individual links. to meet the needs, grid layout methods are developed recently and shown to have advantages in generating compact layouts with biologically comprehensible modules of biochemical networks  <cit> .

a main issue of grid layout methods is the high computational cost, which seriously limits the applications. miyano and co-workers proposed a method termed sweep calculation to speed up layout process  <cit> . biological attributes of nodes as extra input are also used to reduce the search space and yield biologically interesting layouts  <cit> . barsky et al. use similar strategy in their software cerebral in which nodes are placed in predefined layers according to the subcellular localizations. they also use a technique to bundle edges connected to hub nodes and improve visual effect dramatically when high degree nodes are present  <cit> . recently, cerebral is developed further as a new visualization tool for analyzing experimental data in the context of an interaction graph model  <cit> .

extra biological attributes like subcellular localizations can be employed as constraints of node positions and consequently decrease the computational complexity substantially. in certain cases this helps generate high quality layouts  <cit> . nonetheless, the use of such information is confined by several factors: 1) the extra information is often unavailable or incomplete; 2) it is rather artificial to decide how to arrange the layout areas allocated for nodes with different attributes; 3) when the number of nodes with some attribute is large, good placement of these nodes relies merely on the topology. to this end, speeding up node placement without additional constraints remains still an essential problem, which is the first motivation of this work.

as more and more interests are attracted on deep research of network properties, there arises another demand for automatic visualization as an auxiliary analysis tool. available drawing tools for biochemical networks are designed to work in certain network modeling platforms such as cytoscape  <cit> , patika  <cit> , visant  <cit> , cell illustrator  <cit> , and cadlive  <cit> . because these modeling platforms are designed for specific purposes, most network analysis related numerical utilities are not provided. in this respect, a drawing tool accessible within a more versatile numerical software environment will be convenient. for example, integrated in the bioinformatics toolbox of matlab, graphviz http://www.graphviz.org provides researchers a way to visualize networks while making use of powerful numerical analysis functions of matlab. however, the implemented general graph drawing algorithms of graphviz are usually not adequate to produce satisfactory drawings for complex biochemical networks. this is another motivation of this work.

in this paper, we present our solution, luciddraw, for easy and quick visualization of complex biochemical networks. the tool is powered by a new grid layout algorithm and accessible from within matlab.

implementation
the cost function and the weight matrix
a network layout is a configuration of the nodes and edges properly placed on a 2d plane. generally, all nodes are represented as points without regard to their sizes and all edges are drawn as straight lines. under such a drawing convention, a layout is fully described by the nodes' coordinates, denoted by r = , where n is the number of nodes and ri =  the coordinates. because nodes are placed on grid points, all xi and yi are forced to be integers.

to determine the coordinates, we use a widely adopted method that treats nodes as interacting particles, and the layout quality is evaluated by a cost function that is defined as the total interaction energy of all pairs of the nodes with lower costs corresponding to better layouts. following li and kurata  <cit> , we use the cost function given by   

where wij is the interaction weight of nodes i and j, which describes the way nodes interplay. the weights between all node pairs constitute the weight matrix. the term dij is the manhattan distance between nodes i and j. for detailed explanations about the design principles of the cost function, please refer to ref  <cit> .

there are unlimited possibilities to choose detailed weight matrices. a convenient way is to evaluate the weight matrix according to the graph distances . denote lij the graph distance between nodes i and j, we set wij = χ , where χ is some integer functions. by extensive experiments, we found three χ functions are suitable for typical biochemical networks. the corresponding layout styles are called common, compact, and stretched styles . the layout algorithm itself does not confine the weight matrix. even when a predefined weight matrix is chosen, there is still room for users to modify some weights as wish. this provides flexible ways to use the method. for example, if two nodes are known a priori to belong to the same module and therefore hoped to be placed closely, one may add an extra positive value to the corresponding weight. see the results section for an example.

the layout algorithm
the layout algorithm aims to find the best layout by optimizing the cost function, which can be described as follows:

   set r to a random layout

   repeat the following steps for niter times

      generate r' by perturbing r

      locally optimize r'

      if cost<cost, set r = r'

      

   end repeat

   output r as the final result

at beginning, a random layout r is set as the initial state, then the algorithm optimizes r through a neighborhood-test procedure that repeatedly tries to move every single node to its adjacent vacant sites to lower down the cost score. as neighborhood-test proceeds, the layout eventually arrives at such a state that its quality cannot be further improved by moving any single nodes, i.e., the cost function attains a local minimum. to fully optimize r, the layout should be managed to escape from the local minimum. for this reason, the algorithm perturbs the layout by moving each node with a given probability p to a randomly chosen neighboring location. the perturbed layout is then set to the neighborhood-test procedure. when this re-optimization-after-perturbation process repeats sufficiently many times, the layout becomes hopefully satisfactory and the whole computation ends.

an important feature of the algorithm is that it uses a simple global search strategy relies on the perturbation probability p. when p =  <dig>  no node is perturbed, the output layout remains unchanged. when p =  <dig>  all nodes change their positions, the output layout is little related to the input. for 0<p <  <dig>  some parts of the input layout are unchanged, or "memorized". heavy perturbations  lead to significant losses of previous optimization efforts, and consequently the re-optimization will demand relatively high computational expense. in practice, however, the performance is not very sensitive to p; moderate values, say,  <dig> - <dig> , work usually well. in luciddraw, the default value of p is set to  <dig> .

generally, computation speed and layout quality are largely controlled by niter, the number of iterations. a small niter is obviously preferred for computation speed but usually results in relatively low quality of layouts. though layout quality benefits from more iterations, very large niter is usually not necessary because as the optimization proceeds, better layouts are harder and harder to obtain by re-optimization-after-perturbation. to balance effort and gain, the whole layout process should stop when search efficiency becomes very low. in practice, a moderate value of niter =  <dig> is usually enough to generate satisfied layouts.

computational complexity
the accurate complexity of the whole layout process is difficult to estimate analytically. we used a set of example networks to empirically measure the time complexity under the default parameter setting of the algorithm. the results are shown in figure  <dig>  where the fitted curve is quadratic with respect to the number of nodes, i.e., the required time is o.

the graphical user interface
the gui of luciddraw  is developed based on jgraph http://www.jgraph.com/jgraph.html, an open source graph visualization library written in java. with the help of abundant graphical functionalities provided by jgraph, luciddraw supports interactive operations on the network drawings such as moving nodes, zooming in/out, showing/hiding labels or edge arrows. editing functions like redo/undo are also accessible to make luciddraw more user-friendly. to aid easy use of luciddraw in matlab environment, we developed another simple gui  to provide users an intuitive way to manipulate input network data and change detailed parameters of the layout algorithm.

treatment of node labels
node labels are necessary to comprehend network structures shown graphically. to display labels appropriately is not trivial because for drawings of large biochemical networks, room for labels is limited and hence incautious label placement usually causes additional visual complexity. it is usually not satisfied to show all labels simultaneously due to overlaps of labels and nodes. barsky et al.  <cit>  use a greedy method to select as many as possible labels to display without label overlaps, featuring an advantage that more labels are shown at higher zoom levels.

in this work we use three kinds of labels to avoid increasing much visual complexity while making desired node information readable. the first kind is the engraved labels that are shown within the node symbols if the space is large enough. the second kind is the floating labels. a floating label is automatically shown when the mouse pointer is hovering over a node, and disappears when the mouse is moved away. the third kind is the mandatory labels that are statically shown for the right-clicked nodes, staying displayed until the zoom level is changed or the "clear labels" button is pressed.

displaying of engraved labels is dependent on the zoom level. at higher zoom levels, node symbols become larger and more inside space is available to accommodate longer node names, so there are more node names appearing as engraved labels. engraved labels can save space but are confined by the node sizes, which cannot label nodes with long names at relatively low zoom levels. floating labels can make up this deficiency and they do not overlap with other nodes. mandatory labels are useful when several interesting nodes have long names and cannot be simultaneously displayed at current zoom level by engraved or floating labels. please see figure  <dig> for examples of the three kinds of labels.

RESULTS
for maximal computation speed, the layout algorithm was implemented in c++ and compiled into a .mexw <dig> file to work in matlab. the gui for displaying layout results and controlling drawing details were written in java based on the jgraph library. all executables can be used seamlessly in conjunction with matlab with a few auxiliary matlab programs, providing users a convenient way to visually analyze complex networks.

network data and example layouts
the networks used in this work were built from a set of metabolic reactions that are taken from a reconstructed genome-wide metabolic network of p. aeruginosa pao <dig>  <cit> . similar to the method in  <cit> , we converted the set of reactions to a bipartite graph in which metabolites and enzymes are the two classes of nodes. to avoid unnecessary visual complexity caused by a few common molecules, we excluded the currency metabolites such as h2o and co <dig>  due to the space limitation for one-screen figures, we chose  <dig> modules, central metabolism, lipid synthesis, and nucleotide synthesis from the whole network as examples. luciddraw outputs for the network with  <dig> nodes in different layout styles are shown in figures  <dig> . as an illustration to make use of extra biological information, figure  <dig> is drawn with given modular information where the weights are modified to force nodes of the same metabolic pathways to aggregate together.

network analysis with the help of luciddraw
we use a 677-node network of p. aeruginosa pao <dig> model as example to demonstrate the usefulness of luciddraw. the example network consists of  <dig> functional subsystems including central metabolism, lipid synthesis, cell wall/lps synthesis, virulence factor synthesis, trna synthetases, ethanol/pyruvate metabolism, sulfur metabolism. some predicted reactions with subsystem unassigned are also included. the virulence processes of p. aeruginosa are of great importance from the view point of medical applications. in the map  in  <cit> ) drawn manually by the authors who constructed the network, the reactions of the virulence subsystem scattered in separated regions; besides, some related metabolites are represented by two or more graphical symbols, i.e., a metabolite may have several different positions. this brings difficulty to grasp overall characteristics of the relations between virulence processes and other subsystems. obviously, producing a new map by hand with desired properties needs much effort and is practically unfeasible. in such a case, by means of luciddraw, it is easy to generate a drawing to highlight the relations between the focused subsystems. to do so, we add an additional weight to the each pair of reaction nodes if they both belong to the same subsystem. in the resulted layout, the virulence associated nodes are positioned in adjacent locations, as shown in figure  <dig>  the figure intuitively displays that the virulence processes are closely related to "cell wall/lps synthesis", as well as "lipid synthesis" and "sulfur metabolism" subsystems. the observations gained through luciddraw are consistent with previous researches  <cit> . the reason is that the major metabolic precursors in virulence processes such as udp-n-acetyl-d-glucosamine , dtdp-4-dehydro-6-deoxy-l-mannose , and acetyl-acp , are also involved in cell wall/lps synthesis and lipid synthesis.

from figure  <dig>  we can also see close relationships between some unassigned reactions and certain functional subsystems. for example, the reactions fmetdf  and metsr-s <dig>  sit closely to sulfur metabolism subsystem in the layout. the two reactions are tied to sulphur metabolism through l-methionine  which is involved in many processes in the subsystem. this is not apparent without a properly drawn graphical presentation. the intuitive result may provide clues for further investigations to clear the uncertainty in current knowledge.

discussion
a good layout algorithm depends on two factors: a proper cost function and an efficient optimization method. luciddraw adopts a similar cost function as the previous work  <cit>  but a new optimization procedure with much higher efficiency. with the search area of every node reducing drastically, the neighborhood-test method greatly lowers the computational cost. to fully optimize the cost function, the re-optimization-after-perturbation strategy is used to force the layout to escape from current local minimum and search for better layouts. the perturbation strategy, despite its simplicity, achieves rather good performance comparing to other sophisticated heuristics like simulated annealing. the technique was also employed in other discrete global optimization problems  <cit> . together with the neighbourhood-test approach, the technique speeds up the layout process dramatically and makes it possible for luciddraw to serve as an instant visualization tool in the context of a wide range of network analysis tasks. the effect of the optimization strategy is substantial. for a network with  <dig> nodes, our new algorithm takes ~ <dig> sec to generate an acceptable layout; while our previous algorithm  <cit>  needs > <dig> hr cpu time and a large amount  of memory. another available grid layout software, cerebral  <cit> , can produce a layered layout in ~ <dig> min with the prerequisite that all nodes of the entire network are already divided into appropriate groups, and the order of the layers is provided in advance by the user.

for ease of use in case of large networks, luciddraw provides a comprehensive solution to aid users to get node information conveniently through three kinds of labels. as comparison, other network modeling tools have fewer choices to display node labels. for instance, cytoscape  <cit> , visant  <cit> , and yanasquare  <cit>  use two labeling methods ; vanted  <cit>  uses only engraved labels.

in luciddraw, we design more flexible weight matrices and provide three elaborated evaluation schemes of the weight matrix through extensive experiments. compared to previous work implemented for network modeling software, luciddraw also provides flexibility to make customized drawings to aid visual network analysis with the help of the powerful numeric capabilities of matlab.

luciddraw does not depend on predefined module information to produce layouts with nodes belonging to the same modules located closely ). this does not exclude the possibility to use the module data; instead, such data are easy to incorporate through modifying the weights to force nodes to distribute with desired position propensities ).

it should be noted that some network modeling software such as cytoscape  <cit>  and vanted  <cit>  provide grid based visualizations, but the underlying layout methods are obviously different from ours. for comparison, please refer to additional file  <dig>  a remained issue of luciddraw is the edge-node crossings which occur occasionally but indeed confuse the relations between a few nodes. to relieve the problem, miyano and co-workers introduced penalty terms in the cost function  <cit>  at the expense of higher computational complexity. another feasible choice is to use curved edges  <cit> . it should be noticed that a thorough solution of the edge-node crossing problem must take node sizes into account, which is a future direction of this work.

CONCLUSIONS
we present a matlab tool, luciddraw, to meet the needs of convenient visulization of complex biochemical networks. the tool is fully accessible within matlab and capable of drawing typical networks in seconds with appropriately separated modules in a compact space. users can control layout styles, drawing details, as well as extra biological attributes to get sufficiently customized drawings.

availability and requirements
- project name: luciddraw

- project home page: http://bioinf.jiangnan.edu.cn

- operating system : windows 

- programming language: java, c++

- other requirements: matlab  <dig>  , java  <dig> 

- license: free for non-commercial use.

the luciddraw programs and sample data are given in additional file  <dig>  a demonstration video is provided in additional file  <dig>  latest software and more example networks can be found at http://bioinf.jiangnan.edu.cn.

authors' contributions
sh and wl designed the project and developed the programs. jm, gs, and zw took part in design, data collection, and software evaluation. sh and wl wrote the paper. all authors read and approved the final manuscript.

supplementary material
additional file 1
example network drawings by luciddraw and other software. figures in additional file  <dig> are drawings of the same network, yeastglycolysisjdclean which was taken from vanted http://vanted.ipk-gatersleben.de/.

click here for file

 additional file 2
the luciddraw software. the luciddraw.zip package includes the following files: glayoutdll.mexw <dig> ; luciddraw.jar ; jgraph.jar ; luciddraw.m, luciddraw.fig, fastgridlayout.m, glweight.m, read_classid.m, layoutview.m, text_to_adjacencymatrix.m ; pao1_290nodes.txt, pao1_290nodes_class.txt . in matlab, run luciddraw.m.

click here for file

 additional file 3
the luciddraw demo video. double-click luciddrawdemovideo.exe to watch the video.

click here for file

 acknowledgements
we thank the support of state high-tech development program of china .
