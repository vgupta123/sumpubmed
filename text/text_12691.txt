BACKGROUND
high-dimensional problems, those that involve so-called p>n data  <cit> , are of great importance in many areas of computational biology. predicting problems in which the number of features or variables p is much larger than the number of samples or observations n is a statistical challenge. in addition, many bioinformatics data sets contain highly correlated variables with complex interactions, and they may also contain variables that are irrelevant to the prediction. furthermore, data sets may contain data of a mixed type, i.e. categorical  and numerical, not only as predictors but also as outputs or responses.

decision trees are a nonparametric and highly nonlinear method that can be used successfully with that kind of challenging data. furthermore, they are robust to outliers in the input space, invariant to monotone transformations of numerical predictors, and can also handle missing values. thanks to these properties, decision trees have become a very popular tool in bioinformatics and data mining problems in general.

however, the predictive power of decision trees is their achilles heel. a bagging strategy can be considered to improve their individual performance. a random forest  is an ensemble of a large collection of trees  <cit> . there are several types of rfs according to the type of response. if the response is categorical, we refer to rf classification. if the response is continuous, we refer to rf regression. if the responses are right censored survival data, we refer to random survival forests. multivariate rfs refer to rfs with multiple responses  <cit> . rfs with only one response are applied to many different problems in bioinformatics  <cit> . however, the number of studies with multivariate rfs is much smaller  <cit> .

besides good performance, another advantage of rfs is that they require little tuning. another property of rfs that makes them attractive is that they return variable importance measures . these vims can be used to rank variables and identify those which most influence prediction. this favors interpretability. predictors are not usually equally relevant. in fact, often only a few of them have a substantial influence on the response, i.e. the rest of them are irrelevant and could have been excluded from the analysis. it is often useful to learn the contribution or importance of explanatory variables in the response  <cit> .

the most widely used vims for rfs, such as the gini vim , permutation vim  and conditional permutation vim   <cit> , rely on the choice of a performance measure. however, measures of prediction performance are not unique  <cit> . some examples for classification are misclassification cost, brier score, sensitivity and specificity measures , etc., while some examples for regression problems are mean squared error, mean absolute error, etc. in the case of unbalanced data, i.e. data where response class sizes differ considerably, the area under the curve  is suggested by  <cit>  instead of the common error rate. there is no clear appropriate performance measure for survival data  <cit> , less so in the case of multivariate response and even less so if the responses are of different types.

to solve this issue, an approach for selecting variables that depends on the structure of the trees, without depending on performance measures, was proposed by  <cit> . they proposed an algorithm based on the minimal depth  statistic, i.e. based on the idea that variables that tend to split close to the root node should have more importance in prediction. by removing the dependence on performance measures, the arrangement of the trees gains strength, as in the case of splitting rules.

recently, the author has proposed a new alternative importance measure in rfs called intervention in prediction measure   <cit>  in an industrial application. ipm is also based on the structure of the trees, like md. therefore, it is independent of any prediction performance measure. ipm only depends on the forest and tree parameter settings. however, unlike md, ipm is a case-based measure. note also that ipm is expressed as a percentage, which makes it attractive in terms of interpretability. ipm can be used with new observations that were not used in the rf construction, without needing to know the response, unlike other vims. ipm can be defined globally, for each class  and locally. in addition, ipm can easily be computed for any kind of response, including multivariate responses. ipm can be used with any algorithm employed to grow each individual tree, from the classification and regression trees  algorithm developed by  <cit>  to conditional inference trees   <cit> .

the objective of this work is to compare the new ipm with other well-known vims in different contexts, such as a classification problem with variables of different types, another classification problem with correlated predictor variables, and problems with multivariate responses and predictors of different types. several simulation studies were carried out to show the competitiveness of ipm. furthermore, the objective is also to stress the advantages of using ipm in bioinformatics. consequently, the use of ipm is also illustrated in two well-known bioinformatics applications previously employed in other papers . although the majority of the data used here are not p>n, they could be relevant to this kind of scenarios, but this is something to be explored in the future.

methods
random forest
as mentioned previously, trees are a nonlinear regression procedure. trees are grown by binary recursive partitioning. the broad idea behind binary recursive partitioning is to iteratively choose one of the predictors and the binary split in this variable in order to ultimately fit a constant model in each cell of the resulting partition, which constitutes the prediction. two known problems with such models are overfitting and a selection bias towards predictors with many possible splits or missing values  <cit> . to solve these problems,  <cit>  proposed a conditional inference framework  for recursive partitioning, which is also applicable to multivariate response variables, and it will be used with ipm.

as outlined above, trees are a low-bias but high-variance technique, which makes them especially suited for bagging  <cit> . growing an ensemble of trees significantly increases the accuracy. the term random forest was coined by  <cit>  for techniques where random vectors that control the growth of each tree in the ensemble are generated. this randomness comes from randomly choosing a group of mtry  predictors to split on at each node and bootstrapping a sample from the training set. the non-selected cases are called out-of-bag .

here, rfs based on cart  and cit  are considered since the vims reviewed later are based on these. both are implemented in r  <cit> . breimanâ€™s rf algorithm  <cit>  is implemented in the r package randomforest  <cit>  and also in the r package randomforestsrc , while cit-rf can be found in the r package party . multivariate rfs can be computed by the r package randomforestsrc and the r package party, but not by the r package randomforest. in the r package randomforestsrc, for multivariate regression responses, a composite normalized mean-squared error splitting rule is used; for multivariate classification responses, a composite normalized gini index splitting rule is used; and when both regression and classification responses are detected, a multivariate normalized composite split rule of mean-squared error and gini index splitting is invoked.

regardless of the specific rf implementation, vims can be computed, which are a helpful tool for data interpretation and feature selection. vims can be used to obtain a ranking of the predictors according to their association with the response. in the following section, the most used vims are briefly reviewed and our ipm proposal is introduced.

random forest variable importance measures and variable selection procedures
the most popular vims based on rf include gvim, pvim and cpvim. gvim and pvim are derived from cart-rf and can be computed with the r package randomforest  <cit> . pvim can also be derived from cit-rf and obtained with the r package party . cpvim is based on cit-rf, and can be calculated using the r package party. a very popular stepwise procedure for variable selection using pvim is the one proposed by  <cit>  , which is available from the r package varselrf  <cit> . the procedure for variable selection based on the tree-based concept termed md proposed by  <cit>   is available from the r package randomforestsrc . the results of the chosen variables for variable selection methods can be interesting, although the objective of variable selection methods is not really returning the importance of variables, but returning a set of variables that are subject to a certain objective, such as preserving accuracy in  <cit> . the underlying rationale is that the accuracy of prediction will not change if irrelevant predictors are removed, while it drops if relevant ones are removed. table  <dig> gives an overview of the methods.



gvim
gvim is based on the node impurity measure for node splitting. the node impurity is measured by the gini index for classification and by the residual sum of squares for regression. the importance of a variable is defined as the total decrease in node impurities from splitting on the variable, averaged over all trees. it is a global measure for each variable; it is not defined locally or by class . when there are different types of variables, gvim is strongly biased in favor of continuous variables and variables with many categories .

pvim
the importance of variable k is measured by averaging over all trees the decrease in accuracy between the prediction error for the oob data of each tree and the same after permuting that predictor variable.

the pvim derived from cit-rf is referred to as pvim-cit-rf. although cit-rf can fit multivariate responses, pvim cannot be computed .

the pvim derived from cart-rf is referred to as pvim-cart-rf, which is scaled  by default in the randomforest function from the r package randomforest  <cit> . the problems of this scaled measure are explored by  <cit> . according to  <cit> , pvim is often very consistent with gvim. pvim can be computed for each class, and it can also be computed casewise. the local or casewise variable importance is the increase in percent of times a case i is oob and misclassified when the variable k is permuted. this option is available from the r package randomforest  <cit> , but not from the r package party .

cpvim
an alternative version of pvim to correct bias for correlated variables is cpvim, which uses a conditional permutation scheme  <cit> . according to  <cit> , cpvim would be more appropriate if the objective is to identify a set of truly influential predictors without considering the correlated effects. otherwise, pvim would be preferable, as correlations are an inherent mutual property of predictors. in cpvim, the variable importance of a predictor is computed conditionally on the values of other associated/correlated predictor variables, i.e. possible confounders are taken into account, unlike pvim. the concept of confounding is well illustrated with a simple example considered in  <cit>  : a classification problem for assessing fetal health during pregnancy. let y be the response with two possible values . let us consider the following predictors: x
 <dig>  which assesses the quality of ultrasound devices in the hospital, x
 <dig>  which assesses whether the hospital staff are trained to use them and interpret the images and x
 <dig>  which assesses the cleanliness of hospital floors. note that x
 <dig> is related to y and x
 <dig>  which are linked to the hospitalâ€™s quality standards. if x
 <dig> was not taken into account in the analysis, a strong association between y and x
 <dig> would probably be found, i.e. x
 <dig> would act as a confounder. in the multiple regression model, if x
 <dig> was included as predictor in the model, the questionable influence of x
 <dig> would disappear. this is the underlying rationale for cpvim: conditionally on x
 <dig>  x
 <dig> does not have any effect on y.

varselrf
dÃ­az-uriarte and alvarez de andrÃ©s  <cit>  presented a backward elimination procedure using rf for selecting genes from microarray data. this procedure only applies to rf classification. they examine all forests that result from iteratively eliminating a fraction  of the least important predictors used in the previous iteration. they use the unscaled version of pvim-cart-rf. after fitting all forests, they examine the oob error rates from all the fitted random forests. the oob error rate is an unbiased estimate of the test set error  <cit> . they select the solution with the smallest number of genes whose error rate is within  <dig>  standard error of the minimum error rate of all forests.

varselmd
md assesses the predictiveness of a variable by its depth relative to the root node of a tree. a smaller value corresponds to a more predictive variable  <cit> . specifically, the md of a predictor variable v is the shortest distance from the root of the tree to the root of the closest maximal subtree of v; and a maximal subtree for v is the largest subtree whose root node is split using v, i.e. no other parent node of the subtree is split using v. md can be computed for any kind of rf, including multivariate rf.

a high-dimensional variable selection method based on the md concept was introduced by  <cit> . it uses all data and all variables simultaneously. variables with an average md for the forest that exceeds the mean md threshold are classified as noisy and are removed from the final model.

intervention in prediction measure 
ipm was proposed in  <cit> , where an rf with two responses  was used for child garment size matching.

ipm is a case-wise technique, i.e. ipm can be computed for each case, whether new or used in the training set. this is a different perspective for addressing the problem of importance variables.

the ipm of a new case, i.e. one not used to grow the forest and whose true response does not need to be known, is computed as follows. the new case is put down each of the ntree trees in the forest. for each tree, the case goes from the root node to a leaf through a series of nodes. the variable split in these nodes is recorded. the percentage of times a variable is selected along the caseâ€™s way from the root to the terminal node is calculated for each tree. note that we do not count the percentage of times a split occurred on variable k in tree t, but only the variables that intervened in the prediction of the case. the ipm for this new case is obtained by averaging those percentages over the ntree trees. therefore, for ipm computation it is only necessary to know the structure of the trees forming the forest; the response is not necessary.

the ipm for a case in the training set is calculated by considering and averaging over only the trees where the case belongs to the oob set. once the casewise ipms are estimated, the ipm can be computed for each class  and globally, averaging over the cases in each class or all the cases, respectively. since it is a case-wise technique, it is also possible to estimate the ipm for subsets of data, with no need to regrow the forest for those subsets.

an anonymous reviewer raised the question of using in-sample observations in the ipm estimation. in fact, the complete sample could be used, which would increase the sample size. this is a matter for future study. although ipm is not based on prediction, i.e. it does not need the responses for its computation once the rf is built, the responses of in-sample observations were effectively used in the construction of the trees. so brand new and unused data  were preferred for ipm estimation, in order to ensure generalization. in additional file  <dig>  there is an example using all samples.

the new ipm and all of the code to reproduce the results are available in additional file  <dig> 

comparison studies
the performance of ipm in relation to the other well-established vims is compared in several scenarios, with simulated and real data. two different kinds of responses are analyzed with both simulated and real data, specifically rf-classification and multivariate rf are considered in order to cover the broadest possible spectrum of responses.

the importance of the variables is known a priori with simulated data, as we know the model which generated the data. in this way, we can reliably analyze the successes in the ranking and variable selection for each method, and also the stability of the results, as different data sets are generated for each model. for rf-classification, the simulation models are analogous to those considered in previous works. for multivariate rfs, simulation models are designed starting from scratch in order to analyze their performance under different situations.

analyses are also conducted on real data, which have previously been analyzed in the literature in order to supply additional evidence based on realistic bioinformatics data structures that usually incorporate complex interdependencies.

once importance values are computed, predictors can be ranked in decreasing order of importance, i.e. the most important variable appears in first place. for some methods there are ties . in such cases, the average ranking is used for those variables.

all the computations are made in r  <cit> . the packages and parameters used are detailed for each study.

simulated data
categorical response: scenarios  <dig> and 2
two classification problems are simulated. in both cases, a binary response y has to be predicted from a set of predictors.

in the first scenario, the simulation design was similar to that used in  <cit> , where predictors varied in their scale and number of categories. the first predictor x
 <dig> was continuous, the other predictors from x
 <dig> to x
 <dig> were categorical with a different number of categories. only predictor x
 <dig> intervened in the generation of the response y, i.e. only x
 <dig> was important, the other variables were uninformative, i.e. noise. this should be reflected in the vim results. the simulation design of scenario  <dig> appears in table  <dig>  the number of cases  generated in each data set was  <dig>  a total of  <dig> data sets were generated, so the stability of the results could also be assessed.
x
1
x
2
x
3
x
4
x
5
y|x
y|x
the variables are sampled independently from the following distributions. n stands for the standard normal distribution. b stands for the binomial distribution with n =  <dig>  i.e the bernoulli distribution, and probability Ï€. du stands for the discrete uniform distribution with values  <dig>  â€¦, n. the relevance parameter rel indicates the degree of dependence between y and x
 <dig>  and is set at  <dig> , which is not very high




the parameter settings for rfs were as follows. cart-rf was computed with bootstrap sampling without replacement, with n
t
r
e
e= <dig> as in  <cit> , and two values for mtry:  <dig>  the default value in  <cit> ) and  <dig> . gvim, pvim and ipm were computed for cart-rf. cit-rf was computed with the settings suggested for the construction of an unbiased rf in  <cit> , again with ntree = <dig> and mtry equal to  <dig> and  <dig>  pvim, cpvim, and ipm were computed for cit-rf. varselrf  <cit>  was used with the default parameters . varselmd  <cit>  was used with the default parameters  and also with mtry = <dig> 

the simulation design for the second scenario was inspired by the set-up in  <cit> . the binary response y was modeled by means of a logistic model: 
 p=extÎ²1+extÎ²  where the coefficients Î² were: Î²=t. the twelve predictors followed a multivariate normal distribution with mean vector Î¼= <dig> and covariance matrix Î£, with Ïƒ
j,j= <dig> , Ïƒj,jâ€²= <dig>  for j â‰  j
â€²â‰¤  <dig>  and the other variables were independent with Ïƒj,jâ€²= <dig>  the behavior of vims under predictor correlation could be studied with this model. as before,  <dig> observations were generated for  <dig> data sets.

the parameter settings for rfs were as follows. cart-rf was computed with bootstrap sampling without replacement, with ntree = <dig> as in  <cit> , and two values for mtry:  <dig>  the default value in  <cit> ) and  <dig> . gvim, pvim and ipm were computed for cart-rf. cit-rf was computed with the settings suggested for the construction of an unbiased rf in  <cit> , again with ntree = <dig> and mtry equal to  <dig> and  <dig>  pvim, cpvim, and ipm were computed for cit. varselrf was used with the default parameters . varselmd was used with the default parameters  and also with mtry = <dig> 

multivariate responses: scenarios  <dig> and 4
again two scenarios were simulated. the design of the simulated data was inspired by the type of variable composition of the real problem with multivariate responses that would be analyzed. in this problem, responses were continuous and there were continuous and categorical predictors.

the configuration of the third and fourth scenarios were quite similar. table  <dig> reports the predictor distributions, which were identical in both scenarios. table  <dig> reports the response distributions, two continuous responses per scenario. of the  <dig> predictors, only two were involved in the response simulation: the binary x
 <dig> and the continuous x
 <dig>  however, in the fourth scenario x
 <dig> only participated in the response generation when x
1= <dig>  this arrangement was laid out in this way to analyze the ability of the methods to detect this situation. the rest of the predictors did not take part in the response generation, but x
 <dig> was very highly correlated with x
 <dig>  in addition, the noise predictors x
 <dig>  and x
 <dig>  were created by randomly permuting the values of x
 <dig> and x
 <dig>  respectively, as in  <cit> . the other irrelevant predictors, x
 <dig> and x
 <dig> were continuous with different distributions. as before,  <dig> observations in each scenario were generated for  <dig> data sets.
x
1
x
2
x
3
x
4
x
5
x
6
x
7
x
the variables are sampled independently from the following distributions. b stands for the binomial distribution with n =  <dig>  i.e the bernoulli distribution, and probability Ï€. n stands for the normal distribution with mean Î¼ and standard deviation Ïƒ. unif stands for the continuous uniform distribution on the interval . p stands for random permutation of the values generated in the variable x



y
1|x
y
1|x
y
2|x
y
2|x
the variables are sampled independently from the following distributions. n stands for the normal distribution with mean Î¼ and standard deviation Ïƒ





with multivariate responses, only two vims could be computed. varselmd was used with the default parameters  and also with mtry = <dig>  ipm was computed for cit-rf with the settings suggested for the construction of an unbiased rf in  <cit> , with ntree = <dig> and m
t
r
y= <dig> 

real data: application to c-to-u conversion data and application to nutrigenomic study
two well-known real data sets were analyzed. the first was a binary classification problem, where the predictors were of different types. in the second, the response was multivariate and the predictors were continuous and categorical, as in the first set.

the first data set was the arabidopsis thaliana, brassica napus, and oryza sativa data from  <cit> , which can be downloaded from additional file  <dig>  it applies to c-to-u conversion data. rna editing is the process whereby rna is modified from the sequence of the corresponding dna template  <cit> . for example, cytidine-to-uridine  conversion is usual in plant mitochondria. although the mechanisms of this conversion are not known, it seems that the neighboring nucleotides are important. therefore, the data set is formed by  <dig> cases, each of them with the following recorded variables : 
edit, with two values . this is the binary response variable.

the  <dig> nucleotides at positions â€“ <dig> to  <dig> , relative to the edited site, with  <dig> categories;

the codon position, cp, which is categorical with  <dig> categories;

the estimated folding energy, fe, which is continuous, and

the difference in estimated folding energy  between pre-edited and edited sequences, which is continuous.




the second data set derives from a nutrigenomic study  <cit>  and is available in the r package randomforestsrc  <cit>  and additional file  <dig>  the study examines the effects of  <dig> dietary treatments on  <dig> liver lipids and  <dig> hepatic gene expressions in wild-type and ppar-alpha deficient mice. therefore, the continuous responses are the lipid expressions , while the predictors are the continuous gene expressions , the diet , and the genotype . the number of observations is  <dig>  according to  <cit> , in vivo studies were conducted under european union guidelines for the use and care of laboratory animals and were approved by their institutional ethics committee.

RESULTS
scenario  <dig> for vims applied to scenario  <dig>  this information is also displayed in table form in additional file 1: table s <dig>  the results for other sample sizes are shown in additional file 1: figures s <dig> and s <dig>  in md, the ranking according to minimal depth returned by the variable selection method varselmd is shown. in theory, as x
 <dig> was the only relevant predictor, x
 <dig> should be in first place . the other uninformative variables should be in any place from 2nd to 5th, i.e. on average  <dig> . the method which best identifies x
 <dig> as the most important predictor is ipm from cit-rf with mtry = <dig>  for which x
 <dig> was detected as the most important on 69% of occasions. the second best method is pvim-cit-rf with mtry = <dig>  although it only identified x
 <dig> as the most important predictor on 54% of occasions. it is not surprising that the methods based on cart-rf do not obtain good results due to the nature of the problem, since there are different types of predictors and different


numbers of categories. in this situation, cit provides a better alternative to cart, as is well explained in  <cit> . this statement is also corroborated by the results shown in fig.  <dig>  where the average rankings for each variable are shown. this information is also displayed in table form in additional file 1: table s <dig>  the results for other sample sizes are shown in additional file 1: figures s <dig> and s <dig>  note that gvim, md and ipm from cart-rf selected x
 <dig> erroneously most times as the least important predictor, and x
 <dig>  which is irrelevant, as the most important one. ipm from cit-rf with mtry = <dig> was the method with the lowest average ranking for x
 <dig>  i.e. that which gave the highest importance, in average terms, for x
 <dig>  as regards the variable selection methods varselrf and varselmd, they have to be analyzed differently, as predictors are not ranked. the percentage of times that x
 <dig> belonged to the final selected model of varselrf was 66%, despite selecting two variables on  <dig> occasions, three variables on  <dig> occasions and four variables on  <dig> occasions. remember that only x
 <dig> was relevant. note that ipm from cit-rf with mtry = <dig> detected x
 <dig> as the most important predictor on 69% of occasions, and x
 <dig> was among the two most important predictors on 84% of occasions . the results for varselmd were very poor with both mtry values. the method varselmd with mtry = <dig> selected four predictors on 20% of occasions and five predictors, i.e. all the predictors, the remaining 80% of the times. it selects x
 <dig> on 80% of occasions, precisely when all the variables were chosen. in other words, it selected the four non-relevant variables and left x
 <dig> out of the model on 20% of occasions, and the remaining 80% of the times it did not make any selection, as it chose all the variables, including those which were irrelevant. the method varselmd with mtry = <dig> selected all the predictors on 24% of occasions, four predictors 72% and three predictors 4%. x
 <dig> was among those selected on only 26% of occasions .
fig.  <dig> ranking distribution of x
 <dig> for vims in scenario  <dig>  barplots with the ranking distribution  of x
 <dig>  the darker the bar, the greater the importance of x
 <dig> for that method


fig.  <dig> average ranking of variables for vims in scenario  <dig>  barplots with the average ranking of variables for vims. the lower the bar corresponding to x
 <dig>  the greater the importance of x
 <dig> for that method




ipm values are also easy to interpret, since they are positive and add one. the average ipm  values of cases in the  <dig> data sets for each variable were:  <dig>  ,  <dig>  ,  <dig>  ,  <dig>   and  <dig>  . so x
 <dig> was the most important, whereas it gave more or less the same importance to the other variables. an issue for further research is to determine from which threshold  a predictor can be considered irrelevant.

ipm can also be computed in class-specific terms, as pvim-cart-rf. . as an illustrative example, results from a data set are examined. in  <cit>  we showed two problems for which the results of ipm by class were more consistent with that expected than those of pvim-cart-rf by class, and this is also the case with the current problem. table  <dig> shows the importance measures by group and globally. the ipm rankings seem to be more consistent at a glance than those for pvim-cart-rf. for instance, the ranking by pvim for class  <dig> gave x
 <dig> as the most important predictor, whereas x
 <dig> was the fourth  most important predictor for class  <dig>  we computed kendallâ€™s coefficient w  <cit>  to assess the concordance. kendallâ€™s coefficient w is an index of inter-rater reliability of ordinal data  <cit> . kendallâ€™s w ranges from  <dig>  to  <dig> . kendallâ€™s w for the ranking of pvim cart-rf  for class  <dig> and  <dig> was  <dig> , whereas for ipm cit-rf  it was  <dig> . we repeated this procedure for each of the  <dig> data sets, and the average kendallâ€™s w were  <dig>  and  <dig>  for pvim-cart-rf  and ipm cit-rf , respectively. therefore, the agreement between the class rankings for ipm was very high. note that in this case, the importance of predictors followed the same pattern for each response class as reflected by the ipm results, but it could be different in other cases. this has great potential in applied research, as explained in  <cit> : for example, different predictors may be informative with different cancer subtypes.

x
1

x
2

x
3

x
4

x
5
the first column is the name of the variables. the two following columns correspond to the pvim ranking  for each class, whereas the third column is the same but calculated globally . the last three columns contain the ranking of the ipm values  first by group and the last column computed globally 




scenario 2
according to the model generation, the most important variables were x
 <dig>  x
 <dig>  x
 <dig> and x
 <dig>  which were equally important. the following variables in terms of importance were x
 <dig> and x
 <dig>  which were also equally important. the other variables were irrelevant. however, there was a correlation pattern between variables x
 <dig>  x
 <dig>  x
 <dig> and x
 <dig>  which were highly correlated, but they were uncorrelated to the other variables. each vim can be affected by this in different ways. theoretically, if we rank the  <dig> variables by importance , the true ranking of each variable should be:  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> . note that x
 <dig>  x
 <dig>  x
 <dig> and x
 <dig> should be in any of the first four positions, and  <dig>  is the mean of  <dig>   <dig>   <dig> and  <dig>  analogously, x
 <dig> and x
 <dig> should be in 5th or 6th position, and  <dig>  is the mean of these two values. similarly, for the other variables, the mean of the 7th, 8th, 9th, 10th, 11th and 12th positions is  <dig> .
t
r
y= <dig>  the results for other sample sizes are shown in additional file 1: figures s <dig> and s <dig>  as in  <cit> , correlated predictors were given high importance with small mtry values, although x
 <dig> was not so important, even when x
 <dig> was irrelevant. note that with m
t
r
y= <dig>  only md gave higher importance  to x
 <dig> and x
 <dig> than to the irrelevant x
 <dig>  this is due to the high correlation with truly important variables x
 <dig> and x
 <dig>  this effect is mitigated when mtry is increased. for mtry = <dig>  the ranking profiles were more like the true one. the closest ranking profile to the true one was that given by ipm cit-rf. the profiles of md and ipm cart-rf were near to ipm cit-rf, and all these methods are based on the tree structure. the ipm cit-rf ranking for the most important  variables was around  <dig> for all of them. for other methods there was more variation among the rankings of these four variables. for example, for cpvim the average ranking for x
 <dig> and x
 <dig> was around  <dig> , but it increased to around  <dig> for x
 <dig> and x
 <dig>  despite being equally important. for the second equally important variables , the ipm cit-rf ranking gave a value of  <dig>  for x
 <dig>  and  <dig>  for x
 <dig>  the other methods gave more importance  to x
 <dig> and less importance to x
 <dig> , i.e. the other methods were further away from the true ranking. as regards the irrelevant variables, the ipm cit-rf ranking gave a value of  <dig>  for x
 <dig> and around  <dig> for the other uninformative variables. the x
 <dig> ranking for other methods was lower, i.e. they erroneously placed more importance on the uninformative variable x
 <dig>  therefore, ipm cit-rf with m
t
r
y= <dig> better identified the true pattern of importance.
fig.  <dig> vim rankings in scenario  <dig>  average ranking in reverse order  for each vim, for mtry = <dig> and mtry = <dig>  the code of each vim appears in the figure legend. as the y axis of the figure is flipped,  <dig> indicates a very important variable, whereas  <dig> a low important predictor. theoretically, the true representation would be in this figure:  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> 




the variable selection methods do not rank the variables, so the analysis can only be based on the selections. the distributions of the selections can be seen in table  <dig>  the number of variables selected by varselrf varied from  <dig> to  <dig>  although the most frequent numbers were  <dig>  and  <dig> . note that the uninformative variable x
 <dig> was selected more times than the most important variables x
 <dig> and x
 <dig>  as regards varselmd, the results were good and were in line with md. for m
t
r
y= <dig>  it selected  <dig> to  <dig> variables: four variables on  <dig> occasions, five variables on  <dig> occasions and six variables on  <dig> occasions. it detected the most important variables, although x
 <dig> was incorrectly selected 62% of the times, and x
 <dig> was only selected 3% of the times. the same happened for varselmd with m
t
r
y= <dig>  although this time the number of x
 <dig> selections was lower  and the number of x
 <dig> selections was higher . the number of variables selected by varselmd with mtry = <dig> ranged from  <dig> to  <dig>  although it usually selected  <dig>  or  <dig>  variables. remember that varselrf takes into account the error rate for selecting the solution. this could be the reason why x
 <dig> is frequently selected by this method, because x
 <dig> is highly correlated with other variables in the model generation. this could also be the reason why the results for varselrf in scenario  <dig> were not as bad as for other methods based on cart-rf.
x
1
x
2
x
3
x
4
x
5
x
6
x
7
x
8
x
9
x
10
x
11
x
12



ipm for a new case
ipm can be computed for a new case using either cit-rf or cart-rf. let us consider one of the data sets. a new artificial case with a value of zero in all the variables, i.e. the population mean of the generating model, can be built. according to the model construction, the importance pattern should be as discussed above. figure  <dig> shows the ipm with mtry = <dig> for cit-rf and cart-rf for this new case. note that the other methods do not allow importance values to be computed for new cases. the four most important variables match the generating model. variable x
 <dig> was the following most important. variable x
 <dig> was as important as x
 <dig>  but as before, its importance was underestimated. the importance of the other variables was negligible, although ipm cart-rf attached some importance to x
 <dig>  therefore, rf not only predicts the response of unlabeled samples , but also the importance of variables for each of those samples can be obtained with ipm. as discussed previously, local importance could reveal variables that are important for a subset of samples of the same class, which could be masked from global importance values  <cit> . this has potential and it is something to be explored further in the future, as only few studies have used local importances as yet  <cit> . however, this should be approached with caution, as local importances could be noisier since they are based on smaller sample sizes.
fig.  <dig> ipm for a new case in scenario  <dig>  ipm values with mtry = <dig> for cit-rf  and cart-rf 




application to c-to-u conversion data
first of all, let us analyze the vims. the composition of this data is similar to the data structure of scenario  <dig> , so only the results for the best methods in scenario  <dig> are shown here. pvim was computed with cit-rf as in scenario  <dig>  with n
t
r
e
e= <dig> and m
t
r
y= <dig> as in  <cit> . cpvim could not be computed for this data set  due to the high storage needs. but, as shown in  <cit> , with increasing mtry values the unconditional importance resembled the behavior of the conditional importance, so pvim-cit-rf with mtry = <dig> was also considered. ipm-cit-rf with mtry = <dig> was also computed.

rfs are a randomized method. therefore, the rf was computed  <dig> times from different seeds to gain stability in vims values. the vim values from the  <dig> replications were averaged, and are displayed by barplots in fig.  <dig>  the results are similar to those in  <cit> , although with some slight differences. as in  <cit> , position - <dig> was very important, followed by position  <dig>  which was not detected in  <cit> . note that gvim, the method with the worst results in scenario  <dig>  was used in  <cit> . in  <cit> , fe and dfe were somewhat important , but according to the results with pvim  and ipm, cp  and fe were somewhat important, but not dfe. furthermore, according to ipm, there were also two somewhat important variables: positions - <dig> and  <dig> 
fig.  <dig> vim barplots for the c-to-u conversion data. the first row corresponds to pvim-cit with mtry =  <dig>  the second row to mtry =  <dig>  while the bottom row to ipm-cit-rf values with mtry =  <dig>  in all cases, values are averaged over  <dig> replications. the variable names appear at bottom of the barplots




in this real case, we do not know the true importance pattern of the variables. so, besides the variable importance study, let us also analyze the prediction accuracy in this data set. the same scheme as in  <cit>  was considered. the original data were split into a training and test set with a size ratio of 2: <dig>  this procedure was repeated  <dig> times. each time the following operations were carried out. a rf-cart with bootstrap sampling without replacement, with ntree = <dig> and mtry = <dig> as in  <cit>  was grown using the training set, and observations in the test set were predicted with this rf. the same procedure was performed with a cit-rf with the settings suggested for the construction of an unbiased rf in  <cit> , again with ntree = <dig> and mtry = <dig>  as in  <cit> . these two procedures were used in  <cit> . on this occasion, the variable selection varselrf was considered . an rf-cart was built as before, but using only the variables selected by varselrf, and predictions in the test set were calculated. this is a kind of regularization, which attempts to erase noise  to improve the prediction. the same strategy was employed to exploit the best vims in scenario  <dig>  the idea was as follows. the same vims that appeared before in fig.  <dig> were considered. the predictors were ranked according to these vims. the m= <dig> most important predictors were selected, and used to grow a cit-rf with the settings suggested for the construction of an unbiased rf in  <cit> , again with n
t
r
e
e= <dig> and m
t
r
y= <dig>  the test set was predicted by this rf. the value m= <dig>  was an intermediate value, not too small or too high, in view of the importance patterns displayed in fig.  <dig> . the tuning parameter m should be further investigated, but the results are reported here without refining the value of m. the mean and standard deviation of the misclassification rates over the  <dig> runs appear in table  <dig> 
results produced by using the regularization procedure derived by vims are preceded by an r




the results obtained are similar those that appear in  <cit> . the greatest successes were achieved by methods conducted with cit, as expected due to the data composition with predictors of different types. furthermore, the regularization strategy using vims reported the best performance. in particular, the best results were achieved by using pvim and ipm with cit-rf and m
t
r
y= <dig> to select the most important predictors before refitting the rf-cit. in fact, both methods significantly  improved on the results given by rf-cart, cit-rf and varselrf.

scenarios  <dig> and 4
tables  <dig> and  <dig> show the average ranking  for each method. the results for other sample sizes are shown in additional file 1: tables s <dig>  s <dig>  s <dig> and s <dig>  for scenario  <dig> and  <dig>  variables x
 <dig> and x
 <dig> participated in the response generation, so both predictors were important. however, their importance level differs in each scenario. in scenario  <dig>  x
 <dig> only intervened in the response generation when x
1= <dig>  so intuitively it should have had less importance than in scenario  <dig>  as x
 <dig> and x
 <dig> participated in the response generation in a different way, and they are also variables of different types, it is difficult to judge their relative importance theoretically. in any case, x
 <dig> and x
 <dig> should rank in the first or second positions in scenario  <dig>  while the other irrelevant variables should rank in 5th position .
x
1
x
2
x
3
x
4
x
5
x
6
x
7

x
1
x
2
x
3
x
4
x
5
x
6
x
7



in scenario  <dig>  ipm considered x
 <dig> as the most important variable, followed by x
 <dig> in all the runs. the average ipm values were 32% for x
 <dig> and 68% for x
 <dig>  and near zero for the other variables. the average rank for the other variables was around  <dig>  except for x
 <dig> , with an average ranking of  <dig> . nevertheless, md considered mostly x
 <dig> as the most important variable and in second position x
 <dig>  although not in all the runs. for md with m
t
r
y= <dig>  x
 <dig> was the most important on  <dig> occasions, and the second most important on  <dig> occasions. for md with m
t
r
y= <dig>  x
 <dig> is the most important on  <dig> occasions, and the second most important on  <dig> occasions. furthermore, md always ranked x
 <dig> in last position , when it was no less important than the other uninformative variables.

in scenario  <dig>  md with mtry = <dig> considered x
 <dig> as the most important variable, followed by x
 <dig> in all the runs. on the other hand, md with mtry = <dig> considered x
 <dig> as the most important in all the runs, as well as ipm. however, x
 <dig> was the second most important in all runs, except on  <dig> occasions for md with mtry = <dig> and  <dig> occasions for ipm, where x
 <dig> was considered the third. the average ipm values were 40% for x
 <dig>  26% for x
 <dig> and around 7% for the other variables. however, as ipm is defined casewise, ipm can be also computed according to the group values of x
 <dig>  note that this kind of information supplied by ipm about importance in subgroups of data could only be available for md if the rf was regrown with that subset of data. for samples with x
1= <dig>  the average ipm values were 47% for x
 <dig> and 53% for x
 <dig>  remember that when x
1= <dig>  the variable x
 <dig> intervened in the generation of the responses. for samples with x
1= <dig> , the average ipm values were 35% for x
 <dig>  7% for x
 <dig>  13% for x
 <dig>  13% for x
 <dig>  6% for x
 <dig>  13% for x
 <dig> and 12% for x
 <dig>  note that when x
1= <dig>  neither of the variables intervened in the model generation, so all the variables were equally unimportant. the selection frequency with cit should be similar  <cit> . the sum of ipm of the two correlated variables x
 <dig> and x
 <dig> was 13%. note also that this situation, where neither of the predictors is related with responses, is not expected  in practice.

application to a nutrigenomic study
let us first analyze the vims. as the response is multivariate, only md and ipm-cit-rf can be computed. this problem is placed in a high-dimensional setting: it deals with large p  and small n . as explained in  <cit> , as p increases, the tree becomes overwhelmed with variables, so trees will be too shallow. if we compute varselmd and ipm-cit-rf with mtry = <dig> and n
t
r
e
e= <dig>  only the variable diet is selected in both cases. this solution could be viewed as a â€™degenerateâ€™ solution. then, the default mtry value in function rfsrc from r package randomforestsrc  <cit>  is used. in this case mtry =p/ <dig> , i.e. mtry = <dig>  a total of  <dig> variables were selected by varselmd, diet being the least deep and genotype being the fourth least deep. however, except for diet, the depth values were not very different. to provide stability, this procedure was repeated  <dig> times with different seeds. a total of  <dig> variables were selected in some of the replicates. half of these,  <dig> variables, were selected in all the replicates and  <dig> of them were selected on more than 75% of occasions. in particular, these were the following  <dig> predictors : acat <dig> , acbp , acc <dig> , acoth , apoc <dig> , bsep , car <dig> , cyp2c <dig> , cyp3a <dig> , cyp4a <dig> , cyp4a <dig> , diet , g6pase , genotype , gk , gstpi <dig> , hpncl , lpin , lpin <dig> , lpin <dig> , ntcp , pltp , pmdci , s <dig> , spi <dig>  , sr.bi , and thiol .

for the  <dig> replicates of ipm-cit-rf with m
t
r
y= <dig>  the ranking of the first variables was very stable: diet was the first in all replicates, and genotype the second. the average ranking of the first ten ranked predictors together with the standard deviation for the  <dig> replicates can be seen in table  <dig>  although not suggested by the varselmd results, the ipm values indicate that four variables accounted for most relevance . in particular, these are the averaged ipm values for the four variables in brackets: diet , genotype , pmdci  and thiol . the barplot of these ipm values can be seen in fig.  <dig>  the seventh and eight most important predictors according to ipm, bien and aox were not selected in any of the replications of varselmd.
fig.  <dig> barplot of averaged ipm values for nutrigenomic study. the ranking of the  <dig> predictors with the largest ipm values appears at the bottom. their names can be found in table 10






let us analyze the prediction performance. prediction error was calculated using oob data. as the responses were continuous, performance was measured in terms of mean-squared-error. the prediction error for each of the  <dig> responses was standardized  for proper comparison. the prediction error using the function rfsrc from r package randomforestsrc with the default values was computed, which is referred to as rfsrc. varselmd was applied as before, and the function rfsrc was again used for prediction afterwards, but the selected variables were used as input instead all the variables. this procedure is referred as varselmd. finally, instead of varselmd, ipm-cit-rf was applied as before, and the  <dig> most important variables were selected, for prediction. this procedure was referred as ipm. the standardized errors for each response were averaged over  <dig> independent experiments, and their results are summarized in table  <dig> and displayed in fig.  <dig>  the lower prediction errors from ipm can be clearly observed. furthermore, by pooling the samples for each variable and using a studentâ€™s t-test for paired samples with Î±= <dig> , ipm significantly improves varselmd, which in turn improves rfsrc.
fig.  <dig> boxplots of standardized prediction errors for nutrigenomic study. distributions of standardized prediction errors for each variable, for methods rfsrc , varselmd  and ipm  from  <dig> replications





what are the advantages and limitations of ipm?
one of the advantages is the out-performance of ipm in the previous comparisons. in addition, its case-wise constitution should also be highlighted. ipm can be defined globally, for each class  and locally, as well as for new cases . only pvim can also be computed locally, by class and globally, but except for ipm, none of the other methods are able to estimate a variableâ€™s influence in a new case without knowing its true response. furthermore, ipm can be computed for subsets of data, with no need to regrow the forest for those subsets.

furthermore, ipm is independent of any prediction error, like md. this is very advantageous as it is not always known how the prediction error can be clearly measured  <cit> , and vims  can be different if different prediction error measures are employed. furthermore, as ipm is only based on the tree structures, it can be applied to all kind of forests, regardless of the outcome, from rf-classification to multivariate rfs.  <cit>  indicates another possible advantage of md due to the fact that it is not linked to any prediction error, which is also the case of ipm. although rfs are excellent in prediction for high dimensions, prediction performance breaks down when the number of noisy predictors increases, as it overwhelms the trees. as a consequence, it is difficult to select variables effectively, and methods that are based on prediction error, such as pvim, may be more susceptible to these effects than methods based on tree structure. as long as a predictor v repeatedly splits across the forest, md or ipm have a good chance of identifying v, even in the presence of many noisy predictors.

as regards computational complexity, ipm basically depends on exploring the trees for each observation, so the most computational burden part is growing the trees. in addition, ipm is conceptually simple and its interpretation is very accessible for everyone as it is expressed in percentages.

the influence of sample size on the performance of ipm is investigated in the simulated scenarios. results are shown for sample sizes of n= <dig> and n= <dig> in additional file  <dig>  as indicated by  <cit> , the data sets are usually high dimensional, i. e. with a small sample size relative to the dimension, and rfs with the largest trees are optimal in such studies. however, this is not the case with n= <dig>  where there are few variables with a high number of observation. in such situations, it is desirable to have the terminal node size go up with the sample size  <cit> . in those cases, the maximum depth  of the trees in rfs may regulate overfitting  <cit> . as ipm results are based only on the tree structure, it is fundamental to grow trees that are not overfit, otherwise noise is introduced, which can distort the results.

the drawbacks of ipm are common to any other rank-based vim, in the sense that caution is needed when interpreting any linear ranking because it is possible that multiple sets of weak predictive variables may be jointly predictive.

CONCLUSIONS
a new vim for rfs, ipm, has been introduced and assessed in different scenarios, within both simulated and real frameworks. ipm can be used in place of  other vims. the advantages and limitations of ipm have been highlighted in the previous section.

there also some questions that deserve further research, such as the choice of mtry or maxdepth  in rfs for ipm computation. as the objective of ipm is not prediction, but to indicate the contribution of variables to prediction, high mtrys with cit-rf have given very good performance in the simulation studies carried out. however, when p >n, mtry should be reduced. besides the qualitative information provided by ipm for understanding problems, if we want to use that information for predicting, we have to select a threshold for selecting the variables for regrowing the rf. in the problems, a round fixed number of the  <dig> variables with the highest ipm values was selected for predicting purposes, with promising results. an open question would be to explore the selection of this number and its relationship with the distribution of ipm values , together with the number of observations and predictors. a detailed study should be made with scenarios covering p >n cases, such as scenarios with a few relevant variables and many irrelevant variables and scenarios with many slightly relevant variables. another open question it is to try to perform a theoretical study of ipm, as in  <cit>  for md. note that, according to  <cit> , it seems very difficult to carry out a detailed theoretical study of pvim, but ipm is not a randomization procedure like pvim.

additional files

additional file  <dig> supplementary file. this file shows the results of vims in the simulated scenarios for sample sizes of n= <dig> and n= <dig>  figure s1: ranking distribution  of x
 <dig> for vims in scenario  <dig> with n =  <dig>  figure s2: ranking distribution  of x
 <dig> for vims in scenario  <dig> with n= <dig>  figure s3: average ranking of variables for vims in scenario  <dig> with n= <dig>  figure s4: average ranking of variables for vims in scenario  <dig> with n= <dig>  table s1: ranking distribution  of x
 <dig> for vims in scenario  <dig> with n =  <dig>  table s2: average ranking of variables for vims in scenario  <dig> with n= <dig>  figure s5: average ranking for each vim in scenario  <dig>  for mtry = <dig> and mtry = <dig>  with n= <dig>  figure s6: average ranking for each vim in scenario  <dig>  for mtry = <dig> and mtry = <dig>  with n= <dig>  table s3: average ranking of variables for vims in scenario  <dig>  with n= <dig>  table s4: average ranking of variables for vims in scenario  <dig>  with n= <dig>  table s5: average ranking of variables for vims in scenario  <dig>  with n= <dig>  table s6: average ranking of variables for vims in scenario  <dig>  with n= <dig>  

 



additional file  <dig> r source code. this is a compressed  file with data and r codes for reproducing the results. there is a file called readme.txt that explains the contents of six files. two files contain the two real data sets. the r code for computing ipm for rf-cart and cit-rf is available in one file. the r code for each of the simulations is available in another file, while the other two files contain the r codes for each application to real data. 

 


abbreviations
cpvimconditional permutation vim

cartclassification and regression trees

citconditional inference trees

cart-rfrandom forest based on cart

cit-rfrandom forest based on cit

cytidine-to-uridine ; gvimgini vim

ipmintervention in prediction measure

mdminimal depth

oobout-of-bag

pvimpermutation vim

pvim-cit-rfpvim derived from cit-rf

pvim-cart-rfpvim derived from cart-rf

rfrandom forest

residual sum of squares ; varselrfvariable selection procedure proposed by  <cit> 

varselmdvariable selection procedure using md proposed by  <cit> 

vimvariable importance measure

the author would like to thank the editor and two anonymous reviewers for their very constructive suggestions, which have led to improvements in the manuscript.

funding
this work has been partially supported by grant dpi2013- 47279-c2-1- r from the spanish ministerio de economÃ­a y competitividad. the funders played no role in the design or conclusions of this study.

availability of data and materials
the r code and all data simulated or analyzed in this work are included in additional file  <dig> 

authorsâ€™ contributions
ie is the only author.

competing interests
the author declares that she has no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.

publisherâ€™s note
springer nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.
