BACKGROUND
despite the ever increasing volumes of data being processed in bioinformatics, the methods used are almost entirely based on plain text files. data is usually encoded in lines of text, with each row consisting of a series of tab-delimited values. these files are easy to view and interpret and can be processed on any platform with the minimum of library dependencies. using compression, text files can be quite compact, and specialised indexing methods are available to retrieve specific rows, for example rows which intersect with a given genomic interval  <cit> .

it is not sufficient, however, to simply store and retrieve data. to use data it must be processed. this is the major flaw in using text files as a data format; before we can perform calculations, we must first parse the encoded information into native machine values. this is a computationally expensive process, and compression  adds substantial overhead. as a result, simple calculations over a large dataset may take many hours to complete.

another problem with tables stored as text files is that it is difficult to index the information in particular columns. this means that many operations on a table require a complete scan through the file. the only viable means of working with a subset of the data, therefore, is to create another file consisting of the subset of interest. this is inflexible and error prone, and multiplies already significant storage requirements.

the obvious solution to these problems is to load tabular data into a relational database. databases store values in binary form so that parsing is not required, and support efficient retrieval and indexing. however, there are many problems with this approach. relational databases are complex systems, each supporting different features and sql dialects. it is not a straightforward task to design a schema for a particular dataset, particularly not if portability across different databases is required. similarly, accessing data requires a knowledge of sql. in the most common case, a database server must be maintained and so storage and user permissions must be carefully managed. all of these aspects require significant expertise which is why so many researchers and programs continue to use textual data formats.

a relational database server is far more than we require in the majority of cases. data files are usually written once and not subsequently expected to change. thus, storing this information in a relational database with its sophisticated concurrency control is entirely unnecessary. centralised storage of datasets creates an unnecessary administration burden, as does an extra layer of user management. therefore, although relational databases provide powerful data management technologies, they are complex to use and maintain and are rarely used for static datasets.

implementation
wormtable  is a new data format and software library designed specifically to deal with the challenges of data processing in bioinformatics. it provides a portable, compact, read-only store for tabular data of essentially unlimited size. tables can be either written directly using the library, or converted from existing formats via command line tools. wormtable provides a simple, user friendly python api to access rows in the table, facilitating efficient and convenient access to data. the core data manipulation and storage facilities are written in c for efficiency.

data is stored in rows using a compact binary format. each row consists of a defined number of columns, and each column holds elements of a given type and size. each column is allocated a fixed number of bytes within the ‘fixed region’ of a row. for columns with fixed length, the encoded elements are stored entirely within the fixed region; for columns of variable length, the encoded elements are stored in the ‘variable region’ of the row, and the location and number of elements stored in the fixed region. the type, size and number of elements of each column are specified in the table schema, which is defined in xml as part of the table’s metadata.

wormtable currently supports signed and unsigned integers, floating point and character data. integer sizes range from one to eight bytes, and real numbers are stored as ieee half, single, and double precision  <cit>  floating point values. fixed and variable length character strings are also supported. using this flexible type system, columns can be assigned the most appropriate type and size for the range of values to be represented.

rows are stored sequentially in a data file, and the offset and length of each row is stored in a berkeley db  <cit>  database. thus, any given row can be found by first looking up the database for its offset and length, and by then reading the required set of bytes from the data file. berkeley db is a free and open-source embedded database toolkit that provides a scalable key-value store. it is a mature and stable platform, and is currently the most widely deployed database toolkit in the world  <cit> .

besides random access to rows, wormtable also provides indexes over arbitrary combinations of columns. an index is a berkeley db database in which the keys are the elements from the columns in question concatenated together, and the values are pointers to the original rows. indexes make many operations much more efficient, because we can go directly to the rows we are interested in without performing a full table scan. they also provide a very efficient means of calculating a histogram for a given set of columns. moreover, wormtable supports binned indexes, in which a range of values is mapped to a single index key. this is very useful for floating point columns, where it may not be necessary to distinguish between very similar values.

each table corresponds to a directory in the file system which is used to store the data files, indexes and metadata. files within a table’s home directory are not intended to be manipulated directly by users, and the wtadmin program is provided to perform administration tasks such as adding and removing indexes. this approach is very flexible, since no centralised storage is required and tables can be moved around and between systems at will. tables are portable across operating systems and hardware architectures.

RESULTS
api
the principle goal of wormtable is to provide efficient access to data using an easy to learn interface. in python, the table class provides the main interface, and implements the standard python sequence protocols. efficient iteration over rows is provided by the cursor method, which takes as an argument the list of columns to read. only the values for the columns of interest are then retrieved, leading to considerable time savings. the cursor method can take two additional arguments, start and stop, which specify the rows of interest. this allows us to efficiently seek to an arbitrary location in the table and to read a given number of rows sequentially from this point.

the index class also has a cursor method with the same signature, but in this case, rows are returned in the order defined by the index. the start and stop arguments are now defined in terms of index keys: all rows in which the index key is greater than or equal to start and less than stop are returned. partial keys may also be provided for multi-column indexes. the index class also provides an iterator over all keys, as well as a means of counting the number of rows with a given key.

the api is straightforward, but it is flexible, powerful and extensible. this simplicity ensures that programmers of all experience levels can take full advantage of the powerful data processing facilities that wormtable provides. in the following subsections we illustrate the performance advantages of wormtable via some examples. these are not intended to be definitive benchmarks but are simple examples to demonstrate the type of improvements that can be expected by using wormtable over existing methods.

scan performance
the variant call format  encodes information about variant sites in a genome as tab-delimited rows in a text file  <cit> . vcf is one of the most commonly used formats to store genomic data from next generation sequencing. to illustrate the advantages of wormtable when performing calculations over a whole table, we converted a large publicly available vcf file  to wormtable format. this vcf  <cit>  consists of 15gb of uncompressed text and contains data from the whole genome over  <dig> , <dig> rows. using the included vcf2wt program, the vcf was converted to wormtable format on a workstation with an intel xeon processor, 12gb of ram and a single hard disk. the conversion required approximately  <dig> minutes, and the size of the resulting wormtable was 10gb .

values are stored in wormtable in a portable binary format, so that no parsing is required when reading in rows. to illustrate this advantage, we wrote a script to count the number of transitions and transversions in the dataset using wormtable and pyvcf  <cit> , a python vcf parser. in this example we proceed row-by-row, examining the ref and alt columns and counting the transitions and transversions we encounter. using pyvcf this required approximately  <dig> minutes, whereas the wormtable version required  <dig> seconds. to compare against methods that are known to be extremely efficient, we repeated the same example using the unix tools cut, grep and awk, which required  <dig> seconds. both the unix pipeline and wormtable were limited by the sequential read bandwidth of the hard drive, and would therefore be much faster using modern solid state storage. it should be noted, however, that although unix pipelines are efficient, it is a difficult and error prone method of processing data when more complex calculations are required.

full table scans are often unnecessary in wormtable. for many tasks, creating an appropriate index allows us to seek directly to the rows of interest. to illustrate this, we repeated the example of counting transitions and transversions using an index on the ref and alt columns. the index required 3m40s to build and consumed 66mb of storage space. counting the number of transitions and transversions using this index required less than a second.

seek performance
one of the most serious problems with tabular data stored in text files is that it is not possible to access a particular row efficiently without some auxiliary index. unless we have some information on where a particular row is located in a file, there is little that can be done except to read the file line-by-line until the required row is found. tabix  <cit>  solves this problem by compressing a tab-delimited text file into blocks, and then storing an index mapping genome position to the location of the compressed block, and the position of the row within the block. tabix is specifically designed for range queries, allowing us to efficiently retrieve all of the rows within a given genomic range.

to compare the seek performance of wormtable with tabix, we compressed the vcf file mentioned in the previous subsection using bgzip  and indexed it with tabix . the size of the resulting compressed file was  <dig> gb and the size of the index file was 106kb. to duplicate the functionality of tabix on vcf data, we simply need to create an index on the chrom and pos columns using wtadmin add. this required approximately  <dig> minutes and the resulting index consumed 115mb of space.

we compared the seek performance of tabix and wormtable by generating a genomic location randomly and retrieving all rows within 1kb of this location. this was repeated  <dig> times, and we measured both the elapsed and processor time. the tabix python module was used for the comparison, ensuring that no overheads associated with process forking were incurred. the same set of random locations were used for wormtable and tabix, ensuring a fair comparison.

when using a cold cache  the elapsed time for tabix was  <dig> seconds with a processor time of  <dig> seconds. for wormtable, the elapsed time was  <dig> seconds with a processor time of  <dig> seconds. thus, the time required to perform this test is dominated by waiting for i/o in both cases. since the wormtable file is considerably larger than the compressed file used by tabix, more and larger hard drive seeks were required to bring the required pages into memory. once the pages were in memory, however, tabix needed to do much more work to decompress then and make them usable, as shown by the difference in processor times.

this difference is well illustrated by immediately repeating the same experiment, so that all the relevant pages are in cache. in this case, the elapsed time was  <dig> seconds for tabix and around  <dig> seconds for wormtable. thus, the use of compression is a trade-off: it reduces file size, which reduces the number of random seeks required, but decompression is expensive and must be repeated each time a block is accessed. the advantages of a smaller file in terms of reducing the number of seeks incurred would also be largely negated by using solid state storage, where random seeks do not incur such a heavy penalty.

the test used here is also highly synthetic, and unlikely to be indicative of most real-world applications. the majority of workloads have strong locality of reference  <cit> , and such large and extreme jumps across genomic regions are unlikely to occur. in this case, wormtable is much faster than tabix, since there is no cpu overhead of decompression. furthermore, since tabix returns rows of text, the problem of parsing rows must still be solved. this is expensive , and creates extra code complexity. wormtable, by providing a simple api to access both rows and columns, gives a unified interface for accessing data that is both straightforward to use and highly efficient.

discussion
the problems of enabling efficient random access to rows and avoiding the large overhead of parsing text are well understood, and efforts to address them are proceeding in parallel for different file formats. bcf, for example, is the binary version of the vcf format discussed above, in which values within rows are stored in a packed binary format. similarly, bigbed and bigwig  <cit>  are compressed binary versions of the bed and wig file formats, which offer efficient random access along with the ability to operate over a network.

there are significant difficulties, however, with having many different binary file formats for bioinformatics data. each binary format requires a library and set of tools to view and process it, as it is not reasonable to expect users to decode binary files. bindings for several different languages must also be provided, if the file format is to be widely used. maintaining these libraries, tools and language bindings across different processor architectures and operating systems is a complex software engineering task. maintaining this ecosystem separately for many different file formats is surely unsustainable.

wormtable alleviates the need for these different formats and libraries, as it is flexible enough to store many different types of data. wormtable is portable, and has been tested on big- and little-endian platforms with  <dig> and  <dig> bit word sizes, along with many operating system combinations. to take advantage of the advanced data processing features of wormtable all that is required is a conversion program, a considerably simpler task than designing and supporting a custom binary file format.

the library supports efficient access to any data stored in wormtable format, and currently provides conversion utilities for the vcf and gtf formats. the most important aspect of future development is to develop tools to convert other tabular formats such as psl, gff, sam and bed to wormtable format. such tools are not difficult to develop, since all that is required is a parser for the format in question written in python.

wormtable is currently limited to supporting python, and another important aspect of future development is to create a c library along with bindings for other popular languages such as perl, r and php. wormtable does not support interval search, and so it is not straightforward to find, for example, all rows overlapping a given genomic region in gtf files. this problem has been solved several times, however, and we aim to adapt existing techniques  <cit>  and incorporate them into wormtable. compression of data can result in poor performance, but it is often necessary when volumes of data are very large. thus, we plan on introducing optional compression of the data file in wormtable in a future release. beyond these additions, it is difficult predict the precise direction of future development since this depends on feedback from the community. wormtable is an open and collaborative project actively seeking feedback and contributors.

CONCLUSIONS
the volume of data being produced in biological research is growing rapidly, but the tools available to end users to process data are still mostly based on parsing plain text. this approach is very inefficient, and leads to several undesirable outcomes. firstly, and most obviously, a researcher’s productivity is inevitably constrained while waiting several hours for the result of a simple calculation. without flexible indexing, working with a subset of a data file usually requires the creation of another file consisting of the subset in question, requiring extra storage and maintenance. additionally, code quality is reduced, since testing over the entire dataset is infeasible and it is less likely that the effects of changing arbitrary analysis parameters will be systematically examined.

the classical approach to solving problems of this type is to use a relational database, which provide sophisticated data management techniques. however, relational databases are unsuitable for storing static datasets as they are complex to use and incur many unnecessary overheads. wormtable provides the most important features of database technologies  without additional complexities and overheads. wormtable’s data model is also less rigid than relational databases, supporting, for example, columns containing a variable number of integers. finally, wormtable is far more adaptable than a relational database. all widely used database systems are complex and adding required features  would be very difficult. adding new features to wormtable, on the other hand, is straightforward because it is far simpler and does not need to be compatible with the relational model and decades worth of existing software.

the most important aspect of wormtable is its efficiency and ease of use for end users, and we illustrated these points using some examples of vcf data. after converting a file in vcf format to wormtable using vcf2wt a user can process the data very efficiently using python. accessing data from rows in wormtable is many times faster than is possible by parsing rows encoded as text. this is also a very convenient way to access vcf data, since individual columns are already parsed and all that is needed is the name of the column of interest. to access regions of the genome efficiently the user simply needs to create an index on the chromosome  and position  columns using the wtadmin add command. wormtable is not limited to vcf, but can store any form of fixed tabular data. we provide a conversion tool for the gtf format, and several others are planned or could be contributed by users.

wormtable is not intended to replace text files as the universal interchange format for biological data. it is intended to provide a persistent data structure that can be efficiently processed and searched. using this data structure, researchers with no knowledge of database systems can take full advantage of sophisticated data management techniques, and write straightforward code to process data efficiently. different file formats can be handled consistently in wormtable, reducing the need for third party libraries to parse complex files and simplifying the code required to process data. together, these advantages of increased performance and reduced code complexity can substantially increase a researcher’s productivity and ability to explore their data.

availability and requirements
project name: wormtable.project home page: https://pypi.python.org/pypi/wormtableoperating system: posix.programming language: c, python.other requirements: berkeley db  <dig>  or later.license: gnu lgplv3+.any restrictions to use by non-academics: none.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
jk conceived the project, developed wormtable source code and associated scripts and drafted the manuscript. rn wrote the tutorial and contributed to the example scripts and the manuscript. dh wrote the example scripts and vcf-utils, and contributed to vcf2wt, the tutorial and the manuscript. all authors read and approved the final manuscript.

