BACKGROUND
the genealogical relationship between sequences in a population is an important issue in recent analyses of the dynamics of sequence evolution at the population level. the genealogical relationship among a number of sampled sequences drawn from a particular generation of a large haploid population can be modeled using the kingman’s coalescent process
 <cit> . this method has been successfully applied in haploid type data such as bacteria simulation, the estimation of population genetics parameters, and the inference of demographic events. however, the coalescent process involves no recombination and this cannot be ignored when studying diploid populations. for example, the histories of different loci in a genomic region may differ due to recombination events.

the first model of coalescence with recombination was described by hudson
 <cit> . this was shortly after kingman’s coalescent process was formulated. due to the increased complexity added by recombination, a graph rather than a single tree is needed to describe the genealogical relationship. this graph, called an ancestral recombination graph , is made up of many local coalescent trees
 <cit> . an arg can be considered a random graph. each branch in the arg represents a lineage that carries some ancestral material to the sample. here, the term "ancestral material" refers to chromosomal regions that are eventually inherited by any of the samples of interest drawn from the present-day population. the node in arg at which two branches converge denotes a coalescent event, and the node at which one branch splits into two denotes a recombination event.

an algorithm that can rapidly generate independent args from populations evolving with both coalescence and recombination can be of great use. first, they can facilitate data analysis. samples produced using various models can be combined with data to test hypotheses. second, it can be used to estimate the recombination rate. the question of whether recombination events are clustered in hotspots is of enormous interest at present. it also has considerable relevance to the efficient design of association studies
 <cit> .

there are two main representative algorithms that can simulate arg according to a given recombination rate. one is hudson’s ms
 <cit> . it is the simplest and is used in many applications. the other is wiuf and hein’s spatial algorithm
 <cit> . these two algorithms stress different aspects of the process. the algorithm of ms has a markovian structure and is computationally straightforward. ancestral lineages related to the sampled chromosomes remain unchanged until coalescence or recombination. in contrast, wiuf and hein’s spatial approach of simulating genealogies along a sequence has a complex, non-markovian structure. the distribution of the next local tree depends on all previous local trees rather than on the current genealogy alone. it begins with a coalescent tree at the left end of the sequence and adds more different local trees gradually along the sequence, which form part of the arg. the algorithm terminates at the right end of the sequence when the full arg is determined.

to compare existing algorithms, the recombination events in history were classified into five types
 <cit> : type 1: recombination with breakpoint located in ancestral material; type 2: recombination with breakpoint located in non-ancestral material with ancestral material on both sides; type 3: recombination with breakpoint located in non-ancestral material with ancestral material on only the left side; type 4: recombination with breakpoint located in non-ancestral material with ancestral material on only the right side; type 5: recombination in an individual carrying no ancestral material. these five types of recombination are shown in figure 
 <dig> figure  <dig> 
five types of recombination in the history of a population.




because only type  <dig> and type  <dig> contribute to the gene structure of the sample, arg should in principle contain only these two types of recombination and the branches containing other types of recombination are regarded as redundant ones in simulated arg. it seems that ms is the briefest way to simulate the arg according to its distribution because it considers only type  <dig> and type  <dig> recombination. wiuf and hein’s method also simulates the other three types of recombination, which may produce some redundant branches and increase computation burden in generating arg. when simulating hundreds of thousands of args with a large recombination rate is required , even ms is not efficient enough, neither is it easy to approximate. although the original spatial algorithm of wiuf and hein’s method produces a lot of redundant branches, several approximate spatial algorithms have been developed to reduce the redundant branches in arg and simulate large samples of long sequences
.

likelihood-based inference is one statistical method that is commonly used to apply the corresponding algorithm to estimations of the recombination rate. the likelihood can be estimated by simulating args from the coalescent distribution given the recombination rate r and mutation rate θ. the simulated data can be examined to see if they match the observed data. by repeating this process many times with different values of θ and r, maximum likelihood estimations of the statistics can be obtained
 <cit> . however, because the vast majority of args is not consistent with the sample and contributes nothing to the likelihood, this naïve method is infeasible. with a complete history, it is easy to calculate both the probability of the data and of the history given the coalescent model and associated parameters. the central difficulty is that, from an essentially infinite set of histories that could give rise to the data, it is hard to find histories that are highly probable under the assumed model. there are two approaches that have been developed to handle this difficulty
 <cit> .

the first approach involves sophisticated monte carlo methods such as importance sampling
 <cit>  and markov chain monte carlo
 <cit> . mcmc starts from an initial guess and then tends to make subsequent modifications that are more likely to be accepted, with a probability that is proportional to how likely they occur under the assumed model. importance sampling approximates the optimal proposal density to calculate the likelihood. both methods create bias towards the simulation of args, which makes significant contributions to the likelihood.

as a supplementary method, the second approach of estimating recombination rate is to simplify or approximate the coalescent model itself. based on wiuf and hein’s spatial point of view, mcvean and cardin developed sequentially markov coalescent , an approximation of the standard coalescent process
 <cit> . this algorithm reduces the topology simulated to a tree rather than a graph. if two ancestral lineages have no interval in common where they share ancestral material, they are not allowed to coalesce. by restricting coalescent events in this way, the resulting process has a markovian structure in the sequential generation of genealogies along a chromosome. the smc starts with a coalescent tree at the left-hand end of the sequence and progressively modifies the tree with recombination events as it moves to the right. marjoram and wall modified the approximation
 <cit> . in their system, the old lineage is not removed until after the point of coalescence of the new one has been determined. this allows for the possibility that the new lineage coalesces with the one that was to be erased and that no change occurs in the genealogy. chen, marjoram, and wall described an intermediate approach , which is a compromise between the accuracy of the standard coalescence and the speed of the smc
 <cit> . in the smc, coalescent events are restricted to edges within the last local tree only. while in macs, coalescent events are restricted to edges among any of the last k  local trees. it models the relationships between recombination events that are physically close to each other and treats those that are far apart as independent.

the essence of these approximate methods is to simplify the recombination of type  <dig> events and the coalescence of lineages that contain distant ancestral material. these methods offer significant improvements with respect to computational efficiency and sequence length. however, the effects of these simplifications have not yet been clearly classified.

this paper reports the establishment of a new method of modeling coalescence with recombination. it offers several improvements over that of wiuf and hein’s method. a new algorithm based on the new model is proposed to generate args equal to ms. similar to the algorithm designed by wiuf and hein, the present algorithm constructs arg spatially along the sequence
 <cit> . however, it will not produce any redundant branches, which are inevitable in wiuf and hein’s algorithm. it is here suggested that the above approximate methods  be viewed as special cases of our new algorithm. using simulated analysis, the present algorithm was compared to macs. the time to the most common ancestor  in the local trees of args generated by the present algorithm was even more similar to that produced by ms than that produced by macs was. the present method can generate sample-consistent args, which might significantly reduce the computational burden.

RESULTS
model assumptions
this present work was performed with the same assumptions as those made by griffiths and marjoram
 <cit> :a gene, here treated as a length of dna, is represented by the unit interval [ <dig> ).

the population is assumed to evolve through discrete generations in a wright-fisher manner, which means that each generation is of 2 n genes in size. as usual, time is measured in units of 2 n generations. n → ∞ and 4nr → ρ remains fixed, where r is the regional recombination rate per generation per gene, and ρ is the global population recombination rate.

the present algorithm was designed under the infinite sites model, in which the mutation is independent of the coalescent with recombination so that it occurs with a poisson distribution on the arg.

in the present algorithm, a gene copies the genetic information of its parents if recombination does not occur. if recombination does occur, only one breakpoint is assumed and the genetic information of the gene comes from its parents. specifically, each gene chooses its parents from the previous generation according to the following rules: a) with probability 1–r, a gene from the previous generation is uniformly chosen; b) with probability r, a recombination event occurs, and two genes are uniformly chosen from the previous generation; c) each gene chooses its parents independently.



meanwhile, the position of the breakpoint s is selected  according to a given distribution with density p. the intervals [ <dig> s) and [s,1), which are from the first and second parents, respectively, form the offspring gene. here the random variable s possesses a continuous distribution.

generation of arg along sequences with sc
generating arg is key to simulating coalescent processes with recombination. most studies of theoretical population genomics do not generate arg, even though many algorithms have been developed to do so. these include hudson’s ms
 <cit> , wiuf and hein’ algorithm
 <cit> , chen et al.’s macs
 <cit> , smc
 <cit> , and smc′
 <cit> . these algorithms can be roughly classified into two categories according to the different methodologies they use. one generates arg back in time. hudson’s ms is a representative example
 <cit> . it is the most accurate algorithm because of its complete arg space. the other generates arg by gradually constructing a series of local trees along the sequence, such as wiuf and hein’ algorithm
 <cit> , macs
 <cit> , smc
 <cit> , and smc′
 <cit> . these algorithms are collectively called spatial algorithms. particularly, macs, smc and smc’ are approximate spatial algorithms, which can generate arg with longer sequences than ms can because they lose some information during the generation of arg space.

in this work, a new spatial algorithm called the spatial coalescence simulator  is proposed. it generates arg more accurately along the sequence than other spatial algorithms do. if xs denotes  segments of the arg, and
denotes the local tree of s-site, then x <dig> =
is a standard coalescent tree without recombination, and x <dig> is the total desired arg. the basic idea underlying spatial algorithms is constructing the arg from x <dig> to x <dig> step by step. this process can be generalized into the following brief steps and the full version can be found in methods.

step  <dig>  j =  <dig>  s0 =  <dig>  build a standard coalescent tree x <dig> 

step  <dig>  generate a breakpoint of recombination sj +  <dig> in the interval [s,1) and choose a location from the current arg xsj .

step  <dig>  build a new arg xsj+ <dig> by adding a new coalescent branch to the current arg xsj, and the coalescent event begins from the selected location and ends to any position of xsj.

step  <dig>  repeat steps  <dig> to  <dig> until sj+1 >  <dig>  and then take the total arg x <dig> as the arg xsj.



with a joint consideration of all the five classification types of recombination, we can reach the following conclusions: 1) the location of type  <dig> recombination must be on
rather than the whole current arg xsj; 2) the location of type  <dig> recombination must be on the other branches of xsj which are called ‘old branches’ ; 3) not all recombination with location on old branches are type  <dig> recombination. further, because each branch of
contains ancestral material of sj-site, and the next break point is sj+ <dig>  therefore, each branch of
contains ancestral material of [sj,sj+1), and it must be type  <dig> recombination. with respect to recombination on old branches, the only information that can be obtained is that there could be ancestral material on [ <dig>  sj) with an algorithm generating arg without redundant branches when determining xsj+ <dig>  it is also certain that there must be no ancestral material on [sj,sj+1), but it is not clear whether there is ancestral material on [sj+ <dig>  1).figure  <dig> 
an example of current arg. the graph displays the  part of an arg, the black lines represents branches constituting the current local tree, the gray lines represent all old branches, the numbers in brackets display intervals which denote the ancestral materials carried by nearby branches, the numbers without brackets denote recombination rates occur in the underlying nodes.



based on these conclusions described above, the following can be obtained:wiuf and hein’s algorithm simulates type  <dig>   <dig>  and other three types of recombination events because this algorithm fixes any recombination breakpoints without determining its type during step  <dig>  it is therefore obvious that wiuf and hein’s algorithm generates more redundant information than ms .

macs simulates only type  <dig> recombination events and does not consider other types. this is because, during step  <dig>  macs just fixes the type  <dig> recombination breakpoints by choosing a location from the current tree, but not the whole current arg. in this way, macs ignores type  <dig> recombination information which ms does not.



now the key problem for spatial algorithms is distinguishing type  <dig> from type  <dig> and adding useful recombination to the final total arg.

to solve this type of problem, a new algorithm is here proposed to distinguish type  <dig> from type  <dig> events. in this algorithm, it is type  <dig> rather than type  <dig> recombination events that are entered into previous local trees after the latter type  <dig> breakpoints have been fixed. specifically, the second step of this process differs from that of wiuf&hein’s, which we put recombination break points on the current local tree instead of the current arg. this caused the type  <dig> recombination breakpoints to be fixed after step  <dig>  then step  <dig> is refined: a coalescent event beginning at the selected location was added to the current tree, and the end of the coalescent event is also located. if the location is on an old branch, then type  <dig> recombination breakpoints can be found back on this old branch. finally, a full arg can be built without missing any type  <dig> recombination events.

in this way, the new algorithm can be formulated as a sequence of random variables {, i ≥ 0}, where si are the type  <dig> recombination breakpoints and zi describes the branches added at the break location of the arg xsi- <dig> . they include type  <dig> recombination breakpoints and corresponding coalescent events.figure  <dig> 
generation of arg along sequence. x
s denotes  segments of the arg, s
i denotes the i
th type  <dig> recombination breakpoints and z
i denotes the branches added to x
si- <dig>  x
si is the collection of z
i and x
si- <dig> 



in fact, the probability distribution on arg space generated by this algorithm, which is based on a spatial model along a sequence, is identical to that produced by an algorithm based on the back-in-time model. to see this intuitively, we construct the whole arg by constructing its constrain or projection on [ <dig>  s) from s =  <dig> to s =  <dig>  the difference between the constrain of [ <dig>  sj) and [ <dig>  sj + 1)  can be more than  <dig> branch. that’s because if there is a recombination with break point in [sj, sj + 1), we can obtain it at least when we obtained xsj+ <dig>  so, in order to get xsj+ <dig>  we choose to add one or more than one branches to xsj.

the experimental proof of the above identification can be seen in the performance of sc and sc-sample section. the details of the procedures associated with the present algorithm can be found in the methods section. the mathematical framework of the algorithm is provided in another paper
 <cit> .

generate sample-consistent arg
the idea of sample-consistent arg first appeared in the work of song
 <cit> . in their study, arg was used to estimate the minimal number of recombination events. arg with the minimal recombination numbers definitely helped the study of recombination. we do not think that arg with minimal number of recombination represents a true arg. therefore, we attempt to design an algorithm that can model a group of arg which are consistent with sample in a reasonable way, rather than simply produce all the args in the whole arg space, neither does it generate args with minimal number of recombination events. we believe that by this way our method generates sample-consistent args which reflect true genealogical information of the samples and it will definitely help us estimate parameters of population demographic history.

in the present study, we further modified the sc algorithm to generate sample-consistent arg. one arg is called sample-consistent if the given sample of sequences can be generated using the arg under the infinite sites model, which means that each site on the sequences can be explained using the local tree of the arg. an example of sample-consistent arg is given in additional file
1: figure s <dig>  notably, sample-consistent arg is a very small part of the full arg space. in our simulation study with ms, less than  <dig> sample-consistent args were found in millions of simulated args. the algorithm described above, sc, was modified slightly. we therefore developed a new algorithm called sc-sample, with which sample-consistent args can be generated. suppose there are sample sequences with  <dig> and  <dig> coded for different alleles, then, the procedure of this sc-sample algorithm can be described as follows: step  <dig> generate a standard coalescent tree x <dig>  which is consistent with the left site of the sequence.

step  <dig> one by one, confirm whether the following sites are consistent with the current tree x <dig>  and find the first inconsistent site p <dig>  then generate a breakpoint of type  <dig> recombination s <dig> in the interval , and choose a location from the current arg x <dig> 

step  <dig> build a new arg xs <dig> by adding branches to x <dig> at the chosen location to make the local tree after s <dig> consistent with the first site after s <dig> 



repeat step  <dig> to  <dig> until sj + 1 >  <dig> to get an arg consistent with the sample for the full sequence.

performance of scand sc-sample
it is here proven that the distribution, i.e. the statistical properties, of the arg generated by sc coincides with that generated by ms
 <cit> . macs  was found to simulate all the type  <dig> but no type  <dig> recombination. in order to determine the equivalence of sc and ms and assess the influence of type  <dig> recombination, the mean and variance of the first  <dig> local trees generated by sc, ms, and macs were compared . the difference between sc and ms and that between macs and ms were determined separately using the difference of mean of the local tree’s height and variance of the local tree’s height, respecting the mean and variance of ms’s local tree’s height, details in methods. twenty haplotypes were simulated for a total of  <dig>  rounds with ρ of  <dig> at l = 167 kb.figure  <dig> 
comparison of differences in the mean and variance of the first  <dig> local trees’ height between sc and macs using
ms
as a control. boxplot with 75% quantile and 25% quantile as top border and the bottom border, respectively.



the present results show that sc is more similar to ms with respect to both the mean and variance of the tmrca than macs is. this confirms that the results of the theoretical study that args generated by sc and ms share similar statistical properties, indicating that sc performs better than macs in the modeling of arg.

in practice, it is very important to take into account the time cost and the ram usage of the computer programs that implement the algorithm. the two values were the average of  <dig> replicates between sc and ms. results are shown in table 
 <dig> for n =  <dig>  n =  <dig> and n =  <dig> sequences using different recombination rate parameters ρ = 4nelrp. the results show that ms runs slightly faster but needs more ram, though sc and ms share similar statistical properties. in addition, even the latest version of ms cannot simulate sequences as long as those sc does.table  <dig> 
comparison of average time cost and memory usage between
sc
and
ms


sc
ms
memory usage  is in parentheses. mb: sequence length in million base pairs. n/a entries denote test cases that were terminated when we ran on a server with  <dig> cpus of  <dig> ghz and 24gb for total memory. ρ denotes the population recombination rate.



next, the performance of sc-sample was evaluated. two hundred samples were generated with different recombination and mutation rates. then sc-sample was used to generate  <dig> args that were consistent with each sample. consistency was confirmed by adding mutations to the arg. then the recombination and mutation parameters of humans were used to repeat the experiment shown above. then  <dig> independent genealogies of  <dig> chromosomes were generated and complete sequences were simulated, each with an interval of 30 kb. a constant c =  <dig>  cm/mb was assumed, which is the sex-averaged recombination rate
 <cit> . the per-site mutation rate was assumed to be 1× 10- <dig>  and the effective population size was assumed to be  <dig> . the ratio of strictly sample-consistent arg generated by sc-sample and sc were calculated, the results are shown in figure 
 <dig> figure  <dig> 
ratio of strictly sample-consistent args to all args. args are not considered strictly sample-consistent unless they are both sample-consistent and the number of type  <dig> recombination of that arg is within 10% of estimate using  <dig>  simulations in  <dig> different cases. case 1: ρ =  <dig>  μ =  <dig> with sc-sample. case 2: ρ =  <dig>  μ =  <dig> with sc-sample. case 3: ρ =  <dig> ,μ =  <dig>  with sc-sample, which employ the mutation rate and recombination rate in human. case 4: ρ =  <dig>  μ =  <dig> with sc.



because there is no available sample-consistent algorithm for comparison, the performance of the sc-sample algorithm could not be fully evaluated. however, the result shows that sample-consistent args randomly chosen reveal directly some recombination information of the sample. the numbers of recombination events of the sample-consistent args are close to the mean number of samples . that means the sc-sample generated sufficient numbers of args which are close to the true recombination events without generating many args that were inconsistent with samples. sc-samples may be very helpful in estimating the recombination rate in the future, considering that full sequence data are now becoming available.figure  <dig> 
distribution of number of type <dig> recombination in args generated with sc - sample. the red vertical line indicates the expected number of type  <dig> recombination in a particular scenario.




discussion
in the present study, a new method for modeling coalescent processes with recombination was developed. this method offers some improvements over wiuf and hein’s method. it covers all the commonly used spatial simulation algorithms with approximations, i.e. smc, smc′, and macs. based on this method, a new algorithm, sc, was developed for the simulation of arg and the generation of data. this algorithm has been shown to be able to simulate arg with the same distribution as that produced by a back-in-time simulation algorithm. another relevant algorithm, sc-sample, was also developed for generating sample-consistent arg. the present method and algorithms have considerable potential to facilitate modeling and statistical inference of recombination.

another study showed that the distribution of arg generated by the new algorithm is identical to that generated by a typical back-in-time model
 <cit> . in this study, computer simulation experiments confirmed that this feature was common to both the back-in-time method and the along-sequence method with respect to the simulation of arg. in practice, sc takes slightly more time than ms for the same simulation but use less ram. however, ms does not work as well as sc when the sequence is very long . these comparisons indicate that neither of these two methods can generate arg of long sample sequences in a satisfactory manner. considering the above situation and rapid accumulation of huge genomic data, one possible solution or a tradeoff could be effected by approximating arg to replace full arg.

several approximate methods have been developed for the simulation of arg, such as the sequentially markov coalescent , a related method called smc′ and markovian coalescent simulator . these existing methods can be considered as special cases of the present method. marjoram and wall classified recombination into  <dig> types
 <cit> . however, these methods all ignore type  <dig> recombination and some of the coalescent events associated with it. this may affect arg reconstruction and statistical inference of recombination.

the influence of type  <dig> recombination on arg was assessed by comparing the statistical properties of ms, sc, and macs . it was concluded that ignoring type  <dig> recombination would reduce both the mean and variance of the times to mrca, although the reduction is not very remarkable. these results indicated that type  <dig> recombination might play a more important role in history than type  <dig> recombination. however, type  <dig> recombination was found to be present extensively and much more common than type  <dig> when long sequences are considered and simulated, suggesting that this type  <dig> recombination should not be ignored in simulation, especially for the simulation of long sequences. therefore, an algorithm that takes into account type  <dig> recombination should be used for the simulation of long sequences. this is one of the reasons why the sc algorithm was developed.

during the simulation of recombination, regardless of which algorithm was used, the process is complex and time consuming. many non-sample-consistent args are generated. for this reason, a new concept, sample-consistent arg, was developed, and an algorithm, sc-sample, was used to simulate sample-consistent arg. however, on the one hand, simulations based on sc-sample save a considerable amount of time and significantly increase efficiency over that of any non-sample-consistent algorithm.

taken together, the two algorithms developed in this study improved the modeling of coalescence with recombination. in a future study, new approximated methods should be developed to handle large-scale simulation of big data. coalescence with recombination can be modeled using a random sequence { : i ≥ 0}. these different methods of approximation actually use different si and zi. one possible solution is to approximate the random sequence { : i ≥ 0} from the mathematical aspects. these methods, when well established, can greatly facilitate studies of recombination modeling and recombination rate estimation.

CONCLUSIONS
in this study, we developed a new method for modeling coalescent processes with recombination, and we demonstrated that our method has comparable performances with ms in generating arg, a computer program commonly used to simulate coalescence. an outstanding feature of our method is that it does not produce any redundant branches which are inevitable in wiuf and hein’s algorithm. in addition, our method can generate sample-consistent args. interestingly, we elucidated that the existing approximate methods  are all special cases of our method. we believe our new method and algorithm will facilitate the modeling of recombination and advance our understanding of evolution of recombination events within and between populations.

