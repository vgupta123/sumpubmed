BACKGROUND
sketchbio is a new tool to help scientists think about 3d molecular structures and interactions and to communicate them to others.

we found ourselves repeatedly using 2d hand-drawings of complex 3d structures and their interactions in discussions with our close collaborators in cell biology, pathology, and chemistry, despite the fact that the 3d crystal structures of the proteins making up these structures were known. overall structure comprehension was advanced when a hired artist produced 3d scale models and computer models of the structures  <cit> . our group is not alone. discussions among collaborators are often done using 2d whiteboard sketches. presentations often consist of pasted images and 2d powerpoint animations.

due to the difficulties involved in learning and using 3d modeling and rendering software, many scientists hire professional computer programmers and/or animators to work with them to create models and animations rather than use these programs themselves. this indirection both slows the discovery process and provides opportunities for miscommunication. this paper describes an effort to provide scientists with a tool that is so rapid to learn and powerful to use that they can create these models and animations themselves.

this tool should be general and widely useful. many researchers studying cell structure and physiology seek to construct and evaluate dynamic models that incorporate random thermal motion as well as conformational changes induced through intermolecular interactions. discovering, testing, and communicating hypotheses about these interactions requires the development of complex animated 3d molecular structures. modeling, simulation, and rendering these hypothetical scenarios involves using a number of tools and databases  and then converting files to pass geometry and animations between tools. it also involves manual placement and orientation of 3d objects, which is currently done using 2d input devices and by-eye detection and avoidance of collisions. as a result, it often takes a team months to produce an acceptable model or animation.

the aim was to produce a tool that reduces this to a single person working for hours or days.

this paper describes that tool, sketchbio.

driving problems
fred brooks posits that the best way to construct a tool that is generally usable is to focus on several very different specific problems and build a tool that solves them  <cit> . this approach was followed here.

the first driving problem for this project was to construct a protofibril model based on geometric constraints among a set of individual fibrinogen molecules. the protein fibrinogen is the main component of blood clots, where it is converted into fibrin and links together with other fibrin molecules to form strands. two of these strands join together to form a protofibril, which form thick fibers that make up a large portion of the blood clot. based on the crystallized structures of fibrin monomers from different species and on only two sets of known interactions  <cit> , one collaborator sought to construct 3d protofibril structures matching those seen in her data, which suggested a structure in which two fibrin strands twist around each other, and wanted to create a model that shows this interaction at the molecular level. over several months, this collaborator and her students worked with a computer scientist to use the powerful ucsf chimera tool to construct such a model . building this model required repeated iteration of hand-placement of two molecules , followed by using replication tools to develop candidate models, which were then evaluated against the data. the desired use of sketchbio was to construct this protofibril rapidly and semi-automatically by specifying which location on each fibrin should be in close contact with other molecules and by specifying that the molecules do not overlap. this same capability will enable generation of other self-symmetric structures such as actin filaments and microtubules.

the second driving problem was to construct 3d models and animations of the interaction between actin filaments and vinculin. actin filaments are one of the three main components of a cell’s cytoskeleton, and the protein vinculin binds to actin filaments, connecting them to other actin filaments or different proteins.

the third driving problem was to construct models of the mitotic spindle, a structure that separates chromosomes during cell division. as in the fibrin case, each step of model generation required support from an artist, animator, and/or programmer to convert a collaborator’s concepts into geometry for rendering and simulation.

the final driving problem involved cell division . many proteins beyond cohesin and condensin contribute to mitosis. scientists are able to fluorescently label both these proteins and chromosome locations and determine relative distances and orientations between pairs of proteins. with accurate localization and tracking for 3d images, these techniques provide partial information on the 3d layout of proteins and chromosomes in wild-type and mutant mitotic spindles. building models to match this information requires the development of semi-automatic layout of proteins. this will provide a partial set of constraints for scientists to construct protein-protein and protein-chromosome complexes that match experimental data. with these enhancements, sketchbio could be widely useful to other researchers for the generation of hypothetical protein-complex structures from partial data.

design goals
the application-specific needs from the above collaborators can be summarized as a set of domain-independent design goals for sketchbio:

easy to learn and to use. scientists must be able to rapidly construct models and animations on their own using interfaces that enable them to concentrate their mental efforts on the design challenge rather than decyphering the interface.

support molecular operations. it must be easy to load molecules, extract the relevant substructures, describe conformational changes, group molecules, and color according to standard data.

appropriately constrain layout. some molecular structures should not overlap, others  overlap as part of their function, others  assemble into repeated structures. in some cases, the distances between individual elements is known but their 3d layout is not. supporting all of these cases will enable a biologist to most rapidly explore the space of possible conformations to produce consistent models.

support rapidly iterated, in-context design. understanding the interactions between dozens of molecules requires repeated adjustment of proposed locations and motions. the reasonableness of interactions depends on nearby molecules, which change over time. generating consistent models requires trying and optimizing many potential solutions before the final model is found.

support high-quality rendering. once a proposed model has been completed, static and animated images that use the most-effective lighting and surface rendering techniques are critical to conveying the model and its behavior to others.



prior work
molecular modeling
there are many excellent molecular modeling applications that have been extended to include some aspects of high-quality rendering and animation. ucsf chimera  <cit> , pymol  <cit> , graphite life explorer  <cit> , and visual molecular dynamics   <cit>  are the most relevant. other software such as protein explorer  <cit>  and ez-viz  <cit>   attempt to offer easy-to-use interfaces for exploring molecular structures.

vmd includes direct force-feedback-based placement and manipulation of molecules in the context of driving molecular dynamics. sketchbio provides bimanual control of much larger sets of molecules by reducing the physics to only what is necessary to avoid improper collisions and provide appropriate spacing, enabling large-scale geometric modeling and animation.

graphitelifeexplorer includes the ability to position and twist segments of dna and interpolate the sections between them , but does not yet perform collision detection between molecules, the ability to support animation, or the ability to maintain specified distances between objects as needed.

the approach of extending the interaction and rendering capabilities of one of these tools was considered, but this would require re-implementing existing rendering techniques and continual updating as new rendering advances are made. the decision was made to harness the power of the existing tools through their built-in scripting languages .

rendering
there are also excellent general-purpose rendering programs  and microscope-simulation rendering tools . several groups are building molecule-specific loaders that plug into these programs, such as autofill/autopack/autocell  <cit> , and molecular maya  <cit> . the bioblender package also leverages blender for molecular modeling and supports collision detection  <cit> . these each require the scientist to learn the underlying complex rendering tool plus additional plug-in interfaces, making them less easy to learn and use. none of these tools currently support constrained layout along with rapidly-iterated, in-context design.

molecular flipbook  <cit>  aims at similar goals to sketchbio, providing an easy to use molecule-focused real-time interaction environment coupled to offline rendering using blender and ffmpeg. it does not currently support constraints on layout or bimanual interaction for rapid 6-degree-of-freedom placement. this approach was also considered, but providing full capability would require re-implementing many existing capabilities already available in molecular modeling tools and tracking new features as they are developed.

interactive animation
the molecular control tool-kit  <cit>  is also aimed at molecular modeling, providing gesture- and speech-based user interface primitives to control motions of molecules with a kinect or leap motion device  <cit> ; it provides an api that can be used to connect their controls to existing molecular modeling applications. these do not by themselves meet the needs specified above, but could be used within sketchbio as a separate front-end interaction interface. sketchbio uses similar two-handed 6-degree-of-freedom input devices , adding collision detection and several custom capabilities, and tying the resulting system into existing powerful molecular modeling and rendering tools to produce a complete system for thinking, modeling, and rendering.

another tool aimed at simplifying the creation of molecular animations, presentaball  <cit> , uses an interactive web interface to an existing molecular modeling tool. this enables widespread use by non-experts to develop presentation materials for training. sketchbio provides a custom interface for experts to use as a thinking aid that is tied to a powerful rendering engine to produce animations.

sketchbio’s bimanual 6-degree-of-freedom manipulation sets it apart from all of the applications described above because it lets the user move molecules and craft animations more rapidly and with less mental effort than tools that use a mouse and keyboard to manipulate objects. its support of appropriately-constrained layout using several features  meet needs described above that are unmet by any published tool.

interactive rendering
a common bottleneck in interactive modeling and animation applications is the speed of rendering a complex scene. sketchbio requires real-time rendering due to the nature of its input – objects on the screen must move with the user’s hand as if the user were actually holding them.

one approach to improving rendering speed is to reduce the complexity of the objects that are drawn. this is done by replacing objects with imposters which have simpler geometry. one type of imposter is a simplified version of the geometry that is textured to look like the more complex version . another common imposter is a square that has a pre-rendered image of the more complex object as its texture. as long as the viewpoint stays near the same position, discrepancies between the imposter and the actual geometry remain small  <cit> .

the level of simplification of an object can also be dynamically determined according to the amount of rendering time required to draw each level of detail.

another approach to enabling interactive rendering of complex design spaces is to precompute an ensemble of possible solutions and then interactively explore the design space by directly manipulating portions of it and morphing between existing solutions  <cit> . the space of potential molecular interactions for dozens of molecules is so large, and the ease of testing and rendering each configuration so small, that it was more efficient for sketchbio to directly model and render.

sketchbio uses chimera and blender to simplify geometry and the visualization toolkit  library to adjust rendered level of detail  <cit> .

collision detection
in many models and animations, molecules should not overlap one another. if there are n molecules in the scene, then each pair of molecules must be tested for collision. this has a complexity of  in the number of molecules. however, there are typically far fewer collisions than potential collisions and so optimizations can reduce the expected complexity. the best expected complexity uses sweep and prune methods and assumes the primitives are sorted along one dimension. this is  where c is the number of colliding pairs  <cit> .

another approach uses space partitioning to rule out unnecessary tests. the pqp library from the unc gamma group uses a bounding volume hierarchy  <cit> . an alternate is to divide space into bins. only primitives in nearby bins need to be tested. this type of algorithm is especially effective on gpus where many local groups may be run in parallel  <cit> .

sketchbio directly links to pqp and uses it for basic collision detection. it extends these techniques in ways that are specific to the kinds of molecular models being formed to gain an additional order of magnitude reduction in collision tests for some objects.

mash-ups
individual capabilities of web-based applications such as google maps and real-estate listing databasese have been effectively combined to provide combination tools that include the best parts of each. a system for seamless integration of applications for visualization was done by rungta et al. by adding a layer above all of the applications of interest to pass events back and forth  <cit> . sketchbio takes a similar approach, using a novel core component that provides interactivity and custom features but using scripting interfaces to harness the significant modeling and rendering capabilities of existing tools into a seamless workflow.

methods
sketchbio is a system for understanding subcellular biology by building complex 3d macromolecular structures and animating the structures over time.

the modeling and rendering of these hypothetical structures currently involves using a number of tools and databases and converting files and data to pass between tools.

sketchbio harnesses state-of-the-art tools and libraries into a seamless workflow. it brings best-practice interaction and display techniques to bear on molecular modeling, including bimanual real-time direct interaction and shadow-plane depth cues. it adds three novel features that accelerate this workflow: crystal-by-example, pose-mode physics, and spring-based connectors. its design decisions  led to a system that met all of the design goals.

system overviewa screen shot from sketchbio showing three actin monomers on the left colored yellow and the tail region of the vinculin protein on the right colored by surface charge.




molecules in sketchbio are represented as rigid surfaces approximating the connolly solvent-excluded surface of the molecule. these were chosen because the listed collaborators used surface models in their current work for all four driving problems. the surfaces may use solid colors, be colored by surface charge, or be colored by their nearness along the protein backbone to the n-terminus or c-terminus of the protein. chimera is used to calculate and export the datasets for the latter two coloring schemes using pdb data.

object selection is indicated by drawing the outline of the oriented bounding box of the selected molecule molecules. color of this outline indicates whether a group or single object is selected. .

a set of “gift ribbons” drawn on the oriented bounding box indicates that an object has a keyframe at the current time. this was chosen to minimally obscure the molecule and selection indicators.

state-of-the-art capabilities
bimanual interaction
bill buxton and others have described the benefits of two-handed  interaction. he and others observed that bimanual manipulation brings “two types of advantages to human-computer interaction: manual and cognitive. manual benefits come from increased time-motion efficiency, due to the twice as many degrees of freedom simultaneously available to the user. cognitive benefits arise as a result of reducing the load of mentally composing and visualizing the task at an unnaturally low level imposed by traditional unimanual techniques”  <cit> .as seen in figure  <dig>  sketchbio brings bimanual interaction to the construction of macromolecular structures. the entire interface is built around a set of world and root-object manipulation controls in the non-dominant hand and a set of individual-element manipulation controls using the dominant hand.figure  <dig> 
the left hand sets the base molecule while the right hand positions the copies in this two-handed construction of an actin fiber.




sketchbio uses a pair of razer hydra controllers to provide two 6-dof trackers, each of which also has several buttons, a hi-hat controller, and an analog input. this enables a very expressive set of verbs , nouns , and adjectives . this avoids the need for the system to recognize a large set of ambiguous gestures, as is the case for video-based user input. use of this device enables the interface for moving objects to mirror a task users are already familiar with, namely reaching out, grabbing an object and moving it to a new position and orientation.

using one of the buttons to switch between modes provides a sufficiently-large space of commands that almost all operations can be performed without putting down the controllers. keyboard and mouse are used to name proteins and files on initial loading, and to set precise values as needed for one or two operations.

shadow plane
because selection in sketchbio requires placing the tracker within the bounding box of the object, determining the relative depth between tracker and object is an important and often-performed task. initial testing of the application revealed that determining the relative depth between an object and the tracker or between two objects was the most difficult part of using sketchbio. because widespread adoption would be limited by requiring stereo displays and head tracking, another solution was sought.

hendrix and barfield found the most effective techniques for aiding in depth estimation to be a textured plane and lines dropped from the center of an object to the textured plane  <cit> . to provide additional depth cues, sketchbio displays a ground plane that is always rendered below the viewpoint no matter the direction or position of the viewpoint and projects the shadows of objects onto this plane. the trackers also cast shadows onto this plane . sketchbio assumes a light infinitely far away in the default camera’s up direction which gives the same absolute position against the textured surface as the drop-lines while also giving information about how close the boundaries of two objects are to each other. the user can also rotate the camera while leaving the light and shadow plane fixed to get a better understanding of the scene through motion parallax .figure  <dig> 
a screenshot from sketchbio showing colored molecules and a different camera angle to emphasize the shadow plane’s effect.




animations
for scientists creating animations of molecules, sketchbio provides a basic interface to a much more complex system. blender is a production level animation and rendering tool that has an extremely complex user interface with dozens of hotkeys, menus and buttons . blender also has a python scripting interface that provides access to all of its functionality. sketchbio uses this scripting interface to create its animations and render them in a high quality rendering engine, but provides a much simpler user interface. sketchbio provides a set simple operations that is sufficient to meet the animation needs of the driving problems: moving along the video timeline, setting keyframes on objects and viewing a low resolution animation preview.figure  <dig> 
a screenshot showing the complexity of blender’s user interface.




keyframes can modify color and grouping information as well as object position and orientation. these values are interpolated between keyframes using splines to produce smooth motion and changes. the effects of this interpolation can be easily seen by the user by moving along the timeline or using the built-in animation preview. the scene is exported to blender with a set of predefined global settings for effects and position of light sources to produce a full-quality rendering.

grouping
grouping of molecules eases construction of larger order structures and provides smooth animation of objects that should moving together without the small variations that even the most careful hand placement causes. copy and paste is also implemented  even between sessions. additionally, a group of molecules constituting a structure that a user wants to use multiple times in different projects can be saved and then imported, eliminating the need to rebuild large structures. molecules can be added to groups or removed from them at keyframes.

importing molecules
sketchbio generates molecular surfaces using ucsf chimera via python scripting. a custom plugin  was written for chimera’s python interface to export additional data from chimera in the vtk file format. this plugin was contributed back to the chimera developers and is now part of the standard source distribution. this data includes residue and chain identifier that map to a specific location on the surface and electrostatic potential on the surface. sketchbio can use these data sets to color the objects .

novel capabilities
to meet the needs described above, sketchbio supports novel operations beyond those available in the programs and libraries that it harnesses. these include “pose-mode physics” that enables rapid docking of one protein with others, a “crystal-by-example” mode that enables rapid formation of polymer molecular chains, and spring-like connectors to maintain expected distances between molecules. each of these is described, along with how they enable optimization of collision detection.

pose-mode physics
object motion in sketchbio is accomplished by applying forces and torques to pull towards the tracker location and orientation. this can result in the object lagging behind but also smoothes motion, especially rotation.

standard rigid-body dynamics was used as the original collision response in sketchbio. because the manipulated object pushed other objects around, this caused difficulty in assembling molecular groupings.

this was solved by introducing “pose-mode physics”, where the only objects that move are those directly being manipulated. other objects do not move when collision response forces are applied. this also greatly reduces the time taken to compute collision detection .

the first implementation of pose-mode physics only moved the object if its new location after being pulled by the tracker-attracting forces would be collision free. this caused objects to become stuck together and difficult to pull apart because tracker rotation usually introduced collisions even as they forces pulled objects apart. this also prevented sliding objects along each other, which scientists often wanted to be able to do.

in the final implementation, where collision response forces act on the object being manipulated, objects can be slid along one another but not collide.

crystal-by-example
repeated structures formed by replicating a single protein are common in biology , so the “crystal-by-example” feature was added to support their construction. scientists wanted to construct variants of such structures to study the changes caused by mutant proteins and to understand their native packing for comparison to electron microscopy images.

a similar problem is addressed in  <cit>  for dna molecules by letting users edit placement and twist of selected base pairs and interpolating in between these. that system forces the resulting structure to follow a specified path. crystal-by-example inverts this to show the structure resulting from a specified packing geometry: the user places two molecules relative to one another in six degrees of freedom and sketchbio repeatedly applies same transformation for other copies to generate chains of molecules. each replication of the base molecule follows the example set by the first two molecules, with the third molecule’s placement relative to the second molecule being the same as that of the second molecule to the first, and so on. in this way, a repeated structure is formed by manipulating only one pair of molecules rather than tediously moving each individual piece to its proper place, speeding up the process of building structures.
crystal-by-example illustrating how a helix might be formed.




b’s position can be rewritten tb=ta∗tab. the next repeated molecule, c, has position . this can be extended to generate a chain including an arbitrary number of molecules.many biological structures including actin fibers and microtubules  form in structures that can be defined this way. figure  <dig> shows an actin fiber generated this way in sketchbio. by providing live updates of the entire structure as the initial two objects are manipulated, sketchbio lets the scientist explore potential structures in real time.figure  <dig> 
actin filament created with the crystal-by-example function using the transformation matrix from the pdb data from one monomer to the next.




the extent to which the user can control fine-grain manipulations of the molecules depends on the input device, because resolution varies by device. because some structures have a known transformation from one molecule to the next, sketchbio  lets the user input the transformation directly.

collision detection in pose-mode physics and crystal-by-example
in pose mode, collision tests between objects that the user is not interacting with can be skipped because these objects do not move. this means that only collisions involving the objects that the user is moving need to be checked. this reduces the number of collision tests to m∗n where m is the number of objects that the user is currently moving. the typical number of objects that the user moves at a time is  <dig> or a small constant , which reduces the number of collision tests needed to  in this expected case.

there are two ways that the user can interact with a crystal-by-example structure: moving the entire structure as a unit, or adjusting the internal transformation to change the shape of the structure. in the first case, only collision tests between the structure and the other objects in the scene need to be done, and the above bound applies to the number of tests.

in the second case, the internal structure does change and both internal and external collisions must be tested. external collisions must test every object in the structure with every external object as above.

the internal case can leverage the known relationship between the objects to perform fewer tests. let xi be the ith object in the crystal-by-example structure with x <dig> and x <dig> being the two base objects in the structure. let ti,j be the transformation matrix from xi to xj. the definition of the crystal-by-example structure is that ti,i+ <dig> is the same for all i and the geometries of all the xis are the same. because the geometries and transformations are the same, if there is a collision between the ith and th objects anywhere in the structure, then there is also a collision between the 1st and 2nd objects. thus testing only this one pair performs the work of n- <dig> tests where n is the number of objects in the structure. this same argument holds for any i and i+k, the 1st and th objects have the same relative positions and the same collisions. thus only the 1st object in the structure needs to be tested against the others which allows  tests to suffice for all internal collisions in a repetitive structure of n elements.

connectors
sketchbio also has connectors that can be added between objects. these can act like springs and apply forces to keep objects positioned relative to each other or they can simply indicate that two objects are connected. many proteins have regions for which the structure is unknown and these regions can be represented with these connectors. responding to a scientist’s request, the connector end can be snapped to the n-terminus or c-terminus of a protein, removing the difficulty of precise hand placement.

when acting as springs, connectors can have non-zero rest length. when editing a set of proteins some of whose separations are known experimentally , this can be used to specify soft constraints on the 3d layout of the proteins, guiding the scientist away from impossible structures. this greatly reduces the conformation space that must be searched to determine molecular arrangements.

architecture
the architecture of sketchbio is shown in figure  <dig>  sketchbio harnesses external programs when possible  and uses existing libraries for other core functions . it maps from dozens of controls in chimera and hundreds of controls in blender down to  <dig> input options and about  <dig> modeling and animation controls to streamline the tasks needed for creating structures and animations.figure  <dig> 
architecture. sketchbio harnesses existing libraries and programs  to avoid replicating existing state-of-the-art algorithms. it also makes use of standard file formats, devices, and services  to provide maximum interoperability with existing modeling, rendering, and analysis workflows. some techniques are internal, some are harnessed to appear to the user as internal  and some are accessed via standard formats. sketchbio currently includes three types of output: real-time rendering for model and structure comprehension, high-quality offline rendering for animation , and simulated confocal microscopy stacks for analysis and comparison to experiment . it includes custom code only for the real-time interaction, animation, and modeling portions and for its novel features.



exporting data to blender is done through a script run on blender’s python interface to produce the animation. when exporting to microscopesimulator, sketchbio writes out a microscope simulator xml project file and loads the project into microscopesimulator.

objects can be loaded into sketchbio as.obj files from any program that writes this format or directly through the gui . because vtk is used in sketchbio, any file format that vtk can read could be imported with relatively minor changes.

design decisions
listed here are design decisions that helped sketchbio achieve its goals.

bimanual, 6-dof interface
sketchbio’s two-handed interface differs from that of most existing modeling and rendering tools. this has the deficit of taking the user’s hands away from the keyboard, which requires them to put down the interaction devices to enter text and specific numerical data. users report that this small negative is greatly outweighed by the ability to rapidly perform the more-common and more-challenging tasks of specifying positions, viewpoints, and animations in full  <dig> degrees of freedom. the ability to move both the world/viewpoint and an animated molecule enables rapid planning of scenes and the ability to simultaneously manipulate both of the molecules that are coming together in an interaction are two examples of what is enabled.

the workflow tends to stratify: initial loading of the kinds of molecules to be used in an animation happens first . then positions, viewpoints, and animation are described using the buttons and controls on the two hand-held controllers. finally, saving the file and rendering are again performed with the keyboard and mouse. the use of rich input devices enables the bulk of the action to take place from within the 3d environment, accelerating the most-challenging parts of model and animation development.

harness, do not re-implement
the design of sketchbio avoids reimplementing existing features where possible, instead using python scripting to control subprocesses to perform these operations. rather than reading pdf files directory, sketchbio calls ucsf chimera as a subprocess to read in the protein and create a displayable surface from it. instead of writing a new rendering library, sketchbio uses the python scripting interface of blender to create a blender project that will produce the desired animation. sketchbio uses the open source qt and vtk  <cit>  libraries for its user interface and internal rendering and the open source proximity query package  for collision detection  <cit> . the vrpn library  <cit>  is used to communicate with input devices.

one significant risk encountered when harnessing existing programs is that future versions of the programs will not support required features, or will require modifications to the harness. this can make maintainence challenging. to address this, each sketchbio release includes a list of specific versions of the wrapped programs with which it is known to be compatible and programs have been selected that continue to make old versions available . it also includes copies of custom plug-ins and scripts that are not yet part of the harnessed packages’ released versions.

another risk is that the packages used will not be obtainable in the future, or for an operating system of interest. sketchbio has been able to mitigate this risk by selecting open-source programs to harness.

to measure the re-use of functionality, one can compare  the number of state-of-the-art operations harnessed from existing tools: chimera , blender , and microscope simulator  and  the number of internally-used existing libraries: vrpn , pqp , vtk  to  the number of custom operations . most of the operations are supported by existing tools. compared to other tools built by the same research group to support biomedical applications  <cit> , sketchbio has a much better re-use ratio than tools which similarly span different domains  and is on par with tools that are basically wrappers for calls to a single library . it has a better ratio than several single-domain tools . furthermore, the scripting interfaces enable rapid inclusion of additional features from external programs without re-implementation.

usable in-house
the same research group that developed sketchbio has in the past built high-performance molecular graphics applications for scientists that used head-tracked stereo, wide-area tracking systems, and force-feedback displays . the scientists who were willing to travel to the developer’s laboratory to use them received great benefit, but the goal was for sketchbio to be more broadly available. to maximize its impact, sketchbio was designed to run on a laptop or desktop system such as a scientist would have at home or in their laboratory and to use inexpensive commercial input devices.

RESULTS
sketchbio has been used by a several scientists and has demonstrated success in meeting its design goals.

easy to learn and use
to measure the ability of scientists to learn and use the system, sketchbio was shown to a visiting graduate student from nih. she is interested in using the system to study the proteins involved in cell focal adhesions. after a 30-minute training session where she saw us using the system, she was able to use sketchbio to load, replicate, and place the molecules into relevant configurations.

after similar initial training, and with access to the manual, a biochemistry graduate student used the system to generate both static and animated multi-protein models.

he created a model to compare the importance of electrostatics between two different models for vinculin tail interaction with actin  <cit> .

he also created an animation of vinculin binding to an actin fiber for use in a talk, based on the model presented in  <cit> . this video used crystal-by-example to generate the actin and used traslucent connectors to indicate the connection between the head and tail domains of vinculin – a region for which there is no crystal structure. the model in sketchbio is shown in figure  <dig> and a frame from the resulting video at approximately the same time is shown in figure  <dig> finally, he produced both a sketchbio animation and a microsoft powerpoint animation of molecules , as shown in figure  <dig>  to test their relative speed and effectiveness. the powerpoint animation took  <dig> minutes of concentrated effort to produce, while the sketchbio animation took  <dig>  he reports that the powerpoint animation failed to accurately show rotation of the vinculin tail domain, to show the linker region that scales as the domains move apart, to show a change in actin movement rate, and to accurately portray relative size and orientation of the molecules. he reports that the increase in correct presentation of the science was was well worth the increased time.figure  <dig> 
a scene from a video created by peter thompson from sharon campbell’s laboratory at unc in sketchbio. approximately the same timestep is shown rendered at its full resolution in figure  <dig> 
a frame from the video created by peter thompson. this shows the tail domains of vinculin binding to an actin filament and slowing its motion. this video was created in sketchbio as seen in figure  <dig> and rendered via the export to blender feature.
a frame from a 2d animation created by peter thompson for the same case as figure
9
. this video was created in microsoft powerpoint using separately-rendered single views of the proteins.



support rapidly-iterated, in-context design
to measure the speed of complex model construction, a task was repeated using sketchbio that had been done beforehand. constructing the protofibril models for the first driving problem took a computer scientist 3– <dig>  hours by hand-editing transformations within chimera . using an early prototype of sketchbio, he constructed the protofibril seen in figure  <dig> in  <dig>  hours . the lack of depth cues became apparent as he spent most of the time trying to figure out the relative depth between the tracker and the molecules, prompting the addition of the shadow plane. with this addition and other features, he reconstructed the model in  <dig> minutes. in all cases, the desired model was known a-priori; all cases measure time on task and do not count the time spent learning how to use the tool. in this case, sketchbio enabled model creation in about one-fifth of the time for a case of interest to a scientist.figure  <dig> 
a view of the model that joe hsiao, unc staff scientist, created with sketchbio for susan lord to compare usibility with ucsf chimera.




to further measure the effectiveness of sketchbio for the rapid construction of animations, it was used to create an animation of actin and vinculin . researchers were able to load the molecules, replicate them, place them, plan camera and motion paths, and start rendering in half an hour. the first-person design view and available pre-animation were crucial to this process, enabling design intent to be rapidly translated into action and evaluation, resulting in uninterrupted planning and design iteration.

these cases indicate that a series of brief training videos plus the online manual should suffice to get new users started, that scientists are able to use sketchbio on their own, and that sketchbio compares favorably to existing methods of producing animations and structural models.

support molecular operations
the video in additional file  <dig> shows that a user who is familiar with both tools is able to load, select subsets, and attach two molecules six times as fast using sketchbio as using the combination of chimera and blender. as part of development, a chimera plug-in was created to export the standard molecular labelings  in a vtk data structure, enabling them to be used to color the molecules. scientist are able to use familiar pdb file and substructure names to load and extract subsets of molecules. the animation and object-grouping features have been used to produce models and animations meeting their needs.

appropriately constrain layout
pose-mode physics, with the option to turn it off, supports both preventing and allowing overlap between molecules, as appropriate to the task. the crystal-by-example feature has been used to produce both protofibrils and actin filaments from their monomers. fixed-length springs provide the ability to rearrange sets of moluecules while maintaining the specified pairwise separations among them.

support high-quality rendering
the image frames in the paper and video in the associated online materials demonstrate full-resolution rendering with intra- and inter-object shadowing displaying both complex local shape and 3d relationships between objects.

limitations and future work
after successfully using sketchbio for his initial needs, one user requested new features. he is particularly interested in using sketchbio as a thinking tool to determine how mutations in vinculin turn normally-straight actin filament bundles into helices. forming a model to fit experimental data can be challenging. a module is under construction to optimize the placement of molecules based on a set of constraints. the resulting optimization algorithms will enable other scientists to semi-automatically construct multi-protein structures that match negative stain electron microscopy images.

collaborators’ projects have so far involved hand-placed molecules of density sufficiently small to be understood when all of them are visible. thus, sketchbio does not yet support automatically-placed molecules to fill the space, nor does it require complex occlusion-handling procedures. as the user base grows, sketchbio is expected to need to harness importance-based rendering techniques and autofill algorithms to handle a large number of background molecules. these more complex scenes will also require the ability to label important molecules.

the motion of objects could be changed to directly map the user’s hand motion instead of moving toward it via force and torque being applied. this would provide a direct mapping of hand location to object location and possibly a better interface. this could be combined with the collision detection type where objects are only allowed to move to a location if the result is collision free. the disadvantage of this approach is that the smoothing by the forces and torques will not occur; transmitting any jitter in the device input directly to object motion.

sketchbio currently supports only rigid structures for modeling and collision detection. molecular dynamics simulation is something sketchbio does not do directly. this decision was motivated by the time cost of performing the molecular dynamics and the requirement to provide real-time user interaction. sketchbio may eventually harness an external molecular dynamics simulator, but sketchbio will only be used to specify input configurations for the simulation or easily create videos from its output. while sketchbio will not support molecular dynamics directly, a molecular docking capability involving two individual molecules could be added.

to avoid dependence on a particular hardware vendor, sketchbio is being actively ported to use a pair of nintendo wiimote controllers instead of the razer hydra controller. its use of the vrpn library supports switching devices by renaming the device and input for each function; a general-purpose mapping layer has been added that reads from a configuration file to enable the user to customize this remapping. this enables new sketchbio users to continue to use the tool until the next-generation razer hydra is released.

one consequence of the choice to provide a uniform environment that wraps functions from other programs is that not all features of the wrapped programs are available from within sketchbio. this limitation is mitigated by enabling the user to export blender files for later offline rendering and to import arbitrary geometry, but then the user has to learn the complexities of the other tools to use these features. if it is the case that most of these features are needed the interface to sketchbio will eventually become as complex as the sum of the tools it wraps. existing users have been able to develop models and animations without using most of the tools.

CONCLUSIONS
sketchbio is a new tool that enables scientists to rapidly construct and validate hypothetical macromolecular structures, to animate these structures, and to produce high-quality rendered animations. it has been tested and shown to meet its design goals:

easy to learn and to use. scientists rapidly constructed models and animations on their own.

support molecular operations. by harnessing pymol and chimera.

appropriately constrain layout. configurable collision detection, fixed-length springs, and crystal-by-example support all listed cases.

support rapidly iterated, in-context design. real-time 6-degree-of-freedom interaction, live animation preview, and viewpoint control enable embedded design.

support high-quality rendering. by harnessing blender.



sketchbio includes state-of-the art bimanual interaction, drop shadows to improve depth perception, and other standard modeling and animation behaviors .

sketchbio also includes novel interaction and computational techniques that directly support the construction of macromolecular structures. crystal-by-example and pose-mode physics both provide improved modeling capabilities and both enable more-rapid collision detection. spring connectors show unspecified interactions and support semi-automatic structure formation. these capabilities can be added to existing and new molecular modeling tools to provide the same acceleration of model building and evaluation.

both crystal-by-example and pose-mode physics enable real-time collision detection to scale to much larger collections of molecules than are possible using existing techniques that must check for collisions among all objects. the ability to load arbitrary geometry files enables the tool to scale beyond molecule types that can be found in the protein data bank.

the design decisions  led to a system that met all of the design goals and is being used by scientists. the relative benefits of these decisions outweighed their potential pitfalls, making them likely choices for other designers.

sketchbio is built using portable libraries and has been compiled and used on windows, mac os x, and ubuntu linux. the source code for sketchbio, along with descriptions and videos can be found at http://sketchbio.org.

electronic supplementary material
additional file 1:
video showing sketchbio features being used to construct a molecular video.


 abbreviations
pqpproximity query package

vrpnvirtual reality peripheral network

pdbprotein data bank.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

sw was the main system architect and provided most of the implementation. pt provided continuous feedback and guided development. ph implemented some features described in the document. rt supervised the work and implemented coupling to external programs. all authors provided input to the final text. all authors read and approved the final manuscript.

