BACKGROUND
the understanding of basic biological processes, diseases and drug actions depends on the discovery of the biological roles for genes. however, most human genes  are still not confidently annotated using gene ontology for biological process . understanding gene function has recently been advanced by the use of machine learning models  <cit> . models for classifying genes to biological processes, pathways or functional classes have been based on a variety of data from sequences and structures to gene expression under a variety of biological conditions  <cit> . each model has yielded substantially different results from each other as a result of the different learning models used and the type of data. no one model can correctly classify genes for all biological processes, with each model having its own characteristics as to what biological processes classified well. each learning method can identify patterns within the data that the others cannot, relevant to particular biological processes. the models show a complementarity as to what genes are classified and to what biological processes genes are classified, which points to the need to combine the best from all models  <cit> .

individually, the published classifiers have performed poorly overall with misclassification error rates of greater than 70%. ko, xu, and windle  <cit>  solved the high misclassification problem by controlling the error rate using a class-by-class filtering procedure to increase precision, however, this approach sustained a reduction in the number of genes classifiable. combinations of learning models and data have been shown to greatly improve the confidence in gene classification and increase the number of genes classifiable at high confidence  <cit> . however, the combining of models or model ensembles have thus far relied on using similar learning models that yield similar outputs  <cit> . combination of models from substantially different learning algorithms suffers from the problem that the model outputs  are too dissimilar, providing no unified measure for assessing the models for comparison or the framework for combining models in an equitable manner.

in this paper, we have investigated the diversity in performance and output on a class-by-class basis for a collection of different machine learning models using a set of gene expression data. each resultant classifier exhibited a different performance with unique outputs for each biological process class. we developed a unifying measure, precision index , a transformation of the maximum posterior probability as a measure of prediction accuracy that allowed us to not only rank the prediction precision from each model but also provide prediction error at any precision point. the pin measure was used in combining the different models into a modeling process that capitalized on the synergy and complementation within models. this pin combined classifier  resulted in higher number of correct predictions than any single model or method while maintaining high prediction accuracy. the class specific precision measure pic was used in filtering predictions across all models to produce a large set of predicted genes with a desired precision. the results are a substantial improvement in both precision and recall for classifying genes to functions.

methods
combining classifiers
the task of a classifier is to "learn" from the examples in which we know to which classes the observations belong and predict the class for future observations. one can show that under some assumptions, the classification rule "classify x into the class with highest posterior probability p" minimizes the total risk in a sense  <cit> . therefore, performance of a classifier will be dependent upon whether the classifier provides a good estimate of the posterior probabilities of this class membership ). most classifiers provide some sort of estimate of such probabilities but they may not represent probabilities in a strictly stochastic sense. in this paper, we follow the notation used in standard machine learning textbooks  <cit>  and use the terminology "posterior probabilities of class membership )" somewhat loosely.

define maximum posterior probability maxp of x, as maxj p, the maximum value of the class membership probability. the maxp is an index that may be used as an indication of prediction accuracy. for example, if we were to choose a subset of highly confident predictions, we could select predictions whose maxp is large. in general, if the classifier is good, we expect that the higher the maxp, the more reliable the prediction. therefore, along with the predicted class, the corresponding maximum posterior probability maxp could be used to rank the prediction precision.

though maxp could be used as a measure of prediction accuracy, it is not a probability measure in any sense and therefore a maxp from one classifier cannot be compared to the maxp of another classifier unless they belong to the same family of classifiers. consequently, one cannot say the prediction from one classifier is better than the prediction from other classifier based on the order of the corresponding maxp.

in this section, we develop a unifying measure, precision index , as a 'probabilistic' measure of prediction accuracy, which allowed us not only to rank the prediction precisions within each classifier but also to rank the prediction precisions among different classifiers and develop a 'pin combined classifier', which combines and makes a decision rule based on pin measures.

following the information retrieval theory, we define the precision of a set a of predictions as the proportion of correctly predicted elements in a while recall is defined as the proportion of the correctly predicted element in a in the whole data space. consider {), i =  <dig> ..., n} to be the set of predictions from a classifier where fyi is the predicted class for the input data vector xi, yi is the true class, and maxp is as defined above. we define pindex as the precision of the set a = {x | maxp ≥ a}, for  <dig> ≤ a ≤  <dig>  the pindex is estimated by the number of correctly predicted elements in the subset {| maxp ≥ a} divided by the number of elements in the set a.

the function pindex for a classifier is discrete function and could be assumed to be monotonically non-decreasing. this assumption is based on our belief that the higher the maxp, the better confidence we have in the predictions. for some classifiers, the pindex values of each predicted data point could be non-monotonic on some area of maxp, in which case we are not able to use maxp as a discriminant value of goodness of the prediction and pindex estimated under the monotonicity assumption would be constant on the area of such maxp.

the observed pindex of the data point xi is defined as pindex). we estimate a refined monotonically non-decreasing precision index function by fitting an isotonic regression of the data {, pindex), i =  <dig> ..., n}. in this paper, we used an isotonic regression  <cit>  and linear interpolation for the estimation. we will use the notation pin()  as the refined monotone non-decreasing precision index function and the notation pin for pin) for convenience.

unlike the maxp, pin is a comparable quantity among the different classifiers and can be compared to pin values from other classifiers. let m <dig>  ..., and ml be a set of classifiers and pinm <dig>  pinm <dig> , ..., and pinml be the corresponding precision indices  of a point x, and ym <dig>  ..., yml be the corresponding predicted classes. we define a new classification rule "classify x into the class with the highest pin value" and call it the pin combined classifier  or the combined classifier. the pincom has the predicted class yc, and the measure maxmi pinmi is named as maxpin. the measure maxpin plays the role of maxp for the pincom.

recall-precision curve
precision p of a subset {x | pin ≥ a} is estimated as the number of correct predictions divided by the size of the subset and recall r is estimated by the number of correct predictions in the subset divided by the size of the whole set of predictions. the set of points {, r)| 0≤ a ≤ 1} is called the recall-precision curve and used in assessing classifiers. the p and r are the overall precision and recall of the whole sample space and therefore they are of equal value. the primary goal of a classifier is to have a high p value and the comparison of classifiers is often made by comparing p's 's) of the classifiers. in this paper, we are more concerned about selecting a set of predictions with high precision and want to find the classifier that generates the largest of such set. ideally, it would be a classifier that dominates the whole recall-precision curve instead of the overall precision and recall alone.

the recall r measures the fraction of elements in the subset {x | pin ≥ a} that are predicted correctly in the whole prediction space and measures the productivity of the selected predictions of the classifier. the precision p measures the fraction of correct predictions in the given set {x | pin ≥ a}. for a fixed precision p, we can find a classifier that maximizes the recall r among the classifiers and for a fixed recall, we can find a classifier that maximizes the corresponding precision. the task of obtaining the largest set of predictions with fixed precision or the set of highest precision with a fixed recall can be accomplished by selecting the 'optimal' classifier and filtering predictions via its pin values.

recall-precision curves for a set of classifiers are used to assess the classifiers' performance. for a fixed precision value, say p <dig>  each r value that intersects with the vertical line p = p <dig> measures how many predictions are correctly predicted from the corresponding classifier. similarly for a fixed r value, say r <dig> , each p value that intersects with the horizontal line r = r <dig> measures the precisions of the corresponding subset of predictions that yields the fixed r <dig> amount of correct predictions. when a classifier is not efficient in distinguishing the good predictions from the bad predictions, r and p becomes constants for all 'a' and the generated recall-precision curve would become a single point.

the precision curve p is used in finding threshold value a <dig> and the corresponding subset of predictions that reach the given prediction p <dig> by solving the equation p = p <dig> or  where p- <dig> is the inverse function of p). such subset has the recall r. for the classifiers m <dig>  ..., and ml , let pm <dig> ,..., rml and rm <dig> ,..., rml be the corresponding precisions and recalls. the threshold of pin values for the subset that maintains precision p <dig> for classifier mi is ami = pmi- <dig>  and the corresponding r value for the classifier mi is rmi. similarly a subset of predictions whose recall is r <dig> can be obtained by the threshold value ami = rmi- <dig> . the corresponding precision of the subset is p.

for a fixed precision p0= pmi, the corresponding rmi can be compared and the best classifier is chosen as the one that maximizes rmi. equivalently, when an r value is fixed, the desired % of correct predictions out of the whole prediction set is fixed so the pmi values of the corresponding sets are the precisions of the selected sets from classifiers and the best classifier is the one that maximizes pmi. a comprehensive assessment of the classifiers could be made by comparing the whole recall-precision curves.

for the pin combined classifier, we use maxpin in constructing the recall-precision curve, i.e., pc is the precision of the subset {x | maxpin ≥ a} of predictions and rc is the recall of the subset. the pc and rc functions are estimated by the counting the number of correct predictions in the set of predictions. for notational simplicity, we use pinc for maxpin. for previously stated reasons, we assume that the precision curve pc() is a non-decreasing function and recall curve rc() is a non-increasing function. as previously stated, they are estimated by fitting a monotone increasing  function  and linear interpolation for pc and monotone decreasing  function and linear interpolation for rc.

class-specific recall-precision curve
though the overall recall-precision curve is used in selecting the 'best' subset with a fixed precision, the maximum precision of a classifier may not reach the desired precision level. this is often the case when the classifier and the corresponding precision index used in thresholding are ineffective in distinguishing good predictions from bad ones. when the training data itself is noisy, it is hard to build an effective classifier and hence the maximum precision would only reach a moderately large value. though a classifier may not effectively classify elements in all classes, it may classify elements in some classes very well. in such a case, one could select the predictions in the effectively classified classes  <cit> .

in the following, we introduce the class specific recall-precision curve that estimates precision and recall in the set of predictions whose predicted classes are fixed. for some classes, the precision curve could be worse than the overall precision curve  but for some classes, the precision curve could reach much higher precision. we use this class specific recall-precision curve to find a subset with a desired higher precision. precision pmi k of a given class k for the classifier mi is defined as the precision of the set {x | pin ≥ a and ymi = k} where ymi is the predicted class of x by the classifier mi. it is estimated by the number of correct predictions within the predicted class k divided by the number of predictions whose predicted class is k. the recall rmi k is estimated by the number of correct predictions in the subset divided by the size of the set of all predictions whose true class is k. for the data point x and the classifier mi whose predicted class is k, we define pic, the class specific precision index , as pmi k). the pic values often spread more and reach higher values than overall pin values and enables us to select a set of predictions with a high precision. we can use pic in construction of recall-precision curve as we use pin. the resulting curves will enable us to compare the class specific productivity of different classifiers.

construction of combined classifier for test data
when several classifiers, say m <dig>  ..., and ml are applied to a test data, the classifier pincom is constructed as follows.

step a1: estimation of pin in training data
 <dig>  partition randomly the training data into  <dig> subsets.

 <dig>  train the classifiers using 90% data and apply them to the 10% for each partitioned data.

 <dig>  repeating the procedure  <dig> times generates cross-validated predictions of size of training data.

 <dig>  repeat  <dig> -  <dig> for k random partitions where k is around 20- <dig> 

 <dig>  the generated predictions are of size k times of the training data size for each model. the predicted points are not independent because they are generated by the same training data.

 <dig>  estimate the pin function for each model based on the predictions, predicted classes, and the true classes.

 <dig>  pincom's predicted class of a point is the predicted class of the classifier with maximum pin value.

step a2: estimation of pin in test data
 <dig>  train the classifiers on the training data and apply them to the test data.

 <dig>  each prediction from the model mi consists of , maxp) for j =  <dig>  ..., nt where nt is the size of the test data set.

 <dig>  apply the estimated pin function from step a <dig> to the test data predictions and get pin values for the test data prediction, i.e., pin = pin).

 <dig>  the prediction of the pincom is the predicted class of the classifier that has the largest pin value. when more than one classifier's pins are of maximum pin value, select one classifier randomly. we use maxpin as the pinc, the pin value of the pincom.

evaluation of classifiers
we evaluate the effectiveness of classifiers on test data by recall-precision curve plots. when the true classes of the test data are known, we estimate the recall-precision curves based on pin and pinc values estimated in step a <dig>  they are based on estimated pin functions in step a <dig> that are based on the cross-validated prediction on training data. the recall-precision functions are based on the predicted outcome class, pin values and true class in step a <dig>  the class specific recall-precision curves pic can be used in evaluating class-by-class predictions. pic based subset selection and recall-precision curves are used in comparing classifiers' class specific recalls with preset precision level. the true classes of test data are usually unknown. in this case, we evaluate the classifiers on training set by double cross-validated predictions as follows.

step b1
 <dig>  partition the training data into  <dig> subsets.

 <dig>  allocate each partitioned data  as test set and use remaining 90% set as a new training set as in step a <dig> 

 <dig>  partition the new training set into another  <dig> subsets and generate 10-fold cross-validated predictions for each model. in each cross-validated prediction, 81% of the original training data is used in training classifiers and 9% in generating cross-validated predictions. in the end, a set of cross-validated predictions of the size of the new training data is obtained.

 <dig>  repeat the above procedure for k random partitions  to generate more cross-validated predictions. we will have a cross-validated prediction set of size  <dig> times of 90% of the original training data.

 <dig>  estimate the pin function for each classifier using the cross-validated prediction set in  <dig> 

 <dig>  generate combined classifier predictions based on pin and maxpin.

 <dig>  the generation of pin, maxpin, and therefore predictions of the pincom are based on the predicted values and the true class levels of the new training set  in  <dig> 

step b2
 <dig>  train the classifier on training set  in step b <dig>  and apply it to the test set and generate predictions of 10% of the data.

 <dig>  apply the pin functions generated by the data in step b <dig> -b <dig>  to the test data predictions.

 <dig>  generate the combined classifier predictions based on the estimated pins and maxpin in b <dig> .

 <dig>  repeat 1- <dig> for all  <dig> partitioned test sets and have cross-validated predictions of the size of the original data.

 <dig>  repeat 1- <dig> for kk random partitions. we use kk =  <dig> in this paper.

 <dig>  we have generated double cross-validated predictions for the all the classifiers including the classifier pincom.

 <dig>  each prediction consists of the values pin for each classifier, maxpin  for the pincom classifier, predicted class for each classifier, predicted class for the classifier pincom, and the true class.

 <dig>  generate recall-precision curves and pic values based on the set of double cross-validated predictions generated from b <dig> -b <dig> .

note that the pin, pinc and the pincom are based on the training data only and hence the performance of the classifiers based on the double cross-validated predictions provide valid evaluation for the pincom as well as the other classifiers used in combining. the need of double cross-validation is discussed in detail in  <cit>  for example.

we applied the classifiers to the test data set whose true classes are unknown as follows.

 <dig>  build classifiers based on all the training data and apply them to the test data set.

 <dig>  estimate pin, pinc, and the pincom classifier predictions using double cross-validated predictions described in steps b <dig> and b <dig> 

 <dig>  for each classifier including the pincom, estimate the functional relationship between pin and pic, the class specific precision from the double cross-validated training data as in step b <dig>  and apply it to the test data.

 <dig>  the subset {x| pin ≥ a } of the test data has the estimated precision p of the subset {x| pin ≥ a } from the training data. to avoid the confusion, we use the notation pxv for the precision from the double cross-validated predictions from the training data.

 <dig>  the estimated number of correctly predicted genes in a set of predictions in test data is the size of the subset multiplied by pxv  and hence the p and r of the test data can be estimated by dividing the estimated number of correctly predicted genes by the subset size and the test data size, respectively.

 <dig>  appling the same arguments, the class specific precision pk from the double cross-validated training predictions can be used in estimating the number of correct predictions. for classifier mi, the number of correctly predicted predictions in predicted class k is estimated by the number of elements in {x| pic ≥ a and ymi = k} multiplied by pk, the class specific precision.

 <dig>  the number of correct predictions of the set {x| pic ≥ a } is estimated by adding all the estimated class-specific correct predictions.

 <dig>  the precision p of a subset {x| pic ≥ a } of the predictions of test data is estimated by dividing the estimated correct number of predictions by the subset size.

 <dig>  the overall recall r is estimated by summing the numbers of correctly predicted elements in each predicted class divided the total predicted elements.

classifiers and software
the neural network  classifier was developed using nnet library in r  <cit> , and the training data described in the results section. nn classifiers are based on a random number generator and may contain local maxima. we averaged  <dig> nn runs  and averaged the posterior probability vectors to produce a stable prediction as recommended in  <cit> . the optimal nn parameters were chosen to minimize the  <dig> fold cross-validated prediction errors. the random forest  model  <cit>  was developed using the randomforest function in randomforest library in r  <cit> . the multi-class support vector machine  model  <cit>  with the radial kernel function was developed using the svm function in the library e <dig>  <cit>  in r. the radial kernel function was used and optimal parameters were chosen to minimize 10-fold cross-validated prediction error.

in addition to the original data, we built the over-sampled training data by duplicating small size classes to the largest class size. when a classifier is applied to the oversampled training data, we call it the oversampled version of the classifier. the over-sampled versions of rf and svm were used because some classes used in training have fewer genes than others and without equal weight, might not classify well. therefore, over-sampling was used to increase the weight of smaller classes, resulting in better classification for those smaller classes as well the bigger classes. classification to the bigger classes is advantageous because the number of predictions from the contaminating incorrect genes from the smaller classes goes down. in our cross-validated study, over-sampling indeed produced better results on the accuracy in some classes. when the oversampled versions of classifiers are added in combining classifiers the improvement of precision and recall was noticeable. r-scripts are available from the authors to implement all methods described.

other methods of combining classifiers
the vote-combining method  uses the most frequently voted class among the classifiers. ties were broken by random selection. this method has been shown to greatly improve the confidence of the predictions but thus far mainly relied on vote-combining of similar learning models that yield similar outputs  <cit> . this method could be adversely affected by low performing classifiers when substantially different classifiers are combined.

stacking or stacked generalization  <cit>  is another method for combining classifiers that overcomes these problems by taking weighted average of output. in stacking, the weights are determined by a higher-level learning classifier and are expected to be proportional to the capability of the classifiers used. in spirit, stacking is similar to our pin combined classifier. both use the outcome of the lower level classifiers and use double cross-validation to assess the accuracy of the prediction. we studied two stacking methods in addition to the vote combining method and compared them with the pincom. the two stacking methods we used were as follows.

the first step of stacking is to collect the output of each model  into a new set of data . for each instance in the original training set , this data set represents every model's prediction of that instance's class, along with its true class. this is achieved by ordinary cross-validation. the new data is treated as the data for another learning problem, and in the second step, a learning algorithm  is employed to solve this problem.

the stack  <dig> method uses the output class probabilities generated by level- <dig> classifiers to form level- <dig> data. then, as the level- <dig> classifier we use a version of least squares linear regression adapted for classification tasks, called the multi-response linear regression , which adapts each class outcome as 0- <dig> outcome variable in regression. since the coefficients of the regression would be expected to be higher values for the better classifier's output class probabilities, the resulting procedure would have an improved predictive accuracy compared to the level- <dig> classifiers. the second stacking method, stack  <dig>  uses the output class predictions as well as class probabilities generated by level- <dig> classifiers to form level- <dig> data. then, a random forest is used as the level- <dig> classifier. both stacking methods are evaluated at the test data set for their prediction ability and when no test set is available, a double cross-validation is used in evaluating as we do in evaluation of the pincom.

RESULTS
data set and classifiers
we explored ways to best classify genes to biological processes using gene expression data. we used the gene expression data used in the neural network model study by ko et al.  <cit> . the data are originally from the study by ross et al.  <cit> . sixty human cancer cell lines from  <dig> different cell types exhibit varying levels of gene expression that are heavily based on biological processes in each particular cell line. the varying levels of gene expression in the  <dig> cell lines represent a multiplex of activities for pathways and other biological processes, which have been proved very useful in classifying genes to biological processes. the  <dig> gene functional classes chosen from the kegg database were assigned to  <dig> genes chosen from  <dig> genes profiled for gene expression in the  <dig> cell lines. the class size for biological processes ranged from  <dig> to  <dig> 

various modeling algorithms can each identify different patterns within data that can be useful in classification of different gene functions. therefore, we investigated multiple classifiers for the ability to classify genes to functions with a focus on each biological process class. we selected  <dig> classifiers plus a variation of two of these classifiers that performed well individually for classifying genes to biological processes; these are random forest  <cit> , multi-class support vector machine  <cit> , and neural network  <cit> , plus over-sampled versions of rf and svm . these classifiers were selected based on their ability to classify well, as well as being able to generate output results in the form of estimated posterior probabilities for all classes of biological process. we investigated the performance for each classifier on a class-by-class basis for the  <dig> biological processes.

in comparing the performances for each classifier, a problem exists in which the distributions of maximum posterior probabilities  are vastly different from class to class  <cit>  and classifier to classifier, particularly when the learning model algorithms are vastly different. the maxp of an element from one classifier cannot be directly compared to the maxp of the same element from another classifier and one cannot discriminate one classifier from another by the maxps.

comparison of classifiers for classifying genes to biological processes
we addressed the classifier comparison problem by developing a measure of performance and prediction confidence, referred to as precision index  that allows us to directly compare results between classes and between classifiers . we transformed maxps for each classifier to pins based on precisions within each classifier, which allowed us to compare the precisions of all classifiers. we filtered the predictions based on pin values, calculating a precision for the set of selected predictions that has greater than each pin threshold. we evaluated recall, the fraction of genes attributed to a particular biological process that are correctly predicted, for each class and each model for the set of selected predictions that has greater than each pin threshold. for various thresholds, we are selecting predictions that have pin values of at least the threshold and evaluating the recall of the set of selected predictions and its precision, which provides a measure of how good the classifier is in selecting predictions with a given precision . a recall-precision curve of the set with each pin threshold is shown in figure  <dig> allowing us to see what classifiers perform the best for biological process classifications overall.

a recall-precision curve plot is shown in figure  <dig> for the ribosome class as an example. the nn model, the worst classifier in figure  <dig> showed the best recall over a wide range of precisions followed by the rfo and svm. another example is shown for the proteasome class in figure  <dig>  in this class, svmo is dominating at the lower precision values and rf is superior for the precision from 65% to 95% while nn is dominating on very high precision area . our analysis shows that it is difficult to identify a single classifier that dominates in recall value for all precisions and all classes.

combining classifiers based on pin
considering all classifiers for which there is no single dominant classifier under any one condition, we use a new classifier pincom . this method is different from the classifier ensemble methods. in the classifiers ensemble methods, one combines many classifiers with similar characters  and uses weighted voting based on predictions and estimated posterior probability  <cit> . in pincom, we combined classifiers whose characteristics could be quite different from one another in which their estimated posterior probabilities were not comparable. the development of pin allows us to compare and combine the five different classifiers we developed. the maximum pin defines the assigned classification of the combined classifier and it was compared to the five other classifiers using a recall-precision plot . these results show a clear advantage in classification recall for the pincom over all other models for precision areas up to 70% closely following the performance of the best model but dominating it at precision values greater than 65%. however, the pincom's precision reaches only up to 70%, meaning if we wanted to select a set of predictions with precision of say 95%, we would be unable to use it.

figures  <dig> and  <dig> show the recall-precision curves for the pincom for the ribosome and proteasome classes already described in figures  <dig> and  <dig>  the combined classifier was superior to all individual classifiers in proteasome class and in ribosome class to all others but the neural network classifier. it is important to note that even if the overall precision of the combined classifier could reach only up to 70%, the class specific precision could reach up to 100%.

we analyzed the class specific precision index pic  based on pin values in each class and found we could reach higher precisions. figure  <dig> shows the recall-precision curves based on pic thresholds. it can also be generated by a weighted average of class-specific recall-precision curves with weights proportional to the sizes of the predicted classes. the recalls of the pincom are dominating particularly at the high precision levels and at most of the precision levels. the precision limit is thus extended to a much higher value .

application of the pincom to the test data with unknown true classes
we applied the pincom to the test data set of  <dig> genes that were not used in model training. in building the pincom for the model, we used the pin functions, the relationship between maxp and precision index pin, estimated by predictions from 10-fold cross-validated predictions from our training data with  <dig> genes. we used  <dig> random partitions and generated cross-validated predictions of size  <dig> in estimating pin function and applied it to the test data. the pin values of the five models in the cross-validated prediction are used in building the pincom. the functional relationship between maxp and pin is applied to the maxp of the test data resulting in pins for the five models and consequently the pincom for the test data.

figures  <dig> shows a recall-precision plot for the test data. since we do not know the exact class to which these elements should belong, the number of correct predictions is estimated using the precision estimate from the double cross-validated training data . the precision and recall are estimated by the precision from the training data, hence the pr curves in figure  <dig> assume that the training data represents the test data. we observed that the pincom was vastly superior to all other models at most of the precision levels up to 70%.

we would like to select the predictions with much higher precision than 70%. we estimated the functional relationship between pin and pic in each class for each classifier from the double cross-validated predictions from the training data and applied it to test data to estimate the pin and pic values as well as the corresponding precision and recall . because we used pic in selecting predictions with high precision, we compared the recall-precision curves only on the higher pic value regions shown in figure  <dig>  pincom dominates all the individual classifiers at the most of high precision levels in figure  <dig>  the svmo performs slightly better than pincom at the precision levels from 80% to 90% region but much worse than pincom in the 90% and up regions.

test validation of combined classifier predictions
when the pincom was applied to the  <dig> test genes, we expected that genes predicted for a biological process would include genes that have known associations with that process based on data from other studies as determined by other gene annotations, such as gene ontology . our test-validation results showed that the cell cycle pathway showed a substantial improvement for predictions by the pincom over individual models. at a pic of  <dig> , there were  <dig> genes predicted for cell cycle by the pincom yet zero genes predicted by any individual model, which is a performance comparable to what we observed in the cross-validation. we analyzed the  <dig> genes for associations with genes within gene annotation databases using the david functional annotation tool  <cit> . within the  <dig> predicted genes, there were  <dig> genes intersecting with the uniprot biological process for cell cycle with a p-value =  <dig>  × 10- <dig>  and an fdr of  <dig>  × 10- <dig>  this verifies that our pincom is correctly predicting genes for cell cycle even under conditions in which the individual models yielded no genes, thus the additional genes classified by the pincom at high confidence represent a legitimate improvement in predictions.

an interesting application of our combined classifier is to look at gene predictions that appear contrary to what is believed to be true or that provide new information. we analyzed genes predicted for cell adhesion from pincom for associations with gene annotations using the david functional annotation tool. we found a statistically significant association with the go biological process of cell substrate adhesion with a p-value of  <dig>  × 10- <dig> and an fdr of =  <dig>  × 10- <dig>  this was consistent with the function of cell adhesion. we also observed a significant association with  <dig> genes from uniprot metal binding . this category represents metallothionein genes. these results reveal a pattern of expression for these metallothionein genes that is similar to cell adhesion genes, and thus accounting for the classification. however, published studies only show a role for metallothioneins in metal transport and storage, and as well as response to oxidative stress  <cit> . no role in cell adhesion or related functions has yet been established experimentally for metallothioneins.

contribution of individual models in the combined classifier
we evaluated the contribution of each classifier to the combined classifier by determining the difference in recall  between the combined classifier based on  <dig> models for each precision and the combined classifier based on  <dig> models, withholding the classifier of interest. a minus difference means that the combined classifier without  <dig> classifier performs better that the  <dig> classifiers combination. the results summarized in table  <dig> shows the nn classifier was most positively influential for most of the precision values and the svm model was most positively influential at the higher precision values. each classifier contributed positively at most of precision values, though, the rf model had the smallest contribution overall. one reason for this could be that the contribution of rf is compensated by a similar model, rfo.

comparison of pincom to other combining methods
we used two other methods for combining classifiers, voting and stacking as described in methods, for comparison to pincom. the voting method, vote, uses the votes for classification from the individual classifiers. stacking uses the output from individual classifiers to train a higher level classifier  <cit> . we used two versions of stacking, stack  <dig> and stack  <dig> .

the overall precision of stack  <dig> is  <dig> %, lower than vote and even lower than level- <dig> classifiers. the recalls for stack  <dig> at the given precision levels are also very low. the reason of this performance of stack  <dig> could be due to large number of classes and relatively small size of data. there are  <dig> classes and hence level-one data have  <dig> independent input variables. with about  <dig> data from the cross-validated training, the level- <dig> classifier mlr might have over-fitted the training data.

the overall precision of stack  <dig> is  <dig> % lower than some of the level- <dig> classifiers. the recalls at the given precision levels were better than some of level- <dig> classifiers and vote. the pincom has the overall precision  <dig> , with recalls higher than the other combining methods, thus demonstrates its superiority to existing combining methods.

application to the 'vowel recognition' data
we used a well-known 'vowel recognition' data set to verify that the proposed classifier pincom performed better than other classifiers used in the combining and other combining methods described above. the 'vowel recognition data' were collected by deterding  <cit> , who recorded examples of the eleven steady state vowels of english spoken by fifteen speakers for a speaker normalization study. there are  <dig> training observations and  <dig> test observations consisting of  <dig> classes and  <dig> predictor variables. the data have been analyzed in various methods and are reported in a popular textbook  and can be downloaded from the website http://www-stat-class.stanford.edu/~tibs/elemstatlearn/.

we used  <dig> different classifiers, random forest , neural network with one hidden layer of  <dig> units , support vector machine with radial kernel , k nearest neighbor  <cit>  for k =  <dig> , and multivariate adaptive regression spline  <cit>  with  <dig> maximum number of terms and the pincom  of  <dig> classifiers. the outcome variable  in vowel training data is balanced  and oversampled versions of rf and svm we used previously did not provide additional benefits to the original rf and svm. therefore, we replaced the oversampled models with two additional classifiers, knn and mars.

the optimal parameters were selected in cross-validated training set except the knn. the optimal k for knn was  <dig>  which resulted in constant maximum prediction probability of  <dig>  therefore, the precision-recall curve became a single point and hence could not be used in distinguishing good predictions from the bad predictions. to introduce some variability of prediction probability we chose 'optimal' k among the values greater than  <dig> with the optimal k =  <dig> 

we applied the trained classifiers from the whole training data set to the test data and estimated pin function from the cross-validated predictions and maxp. the trained classifiers on the training data were applied to generate predictions for the test data. the functional relationship between maxp and pin obtained from the cross-validated prediction set was applied to the test data maxp and pin was estimated. the pincom's predictions were subsequently estimated by the estimated pin and maxpin . since the test data consists of the elements whose true classes are known, we didn't use double cross-validated prediction data for an assessment.

the recall-precision curves are presented in figure  <dig>  the overall precisions of the test set predictions are 53%, 59%, 49%, 59%, and 58% for nn, rf, mars, svm, and knn respectively. a similar range of precisions was reported in  <cit> . the pincom  has the overall precision of 66%, which is 7% higher than the best classifier  and 17% higher than the worst classifier . the best previously reported precision for this data is 61%  <cit> . the pincom dominates not only on the overall recall but also on recalls of all the predictions at the precision levels up to 90% precision. a way to extend the range of precision value of the combined classifier to 100% is to use class specific precision index pic similar to our previous example.

recalls of the subsets with precision 70%, 80%, and 90% for all classifiers  are presented in table  <dig>  the overall precision of the vote-combining classifier vote is surprisingly high, 63%, beating all the other classifiers except the pincom. however, the recalls for the vote-combining method at the high precision levels of 70%, 80% and 90% are even lower than some of the individual classifiers.

stack  <dig> has the overall precision of 57%, slightly lower than the best individual classifier. the recalls at the precision levels of 70%, 80% and 90% are also lower than some of the individual classifiers. stack  <dig> uses all the prediction probabilities and class predictions from  <dig> classifiers as level- <dig> data and a random forest as the level- <dig> classifier. the overall precision is 62%, higher than the best individual method and similar to vote's but lower than pincom's 66%. the recalls at the precision levels of 70%, 80% and 90% are comparable to the individual classifiers but are dominated by the pincom.

discussion
we studied  <dig> classifiers for classifying genes to biological processes. each classifier had significant advantages for certain biological classes under certain conditions, but no single model was optimal for all classifications. a way to combine the probability outcomes from all  <dig> classifiers into a superior model was developed by use of a performance measure  that normalized outcomes across the classifiers. we developed a combined classifier based on pin measures for the  <dig> models yielding substantial improvements in performance overall and for individual classes of biological processes. the use of pin in the combined classifier provided us the ability to select any desired precision across classes and models to yield the most genes classified. in cell cycle classification for example, the pin combined classifier yielded a substantial number of genes classified with high confidence while all individual models yielded few or zero genes classified.

the individual classifiers are not built to classify data to multiple classes. for the genes with multiple functions, one could still use the classifiers by creating new classes for those genes and training the classifiers. however, the number of combinations of all multiple classes would be huge and the number of genes in each class might be too small to be useful in training. as the knowledge expands and enough information is gathered on those genes with multiple functions, we should be able to properly classify those genes to multiple classes using pincom. for the sake of keeping the analysis straightforward, our study of the combined classifier focused on primary classifications only, leaving the classifications of secondary and tertiary functions for future research.

the analysis of contribution of each model to the combined classifier provided us insight into how each model contributed under various conditions of confidence. while a more detailed analysis on a class-by-class basis is needed, we can still see overall that the nn model, which showed overall the worst performance, is the best contributor. the results suggest that improvements in the combined classifier are possible in which the contributions of each model are further optimized.

CONCLUSIONS
the advantages and implications of the combined classifier go well beyond models utilizing gene expression data and the classifiers used. any classifier with estimated posterior probabilities can be used. there's no limitation to the number of models that can be combined. the use of pin allows combining of models based on any type of data, such as classifiers based on protein sequence or protein-protein interaction data. this provides the foundation for integrating highly diverse and seemingly incongruent information into a single multi-class model with high performance. the advantages of the combined classifier also go beyond functional genomics and should also be apparent in broad fields of basic science, clinical science, and business, as the modeling of vowel recognition demonstrated.

authors' contributions
bw conceived of the study, developed, refined, tested, and applied the methods, and drafted the manuscript. dk formulated, developed, programmed, and refined the methods, and drafted the manuscript. all authors analyzed the data, read and approved the final manuscript.

