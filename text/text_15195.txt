BACKGROUND
ribonucleic acid  is an important class of molecules which performs a wide range of biological and chemical functions. traditionally, most rna molecules were regarded as being involved in the process of translation, including transfer rna  and ribosomal rna . since the late 1990s, it has been widely acknowledged that there exists other type of functional rna molecules such as non-protein-coding rnas. these rnas are found in organisms ranging from bacteria to mammals and affect a wide variety of processes including plasmid replication, phage development, bacterial virulence, chromosome structure, dna transcription, rna modification  <cit> . rna has recently become the center of much attention because of its functions as well as catalytic properties, leading to a substantially increased interest in identifying new rnas and obtaining their structural information  <cit> . furthermore, the growth of rna databases, such as noncode  <cit> , rfam  <cit> , rnasep  <cit>  and rnadb  <cit>  has increased two to three fold annually.

to facilitate the maintenance and analysis of such rna data, an efficient compression algorithm of rna sequences is needed. algorithms for compressing dna sequences include gencompress  <cit> , dnacompress  <cit> , biocompress  <cit>  and cfact  <cit> . however, these algorithms are only suitable for compressing the primary sequences of dna. as for rna sequences, we are more interested in designing a novel compression algorithm to compress rna primary sequence together with its secondary structure information. rna secondary structure is similar to an alignment of nucleic acid sequences, except that the sequence folds back on itself and "complementary bases" pair  rather than identical or similar bases  <cit> . the functions of rna are closely related to its structural characteristics and as such obtaining rna secondary structure information  has been an important and interesting problem for several decades  <cit> .

from a strictly mathematical point of view, compression implies understanding and comprehension  <cit> . biological sequence compression is a useful tool to recover information from biological sequences. better compression often implies better understanding. compressing rna sequence with secondary structure means that we can capture the essences of rna sequence information and its structural information simultaneously. from an application point of view, we can derive the informational complexity of rna structural data based on compression, which can be used to study the structural features and other various properties of rnas.

in our study, we have developed an efficient grammar-based algorithm to compress rna sequence and its secondary structure. the software rnacompress developed in windows and linux platforms is accessible freely at our website. we have also defined the informational complexity of rna structural data based on compression coupled with the theory of kolmogorov complexity  <cit> . this kind of informational complexity will be used to study the relationship between binding activities and structural complexity of rna aptamers.

to the best of our knowledge, this is the first study to be published about the compression of biological sequences with structural information. additionally, we apply the results to study functional activities of rnas. the key idea of our compression algorithm is to use dot-bracket notation  <cit>  to represent the secondary structure of rna and define specific context free grammars  to model rna secondary structure together with its primary sequence during compression . furthermore, several computational parser and coding approaches are incorporated to facilitate the whole procedure, including  utilizing the ll parser to derive the left-most derivation of defined grammars for rna primary sequence and its secondary structure and  using huffman coding to encode the symbol stream of left-most derivation to achieve the most economical compression result, etc. extensive tests have shown that our algorithm is fast, robust, effective and obtains a universally better compression ratio than the common text-based compression tools or primary-sequence-specific compression tools in the compression of rna sequence with its structure. these results show that our program is a useful tool for rna data maintenance and analysis.

RESULTS
algorithm
generally speaking, grammar-based compression starts by inferring the context-free grammar to represent the string. the resulting grammar is encoded as a symbol stream, which is then converted into binary. each step affects the final size of the compressed file. in our algorithm, each step will be designed specifically to facilitate the particular goal of rna sequence and structure compression. the main schema of our grammar-based compression and decompression is shown in figure  <dig>  two specific grammars g <dig> and g <dig> are defined in our study: g <dig> is viewed as the key grammar to represent rna primary sequence together with its secondary structure, while g <dig> is only used to model the dot-bracket sequence of rna secondary structure and serves as a complementary to g <dig> to guide its generation order . we start with parsing the dot-bracket sequence in g <dig> using the left-most deriving  <cit>  to get a grammar tree t <dig>  at the same time, each deriving step is mapped to construct another grammar tree t <dig> based on g <dig>  finally this left-most deriving symbol stream of t <dig> is encoded using huffman coding theory  <cit> , so that the probability of each unpaired bases and base pairs occurring in the whole secondary structure is considered to get the most economic coding result. as for decompression, the reverse procedure is performed. it should be noted that once the grammar tree t <dig> or t <dig> is regenerated during decompression, the corresponding primary sequence and secondary structure in dot-bracket notation can be regained using the post-order traversal  <cit>  of the leaves of these grammar trees, respectively. more details will be presented in the following.

a. content free grammars of rna sequence and structure
in our study, rna primary sequence is represented in fasta format beginning with a single-line description or comment, followed by lines containing sequence data. the description line is distinguished from the sequence data by a greater-than  symbol in the first column. for each sequence, the corresponding secondary structure is represented in dot-bracket notation. dot-bracket notation is the dominant rna secondary structure format. it uses dot to represent un-paired bases and brackets to represent base pairs in rna stems. many useful tools use this format as input  and hence it has become an unofficial standard  <cit> . as for our compression, the dot-bracket notation was proved to be an efficient way to represent rna secondary structure and suitable for our grammar parser. a simple example of our input file for compression is shown in figure  <dig> 

we have defined two concise content free grammars g <dig> and g <dig> to model rna primary sequence and its secondary structure information. a cfg is very similar to a finite automaton  <cit> , and has been proved to be an efficient model to study rna secondary structure. it contains the following elements, which are defined as follows:

. terminals – a symbol that represents a constant value

. non-terminals – a symbol that has the capability of being further defined in terms of terminals and/or non-terminals, usually denoted by a capital letter.

. production rules – rules by which non-terminals can be replaced.

in our study, two grammars are defined as:

g1:

s: ls | e

l: asu | usa | csg | gsc | usg | gsu | a| u| c| g

g2:

s: ls | e

l:  | •

for both grammars, s and l are non-terminals, e is empty string, and the symbols a, u, c, g,  and • are terminals representing the  <dig> different bases, left bracket, right bracket and dot, respectively.

here g <dig> is a combination grammar to analyze rna primary sequence and secondary structure simultaneously. it can model watson-crick base pairs a-u, g-c and wobble base pair g-u in rna secondary structure. g <dig> is aimed at modeling the dot-bracket sequence of rna secondary structure. with these two grammars, two kinds of grammar trees can be generated for the rna primary sequence and secondary structure, respectively, as shown in figure  <dig>  it should be noted that g1is ambiguous, meaning that the same primary sequence can be generated with more than one grammar tree, while g <dig> is unambiguous which means that one dot-bracket string corresponding to only one grammar tree  <cit> . thus we have utilized g <dig> to guide g1during the grammar parsing to identify the grammar tree of g <dig> 

b. compression algorithm
based on the two grammars we have defined, we are able to perform the compression as shown in figure  <dig>  in the following we also take the rna sequence in figure  <dig> as an example to demonstrate the whole compression procedure. first we discuss several computational approaches used in our work.

ll parser
we start from parsing the dot-bracket sequence of rna secondary structure using g <dig>  and the ll parser is used to derive the left-most derivation of the input sequence. a ll parser is a top-down parser for a subset of the context-free grammars  <cit> . it parses the input from left to right, and constructs a left-most derivation of the sentence. practically, there are two common ways to describe how a given string can be derived from the start symbol of a given grammar. the simplest way is to list the consecutive strings of symbols, beginning with the start symbol and ending with the string, and the rules that have been applied. if we introduce a strategy such as "always replace the left-most non-terminal first" then for context-free grammars the list of applied grammar rules is by itself sufficient. this is defined as the left-most derivation of a string  <cit> .

as for ll parser, it uses one token of look-ahead when parsing a sentence. the parser consists of:

 an input buffer, a string from the grammar

 a stack on which to store the terminals and non-terminals from the grammar yet to be parsed.

 a parsing table which tells it what  grammar rule to apply given the symbols on top of its stack and the next input token.

in our study, the parser applies the rule in the parser table  which we have defined for grammar inference of rna secondary structure, by matching the top-most symbol on the stack  with the current symbol in the input stream . when the parser starts, the stack already contains two symbols: , where '#' is a special terminal to indicate the bottom of the stack and the end of the input stream, and 's' is the start symbol of the grammar. the parser will attempt to rewrite the contents of this stack to what it sees on the input stream. three types of steps for our left-most derivation are followed depending on whether the top of the stack is a non-terminal, a terminal or the special symbol #:

each cell in the table gives the production rules used when matching the top-most symbol on the stack  with the current symbol in the input stream .

 if the top of the stack is a non-terminal symbol, the non-terminal symbol and the symbol on the input stream is looked up in the parsing table to determine which rule of the grammar to use. the number of the rule is written to the output stream. if the parsing table indicates that there is no such rule then it reports an error and stops.

 if the top of the stack is a terminal symbol, then it is compared to the symbol on the input stream. if they are equal they are both removed. if they are not equal, the parser reports an error and stops.

 if the top is # and on the input stream there is also a # then the parser reports that it has successfully parsed the input, otherwise it reports an error. in both cases the parser will stop.

these steps are repeated until the parser stops, and then it will have either completely parsed the input or written a left-most derivation to the output stream or it will have reported an error.

map left-most derivation of g <dig> to g1
as mentioned above, g <dig> is used to guide the left-most derivation of g <dig> since it is ambiguous. the mapping of the left-most derivation of g <dig> to g <dig> is straightforward: '()' will be mapped to the corresponding base pairs of the rna secondary structure and '•' will be mapped to the corresponding un-paired bases. after this mapping, a left-most derivation of g <dig> is obtained and the huffman coding is performed on the symbol stream of this left-most derivation to encode them into a bit stream, as discussed follow.

huffman coding
huffman coding is an entropy encoding algorithm used for lossless data compression. the term refers to the use of a variable-length code table for encoding a source symbol where the variable-length code table has been derived in a particular way based on the estimated probability of occurrence for each possible value of the source symbol  <cit> . huffman coding is able to design the most efficient compression method of this type: no other mapping of individual source symbols to unique strings of bits produces a smaller average output size when the actual symbol frequencies agree with those used to create the code.

we use variable-length code table to encode the symbol stream of left-most derivation of g <dig> based on the probability associated for each production rules. g <dig> can be viewed as a stochastic context free grammar   <cit> . we have derived the rule probabilities based on a complete statistic analysis of the frequency distribution of base pair and un-paired bases in different rna secondary structure using the rna structural database rnabase  <cit> . nearly  <dig> rna sequences which cover diverse rnas including trna, rrna, non-coding rna etc. are examined and the final statistical probabilities are listed in table  <dig> 

it should be noted that for different types of rna or rna in different species, the frequency distribution of their base pairs or un-paired bases are different, thus the production probabilities of the rules are different. however, from a statistical perspective, we aim at designing a universal compression algorithm for all types of rna, thus we make use of these general probabilities here. for more specific rna types, more specific probabilities can be used.

the huffman tree based on our statistical probabilities is shown in figure  <dig>  finally variable-length bit codes are generated to encode the different production rules.

example
we took the rna sequence in figure  <dig> as an example to demonstrate the whole compression procedure, as shown in table  <dig>  the input is a rna primary sequence with its secondary structure in dot-bracket notation. each step of the ll parser and the corresponding operation is also listed.

the final bit stream of this left-most derivation is  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  for a total of  <dig> bits.

definition of compression ratio
in our work, the compression ratio of the compression algorithm can be computed in two ways:

r <dig> = uncompressed_file_bytesize/compressed_file_bytesize, or r <dig> = )/o, where n is the number of the bases in input rna sequence. h <dig> and h <dig> are the information entropy of the rna primary sequence and secondary structure, respectively. o is the number of bits in compressed file.

while r <dig> is a straightforward way to compute the compression ratio based on the byte size of the input file and the compressed file, r <dig> is more specific based on entropy theory. in the definition of r <dig>  the uncompressed input file is divided into two parts: rna primary sequence and rna secondary structure in dot-bracket notation. from an information entropy perspective  <cit> , since there exists four bases  for primary sequence and  <dig> characters "  " and "." for secondary structure, the average information entropy for the primary sequence  and secondary structure  can be computed as:

 h1=−∑14pilog⁡2piandh2=−∑13pi'log⁡2pi' 

where pi and p'i are the occurrence probabilities of each bases and characters in dot-bracket notation. if we consider a rna sequence with infinite length, then pi = 1/ <dig> and p'i = 1/ <dig>  assuming an independent probability distribution of  <dig> base pairs and  <dig> characters, thus h <dig> =  <dig> and h <dig> ≈  <dig> . this means that  <dig> bits is enough for encode the rna primary sequence and  <dig>  bit can be used to encoding rna secondary structure in dot-bracket notation. note that in our implementation, the occurrence probabilities of  <dig> bases and  <dig> characters will be computed according to the particular rna.

c. informational complexity
the definition of informational complexity of rna structural data underlies the concept of kolmogorov complexity. the kolmogorov complexity k of an object o is defined by the length of the shortest program p for a universal turing machine u that is needed to output o  <cit> . intuitively, k represents the minimal amount of information required to generate × by an algorithm.

it is well known that there is a relationship between kolmogorov complexity of sequences and shannon information theory  <cit> : the expected kolmogorov complexity of a sequence x is asymptotically close to the entropy of the information source emitting x. however, kolmogorov complexity is non-computable in the turing sense  <cit>  and in practical applications it is approximated by the length of the compressed sequence calculated by a compression algorithm  <cit> .

in summary, the informational complexity of a given rna sequence with its secondary structure is approximated by the compressed bit string using rnacompress. this definition is straightforward, yet with rigorously theoretical support. later experiment will prove that our informational complexity can reveal the relationship between structural complexity and functional activity of rna aptamers, which could be useful in predicting the functional utility of novel heteropolymers.

experimental testing
our experiments are performed in two parts: first the compression ability of rnacompress is tested, and secondly the results are applied to reveal the relationship between binding activities and structural complexity of rna aptamers.

a. compression ability
we have tested the compression ability of rnacompress on  <dig> benchmark files that are access freely at our website. these  <dig> data files are generated from different databases or curated from literatures, covering diverse types of rna molecules with their secondary structures , including rrna, trna and small non-coding rnas. note that the compression of one rna sequence makes no sense from the statistical perspective, since rna sequence is generally much shorter than the dna sequences or the whole genomes. in our test, the input file contains a set of rnas. also the sequence identities in each input file are different. the intention to use these extensive data files is two folds: to test the behavior of our algorithm in compression of files with different sequence identities and to demonstrate that our algorithm is universally efficient for different type of rnas. detail descriptions of these  <dig> test files are listed in table  <dig> 

we have compared the running time and compression ratios  of rnacompress with three other algorithms: gencompress, winrar and gzip. gencompress  has reported to be the top algorithm among all the other sequence-specific compression algorithms, such as biocompress and cfact. the other two algorithms, winrar  and gzip , are two classical text compression algorithm widely used in windows and linux, respectively. detail comparisons between rnacompress and these three algorithms are listed in table  <dig> 

tests are performed on windows and linux platforms with  <dig> ram and  <dig>  mhz cpu. 

it can be seen that rnacompress achieves the best compression ratio with comparable speed among the other algorithms, except for two tests file rrna.txt and mirna.txt. for rrna.txt, the sequence identities are nearly 90%. gencompress and other two common compression algorithms are efficient to capture the pattern repeats in this file, thus achieve better results. for mirna.txt, the same reason also holds. furthermore, micrornas are generally short rna molecules of about 21– <dig> nucleotides in length, thus their ability to be compressed are reduced compared to longer sequences. although efficient at searching for approximate matches and reverse complements, the running time for gencompress was found to be unpractical long when the input file is large.

essentially, our compression algorithm is based on grammar inference and huffman coding, and currently does not consider the repeat patterns of the input file. this is why rnacompress failed to achieve the better compression ratio when the sequence identities are high in a set of rnas. our algorithm is, however, very robust to different types of rna and influenced little by the arrangement of the input file. as for the three other algorithms, if we rearrange the same set of rnas in different order and artificially space out two highly identical sequences, their compression ratios will decrease dramatically. in addition, there also exist other algorithms that are based on different mechanisms besides searching repeat pattern, one of these is ppm  <cit> , which uses a specialized form of compression based on markov modeling. unfortunately, these algorithms are generally computation extensive in their exchange for higher compressions.

b. aptamer activity and complexity
to further demonstrate the applications of rnacompress, we present a comparison of the structural complexities and activities of rna aptamers, which was initially conducted by carothers et al. <cit> . in their study, a remarkable correspondence between the affinities of eleven gtp-binding rnas and the intricacy of their secondary structures is found, i.e., aptamers with higher-affinity binding to a target molecule are likely to have more structural informational complexity. however, an efficient calculation of informational complexity was missing in their study. the authors have pointed out the difficult and ambiguity to determine the amount of information of stems in rna secondary structures and presents three complicated methods to compute it. in our study, we have applied our defined informational complexity to measure the whole structural complexity of rna aptamers, which makes the calculation more straightforward. moreover, we have also calculated the spearman rank correlation coefficient  of the aptamer informational complexity onto the binding activities, as done by carothers et al.. our results are consistent with their study, which proves that the informational complexity defined here is reasonable when studying the relationship between functional activities and structural complexity of rna molecules . more detail information of eleven gtp-bind rnas is listed in additional file  <dig> 

it can be seen that there is a positive correlation between the aptamer activity and the informational complexity. for more detail information of eleven gtp-bind rnas, please refer the original paper  <cit>  or the additional file  <dig> 

* kd: solution dissociation constant. . the smaller the dissociation constant, the more tightly bound the ligand is, or the higher the affinity between ligand and protein. three different methods for treating the stems were applied to calculate the aptamer information content  <cit> . these are indicated as apt , apt , and apt.

discussion
generally speaking, if we treat both rna sequences and the representation of their secondary structures as text, any text-specific compression algorithms can be used to compress them. however, these compressions have no biological meaning and disturb the original rna structure information, although they may achieve higher compression ratios. from a biological perspective, rnacompress is more competitive than any others because it is not only an efficient algorithm to compress rnas, but also a nice model to represent rna data. these kinds of compression and representation abilities are based on our grammar inference, which is inherently suitable to capture the structural essence of rna.

in addition, there still exist several interesting issues in our study, which needs to be discussed or investigated in the future.

 currently we are focused on modeling two dominant types of base pairs in rna secondary structure: watson-crick pairs and wobble pairs. there also exists other minor variations of base-pairing in nucleic acids, such as hoogsteen base pair   <cit> . one challenge remain problem is how to incorporate the modeling of these minor base pairs and keep the compression ratios simultaneously.

 one promising way to improve the compression ability of rnacompress is to consider the repeat pattern of rna motifs in rna secondary structure. this is different from the repeat pattern identified in primary sequences, as used in gencompress etc. also it will be helpful to approximate the kolmogorov complexity and evaluate the informational complexity more accuracy. rna motifs are basic building blocks used repeatedly, and in various combinations, to form different rna types and define their unique structural and functional properties. currently many algorithms for rna motif identifications have been proposed  <cit> . however, these efforts were moderately successfully in define simple rna structure. a powerful algorithm to capture complex structural domains or various non-canonical pairings in rna motifs is still needed.

 another application of compression rna secondary structure is that it is a great alignment-free tool for rna secondary structure comparison. a universal similarity measure  can be defined to measure the pair-wise distance of rna secondary structures based on the compression, as we will demonstrate elsewhere .

CONCLUSIONS
in this article we have introduced a universal algorithm for the compression of rna secondary structure as well as the evaluation of its informational complexity. we have developed rnacompress, as a useful tool for academic users. extensive tests have shown that rnacompress is a universally efficient algorithm for the compression of rna sequences with their secondary structures. rnacompress also serves as a good measurement of the informational complexity of rna secondary structure, which can be used to study the functional activities of rna molecules. furthermore, future studies will show that our compression algorithm can facilitate the comparisons of rna secondary structure and studying of non-coding rna structures, provides a new way to investigate rna properties based on compression.

availability and requirements
project name:

rnacompress: grammar-based compression and informational complexity measurement of rna secondary structure

project home page: 

operating systems:

windows 2000/xp and linux

programming language:

c/c++

authors' contributions
ql carried out the designing of the whole computational algorithm and drafted the manuscript. yy was responsible for the software implementation. yz and jb were responsible for the data collection and selection. cc and xy conceived the study and participated in the design and coordination of the analyses. all authors read and approved the final manuscript.

supplementary material
additional file 1
secondary structures of eleven distinct gtp-binding rnas , sorted by their affinity binding activities.

click here for file

 acknowledgements
the authors would like to thank dr. thao tran, dr. ying xu at computational systems biology laboratory, university of georiga, usa for their suggestions.
