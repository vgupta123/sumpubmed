BACKGROUND
the growth in high-throughput sequencing means that there is a need for standardized, robust and scalable tools to perform quality assurance tests on the resulting data. the qa tools need to be extensible and are required to do more than check for instrument specific problems. the tools need to be able to check for both adherence to known standards and also to identify problems that may have arisen in sample preparation.

this paper introduces such a tool, built for analysis of data from the cancer genome atlas . this is the largest cancer genomics study to date, characterizing thousands of patients across  <dig> different cancers. the potential to discover new mechanisms and therapeutics from such a large-scale project is hugely important to the cancer community. however, the scale of the genomic data being generated by tcga alone has already outpaced gains in computational power  making available analysis tools unusable on standard hardware. new sequencing technologies and the increasing interest in population-scale genomic analysis will only exacerbate the computational problems. within low-throughput genomic data many errors can be characterized simply using the sequence alignment/map  specification  <cit>  and tools are available for reading and manipulation of sequence files. however, as the size and scale of genomic data increases these tools often struggle to perform at the necessary speeds . samqa provides quality checking using a high-performance computing framework to quickly and automatically capture and report errors across population-scale data. samqa has been designed to use the latest advances in high performance computing to ensure it is able to scale from gigabytes to petabytes of genome sequences regardless of sequencing platform, depth of coverage or data type.

an important step in the analysis of these large-scale genomic data is verification of a minimum standard of quality. with large scale sequencing projects there are a number of data quality issues that must be addressed, as biases are introduced at multiple levels. in population-level investigations data can significantly influence secondary analysis  <cit> , especially when looking at cancer data where genomic variation is high and largely uncharacterized. within tcga alone, issues affecting the quality of sequence data range from sample collection to selection of sequence alignment tools:

• biological sample collection. despite the use of standard clinical methods and procedures, the samples may lack consistent purity  <cit>  resulting in highly variable data within the population.

• laboratory methods. coverage discrepancies can result from the use of specific genome amplification methods  <cit>  , potentially differentially representing areas of the genome.

• instrumentation bias. sequencing instruments are known to introduce specific anomalies, from illumina's g-c bias  <cit>  to the  <dig> life sciences  <cit>  errors in regions that vary too much from the reference sequence.

• bioinformatics. multiple tools and tool versions are available to align reads to a reference genome. within tcga versions of bwa  <cit> , bowtie  <cit> , gatk  <cit> , maq  <cit> , and bfast  <cit>  are all used for sequence alignment. this results in data with a variety of computational errors as reads are matched and scored.

the next section discusses the types of tests that samqa uses to identify technical errors in the structure of the sequenced read data and biological errors which are assessed by extracting features which correspond to likely anomalies from the data. the results section introduces how the high-performance computing system has been designed to scale to the required level. the results section gives an example qa analysis that was undertaken across approximately  <dig> genome files.

implementation
when attempting to classify anomalous data sets, we must begin with the question, "what constitutes an anomaly?" this is a difficult question to answer when we expect our data sets to be highly divergent as: the samples can be gathered from different cohorts and populations; they typically will contain a high number of polymorphisms and structural variations which differ from the references sequence; and they often contain batch effects due to sample collection and instrumentation differences.

our approach has been to classify anomalies in sequence data sets relative to individual reads within a sample. the detection of these can be completely automated through the use of technical specifications, and allow for the inclusion of a level of data and biologically specific tests which require expert input.

technical tests
the default technical tests are defined using structural components of the sequence alignment/map  specification dated 2010-12- <dig> . these tests generally include verifications of the sam file format itself . these errors are clearly defined through the use of standard metrics such as: it contains all reads that map beyond the length of a chromosome; contains an invalid cigar value; or contains zero-length reads. as these tests are defined through a well-known standard , and implemented in the picard toolset from samtools  <cit> , they are also fully automatable.

this list includes errors that are defined by the sam format. errors may be introduced at multiple levels as described in the "examples" column. these tests are run in samqa using the picard toolset from samtools.

biological tests
the biological plausibility of the test results is typically judged through expert analysis. in validation all features of the data that are highly unlikely in a biological context  are identified. the formal determination of implausibility requires a confidence threshold to offer meaningful results. this threshold determines for each feature whether a read should be considered highly erroneous  requiring some level of involvement from a domain expert . when the tool is run automatically the threshold can be used to assign pass/fail flags to each of the sequence files.

these tests extract useful, biological features from the data for expert analysis. other extraction tools  may be added as appropriate to the data or downstream analysis requires.

at its core, samqa is a series of tools that determine if a sample has syntactic errors and uses a series of heuristic measures to identify likely biologically improbable anomalies. the system is designed to be extensible so that further tests can be easily added. in implementation, samqa is two sets of tools that process binary alignment/map files using a defined standard  and expert analysis.

high performance computing
even for low coverage sequence files, traditional approaches to processing these data on a local machine are highly limited relative to the enormity of input data from sequencing methods. the samqa system has been designed to scale to meet the needs of investigations that may generate thousands of genomes. when high-performance computing  is required, the bam processing layer is handled by the hadoop-bam project  <cit> , with minor modification to allow bam sequence indexing to occur entirely within the hadoop distributed file system , a storage solution that spans disks in a cluster to provide one large, distributed file system  <cit> .

the mapreduce framework  <cit>  was selected due to the highly partitionable nature of the input data sets, and the relative ease of adapting our workflow to the mapreduce paradigm when searching for read-based structural errors. furthermore, as all operations that we define are commutative and associative, we can make use of hadoop's intermediary combine operation when transitioning between the map phase and partition, shuffle, and sort steps of hadoop's implementation of the framework. by specifying an intermediary combiner, we can reduce network and processing overhead by performing an immediate reduce over the output data sets of mappers on each cluster machine. for example, using a small, 80-core cluster running outputcoverage , the use of a combiner means the difference between three minutes and nearly  <dig> minutes of analysis over the same bam file , utilizing the same job across the cluster. this significant difference is due to the sheer volume of data reduction achieved by collapsing a large number of map outputs into a very small number of outputs from each combiner.

this table lists required time to completion at multiples of ten samples over an 80-core computational cluster running hadoop. each validation step includes a full map-and-reduce pass. all times are given in aggregate time to completion, assuming each file is scheduled for analysis after the previous one completes. the files selected are listed in additional file  <dig>  file size is the only consideration for speed comparisons.

our selection of the mapreduce framework is notable because, even for jobs bound by linear or linearithmic time and space, data sets and analysis can quickly prove unwieldy at the tera- and petabyte scale . mapreduce's strengths in data processing, when coupled with hadoop's strengths in data and computational locality, task delegation, and aggregation strategies over key-indexed information, provide significant constant time improvements, with a near-linear speedup bounded only by the number of nodes in a compute cluster. in the context of a mapper-only job, we see improvements in constant processing time plus linear data marshalling time associated with hadoop distributing tasks to individual machines. in the case of a job that also defines a reduce operation, improvements are linearithmic with its primary overhead attributable to distributing tasks and the partition, shuffle, and sort operations performed by hadoop.

the samqa toolset consists of eleven different technical and biologically relevant tests run over each bam file. using the hadoop cluster and data as referenced in table  <dig>  all of the tests can be run in parallel decreasing the overall time for analysis .

all feature extraction tools are implemented as separate mapreduce jobs, which operate on the complete data sets as described . while this results in referencing the same read data multiple times , the speed and performance of hdfs trivialize this operation through data and cache locality. as a result of these systems working in tandem, the toolkit is extremely robust, fast, easy to understand, and easy to extend. we believe that these factors are vital to the extensibility of samqa as new analysis types are requested and added to the tool.

each feature extraction tool outputs a series of key-value pairs in a human-readable and machine-parsable text format. each key-value pair describes some feature of the data as defined by the tool being run. for example the pair < bin_example_0_coverage,  <dig> > has the compound key bin_example_0_coverage describes the coverage for the kilobase region  <dig> for our example sequence, and the value  <dig>  denotes coverage over this region. while somewhat terse in their contrived meaning, all compound keys output by samqa are fully representative and uniquely identifiable. this simple representation is designed to make it easier to integrate with downstream analysis tools while remaining extensible to the operating standards of those wishing to integrate the tool into their own workflow.

for all mapper-only jobs, the mappers are used to perform parallel computations against isolated, atomic data fragments. in a mapreduce operation, each mapper performs input pre-processing, the combiner  aggregates these intermediate results, and the reducer performs each final calculation. this is especially vital for any tests across the entire input data such as pearson correlations or calculations of coverage.

while samqa provides a clean pass or failure for invalid reads, it provides no additional facilities to process these key value pairs . we leave this job to post-processing and data mining tools better equipped to the task, which may operate on a vastly reduced output data set relative to the size of the original sample files. we have currently defined tools built on top of samqa that parse these key-value pairs in python and additional visualization tools written in r. more details regarding setup and use of samqa as well as information about the output format can be found at http://informatics.systemsbiology.net/project/samqa

RESULTS
the samqa toolkit was developed to support work being undertaken at the center for systems analysis of the cancer regulome, which is one of the tcga genome data analysis centers.

the tool is run across all samples prior to secondary analysis. in a recent qa run on coad/read  samples the tool was used to analyze  <dig> exome and  <dig> full genome samples. the results of the technical tests are summarized in table  <dig>  and the results of the biological tests are shown in figures  <dig> and  <dig> . the tool automatically rejected those samples that failed the technical tests .

the technical tests were run across  <dig> exon capture sequences files and  <dig> full genome sequence files for coad/read cancer samples from the tcga project. the results identified problems with the files, and also identified  <dig> files that could not be used for further analysis. the mapping issues found in the whole genome and exon datasets are due to a documented issue within the alignment tools where bwa maps beyond the reference. the tool flags it as an error, but it is non-fatal to samqa. the files and samqa output are provided in additional file  <dig> 

the biological validation tests are used to further explore the data. the exploration allows for the identification of files that have similar properties, which will result in batch effects , as well as individual outliers. the tests themselves are output as a single file, and can be read directly into an analysis program. the supplementary materials contains the output for the default tests that have been run across both the coad/read samples, as well as glioblastoma  and ovarian  cancer samples.

CONCLUSIONS
samqa is a qa analysis toolkit that runs a series of tests over sequenced read data and is optimized for large numbers of files. the tests are for both verification of errors according to the sam specification, and for assigning scores relating to the biological implausibility of structurally valid, dubious reads that relate to putative erroneous samples. it provides a simple, extensible, and robust framework built on top of google mapreduce and apache hadoop, and is capable of processing large volumes of data quickly in a highly parallel manner. we have used the tool for analysis over data sets of ov, gbm, and coad/read cancer data from tcga. the software can be used, with minimal extension, to provide useful analysis of any form of sequenced read data in sam-defined formats.

we believe that this tool is valuable to the medical research and bioinformatics communities specifically, as it provides a sanity check and second opinion that release data sets are valid. the tool can be used as part of an automated pipeline, and the hpc system means that the tool can be run repeatedly on increasingly large files as investigations evolve. samqa also provides an improvement in standards for release quality, which we feel is valuable in a community that relies heavily on custom and highly vendor-specific technologies for sequencing and data processing. samqa is released as a free and open-source tool to the community.

availability and requirements
project name: samqa

project home page: http://informatics.systemsbiology.net/project/samqa

operating system: platform independent.

programming language: java

other requirements: java  <dig>  or higher, computational cluster or single server running hadoop  <dig> . <dig>  basic familiarity with google mapreduce and apache hadoop. further information on setting up and running a hadoop cluster can be found in hadoop's quick start guide  <cit> , cluster setup guide  <cit>  or in tom white's book, hadoop: the definitive guide
  <cit> .

license: apache version  <dig> 

authors' contributions
jb conceived of the tool and participated in the design, testing and validation. tr designed and developed the toolset. sk participated in design, testing and validation and contributed equally with tr to the manuscript. rb participated in result validation. all authors approve of this manuscript.

supplementary material
additional file 1
samqa coad output. this provides the output of the samqa tool after a run over the  <dig> coad data files.

click here for file

 additional file 2
samqa output for hadoop comparison. this lists the files used for the test time comparison across hadoop and the single-core server.

click here for file

 acknowledgements and funding
this work was supported by grant u24ca <dig> and r01ca <dig> from the national cancer institute, p50gm <dig> and r01gm <dig> from the national institute of general medical sciences, and nih contract hhsn272200700038c from the national institute of allergy and infectious diseases. the content is solely the responsibility of the authors and does not necessarily represent the official views of the nih.
