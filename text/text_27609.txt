BACKGROUND
in recent years, clustering algorithms have been effectively applied in molecular biology for gene expression data analysis . with the advancement in microarray technology, it is now possible to observe the expression levels of thousands of genes simultaneously when the cells experience specific conditions or undergo specific processes. clustering algorithms are used to partition genes into groups based on the similarity between their expression profiles. in this way, functionally related genes are identified. as the amount of laboratory data in molecular biology grows exponentially each year due to advanced technologies such as microarray, new efficient and effective methods for clustering must be developed to process this growing amount of biological data.

among the various clustering algorithms, k-means  <cit>  is one of the most popular methods used in gene expression data analysis due to its high computational performance. however, it is well known that k-means might converge to a local optimum, and its result is subject to the initialization process, which randomly generates the initial clustering. in other words, different runs of k-means on the same input data might produce different solutions.

a number of researchers have proposed genetic algorithms  <cit>  for clustering. the basic idea is to simulate the evolution process of nature and evolve solutions from one generation to the next. in contrast to k-means, which might converge to a local optimum, these genetic algorithms are insensitive to the initialization process and always converge to the global optimum eventually. however, these algorithms are usually computationally expensive which impedes the wide application of them in practice such as in gene expression data analysis.

recently, krishna and murty proposed a new clustering method called genetic k-means algorithm   <cit> , which hybridizes a genetic algorithm with the k-means algorithm. this hybrid approach combines the robust nature of the genetic algorithm with the high performance of the k-means algorithm. as a result, gka will always converge to the global optimum faster than other genetic algorithms.

in  <cit> , we proposed a faster version of gka, fgka that features several improvements over gka including an efficient evaluation of the objective value twcv , avoiding illegal string elimination overhead, and a simplification of the mutation operator. these improvements result that fgka runs  <dig> times faster than gka  <cit> . in this paper, we propose an extension to fgka, incremental genetic k-means algorithm  that inherits all the advantages of fgka including the convergence to the global optimum, and outperforms fgka when the mutation probability is small. the main idea of igka is to calculate the objective value twcv and to cluster centroids incrementally. we then propose a hybrid genetic k-means algorithm  that combines the benefits of fgka and igka. we show that clustering of microarray data by igka method has more tendencies to group the genes with the same functional category into a given cluster.

RESULTS
our experiments were conducted on a dell poweredge 400sc pc machine with  <dig> g hz cpu and  <dig> m ram. three algorithms, fgka, igka and hgka algorithm were implemented in c language. gka has convergence pattern similar to fgka and igka, but its time performance is worse than fgka, see  <cit>  for more details. in the following, we compare the time performance of fgka and igka along different mutation probabilities, and then we compare the convergence property of four algorithms, igka, fgka, k-means and som . at the end, we check how we can combine igka and fgka algorithm together to obtain a better performance.

data sets
the two data sets used to conduct our experiments are serum data, fig2data, introduced in  <cit> and yeast data, chodata, introduced in  <cit> . the fig2data data set contains expression data for  <dig> genes. each gene has  <dig> expression data ranges from  <dig> minutes to  <dig> hours. in other words, the number of features d is  <dig>  according to  <cit> ,  <dig> genes can be divided into  <dig> groups. the chodata is a yeast dataset, composed of expression data for  <dig> genes and the expression data for each gene ranges  <dig> minutes to  <dig> minutes, which means that the number of features d is  <dig>  according to the description in  <cit> , the genes can be divided into  <dig> groups. since the igka is a stochastic algorithm, for each experiment in this study, we obtain the results by averaging  <dig> independent run of the program. the mutation probability, the generation number, the population number all affect the performance and convergence of fgka and igka. the detailed discussion of the parameters setting can be found in  <cit> . in this paper, we simply adopt the result in  <cit> , the population number is set to  <dig>  and the generation number is set to  <dig>  these parameter setting are safe enough to guarantee the algorithm converge to the optima.

comparison of igka with fgka on time performance
as indicated in the implementation section, the mutation probability has great impact on igka algorithm. we check the performance impact on igka in this section, and the convergence in the next section. figure  <dig> shows the time performance results for these two algorithms. we can see that when the mutation probability increases, the running time increases accordingly for both algorithms. however, when the mutation probability is smaller than some threshold , igka has a better performance. figure  <dig> also indicates the thresholds vary from one dataset to another. in order to achieve better performance of igka in large data set, mutation probability may need to be set to smaller than that in small data set. for example, in larger data set chodata, we should set the mutation probability to  <dig>  to have igka outperform fgka. on the other hand, in order to have igka outperform than fgka, we only need to set the mutation probability to  <dig>  in the small data set fig2data. in general, the threshold value depends on the number of patterns and the number of features in the data set. it is easy to understand that the performance gained in igka is mainly dependent on how many patterns change their cluster memberships. so, in a large data set, even small number of mutation probability may cause many patterns change their cluster memberships.

comparison of igka with fgka, k-means and som on convergence
figures  <dig> and  <dig> show the convergence of igka versus fgka across different mutation probabilities based on fig2data and chodata, respectively. these two algorithms have similar convergence results. when the mutation probability changes in these two data sets, it has little impact on these two algorithms during the range that is given in figure  <dig>  except for the case when the mutation probability is too large. it gives an opportunity to choose igka with better performance without losing the convergence benefit.

we also make an interesting comparison of igka with fgka, k-means and som on twcv convergence. we treat each algorithm as a black box. two data sets, the fig2data and chodata, are fed into the algorithms, and the clustering results are exported as a text file. we then use an in-house program to calculate the twcvs for each result. the experiments on k-means and som algorithm are conducted on an open source software  <cit> . as we can see in table  <dig>  the igka and fgka have almost similar convergence result, and much better than the convergence of k-means algorithm. the twcv convergence of som is much worse than the others although these four algorithms all use euclidian distance as their measurement. the reason why we do not include another popular clustering algorithm, hierarchical clustering algorithm is because it is hard to define the boundary among the nested clusters, which means we cannot simply define the number of cluster before running the program.

combination of igka with fgka
discussion
the clustering results of chodata using our igka algorithm were evaluated according to the scheme of gene classification of mips yeast genome database  <cit> . we found that genes of similar function were grouped into the same cluster. table  <dig> shows  <dig> main clusters including  <dig> functional categories of genes. the results are comparable to the data of  <cit> . the absolute number of orfs with functional categories in some cluster may not be always higher than tavazoie's result, but we found that the percentage of the orf number within functional category of each cluster in the total orf number of each cluster is usually higher than tavazoie's result in most cases. for example, they found that there are  <dig> genes in the functional category of nuclear organization distributed in their cluster  <dig>  in which there are  <dig> orfs, so their percentage is  <dig> %. but we found there are  <dig> genes of the same functional category distributed in our cluster  <dig>  in which there are only  <dig> orfs, and our percentage is  <dig> % that is significantly higher than  <dig> %.

most interestingly, we found a remarkable enrichment of orfs for the functional category of organization of mitochondria. they are mainly located in two clusters: cluster  <dig> and cluster  <dig>  cluster  <dig> has  <dig> orfs in total, and  <dig> orfs belong to the category, resulting in a very high percentage,  <dig> %. cluster  <dig>  has  <dig> orfs in total, in which there are  <dig> orfs belonging to the category and the percentage is  <dig> %. the percentage of orfs within the same function category is only  <dig> % in the previous paper. it looks that our igka method is more likely to increase the degree of enrichment of the genes within functional categories, and to make more biological sense. we also found a new function category: lipid and fatty isoprenoid metabolism distributed in cluster  <dig>  which was not listed in tavazoie's paper.

CONCLUSIONS
in this paper, we propose a new clustering algorithm called incremental genetic k-means algorithm . igka is an extension of fgka, which in turn was inspired by the genetic k-means algorithm  proposed by krishna and murty. the igka inherits the advantages of fgka, and it outperforms fgka when the mutation probability is small. since both fgka and igka might outperform each other, a hybrid approach that combines the benefits of them is very desirable. our experimental results showed that not only the performance of our algorithm is improved but also the clustering result with gene expression data has some interesting biological discovery.

