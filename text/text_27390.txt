BACKGROUND
in the midst of the functional genomic era, dna microarray technology is widely used to study the expression level of thousands of genes under different experimental conditions or time points. grouping of genes is a norm in functional genomics. statistical criteria and biological hypotheses, combined with well defined computational techniques such as clustering  <cit> , are then used to group genes that could be functionally related. post clustering processes, such as functional characterization that relate the gene expression profile with the functional significance must be conducted. a prevailing procedure in functional characterization is to search the annotation of genes in respective group through gene ontology   <cit> , kegg pathways  <cit> , reactome pathways  <cit> , transcription factor  gene association data  <cit> , and/or gene networks. these post processing steps allow identifying biological functions which are highly represented in the given group of genes.

the gene ontology provides controlled vocabularies for the description of the molecular function, biological process, and cellular component of gene products  <cit> . tf-gene association data describes with a given probability whether or not a given gene is regulated by a specific transcription factor. one of the goals of identifying clusters of functionally related genes is to associate the genes and their interconnections with known biological pathways. in this regard, the kegg pathways database provides a very rich resource to test this hypothesis. its aim is to link individual level information such as genes, proteins, enzymes, with system level information such as interactions, enzymatic reactions, and pathways.

there are several packages available for functional characterization of gene groups: funcassociate  <cit> , gostat  <cit> , bingo  <cit> , david  <cit> , clench  <cit> , fatigo  <cit> , gost  <cit> , us fda's arraytrack  <cit> , expander  <cit> , and many others that are referenced in the microarray tools' section of the go website  <cit> . however, each of these has its limitations. among these limitations has been the failure to consider which genes were actually assayed in the experiment that produced the list of interesting genes  <cit> . several of these pioneering functional evaluation tools have mainly been implemented using only the go annotations  <cit> . some of these tools, such as bingo  <cit>  and clench  <cit> , are available as a part of some broader software packages or dedicated to specific applications, and do not offer flexibility in terms of deployment and biological applications. bingo  <cit>  only offers go evaluation and it is designed as a plug-in to cytoscape  <cit> . clench  <cit>  is specifically designed to allow arabidopsis thaliana researchers to perform automated retrieval of go annotations from tair database  <cit> . david  <cit> , fatigo  <cit> , gost  <cit> , arraytracktm  <cit> , and expander  <cit>  offer the use of more advanced functions, such as protein-protein interactions and/or kegg pathways, than the others. however, david does not offer the possibility for user to incorporate available tf-gene association data in their analysis. although fatigo and expander make use of tf binding data, the user is limited to use the one provided by the software. furthermore, packages such as fatigo and several others that are only available as web server application make the users completely dependent on the availability of the server and unable to update associated data, such as go data files.

in this paper we introduce a gene ontology analyzer, goal, which is a software tool specifically designed for the biological evaluation of groups of genes. goal implements and supports efficient and statistically rigorous biological interpretations of groups of genes through its integration with the gene ontology, available tf-gene association data, and kegg pathways. unlike other go analysis tools, goal provides three go-tree search strategies to detect the go terms that are specific to a gene group and enables users to update source data, such as go files, at anytime. additionally, goal offers flexibility in terms of integration and deployment.

the hypotheses behind the use of gene ontology, tf-gene associations, the kegg pathways in the implementation of goal are described as follows. ideally, a good clustering algorithm identifies genes with similar expression patterns, which are probably co-regulated by the same transcription factors  <cit> . in addition, genes that are co-expressed frequently participate in the same or related biological pathways  <cit> . in both cases, if the genes in co-expressed groups are functionally related, they should be enriched with and annotated to related go terms, involved in related biological pathways and regulated by related transcription factors  <cit> .

the rest of this paper is described as follows. first, we describe the implementation. then we illustrate the use of goal through application examples, and show how the goal package can be deployed. finally, we discuss and conclude.

implementation
goal is a java module designed specifically to provide the functional characterization of groups of genes. within the input list of genes, goal identifies statistically significant go terms, tf-gene associations, and kegg pathways. the framework relies on the p-value computed using a fisher's exact test on a  <dig> Ã—  <dig> contingency table derived either from the go enrichment level, tf-gene associations, or kegg pathways. the output of goal is a list of significant go terms, tf-gene associations or kegg pathways together with their p-values that state how significant the associations are for the list of input genes.

statistical significance
for a given set of input genes  and a reference gene list, goal determines all annotated go terms and their parental go terms , all tf-gene associations, and all associations with kegg pathway for the set of input genes. it then counts the number of appearances of each go term, each tf-gene association, and each association with a kegg pathway for the genes within the group and for the reference genes. fisher's exact test is performed to determine whether or not the observed difference is significant. this will result in a p-value for each go term, tf-gene association, or the association with a kegg pathway that the observed counts could have been achieved from the background list by chance. the p-value is evaluated using the hypergeometric distribution for each go term, tf-gene association, or kegg pathway:   

where n is the number of genes in the intersection between the input gene list and those involved in the go term, tf-gene association, or kegg pathway of interest; n is the total number of unique genes in the reference gene list, k is the total number of genes that are annotated to the go term, tf-gene association, or kegg pathway of interest, and i is the number of genes in the input dataset. to give more statistical power to goal, the computed p-value is further corrected using one of the three multiple-testing corrections   <cit> . these multiple-testing correction approaches are listed in the order of their stringency, with the bonferroni being the most stringent, and the benjamini fdr being the least stringent. the more stringent a multiple-testing correction, the less false positive observations are allowed.

gene ontology search strategies
three go-tree search strategies are implemented in goal: i) max path length from leaf, ii) min path length from root, and iii) the combination of i and ii which we call combined search strategy in this article. note that strategies i and iii are specific in goal, whereas, strategy ii is used in most other gene ontology tools mentioned above.

max path length from leaf
here, we define leaf as the most specific go term of a gene. this go term may not be a leaf node along the go-tree hierarchy. but there is no go-term at the current stage that is more specific in defining the gene. goal first locates the most specific go term of the gene along the hierarchy , users are allowed to define the maximum number of steps along its parental path to backtrack to a parent, grand-parent or great grand-parent, etc., of the go term. this parameter defines the go-tree search space to the kth parental go term from the most specific go term. for example, if a user wants to search the most specific go term only, the value is  <dig> 

min path length from root
goal first locates the most general go term of the gene along the hierarchy ; users are allowed to define a threshold number of steps from the root along the offspring path. this threshold number of steps is the cut off level in the go-tree. most existing tools implement only this strategy.

combined search
this is a combination of strategies i and ii. when this approach is used, goal first locates the most specific go term as described in strategy i. then, the p-value of each one of them is computed as in strategy ii. by doing this, goal considers the most specific go terms, while discarding the ones that are more general than the threshold set by strategy ii. another advantage is that it also considers genes that are associated with parental go terms of the most specific go terms located within strategy ii.

development
goal is implemented entirely in java. it is available as an executable jar file and technically works with all operating system supporting java sdk  <dig>  or later. we tested under microsoft windows  and linux systems  and provided a start-up script for these two operating systems. the gui is written using the java swing and awt libraries which are part of the java sdk. for network communication between clients and the server, the java rmi library is used, which is also part of the sdk. other packages included are jargs  and csvreader . goal also makes use of external gene ontology and gene annotation files  <cit> . the go files are accessible for analysis by goal using a partial, modified version of the biojava  <dig> . <dig> api. goal can download these files directly from the gene ontology  <cit>  or european bioinformatics institutes  <cit> . all go file can be updated at any time by clicking an update button.

the gui provides user convenience of inputting the list of genes and selecting various parameters. users first specify a list of gene identifiers of interest in the text area of the input interface . the list of gene identifiers can also be uploaded as a delimited data file specified in the user manual . it is the same for reference gene list if users desire to input their own references. by default, the system provides the whole genome of the selected species as the reference. next, the user specifies the gene annotation source  from a drop-down list, which specifies the go file that goal will use to seek for annotation and to calculate the p-values. a list of default parameters  is also available in the gui . the user may change these default values if they desire. if the tf-gene association data for the corresponding study and species are available, users can upload them as tab delimited data files. finally, users can also choose the kegg pathway evaluation if the selected species is supported.

the tf-gene association file is compiled by the user. as we mentioned earlier, the tf-gene associations data can be derived from chromatin immunoprecipitation   <cit>  experiments. they can also be compiled from literature and/or tf databases of well known and well characterized biological interactions such as transfac  <cit> , jaspar  <cit> , and regulondb  <cit> , etc. for example, transfac is a database on eukaryotic transcriptional regulation. the database contains data on transcription factors, their target genes and their experimentally-proven binding motifs in genes' promoter. the tf-gene association data is represented as a matrix, where the rows correspond to genes and the columns to transcription factors. the entries of the matrix are either  <dig> or  <dig>  with  <dig> for a known interaction between a tf and its target gene and  <dig> for no interaction.

following the input phase, the goal algorithm executes as described above, and new windows will appear displaying the functional evaluation results. few examples are shown in figures  <dig>   <dig> and  <dig>  from these new windows, a user has the option to explore or save the results as a comma separated values  file. furthermore, the go terms in the output contain hypertext links to a visualization tool for the go hierarchy; genes are linked to ncbi  <cit> , and kegg pathways ids are linked to kegg database  <cit> .

goal is available as additional file  <dig>  a quick video tutorial is also available as additional file  <dig>  the most recent version of goal can be downloaded directly from the goal project website: http://bioinfo.iit.nrc.ca/goal/.

RESULTS
application examples
we used three different datasets to test goal. groups of co-expressed genes were obtained from each set of data using a well defined clustering algorithm  <cit> . the first dataset is a group of co-expressed gene from the time-series gene expression data of the saccharomyces cerevisiae amino acid  starvation dataset  <cit> . for the tf-gene association data, we used the published aa starvation chip-chip dataset on  <dig> transcription factors  <cit> . figure  <dig> shows the combined results of the go analysis, tf-gene association, and kegg pathway association of an identified gene group using goal. the results shown in figure  <dig> are consistent with experimental result; the transcription factors fhl <dig>  and sfp <dig>  regulate many genes involved in ribosome biosynthesis  <cit> . this is the most significant go biological process in this cluster. this is also consistent with the kegg pathway analysis where the ribosome pathway  is the most significant.

the second dataset is a group of co-expressed genes from the saccharomyces cerevisiae cell cycle dataset  <cit> . the tf-gene association data we used here are derived from  <cit> . this dataset contains  <dig> yeast tfs and their target genes. figure  <dig> shows the combined results of the go analysis, tf-gene association, and kegg pathway association of an identified cluster using goal. the most significant go biological processes identified for this cluster is "cell cycle", with a p-value =  <dig> e- <dig> . kegg pathways and tf-gene results are consistent with the go analysis. tf-gene analysis shows that the transcription factors mbp <dig> , swi <dig>  and swi <dig>  have significantly overrepresented number of target genes in this cluster. these three tfs are known to participate in the two major transcription complexes regulating g1/s transition in cell cycle process  <cit> . kegg pathways analysis also revealed the cell cycle pathway  and dna replication pathway . this indicates that the three parts of analysis are consistent.

the third dataset is a co-expressed gene group from the time series gene expression data of brassica napus during seed development  <cit> . since the b. napus genome is not yet complete, we use the orthologs in a. thaliana, a close relative of b. napus, for computational analysis. the search for orthologs in a. thaliana is done by blasting the sequences of interest b. napus genes against the tair  <cit>  database  and keeping only the matches with scores better than 1e- <dig>  the tf-gene interactions matrix was inferred through a carefully selected literature search, bias towards experimental evidence  <cit> . more precisely, we compiled from the literature a set of a. thaliana tfs that have been shown by microarray experiments and/or quantitative rt-pcr to promote, suppress, or induce genes that are related to seed development, fa metabolism and other related biological processes such as lipid metabolism and biosynthetic process, with a p-value <  <dig>   <cit> . figure  <dig> shows the results of the go analysis, tf-gene association, and the involvement in the metabolic pathways. go biological process shows that most of the genes in this group are highly enriched under seed development, lipid and fatty acid biosynthetic and metabolism. this is consistent with the tf-gene association results and kegg pathway results. this group of genes is significantly co-regulated by the transcription factors lec <dig> , lec <dig> , fus <dig> , and wri <dig> . significant number of genes in this group are involved in the biosynthesis of alkaloids derived from shikimate pathway , phenylpropanoid , which are related with fatty acid biosynthesis  and metabolism , and citrate cycle . these results are consistent with the fact that the lec <dig> and lec <dig> have been shown to play major roles during seed development, and also with the fact that lec <dig> function is partially dependent on fus <dig> and wri <dig> in the regulation of fa and fa-derived complex lipid  <cit> .

comparative analysis of go-tree search strategies i and ii  shows that strategy i usually outperforms strategy ii in terms of percentage of genes associated to a go term . here, the percentage of genes associated to a go term corresponds to the number of genes in the intersection of a cluster with a go term divided by the total number of genes in the background that are annotated to that go term. nevertheless, the p-values of go terms in strategy ii are in some cases slightly more significant as compared to the ones in strategy i . further analysis showed that several go terms identified using strategy ii are more generic compared to the ones identified by strategy i which are more specific. thus groups of genes in strategy i are biologically more parsimonious than the ones in strategy ii. note that, there might be some values for which the two go-tree search strategies yield the same output. furthermore, from a statistical perspective, a search strategy that is related to more genes is preferable. but, in biological applications, this assertion is biologically relevant if the go terms depicted by the corresponding search strategy are more specific. in other words, a search strategy that is related to more genes and that depicts more generic go terms is less biologically relevant compared to a search strategy that depicts more specific go terms as strategy i.

the data used for these analyses are provides in the goal tool as default data and can be exploited by the users in their own research. goal has also been successfully used to characterize the following six human genes  provided to us by one of the reviewers , to characterize groups of correlated genes in dna microarray experimental data of arabidopsis thaliana under pathogens attack  <cit> , and several in house  dna microarray datasets of brassica napus during seed development.

deployment
goal can be used as a standalone tool and also offers flexibility to be integrated with other applications. for example, it can be a plug-in to other computational biology tools, or deployed as a web server application.

the standalone application
the tool is packaged into a single executable jar file and only requires java to be installed. a configuration file is automatically generated on the first run and can be modified to suit the user's need. the installer also creates necessary file structure and a shortcut to a batch file to run the tool. go files are downloaded from go database  <cit>  on the first run.

plug-in application
goal can be easily integrated into other tools with minimal coding by the user. the user can create an instance of the goalplugin class which gives access to all components of goal. it can be used to retrieve or display graphical user interface  components for integration into existing guis or display in a separate window. the class also allows for running functional components independently of the gui in a separate or currently used thread. furthermore the user can execute the jar file through a provided command line interface.

web server application
another functionality of goal is the ability to be used remotely through a java remote method invocation  server. along with the standard package, a client package is also available. the client can be installed on any remote computer and communicate with the server machine that host a web server. all the computation initiated by various clients is done by the same server. this creates an organized environment where only the server needs to keep annotation files up-to-date. furthermore only the server would require suitable hardware to run the computations. this way, the server version can also be a middleware to a database that host gene data. more details are available in the user manual.

discussion
the recent proliferation of high-throughput functional genomics methods has brought with it a variety of ways to produce large lists of genes based on well defined statistical assumptions and biological hypotheses. for example, clustering algorithms are used to collect sets of co-expressed genes. genes in each group that behave similarly in the expression profile across experimental conditions or time points most likely share similar biological functions and processes, genetic pathways, and probably co-regulated. several solutions have been offered to address these issues. however, each of these has its limitations, of which, the lack of appropriate corrections for multiple hypothesis testing and the failure to consider whether a gene was actually validated in wet lab experiment are the two most obvious ones  <cit> . the goal package addresses this issue by implementing several multiple correction approaches and by allowing users to incorporate chip-chip data.

another important aspect of ontological analysis regardless of the tool or statistical method is the choice of the reference gene list against which the list of differentially regulated genes is compared. inappropriate choice of reference genes may lead to false functional characterization of a gene list. khatri and drÇŽghici  <cit>  pointed out that only the genes represented on the array, although quite incomplete, should be used as reference list instead of the whole genome as it is a common practice. the goal package addresses this issue by allowing the users to either use the entire genome of the selected species as the reference, or upload their own reference genes.

in addition, go allows for the annotation of genes at different levels of abstraction due to its directed acyclic graph  structure. in this particular hierarchical structure, each go term can have one or more child terms as well as one or more parent terms. for instance, the same gene list is annotated with a more general go term such as "metabolic process" at a higher level of abstraction, whereas the lowest level provides a more specific ontology term such as "lipid metabolic process." it is important as in the goal package, to integrate the hierarchical structure of the go in the analysis since various levels of abstraction usually give different p-values. in this regard, goal first locate the most specific go term of the gene  along the hierarchy, users are allowed to define the maximum number of steps along parental path to backtrack to a parent or grand-parent of the go term. goal also implements a go-tree search strategy  common to most existing gene ontology packages. additionally, users may want to combine both strategies to do more specific functional characterization of a gene group. goal provides the users with three options to determine significant function of a gene group and to better address their research problem.

other than some go evaluation tool as implemented in several existing packages, goal takes a step further by also including the association between transcription factors and their target genes, and gene's involvement in various metabolic pathways in its evaluation process. the co-expressed genes identified through clustering processes are probably co-regulated by common transcription factors and frequently participate in the same or related biological pathways  <cit> . thus, they should be enriched with certain go terms, related with certain tfs, and associated with certain biological pathways. goal is not only capable of evaluating whether or not a given group of genes may be involved in the same genetic pathways, but also capable of evaluating whether or not they might be co-regulated at the transcriptional level.

CONCLUSIONS
we have introduced a new software package for functional characterization of a gene list and to evaluate the functional domain of these genes. goal integrates gene ontology with available tf-gene associations and kegg pathways information. goal provides users with three different go-tree search strategies. goal is highly portable, can be used as a standalone tool, a plug-in to other computational biology tools, or deployed as a web server application. this way, users have an option to keep privacy of their datasets without sending over their data through internet to the server provided by the software owner. also, users may analyze their data using most updated information by a single click that updates the data source files . goal presents its result of analysis in a highly visual and interactive manner. the unique automated analysis capabilities of goal combined with its visualization and integration capabilities should merit goal to be the software tool of choice for functional evaluation of gene groups. goal is available in additional file  <dig>  subsequent update will be available at goal home page: http://bioinfo.iit.nrc.ca/goal/.

availability and requirements
software name: goal: gene ontology analyzer

project home page: http://bioinfo.iit.nrc.ca/goal/

operating system: tested in microsoft windows  and linux ; technically, it should work with all operating systems supporting java  <dig>  or higher.

programming language: java

other requirements: java  <dig>  or higher, internet connection

license: non-commercial research use license

any restrictions to use by non-academics: license needed from authors for commercial use.

authors' contributions
abt initiated the goal project. abt and yp both contributed to the design of goal. ag implemented goal. all participated in the drafting and revising of the manuscript.

supplementary material
additional file 1
goal jar file and goal user manual .

click here for file

 additional file 2
quick video tutorial of goal  . require web browser to visualize. this tutorial is also accessible via the goal project website at the following url: http://bioinfo.iit.nrc.ca/goal/demo/goal-demo.htm

click here for file

 additional file 3
goal  and gost  <cit>  detail results of six human genes: ifna <dig> il12b il2rb stat <dig> stat <dig> irf <dig>  they were provided to us by one of the reviewers.

click here for file

 acknowledgements
we are thankful to three anonymous reviewers for their constructive criticisms. this work is supported by genomics and health initiative and institute for information technology of the national research council canada.
