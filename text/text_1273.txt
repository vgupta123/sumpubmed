BACKGROUND
structural genomics projects are yielding an increasingly large number of protein structures with unknown function. as a result, computational methods for predicting functional sites on these structures are in urgent demand. there has been significant interest in developing computational methods for identifying amino acid residues that participate in protein-dna interactions based on combinations of sequence, structure, evolutionary information, and chemical and physical properties. for example, jones et al.  <cit>  analyzed residue patches on the surface of dna-binding proteins and used electrostatic potentials of residues to predict dna-binding sites. later, they extended that method by including dna-binding structural motifs  <cit> . in related studies, tsuchiya et al.  <cit>  used a structure-based method to identify protein-dna binding sites based on electrostatic potentials and surface shape. gao and skolnick  <cit>  predict dna-binding using structural template comparison and statistical potential. sophisticated machine-learning methods, like svm, neural network, and random forest, have also been used to predict dna-binding sites integrating a wide range of features  <cit> . on another direction, several methods have been developed for predicting dna-binding sites using only protein sequence-derived information as input  <cit> . to date, the methods that take the advantage of structure-derived information achieve better results than those using only sequence-derived information.

one common limitation of the above-mentioned methods is that the sequence and structural properties of a surface patch are input to machine-learning methods in the form of vectors. when the properties of a surface patch are encoded as a vector, the information of how these properties distribute over the surface is lost. for example, if a surface patch includes five amino acid residues, the above-mentioned methods will encode the amino acid identities of this surface patch as five independent values in a vector. in this representation, the spatial arrangement of these five residues on the surface patch is not encoded. unfortunately, the spatial arrangement of properties on a surface patch plays a crucial role in determining the function of the surface patch.

to overcome this limitation, this paper presents a graph approach for dna-binding site prediction. in this study, graphs are used to represent surface patches, such that the spatial arrangement of various properties on the surface is explicitly encoded. the similarities between surface patches are then computed using a graph kernel method. a voting strategy is then used to classify surface patches into dna-binding sites versus non-binding sites based on their similarity to known dna-binding surface and non-dna-binding surface. when applied to set of unbound structures of dna-binding proteins, the proposed method can precisely identify the locations of dna-binding sites.

methods
dna-binding proteins
dna-binding proteins were obtained from our previous study  <cit> . in that study, we extracted all protein-dna complexes from the pdb  <cit> . then, the dataset was culled using pisces  <cit> . the resulting dataset consisted of  <dig> proteins with mutual sequence identity ≤ 30% and each protein had at least  <dig> amino acid residues. all the structures have resolution better than  <dig>  Å and r factor less than  <dig> . in the current study, seven features are evaluated for their usefulness in the prediction of dna-binding sites. thus, seven features were calculated for each protein. among them, structural conservation was calculated based on the alignment of structural neighbors .  <dig> proteins were discarded because no structures neighbors were found. in the end,  <dig> dna-binding proteins were used to evaluate the proposed method in cross-validation.

features
dna was removed from the protein-dna complexes and seven features were calculated for each amino acid of the protein:  relative solvent accessibility was calculated using naccess  <cit> ;  electrostatic potential was calculated using delphi  <cit>  with the same parameters used in the study of jones et a.  <cit> . the electrostatic potential of a residue is defined as the average of the electrostatic potentials at the locations of all its atoms as described in jones et a.  <cit> ;  sequence entropy at each residue position  was extracted from the hssp database  <cit> . sequence entropy is a measure of sequence conservation. the lower the value, the more conserved is the corresponding residue position;  surface curvature at each residue position was calculated using msp ;  pockets on protein surface were detected using proshape . the pocket size of a residue is defined as the size of the pocket that the residue is located in. if a residue is not located in any pocket, then a value of  <dig> is assigned to the pocket size of the residue;  the dali server  <cit>  was used to search for structural neighbors in the pdb for each of the dna-binding proteins. the dali server returned a multiple alignment of the query structure and its structural neighbors. then, structural conservation score was calculated for each residue position using scorecons  <cit>  based on the multiple alignment; and  position-specific scoring matrix  of a protein was built by running  <dig> iterations of psi-blast  <cit>  against the ncbi non-redundant  database. in the pssm, each residue position corresponds to  <dig> values. thus, in total, each amino acid residue is associated with  <dig> attributes. all these attributes were normalized to the range of  <dig> <cit> .

interface residues and surface residues
interface residues are defined as in jones et al.  <cit> . solvent accessible surface area  was computed for each residue in the unbound protein  and in the protein-dna complex. a residue is defined to be an interface residue if its asa in the protein-dna complex is less than its asa in the unbound protein by at least 1Å <dig>  a residue is defined to be a surface residue if its relative accessibility in the unbound protein is >5%. in total,  <dig>  interfaces residues and  <dig>  surface residues were obtained.

interface patches and non-interface patches
for each dna-binding protein, an interface patch and a non-interface patch were obtained. the interface patch included all the interface residues. the non-interface patch was randomly taken from the protein surface such that  it consisted of a group of contiguous surface residues;  it had the same number of residues as the interface patch; and  it did not include any interface residue.

graph representation of patches
each amino acid residue is represented using a node labeled with the  <dig> attributes of the residue. two residues are considered contacting if the closest distance between their heavy atoms is less than the sum of the radii of the atoms plus  <dig>  Å. an edge is added between two nodes if the corresponding residues are contacting. in this way, a surface patch of residues is represented as a labeled graph.

graph kernel
kernel methods are a popular method with broad applications in data mining. in a simple way, a kernel function can be considered as a positive definite matrix that measures the similarities between each pair of input data. it the currently study, a graph kernel method, namely shortest-path kernel, developed by borgwart and kriegel  <cit> , is used to compute the similarities between graphs.

the first step of the shortest-path kernel is to transform original graphs into shortest-path graphs. a shortest-path graph has the same nodes as its original graph, and between each pair of nodes, there is an edge labeled with the shortest distance between the two nodes in the original graph. in the current study, the edge label will be referred to as the weight of the edge. this transformation can be done using any algorithm that solves the all-pairs-shortest-paths problem. in the current study, the floyd-warshall algorithm was used.

let g <dig> and g <dig> be two original graphs. they are transformed into shortest-path graphs s <dig> and s <dig>  where v <dig> and v <dig> are the sets of nodes in s <dig> and s <dig>  and e <dig> and e <dig> are the sets of edges in s <dig> and s <dig>  then a kernel function is used to calculate the similarity between g <dig> and g <dig> by comparing all pairs of edges between s <dig> and s <dig> 

 k= ∑e1∈e1∑e2∈e2kedge 

where, kedge is a kernel function for comparing two edges .

let e <dig> be the edge between nodes v <dig> and w <dig>  and e <dig> be the edge between nodes v <dig> and w <dig>  then,

 kedge=knode*kweight*knode 

where, knode is a kernel function for comparing the labels of two nodes, and kweight is a kernel function for comparing the weights of two edges. these two functions are defined as in borgward et al. <cit> :

 knode=exp-labels||22δ2) 

where, labels returns the vector of attributes associated with node v. when n features were used to labeled the nodes, labels and labels could be considered as the coordinates of two points in the n-dimensional space, and ||labels-labels|| is the euclidean distance between the two points. note that knode() is a gaussian kernel function. we tried different values for 12δ <dig> between  <dig> and  <dig> with increments of  <dig>  the accuracy varied from 86% to  <dig> % when all features were used in the cross validation. when 12δ <dig> was set to  <dig> the best accuracy was achieved.

 kweight=max-weight|) 

where, weight returns the weight of edge e. kweight is a brownian bridge kernel that assigns the highest value to the edges that are identical in length. constant c was set to  <dig> as in borgward et al. <cit> . we tried different values of c between  <dig> and  <dig> with increments of  <dig>  the change in accuracy was less than 1%.

classification
when the shortest-path graph kernel is used to compute similarities between graphs, the results are affected by the sizes of the graphs. consider the case that graph g is compared with graphs gx and gy separately using the graph kernel:

 k= ∑e∈e∑ex∈exkedge 

 k= ∑e∈e∑ey∈eykedge 

if gx has more nodes than gy does, then |ex|>|ey|, where ex and ey are the sets of edges in the shortest-path graphs of gx and gy. therefore, the summation in k includes more items than the summation in k does. each item ) inside the summation has a non-negative value. the consequence is that if k>k it may not necessary indicate that gx is more similar to g than gy is, instead, it could be an artifact of the fact that gx has more nodes than gy. to overcome this problem, a voting strategy is developed for predicting whether a graph  is an interface patch:

algorithm voting_stategy 

input: graph g

output: g is an interface patch or non-interface patch

let t be the set of proteins in the training set

let v be the number of votes given to "g is an interface patch"

v = 0

while 

{

take one protein  out of t

let gint and gnon-int be the interface and non-interface patches from p.

if k>k, then increase v by 1

}

if v>|t|/ <dig>  then g is an interface patch

else g is a non-interface patch

using this strategy, when k is compared with k, gint and gnon-int are guaranteed to have identical number of nodes, since they are the interface and non-interface patches extracted from the same protein . each time k>k is true, one vote is given to "g is an interface patch". in the end g is predicted to be an interface patch if "g is an interface patch" gets more than half of the total votes, i.e., v>|t|/ <dig> 

RESULTS
distinguish interface patches from non-interface patches
 <dig> interface patches and  <dig> non-interface patches were obtained from the dataset. the graph kernel method was used to compute similarities between patches and the voting strategy was used to classify these patches into interface versus non-interface patches. when evaluated using a leave-one-out cross-validation, this method achieves an overall accuracy of  <dig> %.  <dig> %  of the interface patches and  <dig> %  of the non-interface patches were correctly predicted.

contributions of the features
in the above experiment, all seven features were used to calculate similarities between graphs. to evaluate the importance of each feature, the leave-one-out cross-validation was repeated with only one feature being used at one time. table  <dig> shows show that when only one feature is used, the method achieves the best performance  with pssm as input. when all seven features are used, the method achieves the highest accuracy .

 <dig> pssm: position-specific scoring matrix;  <dig> e_p: electrostatic potential;  <dig> ent: sequence entropy;  <dig> strcn: structural conservation;  <dig> rasa: relative solvent accessibility;  <dig> cur: surface curvature;  <dig> poc: size of the pocket where the residue is located; and  <dig> all: all the seven attributes were used.

prediction of dna-binding residues
the interface and no-interface patches used in aforementioned experiments were generated based on actual binding sites. in a practical prediction situation, that size and the shape of the binding site are unknown. in order to evaluate the proposed method's ability to discover dna-binding sites in proteins, for each surface residue, we generated a surface patch that included the residue and its nearest  <dig> neighbors. then, the  <dig> interface and  <dig> non-interface patches were used as the training set to classify the surface patches into dna-binding and non-dna-binding classes. leave-one-out cross validation was performed at the protein level, so that interface and non-interface patches from a protein were not used in the classification of surface patches from the same protein. the proposed method identified dna-binding residues with  <dig> % accuracy,  <dig> % specificity and  <dig> % sensitivity. by changing the classification threshold  using in voting strategy, we obtained the roc for the prediction . the auc of the roc is  <dig> .

predicting dna-binding sites on unbound proteins
 <dig> test proteins with both dna-bound and unbound structures in the pdb were taken from a previous study  <cit> .  <dig> such proteins were considered in the study by tjong and zhou. here, we discarded 2abk because the sequence identity between the bound and unbound proteins was only 45%. in this section, the dna-binding sites on the  <dig> unbound proteins will be predicted using the graph kernel method. the prediction results are evaluated based on the actual dna-binding sites gleaned from the corresponding protein-dna complexes. for each surface residue on the test proteins, we obtained a surface patch that included the residue and its  <dig> closest neighbors. then, the patches were classified into interface versus non-interface patches using the  <dig> proteins as training set. for each test protein, the training set was filtered such that none of the proteins in the training set shares > 30% identical residues with the test proteins.

for  <dig> of the  <dig> proteins , dali was not able to find structural neighbors in pdb. thus, the structural conservation of these proteins could not be computed. for these  <dig> proteins, only pssm was used to compute similarities in the graph kernel, since table  <dig> shows that the proposed method can still achieve high accuracy when only pssm is used in the graph kernel. for the remaining  <dig> proteins, all seven features were used in the graph kernel.

unbound
 <dig> for the proteins in italic, the interfaces were predicted using only pssm. for the others, all seven features were used;  <dig> tp: the number of the interface residues falling in the top  <dig> patch;  <dig> fp: the number of non-interface residues in the top  <dig> patch.  <dig> prandom: when a patch is randomly picked, the probability of it containing at least as many interface residues as the top  <dig> patch.

the top  <dig> patch overlaps with the actual dna-binding site
using the voting strategy, each patch was assigned a number representing the number of votes it got. the higher the vote number, the more similar is the patch to the interface patches. for each test protein, we sorted the patches based on the numbers of votes they get, such that the top  <dig> patch got the most votes. table  <dig> shows that on every test protein, the top  <dig> patch overlaps with the actual dna-binding site. on  <dig> of the  <dig> proteins, all the six residues in the top  <dig> are actually interface resides . when averaged over the  <dig> proteins, the top  <dig> patch contains  <dig>  interface residues and  <dig>  non-interface residues, i.e., on average, 80% of the residues in the top  <dig> patch are interface residues. these results show that on a test protein, the top  <dig> patch can precisely indicate the location of the actual dna-binding site.

if a patch is randomly picked from a test protein, what is the probability  to obtain a patch that is at least as good as the top  <dig> patch in terms of predicting the dna-binding sites? for each test protein, prandom is calculated as n/nall , where nall is the total number of patches on the protein, n is the number of the patches that have at least as many interface residues as the top  <dig> patch. the results  show that for  <dig> of the  <dig> proteins, prandom is less than 10%. the average prandom for the  <dig> protein is  <dig> %. this indicates the significance of the predicting method.

obtaining higher coverage by combining multiple top-ranking patches
in the evaluation of dna-binding site prediction methods, there are mainly two measures that researchers are interested in: coverage  and accuracy , where tp is true positive, i.e. the number of residues that are predicted to be interface residues and are actually interface residues, nint is the total number of interface residues and npr is the number of residues that are predicted to be interface residues. coverage shows percentage of the actual interface residues that are correctly predicted and accuracy is the percentage of the predicted interface residues that are actually interface residues.

the above section has shown that the top  <dig> patch can precisely indicate the location of the dna-binding site on each test protein. however, since a patch has only  <dig> residues, the predictions solely based on the top  <dig> patch only have low coverage. we can obtain higher coverage by combining the predictions of multiple top-ranking patches. for example, if only top  <dig> patch is used to predict dna-binding sites, the average coverage and accuracy are 23% and 81% for the  <dig> proteins. when the union of the top  <dig> patches is used to predict dna-binding sites, coverage increases to 42%, but accuracy decreases to 72%. figure  <dig> shows the tradeoff between coverage and accuracy when multiple top-ranking patches are used. figure  <dig> shows the trend that as more top-ranking patches are used, coverage increases but accuracy decreases. if researchers prefer to identify more interface residues at the cost of lower accuracy, then they can choose to use more top-ranking patches to predict dna-binding sites. the performance will fall at the right side of the curve. on the other hand, if they desire higher accuracy, then they can use fewer patches.

comparison with other methods
while many computational methods have been proposed for the prediction of dna-binding sites, it is difficult to make direct comparisons between them, due to lack of a standardized benchmark for the evaluation. here, it is not our intent to make a systematic comparison between different methods. we only compared our method with two recent methods, mv  <cit>  and displar  <cit> , regarding their ability to find dna-binding sites on the  <dig> unbound proteins. both mv and displar use both structural and sequence information in predicting dna-binding sites.

the mv method  <cit>  integrates a wide range of structural, evolutionary, energy-based and experimental data and uses a random forest method to predict functional sites, including protein-, peptide-, dna-, rna-binding sites on protein structures. the  <dig> unbound protein structures were submitted to the mv online server to obtain the predicted dna-binding sites. the mv returned a list of amino acid residues with their corresponding prediction scores. by changing the score threshold using for prediction, the mv method obtained an auc of  <dig>  for the roc. in comparison, our method returned a list of surface patches with their prediction scores . our method achieved a slightly better auc of  <dig> .

the  <dig> test proteins used in this study were also used to evaluate the displar method when tjong and zhou proposed it  <cit> . in their publication, tjong and zhou also used coverage and accuracy to evaluate the predictions. however, they defined accuracy using a loosened criterion of "true positive" such that if a predicted interface residue is within four nearest neighbors of an actual interface residue, then it is counted as a true positive. here, in the comparison of the two methods, the strict definition of true positive is used, i.e., a predicted interface residue is counted as true positive only when it is an actual interface residue. the original data were obtained from table  <dig> of tjong and zhou  <cit> , the accuracy for the neural network method was recalculated using this strict definition .

 <dig> the method proposed in this study;  <dig> the displar method developed by tjong and zhou  <cit> ;  <dig> the mv method developed by  <cit> ;  <dig> the bold font shows the best performance among the three methods on each protein.

mv and our method returned a list of residues  with decreasing prediction scores and allowed users to tradeoff between coverage and accuracy by choosing a threshold. to compare them with displar, for each test protein, we gradually decreased the prediction threshold until the coverage achieved was equal to or higher than that of displar. then the coverage and accuracy of the methods were compared. on a test protein, method a is better than b, if accuracy>accuracy and coverage ≥coverage. table  <dig> shows the comparisons. on each protein, the best performance among the three methods are shown in the bold font. on  <dig> mml no method is better than others are on both accuracy and coverage, thus a best performance cannot be identified. our method achieved the best performance in  <dig> of the  <dig> proteins .

CONCLUSIONS
this paper presents competitive method for predicting dna-binding sites on proteins. the effectiveness of the method is demonstrated using cross-validation and by applying it to  <dig> unbound protein structures. different from other methods that represent sequence and structural properties of surface using vectors, the method proposed in this study uses labeled graphs. compared to vectors, one advantage of labeled graphs is that they can specifically encode the spatial arrangement of the properties on protein surface. since proteins and dna interact in a 3-dimensional space, the spatial arrangement of the properties on protein surface plays a pivotal role in the interactions. therefore, computational methods for prediction of the interface should consider the spatial arrangement of the properties. the proposed method uses a graph kernel to explore this information. using this graph kernel method, the proposed method avoids the demanding computation involved in the structural alignment and comparison.

competing interests
the authors declare that they have no competing interests.

authors' contributions
cy conceived of and designed the study, performed the computation and analysis, and drafted the manuscript. yw made partially contribution to the programming. all authors read and approved the final manuscript.

