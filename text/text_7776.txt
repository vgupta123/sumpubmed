BACKGROUND
the problem of gene family selection from any given set of taxa is one of the primary tasks in evolutionary genomics. the correct identification of orthologs  is crucial for reconstruction and interpretation of phylogenetic trees; and for addressing the following questions: how many common genes are shared by different species? what is the extent of the core of genes that shares a common history? which genes underwent duplication, were lost, or horizontally transferred between different lineages? most of the known methods used for detection of orthologs are based on sequence similarity and genome-specific best hits  <cit> . phylogenetic methods are more reliable but they are difficult to automate and the complexity grows with the increase of the number of taxa in question.

another important task in molecular evolution is to ascribe a gene function to open reading frames in a newly sequenced genome. today's gene annotation techniques are based largely on a search for homologous sequences with known functions, with orthologs more likely to have identical functions as compared to paralogs. the methods are based on sequence similarity searches using blast  <cit>  as a primary tool, and psi-blast  <cit>  or hmm-based methods for profile searching  <cit> . the final stage of positioning of an unknown sequence in a phylogenetic tree in order to infer its function either needs to be performed manually by the curator, or is omitted entirely, which can be problematic because changes in substitution rate frequently lead to situations where the closest phylogenetic neighbor does not correspond to the highest scoring hit in a blast search  <cit> . the algorithm we propose here fully automates the process of assembling gene families for any given number of taxa and also aids sequence annotation because it positions an unknown gene sequence in a phylogenetic tree containing both paralogs and orthologs from closely related species.

today, a widely used method to identify sets of orthologs from a set of n species is the reciprocal best blast hit method . the method requires strong conservative relationships among the orthologs so that if a gene from species  <dig> selects a gene from species  <dig> as a best hit when performing a blast search with genome  <dig> against genome  <dig>  then the gene  <dig> must in turn select gene  <dig> as the best hit when genome  <dig> is searched against genome  <dig>  for a set of n species the reciprocal blast hit method requires the presence of all pairwise reciprocal connections between all species as depicted on figure 1a.

the reciprocal blast hit method is very stringent and succeeds in the selection of conserved orthologs with a low false positive rate  <cit> , but it often fails to assemble sets of orthologs in the presence of paralogs. figure 1b illustrates how reciprocity is broken in the presence of paralogous gene 2' closely related to gene  <dig>  genes  <dig> and 2' could be inparalogs  <cit>  that resulted from a recent gene duplication. in this example gene  <dig> chooses gene 2' instead of gene  <dig> as a best blast hit, preventing both paralogs from being appropriately recognized as orthologs  <cit> .

in total, from the four species mentioned above, the strict reciprocal best blast hit method selects only  <dig> families. to illustrate the influence of paralogs on the total number of selected orthologs, we conducted the following experiment. each genome was "blasted" against itself, and if a query gene had significant hits other than the query itself, these genes were removed from further consideration. then the reciprocal best blast hit method was applied to the genomes "cleaned" from paralogs, and the number of selected families increased to  <dig>  demonstrating that the small size reported for the prokaryotic core  is in part due to difficulties discriminating between in- and outparalogs. because the genomes were artificially reduced by removing all paralogs  that could cause confusion, the total number of orthologous families for complete genomes should be even bigger.

in the clusters of orthologous groups   <cit>  strict reciprocity is replaced by a triangular best blast hits relationship. first, triangles forming one-side circular best blast hits are constructed, and then triangles with common sides are merged together to form a cluster. the cog clusters consist of an undifferentiated mixture of orthologs and in- and outparalogs, and are limited to a certain set of taxa. the same problem exists for hobacgen  <cit>  whose precomputed database of gene families also is a mixture of orthologs and paralogs and does not contain many of the newly sequenced genomes.

a simple phylogenetic algorithm to infer speciation and duplication events in a gene tree was proposed by  <cit>  but their approach requires a known species tree which is impossible in many cases of prokaryotes. another limitation of this method is that all incongruence is explained by means of duplication and losses, whereas for prokaryotes, these often, result from hgt events.

the inparanoid euykaryotic orthologs database  <cit>  contains pairwise orthologs which were assembled by the reciprocal best blast hit method. inparalogs are added to the orthologous pairs by applying the inparanoid clustering method based on sequence similarities scores  <cit> . only two taxa are considered at a time.

we aimed to develop a method of assembling orthologous gene families that would have no restriction on the number of taxa, doesn't require a known species tree and would be able to distinguish between paralogs and orthologs by analyzing their position in a phylogenetic tree.

RESULTS
algorithm
in molecular evolution the notion of branch is frequently used as synonymous for a split, i.e. the line connecting two nodes. throughout the article we use the term branch in its traditional meaning, as referring to a subtree in a rooted tree that contains all nodes distal to a node. in the following, the term genome refers to the collection of all amino acid sequences encoded in a genome, and with genome blast we denote the collection of all blast searches, performed with blastall  <cit> , using each of the amino acid sequences as query. we use the term cluster to denote a subtree containing one set of orthologous genes. if there is more than one gene from the same taxon inside a cluster, these genes are considered as inparalogs. we use the term superfamily to denote a collection of genes that show significant similarity to each other.

here we present branchclust, a branch clustering algorithm that parses trees to delineate families of orthologs within a superfamily containing several paralogous gene families. the underlying idea is that closely related genes are placed on one branch emerging from one node on a tree, so the task of detecting families for n different taxa is simply a task to detect branches containing groups of genes from all, or almost all, species. step-by-step guidance on all procedures of the method from downloading complete genomes to applying the branchclust algorithm and using branchclust in conjunction with treedyn  <cit>  are available in the branchclust tutorial at  <cit> .

first, we start with selection of the so-called superfamilies, i.e. sets of genes containing mixtures of orthologs and paralogs. assume that we have n complete genomes of different taxa. we combine all genomes from n taxa in one database. from this set of n genomes, we arbitrarily choose one and perform blast searches of all genes in the selected genome against a combined genome database. then we parse the blast output in such a way that not only the best hit for each species is selected, but all of the significant hits obtained for a given query. as a result, each species can contribute to a superfamily through both orthologs and paralogs of the original query. superfamilies constructed from the paralogs of the query species are combined in one.

the choice of a starting genome could affect the ultimate number and composition of families of orthologous genes, especially, if we relax the criteria and require that at least 80% of different taxa be present in each family. different species might collect different sets of significant hits. to select all possible orthologs we perform blast of all n genomes against the database composed of the same n genomes, and then assemble all significant hits for each gene from every genome in superfamilies .

the sequences from obtained superfamilies are aligned and a phylogenetic tree is reconstructed by any of the preferred methods of tree reconstruction .

definition  <dig>  we will call a branch in a phylogenetic tree complete if it contains representatives from all species, and incomplete otherwise.

definition  <dig>  we will call a node in a phylogenetic tree complete if a complete branch originates from that node, and incomplete otherwise.

we start the selection from the most distant leaf in a tree , and then descend node by node, adding branches and calculating the total number of different species on the branches, until a node becomes complete. a schematic representation of branchclust algorithm is depicted in figure  <dig> 

we start from node  <dig> which contains an incomplete branch  <dig>  then we descend to node  <dig> and add branch  <dig> containing some number of different taxa. here we introduce the notion of "few" and "many". depending on the number of considered species, parameter "many" signifies how many different taxa would be sufficient for a branch to be reported as a separate cluster, or, in other words, the parameters "many" and few" determine which branch could serve as a "stopper" when it is encountered as a side branch while descending from node to node . the boundary between few and many can be adjusted ; usually a boundary between "few" and "many" around 70â€“80% of the different taxa in question was found to work satisfactorily. for example, in case of  <dig> taxa, "many" would be more than  <dig> or 3; in case of  <dig> taxa â€“ 8â€“ <dig>  and in case of  <dig> â€“ 20â€“ <dig>  "few" is just the total number of different taxa minus "many". if branch  <dig> contains "few" species we continue selection until node  <dig> becomes complete. if branch  <dig> contains "many" species, then we must check how many species are already on branch  <dig>  if branch  <dig> contains "many" species, and we also added "many" species on branch  <dig>  then it is most likely that branch  <dig> is a separate, though incomplete, cluster. if branch  <dig> contains only "few" different species, then we add it to the branch  <dig>  and continue with the selection.

the algorithm's pseudocode can be written as follows:

input:

Â Â Â binary superfamily tree t for n taxa.

output:

Â Â Â clusters, either complete or incomplete, with report of selected families, inparalogs and out-of-cluster paralogs.

new selection:

Â Â Â while :

initiation:

find the leaf most distant from the current, arbitrarily selected root and set node  <dig> as the ancestor of the most distant leaf.

recursion:

Â Â Â check if the ancestor of the node <dig> has a "stopper", leaf "r", that signifies previously removed cluster.

Â Â Â if  ->

Â Â Â Â Â Â Â Â Â branch  <dig> contains a cluster, report an incomplete cluster, remove it, mark the node  <dig> with a leaf "r", re-root the tree with cluster's ancestor and go to new selection:

Â Â Â calculate number of different taxa on the branch 1: n1

Â Â Â calculate number of different taxa on the branch 2: n2

Â Â Â calculate total number of different taxa on the node 2: n3

Â Â Â if  ->

Â Â Â Â Â Â node  <dig> is complete, report a complete cluster, remove it from the tree, mark the node  <dig> with a leaf "r", re-root the tree with cluster's ancestor and go to new selection:

Â Â Â else â€“ node  <dig> is incomplete, check the state of the node 2

Â Â Â Â Â Â case  contains combinations:

Â Â Â Â Â Â Â Â Â , , ) and  -> node  <dig> becomes node  <dig>  go to recursion.

Â Â Â Â Â Â Â Â Â , , ) and  -> node  <dig> is complete, report a complete cluster, remove it, mark the node  <dig> with a leaf "r", re-root the tree with cluster's ancestor and go to new selection:

Â Â Â Â Â Â Â Â Â  -> branch  <dig> contains a cluster, report an incomplete cluster, remove it, mark the node  <dig> with a leaf "r", re-root the tree with cluster's ancestor and go to new selection:

end of recursion

when a tree containing several clusters  is submitted to the branchclust algorithm, it is arbitrarily rooted: it can be rooted inside any cluster or anywhere in between . for example, if the root splits a cluster so that one branch will contain more than many species, this branch will be wrongly reported as a family. however, if a tree is rooted somewhere in between the clusters, the results will not be affected by the root position because a branch with a cluster acts as a "stopper". to avoid artifacts due to placing the initial root, the selection is repeated for the tree rooted at the opposite end. we report as final the clustering that minimizes the number of paralogs. the process of selection with tree re-rooting is illustrated in figure  <dig> 

we repeat selection for the tree rooted with root  <dig>  and compare the results by calculating the number of paralogs resulting in two different runs. the clustering that contains the least number of paralogs is selected. using two trees rooted at opposing ends helps to solve a problem that arises in case of two incomplete clusters. this problem and how it is addressed by the implemented approach is illustrated by the clustering of the penicillin binding proteins' superfamily for a set of  <dig> gamma proteobacteria .

the superfamily containing the penicillin-binding proteins consists of  <dig> members that form two distinct clusters in the tree: one is a branch with  <dig> leaves and  <dig> different taxa, forming a complete cluster; the other cluster is incomplete, containing only  <dig> members from  <dig> different species. the results of branchclust algorithm in this case depend on the starting point, or the root of the tree. if we start selection inside cluster  <dig>  we will select the complete cluster  <dig>  remove it from the tree and the remaining tree will be the incomplete cluster  <dig>  however, if we start selection inside cluster  <dig>  we will skip the node containing cluster  <dig> and continue selection to form a complete branch. this will result in the following clustering: 23: <dig>  5: <dig>  meaning that one branch contains  <dig> leaves with  <dig> different taxa and the second â€“  <dig> leaves with  <dig> different taxa. the number of paralogs is given by the difference between the number of leaves on a branch and number of different taxa. in the latter case this number would be 23- <dig> + 5- <dig> =  <dig>  and in the first run we have the difference of 15-13+13- <dig> =  <dig>  we select that run which yields the minimum number of paralogs.

once a cluster is isolated, a family containing one representative from each taxon is selected with identification of inparalogs as duplicated genes inside that cluster. for example, in the case of penicillin-binding proteins' superfamily , cluster  <dig> contains two inparalogs, one of salmonella typhimurium, gi  <dig>  and the other is of pseudomonas aeruginosa, gi  <dig>  selection starts from the most distant leaf on a tree, and the gene copy which is closest to the top of the branch is reported as part of the family, while other copies are reported as inparalogs.

we call genes "out-of-cluster paralogs", if they are located inside a superfamily, but not on the branch containing a selected cluster. note that for a given cluster all other genes from the same superfamily are "outparalogs". we do not include all of these outparalogs in our clustering reports, because this would just list all genes in the superfamily not included in that cluster. the concept of "out-of-cluster paralogs" is illustrated in figure  <dig>  which depicts the superfamily of dna-binding proteins and integration host factors for  <dig> gamma proteobacteria. the second copy of gene from pseudomonas aeruginosa, gi  <dig>  is reported as an out-of-cluster paralog  because pseudomonas contains one copy inside each cluster. see  <cit>  and additional files for more examples.

testing
clustering
we tested the branchclust algorithm on four different sets of genomes:  <dig> bacteria and archaea,  <dig> gamma proteobacteria,  <dig> archaea and  <dig> bacteria and archaea together. table  <dig> compares the number of families of orthologs selected by the reciprocal best blast hit method and by the branchclust algorithm.

the homologs of atpase/atpsynthase catalytic subunits provide a good test case to explore the limits of algorithms to assemble families of orthologs. this superfamily includes ancient paralogs and recent gene duplications, and among the homologs that are part of the type three secretions system are genes frequently horizontally transferred found in pathogenicity islands  <cit> . examples of clustering the atp synthases' superfamily for  <dig> gamma proteobacteria,  <dig> and  <dig> bacteria and archaea can be found in the additional files  and on the branchclust web-site  <cit> . in all cases branchclust recognizes complete clusters for atp-a and atp-b, as well as clusters for rho-termination factor, and atp-f and type iii secretion system atpases. more examples of branchclust analyses are given in the additional files: examples from the analysis of  <dig> gamma proteobacterial genomes ; analysis of  <dig> archaeal genomes ; and for a joint analysis of  <dig> bacterial and  <dig> archaeal genomes .

gene annotation
an example of how the branchclust algorithm could aid gene annotation is provided by the example of the penicillin-binding proteins superfamily . the current annotation for clusters reported by the branchclust algorithm is presented in figure 6b. it is evident from the report that the two hypothetical proteins of wigglesworthia glossinidia are likely to be penicillin-binding proteins  <dig> and  <dig>  respectively. in the case of paralogs of salmonella typhimurium, the annotation is confusing. the nearest neighbors of escherichia coli are annotated as division-specific transpeptidases , and the paralogs, more distant to escherichia coli, are identified as penicillin-binding proteins .

moreover, genes within each cluster are not consistently named. for example,  <dig> genes out of  <dig> are annotated as penicillin-binding protein  <dig>  and other members of the family as peptidoglycan synthetase ftsi, or its precursor . only specialists would recognize that penicillin-binding protein  <dig> and peptidoglycan synthetase ftsi are synonymous and designate the same protein. perhaps more species and additional structural analysis will be needed to infer the correct gene names, but the branchclust algorithm can be used as a first automated step in the complex task of gene annotation. see additional files for more examples of annotations inside clusters.

implementation
the branchclust algorithm is implemented in perl with the use of bioperl module for parsing trees and is available at  <cit> .

automation with treedyn
the best way to evaluate the results of clustering is to highlight the selected clusters, families, and in- and outparalogs in a phylogenetic tree. graphic representation of a clustered tree can be automated using the treedyn program  <cit> . an example of how the results of the branchclust are highlighted for a tree of atp-ases' superfamily for  <dig> gamma proteobacteria together with labelling file for the automated use of treedyn are available in the branchclust tutorial.

discussion
gene family, family of orthologs and superfamily
at present there is no agreement on the definitions of the terms gene family and superfamily. usually the term gene family implies homology, i.e. descent from a common ancestral gene, but this is a very sparse definition, because there is no indication of how far back in time a common origin should be traced. we used orthology as criterion defining clusters and included the collection of all recognized homologs  under the label superfamily. these definitions result in groupings similar to the scop database, where a gene family is defined by sequence identity of 30% and greater, and superfamilies as "families whose proteins have low sequence identities but whose structures and, in many cases, functional features suggest that a common evolutionary origin is probable"  <cit> .

throughout the manuscript we use the term "gene family" to denote a collection of orthologs, where each species contributes one or in case of in-paralogs several genes to the family. superfamilies are composed of families related to each other via significant blast hits, i.e., superfamilies correspond to single-linkage clusters. as a consequence, some superfamilies will contain families of orthologs that are joined via a single fusion protein. the implemented phylogenetic reconstruction of such a superfamily places the families of orthologs in distinct branches of the superfamily tree. see the section on phylogenetic reconstruction for further discussion and for alternatives.

the branchclust algorithm is not restricted to the method of assembling superfamilies proposed in this article, and implemented in the branchclust scripts. rather, branchclust allows one to analyze superfamilies assembled under any other selection criteria; e.g., the pre-computed families from cog or hobcagen could be submitted for further branchclust clustering.

technical limitations of branchclust
technical limitations of the branchclust approach mostly are due to the exhaustive blast all-to-all searches and to the alignment of huge superfamilies rather than due to reconstruction and parsing of phylogenetic trees. processing of  <dig> superfamily trees for  <dig> taxa with branchclust took about an hour on the university of connecticut's biocluster , while the blast searches needed to assemble the superfamilies took about  <dig> hours with another day required for alignment of the superfamilies. all-against-all blast searches are needed only if the species in question are so diverged that direct blast comparisons between two distant species fails identify homologs that can be identified via intermediate species. huge time savings result when only one-to-all blast searches are performed using only genes from the biggest genome from the dataset as query. however, these savings in computational time come at the price of inconsistency, because the way the superfamilies are selected, depends on the genome used as query genome. using this shortcut, we tested branchclust on a set of  <dig> bacterial and archaeal species available on the ncbi web-site as of april  <dig>  we took the genome of escherichia coli k <dig> as starting genome and performed blast searches on a database composed of all  <dig> archaeal and bacterial species. clustalw was able to align and reconstruct trees for superfamilies with up to  <dig> genes . using the described one genome against all approach to form superfamilies, the total computation time from blast through to branchclust selection for  <dig> species was less than  <dig> week.

if a diverse group of organisms is analyzed  and the many/few parameter is set too high, then orthologs that are present in only a small subgroup of the genomes  will be classified as outparalogs. future improvement of the branchclust algorithm will focus on training the algorithm to make context dependent choices for the many/few parameter. in case genomes from divergent organisms are analyzed we recommend to choose a smaller value for the many/few parameter, and to include superfamilies in the analyses that have representation in only a fraction of the analyzed genomes .

if genomes from divergent organisms are analyzed, the distinction between orthologs and paralogs might be difficult for proteins that experience high substitution rates. especially in case of out-of-cluster-paralogs that are not separated from a cluster of orthologous genes by a long branch , further analyses will be needed to test, if the sequence in question might be a misidentified member of a family of orthologs.

phylogenetic reconstruction
if only genomes from closely related organism are analyzed, the sequence divergence between orthologs will be much smaller than the divergence between ancient paralogs, and therefore, the overall result will not critically depend on the method for phylogenetic reconstruction chosen to calculate the phylogeny for the superfamily. the trees calculated to cluster the superfamily should not be considered substitutes for a more detailed phylogenetic assessment. especially, if ancient paralogs are included in the superfamily, the relationship between the clusters of orthologous genes, and their relationship to other outparalogs remains uncertain. if these relations are to be determined more accurately, analyses needs to focus on the most conserved portions of the protein, whereas for within cluster relationships the use of the nucleotide sequences might be necessary, because synonymous substitutions might represent the only variability observed between sequences. a crucial determinant for the success of branchclust is the difference in divergence between orthologs and divergence between outparalogs. clustalw was selected for its speed, and because the generated trees having reasonable resolution at different levels of relatedness. by default we do not exclude poorly aligned parts from the analyses because for closer related sequences these poorly aligned stretches are the most informative. the chosen default approach biases the final tree topology towards the tree used during the progressive alignment  <cit> ; however, this drawback is the price that is paid for using a single alignment for different levels of phylogenetic relationship.

we do not filter the initial alignments for the lengths of match as percent of the sequence length. nevertheless, in none of the analyzed test cases did we find clusters of putative orthologs that were contaminated by fusion proteins. this is a testament to the robustness of the chosen tree building algorithm. omitting a filter for minimum alignment lengths allowed inclusion of divergent sequences within one superfamily. if two families of orthologs are joined into a single superfamily through a fusion protein, clustalw places the families of orthologs on separate branches and branchclust breaks them apart appropriately. if another tree reconstruction method is used, or if gaps are excluded globally, the superfamilies that are created through single fusion proteins need to be broken apart before branchclust can be applied. one possibility is to only consider those blast hits in the formation of the superfamiles where the matches extend to more than 50% of the sequence lengths of both query and target sequence. another solution is to shatter large superfamilies generated in single linkage clustering through application of markov clustering  <cit> . this hybrid clustering approach was used successfully in  <cit>  to avoid non-specific clusters resulting from matches to promiscuous domains.

if branchclust is applied to genomes of a single genus or family, additional stringency could be applied in selecting members of a superfamily, and this in turn would allow excluding poorly aligned positions before further analysis. even though the phylogenetic analysis used to cluster the superfamily is not very sophisticated, the utilization of a multiple sequence alignment and its analysis using a phylogenetic framework results in a powerful improvement with respect to the automated assembly of orthologs.

within cluster phylogeny
for the task of assembling gene families for a set of n taxa, we do not analyze the phylogeny within each branch, and thus no reference species tree is used or required. the phylogeny of the superfamily tree only is used to distinguish paralogs from clusters of orthologs. the crucial part of the supertree phylogeny is the branch that connects a cluster of orthologs to the outparalogs. a cluster of orthologs is recognized by virtue that many of the included genomes are represented in this cluster . this independence from a reference species phylogeny often will be an advantage. in case of many closely related genomes, too few substitution events have occurred to reconstruct the genomes' relationships from a single gene. in case of prokaryotes single genes and operons can be transferred between species  <cit>  and many other processes and artifacts are known to yield differences between individual gene phylogeny and the consensus phylogeny  <cit> . however, additional phylogenetic analysis is needed to compare the evolutionary history between paralogous families. the topological congruence of paralogous branches could be used to infer the root of the superfamily tree , allowing to trace back the evolutionary history of molecules to times before the organismal common ancestor came into existence  <cit> .

branchclust does not alleviate the need to compare individual gene families to the consensus or species phylogenies â€“ rather it provides for an assembly of families of putative orthologs that is a prerequisite for studying their evolution. mapping the sequence of duplication events onto a species tree, and finding instances of orthologous replacement are important to understand the evolution of a superfamily. knowledge of the species phylogeny is required to interpret the data. for example, the case of the atp synthase superfamily for  <dig> bacteria and archaea  a sequence from the archaeon methanosarcina groups within bacterial sequences for both atp-a and atp-b genes, and two bacterial homologs, from deinococcus and thermus, are located within a group of archaeal homologs also for both atp-a and atp-b genes  <cit> . branchclust does not perform the analyses necessary to identify these events, but it provides a greatly improved, automated tool to assemble the starting materials on which to do these studies.

the universal genome core
one surprising outcome of our analysis was the large number of families that were well represented in both the archaeal and bacterial domains of life . the strict core, i.e. genes that are found in all organisms remains small, and is expected to shrink further as more genome sequences become available  <cit> . the reason for this trend is that specialized organisms, in particular parasites and symbionts, often have reduced genomes, sometimes lacking even important functions like atp synthesis and chemiosmotic coupling  <cit> . however, even with only slightly relaxed conditions, the number of gene families present in most archaeal and bacterial genomes was surprisingly high. this finding re-affirms the shared ancestry of all life and is testament to the conservative nature of evolution: re-use of something already invented appears to be preferred over re-invention from scratch. the number of gene families with near universal distribution among prokaryotes appears to be higher than previously determined, possibly because in previous analyses the selection of orthologs was so stringent that many legitimate orthologs were excluded.

CONCLUSIONS
the rbh method frequently fails in assembling families of orthologous genes because this method fails to handle paralogs, in particular inparalogs, a finding acknowledged in many reports using automated assembly of orthologous sets .

branchclust provides an automated, robust approach to assemble families of orthologs. it effectively selects complete and incomplete clusters of putatively orthologous genes, including inparalogs arising through lineage specific gene amplification. the use of branchclust will allow one to include larger portions of completely sequenced genomes into genome based phylogenetic reconstructions, thereby allowing phylogenomics to move away from the currently dominating reconstruction of trees describing the history of the transcription and translation machinery  <cit>  to analyses that include metabolic pathways that might be present only in a subset of the analyzed genomes.

