BACKGROUND
with the advent of new sequencing technologies that have parallelized the way in which sequencing chemistry is performed  <cit> , attempts have been made to gain new insight into previously unstudied transcriptomes at both an inter- and intra- species level  <cit> . prior to being utilized within transcriptomic studies however, the millions of short dna fragments generated, termed reads, must to be assembled into longer contiguous sequences that are representative of the underlying transcripts present within the transcriptome. despite recent advances in transcriptome assembly tools  <cit>  and their application to a wide range of research areas including the characterization of diversity within viral populations, plants, mice and humans  <cit> , accurately reconstructing transcript diversity within complex multi-isoform transcriptomes has remained a significant challenge  <cit> . assembling snake venom gland transcriptomes, a complex multi-isoform toxin cocktail arising from ancestral gene duplication events and divergent evolution  <cit> , exemplifies this challenge. although linked by common ancestry, there is significant sequence variation within toxin families, such as the snake venom metalloproteinases , c-type lectins, serine proteases , phosoholipase a2s, bradykinin potentiating peptides and three-finger neurotoxins which often manifest in functionally distinct properties  <cit> . sequence and functional diversity is complicated further at an inter- and intra-species level, as the expression of toxin isoforms is influenced by factors such as diet, habitat, sex, age and phylogeography  <cit> . combined, this results in snake venom being complex  <cit>  and it is this complexity that poses difficulties for current transcriptome assembly tools. reconstructing accurate toxin transcripts is important because venom gland transcriptomes are a critical resource for the development of improved snakebite therapies  <cit> .

current assembly tools implement algorithms largely based around two different approaches  <cit> . in the first, reads are aligned to positions within reference transcripts to which they are most similar. this is termed mapping. this results in scaffold-like alignments from which networks representing sequence variation are constructed. paths across these networks are used to construct transcripts that represent the diversity present within the transcriptome. however, for many transcriptomes including snake venom gland transcriptomes, complete reference datasets rarely exist. when they do, being derived from low coverage sanger/est studies  <cit> , they may not have captured the full extent of variation within the transcriptome being studied. in this case, new transcripts cannot be discovered using a reference based approach as reads with insufficient similarity to sequences within the reference dataset will be discarded. conversely, reads that are less divergent from transcripts within the reference dataset are more likely to map  <cit> . thus, the extent of divergence between venom gland transcriptomes even at an intra-species level  <cit> , will result in a biased loss of read data during mapping. this in turn, will result in a decreased accuracy in the estimation of transcript expression; even when mapping to a transcriptome from the nearest available species as a pseudo-reference dataset.

to resolve problems associated with the lack of a suitable reference transcriptome de novo based assembly can be applied. this usually involves the construction of de bruijn networks that represent clusters of diversity, e.g. individual protein families within the data  <cit> . on these networks nodes represent short sequence fragments, called k-mers, which are derived from reads, while edges represent shared identity between k-mers. these networks encompass all of the diversity present with the read data and traversals are used to construct transcripts. however, in the presence of isoform variation, maintaining non-chimeric paths across the subsequently complex networks becomes difficult  <cit> . this is because a rise in diversity increases the number of nodes, which increases the combinatorials involved in path traversal. distinguishing chimeric from non-chimeric paths is difficult as chimeras are in effect artificial recombinants generated between the true isoforms and, despite having superficial resemblance to true isoforms, relationships between co-evolving sites, functional motifs and other evolutionary factors are not maintained. this is due of the introduction of breakpoints within chimeras that are solely an artefact of the assembly process and not as a result of transcriptome evolution. thus, resolving the true evolutionary relationship between transcripts becomes difficult. long k-mers are often used to aid this task  <cit> , but success is not guaranteed  <cit> .

to address the issues associated with current assembly tools we designed vtbuilder , a user-friendly software for the assembly of non-chimeric transcripts. no reference transcriptome is required and the input can be single or paired end read data in fastq format. the software can be launched by executing a single jar file at which point the user will be presented with a graphical user interface   from which the user can interact with the software via the gui or using the dynamically generated command in a terminal window . installing and running vtbuilder is described in a user guide that is available on the project website. vtbuilder implements a six step bioinformatics pipeline that is described in detail within the implementation section. briefly,  reads are partitioned into broad groups of shared diversity such as protein families.  de novo assembly on each partition is performed to produce a set of guide sequences.  a set of scaffold-like alignments, similar to those used in reference based assembly  <cit> , is produced by mapping each read to the guide sequence that it is most similar to;  for each scaffold like alignment a network is created that represents the isoform diversity present;  transcripts are constructed by traversing these networks; and  transcript expression is calculated by remapping the read data to the constructed transcripts and then counting the reads mapped to each followed by length normalization.figure  <dig> 
vtbuilders graphical user interface . green boxes indicate completed steps of the pipeline while grey indicate those yet to be performed. the yellow box shows the step that is currently running while the yellow text provides a brief description of the step currently running. the inset panel displays the setup area that the user is presented with when they initially double click the jar file. the red circle indicates the command that is required if the user wishes to use the software without a gui via the command line.



producing non-chimeric transcripts is essential if the resolving power of next generation sequence  data is to be used to dissect the evolutionary dynamics within complex transcriptomes with no available reference. at the time of writing we are unaware of any freely, or otherwise, available software that makes this possible. we benchmark the accuracy of our software, against a current popular de novo assembler, trinity  <cit> , which implements a method to traverse multiple de bruijn graphs. in our analysis we used read data simulated from  <dig> known venom gland sanger sequenced transcripts  representing isoforms of the most frequent and diverse viper venom gland protein families. using vtbuilder, over 90% of ssts were accurately reconstructed from the simulated reads into transcripts sharing 99% or greater sequence similarity with one of the known ssts, compared with only 25% recovered using trinity. following this, we benchmarked accuracy and performance of vtbuilder by constructing transcripts from  <dig>  million paired end illumina miseq reads sequenced from the venom gland of the african puff adder, bitis arietans. this is the first assembly of an ngs-derived snake venom gland transcriptome using a new tool to overcome the inclusion of chimeric transcripts that typically confound the interpretation of multi-isoform venom gland transcriptomes. the correct assembly of transcripts is an important step towards the realization of the full potential that ngs technology has to offer in resolving the biological complexity of highly variable transcriptomes.

implementation
overview
the overall aim is to broadly capture transcript diversity by building a set of guide sequences from the read data and then to use these guides as a template to assist in the more accurate assembly of transcripts in a manner similar to reference based assembly  <cit> . to achieve this, our software implements six steps schematically represented in figureÂ 2a.figure  <dig> 
implementation.  schematic diagram of the vtbuilder assembly pipeline.  for each scaffold-like alignment produced during mapping a network is constructed.  non-overlapping windows are positioned along the assembly.  reads spanning each window are extracted and truncated.  these are then clustered to produce nodes.  edges are placed between clusters that share reads.

 partitioning: this involves grouping reads into partitions  that broadly reflect the protein diversity present within the data . partitioning is done using an approach that is similar to seed based clustering  <cit> . in the latter a read is randomly selected to seed  a partition and subsequent read inclusion to the partition is dependent on similarity to this read. we modified the approach to include reads derived from different positions on the same underlying transcript and thus share little sequence similarity. in vtbuilder a partition is initiated by randomly selecting a read from the input forward reads. this read is termed the partition seed. all remaining forward reads are searched and added to the partition, and removed from the input set, if they share a region of similarity  to this seed. the  <dig> base window size allows for positional flexibility between the reads and the seed, i.e. reads are allowed to match to either side of the seed. once complete, up to  <dig> reads are randomly selected from the reads just added, and a new search of the unpartitioned reads is initiated against these. selecting reads added in the previous cycle reduces redundancy in the search. as cycles continue, the partition is expanded until no new reads can be added. at this point a new read is randomly selected from unallocated reads and used to seed a new partition and the process repeats. the partitioning step finishes when there are no unallocated reads left. partitioning results in groups of unassembled reads that are directly related by transcript or indirectly related by protein family. partitions containing  <dig> or more reads progress to step  <dig>  reads within smaller partitions are not used within step  <dig> but are reintroduced during step  <dig>  along with all other input data. thus, no reads are permanently discarded from the pipeline at this point.

 de novo: here guide sequences, which will be used as templates for subsequent mapping, are constructed from partitions. this is done using a greedy overlap method of assembly. within each partition a read is randomly selected to initiate guide construction. we call this read the growing guide sequence . the remaining reads within the partition are searched against the ggs. if a read with high similarity to the ggs is identified  it is joined to the ggs, using the region of similarity as an anchor point. if this results in an extension to the ggs then the read is removed from the partition and the joined sequence replaces the current ggs. a new search against all the remaining reads in the partition is then initiated. this process iterates until a search against all remaining reads does not result in an extension to the ggs. if the partition still contains reads, a new guide is then initiated by selecting a random read and the process repeats. thus, a single partition can result in more than one guide sequence. once guide sequences have been created from all partitions a final de novo step is performed in order to join any partial guide sequences.

 mapping: during mapping all input reads are aligned against the guide sequence that they are most similar, to at positions that minimize diversity. in vtbuilder, we used a mapping algorithm that we previously developed to map read data containing high amounts of variation. the algorithm uses short fragments , termed k-mers, extracted from each guide sequence to form a library containing k-mer positional information for each guide. this library is then compared with k-mers derived from individual reads in order to find the most probable location for each read on the guide sequence to which it is most closely related. this standard k-mer indexing approach is described in detail in  <cit> . this results in alignment-like structures, termed scaffolds, where reads are positionally correct to each other and to the guide sequence to which they are most related .

the next two steps are designed to minimize chimeric transcripts by retaining as much diversity and positional information as possible within networks  whilst ensuring only the most robust  paths are traversed to become transcripts .

 networking: here we represent each scaffold-like alignment produced in  as a graph-based structure by transforming isoform-specific differences  in alignments into nodes and edges, that are subsequently traversed and assembled into finished transcripts in step . non-overlapping neighbouring windows of pre-defined size  are first defined across the scaffold-like alignment  after which reads spanning each window are extracted, truncated  and clustered using hamming distance . clusters are represented as nodes on the network. window size is calculated as one third of the minimum read length  thus ensuring that any three neighboring windows, and their subsequent nodes, have the potential to contain different regions of the same physical read. this information is used during network traversal in step . edges are placed based on this physical linkage, where any two connected nodes physically share at least two reads, albeit different regions on these reads . within the software, the minimum read length is limited to  <dig> bases to ensure there is sufficient sequence information within each window to cluster based on diversity. this step constructs multiple networks where nodes represent regions of diversity in reads mapped to the guide sequences.

 constructing transcripts: a final list of assembled transcripts is outputted by traversing the networks created in . importantly for the reduction of chimeric transcripts, the physical linkage of reads between adjacent node triplets guides traversals i.e., with the exception of the first two nodes added to a path, a node will only be added if it contains read fragments that are physically linked to fragments present within the two previously added nodes constructed in  from  <dig> neighboring windows. this ensures that each individual path is a traversal through nodes containing reads derived from a single isoform within the underlying data, and is the key step in limiting chimeric paths. paths are initiated for each cluster of diversity present within the first window. for each path initiated, the addition of a second node is dependent on reads overlapping with the first. if paired end reads are available they are used to confirm paths. for each read on a path an attempt is made to map its pair. if less than 30% of the pairs map then the path is discarded.

 expression: calculation of relative transcript expression is achieved by remapping all the input reads to the finished transcripts. the expression level for a single transcript is taken as the number of reads mapping to that transcript normalized by the length of the transcript. these are outputted on the transcript titles as a percent relative to all other transcripts.



RESULTS
case study 1: simulated transcriptome assembly
to demonstrate the ability of vtbuilder to construct transcripts from reads derived from a diverse range of protein families, including those harboring extensive isoform variation, we devised a controlled study using  <dig> known full-length sanger sequenced transcripts  expressed within the venom gland transcriptome of the west african saw-scaled viper echis ocellatus  <cit> . these sequences were selected to represent the most commonly observed proteins within snake venom  <cit>  and comprise different families, length distributions and isoform diversity . they include genes from the major expressed toxin groups known to harbor isoform variation, such as svmps and sps, as well as conserved single copy genes not thought to be involved in predation or defense, such as poly a binding protein and protein disulfide isomerase. where isoform variants existed within a group , the diversity present was visualized by creating alignments and neighbor joining trees using clustalx  <cit>  . using read data simulated from these  <dig> known transcripts as the input, we assessed the accuracy at which vtbuilder , as well as trinity   <cit> , was able to reconstruct transcripts by directly comparing the results back to the known ssts.table  <dig> 
the  <dig> known ssts used to seed the simulation of reads as described in case study 1



protein
no. of isoforms
length range
column  <dig> contains the number of sequences representing each protein family. column  <dig> displays the lengths of the sequences included.



in brief,  <dig>  reads of length  <dig> bases were copied from the  <dig> ssts at random locations. for each read, its pair was copied randomly from a window  <dig> bases wide anchored on the last base of the read itself. read coverage across each sst was normalised by length resulting in an upper bound of  <dig> reads covering the longest sst and a lower bound of  <dig> covering the shortest. this is equivalent to an upper per site coverage of  <dig> and a lower per site cover of  <dig>  typical of the coverage observed in an ngs dataset. note  <dig>  reads is far less than would be expected within an ngs dataset but here the reads are covering far fewer transcripts  than the thousands of transcripts typically found within a transcriptome. this read/transcript ratio was selected to represent approximately 7Â m reads covering a transcriptome of around  <dig> genes. vtbuilder, running default parameters  and on a desktop with  <dig> cores,  <dig> gigabytes of ram and biolinux  <dig>   <cit> , was then used to construct transcripts from the simulated paired end reads . vtbuilder constructed  <dig> transcripts of comparable length distribution  to the input ssts . using the same simulated paired end data as input, trinity  resulted in the construction of many more  transcripts that ranged in length from  <dig> to 2104Â bp .figure  <dig> 
transcript reconstruction on simulated reads.  lengths of all transcripts constructed by vtbuilder and trinity compared to those of the ssts. the top and bottom of the boxes represent the 25th and 75th percentiles respectively, while the top and bottom whiskers represent the third quartile + <dig>  times the inter quartile range  and the first quartile -  <dig>  times the iqr respectively. outliers beyond these points are represented as black circles.  lengths of transcripts constructed by vtbuilder and trinity that had a sequence similarity of 90% or greater to the ssts.  network showing the relationship between the vtbuilder transcripts and the ssts. grey nodes represent the vtbuilder transcripts. colored nodes represent the protein families to which the individual ssts belong . node size is proportional to sequence length. edges represent a 90% or greater sequence similarity.  same as  but using trinity to construct the transcripts.



next, we assessed the accuracy of transcript reconstruction by evaluating the level of sequence similarity between the  <dig> original ssts and the transcripts constructed by both vtbuilder and trinity.  <dig> of the  <dig> transcripts constructed by vtbuilder matched  <dig> of the ssts with a similarity of 99% or greater.  <dig> transcripts matched  <dig> ssts with a similarity of 95% or greater while  <dig> transcripts matched  <dig> of the ssts with a similarity of 90% or greater. in comparison only  <dig> of the  <dig> transcripts constructed by trinity matched  <dig> of the ssts with a similarity of 99% or greater.  <dig> transcripts matched  <dig> ssts with a similarity of 95% or greater. this remained unchanged at 90% similarity. of the transcripts assembled from both software that matched the ssts with a similarity of 90% or more, the length distributions of those produced by vtbuilder were more similar to the ssts than those produced by trinity . these similarity and length distributions suggest that vtbuilder produces longer and more accurate transcripts than trinity when run on the simulated reads and a thus a more comprehensive and accurate reconstruction of the original ssts.

to further refine our understanding of the multi-isoform assembly process, we investigated whether reconstructed transcripts for both trinity and vtbuilder displayed a one-to-one sequence similarity relationship with the original ssts or whether chimeric assemblies producing many-to-many relationships existed. within individual protein families containing multiple isoform variants, a many-to-many relationship would indicate a failure to distinguish between different isoforms. reconstructed transcripts and original ssts were used as nodes on a network where edges represent a sequence similarity of 90% or more. when the  <dig> transcripts  constructed by vtbuilder were placed on a network along with the  <dig> ssts that they matched , they largely displayed a one-to-one relationship . node size is proportional to sequence length further demonstrating that vtbuilder was capable of reconstructing transcripts of virtually identical composition and length as each original ssts in comparison to trinity where shorter, nearly exact matches of local similarity were more typical of the dataset .

to investigate the effects of sequence error on vtbuilder performance we repeated our analysis using the same  <dig> ssts but with a per site error rate introduced within each simulated dataset. at the per site mismatch error rates of around  <dig> % typical of illumina technology  <cit> , vtbuilder constructed a total of  <dig> transcripts,  <dig> of which retained a greater than 90% similarity to the sst sequences with typically one-to-one relationships . this level of accuracy in transcript reconstruction was maintained up to a high per site error rate of 1%, beyond which the total number of transcripts constructed increases as does the discrepancy between the number of vtbuilder transcripts sharing a 90% similarity with the ssts. introducing higher levels of artificial variation into the population, such as a 2% per site error rate, will result in at least  <dig> % of the reads containing on average  <dig> errors across the  <dig> bases  <cit> . this level of diversity is sufficient for vtbuilder to recognise transcripts as separate isoforms and leads to the sudden and expected rise in transcripts and drop in accordance with ssts .

taken together, the results of our simulations indicate that vtbuilder can reconstruct transcripts that are highly similar both in length and sequence composition to the  <dig> input ssts. the software can also accurately reconstruct transcripts when faced with a higher than expected degree of sequencing error.

case study 2: assembly of a snake venom gland transcriptome from ngs data
to demonstrate the application of our software to real world data, we sequenced the venom gland transcriptome of the nigerian puff adder bitis arietans. venom glands were dissected and homogenised, total rna extracted , dnase treated , and poly selected . sequencing was performed on the illumina miseq platform with 250Â bp paired-end reads producing  <dig> , <dig> reads in total . these were processed to remove low quality and unpaired reads leaving a total of  <dig> , <dig> pairs. post quality filtering resulted in a mean read length of  <dig> nucleotides. reads were loaded into both vtbuilder and trinity for assembly. vtbuilder constructed  <dig> transcripts ranging in length from  <dig> to  <dig>  nucleotides  while trinity constructed  <dig>  transcripts ranging in length from  <dig> to  <dig> nucleotides  ,  <dig>  of which were less than  <dig> nucleotides in length. transcripts produced by vtbuilder were annotated using blast2go  <cit>   and subsequently sorted into four categories :  toxins: i.e. transcripts homologous to transcripts found in the ncbi database coding for proteins previously identified as toxins. these made up  <dig> % of the transcriptome and were comprised of  <dig> unique transcripts. note: svmp and sp inhibitors have been included within this group.  non-toxins: i.e. transcripts homologous to proteins with no known pathology e.g. housekeeping genes. these made up  <dig> % of the transcriptome and were comprised of  <dig> unique transcripts.  no significant match found: i.e. transcripts with no match in the database or where the e-value of the match is >10Ã10â <dig>  these made up  <dig> % of the transcriptome and were comprised of  <dig> unique transcripts and  bacterial or viral dna: these made up  <dig> % of the transcriptome and were comprised of  <dig> unique transcripts. transcripts defined as toxins were subdivided into protein families . all major viperid toxin families were accounted for, demonstrating that vtbuilder had accurately reconstructed the underlying transcriptome. of note is the  <dig> unique toxin transcripts that contribute to just  <dig> % of the total diversity present within the transcriptome , but make up  <dig> % of the expressed transcriptome. these unique toxin transcripts fall largely into four main toxin families , and highlight the importance of distinguishing between isoforms within the underlying data. for example  <dig> closely related but unique ctl isoforms were identified making up  <dig> % of the toxins category. our software demonstrates how ngs data can be exploited to provide a more accurate, high-resolution picture of complex transcriptomes, such as snake venom gland transcriptomes.figure  <dig> 
scaling up to real data. reads from the venom gland of bitis arietans were assembled using vtbuilder and annotated using blast2go  <cit> .  box and whisker plot depicting the length distribution of the constructed transcripts .  transcripts were categorized into four groups;  toxins,  non-toxins,  no significant match, and  bacterial or viral dna.  the toxin group in  was split into sub categories representing the different protein families present.
the  <dig> unique toxin transcripts recovered by vtbuilder from reads sequenced from the venom gland of
bitis arietans
 and the overall percentage of the toxin dna that they make up within the transcriptome



toxin type
% of toxin transcripts
# of unique transcripts
combined these made up  <dig> % of the expressed transcriptome  but only make up  <dig> % of the total number of unique sequences present.



CONCLUSIONS
we have demonstrated that transcripts constructed using vtbuilder accurately represent the variation present within venom gland transcriptomes. unlike other approaches, our algorithm strives to maintain the relationships between factors such as to co-evolving sites and recombinant breakpoints within the underlying transcripts. vtbuilder has the potential to increase the usability of transcript sequences generated from read data across a wide range of research areas including; the detection of drug resistant variants within viruses and other disease causing parasites, where co-evolving sites confers resistance to particular classes of drugs  <cit> ; the monitoring of disease progression, where variation across a range of sites can be indicative of progression and pathological outcome  <cit> ; plant biology, where it has proven difficult to reconstruct full length transcripts representing complex transcript populations derived from genomes where polyploidy is present  <cit> ; and reconstructing accurate evolutionary relationships on phylogenetic trees, and in detecting recombinant breakpoints, where the usage of long non-chimeric transcripts is essential. we have made the source code for vtbuilder available from https://code.google.com/p/vt-builder/ where researchers from a wide range of backgrounds can access and develop it for their own requirements. finally, we consider vtbuilder as an important progression towards the full utilization of the potential that ngs data offers. this is because highlighting the problem of chimeric sequence assembly, as well as having a proposed solution, will begin to reduce the number of such sequences being deposited within public data repositories which will have a positive impact on future studies querying such sources.

availability and requirements
executable jar file and user guide is available from:http://www.lstmed.ac.uk/vtbuilder

googlecode home page :https://code.google.com/p/vt-builder/

operating system: platform independent

programming language: java

other requirements:

a java runtime environment must be is installed. this is available from the oracle website at: http://www.oracle.com/technetwork/java/javase/downloads/java-se-jre-7-download- <dig> html. the tool is designed to run on a high spec desktop. we developed and tested it on a single processor intel xeon e2687w workstation equipped with 32gb of ram,  <dig> cores and running biolinux  <dig>  <cit> . we have tested both real world and simulated data on biolinux  <dig>  running open jdk icedtea v <dig> . <dig>  where the real world data described in case study  <dig> took just over 4Â h to assemble, and simulated datasets on biolinux  <dig>  running open jdk icedtea v <dig> . <dig>  we have also tested simulated datasets on on mac os Ã  <dig> . <dig> running java  <dig> .0_ <dig> 

license: gpl gpu v <dig> .

availability of supporting data
simulated read data used in case study  <dig> along with the corresponding  <dig> seed sequences  are available at: http://www.lstmed.ac.uk/vtbuilder. the bitis arietans read data presented in case study  <dig> is available on request from the authors.

additional files
additional file 1: figure s <dig>  sequence diversity within the  <dig> ssts used in case study  <dig>  neighbour joining trees depicting sequence diversity present within the protein families that the ssts represent. the scale bar represents nucleotide substitutions per site.

additional file 2: figure s <dig>  the effects of read error on transcripts generated by vtbuilder. the plot shows the total number of transcripts constructed by vtbuilder  using simulated reads containing varying degrees of per site sequencing error . the dashed line displays the number of transcripts with a greater than 90% similarity to an sst. networks display the relationship between the sstâs and the transcripts in a similar manner to those depicted in figureÂ  <dig> 

additional file 3: figure s <dig>  summary of transcripts assembled using vtbuilder and those assembled using trinity. .



competing interests

the authors declare that they have no competing interests.

authorsâ contributions

ja and sw conceived of the study. ja designed and implemented the software. ja and sw tested the software. gw, nc and rh provided the echis ocellatus sequences used in case study  <dig> along with insightful comments and discussion throughout the development phase. gw, nc and rh sequenced the venom of the nigerian puff adder used in case study  <dig>  ja and sw wrote the manuscript. all authors read, commented on and approved the final manuscript.

