BACKGROUND
molecular ecology methods often require the collection of thousands of polymer sequences  extracted from biological specimens  followed by a similarity search of those sequences against one or more reference databases. the match results enable the deduction of community composition  <cit>  or inference of functional capacity  <cit>  within organisms or across populations. the most popular method for sequence comparison has been to find local alignment pairings using blast  <cit>  but due to speed limitations, other software has emerged to bypass the time-consuming alignment step by simply counting the number of short sub-sequences shared between a subject and query. sub-sequence oligomers are referred to as k-mers and are the set of possible fragments of a given length  from a polymer. k-mer matching has been employed for diverse objectives in genomics including bacterial gene discovery  <cit> , identifying dna signatures of pathogenic bacterial genomes  <cit> , delineating plant genome polyadenylation sites  <cit> , spotting genetic engineering in bacteria  <cit> , assembling shotgun dna sequences  <cit> , human genome re-sequencing  <cit> , protein superfamily recognition  <cit> , and sequence clustering  <cit> . rapid k-mer similarity searches have become the foundation for high-throughput phylogenetic classification of dna  <cit> . surprisingly, a general-purpose open-source software tool to aid biologists in performing all the aforementioned tasks is not readily available. mica  <cit>  can match dna k-mers against a genome but requires a windows or macintosh gui, is not open source and is restricted to 7-mers or shorter. ssaha <dig>  <cit>  is less limited but is impeded by coupling k-mer searching with non-optional local alignments that are unnecessary for some applications. unfortunately, ssaha <dig> does not search protein sequences. cd-hit  <cit>  efficiently evaluates k-mer set unions for the purpose of single-linkage  clustering. cd-hit does not allow the decoupling of k-mer searches from the clustering, thus it is not used as a general-purpose similarity reporting tool.

simrank was conceived to avert these limitations. the earliest version  was produced to run as a web service for the ribosomal database project, starting in  <dig>  <cit> . it was coded in fortran when only a few hundred 16s rrna gene sequences had been determined, and was able to index a maximum of  <dig>  sequences. since fortran popularity has generally waned in comparison to perl and c  <cit> , simrank was reimplemented to encourage greater community involvement and extended for usage with larger datasets. the perl/c implementation described here has a database limit of  <dig> billion sequences, but this limit can be lifted by changing constants within the source code. compared to the alternatives, simrank is the only choice that is completely open source, quickly estimates the overall similarity between query and database sequences, compiles and runs on all contemporary hardware and operating systems, is sans gui allowing pipeline integration, eschews sequence alignment and clustering steps, allows user-definable search depths, is unrestrictive of k-mer sizes, and is unrestrictive of polymer or string type. if sequences can be represented as text strings, such as nucleic acids, proteins, and even human-readable language, then they can be quickly compared using simrank.

simrank has enabled advances in curation and annotation practices of large biomarker data-sets such as the greengenes 16s rrna gene database  <cit>  and has aided in creating guide-trees, otus and probe performance predictions for the phylochip™ assay  <cit> . microbial ecologists have employed simrank to annotate 16s rrna gene sequence libraries by comparisons to reference databases  <cit> . counts of sequences matching each taxon are used as proxies for community structure and are compared across clinical or environmental samples by researchers to elucidate niche effects such as competition, selection, resource partitioning and colonization  <cit> . simrank's utility to molecular microbial ecologists will continue to grow concomitant with the size of sequence datasets.

implementation
simrank is implemented mainly as an object-oriented perl module, with one 5-line function written in c for efficiency. an example script is included with the software which allows parameter choices for many features directly from a command line. accessing the object directly within a perl program allows all features to be parameterized.

inputs
the input files  are fasta formatted multiple sequence files and do not need to be aligned. for each record only two newline-separated fields are required, the header and the string itself. the header begins with the ">" character and can contain any number of fields separated by characters convenient for the user's work flow. the one constraint, is that within the header must be a unique string identifier between the ">" and the first space or newline. for example, within the header ">gg_id <dig> cattle rumen clone ynrc11\n", "gg_id244724" is considered the unique identifier. following the header is the string itself which can be dna, rna, protein, human readable language or other text.

database format
from the input, a binary file is generated optimized for retrieval of k-mer similarities. the binary file contains a pre-computed map between all unique k-mers and a list of all sequences containing that k-mer. recorded k-mers can be restricted to those entirely composed of a user-defined alphabet .

formatting procedure
each string is assigned an integer index and then is split into all valid k-mers of user-defined lengths  and alphabets. the k-mers are overlapping substrings representing the contiguous source string. unique k-mers are hashed and counted. each k-mer is associated with an array of offsets representing all the string indices containing the given k-mer. specifically, each integer in this ordered list is the number of indices to skip to find the next string index containing this k-mer. this information is encoded in a binary file ordered according to table  <dig> 

aeach k-mer generates a vector of string indices, encoded as an integer array of offsets required to "visit" each string index containing the k-mer. k is the count of unique k-mers, and si is the count of strings containing the ith k-mer. each offset is stored as a 4-byte integer.

blexically sorted ascii text strings of each unique k-mer stored as one byte per character.

c4-byte integer list of file positions for the start of each k-mer's list of offsets.

d4-byte integer list of the byte length of each k-mer's list of offsets.

e4-byte integer list of the count of unique k-mers in each string.

search procedure
simrank's search procedure is initialized by reading minimal database attributes into memory. then, query strings are handled serially to calculate similarity to each database string. in the initialization, six of the eleven database file segments  are read: the list of string identifiers, k-mer length, all unique k-mers, counts of unique k-mers in each string, and the file's start positions and lengths of each k-mer's offset array. constraining disk access to only these elements minimizes pre-search lag-time. an in-memory perl data structure is established as a hash of k-mer keys, each referencing two pointers, the begin byte position of list of offsets and the length of the offset. since the database file structure is governed by the k-mer length, each unique combination of a reference string file and k-mer length will require its own database creation.

each query string initializes a c scoring vector of length equal to the number of strings in the database ×  <dig> bytes. all scores are set to zeros. next, simrank extracts all unique query k-mers according to user-defined length and alphabet restrictions and sorts them lexically. any query k-mer found in the database begins a file seek to read the list of sequence id offsets allowing increments of scores for corresponding elements in the scoring vector. lookups and increments occur in precompiled c routines. after all query k-mers are examined, simrank returns a sorted list of similarities as a table. the similarity between sequences q and s are the number of unique k-mers shared, divided by the smallest total unique k-mer count in either q or s.

RESULTS
diverse data sets  of various sizes ranging from  <dig>  million to  <dig> million characters  were used for testing simrank in comparison to other tools . simrank was able to index each dataset according to various k-mer and alphabet sizes. ssaha <dig> and megablast were unable to index the protein dataset. language indexing and searching was tested using institute names extracted from genbank records. indexing the list of institute names directly was impossible for ssaha <dig>  blast and megablast, so an artificial conversion from language to dna  <cit>  was performed.

simrank considered all regions of both the query and database sequences in each pair-wise calculation of similarity. since blast constrains its results to only sub-regions of high similarity, it was run with parameter '-q -1' to allow longer match regions and equitable comparison to simrank. blast was accelerated with parameters '-s  <dig> -e  <dig> -m 8' so that only the top strand was searched for significant matches and minimal disk writes were required. in all comparison tests, the top ten database matches with over 90% identity  were requested for each query string except for blast where percent identity thresholds are not definable. all software comparisons were conducted on a linux server with dual-core amd opteron  <dig>  <dig>  ghz processors and  <dig> gb of shared memory but simrank does not require hardware with large memory. for example, a macosx laptop with an intel dual-core i <dig>  <dig>  ghz processor required only  <dig> mb of memory and completed the its test  in  <dig> seconds . figure 1-top displays the log-scale time required to complete each search. simrank completed its search in less time than all other tools in all dataset types. the only exception was in the randomly shuffled dna dataset test where ssaha <dig> completed its search before all others. search hit counts were measured in comparison to blast. the number of query-subject relationships each tool returned was divided by the number returned from blast. since blast constrained hits by e-values equal to  <dig>  hits with under 90% similarity were counted resulting in blast returning the majority of hits across all datasets. figure 1-bottom reveals comparable hit counts among the tools for real dna datasets such as the 16s rrna database, the pryrosequence library and the its database . the shuffled  dna library was included in the dataset as a negative control where only insignificant hits are expected. simrank reported fewer of these insignificant hits than blast but megablast and ssaha <dig> ignored them all.

a greengenes 16s rrna gene collection 

b roche- <dig> pyrosequences from gastrointestinal contents 

c internal transcribed spacer region from eukaryotic ribosomal genes.

d derived from random repetitive shuffling of ralstonia solanacearum strain uw <dig> endoglucanase precursor, dq <dig> 

e group i catalytic introns rfam rf <dig> 

f hiv envelope glycoprotein pfam pf <dig> 

g institute names as displayed in genbank records. for blast and ssaha <dig>  all non-alphanumeric characters were interpreted as a space for a total of alphabet size of  <dig>  for simrank no substitution for any of the  <dig> unique characters was performed.

the protein and rna datasets revealed a large contrast among the tools. only simrank and blast were able to search protein sequences and blast returned the greatest number of hits given the constraints. rna searches were possible with all tools but ssaha <dig> was unable to find matches and simrank found less than both blast and megablast.

the institute affiliation data set was comprised of character strings representing over  <dig>  academic departments and addresses found in genbank records. simrank was able to not only find exact matches but also to rapidly detect highly similar inexact matches. for instance, "institut national de la recherche agronomique, avenue des etangs, narbonne  <dig>  france" and "laboratoire de biotechnologie de l'environnement, institut national de la recherche agronomique, avenue des etangs, narbonne  <dig>  <dig>  france" shared  <dig> % of their 4-mers. the blast tools and ssaha <dig> were effective at finding these relationships as well but only after the artificial conversion  <cit>  from language to dna.

comparison of an experimentally obtained 16s rrna gene library  <cit>  against a 16s reference set is plotted in figure  <dig>  similarities were calculated using simrank with 7-mers or the alignment-based f <dig> similarity, a metric commonly used as a measure of phylogenetic divergence  <cit> . each circle represents a single sequence. the majority of observed pairings exceeded 90% by f <dig> distance and 60% by simrank distance.

in a test of dna search sensitivity,  <dig> 16s rrna gene queries were drawn randomly from the greengenes set of  <dig>  subjects. all query-to-subject full-length alignments were found with blast  and were recored whenever the percent identity was >= 97%, calculated as i/min, where i is the count of pair-wise base identities and lq and ls are the lengths of the query and subject strings, respectively. these recorded matches were labeled as "true positives" for reference in receiver operator characteristic  analysis  <cit> . the same  <dig> queries were simrank compared to all subjects using multiple k-mer lengths  and the results are presented in roc curve format as figure  <dig> 

memory
the memory consumption of simrank during indexing is moderate and grows linearly with the number of sequences and depends on the k-mer size defined by the user. for example, when the 16s data set containing sequences with a mean length of  <dig>  characters was indexed on 7-mers,  <dig> mb of memory was utilized for every  <dig>  sequences.

discussion
as expected, simrank was able to search bio-polymer databases in less time than local alignment search tools. simrank was 10x to 928x faster than the blast tools in finding similarities among dna, rna and proteins. the rapid delivery of results is enabled by the simplistic calculation requiring no bottleneck alignment steps. since ssaha <dig> employs a hybrid strategy of building pair-wise alignments but only against records achieving significant k-mer identities, it was expected to exhibit speeds between blast and simrank. this prediction was observed in figure 1-top where simrank is shown to be only  <dig> x to 158x faster than ssaha <dig> when tested against public dna and rna datasets. ssaha <dig> was unable to search protein databases. simrank and blast lagged behind megablast and ssaha <dig> when searching shuffled dna sequences , but were able to find distant relationships missed by the others. ssaha <dig> and megablast require larger seeds to elicit alignments and thus searches terminated quickly. conversely, simrank and blast examined each 7-mer in each query requiring more compute time but enabling distant similarity reporting.

the method of hit count measurement displayed in figure 1-bottom presents serious drawbacks. similarity scales across the tools are not strictly equivalent , therefore, a 90% match has not the same meaning in simrank as it may have in the context of an alignment-based score. comparison of different scales with a uniform threshold does not convey the true sensitivity of simrank. in order to more directly address the question of sensitivity, a test was conducted to determine the ability of simrank to find homologues with 97% identity, a popular cutoff for operational taxonomic unit  boundaries used in molecular microbial ecology  <cit> . figure  <dig> demonstrates the capacity of simrank's similarity measure to find appropriate database subjects with a reasonable number of false positives and false negatives despite the difference in scoring scales. this approach allows calibration of simrank and definition of appropriate thresholds. for example, to find query-subject pairs with 97% full-alignment identity within the 16s dataset, one could utilize a simrank k-mer size of  <dig> and score threshold of  <dig> % to realize a true positive rate of  <dig> % with a corresponding false positive rate of just  <dig> %. this means that simrank matches with over  <dig> % 8-mer identity will cover 95% of the blast hits but will also match a very small number of strings not found by blast.

although not included in the figure  <dig>  we observed that blast and ssaha <dig> database formatting procedures are faster than simrank's. for this reason we suggest using blast or ssaha <dig> for exploratory sequence comparison since trial-and-error databases can be created and destroyed rapidly, but to select simrank for persistent datasets where various queries will be compared to a fixed set of sequences. consequently, the greengenes web service  <cit>  utilizes simrank as the search engine for sequence comparison and taxonomic classification of arbitrary user sequences against a reference data set.

simrank can run in stand-alone mode or as a perl module within a simple or complex pipeline. the components are modular so various phases of a pipeline can separately encode databases, initialize search factories in memory, and/or process queries as batches or data streams. simrank accepts user parameters to filter results by depth and/or percent similarity. this is an advantage in high-throughput environments over blast, for instance, since post-processing filtering scripts are not needed.

simrank may allow recovery of useful information from error-laden sequences. a current problem in the popular pyrosequencing technique is the reporting of long homopolymers not verifiable by traditional sequencing techniques  <cit> . simrank eliminates the effect of sequence discrepancies arising solely from homopolymer exaggeration. for instance, a run of  <dig> consecutive a's can be recorded as one unique 6mer. thus, if the only polymorphism differentiating two query sequences is the length of an unsubstantiated homopolymer, their simrank scores against a database will be equivalent.

while this manuscript was under review, another k-mer leveraging software package, uclust/search  <cit>  was published. although it is not open-source and requires a paid license for 64-bit versions or commercial use, it does have potential to be highly useful for rapid k-mer searches as well as sequence alignments.

usage considerations
from observations summarized in figure  <dig>  it is advised that simrank is not suitable for searching randomly shuffled dna, marginally suitable for matching proteins or strings of highly variable content such as group i self-splicing introns where similarity is limited to only two short spans  <cit> . simrank is well-suited for searching variants of full-length homologous strings such as 16s rrna genes, partial-length homologous strings such as those created by roche- <dig> sequencing technology, and variants of eukaryotic internal transcribed spacer regions.

simrank similarity scores are not equivalent to alignment percent similarities. for example, figure  <dig> displays differences in similarity scores observed when a single dna sequence collection  <cit>  is compared to a reference database using simrank versus the alignment-based f <dig> scoring distance  <cit> . alignment identities of 90% can produce simrank identities of 55-70%, and conversely, simrank identities of 90% can produce alignment identities of 93-99%. the differences are caused by two factors. first, one sequence may contain repetitive k-mers at disjointed positions leading to a perceived increase in similarity, and second the spatial distribution of mismatches can lead to divergence of simrank and blast scoring. for example if every  <dig> in  <dig> bases are mismatched in a pair-wise alignment, then simrank using 7-mers would report a 0% similarity where blast would conclude 86% similarity. thus, tuning k-mer length to the expected frequency of mismatches may result in application-adapted search sensitivity.

levels of significance for hits to protein sequences should be established based on known reference sets. protein strings are generally shorter than gene strings and their similarity patterns are often single conserved amino acid positions separated by one or two variable positions. the search for 4-mer similarities within the gp <dig> protein dataset revealed this difficulty. the blastp alignment procedure, although 28x slower, was nearly twice as sensitive compared to simrank.

furthermore, since each k-mer is compared across sequences without regard to their relative position in the sequences, simrank is insensitive to continuous and non-continuous patterns within the sequence such as sites of potential secondary structure. as with all inter-sequence comparisons, search results decline in significance when comparing a very short versus a long sequence. users can set lower length limits to avoid misleading match pairs.

as noted in table  <dig>  the language search comparison encountered  <dig> unique characters in the institute names but the complexity was reduced to  <dig> characters for blast and ssaha <dig>  blast and megablast were able to find twice as many matches than simrank but the significance of these hits are questionable since blast's local alignments allow one word such as "university" to produce high-scoring pairs. of the tools, only simrank tested the entire string for similarity.

simrank search results across databases composed of strings with repetitive elements can be refined by setting the k-mer length to exceed the repeat length. any repetitive k-mers within a string are counted only once since only the unique counts are used to create the quotient. in this case, simrank percent similarity scores would be inflated relative to blast.

future work
common tasks in molecular microbial ecology may be facilitated with simrank. applications include dataset de-replication, sequence clustering, and rapid classification. in upcoming versions, we plan to provide options to reduce database file sizes and memory requirements for constrained alphabets. for instance non-ambiguous dna can be encoded with  <dig> bits for each base instead of  <dig>  to further increase speed during batch queries, a non-redundant strategy will be made available allowing a pre-screen of the batch to identify all unique k-mers before reading offset arrays from disk. this will prevent common k-mers from inducing repetitive file reads. because strings within biological query sets can often contain similar k-mers, we estimate a >5-fold speed increase. to increase the ability to filter hits from a large databases of various length strings, a significance score can be added which considers the likelihood of a percent similarity score given the number of total unique k-mers in the query-subject comparison. this feature will generally down-weight matches from short strings compared to long strings with equivalent percent k-mer identities. lastly, simrank can be extended to store and output the string coordinates where k-mers match, should that become desirable. the computationally intensive k-mer tally procedure was written in c for speed but the io and formatting is written in perl for easy adaptations and extensions by computational biologists. it is the authors' intentions that other bioinformaticians will be able to improve the open source code where necessary to meet the needs of their projects. please contact us if you would like to have your changes reflected in the distributed version.

CONCLUSIONS
simrank provides molecular ecologists with a high-throughput choice for comparing large sequence sets to find similarity. the software presented is orders of magnitude faster than its open-source counterparts, sensitive to low-similarity matches when desired, and flexible to allow similarity comparison for dna, rna, proteins and even written language. simrank is specifically designed for matching queries against large reference sets. two of simrank's beneficial attributes are its speed and flexibility. it is capable of reporting significant hits faster than both blast and ssaha <dig>  moreover, simrank is more flexible than cdhit since k-mer searches are de-coupled from clustering.

availability and requirements
project name: string::simrank

project home page: http://search.cpan.org/perldoc?string::simrank

operating system: platform independent

programming language: perl, c

other requirements:

license: perl artistic license

any restrictions to use by non-academics: no

abbreviations
mica: k-mer indexing with compact arrays; ssaha2: sequence search and alignment by hashing algorithm; gui: graphical user interface - the point-and-click requirements to operate a program; otu: operational taxonomic unit - a set of highly similar genes believed to carry phylogenetic relatedness; perl: practical extraction and report language; roc: receiver operator characteristic - graphical plot of the sensitivity, or true positive rate, vs. false positive rate for a binary classifier system as its discrimination threshold is varied.

authors' contributions
nl conceived the indexing scheme and developed the original fortran implementation and the original perl/c implementation. td forked the string::simrank standalone perl/c module, conducted the performance evaluation, created the simrank web service and drafted the manuscript. ga, eb, and zp specified the scaling requirements for the application and made critical revisions of the manuscript. kk and ns administrated the servers used to develop and test the module. ns and uk conducted testing with dna data sets. uk and td performed the roc analysis. aa packaged the cpan distribution. all authors reviewed and approved the manuscript.

