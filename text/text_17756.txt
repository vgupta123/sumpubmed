BACKGROUND
evolutionary concepts have revolutionized our understanding of biology  <cit> . understanding evolution and especially genome evolution requires a global comparative approach in which individual genetic events are considered and integrated in their evolutionary context, which in turn may be correlated to the population history, the environment and the different phenomes. phylogeny-based analysis provides an ideal framework for performing such investigations, by pinpointing when a genetic event occurred and by identifying the simultaneous occurrence of several events. such correlations allow to highlight convergence and co-convergence . co-convergence can strengthen the cause-consequence effects between for example, two events and identify common selective pressures acting on the two events, as well as the functional or adaptive relationship between the corresponding characters  <cit> . in order to identify micro-evolutionary  and macro-evolutionary  events, a detailed analysis of a phylogenetic tree is essential. of course this can be performed by human experts, but such a manual analysis is impossible in the context of a large scale analysis project. some state-of-the-art pipeline processes, such as the figenix platform  <cit> , the sifter platform  <cit>  or the pipeline used to build the phylofacts database  <cit> , are capable of producing phylogenetic trees on a large scale, so it should be possible to develop a new kind of automatic process using the phylogenetic trees as a starting point, in order to answer the biological questions mentioned above, using an evolutionary approach.

one important aspect of such automatic processes is an efficient traversal of the tree to identify genetic events for subsequent analysis. hierarchical tree traversal is a common issue in computer science. in the biological field, phylogenetic trees are mostly traversed by hard coded algorithms and some programs, such as rio forester  <cit>  allow the detection of duplication nodes and orthologs from a tree. other tools allow the detection of specific genetic events:  <cit> .

all of these tools include mathematical components which apply a probabilistic model to interpret the tree, and have led to some significant results. unfortunately, current mathematical approaches cannot provide and integrate all human interpretations about trees, simply because some models have not been defined yet. one can cite, for example, the detection and localization of domain shuffling events in domain phylogenetic trees, which we will illustrate in this paper. as a consequence, it remains crucial for a biologist to apply his own knowledge and reasoning to the interpretation of phylogenetic trees. clearly a software api is now needed, that can be easily integrated in automatic genome-scale processes to read phylogenetic trees, that provides a level of expertise as close as possible to that of the biologist, and that will facilitate the application of evolutionary approaches. famfetch  <cit>  is one such software that offers a simple pattern-matching system and includes a graphical user interface, allowing the user to define specific patterns.

however a biologist, reading a tree, is capable of recognising much more complex patterns. indeed, the human expert, consciously or unconsciously, combines sophisticated phylogenetic architectures with constraints associated with the nodes' explicit or implicit properties. we call "explicit properties", properties already attached to the nodes when he reads it and we call "implicit properties", additional properties he must compute to complete the node's annotation.

the bioinformatician or the computer scientist working with the biologist would like to easily annotate the many phylogenetic trees he produces, and to define complex patterns for searching, without having to re-program the tree traversal each time.

moreover "implicit properties" cannot always be evaluated immediately in a simple tree traversal. for example, to evaluate, for each node of a tree, a property such as the topological distance to a specific node of this tree, one needs to set an equation system between the unknown values of the property at each node during the tree traversal and then to solve it to get all values.

finally, it should be possible to dynamically define the patterns from one tree, for example to compare tree structures.

here, we describe a new compact software library, called phylopattern, which offers three main functional modules that can be used either independently or in combination:

- a tree annotation module, based on predefined traversal algorithms and predefined or user defined annotation functions, to produce immediate or deferred evaluations of node properties,

- a pattern matching module to define powerful patterns and to search for them in phylogenetic trees,

- a tree comparison module to globally compare rooted tree topologies or to identify matching nodes. these functionalities are illustrated in the present paper with biological examples.

implementation
representation of trees and patterns
phylogenetic trees are composed of nodes linked in a hierarchical structure. each terminal node, named a leaf, represents the biological object whose evolutionary history one wants to study. each internal node then represents a real or virtual ancestor of all the leaves present in the node's subtree. two nodes are connected by a branch, whose length gives complementary information about the predicted evolutionary distance between the nodes. in general, most phylogenetic trees are considered to be binary structures, where internal nodes own exactly two children. however, technically, phylogenetic trees are in fact n-ary structures, and tree construction algorithms can generate more than two children for an internal node if the true phylogenetic relationships cannot be determined. such internal nodes are named rakes. note that a rake can always be transformed into a binary structure by generating pseudo-nodes, although this may be problematic, since the pseudo-nodes cannot be interpreted and used directly.

phylopattern uses its own formalism to represent phylogenetic trees and patterns ), based on the syntax of a classic programming and artificial intelligence  language: prolog  <cit> , which is particularly suitable for hierarchical structure manipulations. this important feature will be discussed in detail below.

the grammar rules used for describing trees and patterns are indicated using the bnf  notation.

in addition to this formalism, phylopattern can read and write trees in nh  or nhx syntax   <cit> .

for the phylopattern user, the formalism also provides "regular expression like" definitions for phylogenetic trees. regular expressions are classically used to parse and find specified syntactic shapes inside sentences, without having to develop a specific syntactic analyser from user defined grammar rules. typical examples are the regular expressions specified in unix command shells .

in phylopattern, regular expressions are patterns used to find nodes with a specified architecture or according to specified criteria.

note that the current version of phylopattern works only with rooted binary trees but accepts rake structures.

the syntax used in phylopattern for nodes in a phylogenetic tree is very simple. a node is expressed by:



as in the nhx format, a "tag" refers to a property-name/property-value pair. using this syntax, a leaf node is represented by:

, ]

and an internal node is represented by:

, ]

where leftchildnode and rightchildnode indicate the two child branches of the node. they are themselves nodes and so respect the same syntax. the denominations left and right have no biological significance and they are used for convenience only. obviously and if it is necessary, left and right nodes are automatically permuted by phylopattern during matching phases.

we introduce another kind of syntax for rake nodes, which are non binary nodes with a zero length on each child branch:

& <=> &

a full bnf grammar of our formalism is provided in table  <dig> 

constraints can also be associated with a pattern's structure. the basic syntax of a constraint is: freeze , but a more detailed explanation of how they work will be given below. note that constraints, expressed separately from a pattern's structure, are not included in the grammar in table  <dig> 

prolog engine
as we said before, trees and patterns in phylopattern are in fact prolog  <cit>  language terms which allows us to implement all our api tools in this language.

prolog belongs to the artificial intelligence  language family. ai languages provide a means of modelling the knowledge and reasoning of humans, or any other intelligent species. other examples of ai languages are lisp  <cit> , camel  <cit> , etc. phylopattern is not built with an algorithmic approach but rather on a first order logic approach which is the foundation of prolog. all sentences in this language are expressed as logical implication rules between a set of facts which imply a single fact. the prolog engine applies these rules in a backward chaining mode, which means that to verify that a fact is true, the engine searches for the facts that imply the given fact, and so on. the engine relies on two fundamental concepts namely: backtracking and unification. backtracking is a mechanism which allows the generation of all solutions to a given question, i.e. to an initial fact that one wants to verify. this is sometimes called a prolog clock, because the engine moves back and forth between future and past: the future when the engine tries to advance on a solution pathway and the past when it moves back on the path. this mechanism is very convenient for implementing solutions to problems where we need to explore a set of paths, some of these paths being dead-ends. backtracking is well adapted to our pattern matching approach because matching cases are defined as crossroads that phylopattern encounters again and again, each time a tree's traversal reaches a new node. the unification concept is the fusion of a variable's assignation and equality concepts. two prolog terms are said to be "unifiable" if and only if they are equal or if all non assigned parts of one term can be assigned to an assigned part of the other term, thus implying the equality of fully assigned terms.

here is a very small and trivial example that nevertheless gives a very complete illustration of all prolog concepts applied to tree manipulations.

these four lines are extracted directly from the phylopattern source code:

% enumerate all subtrees from a tree

subtree.

subtree :- subtree.

subtree :- subtree.

subtree, subtree) :- element, subtree.

as specified in the comment line, this predicate is able to enumerate all subtrees existing in a tree. the aim here is not to give a complete explanation of the prolog language but only a synthetic description of each rule. thus, we consider each line in order: a tree is a subtree of a tree if it is the full tree, or a tree is a subtree of a tree if it is a subtree of the left child node, or a tree is a subtree of a tree if it is a subtree of the right child node, or a tree is a subtree of a tree if it is one of the elements of a rake.

phylopattern is a prolog library, which can be used with any "edimburg syntax like"  <cit>  prolog engine. the phylopattern toolbox can also be accessed from the java language directly via the 'gnu prolog for java' api .

in addition, the 'gnu prolog for java' allows the definition of predicates directly in the java language. thus, the rio forester  <cit>  parser is used to convert nhx trees to phylopattern prolog terms.

a short example to show how a prolog phylopattern script can be used from java is given in the phylopattern package . other simple examples are provided with the phylopattern distribution  to demonstrate how to run phylopattern and how to write scripts.

RESULTS
the strategy we adopted in the development of phylopattern, was first to understand how a biologist reads and uses a phylogenetic tree and, from this, we deduced three main functionalities that are essential for most tree analyses: tree annotation, pattern matching and trees comparison.

tree annotation module
an important functionality in phylopattern is the ability to assign crucial information to the nodes, before proceeding to the subsequent steps in the analysis. indeed when a biologist reads a phylogenetic tree, he often incorporates complementary information, such as the species associated with each leaf, the fact that an internal node represents a speciation or a duplication event, or the domain architectures if leaves are associated with proteins.

more complex annotations can also be envisaged, for example, one would like to attribute to internal nodes: the list of all species present in the node's subtree or the distance to a specific node. the tree annotation module involves two distinct problems: the traversal of the tree in order to visit all nodes and the function used to annotate each node.

for the first problem, phylopattern offers two of the main traversal algorithms for binary trees: pre-order traversal and post-order traversal. the third major algorithm, namely in-order traversal, is a priori not useful for phylogenetic issues, but could be easily implemented. pre-order traversal means "do what you have to do on the node itself, then on the left branch, and finally on the right branch". in contrast, postorder traversal means: "do what you have to do on the left branch first, on the right branch second and finally on the node itself". in-order traversal means "do what you have to do on the left branch, then on the node itself, and finally on the right branch". for example, for a very simple binary tree ab, c)abc, if the operation one wants to apply to each node is: "display its name", the different kinds of traversal will give the following results: for pre-order: abc, ab, a, b, c, for in-order: a, ab, b, abc, c, for post-order: a, b, ab, c, abc. the post-order approach performs a task first on the children, then on the parent node, which is logically the most useful kind of traversal for phylogenetic annotation, because usually we want to gather information from the leaves in order to propagate them to the internal nodes, i.e. we look at the present with the aim of understanding the past.

for the second problem, two kinds of annotation functions are distinguished: immediate evaluation functions and deferred evaluation functions. immediate evaluation functions compute the value of a new tag for a node, when the traversal reaches it, for example, to assign to the node, in a post-order traversal, a list of all species present in its full subtree. by first performing the task on the node's children, it is easy to accumulate the species from the children to form the node's list of species.

deferred evaluation is more complex, but can be used when the annotation function is unable to determine the value for a specific tag when the traversal reaches the node, although the function is able to install a constrained relation between the tag value for the node and the tag values for its children. for example, suppose that an evolutionary event has been detected on a branch of a tree  and suppose one wants to compare, at the dna level, a sequence associated with this subtree and one associated with the other subtree of the event's parent node .

it seems logical to choose the two sequences closest to the parent node, because they are normally less derived and should have fewer differences at the nucleotide level. to select these sequences in the tree, each node of the tree must be annotated with its total branch length to the event's parent node. when the post-order traversal reaches a node, it is impossible to set the distance value, but the annotation function can specify equations between the distance for the node and the distances for the children of this node: call d the distance for a node, dleft and dright, distances for its children, lleft the length of the left branch and lright the length of the right branch. the annotation function can specify the two following equations: d = dleft +/- lleft and d = dright +/- lright .

when the function is called on the specific node against which one computes the distances, d =  <dig> 

at the end of the post-order traversal however, a large set of equations has been defined and is automatically solved by phylopattern, associating a tag value with each node that is equal to the distance to the specified node. the use of this deferred evaluation mechanism means that many other types of equation or constraint can be applied, by defining an appropriate annotation function. in fact, any constraint expressible in the prolog language could be implemented.

note that the two annotation functions, given here as examples, are included in the phylopattern implementation. the phylopattern user is thus able to choose a predefined tree traversal mode  and a predefined annotation function . he also has the possibility to define his own annotation function.

pattern matching module
pattern recognition is the main task performed by a biologist when reading a phylogenetic tree. he is not always able to express explicitly and simply the patterns he uses, but if he succeeds, the patterns, in most cases, can be modelled and used within phylopattern. as mentioned before, in the phylopattern framework, a pattern's syntax is expressed in the same prolog formalism as a phylogenetic tree, so any tree can itself be used as a pattern to search another tree. subtrees are thus considered by phylopattern as sub-patterns. the phylopattern matching module takes as input: a tree term, a pattern term, and a list of constraints.

to illustrate this, we can consider some basic sample patterns , based on the forms given in figure  <dig> and applied to the tree on the top right of figure  <dig>  variables in patterns can be used to obtain results and the pattern matching function also returns a tree associated with the pattern. note that _ is used as a mute variable in prolog, i.e. a variable part whose value has no interest:

using the following pattern:

@, name]])

we obtain the solutions: x = 'ens6287' or x = 'ens10851' or x = 'ens28928',

and the results of the pattern matching function are exactly those leaves corresponding to the species "macaca mulatta".

another example of a simple pattern, which can be used to search for the parent of a given node, is:

@]]], ])

whose solutions are: x = '42' and y = '67_63_62',

and the result of the pattern matching function is the subtree corresponding to node  <dig> 

the syntax of these patterns is discussed in detail below and a full list of patterns is given in figure  <dig> 

depending on its location in the pattern, each variable part of the pattern can match with any subtree of the tree, with any list of tags or with any tag's value. thus, the phylopattern matching module can be used either to find a match or to extract data from a tree. note that tags expressed in the pattern must be included in the matching node's tags list, but that equality of tags list is not necessary.

constraints associated with a pattern's structure must be verified before the match is accepted. a constraint is expressed as a prolog free variable/prolog predicate pair. the constraint is verified when the predicate is verified, and this verification occurs when the free variable is assigned. the output of the module includes the results of the pattern matching , as well as the values of the free  prolog variables expressed in the pattern. a very important feature of phylopattern is that it always gives all solutions for a pattern applied to a tree.

a number of specific definitions have been introduced for patterns that increase their conciseness and their searching power. these definitions are listed in figure  <dig> and are described in detail below.

the @ syntax is used to find a specific sub-structure in a tree. for example, suppose one wants to search for orthologs of a specific sequence associated with a leaf of a tree. one must search for a speciation node with two child trees that respectively contain the given sequence and other sequences from a different species. this search can be performed with the following:

pattern structure:

@, @], parenttags])

pattern constraints:

freeze, sequencetags)]), freeze, orthologtags)]), freeze]), freeze, parenttags)])

the structure definition is used to obtain all possible leaf pairs in the tree, which technically means "a node with a leaf coming from one of its children, and another leaf coming from the other child". the constraints can be expressed in natural language as: "sequencetags contains a tag that is the name of the studied sequence", "orthologtags contains a tag that is a species different from the one in sequencetags", "parenttags contains a non duplication tag".

as mentioned before, phylopattern provides all solutions matching the pattern, so if one applies this pattern to the tree associated to the v_set domain , for the studied sequence:



one obtains the ortholog leaves with tags:

,

,

,

,



the # syntax can be used to obtain all leaves for a tree, or to verify that a tree has a specified list of leaves.

the $ syntax has a more complex interpretation. it can be used to find a specific subtree in a tree, even if the tree has to be "damaged" first, i.e. by eliminating some of its subtrees. this pattern can be used to create a new tree that consists of a subset of nodes of a given tree, where the subset is not a direct existing subtree of the tree. for example, suppose one has two trees associated with two protein domains and suppose one wants to study domain shuffling events based on these trees. to do this, one has to compare the tree topologies only for the sequences that are present in both trees, in order to detect differences in the evolutionary histories of the two domains. to obtain these trees with phylopattern, first a # pattern must be applied to each tree to obtain their respective leaf lists. then the pattern: $), where commonleaflist is the intersection of the two leaf lists, must be applied to the two trees. to understand the $) pattern, just cut it in two parts, the $ part enumerates all damaged trees in the given tree, the # part ensures that the resulting trees contain exactly the list of leaves shared by the two trees.

finally, the & term, used as a pattern  allows to define a list of patterns to match a tree and to partition it. usually this pattern is not used directly, but rather when one wants to globally compare two trees. .

a simple example is provided here to demonstrate the flexibility of phylopattern, by chaining annotation phases and pattern matching phases with constraint definitions based on tags produced by annotations. suppose one wants to identify shuffling events between two non homologous protein domains. an evolutionary strategy might be to construct phylogenetic trees for the two protein domains  and then to perform the following steps with the phylopattern api:

step 1
annotate the leaves of the trees with the domain architectures of associated proteins  and annotate internal nodes of the trees by inferring their domain architectures from the leaf domain architectures ,

step 2
define a pattern with constraints mainly based on the domain architecture tag to try to find a parent node of a shuffling event and apply it to each tree ,

step 3
if such a node is found, annotate each tree, by adding event tags to derived nodes found under the event's parent node,

step 4
apply two patterns to each tree; first to extract a common leaf  from each "event marked" subtree and second to extract an "ancestral" leaf .

potential shuffling events detected using this strategy could be verified by performing genomic comparisons of the common sequence with the two associated ancestral sequences. figure  <dig> shows the results of this strategy for a domain shuffling event described in the literature.

trees comparison module
global comparison
a "global comparison" can be used to determine whether two phylogenetic trees are equivalent. to do this with phylopattern, one of the trees is used as a pattern to be applied to the second tree. phylopattern includes a tool to transform a tree into a wired structure  in which badly supported nodes  are collapsed to form rakes. this allows many alternative architectures to be matched with the "raked" pattern. as a result, when globally comparing two trees, it is possible to answer "yes" the two trees are "the same", even if the "badly supported" nodes do not have the same topology.

local comparison
another important tool in the phylopattern api, is the "local" tree comparison. in contrast to global tree comparisons, here the tool enumerates all the matching subtrees between the two trees. to do this, phylopattern dynamically defines patterns from all subtrees in one tree, "raking" some of them if necessary  and applies each to the second tree, using the pattern matching tool. one can imagine that these tasks can be very complex and would be very difficult and fastidious to reproduce by a human expert.

to continue the domain shuffling example introduced in the pattern matching section, when global matching fails on two independent domain trees, one can search for parent nodes of matching subtrees. by definition, these nodes have two children, one matching subtree and one non-matching subtree. thus, one can infer that these nodes might be parents of a shuffling event, because the matching tree is associated with one set of sequences for one domain and to another set of sequences for the other domain. this implies two different evolutionary histories for two domains in an extant protein. on the trees shown in figure  <dig>  phylopattern has identified two such nodes with identifiers  <dig> and  <dig>  here, the subtrees with sequences:  match and the other subtrees do not.

CONCLUSIONS
in this article, we have presented phylopattern, a software api, to:

 annotate easily phylogenetic trees using two predefined tree traversal algorithms and predefined or user defined annotation functions. optional deferred evaluation of tags, in an annotation function, allows them to be computed by constraint system solving,

 search and extract complex phylogenetic architectures and information using a "regular expression like" pattern syntax,

 compare two trees, either globally using one as a pattern applied to the other, or locally by searching subtrees from one tree in the other. in this case, sub-patterns are dynamically and automatically defined by the tool.

phylopattern is designed to facilitate the in-depth analysis of a phylogenetic tree. to achieve this, we have tried to formalize and reproduce the studies currently performed by human experts. the goal is not simply to apply a mathematical algorithm, but to automate the complex evolutionary interpretation of phylogenetic trees for large-scale scientific pipelines. for example, it is currently being used in our laboratory in an automatic pipeline to detect genetic events occurring in vertebrate proteomes . in this context, analyzing a tree with two hundred taxa takes only a few seconds. . we also tried pattern matching on a relatively large tree  of the gprc gene family which is one of the biggest in the treepfam  <cit>  database of phylogenetic trees. in this case, phylopattern took  <dig> seconds to search for all orthologs  of a given sequence in the full tree. thus, we think that phylopattern represents a significant step towards automatic, high-throughput evolutionary biology studies.

another potential application for automatic phylogenetic analysis would be in the case of very large trees , where visual inspection would be impossible or too time consuming. although phylopattern has not been designed specifically to handle such large trees, theoretically it should be possible on very powerful computers. another possibility would be to divide a very large tree into a number of smaller subtrees  and to search for patterns recursively. for example, a strategy for an exhaustive domain shuffling events search, using phylopattern on a very large tree, could be defined like this:

1) divide the large tree into sub trees with phylopattern, for example using a size criterion,

2) with phylopattern, search each sub tree individually to find nodes with new domain architectures due to a shuffling event,

3) identify the domain structure of the ancestor of each subfamily,

4) construct a new tree with one representative member for each subfamily,

5) with phylopattern, search this tree to find intermediate nodes with new domain architectures due to a shuffling event.

all the examples described in this paper illustrate the potential functionalities of phylopattern. using the existing components in phylopattern in combination, we have shown that different genetic events can be localized on a phylogenetic tree, such as gene gain/loss, domain shuffling or gene transfers. with this information, two different complementary approaches can then be investigated: a gene centered approach or a global genetic approach. in the gene centered approach, a small number of trees are studied and the genetic events can be linked to different phenomes such as transcriptomes, interactomes, and phenotypes . in a more global analysis, the genetic events can be robustly correlated with the phenotypic shift and in turn this can be linked to an environmental shift. such an evolutionary based approach could also integrate multiple gene histories and possibly the whole genome. in this case, the deduced events and their functional consequences for one gene can be correlated with the other genes by comparing the tree annotations in order to find co-convergence between genetic events, function and environment.

in the future, phylopattern can be easily extended, by the addition of new predefined annotation functions and by the definition of new pattern syntaxes to solve specific issues not yet implemented in the current version.

availability and requirements
project name: phylopattern

project home page: 

operating system: platform independent

programming language: prolog  and java 

other requirements: no

licence: gpl

any restrictions to use by non-academics: contact ebm lab before using

abbreviations
api: application programming interface; bnf: bacchus naur form; nhx: new hampshire extended

authors' contributions
pg specified phylopattern functionalities, developed the software and drafted the main parts of this manuscript. jdt provided alignment data to build trees and helped to validate phylopattern. pp highlighted the evolutionary concepts underlying the conception and drafted biological parts of this manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
phylopattern package, version  <dig> . the complete phylopattern package with runtime, sources, samples and documentation.

click here for file

 additional file 2
v_set domain full phylogenetic tree. the full domain tree corresponding to the top/left part of figure  <dig> 

click here for file

 additional file 3
c2_set domain full phylogenetic tree. the full domain tree corresponding to the bottom/left part of figure  <dig> 

click here for file

 additional file 4
tbc domain full phylogenetic tree. the full domain tree corresponding to the top/left part of figure  <dig> 

click here for file

 additional file 5
uch domain full phylogenetic tree. the full domain tree corresponding to the bottom/left part of figure  <dig> 

click here for file

 acknowledgements
we thank past and present students: elodie darbo, jacques dainat, julien paganini, katja karstens and francisco prosdocimi for testing the tools in different biological contexts. this work was supported by french national research agency .
