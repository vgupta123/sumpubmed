BACKGROUND
next-generation sequencing technologies and tiling microarrays are frequently employed for genome-wide identification of regulatory elements and chromatin modifications. these applications generate vast numbers of experimental data points, which are compiled into extensive sets of genomic loci representing the units of biological activity measured in the particular assay. researchers must then discern functionally-relevant results from these large-scale datasets, a process that poses significant bioinformatic challenges for research groups with limited computational support. for example, a common aim of transcription factor location analysis is to determine the relationship between chip-enriched loci and annotated genes; identifying the cis-regulatory elements occupied by the factor can reveal the set of genes it is likely to regulate across the genome. correlating global transcription factor binding-site occupancy with target genes quickly becomes intractable in the absence of software tools to automate aspects of large-scale data analysis.

sequence patterns occurring repeatedly among enriched loci are indicative of regulatory elements such as transcription factor-binding sites, and can often be identified by dna motif analysis. successful motif discovery relies on a set of candidate loci that exclude extraneous sequences while still containing the binding site consensus; however, since many peak-finding utilities merge overlapping areas of enrichment, the resulting peaks tend to be much larger than the actual binding sites. peak regions often comprise more than one functional element , and these must be distinguished into individual loci in order to accurately interpret experimental results. the ability to subdivide composite peak regions into a finer-resolution set of individual binding sites  can improve the accuracy of sequence motif analysis.

here we describe peakanalyzer, a set of standalone tools for the automated post-processing of large-scale chromatin profiling data. the programs are able to identify discrete enrichment peaks from loci corresponding to transcription factor binding or chromatin modification, retrieve individual peak sequences and annotate experimental data against various classes of functional elements, such as genes, cpg islands, regulatory features or dnase i hypersensitive sites. results can also be compared across multiple datasets to report overlapping features, as well as those unique to a given experimental sample. the software is freely available and flexible in implementation, providing both high-performance solutions for pipeline integration and a gui version for desktop users.

implementation
program description
peakanalyzer comprises two main utilities: peaksplitter and peakannotator. peaksplitter accurately subdivides experimentally-derived peak regions containing more than one site of signal enrichment, optionally retrieving genomic dna sequences corresponding to subpeak summit regions. this procedure facilitates more detailed analysis of individual subpeaks . peakannotator scans the target genome to identify and report functional elements proximal to peak loci and contains three main subroutines: nearest downstream gene , transcription start site  and overlap data sets .

the function ndg locates the nearest downstream genes on both strands and calculates their distances. if the peak region intersects a gene, the program determines if the overlap is within an exon, intron, 5' utr or 3' utr. multiple transcripts or genes overlapping a given location are all reported, providing a means to identify putative bi-directional promoters where the peak is proximal to genes on both strands. tss locates the nearest transcriptional start site relative to each locus, scanning both downstream or upstream of the experimental peak to account for transcription initiation on either the sense or antisense strand. the ods function calculates the overlap in positions/peaks between datasets, where peak loci intersecting by at least one nucleotide on either strand are reported. to compute a p-value of overlap enrichment, a random dataset is generated having peak lengths and chromosomal distribution matching the experimental dataset; the overlap between experimental and artificial loci is then determined, and through successive iterations a p-value representing the statistical significance of experimental signal over random is calculated.

software distribution and input requirements
peakanalyzer is implemented as a unified java program encompassing the software components described above. equivalent versions of peaksplitter and peakannotator are also implemented in c++ and java so that users can choose a distribution suited to their particular requirements. core facilities processing numerous datasets have the option to incorporate the faster c++ version into a unix pipeline, whereas the java implementations can either be run as separate command-line utilities or as a single cross-platform desktop application using an intuitive graphical interface.

peakanalyzer requires only a single peak file and a feature annotation file in bed or gtf format; complete annotation files for the current builds of the human  and mouse  genomes are provided with the software distribution. the input files required by peaksplitter are those commonly generated by peak-finding programs: a .bed-formatted peak file containing chromosome start and end locations of signal enrichment loci, and a .wig signal file describing the size and shape of each peak.

algorithm implementation
peaksplitter
we adopted the peak-splitting approach proposed by fejes et al.  <cit>  and implemented as the function subpeaks in recent versions of their findpeaks tool. the method identifies multiple peaks within a given locus and accurately subdivides those containing more than one site of signal enrichment. in addition to incorporating the algorithm into peakanalyzer we provide a standalone version as the peaksplitter utility, thereby enabling its application to signal loci called by any such program . local maxima are identified in the peak region by scanning for relative peak heights, where those of adjacent maxima are compared and the lowest value is multiplied by a user-adjustable parameter to arrive at the read depth required for subpeak division. binding sites are most likely to appear at or near subpeak summit regions, and these sequences can be retrieved directly from the ensembl database  <cit> .

peakannotator
the peakannotator component scans the target genome to identify and report functional elements proximal to peak loci. rather than comparing each peak with all possible features, peakannotator uses a combination of binary search and a modified version of the nested containment list  algorithm  to rapidly identify proximal features among the full set of annotated elements. proof of correctness of the algorithms described below and a discussion of their runtime complexity can be found in additional file  <dig> 

generating a containment list
determining the set of intersecting genomic regions across multiple experiments and data sources is not straightforward, because for a given dataset the regions queried may not be contiguous and some regions may be embedded within others. thus, when sorting the regions by start position, the corresponding end positions could be out of sequence. this is more likely to be the case in higher eukaryotes where some loci encode overlapping genes.

the nclist algorithm constitutes a solution to this problem  <cit> . in this method the set of genomic regions is partitioned into a primary category of positionally-independent loci, and all remaining loci are segregated into a second category. we adopted this approach in our algorithm, where for each gene in the list peakannotator creates a sublist of all genes containing it. a pseudocode description of the process is listed in additional file  <dig>  figure s <dig> 

finding proximal downstream genes
the ndg utility determines the most proximal non-overlapping downstream genes on both strands. if a gene intersects a signal peak it will be stored in a separate list of overlapping genes. for simplicity, we define here a gene that is transcribed from the forward strand pos_gene, and a gene transcribed from the reverse strand neg_gene. the algorithm works as follows: the first non-overlapping gene located 3' to the peak, g3', is found using a binary search strategy such that g3'-start >peakend. if g3' is a pos_gene, it is the closest downsteam gene on the forward strand; if not, genes located downstream to g3' are visited until a pos_gene is found.

next, the first gene located upstream to g3' that does not overlap with the current experimental peak is found, termed g5'. if g5' is a neg_gene it has the potential to be the closest downstream gene on the reverse strand. however, if g5' is contained within another gene transcribed from the reverse strand, this gene is potentially closer to or even intersecting the current peak. hence, the next step is to determine the closest neg_gene and overlapping genes in the set of g5' and the gene containing g5'. if g5' is a pos_gene, genes located upstream are visited until a neg_gene is found. finally, the closest downstream neg_gene is searched within the set of that gene and those containing it.

finding proximal transcription start sites
the tss function works as follows: the first gene located downstream to the peak's central position, g3', is found using a binary search strategy, and its distance to the current peak is calculated. genes located downsteam to g3' are visited until a gene that starts downstream of the g3' locus is found. the gene having the lowest distance from the signal peak is then marked as the closest downstream gene. next, the first gene upstream to g3', termed g5', whose end position <g5'-start  is found. its distance, and the distance of all genes that contain it, is calculated in order to find the nearest upstream gene. the one representing the minimal absolute distance to the peak among the set of proximal downstream and upstream genes will be reported.

finding overlapping data sets
the ods function operates on two sets of peaks, denoted here s <dig> and s <dig>  and iterates over all loci in s <dig> to find those intersecting by at least one nucleotide with loci in s <dig>  for each locus ln in s <dig>  the first non-overlapping peak from s <dig> located 3' to l <dig>  termed l23', is found using a binary search strategy such that l23'-start >l1end. the algorithm then searches upstream of l23' to determine if any peak intersects l <dig>  until the first locus in s <dig>  termed l25', is found having coordinates outside the boundaries of l <dig>  peaks containing l25' can potentially overlap l <dig>  and are also considered.

RESULTS
to illustrate typical applications of peakanalyzer, we analyzed the genome-wide binding profiles of a series of transcriptional regulators  in mouse embryonic stem  cells, determined using the chip-seq method  <cit> . we obtained the primary data from the ncbi geo database , mapped the sequencing reads to the mouse genome assembly using the bowtie alignment program  <cit> , and detected significant peaks of signal enrichment with macs  <cit> . subsequent analyses were performed on the set of chromatin-binding regions from each of these re-processed chip-seq datasets.

identification and subdivision of signal peaks
in characterizing the binding patterns of each transcription factor, we first used the peaksplitter utility to partition regions of signal enrichment into individual binding loci. the numbers of putative binding sites resolved for each factor before and after processing are summarized in table  <dig>  as illustrated in figure  <dig>  the number of original signal peaks roughly correlates with the number of subpeaks found by peaksplitter. for some transcription factor proteins , the total number of subpeaks is close to the original number identified; this suggests the presence of either a single regulatory element bound at each locus, or a small cluster of binding sites such that the combined distribution of peak regions is too uniform to be accurately partitioned. however, the binding profiles of etf <dig> and esrrb produced large numbers of additional subpeaks, where more than twice the original number of etf <dig> binding sites were identified.

† alternate motif identified.

‡ no consensus found.

summary of chip-seq regions occupied by each transcription factor profiled, the numbers of peaks/subpeaks partitioned by peaksplitter, and the datasets where previously reported binding motifs could be identified. the number of motifs present in transcription factor-bound peak and subpeak datasets are given in the last two columns, indicating improved motif detection from subpeak summit regions.

a logical assumption when interpreting chip-seq data is that wider areas of signal enrichment may contain greater numbers of individual binding sites than narrow peak regions. to test this idea, we plotted the lengths of the original peaks resolved for each transcription factor relative to the numbers of subpeaks identified in each case by peaksplitter . broader peak areas were indeed subdivided into greater numbers of subpeaks, indicating the presence of composite binding loci. however, individual factors were found to exhibit varying length profiles within peak groups that were partitioned into the same numbers of subpeaks. for example, for a given number of subpeaks produced by peaksplitter, etf <dig> binding sites appear to be considerably longer than those of zfx. this would indicate that the distance between co-localized dna binding sequences specific to each transcription factors is different, an observation that may be related to the size of each transcription factor protein complex when co-factors are bound.

genome-wide annotation of transcription factor binding sites
binding sites identified from chip-based experiments are usually categorized relative to genomic features, such as the frequency of binding to promoters, enhancers, gene structures or unannotated intergenic regions. of primary interest in determining transcription factor targets is the location of binding sites relative to known transcriptional start sites. the relationship between promoter occupancy and differential gene expression can often identify genes directly regulated by a factor, but can also provide insight into the mechanisms by which it mediates transcriptional activation or repression. for example, factors that bind close to transcriptional start sites have been proposed to promote gene expression by stabilizing the association of general transcription factors at the core promoter elements; factors that bind to distal regions, either upstream or downstream of a gene locus, may regulate transcription by mediating, through a chromatin looping mechanism, the protein-protein contacts between distal complexes and the general transcriptional machinery bound at the promoter.

here we used peakanalyzer to assign the genome-wide binding sites resolved for each of the  <dig> transcription factors to target genes, and profiled these interactions based on the distance between binding sites and gene loci. in  <cit> , binding sites were assigned to target genes based on  <dig>  annotated mouse promoters  <cit> , which correspond to  <dig>  non-redundant gene loci. instead, we characterized the binding site profile of each factor separately in relation to all ensembl-annotated transcripts. using the tss function in peakannotator, we then calculated the percentage of binding sites downstream and upstream of ensembl genes for each transcription factor profiled .

from this analysis, it appears evident that the binding profile of c-myc is comparable with that of n-myc, and that of nanog is similar to both sox <dig> and smad <dig>  over 50% of c-myc and n-myc binding sites are located within or very close to target genes , whereas only 25% correspond to distal binding sites . in contrast, distal binding sites constitute the predominant fraction  of sox <dig>  nanog and smad <dig> loci; fewer than 10% of binding sites are found within or in close proximity to genes, suggesting that these factors bind preferentially to remote enhancer elements.

to further investigate the properties of binding sites located within genes, we used the ndg function of peakannotator and plotted the percentage of sites that fall within different gene components . the within-gene composition of c-myc binding sites approximates that of n-myc, whereas the distribution of nanog binding sites is most similar to sox <dig>  both c-myc/n-myc occupy a large number of sites that fall within 5' utrs and first introns , whereas only 20% were found to intersect higher rank-order introns. in contrast, nanog, sox <dig> and smad <dig> binding profiles are all characterized by a high percentage  of sites within introns subsequent to the first, with sites intersecting the first intron comprising a lesser fraction .

unsurprisingly, c-myc and n-myc exhibit similar peak profiles, as myc family members share gene and protein structural features  <cit>  and function through common pathways  <cit> . moreover, when expressed from the c-myc locus, n-myc is regulated in a similar fashion and functionally complementary to c-myc in the context of various cellular growth and differentiation processes  <cit> . although these two regulatory proteins display similar binding profiles, its not yet clear whether they share the same binding loci and regulate common target genes. to address this question we used peakannotator's ods utility to determine if c-myc and n-myc occupy the same binding loci in the chip-seq profiles examined. we found  <dig>   of c-myc binding sites to overlap those of n-myc, with p-values <  <dig>  compared to random peak locations. this observation indicates that, in the context of self-renewing es cells, c-myc and n-myc are likely to participate in tandem to regulate the transcription of a large number of common target genes.

identification of regulated target genes
we next sought to correlate the number of peaks and subpeaks found either in the promoter regions of genes  or within gene loci, relative to their corresponding expression levels in mouse es cells. for this analysis, we obtained relevant microarray data from the gnf symatlas database  <cit> , where expression levels from c57bl/ <dig> mice were measured on the affymetrix  <dig>  <dig>  array. microarray probesets were mapped to  <dig>  ensembl-annotated genes, and these were subsequently partitioned into  <dig> gene sets based on log <dig> intensity values .

in contrast, ctcf occupies more binding sites in genes displaying lower expression levels, suggesting that in this context ctcf acts as transcriptional repressor. furthermore, the number of subpeaks resolved by peaksplitter was much lower in this case, indicating the presence of single high-affinity ctcf binding sites, possibly comprising several recognition sequences in close proximity. interestingly, etf <dig> occupies roughly the same number of loci per gene at all levels of expression, but these regions are split into significantly more subpeaks in highly expressed genes. this suggests that the frequency of binding to regulatory elements may enhance the expression of etf <dig> target genes.

identification of binding motifs
a common aim in transcription factor-binding site analysis is to identify known and novel sequence patterns occurring within peak regions. to determine whether consensus binding sites are present in a set of chip dna fragments, statistically over-represented subsequences can be found using motif discovery software. the accuracy of motif analysis relies on the specificity of the input sequences, as the presence of excessive flanking regions will often inhibit the detection of common patterns. it is therefore advantageous to reduce non-specific sequence content in order to minimize the amount of uninformative background from which motifs must be distinguished  <cit> .

the ability to refine the set of input sequences can improve both the accuracy and success rate of motif discovery. in addition to subdividing signal peaks into discrete loci, peaksplitter can be used to extract genomic dna sequences corresponding to subpeak summit regions, which can then be used as input candidates for motif analysis. this feature is particularly useful when applied in conjunction with peak-calling software that does not report locations of greatest read depth within peak regions.

we employed meme  <cit>  to assess the performance of motif discovery using the subpeak summit sequences output by peaksplitter relative to entire peak regions. the detection of new sequence motifs has been shown to plateau with a high number of input sequences  <cit> . therefore we divided each chip-seq dataset into groups of  <dig> peaks, retrieved genomic dna sequences corresponding to peak regions and used these as input to meme. we then repeated this procedure using subpeak summit sequences as reported by peaksplitter.

the number of peak/subpeak sets where a previously identified binding sequence for each transcription factor could be found are reported in table  <dig>  the consensus motif  was found for all factors using sequences corresponding to the summit regions reported by peaksplitter, which was not the case when using entire peak sequences. furthermore, processing sequences for motif discovery required significantly less computational time after applying peaksplitter, on a high-performance compute cluster all  <dig> groups of  <dig> esrrb subpeak summit sequences could be processed in under  <dig> hours, compared to  <dig>  days to perform the same analysis on  <dig> full-length peak sets.

influence of peak-calling methods on motif discovery
the motif analysis described above could potentially be biased toward subpeak division if a particular peak-calling algorithm consistently reports longer peak regions than others. to verify whether this is the case, we compared the performance of peaksplitter and subsequent motif discovery on the output of several alternative peak-calling utilities, using the oct <dig> chip-seq profile as a representative example.

the sequencing data were first processed with six different peak callers: macs  <cit> , useq  <cit> , sissrs  <cit> , findpeaks  <cit> , chipseqmini  <cit>  and swembl  <cit> . default parameters were used in each case, with the exception of findpeaks where a height threshold of  <dig> was applied to the output. the number of peaks reported by each peak caller is presented in table  <dig>  along with the peak length distribution. all peak callers except sissrs report peak regions with median lengths between  <dig>  and  <dig> .

† minimum peak height = 5

‡ p-value < 1e-5

∓fdr 1%, fold change = 2

chip-seq data for oct <dig>  <cit>  were analyzed using six different peak callers. the numbers of peaks identified by each method along with the respective length distributions are listed.

we then applied peaksplitter to subdivide the peak regions called by each program, and compared the number of subpeaks reported both with and without filtering based on minimum read depth. such filtering is generally necessary to exclude spurious peaks in regions where sparse read mapping contributes to low-level background signal. the numbers of resulting subpeaks and their length distributions are listed in table  <dig>  the relative numbers of peaks differ significantly when the unprocessed .wig signal was used as input. interestingly though, the peak length distributions are nearly identical across different methods.

experimental signal peaks output by different methods and subdivided using peaksplitter. subpeaks generated with and without filtering based on a minimal height threshold of  <dig> are reported, along with subpeak length distribution. peak subdivision was applied based on a .wig file produced from the raw aligned reads, as only macs, findpeaks and swembl output adjusted .wig files. for these methods peaksplitter was also run using the modified .wig data generated by the respective program.

we next examined the agreement between the output of each method by comparing the overlap between the reported peaks and subpeaks. a non-redundant list of peak loci was created by merging overlapping regions output by each program; the resulting numbers reflect how many called a peak within each site. the intersection is represented in figure  <dig>  findpeaks and swembl reported the highest numbers of peaks not supported by other methods, whereas useq called the lowest number of peaks overall and is excluded from the figure for clarity. the relative overlap between the remaining five methods is similar when considering either the original peaks  or subpeaks .

finally, we used these results to determine whether peak subdivision enhances motif discovery. the merged peak and subpeak datasets were divided into groups of  <dig> sequences and used as input to meme. since individual peak summit information is lost when regions called by different programs are merged, we used the entire peak sequences for motif analysis rather than regions flanking the summit. following this analysis the canonical oct <dig> binding sequence was not identified in any of the datasets containing the original peaks. after peaksplitter was applied the motif was found in all of the subpeak datasets, aside from one instance where an oct <dig> half-site was reported. these results indicate that subdividing signal peaks is essential for accurate motif discovery, independent of the original peak-calling method used.

CONCLUSIONS
regulatory elements identified through functional genomic assays are commonly determined based on signal peaks from tiling array fluorescence data or aligned reads from massively parallel sequencing. in order to interpret the results of such experiments, they must be considered in context with genes and regulatory elements in proximity to peak regions. methods to automate the functional annotation of chromatin binding and modification loci can greatly ease characterization of their biological significance in genome-wide analyses.

a variety of tools are available for processing the primary data generated by chip-seq experiments, such as mapping sequence reads to a reference genome and identifying areas of significant enrichment. however, this is not the case for downstream analysis and data integration. existing solutions that address these issues either rely on the transfer of large datasets via the web for remote processing  <cit> , require local installation of target genome databases  <cit> , or operate within a specific computing environment  <cit> .

peakanalyzer is a standalone solution amenable to a wide range of applications, including comparison of data generated on different experimental platforms. the software can accept any genomic loci as input and therefore can be used to process datasets spanning various methods, such as chip-seq, chip-chip, damid, medip and bisulfite sequencing. the peakannotator component facilitates the automated annotation of numerous experimental results, and obviates the need to import large datasets into a genome browser for manual visualization and assessment.

subdividing genomic loci with peaksplitter is particularly useful for discerning individual binding sites that may be present in aggregate peak regions, and in extracting candidate sequences for motif analysis. we observe an increase in both accuracy and efficiency in motif search when chip data are processed by peaksplitter. partitioning broad signal peaks into discrete loci enriches the dataset for sequences containing transcription factor-binding sites and other regulatory elements, and can enhance the discovery of new consensus motifs by providing a more focused set of candidate sequences for alignment and/or model building.

availability and requirements
• project name: peakanalyzer

• project home page: http://www.bioinformatics.org/peakanalyzer or http://www.ebi.ac.uk/bertone/software

• operating system: platform independent

• programming language: java, c++

• other requirements: java  <dig>  or higher, r for graphical output 

• license: mit/x consortium

• restrictions to use by non-academics: none

authors' contributions
ms-d and pb conceived and coordinated the study; ms-d developed the software with advice from pb; kt generated sample data for algorithm development; ms-d and hd analyzed the chip-seq data with advice from pb; ms-d, hd and pb drafted the manuscript and the content was approved by all authors.

supplementary material
additional file 1
supplemental material. algorithm proofs, procedural example of peakannotator functionality, figures s <dig> and s <dig>  table s <dig> 

click here for file

 acknowledgements
the authors thank pär engström and tao liu  for discussions and program testing. support is acknowledged from embl and bbsrc grant bbg <dig> 
