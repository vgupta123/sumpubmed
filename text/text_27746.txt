BACKGROUND
flux balance analysis  is a method for analyzing genome-scale steady-state models of metabolic networks  <cit> . constructing an fba model often requires completing, or gap-filling, the reaction network. this completion is needed when the model does not grow under some specific growth condition . gap-filling is a computational technique to complete a reaction network based on fba without referring to the genome. indeed, a complete knowledge of the functionality of the genome provides a complete reaction network and no gap-filling would be needed. essentially, given a set of candidate reactions, gap-filling suggests to add some of these reactions to the model so that the fba model grows, but without guaranteeing that the enzymes for the added reactions exist in the organism. this computational approach to complete a network is viable if it is unknown how to complete the reaction network based on the genome.

to the best of our knowledge, all the current approaches to gap-fill  <cit>  use mixed-integer linear programming  and compute a minimum set of reactions to add. but, searching for a minimum set of reactions using milp is computationally expensive if the set of candidate reactions is large. for example, the metacyc  <cit>  database contains more than  <dig>  reactions. with such a set of candidate reactions, and searching for a minimum set of reactions, milp typically takes from several minutes to hours, because the number of integer variables increases proportionally to the number of candidate reactions. frequently, more than an hour is needed for optimally solving such milps. section “results” presents such concrete cases.

for another example,  <cit>  reports that gapfind with gapfill took about  <dig> hours when gap-filling a specific fba model of c. neoformans. gapfind/gapfill uses milp to find metabolites that cannot be produced and gap-fill the network of reactions of the model to produce them.

although milp can find a minimum number of reactions, those reactions are still only plausible suggestions to complete a reaction network. the reactions still need to be analyzed to confirm their validity for the organism. this analysis can be done by searching the scientific literature for references to pathways based on the suggested reactions to add. fastgapfilling also needs such an analysis, but it also provides several sets of reactions from which a broader analysis can be done.

moreover, these milp computational techniques focus on finding the smallest set of candidate reactions to complete a model, but that set is not necessarily the most appropriate solution. for example, if only one reaction is needed to produce an essential compound, it might be the case that there is a solution with two reactions that better correspond to the taxonomy of the organism. knowing the existence of this other non minimum solution might help discover the right missing reactions, which is a solution that might be given by fastgapfilling.

in this paper we present a computational technique using linear programming , avoiding milp, for reaction gap-filling. solving a linear program with thousands and even tens of thousands of variables is typically about  <dig> second. therefore, lp is a much faster computational technique, compared to milp, that can give almost immediate feedback on what is needed to complete a reaction network. the gap-filling solutions found by fastgapfilling can be the same or different from those with the milp approach, as the applications presented in section “results” demonstrate. in fact, several sets of candidate reactions are suggested by fastgapfilling, all offering positive growth condition, which may add more insight to complete a reaction network.

the next section presents the fastgapfilling algorithm based on lp.

methods
to the best of our knowledge, all computational techniques published to date for gap-filling a reaction network are based on milp, including the one used by metaflux  <cit> . metaflux can solve fba models, simulate knockout experiments, and gap-fill the reaction network, the secretions, the nutrients, and the list of biomass metabolites. in metaflux, the gap-filling process is based on try-sets and numerical value parameters, called weights, provided by the user. a try-set is a set of candidates to fill the incomplete model. for example, the try-set of reactions is a set, typically large, of candidate reactions for completing the reaction network. a try-set of nutrients would be a set of candidate compounds that could be transported into the organism to enable growth. each type of candidates  has its own weight. for each candidate added to the model, its corresponding weight is added to a global objective function and milp maximizes that objective. therefore, a positive weight indicates a desire to include as many candidates as possible in the model, and a negative weight indicates a desire to include a minimum number. a typical scenario is assigning a large positive weight for the biomass metabolites and assigning relatively smaller negative weights to all other try-sets. such a scenario includes as many as possible candidate biomass metabolites by adding a minimum number of reactions, secretions, and nutrients. in milp, the inclusion/exclusion of each candidate is controlled by an integer variable taking only one of two values,  <dig>  or  <dig> . thousands of such binary variables can exist because — besides the nutrients, secretions, and biomass metabolites — thousands of candidate reactions are typical.

lp and milp differ in one main respect: all variables in lp can take only fractional values, whereas some variables in milp must have integer values . this difference alone makes milp computationally more demanding. indeed, a typical milp solver must iteratively apply a series of lp problems to find the right integer values to satisfy all constraints. this process can be demanding when thousands or even hundred of thousands of lp cases need solving. in contrast, our technique typically requires solving only a few lp problems.the fastgapfilling algorithm is presented in figure  <dig> and can be summarized in the following way: 

 <dig>  when creating the lp formulation, all candidate reactions m are included with the actual reactions n of the model to complete.

 <dig>  all biomass metabolites are combined as one biomass reaction as if the fba model were solved. however, the objective function to maximize is the flux of the biomass reaction, multiplied by a weight, minus the sum of the fluxes of candidate reactions multiplied by the weights provided by the user .

 <dig>  a binary search is performed based on the weight of the biomass reaction: the weight of the biomass flux is changed using a binary search between  <dig> and the number of candidate reactions. each time the biomass reaction has a non-zero flux, the set of candidate reactions that are active is kept as one possible solution.

the algorithm does not try to gap-fill nutrients or secretions, because the model is assumed to have the correct growth environment specified before attempting to complete the reaction networks. accordingly, our description of the algorithm does not discuss the growth environment.

the fastgapfilling algorithm accurately represents the model, because the entire biomass reaction is used as if solving the fba model. the algorithm’s primary use is finding a small set of candidate reactions for adding to the model to produce greater biomass. in particular, if the biomass is zero , the algorithm tries to obtain growth by activating candidate reactions. that particular case implements reaction gap-filling. typically, m is a database of reactions such as metacyc, which includes approximately  <dig>  reactions.

the generic reactions of metacyc are instantiated. that is, reactions that operate on classes of compounds are transformed to one or several reactions, where the classes are replaced by specific compounds that exist in the model. any reversible reaction is transformed into two reactions, one for each direction, a standard practice in constructing fba models. this transformation simplifies the mathematical modeling as the flux values of all reactions become non-negative.

the algorithm’s output is a list of reactions sets. an implementation may output only the smallest set that would suggest the reactions for model completion. but other implementations may present all sets found and let the user select the most biologically appropriate set. the algorithm does not necessarily find the smallest possible set of candidate reactions to complete the given model. it does try to reduce the size of that set, but it does not compute the absolute minimum set of candidate reactions to complete the model. in other words, fastgapfilling uses an heuristic searching for the smallest set of candidate reactions to complete a model, but it may not find the smallest set.

the search for a small set of candidate reactions to add to the model is based on one weight δ in the objective function. at each iteration of the search, that weight is adjusted either to help the solver increase the biomass flux f
b
 or to reduce the number of candidate reactions added. the number of iterations done is bounded by ⌈log2|m|⌉.

the costs c
r
 given as input to the algorithm are typically based on the kind  or taxonomic range  of the reactions. the cost of a reaction is proportional to its probability of occurring in a model. for example, a reaction that is not known to occur in the taxonomic range of the model  should have a higher cost than a reaction known to occur in the taxonomic range of the model. examples of costs are presented in section “results”.

the mathematical formulation of the lp problem of this algorithm follows the standard approach of solving an fba model, except for the objective function described below and specified in figure  <dig>  we refer the reader to the papers  <cit>  that describe the generation of such lp. the statement “generate lp with reactions n and m” in the algorithm assumes that sets of nutrients and secretions are given. actually, the implementation guides the details of this generation, as it may include many other parameters, such as lower and upper bounds on the flux of some reactions, constraints to avoid ineffective high fluxes, and so on. essentially, the generated lp must be solvable, must satisfy the steady-state constraints, and must restrict the fluxes to non-negative values for all reactions of n and m, including the biomass reaction.

the main novelty of the lp formulation is the objective function that changes at each iteration of the binary search. the objective function to maximize is δfb−∑r∈mcrfr, where δ is a calculated weight by the binary search, f
b
 is the flux of the biomass reaction, and the summation of the terms c
r
f
r
 is done over all candidate reactions of m. this function tends to increase the flux of the biomass, as a maximization is applied and the δf
b
 is the only positive term in it. this function also tends to decrease the number of candidate reactions that have a non-zero flux  because the term −∑r∈mcrfr is negative . indeed, this is the objective of the algorithm: increasing the flux of the biomass while decreasing the number of candidate reactions to add to do so. the essential point is to find the right value for δ such that f
b
 is non-zero . this is the objective of the binary search done by modifying δ such that growth is maintained and the number of active candidate reactions is reduced. note that the initial value of δ is |m| . this value enables many candidate reactions to be active simultaneously at the beginning of the binary search.

note that, in general, this algorithm actually suggests adding candidate reactions to the model to increase the biomass. it could also be used for engineering more efficient metabolic pathways, although this aspect is not covered in this paper.

the main shortcoming of the algorithm is that it does not find a solution when no set of candidate reactions can be found to produce the entire set of biomass metabolites. in such cases, we recommend reducing the number of metabolites in the biomass reaction.

the following section demonstrates the application of fastgapfilling on an e. coli and yeast models.

RESULTS
we have applied the fastgapfilling algorithm to four incomplete e. coli models and to one incomplete yeast model. we started with a working e. coli model for which no added reaction are needed to obtain growth and then removed from  <dig> to  <dig> reactions in order to prohibit growth. a similar procedure was done to create the incomplete yeast model. see the following subsections for more details on the creation of these incomplete models.

the original e. coli model is based on the ecocyc database . the model has  <dig>  enzymatic reactions, including the instantiated generic enzymatic reactions. the biomass reaction has  <dig> metabolites. the growth media is composed of glucose, oxygen, ammonium, phosphate, diphosphate, sulfate, and iron. the secretions are carbon-dioxide, acetate, and water. an upper bound of  <dig> mmol/g/h was constraining the intake of glucose.

for each incomplete model, we also ran metaflux  <cit>  in development mode to gap-fill the reaction network. the development mode of metaflux uses milp with the scip  <cit>  linear solver. the milp gap-fill solutions were compared with the gap-fill solutions found by using the fastgapfilling algorithm.

in the milp development mode, weights are user specified to control the candidate reactions to include in the model. they are called costs if their values are negative and gains if their values are positive. costs are applied to reactions, and a gain, to the biomass metabolites. the gain is not user specified when using fastgapfilling, because the weight to the biomass reaction is controlled by the algorithm, but only for milp. the following costs and gain were used for all cases presented in this paper. 

 <dig>  a cost of  <dig> for one candidate spontaneous  reaction

 <dig>  a cost of  <dig> for one candidate reaction inside the taxonomic range of the organism

 <dig>  a cost of  <dig> for one candidate reaction of unknown taxonomic range

 <dig>  a cost of  <dig> for one candidate reaction outside the taxonomic range of the organism

 <dig>  a gain of  <dig> for one candidate biomass metabolite

the relative values of these weights , as opposed to their absolute values, are important. for example, the cost of a spontaneous reaction is smaller than the cost of an enzymatic reaction, because a reaction that does not require an enzyme can occur in any organism. similarly, the cost of a reaction that is outside the taxonomic range of the organism is set higher than the cost of a reaction in the taxonomic range of the organism because we prefer reactions in the taxonomic range of the organism selected. the candidate reactions are all coming from the metacyc database, and their taxonomic ranges are based on the curated pathways of that database.

notice that the gain of one biomass metabolite is high compared to the cost of any reactions. for example, the ratio between the gain and the cost of a reaction in the taxonomic range of the organism is  <dig>  this means that up to  <dig> such reactions could be added to the model if one more biomass metabolite can be produced. the intention is to produce a maximum number of biomass metabolites even if a large, but still bounded, number of candidate reactions is needed to produce them. as shown in the following subsections, this general result was obtained for all cases presented because a few reactions produced all metabolites.
e. coli 
 and one incomplete model of yeast alongside the number of suggested reactions

all times were rounded to the nearest number of seconds and they included only solver time, excluding the time for preparing the data for the solver. note: the number of suggested reactions does not constitute an absolute measure of the quality of the solutions, but rather is one indicator of the similarity between the milp technique and the fastgapfilling algorithm.

discussion
first incomplete e. coli model
to create the first incomplete e. coli model, we removed the following reaction from the original e. coli model:   

note: in this subsection and the following subsections, the metacyc reaction unique identifier is shown between parentheses. in the reaction just shown, that identifier is branched-chainaminotransferleu-rxn, which can be used as an unambiguous keyword to search for more information about that reaction at biocyc.org.

that reaction, going right to left, is the last step in the biosynthesis pathway of the amino acid l-leucine and, going left to right, the first step in the l-leucine degradation pathway. no other reaction in the model produces l-leucine. because l-leucine is part of the biomass reaction of the model, we expect that adding this reaction will be suggested when gap-filling is done. indeed, the metaflux gap-filling milp solution suggested adding the same reaction, in the right to left direction. metaflux could give the relevant direction as part of the solution because all reversible candidate reactions are split into two reactions, one for each direction. metaflux did not suggest adding the reaction in the opposite direction because the reaction was not essential for growth given the nutrients. scip required  <dig> seconds to obtain this optimal milp solution.

when the fastgapfilling algorithm was run on the same incomplete model, adding the same reaction, in the same direction, was suggested. four iterations  were needed before that solution was found; the first three iterations found solutions with three reactions. the total solver running time of these four iterations was  <dig> seconds.

this first simple example shows that fastgapfilling can find the exact same solution as the milp technique in much less time.

second incomplete e. coli model
the second incomplete e. coli model is derived by removing, additionally to the reaction removed in the first incomplete e. coli model, three reactions that produce the compound tetrahydrofolate, which is part of the biomass. these additional reactions are:   

notice that the reaction of the previous incomplete model and these three reactions are in different metabolic pathways.

the milp development mode of metaflux suggested adding three of the reactions that were removed: the first two reactions above, and the reaction removed in the first incomplete model. that is, the third removed reaction above was not suggested. the scip solver required  <dig>  seconds or about 2: <dig> hours to find this optimal solution.

we ran the fastgapfilling algorithm on the same incomplete model. the smallest set of suggestd reactions included the same three reactions. other solutions proposed included four reactions. fastgapfilling performed  <dig> lp solving iterations, with a solver total execution time of  <dig> seconds.

this second example shows that fastgapfilling can find the same solution as the milp technique in substantially less time — in this case, well over  <dig> orders of magnitude faster.

third incomplete e. coli model
for this third example, we selected four reactions to remove from the original e. coli model tricarboxylic acid cycle  pathway:   

the milp solution suggested adding two reactions, both in the taxonomic range of e. coli:   

although, these two reactions were not among the four reactions removed, the second reaction does produce the compound 2-oxoglutarate, one of the compounds produced by one of the reactions removed. notice that the development mode of metaflux produces only one of the possible optimal solutions. other different minimal cost solutions may provide the same value, but metaflux outputs only one of them. in this example, an optimal solution might include two of the four reactions removed, but we cannot confirm it. scip required  <dig>  seconds or about 2: <dig> hours to find this solution.

however, fastgapfilling found a solution of three reactions after  <dig> iterations lasting  <dig> seconds, the first two reactions being the same as the milp solution plus the following reaction:   

the third reaction appears to be redundant because its flux, as given by fastgapfilling, is  <dig> , whereas the fluxes of the other two reactions are the same at  <dig> . the flux of the third reaction is much lower than those of the first two reactions.

indeed, the low-flux reactions suggested by fastgapfilling might simply be a way to increase the biomass and might not be reactions essential for growth. in general, this possibility can be verified by only adding the suggested reactions with relatively high fluxes and solving the resulting network. if the biomass can be generated, the low-flux reactions would be nonessential.

fourth incomplete e. coli model
the fourth incomplete model is the original e. coli model with  <dig> reactions removed. these reactions were selected because they produced at least one of the following metabolites: l-lysine, l-leucine, l-isoleucine, and l-histidine. all these metabolites participate in the biomass reaction. essentially, this is an example where many biosynthesis pathways have been disturbed. the following reactions were removed.   

the scip solver could not find an optimal solution to the milp problem after running for  <dig> hours. however, fastgapfilling produced the following solution, after  <dig> iterations that took  <dig> seconds by the scip solver, by suggesting three reactions: branched-chainaminotransferileu-rxn, diaminopimdecarb-rxn, and histaldehyd-rxn. these three reactions are among the  <dig> reactions that were removed.

this example shows that fastgapfilling can be very useful in practice: no optimal or near optimal solution could be found after  <dig> hours using the milp approach, whereas fastgapfilling quickly found a gap-filling solution.

incomplete yeast model
as a last example of applying the fastgapfilling algorithm, we used a yeast model. as with the e. coli model, the original yeast model can grow. the original yeast model is based on the yeastcyc database . the model includes  <dig>  enzymatic reactions, including the instantiated generic enzymatic reactions. the biomass reaction is composed of  <dig> metabolites. the growth media is composed of glucose, oxygen, ammonium, phosphate, sulfate, and iron. the secretions are carbon-dioxide, carbon-monoxide, formate, hydrogen-peroxide, glycolaldehyde, and water. an upper bound of  <dig> mmol/g/h was constraining the intake of glucose.

to generate an incomplete model, four reactions responsible for the biosynthesis of five lipids  were removed. these five lipids are part of the biomass. the reactions removed are:   

the first reaction  appears in three different pathways , whereas each of the other reactions occurs separately in three other pathways.

the optimal milp solution for gap-filling this incomplete yeast model, required  <dig>  seconds or about 5: <dig> hours, and suggested adding the four reactions above. this set is the least number of reactions expected because metacyc  includes no other reactions to produce these lipids.

fastgapfilling found the same solution, after  <dig> iterations lasting  <dig> seconds using the scip solver — a much faster execution time when compared to milp. the binary search of fastgapfilling also found other solution sets with up to  <dig> candidate reactions, but the smallest set included the exact four reactions that were removed.

CONCLUSIONS
fastgapfilling is an efficient technique to gap-fill reaction networks allowing interactive completion of reaction networks of fba models, whereas milp fails to offer such an efficiency.

the fastgapfilling algorithm increases the biomass flux by minimizing a weighted minimum sum of fluxes from new reactions, whereas the gap-filling approach using milp is based on adding a minimum number of new reactions to obtain a non-zero biomass flux.

using concrete examples, we show that the fastgapfilling algorithm is efficient for performing reaction gapfilling requiring much less computation time than milp-based approaches. this result is not surprising because milp may have to solve hundreds or even thousands of lp problems, whereas the fastgapfilling approach requires solving only a few lp problems.

competing interests
the author declares that he has no competing interests.

acknowledgments
we thank markus krummenacker for having prepared the original e. coli model and daniel weaver for having improved the quality of the original yeast model.

this work was supported by award number r01gm <dig> from the national institute of general medical sciences. the content of this article is solely the responsibility of the authors and does not necessarily represent the official views of the national institute of general medical sciences or the national institutes of health.
