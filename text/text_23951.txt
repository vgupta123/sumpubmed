BACKGROUND
since the beginning of human genome project, the demand of designing oligonucleotide has been undergoing explosive growth. an oligonucleotide  is a small dna sequence  designed for hybridization only with a targeted position in a target sequence, and the oligonucleotide design is a basic process for many bio-molecular experiments including gene identification, pcr amplification, dna microarray, and so on. one of the most important issues in oligonucleotide design is to minimize the cross-hybridization event. the usual oligonucleotide designs spend too much time to calculate the hybridization values for all possible oligos and counterparts. thus, many heuristic algorithms have been applied to this problem as a filter to remove unreliable regions before checking the cross-hybridization. they are clustered into three major categories: multiple alignments  <cit> , suffix tree  <cit> , and hashing algorithm using seeds   <cit> . among these categories, the seeding algorithm is the most widely used algorithm because of the fast search speed with allowing some mismatches.

the seeding algorithm process consists of a filtering step and an extension step in general. at the filtering step, short fixed-length common words that are found at both query and target sequences are selected. then at the extension step, it determines whether each word can be extended into a significant alignment. blast  <cit>  is the most popular program using this process. blast uses fixed-length continuous matches as a template for finding common words, and the template is called a seed. most oligo design programs  <cit>  adopt blast as a filter. however, the seeding algorithm has a problem of trade-off between sensitivity and search speed. enlarging the seed size increases the risk of missing true alignments, while shortening it generates more random hits and results in computational slowdown. patternhunter  <cit>  showed that the problem can be weakened by introducing a non-continuous seed such as " <dig> " so-called a spaced seed. after the notion of non-continuous seed was presented, the spaced seed has been studied by many researchers in aspects of computational complexity  <cit>  as well as adapting the seeds for more specific biological sequences  <cit> . recently, oligo design programs have been adopting such enhanced seeding algorithms. a oligo design programs prodesign  <cit> , used yass  <cit>  to improve its computational speed.

despite the possibility of speeding up the design time of a seed, a measure of evaluating seeds regarding how adequate and efficient they are in the oligo design has been not yet examined as far as we have explored. we noticed that the seeding algorithms have been developed only to maximize the sensitivity of finding all possible alignments. however, oligonuleotides should be specific to non-target sequences as well as sensitive to the target sequences. thus, in order to design oligonuleotides for using a seeding algorithm, the seeding algorithm needs to be selected by considering the ability of discriminating target and non-target regions properly.

in this paper, we propose a novel measure of evaluating the seeding algorithms based on the discriminability and the efficiency. by the measure proposed, we examine five seeding algorithms in oligonucleotide design. we carried out a series of experiments to compare the existing seeding algorithms. the results show that the spaced seeding algorithm was generally preferred to the other seeding algorithms. the performance of transition-constrained seeding algorithm was slightly lower than the spaced seeding algorithm. considering discriminability only, continuous seeding algorithm is as good as the spaced seeding algorithm in the comparison of low weights of the seeds. however, in the others of the comparison, the performance of continuous seeding algorithm degrades rapidly. because blat seeding algorithm and vector seeding algorithm give poor scores in specificity and efficiency, we conclude that these algorithms are not adequate to design oligos. consequently, we recommend spaced seeds or transition-constrained seeds with 15~ <dig> weight in order to design oligos with the length of  <dig> mer. the recommended seeds show consequently good performance in real biological data. we propose a software package, seedchooser, which enables the users to get the adequate seeds under their own experimental conditions. our study is valuable to the two points. one is that our study can be applied to the oligo design programs in order to improve the performance by suggesting the experiment-specific seeds. the other is that our study is useful to improve the performance of the mapping assembly in the field of next-generation sequencing. our proposed measures are originally designed to be used for oligo design but we expect that our study will be helpful to the other genomic tasks.

the rest of the paper is organized as follows. first, we define the performance measures to evaluate seeding algorithms on oligo design: discriminability, efficiency and efficient discriminability. in result section, the five well-known seeding algorithms are compared with the proposed measures. the five types of the seeds are also estimated with two real biological data sets. we propose a software package which enables to design and evaluate the appropriate seeds with empirical manners. then we discuss the issues which appeared in the results and draws conclusions. lastly, we describe how to evaluate a set of the seeds for oligo design in method section.

problem definition
it is a general idea in the oligo design that an ideal seeding algorithm should filter all regions as fast as possible that have no possibility of being chosen as an oligo. however, actually there are three issues to be considered regarding how adequate and efficient a seeding algorithm is in the oligo design. first, a seed should find as many oligos as possible. second, a seed should not find any non-oligo region. lastly, a seed should generate hash values as few as possible which are useful to find oligos. there are trade-off relationships among the issues. therefore, we propose a novel measure of efficient discriminability which considers all of them. this measure is based on the two metrics: discriminability and efficiency. the discriminability is a balance between sensitivity and specificity to minimize both false positives and false negatives. the efficiency is the proportion of useful regions filtered by the seeding algorithm.

discriminability
the illustration of the effect of a seeding is shown in figure  <dig>  it shows the oligo selection in the event of filtration using a seeding algorithm. let the hash value filtered by a seed be a 'seed hash'. for an oligo p <dig>  the seed hash s <dig> in p <dig> is used to find possible oligos in the target sequences. when a seed hash s <dig> is occurred in the oligo p <dig>  it is called as 'hit'. this is a desirable case because the seeding finds an oligo successfully. it is also possible that the seed hashes s <dig> and s <dig> fail in finding their oligos. another undesirable case is that oligo p <dig> does not have any seed hash. these cases are summarized as follows:

• true positive : the seeding hits oligos , or oligos contains at least a seed hash .

• false negative : oligos have no seed hash ().

• false positive : the seeding misses oligos ()

• true negative : the seeding does not hit any non-oligo region.

the sensitivity and the specificity of a seeding in the oligo design are the most common and widely-used measures. however, they have a problem that the amount of true negatives is not considered. therefore, instead of them, it is more appropriate to use precision and recall in evaluating a seeding in the oligo design. they have ability to measure false positives and false negatives. in addition, they can be merged into one easily. precision p is defined as the proportion of seed hashes hitting oligos to all seed hashes, while recall r is the proportion of oligos containing the matched seed hashes to all selected oligos.

for the unified measure discriminability, f-measure is used which is the weighted harmonic mean of precision and recall. in real oligo design problem, it is needed to set the different weight between precision and recall. recall is more valuable than precision in minimizing false negatives, while precision is more valuable than recall in minimizing false positives. this is controlled by importing a non-negative parameter α into the f-measure. therefore, the discriminability, fα is given as

then, a discriminative seed is defined as a seed that has the maximum discriminability. the discriminability fα has following properties: the maximum value of the discriminability is  <dig> and it can be obtained only when both p and r are  <dig>  when the discriminability has the maximum value, there is no false positive and no false negative. the balance of the sensitivity and the specificity is controlled by α. increasing α over  <dig>  the weight of precision becomes higher than that of recall. it makes fα sensitive to false positives. decreasing α below  <dig>  the weight of precision becomes lower than that of recall. it makes fα sensitive to false negatives.

efficiency
the efficiency of a seed on oligo design can be measured by two points:  the duplicated generation of hash values and  the average number of seed hashes in an oligo. some seeding algorithms allowing some mismatches such as blat  <cit>  and vectorseeds  <cit>  generate multiple hash values at a single position. it increase sensitivity in that it generates more hash values than simple seeding algorithms, in most cases, it over-generates hash values to find an oligo. therefore, it is desirable to minimize the duplicated hash values during the generation time. the duplication rate of the generated seed hashes, d is defined as follows.

another consideration for the efficiency is about the number of seed hashes in an oligo. since the length of an oligo is longer than that of a seed, an oligo could be found by multiple seed hashes. however, only one seed hash is sufficient in finding an oligo. the average rate of seed hashes in an oligo, a is defined as follows.

both the duplication rate d and the average rate a are at least  <dig> because the value of numerator includes the value of denominator. each of the rates is normalized as follows: 1/. the efficiency is defined as the multiplication of the normalized d and a. the weight β for d and the weight γ for a are both ranged from  <dig> to  <dig>  then the efficiency eβ, γ is given as

since the values d and a are non-negative and their minimum values are  <dig>  the maximum value of the efficiency eβ, γ is  <dig>  it means that an oligo contains only one seed hash when eβ, γ has the maximum efficiency,  <dig> 

efficient discriminability
finally, we define the efficient discriminability, gα, β, γ as a product the discriminability  and the efficiency .

then, the efficient discriminative seed is the seed that has the maximum efficient discriminability value for given α, β and γ. when all the parameters α, β and γ are not zero, the seed with the maximum value of gα, β, γ is optimal. the value of gα, β, γ is maximized when both fα and eβ, γ are maximized. according to the definitions of discriminability and efficiency, the optimal seed has no false positive and false negative, and it appears only in one oligo.

RESULTS
we compared the performance of the five seeding algorithms  on oligo design in perspective. the brief descriptions of those seeding algorithms are found at 'seeds for assessment' in method. in order to estimate the performance of the seeding algorithms, they were evaluated by three measures, discriminability, efficiency, and efficient discriminability, respectively. the weight parameters α, β, and γ were set to  <dig> by default.

empirically the selected seeds which are believed to represent their seeding algorithms were estimated by the measures and plotted by the weight of the seeds. the reason why the seeds are plotted by weight is that the seeds having the same weight are generally considered to spend the same computing costs. we selected  <dig> seeds for test empirically as shown in table s <dig> and s <dig> of the additional file  <dig>  nineteen seeds were selected respectively for continuous seeding algorithm, spaced seeding algorithm, and trnasition-constrained seeding algorithm granting different weights from  <dig> to  <dig>  for blat seeding algorithm and vector seeding algorithm, fourteen seeds which have the different weights from  <dig> to  <dig> were selected, respectively. the above two seeding algorithms allowing mismatches in their seeds are exceedingly more sensitive than the other seeding algorithms. generally, a seed's weight is in inverse proportion to sensitivity. that is, if a seed's weight is increased, the seed's sensitivity is decreased. so we skipped the selection of the seeds below 14-weight instead of the additional selection of  <dig> and 27-weight seeds.

we tested the selected seed on a set of the simulated data and the two sets of biological data. the simulated data is a set of artificially generated oligos and target sequences. the biological data are obtained from an oligo design program hpd  <cit> . the details of the data are described at 'sequences for assessment' in method. to summarize the experimental results, we identified that the 16-weight spaced seed showed the highest performance among the examined seeds in accordance with the efficient discriminability. without the considering efficiency, the 12-weight spaced seed achieved the highest performance. the results show that spaced seeding algorithm is generally preferred to the other seeding algorithms in the viewpoint of the efficient discriminability. the results of transition-constrained seeding algorithm are as good as the results of the spaced seeding algorithm. considering discriminability only, continuous seeding algorithm is as good as the spaced seeding algorithm in the comparison of low weights of the seeds. however, in the others of the comparison, the performance of continuous seeding algorithm degrades rapidly. we also identify that the seeding algorithms which allow mismatches in the seeds show high performances only considering sensitivity. therefore, both blat seeding algorithm and vector seeding algorithm are not adequate to design oligos. the recommended seeds show consequently good performance in real biological data.

discriminability of the five seeding algorithms
under the default parameter , the comparison of the five seeding algorithms in considering of the discriminability is given in figure  <dig>  the x-axis of this figure is the weight of seed, and the y-axis is the value of discriminability. the weight implies the real size of a seed to be compared. in the figure, the 12-weight spaced seed ranks the highest where its discriminability is  <dig>  at highest peak point. the 11-weight continuous seed and the 12-weight transition-constrained seed also achieve the next highest results. their discriminabilities are as high as the best score of the spaced seed. these two seeding algorithms show similar curves, where the curve of the spaced seed is slightly above that of the continuous seed. on the other hand, all blat seeds and all vector seeds show very low discriminability results around  <dig> . their low discriminabilities come from their extreme sensitivity. their precisions are both equal to  <dig>  while the recall is just  <dig>  for both algorithms.

efficiency of the five seeding algorithms
the efficiency monotonously increases with the weight of a seed increased . the spaced seed and the transition-constrained seed show the best efficiency. the curve of the continuous seed is lowered after that of the 15-weight of the seed while the curve of vector seed increases steadily.

efficient discriminability of the five seeding algorithms
the efficient discriminabilities of the five seeds were compared with the parameters of α, β and γ fixed as the default value. figure  <dig> shows the comparison results. in this figure, the y-axis is the efficient discriminability. the highest efficient discriminative seed is the 16-weight spaced seed of which efficient discriminability was  <dig> . all spaced seeds were positioned at the first or second ranks. the transition-constrained seeds showed similar curve with the spaced seeds, but the highest result was lower than that of the spaced seed. the efficient discriminabilities of the continuous seeds declined steeply above the weight  <dig>  all blat seeds and all vector seeds were ranked the lowest expectiviely.

seed estimation with the biological data sets
performance of the seeds is estimated with the two biological data sets, pmoa and nirs. the results are listed in table  <dig> and  <dig>  from pmoa data we identified 19-weight spaced seed as the highest efficent discriminative seed. the estimated value is  <dig> . the highest discriminative seed was 18-weight transition-constrained seed scored with  <dig> . for nirs data, the best efficient discriminative seed was 14-weight spaced seed scored with  <dig> . this seed was also the best discriminative seed for the data set. we noticed that the estimation results of pmoa data set followed the simulation results. the results of nirs data set was lower than the simulation results. we predict that it was related to the average similarity of the data set. therefore we conclude that longer spaced seed is good to the data set showing higher similarity and shorter spaced seed is good to the diversely distributed data set.

cont indicates the continuous seed type, spaced indicates the spaced seed type, and trans indicates the transition-constrained seed type.

cont indicates the continuous seed type, spaced indicates the spaced seed type, and trans indicates the transition-constrained seed type.

seedchooser: seed evaluation and recommendation tools
the results of the above empirical test yield clues to the guideline of selecting an appropriate seed on considering discriminability as well as efficiency. based on the results, the users may predict which seeding algorithm is prefer to their tasks. however, they really want to know the most appropriate seed length and weight as well as the adequate seeding algorithm in detail. to maximize the effect of the seed recommendation in practice, we constructed the software package including the evaluation process and design process.

we built a user-friendly package of the tools to provide both seed evaluation and seed recommendation. it consists of three programs; seedchooser, seedevaluator, and oligogenerator. seedchooser is the main program which recommends a good seed by three parameters α, β and γ seedevaluator is the program which evaluates a set of the input seeds by the parameters. oligogenerator is the program to generate a set of oligos for the desired experimental conditions.

discussion
multiple seed selection method is not good at aligo design
the seeding algorithms wihch allow some mismatches in the seeds, the blat seeding algorithm and the vector seeding algorithm, is originally proposed to increase sensitivity intentionally by generating multiple seed variations from a seed. these algorithms have been successfully applied to the specific-purpose alignments which are required very high sensitivity. protein sequence alignment is a good example of the algorithms. however, this is not efficient in the oligo design. in the experiments of the discriminability, recalls are always  <dig> with the all possible weights, but the precisions are as low as  <dig> . it implies that blat seed and vector seed find all oligos since they are too sensitive, but too many seeds are found in non-oligo regions. thus, they show lower discriminability than other seeding algorithms. the multiple selection of seeds results in also low efficiency. this is because too many seeds are found to get a single oligo. therefore, they are neither discriminative nor efficient in the oligo design.

the effect of the weight parameters
generally, precision is in proportion to the seed weight and recall in reverse proportion to the seed weight. since the discriminability is the harmonic mean of precision and recall, the highest discriminative seed is found at the cross-point of the precision curve and the recall curve with given one to all weight parameters.  the parameter α which is the weight parameter controlling the balance of precision and recall forces the user's intention. as increasing the parameter α, discriminability gets more dependent to the precision.  while discriminability gets more dependent to the recall as decreasing α. a user should choose the lower weighted seeds or the sensitive seeds in order to do the lossless filtration. the best discriminability of α = 2- <dig> is  <dig> , and that of α =  <dig> is  <dig> , whereas that of α =  <dig> is  <dig> . we also noticed that the discriminability changes in proportion to the seed weight even if precision and recall are fixed. therefore, the value of discriminability should be compared with between the seeds which have the same weight. the weights of β and γ for efficiency should be also considered in the same way. figure s <dig> in the additional file  <dig> is the graphical view of the effect of β and γ with given the rates fore efficiency d =  <dig>  and a =  <dig> .

an efficient discriminative seed improves the oligo design performance
the oligo design process using a seeding algorithm consists of two steps. the first step is a fast filtration of the unreliable regions for all possible oligos using a seeding algorithm. since a seeding algorithm uses a hashing data structure, the filtration by the seeding can be executed fast in the linear time. the second step is an accurate filtration step by simulating hybridization. the time complexity of this step is generally quadratic. for example, the 11-weight blast seed saves 10% of the seed hashes compared with the 7-weight blast seed with the cost of  <dig> % missing of the true positives. it reduces the computational time of the second step up to 81%. the first step also saves the computational time by the amount of 10%. therefore, the selection of the efficient discriminative seeds reduces the cost of the oligo design by speeding up the computational time with the little loss of accuracy.

seed evaluation for next-generation sequencing
recently, introduction of the new strategies for high-throughput dna sequencing dramatically reduced the cost of genome sequencing. however, the great sequencing performance of these new technologies is come at the expense of the considerable shorten of read lengths. for example, a typical run of the illumina genome analyzer yields about  <dig> million reads. but the read size is only 32~ <dig>  <cit> . one of the promising applications is the re-sequencing projects among the applications of the next-generation sequencing. the object of the re-sequencing project is to reconstruct a sample genome and find genomic variations by mapping the reads to a reference genome. the mapping process raises two new computationally challenging problems. one is that the vast amount of the data requires much faster mapping speed. the other is the mapping of the error-containing reads to the correct positions of the reference genome. most previous works for mapping process have been used the indexing strategy in order to solve the problems  <cit> . the representative indexing strategy is to construct indices based on exact matches of length k . the reads sharing a k-mer are only compared with each other.

the notable point of k-mer indexing strategy is that it is exactly the same process of the first step of the oligo design. the k-mer is directly regarded as a continuous seed because both are the templates of the exact matches. our evaluation measure of the seeds can be used for improving the performance of the mapping assembly due to the following reasons. first, efficiency calculates the expected cost of constructing the k-mer indices. second, discriminability calculates the compromisable point of sensitivity and specificity. finally, it is allowed to incorporate the five well-known seeding algorithms while selecting a best seed for the mapping assembly. discontinuous seeds including spaced seed will improve the mapping sensitivity without loss of the specificity in mapping assembly. recently, lin et al.  <cit>  pointed out those problems and proposed a mapping assembly tool as a solution by introducing the spaced seed. lin et al. described a disadvantage of the exact matching process and proved that the spaced seeding can achieve full mapping sensitivity. we ensure that our proposed measures and the developed software will be contributed to the next-generation sequencing field.

CONCLUSIONS
in this paper, we proposed a novel measure of evaluating the seeding algorithms based on the discriminability and the efficiency. by the measure proposed, we examined five well-known seeding algorithms: continuous, spaced, transition-constrained, blat, and vector. from the results, we concluded the comparison of the seeds as below. the spaced seeding algorithm was generally preferred to the other seeding algorithms. the performance of transition-constrained seeding algorithm was slightly lower than the spaced seeding algorithm. the blat seeding algorithm and vector seeding algorithm were not adequate to design oligos because the poor scores in specificity and efficiency. consequently, we recommend spaced seeds or transition-constrained seeds with 15~ <dig> weight in order to design oligos with the length of  <dig> mer. the recommended seeds showed consequently good performance in real biological data.

we tested the effect of three weight parameters for discriminability and the efficiency. the highest discriminative seed was found at the cross-point of the precision curve and the recall curve with given one to all weight parameters. performance of the seeds was estimated with the two biological data, pmoa and nirs. the estimation of the real data showed that the longer spaced seed was good to the data having higher similarities in their alignments and shorter spaced seed was good to the diversely distributed data. we also proposed a user-friendly package of the tools to provide both seed evaluation and seed recommendation, which enables the users to get the adequate seeds under their own experimental conditions.

we conclude this paper after pointing two promising usages. one is that our study can be applied to the oligo design programs in order to improve the performance by suggesting the experiment-specific seeds because this work is originally designed to elevate the performance of the existing programs. the other is that the measures proposed by here can be extended to the general purpose to evaluate and recommend the seed-like instances. therefore it can be applied to any kind of studies such as the mapping process in the next-generation sequencing as well as the oligo design and the sequence alignment problems.

