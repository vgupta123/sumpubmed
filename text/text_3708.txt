BACKGROUND
mathematical modeling is a crucial tool in understanding the dynamic behavior of complex biological systems. in addition to the popular ordinary differential equations  models, discrete models are now increasingly used for this purpose  <cit> . model types include  boolean networks, logical networks, petri nets, cellular automata, and agent-based  models, to name the most commonly found ones  <cit> . while discrete models tend to be more intuitive than those based on differential equations, they do not have the broad range of mathematical analysis tools available that have been developed for ode models. for small models, exhaustive enumeration of all possible state transitions of the model is the method of choice. but since the size of the state space grows exponentially in the number of model variables, this method is very limited in its applicability. for larger models sampling methods can be used to get some information about model dynamics. there are several existing sophisticated software tools available that allow users to analyze and simulate discrete networks, focused on a particular model type. these tools use a variety of computational and analytical tools for analysis purposes, with a range of different user interfaces; see, e.g.,  <cit> . they will be discussed in detail in a later section.

the software tool introduced in this paper, analysis of dynamic algebraic models  complements existing software packages in several ways. by translating models into the rich mathematical framework of polynomial dynamical systems over a finite number system, we can bring to bear a variety of theoretical results, computational algorithms, and available software packages from computer algebra and computational algebraic geometry on the analysis of model dynamics. for this purpose we provide implemented algorithms that import models created in with other packages, so that the user does not need to learn a new mathematical framework  <cit> . the basic computational workhorse underlying our software tool is the  solution of systems of  polynomial equations over a finite number system. this is a well-studied problem in computer algebra and sophisticated algorithms are implemented for this purpose, which we make use of. an efficient computational implementation results in the ability to analyze model dynamics for quite large discrete models without having to resort to heuristic algorithms. we offer adam as a web service, avoiding the problems associated with software downloads and different computational platforms.

RESULTS
in this manuscript, we present the web-based tool adam, analysis of dynamic algebraic models  <cit> , a tool to study the dynamics of a wide range of discrete models. adam provides efficient analysis methods based on mathematical algorithms as a web-based tool for several different input formats, and it makes analysis of complex models accessible to a larger community, as it is platform independent as a web-service and does not require understanding of the underlying mathematics. adam is the successor to dvd, discrete visualizer of dynamics  <cit> , a tool to visualize the temporal evolution of small polynomial dynamical systems.

as the underlying computational approach, we propose a novel method to identify attractors of a discrete model. this method relies on the fact that many discrete models can be translated into the algebraic framework of polynomial dynamical systems. using these polynomials, one can construct a system of polynomial equations, such that its solutions correspond to fixed points or limit cycles. thus, the problem of identifying attractors becomes equivalent to solving a system of polynomial equations over a finite field. this is a long-studied problem in computer algebra, and can usually be solved efficiently by using gröbner basis methods  <cit> . we emphasize that this method is not a new mathematical algorithm to solve polynomial equations, but a novel approach to the analysis of discrete dynamical systems that uses a novel encoding of the periodic points of such a system as the solutions of polynomial systems derived from the model when expressed in the algebraic framework. adam allows users unfamiliar with polynomial dynamical systems or gröbner bases to benefit from this efficient algorithm. we tested the method on several examples and had an average run time of less than one second, comparable to the performance of other software tools; and we were able to identify limit cycles of systems with more than  <dig> variables in less than one second.

in addition to providing access to mathematical theory for efficient analysis, algebraic models are a unifying framework and systematic approach for several model types. this allows for an effective comparison of heterogeneous models, such as a boolean network model and an agent-based model. for community integration in the biological sciences, adam contains a model repository of previously published models available in adam specific format  <cit> . this allows new users to familiarize themselves quickly with adam and to validate and experiment with existing models. in the following section, we discuss general features of adam briefly and explain new features in more detail.

general features of adam
adam is a tool for analyzing different types of discrete models. it automatically converts discrete models into polynomial dynamical systems, that is, time and state discrete dynamical systems described by polynomials over a finite field . the dynamics of the models is then analyzed by using various computational algebra techniques. even for large systems, adam computes key dynamic features, such as steady states, in a matter of seconds. adam is available online and free of charge. it is platform independent and does not require the installation of software or a computer algebra system.

adam translates the following inputs into  polynomial dynamical systems and can then analyze them.

• logical models generated with ginsim  <cit> 

• polynomial dynamical systems

• boolean networks

• probabilistic polynomial dynamical systems, probabilistic boolean networks   <cit> .

adam also translates petri nets generated with snoopy and we plan to implement analysis methods for petri nets in future versions.

adam's main application is the analysis of the dynamic features of a model, which includes the identification of stable attractors. these are either steady states, i.e., time-invariant states, or limit cycles, i.e., time-invariant sets of states. adam is capable of identifying all steady states and limit cycles of length up to a user-specified length m. the process of finding long limit cycles is quite slow for large models. however, in biological models limit cycles are likely to be short, so that m can be chosen to be small in general, i.e., less than  <dig> 

the temporal evolution of the model can be visualized by the state transition graph, the directed graph of all possible states and edges indicating their transitions, also called the state space. for small enough models, i.e., less than eleven variables, adam generates a graph of the complete state space; for larger models, adam uses algebraic algorithms to determine dynamic properties. independent of network size, adam generates a wiring diagram. the wiring diagram, also known as dependency graph, shows the static relationship between the variables. all edges in adam's wiring diagrams are functional edges, that is, there exists at least one state such that a change in the input variable causes a change in the output variable . this means that adam determines all non-functional edges, which is oftentimes of interest.

with adam, one can also study the temporal evolution of user-specified initial states. the trajectory of a state describes the state's evolution, and it can be computed by repeatedly applying the transition function until an attractor is reached.

all of these features can be computed assuming synchronous updates or sequential updates according to an update-schedule specified by the user. note that the steady states are the same independent of the update schedule. this is due to the fact that updating any variable at a steady state does not change its value. it is irrelevant for a steady state analysis whether updates are considered to happen sequentially or simultaneously.

for probabilistic networks, i.e., models in which each variable has several choices of local update rules, adam can generate a graph of all possible updates. this means that states in the phase space can have out-degree greater than one, since different transitions are possible. adam can find all true steady states, in the context of probabilistic networks, meaning all states that are time-invariant independent of the choice of update function. for further information of probabilistic networks, see  <cit> .

for boolean networks, adam calculates all functional circuits . positive functional circuits are a necessary condition for multi-stationarity. for a certain class of boolean networks, namely conjunctive/disjunctive networks, adam computes a complete description of the phase space as described in  <cit> . for further details on conjunctive networks, see appendix b. <dig> 

in summary, adam can generate the following outputs.

• wiring diagram

• phase space for small models

• steady states 

• limit cycles of specified length m

• trajectories originating from a given initial state until a stable attractor is found

• dynamics for synchronous or sequential updates

• functional circuits for boolean networks

• a complete description of the phase space for conjunctive/disjunctive networks.

applications
we show how to use adam on a well-understood model of the expression pattern of the segment polarity genes in drosophila melanogaster. albert and othmer developed a model for embryonic pattern formation in the fruit fly drosophila melanogaster  <cit> . their boolean model consists of  <dig> variables, resulting in a state space with more than  <dig> states. they analyze the model for steady states by manually solving a system of boolean equations. they also analyze the temporal evolution of a specific initial state corresponding to the wild type expression pattern by repeatedly applying the boolean update rules until a steady state is found. the update schedule of the model is synchronous with the exception of activation of smo and the binding of ptc to hh , which are assumed to happen instantaneously. this can be accounted for by substituting the equations for smo and ph into the update rules for other genes and proteins, rather than using smo and ph themselves.

to analyze the model, we first rename the variables in the boolean rules given in  <cit>  such as wgi or slpi to x <dig> ... x <dig>  to standardize their format. the variables xi and their corresponding genes are listed in table  <dig>  then we use adam: the model type is polynomial dynamical systems, the number of states in a boolean model is  <dig>  representing 'present' or 'absent'. one can choose boolean, and enter the boolean rules in the text-area or upload a text file with the boolean rules. alternatively, one can first convert the boolean rules to polynomials over , and enter the polynomials with the choice polynomial. the file with the polynomial equations for the model can be accessed at  <cit> .

genes and proteins in  <cit>  and their corresponding variable names x <dig> ..., x <dig> 

the rules in the model file are specified in polynomial form. once the polynomials are uploaded, we need to set the analysis type. the model with  <dig> variables is too complex for exhaustive enumeration, and we choose algorithm. this means that instead of exhaustive enumeration of the state space, analysis of the dynamics is done via computer algebra by solving systems of equations. in options, we set limit cycle length to  <dig> because we are interested in the steady states, i.e., time-invariant states. we chose synchronous as updating scheme. once these choices have been made, we obtain the steady states by clicking analyze. adam returns a link to the wiring diagram , which captures the static relations between the different variables. in addition, adam returns the number of steady states and the steady states themselves: see figure  <dig>  these steady states are identical to those found in  <cit> , half of which have been observed experimentally.

each row in the table in figure  <dig> corresponds to a stable attractor. attractors are written as binary strings, where  <dig> represents non-expression of a gene , and  <dig> expression ; e.g., the binary string   

corresponds to the genes  being expressed  in four cells from anterior to posterior compartments . the string can be translated back to a list of genes that are expressed in this stable attractor; see table  <dig>  this is the steady state obtained in  <cit>  when starting the system with an initial state representing the experimental observations of stage  <dig> embryos. adam can also generate trajectories for a given initial state. for example, we can choose the initial state that was used in  <cit>  representing stage  <dig> embryos. again, we enter polynomial dynamical systems with  <dig> as the number of states and upload the polynomials describing the model. instead of algorithms, we now choose simulation. since we are not interested in the number of steady states or the complete phase space, but in a single trajectory originating from a specific initial state, we choose one trajectory starting at an initial state as the simulation option. we enter the state corresponding to the initial state shown in table  <dig> as a binary string:   

genes and proteins present in steady state corresponding to binary string .

genes and proteins present in initial state corresponding to binary string .

by clicking analyze, we obtain the temporal evolution of this particular state until it reaches a steady state; see figure  <dig>  as predicted in  <cit> , the steady state is the state corresponding to the state shown in table  <dig>  to summarize, adam correctly identified the steady states in less than one second. all steady states have been determined previously in  <cit>  by labor-intensive manual investigation of the system.

furthermore, we used adam to verify that there are no limit cycles of length two or three. the model has not been analyzed previously for limit cycles. the absence of two- and three-cycles strengthens confidence in the model, since oscillatory behavior has not been observed experimentally. computations for limit cycles of length greater than three have not been conducted, as composing the system several times with itself is computationally complex. the model file in adam format can be accessed at  <cit> .

benchmark calculations
we analyzed logical models available in the ginsim model repository  <cit>  as of august  <dig>  the repository consists of models in ginsim xml format previously published in peer-reviewed journals. we converted all but two models into polynomial dynamics systems. for these  <dig> models we computed the steady states. all calculations finished in less than  <dig>  seconds; see figure  <dig> 

in addition to the published models in  <cit> , we analyzed randomly generated networks that have the same structure that we expect from biological systems, namely sparse, i.e., while the number of nodes in a biological network may be quite large, each node is affected only by a small number of other nodes, and robust, i.e., small number of attractors. we tested a total of  <dig> networks with 50- <dig> nodes  and an average of average in-degrees of  <dig> . the steady state calculations took less than half a second for each network on a  <dig>  ghz computer.

comparison to other systems
in this section, we describe the functionality of several state-of-the-art software tools for the analysis of discrete models of biological systems. they are all capable of identifying steady states and limit cycles by exhaustive enumeration of the state space for small models   <cit> . for larger models, ginsim is capable of analyzing models for steady states, and several tools provide heuristic analysis methods. none of them identifies limit cycles deterministically for models with more than  <dig> variables. it is important to stress that adam provides a web-interface and does not require local installation as all the other tools do, which makes them less accessible to users. table  <dig> summarizes the features of the different software tools, which we will now explain in detail.

comparison of different software tools regarding attractor analysis: ‡ less than  <dig> second on published gene regulatory networks with up to  <dig> variables; ◊ only for short limit cycles; † heuristic methods are available for larger networks; ○ installation necessary, available for common operating systems.

ginsim  is a package designed for the analysis of gene regulatory networks  <cit> . as input, it accepts logical models. logical models are an extension of boolean models; they consist of similar switch-like rules, but allow for a finer data discretization with more than two states per variable, e.g., low, medium, and high. logical models can be updated synchronously or asynchronously. for the latter, the temporal evolution of a logical model is non-deterministic because the variables are updated randomly in an asynchronous fashion. in either case, updates of every variable are continuous, meaning that no variable changes its value by more than one unit in one time-step, see section remarks about logical models for a detailed discussion.

ginsim provides algorithms that use binary decision diagrams  for the determination of steady states  <cit> . analysis of limit cycles is executed by simulating every trajectory, i.e., generating the complete state space, called state transition graph in ginsim, and therefore limited by network size. we tested ginsim on logical models with up to  <dig> variables; determining the steady states took less than one second. more complex logical networks were not available to us.

boolnet r package provides methods for inference and analysis of synchronous, asynchronous, and probabilistic boolean networks  <cit> . it is a package for the free statistics software r, and it is run via the r command-line. it is helpful, if the user is already familiar with r. steady state analysis is implemented as exhaustive search of the state space, heuristic search, random walk, or markov chain analysis  <cit> .

non-heuristic analysis is limited to networks with  <dig> variables. for larger networks, steady states can be inferred heuristically, which does not guarantee that all steady states are identified.

ddlab is an interactive graphics software for discrete models, including cellular automata, boolean and multi-valued networks  <cit> . as it is mainly a visualization tool, analysis is based on exhaustive enumeration of the state space, and model size is limited to  <dig> variables.

bn/pbn toolbox is a toolbox written in matlab  <cit> . it uses the state transition matrix to compute attractors. statistics for networks with more than  <dig> variables cannot be computed . in addition to analyzing deterministic boolean networks, the toolbox can analyze probabilistic boolean networks and calculate statistics such as numbers and sizes of attractors, basins, transient lengths, derrida curves, percolation on 2-d lattices, and influence matrices.

remarks about logical models
in this manuscript, we distinguish between three different update types: synchronous, sequential according to an update schedule, and asynchronous. adam allows for synchronous or sequential updates according to a given update schedule. in models with synchronous updates, all variables are updated simultaneously at every time step. in models with sequential updates according to an update schedule, all variables are updated at every time-step in the order given by the schedule. both these model types are deterministic.

in models with asynchronous updates, as is common for logical models, one variable is updated at random at every time step, which results in a non-deterministic model. models with sequential updates according to an update schedule produce dynamics that are different from that of models with asynchronous updates, i.e., logical models.

in ginsim, all models are continuous in the sense that at each time-step, each variable increases or decreases by at most one unit. though logical models are discrete, there are no jumps skipping intermediate states. for example, in a model with three states, low, medium, and high, no variable can drop from high to low in a single update step. this interpretation is different from the common meaning of continuous, which usually refers to models of ordinary or partial differential equations. the parameters entered in ginsim specify the target value towards which the variable changes, i.e., the value increases by one, decreases by one, or remains constant if the target value is larger, smaller, or equal than the initial value, respectively. the state transition graph generated with adam might differ from the state transition graph generated in ginsim. to obtain the exact same state transition graph, every variable in the logical model must contain an explicit self-loop, and all parameters must be entered such that the target value differs by at most one from the value of the variable to be updated. any logical model can be specified in this way without changing its state transition graph. boolean models are always continuous.

in multi-valued logical models, variables can have different maximum values. in an algebraic model, all variables are defined over the same algebraic field, i.e., have the same maximum value. when a multi-valued logical model is translated into an algebraic model, extraneous states might be introduced such that all variables are defined over the same field. an example of such an extension is given in table  <dig>  the extra states are the states in the last row, which are given the same values as the states above to extend the model in a meaningful way. the extra states should be ignored when analyzing the dynamics. for more details, see  <cit> .

updates for variable x <dig> in a logical model, where x <dig> depends on x <dig> and itself. the states  <dig> and  <dig> represent absent and present for the boolean variable x1;  <dig>   <dig>  and  <dig> represent low, medium, and high for the multi-valued variable x <dig>  the last row is introduced in the polynomial dynamical system such that all variables are defined over . the extra states , ,  in the state space should be ignored when interpreting the dynamics.

architecture
adam is available as a web-based tool that does not require any software installation. adam's user interface is implemented in html. we use javascript to generate a dynamic website that adapts as the user makes various choices. this simplifies the process of entering a model. for example, after defining the model type, i.e., polynomial dynamical system, probabilistic network, petri net, and logical model the next line changes to the number of states, k-bound, or nothing, appropriately. input can be entered directly into the text area, or uploaded as a text document.

all mathematical algorithms are programmed in macaulay <dig>  <cit> . macaulay <dig> is a powerful computer algebra system. the routines for which fast execution is crucial are implemented in c/c++ as part of the macaulay <dig> core. logical models and petri nets in xml format are parsed using ruby's xmlsimple library. the interplay between html and macaulay <dig> is also programmed in ruby.

output graphs are generated with graphviz's dot command. when simulation is chosen as analysis method, graphviz's ccomps - connected components filter for graphs is used to count the connected components. a perl script directs the execution of the graphviz commands.

model repository
a model repository is part of the adam website  <cit> . the repository consists of a collection of several previously published models in adam format. the models are extracted from publications, and rewritten in adam specific format, i.e., all variables are renamed to xi and the update rules from the original publication are reformulated as boolean rules or polynomials. the central repository with models in a unified format allows for quick verification and experimentation with published models. by changing parameters or initial states, users can gain a better understanding of the models.

new users can also use the repository to quickly familiarize themselves with the main functionalities of adam. in addition to the model itself, the database entries contain a short summary of the biological system and relevant graphs, together with an analysis of dynamic features determined by adam and their biological explanation. the repository is work in progress by researchers from several institutions generating more entries for the repository. we invite all interested researchers to submit their models. because of their intuitive nature, discrete models are an excellent introduction to mathematical modeling for students of the life sciences. adam's model repository is a great starting point to familiarize students with the abstraction of discrete models such as boolean networks.

CONCLUSIONS
discrete modeling techniques are a useful tool for analyzing complex biological systems and there is a need in the biological community for easy to use analysis software. adam provides efficient methods as a web-based tool and will allow a larger community to use complex modeling techniques, as it is platform independent and does not require the user to understand the underlying mathematics. upon translating discrete models, such as logical networks, petri nets, or agent-based models into algebraic models, rich mathematical theory becomes available for model analysis, e.g., for steady state and limit cycle analysis.

after extensive experimentation with both discrete models arising in systems biology and randomly generated networks, we found that the algebraic algorithms presented in this manuscript are fast for sparse systems with few attractors, a structure maintained by most biological systems. all algorithms have been included in the software package adam  <cit> , which is user-friendly and available as a free web-based tool. adam is highly suitable to be used in a classroom as a first introduction to discrete models because students can use it without going through an installation process.

adam provides methods to analyze the key dynamic features, such as steady states and limit cycles, for large-scale  boolean networks and logical models. adam unifies different modeling types by providing analysis methods for all of them and thus can be used by a larger community.

we hope to expand adam to a more comprehensive discrete toolkit which incorporates new analysis methods, better visualization, and automatic conversion for more model types. we also hope to analyze controlled algebraic models and expand theory to stochastic systems.

