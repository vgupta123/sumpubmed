BACKGROUND
clustering genes according to their expression profiles is an important step in interpreting data from microarray studies. clustering can help summarise datasets, reducing tens of thousands of genes to a much smaller number of clusters. it can aid understanding of systemic effects; looking for a small change in expression between disease states across many genes in a cluster could be a better strategy for finding the causes of complex, polygenic disorders than looking for large changes in single genes <cit> . clustering can also help predict gene function, as coexpressed genes are more likely to have similar functions than non-coexpressed genes <cit> .

there are many clustering methods for microarray expression data currently available <cit> . however, there are few comparisons of these methods, making it hard for researchers to make a rational choice between them. the majority of papers comparing multiple clustering methods use simulated data or data from simple organisms such as bacteria and yeast  <cit> , which may limit the applicability of their findings to data from more complex sources such as human tissues which express more genes. thus, to investigate human disease, it would be useful to test the methods upon expression data derived from complex human tissues, among which brain tissue is particularly complex since it expresses a higher proportion of the genome transcribed than other tissues <cit> . thalamuthu et al  <cit>  have previously looked at a wide range of datasets, including some human expression datasets. however, since they restricted their analysis to functionally defined subsets of genes, that analysis did not fully reflect the complexity of human expression, particularly for disorders where there is insufficient knowledge of their aetiology to focus on specific subsets of genes.

we have examined four methods, k-means clustering <cit> , chinese restaurant clustering  <cit> , the iterative signature algorithm  <cit>  and a new, progressive variant of isa called memisa. memisa was loosely based upon another method called pisa, for which there was no suitable implementation <cit> . these were chosen after a literature survey of the available methods . all four are unsupervised methods that derive the clusters from the input data, rather than supervised methods which classify genes into user-specified clusters.

many of the available comparative clustering studies focus exclusively on older methods  <cit> , or restrict their analysis to a single class of clustering methods  <cit> . in our study, the methods were chosen on the basis of variety. isa and memisa are examples of biclustering methods, crc is a mixture model based method, while k-means clustering is a simple, well-understood algorithm. they were reported as performing well by their authors and/or other studies  <cit> .

the methods were also chosen partly on the basis of novelty. apart from k-means clustering, they are too recent to have been included in many previous surveys of clustering methods, and so are particularly in need of testing.

we compared the performance of these three methods by examining the results for biologically meaningful clustering by looking for gene ontology  enrichments within the resulting clusters. we also generated and compared a modified variation of isa, memisa, which weighted against genes that were already members of a cluster to prevent bias of clusters detected from the strongest genes within them.

methods
datasets
three datasets were used for testing, the dobrin  <cit> , mclean  <dig>  <cit>   and perrone-bizzozero   <cit>  datasets . they were downloaded in cel format from the stanley medical research online genomics database <cit> , the harvard national brain databank database <cit>  and geo <cit> , respectively. they were then processed using r <cit> , with custom cdf files to map the probes to genes <cit> . box plots were used to examine the quality of the data, and several outlier samples were removed. three versions of each dataset were produced. one was normalised by the rma median polish method, for use in crc and k-means <cit> . the other two were normalised to produce a gene-normalised and sample-normalised dataset for running isa <cit> .

quality control consisted of box plotting the samples and removing outliers.

gene coverage
gene coverage, the percentage of genes on the chip that are put into at least one cluster, was assessed for the cluster set produced by each method.

speed
the methods were also assessed by speed. as isa and memisa are dependent on parallelisation to run at a reasonable speed, this is taken as real-world time taken to run, rather than computer run-time used. for k-means and penalised k-means, this includes the time taken to estimate k.

go enrichment
go enrichment is a method that assesses the percentage of clusters that are significantly enriched  with genes from one or more gene ontology categories  at different significance levels, using fisher's exact test and the benjamini false discovery rate multiple testing correction <cit> . clusters were tested for enrichment  for all go biological process terms  <dig> or more levels deep into the hierarchical tree of go terms, at several different levels of significance. at least  <dig> genes from the input cluster had to match a go category for the cluster to be counted as enriched for that category, to ensure that chance appearance of  <dig> or  <dig> genes from a go category with few members could not affect the results. the percentage of clusters matching this criterion gives a measure of the biological, functional relevance of the clusters.

go enrichment was determined with the web-based service, gostat <cit> . this accepts multiple kinds of gene name or id as input, allowing approximately 85% of genes within the input clusters to be included. this was automated using www-mechanize, a perl module <cit> .

to compare the results of go enrichments for the various clustering algorithms, we also examined several random cluster sets using go enrichment. four sets of clusters with the same distribution of cluster sizes as those made by k-means , crc, isa and memisa  were produced. the cluster sets made from the dobrin, mc <dig> and pb datasets were combined when determining the distribution of sizes. the new cluster sets had genes chosen at random from all those available on the affymetrix 133p chip.

k-means
k-means clustering is a standard clustering method that has been in use for several decades  <cit> . it requires that the user specify the number of clusters to sort the genes into . k-means clustering is a single cluster membership method – each gene can belong to only one cluster and it also assigns every gene to a cluster. essentially, it distributes k centroids  throughout the data. data points are then assigned to their nearest cluster, and the centroids are moved to minimise the distance between them and their assigned data points. this is repeated until the centroids stop moving. a number of distance measures can be used to define distance between data point and centroid, with euclidean distance being one of the most commonly used and simplest. the procedure is summarised in fig.  <dig> 

there are numerous variants of k-means clustering  <cit> . here, two are tried – standard k-means clustering, as above, and penalised k-means clustering. penalised k-means clustering uses a threshold parameter  to allow some of the genes to be treated as noise, and not clustered.

initially, an estimate for the value of k was found for all three datasets using the cascadekm function in r. values of k between  <dig> and  <dig> were assessed, with  <dig> iterations per value, and the k values that minimised the calinski criterion were chosen  <cit> . the recommended values of k were  <dig> for dobrin,  <dig> for mc <dig> and  <dig> for pb cerebellum. k-means and penalised k-means were then performed on all four datasets at  <dig> iterations and these values of k. the recommended value of  <dig>  was used for λ in penalised k-means.

these small values of k will only partition the data into several large clusters, which may be too general a grouping to provide biologically relevant inferences. to examine the performance of k-means when producing smaller, more specific clusters, and also for a more direct comparison to crc, k-means and penalised k-means clustering were also performed with values of k equal to the numbers of clusters produced by crc on that dataset .

k-means was performed using cluster  <dig>   <cit> . penalised k-means clustering was performed using pwkmeans  <cit> . both were performed on a windows desktop pc with  <dig> gb ram, using a  <dig>  ghz processor.

crc
crc <cit>  is a model-based clustering method. the name arises from a metaphor where genes are regarded as customers in a chinese restaurant with unlimited tables of unlimited size, each representing a cluster, and their food orders represent the expression profile of each gene. the customers are then seated at tables according to the similarities of their food orders. crc has several advantages over other methods. it can handle missing data and cluster genes based on negative correlation and time-shifted correlation. like k-means it is a single cluster membership method. its methodology is complex, and is based upon treating the expression profiles of the genes as the sum of multiple normal distributions.

the procedure is outlined in fig.  <dig>  each iteration of the flowchart in fig.  <dig> can be considered a markov chain process. crc runs a number of these chains in parallel , and reports the highest likelihood cluster set as the final output. the chains are also limited to a certain number of iterations through the flowchart before reporting their clusters. this is another parameter decided by the user, and is recommended to be set at  <dig>  finally, a probability cut-off can be input, which determines how high the likelihood of a gene being a member of a cluster needs to be in order for it to be included in the final output. in practice, most genes are members of their cluster with probability  <dig>  so this removes few genes.

crc was performed on all three datasets. it was performed at two parameter sets for each dataset –  <dig> chains/ <dig> cycles per chain/probability cut-off of  <dig> , and  <dig> chains/ <dig> cycles per chain/probability cut-off of  <dig> .

crc was performed using a standalone program  <cit> . it was performed on a unix server running redhat os with  <dig> gb ram, using one  <dig>  ghz processor.

isa
isa is a biclustering method – it clusters both rows and columns of the dataset, here the genes and the specific samples they come from  <cit> . this allows isa to focus on subsets of samples with good signal for the genes of the cluster, reducing the amount of noise . unlike k-means and crc, it is not a single-cluster membership method: it allows genes and samples to belong to multiple clusters, and does not have to put every gene into a cluster. a high proportion of its clusters were found to be significantly enriched for one or more go terms in yeast data <cit> .

isa produces tens of thousands of clusters. in postprocessing, to reduce this set to a manageable size, duplicate clusters are removed, similar clusters are merged, and clusters can be reiterated through isa. the nature of postprocessing affects the final clusters.

isa also assigns 'scores' to genes and samples it has clustered, as part of its method. a gene or sample with a high score will have more influence on the samples or genes selected at the next stage of the process. the final values of these scores are reported in isa's output. a high score here indicates that the gene or sample has had greater influence over the clusters' contents than a gene or sample with a low score.

isa was used on the dobrin datasets with  <dig> different postprocessing regimes . the regime that produced the highest go enrichments included filtering the clusters by size and number of occurrences, and using less stringent similarity criteria when combing similar clusters.

to compare with memisa, crc and k-means, runs were performed on all three datasets, at  <dig> iterations. these runs used tg values of  <dig>  to  <dig>  . different tc values were used for different datasets, as each contained different numbers of samples – dobrin was run at tc  <dig> ,  <dig>  and  <dig> , mc <dig> at  <dig>  and  <dig> , and pb cerebellum at  <dig> ,  <dig>  and  <dig> . filtering was used – a cluster had to have appeared  <dig> times, and contain at least  <dig> genes, to be included in the final output. clusters that shared 70% or more of their genes with a larger cluster were removed from the final results .

isa was written in perl , based upon the previous matlab implementation <cit> . this implementation has all of the properties of the matlab version. the postprocessing scripts were written in perl. the normalisation script was written in r <cit> . isa was parallelised using cardiff university's condor network, which distributes individual isa runs to unused windows desktop computers across campus <cit> .

memisa
the underlying method of memisa is closely based on isa and similar to pisa <cit>  . it biases against both genes and samples that have already been put into a cluster, according to two user input parameters, f and n. the bias is calculated relative to the highest scoring gene and sample in a cluster – this has its gene/sample score multiplied by the factor  in future iterations. all other genes/samples found in a cluster have their future scores reduced by a smaller amount. this is determined by the proportion of their score and the highest gene/sample score – a gene with a quarter of the score of the highest gene will have its future scores multiplied by  <dig> - . the intent of this is to bias against the highest scoring genes of a cluster while allowing lower scoring genes to be relatively unaffected and still be included in subsequent clusters . if a gene/sample is included in a subsequent cluster, the biases are multiplied together – a gene which is the strongest gene in two successive clusters would have its score multiplied by  <dig> in following iterations.

these biases are only remembered for a certain number of iterations . every n iterations, the slate is wiped clean. this is to ensure that memisa does not begin returning noise once it has found all the available clusters in the data, and to limit the effect that an early misclustering can have on the results.

memisa was run on the dobrin dataset at  <dig> iterations with a number of different values for f and n . it was found the results were generally robust to the values of f and n, and that f =  <dig>  and n =  <dig> produced clusters with the highest go enrichment, so these values were used in all further analysis. a filtering step was also attempted on one dataset to see if it would improve go enrichment. for this, those genes whose gene scores were in the bottom 10% for their cluster were removed from the cluster. this step reduced both gene coverage and go enrichment and so was not used further.

% enriched at
memisa was run on the dobrin, mc <dig> and pb cerebellum datasets at tg  <dig>  to  <dig>   and tc  <dig> ,  <dig>  and  <dig> . filtering was carried out as with isa, using an occurrence threshold of  <dig> and a size threshold of  <dig> 

memisa was implemented in perl, and was based upon the new perl implementation of isa. like isa, it was parallelised using condor.

assessing overlap between clusters
we examined inter-method overlap in gene membership of clusters for the four methods and intra-method overlap of isa and memisa. crc and k-means, as single-cluster membership methods, had no intra-method overlap between their clusters. isa and memisa cluster sets, however, both contained a large amount of intra-method overlap, making them impossible to compare fairly with clusters produced by k-means or crc. to try to facilitate fair comparison, clusters with gene overlap above a certain level  were merged but since this resulted in datasets with fewer than  <dig> clusters, this approach was abandoned. as an alternative, where over 70% of the genes in the smaller of a pair of clusters was shared with a larger cluster, the smaller cluster was removed. this process was performed on a subset of isa and memisa output – those raw clusters produced at tg =  <dig>  or greater were used, and the rest discarded. this was in order to prevent a few very large clusters causing the removal of nearly all smaller clusters. this overlap removal step was applied after all other postprocessing.

combining methods
as there was not a large amount of overlap in clusters obtained between the isa methods and either crc or k-means, the possibility of combining their cluster sets to improve go enrichment was investigated. the cluster sets were simply combined and clusters that had over 70% gene overlap with a larger cluster were removed as above. one set contained k-means, memisa and isa clusters, one set contained crc, memisa and isa clusters. the memisa and isa clusters had already had overlaps removed before combining. the crc set used was the  <dig> chains/ <dig> cycles per chain/ <dig>  cut-off. the k-means sets used were the k =  <dig> and k =  <dig> sets.

enrichment of clusters for schizophrenia related genes
the clusters produced from the combined k-means/isa/memisa method on the dobrin dataset were tested for enrichment with  <dig> genes associated with schizophrenia below a nominal threshold of p <  <dig>  according to a recent genome-wide association study  <cit> using the program ease  <cit> , which implements a version of fisher's exact test. enriched clusters were also tested for enrichment for  <dig> genes differentially expressed between schizophrenics and controls in the analysis of the stanley medical research institute online genomics database <cit>  at an uncorrected p-value of  <dig>  or lower.

clusters from combined k-means/isa/memisa in the independent mc <dig> dataset that shared over 45% of their genes with any enriched cluster from the dobrin dataset were then identified. their enrichment for schizophrenia-associated genes and genes differentially expressed in schizophrenia was then determined with ease. a permutation-based method of enrichment determination was also used. this allows the enrichment p-value for the mc <dig> clusters to be determined independently of the dobrin cluster.  <dig> pairs of clusters were constructed at random from the genes present on the affymetrix 133a chip.

the random clusters were constructed in pairs, as follows. firstly, the number of genes shared between the three clusters was calculated . these figures were then used to create randomised mc <dig> clusters with the same level of overlap with the dobrin cluster and each other.

 <dig> genes from the dobrin 3093-gene cluster were selected at random, and placed in both the 2546-gene and 436-gene mc <dig> randomised clusters. from the remaining dobrin cluster genes,  <dig> and  <dig> genes were selected at random, the former placed in the 2546-gene randomised cluster, the latter placed in the 436-gene randomised cluster. then,  <dig> genes from the genes on the chip not present in the dobrin 3093-gene cluster were selected at random, and placed in both the 2546-gene and 436-gene randomised clusters. from the remaining genes on the chip not present in the dobrin 3093-gene cluster,  <dig> and  <dig> genes were selected at random, the former placed in the 2546-gene randomised cluster, the latter in the 436-gene randomised cluster. this was repeated  <dig> times to produce a population of  <dig> random clusters. these clusters were then processed with ease in the same way as the original cluster, allowing the original results to be compared to them.

these clusters were also examined for enrichment in kegg and biocarta pathways, using the composite regulatory signature database  <cit>  (), and for enrichment in go biological process categories using gostat.

ease was also used to test these clusters for enrichment with genes found to be ten-fold or more upregulated in specific cell types within brain tissue according to cahoy et al  <cit> -specifically, neurons, oligodendrocytes and astrocytes.

RESULTS
all four methods performed better than the random cluster sets when examined using go enrichment to represent known biological relationships . this implies that all the clustering methods result in groupings of biological significance. of the three random cluster sets, those with the same size distribution as isa had slightly lower go enrichment than those with the same size distribution as memisa or crc. this may suggest that go enrichment has a small bias against isa due to the sizes of clusters it produces. however, at p <  <dig>  the difference dropped to under 1% go enrichment, suggesting that any such bias is extremely slight and may well be due to chance.

k-means and penalised k-means
k-means and penalised k-means produced clusters with high go enrichments, especially at the lower k values recommended by cascadekm. in these low-k cluster sets, k-means obtained higher go enrichments than penalised k-means. in the k =  <dig> and k =  <dig> cluster sets, they produced cluster sets with similar go enrichment . as k-means gave similar go enrichment to penalised k-means and by definition clustered more genes it was used in comparisons with the other methods.

effect of crc parameters on go enrichment
the different parameter sets used for crc made little difference to the go enrichments of its clusters. . increasing the numbers of iterations or cycles or increasing the probability cut off had little effect which suggests that altering these parameters is unnecessary, and that the default values of  <dig> cycles and  <dig> iterations per cycle should be used for most datasets, with parameters only being increased on very large datasets. one problem noted with crc was that analysing more than  <dig> samples caused the program to crash. this occurred on both windows and linux versions of the program, so was presumed to be an inherent problem with the program.

effect of isa parameters on go enrichment
in contrast to crc, changing the parameters of isa can have unpredictable effects on the go enrichment of its clusters, particularly after overlaps have been removed . the different values of tc used in memisa and isa for the pb cerebellum and mc <dig> datasets may help explain some unexpected results – in particular, the very large number of clusters produced by memisa prior to removing the overlaps in pb cerebellum, and the unexpectedly poor performance of memisa on the mc <dig> dataset. however, these may also be due to chance differences in the selection of random starting clusters, or to inherent qualities of the methods.

effect of memisa parameters on go enrichment
memisa is robust to the choice of f and n, as all of the combinations tried produced reasonable go enrichments . f =  <dig>  and n =  <dig> were chosen because they produced clusters with slightly better go enrichments than other parameter sets.

comparison of clusters detected
there was a large amount of overlap between the clusters produced using penalised k-means and k-means at k =  <dig>  with the majority of clusters  having over 70% overlap with a cluster from the other method, and all others having over 40% overlap . since these methods found similar clusters, further analysis was focused on standard k-means clustering, as it had 100% gene coverage.

values in table indicate the percentage of clusters produced by the method in the left margin that have over 70% gene overlap with one or more clusters produced by the method in the top margin.

there was considerable overlap in the results obtained between k-means and crc across all three datasets. this suggests that k-means and crc find similar patterns within the datasets. conversely, there was little overlap between either k-means or crc and either memisa or isa clusters. in the case of isa, there were a few overlaps at 70% or above for each dataset. in the case of memisa, there was a large cluster that overlapped with several of the smaller clusters produced by crc at 70% or more, plus one other 70% plus overlap between more similarly sized clusters, in all three datasets.

removing clusters with over 70% intra-method gene overlap from the isa and memisa cluster sets reduced the number of clusters considerably. these sets contained only 4– <dig> clusters and were much smaller than the original ones. however, their go enrichments were generally considerably higher  but at the cost of a considerable drop in gene coverage.

nearly all isa clusters had over 70% overlap with a memisa cluster across all three datasets. however, less than half of the memisa clusters had over 70% overlap with a cluster from isa, as many of the isa clusters overlap with the same memisa cluster. this level of overlap is surprisingly high, considering that their post-processing regimes already include a step to merge similar clusters. however, this step requires high sample overlap and correlation of shared gene/sample scores in addition to simple gene overlap. it also uses the size of the larger cluster to calculate overlap – i.e. 50% overlap in this step indicates that 50% of the genes in the larger cluster are found in the smaller cluster. as a result, it tends to only combine clusters of a similar size. the ability of memisa to bias against already-found clusters may help it find clusters that would previously have been hidden by a stronger cluster, a useful feature when looking for novel clusters.

the tendency of the cluster merging step in isa and memisa to only combine clusters of a similar size may help to explain the improvement in go enrichment the removal of overlapping clusters produces. requiring a similar size and similar samples and gene/sample scores may help to ensure that only those clusters which come from the same signal are actually merged, excluding noise clusters with a coincidentally high gene overlap. the overlap removal process would then remove these clusters from the dataset altogether, improving go enrichment.

the reasons for the poorer performance of memisa on the mc <dig> dataset are not known. it is possible that the difference in the tc and tg parameters between memisa and isa for this dataset was critical. the smaller number of genes in this dataset might also be important, and so reducing the values of tg used may help. alternatively, it might be that chance played a role. memisa may be inherently more prone to chance variation than isa or crc.

combining methods
the cluster sets produced by combining the methods had similar gene coverage to those produced by crc/k-means alone . they generally had a higher number of clusters. for the crc/isa/memisa combined set, the go enrichment of these clusters was higher in the dobrin and pb cerebellum datasets,. in the k-means/isa/memisa combined sets, the gains in go enrichment relative to k-means alone were generally smaller: under 5% at most levels of p. there were a few small losses in go enrichment in some datasets and at some levels of p, but generally the impact on go enrichment was still positive.

gene coverage
before highly overlapping clusters were removed from the clusters produced by isa, k-means had the highest gene coverage , followed by crc, and then by memisa and lastly isa. however, these cluster sets are not directly comparable on number of clusters or on go enrichment, as the cluster sets produced by isa and memisa contain a large amount of redundancy.

as memisa and isa had much lower gene coverage than k-means or crc, the relationship between mean gene expression levels and cluster membership was examined for these methods in the dobrin dataset. for both isa and memisa, no significant correlation was found .

cluster size
the number of genes per cluster for each method and dataset was also examined, and the mean cluster size and standard deviation computed . generally, crc, k-means and penalised k-means were consistent in their cluster sizes, which appear to vary only with the number of genes in the dataset. the average cluster size was between  <dig> and  <dig> for these three methods in both 133p datasets , and between  <dig> and  <dig> in the mc <dig> dataset. isa generally produces clusters that are smaller than this, between  <dig> and  <dig> on average . memisa, conversely, is particularly prone to producing datasets with one or two particularly large clusters, giving it a higher average cluster size and standard deviation. this is because the larger number of unique clusters it produces makes it more likely for clusters to overlap and be merged, leading to these extremely large clusters.

to examine whether cluster size affected enrichment, cluster size was checked for correlation with log <dig> of the p-values of the best go hit for each cluster . no significant correlation was found for any of the methods.

speed
the three datasets were used to evaluate approximate runtimes for the four methods . crc and k-means are very fast methods, with a runtime of a few hours on current computer technology. isa and memisa, meanwhile, are much slower, taking up to a month without parallelisation. even with parallelisation using condor, isa and memisa can take over  <dig> hours for a full parameter set when post-processing is included. restricting the parameters to tg  <dig>  and above, as in the non-overlapping cluster set before, reduces these times by up to half.

table showing the real-world time taken for the methods to run on each dataset.

enrichment of clusters for schizophrenia related genes
the clusters produced from the combined k-means/isa/memisa method on the dobrin dataset were tested for enrichment with  <dig> genes associated with schizophrenia according to a recent genome-wide association study <cit> , using the program ease  <cit> . these  <dig> genes each contained at least one snp associated with schizophrenia at an armitage p-value of  <dig>  or under. one cluster, containing  <dig> genes and originally found by memisa, was enriched .

this cluster was also tested for enrichment with  <dig> genes found to be differentially expressed between schizophrenics and controls in the analysis of the stanley medical research institute online genomics database <cit>  at an uncorrected p-value of  <dig>  or lower. the cluster was slightly enriched, at a p-value of  <dig> .

clusters from combined k-means/isa/memisa in the independent mc <dig> dataset that shared over 45% of their genes with this enriched cluster were then identified. two clusters were found , both of which were nominally enriched for both schizophrenia-associated genes  and genes differentially expressed in schizophrenia . however, since these clusters have some overlap with the 3093-gene dobrin cluster, this cannot be considered independent replication of the original cluster.

to avoid this confounding effect, their enrichment for schizophrenia-associated genes and genes differentially expressed in schizophrenia was determined using a permutation-based method. the 436-gene cluster remained significantly enriched for the schizophrenia associated genes, while the 2546-gene cluster showed some enrichment, but this was insufficient to be significant . however, both clusters were significantly enriched for genes differentially expressed in schizophrenia .

these clusters were also examined for enrichment in kegg and biocarta pathways, using the composite regulatory signature database  <cit>   (). the top hit for the dobrin cluster and the 2546-gene mc <dig> cluster was the kegg entry for the mapk signalling pathway . the only significant hit for the mc <dig> 436-gene cluster was from the biocarta synaptic junction pathway .

the mc <dig> 436-gene cluster was also examined using gostat, where the best hit was for go: <dig>  go category .

the three clusters were also tested for enrichment with genes found to be ten-fold or more upregulated in specific cell types within brain tissue according to cahoy et al  <cit> -specifically, neurons, oligodendrocytes and astrocytes. all three clusters were found to be highly significantly enriched with genes upregulated in neurons . there was also enrichment for genes upregulated in oligodendrocytes  and astrocytes .

three overlapping clusters, enriched to varying degrees for either schizophrenia-associated genes or genes differentially expressed in schizophrenia, were found from the two independent dorsolateral prefrontal cortex datasets. the apparent excess of schizophrenia-associated genes in the 2546-gene mc <dig> cluster could be explained by its overlap with the dobrin cluster. thus, this cluster does not constitute independent evidence for schizophrenia-associated genes clustering together with respect to their expression levels. however, the 436-gene mc <dig> cluster remained significantly enriched when assessed by the permutation method. both mc <dig> clusters did show significant over-representation for genes differentially expressed in schizophrenia, even after correction for the overlap with the dobrin cluster. this demonstrates the ability of the methods to find potentially disease-related gene clusters that are replicable in multiple datasets.

the large size of two of the clusters makes inferences about individual genes difficult. however, both the larger clusters are enriched for genes present in the kegg map kinase pathway, suggesting that this pathway may relate to the aetiology of schizophrenia. members of this pathway have also been found to be differentially expressed between controls and schizophrenics in other brain regions  <cit> . in addition, when structural variants such as microdeletions occur in the genomes of schizophrenics, they are particularly likely to occur in the genes of the map kinase pathway  <cit> .

the smaller cluster was also found to be near-significantly enriched for serine/threonine kinase genes , and also for synaptic junction and neurological development genes. as this cluster is enriched for both schizophrenia associated genes and genes differentially expressed in schizophrenia, further investigation of the role of these pathways in schizophrenia aetiology may be useful.

however, the map kinase-related genes present in the two large clusters do not overlap with the schizophrenia associated gene set or the differentially expressed in schizophrenia gene set . this might suggest the map kinase function of the clusters may be incidental to their roles in schizophrenia aetiology. further investigation with other functional analysis tools may allow more biological inferences from these clusters.

comparisons with other clustering method surveys
our findings broadly agree with several other surveys of clustering methods . like prelić et al, we find that isa is an effective method that produces clusters with high go enrichment  <cit> , but our cluster sets generally do not have as high a proportion of go enriched clusters as theirs. this is likely to be a consequence of the greater complexity of the input data.

garge et al found k-means clustering effective  <cit>  on a wide range of input datasets. this is echoed by the k-means cluster sets reported here, which have high go enrichment and gene coverage scores. these scores were generally higher than crc, the mixture modelling method examined here. this contrasts with the findings of thalamuthu et al, who found that modelling methods were superior to k-means clustering  <cit> . this difference is again likely to be due to the datasets used; in particular the datasets used here were much larger in size.

CONCLUSIONS
k-means clustering, crc, isa and memisa are all potentially useful methods. considered alone, k-means clustering is probably the most useful of the four, as it is fast, does not require parallelisation, and produces clusters with slightly higher levels of go enrichment than crc when producing similar numbers of clusters. when used to find smaller numbers of clusters more in line with the estimation of k, the go enrichments are higher still, reaching 100% at some levels of p. it also assigns a cluster to every gene , unlike overlap-removed isa and memisa . although this must lead to some false positives, this does not seem to have affected the go enrichment scores unduly, and is an advantage in exploratory studies where as wide a view as possible is desired. furthermore, k-means is a relatively simple and very well understood method. this simplicity may be the reason for its good performance here, as it may allow it to cope with a wide variety of input data. crc, conversely, has many more parameters and so may have had scope to become optimised for the smaller yeast and bacterial datasets it was built for and tested upon.

however, for the fullest picture of clusters available in a dataset, combining memisa, isa and k-means is the best option, as it offers higher go enrichment than k-means alone in two out of the three test datasets while retaining 100% gene coverage . even in the mc <dig> dataset, it added additional clusters not found by k-means without reducing go enrichment. one of these memisa clusters  was found to be significantly enriched for schizophrenia-associated genes and genes differentially expressed in schizophrenia, further emphasising the utility of combining methods. if time allows, this combined method should be the method of choice for clustering microarray brain expression data.

authors' contributions
alr wrote all programs, performed analyses and wrote the paper. ph designed the permutation method used to assess cluster enrichment. lj, ph and mco constructively evaluated and edited the paper, and advised additional analyses. mjo provided access to the schizophrenia association data.

supplementary material
additional file 1
survey of microarray expression data clustering methods. table showing the methods surveyed in the literature to decide which ones to investigate more closely.

click here for file

 additional file 2
details of isa postprocessing regimes. table and description of isa postprocessing regimes tried on the dobrin dataset.

click here for file

 additional file 3
scripts to run isa and memisa. zip archive containing the perl and r scripts needed to run the version of isa and memisa described here. includes instructions.txt, a step-by-step guide to using them.

click here for file

 additional file 4
inter-method gene overlap. spreadsheet showing inter-method gene overlap for clusters from all methods, in all datasets. overlap is defined as the percentage of genes present in the smaller cluster that are also found in the larger cluster.

click here for file

 additional file 5
distribution of cluster sizes. spreadsheet showing number of genes present  in each cluster for each method across all datasets. also shows mean cluster size and standard deviation of cluster sizes.

click here for file

 additional file 6
clusters enriched for schizophrenia-related genes. spreadsheet showing the three clusters described in the paper. the 3093-gene cluster was made from the dobrin dataset by memisa, and the 2546-gene and 436-gene clusters were made from the mc <dig> dataset by memisa.

click here for file

 acknowledgements
alr is supported by the mrc through a bursary. we would also like to thank seth dobrin for access to his data, and the two anonymous reviewers for their suggestions and constructive criticism.
