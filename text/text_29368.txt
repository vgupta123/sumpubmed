BACKGROUND
advances in large-scale sequencing have led to a vast amount of protein sequences that have to be classified into structural and functional classes. because experimental determination is time consuming and expensive, several computational methods based on sequence similarity were introduced to automatically annotate sequences by homology transfer. for close homologs, i.e. sequences with a similarity of more than 80% at the amino acid level, this can be done by pairwise comparison methods like the smith-waterman local alignment algorithm  <cit>  or blast  <cit> . however, these methods often fail in cases where sequence similarity is low. in the so-called "twilight-zone", the detection of remote homologies still remains a challenging task in computational biology.

remote homology detection methods are often based on a statistical representation of protein families and can be divided into two major categories: first, profile-based methods provide a non-discriminative approach to family-specific representation of sequence properties. the corresponding generative models are usually trained using only known example sequences of the particular family  <cit> . second, discriminative methods provide a supervised approach  <cit>  to representing sequence properties that explicitly model the differences between protein families. in this case, training requires example sequences from the particular protein family and counterexamples from the other protein families.

discriminative methods often measure the similarity of two sequences by means of a kernel function. a sequence kernel computes the inner product of sequence representatives in some abstract feature space, often without explicit transformation of the sequences into that space. using learning algorithms that only need to evaluate inner products between feature space elements, the "kernel trick" makes learning in complex and high dimensional feature spaces possible. recent studies  <cit>  have shown that discriminative kernel methods can significantly increase the detection performance as compared with profile-based methods.

kernel methods in general require the evaluation of n <dig> kernel functions for training the discriminant function on a set of n sequences. since this requirement is computationally demanding even for a few thousand sequences, the use of kernel-based approaches for large-scale discriminative learning is problematic. testing the trained model is also expensive since it involves kernel computations between test examples and n training examples.

however, in some cases evaluation of the discriminant can be computed rather efficiently if an explicit representation of the discriminant in feature space is possible. for example, the spectrum kernel  <cit>  measures the similarity between two sequences by counting the occurrences of all k-length subsequences  in these sequences. the method has been shown to provide considerable speed-up of the evaluation using the discriminant in the k-mer feature space. however, the use of the spectrum kernel for longer k-mers is problematic, because of the decreasing number of perfect matches. several methods based on inexact matches have been introduced to tackle this problem  <cit> . these methods count the occurrences of nearly matching k-mers by means of a binary match function that is invariant with respect to changes within a specified "mutation neighborhood". for example, the mismatch kernel  <cit>  defines a mapping to the k-mer feature space via a -"mismatch neighborhood", i.e. the occurrence of a particular k-mer i contributes to all feature space dimensions associated with k-mers that differ from i by at most m mismatches. recently, oligomer distance histograms  <cit>  have been introduced for protein sequence representation and remote homology detection. here, the similarity between two sequences is measured by counting the occurrences of all k-mer pairs for all distances. oligomer distance histograms are highly competitive with state-of-the-art methods for remote homology detection and provide an explicit feature space. all these feature-based methods allow for fast classification of new sequences. furthermore, they do not require prior knowledge about sequence properties in terms of relevant motifs or structural information. by analysis of the discriminative features, these methods can even help to find new motifs or other interesting sequence properties.

in contrast, motif kernels  <cit>  evaluate the occurrences of known motifs from an existing motif database, i.e. the number of matching motifs in a pair of sequences is used to define a kernel. as another example, profile kernels  <cit>  use probabilistic profiles as produced by psi-blast to define "positional mutation neighborhoods", i.e. profile-defined mappings to the k-mer feature space. here, the profiles originate from an initial homology search of training examples, therefore this method can also be viewed as a homology-based kernel. based on prior knowledge, motif kernels and profile kernels also provide an explicit representation of the discriminant, and thus allow for interpretation in the associated feature space and fast classification of new sequences.

currently, alignment-based kernels show the best detection performance on widely-used homology detection setups  <cit> . for example, in  <cit>  the authors derive the similarity measure between two sequences from the sum of their local alignment scores. this similarity measure requires additional transformation in order to provide a valid kernel. however, these methods show a significant disadvantage concerning the interpretability of the resulting discriminant model. in contrast to methods that are based on a meaningful vector space representation of the sequences, alignment-based kernels do not provide direct inspection of the associated feature space. with this limitation it is difficult to identify the relevant sequence properties that have been learned from the data. therefore, these kernels do not offer additional utility for researchers interested in finding the characteristic features of protein families. in principle, the same holds for kernel methods that involve certain kinds of nonlinear transformations, like gaussian  kernels do, because the learned discriminant parameters, i.e. the sequence-specific weights after kernel-based training, cannot be associated with particular sequence properties. this considerably complicates the interpretation of these "black box" classification models.

as an additional drawback, several kernel methods incorporate hyperparameters that have to be carefully adjusted before training. for example, the authors of  <cit>  used a total number of  <dig> kernel parameters, two of which were fixed in an ad-hoc manner. the dependence of the performance on the third parameter was evaluated on the test data in this particular setup. other approaches, e.g.  <cit>  and  <cit>  also comprise several hyperparameters that were chosen to provide maximum performance on the test data. the extensive use of hyperparameters increases the risk of overfitting when no dedicated validation data set is used. in this case, the application of the method to different data is difficult because new data are likely to require the readjustment of these parameters.

in this work, we present an alignment-free feature space representation for protein sequences, which is based on the average pairwise similarity of short subsequences . first, we show that this similarity measure defines a valid kernel function between two sequences. we then provide some further analysis of the associated sequence representation, which gives rise to a well interpretable feature space in terms of "word correlation matrices" . finally, we demonstrate the performance of this representation on a widely-used benchmark setup for protein remote homology detection. in addition, we show how the resulting discriminants can be analyzed to gain insight into particular sequence properties.

methods
from average word similarity to word correlation matrices
we first define a sequence similarity measure based on average word similarity. consider two sequences s, s˜, represented by two lists of words w, w˜ containing all consecutive overlapping k-length words wi, w˜j occurring in the respective sequence. with some word similarity function s measuring the similarity between words w and w˜ we compute the average word similarity between sequences s, s˜ by

  k=1nn˜∑i=1n∑j=1n˜s 

where n and ñ denote the number of k-length words in the sequences. in particular we are interested in word similarity functions that provide a positive semidefinite sequence similarity measure, i.e. that provide valid sequence kernels. we here propose a simple realization of the word similarity function that not only results in a valid sequence kernel but also implies a feature space of moderate dimensionality. consider an alphabet a and a binary vector encoding of k-length words x ∈ { <dig> }k|a|. the i - th letter of a word only yields a non-zero entry in vector dimension k ×  + j if that letter matches the j-th element of the alphabet. let z ∈ { <dig>  1} <dig> be an amino acid indicator vector, i.e. a 20-dimensional vector that contains only one non-zero entry for the vector dimension associated with a particular amino acid. with this definition and t indicating vector  transposition, a word vector for protein sequences corresponds to a stacking of particular amino acid indicator vectors x=t for k different word positions. with the two word vectors x, x˜ of the words w, w˜ our word similarity is computed by the squared dot product

  s= <dig>  

note that this measure corresponds to the squared number of matching letters occurring at the same position in both words. in terms of the hamming distance h between words, it is equal to ) <dig>  we shall now show that this formulation gives rise to a valid sequence kernel k if used in equation . further we will consider the dimensionality of the associated feature space, which will be shown to grow quadratically with the word length k. we now write the above sequence similarity in terms of the word vectors xi and x˜j of s and s˜, respectively:

  k=1nn˜∑i=1n∑j=1n <dig> 

  =1nn˜∑i=1n∑j=1n˜ 

  =1nn˜∑i=1n∑j=1n˜tr 

  =tr 

where tr denotes the trace function, i.e. the sum of diagonal elements. with matrix xs containing all word vectors xi of sequence s as columns, we define the sequence-specific word correlation matrix  as

  c=1n∑i=1nxixit=1nxsxst 

with the abbreviations c ≡ c and c˜≡c we can finally write the kernel as

  k=tr=vectvec. 

the vec function converts a matrix to a vector by stacking the matrix columns successively, i.e. the upper right element in a  <dig> ×  <dig> matrix contributes to the third vector dimension. from this we see that the sequence kernel corresponds to a dot product in a particular feature space which arises from vectorized wcms. in the following, we use

  Φ = vec 

to denote the feature space representative of a sequence.

wcm feature space
the particular primary structure of a protein is commonly characterized by a sequence of amino acids. the iupac one-letter abbreviation code for  <dig> naturally occurring amino acids gives rise to an alphabet a = {a, r, n, ..., v} with |a| =  <dig>  for a protein sequence s and a given word length k, every dimension in the wcm feature vector Φ corresponds to the number of occurrences of two particular amino acids at specific positions within all words of length k in s. for example, the first feature space dimension counts the occurrences of alanine  at the first position of all words. the second dimension corresponds to the number of occurrences of alanine and arginine at the first position. if the binary z-vector encoding as defined in the previous section is used, this dimension always contains a zero value, because different amino acids cannot occur at the same word position by definition. however, this dimension can be useful in combination with word encoding schemes that take into account amino acid substitutions. as a last example, the 21st dimension in our wcm feature space corresponds to the number of occurrences of alanine at the first and second position of all words, i.e. the frequency of the dimer aa.

interestingly, the features of the wcm representation correspond to features of special realizations of oligomer distance histograms  <cit> : for a particular word length k the wcm features correspond to features of monomer distance histograms when only distances up to k -  <dig> are taken into account. for a particular distance d, monomer distance histograms contain the number of occurrences of all amino acid pairs whose sequence positions differ by d. a feature in the wcm feature space contains the number of occurrences of two amino acids at distance d at particular positions within the same word. because of overlapping words in a sequence, a particular feature associated with a dimension in the monomer distance histogram feature space is counted at most k times and added to different wcm feature space dimensions according to specific word positions. on the other hand, the first and last k -  <dig> words in a sequence have less overlap with other words than words inside the sequence, such that features of words at the beginning and at the end of a sequence are counted less than k times. therefore, long words and short sequences would result in more different features as compared with the monomer distance histogram feature space. in total, the wcm feature space comprises  <dig> dimensions, and thus grows quadratically with the word length. because of the symmetry of the wcm, it is sufficient to consider the upper  triangular matrix, which can be used to reduce the dimensionality of the feature space to k|a| <dig>  furthermore, off-diagonal elements of entries belonging to the same word position can be disregarded if amino acid indicator vectors are used. in this case, the feature space reduces to k|a|+k|a| <dig> dimensions.

kernel matrix computation
for kernel-based training with a set of n sequences, the n × n matrix of pairwise kernel functions between all sequences has to be computed. doing this directly according to equation  requires n <dig> evaluations of all ll˜ word similarity values between two sequences of length l and l˜, respectively. therefore, the overall algorithmic time complexity of this method is oll˜k|a|). with l ≈ l˜ and |a| = const. this simplifies to o. in particular, for long sequences this can be computationally demanding.

however, in most cases the kernel matrix can be efficiently calculated using the feature space representatives Φ of the sequences as defined in equation . after transformation of all sequences into the wcm feature space, their representatives can be stored in a matrix m = . then, the kernel matrix k can be computed by the matrix product

  k = mtm. 

using the same simplifications as above, the feature-based computation of the kernel matrix involves n sequence transformations of complexity o and the evaluation of the matrix product involving the lk <dig> × n matrix m, which is of theoretical complexity o. therefore, the overall time complexity of this method is o. in contrast to the direct kernel computation, the computational complexity only grows linearly with the length of the sequences but quadratically with the word length.

the theoretical overall time complexity formulas indicate that for l > k the feature-based method is preferable for calculation of the kernel matrix. in general, k has to be chosen to be significantly smaller than l in order to obtain reasonable sequence similarity values. feature-based calculation is much more efficient than the direct computation for moderate word length k. however, the memory requirements to store all feature vectors grows quadratically with the word length k.

we compared the required time for computation of the kernel matrix using  <dig> protein sequences with an average length of  <dig>  amino acids. the feature-based calculation using a word length of k =  <dig>  took  <dig>   seconds on an amd opteron  <dig> processor with 2gb ram. thereby  <dig>   seconds were used for the transformation of the sequences into the  <dig>  dimensional feature space and  <dig>   seconds were used for the computation of the matrix product. in contrast, the direct calculation of the kernel matrices took  <dig> and  <dig> seconds, respectively.

discriminant function in feature space
after kernel-based training, the learned sequence-specific weights can be used to calculate the discriminant weight vector in wcm feature space for better interpretation and fast computation of the discriminant.

let α = t be the weight vector of a set of n sequences after kernel-based training and m be the matrix of sequence representatives. then, the discriminant weight vector w in feature space can be computed according to

  w = mα. 

the magnitude of an entry in w reflects the discriminative power of the corresponding feature. this can be used to identify relevant features or feature combinations for a given set of sequences. for better interpretability, the discriminant weight vector can be remapped to the wcm space, which provides a convenient visualization of the discriminant.

the discriminant weight vector in feature space can also be used to identify discriminative words in a set of sequences. the discriminative power of a particular word in terms of a word score score can be computed with the discriminant weight vector w and the word vector x according to

  score = xtwx  

where w is the wcm space representation associated with w, i.e. vec = w. high absolute word score values indicate importance of w for discrimination between positive and negative example sequences. these discriminative words can be interpreted biologically in terms of short "motifs", i.e. conserved sequence regions within a set of related sequences. scores with a low magnitude usually correspond to words that do not contribute significantly to the discrimination, e.g. words that occur in positive and in negative example sequences. discriminative word scores can also be used to detect discriminative regions within sequences by means of score profiles. a score profile of a sequence s is the sequence of word scores for all overlapping words of s. discriminative regions of s correspond to global or local maxima  of the score profile of s. in figure  <dig>  five exemplary word score profiles are shown.

for fast classification of a new sequence s with the discriminant weight vector in wcm feature space, the classification score can be efficiently computed according to

  score = wtΦ . 

the score computation involves transformation of the sequence to the feature space with complexity o and the calculation of the dot product for at most  <dig> vector elements. using the same simplification as in the previous section, the overall computational complexity of classification with the feature space discriminant is o. in contrast, for kernel-based classification of s the evaluation of n kernel functions

  score=∑i=1nαik 

according to n training sequences is necessary. note that only kernels with a non-zero αi  need to be considered. with l2k computations for evaluation of a single kernel function the overall complexity for kernel-based classification is o. this indicates that for large n the feature-based computation of the classification score can be faster by orders of magnitude.

RESULTS
in order to evaluate our approach, we considered a widely-used benchmark data set for remote homology detection  <cit>  based on the scop database  <cit> . in the corresponding setup, remote homology detection is simulated by holding out all sequences of a particular scop family from a given superfamily in order to use these members as positive test examples. positive training examples were selected from the remaining families in the same scop superfamily. negative training and test examples have been drawn from disjoint sets of folds outside the fold of the target  family. in that way, every detection experiment involves a specific set of negative examples. according to the considered subset of scop families there are  <dig> binary classification problems at the superfamily level of the scop hierarchy. in this setup, the number of negative examples for each experiment is much larger than that of the positive ones. in particular, this situation gives rise to highly "unbalanced" training sets. in total, the setup consists of  <dig> sequences from the scop  <dig>  database.

to test the quality of our representation based on average word similarity, we utilize kernel-based support vector machines . kernel methods in general require the evaluation of a kernel matrix including all inner products between training examples. to speed up computation, we pre-calculated the kernel matrices based on all  <dig> sequences for different k and extracted the experiment-specific entries according to the setup of  <cit> . in the evaluation we tested our method for words of length k =  <dig>  ..,  <dig>  whereby the entries of k =  were normalized according to

  k′ij=kijkii⋅kjj. 

all kernel matrices used for the evaluation can be downloaded in compressed text format from  <cit> . instead of the gist support vector machine that was used in the original setup, we apply a matlab® implementation of the soft margin svm with quadratic loss function as described in  <cit>  for kernel-based training. the first reason is that we observed convergence problems of the gist svm in some cases. the second reason is that the direct implementation is considerably faster since the gist package requires to create large experiment-specific data files containing the training and test kernel matrices. for reasons of comparability to the setup in  <cit> , we used the same constant offset parameter  for the kernel matrix and fixed the scaling parameter of the diagonal factor to a constant value . while the offset parameter is added to all entries of the kernel matrix, the diagonal factor only affects the diagonal elements in order to cope with the unbalanced data sets  <cit> . with the diagonal factor q and the median of the diagonal elements m, n+nqm and n−nqm are added to diagonal elements for positive and negative examples, respectively. for training of the svm we use the normalized kernel as defined in equation  without any further transformations.

besides from the unbalanced training sets, the setup in  <cit>  also provides unbalanced test sets. in this case, widely-used performance metrics like predictive accuracy are not applicable  <cit> . furthermore, homology search usually requires the analysis of an ordered list of potential homologs rather than hard classification. to measure the detection performance of our method on the test data, we calculated the area under curve with respect to the receiver operating characteristics  and the roc <dig> score, which is the area under curve up to  <dig> false positives. besides this, we also computed the median rate of false positives . the mrfp is the ratio of false positive examples, which score equal or higher than the median score of true positives.

the results of our performance evaluation are summarized in table  <dig> in comparison with other approaches. in order to exclude differences due to different implementation of the l2-svm, we recalculated the detection performance for all approaches. for the spectrum method, we also performed experiments with combined kernel matrices using word length sets k^ = { <dig>  2}, k^ = { <dig>   <dig>  3} and k^ = { <dig>   <dig>   <dig>  4}. for this purpose, we calculated the average kernel matrix element over different word lengths. the performance indices in the table correspond to average roc/roc <dig> and mrfp values over all  <dig> experiments. furthermore, the average number of support vectors is given in the fifth column of the table. support vectors are data examples with a non-zero weight after kernel-based training and have to be considered for kernel-based classification of new sequences. therefore, a lower number of support vectors in general decreases the storage requirements and the computational demands for kernel-based evaluation of the discriminant. in addition, most svm training schemes benefit from a smaller number of support vectors in terms of decreasing computation time.

performance evaluation results of the word correlation approach  using several word lengths k =  <dig>  .. <dig> in comparison to local alignment kernel   <cit> , monomer distance histograms   <cit> , svm pairwise  <cit> , mismatch string kernel  <cit> , spectrum kernel  <cit>  and the combination of spectrum kernels for different word lengths .

the performance values indicate that the wcm approach is well-comparable with other state-of-the-art methods. while the local alignment kernel and monomer distance histograms show better roc and roc <dig> performance, our new approach outperforms other feature-space based methods as well as the svm pairwise kernel.

as described in the previous section, an explicit discriminant weight vector can be calculated in wcm feature space ). therefore, the weight vector can be visualized in wcm space for identification of discriminative features. figure  <dig> shows the wcm discriminant of superfamily  <dig> . <dig>  according to experiment  <dig> after kernel-based training using word length k =  <dig>  rows and columns correspond to particular amino acids at particular word positions for the first and second word occurrence, respectively. elements with values in the range between 10% of the largest negative and 10% of the largest positive discriminant value were set to zero to reduce the noise in the visualization. large positive values indicate that for detection of scop family  <dig> . <dig>   the corresponding feature is overrepresented in positive training sequences as compared with the negative training sequences. table  <dig> shows a list of the  <dig> most discriminative words for the positive training sequences associated with superfamily  <dig> . <dig> after kernel-based training . this table allows to identify the most discriminative features of a particular superfamily in biologically meaningful terms. for an exemplary analysis of globally important features, table  <dig> shows the  <dig> most discriminative features of four experiments associated with families from the scop class "all alpha proteins". this class contains protein domains whose structure is essentially formed by alpha helices. the features in table  <dig> correspond to particular dimensions in the word correlation feature space in terms of an amino acid pair at particular word positions.

list of  <dig> most discriminative words for positive training sequences of experiment  <dig> according to scop superfamily  <dig> . <dig> using word length k =  <dig>  words are sorted according to their word score. the first and second column correspond to rank and score of a word, respectively. the third column contains the word as amino acid sequence in iupac one-letter code. in the fourth column, the number of occurrences of a particular word in the positive training sequences are shown.

list of  <dig> most discriminative features for four superfamilies associated with the scop class "all alpha proteins". features are sorted in descending order according to their absolute discriminative weight . the first column corresponds to the rank of a feature and the succeeding columns contains the description of the feature in the word correlation feature space in terms of a pair of amino acids  at particular word positions. features that are associated with negative discriminative weights are printed with lowercase first letters.

discussion
comparison to closely related approaches
surprisingly, our wcm approach for k =  <dig>  outperforms the k-mer spectrum method for k =  <dig> ) in terms of roc and roc <dig> performance. technically, the wcm <dig> feature space corresponds to the feature space of the spectrum  method, i.e. the amino acid composition. this feature space comprises only  <dig> dimensions, and thus allows for fast and memory efficient representation and classification of sequences. this suggests that this simple approach could be useful for large-scale remote homology detection. in  <cit> , the authors applied the spectrum method to a similar remote homology detection setup as described here . however, the authors limit the evaluation of detection performance to the spectrum  and spectrum  method, respectively. thereby, the spectrum  method outperformed the spectrum  method in terms of roc <dig> performance. figure  <dig> shows a comparison of the roc performance for the spectrum method and the wcm approach using word length k =  <dig>  ..,  <dig>  it is clearly visible that the performance of the spectrum rapidly decreases for growing word length while the performance of our method continuously increases. this results from the fact that the wcm feature space for a word length k >  <dig> completely includes the wcm feature space for shorter words. in contrast, the spectrum feature space associated with a particular word length does not include the feature space for shorter words by definition. the results indicate that the spectrum method is rather unsuitable for use of longer words. this can be traced back to the fact that the number of exact matches rapidly decreases for growing word length. this results in very small values for the similarity between two non-identical sequences. therefore, the incorporation of inexact matches as in  <cit>  is necessary for use with longer words. in  <cit> , the authors present several string kernels that are based on inexact matching of k-mers. these methods realize inexact matching by a so-called "mismatch" or "mutation neighborhood" using a binary match function with specific invariance properties. in that case, a particular k-mer is mapped to several dimensions in the feature space of the k-mer spectrum. the similarity of two k-mers can then be calculated as the dot product in this feature space. however, this feature space grows exponentially with k and is difficult to interpret in terms of biological sequence features. furthermore, classification with the discriminant in this feature space for large k is demanding in terms of memory requirements. in contrast, the wcm method is based on a more "continuous" similarity measure between two words ) rather than on a binary match criterion. the corresponding feature space only grows quadratically with k and each feature space dimension directly corresponds to a biologically meaningful sequence feature. in addition, the wcm approach allows for memory efficient classification with the discriminant in feature space.

another possibility to deal with the decrease of exact matches for longer words is the combination of spectrum kernel matrices based on different word lengths. table  <dig> shows that the results for the spectrum method using combined kernel matrices up to a maximum word length are only slightly inferior as compared with the wcm approach using the respective maximum word length. note that the wcm approach does not require to identify a suitable combination of different kernels to achieve good prediction performance.

interpretation of discriminative features
the wcm feature space is useful for identification of discriminative features that have been learned from the data. in figure  <dig>  the discriminant weight vector is visualized in the wcm feature space that allows to analyze discriminative features in terms of the corresponding sequence properties. for example, the highlighted matrix element in figure  <dig> indicates that for positive training sequences of superfamily  <dig> . <dig> the occurrence of cysteine  at the first word position in combination with arginine  at the third word position is highly discriminative. this feature may not be detected in the sequences associated with this superfamily if only unsupervised methods, e.g. motif finders are used. the reason is, that the combination can only be observed in few cases but nevertheless occurs more often than in protein sequences from unrelated families. therefore, our discriminative approach can help to identify features that are likely to be overlooked by unsupervised methods. these features can readily be used for analysis of more specific biological properties of the particular protein family.

computational efficiency
in section "methods", we pointed out that our wcm approach is very efficient in terms of computation time requirements for feature extraction from sequences. the feature-based calculation of the  <dig> ×  <dig> kernel matrix for the wcm approach using word length k =  <dig> takes  <dig>  seconds. this is by orders of magnitude faster than the computation of the kernel matrix for the local alignment kernel method, which nearly takes  <dig> hours. however, feature-based computation of the kernel matrix can also be applied to the spectrum method. for k =  <dig> , the calculation only requires  <dig>   seconds. for classification of new sequences with alignment-based kernel methods all kernel functions between the test sequences and support vector sequences, i.e. sequences with a non-zero weight after kernel-based training, have to be evaluated. for example, for classification of a new sequence with the local alignment kernel on average  <dig> kernel function evaluations need to be computed. using the software provided by the authors of  <cit> , evaluation of a single kernel function requires on average  <dig>  ms cpu time. in total, this yields  <dig>  s for classification of a single sequence.

for classification of new sequences with the wcm approach, the discriminant weight vector in feature space can be used instead of the kernel-based evaluation. this dramatically reduces the computational effort for classification, because only transformation of the new sequence to a wcm feature vector and calculation of the dot product of that vector with the discriminant weight vector are necessary. if indicator vectors are used for amino acid representation, the score of a sequence can be computed by summing up all weight vector entries according to the number of occurrences of the associated pair of amino acids at two particular word positions in the sequence. we implemented a fast matlab® version of this scoring procedure that requires on average  <dig>  ms for scoring of a single sequence in the scop setup using word length k =  <dig>  this is more than  <dig> times faster than scoring with the local alignment kernel and implies a different category of computation time requirements for ranking of potential homologs in a large database. for example, the uniprot protein knowledgebase  <cit>  release  <dig>  contains  <dig> protein sequences, which could be potential targets in a homology detection task. in this case, scoring with the local alignment kernel would require more than  <dig> days on a single machine. although not directly comparable in terms of detection performance, the feature-based scoring with the wcm approach takes less than  <dig> minutes. for comparison with the spectrum method, we also implemented a fast procedure that scores a protein sequence using a feature space discriminant as produced by the spectrum kernel method. for k =  <dig> , scoring of the uniprot database takes about  <dig>  minutes. in principle, the computational cost for classification of new sequences with alignment-based kernels grows linearly with the number of training sequences. therefore, the application of these methods to large-scale classification setups is problematic, too. in contrast, the computational cost for classification with the feature-based methods only grows linearly with the number of feature space dimensions. therefore, our method is suitable for large-scale classification setups. in particular, the wcm approach could be very useful to reduce the number of target sequences or target families. this reduced set may then be further investigated with more specific alignment-based methods.

CONCLUSIONS
in this work, we presented a new approach for protein sequence representation based on word correlation matrices . wcms arise from a sequence kernel defined by average pairwise word similarity between two sequences. the approach shows comparable detection performance to state-of-the-art methods for protein remote homology detection. our method includes a single kernel parameter that specifies the word length. we showed, that the detection performance does not critically depend on this parameter. our results indicate, that for remote homology detection the word length parameter can be fixed to k =  <dig> for time and memory efficiency. our protein sequence representation is associated with an explicit feature space in terms of word correlations. the discriminant weight vector in feature space can be used for fast classification of new sequences and intuitive interpretation of discriminative features.

in general, the basic word similarity measure can be defined in other ways than presented in this work. for example, in the definition of the word similarity measure  in section "methods") a word substitution matrix can be inserted between the word vectors to include prior knowledge about the similarity of particular words. on the other hand, such substitution matrices are usually problem-specific, i.e. they should depend on the application. furthermore, the substitution matrix has to be positive semidefinite so that the similarity measure still implies a valid sequence kernel.

like other explicit feature space methods, our representation approach can be combined with different feature selection techniques. this would be useful in cases where a small set of relevant features has to be identified. finally, the wcm approach is not limited to protein sequences, but can also be used for dna or rna sequence representation. in this case, the word length possibly has to be chosen larger to obtain meaningful features. the investigation of these possibilities will be part of future work.

authors' contributions
tl did the experimental evaluation and drafted parts of the manuscript. pm designed the method and drafted parts of the manuscript. both authors read and approved the final manuscript.

supplementary material
additional file 1
pfam full alignment of the omega-toxin family . the file pfamaln.png contains a screenshot from the pfam website  which shows the multiple alignment of all member sequences of the omega-toxin family . the omega-toxin family belongs to the omega toxin-like superfamily. some of the discriminative words in table  <dig> can be identified in the sequences .

click here for file

 acknowledgements
this work was partially supported by federal ministry of research and education project "medigrid" .
