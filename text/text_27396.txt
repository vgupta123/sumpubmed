BACKGROUND
modeling gene regulatory networks  is a key challenge when studying development and disease progression. these networks are dynamic with different  sets of transcription factors activating genes at different points in time or developmental stages. reconstructing the dynamics of these networks is a non-trivial task that requires the integration of datasets from different types of genome-wide assays.

several methods were proposed for reconstructing grns . these methods often combine expression and protein-dna interaction data to recover the underlying networks. however, most methods to date focused on reconstructing static networks and the resulting models did not provide any temporal information. in this paper we focus on the reconstruction of dynamic grns using time-series expression data. such data is prevalent for several species, mostly from microarray studies  <cit>  and more recently using rna-seq methods  <cit> .

while several studies measure time series expression data, the available protein-dna interaction data is almost always static . this creates a major computational challenge when attempting to integrate these dynamic and static datasets.

several methods were suggested for clustering time series expression data  <cit> , or for constructing dynamic networks with regression-based techniques that rely on only the temporal expression data  <cit> . while these approaches led to some success, as we show in results, methods that can utilize both the temporal expression data and the static interaction data can improve upon the expression-only methods.

a number of methods have been suggested for addressing these issues, though most of them were targeted at specific input datasets and did not offer any software to support their general use. for example,  created a dynamic network by overlaying tfs regulating differentially expressed genes for different time points.  created a 2d visualization for different dynamic measurements, including time series expression, histone modification, and pol2-occupancy data using the gate software  <cit>  although no combined model is presented. bromberg et al. measure tf activation as a time series and derive pathways that explain activated tfs by integrating subnetworks from ppi networks  <cit> . baugh et al. relies on the expression data of transcription factors to identify representatives regulating early development of c. elegans embryos  <cit> .

a different way of formulating the problem is to decompose the gene expression data into tf activity and tf affinity values for each expressed gene as suggested by network component analysis  <cit> . from the matrix of tf affinity values one can construct a dynamic network with connections for each time point  <cit> . there have been many extensions to this idea with different underlying mathematical models, including ordinary differential equations  <cit>  and factor analysis  <cit> . note however that such regression-based methods do not really take time into account. if one randomly reorders the temporal columns  these models will still result in the same network.

one of the first approaches to construct networks that change over time while still incorporating the ordering of time series data was suggested by  using dynamic bayesian networks . a dbn is a set of directed networks, one for each time point. although general learning of dbns is np-hard there exist conditions where these networks can be learned optimally  <cit> . however, these methods do not scale to hundreds of regulators.

to provide a general method that can be widely applied to reconstructing dynamic regulatory networks,  <cit>  presented drem, a method that integrates times series and static data using an input-output hidden markov model . drem learns a dynamic grn by identifying bifurcation points, places in the time series where a group of co-expressed genes begins to diverge. these points are annotated with the tfs controlling the split leading to a combined dynamic model. since its release  <dig> years ago the drem software has been used for modeling a wide range of grns for example stress response in yeast  <cit>  and e. coli <cit> , development in fly by the modencode consortium  <cit> , stem cell differentiation in mice  <cit>  and disease progression in human  <cit> .

while drem has been successfully used for multiple species, so far each group using it had to obtain its own protein-dna interaction data. since such data is often dispersed among several databases, websites and publications, this step was a major hurdle to using drem. other features not supported in the original drem version included: the integration of motif discovery, the ability to utilize dynamic chip binding data  <cit>  and tf expression data, and visualization of these new data types. in this paper we discuss a new version of drem, termed drem  <dig> , that addresses all these limitations. as we show, by addressing these issues drem  <dig>  improves upon both methods that do not integrate static information in the analysis of dynamic data and the previous version of drem which lacked the above features.

implementation
drem  <dig>  is implemented entirely in java and will work with any operating system supporting java  <dig>  or later. portions of the interface of drem  <dig>  are implemented using third party libraries, the java piccolo toolkit from the university of maryland  <cit>  and the batik toolkit for svg export of network images  <cit> . drem  <dig>  also supports batch mode for automated execution. drem  <dig>  makes use of external gene ontology  and gene annotation files. drem  <dig>  downloads these files directly from the go website  <cit> .

time-specific binding of regulators
the underlying input-output hidden markov model learning can now accommodate dynamic input data for each time point in the following way. the transition probabilities for the iohmm are derived from a logistic regression classifier that uses the protein-dna interaction data as supervised input and utilizes them to classify genes into diverging paths at a split node in the model. in the new version the nodes in the input layer can be dynamic and thus the function can depend on input from the specific time point it is associated with. see figure  <dig> for an illustration.

RESULTS
using drem  <dig> 
users input their time series expression data by using the graphical user interface  . drem  <dig>  can transform the data and combine time point repeats. next, users select a protein-dna interaction data set for the species they are working with. drem  <dig>  includes protein-dna interaction data for several species . after selecting the species and interactions the user can set various learning parameters or use the default settings . once the data is entered the user selects the ‘execute’ button which runs drem  <dig>  on the input data and results in the dynamic network learned by drem  <dig>  . drem  <dig>  supports downstream analysis using external databases  and software .

number of protein-dna interactions for tfs and target genes for the six supplied species h. sapiens, a. thaliana, and m. musculus, s. cerevisiae, and e.coli since drem  <dig> . higher-confidence subsets of these interactions are also provided for some species. more details can be found in additional file  <dig> 

drem  <dig>  analysis of asbestos induction
as a running example to illustrate the new features, we used the human protein-dna data now available with drem  <dig>  to analyze an expression experiment studying the effects of asbestos on human lung adenocarcinoma cells   <cit>  . preprocessing and parameters for the analysis are described below. drem  <dig>  successfully predicts enrichment of tfs known to be relevant in asbestos exposure, e.g., tfs from the fos family  <cit> , that are shown to be up-regulated at the  <dig> hour time point .

parameters and datasets for the asbestos analysis
the time series data for asbestos treatment of human lung cancer cells  <cit>  was downloaded from geo . the dataset contains gene expression data measured with affymetrix human gene expression arrays  <dig>   <dig>   <dig>   <dig> hours, and  <dig> days after asbestos exposure and a control time series without exposure. the array data was normalized with quantile normalization using rmaexpress  with default parameters  <cit> .

log <dig> ratios of exposed versus control were computed as input to drem  <dig> . the human binding predictions  were used as the regulatory dataset for drem  <dig> . for the drem  <dig>  analysis the following options were not set to default values:  genes in the time course were discarded if “minimum absolute expression change” was smaller than  <dig> ,  “incorporate expression in regulator data” was activated for transcription factors with “expression scaling weight” set to  <dig>  for the annotation of split nodes  the “path significance conditional on split” enrichment p-value in the gui was set to be ≤ 5·10− <dig> 

for the motif analysis decod  <cit>  version  <dig>  was downloaded and connected with drem  <dig>  using the gui interface.  <dig> human promoter sequences  were downloaded from the epd promoter database   <cit> . decod was run to search for motifs of length  <dig> with the exact mode and stamp  <cit>  motif similarity search was conducted against transfac  using default parameters  <cit> . the reported motif  is the 3rd motif found by decod with a similarity e-value of  <dig> e- <dig> returned by stamp.

supporting additional species
drem  <dig>  utilizes time series expression data  and static interaction data which is often condition-independent . the original version of drem  <cit>  only provided such static data for s. cerevisiae, which meant that users studying other species had to collect their own static data as well as the condition-specific time series data. over the years we have included protein-dna interaction data for e. coli and human, but several other species were still not supported, limiting drem’s usage. we have now collected static data for a number of additional species  and have added additional high throughput protein-dna interaction datasets for human as well. with these additions drem  <dig>  now supports most of the well-studied organisms facilitating much wider use of the method. table  <dig> lists the current species supported, the number of interactions we have for each species and where these interactions were obtained. more details regarding these datasets can be found in additional file  <dig> 

utilizing the expression levels of tfs
the original version of drem did not use any information regarding the expression levels of the tfs predicted to regulate split nodes. the underlying reason for this was the fact that many tfs are post-transcriptionally regulated and relying on their expression to determine activity may lead to missing important tfs. in the new version, we still maintain the ability to identify tfs that are only post-transcriptionally regulated. however, we have added a new computational module that allows the method to utilize expression information for those tfs that are transcriptionally regulated. for each tf, its binding prior is elevated based on the tf’s expression level using a logistic function. thus, active tfs have a stronger prior of being selected as regulators by drem  <dig>  . we have also changed the visualization in drem  <dig>  to highlight such factors. in figure  <dig>  which is a screenshot from drem  <dig> , active tfs are highlighted in blue and repressed tfs in red.

finding dna motifs at split nodes with decod
during learning drem assigns genes to paths in the network model and uses split nodes  to represent sets of genes that change their expression between consecutive time points. tfs are assigned to split nodes allowing drem to infer their time of activation. when the protein-dna interaction data is unable to explain some of the split nodes , it could mean that the interaction data is incomplete. to still allow the identification of such tfs, we integrated with drem  <dig>  the discriminative motif finder decod  <cit> . the user can search for discriminative dna motifs between dna, e.g. promoter, sequences of genes assigned to diverging paths emerging out of any split node. the method uses two sets  to discriminatively search for motifs. the predicted dna motifs can be matched against known motif databases using stamp  <cit> . to highlight the utility of this new feature in drem  <dig>  we used it on the asbestos data described above. as can be seen, not all split nodes had been assigned in figure  <dig>  we have thus used the new decod feature to identify tfs for one of these splits . a database motif search with stamp reveals a motif with significant similarity to heb/tcf <dig>  tcf <dig> was indeed missing among significant tfs in the split table , perhaps because of incomplete data. however, a dna inversion close to the tcf <dig> gene was recently found in lung cancer patients  <cit>  indicating that this protein may be playing a role in regulating gene response in the lung.

in order to test the ability of decod to recover tf binding motifs at drem split nodes for the case where no tf-gene interaction data is available, we have conducted the following analysis. a drem model using the asbestos expression data was built without using the tf-gene interaction data. then, epd promoter sequences for genes at the  <dig> hour split node where used for motif search with decod. we searched for motifs of length 6- <dig> and selected all those with significant matches in transfac . after grouping tfs from the same family,  <dig> of the  <dig> tfs identified in the original run of drem for this split were found in the decod derived set .

supporting continuous and dynamic binding data
the original version of drem only supported three binding states  interaction data. drem  <dig>  now supports continuous binding values. these can be derived from p-values of chip-seq calling procedures or from computational affinity predictions  <cit> . thus, in the new version the same regulator may have a different binding value for each gene. the classifier weighs a target with a large binding value higher than targets with a lower binding value. a plausible way to turn chip binding p-values into drem  <dig>  binding values is to set b=−logp-value. these continuous binding values can then be passed to drem  <dig> .

in addition, drem  <dig>  also supports temporal binding data. while most interaction data is still static, dynamic binding data is becoming available. recent studies have shown that tfs may alter their binding behavior depending on the time point  <cit>  necessitating methods that can utilize such information when available. in its original implementation drem could only use static protein-dna interaction data when learning logistic regression classifiers for the transition probabilities in the iohmm. we have now revised this allowing the learning algorithm to support dynamically changing protein-dna interaction data . for each time point an independent data set can be passed to the logistic regression classifier. since dynamic binding data is often only available for a  subset of tfs, drem  <dig>  supports a joint static-dynamic input format for protein-dna interactions.

the ability to incorporate temporal binding data allows drem to reduce false positive assignments by only assigning tfs that are active at that time point . this in turn can both help identify co-regulators for which only computational predictions exists and also lead to the identification of different waves of transcriptional regulation, where the same tfs activate different sets of genes at different time points.

comparison to previous methods
we used the asbestos data to compare some of the new features in drem  <dig>  to other methods and to the previous version of drem. first, to compare drem  <dig>  to methods that only use one type of data  we ran drem  <dig>  without using the static protein-dna interaction information. this is similar to several clustering methods that have been suggested for time series data  <cit> . to compare to the original version of drem we also reran the asbestos data using tf-dna interaction data but without using the tf expression information. as a performance metric we used the number of enriched go terms, a common comparison strategy  <cit> . in figure  <dig> the significant go terms after multiple testing correction are compared for the three methods. leveraging the tf-expression leads to the highest number of significant go terms  and the identification of additional relevant functions that are not identified by the other two variants, including the go terms cellular response to stress and positive regulation of cell death .

discussion and 
CONCLUSIONS
while several methods can be used to reconstruct grns using time series expression data, most such methods either rely only on the expression data itself or result in static networks that do not consider the ordering of the time points. drem provides not only an alternative to these methods but also a rich gui and as such, has been used by several groups in multiple species.

although here we used both treatment and control time series, drem can also be used with only the treatment time series by taking the log fold change w.r.t. time point  <dig>  see  <cit>  for an example.

the new version eases the application to several species by directly supplying protein-dna interaction data and incorporating de-novo discriminative motif discovery. in addition we have made other improvements including the ability to utilize and view the expression levels of the tfs and to use dynamic protein-dna interaction data. combined, we believe that these improvements will make drem  <dig>  a more widely used software package for the reconstruction of dynamic grns.

availability and requirements
· project name: drem

· project homepage:www.sb.cs.cmu.edu/drem

· operating system: platform independent

· other requirements: java  <dig>  or higher

· license: free to academics/non-profit

· any restrictions to use by non-academics: license needed

abbreviations
drem, dynamic regulatory events miner; tf, transcription factor; grn, gene regulatory network; dbn, dynamic bayesian network; chip, chromatin immuno precipitation; iohmm, input-output hidden markov model; gui, graphical user interface; go, gene ontology; mgd, mouse genome database; hgnc, hugo gene nomenclature committee; rna-seq, next generation sequencing of messenger rnas.

competing interests
the authors declare that they have no competing interests.

author’s contributions
mhs, wed, ag, sz designed and implemented the new version. mhs, ag, sz, je performed the data collection and analysis. zbj supervised the work. mhs and zbj wrote the manuscript. all authors read and approved the final manuscript.

authors’ information
marcel h. schulz and william e. devanny joint first authors.

funding
work supported in part by nih grant 1ro <dig> gm <dig> 

supplementary material
additional file 1
drem  <dig>  manual. the manual for using the drem  <dig>  software with details of all parameters and the different dialogs in the gui.

click here for file

 additional file 2
supplementary methods. additional description for drem  <dig>  for tf expression level scaling, data collection for the protein-dna binding data sets and the analysis with decod on an unannotated split node.

click here for file

 acknowledgements
we would like to acknowledge all groups that have contributed and made available the human chip-seq predictions for human as part of the encode project.
