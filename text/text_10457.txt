BACKGROUND
sequence alignment is one of the most fundamental approaches in bioinformatics. it finds common subsequence patterns shared by the input sequences, and this information supports the identification of evolutionarily conserved genes or other functional regions, the prediction of 1-3d structures of proteins and rnas, and the analysis of evolutionary relationships between the species  <cit> . with the rapid increase in genomic sequence data in recent years, there is great demand for alignment programs that can allow direct comparisons of whole genomic sequences. cross-species genomic sequence comparison reveals homologous dna segments and ancestral rearrangements  <cit> , while intra-species genomic comparisons  can identify individual differences, such as snps, indels, copy number variations, and other types of peculiarities  <cit> .

optimal pairwise alignment can be obtained by a dynamic programming  algorithm with o time and o space, where l is the length of an input sequence  <cit> . however, even bacterial genomic sequences often exceed  <dig> mb in length, thus prohibiting the application of full-blown dp. most existing alignment algorithms apply fast seed-search algorithms, such as suffix trees, suffix arrays, and hash tables, to extract high-scoring pairs  of subsequences from the input sequences  <cit> . recent efforts have developed some alignment tools for genomic sequences, which include global alignment programs such as glass  <cit> , avid  <cit> , and lagan  <cit> , as well as local alignment programs such as blastz  <cit> , chaos  <cit> , mummer  <cit> , and waba  <cit> . though these programs can align small genomic sequences such as those of bacteria, the comparison of large genomic sequences such as those of mammals still requires large amounts of time and memory. for example, blastz succeeded in the whole-genome alignment of human and mouse by  <dig> days of cpu time and a half day of wall clock time on a cluster of  <dig>  <dig> mhz cpus  <cit> . the berkeley genome pipeline  <cit>  also reported a whole-genome human-mouse comparison by using avid based on the outputs of blat  <cit>  in  <dig> hours on a cluster of  <dig>  <dig>  ghz cpus .

this procedure was later expanded to human-mouse-rat alignment with lagan  <cit> . however, these kinds of genome comparisons on a standalone computer remain difficult because of the long computational time and the large amount of memory necessary for computation, even on the much-improved hardware systems presently available.

although global alignment typically has higher sensitivity than local alignment for less-similar sequences such as noncoding regions  <cit> , it should be applied to consistently homologous regions, and hence it cannot treat rearrangements of genomes. as a genomic sequence pair generally has rearrangements or unrelated regions, global alignment is not appropriate for whole-genome comparison in most cases. local alignment can treat rearrangement but is likely to give "noisy" outputs; if there are unmasked repetitive regions in the input sequences, a lot of alignments can be generated, most of which may not be interesting for general users. shuffle-lagan , a "glocal" alignment method, was developed to overcome the shortcomings of local and global alignment by identifying the breakpoints of rearrangements  <cit> . however, the problem of computational complexity remains poorly resolved.

moreover, these existing tools require the splitting up of input genomic sequences into short chunks because of the limitation in available computer memory. for human-mouse comparison, blastz divided the human genome into  <dig> segments of about  <dig> mb in length with a  <dig> kb overlap, while avid and slagan split the mouse genome into chunks of  <dig> kb in length. such splitting strategies have several disadvantages  <cit> . namely, the manual splitting and uniting processes of the sequences and alignment are tedious, potentially invoking several types of errors. in particular, a splitting strategy may divide a homologous region into chunks and align them separately, such that a contiguous orthologous segment might be recognized as separate entities. consequently, there remains no handy, practical method of aligning vertebrate-sized genomes for most researchers.

to overcome the computational difficulty, we previously proposed the basic idea of the cgat  algorithm  <cit> . this algorithm involves two levels of computation: block-level and nucleotide-level alignments. the former, "coarse-grained" local alignment step explores the genomic rearrangements and reduces the sizes of the regions to be aligned in the next step. the latter step is devoted to detailed global alignment within limited regions. by applying this algorithm to several bacterial genomes, we have shown that this two-step procedure can not only speed up computation but also facilitate noise reduction with consideration of genomic rearrangements. this procedure is a new strategy to overcome the disadvantages of global and local alignments, and thus differs from glocal alignment of slagan.

in this paper, we report on an update of the cgat algorithm and its associated program cgaln, which both improves accuracy and lowers computational costs, and now allows the alignment of not only bacterial genomes but also whole mammalian genomes in a single run.  we quantitatively evaluated the performance of cgaln in comparison with those of several other genomic alignment programs. the results show that cgaln is as sensitive and specific as blastz, which is shown to perform the best among the existing programs. cgaln runs several times faster and is considerably more memory-efficient than blastz with a tuned set of parameters. cgaln can now regulate the outputs of repetitive alignments; under special conditions, all repetitious outputs other than the best-scored ones are suppressed. this option is useful for detecting snps and small indels along an orthologous genomic sequence pair.

the cgaln source code is freely available at http://www.genome.ist.i.kyoto-u.ac.jp/~aln_user/cgaln/.

methods
overview
the nucleotide-level alignment is conducted on the restricted regions included in the block-level alignment found in the first stage . we adopt a seed-extension strategy widely used in homology search programs such as blast  <cit> . the obtained seed matches are integrated into gapless hsps. the hsps are then filtered and chained to conform to coherent alignment. if necessary, the chained hsps may serve as anchor points, the subsequences between which are aligned by a standard dp algorithm or recursive search for shorter seeds.

the above-mentioned algorithm implicitly assumes that genomic rearrangements smaller than the block size of cgaln  are rare, and they are not searched for with the default settings. to discover rearrangements smaller than the block size, we prepared the "-sr" option that considers inversions as small as a few hundred bases at the recursive phase applied to inter-hsp regions .

cgaln accepts two single- or multi-fasta files. when either or both files are in multi-fasta form, cgaln aligns every pair of single-fasta entry sequences and outputs the united results. in this section, we assume for simplicity that both input sequences are single-fasta files. by setting the "-r" option, cgaln examines both orientations of a sequence in a single run.

seed designing
cgaln uses the "spaced seed" proposed in patternhunter  <cit>  for fast and sensitive seed matching. a k/w spaced seed is a discrete series of nucleotides of length w in which k <w positions are examined for nucleotide matching. cgaln uses an 11/ <dig> spaced seed by default, with the same pattern as that used in patternhunter . this pattern was designed to be most sensitive for a pair of randomly generated sequences with 70% nucleotide identities. although some other seed patterns are more sensitive than this pattern under some conditions , we chose this seed design so that cgaln could be generally applicable to whole genome sequences of various species. optionally, a 12/ <dig> or 13/ <dig> spaced seed can be used, as suggested by mak and benson  <cit>  . we use the term k-mer hereafter to refer to these k/w spaced seeds, as the value for k is most important. a larger k is appropriate for longer sequences but requires more memory, and hence there is a compromise in the choice of the best value for k. the "code" of each seed is its quaternary expression calculated from the k examined positions by converting nucleotides a, c, g, and t into numerals  <dig>   <dig>   <dig>  and  <dig>  respectively. thus, the code of a k/w seed is between  <dig> and 4k -  <dig> 

block-level alignment 
in this subsection, we describe block-level alignment .

measuring the score between two blocks
let us denote the given input genomic or chromosomal  sequences ga and gb. let la and lb be the lengths of ga and gb, respectively. first, cgaln divides ga and gb into blocks with the fixed length of j, except that the last block may be shorter than j. the numbers of blocks in ga and gb are denoted as ma and mb, and thus ma = ⌈la/j⌉ and mb = ⌈la/j⌉. let  be the x-th block of ga and  be the y-th block of gb .

the score mx,y, the measure of similarity between  and , is defined as the summation of the scores of seeds commonly found in both  and . the score of seed ki is evaluated by the probability of the chance of finding one or more matches of ki in a block pair. let  be the total number of ki in ga, then the expected mean number of occurrences of ki in a block  is   

we assume the poisson distribution for the probability of ki occurring fi times in a block , i.e.,   

pb is obtained analogously. when ki occurs fi times in  and hi times in , ki matches fihi times between  and . it is clearly an overestimation to use this number as the measure of similarity between  and , because true homologous matches should line up around a single diagonal. in such a case, we regard min as the number of matches as suggested by  <cit> . thus, the score of seed ki is   

where the probability of seed ki occurring more than or equal to x times in a block is   

summing up s for all k-mers, we obtain the similarity score as:   

local dp alignment at block level
after obtaining mx,y for , the local alignment of ba is conducted by using local dp as follows:   

where d is the gap penalty. in practice, mx, y is calculated in the process of this dp procedure to save the required memory from o to o). to obtain the optimal and suboptimal locally best-matched alignments, we use the algorithm proposed by gotoh  <cit> . this algorithm assigns each block cell to a "colony", which is a candidate for local alignment. to define the colony borders, we apply the x-drop-off approach  <cit> . at a certain block cell, if the score fx, y increases from  <dig> to a positive value, a new colony starts. a colony is "significant" if fx, y > tcol somewhere in the colony, where tcol denotes a predefined threshold. a colony ends when fx, y becomes ≤  <dig> or falls by more than tcol from the maximum score of the colony, then fx, y is reset to  <dig>  only significant colonies are retained for further analysis. this method can greatly reduce the storage requirement, while the computational time remains o.

it should be noted that mx, y is always ≥  <dig> even between nonhomologous blocks, while it is a prerequisite that, on average, the similarity score must be less than zero for the local dp algorithm to work properly  <cit> . consequently, we subtract a constant bias b from each mx, y, so that , i.e., the x-drop-off should finish after passing through, on average, a unrelated cells . if there are repetitive sequences that escaped masking, ba may output them many times. cgaln has an option for suppressing such repetitious outputs. if there are inconsistent colonies that overlap each other, the "-fc" option filters all of them out except for the one with the highest scored.

tables of input sequences
ba uses four kinds of tables: a "seed table", an "index table", and two "poisson tables". the seed table stores the number of occurrences of each seed ki in a genomic sequence, whereas the index table stores a list of blocks where each ki resides. the seeds occurring more than a certain number of times  are omitted in subsequent analyses as highly repetitive sequences. the two poisson tables respectively store the probabilities that a fixed number of kis ) and more than a fixed number of kis ) occur in a block, where the probabilities are calculated based on the poisson distribution. the probabilities of occurrences exceeding an upper limit  are ignored as repeats. it is sufficient to construct these tables only once for each genomic sequence and for each orientation. they are stored in binary files and read into memory at run time. by using these tables, seed matching on ga can finish in o per k-mer in gb  <cit> . thus, the similarity measure matrix, mx, y , is computed in o.

nucleotide-level alignment 
cgaln applies the nucleotide-level alignment  within the restricted areas that are composed of block cells included in the local alignments of ba. however, the area covered by the set of block cells thus obtained is insufficient for na, because the expected results of na may shift slightly away from the aligned cells. hence, we extend the area to be searched by na to the "envelope" of the block cells found in the first stage .

generating and chaining hsps
at na, cgaln adopts a seed-finding approach with the 11-mer spaced seed. figure 2b shows na within a cell. first, the seed matches are searched for by using an index table again. this index table stores the list of positions at the nucleotide level within the restricted region, while the index table for ba stores genome-wide positions at the block level. a group of matches are integrated into one larger matching segment if the matches are closer to each other than a given threshold  with no gap . we define such a gapless matching segment as an hsp. lonesome matches, individual matches that are not integrated with any other matches, are filtered out. the score of each hsp is defined as usual as the sum of scores assigned to individual matches and mismatches included in it. the masked bases are omitted. third, the hsps are extended to both sides with no gap until the hsp score drops below a threshold. finally, the extended hsps are chained by computing a maximal-scoring collinear subset of them by a sparse-dp algorithm  <cit> . this step also helps to eliminate noisy hsps. cgaln penalizes a predefined value, penoverlap = max by default, for partially inconsistent  hsp pairs. cgaln may output some inconsistent but high-scoring hsps. if one wants "unique" outputs, e.g. to detect snps, the "-cs" option of cgaln increases this penalty to infinity and suppresses any outputs that are inconsistent with the highest-scoring alignment.

iterative alignment within inter-hsp regions
additionally, cgaln aligns iteratively the regions between neighboring hsps to improve sensitivity. first, the hsps are extended with gaps toward both sides. we adopt dp with x-drop-off for this gapped extension. the second step varies with the length of the inter-hsp region.  if an inter-hsp region is shorter than the lower-threshold tlow , cgaln uses standard global dp.  or else, if it is below a higher-threshold thigh , cgaln applies the seed finding and chaining approaches again with shorter-spaced seeds , and the interval regions are aligned by global dp if the longer interval is less than the given threshold tdp .  if the inter-hsp region is longer than thigh, that region is left unaligned.

at the iterative alignment step, cgaln unmasks the repetitive sequences because there might be homologous regions in repetitive  regions. by default, the dp match/mismatch scores of cgaln are set to be identical to those of blastz, derived by chiaromonte et al.  <cit>  with the gap open and extension penalties of  <dig> and  <dig>  respectively.

evaluation method
it is difficult to evaluate the accuracy of genomic alignment because of the lack of "true" alignment data  <cit> . in this paper, we focused our attention on the orthologous protein-coding genes and corresponding coding exons. this approach has obvious drawbacks, as most genomic alignment programs, including cgaln, are designed to find not only orthologs but also other homologs. moreover, alignment of non-coding genes and intergenic regions can be misinterpreted in our procedure. however, we expect that this kind of imprecision would not much affect the evaluation of the relative performance of various methods.

for the example shown in figure  <dig>    

and   

for a mammalian chromosomal pair, sensitivity is evaluated as before, in which homologous exons are considered homologous regions. however, it is dificult to evaluate specificity because the biologically significant regions that hold large amounts of the entire genome are not clear. in this examination, we counted the total length of generated hsps  +  +  +  in figure 3) as an indicator of specificity, for if the total hsp length from one alignment program is considerably greater than that from other programs with the same sensitivity, the program may be judged to have low specificity. we also evaluated specificity with a human chromosome  <dig> - mouse chromosome  <dig> pair. human chromosome  <dig> is considered completely orthologous to mouse chromosome  <dig>  <cit> , and the alignment result of human chromosome  <dig> and mouse chromosome  <dig> should coincide with that of human chromosome  <dig> and the whole genomic sequence of mouse. therefore, specificity can be evaluated as   

where len20- <dig> is the total length of hsps for human chromosome  <dig> vs. mouse chromosome  <dig>  while len20-all is that for human chromosome  <dig> vs. whole mouse genome.

preparation of data
we obtained the whole-genome sequences of escherichia coli cft <dig> , e. coli k <dig> , and salmonella typhimurium  from ncbi http://www.ncbi.nlm.nih.gov/. before applying these genomic sequences to alignment programs, we masked repetitive sequences by maskeraid  <cit>  with default parameters. we also prepared the whole-genome sequences of human  and mouse  from the ucsc genome browser http://genome.ucsc.edu/. these human and mouse genome sequences were already soft-masked, and we did not use any masking tool. we also downloaded the latest version  of korean individual  genomic sequence  <cit>  from the ftp site ftp://ftp.kobic.kr/pub/kobic-koreangenome/.

our examination requires reference data on the locations of homologous regions on the input sequences. to obtain such a reference dataset, we first collected sets of orthologous gene pairs. for bacterial genomes, we used mbgd   <cit>  for this purpose. mbgd is a database for comparative analysis of microbial genomes, and possesses data on orthologous gene clusters of bacteria. while cog  <cit>  is well known as an orthologous gene database, we preferred mbgd because mbgd is better than cog at clustering orthologous genes in more detail. data on orthologous gene pairs between human and mouse were obtained from refseq http://www.ncbi.nlm.nih.gov/refseq/ and ensembl http://www.ensembl.org/. next, we aligned corresponding cdna sequences of all gene pairs by the standard local dp algorithm  <cit> . finally, we located each gene on the reference genome. for bacterial pairs, the information on location was obtained from genbank. for mammalian pairs, we mapped the cdna sequences on the respective genomic regions by spaln  <cit> . from  <dig> original gene pairs,  <dig> pairs  could be mapped on the reference genomes for the homologous genomic regions. as 97%  cdnas were mapped on the reference genomes with 100% identity and the other genes were mapped with more than 95% identity, we regarded these data as valid. by combining the cdna alignment and the mapping coordinates, we obtained the homologous exonic regions on the genomes.

programs used for tests
to compare the performance of our algorithm with other leading programs presently available, we developed the cgaln program that implements the above-mentioned algorithm in c on a linux platform. we report on comparisons of the accuracy and computational speed of cgaln with those of blastz, avid, and nucmer. blastz is one of the principal pairwise alignment programs for long sequences, and is used as an internal engine of several multiple genomic sequence alignment programs, such as multipipmaker  <cit> , tba, and multiz  <cit> . we examined blastz with two sets of parameter values; with the default parameter set and with the tuned parameter set . the option "t = 2" disregards transitions as matches; this speeds up computation but slightly reduces sensitivity. the option "c = 2" directs "chain and extend", which helps to reduce false positives. avid is also a fast and accurate genomic alignment program, but it is a global aligner and not suitable for the alignment of genomes with large rearrangements. we applied avid only to bacterial genome pairs. nucmer is a variant of mummer  <dig> . it clusters the matches of mummer  <dig>  and tries to align the non-exact regions between the matches by dp.

although there are other genomic alignment tools, such as chaos, lagan, slagan, dialign, glass, and waba, they are either too slow to execute or their source codes are not available. all experiments were performed on a  <dig>  ghz core2quad  with  <dig> gb memory.

RESULTS
parameter tuning
preliminary examinations indicated that the performance of cgaln depends strongly on the outcome of ba, and hence a proper choice of parameter values at this level is essential, especially for distantly related genome pairs. we tested cgaln with various block sizes and k-mer sizes, and found that, if appropriate threshold values for "significant" colonies tcol are used, there is no remarkable difference in accuracy or computational time in a wide range of block sizes. however, if a block is too large, computation will be slow because a lot of spurious hsps tend to be generated within block cells. thus, block sizes between  <dig>  bp and  <dig>  bp are proven to be almost equally appropriate for both bacterial and mammalian genomes. it is desirable to automatically estimate the optimal tcol value for a given set of block sizes, k-mer size, and overall divergence between the sequences under comparison. in this study, we first tuned tcol for default block size and k-mer size , and then derived an empirical rule applicable to other block sizes:   

where rb is the ratio of the given block size to the default block size.

for a given k-mer size, we use the relation:   

where kdif f is the difference between the given k-mer size and the default k-mer size. although these empirical rules work satisfactorily, a theoretically supported tuning algorithm remains to be established. we set the default value as follows: block size =  <dig>  tcol-default =  <dig>  gap penalty at ba d = tcol-default/ <dig>  these parameters can be changed by selecting various options.

alignment of bacterial genomes
we first examined the performance of cgaln in comparison with blastz, avid, and nucmer for two sets of pairwise alignments of bacterial genomes:  e. coli cft <dig> vs. e. coli k <dig> , and  e. coli cft <dig> vs. s. typhimurium .

comparison of the performance of cgaln with other programs for e. coli cft <dig> vs. e. coli k <dig>  the length indicates the total length of generated hsps. sn and sp indicate sensitivity and specificity, respectively. "-x4000" of cgaln indicates that the threshold tcol was set at  <dig> 

comparison of the performance of cgaln with other programs for e. coli cft <dig> vs. s. typhimurium. "-x4000" of cgaln indicates the threshold tcol was set at  <dig> 

blastz with the default parameters produced a lot of spurious alignments, which resulted in high sensitivity but low specificity. with tuned parameters, blastz improved the specificity and computational time but decreased sensitivity. avid, a global alignment tool, shows high sensitivity and specificity in the intra-species comparison . however, it cannot consider inversion and is proven to be insensitive and not specific in interspecies comparisons . moreover, avid consumes a lot of memory, about  <dig>  gb. nucmer is fast and more memory-efficient than cgaln but is much less sensitive. in , nucmer could identify about 82% of all genes, but the coverage of almost all genes was low , possibly due to the use of long seeds , and so it is applicable only to closely related sequence comparisons. table  <dig> and table  <dig> show that cgaln is the fastest and second most memory-efficient among these programs, with high accuracy. compared with blastz with tuned parameters, cgaln is twice as fast and more space-efficient, comparably sensitive, but less specific. this inferiority in specificity is due to overalignment at ba. cgaln with the "-fc" option  could improve specificity to a level comparable to that of tuned blastz. however, it is not always better to use this option, as there is a trade-off between sensitivity and specificity.

alignment of mammalian chromosomes
we also compared the performance of cgaln with that of blastz and that of nucmer on two kinds of mammalian homologous chromosome pairs:  human chromosome  <dig>  vs. mouse chromosome  <dig> , and  human chromosome x  vs. mouse chromosome x . the numbers of orthologous gene pairs on  and  are  <dig> and  <dig>  respectively.

the results are summarized in table  <dig> and table  <dig>  we applied blastz to two types of input sequences:  intact chromosomal sequences, and  chromosomal sequences split into chunks of  <dig> mb with  <dig> kb overlaps. the third rows of table  <dig> and table  <dig> labeled with "*" show the results obtained with the split sequences. the time for splitting and uniting is not included. blastz with the default parameters resulted in nearly the same accuracy in the cases of  and  above. this is not surprising, because blastz with the default parameters does not chain hsps. as in the case of bacterial genomes, the results of blastz with the default parameters were sensitive but not specific, and the computation was slowest among all of the programs and settings examined. the low specificity  and the large hsp length ) indicate that blastz generates a lot of repetitious hsps, although we used masked sequences. the "c = 2" option improved the specificity of blastz drastically, and the "t = 2" option reduced the computational time with a slight decrease in sensitivity. however, when applied to the intact sequence pair of chromosome x, the tuned blastz missed some long homologous regions , which resulted in poor exon coverage . with the split sequences, this deficit was not observed , while specificity declined because filtering by the chaining process was not sufficient. in the case of the chromosomal pair , such a big deficit was not observed, possibly because of the high similarity and the small number of rearrangements between the two chromosomes. the consumed memory of blastz was large, especially for   when intact chromosomes were examined, regardless of the choice of options. nucmer was as fast and memory-efficient as cgaln in examination , but consumed twice as much memory as cgaln in examination . moreover, nucmer was shown not to be sensitive in the pairwise alignment of mammalian chromosomes.

performance of alignment programs examined on human chromosome  <dig>  vs. mouse chromosome  <dig> . the row of blastz with the symbol "*" refers to the examination on split chromosomal sequences. the threshold tcol was set to "-x2500". spmam is evaluated as the ratio of the coverage with human chr <dig> - mouse chr <dig> to that with the human chr <dig> - whole-genome sequence of mouse.

performance of alignment programs examined on human chromosome x  vs. mouse chromosome x. the threshold tcol was set to "-x2500".

we examined cgaln with two kinds of k-mer spaced seed, 11-mer and 12-mer. cgaln with 12-mer required more memory than that with 11-mer, but much less than blastz. cgaln performed better with the 12-mer spaced seed than with the 11-mer. in fact, several genes were missed with the 11-mer but identified with the 12-mer. with the 11-mer, the number of occurrences of each seed in a block often exceeds the proper range suitable for scoring by poisson distribution, which we consider the main reason for the lower performance with the 11-mer. it should be noted that with either k-mer, cgaln does not generate much noise like blastz with default parameters, nor does it cause a big deficit like blastz with tuned parameters for the intact chromosomal pair .

however, cgaln was slightly less sensitive than blastz because the nucleotide-level coverage of gene pairs in the former was slightly worse in the latter. scrutinizing the computational processes, we found that the differences in gene coverage between cgaln and blastz originate mainly when hsps are extended with gaps. in fact, we confirmed that the sensitivity of cgaln was slightly improved when the x-drop-off threshold for gapped extension of hsp or the length-threshold for dp  was augmented. the slightly smaller total length of hsps compared with those of blastz also indicated that cgaln "underaligns" the sequences. however, we question the significance of the difference in coverage, because blastz might "overalign" sequences, as the x-drop-off parameter of blastz is so large that it may improve nominal sensitivity but may align some non-homologous regions  <cit> .

application of cgaln to human and mouse whole genomes
we also applied cgaln to whole genomic sequences of human and mouse to investigate how many homologous genes cgaln had caught. in this examination, we set a threshold parameter of tcol =  <dig> and used the 12-mer seed. as the average nucleotide identity levels vary considerably among chromosomal pairs between human and mouse, it might be preferable to change tcol values depending on the chromosome pairs. however, for simplicity we used a fixed value in this examination. the computation took  <dig> m with  <dig>  gb of memory on a desktop computer. cgaln generated hsps totaling  <dig> , <dig> bp with  <dig> % average nucleotide identities. a total of  <dig> gene pairs  were identified, including  <dig> pairs  with coverage of more than 80% of their entire exon lengths. the total coverage for all genes at the nucleotide level was  <dig> %. dot plots are shown in figure  <dig>  and indicate that cgaln can be conveniently used to draw a general view of a homology map between mammalian whole genomes.

identification of human individual differences
recently, ahn et al. reported individual differences between the human reference genome sequence  and a korean individual genome  sequence  <cit> . we applied cgaln to these genomic sequences to test its ability to identify individual differences. we used tcol =  <dig> and the 12-mer spaced seed. we also used options "-fc" and "-cs" to filter out repetitive outputs at both ba and na. the results are summarized in table  <dig>  as the table shows, the generated hsps totaled  <dig> , <dig>  bp including a soft-masked region of  <dig> , <dig>  bp. the average nucleotide identity was  <dig> %. cgaln identified  <dig> , <dig> snps, 98% of those reported in  <cit>  in which  <dig> , <dig>  snps were found in masked regions. the snps not identified were embedded in entirely masked regions that were omitted in ba. cgaln also identified  <dig> , <dig> mismatches that were not reported in  <cit> . most of them are derived from ns in the sjk sequence. the others might be derived from the difference between our alignment and that of ahn et al.

result of cgaln with -fc -cs options. "pi" indicates the percent identity of hsps in total. "snp" indicates the number of identified snps reported in  <cit> , while "mismatch" indicates the number of nucleotide mismatches not reported.

discussion
with the dramatic increase in available genomic sequence data, comparative studies using these data are getting wider application, from identification of individual differences in a population to reconstruction of the long-range evolutionary history of genome organizations. such applications are becoming more and more demanding, in both speed and accuracy, for computational tools that compare whole genomic sequences. our primary aim in designing cgaln was to develop an alignment program that can handle large genomic sequences directly on a standalone computer so that it is handy and useful for a wide range of researchers. our results show that cgaln is very effective for comparing large genomes, especially of intact chromosomal sequences. cgaln is several times faster and more memory-efficient than any presently available programs for whole genome alignment; it requires less than  <dig> hours and  <dig> gb of memory to align a pair of typical mammalian whole genomes in a single run.

the main feature that distinguishes cgaln from similar tools is a coarse-grained strategy. this two-step procedure helps to restrict the regions that must be aligned at the nucleotide level; such restriction can drastically reduce the computational time and memory for genomic alignment. while there are several alignment algorithms that adopt preprocessing before detailed alignment to accelerate computation  <cit> , the sequences subjected to these algorithms are confined to small genomic regions with high sequence identity. our algorithm is unique in that it aims at alignment on a much larger scale of more distantly related sequences than other algorithms. moreover, cgaln can identify large-scale genomic rearrangements such as inversions, translocations, and duplications at ba. this feature reduces noisy outputs without missing true homologous blocks, while the detected homologous regions can be globally aligned by na. if one wants simply to take a global view of homology between two genomes, e.g., to infer gross evolutionary events that occurred after their speciation, it is enough to output the ba results obtained at the first stage, which requires much less time than na.

one issue with the coarse-grained approach is to what extent sequence divergence can be tolerated to achieve a sufficiently sensitive alignment. in this report, we have shown that cgaln is nearly as sensitive as the best existing programs for the alignment of mammalian genomes. at this moment, we are not confident that the proposed approach is also useful for the alignment of, say, mammalian vs. avian or mammalian vs. fish genomes. however, the problem of insufficient sensitivity could be resolved in several ways, such as by the use of multiple spaced seeds  <cit> , deeper recursive hsp searches, and finding initial seed matches at the translated sequence level rather than at the nucleotide sequence level.

another issue with the current version of cgaln is its ability to detect small-scale rearrangements, especially inversions, when it is applied to intra-species genome comparison. presently, cgaln can normally detect only inversions larger than the block size . to discover smaller rearrangements, we need some modifications. although the exact solution is a computationally hard problem, we have developed a heuristic method that considers inversions as small as a few hundred bases at the recursive phase applied to inter-hsp regions. preliminary examination of this modified version of cgaln on the reference human genome and a korean individual's genome failed to find additional inversions, including those suggested by  <cit> , some of which were confirmed to be palindromes rather than true inversions. obviously, it is premature to draw any definitive conclusions from a single example. however, we consider that whole genome alignment may play an essential role in controlling the quality of the outcomes of high-throughput sequencing and analyses.

CONCLUSIONS
currently, cgaln is the only program that can align a pair of whole intact genomic sequences of mammals in a single job. although how to evaluate the accuracy of genomic alignment remains an unsolved problem, our examinations indicate that cgaln is almost as sensitive and accurate as the best program available today. we believe that cgaln provides a novel viewpoint for reducing computational complexity, and contributes to other fields of sequence analysis as well as to genomic alignment.

cgaln needs very little time for ba , suggesting that cgaln is capable of extending fast multiple genomic alignment. to this end, we are developing a progressive algorithm that can properly treat rearrangements such as inversions.

authors' contributions
rn wrote the program, carried out the experiments, and drafted the manuscript. og provided the initial conception of cgaln, suggested ways to improve the code, and helped to improve the manuscript. both authors read and approved the final manuscript.

