BACKGROUND
most scientists think of a file editor as nothing more than a computer application used to produce a formatted file. it can be equipped with functionalities to facilitate the production of the desired format, but editors often force the user to adapt his/her own actions to meet the requirements of the final format. biochemical reaction modeling is a subtle process that requires a lot of creativity. but most current model editors interfere with creativity by forcing the user to focus too much attention on the mechanics of expressing the model in terms acceptable to the editing software. for example, many editors require that the addition of elements to the model follow a specific order, or else fixed default elements are imposed to make the current model syntactically valid. similar restrictions occur when renaming or deleting elements. the problem is that many editors cannot temporarily represent inconsistency in models, and so they force the user to conform his or her actions to always maintain consistency. in contrast our philosophy is that the editor should focus on user support throughout the entire modeling process. for the publishing industry, “editing” originally meant a process that “begins with the author’s idea for the work itself, continuing as a collaboration between the author and the editor as the work is created. as such, editing is a practice that includes creative skills, human relations, and a precise set of methods.”  <cit> .

today’s biochemical model editors focus more on providing a precise set of methods, often forgetting about human relations and creative skills. in implementing our new model editor, msmb, we focus on providing ways to adapt the tool response according to personal preferences. for example, the modeler can decide how a delete action propagates through model structure, or which default values to use for newly created species. msmb supports each step of model creation, providing context-dependent autocompletion and hints that help the modeler to follow a flexible path towards a final coherent and consistent sbml model. msmb collaborates with the modeler by providing visual clues about what is wrong or incomplete. we take this approach because writing a model is a creative effort in which the user should be allowed to make temporary “mistakes” and recover from them at a time that is convenient rather than having to focus on correct syntax at all times. most of the existing biochemical editors offer some of the featured just described  however at the best of our knowledge none of them implements all those features together, thus not properly supporting some of the possible modeling paths.

representational capabilities of the modeling language have a major effect on the ease or even the ability to create complex biochemical models. a powerful language can concisely express models at a higher level of abstraction, making models shorter to represent and  easier to understand. msmb provides a powerful syntax for representing multistate modeling constructs, an important concept that reduces the number of reactions needed to represent many molecular systems.

related work
currently there are many tools that can be used to edit biochemical reaction models in the form of sbml files , but most of them enforce strict coherence of the entire model at all times. celldesigner forces the user to define a species before any reaction involving that species can be defined, which might seem sensible but is a cumbersome requirement. copasi on the other hand creates all missing species automatically, which can present a problem if the user makes a typo. msmb combines the two approaches as it allows creation of reactions without prior existence of species, but can be configured to warn the user when species are automatically inserted.

we know of three tools that support multistate modeling in some form. antimony  <cit>  is a model definition language that allows users to specify parts of the model in a scripting-like language, and then combine these parts to create more complex models. while the ideas of modularity and a human-oriented language are key for antimony, the editor for the language supports only import/export to sbml and basic text editing .

bionetgen  <cit>  is widely used and supports the concept of multistate species. bionetgen allows the user to assign “sites” to a species, and each site can have more than one state. however, in the bionetgen language the states have no relationship with each other. this means that each single transition between states has to be explicitly defined by the user in a separate reaction. this makes some model changes  a manual, error-prone process done through copy-paste. this is in contrast with our compact syntax that includes a state order relation and compact predefined operators for state transitions. for example, in our syntax it is possible to define reactions that change the state of a species from the current one to its “successor” as in this single  reaction: 

  reaction definition:cdh1+clbm->cdh1)+clbm, 

  species definition: cdh <dig>  

equation  encodes a species , with one site  with consecutive integer states . equation  encodes a single reaction that represents the set of reactions where each state in the range  <dig> to maxp- <dig> is connected to its respective successor state . changing the number of sites in this model would require only a change to the numerical value of maxp. section ‘msmb multistate syntax’ provides detailed explanations of the different parts of our syntax and more complete examples.

bionetgen’s editor  offers basic import/export to sbml and a visual representation of the model with complex interconnected entities. however they do not offer autocompletion support in text editing mode or messages to guide the user toward building a valid model.

simmune  <cit>  is a suite of software tools to define molecules through specification of their submolecular components  using a graphical representation. molecules form complexes through reactions such as association, dissociation, and transformations. similarly to bionetgen, simmune focuses on individual binding interactions and a small number of transitions between different states. it does not support an explicit order between states, so each transition has to be explicitly listed by the user.

simulators for multistate systems exist for models written using the bionetgen language and simmune format. msmb does not offer a specific simulation environment because it expands the multistate representation into the equivalent non-multistate model as represent by standard sbml. this allows the user to choose any simulation and analysis software that supports the sbml format. msmb’s goal is to offer a model-building environment that simplifies the maintenance and testing of models, with an emphasis on providing order and structured operators on states, a concept that has not been included in any of the existing tools that deal with multistate modeling.

implementation
msmb is implemented in java and uses the copasi api  <cit> . msmb runs on all major operating systems, with minimal system requirements. installers, source code, user manual, and examples can be found at the msmb website .

RESULTS
msmb primary features
msmb’s spreadsheet interface is shown in figure  <dig>  the main features that differentiate this editor from existing modeling editors are listed next.



support for multistate species. a multistate species is an entity with a defined set of variables , each associated with an ordered list of states that describes different forms for the same conceptual species. for example, a protein might have multiple phosphorylation sites, each with many distinguishable states of phosphorylation . multistate species are involved in multistate reactions, which represent a collection of reactions each driven by the same kinetic law but applied to different states of the species. we introduce a compact syntax with operators  on the site’s states. this compact description for batches of similar reactions reduces the cognitive load associated with maintaining and testing different hypotheses on a given model. section ‘msmb multistate syntax’ illustrates details of the syntax on models of cell cycle regulation and mrna transcription in budding yeast.

for one model of the budding yeast cell cycle  <cit> , the original  <dig> species and  <dig> single-state reactions are reduced by 67% using msmb’s multistate representation. when necessary, the compact form of the syntax can be automatically expanded into single-state reactions in order to allow export of the model to standard sbml format.


consistency checks. every action taken by the modeler is validated against the current state of the model. if any inconsistency is found, feedback is provided to the user. what makes msmb unique in this respect is that the feedback is intended to inform without disrupting the creative flow of model development. the modeler chooses when to fix the inconsistency. msmb consistency checks interact with the user primarily in two ways:  within msmb’s spreadsheet-like interface, cells that contain problems are marked with a specific color to indicate the severity of the error. for example, if the user writes an expression involving a parameter called k <dig> that is not yet defined, the expression cell will be colored to indicate that its definition is incomplete, but the user can still decide to go on and define other elements of the model without correcting the problem.  detailed error messages that explain all outstanding errors and warnings in the model state are collected in a list and they can easily be reached by the user .


flexible autocompletion behavior. since a model is composed of many connected entities, msmb can help the user by filling related tables with customizable default values. for example, if the modeler defines a reaction like “-> a”, then s/he is implicitly saying that a species a should exist in the model. if a does not exist, the tool can define it  with default initial conditions, relieving the user of the burden of defining all the entities before using them. this autocompletion behavior is not considered appropriate by everyone, since some users prefer to define species themselves, to avoid typographical errors. msmb gives each user the freedom to decide the preferred behavior in these situations:  switch off the autocompletion completely ,  have a pop-up window that asks for a confirmation before automatically defining any other connected entity, or  do autocompletion silently in the background .


content assistance autocompletion. complex mathematical expressions can define species or global quantities, but writing complex expressions in a model containing many entities/functions can be difficult and error prone. when filling specific cells of the spreadsheet, msmb allows the user to trigger a drop-down menu listing all meaningful  entities that can be used in that mathematical expression.

detailed examples of these autocompletion behaviors, together with descriptions of other special features of the tool, can be found in the msmb user manual .


rename and delete support. deleting a model element can have major consequences. for example, deleting a species might leave dangling references in reactions and expressions. msmb walks the user through the problematic areas, and different options are provided to address issues that typically arise. the modeler is not forced to delete all elements that point to the one being deleted. a popup window offers the choice of deleting the element, assigning a new value, or leaving the inconsistency. existing tools use only the delete-all option or the cannot-delete-something-that-is-used option, which restricts the modeler’s ability to follow his/her own path in maintaining the model. limited options are good from the point of view of the tool  but make the user’s life much harder because the user must adapt his/her actions to the tool . a similar approach is used when renaming an entity. msmb offers flexibility  . all options are available from the “preferences” menu, and the modeler can decide to turn them on or off on a case by case basis.


import/export capabilities. msmb supports import from sbml and copasi formats. the model can then be modified  and exported  to sbml , copasi, or xpp. the import/export capabilities of msmb have been tested successfully with the  <dig> curated models available in the 26th release of the biomodels database  <cit>  and the  <dig> models of the sbml test suite .

msmb multistate syntax
in this section we describe a language to concisely encode multistate models. as briefly introduced before, multistate species are entities with a defined set of variables , each associated with an ordered list of states that describes different forms of the same conceptual species. multistate species are involved in multistate reactions that represent a collection of reactions derived from the same kinetic law on different states of the species. a compact syntax with operators  on the site’s states describing batches of similar reactions allows the user to define complex models in a simple, intuitive fashion.

for example, as shown in figure  <dig>  a protein named cdh <dig> is phosphorylated in each state by another protein named clbm with the same rate law. in msmb we can express the collection of phosphorylation reactions as a single multistate reaction.

in the following sections we present aspects of the syntax using specific models. in each example we highlight only the aspects of the syntax that are different from the previous examples, and many biological details of the model are omitted. the relevant literature is referenced, and versions of all complete models are available for download in the examples package of the msmb distribution.

multisite phosphorylation
this section introduces the basic elements of msmb’s multistate syntax. we illustrate the syntax with a recently published model of the budding yeast cell cycle based on multisite phosphorylation  <cit> . barik et al. built a model of the cell cycle control network based only on mass-action kinetics . in this model, chains of multisite phosphorylation reactions generate the nonlinearities needed for the cell cycle machinery to operate correctly. our concern here is to show how msmb’s multistate syntax will reduce the number of reactions and species needed to represent the model.


basic species definition. the main elements of a multistate species definition are the name, the set of sites and, for each of them, an ordered list of states. in our example, we want to model cdh1’s states of phosphorylation. we define a species cdh <dig> with a single site  whose states are integer values from  <dig> to  <dig>  in msmb syntax this can be written as 

  cdh <dig>  

msmb language syntax uses the colon as a range operator over integer numbers. it is also possible to list each distinct state separated by a comma, allowing for the definition of sites with noninteger states or nonconsecutive integer states such as s <dig> {free,bound,hidden } or s <dig> { <dig> , <dig> , <dig> }. allowing nonconsecutive states  allows to compactly encode cases of multiple phosphorylation events happening in a single step, e.g., with the definition above we have that succ= <dig>  the language does not entail any meaning to the states’ values, so the interpretation of the state change succ= <dig> is up to the modeler. if the value is an integer, msmb allows the modeler to pass this numerical value to kinetic functions . msmb also introduces the possibility of a circular list of states, connecting the last element of the list to the first for successor/predecessor operations. the circular flag available in our syntax is not used in the examples presented in this paper.


basic reaction definition. the key idea of a multistate reaction is that it encodes one reaction parametrized by a collection of states from a multistate species. for example, as shown in figure  <dig>  cdh <dig> is phosphorylated in each state by clbm with the same rate law. in msmb we can express the collection of phosphorylation reactions as 

  cdh <dig> + clbm -> cdh1) + clbm. 

this single reaction is expanded by the tool to account for the ten single-state reactions that move the state of p from each single value in the range specified in the reactant  to its “successor” state . we note three important facts about the multistate reaction shown above. 

 <dig>  “succ” is a keyword that represents the successor operator. the other available operator is “pred” .

 <dig>  operators work together with the species definition. since the species was defined as cdh <dig>  the successor of  <dig> is  <dig>  of  <dig> is  <dig>  etc. there is no implied order between the different reactions, and operators work also on noninteger states. for example with a species defined as species, the reaction species -> species) will be expanded as species -> species because the successor of the state “free” is the state “bound” in the entity’s definition.

 <dig>  msmb performs consistency checks to make sure that reactions are consistent with the species definition. using cdh <dig> as a reactant of the above reaction would cause an error because the successor of state  <dig> is not defined for species cdh <dig> 


aggregated quantities. a species can be in different states, and many of those states can collectively affect other elements of the model . for such cases, we provide the “sum” operator, 

  sum. 

“sum” can be used in any mathematical expression to represent the sum of the concentrations of the species in the different states. a common use for this operator is to define an element  which represents the total amount of phosphorylated cdh <dig>  as shown in . then cdh1t can be used in a kinetic law as a parameter that controls the degradation of another element in the model . for more details about the specifics of the model, we refer the reader to model barik <dig> msmb included in the examples package of msmb.

the “sum” operator takes the name of the species as the first argument , followed by a semicolon-separated list of the site restrictions that the summation should range over. in the example above, we want to sum only over the states of p between  <dig> and  <dig>  there are many variations on the sum operator. for example, sum will sum all the states, with no restrictions. the user can associate a weight function with each term of the summation, and the weight function can depend on the state value or other parameters in the model. for more examples, we refer the reader to the msmb user manual.


variable indexes. in order to make models more flexible and easy to maintain and test, we allow ranges to be expressed using variables instead of integer constants. the disadvantage of hard-coded numbers is that if they change at any point over the lifecycle of the model, changes to all of the associated reactions/expressions are required to make sure that everything is consistent with the new values. msmb will automatically generate a list of errors and inconsistencies, but making the changes themselves is the modeler’s responsibility. we provide an easy way of expressing ranges through external variables, called global quantities. in this way the change of their numerical values will be carried out seamlessly by the tool. a species definition that uses variable ranges would look like 

  cdh <dig>  

a reaction could look like 

  cdh <dig> -> cdh1). 

both definitions assume that “low” and “high” are defined in the model as global quantities. the idea behind this approach is that, for example, the “succ” operator usually ranges from the first state of the site definition to the penultimate state. using the variable instead of hard-coded numbers  allows the modeler to test the effect of different phosphorylation chains, only changing the value of the “high” variable. msmb will expand the entire model automatically with the new ranges.

note that all variables used in the ranges must be statically computable. that is, their initial expression should be either a number or an expression involving numbers and/or other fixed global quantities. if the initial expression computes to a noninteger value, it will be rounded down when used in the contexts shown above.

variables used in ranges in reactions and expressions do not necessarily have to be the same as in the species definition. for example, a modeler can use a different variable “middle” to restrict the range of the sum in 

  sum. 

standard consistency checks will make sure that the range expressed with variables is coherent with the species definition at all times, and meaningful error messages would be shown if that is not the case.


exported model and simulation results. applying the concepts explained above on all elements of the model in  <cit> , we can build the msmb version of the multistate phosphorylation model of the buddying yeast cell cycle. the model file  is included in the msmb package. figure  <dig> shows the result of exporting the model to copasi and running a simulation for  <dig> minutes.

the version of the model using msmb multistate syntax contains  <dig> species and  <dig> reactions, while the expanded single-state reaction model contains  <dig> species and  <dig> reactions. this shows that our syntax allows for a reduction in the size of the model to about one third of the original size.


multistate builder window. a popup window in msmb helps the user unfamiliar with our multistate syntax to define a multistate species. all of the rules about the site’s definition and format are laid out in the user interface, allowing the user to interactively work through the definition of the multistate species using textfields with autocompletion, dropdown menus, and radio buttons. in this way the user can become familiar with the general syntax, and will be more confident in using the more complex constructs of our grammar.

in the “multistate builder” window the user can also specify the initial value of each single different state of the multistate species . the “multistate builder” window lets the user change the name of a site and have that change propagated by the tool to all instances where the species is used.

multiple phosphorylation: regulatory proteins
kapuy et al.  <cit>  analyzed how different phosphorylation mechanisms can influence the general properties of a model. they note that phosphorylation on multiple sites can occur progressively  or distributively . in the latter case it may be important to consider two further options: whether the sites are phosphorylated in a specific order or the events can happen in a disordered manner.

kapuy et al. <cit>  study how the properties of a distributive multistate reaction like 

  xp + kin -> xp) + kin 

change according to different rate law assumptions . the reaction above assumes that a species  has different phosphorylation sites  and that the number of phosphorylation sites is stored in the site called i. the phosphorylation reaction  is carried out by a kinase . given the assumption of the model  in the ordered case, the rate is the same for each step of the chain, so a simple mass-action rate law with single rate k is enough to encode the ordered distributive model. for the disordered mechanism, the rates of phosphorylation depend on the number of unphosphorylated sites of xp, which means that the general rate law can be expressed as  ·k·xp. this second case can be easily expressed in msmb, using a user defined rate law  to express a function  that takes as arguments the total number of sites , the current state value , the kinetic constant  and the concentration of the reactants . the definition of the two cases in msmb format is shown in table  <dig>  to switch between the two cases, the modeler needs to only change the rate law of the reaction.

case  <dig> depends on the number of unphosphorylated states, so its rate law has to be expressed using a user defined  type  with a rate law function, called “dis”. the function definition is also shown. each formal parameter has a different type .

kapuy et al.  <cit>  mention that a progressive phosphorylation mechanism is also possible. in the current version of our multistate syntax it is not directly possible to encode the progressive mechanism because only the succ/pred operators are available to the user, which is sufficient support for the distributive case. however, we are planning an extension of the operators that will allow modelers to define their own next function, thereby encoding any possible “jump” between different states of a site.

eukaryotic mrna translation machinery
this section presents advanced features of the msmb multistate syntax that allow modelers to deal with complexes of proteins and to express rate laws depending on groups of multistate species. for an example we use a model of the eukaryotic mrna translation machinery. firczuck, et al.  <cit>  present a model that represents a  <dig> codon mrna string on which ribosomes move to perform their translation task. the modelers chose this mrna length because it allows certain key properties of translation — the effects of the physical size of the ribosome on the accessibility of the start codon and the potential for “queuing effect” along the string — to be modeled. we show how all these concepts can be encoded in msmb syntax in a straightforward but flexible way. our msmb version allows the model to be scaled up to a more realistic  <dig> codon mrna string with only a few changes to variable values. for more information about the model structure and the biological meaning of the species/reactions shown below, we refer the user to the original publication.


transfer of state between multistate species. in a model, different species may need to share multistate site values. for example, the model of  <cit>  contains six different complexes that are encoded as six separate species with names that remind the modeler what the different components in the complex are. we show how to encode complexes in msmb in the next subsection; however, in our syntax it is possible to encode species exactly as in the original publication. the “transfer of state between multistate species” allows a smooth encoding of the ideas in the original model, with the advantage of compressing the current position of a species on the mrna string in a multistate site, instead of using the “_number”-added-to-the-name approach of the original publication, which is not scalable nor easy to maintain.

an example of a reaction using the “transfer state” concept is 

 aatrna_eef1a_gtp+80s-> 80s_aatrna_eef1a_gtp. 

this reaction assumes that three species are defined in the model: a regular species aatrna_eef1a_gtp, a multistate species 80s with one site codon, and another multistate species 80s_aatrna_eef1a_gtp with one site codona. the concept of “transfer state” can be seen in the product of the reaction, where the value of the codon site of the product is taken from the value of the codon site in the reactant. note that even if the name of the site of the two species is the same, the “reactantname.reactantsite” format has to be used because, in general, the assignment can be done between sites with different names and/or different reactant species sharing the same site name. standard consistency checks will make sure that the definitions of the two species are compatible and that the assignment does not refer to nonexisting states of the product.

the concept of “transfer state” can be combined with other concepts in the multistate syntax  to write more complex reactions, such as: 

 80s_aatrna_eef2_gtp->80s_trna)+eef2_gdp. 

this reaction illustrates the fact that not only the position of the species is moved forward  but also the “state” of the species is changed and encoded with a different species name. this reaction is restricted to a specific set of positions  because the rate of this reaction is influenced by the state of other proteins in the system that may be in following positions on the mrna string . this requires the single reaction of “translocating on the mrna string” to have three separate cases, driven by different rate laws. our multistate syntax allows us to write the three cases in a straightforward way. we define a criticalcodon variable that represents the threshold value for these cases. the reaction above represents the first case. a reaction only happening for 80s_aatrna_eef2_gtp would be the second case. the final case would restrict the reactant to the range “criticalcodon+1:lengthmrna”. the last case is driven by a simple mass action rate law, but the first two require more sophisticated rate laws that will be illustrated in the next section. for the motivation of those kinetic choices, we refer the reader to the original publication  <cit> .


aggregate reaction modifiers. in special cases, the rate of a reaction may be influenced by a specific subset of a multistate species. to encode this, multistate species can be defined with assignments depending on specific values of a state. to clarify this scenario we use the reaction with complex transfer state explained in the previous subsection, renaming the species as r , p <dig>  and p <dig> , the site codon as c, and the variable criticalcodon as d, yielding 

  r -> p1) + p2; m. 

we introduce a modifier  species m, whose site value c will take the value of the site c in the reactant r . the definition of m will be a special case of multistate as m, with no state values for c, but defined with an assignment using the sum operator as 

  m assigned the value sum -> p1+p2; m,m=r+…+r;r -> p1+p2; m,m=r+…+r,… 

once m is introduced as a modifier of the reaction and properly defined to range over a specific subset of the reactant state values, species m can be passed as a parameter in any function, and any rate law can be expressed in terms of m as required by the model. for more details about the specifics of the model, we refer the reader to the model firczuck <dig> msmb included in the examples package of msmb.


complex builder window. msmb has also the notion of a complex, which is a species composed of other species connected to form a single unit. the complex can be used in any context in which a regular species appears, but it has the advantage that if one of its components is changed by the user  those changes are seamlessly carried to all the complexes that contain that  species. msmb does not track each individual bond formation/breakage, but we help the user manage complex formation/breakage through the “complex builder” window .

the “complex builder” window is similar to the “multistate builder” window, as it can be used to specify the initial condition of different states of the complex and it must be used to make changes to its components. this interactive way of building complexes offers the user the chance to specify the complex with a few clicks and let msmb deal with the more complicated issues .


exported model and simulation results. applying the concepts explained above on all elements of the model in  <cit> , we build the msmb model of the mrna translation machinery. the model file firczuck <dig> msmb is included in the examples package of msmb. figure  <dig> shows the result of exporting the model to copasi and running a simulation for  <dig> seconds.

the model using msmb multistate syntax contains  <dig> species and  <dig> reactions, while the expanded single-state model contains  <dig> species and  <dig> reactions, a reduction in the size of the model to less than one third of the original size. since we use the variable range concept to encode the model with  <dig> codons, changing the model to one that contains  <dig> codons requires only a change of a single numerical variable and msmb, at export, will expand it to  <dig> reactions and  <dig> species. testing different hypotheses about the size of ribosome occupancy  would require only a change in its numerical value, and msmb would generate the new model for further testing.

CONCLUSIONS
we have implemented a new flexible model editor that helps users write complex biochemical reaction models in a compact way. msmb offers extensive user customization and functionalities that facilitate model creation . msmb offers import/export functionality to/from sbml and copasi, allowing a smooth integration of msmb with any existing simulation/analysis tools that use these standard formats.

msmb introduces a new compact and powerful syntax for multistate species, which have not been fully supported by many existing sbml-related tools. the importance of the multistate concept is also acknowledged by the sbml community through the ongoing effort of defining a multi package for the sbml level  <dig> specification . the multi package’s purpose is to define “object structures for representing entity pools with multiple states and composed of multiple components, and reaction rules involving them”, toward which the proposed compact multistate syntax contributes.

msmb has been tested on different models developed by tyson’s group and other published multistate models, as well as on all models in the biomodels database and in the sbml test suite. in the future, we plan to implement user-defined operators on states and more aggregated quantities functions, as well as more features to improve the user experience and productivity.

availability and requirements
 <dig>  project name: msmb

 <dig>  project home page:http://www.copasi.org/softwareprojects

 <dig>  operating system: platform independent

 <dig>  programming language: java

 <dig>  other requirements: java  <dig>  or higher

 <dig>  license: artistic license  <dig> 

endnote
a note that the names of the species are quite elaborate, but for msmb they don’t have specific meaning. it is the modeler’s decision to use intricate names that may help the readability of the model in terms of its biological interpretation. the need for intricate species names motivated the implementation of msmb’s name autocompletion mechanism.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
ap implemented the source code and drafted the manuscript. cas, ltw, sh and jjt initiated and coordinated the project. all authors participated in extensive discussions leading to the definition of the multistate syntax. all authors participated in and approved the final manuscript’s preparation.

