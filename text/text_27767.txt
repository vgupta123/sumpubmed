BACKGROUND
with recent advances in dna sequencing technology, there is much interest in using genomic data sets to infer phylogenetic trees. however, evolutionary events such as gene duplication and loss, incomplete lineage sorting , and lateral gene transfer can produce discordance between gene trees and the phylogeny of the species in which the genes evolve . the gene tree parsimony  problem  <cit>  provides a direct approach to infer a species phylogeny from discordant gene trees. given a collection of gene trees, this problem seeks a species tree that implies the minimum reconciliation cost, i.e., the fewest number of evolutionary events that can explain discordance in the gene phylogenies.

one of the most widely studied variants of the gtp problems is the gene duplication  problem, in which the reconciliation cost is based on gene duplication events. the gd problem is w <cit> -hard when parameterized by the number of gene duplications events and hard to approximate better than a logarithmic factor  <cit> . one way to cope with this intractability in practice is using heuristics  <cit> . although these heuristics do not guarantee optimal solutions or any non-trivial theoretical bound, in many cases they appear to have produced credible estimates  <cit> . however, the lack of performance guarantees makes the pursuit of exact solutions for the gd problem desirable.

exact solutions can be found by exhaustive search for every np-complete problem, but run times typically become prohibitively large for even rather small sized instances. however, exact algorithms that are substantially faster than exhaustive search have been progressively developed . unfortunately, little work has focused on such algorithms for the gd problem  <cit> . here, we describe an ilp formulation solving the gd problem exactly and demonstrate its performance on both simulated and empirical data sets.

related work
exact solutions to the gd problem were obtained by exhaustively searching all possible species trees in data sets with up to  <dig> taxa  <cit> . more recently, a branch-and-bound algorithm to identify exact solutions for the gd problem was introduced  <cit> . this algorithm was applied to a data-set consisting of  <dig>   <dig> gene trees with 29-taxa, but it did not run to completion. however, the branch-and-bound algorithm was able to solve this instance on reduced search spaces that resulted from providing some of the relationships in the species tree. although constraining the search space for a species tree can help solving difficult instances of the gd problem, there are no theoretical guarantees to support this approach.

ilp formulations have provided an effective strategy to solve moderately sized instances of several np-hard phylogenetic problems . most similar to the gd problem, ilp formulations have been introduced for the deep coalescence problem, the variant of the gtp problem in which the reconciliation cost is based on the deep coalescence events  <cit> . these formulations solved instances with up to  <dig> taxa. however, perhaps due to the difficulty of directly expressing gene duplications in terms of linear equations, there have been no ilp formulations for the dp problem.

our contributions
we introduce a novel approach to solve the gd problem exactly by describing the first ilp formulation for this problem. this solution is made possible by revealing an alternate description of the gd problem, called the triple inconsistency problem, which expresses gene duplications in terms of rooted triples. rooted triples are rooted full binary trees with three leaves, and are the smallest unit of phylogenetic information. they, together with an equivalent presentation of species trees through cluster hierarchies, provide the fundamental elements of our ilp solution.

we demonstrate that our ilp formulation can solve non-trivial instances with up to  <dig> taxa and  <dig>  gene trees. this greatly improves upon the largest  instances of the gd problem that have been solved exactly to date. finally, we use the ilp formulation to address the relationships among the major seed plant lineages.our ilp formulation was able to solve the gd problem exactly for a 12-taxon data set using  <dig>  gene trees.

methods
preliminaries
basic definitions
a rooted tree t is a connected and acyclic graph consisting of a vertex set v, an edge set e, and that has exactly one distinguished vertex called root, which we denote by rt. let t be a rooted tree. we define ≤t to be the partial order on v, where u ≤t v if v is a vertex on the path between rt and u. moreover, we write u <>t v if neither u ≤t v nor v ≤t u is true. the set of minima under ≤t is denoted by l and its elements are called leaves. we call u a child of v if u ≤ v and {u,v} ∈ v. the set of all children of v is denoted by cht. for a vertex v ∈ v we denote by t the subtree of t that consists of all vertices u ≤t v. the least common ancestor of a non-empty subset x ⊆ v, denoted as lcat, is the unique smallest upper bound of x under ≤t. t is called full binary if every vertex has either two or zero children. throughout this work, the term tree refers to a full and rooted binary tree.

gene duplication  problem
the terms species tree and gene tree refer to trees that represent the evolutionary history of a gene family or species respectively.

to compare a gene tree with a species tree, a mapping from each gene in the gene tree to the most recent species in the species tree that could have contained the gene is required.

definition  <dig> . let g be a gene tree and s a species tree. a leaf-mapping from g to s is a functionlg,s : l → l. the extension mg,s: v → v of the leaf-mapping lg,s is the mapping defined by mg,s := lcas).

to simplify the exposition we shall assume that leaf-mappings are injections, and w.l.o.g. we identify the genes with the species from which they were sampled. after describing our ilp solution for identity leaf-mappings, we extend this formulation to cover non-injective leaf-mappings.

definition  <dig> . let s be a species tree. a gene tree g is comparable to s, denoted by g ⊢ s, iflg,s exists. a set of gene trees is comparable to s, denoted byg ⊢ s, if g ⊢ s for each gene tree g ∈ g.

we shall adopt the following notation: we use s for a species tree, g for a set of gene trees that is comparable to s, and g for an gene tree in g.

definition  <dig> . a node g ∈ v is a duplication  ifmg,s ∈ mg,s).

for consistency we follow the common practice to call what is stated above a definition, even though it is actually a theorem  <cit>  that follows from the gene duplication model  <cit> .

definition  <dig> . we define the following duplication costs:

 <dig>  dup := |{g ∈ v: g is a duplication}| is the duplication cost from g to s.

 <dig>  dup := ∑g∈g dup is the duplication cost from g to s.

 <dig>  dup := ming⊢t dup is the duplication cost ofg.

problem  <dig> ).

instance: a set of gene trees g.

find: the duplication cost dup, and a species tree s* such that dup = dup.

the triple-inconsistency problem and its equivalence to the gd problem
a rooted triple is a tree with three leaves. the rooted triple with leaves x, y, and z is denoted xy|z if the path between x and y does not intersect with the path between z and the root. a rooted triple is displayed by a tree t if lcat ≤t lcat ). the set of rooted triples xy|z displayed by tree t that are rooted at vertex u ∈ v, ) is denoted by tript, and the set of all triples displayed by t is denoted by trip.

definition  <dig> -inconsistency). a rooted triple t ∈ trip is said to be inconsistent with s if t ∉ trip. a vertex v ∈ v is called t-inconsistent with s if there is a rooted triple in tripg that is inconsistent with s.

definition  <dig> . we define the following t-inconsistency costs:

 <dig>  tin := |{v ∈ v: v is t-inconsistent with s}| is the t-inconsistency cost from g to s.

 <dig>  tin := ∑g∈g tin is the t-inconsistency cost from g to s.

 <dig>  tin := ming⊢t tin is the t-inconsistency cost of g.

problem  <dig> -inconsistency).

instance: a set of gene trees g.

find: the t-inconsistency cost tin, and species tree s* such that tin = tin.

theorem  <dig> . let u ∈ . then u is a duplication w.r.t. s if and only if u is t-inconsistent with s.

proof. let x := mg,s.

suppose u is a not a duplication. let ab|c ∈ tripg. we will show that ab|c ∈ trip. by the definition of ab|c ∈ tripg we know that lcag = u, and together with our assumption that g is fully binary it follows that u has two children v and w, where w.l.o.g. a, b ∈ l) and c ∈ l). let v′ := mg,s and w′ := mg,s. from a, b ∈ l) and c ∈ l) follows that a, b ∈ l) and c ∈ l) respectively. now, since u is not a duplication we have v′ <>s w′. otherwise, we would have w′ ≤s v′ or v′ ≤s w′ from which x = v′ or x = w′ would follow respectively; contradicting that v is not a duplication. hence, from v′ <>s w′ and a, b ∈ l) and c ∈ l) follows that ab|c ∈ trip.

suppose u is a duplication, and thus we have x = mg,s for a child v ∈ ch. so u is not a leaf in g, and since g is fully binary it follows that there are two distinct vertices a, b ∈ l) such that lcas = x. therefore, x has two children y and z such that a ≤s y and b ≤s z. now we distinguish different cases for the vertices a and b based on their possible order relation to the children of u. since g is fully binary and v is a child of u, there exists a child w ∈ ch where w ≠ v. now, we have the following cases.

case 1: a ≤g v, b ≤g v: let c ≤g w. then ab|c ∈ tripg. further c ≤s y or c ≤sz and with a ≤sy and b ≤s z, it follows that either ac|b ∈ trips or bc|a ∈ trips. hence, u is t-inconsistent as desired.

case 2: a ≤g v, b ≤g w: we know that x has two children y and z and that mg,s = x. therefore there exist c ≤s y and d ≤s z such that lcas = m where c,d ∈ l). from the order relations a ≤s y, d ≤s z and d ≤g v, b ≤g w and a ≤g v, b ≤g w, it follows that a, b and d are pairwise different. therefore the rooted triples ad|b ∈ tripg and bd|a ∈ trips are well defined, from which follows that the vertex u is t-inconsistent.

case 3: a ≤g w, b ≤g w or b ≤g v, a ≤g w: similarly to the previous cases it follows that u is t-inconsistent

from theorem  <dig>  the next corollary follows.

corollary  <dig> . the t-inconsistency problem is a mathematical equivalent formulation of the duplication problem  = tin).

notation used in our ilp solution.

let x := ∪g∈g l be the taxon set, n := |x|, m := |∪g∈gtrip|, and k := |g|. it follows that Σg∈g|g| = o.

formulating candidate species trees in terms of cluster hierarchies
here we formulate constraints that describe all species trees that are possible candidates for solving the t-inconsistency problem, that is, all trees to which the given gene tree set g is compatible. based on our assumption that the leaf label function is the identity function, these are all trees with the leaf set x. our ilp formulation is based on an alternative way of describing trees by specifying their clusters through a hierarchy of subsets of x.

definition  <dig> . let t be a tree. for each vertex v ∈ v we define the cluster at v as {u ∈ l : u ≤t v}, i.e., l). we shall denote the set of all clusters of t byh.

definition  <dig>  binary hierarchy). let f be a finite set. we call a set h of non-empty subsets of f a  binary hierarchy on f if the following properties are satisfied:

 <dig>  trivial set property: f ∈ h and {v} ∈ h for each v ∈ f

 <dig>  compatibility property: every pair of sets a and b in h is compatible; that is a ∩ b ∈ {a, b, Ø}.

 <dig>  cardinality property: |h|= 2|f| –1

a hierarchy is defined as a binary hierarchy without requiring the cardinality property. there is a well-known and fundamental equivalence between hierarchies and trees that are not necessarily binary . the next result follows from this equivalence and the fact that a binary tree over l leaves has exactly 2l –  <dig> clusters.

theorem  <dig> . let h be a set of non-empty subsets of a set f. then there is a binary tree t such thath = h if and only if h is a binary hierarchy on f.

since trees and binary hierarchies are equivalent, we use these terms interchangeably from now on. now we formulate constraints that describe the hierarchies on x using the binary matrix presentation.

binary matrix. we describe 2n –  <dig> subsets of a hierarchy on x using a binary matrix m with a row for each species in x and 2n –  <dig> columns, where each column p represents the set {a ∈ x: m = 1}.

excluding sets satisfying the trivial set property. we consider only the n –  <dig> non-trivial sets that can be part of a binary hierarchy on x. to do this, we add the following constraints that allow only non-trivial sets. for each column p of m, we require

 <dig> ≤ Σa∈xm ≤ .

uniqueness. to ensure that a set of subsets is uniquely represented by the columns of m, we enforce a linear order of a binary interpretation of these columns. suppose that x = {a <dig> …,an} are the rows of m, then this order is achieved by adding the following  constraints that apply to all pairs of adjacent columns p and q in m.  

compatibility. incompatibility can be tested directly by using the three-gamete condition . an incompatibility occurs for two columns p and q in m if and only if there exist three rows a, b and c in m that contain the gametes , , and  in p and q respectively ,m) = , ,m) = , and ,m) = ). to identify if a certain gamete  ∈ {, , } exists for p and q, we define a set of binary variables c under the following constraints over all rows a in m.

c ≥ –m + m,

c ≥ m – m,

c ≥ m + m –  <dig> 

these constraints capture that c =  <dig> as long as m = x and m = y is satisfied for a gamete  in a certain row a in m. however, the reverse condition does not necessarily hold true without adding further constraints. to guarantee that clusters p, q are compatible, we require the following constraints

c + c + c =  <dig> 

number of variables and constraints. there are o variables for the matrix m, and o variables of the type c. o constraints are needed to exclude trivial sets and to guarantee uniqueness, and o constraints guarantee compatibility. in summary, there are o variables and o constraints to describe all candidates for the species tree.

formulating the t-lnconsistency problem. to formulate the t-inconsistency problem, we first describe variables t that detect whether a rooted triple is displayed by the tree presented by m. then we describe variables d that detect if g is t-inconsistent by using the variables t. finally, we formulate the objective of the t-inconsistency problem based on the variables d.

variables t. we describe the binary variables t that are  <dig> exactly if a rooted triple over the leaf set {a, b, c} with topology  ∈ {, , } is displayed by the tree that is presented by m. the parameters a, b, c are rows in m, and the settings  <dig>   <dig>  and  <dig> of  refer to the rooted triples bc|a, ac|b and ab|c respectively. for each column p in m, we introduce the following constraints.

t ≥ –m + m + m –  <dig> ;

t ≥ m – m + m –  <dig> ;

t ≥ m + m - m –  <dig> ;

t + t + t =  <dig> ,

since a rooted triple is uniquely resolved in a tree.

variables t, t, and t are constructed for every triple {a, b, c} for which a rooted triple is displayed by a gene tree in . thus, there are o variables of this type. for each variable we have o constraints, which results in o constraints overall.

variables d. we express the t-inconsistency of each vertex g ∈ v where g ∈ g by the binary variable d. the variable is  <dig> if g is t-inconsistent with the tree described by matrix m, given the following constraints

d ≥  <dig> – t ,

where the rooted triple over the leaf set {a, b, c} and topology xyz is an element in tripg.

variables d are constructed for each internal vertex of a gene tree in g, which results in o variables. intuitively, a constraint is constructed for each rooted triple that is displayed by a gene tree in g, which yields o constraints. however, the following observation reduces the number of such constraints to o.

let u ∈ v such that tripg ≠ Ø, {v,w} = ch, a ∈ l) and b ∈ l). a rooted triple xy|z is in tripg if and only if all ax|b, ay|b, and bz|a are in tripg. therefore, instead of enumerating all rooted triples in tripg  in each gene tree g), we only need to enumerate a number of o rooted triples to represent tripg while detecting if u is t-inconsistent  constraints over all).

t-lnconsistency objective. this objective is expressed by the following expression.

min Σg∈vd.

once the optimal objective cost is found, a unique tree corresponding to the cost can be constructed from m. it is worth noting that an instance of unique optimal tree does not ensure an unique optimal solution to the corresponding ilp due to relaxed constraints for variables c. although this can be addressed by adding additional constraints, the correctness of the objective value and the resulting tree is not affected.

number of variables and constraints. in summary, there are o variables, and the number of constraints is o.

handling non-injective leaf mappings
a leaf mapping lg,s is non-injective if and only if there is a vertex u ∈ v with distinct children v and w such that lg,s))Ølg,s)) ≠ Ø; and if the latter holds true, it follows that u is a duplication. therefore, it can be determined if u is a gene-duplication regardless of the topology of s. by pre-processing all such determined duplication vertices, the leaf-mapping over the remaining internal vertices of g can be made injective. hence, the existing ilp formulation solves input gene trees with non-injective leaf mappings. since the input gene tree size can be arbitrary, under the non-injective leaf mapping assumption, the ilp formulation has o variables and o constraints where Σg∈g|g| = l.

generating optimal species trees
the species tree corresponding to a feasible solution of an ilp instance can be constructed in o time  <cit> . furthermore, a gene node g is identified as a duplication if and only if d = l.

implementation
we implemented an ilp generator in python that, given a set of gene trees, outputs the ilp described in the preceding section. we tested our formulation with both simulated and empirical gene tree data sets . all analyses were on a gnu/linux based pc with an intel core <dig> quad  <dig>  ghz cpu. we choose gurobi  <dig>   <cit>  to solve the ilp directly and cplex  <dig>   <cit>  to enumerate optimal solutions when necessary.

simulation experiments
we first evaluated the performance of our ilp solution with simulated gene tree data sets. our simulation protocol included the following steps:  a species tree s of n taxa was randomly generated as the template of a gene tree;  a depth-first-search walk starting from rt simulated at most one evolutionary event at each vertex based on given probabilities for each event. these events could be a duplication  or a loss . if there is neither a duplication nor a loss, the process proceeds to the next vertex. we used the same species tree to generate k gene trees.

in our simulation experiments, we used a duplication rate of  <dig>  duplications per gene at each spe-ciation vertex and a loss rate of  <dig> . these events produced a similar tree size distribution and optimal duplication cost to the gene trees used by sanderson and mcmahon  <cit> . we varied the number of taxa in the species tree from  <dig> to  <dig> and the number of input gene trees from  <dig> to  <dig>  we performed  <dig> simulation replicates for each different combination of species and gene tree number. for each simulated data set, we also compared the ilp score to results from duptree  <cit> , a fast hill-climbing heuristic implementation for the problem, to determine if the heuristic finds the optimal solution.

seed plant analysis
next, we tested the ability of the ilp formulation to solve the seed plant phylogeny problem using a large-scale genomic data set. first, to build the gene trees, amino acid alignments for gene families were selected from phytome v.  <dig>  an online comparative genomics database based on publicly available sequence data from  <dig> plant species  <cit> . to ensure positional homology throughout the alignments, columns and sequences of questionable certainty were masked using default settings of the program reap  <cit> .we sampled sequences from the nine gymnosperm taxa represented in phytome with the most data, including cycad taxon cycas rumphii, gnetales taxa gnetum gnemon and welwitschia mirabilis, and, from the conifers, cryptomeria japonica from cupres-saceae, and pseudotsuga menziesii, picea glauca, picea sitchensis, pinus pinaster, and pinus taeda from pinaceae. we also sampled sequences from two representative angiosperm taxa, arabidopsis thaliana and oryza sativa, and the non-seed plant, physcomitrella patens.

we selected all the  <dig>  masked amino acid alignments from gene families in phytome that had at least  <dig> sequences and had sequences from at least  <dig> of the selected taxa. all species were found in at least  <dig> gene families. to build the gene trees, we performed ml phylogenetic analyses on each of the gene alignments using raxml-vi-hpc version  <dig> . <dig>  <cit> . the ml analyses used the jtt amino acid substitution model  <cit>  with rate variation among sites . the trees were then rooted using mid-point rooting, as implemented in the phylip program retree  <cit> . we applied the ilp formulation to solve the gd problem using all  <dig>   <dig> gene trees.

RESULTS
simulations
in the simulation experiments, the size of the species tree has a major impact on running time , but we were able to find exact solutions for the gd problem for data sets with up to  <dig> taxa . on average, the 14-taxon data sets took less than  <dig> hours. there is no clear relationship between the number of gene trees and the time it takes to solve the gd problem . although the data sets with  <dig> gene trees took, on average, longer to solve than data sets with fewer gene trees, in some cases with fewer gene trees  it is difficult to determine an optimal solution when the optimal species tree is not unique. in comparison, the heuristic approach used in dup-tree found an optimal solution in almost all of the simulated data sets under only a few seconds. however, duptree reported suboptimal trees on some data sets with as few as  <dig> taxa and  <dig> gene trees.
ilp running time and the optimal duplication cost using k simulated gene trees of n taxa as inputs. at each configuration, the result is the average of  <dig> trials. the running time is measured in seconds.

seed plant analysis
the relationships among the major lineages of seed plants has long been a major question in plant systematics, especially with regard to the position of gnetales, a clade of three genera  that lack obvious morphological links to other extant seed plants . cladistic analyses of morphological characters generally have placed gnetales sister to the angiosperms, or flowering plants  <cit> ; however, early analyses of molecular characters rarely supported this placement  <cit> . most recently, maximum likelihood  and maximum parsimony  analysis of 15- <dig> plastid loci placed gnetales sister to the other seed plants  <cit> . however, a loss of plastid ndh genes appears to link gne-tales with pinaceae  <cit> . an mp analysis of est sequences from  <dig> nuclear genes similarly linked gnetales with the conifers  <cit> . yet later mp and ml analyses of est sequences from over  <dig>  nuclear loci placed gnetales sister to the other gym-nosperms  <cit> . all of these molecular analyses of the seed plant phylogeny have been limited to puta-tively orthologous genes. however, the gd problem provides a way to incorporate large gene families into the phylogenetic inference of seed plants.

our implementation of the ilp formulation finished running the data set in approximately two minutes. we identified a unique optimal solution with  <dig>   <dig> duplications .in the optimal species tree, the seed plants are split into angiosperm and gymnosperm clades . in the gymnosperm clade, gnetales are sister to a conifer clade. with  <dig>   <dig> genes, this gtp analysis of seed plants includes by far the most genes ever used to infer the seed plant phylogeny. our gtp analysis of this large, previously underutilized, data source provides a novel line of evidence that angiosperms and all extant gymnosperms are sister clades. like most ml analyses of multi-locus data sets, our results show a close affinity between gnetales and conifers ; however, unlike many of these analyses, gtp does not place gnetales sister to pinaceae. due to the necessarily limited taxon sampling, especially among non-pinaceae conifers, our results regarding the placement of gnetales are neither precise nor definitive. still, the placement of gnetales sister to the conifers, is an intriguing result that is consistent with some morphological characters, such as ovulate cone scales and resin canals, which appear to support conifer monophyly  <cit> . however, in contrast to our result, the deletion of the ndh genes in gnetales and pinaceae suggests that these clades are sister. although the gtp results are intriguing, they should be interpreted with caution. for example, the results do not provide any measures of confidence or suggest the degree to which alternate phylogenetic hypotheses are sub-optimal. furthermore, the gene trees were rooted using mid-point rooting, which may produce incorrect rootings when the sequences do not evolve at a constant rate of evolution  <cit> . also, the taxon sampling in this analysis is limited, and the seed plant phylogeny problem can be sensitive to taxon sampling  <cit> . thus, although our result provides a novel large-scale genomic perspective on the seed plant phylogeny, it is not a definitive.

CONCLUSIONS
our ilp formulation provides exact solutions to the largest instances of the gd problem analyzed to date. thus, it can provide a large-scale genomic perspective on important phylogenetic questions that previously could only be addressed by heuristics. furthermore, our simulation experiments demonstrate that these heuristic estimates can be misled with as few as  <dig> taxa. even when heuristics identify an optimal solution they cannot, unlike ilp, determine if the solution is unique. in future research the ilp implementation will be useful, not only for solving empirical data sets, but for assessing the performance of different heuristics by comparing their estimates to the exact ilp solution. ultimately, it also will be useful to expand the scale of solvable instances beyond  <dig> taxa. while this challenge may be addressed by improved ilp formulations, investigations into other algorithm concepts might also be effective .

authors contributions
wcc was responsible for developing the solution, running experiments, and writing of the manuscript. jgb performed the experimental evaluation and the analysis of the results, and contributed to the writing of the manuscript. oe and dfb supervised the project and contributed to the writing of the paper. all authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

