BACKGROUND
protein-protein interactions provide useful insights into functional associations between proteins  <cit> . the current knowledge base of protein-protein interactions has been built from the heterogeneous data sources generated by high-throughput techniques  <cit> . a wide range of graph-theoretic approaches have been employed for detecting functional modules from protein interaction networks. however, they have been limited in accuracy due to the presence of unreliable interactions and the complex connectivity patterns of the networks. the experimental data sets are susceptible to false positives, i.e., some fraction of the putative interactions detected must be considered spurious because they cannot be confirmed to occur in vivo  <cit> . the complexity of protein interaction networks caused by cross-talk between modules also makes functional module detection challenging.

to resolve the inaccuracy resulting from false connections, other functional knowledge can be integrated into the protein interaction networks. for example, our group  <cit>  and others  <cit>  have investigated the integration of gene expression data from microarray experiments to improve functional module identification. however, gene expression data are also susceptible to experimental sources of bias and noise. the correlations of mrna levels with even cognate protein expression may be modest at best. these factors limit the usefulness of microarray data for assessing the reliability of protein-protein interactions. gene ontology   <cit>  is another useful data source to combine with the protein interaction networks. the go is currently one of the most comprehensive and well-curated ontology databases in the bioinformatics community. it provides a collection of well-defined biological terms, called go terms, spanning biological processes, molecular functions and cellular components. the go has been used to facilitate the analysis of gene expression data  <cit> .

in this work, we integrate protein-protein interactions with the information content in the go annotation database to enhance the modularization of interaction networks. an unweighted protein interaction network can be converted into a weighted graph representation by assigning a weight to each interaction  <cit> . the weight of each interaction is interpreted as its reliability, i.e., the probability of the interaction being a true positive. we propose two novel metrics to measure the reliability of protein-protein interactions using go annotation data. recently, lubovac et al.  <cit>  defined the similarity between two proteins as the average of pairwise term-term similarity values from all go terms that have the annotation of the proteins. however, this definition underestimates the interaction reliability between two proteins that are annotated on many different go terms, because the interaction may be arisen from the functionality relevant to the go terms that are the most similar. our reliability measurements are unique in that the go annotations and the interacting patterns of the annotated proteins are both characterized.

a functional module is defined as a maximal set of proteins that are involved in the same biological process or function. based on the assumption that the members in the same module strongly bind each other, a functional module is described as a sub-network in a protein interaction network. thus, identifying functional modules can be a graph clustering problem. we present an efficient algorithm to identify functional modules in a protein interaction network. our algorithm is capable of detecting overlapping modules, whereas most of the previous graph clustering approaches generate disjoint modules with mutually exclusive sets of proteins. because a molecule generally performs different biological processes or functions in different environments, real functional modules are overlapping. our modularization algorithm first selects a small number of informative proteins, which work as representatives of modules. next, it simulates information flow starting from each informative protein through the whole weighted interaction network. the flow then reveals a set of proteins under the influence of the informative protein as a potential functional module. the modules may overlap with each other if two or more informative proteins influence the same proteins. our experimental results demonstrate that the modules identified by our algorithm are statistically significant in terms of cellular functions.

previous graph clustering approaches
graph clustering approaches can be categorized into three groups based on the underlying methodology: density-based clustering, partition-based clustering and hierarchical clustering. density-based clustering approaches search for densely connected sub-graphs. a typical example is the maximum clique algorithm  <cit>  for detecting fully connected, complete sub-graphs. to overcome the high stringency imposed by the maximum clique algorithm, relatively dense sub-graphs can be identified rather than complete sub-graphs by either using a density threshold or optimizing an objective density function  <cit> . a variety of algorithms using alternative density functions have been presented  <cit> . recently, several density-based approaches have attempted to uncover overlapping clusters  <cit> . density-based clustering methods can detect the groups of proteins densely connected each other in a protein interaction network. however, in a global view, they are not able to partition the whole network, which typically has power-law degree distributions  <cit> , wherein sparsely connected nodes are abundant. because the sparse connections decrease the density of clusters, the large amounts of sparsely connected nodes are excluded from the clusters generated by density-based methods.

partition-based clustering approaches explore the partition of a network including all sparsely connected nodes. the restricted neighborhood search clustering  algorithm  <cit>  discovers the best partition using a cost function. it starts with randomly partitioning a network, and iteratively moves the nodes on the border of a cluster to an adjacent cluster to decrease the total cost of clusters. it can finally find the partitions with the lowest cost. a critical drawback of this method is that the knowledge of the exact number of clusters in a network is pre-required.

hierarchical clustering approaches can be justified for bioinformatics applications because of the hierarchical organization of biological systems  <cit> , and do not require prior knowledge of the number of clusters in a network. these methods iteratively merge nodes or recursively divide a graph into two or more sub-graphs. for iteratively merging nodes, the similarity or distance between two nodes or two groups of nodes should be measured  <cit> . the super paramagnetic clustering  method  <cit>  is another example of iterative merging. on the other hand, for recursively dividing a graph, the nodes or edges to be cut should be precisely selected. for example, they can be found using betweenness, the fraction of shortest paths passing through a node or an edge  <cit> . as a disadvantage, the hierarchical clustering approaches are sensitive to noisy data.

our group recently developed the stm algorithm  <cit> , which differs from the other methods in that a democratic voting algorithm is used to identify cluster representatives. the voting is based on the signal transduction model derived from the erlang distribution and the network connectivity. however, this approach is not able to unravel the problem of false interactions in protein interaction networks.

overlapping sub-network structures
the protein interaction network is represented by an undirected, un-weighted graph g with proteins as a set of nodes v and interactions as a set of edges e. n denotes the neighbors of vi, the set of nodes connected to the node vi. the degree of vi is then equivalent to the number of neighbors of vi, |n |. a functional module in a protein interaction network g is described as a sub-network g' structured by a set of nodes v' where v' ⊆ v and all the edges among the nodes in v' . because a protein can be included in several different protein complexes to perform different functions, functional modules overlap with each other. however, even though the functional modules share the members, they still provide topological significance with dense intra-connections and sparse interconnections among modules in a protein interaction network.

the network in figure  <dig> was structured by creating two more interconnecting edges ⟨l, p⟩ and ⟨j, m⟩ from the network in figure  <dig>  the intra-connection rates of two sets {a, b, ⋯, l} and {m, n, ⋯, x} are both  <dig> . in this network, each set can grow through new connections to generate the modules with higher intra-connection rates. for example, the set {a, b, ⋯, l} may add the nodes {m, n, o, p} to form a module {a, b, ⋯, l, m, n, o, p}. the intra-connection rate of the module is then increased to  <dig> . the other set {m, n, ⋯, x} can also add the nodes {i, j, k, l} for a higher intra-connection rate. the overlap between the two modules thus includes the nodes {i, j, k, l, m, n, o, p}.

data integration
we measure the reliability of protein-protein interactions by two novel definitions that quantify the functional correlation of two proteins using gene ontology  annotations. the first metric is semantic similarity. semantic similarity has been used in information science to evaluate the similarity between two concepts in a taxonomy  <cit> , and we applied it to protein-protein interactions to estimate the similarity between two proteins. we define an annotation size of a go term as the number of annotated proteins on the go term. the semantic similarity between two proteins is then calculated based on the annotation size of the go term, on which both proteins are annotated. according to the transitivity property of go annotation, if a protein x is annotated on a go term gi, it is also annotated on the go terms on the path from gi to the root go term in the go structure. thus, the proportion of the annotation size of a go term to the total number of annotated proteins can quantify the specificity of the go term. if two proteins are annotated on a more specific go term, then they are functionally more similar. see methods for more details of the semantic similarity.

the other metric is called semantic interactivity. the semantic interactivity is derived by combining the go annotation data with the connectivity in a protein interaction network. suppose a protein x is annotated on a go term gi and a protein y is annotated on a go term gj. if a large proportion of interacting partners of x appears in the annotation of gj and a large proportion of interacting partners of y appears in the annotation of gi, then x and y are likely to interact with each other. if x and y are annotated on the same go term gi, then the semantic interactivity increases when more interacting partners of x and y are included in the annotation of gi. see methods for more details of the semantic interactivity.

we assign the reliability of each protein-protein interaction, measured by semantic similarity and semantic interactivity, to the corresponding edge as a weight, and build a weighted interaction network integrated with the functional information from the go database.

flow-based modularization algorithm
in our earlier study  <cit> , we proposed the flow-based modularization approach to identify overlapping functional modules in a protein interaction network. the input is a weighted interaction network. the modularization process consists of three phases: informative protein selection, flow simulation to detect preliminary modules and a post-process to merge similar preliminary modules.

informative protein selection
in phase  <dig>  informative proteins are selected based on the weighted degree dw of the proteins, which is defined as the sum of the weights of the edges between the node x and its neighbors:

 dw=∑y∈nw,
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgkbazdawgaawcbagaem4dachabeaakiabcicaoiabdiha4jabcmcapiabg2da9maaqafabagaem4dacnaeiikagiaemieagnaeiilawiaemyeaknaeiykakcaleaacqwg5bqecqghiiizcqwgobgtcqggoaakcqwg4baecqggpaqkaeqaniabgghildgccqggsaalaaa@4534@ 

where w is the weight of the edge between x and y. because the weights are obtained from biological knowledge, the weighted degree of a node includes the factors related to the topological significance in the network and biological importance of the corresponding protein. the number of informative proteins selected is a user-dependent parameter in this algorithm.

flow simulation
phase  <dig> simulates the flow starting from each informative protein. the flow simulation is based on the concept that the functional information of a protein s flows through every possible path in a weighted network. we can thus quantify how much a protein s functionally influences other proteins in a network.

as notations, the flow fs represents the amount of influence of s that travels from x to y, and infs is the amount of influence of s on y. the algorithm begins with assigning the weighted degree dw to each informative protein s as an initial amount of influence infs, whereas  <dig> to all non-informative proteins. for each informative protein s, the initial amount of influence of s, infs, is delivered into each neighbor y of s as being reduced by the weight of the corresponding edge. thus, the initial flow fs of the influence of s is defined as:

 fs = w·infs 

for each y ∈ n, where  <dig> ≤ w ≤  <dig>  the amount of influence of s on a protein y, infs, is updated by adding the sum of all incoming flow fs to y from its neighbors.

 infs=∑x∈nfs.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiegacqwfpbqacqwfubgbcqwfmbgzdawgaawcbagaem4camhabeaakiabcicaoiabdmha5jabcmcapiabg2da9maaqafabagaemozay2aasbaasqaaiabdohazbqabagccqggoaakcqwg4baecqghsgircqwg5bqecqggpaqkasqaaiabdiha4jabgigiolabd6eaojabcicaoiabdmha5jabcmcapaqab0gaeyyeiuoakiabc6cauaaa@4a85@ 

in the case of initial flow, fs is equivalent to infs because all the nodes except s have  <dig> as an initial amount of influence of s. the influence of s on y then traverses all connected edges in the network by the flow defined as:

 fs=w⋅infs|n|,
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgmbgzdawgaawcbagaem4camhabeaakiabcicaoiabdmha5jabgkziukabdqha6jabcmcapiabg2da9iabdeha3jabcicaoiabdmha5jabcycasiabdqha6jabcmcapiabgwsixpaalaaabagaemyaakmaemoba4maemozay2aasbaasqaaiabdohazbqabagccqggoaakcqwg5bqecqggpaqkaeaadaabdaqaaiabd6eaojabcicaoiabdmha5jabcmcapagaay5bslaawia7aaaacqggsaalaaa@51d9@ 

where the edge ⟨y, z〉 ∈ e and  <dig> ≤ w ≤  <dig>  the algorithm repeatedly sums up the amount of all incoming influence of s on each node using formula  <dig> and passes the influence through all connected edges with formula  <dig>  the influence passing through an edge is reduced according to the weight. if the weight is close to  <dig>  then the influence is quickly reduced. in contrast, if an edge ⟨x, y⟩ is fully reliable, i.e.,w =  <dig>  then infs can be transferred to y intact.

the algorithm also accumulates all the previous amounts of influence on each node during the flow simulation. the accumulated amount of influence of s on a node x is a major factor to determine how likely s and x are to be included in the same functional module. since the flow visits all the nodes through every possible path, densely connected nodes close to an informative protein s generally have larger amount of influence of s than sparsely connected nodes.

the flow in a path stops if it reaches a minimum threshold. the flow simulation starting from an informative protein s terminates when there is no more flow in the network. a preliminary module is then created with a set of proteins under the accumulated influence of s. simulating the flow from all informative proteins generates a set of preliminary modules that can potentially overlap.

post-process
phase  <dig> is a post-processing step that merges similar preliminary modules to produce final modules. the similar preliminary modules result from the functional closeness of two or more informative proteins because an informative protein works as the representative of a preliminary module in terms of functionality. the similarity s between two modules ms and mt is measured by the weighted interconnectivity defined as:

 s=∑x∈ms,y∈mtcmin⁡,
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqggoaakcqwgnbqtdawgaawcbagaem4camhabeaakiabcycasiabd2eannaabaaaleaacqwg0badaeqaaogaeiykakiaeyypa0zaasaaaeaadaaeqaqaaiabdogajjabcicaoiabdiha4jabcycasiabdmha5jabcmcapawcbagaemieagnaeyici4saemyta00aasbaawqaaiabdohazbqabawccqggsaalcqwg5bqecqghiiizcqwgnbqtdawgaaadbagaemidaqhabeaaasqab0gaeyyeiuoaaoqaaigbc2gatjabcmgapjabc6gaunaabmaabawaaqwaaeaacqwgnbqtdawgaawcbagaem4camhabeaaaogaay5bslaawia7aiabcycasmaaemaabagaemyta00aasbaasqaaiabdsha0bqabaaakiaawea7cagliwoaaiaawicacaglpaaaaagaeiilawcaaa@5f8a@ 

where

 c={1if x=ywif x≠y and 〈x,y〉∈e0otherwise.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgjbwycqggoaakcqwg4baecqggsaalcqwg5bqecqggpaqkcqgh9aqpdagabeqaauaabaqadiaaaeaacqaixaqmaeaacqqgpbqacqqgmbgzcqqggaaicqwg4baecqgh9aqpcqwg5bqeaeaacqwg3bwdcqggoaakcqwg4baecqggsaalcqwg5bqecqggpaqkaeaacqqgpbqacqqgmbgzcqqggaaicqwg4baecqghgjsucqwg5bqecqqggaaicqqghbqycqqgubgbcqqgkbazcqqggaaicqghpms4cqwg4baecqggsaalcqwg5bqecqghqms8cqghiiizcqwgfbqraeaacqaiwaamaeaacqqgvbwbcqqg0badcqqgobaacqqglbqzcqqgybgccqqg3bwdcqqgpbqacqqgzbwccqqglbqzcqgguaglaaaacagl7baaaaa@6af8@ 

the modules with the highest similarity in formula  <dig> are iteratively merged until the highest similarity is less than a merging threshold.

RESULTS
reliability of protein-protein interactions
we extracted the core protein interaction data of saccharomyces cerevisiae from dip, the database of interacting proteins  <cit> , and measured their reliability using semantic similarity and semantic interactivity. to validate the reliability for each interaction, we employed the functional and locational categories from the mips database  <cit> . we investigated whether each interacting pair appears in the annotation of the same functional and locational category. figure  <dig> illustrates the patterns of the functional and locational co-occurrence of interacting proteins with respect to the reliability measured by semantic similarity, semantic interactivity and co-expression. the co-expression between two genes was computed from the microarray data using the pearson correlation  <cit> . see methods. based on the reliability for each interacting pair, we divided the interactions into  <dig> groups. for each group, the proportions of interacting pairs that co-occurred in the same functions and localization were calculated.

for the functional co-occurrence in figure  <dig>  we use the third level categories from the top in a functional hierarchy from mips. in general, semantic similarity and semantic interactivity show strong positive correlations with functions. however, the co-expression does not contain sufficient variation of functional co-occurrence, and even interacting pairs with very low co-expression values have relatively high co-occurrence rate . this result indicates that the functional correlation between two proteins can be better measured by semantic similarity or semantic interactivity than gene co-expression.

the localization is conceptually more general than biological functions. thus, as shown in figure  <dig>  the co-occurrence of interacting proteins in localizational categories is typically higher than the functional categories, particularly when the values of semantic similarity, semantic interactivity and co-expression are low. among the three measurements, the semantic interactivity shows the best pattern of positive correlation with localization. consequently, semantic similarity and semantic interactivity can correctly estimate the reliability of protein-protein interactions.

essentiality of informative proteins
as representatives of modules, the informative proteins should be functionally essential. importantly, jeong et al.  <cit>  have observed that the local connectivity of nodes in a protein interaction network plays a crucial role in cellular functions. the informative proteins were selected based on the weighted degree, which is the metric combined with the local connectivity and the strength of functional relationships.

to evaluate the functional essentiality of the informative proteins, we employed their lethality information. the lethality is determined from biological experiments in which the protein is knocked out. protein lethality data were obtained from the mips database. we selected the proteins with the highest values of  degree and weighted degree using semantic similarity and semantic interactivity, and calculated the proportion of lethal proteins. figure  <dig> shows the decreasing pattern of lethality as we have more proteins up to  <dig>  however, higher proportion of lethal proteins is shown in the sets selected by the weighted degree than the  degree. up to  <dig> proteins, semantic interactivity selected more lethal proteins than semantic similarity, and fewer lethal proteins when we have more than  <dig> proteins. this result reflects that the functional essentiality of informative proteins can be determined by both the number of and the strength of functional relationships to other proteins.

identification of overlapping modules
we implemented the flow-based modularization algorithm with the core protein interaction data from dip. as inputs, we used two interaction networks weighted by semantic similarity and semantic interactivity. the algorithm requires two user-dependent parameter values: the number of informative proteins and the minimum amount of flow on a node. the number of modules in an output set depends on the number of selected informative proteins. on the other hand, the minimum amount of flow determines the average size of output modules. by changing the two parameter values, we achieved ten different output sets of modules for each weighted interaction network .

the output modules share a large number of common proteins. to evaluate their overlapping patterns, we counted the number of appearance across different modules for each protein. the average overlapping rates on the sets of identified modules are shown in figure  <dig>  each set has the different number of modules in the range between  <dig> and  <dig>  as expected, the average modules size was greater for the sets with fewer modules. when the protein interaction network was decomposed into more modules, the average overlapping rate was slightly increased. for semantic similarity, the overlapping rate was increased by approximately 10% when the number of generated modules was doubled.

we compared the overlapping rates to those of annotated proteins in functional categories from the mips database. the functional categories in mips are hierarchically distributed: there are  <dig> different categories on the top level as the most general functions, and  <dig>   <dig> and  <dig> categories on the second, third and fourth level from the top, respectively. we calculated the average appearance of proteins on the second, third and forth level categories. figure  <dig> shows that the average overlapping rate is increased by only 15% despite the three-fold increase in the number of categories between the second level and the fourth. overall, the modules identified by our algorithm have a similar overlapping pattern when compared to the mips functional categories.

statistical assessment of the identified modules
to statistically assess the identified modules, we employed the p-value from the hypergeometric distribution  <cit> . we mapped each module to a reference function with the lowest p-value, and calculated the negative of log. a low p-value ) between an identified module and a reference function indicates that the module closely corresponds to the function. the functional categories and their annotations from the mips database were used as the reference functions.

we show the performance improvement achieved from semantic integration. the modularization results using semantic similarity and semantic interactivity were compared to the gene co-expression approach we have previously reported  <cit> . for this comparison,  <dig> informative proteins were initially selected for each input network, and the minimum flow threshold values were set at  <dig>  for semantic similarity,  <dig>  for semantic interactivity and  <dig>  for genetic co-expression. the average size of output modules was considered to choose the proper value of the minimum flow threshold. table  <dig> shows the results of average-log of the output modules. overall, weighting with semantic interactivity resulted in the best accuracy of modularization. besides, both semantic similarity and semantic interactivity outperformed the weighting scheme based on the microarray-derived co-expression.

the output modules were generated by the flow-based algorithm with  <dig> informative proteins. the input was the protein interaction networks weighted by three metrics. for each metric, the average values of -log and f-measure of the output modules were calculated before and after the post-processing step to merge similar modules.

we also monitored the average -log of the output modules before and after post-processing. the post-process is the step to merge similar modules after flow simulation. as shown in table  <dig>  the post-process improved the accuracy of modules generated by the two go-based weighting methods. the post-process is apparently necessary for the flow-based modularization because two or more informative proteins may represent the same functionality. however, when we use genetic co-expression for weighing, the post-process worsened the accuracy of modules, possibly because modules were merged to generate a less accurate module.

next, we compared the performance of the flow-based modularization algorithm to three competing state-of-the-art methods: the cfinder algorithm  <cit>  as a density-based method, the betweenness-cut algorithm  <cit>  as a hierarchical approach, and the stm algorithm  <cit> . for each implementation, we selected the parameter values that resulted in the best accuracy. table  <dig> shows the parameter values and the results of the output modules. the cfinder algorithm is based on a clique percolation method. although it is able to find overlapping modules, it detected numerous small-sized modules with a few disproportionally large modules. as a result, the average accuracy of cfinder was lower than the other methods. the betweenness-cut algorithm iteratively disconnects the edges with the highest value of betweenness and recursively proceeds the cutting process in each sub-network. most of the sparsely connected nodes were included in the output modules. however, because the output modules were disjoint, the betweenness-cut algorithm had a lower accuracy than the flow-based method. the stm algorithm allows the overlap of output modules, but it has much lower rates of overlap than the flow-based method. these results indicate that our flow-based algorithm outperforms other methods in terms of the accuracy of functional module identification.

the output modules were generated by the flow-based, cfinder, betweenness-cut and stm method. the input was the core protein interaction network from dip. the performance was evaluated by p-value.

the p-value is highly dependent on the module size. figure  <dig> shows the pattern of the average -log across different sets of output modules produced by varying parameter values for the number of informative proteins and the minimum flow threshold. although the average value of -log increased as the average size of modules increased, it converged to approximately  <dig> and  <dig> with the semantic similarity and semantic interactivity weighting scheme, respectively. in a similar analysis, we found that the average -log of the output modules generated by the betweenness-cut algorithm converged to  <dig> as shown in figure  <dig> 

false positive interactions in a protein interaction network possibly cause miscalculation of betweenness because the faulty information yields incorrect shortest paths in a network. to resolve this problem, we also implemented the betweenness-cut algorithm with the pre-processing step to filter out potential false positives. we eliminated the edges, whose semantic similarity is less than  <dig> , and applied the refined network to the betweenness-cut algorithm. figure  <dig> shows the overall accuracy of modules was enhanced by the pre-process. this result implies that the betweenness-cut algorithm is sensitive to false positive interactions. the average -log converged to approximately  <dig>  which is higher than the result from the betweenness-cut algorithm without pre-processing.

the subset of the modules identified by our algorithm with high values of -log are listed with their informative proteins and functions in table  <dig>  the input network was weighted by semantic interactivity. some modules have two informative proteins because they were merged during the post-process. it is expected that the informative protein in each module plays a key role in performing the corresponding function.

flow-based modularization algorithm was implemented with  <dig> informative proteins and  <dig>  as a minimum flow threshold. the input network was weighted by semantic interactivity.  <dig> output modules are listed with their informative proteins, functions and -log. some modules have two informative proteins because they were merged during the post-process.

supervised validation of the modules in a hierarchy
to directly compare the identified modules with reference functions, we used a supervised method with recall and precision. recall measures the tendency of the reference function to match the identified module, whereas precision represents the accuracy of the identified module for matching to the reference function. the f-measure is defined as the harmonic mean of recall and precision. the average f-measure value of all modules was calculated by mapping each module to the function with the highest f-measure value.

the average f-measure value of the modules that were generated before and after post-processing are shown in table  <dig>  similar to the results from the statistical assessment using p-value, the post-process slightly improved the accuracy of modules from our two metrics for interaction reliability measurements, and the semantic interactivity measurement had the best accuracy of modularization.

we examined whether the flow-based algorithm identifies the various sets of modules on different levels in a functional hierarchy. in the same way to the experiment above, we generated ten different output sets with different parameter values and compared the modules in each set to the annotations on the second, third and fourth level categories in the mips functional hierarchy. as shown in figure  <dig>  when we compared the modules to the functions on the fourth level, which are the most specific functions, we had the highest f-measure value. in contrast, we had more mismatches when we compared the modules to large-sized functional categories. in figure  <dig>  we can also observe that the comparisons to each level of functions provided distinct patterns of accuracy across different output sets. for the second level functions, the modules with the average size of greater than  <dig> have the highest accuracy. for the third level functions, the modules whose average size is between  <dig> and  <dig> have the highest accuracy. finally, for the fourth level functions, the modules of average size in the range between  <dig> and  <dig> have the highest accuracy. although the results do not strongly support the hierarchical structure, they suggest the possibility of building a hierarchy with the identified modules.

CONCLUSIONS
experimentally generated protein-protein interaction data includes an enormous amount of false positives. in this paper, we introduced two novel metrics to measure the reliability of interactions. for this measurement, we use the annotations in gene ontology , which provides the comprehensive functional information. when we implemented the betweenness cut algorithm after filtering out the interactions with low semantic similarity values, the overall accuracy of modules is substantially improved. this result strongly appeals the necessity of integrating of functional information for the analysis of protein-protein interaction data.

most of the previous graph clustering approaches encounter limitations when detecting modules in protein interaction networks. since they generally generate small-sized dense sub-graphs, they are not adept at identifying hierarchically distributed functional modules. we have developed the flow-based modularization algorithm to identify overlapping modules in a hierarchy. although the density-based methods, such as cfinder, and the stm algorithm allow overlap among modules, the overlapping rate is very low. however, our algorithm identifies the overlapping modules with high overlapping rate, comparable to the real functional associations of proteins. since the common proteins in the overlapping modules bridge functional sub-networks, they are topologically and biologically significant.

another strength of our approach is efficiency. since we use an index for the adjacency-list representing the input network, the time complexity of the flow simulation is dominated by the index construction, which runs in o where n is the number of nodes and m is the number of edges. the flow from each informative protein can be simulated in parallel. the total time complexity of the flow-based algorithm depends on the post-process. suppose we have k preliminary modules. we first insert the interconnectivity values for all possible pairs of modules into a heap-based priority queue in o time. next, we iteratively merge the most interconnected pair. each iteration requires o time. hence, the overall time complexity of merging preliminary modules can be solved in o time where k is the number of informative proteins. if we simulate the flow from every node in a network, then the algorithm generates n preliminary modules and merges them in o time where n is the number of nodes.

structuring a modular hierarchy by the flow-based algorithm can be a primary task for deeper analysis of functional relationships among proteins. there are still a large number of functionally uncharacterized proteins in yeast even though it is one of the most well-studied organisms. this study can provide underlying bases for the prediction of functions of the uncharacterized proteins. moreover, our approach is adaptable to other higher-level organisms because of the efficiency and scalability.

