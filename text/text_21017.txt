BACKGROUND
multiple sequence alignment  is a useful tool for elucidating the relationships among function, evolution, sequence, and structure of biological macromolecules such as genes and proteins  <cit> . although we can calculate the optimal alignment of a set of sequences by n-dimensional dynamic programming , the dp method is applicable to only a small number of sequences. in fact, even when a sum-of-pairs  score with the simplest gap cost is used as an objective function, computation of optimal msa is an np-hard problem  <cit> . hence, many heuristic methods have been developed. almost all practical methods presently available adopt either a progressive  <cit>  or an iterative  <cit>  heuristic strategy.

the group-to-group sequence alignment algorithm is a straightforward extension of the pairwise sequence alignment algorithm, and is the core of progressive and iterative methods. the essential difference of group-to-group sequence alignment from pairwise sequence alignment is the existence of gaps within each group of prealigned sequences. the gap opening penalty used in an affine gap cost disrupts the independence between adjacent columns, and hence calculating the optimal alignment between two groups with respect to the sp score was shown to be np-complete  <cit> . gotoh was the first to devise a group-to-group sequence alignment algorithm that optimizes the sp score by using a candidate list paradigm  <cit> . an algorithm with a candidate list paradigm, similar to the branch-and-bound method, prunes the candidates that are dispensable for arrival at an optimal solution. kececioglu and starrett proposed another candidate-pruning method  <cit> . although these algorithms can calculate the optimal alignment between two groups, they require relatively extensive computational resources. several papers have reported faster algorithms that use the heuristic estimation of gap opening penalties  <cit> .

several studies have discussed the tendency that global alignment methods perform better than local ones  <cit> . however, the opposite is also true when some sequences to be aligned have long insertions or deletions . one reason for this tendency is that almost all group-to-group sequence alignment algorithms use an affine-like gap cost that over-penalizes long indels. to alleviate this problem, several methods have combined pairwise global and local alignments, or incorporated consistency information among pairwise alignments  <cit> . another strategy to prevent over-penalizing long indels is to use a concave function as the gap cost. it is relatively easy to choose a concave gap cost that does not over-penalize long indels, and several pairwise sequence alignment algorithms using this gap cost have been developed  <cit> . however, there have been few attempts to incorporate this gap cost into a group-to-group sequence alignment algorithm to develop an msa program.

in this paper, we propose a novel group-to-group sequence alignment algorithm with a piecewise linear gap cost  <cit> , which is the key to a progressive or an iterative refinement method. the piecewise linear gap cost  <cit>  is one of the concave functions and consists of l linear functions. depending on the gap length, this gap cost varies its inclination, which corresponds to the gap extension penalty. however, in the case of group-to-group sequence alignment algorithm, it is difficult to calculate the proper gap extension penalty with only the data structures used in the previous algorithm that were designed to detect the opening of new gaps  <cit> . accordingly, we newly introduce two additional data structures: 'insertion length profile' and 'dynamic gap information'. an insertion length profile vector is associated with each column of a group of sequences, while dynamic gap information keeps track of information about gaps inserted into a group during the dp process. together with those used in the previous algorithm, gap extension penalty can be calculated efficiently. using the proposed algorithm, we developed a program called prime.

prime stands for profile-based randomized iteration method. as a result of benchmark tests, the accuracy of our method is shown to be comparable to the most accurate methods available today, all of which incorporate pairwise alignment information obtained from all-by-all pairwise alignment. this implies that the piecewise linear gap cost is as effective as pairwise alignment information in improving the alignment accuracy of sequences, some of which have long indels.

algorithms
in this section, we first review the previous group-to-group sequence alignment algorithm with an affine gap cost  <cit> , and then describe a novel one with a piecewise linear gap cost. the final subsection outlines a doubly nested randomized iterative strategy with which our proposed algorithm is integrated. 

the definitions of symbols are as follows. let Σ be the residue set and |Σ|, the number of elements in Σ. Σ* denotes the set containing a null and each element in Σ. a null means that a residue of one sequence does not aligned with that of another sequence when aligning sequences, and is denoted by the symbol '-'. a and b denote prealigned groups of sequences. a includes m rows, and b, n rows. the respective lengths of a and b are i and j. ap, ai, and ap,i denote the p-th row of a, the i-th column of a and the i-th residue of ap, respectively. bq, bj, and bq,j are defined similarly. both ap,i and bq,j belong to Σ*. note that any column of a group must not be a null column, which consists of nulls only. if all nulls are removed from a group, each row is an usual sequence. a run of consecutive nulls in a row is called a gap. a gap length is the number of nulls constituting the gap. a segment of a that consists of consecutive columns as to at is denoted by a; a is also expressed as a. s is a substitution score between residues a and b. by g, we mean a gap cost function of gap length x. the pair weight between the p-th sequence in a and the q-th sequence in b is wp,q. if the three-way method  <cit>  is used to calculate the pair weights, wp,q can be factorized as wap
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabdchawbqabaaaleqaaaaa@30fb@·wbq
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemoqai0aasbaawqaaiabdghaxbqabaaaleqaaaaa@30ff@, where wap
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabdchawbqabaaaleqaaaaa@30fb@ and wbq
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemoqai0aasbaawqaaiabdghaxbqabaaaleqaaaaa@30ff@ are the weights for the p-th sequence in a and the q-th one in b, respectively.

review of previous group-to-group sequence alignment algorithm with affine gap cost
the previous group-to-group sequence alignment algorithm that optimizes sp or weighted sp score with an affine gap cost is based on a two-dimensional dp method  <cit> . the key point of this algorithm is to exactly evaluate the gap opening penalties during the dp process. to explicitly consider gaps already present in each group, this algorithm introduces a gap state that denotes the number of consecutive nulls up to the current position.

another important feature of this algorithm is the candidate list paradigm, which is a variant of branch-and-bound methods. because the calculation of gap opening penalties depends on a previous partial dp path, simple extension of pairwise sequence alignment algorithm may not yield globally optimal alignment between two groups  <cit> . for rigorous calculation, not only locally optimal partial paths but also those that possibly contribute to globally optimal alignment have to be stored at each node of a dp matrix  <cit> . in the worst case, the number of candidates to be stored grows exponentially with the total number of sequences in the two groups  <cit> . as discussed in some papers  <cit> , the group-to-group sequence alignment algorithm without the candidate list paradigm may suffice for good alignment. moreover, because the novel group-to-group sequence alignment algorithm described below requires roughly twice as much computation time as the previous one at each dp process, we adopted a simpler algorithm without the candidate list paradigm.

basic algorithm
let an affine gap cost function be g = -, where u and v are constants called gap extension penalty and gap opening penalty, respectively. the group-to-group sequence alignment algorithm with the affine gap cost employs essentially the same recurrent relations as the pairwise sequence alignment algorithm  <cit> , with exact evaluation of gap opening and extension penalties. like the pairwise sequence alignment algorithm, we calculate four variables at each node, , of the dp matrix: hi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3278@, hi,j1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegymaedaaaaa@327a@, hi,j2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegomaidaaaaa@327c@, and hi,j3
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaeg4mamdaaaaa@327e@. hi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3278@ holds the best score among hi,j1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegymaedaaaaa@327a@, hi,j2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegomaidaaaaa@327c@, and hi,j3
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaeg4mamdaaaaa@327e@ at . hi,j1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegymaedaaaaa@327a@ is a score of a partial alignment where ai and bj are aligned. hi,j2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegomaidaaaaa@327c@ and hi,j3
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaeg4mamdaaaaa@327e@ mean partial alignment scores where ai and bj are aligned with null columns, respectively. the recurrent equations are:

hi,j0=max⁡1≤k≤3{hi,jk}     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaogaeyypa0zaacbeaeaacyggtbqbcqgghbqycqgg4baeasqaaiabigdaxiabgsmijkabdugarjabgsmijkabiodazaqabagcdagadeqaaiabdieainaadaaaleaacqwgpbqacqggsaalcqwgqbgaaeaacqwgrbwaaaaakiaawuhacagl9baacawljagaaczcamaabmaabagaegymaedacagloagaayzkaaaaaa@4ad4@

hi,j1=hi− <dig> j−10+g+s     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegymaedaaogaeyypa0jaemisag0aa0baasqaaiabdmgapjabgkhitiabigdaxiabcycasiabdqgaqjabgkhitiabigdaxaqaaiabicdawaaakiabgucariabdeeahjabcicaogqabiab=fgahnaabaaaleaacqwgpbqaaeqaaogaeiilawiae8nyai2aasbaasqaaiabdqgaqbqabagccqgg7awocqwgqbaudaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaogaeiykakiaey4kasiaem4uamlaeiikagiae8xyae2aasbaasqaaiabdmgapbqabagccqggsaalcqwfibgydawgaawcbagaemoaaogabeaakiabcmcapiaaxmaacawljawaaewaaeaacqaiyagmaiaawicacaglpaaaaaa@6017@

hi,j2=max⁡k= <dig> {hi− <dig> jk+g}+s     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegomaidaaogaeyypa0zaacbeaeaacyggtbqbcqgghbqycqgg4baeasqaaiabdugarjabg2da9iabicdawiabcycasiabikdayaqabagcdagadeqaaiabdieainaadaaaleaacqwgpbqacqghsislcqaixaqmcqggsaalcqwgqbgaaeaacqwgrbwaaagccqghrawkcqwghbwrcqggoaakieqacqwfhbqydawgaawcbagaemyaakgabeaakiabcycasiabgkhitiabcuda7iabdcfaqnaadaaaleaacqwgpbqacqghsislcqaixaqmcqggsaalcqwgqbgaaeaacqwgrbwaaagccqggpaqkaiaawuhacagl9baacqghrawkcqwgtbwucqggoaakcqwfhbqydawgaawcbagaemyaakgabeaakiabcycasiabgkhitiabcmcapiaaxmaacawljawaaewaaeaacqaizawmaiaawicacaglpaaaaaa@6525@

hi,j3=max⁡k= <dig> {hi,j−1k+g}+s     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaeg4mamdaaogaeyypa0zaacbeaeaacyggtbqbcqgghbqycqgg4baeasqaaiabdugarjabg2da9iabicdawiabcycasiabiodazaqabagcdagadeqaaiabdieainaadaaaleaacqwgpbqacqggsaalcqwgqbgacqghsislcqaixaqmaeaacqwgrbwaaagccqghrawkcqwghbwrcqggoaakcqghsislcqggsaalieqacqwfibgydawgaawcbagaemoaaogabeaakiabcuda7iabdcfaqnaadaaaleaacqwgpbqacqggsaalcqwgqbgacqghsislcqaixaqmaeaacqwgrbwaaagccqggpaqkaiaawuhacagl9baacqghrawkcqwgtbwucqggoaakcqghsislcqggsaalcqwfibgydawgaawcbagaemoaaogabeaakiabcmcapiaaxmaacawljawaaewaaeaacqai0aanaiaawicacaglpaaaaaa@6533@

where '-' denotes a null column, and pi− <dig> j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgqbaudaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@3642@ is a partial dp path. a partial dp path is one from  to the node of the dp matrix in question, representing a partial alignment; for example, pi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgqbaudaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3288@ represents a partial alignment with the best score hi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3278@ between a and b·s is responsible for the calculation of substitution scores and gap extension penalties:

s=∑1≤p≤m∑1≤q≤nwp,q⋅s.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqggoaakieqacqwfhbqydawgaawcbagaemyaakgabeaakiabcycasiab=jgainaabaaaleaacqwgqbgaaeqaaogaeiykakiaeyypa0zaaabuaeaadaaeqbqaaiabdeha3naabaaaleaacqwgwbaccqggsaalcqwgxbqcaeqaaaqaaiabigdaxiabgsmijkabdghaxjabgsmijkabd6gaubqab0gaeyyeiuoakiabgwsixlabdohazjabcicaoiabdggahnaabaaaleaacqwgwbaccqggsaalcqwgpbqaaeqaaogaeiilawiaemoyai2aasbaasqaaiabdghaxjabcycasiabdqgaqbqabagccqggpaqkasqaaiabigdaxiabgsmijkabdchawjabgsmijkabd2gatbqab0gaeyyeiuoakiabc6cauiaaxmaacawljawaaewaaeaacqai1aqnaiaawicacaglpaaaaaa@646b@

if either a or b is a null, s = -u, and if both a and b are null, s =  <dig>  g is the gap opening penalty when ai is aligned with bj:

g=∑1≤p≤m∑1≤q≤nwp,q⋅⋅γ.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwghbwrcqggoaakieqacqwfhbqydawgaawcbagaemyaakgabeaakiabcycasiab=jgainaabaaaleaacqwgqbgaaeqaaogaei4oasjaemiuaa1aa0baasqaaiabdmgapjabgkhitiabigdaxiabcycasiabdqgaqjabgkhitiabigdaxaqaaiabicdawaaakiabcmcapiabg2da9maaqafabawaaabuaeaacqwg3bwddawgaawcbagaemicaanaeiilawiaemycaehabeaaaeaacqaixaqmcqghkjyocqwgxbqccqghkjyocqwgubgbaeqaniabgghildaaleaacqaixaqmcqghkjyocqwgwbaccqghkjyocqwgtbqbaeqaniabgghildgccqghfly1cqggoaakcqghsislcqwg2bgdcqggpaqkcqghfly1iigacqgfzowzcqggoaakcqwghbqydawgaawcbagaemicaanaeiilawiaemyaakgabeaakiabcycasiabdkgainaabaaaleaacqwgxbqccqggsaalcqwgqbgaaeqaaogaeiilawiaemieag3aa0baasqaaiabdchawjabcycasiabdmgapjabgkhitiabigdaxaqaaiabicdawaaakiabcycasiabdmha5naadaaaleaacqwgxbqccqggsaalcqwgqbgacqghsislcqaixaqmaeaacqaiwaamaagccqggpaqkcqgguaglcawljagaaczcamaabmaabagaegonaydacagloagaayzkaaaaaa@8789@

xp,i−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbagaemicaanaeiilawiaemyaakmaeyoei0iaegymaedabagaegimaadaaaaa@34c1@ and yq,j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg5bqedaqhaawcbagaemycaenaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@34c7@ are the gap states for the p-th and q-th rows in a and b on pi− <dig> j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgqbaudaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@3642@, respectively. as mentioned above, the gap state is the length of the gap up to the current position. γ represents whether a gap opens with respect to a pair of rows. specifically, if a is a residue, x ≥ y, and b is a null; or if a is a null, x ≤ y, and b is a residue; then γ =  <dig>  otherwise, γ =  <dig>  in order to evaluate exact gap openings for calculation of each hi,jk
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaem4aasgaaaaa@32e9@, the gap states must be updated. if ap,i is a null, xp,i0=xp,i−1d+1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbagaemicaanaeiilawiaemyaakgabagaegimaadaaogaeyypa0jaemieag3aa0baasqaaiabdchawjabcycasiabdmgapjabgkhitiabigdaxaqaaiabdsgakbaakiabgucariabigdaxaaa@3e48@ where d = arg max1≤k≤ <dig> {hi,jk
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibasdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaem4aasgaaaaa@32e9@}. otherwise, xp,i0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbagaemicaanaeiilawiaemyaakgabagaegimaadaaaaa@32e4@ =  <dig>  the other gap states are calculated in a similar way.

use of generalized profile
although equations  <dig> and  <dig> require o computational steps, these steps can be reduced by using a generalized profile  <cit>  and the three-way weighting method  <cit> . the idea of using the generalized profile is that the same residue types or gap states on a column are treated together. the generalized profile consists of four vectors calculated from each column of a group: frequency, residue profile, and two kinds of static gap profile vectors. these vectors can be obtained in advance of the dp process. the frequency and residue profile vectors are used to calculate s, while the static gap profile vectors are necessary to calculate g.

with the frequency and residue profile vectors, s is calculated by

s=∑r∈Σ*fai,r⋅pbj,r=∑r∈Σ*pai,r⋅fbj,r     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqggoaakieqacqwfhbqydawgaawcbagaemyaakgabeaakiabcycasiab=jgainaabaaaleaacqwgqbgaaeqaaogaeiykakiaeyypa0zaaabuaeaacqwgmbgzdawgaawcbagae8xyae2aasbaawqaaiabdmgapbqabawccqggsaalcqwgybgcaeqaaaqaaiabdkhayjabgigiolabfo6atjabcqcaqaqab0gaeyyeiuoakiabgwsixlabdchawnaabaaaleaacqwfibgydawgaaadbagaemoaaogabeaaliabcycasiabdkhaybqabagccqgh9aqpdaaeqbqaaiabdchawnaabaaaleaacqwfhbqydawgaaadbagaemyaakgabeaaliabcycasiabdkhaybqabaaabagaemocainaeyici4saeu4odmlaeiokaocabeqdcqghris5aogaeyyxictaemozay2aasbaasqaaiab=jgainaabaaameaacqwgqbgaaeqaasgaeiilawiaemocaihabeaakiaaxmaacawljawaaewaaeaacqai3awnaiaawicacaglpaaaaaa@6a5e@

where residue frequency fai,r
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgmbgzdawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabawccqggsaalcqwgybgcaeqaaaaa@335e@ is the weighted frequency of occurrence of residue type r  on column ai, and residue profile pbj,r=∑t∈Σ*fbj,r⋅s
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdawgaawcbaacbegae8nyai2aasbaawqaaiabdqgaqbqabawccqggsaalcqwgybgcaeqaaogaeyypa0zaaabeaeaacqwgmbgzdawgaawcbagae8nyai2aasbaawqaaiabdqgaqbqabawccqggsaalcqwgybgcaeqaaaqaaiabdsha0jabgigiolabfo6atjabcqcaqaqab0gaeyyeiuoakiabgwsixlabdohazjabcicaoiabdkhayjabcycasiabdsha0jabcmcapaaa@4b92@. both pai,r
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabawccqggsaalcqwgybgcaeqaaaaa@3372@ and fbj,r
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgmbgzdawgaawcbaacbegae8nyai2aasbaawqaaiabdqgaqbqabawccqggsaalcqwgybgcaeqaaaaa@3362@ are defined in the same way. the right hand side of equation  <dig> requires o, because each frequency and residue profile vector consists of |Σ*| values. when m × n is sufficiently large, the computation time can be considerably reduced. although s is easy to calculate, the profile-based calculation of g is somewhat complicated, because, in addition to static gaps, dynamic gaps must be considered explicitly. a static gap consists of consecutive static nulls that already exist in each group, while a dynamic gap denotes a run of dynamic nulls that are inserted into each group during the dp process. note that we distinguish static and dynamic gaps for convenience of the description of our algorithm, while they contribute to the total alignment score in the same way. let us consider an example of the gap opening penalty calculation when a <dig> is aligned with b <dig> . to keep the discussion simple, we consider a <dig> and b <dig> only. from simple observation, we find that a gap between a <dig> and b <dig> has already opened before a <dig> is aligned with b <dig>  however, if the gap opening penalty were calculated using the static gap states only, a gap opening would be detected wrongly, because a <dig>  is a null, b <dig>  is a residue, and x <dig>  =  <dig> ≤ y <dig>  =  <dig> where x <dig>  and y <dig>  are the static gap states of a <dig>  and b <dig> , respectively. for correct detection of gap opening, we need 'running gap states', each of which represents the sum of the numbers of consecutive static and dynamic nulls up to the current position. for the example shown in figure  <dig>  the running gap state for a <dig> at column position a <dig> is  <dig>  which is composed of  <dig> static nulls and  <dig> dynamic nulls.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfhbqydawgaaadbagaegioagdabeaaasqabaaaaa@309e@ and e^a8+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgfbqrgaqcamaadaaaleaaieqacqwfhbqydawgaaadbagaegioagdabeaaasqaaiabgucaraaaaaa@3165@ are {} and {, , }, respectively. dynamic gap information d <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaeg4nacjaeiilawiaegymaejaegymaedabagaegimaadaaaaa@3294@ is {, , }. segment profile fa8
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrdawgaawcbaacbegae8xyae2aasbaawqaaiabiida4aqabaaaleqaaaaa@3074@ is {, , }. similarly, the profile vectors of b are defined: s^b12
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfibgydawgaaadbagaegymaejaegomaidabeaaasqabaaaaa@3184@ = {}, e^b12+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgfbqrgaqcamaadaaaleaaieqacqwfibgydawgaaadbagaegymaejaegomaidabeaaasqaaiabgucaraaaaaa@324b@ = {}, d <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaeg4nacjaeiilawiaegymaejaegymaedabagaegimaadaaaaa@3294@ is empty, and fb12
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrdawgaawcbaacbegae8nyai2aasbaawqaaiabigdaxiabikdayaqabaaaleqaaaaa@315a@ = {, }. in what follows, we consider the non-trivial calculation of the gap extension penalty with respect to the gap of b <dig>  the target gap. by using s^b11
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfibgydawgaaadbagaegymaejaegymaedabeaaasqabaaaaa@3182@ and d <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaeg4nacjaeiilawiaegymaejaegymaedabagaegimaadaaaaa@3294@, we find that the two dynamic gaps specified by  and  in d <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaeg4nacjaeiilawiaegymaejaegymaedabagaegimaadaaaaa@3294@ are partially and completely aligned with the target gap, respectively. consequently, the total number of nulls aligned with null columns of dynamic gaps to be removed is  <dig>  therefore, the number of columns of b <dig> is  <dig>  by subtracting  <dig> from  <dig> , the starting position of a,  <dig>  is obtained. then, the gap extension penalty with respect to the gap of b <dig> is wb1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemoqai0aasbaawqaaiabigdaxaqabaaaleqaaaaa@3084@  where f <dig> = wa2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabikdayaqabaaaleqaaaaa@3084@ + wa3
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabiodazaqabaaaleqaaaaa@3086@ and f <dig> = wa4
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabisda0aqabaaaleqaaaaa@3088@. note that a <dig> is not involved in the gap extension penalty because a <dig>  is a null.

static gap states are compactly represented as a static gap profile. a static gap profile is obtained by gathering static gap states with the same values at a column. more specifically, the static gap profile at a column ck consists of two vectors eck
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdawgaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleqaaaaa@30d7@ and sck
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudawgaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleqaaaaa@30f3@. each element of both vectors has the same form: {} where g is the gap state of previous column ck- <dig> and f is the weighted frequency of the occurrence of rows whose element on ck is either a residue or null depending on eck
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdawgaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleqaaaaa@30d7@ or sck
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudawgaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleqaaaaa@30f3@, respectively. although eck
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdawgaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleqaaaaa@30d7@ itself may be used to calculate gap opening penalties, its accumulated form, eck+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdaqhaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleaacqghrawkaaaaaa@31ba@, is more convenient to reduce the computation time. if an element in eck+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdaqhaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleaacqghrawkaaaaaa@31ba@ is , f+ represents the weighted frequency of the occurrence of rows whose gap states are not less than g. for the example shown in figure  <dig>  ea8
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdawgaawcbaacbegae8xyae2aasbaawqaaiabiida4aqabaaaleqaaaaa@3072@, ea8+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdaqhaawcbaacbegae8xyae2aasbaawqaaiabiida4aqabaaaleaacqghrawkaaaaaa@3155@, and sa8
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudawgaawcbaacbegae8xyae2aasbaawqaaiabiida4aqabaaaleqaaaaa@308e@ are {, , }, {, , }, and {}, respectively. since all gap states are different in the worst case, the total number of elements of eck+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdaqhaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleaacqghrawkaaaaaa@31ba@ and sck
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudawgaawcbaacbegae83yam2aasbaawqaaiabdugarbqabaaaleqaaaaa@30f3@ is at most the number of sequences in the group.

like a static gap profile, a running gap profile can represent running gap states compactly. in order to obtain a running gap profile, another data structure called a gap mediation profile is required. a gap mediation profile is defined for each path in the dp process, and records the total number of dynamic nulls inserted into static gaps that are currently open. each element of the gap mediation profile is expressed as , where s is the length of a static gap and d is the summed length of dynamic gaps inserted within or after the static gap. let mi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3282@ be the gap mediation profile of group a at the dp node ·mi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3282@ follows a recurrent relation, the initial condition of which is mi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3282@ = {}. we first consider the case where ai and bj are aligned. for each  in sai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabaaaleqaaaaa@30eb@, if there exists element  in mi− <dig> j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@363c@ such that g = s, then  ∈ mi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3282@. in the case where bj is aligned with a null column, then  ∈ mi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3282@ where  is an element in mi,j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@345f@ or mi,j−13
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaomaeyoei0iaegymaedabagaeg4mamdaaaaa@3465@ depending on the maximum operation of equation  <dig>  if ai is aligned with a null column, mi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3282@ equals mi− <dig> j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaogabagaegimaadaaaaa@345f@ or mi− <dig> j2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaogabagaegomaidaaaaa@3463@. in the case of figure  <dig>  m <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaeg4nacjaeiilawiaegymaejaegymaedabagaegimaadaaaaa@32a6@ = {, , } is derived from m <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaeg4nacjaeiilawiaegymaejaegimaadabagaegimaadaaaaa@32a4@ = {, , }. the other gap mediation profile vectors are constructed in a similar way.

running gap profile vectors e^ai+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgfbqrgaqcamaadaaaleaaieqacqwfhbqydawgaaadbagaemyaakgabeaaasqaaiabgucaraaaaaa@31c2@ and s^ai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfhbqydawgaaadbagaemyaakgabeaaasqabaaaaa@30fb@ are obtained by combining gap mediation profile mi− <dig> j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@363c@, and static gap profiles eai+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdaqhaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabaaaleaacqghrawkaaaaaa@31b2@ and sai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabaaaleqaaaaa@30eb@, respectively. for each  in eai+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdaqhaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabaaaleaacqghrawkaaaaaa@31b2@,  is chosen from mi− <dig> j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@363c@ such that g = s, and then  ∈ e^ai+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgfbqrgaqcamaadaaaleaaieqacqwfhbqydawgaaadbagaemyaakgabeaaasqaaiabgucaraaaaaa@31c2@. similarly, s^ai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfhbqydawgaaadbagaemyaakgabeaaasqabaaaaa@30fb@ is obtained from mi− <dig> j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@363c@ and sai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabaaaleqaaaaa@30eb@. for example, e^a8+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgfbqrgaqcamaadaaaleaaieqacqwfhbqydawgaaadbagaegioagdabeaaasqaaiabgucaraaaaaa@3165@ and s^a8
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfhbqydawgaaadbagaegioagdabeaaasqabaaaaa@309e@ at the node  of figure  <dig> are {, , } and {}, respectively.

using running gap profile vectors e^ai+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgfbqrgaqcamaadaaaleaaieqacqwfhbqydawgaaadbagaemyaakgabeaaasqaaiabgucaraaaaaa@31c2@, s^ai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfhbqydawgaaadbagaemyaakgabeaaasqabaaaaa@30fb@, e^bj+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgfbqrgaqcamaadaaaleaaieqacqwfibgydawgaaadbagaemoaaogabeaaasqaaiabgucaraaaaaa@31c6@, and s^bj
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfibgydawgaaadbagaemoaaogabeaaasqabaaaaa@30ff@, equation  <dig> can be rewritten as:

g=⋅.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwghbwrcqggoaakieqacqwfhbqydawgaawcbagaemyaakgabeaakiabcycasiab=jgainaabaaaleaacqwgqbgaaeqaaogaei4oasjaemiuaa1aa0baasqaaiabdmgapjabgkhitiabigdaxiabcycasiabdqgaqjabgkhitiabigdaxaqaaiabicdawaaakiabcmcapiabg2da9iabcicaoiabgkhitiabdaha2jabcmcapiabgwsixlabcicaoiqbdofatzaajawaasbaasqaaiab=jgainaabaaameaacqwgqbgaaeqaaawcbeaakiabl+y6njqbdweafzaajawaa0baasqaaiab=fgahnaabaaameaacqwgpbqaaeqaaawcbagaey4kascaaogaey4kasiafm4uamlbakaadawgaawcbagae8xyae2aasbaawqaaiabdmgapbqabaaaleqaaogaes4jpfmafmyraukbakaadaqhaawcbagae8nyai2aasbaawqaaiabdqgaqbqabaaaleaacqghrawkaagccqggpaqkcqgguaglcawljagaaczcamaabmaabagaegioagdacagloagaayzkaaaaaa@670a@

s • e+ is expressed as

s·e+=∑1≤p≤|s|f⋅f
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqwipm+zcqwgfbqrdaahaawcbeqaaiabgucaraaakiabg2da9maaqafabagaemozaymaeiikagiaem4cam3aasbaasqaaiabdchawbqabagccqggpaqkcqghfly1cqwgmbgzcqggoaakcqwglbqzdaqhaawcbagaemycaehabagaey4kascaaogaeiykakcaleaacqaixaqmcqghkjyocqwgwbaccqghkjyocqgg8bafcqwgtbwucqgg8bafaeqaniabgghildaaaa@4ecf@

where sp and eq+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwglbqzdaqhaawcbagaemycaehabagaey4kascaaaaa@3079@ are the p-th and q-th elements in s and e+, respectively, and f is the weighted frequency of element e. q is chosen such that the gap state of eq+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwglbqzdaqhaawcbagaemycaehabagaey4kascaaaaa@3079@ is the smallest among the elements in e+ whose gap states are not less than that of sk. calculation of s • e+ requires o + |e+|), and hence g at most o. using equation  <dig> instead of equation  <dig> can reduce computation from o to o even in the worst case where gap states on a column are mutually different.

novel group-to-group sequence alignment algorithm with piecewise linear gap cost
in this section, we describe a novel group-to-group sequence alignment algorithm with a piecewise linear gap cost. although this algorithm uses recurrent equations  <dig> to  <dig>  the algorithms calculating s and g must be changed. roughly speaking, the term for calculating gap extension penalties is transferred from s to g. after explanation of the piecewise linear gap cost, we describe these algorithms in detail.

piecewise linear gap cost
the piecewise linear gap cost consists of several linear functions  <cit> :

g=max⁡1≤l≤l{−}     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbwzcqggoaakcqwg4baecqggpaqkcqgh9aqpdawfqaqaaigbc2gatjabcggahjabciha4bwcbagaegymaejaeyizimqaemibawmaeyizimqaemitaweabeaakiabcuha7jabgkhitiabcicaoiabdwha1naabaaaleaacqwgsbabaeqaaogaemieagnaey4kasiaemoday3aasbaasqaaiabdygasbqabagccqggpaqkcqgg9bqfcawljagaaczcamaabmaabagaegyoakdacagloagaayzkaaaaaa@4f56@

where ul > ul+ <dig> and vl+ <dig> > vl. when l =  <dig>  this cost is the same as the affine gap cost. this cost could alleviate over-penalizing long indels, because the inclination of g, which corresponds to a gap extension penalty, ul, becomes small as gap length increases. in other words, this cost calculates gap extension penalties based on gap length. for the sake of simplicity, we restricted our attention to the case of l =  <dig>  then, g = - if x ≤ xc or g = -, otherwise, xc = ⌊/⌋ is called the critical gap length.

calculation of substitution score
as mentioned above, the calculation of gap extension penalties must be separated from the calculation of the substitution score s in order to use the piecewise linear gap cost. therefore, s is expressed as:

s=∑r∈Σfai,r⋅pbj,r=∑r∈Σpai,r⋅fbj,r.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqggoaakieqacqwfhbqydawgaawcbagaemyaakgabeaakiabcycasiab=jgainaabaaaleaacqwgqbgaaeqaaogaeiykakiaeyypa0zaaabuaeaacqwgmbgzdawgaawcbagae8xyae2aasbaawqaaiabdmgapbqabawccqggsaalcqwgybgcaeqaaogaeyyxictaemicaa3aasbaasqaaiab=jgainaabaaameaacqwgqbgaaeqaasgaeiilawiaemocaihabeaaaeaacqwgybgccqghiiizcqqhjowuaeqaniabgghildgccqgh9aqpdaaeqbqaaiabdchawnaabaaaleaacqwfhbqydawgaaadbagaemyaakgabeaaliabcycasiabdkhaybqabagccqghfly1cqwgmbgzdawgaawcbagae8nyai2aasbaawqaaiabdqgaqbqabawccqggsaalcqwgybgcaeqaaaqaaiabdkhayjabgigiolabfo6atbqab0gaeyyeiuoakiabc6cauiaaxmaacawljawaaewaaeaacqaixaqmcqaiwaamaiaawicacaglpaaaaaa@6a6c@

where pbj,r=∑t∈Σfbj,r⋅s
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdawgaawcbaacbegae8nyai2aasbaawqaaiabdqgaqbqabawccqggsaalcqwgybgcaeqaaogaeyypa0zaaabeaeaacqwgmbgzdawgaawcbagae8nyai2aasbaawqaaiabdqgaqbqabawccqggsaalcqwgybgcaeqaaaqaaiabdsha0jabgigiolabfo6atbqab0gaeyyeiuoakiabgwsixlabdohazjabcicaoiabdkhayjabcycasiabdsha0jabcmcapaaa@4ab6@. note that this equation and the definition of residue profile vector sum over not Σ* but Σ.

calculation of gap extension penalty
in the previous algorithm with an affine gap cost, g was responsible for the gap opening penalty only; however, it must take care of the gap extension penalty in the case of the piecewise linear gap cost. therefore, a term for gap extension penalty is added to the right hand side of equation  <dig>  let us consider an example of gap extension penalty calculation for the null on b <dig> aligned with the residues on a <dig> . the gap state at b <dig>  is  <dig>  with omission of nulls that are aligned with other nulls, the lengths of the gap on b <dig> relative to a <dig>  a <dig>  and a <dig> are  <dig>   <dig>  and  <dig>  respectively. assuming that the critical gap length xc =  <dig>  we obtain the respective gap extension penalties for a <dig>  a <dig>  and a <dig> as u <dig>  u <dig>  and u <dig>  therefore, the gap extension penalty in question is wa1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabigdaxaqabaaaleqaaaaa@3082@ , where f <dig> = wa2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabikdayaqabaaaleqaaaaa@3084@ + wa3
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabiodazaqabaaaleqaaaaa@3086@ and f <dig> = wa4
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabisda0aqabaaaleqaaaaa@3088@.

this example indicates two important points for the exact calculation of gap extension penalty. first, each gap length is obtained by counting the residues on each row of a specific range in a called 'relevant segment', a in this example. second, the two nulls on b <dig> at columns b <dig> and b <dig> are aligned with two separate dynamic gaps inserted into a. the first observation suggests that f <dig> and f <dig> for any segment may be calculated before the dp process. however, the second observation indicates that the number of null columns of dynamic gaps aligned with static nulls on a target gap must be subtracted from the gap state of the target gap for correct assignment of the relevant segment; without this subtraction, the relevant segment would be assigned as a in the above example.

we initially consider the first point, neglecting the presence of dynamic gaps for a moment. without loss of generality, we assume that the residues on ai are aligned with a null of a target gap on bj whose gap state is g. we define f <dig> as the weighted fraction of nulls on ai: f0≡∑p=1mwapδ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrdawgaawcbagaegimaadabeaakiabcicaogqabiab=fgahnaabaaaleaacqwgpbqaaeqaaogaeiykakiaeyyyio7aaabmaeaacqwg3bwddawgaawcbagaemyqae0aasbaawqaaiabdchawbqabaaaleqaaaqaaiabdchawjabg2da9iabigdaxaqaaiabd2gatbqdcqghris5aggacogae4htdqmaeiikagiaemyyae2aasbaasqaaiabdchawjabcycasiabdmgapbqabagccqggsaalcqghsislcqggpaqkaaa@4aa3@, where δ =  <dig> if a = b, otherwise, δ =  <dig>  and '-' denotes a null. f <dig> is the same as the null component of the frequency profile at ai, i.e. f <dig> = fai,−
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgmbgzdawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabawccqggsaalcqghsislaeqaaaaa@32de@. we also define f <dig> as the sum of weights of sequences {ap} such that ap,i ≠ '-' and the number of residues within segment a aligned with the target gap is less than or equal to xc: f1=∑p=1mwap)Δ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrdawgaawcbagaegymaedabeaakiabcicaoiabdgeabjabcycasiabdmgapjabcycasiabdeganjabcmcapiabg2da9maaqadabagaem4dac3aasbaasqaaiabdgeabnaabaaameaacqwgwbacaeqaaawcbeaaaeaacqwgwbaccqgh9aqpcqaixaqmaeaacqwgtbqba0gaeyyeiuoakiabcicaoiabigdaxiabgkhitggaciab=r7akjabcicaoiabdggahnaabaaaleaacqwgwbaccqggsaalcqwgpbqaaeqaaogaeiilawiaeyoei0iaeiykakiaeiykakiaeuildqkaeiikagiaemyyae2aasbaasqaaiabdchawbqabagccqggsaalcqwgpbqacqggsaalcqwgnbwzcqggpaqkaaa@5a81@, where Δ =  <dig> if the number of residues on the p-th row of a is less than or equal to xc, otherwise, Δ =  <dig>  specifically, if ∑k=ii−g+1)≤xc
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewaqaaiabcicaoiabigdaxiabgkhitggaciab=r7akjabcicaoiabdggahnaabaaaleaacqwgwbaccqggsaalcqwgrbwaaeqaaogaeiilawiaeyoei0iaeiykakiaeiykakiaeyizimqaemieag3aasbaasqaaiabdogajbqabaaabagaem4aasmaeyypa0jaemyaakgabagaemyaakmaeyoei0iaem4zacmaey4kasiaegymaedaniabgghildaaaa@4a60@, then Δ =  <dig>  otherwise, Δ =  <dig>  likewise, f <dig> is defined as the sum of weights of sequences {ap} such that ap,i ≠ '-' and the number of residues within a aligned with the target gap is greater than xc. obviously,

f0+ f <dig> + f <dig> =  <dig>      

because there may exist gap states g and g'  such that f <dig> = f <dig>  we need to store only distinct f <dig> values, the number of which is at most the number of rows of a, m. for actual calculations, we use an 'insertion length profile' associated with each column of a group. an insertion length profile of column ai, fai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrdawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabaaaleqaaaaa@30d1@ is expressed as fai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrdawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabaaaleqaaaaa@30d1@ = {)}, where gk is a maximum gap state such that f <dig> = f <dig> for gk ≤ g' <gk+ <dig>  information about f <dig> does not need to be recorded, because it can be easily derived from f <dig> and fai
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrdawgaawcbaacbegae8xyae2aasbaawqaaiabdmgapbqabaaaleqaaaaa@30d1@ through equation  <dig>  

the second point raises the key problem: how to determine the 'tailored gap state' of the target gap, g^
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgnbwzgaqcaaaa@2e13@ = g - s, where g is the gap state of the target gap and s is the number of dynamic null columns to be removed for correct assignment of the relevant segment. for example, dynamic null columns aligned with b <dig> and b <dig> in figure  <dig> are removed. to keep track of the dynamic gaps to be removed, we newly introduce the 'dynamic gap information' list. each element of dynamic gap information is represented by , where p and l indicate the position and the length of a dynamic gap, respectively. for efficiency, the dynamic gap information list {} is sorted in order of pk. the dynamic gap information of group a at , di,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3270@, is recurrently calculated as follows. when ai and bj are aligned, di,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3270@ is simply copied from di− <dig> j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@362a@. similarly, when ai is aligned with a null column, di,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3270@ is copied from di− <dig> j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaogabagaegimaadaaaaa@344d@ or di− <dig> j2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeyoei0iaegymaejaeiilawiaemoaaogabagaegomaidaaaaa@3451@ depending on the maximum operation of recurrent equation  <dig>  when bj is aligned with a null column, di,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3270@ is first copied from di,j−10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaomaeyoei0iaegymaedabagaegimaadaaaaa@344d@ or di,j−13
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaomaeyoei0iaegymaedabagaeg4mamdaaaaa@3453@, and then a new element is added to it or its last element is modified. specifically, if the last element of di,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3270@ is , it is modified to . otherwise, a new element  is added to di,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3270@. the other dynamic gap information lists are obtained in a similar way.

it is worth mentioning that dynamic gap information di,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3270@ and gap mediation profile mi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3282@ contain information on dynamic gaps from different viewpoints. the information held in dynamic gap information is relevant to the group aligned with a gap in question , while that maintained in a gap mediation profile is relevant to the group containing the gap . in addition, each element of di,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3270@ refers to a single dynamic gap, while that of mi,j0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegimaadaaaaa@3282@ records the total length of separate dynamic gaps inserted within or after a static gap. in the case of figure  <dig>  each element of d <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardaqhaawcbagaegioagjaeiilawiaegymaejaegomaidabagaegimaadaaaaa@3298@ = {, , } indicates the dynamic gaps of lengths  <dig>   <dig>  and  <dig> inserted before column a <dig>  after a <dig>  and after a <dig>  respectively, while that of m <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaeg4nacjaeiilawiaegymaejaegymaedabagaegimaadaaaaa@32a6@ = {, ,  } means the total length of dynamic gaps inserted after the last non-null residue within or before the present column in a <dig> or a <dig>  a <dig>  and a <dig>  respectively.

given a dynamic gap information list di, j = {} and a gap state g, we can easily derive the tailored gap state g^
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgnbwzgaqcaaaa@2e13@ with the following algorithm, in which s denotes the total number of dynamic gap columns to be removed and tk indicates the distance in the reverse direction from the current position i to the start position of the k-th dynamic gap inserted into a:

algorithm gettailoredgapstate, g)

 <dig>  s ← 0

 <dig>  for k ← |di,j| down to 1

 tk ← s + i - pk+ lk

 if tk ≤ g, then s ← s + lk

 else if tk - lk <g, then s ← s + g - 

 if tk ≥ g, then return g^
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgnbwzgaqcaaaa@2e13@ ← g - s

 <dig>  retrun g^
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgnbwzgaqcaaaa@2e13@ ← g - s

the gap extension penalty for the target gap is then obtained by

wb{u1·f <dig> + u2·f2},     

where wb is the weight given to the sequence containing the target gap. note that step 2c in this algorithm examines whether or not the dynamic gap in question is partially aligned with the target gap. for the example considered in figure  <dig>  t <dig> =  <dig> +  <dig> -  <dig> +  <dig> =  <dig>  and s = l <dig> =  <dig> are calculated after the first iteration of steps  <dig> in this algorithm. in the second iteration, we obtain t <dig> =  <dig> +  <dig> -  <dig> +  <dig> =  <dig>  because t <dig> =  <dig> > g =  <dig> and t <dig> - l <dig> =  <dig> <g =  <dig>  we can recognize that the dynamic gap is partially aligned with the target gap, and hence the number of dynamic null columns to be removed  <dig> -  <dig> =  <dig> is added to s. the gap extension penalty, u, summed over all the nulls on column bj can easily be calculated with the following algorithm:

 <dig>  u ← 0

 <dig>  for h ←  <dig> to |s^bj
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfibgydawgaaadbagaemoaaogabeaaasqabaaaaa@30ff@|

 g^
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgnbwzgaqcaaaa@2e13@ ← gettailoredgapstate, gh)

 u ← u + fh{u1·f <dig> + u2·f2}

 <dig>  return u

where  is the h-th element of s^bj
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfibgydawgaaadbagaemoaaogabeaaasqabaaaaa@30ff@. because we have already prepared running gap state profile s^bj
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfibgydawgaaadbagaemoaaogabeaaasqabaaaaa@30ff@, the computation is done in o|·|s^bj
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgtbwugaqcamaabaaaleaaieqacqwfibgydawgaaadbagaemoaaogabeaaasqabaaaaa@30ff@|). to obtain the total gap extension penalty at each dp step, we must also consider the opposite situation where residues on bj are aligned with gaps on ai in a similar way.

doubly nested randomized iterative strategy
the doubly nested randomized iterative strategy involves refinement of alignment, phylogenetic tree, and pair weights until these are mutually consistent  <cit> . after preparation of an initial alignment with such progressive methods as the oligomer counting based method  <cit> , this strategy refines the initial alignment as follows:

 <dig>  calculate a distance matrix from the multiple alignment

 <dig>  construct a phylogenetic tree from the distance matrix

 <dig>  calculate pair weights from the phylogenetic tree

 <dig>  iteratively refine the alignment using the phylogenetic tree and the pair weights

 divide the alignment into two groups based on a randomly chosen branch of the tree

 align these two groups using a group-to-group sequence alignment algorithm

 repeat steps 4a to 4b until no better weighted sp score is obtained

 <dig>  repeat steps  <dig> to  <dig> until the weighted sp score of the alignment does not improve anymore at step 4

RESULTS
prime
we developed a program called prime . prime is written in iso standard c++, implementing the doubly nested randomized iterative strategy similar to our previous msa program, prrn  <cit> . however, prime employs our proposed algorithm with a piecewise linear gap cost in contrast to prrn that uses an affine gap cost. another algorithmic difference between prime and prrn is that the latter uses the candidate list paradigm in the group-to-group sequence alignment algorithm and the anchoring method, whereas the former adopts a simpler dp method without anchoring heuristics. the parameters of prime including selection of substitution matrix and gap cost parameters are optimized using an older balibase, version  <dig>   <cit> . because only about 20% of the sequences in balibase version  <dig>   <cit>  used for the test are common to those in balibase version  <dig> , we do not think that these parameters are over-fitted against balibase version  <dig> . initial msas are constructed using a simple progressive method with the proposed group-to-group sequence alignment algorithm based on a distance matrix calculated from pairwise sequence alignment. the prime source code is provided as an additional file , and can be downloaded at prime website  <cit> . the future version of prime will be available at this site.

benchmarks
to evaluate the performance of prime and other msa programs shown in table  <dig>  we execute two benchmarks: balibase version  <dig>   <cit>  and prefab version  <dig>   <cit> . in the case of prefab, we also test two global pairwise sequence alignment programs as controls: psapiecewise and psaaffine. psapiecewise and psaaffine use the piecewise linear gap cost and the affine gap cost, respectively.

programs with * employ pairwise alignment information when calculating multiple alignment. parameters or options of each program other than the gap penalty ones are chosen to obtain as accurate an alignment as possible.

balibase
balibase is categorized into five references according to the nature of sequences to be aligned . reference  <dig> is further divided into two sub-references based on sequence identities. although the previous balibase version  <dig>  has been widely used, it had a problem that some sequences were trimmed off non-homologous regions  <cit> . therefore, two test sets are prepared in balibase version  <dig> : full length set and homologous region set. each sequence in the full length set is not trimmed off non-homologous regions, whereas the homologous region set consists of alignments of trimmed sequences and hence corresponds to the previous balibase. however, reference  <dig> is excluded from the homologous region set due to its objective.

alignment evaluation based on balibase
to evaluate alignment accuracy based on balibase, we use sum-of-pairs and column scores  <cit> . the sum-of-pairs score  is defined as the proportion of correctly aligned residue pairs:

sps=∑i=1ispit∑j=1jspjr,
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqwgqbaucqwgtbwucqgh9aqpdawcaaqaamaaqadabagaem4uamlaemiuaa1aa0baasqaaiabdmgapbqaaiabdsha0baaaeaacqwgpbqacqgh9aqpcqaixaqmaeaacqwgjbqsa0gaeyyeiuoaaoqaamaaqadabagaem4uamlaemiuaa1aa0baasqaaiabdqgaqbqaaiabdkhaybaaaeaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgkbgsa0gaeyyeiuoaaagccqggsaalaaa@49a7@

where i and j are the number of columns of test and reference alignments, respectively. spit
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqwgqbaudaqhaawcbagaemyaakgabagaemidaqhaaaaa@31fd@ is defined as:

spit=∑1≤m<n≤npi.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqwgqbaudaqhaawcbagaemyaakgabagaemidaqhaaogaeyypa0zaaabuaeaacqwgwbacdawgaawcbagaemyaakgabeaaaeaacqaixaqmcqghkjyocqwgtbqbcqgh8aapcqwgubgbcqghkjyocqwgobgtaeqaniabgghildgccqggoaakcqwgtbqbcqggsaalcqwgubgbcqggpaqkcqgguaglaaa@47a8@

if aligned residue pair ami and ani of the test alignment also exists in the reference alignment, pi =  <dig>  otherwise, pi =  <dig>  spjr
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqwgqbaudaqhaawcbagaemoaaogabagaemocaihaaaaa@31fb@ is the total number of aligned pairs on column j of the reference alignment. the column score  represents the proportion of correctly aligned columns:

cs=1j∑i=1ici.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgdbwqcqwgtbwucqgh9aqpdawcaaqaaiabigdaxaqaaiabdqeakbaadaaewbqaaiabdogajnaabaaaleaacqwgpbqaaeqaaaqaaiabdmgapjabg2da9iabigdaxaqaaiabdmeajbqdcqghris5aogaeiola4caaa@3c74@

if the column of the test alignment is identical to the i-th column of the reference alignment, ci =  <dig> 

otherwise, ci =  <dig> 

prefab
prefab is another msa benchmark. each alignment of prefab is generated automatically, while that of balibase is constructed by human expertise. prefab consists of three data sets: main, long gap, and weighting sets. the main set corresponds to the previous prefab version  <dig> , which is not categorized unlike balibase. each alignment of the long gap set, a subset of the main set, contains one or more gaps whose lengths are more than  <dig>  the weighting set involves alignments each of which includes more sequences of one sub-family than that of the other sub-families. whereas each reference alignment of balibase is provided as an msa, each reference alignment of prefab is provided as a pairwise alignment of a pair of pdb sequences of known structures.

alignment evaluation based on prefab
for alignment evaluation of prefab, the quality score is employed, which measures only two pdb sequences within each alignment. the quality score  is the ratio of correctly aligned residue pairs of the reference pairwise alignment: qs=1j∑i=1jpi
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgrbqucqwgtbwucqgh9aqpdawcaaqaaiabigdaxaqaaiabdqeakbaadaaewaqaaiabdchawnaabaaaleaacqwgpbqaaeqaaaqaaiabdmgapjabg2da9iabigdaxaqaaiabdqeakbqdcqghris5aaaa@3b7e@, where j is the number of residue pairs in the reference alignment. if the residue pair of the test alignment is also aligned in the reference alignment, pi =  <dig>  otherwise, pi =  <dig>  note that if the reference alignment is pairwise alignment, quality score, sum-of-pairs score, and column score have the same value.

results of balibase benchmark test
full length set
the average sum-of-pairs and column scores of the full length set are shown in tables  <dig> and  <dig>  respectively. the last columns of both tables are the rank sum of the friedman test. the program with the smallest rank sum means that the program consistently constructs the most accurate alignments even if it does not achieve the largest average score. the p-values of the friedman test are shown in the additional file . the friedman test indicates that the tested programs are classified into three groups according to their performances. the most accurate group consists of primepiecewise, primeaffine, mafft, probcons, and t-coffee. the second most accurate one is prrn and muscle. the accuracies of dialign-t, poa, and clustalw are comparable to each other but are significantly lower than those of prrn and muscle. figure  <dig> shows the performance difference between primepiecewise and primeaffine. in this figure, we plot the difference in alignment scores of primepiecewise and primeaffine. a positive difference score means that primepiecewise constructs more accurate alignments than primeaffine, and vice versa. although the difference is not statistically significant, primepiecewise shows better performance than primeaffine, as expected.

each column shows average sum-of-pairs scores using all alignments of each reference of the full length set. overall and ranksum columns show the average sum-of-pairs scores and the rank sum of the friedman test using all alignment of the whole full length set, respectively. a smaller rank sum means better accuracy.

each column shows average column scores using all alignments of each reference of the full length set. overall and ranksum columns show the average column scores and the rank sum of the friedman test using all alignment of the whole full length set, respectively. a smaller rank sum means better accuracy.

homologous region set
the average sum-of-pairs and column scores of the homologous region set are shown in tables  <dig> and  <dig>  respectively. the p-values of the friedman test are shown in the additional file . unlike the results of the full length set, little difference in accuracy was detected between primepiecewise and primeaffine. figure  <dig> shows the performance difference between them. because the terminal non-homologous regions trimmed off in the homologous region set are usually long, for the full length set, the piecewise linear gap cost treats the long terminal gaps more effectively than the affine gap cost, and hence primepiecewise shows better performance than primeaffine. however, because the difference between these gap costs is relatively small in the homologous region set, primepiecewise and primeaffine show similar performance. the relative performance of the nine programs examined is nearly the same as that of the full length set in a statistical sense.

each column shows average sum-of-pairs scores using all alignments of each reference of the homologous region set. overall and ranksum columns show the average sum-of-pairs scores and the rank sum of the friedman test using all alignment of the whole homologous region set, respectively. a smaller rank sum means better accuracy.

each column shows average column scores using all alignments of each reference of the homologous region set. overall and ranksum columns show the average column scores and the rank sum of the friedman test using all alignment of the whole homologous region set, respectively. a smaller rank sum means better accuracy.

effects of non-homologous regions
we examine the effects of non-homologous regions in more detail. the critical difference between the full length and homologous region sets is the existence of non-homologous regions at n/c terminals. therefore, the difference in alignment scores obtained by the same program for the corresponding members in the full length and homologous region sets indicates to what extent the program properly deals with terminal gaps. figures  <dig> and  <dig> show the average difference of sum-of-pairs and column scores between the full length and homologous region sets. each difference score is calculated by subtracting the alignment score of the full length set from that of the homologous region set. a positive difference score means that the non-homologous regions adversely affect alignment accuracy, whereas a negative score indicates improvement in alignment accuracy due to the presence of such regions. if the score difference is close to  <dig>  the program is considered to be robust against the non-homologous regions. the results indicate that primepiecewise is less affected by such regions than primeaffine. this follows the general tendency that terminal gaps reduce more significantly the accuracy of global alignment programs including prrn, muscle, poa, and clustalw than that of mafft, probcons, and t-coffee that incorporate local alignment information in some ways. these observations indicate that prlmepiecewise deals with terminal gaps better than conventional global msa programs, although not as well as those incorporating local alignment information.

results of prefab benchmark test
the average quality scores of the three sets of prefab are shown in table  <dig>  the overall tendencies of relative performances and the friedman tests of the main and long gap sets are nearly the same as those of balibase. however, in the case of the weighting set, all programs except poa are comparable to each other. because poa does not use sequence weights, 'biased sub-family composition' might adversely affect the performance of poa compared with the other programs.

each qs and ranksum columns show the average quality scores and the rank sum of the friedman test using quality scores on all alignments of each reference set, respectively. a smaller rank sum means better accuracy.

computation time
the computation time of each program for executing the benchmarks is compiled in table  <dig>  the computer we used is pentium <dig>  <dig> mhz with  <dig> gb memory, running on redhat linux  <dig> . primepiecewise and primeaffine are somewhat slower than most programs tested. the computational speed would be significantly improved by incorporating anchoring heuristics and refining source codes.

balibase column shows total times  of constructing all alignments of the full length and homologous region sets by each program, while prefab column, those of calculating whole alignments of the main and weighting sets only.

discussions and 
CONCLUSIONS
the group-to-group sequence alignment algorithm is the key to most heuristic msa algorithms. although many group-to-group sequence alignment algorithms focus on position-specific gap opening penalties  <cit> , they use essentially a constant gap extension penalty similar to that of the affine gap cost. for global msa algorithms, use of the constant gap extension penalty could lead to deterioration of alignment accuracy when some of the sequences to be aligned have long indels. to our knowledge, poa version  <dig>  <cit>  is the sole precedent that incorporates length-dependent gap extension penalties into the group-to-group sequence alignment algorithm. examination of poa with various options indicated that length-dependent gap extension penalties with global alignment strategy are effective to improve alignment accuracy when some of the sequences to be aligned have long indels .

in this paper, we proposed a novel group-to-group sequence alignment algorithm with the piecewise linear gap cost, and developed a program called prime. the advantage of using the piecewise linear gap cost is that this gap cost more accurately models the occurrence of long gap in a simple way than other gap cost does. as a result of balibase benchmark test, prime achieved alignment accuracies comparable to the most accurate programs available today including l-ins-i of mafft, probcons, and t-coffee. unlike others, prime does not rely on pairwise alignment information. this implies that the introduction of length-dependent gap extension penalties could contribute to improving the alignment accuracy even when pairwise alignment information is not used.

it should be noted that our proposed algorithm has two inherent drawbacks. first, it is considerably slower than many popular algorithms. second, selecting the parameters of the piecewise linear gap cost is somewhat more complicated than that of the affine gap cost. however, these drawbacks would not be serious enough to reduce the advantages of our proposed algorithm and prime. unlike most popular algorithms, prime can circumvent the time-consuming process for obtaining pairwise alignment information, and hence it is theoretically advantageous for aligning a large number of sequences. our preliminary examination confirmed the expected dependency of computational time on the number of sequences to be aligned. however, the current version of prime is still slower than most of other programs over the examined range of the number of sequences . one of the reasons is that the current prime does not use any heuristics, such as anchoring or grouping method used in prrn, for reducing the computation. to improve calculation speed of prime without a loss of accuracy, we are attempting to incorporate these heuristics. to further improve alignment accuracy, we will investigate several problems including the conditions under which primeaffine constructs more accurate alignment than primepiecewise, the potential of other objective functions, and the effect of incorporating pairwise alignment information.

availability and requirements
project name: prime project

project home page: 

operating system: platform independent

programming language: c++

licence: gnu gpl version  <dig> or later

any restrictions to use by non-academics: none

authors' contributions
sy devised the proposed algorithms, implemented prime, carried out the benchmark test and its evaluation, and drafted the manuscript. og conceived of the study, devised the proposed algorithms, helped to implement prime, and drafted the manuscript. hy participated in the design and coordination of the study, and helped to implement prime. all authors read and approved the final manuscript.

supplementary material
additional file 1
prime source code. this tar.gz archive includes the source files of prime. to compile prime, one can check 'install' and 'makefile' in the archive. although 'makefile' basically assumes gnu make and g+ +, another compiler can be used with a few modification of 'makefile'.

click here for file

 additional file 2
p-values of the friedman test of full length set. each value is p-value of the friedman test, indicating the significance of a difference in performance between programs of a row and a column. the upper right and lower left p-values are calculated using sum-of-pairs and column scores on all alignments of the whole full length set, respectively. primepcw denotes primepiecewise, and primeafn, primeaffine. the respective signs + and - denote that a program of a row performs significantly better and worse than that of a column.

click here for file

 additional file 3
p-values of the friedman test of homologous region set. each value is p-value of the friedman test, indicating the significance of a difference in performance between programs of a row and a column. the upper right and lower left p-values are calculated using sum-of-pairs and column scores on all alignments of the whole homologous region set, respectively. primepcw denotes primepiecewise, and primeafn, primeaffine. the respective signs + and - denote that a program of a row performs significantly better and worse than that of a column.

click here for file

 acknowledgements
this work was partially supported by a grant-in-aid for scientific research on priority areas  "genome information science" from the ministry of education, culture, sports, science and technology of japan; and by the institute for bioinformatics research and development  of japan science and technology agency .
