BACKGROUND
over the past few decades, biology has transformed into a high throughput research field, both in terms of the number of different measurement techniques as well as the amount of variables measured by each technique , and is more and more targeted to individual cells  <cit> . this has led to an unprecedented growth of biological information. consequently, techniques that can help researchers find important insights into the data are becoming increasingly important. predicting survival of cancer patients based on measurements from microarray experiments has been a field of great interest, but there is often very little overlap between the important genes or biomarkers identified by different studies  <cit> . several reasons have been suggested to explain these findings . attempts have been made to incorporate additional information from other sources, such as protein-protein interaction  networks, to make the predictions more robust  <cit> . one of the latest approaches integrates network and expression data by introducing a network-induced classification kernel   <cit> . although this method exhibits state-of-the-art performance, the way it penalizes genes that are connected to not-predictive genes can result in selection of isolated features as important features for prediction. we observed this bias of the method towards isolated nodes on additional experiments on synthesized data as shown in additional file  <dig>  another issue is that in ppi networks, genes or proteins, which have been known to researchers longer and are well-known, are studied more and therefore have more edges connected to them; whereas less well-known genes and proteins are in sparser areas of the network. this bias might further affect the judgment of methods like nick that use a ppi networks as an input. consequently, we rely on the fact that such networks exist between genes and proteins, but we do not take them as input. if there is a dependence between input features, which is the case in many biological settings, our method can benefit from this effect. otherwise, it is reduced to a standard ensemble method. furthermore, a central assumption underlying many methods is that all data are drawn from the same unknown underlying distribution. this may not be the case, especially for heterogeneous cancer samples, and in particular not for all measured genes.

in this work, we introduce a method that is aware of this potential bias and utilizes an estimate of the differences during the generation of the final prediction method. for this, we introduce a set of sparse classifiers based on l1-svms  <cit> , where each set of features used by one classifier is disjoint from the selected feature set of any other classifier. furthermore, for each feature chosen by one of the classifiers, we introduce a regression model that uses additional features and is based on gaussian process regression. these regression models are then used to estimate how predictable the features of each classifier are for each test sample. this information can then be used to find a confidence weighting of the classifiers, i.e. up-weighting classifiers with high confidence and down-weighting classifiers with lower confidence, for each test sample. schapire and singer show that incorporating confidences of classifiers can improve the performance of an ensemble method  <cit> . however, in their setting, confidences of classifiers are estimated using the training data and are thus fixed for all test samples, whereas in our setting, we estimate confidences of individual classifiers per given test sample. another related work includes mixture of experts, in which the model trains a set of neural networks and uses a gating network to set the weights of the networks  <cit> . one issue with their method is that neural networks with lower performance will not be optimized as much as networks with better performance on training data since the gate module down-weights the error propagated to them. also training of the gating network is interconnected with the neural network experts and afftects training of those modules. our method, in contrast, trains each module independently using all training samples, and their reliability does not affect how they are trained. bayesian hierarchical mixtures of experts takes a more similar approach, but the method is complex, and it has a high time complexity to train the architecture of the hierarchy  <cit> .

we show that this method exhibits state-of-the-art performance for different cancer types, with gene expression or methylation data sets as the input. since the weighting of the classifiers is customized for each test sample, the estimated confidences can offer insights into the specific characteristics of each individual’s cancer. to facilitate interpretation of the model, we then create a visualization of the important genes found through this analysis for each test sample. additionally, we show how the important genes of the training set can be found using our learning method and cross validation.

our idea might resemble ensemble feature selection, which involves aggregating multiple feature scores from several scoring mechanisms. these scoring mechanisms vary from being several different methods, to being the same method applied to different parts of the data such as a random cross validation scheme  <cit> . this idea has been studied further by other researchers and they introduced two different methods to aggregate scores from different models. they use an ensemble of support vector machines which on its own has been used to select features in a given data set in other works  <cit> . although we use an ensemble of support vector machines, our goal is not to give a ranking to features of the data set, rather to find multiple parsimonious gene sets that are predictive of the outcome on their own, and use all of them in parallel to predict the outcome.

similar to this approach, in another work, irda uses a different approach and can report multiple parsimonious gene sets  <cit> . one significant difference between irda and our work is that we have an embedded prediction approach using these sets, which irda lacks. furthermore, gene sets are somehow ordered in irda according to their “strength”, and within each set, redundant genes are removed. in our model redundant genes can be included in two different ways. one is within different individual learners. for example, if genes g <dig> and g <dig> are both strong but redundant, individual learner  <dig> might include g <dig>  and individual learner  <dig> might include g <dig>  also, if there are more redundant or related genes in the gene pool, they will be used to estimate how reliable g <dig> and g <dig> are. therefore instead of dismissing them, we exploit the fact that they exist.

related to sorting genes and testing for significance of a reported gene set, gene set enrichment analysis  and its modifications are a commonly used tool  <cit> . gsea based methods rank genes depending on how much they relate to the outcome. the choice of relationship is rather free and can vary from pearson correlation to mutual information. then for a given gene set, a p-value is calculated by estimating how often a random gene set appears before the given set on the list. there have been several modifications and improvements to the method  <cit> . although it is true that gsea is used to assess the relevance or importance of a given set to the outcome, we need to remember that a particular gene set might consist of genes that are not necessarily important on their own, but are predictive once considered together. our method does not consider genes individually whereas gsea does to sort the genes in the first place. therefore we believe gsea based methods are not suitable to assess how well our method performs.

methods
materials
data sources
in this article, our method is applied to two different data types: gene expression data and dna methylation data, which we retrieved from the cancer genome atlas   <cit> . tcga is a joint effort of the national cancer institute and the national human genome research institute to advance the understanding of the molecular basis of cancer. they provide access to the different measurements from cancer samples that have been analyzed to external researchers. samples are categorized according to diagnosed cancer from which we use the following groups: 
acute myeloid leukemia   <cit> : at the time of writing, the data set includes  <dig> samples.  <dig> samples contain methylation data and we use the part of the data measured by jhu-usc humanmethylation <dig> arrays.  <dig> samples contain mrna data measured by hg-u <dig> arrays. in this article the methylation data is referred to as tcga-laml. among available characteristics of samples, “risk group” and “vital status” are chosen as target classes. these labels show the aggressiveness of the disease. in our analysis, regarding risk group, {favorable} and {intermediate/normal, poor} samples form our two group, and in the analysis of vital status, {alive} and {dead} samples form our two groups of samples.

breast invasive carcinoma   <cit> : this data set includes  <dig> samples with clinical data, and we use the methylation data component measured by jhu-usc humanmethylation <dig> arrays. only very few samples in this data set are indicated as having metastasized . hence the data are analyzed according to “tumor size”, “affected nearby lymph nodes”, “stage”, and “estrogen receptor”. estrogen receptor was shown to be an important factor in prognosis  <cit> , and along with other factors directly affects the decision for therapy  <cit> . for tumor size {t <dig>  t2} samples are one category and {t <dig>  t4} the other category; in order to analyze affected nearby lymph nodes, {n0} is compared to {n <dig>  n <dig>  n3}; stage is analyzed as having {stage i, stage ii} vs. {stage iii} samples. estrogen receptor status of samples is either positive or negative, and they form our two classes.



data preprocessing
to prepare gene expression data for analysis, microarray probes are mapped to their respective gene. if there are multiple probes for a gene, the median reported gene expression value of those probes is adopted as the gene expression for that gene.

preparing the methylation data, we use the nearby gene for each methylation site available for each sample and each methylation site. the median beta value of methylation sites mapped to each gene is taken as the methylation value of the corresponding gene. in this process only methylation sites located on the promoter region of a gene are considered and others are discarded.

boosting
for a given prediction problem the idea of boosting is to find an optimal combination of classifiers, also called “weak learners”  <cit> . there are many methods of finding the optimal combination of such weak learners, two of which are stochastic gradient boosting  <cit>  and adaboost  <cit> . stochastic gradient boosting tries to estimate the gradients of the loss function and train each individual weak learner in a way that best improves the loss function. adaboost tries to identify samples among given data samples that are harder to classify, and gives them more weight in the process of training individual weak learners. one way of improving adaboost is to take into account the confidences of predictions given by weak learners if possible and use estimated confidences in the voting process  <cit> .

learning a mixture of disjoint classifiers
when dealing with cancer, we need to consider the fact that tumors of the same type of cancer can be very different in nature and they are usually classified as different cancer subtypes. in fact, even one single tumor can be very heterogeneous  <cit> . this means that the malignancies causing the cancer to happen are genetically different between subtypes, or even within subtypes, and it is possible to have multiple underlying cellular processes causing a particular cancer. also it is important to note that the nature of our given data is such that the input features are properties measured from genes, e.g. gene expression or methylation values, and these variables are correlated and statistically dependent on each other. our method tries to exploit these properties of the problem to infer an interpretable model with state-of-the-art performance.

our method can be characterized by the following key parts:

training phase: 
fit several individual classifiers to the data, in such a way that the features of the data they use are disjoint sets.



prediction phase: 
calculate the prediction confidence of each individual classifier by: 
estimating the reliability of input features of the classifier;

estimating the confidence of the output based on the decision values.



calculate a weighted prediction label based on the individual classifier confidences.



properties of the individual classifiers
a wide variety of classifiers is possible within our framework. one requirement is that the classifier is regularized . the classifier is also required to report the probability of its calculated output, or to give a decision value according to which it chooses the predicted class. we use an l <dig> regularized svm for this purpose with a linear kernel  <cit> . the l <dig> regularization makes the svm sparse, i.e. using only a few input features, and the linear kernel allows us to infer which features are used in the decision function of the svm after it is fit to the data.

training the individual classifiers
the model starts with no individual classifiers and an empty set of excluded features. in each step, the excluded set of features is removed from the data, then a classifier is fit to the data. next the features used by the most recent trained classifier are added to the excluded set. in the case of a linear kernel svm, this is achieved by finding features with a non-zero coefficient in the model. this way the features being used by classifiers are disjoint and might represent different underlying causes of groups into which samples are to be classified.

combining classifiers by estimating confidences of individual predictors
given a set of classifiers, the question is how to combine them to come up with a joint prediction value for each test sample for which we want to predict the output label. the intuition behind combining the classifiers is to put more weight on classifiers that use features whose behavior is similar to the training data. this is motivated by the fact that some parts of the test data might behave very differently to the training data, meaning that a classifier using these features should have lower performance than a classifier using features that are distributed similarly to the training data. therefore we need to evaluate the reliability of the input features of each individual classifier. in scenarios like gene expression or methylation analysis, we usually have many input features. furthermore, many features are correlated and statistically dependent. the idea of our new method is to build separate prediction models for each feature of each classifier. these prediction models can then be used to obtain a confidence for the feature in a given test sample. these confidences can then be combined for each classifier to give a weighting of the classifiers for the given test sample. to evaluate an observed feature f, we try to choose a few statistically dependent features, and fit a model to predict f. to find these features, first the estimated maximal information coefficient  of all other features with feature f is calculated  <cit> . then, features having mic value within the top  <dig> % or the  <dig> features with highest mic with f , are selected as predictors of f. given a test sample, the closer the predicted value of f is to the observed value, the more reliable it is. to quantify this, we need to not only know the predicted value of the feature, but also a confidence interval for that prediction. this can be achieved using gaussian processes, which give the mean and variance of the posterior probability under the condition of observed values for selected features. a weighted average of these values gives us the overall reliability of the features of an individual classifier.

in addition to the confidence in the classifier estimated by looking at the confidences of its individual features, we also account for the confidence that the classifier has in the prediction label of the test sample. if the method supplies such a confidence value , we can directly use it. otherwise, we estimate it using the decision value. in our setting, the linear svm gives a decision value whose sign defines the predicted class. using these values we estimate a confidence for each individual classifier. several approaches exist for deriving a confidence from the decision values  <cit> . whether these or other additional methods could lead to further improvements of our method, will be topic of further study.

more formally speaking, define x to be the set of input samples, xs to be the input vector of sample s, ys and ŷs to be respectively the original label and predicted output of sample s, Δ to be the set of individual classifiers, li to be an individual classifier, Φli the set of input features of classifier li, li to be the label predicted by classifier li for sample xs, and f to be a feature, xs,f to be the observed value of feature f in sample xs, |wli| to be the absolute value of the weight of feature f in the decision function of classifier li, and gf to be the gaussian process predicting feature f using feature set Φf. also μgf and σgf are the mean and standard deviation of the posterior probability given by gaussian process gf under the condition of observing values of features in Φf, and μli and σli are respectively the expected mean and standard deviation of the decision value of classifier li. here f is the cumulative distribution function of a standard normal distribution.

the training phase of the model is shown in fig.  <dig>  in which, n is the number of individual learners to be included in the model, Φl is the union over all Φli and x−Φl is the input x after discarding all features of the set Φl. top is the function which selects the maximum of the top  <dig> and top  <dig> % features f′ of all features ordered by mic with feature f.
fig.  <dig> uml activity diagram of the training process



now given a test sample xs, the estimated confidence of a feature f is: 
  <dig> cf:=2·f−xs,f−μgfσgf 

then the overall feature reliability or confidence of a classifier li is estimated as: 
  <dig> cli1:=∑f∈Φlicf·wli∑f∈Φliwli 

also the estimated output confidence of the classifier li is: 
  <dig> cli2:=1−2·f−li−μliσli 

and the final confidence of the classifier li is then: 
  <dig> cli:=cli1·cli <dig> 

finally, the predicted class ŷs is calculated as the sign of a weighted vote among individual classifiers: 
  <dig> ŷs:=sign∑li∈Δcli·li∑li∈Δcli 

visualization of model predictions
the interpretation of the model can be understood on two different ways. first we assume for a given training data set, the model is trained and a new test sample is given. for the given test sample it is possible to visualize the reliability of each used feature in individual classifiers, as well as the overall confidence of each individual classifier. used features can be superimposed onto a ppi network as well as their reliability and the confidence of their respective individual classifier.

gene expression and methylation level measurements from cancer samples are usually very noisy. furthermore, cancers are usually very heterogeneous. additionally, there might be different subgroups for each interesting group , for which the importance of the features also differs. to get a global picture of the important features, we therefore evaluate how often certain features are selected by the classifiers using  <dig> random train test partitionings with  <dig> % of the data for training and  <dig> % of the data for testing. to visualize high confidence relationships between features, we create a graph which has a node for every chosen feature in any of the  <dig> train partitions in any of the individual classifiers. the weight of an edge  is defined as the number of times the respective features have occurred together in an individual classifier. then, all edges with low weights are discarded. in order to find a threshold to prune edges according to their weights, a gaussian kernel density estimate is fit to the weights of the edges, and the threshold is chosen at the 90th percentile. nodes that have an appearance frequency higher than the threshold are labeled by their gene names and edges having a higher weight than the threshold are kept in the graph.

for illustration purposes, choosing the regularization parameter is done in a way to maximize the number of genes selected with high confidence, as well as minimizing the number of genes pruned out in the process. it is important to remember that considering the results of the method under different regularization parameters is essential to make sure the selected genes possess a high confidence and are also stable regardless of sampling of the training data set.

implementation details
to compare the performance of our method with other methods, the implementations present in python scikit-learn package are taken. in the case of stochastic gradient boosting, the representing class is gradientboostingclassifier, the number of classifiers is set to  <dig>  and to make it sparse and prevent over-fitting, the maximum number of features for splits in trees is set to  <dig>  and the maximum number of layers is set to  <dig>  for adaboost, adaboostclassifier is used, which is an implementation of adaboost-samme  <cit> , with weak learner set to decisiontreeclassifier with maximum depth set to  <dig>  and the number of weak classifiers set to  <dig>  parameters of the two boosting algorithms are chosen by a grid search on their parameter space over all the data sets and selecting the parameter sets which give a robust and stable result over all experiments.

as an svm, ν-svm with ν= <dig>  is used, once with a linear kernel, and once with an rbf kernel; γ parameter of the rbf kernel is set to − <dig>  the ν parameter is set to the maximum value for which the optimization function is solvable with libsvm for all analyzed data sets  <cit> . smaller values cause the svm to overfit to the data and not generalize well. the gaussian process’s correlation function is a squared-exponential, and mic is estimated using minepy package  <cit> .

the ppi network used in our analysis is from the human protein reference database   <cit> . almost all edges and relationships between proteins that are added to this database are manually extracted from literature by biologists, hence it has a lower rate of edges included in the database for which there is no evidence in the literature.

RESULTS
performance comparison
the performance of the method was compared with that of two ensemble methods, adaboost and stochastic gradient boosting, as well as an svm with linear kernel, and an svm with an rbf kernel. we also included our implementation of the nick method  <cit> . we randomly partitioned the data into training and test sets with  <dig> % of the data for training and  <dig> % of the data for testing. to compare the performance of the different methods, area under the receiver operating characteristic curve   <cit>  was calculated on the test set over the decision values returned by the methods on the individual samples. the process was repeated  <dig> times to reduce random effects. as seen in fig.  <dig>  overall performances of all methods are comparable. in some cases a single svm works better, in some other cases ensemble algorithms give a better performance. however, in most cases an improvement in performance is observed by adding individual learners to the model, with the greatest gains due to the first few individual learners added to the model. in two cases, tcga-laml/vital status and tcga-laml/risk group, our reported performance measures are significantly lower than other methods. this, however, comes from the fact that we have enforced extreme sparsity measures. the performance of the method increases and reaches the other methods’ performance levels if this constraint is relaxed, as reported in additional file  <dig>  we enforced those sparsity measures for all models to avoid over-fitting. optimizing the sparsity constraint via cross-validation would have been computationally expensive, which is why we preferred to be conservative. had we optimized the sparsity constraint, we would have still been able to find the significant features while having similar performance as the other methods. we would like to note that as shown in additional file  <dig>  for tcga-laml/vital status and tcga-laml/risk group, the performance of a single learner seems to be better than having multiple learners. this could be due to the fact that the hidden underlying data distribution is more homogeneous than in the other prediction tasks . furthermore, there is generally no free lunch in optimization  <cit> , meaning loosely speaking that there will always be a data set where a novel method performs worse than other methods. we plan to investigate these cases further , and improve our method to tackle the peculiarities of these data sets.
fig.  <dig> performance summary . each box shows a 25–  <dig> % interval, as well as the median, which is shown as a horizontal line in each box



interpretability of predictions
here we present the results of running the method on the tcga-laml gene expression data set.

visualization of features important for a particular test sample
having a model trained on the data, and given a test sample, it is possible to infer and visualize which individual classifier is  influencing the prediction most. to this end, individual learners as well as the features they use are visualized as in fig. 3a. in this figure, nodes with labels starting with “l_” represent individual classifiers, and other nodes are labeled with their respective gene name. the color of the node shows its confidence compared to other nodes; the darker the node, the higher the confidence. in the case of a gene, it is the confidence or reliability of the feature , and in the case of an individual classifier, it is the overall estimated confidence . edges show which classifier is using which genes in its decision function. the shape of a node represents the individual classifier they belong to.
fig.  <dig> visualization of one model. a sample model for tcga-laml gene expression data  individual classifiers and their selected features; higher confidence of a node is shown by a darker color,  selected genes plotted over the ppi network; green and yellow show low and high confidence respectively, and the thickness of the border of the node shows the respective confidence of the individual classifier to which it belongs



to get a better overview of the individual features that were chosen by the classifiers for the particular test sample, we visualized the corresponding genes on a graph containing information about the ppi network in fig. 3b. we extracted the ppi information from hprd as explained before. this way, it is possible to find over- or under-regulated pathways that might be responsible for the label  of the test sample. since ppi networks can be quite dense, we removed parts of the induced network. for this purpose we computed each shortest path between all pairs of selected features. then, the minimum spanning tree of that section was plotted, after removing branches with no selected feature.

most of the features chosen by any of the classifiers  are not connected to any other chosen feature. it is known that there is in many cases a correlation between expression value of the genes whose corresponding proteins interact  <cit> . therefore, a regularized model will only choose a subset of the correlated features. this explains the observation that features selected by a single model can be distant from each other on a ppi network; but if multiple disjoint sparse models are fit to the data, their selected features might happen to be close to each other on the ppi network .

visualization of important global features
as explained in section “visualization of model predictions”, a graph is created from model structures of all  <dig> random training partitions, and then it is pruned to keep only high confidence nodes and edges. the density estimation of the graph edge weights and the pruned graph are plotted in fig. 4a, b where the nodes with labels are the ones that are not pruned. the nodes in this figure that do not have any label, are the ones with frequency lower than the corresponding threshold. among the features considered to be important were features that had previously been linked to leukemia such as sh3kbp <dig>  <cit> .
fig.  <dig> 
a determine pruning threshold. threshold is determined by finding the point after which,  <dig> % of the area under the curve is observed from left to right. the horizontal axis shows the observed frequency or weight of the edges. b important global features high confidence nodes and edges of the graph generated from the model on tcga-laml gene expression data. darker color represents higher rate of being selected by a classifier



what was more intriguing to see was that four out of the seven important features of the tcga-laml gene expression data set contained ribosomal proteins when using the risk group label, i.e. rpl37a, rps <dig>  rps3a, and rpl23a. for a long time ribosomes were just considered machines that perform an unbiased translation of genes from mrna to amino acid sequences, but this view has recently been challenged  <cit> . one new hypothesis is that the ribosome introduces an additional regulatory layer. therefore, it could very well be that mutations in ribosomal proteins can lead to a misregulation of expression levels of important genes and ultimately to the development of cancer . one of the ribosomal proteins we found was rpl23a. it has been shown that loss of rpl23a can impede growth and lead to morphological abnormalities in arabidopsis thaliana  <cit> . therefore, a mutation in rpl23a might also have severe effects in humans. a missense mutation in rpl23a was recently found in patients having diamond-blackfan anemia, which is an inherited form of pure red cell aplasia   <cit> . note that the model for laml has low performance for the regularization value chosen. nevertheless, the features shown here are also the ones with the highest confidence for models learnt with less regularization . the models with less regularization show similar performance to the other methods shown in fig.  <dig> 

CONCLUSIONS
machine learning has become more and more popular in many real world scenarios for making sense of large collections of facts. differences between the data used for training the method and new data for which the label should be predicted can limit the performance of prediction methods on those data. in this work we introduced a method that estimates these potential partial biases and incorporates them into the prediction function. we applied it to gene expression and dna methylation measurements from cancer patients. our method has state-of-the-art performance on many different prediction tasks. furthermore, we show how to make sense of the predictions. visualizing the important genes can lead to new biological insights, as shown for the tcga-laml data set with the risk group label. instead of mapping the genes to ppi networks, one could also think of mapping them to signaling pathways  <cit> .

recently, a study showed that most published signatures are not significantly more associated with cancer outcome than random signatures  <cit> . one of the reasons for this finding is that the data comes from slightly different underlying hidden data distributions. since our new method estimates this bias and corrects for it by up-weighting the classifiers that have higher confidence, we expect that it should be less susceptible to such differences in the data.

in this work we designed and developed a method that besides being a predictive model, it can be used for two different purposes. it can be used as an exploratory method to reveal potential features used in future studies; and it can be used to different underlying causes of the same disease and with its interpretability help oncologists to choose the treatment accordingly.

we would like to point out that the applicability of our method is not limited to cancer outcome prediction, and it can apply to many more scenarios. the method assumes that the data has enough features to select from, and that there are related features to those selected ones that can be used to estimate their reliability. these are conditions that almost all biological data satisfy, hence the method can be applied to them.

the method also works as a skeleton whose components can be easily substituted. for example, by changing the classifier used in individual learners to a multi-class classifier, the method would work on multi-class problems. for the sake of simplicity and without loss of generality we performed the evaluations only on binary classification problems. also, due to the structure of our model, one possible approach would be to use a method such as irda and use those gene sets as features of individual learners. whether this approach leads to better results or not requires further research. also, the combination of maximal information coefficient and gaussian processes is not the only feasible option, and they can be replaced with other faster methods if the time complexity of the method is of any concern. some of these alternatives are already available on the github repository of the method.

additional files
additional file  <dig> nick method analysis. 



additional file  <dig> detailed performance measures. 



