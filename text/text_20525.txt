BACKGROUND
we participated in the biocreative evaluation . we addressed task  <dig>  the problem of annotation of a protein with a node in the gene ontology   <cit>  based on the text of a given document, and the selection of evidence text justifying the predicted annotation. we approached the task utilizing various combinations of two distinct methods. the first method is an unsupervised algorithm for expanding words associated with go nodes. the second method approaches annotation as categorization of terms derived from the sentential neighborhoods of the given protein in the given document into nodes in the go. this term categorization draws on lexical overlaps with the terms in go node labels and terms additionally identified as related to those nodes. the system also incorporates natural language processing  components such as a morphological normalizer, a named entity recognizer, and a statistical term frequency analyzer. the unsupervised method for expanding words associated with go nodes is based on a probability measure that captures word proximity from co-occurrence data  <cit> . the categorization methodology uses our novel gene ontology categorizer  technology  <cit>  to select go nodes which cover the terms in the input set, based on the structure of the go.

biocreative task  <dig> had two subtasks for which we received evaluated results:

task  <dig>  – given a <protein, document, go node identifier> triple, return the evidence text from the document supporting the annotation of the protein to that go node.

task  <dig>  – given a <protein, document> pair, return annotations into the go  for the given protein based on the given document, along with supporting evidence text from the document for each annotation. the number of annotations expected for the input pair, relative to each of the three branches of the go  was also provided.

methods
corpus pre-processing
some pre-processing was performed on the document corpus. the original sgml documents were parsed to extract the title, abstract, and body components, to normalize sgml character entities to corresponding ascii characters , and to remove all formatting tags apart from paragraph markers.

morphological normalization
we morphologically normalized the documents using a tool we developed, called biomorpher. biomorpher is a morphological analysis tool built on the morph tool originally developed at the university of sheffield by kevin humphreys and hamish cunningham for general english. the morph tool was extended to include large exception lists for biological text as well as to handle some morphological patterns not handled by the original tool.

term frequency analysis
as a pre-processing step, we performed a frequency analysis on the morphologically normalized documents to establish baseline frequencies for terms in documents throughout the corpus. in the dynamic processing of an input document, we selected representative terms for the document using a tfidf filter . the tfidf metric can be thought of as providing a measurement of the salience of a term in the document, relative to its general importance in the corpus. an extremely common domain term such as "protein" would have a low tfidf score despite its prevalence in a particular document, while we would expect a term such as "necrosis" occurring in a document to have a higher tfidf score since it is a term which will only appear in a small subset of the documents in the corpus.

protein recognition and context term selection
swiss-prot and trembl identifiers were provided as input identifiers for the protein, so we needed to establish a set of names by which that protein  could be referenced in the text. we made use of both the gene name and protein names that are in swiss-prot itself, when available, and a proprietary collection of protein name synonyms constructed by procter & gamble company. the fallback case was to use the name filled in from the ebi trembl human data. a script was applied to the trembl names that generated variants of strings containing mismatched punctuation and parentheticals such as "" or "" which were felt not to be likely to occur directly in the text. the resulting database tables were used to construct a list which was dynamically loaded from the database into a gate  gazetteer processing module. this is a module which compiles the list of names into a finite state recognizer for the set of names, so that when a document is analyzed by the module each occurrence of a name in the list is identified in the document.

we chose this list-based strategy as it was straightforward to implement, and because protein reference identification was being addressed in biocreative task  <dig>  the training data for task  <dig> supported this strategy – a large majority  of the training queries contained proteins that had names in our database.

the identification of occurrences of any known variant of a protein name facilitates identifying terms in the contextual neighborhood of the protein. using another gate module to identify sentence boundaries in combination with the gazetteer processor, we identify all sentences in the given document containing a reference to the protein given in the input query. this set of sentences is considered to be the contextual neighborhood of the protein, and all  terms are extracted from these sentences to establish a set of document-derived context terms for the protein. these terms are in turn associated with tfidf weights calculated for each term in the document, and filtered to select the highest-ranked terms according to these weights.

unsupervised methodology for expanding words associated with go nodes
each node in the gene ontology  is associated with a textual label, in addition to its numeric identifier. this label is intended to capture the meaning of the node, i.e. to reflect the underlying concept that the node represents. however, these labels tend to be relatively short  and often the terms in a given label occur in many other labels  throughout the go. as such, the occurrence of an individual term that is part of a go node label in a document may not be a sufficiently reliable indicator of the relevance of that go node to the document. to address this, we utilized a method for expanding the set of terms associated with a given go node. this method is based on the idea that the presence of words that are strongly associated with a go node label are good indicators of that go node, in addition to the terms that occur in the node label itself.

the <protein, document, go node identifier> triples provided for training purposes, as well as those given as queries for task  <dig> , were used to determine sets of words related to go nodes following a methodology developed for the active recommendation project at los alamos  <cit> . after document pre-processing, we divided each document into paragraphs and calculated for each document a matrix of word occurrence in the paragraphs: r: p × w, where p is the set of all m paragraphs in a document, and w is the set of all n words. this is a boolean matrix  that specifies if a given word occurred at least once in a given paragraph.

from the r matrices, we calculated a word in paragraph proximity matrix, wpp, for each document, using the co-occurrence probability measure below, as defined in  <cit> :



wpp denotes the association strength between pairs of words , based on how often they co-occur in the paragraphs of a given document. a value of wpp  =  <dig> , means that words wi and wj co-occur in the same paragraphs 30% of the time that either one of them occurs. to avoid artificially high values of wpp, we computed this value only if the total number of paragraphs in which either of the words occurs  is at least  <dig>  ideally, this value should be derived from the occurrence and co-occurrence distributions of words in a document's paragraphs, to prevent randomly co-occurring words from receiving high values of wpp. we did not compute such distributions for the biocreative data, but rather used our results from other datasets used by the active recommendation project, where, typically, a value of  <dig> dramatically reduces the chances of artificially high values of wpp.

we can think of wpp as an associative network of words. indeed, the wpp matrix defines a fuzzy graph  <cit>  where the vertices are words wi, and the edges are probability weights wpp . such a graph can also be understood as an associative knowledge structure that represents how words co-occur in a given document, and therefore as an associative model of the knowledge stored in each document in terms of its constituent words  <cit> . as in any other co-occurrence method, the assumption is that words that frequently co-occur are associated with a common concept. building a graph of co-occurrence proximity allows us to capture network associations rather than just pair-wise co-occurrence. therefore, we expect concepts or themes  to be organized in more interconnected sub-graphs, or clusters of words. figure  <dig> depicts a sub-graph of the wpp for one of the biocreative documents .

next we set out to identify words associated with go nodes. using the go nodes in the provided triples we retrieved the words from the go node label. let us refer to this set of words as wgo . for each document, we then retrieved a set of words highly associated with the words in wgo in the relevant wpp network. specifically, we returned the top  <dig> to  <dig> additional words with largest average value of wpp to all the words in wgo . the additional words thus discovered were used to expand wgo. let us refer to the expanded set of words as wgoprox; the additional words are not found in the respective go node label, but co-occur highly in a given document with the words in the go node label. given our assumption above, we can say that if a given go node is about a specific concept or theme, then we expect the words in its label to co-occur with other words in any given document which also refer to this concept. thus, the portion of text most appropriate as evidence text for the go node is the portion where we find most of the words in the go label plus the words that co-occur with those in the document. this process is depicted in figure  <dig> 

run  <dig> submitted for task  <dig>  yielded a comparatively very good result . in this run, for each <protein, document, go node identifier> triple, we recommend a paragraph as evidence text for the respective go node -- without ever using the protein identifier provided in the triplet. the recommended paragraph is selected by comparing the wgoprox, with each column of the document's word occurrence per  paragraph matrix r. the comparison was implemented by a vector intersection operation . the columns of r are vectors of words occurring in a paragraph. we choose as evidence text for the go node the paragraphs associated with the columns of r that yield the largest intersection with wgoprox. that is, paragraphs containing the largest number of words also found in wgoprox are selected.

the gene ontology categorizer
for task  <dig> , we were required to predict the appropriate go node associated with a protein based on the information in a given document. the methodology depicted in figure  <dig>  based on word proximities, cannot be used for this prediction as it depends on having the go node label relevant for the query as an input. we therefore decided to pursue a strategy in which lexical overlaps between terms in the document and terms in the set of go node labels were used to identify relevant go nodes.

the go, however, has a hierarchical structure such that evidence for the relevance of a particular go node is also evidence for the relevance of its parent node. this is illustrated in the small portion of the go shown in figure  <dig> , where go nodes, as functional categories, are shown in black, and the gene products annotated to those nodes are shown in color for the different model organisms. so, for example, evidence for "dna ligation" is also evidence for "dna repair", since "dna ligation" is recorded as a child of "dna repair". thus dna ligation is a specific kind of dna repair.

in order to take the structure of the go into consideration in this analysis, we employed a technology called the gene ontology categorizer . goc was originally developed to address what we call the categorization task in the go: given a set of gene products, and annotations of those gene products to nodes in the go, where in the go do those genes appear? are they all localized together in the structure, or in multiple groups, or spread out over a wide area? this problem had not actually been well defined or addressed previously, and presents novel problems for computer science .

in the original goc algorithm, a set of gene products acts as a query. after identifying the set of nodes which are annotated to that set, goc traverses the structure of the go, percolating hits upwards, and calculating scores for each go node. goc then returns a rank-ordered list of go nodes representing cluster heads. in the end, this provides an assessment of which nodes best cover the genes.

note that we are not using "cluster" here in the sense of traditional clustering, e.g. k-means, but rather to indicate a set of nodes that are spatially close based on the structure of the ontology. a brief technical description and toy example of the base goc's operation is provided in appendix a, and see elsewhere  <cit> .

since goc utilizes the structure of the go to find the best nodes to cover or categorize a given set of input nodes, it was natural to extend it to address the question here, which is given a set of terms, where do they appear in the go. thus for biocreative task  <dig>  goc was extended in a number of ways: first to accept weighted query items, then to take terms as query items, and finally to provide data on which of the input terms contributed to the selection of each cluster head. appendix a also includes technical information on these extensions.

input terms are mapped to go nodes via one of three mechanisms:

• direct: the term occurs in the node label of go node

• definitional: the term occurs in the definition text associated with go node

• proximity: the term is one of the wgoprox terms related to a go node through the proximity-based word expansion described above  <cit> 

direct and indirect associations are counted as distinct "hits" on a node and can be weighted differently.

goc is run on the derived query consisting of the set of go nodes which the input terms map to, and its output of ranked cluster heads is treated as an annotation of the original input protein, which can be directly compared to the correct answers provided by the organizers .

evidence text selection
we make use of two mechanisms for evidence text selection. the first is a simple sentence selection algorithm aimed at selecting one sentence out of the set of sentences containing a relevant protein reference to serve as the evidence text. the sentence selected is the sentence with the maximal intersection of terms in the sentence and terms reported by goc to be used in the selection of the relevant cluster head/go node .

the second algorithm, referred to below as the paragraph selection algortihm, draws on proximity measurement. in this case, we again consider the terms reported by goc to be used in the selection of the relevant go node. we evaluate the proximity of those terms to individual paragraphs in the document, using the document matrix r. the closest match using the vector intersection operation  is selected as the evidence.

system operation
the architecture of the complete system is shown in figure  <dig>  for biocreative tasks  <dig>  and  <dig> , the document selection portion is not relevant, as the documents were manually selected by the evaluators and provided in the input queries. there was an additional task,  <dig> , which addressed selection of documents relevant to the annotation of a given protein. however, this task was not rigorously evaluated in biocreative, and so we do not report here on this component of the system.

as mentioned previously, morphological normalization, tfidf-based term weighting, and proximity-based go node word expansion are performed during preprocessing for each document. when executing a given query , we also perform context term selection in order to focus on terms that are most likely to be directly relevant to annotating the protein. these sets of terms together, with each term weighted by tfidf to represent its significance, form the input items for subsequent processing.

we employ the goc term categorization method to predict go annotations . the goc output is then further used to select the evidence text for the go assignment associated with each go node annotation , as described in the previous section.

we submitted  <dig> runs for each of tasks  <dig>  and  <dig>  . the runs consisted of the following configurations of the system:

task  <dig> 
run 1: a configuration bypassing goc, utilizing only the go label word expansion, based on proximity networks, followed by vector intersection of the columns of r and the expanded set of words associated with a go node identifier, wgoprox, to discover paragraphs .

run 2: a configuration using the full system architecture including goc, in which goc is constrained to search for cluster heads only below the annotation given in the input query. evidence selection consisted of the simple sentence selection algorithm.

run 3: same configuration as above for annotation portion. evidence selection used the paragraph selection algorithm based on goc results.

task  <dig> 
run 1: a configuration using the full system architecture. evidence selection consisting of the simple sentence selection algorithm.

run 2: a configuration using the full standard system architecture. evidence selection consisting of the paragraph selection algorithm based on goc results.

run 3: a configuration using the full system architecture, minus the sentence-based context term selection component, using instead the "fallback" scenario of selecting the top tfidf-ranked terms in the document as a whole as the context terms for the protein. evidence selection consisted of the paragraph selection algorithm based on goc results.

RESULTS
results were evaluated by professional annotators from the european bioinformatics institute  by considering the evidence text according to two criteria – whether the evidence text included a reference to the correct protein, and whether the evidence text directly referenced the go node returned as the annotation. on each of these two dimensions, the text was evaluated as "high" , "generally" , or "low" . overall, the evidence text was judged as "perfect" if it scored "high" on both of the criteria, and as "generally" when the protein was correct but the go reference was "generally". the go annotations were not evaluated independently from the evidence text in the official evaluation results.

the results for the two tasks are shown in tables  <dig> and  <dig>  we were user  <dig>  on task  <dig> , run  <dig>  we achieved a score of either perfect or generally good for  <dig> of the results; this corresponds to a good result for 38% of the  <dig> queries. focusing just on perfect results, our result was  <dig> . in this configuration, we ignored the protein altogether and focused on the go node-paragraph relationship. nonetheless, we received a score of "high" on the protein mention measurement for  <dig> of the  <dig>  answers we submitted. this result reflects a high coherence between go nodes and given proteins in the given documents, at least at the level of paragraphs.

our results for the other runs we submitted for task  <dig>  were less good, achieving a perfect or generally good score for 83/ <dig>  of the queries, or about 8%.

our task  <dig>  results were in general not good, as shown in table  <dig> . however, it was discovered after the initial evaluation results were returned that there had been a problem with the evaluation of our submissions, as well as the submissions of user  <dig>  we were allowed to select one run for reevaluation by the ebi annotators; we selected run  <dig>  table  <dig> shows the results after re-evaluation; approximately 5% "perfect" and 2% "generally" correct. the numbers in brackets indicate the original evaluation results for those runs. it is clear that the re-evaluation resulted in significantly more positive results, so that we can assume that the reported numbers for the runs  <dig> and  <dig> are also lower than the actual  results would indicate. we are also aware of a number of issues which contributed to our poor results, and which we have since addressed in part, and discuss below.

discussion
there are several important general issues in the evaluation that impacted our performance.

unknown proteins
we discovered that the test data contained many protein ids that were not yet available in swissprot, in stark contrast to the training data. only  <dig> of the  <dig>  proteins referenced in task  <dig> evaluation queries were named in our database; 29/ <dig>  of task  <dig>  proteins and 19/ <dig>  of task  <dig>  proteins. with respect to queries, only 153/ <dig>  of task  <dig>  queries and 44/ <dig>  of task  <dig>  queries included proteins for which we had names. we were able to fall back to the names in the trembl database, but these are of poor quality and usually there is only one name, not a full set of synonyms for a protein; often we did not find any occurrences of these names in the query document. this issue had a big impact on our ability to focus in on text within documents that was directly relevant to the protein of interest . on the other hand, post-hoc analysis of our  evaluation results for task  <dig> , run  <dig> showed that  <dig> of the  <dig> "perfect" and  <dig> of the  <dig> "generally" results actually were achieved for proteins not in our database. this suggests two possible problems. the first is that perhaps the names that we do have in our database are inadequate for effective protein reference identification and we should explore more shopisticated protein reference recognition techniques . the second potential explanation for these results is that the use of a single sentence as context for terms related to annotation of the protein of interest is too narrow. we should therefore experiment with the size of left and right context windows around protein references to achieve better results.

assessing annotation accuracy
the methodology followed by the evaluators of task  <dig>  focused on the evidence text selection, measuring whether the selected evidence text for a given query mentioned both the protein of interest, and the function/process/component indicated by the target go node. the prediction of the go node itself was not evaluated independently from the evidence text returned as justification for the prediction.

our interpretation of the task was that there were two results: prediction of the go node and selection of the evidence text. while in some of the runs, our overall results were not strong, our independent investigations show that our overall performance is better when considering annotation  distinctly from evidence text selection. we will show this in what follows.

since completion of the formal biocreative evaluation, we have refined, improved, and measured our annotation results in a number of ways. first, there is a free parameter s to goc called the specificity, which represents the extent to which the user values results which are either "low" or "high" in the go hierarchy . succinctly, higher values of s will tend to give higher scores to nodes which are lower in the go, and thus represent more specific or concrete concepts; lower values of s will tend to give higher scores to nodes which are higher in the go, representing more general or abstract concepts.

in practice, goc tends to converge  for values of s less than  <dig> or greater than  <dig>  neither of which produces optimal results. but because goc is itself a novel technique, at the time of the results  submission we had not yet refined our sense of the use of this parameter, and hence set it to be much higher than appropriate . we shall see that this was an improper choice, with stronger results for moderate levels of specificity.

for each query we were instructed to provide a certain number n of annotations, and after the fact we were told what those correct annotations were. goc returns a rank-ordered list usually longer then n, and so we cut this list off at n nodes, even if a correct answer might have occurred lower down in the list. thus we end up with two sets of n nodes from the go – our n annotation predictions and the n correct annotations.

to calculate our annotation accuracy, we can check how many of our answers match the correct answer exactly, but this doesn't account for "near misses", where we might return a parent, child, or sibling of the correct answer, and still wish to count this as some kind of correct response. ultimately, this problem becomes that of measuring the amount of overlap between two sets of go nodes, which is actually a difficult mathematical problem, which we  <cit>  and others  are addressing. a detailed treatment of this subject is beyond the scope of this paper, but for our purposes, we measured "near misses" between two nodes p and q using the following categories:

• direct hit: p = q

• nuclear family: a direct hit, or p is a child, parent, or sibling of q.

• extended family: a nuclear family hit, or p is grandparent, grandchild, cousin , aunt/uncle , or a niece/nephew , of q.

• ancestor: p is any ancestor of q.

precision and recall as a function of specificity s across these different categories are shown in figure  <dig>  results are especially poor for direct hits and very high specificity. a high specificity  was used for all of the goc-based runs submitted. for task  <dig> , the submitted results were therefore not as good as they might have been, with 6% precision and  <dig> % recall for direct hits,  <dig> % precision and  <dig> % recall within the correct nuclear family, and  <dig> % precision and  <dig> % recall within the correct extended family. for moderate levels of specificity at the level of nuclear and extended families, our results approach 50% precision.

note that due to the list cutoff, recall is bounded above by precision. thus figure  <dig> shows a more detailed analysis for precision only, and furthermore breaks out the family groups by their individual constituents . results are shown on a log scale.

some of the results appear impressive, for example approaching 100% for all ancestors and low specificity. this is misleading, since simply the topmost go nodes like "biological process" and "gene ontology" are identified. however, looking at moderately "tight" neighborhoods like parents and grandparents, in family groups like nuclear and extended, reveals a moderately successful approach to automated functional annotation into the go.

discussion, goc-based runs
due to the "unknown proteins" problem described above, the protein neighborhood terms input to goc were in most instances the top tfidf-ranked terms for the document as a whole, rather than coming from a coherent textual neighborhood around the protein. this had several implications. first, goc may have been "overseeded" – since the input terms were derived from across the document, they may have matched very dispersed nodes in the go. this would make it difficult for the goc algorithm to confidently select a covering node for the input terms. second, evidence text selection on the basis of overlap with or proximity to terms from across the document is difficult; it is unlikely that any single sentence/paragraph matches more than a few of these terms.

the overseeding may have worsened the impact of an additional difficulty. the number of terms from the goc input set used to rank a go node was typically very small – normally 1– <dig> terms – and only this subset of terms was passed on to the two evidence selection algorithms. the motivation underlying this approach was to enable the evidence text selection for a go annotation to proceed on the basis of only those document terms relevant to that annotation. in practice, given the small and weakly coherent sets of terms that were generated, this created great difficulty for reliably selecting a contiguous chunk of text focused on that go node. this would have impacted the quality of the evidence text selected, and hence our overall evaluation results. this problem could likely have been ameliorated by incorporating the strategy from task  <dig> , run  <dig>  utilizing all available information about the selected go node, rather than limiting ourselves to terms from the context window.

finally, we would like to explore the interaction between tfidf weights and the importance of a term in the go. preliminary analysis suggests that there are very frequent terms in the go with relatively high tfidf scores in the corpus; this would unfairly value those terms in goc and exacerbate the overseeding problem. some adjustment of the weighting scheme to better take into consideration the terminological structure of the go is therefore warranted.

discussion, proximity network-based word expansion and evidence text selection
while the proximity network-based word expansion proved to be a very useful technique, giving us good results on task  <dig> , the evaluator comments indicated that they were often unhappy with paragraphs as the basic unit for evidence text. to address this, we envision several changes. we could apply the proximity measurements at the sentence level, rather than the word level; we could explore metrics for recognizing excessively long paragraphs and splitting them at positions of subtle topic change; or we could try to use more linguistic  analysis to focus in on the core information expressed and narrow the text returned.

there are some additional ways to build on our results. we could calculate a global word proximity matrix, rather than one matrix per document, which should strengthen our confidence in the relationships between words, as well as relating any given word to more words due to consideration of its occurrence across the document corpus. we could also incorporate semi-metric analysis of the word proximities  <cit>  to find additional  related words, even if they do not directly co-occur in the corpus.

CONCLUSIONS
there is still significant room for improvement on this task. this is evidence of the complexities of automatic annotation of go nodes to proteins based on a single document, where complexities arise both from the structure of the go itself and the difficulties of annotating into a large and extremely hierarchical structure, and from the ambiguous nature of text. however, the initial results show promise for both of the methods we explored, and further analysis has helped us to better understand the impact of the various parameters of the system. we are planning to integrate the two methods explored in this study more closely to achieve better results overall.

authors' contributions
kv managed the project, developed the text pre-processing and nlp tools, built the integrated infrastructure of the complete system, and identified the goc extensions necessary for our solution. jc provided database support, specifically for protein name management. cj participated in the design of the solution, defined the mathematical extensions to goc, and analyzed the go node annotation results. sm was responsible for the code development of goc and the implementation of the extensions in the code. ar worked on biocreative task  <dig>  which was not evaluated in the end. lmr participated in the design of the proximity analysis and paragraph selection algorithms. ts developed the code for tfidf and proximity analysis, and implemented paragraph selection. kv, cj, and lmr contributed to the writing of the manuscript.

appendix a: the gene ontology categorizer  and its extensions
goc is an algorithm for categorization in hierarchies represented as partially ordered sets . posets are distinguished from networks, which are represented as directed graphs: while every poset is a directed graph, the converse is not true. in particular, the go is a collection of posets, two each  for each of the three branches molecular function, cellular component, and biological process.

space precludes a full explication of goc, which would furthermore be redundant with prior published work  <cit> . therefore a synoptic account is provided here, focusing on the extensions to goc for this task. for full details about the base goc, see  <cit> .

goc begins by casting the nodes of the go as a set p with a partial order ≤ : a reflexive, symmetric, and anti-transitive binary relation over the elements of p. here ≤ is actually the union of all the is-a and has-part links, so that p ≤ q if either p is a kind of q or p is a part of q. together p and ≤ yield a structure called a partially ordered set  p = .

two nodes p,q ∈ p are called comparable when there is a unidirectional path, called a chain  <cit> , in the go between them, so that, either p is a kind of q or p is a part of q, with p ≤ q ; or vice versa, so that q ≤ p. note that many chains may connect two comparable nodes.

then, features of go nodes are cast as a set of labels x, and can be, for example, the gene products annotated to go nodes, or in our case are the terms making up the labels of each go node. an annotation function f : x → 2p then assigns to each feature  x ∈ x the collection of go nodes f ⊆ p with which they are associated. altogether, we construct a mathematical structure called a poset ontology  o = .

between all pairs of comparable nodes p ≤ q we define a pseudo-distance δ to indicate how "high" q is above p. while many pseudo-distances are possible, in practice we use four: the length of the minimum chain between them, denoted δm; the length of the maximal chain δx ; the average of these δax = / <dig> ; and the average of the lengths of all the chains between p and q denoted δap.

we also use a normalized pseudo-distances  derived by dividing δ by the height of p, which is the size of its largest chain. effectively, an absolute pseudo-distance measures the number of "hops" between two comparable nodes p ≤ q, while a normalized pseudo-distance measures what proportion of the height of the whole poset p is taken up between p and q.

a toy example of a poso is shown in figure  <dig>  where we have p = { a, b, ..., k }, x = { a, b, ..., j }, the partial order ≤ is as indicated in the figure, and e.g. f = { a, e, f }. the height of p is  <dig>  and a ≤ b are comparable nodes connected by three chains a ≤ f ≤ b, a ≤ g ≤ b, and a ≤ h ≤ i ≤ b, so that δm  =  <dig>  δx  =  <dig>  δax  =  <dig> , δap  =  <dig> , and e.g.  = 3/ <dig> 

given a pseudo-distance and a set of labels of interest y ⊆ x, we then want to develop a scoring function sy which returns the score of a node p ∈ p based on the other nodes in the go which are annotated by the requested labels y, and the poset structure of the go. we have an unnormalized score sy: p → r+ which returns an "absolute" number greater than or equal to zero, and a normalized score  : p →  <cit>  which returns a number, between  <dig> and  <dig>  indicating the score relative to a theoretical maximal value. we also allow the user to choose the relative value placed on coverage vs. specificity by introducing a parameter s ∈ {...,- <dig> , <dig> , <dig> ..}, where low s emphasizes nodes higher in the go which are more likely to cover a label of interest, and high s emphasizes nodes lower in the go which are more likely to be very specific annotations to a label of interest.

since both the normalized and unnormalized scoring function can use either the normalized or unnormalized distances, there are four possible scoring functions used in the original goc  <cit> , letting r = 2s, and thereby incorporating specificity as shown in table  <dig> 

output for the example in fig  <dig> is shown in table  <dig> for the query y = { c, e, i }, specificity values s = - <dig>   <dig>  and  <dig>  the "doubly-normalized" score , and the normalized pseudo-distance . in addition to scoring each node, goc identifies cluster heads, which are shown in bold; and so-called "secondary cluster heads" which are cluster heads which are ancestors of a primary cluster head, and which are labelled with *.

for the biocreative task  <dig> the following changes were made to the base goc algorithm described above:

• label sets x were allowed to be terms as well as gene products.

• queries took the form of lists of terms weighted as described above.

• since each item of the list "hits" a collection of go nodes with its particular weight, the query as a whole implicates a collection of go nodes in a complex way. when the weights are carried over from the query terms to the list of nodes, the structure which results is called a fuzzy bag of p, denoted here q ⊲ p.

so the fuzzy bag q is an unordered collection of possibly duplicated nodes p ∈ p equipped with weights w : q →  <cit> . as an example, a query could be

{ , ,  }

resulting in the fuzzy bag of nodes

q = { ,

,

,

,

 }.

note the duplicate items in the bag, in particular the node go: <dig> is present twice with weight  <dig> , receiving one contribution from the query term  and another from the query term .

the original scoring functions above are then modified as shown in table  <dig>  again letting r = 2s.

where |q| is the size of the query, taken as the cardinality of the bag q: 

