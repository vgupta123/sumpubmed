BACKGROUND
analysis of metabolic networks is extensively used as a direct reflect of the phenotype of living cells. moreover, the increasing amount of available omics data has encouraged the reconstruction of a significant number of genome-scale metabolic networks  <cit> . a very popular approach to study metabolic networks is the use of a constraint-based method called flux balance analysis   <cit> . fba is based on the steady-state assumption which results in mass balance through the metabolic network. given a biological objective , the space of optimal solutions for the reaction fluxes can be very quickly solved by linear-programming computation even for large networks. this calculation only relies on knowing reaction stoichiometry and user-defined input flux values. different fba-based analyses are implemented in a number of available software including cobra toolbox  <cit> , cobrapy  <cit> , cellnetanalyser  <cit> , surreyfba  <cit> , optflux  <cit> , fasimu  <cit>  and sbrt  <cit> . for a review of differences and specificities of some of these tools, see  <cit> .

however, metabolic network analysis alone cannot explain the differences observed between two differentiated cells of an organism, or the behaviour of a versatile micro-organism given a particular environmental condition. indeed, cells have evolved regulatory networks to integrate environmental signals or acquired differentiated states that result in modulation of gene expression. therefore this specific gene expression triggers specific phenotypes depending on the environmental constraints or cell differentiation. thus, computing embedded metabolic and regulatory networks is a paramount objective in order to study complex cell phenotypes. for instance, buescher et al., by integrating metabolic and regulatory network analyses, simulated different regulation strategies for controlling nutritional shifts and compared their evolutionary benefit. they thus succeeded to identify the key regulatory events involved in the metabolic adaptative response to nutritional transitions in bacillus subtilis  <cit> .

many methods are available in the literature for the analysis of regulatory networks, going from the most elaborated  to the simplest . some of these methods are reviewed here . for large networks, qualitative multi-state models seem to be a good compromise between the number of required parameters and the quality of simulations  <cit> . in these types of models, the components display a finite number of possible states, and their values are updated via logical rules composed of the states of other components. this makes the search for steady-states easier than with continuous models. they have the advantage of not requiring any kinetic parameter for simulations, like fba, and they provide more modelling precision than boolean models. a growing number of qualitative networks is available to the community  <cit>  through platforms like the cell collective  <cit> . this sharing of qualitative models is facilitated by the development of sbml-qual  <cit> , a standard xml  based format designed to represent multi-state qualitative models based on the sbml format  <cit> . some software tools have integrated this format and can perform qualitative network analyses : the cell collective  <cit> , cellnetanalyser  <cit> , ginsim  <cit> , cellnopt  <cit>  and boolnet  <cit> .

different methods have been developed to connect metabolic network and regulatory network analyses. most of these methods are dynamic: regulatory fba   <cit> , probabilistic regulation of metabolism   <cit> , ifba  <cit> . this allows to take into account a feedback of fba on the regulatory network by considering metabolite concentrations. however it requires many fba optimisations and differential equations to update concentrations. in rfba, regulatory rules can constrain a reaction only by setting its flux value to  <dig>  prom  <cit>  is based on regulatory network reconstruction through inference from microarray data and is able to constrain a reaction to a certain percentage of its maximal flux value. this percentage corresponds to the estimated probability of activation of the gene associated to the reaction. this method requires data from many microarray experiments . in the ifba method  <cit> , the authors integrated a set of ordinary differential equations  to rfba. this allows to accurately predict phenotype of diauxic growth of escherichia coli but requires kinetic parameters for the odes. another method called steady-state rfba   <cit>  is not based on a dynamic simulation but on steady-state. it includes the boolean rules in the optimisation process of the fba using mixed integer linear programming , and thus finds a steady-state for both metabolic and regulatory networks. however, this method does not allow to model feedback loops.

in all of these methods, regulatory rules can only constrain reactions to one single flux value.

in this context, we have developed flexflux, a tool that allows the analysis of both qualitative regulatory networks and genome-scale metabolic networks. flexflux is the first metabolic flux analysis tool that natively integrates regulatory networks in all of its functions. regulatory and metabolic networks can be analysed either separately or together. when analysed together, regulatory network states are used to constrain the fba. the regulatory network is considered as known in flexflux and must be provided by the user.

the key features of flexflux are the following: 
flexflux supports qualitative multi-state regulatory networks, including the simplest variant: boolean networks. the regulatory networks can be composed of various types of biological components. the multi-state nature of the network allows for instance to simulate different levels of gene expression, which is not possible with a boolean model.

flexflux allows a translation of the discrete qualitative states of the regulatory networks into user-defined continuous intervals. this permits to constrain a reaction flux with different intervals according to a qualitative state and not to a unique value like in the methods presented above. this translation is also used for the input  of the regulatory network to obtain qualitative states from metabolite external concentrations.

to constrain metabolic fluxes with a regulatory network, flexflux performs a regulatory steady-state analysis . see below for a description of the algorithm implemented in flexflux to perform the rsa.

it supports the sbml-qual file format for the description of the regulatory network. flexflux is the first flux analysis software to support this file format.



these features are explained in more details in the next sections.

implementation
flexflux is an open source java software distributed for windows and linux. it can be used in command line or with a graphical interface.

general architecture
depending on the function, flexflux can take as input three files : 
a sbml file which describes the metabolic network.
fig.  <dig> general architecture of flexflux. flexflux takes as an input two sbml files and a constraint file : one sbml file for the description of the metabolic network, and the qualitative extension for the regulatory network. the constraint file specifies the objective function and can contain constraints. from the metabolic network definition, flexflux creates mass balance constraints that will be used for the flux balance analysis . the regulatory network is analysed by a regulatory steady-state analysis . the starting point of the rsa comes from both sbml-qual and constraint files. then the qualitative states are translated into constraints for the fba. fba and rsa can also be run independently



a sbml-qual file which describes a qualitative regulatory network : components, initial values and update rules.

a constraint file, which contains the objective function for the fba and may contain additional constraints defined by the user. note that initial values of the regulatory network components can be specified in this file. if so, they overwrite the ones present in the sbml-qual file.



flexflux is able to perform both regulatory steady-state analysis  and metabolic network analyses using fba. it can connect both analyses by constraining fba with steady-states obtained with the rsa .

regulatory network analysis
to analyse regulatory networks in flexflux, we designed and implemented an algorithm called regulatory steady-state analysis . its goal is to obtain a single “steady-state” constraint for each component of the network from initial values. a constraint is defined by a lower and an upper bound defining a range of possible values of the component. to facilitate connection with quantitative methods like fba, flexflux supports quantitative inputs and outputs by translating them into qualitative states.

the sbml-qual file provided to flexflux must respect the specifications described in  <cit> : it must contain a list of qualitativespecies with a specified initial level, and a list of transitions corresponding to the logical rules for the update of a species . the qualitativespecies will correspond to the components of the regulatory network. in order to use flexflux’s translation, the equivalences between qualitative states and continuous intervals must be specified as notes in the qualitativespecies tag . this information will be used during the regulatory steady-state analysis algorithm. note that specifying this equivalence is not mandatory if the species does not use quantitative inputs or outputs. the file is read with the jsbml library  <cit> .
fig.  <dig> regulatory network steady-state analysis of flexflux. 1) the initial state is constructed from qualitative values present in the sbml-qual file  and quantitative values in the constraint file that are translated into qualitative values by the equivalences written in the sbml-qual network . 2) from this initial state, the network is iteratively updated using a synchronous update of all components. integer values represent qualitative states of the components of the network. the update of the network state stops when a state which was already calculated is found . the attractor is composed of this state plus the states between the two identical states. 3) the link between qualitative states and continuous intervals must be specified in the sbml-qual file describing the regulatory network in the notes of the qualitativespecies tag. for each component where they are provided, all the states of the attractor are translated into intervals. the example is shown for r <dig> here. 4) when the attractor contains more than one state , the average of the upper bounds and lower bounds of all the intervals is used to form a steady-state constraint for components containing equivalences



the algorithm consists in four successive steps : 
construction of the initial regulatory network state. the sbml-qual file must contain initial qualitative values for each component of the regulatory network. however, they can be overwritten by the constraint file. if the constraint file contains an initial value for a component, it is translated into a qualitative state, and used as initial value for the regulatory network . this allows simulating different external metabolite concentrations.

search for an attractor. an attractor can be defined as a set of network states toward which the network evolves. to find an attractor, the network state is updated from the initial values via a synchronous update of all the components according to their corresponding transition . the update being synchronous, a state is defined by the previous one, so that once a state already found is encountered, no new state can be reached and an attractor has thus been found. an attractor of size one is called a point attractor, whereas an attractor of size higher than one is called a cyclic attractor. in the latter case, it corresponds to all the states between the two identical states plus one of the two identical states . a cyclic attractor can be seen as a loop that the network states will infinitely go through.

translation of qualitative states into intervals. in order to define the quantitative output of the regulatory steady-state analysis for the components harbouring the equivalences described before, the values of the states contained in the attractor are translated into corresponding continuous intervals . if these equivalences  are not specified for a component, the output for this component remains qualitative.

averaging the states in the case of a cyclic attractor. this step is performed for cyclic attractors . from a cyclic attractor, a single steady-state constraint is defined for each species. if quantitative equivalences have been specified, the final bounds of the constraint are determined by calculating the arithmetic mean of the bounds corresponding to each state found in the attractor. in the case of species without quantitative equivalences, the constraint corresponds to a single value equal to the arithmetic mean of the component states found in the attractor.



constraining fba with regulatory steady-state constraints
three types of biological components of the regulatory network can have an effect on the fba: reactions, genes and external metabolites.

the steady-state constraints obtained for reactions from rsa are directly added to the fba model constraints.

the link between a gene value obtained from rsa and fba is made through gene-protein-reaction  associations that can be specified in the sbml file describing the metabolic network  <cit> . in the case of a gpr association, if the regulatory steady-state constraint sets the gene to  <dig>  the associated reaction flux is set to  <dig>  if the value of the gene is different from  <dig>  no constraint is added on the reaction flux.

in the metabolic model, external metabolites are imported in the model by exchange reactions. constraints on these exchange reactions mimic different environmental conditions. in flexflux, if a null value is attached to an external metabolite, the uptake flux value for the corresponding exchange reaction will be constrained to  <dig> 

metabolic network analysis
the metabolic network must be described in a sbml file. flexflux constructs the mass balance constraints required for the fba, and reads the objective function and additional constraints from the constraint file. if any, the constraints obtained from the regulatory network steady-state analysis are added to the model.

the optimisation process is done by a linear programming solver. at present, flexflux is compatible with two solvers: ilog cplex  <cit>  and the gnu linear programming kit   <cit> .

flexflux functions
at the moment, flexflux contains  <dig> functions. because some functions require many successive fba, flexflux implementation was also focused on computation speed. this is done by using parallelism and solver warm-starts capabilities  <cit> .

regulatory steady-state analysis  is integrated in every flexflux function, but can also be launched by itself. one function  is not based on steady-state analysis of the regulatory network but on a dynamic analysis with iterative updates of the network. this allows to take into account a change in metabolite concentration resulting from fba.

the detail of all functions inputs and outputs as well as more details, example files, command lines and graphical results are available on flexflux’s web site. some of flexflux graphical outputs are shown in fig.  <dig> 
fig.  <dig> screenshots of some of flexflux graphical results. a result of a flux balance analysis performed on a escherichia coli metabolic network with a maximisation of the biomass. the value of the objective function is shown in the upper part. the value of each network component can be found in the table. b result of a 3d phenotype phase analysis performed on e. coli metabolic network. the effect of the variation of both glucose and oxygen uptake fluxes on the biomass shows four distinct phenotype phases . c result of a time-dependent analysis performed on e. coli metabolic network with glucose and lactose available in the medium. it shows the evolution of the external concentration of glucose , lactose  and the evolution of the cell density 



some of these functions are briefly described below.

rsa and multi rsa
these two functions implement the algorithm of regulatory network analysis described above. multi rsa allows performing a high number of rsa with multiple initial conditions on the same regulatory network. these multiple conditions can be randomly generated by another flexflux function called randomconditions.

flux balance analysis 
the basic function of flexflux. it finds the steady-states of the regulatory network if provided and uses it to add constraints for the fba as previously described. the objective function used in the fba is defined in the constraint file. a graphical result of a fba is shown in fig.  <dig> panel a.

flux variability analysis 
the goal of this function is to compute the maximal and minimal values of all reaction fluxes, or a set of fluxes, when the objective function is optimized. to do that, flexflux performs a regulatory steady-state analysis, a fba with the provided objective function. then, the optimal value of the objective function is set as a constraint, and all reactions are consecutively minimised and maximised as objective functions of new fba.

flexflux’s implementation of fva uses the fastfva approach  <cit> . when applied to a metabolic network of around  <dig> reactions, it can be performed in less than  <dig> s on a computer with one processor . a comparison with the computation time of fva in other fba software is detailed in additional file  <dig> .

knockout analysis 
here the goal is to infer the effect of individual variables knockouts on the objective function. thus, for each tested variable, a new constraint setting its value to  <dig> is added to the model. then a rsa and a fba are performed. note that flexflux allows to perform a knockout in any component of the metabolic or the regulatory network .

phenotypic phase analysis
this analysis permits to find specific metabolic network behaviours   <cit>  by varying one or two reaction fluxes, generating a 2d or a 3d graph respectively . for increasing values of the provided reactions fluxes, flexflux optimises the objective function and calculates a shadow-price value for each point. in our case, the shadow-price value corresponds to how much the objective function value varies when a little change in reactions fluxes is made. points that share the same shadow-price value are grouped in the same phenotypic phase.

pareto analysis
this function allows to test trade-offs made by the cell between different objectives by comparing experimental values to fba simulations. a list of potential cellular objectives  and experimental flux measures are provided in an additional input file. the outputs are the cellular objectives for which the calculated pareto surface is the closest to experimental values, meaning that they seem to participate to the cell’s trade-off.

this function is a generic implementation of the method proposed in  <cit>  and represents, to our knowledge, the first implementation of this analysis in a flux analysis software.

time-dependent fba
this function is equivalent to the rfba method described by covert et al.  <cit> . the goal is to simulate the evolution of the system and environment  over time given an initial state, and monitoring both regulatory and metabolic networks states.

this method is not based on a steady-state analysis of the regulatory network, but on its dynamics. here, a fba is performed between each update of the qualitative network.

the algorithm takes as an input a metabolic network, a qualitative regulatory network, external metabolite concentrations , an initial cell density  and the identifier of the biomass reaction of the metabolic model. at each step, the values of the regulatory network are updated, translated into constraints for fba. then the cell density and external metabolite concentrations are updated by solving standard differential equations as detailed in  <cit> .

this analysis allows simulating the production of metabolites over time, or the consumption of different nutrients by the cell .

RESULTS
use case 1: steady-state analysis in different environmental conditions
metabolic regulation via tuning of gene expression is paramount to understand cell behavior. this mechanism was first demonstrated in  <dig> by jacob and monod on the lac operon which triggers a diauxic shift corresponding to a sequential consumption of two substrates when both are available  <cit> . computation of fba without considering the catabolite repression events fails in predicting this behaviour  <cit> .

in order to illustrate flexflux’s capabilities in combining gene regulation and fba, we performed simulation of the biomass production by escherichia coli in environments composed of lactose and/or d-glucose using the reconstructed genome-scale metabolic model of e. coli  <cit>  and a qualitative model of the lac operon  <cit>  that we translated into sbml-qual format . initial substrate concentrations were extracted from  <cit>   and we performed a rsa and a fba with maximization of the biomass .
fig.  <dig> simulations of escherichia coli growing with different combinations of lactose and d-glucose. simulations were performed using the genome-scale metabolic model of e. coli k- <dig> mg <dig>  <cit>  and the reconstructed regulatory network of the lac operon. are shown here the initial concentrations of the two carbon sources, the calculated steady-state  qualitative value for some of the components of the regulatory network, and the value of the objective function . lower graph legend : fba: simulation performed using fba without considering the regulatory network; rsa + fba: simulation performed using rsa and fba; experimental data: values extracted from  <cit> . regulatory network legend: e: eiia component of the d-glucose pts transporter; p: lactose permease; b: beta-galactosidase; i: lac i regulator



in the three conditions, the initial values of the carbon sources available will generate different series of updates of the regulatory network and the calculation of three different attractors. all these attractors contain only one network state . they correspond to two distinct cell phenotypes: utilisation of glucose and utilisation of lactose by the cell as a substrate. we compared these results with a fba performed without using the regulatory network. in the latter case, the calculated objective function value does not correspond to the experimental data when both substrates are available.

the simulation results using rsa are consistent with the experimental data shown in  <cit>  as well as the simulation performed using time-dependent fba  simulations  <cit> . however rsa does not require time-dependent simulations. it is able to quickly pinpoint the regulatory network and consequently the metabolic network steady-states by just changing input metabolite concentrations. in the case of time-dependent fba, choosing the time step intervals for the simulation implies a trade-off between the risk of propagating an error due to the numerical solution in case of a long time step and the high computation time in case of a short time step.

this analysis shows that flexflux can easily find different metabolic behaviours according to environmental conditions. this is made possible by the steady-state analysis of the regulatory network provided alongside the metabolic network, and by the translation of qualitative values into continuous intervals allowing flux analyses.

in order to better evaluate the accuracy of rsa, we assessed whether rsa can obtain the same results than rfba in most cases with a significantly lower number of calculations. indeed, dynamic methods to regulate fba can take into account a feedback of fba results on regulatory rules but require many optimisations and updates of cell density and metabolite concentrations at each iteration. we used the data shown in  <cit>  where authors compared rfba results to experimental data for growth phenotypes of e. coli in  <dig> conditions and for  <dig> gene knock-outs. we found that in  <dig> % of the conditions tested , rsa was able to obtain the same growth phenotypes as rfba and reaches an accuracy of  <dig>  in predicting the experimental data . the accuracy of rfba to predict experimental data is  <dig> .

analysis of the discrepancy between false prediction of the rsa compared to rfba indicates that rsa failed to predict the phenotype when a change in the extracellular metabolite concentration is required to activate assimilation pathway. this is expected considering that it is a steady-state method and not a dynamic one. in most of the cases with discrepancy, first acetate accumulation in the medium is required before activation of the glyoxylate cycle enzymes which are required to assimilate the main substrate. adding the presence of this accumulated metabolites in the constraint file before running the rsa leads to obtain an identical prediction to rfba. in this case, the prediction accuracy of rsa reaches the same level as rfba.

this shows that rsa can be used as a replacement of rfba in the majority of the conditions. rsa requires only one linear programming optimisation whereas rfba may require hundreds. however, in few case, when the effect of metabolite concentrations is necessary for the simulation, a dynamic method is more adapted. this is what we implemented in flexflux in the time-dependent fba function. both methods  support multi-state components and can constrain each reaction to multiple flux values depending on these states.

use case 2: multi-state logical modelling
to show an example where the multi-state capability of flexflux can be useful, we performed another analysis using the jacob and monod’s model showing the effect of glucose concentration on the catabolite repression of maltose and lactose in e. coli.

the catabolite repression is a well known regulation of substrate usage by microorganisms when “preferred” substrate is present in the medium. however, there is rising evidence that the catabolite repression is not fully operating at low substrate concentration, below the milimolare range. this could be relevant in many ecological niches. in addition, the strength of the repression, i.e the concentration of the preferred substrate in the medium under which the repression is fully operating, can greatly differ depending of the regulatory circuit of the second substrate usages. to illustrate the interest of multi-state modelling, we inferred the capacity of e. coli to use lactose and maltose for various concentrations of glucose. the regulatory network of the lac operon used in the paper was completed with the reconstruction of the regulation of the maltose operon  <cit> , and then was converted in the sbml-qual format for computation . the threshold of d-glucose concentration,  <dig>  mm, under which the induction of the maltose operon starts was collected from  <cit>  . then, we compared the capacity of the substrate usages simulated with the experimental data collected in  <cit> , from cells grown on batch culture with high amount of d-glucose  and cells grown on d-glucose limited . using multi-state modelling allows to simulate the capacity of the cells to use maltose but not lactose at low d-glucose concentration, i.e. below  <dig>  mm but above  <dig> mm. this behaviour would not have been possible to simulate using boolean modelling where d-glucose would harbour only two states.

use case 3: analysis of a large regulatory network
the challenge in genome scale analyses is that exploring the entire space of solution of a large scale network  remains infeasible. hence if fba and linear programming assure exploring boundaries of solution space of a genome scale metabolic network using an optimisation principle, an optimisation function can’t be applied in regulatory networks composed of feed-back loops. indeed, none optimal state can’t be reached if a loop is involved within it. thus, flexflux is designed to perform a random sampling of a significant proportion of the initial condition space to deal with large-scale regulatory networks.

to test a large and publicly available regulatory network, we extracted a network from the cell collective  <cit>  in the sbml-qual file format . this network corresponds to a generic fibroblast cell and was published in  <cit> . it contains  <dig> species and  <dig> functionterms . we performed this analysis by using a pipeline of two flexflux functions. we first generated  <dig>  different random initial conditions for the regulatory network and then used them to run a multi rsa . the output of the multi rsa is  <dig>  regulatory network attractors. we then grouped the identical attractors together to count the proportion of each one .
fig.  <dig> results of a multi rsa performed on a large regulatory network. a pipeline of flexflux functions to obtain  <dig>  attractors from the initial regulatory network in the sbml-qual file format. b evolution of the number of different found attractors in function of the number of initial conditions tested. c percentage of representation of the attractors representing more than  <dig> % of the  <dig>  attractors. the value in orange corresponds to the addition of all other  <dig> attractors which individually represent less than  <dig> % of the total



this analysis shows that flexflux can easily find steady-states that are dominant. indeed, from the  <dig>  initial conditions, flexflux found  <dig> different attractors, but the  <dig> most frequent of them represent more than  <dig> % of the total, with one of them representing more than  <dig> %. sensitivity to the number of simulations was assessed by simulating various number of initial conditions. we obtained a logarithmic curve suggesting a correct sampling for  <dig>  initial conditions . this shows that, in the presence of a network for which it is not possible to test every possible initial condition , flexflux is able to pinpoint the dominant states that the network can reach. these dominant states may then be used to constrain a metabolic network and perform flux balance analyses. we checked the accuracy of the rsa method on this boolean network using boolnet, and found identical results.

also this result shows that flexflux can run a very high number of rsa in a limited time. we compared the computation time of steady-state analyses in different software in additional file  <dig> .

discussion
in order to realistically analyse metabolic networks, it is essential to consider them in interaction with regulatory networks. also, one of the challenges in systems biology is taking charge of large-scale networks. fba and logical modelling are classical methods used to perform simulations on large-scale metabolic and regulatory networks, respectively.

in this paper, we describe flexflux, a java framework for integrating the analysis of these two networks. when provided, flexflux first calculates the steady-state of the regulatory network. this is used to define additional constraints that are applied to the metabolic model. flexflux is also able to translate qualitative variables from the regulatory network into quantitative variables used in fba, thanks to a match list provided by the user. this possibility, for the first time implemented in a flux analysis software, can highly refine the modelling of the system. the multi-state qualitative models supported by flexflux allow subtle analyses with variables containing more than two possible states, in particular reaction fluxes. finally, to our knowledge, flexflux is the only available tool that uses standard exchange file formats for both networks , allowing full compatibility with other fba or regulatory network analysis tools.

in order to determine the regulatory network steady-state, flexflux uses a synchronous update of the network state. as explained before, in the synchronous update case, a state completely determines the next one. this means that from a given initial network state, the same attractor will always be found. moreover, the number of possible states for each component being finite, the number of possible network states is also finite and an attractor will always eventually be found. as described in  <cit>  and  <cit> , in the asynchronous update case, genes can be updated following different rules . this type of update is more suitable for studying the dynamics of a system. however, asynchronous update requires additional parameters and, in most cases, does not give better results than synchronous update in the search for attractors  <cit> . also, synchronous update allows to perform simulations knowing the regulatory network structure alone. for this reason, we believe that synchronous update is a reasonable choice for identifying regulatory network steady-states in flexflux. however, one could be interested to use flexflux to study the dynamics of the system. thus we implemented the possibility to use an asynchronous update based on time delays. this method is used in the time-dependent method of flexflux described above. this is a deterministic method, meaning that from the same inputs, the result will always be the same. flexflux does not contain methods based on random asynchronous updates that would be non-deterministic. adding this functionality will be considered for a future improvement.

as detailed previously, new fba constraints are set considering the attractor found in the regulatory network steady-state analysis. in the case of a cyclic attractor, each constraint is defined by the mean of the bound values corresponding to each component state in the attractor. we have chosen to use the mean of the states because we consider that it is more suitable to a broad range of studies when multiple cells are not synchronised. indeed, when considering a whole population with multiple cells at different states, different states of the attractor will be encountered. since the method is not able to evaluate the importance of the different states, they will all be considered as equally important for the steady-state of the cell. in consequence, the mean of the translated values simulates an average of the attractor states in the population. a different strategy could be to perform a fba for each state of the attractor. this can still be done in flexflux by setting each state of the attractor as a constraint in separate fba analyses.

lastly, the fact that flexflux does not analyse both types of networks in the same optimisation process allows a higher flexibility in the possible regulatory logical rules. for example, negative auto-regulation, which is very common in biological systems  <cit> , as well as feedback loops in general, cannot be included in a linear optimisation problem where all equations must be true at the same time. with the flexflux steady-state algorithm, feedback loops can be included in the regulatory network. indeed, in the case of a negative auto-regulation, flexflux will reach a cyclic attractor of the regulatory network.

flexflux already offers  <dig> functions. all of them support a regulatory steady-state analysis . flexflux code is open-source and thus can be used by other developers to create new functions that use the capabilities described in this paper. in addition, as we show in additional file  <dig> , flexflux implementations of successive fbas and steady-states analysis are among the fastest compared to other software. indeed,  <dig> s are required for a fva of the  <dig> reactions within the e. coli model, iaf <dig>  and  <dig> s for  <dig>  rsa with the tcell model.

to facilitate the reader’s understanding of flexflux features compared to other applications and methods, we have compiled two comparison tables.
table  <dig> fba software comparison. features comparison of applications discussed in this article focusing on their ability to integrate regulatory networks analyses into fba

odes ordinary differential equations, efm elementary flux modes


table  <dig> comparison of methods to regulate fba



CONCLUSIONS
flexflux is a free, open source java software that joins two types of steady-state based analyses that are usually performed separately: fba and qualitative multi-state simulations. flexflux is the first tool to support both sbml and sbml-qual standards file formats to describe metabolic and regulatory networks respectively. this support ensures compatibility with other fba software and qualitative network analysis software. regulatory network simulations are based on synchronous updates of the network state and the result can be translated into continuous intervals used as constraints in the fba. this allows to easily constrain a flux analysis depending on regulatory network reprogramming. flexflux also contains different methods to analyse in detail regulatory and metabolic networks in interaction. the methods implemented in flexflux are efficient to deal with genome-scale networks.

flexflux is designed for researchers looking for an accessible tool capable of performing sophisticated analysis of the relations between metabolic and regulatory networks.

availability and requirements
project name: flexflux.project home page:http://lipm-bioinfo.toulouse.inra.fr/flexflux/index.htmloperating system: linux, windows.programming language: java.other requirements: java  <dig>  or higher, cplex orglpk.license: gnu lgpl.any restriction to use by non-academics: none.

additional files
additional file  <dig> 
performance comparison of flexflux with other software. 



additional file  <dig> 
reconstructed regulatory network of
e. coli
 containing catabolite repression of lactose and maltose in the sbml-qual format. 



additional file  <dig> 
constraint file used to run flexflux simulations of the lactose operon. 



additional file  <dig> 
comparison between rfba and rsa on  <dig> conditions and  <dig> gene knock-outs of
e. coli
 regulatory and metabolic networks. 



additional file  <dig> 
constraint file used to run flexflux simulations of the lactose and maltose operon. 



additional file  <dig> 
results of the analysis of the lactose and maltose operon of
e. coli
. 



additional file  <dig> 
fibroblast regulatory network [
44
] in the sbml format. 



abbreviations
atpadenosine triphosphate

fbaflux balance analysis

fvaflux variability analysis

glpkgnu linear programming kit

gprgene-protein-reaction associations

koknockout

milpmixed integer linear programming

odesordinary differential equations

promprobabilistic regulation of metabolism

rfbaregulatory fba

rsaregulatory steady-state analysis

sbmlsystems biology markup language

sbml-qualsbml qualitative models package  extension

sr-fbasteady-state rfba

xmlextended markup language

competing interests

the authors declare that they have no competing interests.

authors’ contributions

lm, rp and lc were involved in the conception of the program. lm and lc were involved in the implementation and the documentation of the program. lm, rp and lc were involved in testing the application and performing the use case simulations. lm, rp and lc wrote the manuscript. all authors read and approved the final manuscript.

