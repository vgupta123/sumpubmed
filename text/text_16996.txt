BACKGROUND
the determination of homologous regions of molecular sequences is often used for the further inference of their function and evolution, and therefore accurate multiple sequence alignment  of nucleic acid and protein sequences is crucial. consequently, there has been tremendous effort in the development and implementation of different msa algorithms, using distinct approaches to improve the resulting alignment accuracy.

the accuracy assessment of msa programs is often done by employing manually  curated sequence databases such as balibase  <cit> , prefab  <cit>  and sabmark  <cit> . so far, balibase has been the most often used alignment database in evaluating the performance of different msa programs. it was constructed using protein sequences or models with known three-dimensional structures. the last inception, version  <dig> , had an increase in the number of available sequences and alignments. such improvements apparently have addressed the major concerns of karplus and hu  <cit>  regarding the use of balibase to benchmark msa algorithms.

alignment databases provide a source of accurate alignments to gauge the accuracy and speed of different programs, but they also present several disadvantages. even though the databases' alignments are manually curated, there is still the possibility of misalignments which would result in accuracy assessment problems. the sets of alignments still remain rather small and may not represent the complete range of scenarios of protein evolution. furthermore, a major drawback of the use of alignment databases is that algorithms can potentially be developed and tuned to the alignments present solely in these data sets.

recently there have been several dna sequence simulation packages that incorporate indels, such as myssp  <cit>  and dawg  <cit> . myssp has been widely used in different studies of phylogenetic inference and evolutionary distance estimation coupled with dna alignment accuracy  <cit> . for proteins, lassmann and sonnhammer  <cit>  in a previous comparison of msa algorithms used artificially created sequence sets generated by the simulation program rose  <cit> . rose simulates sequences of proteins allowing for the occurrence of indels. data sets generated by rose present their own limitations for the study of the alignment accuracy. in rose, indel size and number do not adequately represent empirical data for proteins that have diverged for different evolutionary times. also the program assumes equal evolutionary rates of all the sites in the protein.

in this study we introduce an improved approach to assess alignment accuracy by using simulated protein sequences generated by simprot  <cit> . simprot is an advanced simulation program that employs a parameterized version of the qian and goldstein  <cit>  insertion and deletion  distribution. although the original distribution was empirically derived from a subset of alignments of highly diverged protein sequences, the parameterized version permits a very flexible simulation of indels in sequences for all levels of sequence divergence. simprot also allows variable substitution and indel rates at different sites by implementing gamma distributed sites rates  <cit> . three models of amino acids substitution  are also available. we have used simprot to generate known alignments with a wide variety of evolutionary parameters, as well as the latest balibase database of curated alignments, to investigate the accuracy and speed of popular and publicly available protein multiple sequence alignment software programs.

alignment programs
there are many available computer packages that generate msas of protein sequences. we selected nine of the currently most often used programs : clustal w, dialign <dig> , t-coffee, poa, muscle, mafft, probcons, dialign-t and kalign.

clustal w  <cit>  version  <dig> 
this is probably the most widely used alignment program and oldest among the packages tested. the software performs a progressive alignment, first employing a pairwise sequence comparison by calculating a distance matrix that stores sequence divergence. after this matrix is obtained, a tree guide is built using neighbor joining, followed by the third and final step where sequences are aligned according to the branch order in the guide tree. the program employs two gap penalties in its alignment procedure: gap opening and gap extension, and in the case of polypeptides, a full amino acid scoring weight matrix. these gap penalties are mainly dependent on factors such as the weight matrix, sequence length and similarity. in simple cases, clustal w might accurately align corresponding domains and sequences of known secondary or tertiary structure while in more complex cases it can be used as a good starting point for further refinement.

dialign <dig>   <cit>  version  <dig> .1
this program uses a diagonal method to align sequences locally and globally. dialign <dig>  does not compare single residues, but whole uninterrupted  stretches of residues that would form diagonals in a dot-matrix comparison of two sequences. consequently, it does not penalize the insertion and extension of gaps, and may leave unrelated segments unaligned. the first step in the procedure creates all possible pairwise alignments, storing a collection of diagonals meeting certain consistency criteria  <cit>  without conflicting double or crossover assignments of residues  <cit> . all saved diagonals are weighted in order to define entries with maximum sum of weights, and then sorted in order to determine the degree of overlap, emphasizing the existence of diagonals present in multiple sequences. a greedy-like algorithm does a final processing, checking diagonals scores from top to bottom creating a final multiple alignment. gaps are inserted at the end of the msa creation until all present residues are connected.

t-coffee   <cit>  version  <dig> 
t-coffee employs a progressive strategy in aligning sequences. the program first creates a library from two different sources: global alignments from clustal w and local alignments from lalign  <cit> . for each pair of sequences global alignments and the pairwise local alignments are created from the ten top-scoring non-intersecting segments. the program processes the global and local information, assigning weights to all pairwise alignments relative to sequence identity  <cit> . this is followed by the combination of groups that are merged into a single library. there is an extension phase for this combined library, making the final weight of any pair of residues reflect part of the information contained in the whole library. a final step requires a calculation of a distance matrix and a neighbor joining tree, since the alignment is generated with a progressive strategy by aligning the two closest sequences on the tree according to the weight stored in the extended library. the initial pair is then fixed and any existing gaps cannot be shifted later. the progressive alignment continues until every sequence is aligned.

poa   <cit>  version  <dig> 
poa is another msa package that uses a progressive alignment algorithm without using generalized profiles. this program introduces the use of a partial order-multiple sequence alignment  format to represent sequences, and more accurately reflects biological content. this format stores the alignment as a compacted graph for minimal node and edge counts, still containing all the information available in a traditional msa. sequences are stored as a linear series of nodes each connected by two edges. poa uses a traditional dynamic programming algorithm  <cit> , where linear sequences are replaced by partial order  graphs. these po structures are transformed in usual 2d matrices and each combination of cells are scored backwards as in a traditional smith-waterman sequence alignment procedure  <cit> . these matrices are then extended in any direction  allowing the production of the pairwise alignment on junction points. the msa is obtained from the alignment of two sequences at the beginning with the addition of other sequences successively to the initial pair.

muscle   <cit>  version  <dig> 
muscle uses a pairwise profile alignment approach. the program first builds a progressive alignment which is then improved and refined in two subsequent stages. the progressive alignment is created after the sequence similarities, a distance estimation and a upgma tree are calculated. muscle uses two distance measures: a kmer distance for unaligned sequence pairs and a kimura distance for aligned pairs  <cit> . the progressive alignment improvement stage creates a new tree with the already calculated kimura distance matrix and then builds a better alignment based on this ameliorated tree. the last refinement stage employs a variant of the tree dependent restricted partitioning  <cit> . this method deletes one of the tree edges, bi-partitioning the alignment and extracting both partitions' profiles which are then realigned with a profile-profile alignment. every tree edge is visited iteratively and the alignment with an updated summed pairwise score of each sequence pair is retained. the edges are visited in order of decreasing distance from the root, with a realignment of individual sequences, moving to more closely related groups of sequences  <cit> .

mafft   <cit>  version  <dig> 
mafft is a program that can be used with different alignment approaches, either progressive alignment alone , or progressive followed by iterative refinement. mafft's basic run can have up to three steps, but the default procedure performs the initial two steps. first, a progressive alignment is created based on a rough distance between every sequence pair based on shared 6-tuples. a guide tree is also generated by upgma with modified linkage and sequences are then aligned following the branch order of the tree . the second step recalculates a distance matrix, based on the information gathered on the previous step, and the progressive alignment is re-done using a tree obtained from the new matrix as a starting point . the last phase is the iterative refinement which optimizes the gotoh's weighted sum of pairs   <cit>  score, with a group-to-group alignment  <cit>  and the tree-dependent restriction partition technique  <cit> . if all three steps are employed, the procedure is called fft-ns-i, meaning it uses an fft method to rapidly identify homologous regions present in the sequences which is followed by an iterative phase of refinement. fft converts every single amino acid present in a sequence to a vector representing volume and polarity, which are important factors on substitution events, allowing the software to predict such occurrences with precision.

mafft also includes three additional refinement algorithms: l-ins-i, g-ins-i and e-ins-i  <cit> . these strategies increase the number of steps required to create an msa alignment to five. in these cases the first step also requires the construction of a distance matrix, not using 6-tuples. differently from the fft-ns-* approaches there is no reconstruction of the calculated upgma tree and the program moves to the second step, dividing the gap-free segments and storing score arrays for each gap-free segment from one sequence to another. mafft then calculates an "importance" value from the score of the segment and stores how frequently residues appear on other segments. all "importance" values are then gathered in an "importance" matrix in step three which is quickly followed by a group-to-group alignment obtained from the score matrices and a weighting scheme  <cit>  based on a needleman-wunsch algorithm. a final step iteratively refines the obtained alignments, optimizing a wsp score and the "importance" values calculated previously.

probcons   <cit>  version  <dig> 
probcons is the only program that uses a probabilistic consistency method of alignment. it is a modification of the traditional sum-of-pairs scoring system, and in addition incorporates a pair-hidden markov model-based progressive alignment algorithm. the alignment procedure is divided into four steps, starting with a computation of posterior-probability matrices for every pair of sequences. this is followed by a dynamic programming calculation of the expected accuracy of every pairwise alignment. probabilistic consistency transformation is then employed in order to re-estimate the match accuracy scores. a guide tree is calculated with hierarchical clustering with the similarity defined by a weighted average of values between sequences of each cluster. the guide tree is used to align the sequences using a progressive approach. a post-processing phase is also done, where random bi-partitions of the generated alignment are realigned in order to check for better alignment regions. probcons differs from other alignment programs since it does not incorporate biological concepts such as position-specific gap scoring, evolutionary tree construction and other features commonly used by other packages.

dialign-t  <cit>  version  <dig> .1
this program is a re-implementation of the procedure developed in dialign <dig> , but with a better solution to deal with inconsistent fragments, including fragment-chaining. it also implements a new approach for estimating probabilities of the random occurrence of each fragment present in the sequence to be aligned. dialign-t does not use pre-calculated tables in order to obtain weight scores: it calculates probability tables from several substitution matrices. additionally, the greedy-like multiple alignment algorithm from dialign <dig>  was changed in order to avoid spurious local similarities.

kalign  <cit>  version  <dig> 
kalign is another program that uses a progressive alignment approach to obtain the best msa possible. the main difference of this algorithm to other methods is that it employs the wu-manber approximate string matching algorithm  <cit>  when calculating the distance among sequences. the wu-manber algorithm measures the distance between two strings using a levenshtein edit distance, which allows an efficient search for mismatches  and patterns present in the sequences. according to the kalign developers, this methodology allows for a distance estimation which is as fast as an k-tuple algorithm but is more accurate  <cit> . the first step in the alignment procedure is to calculate the pairwise distances using the wu-manber approach. the pairwise distance estimation is followed by a construction of a guide tree by using upgma, which is employed in a global dynamic programming method to align the sequences/profiles. additionally, the program performs a consistency check in order to define the largest set of sequence matches that can be inserted in the alignment, using a modified version of the needleman-wunsch  <cit>  to find the most consistent path through the dynamic programming matrix. also, kalign updates the positions of pattern matchings, which adjusts the absolute position of matches found within sequences to their relative positions within generated profiles  <cit> .

RESULTS
simprot simulated sequences
simprot's simulation parameters provide flexibility for generating alignments so that the effects of distinct factors can be examined together and/or separately under multiple evolutionary scenarios. simulated sequences were used to investigate the influence of sequence length, indel frequency, indel length, evolutionary distance, terminal gaps length, gamma density function and tree topology on the accuracy of alignments inferred by different programs. more than  <dig> alignments were created independently by simprot using five phylogenetic trees  with variable lengths and different number of variable size indels, in order to cover different topological evolutionary patterns. simprot generates a known alignment and another file containing the sequences with no indels. one hundred simulated alignments with different random seed values were created for each combination of tested parameters. all corresponding sequences were also aligned with the nine programs described above and the resulting alignments were compared to the "true" alignment generated by simprot. the average accuracy values for the  <dig> alignments of each set are reported here and in some cases a wilcoxon signed ranks test was employed in order to determine the statistical significance of the difference on average accuracy. the protein substitution matrix used in all simulations was pmb  <cit> , which is also the program's default.

as reported previously  <cit> , sequence length does not affect alignment accuracy of the different programs. in order to confirm this, five different root sequence lengths were employed in the analysis:  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig> amino acids. these values were selected in order to get the resulting alignments in a feasible amount of time, while maintaining a significant difference in root sequence lengths. to determine the effect of amino acid substitutions and sequence length on alignment accuracy, we first kept the indel frequency and indel length very low and considered different trees with various overall evolutionary distances and with increasing root sequence lengths. the majority of the packages tested generated results ranging from good to excellent with increasing sequence length. poa presented the lowest accuracies on the performed tests and at the same time was positively affected by sequence length increase . poa's lower accuracy appears to be due to a tendency of the program to place large internal gaps close to the sequence terminals, while the accuracy increase in larger sequence lengths might be explained by the proportionally small influence of these terminal gaps in the alignment scoring. apparently, the alignment of sequences with a large number of substitutions but a low number of gaps did not present a problem for any of the nine algorithms used, no matter the size of the sequence. noticeably, clustal w showed the steepest decline in accuracy when sequence length was increased even at very low gap frequency values . the program occasionally had an alignment accuracy decrease two to three times larger than the average for all other seven programs , especially when indels were added to the reference alignments.

different indel frequencies were also used in the simulations in order to test the effect of indel occurrences in alignment accuracy. simprot's process for insertions and deletions assumes a poisson model, where the expected frequency of indels between two sequences separated by an expected  <dig> pam distance is

p =  <dig> - e-z/c

where z is the indel probability that is scaled by the evolutionary scale factor c. the smallest frequency p employed was the program's default value 3% and increased up to 30%. as expected, when indels were added to the simulated sequences and evolutionary distance was increased, there was an evident loss in accuracy for all programs. this corroborates results obtained by lassmann and sonnhammer  <cit> , who showed that programs tended to have poorer performance as the evolutionary distance increased when indels were present. the best results were generated by probcons and mafft l-ins-i. probcons presented better results for trees with longer evolutionary distances when intermediate to large indel frequencies were applied. conversely, mafft l-ins-i performed better for smaller evolutionary distances and with intermediate indel frequency values .

in simprot the evolutionary distance set by the branch lengths in the input tree affects the expected number of substitutions and also affects the expected number of insertions and deletions. in order to further analyze the influence of branch lengths on alignment accuracy, we considered a single tree topology and scaled the branches  so that the overall tree shape was not changed . as shown above, all programs were negatively affected by increased evolutionary distances, particularly when the employed indel frequency parameter was high. poa had the steepest decline in accuracy, at small indel frequencies .

due to the fact that indel frequency appeared to have a large effect on msa accuracy, we analyzed the effect of increasing the indel frequency independently of other factors . our results showed that accuracy and its rate of decline with indel frequency depended on the input tree used. trees with longer branch lengths  had sharp decreases in accuracy with increasing indel frequencies. input trees with shorter branch lengths showed smaller declines in accuracy . for most programs, when a topology with varied branch length was used, the accuracy decrease was almost linear with increasing indel frequency. probcons and mafft l-ins-i were the least affected by the increase in evolutionary distance and resulted in the best performances.

another element that can influence the occurrence and number of indels in protein sequences is the tree topology. we considered this independently of evolutionary distance and simprot's indel frequency by considering two trees with identical maximum evolutionary distance  but with different topologies. although evolution had occurred at different locations in the two tree topologies tested , this did not seem to have large influence on overall alignment accuracy for the majority of the algorithms analyzed , as in both cases programs obtained similar alignment scores.

real protein sequence data often contains non-homologous terminal ends and/or incomplete sequences. we investigated the effect of large terminal gaps on alignment accuracy. a small modification in simprot's code was necessary to include an additional probability of terminal gaps. since no reasonable biological model exist for external gaps, we introduced an ad hoc parameter t which determines the probability and length of external gaps by scaling the probabilities for internal gaps. five different values of the terminal gaps insertion parameter were used while keeping the internal gap frequency constant  for these simulations. it was observed that the presence of terminal gaps, regardless of their length, had a minimum effect on alignment accuracy for most of the programs . again in this case, mafft l-ins-i and probcons were the top performers.

the analysis of influence of the indel frequency on alignment accuracy did not take into account the overall size of the simulated insertions and deletions. to test a possible effect of indel size on the programs' performances three different values  of simprot's c parameter were tested. this value is used by the generalized qian and goldstein distribution  <cit>  in indel length determination. larger c values yield shorter indels while smaller values result in longer ones  <cit> . the indel frequency was kept constant. we found that the larger the indels the lower the alignment accuracy, although with a moderate difference in the final average score . this accuracy loss could be seen for all phylogenetic trees analyzed and for the majority of the programs. again, mafft l-ins-i and probcons seemed to fare better and were least affected by the variation in gap length.

according to rosenberg  <cit> , changes in the shape of the gamma distribution, of yang's  <cit>  distribution of evolutionary rates, influences alignment accuracy. the gamma shape models the proportion of slow to fast evolving positions and accounts for variable substitution rates among sites; the lower the α the larger the number of sites with low substitution rate. decreasing gamma's α shape parameter positively affected the alignment accuracy , due to an increasing number of identical sites between sequences. simprot allows the modification of the gamma's α shape parameter and in our study it was set at  <dig> ,  <dig> ,  <dig> ,  <dig> and  <dig>  we examined changing α using different topologies and indel frequency values. the obtained results show a moderate influence of the value of gamma α at low indel frequencies, resulting in an accuracy loss for most of the programs, especially for poa. when larger indel frequencies were employed, the negative effect of increasing gamma was accentuated up to α =  <dig>  which was reversed by a small gain in accuracy when α was increased from  <dig> to  <dig> . this is expected, since with α values the gamma distribution of evolutionary rates tends to be less extreme  and to have a curve shape similar to the normal distribution.

in order to deduce why there was a large influence of insertions and deletions on the programs' performance, we analyzed the average number of gaps per sequence present in the "true" alignment and in all resulting alignments . as mentioned above, poa had the tendency of inserting long internal gaps at the sequence terminals; this inflates the average number of gaps in the alignments that are constructed by the program. clustal w, under default parameters, was the most conservative of the programs tested and in every case had a smaller gap number average for its alignments than other packages and the known alignment. kalign and probcons were the programs with a final number of inserted gaps closest to the real alignment in the majority of the simulations. overall, programs that use a progressive alignment with tree determination showed a smaller gap number average per sequence than the programs that do not use a guide tree .

in summary our results show that it is the total number of indels independently of where in the tree they occur, and to some degree independently of the number substitutions, that had the greatest effect on alignment accuracy. also, indel size plays a role in alignment accuracy, but to a lesser extent than indel number. additionally, the gamma distribution of evolutionary rates generally had a negative effect on the final accuracy. regarding program performance, probcons and mafft l-ins-i achieved the best results in the majority of the simulated alignments sets. an intermediary group consisted of t-coffee, muscle, mafft fft-ns- <dig> and kalign, while clustal w, poa, dialign-t and dialign <dig>  often produced the poorest alignment accuracy. an overall summary of alignment accuracy for each program is shown in figure  <dig>  with the exception of clustal w, in scenarios of large sequence lengths and indel frequency, programs that have a tree-guided multiple alignment procedure showed better results than those that do not rely on tree determination to align protein sequences. as pointed above, programs with a tree-determination step were more conservative in inserting gaps than programs that lack this step, generally achieving better final accuracies.

balibase
it was important to determine if the results obtained from the simprot-generated sequences were applicable to alignments from actual proteins. we considered the accuracy of the nine programs on the latest version of balibase alignments . overall we found results similar to those obtained on the simulated sequences in that probcons and mafft using strategy l-ins-i appeared to have the best performance. in balibase's reference rv <dig>  containing equidistant sequences sharing less than 20% identity, probcons and mafft l-ins-i were not statistically different according to the wilcoxon signed ranks test . the same result with no statistical separation was observed in reference rv <dig>  which is composed of sequences from divergent subfamilies, in reference rv <dig>  comprised of sequences from protein families with some highly diverged sequences, and in reference rv <dig>  made of sequences with large insertions.

probcons did perform significantly better than mafft l-ins-i in the set rv <dig> that contains equidistant sequences sharing between  <dig> and 40% identity. mafft l-ins-i and t-coffee were not statistically different . conversely, on reference rv <dig> composed of protein sequences with large extensions, mafft l-ins-i outperformed all other packages, with probcons and t-coffee not far behind and not significantly different.

when results for all references are analyzed together, the same pattern observed from the isolated references was also found. in this broader scenario, probcons and mafft l-ins-i achieved the best results and the difference in final alignment accuracy is not statistically significant . an intermediary pack is formed of two distinct groups  where muscle and t-coffee did slightly better than mafft fft-ns- <dig>  kalign and clustal w. showing the poorest performance for the whole database set were dialign-t, dialign <dig> , which were statistically indistinguishable, and poa. overall, the results from simprot and balibase data sets were consistent, with the exception of mafft fft-ns- <dig> which ranked significantly lower on balibase data sets than on simprot's. these results corroborate in part the findings of lassmann and sonnhammer  <cit> , that showed t-coffee as the best available algorithm at the time for balibase v <dig> alignments. their result also indicated poa as the program with the poorest performance.

speed of execution
mafft fft-ns- <dig> was the fastest program for all tested sequence sizes . t-coffee, as shown before  <cit> , had the worst speed, with an average alignment time for the smallest sequence set  longer than for clustal w, mafft , kalign and poa when aligning the largest set. probcons had the second worst average time for most sequence sizes.

discussion
overall, mafft l-ins-i and probcons generated the best alignments on our test data, including simulated sequences and balibase's v <dig>  reference sets, while poa, dialign <dig> , dialign-t and clustal w had the worse accuracy. the intermediary group, formed by t-coffee, muscle, mafft fft-ns- <dig> and kalign in some cases presented similar results to the top two algorithms, especially t-coffee and mafft fft-ns- <dig> in tests with short evolutionary distances and low gap frequency and length. this showed the quality of the algorithms and that different approaches to sequence alignment can converge on a very similar msa.

additionally, we only tested the programs with their default parameters; different program configurations might improve their accuracy. our results are consistent with those previously reported in the original articles of mafft l-ins-i  <cit>  and probcons  <cit> , where they ranked top with the best accuracy on balibase v <dig> alignments.

in this work, it could be observed that all programs have strengths and weaknesses, and among the best performers mafft has the most flexible algorithm. the recent additions to the program certainly contributed to improve alignment accuracy. mafft also has a very fast algorithm even when aligning iteratively. it has been suggested that mafft's accuracy could be increased by incorporating structural information  <cit> . probcons had very similar results and sometimes performed even better than mafft l-ins-i, but it is the second slowest program overall. the alignment power of its algorithm is excellent, even though it does not consider any biological aspect of the sequences when performing an msa.

in the intermediary group, t-coffee and muscle were the better alternatives, considering that mafft fft-ns- <dig> did not perform as well as the iterative approaches, and kalign showed inconsistent results in most cases faring below the other three programs. t-coffee generates good alignments and has the merit of combining alignments from different sources  <cit> , but the processing time is the worst for every sequence size. muscle, on the other hand, is an iterative program that produces good quality alignments, often comparable to t-coffee and mafft fft-ns- <dig>  with the advantage of being extremely fast. muscle allows an increase in the number of iterative steps in its procedure  that can probably ameliorate its final alignment quality. kalign presented accuracy values in most of the cases lower than the other three programs in this intermediary group, but showed very good results at low indel frequency values. the packages with poorest performance, clustal w, poa, dialign-t and dialign <dig> , also present qualities such as the rapid assembly of accurate msas of closely related sequences with a low number of indels. these programs may be employed to create an initial alignment that can be further improved with another algorithm. clustal w showed good accuracy results in the alignment of short sequences with indels, but had a steady decline when the length of the sequence containing indels was increased. although dialign-t developers claim that the program's new implementation generates better results than version  <dig> , this could not be seen in our results. in the simulated sequence analysis, dialign-t was inconsistent, sometimes as accurate as clustal w, while otherwise comparable to or worse than dialign <dig> . dialign-t's accuracy was originally tested solely on alignment databases   <cit> . when evaluated against a more diverse collection of protein sequences one can see that the program does not fare as well as claimed initially.

apparently, programs that have a tree-building step in their alignment procedure seemed to produce better results than programs that do not build a phylogenetic tree or cluster in their alignment process. of the bottom four performers, only clustal w builds a neighbor joining tree to guide the multiple sequence alignment. according to poa developers, their program is more suited for alignment of multidomain sequences, and a way to improve the algorithm would be to use a clustal-like progressive alignment with a guide tree  <cit> . also, our results demonstrate that poa had the tendency to insert large gaps on the sequences' terminal regions, which inflated the average number of gaps per sequence. this led to the low accuracy values generated by poa and a visual inspection of a considerable number of resulting sets revealed that the intermediary regions of the alignments were consistent with other packages results. it was also shown before that global alignment programs usually perform better than local alignment algorithms such as dialign <dig>  and dialign-t  <cit> . these two programs seemed to be more suitable to align sequences with high local similarities that were shuffled by recombination. both programs were among the least conservative in inserting gaps, which may explain the low alignment accuracy values obtained.

among the programs that use a guide-tree in their multiple alignment procedure, hierarchical clustering outperformed upgma with modified linkage , neighbor joining and upgma . clustal w had the lowest accuracy in the group but in many cases it outperformed the programs that lack tree-building capabilities, probably because of its profile alignment procedure. kalign, that uses upgma  had superior results in comparison to clustal w, what might be explained by the distinct algorithm that calculates pairwise distances. t-coffee showed better accuracy than clustal w and kalign, maybe because of the incorporation of lalign alignments in its algorithm, that improved the pairwise alignment generated by a clustal w-like process. at the same time, muscle performed as well as t-coffee and mafft fft-ns- <dig>  showing that all tree-building methods might be equivalent. upgma with modified linkage had an edge when the iterative capabilities of mafft were employed. finally, hierarchical clustering, which does not incorporate biological concepts in its calculation, was better than the biology-based tree determination methods in some the tested scenarios.

regarding factors that influence alignment accuracy, indel number is surely the one with the largest effect. the overall performance of all programs decreased proportionally to the increase in gap frequency and to a lesser extent indel size. this was shown by increasing indel frequency alone, indel length alone and both combined. among these two parameters, indel number seems to have more consequences to accuracy loss than indel length alone, maybe because most alignment algorithms have a tendency to merge gaps. larger evolutionary distance plays a role in the quality of msa, and this might be related to an increased number of indel events with longer branch lengths. in cases with both low indel frequency and length, sequences were aligned by all packages accurately even for simulations based on trees with long branches. these results show that some alignment programs tend to be conservative with respect to inserting gaps as the loss of accuracy is mainly due to inferred alignments having fewer and shorter gaps than the known alignments. although different programs have distinct allowances for terminal gaps we showed that terminal gaps did not have a large effect on alignment accuracy, regardless of their length.

CONCLUSIONS
our analysis reveals that mafft is the best choice for protein sequence alignment, based on its overall alignment quality and processing speed. other algorithms, however, cannot be dismissed as they showed very good results for some evolutionary scenarios. by comparing accuracy and date of publication of the programs , it seems that overall alignment quality has generally improved over time, but there is still room for improvement as alignment accuracy is still fairly low in many cases.

with the advent of simprot, there is another alternative to assess msa performance. our study shows that simprot and simulated sequences present a reliable approach to check alignment quality. this methodology proved to be more flexible and able to generate a broader range of alignment classes in comparison to methods used in the past. although the final conclusions were similar while using our method and balibase sets of protein alignments, our methodology allows us to determine with more detail the strengths and weaknesses of each alignment program and its algorithmic approach. simprot also proved to be a suitable alternative for alignment quality testing. in conclusion, the ability to create large simulated alignment sets in seconds, with full control of its characteristics, allows a quick and reliable analysis of different evolutionary histories, some of them not available in the current database sets.

