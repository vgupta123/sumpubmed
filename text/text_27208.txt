BACKGROUND
comparative genomics is a central approach in sequence analysis, and many important biological results have been obtained through its use. among the different programs and packages developed for comparative genomics, those using the information contained in phylogenetic trees are of special interest. indeed, the explicative power brought by trees has still no match for problems like orthology detection, horizontal gene transfer  prediction, or large-scale evolutionary studies. for orthologs detection, the most rigorous approach to determine whether homologous genes are orthologous or paralogous consists in comparing a gene tree to the species tree considered as a reference  <cit> . similarly, the same approach can be used for hgt detection  <cit> . lastly, various kind of evolutionary studies have been made possible only through the use of large collection of trees, e.g., detection of positive selection in vertebrate evolution  <cit> , analysis of dna methylation levels in mammals  <cit> , or gc-content evolution  <cit> .

the problem is that manual browsing of collections containing thousands of gene trees is a tedious – and now, almost impossible to perform – task, and automated tools are required for large scale studies. therefore, we have developed tpms, a set of programs devoted to tree manipulation and query. its central functionality is a pattern-matching algorithm aimed at finding gene trees containing specific motifs. those patterns are written using an extended newick format and they usually include some kind of constraint, such as node nature , subtree content, or level of statistical support for the nodes . the second main functionality brought by tpms is a tree-rooting tool based on the use of a gene unicity score and taxonomic criteria. its aim is to place the root of a gene tree in order to minimize the incongruencies observed between this tree and a reference species tree.

the tree pattern search algorithm used by tpms is an improved version of the one we previously published  <cit> . the main improvement is the possibility to query tree collections built by the users. our previous version was implemented in famfetch, a graphical user interface  that was only able to query a set of predefined databases installed on a centralized server  <cit> .

implementation
tpms is a set of c++ command-line programs that require the bio++  <cit>  and boost  libraries to run and it is not dependent on the use of the gene families databases developed in our group  <cit> . binaries are provided for linux and macosx , as well as c++ source code and documentation.

tree collection building
tpms needs to be run on a collection built in the rap format  <cit> . with this format, all the trees are included in a single text file. the header of this file consists in a reference species tree in newick format that contains taxa names on its internal nodes and leaves. names on leaves correspond to species and names on internal nodes correspond to higher taxonomic groups. all taxonomic groups allow the use of synonyms. for instance, in the example file distributed with tpms, the leaf corresponding to escherichia coli strain k <dig> substrain w <dig> is written as:

the different synonyms are separated by a slash and it is possible to use any of them when building a query.

individual gene trees are listed after the reference species tree. each entry is written in newick format and has associated information consisting in the tree name and a list of associations between the sequences names used at the leaves and their corresponding species names:

the species tree can contain unresolved nodes , but not the individual gene trees since the tree pattern matching algorithm used only supports binary trees  <cit> .

the program tpms_mkdb is provided in order to produce a collection in the suitable format. to run this program, the minimal requirements are a species tree file and a collection of gene trees in newick format. using the information provided in these two files, the user must then build another file containing the association between all the sequences names used in the gene trees and the species to which they belong. note that tpms_mkdb provides a functionality for facilitating this task. this functionality returns a ready-to-complete list of all the sequences names found in the gene trees files. then the user has to fill the blanks with corresponding species names.

tree pattern-matching
the tree pattern-matching algorithm itself is implemented in the tpms_query program. this is a c++ version of the one used in famfetch, and a complete description of the algorithm can be found in  <cit> . like in the original program, both the target tree and the tree pattern need to be rooted.

tree patterns have to be written in an extended newick format, and they can include different criteria. let υ be a node from the pattern p, and let ω and φ be the two sons of υ. in our format, υ is described by three strings separated by slashes. the first two strings contains the constraints put on υ, whereas the third one – which is only suitable for leaves – describes the set of taxa allowed at this level. the simplest pattern only contains the list of taxa to be found on the leaves with their respective positions. for instance, the pattern ,//rodentia) will find all the gene trees in which a subtree with sequences from homo sapiens and pan troglodytes species are grouped, while sequences from rodents are located outside of this group. it is possible to accurately ask for the inclusion or the exclusion of specific taxa through the use of + and − signs. in this case, the pattern ,//mammalia −primates) will find all the gene trees in which a subtree with sequences from h. sapiens and p. troglodytes species are grouped, while any sequences from mammals that are not from primates are located outside this group. this pattern is less constrained than the first one, and the trees it selects will include all those selected by the first one.

it is also possible to introduce taxonomic constraints on one of the two sons of the node matching to υ in the gene tree. this constraint is written on ω, but is put on its father node since the node matching on ω is not necessarily the direct son of the node matching on υ. this kind of constraint is put after the first slash, and examples of accepted and rejected topologies for a simple pattern are given in figure  <dig> 

constraints other than purely taxonomic ones can be introduced on nodes. first, it is possible to search for patterns including a threshold for internal branches statistical support. for instance, the pattern $ <dig> will select all the gene trees in which a subtree with sequences from h. sapiens and mus musculus are grouped, this with an associated bootstrap ≥90%. also, constraints on speciation or duplication can be set on nodes if the program is running on a reconciled trees collection. this kind of nodes can be specified by the use of letters s or d. the pattern d will find all the gene trees in which a subtree with sequences from h. sapiens and m. musculus are grouped, while the node that groups them is a duplication node. lastly, it is possible to specify that a connection between two nodes in the gene tree is direct. this is specified through the use of the exclamation mark. therefore, the pattern  will retrieve only gene trees in which the common ancestor of h. sapiens and mus musculus has the leaf h. sapiens as a direct son.

tree rooting
tree rooting is an essential step in phylogeny as it orients the tree and enables the evolutionary history it summarizes to be interpreted. we have therefore implemented two rooting strategies in the tpms_computation program: the first one aims at maximizing the size of subtrees with unicopy sequences while the second one tries to maximize the accuracy of taxonomic affectations for nodes. the first approach introduces a score on the internal nodes of a rooted tree. given a node νi, its score ui is obtained by the product of the number of sequences by species encountered in the subtree generated by the node considered. a score equal to  <dig> means that the corresponding subtree only contains one sequence for each species. now, let t be a rooted tree, its unicity score u is equal to: 

  u=∑i=1n−1lnui 

in a unrooted tree with n leaves, there are 2n− <dig> possible positions for the root. tpms will try every position, and for each one, computes the unicity score of the corresponding rooted tree. then, the rooting that is kept is the one that minimizes u. this approach favors duplications closer to the root than to the leaves. it minimizes the number of duplication events, and is therefore based on a parsimony reasoning. this method can be useful to extract unicopy subtrees from gene families containing many copies for some species. it can automatically split trees containing paralogs into several subtrees. figure  <dig> shows two rooting examples of a simple gene tree containing six sequences from three different species.

the second rooting method uses the reference species tree included in the header of the tree collection. during the rooting procedure, each internal node νi of the gene tree is associated with the taxonomic group corresponding to the lowest common ancestor  in the species tree. then, a distance di is computed for each node. this distance is equal to the number of nodes between the root of the species tree, and the node of the taxonomic group in the species tree associated with the node in the gene tree. note that the taxa from the species tree that are not present in the gene tree are not taken into account in this distance computation. therefore, the sum of node distances for a rooted tree t is equal to: 

  d=∑i=1n−1di 

again, tpms will try all the 2n− <dig> rooting positions and will keep the one maximizing d. indeed, higher d values correspond to better taxonomic affectations . figure  <dig> shows an example of two possible rootings for a bacterial gene tree, this considering a reference species tree.

usually, the two approaches are used in sequence, the first one is efficient to isolate clusters of unique sequences, but it can lead to many ex aequo. the problem is that, among those ex aequo, some of them can contain obviously erroneous polyphyletic groups. on the other hand, the second approach will find the solutions that are more consistent to the species tree. it can be therefore used to solve those ex aequo in the right way, as it will remove the solutions that are in violation of the reference. if more candidates still remains after those two steps, the root is placed on the solution having the longest branch. in case of branch lengths equality, placement is arbitrary on one of the remaining possibilities.

data sets
for the detection of tree incongruencies in complete genomes, we performed the search on the  <dig> gene trees available from hogenom release  <dig> . those trees include a total of respectively  <dig> bacterial,  <dig> archaeal and  <dig> eukaryotic sequences. for the ecdysozoa/coelomata controversy and the mammals phylogeny study, we used the  <dig> gene trees available from homolens release  <dig> . for the first two studies, the reference species tree used was the one provided by ncbi  and for the mammal phylogeny we used a slightly modified version of the tree published by dos reis et al. <cit> . those modifications were made to match the species tree available in homolens as three species from  <cit>  were not available in this database: pongo abelii, vicugna pacos and canis familiaris. they were replaced respectively by pongo pygmaeus, lama pacos and a clade grouping canis lupus familiaris and ailuropoda melanoleuca.

RESULTS
incongruencies detection
the program tpms_computation can be used to detect taxonomic incongruencies. as seen above, each node in a gene tree can be assigned to its lca, this using the information provided by the reference species tree. to detect the incongruencies, the approach used is to see if a leaf or a node in a gene tree induces a perturbation in this taxonomy affectation. exploration of the tree starts from the leaves and goes up to the root. for each node, the algorithm masks the subtree it generates. if this masking leads to a taxonomic assignation change on its grandfather node, then this subtree is pruned. a perturbation index is associated to this incongruency, it correspond to the distance  between the former taxonomic affectation and the one realized after the masking process. this operation is repeated until all the existing incongruencies have been detected. lastly, to be considered as a true incongruency, the involved branch must have a support value greater than a threshold given by the user.

a simple example of detection is given in figure  <dig>  in this example, staphylococcus aureus, a firmicute, is wrongly grouped with escherichia coli, an enterobacteria. masking the node leading to s. aureus leads to a change from bacteria to enterobacteria in the taxonomic assignation of its grandfather node. as the number of nodes separating bacteria from enterobacteria in the species tree used, the perturbation index associated with this incongruency is equal to  <dig> 

over the  <dig> gene trees available in hogenom, tpms_computation found  <dig> incongruencies supported by bootstrap values ≥90%, this corresponds to an average of  <dig>  errors per tree. different events could explain the incongruencies observed: phylogenetic reconstruction errors , errors in the ncbi species tree, wrong gene tree rooting by tpms, hidden paralogies , incomplete lineage sorting and hgts. due to that fact, it is remarkable that their frequency is relatively low, with less than  <dig> error per tree on average.

the number of intra and inter-domain incongruencies detected is shown in figure  <dig>  an intra-domain incongruency is when a species is placed inside its domain but outside the taxonomic group it belongs to and an inter-domain incongruency is when a species is wrongly located in another domain than the one it belongs to. a good way to see if our method can be used to detect hgts is to look at its ability to identify well-known transfers such as the ones observed between mitochondria or chloroplast and the nucleus of eukaryotes. for that purpose, we looked at the incongruences found with the  <dig> eukaryotic genes labelled as mitochondrial in hogenom  <dig>  among those genes,  <dig>  were found to be involved in an incongruency placing them among bacteria. similarly, among the  <dig> genes labelled as chloroplastic,  <dig>  were found to be involved in an incongruency placing them among bacteria.

coelomata/ecdysozoa controversy
the issue of whether coelomates form a single clade, the coelomata, or whether all animals that moult an exoskeleton  form a distinct clade, the ecdysozoa, is still a major open-ended subject in evolutionary biology. while single-gene based phylogenies supported the ecdysozoa hypothesis  <cit> , a first wave of phylogenomic analyses mostly favored the coelomata  <cit> . more recently, those results were challenged by other genomic-scale studies  <cit> , shifting again the balance toward ecdysozoa. here we present a short example showing how it is possible to retrieve the trees supporting either hypothesis.

using tpms, the patterns to find are $80)$80)and$80)$80), respectively for coelomata and ecdysozoa hypotheses with a bootstrap support ≥80%. we performed the search into a collection built with the homolens database, this with several thresholds for bootstrap values . excepted for the search performed with no minimal value for bootstrap scores, the results returned were systematically in favor of the coelomata hypothesis.

the queries corresponding to the two hypotheses have returned the numbers of patterns shown in the table. five different thresholds have been used for bootstrap, from no threshold to values higher than 95%.

note that this small example is only aimed at showing the possibilities provided by tpms in terms of tree pattern search. to fully validate the result presented above it would be necessary to go back to the sequence alignments and test for the relative evolutionary rates of individual genes, this in order to avoid systematic biases leading to reconstruction artefacts such as long branch attraction. indeed, the only nematode genome available in hogenom  <dig> is caenorhabditis elegans, and this organism is known to have genes with high evolutionary rates, leading frequently to such kind of artefacts  <cit> .

mammals phylogeny
in order to find sets of orthologs in a specific taxon it is possible to query a collection using a pattern corresponding to the subtree of a species tree containing the given taxon. if a gene tree contains exactly this pattern, then the most parsimonious hypothesis is that the matching sequences are orthologous. the search for exact patterns in tpms requires a direct link between nodes, which is specified by the exclamation mark. for instance, to query a collection to find orthologous genes inside the rodentia order, we must select all the gene trees containing the tpms pattern !, !//dipodomys ordii)!, !// cavia porcellus) !, !// spermophilustridecemlineatus). this feature can be used to test the support level for nodes in a species tree. as an example, we used the mammals phylogeny published by dos reis et al. <cit> . for that purpose, we extracted all possible subtrees in this tree and used the corresponding patterns to perform searches in homolens. complete listing of the patterns in tpms format is provided as additional file  <dig> 

this method can also be used to test alternative hypotheses in a tree. for instances, the pegasoferae node has the lowest support  when looking at all the other nodes located at the same level in the tree. moreover, waddell et al. <cit>  made the hypothesis that chiroptera is in fact a sister group of equus caballus. to test this hypothesis we searched for the number of gene families supporting it. for that purpose, we used the pattern !)!,!,!//felis catus)!). with this pattern, we obtained a support level of 6/ <dig> for pegasoferae, which is significantly lower than the one observed with the original topology.

discussion and 
CONCLUSIONS
tpms is a useful set of programs that can be used in a wide range of phylogenetic problems. it has high performance due to its implementation in a compiled language and the fact that all individual programs are multithreaded. multithreading allows an optimal use on the multi-core architectures that are now common even for desktop computers. for instance, the two pattern searches  performed on a collection containing  <dig> trees to identify the ones supporting the coelomata or the ecdyzosoa hypotheses took only six seconds on an intel xeon  <dig>  ghz with four cores.

for the tree pattern search, the most recent program available to perform this kind of task is phylopattern  <cit> . it is implemented in java and prolog and its users have to write their queries as prolog predicates, which can be very difficult for non-experts. also, this program cannot be used to root trees or to search for hgts. moreover, its performance will be far below the ones of tpms, due to the fact it is written with interpreted languages.

for the automated tree rooting procedure, different alternatives to the two strategies proposed by tpms are available. due to its simplicity, the classical midpoint method looks like a good choice, but this is usually a poor solution. indeed, midpoint rooting implies that the molecular clock hypothesis is approximately true for the sequences used and, most of the time, this is not the case  <cit> . other common approaches are mostly based on algorithms identifying roots that minimize the number of gene duplication and losses, but they require reconciled trees and therefore they need a reliable reference species tree  <cit> . in the case of tpms, the rooting strategy based on the use of an unicity score does not require the availability of such reference tree. this alternative is useful in the case of gene trees containing prokaryotic sequences, as no trusted species tree exist for these organisms. also, reconciliation methods usually performs poorly with prokaryotic sequences as they do not introduce the possibility of hgts events.

the application of tpms for efficient large-scale identification of putative hgts would require some improvements. presently, the algorithm is already able to search for incongruent patterns in which a subtree is responsible for a topological shift from the reference species tree. the problem is that the automated procedure provided does not guarantee that the rooting is optimal for prokaryotic species when performing “generic” searches . if there is a lot of hgts in a tree, our algorithm can lead to a wrong rooting, causing partially wrong taxonomic assignments, and therefore false positives. on the other hand, using tpms with an explicit transfer pattern  can be very efficient. a method like prunier, which is specifically devoted to the detection of hgts is of course more efficient than tpms in that area but the drawback is that it is limited to unicopy gene families  <cit> .

in the future, we have planned to add functionalities mainly to increase the user-friendliness. for instance, a module automatically completing the species names when building the file containing the associations between sequence names and the species to which they belong is under development. this module works with the remote-acnuc library  <cit>  and requires that the considered species are referenced in the general sequence collections.

availability and requirements
project name: tpmsproject home page:http://pbil.univ-lyon <dig> fr/software/tpms/operating system: unix-like operating systems such as linux and macosx progamming language: c++other requirements: bio++ and boost librarieslicense: gnu gpl

competing interests
the authors declare that they have no competing interests.

authors’ contributions
tb did all software development, documentation writing and web site set-up, fl participated to conception of the rooting algorithms, vd participated to the incongruencies detection research, gp supervised tpms development and wrote the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
set of tpms patterns corresponding to all possible subtrees from the tree shown in figure  <dig> 

click here for file

 acknowledgements
this work has been supported by anr grant anr-08-genm- <dig> for the metasoil project and anr grant anr-10-binf-01- <dig> for the ancestrome project.
