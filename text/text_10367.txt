BACKGROUND
proteins are linear chains of amino acids. the polypeptide chains are folded into complicated three-dimensional  structures. with different structures, proteins are able to perform specific functions in biological processes  <cit> . to study the structure-function relationship, biologists have a high demand on protein structure retrieval systems for searching similar sequences or 3d structures  <cit> . protein pairwise comparison is one of the main functions of such retrieval systems  <cit> . the need to retrieve or classify proteins using 3d structure or sequence-based similarity underlies many biomedical applications. in drug discovery, researchers search for proteins that share specific chemical properties as sources for new treatment. in folding simulations, similar intermediate structures might be indicative of a common folding pathway  <cit> .

related work
the structural comparison problem in a protein structure retrieval system has been extensively studied. in  <cit> , a rapid protein structure retrieval system named protdex <dig> was proposed by aung and tan  <cit>  , in which they adopted the information retrieval techniques to perform rapid database search without accessing to each 3d structure in the database. the retrieval process was based on the inverted-file index constructed on the feature vectors of the relationship between the secondary structure elements  of all the protein structures in the database. in order to evaluate the similarity score between a query protein structure and a protein structure in the database, they adopted and modified the well-known ∑ scoring scheme commonly used in document retrieval systems  <cit> . in  <cit> , a 3d shape-based approach was presented by daras et al. the method relied primarily on the geometric 3d structure of the proteins, which was produced from the corresponding pdb files, and secondarily on their primary and secondary structures. additionally, characteristic attributes of the primary and secondary structures of the protein molecules were extracted, forming attribute-based descriptor vectors. the descriptor vectors were then weighted and an integrated descriptor vector was produced. to compare a pair of protein descriptor vectors, daras et al.  <cit>  used two metrics of similarity. the first one was based on the euclidean distance  <cit>  between the descriptor vectors, and the second one was based on mean euclidean distance measure  <cit> .

later, marsolo and parthasarathy presented two normalized, stand-alone representations of proteins that enabled fast and efficient object retrieval based on sequence or structure information  <cit> . for the range queries, they specified a range value r and retrieved all the proteins from the database which lied within a distance r to the query. in their work, distance referred to the standard euclidean distance  <cit> . in  <cit> , sael et al. introduced a global surface shape representation by 3d zernike descriptors for protein structure similarity search. in their study, three distance measures were used for comparing 3d zernike descriptors of protein surface shapes, i.e., euclidean distance, manhattan distance  <cit> , and correlation coefficient-based distance. a fast protein comparison algorithm ir tableau was developed by zhang et al. for protein retrieval purposes in  <cit> , which leveraged the tableau representation to compare protein tertiary structures. ir tableau compared tableaux using feature indexing techniques. in ir tableau  <cit> , a number of similarity functions were applied for comparing a pair of protein vectors, i.e., cosine similarity  <cit> , jaccard index  <cit> , tanimoto coefficient  <cit> , and euclidean distance.

the basic components of a protein retrieval system includes a way to represent proteins and a dissimilarity measure that compares a pair of proteins. most of the aforementioned studies focus on the feature representation of the proteins, while neglecting the comparison of the feature vectors. such studies usually apply a simple similarity or dissimilarity measure for the comparison of the feature vectors, such as euclidean distance measure used in  <cit> . most of the existing protein comparison techniques suffer from the following two bottlenecks:

• the dissimilarity measure is a pairwise distance measure, which is computed only considering the query protein x <dig> and a database protein xi as d. it does not consider other proteins in the database, neglecting the effects of the contextual proteins. if we consider the distribution of the entire protein database x = {xj}, j =  <dig> ... n when computing the dissimilarity as d, the retrieval performance may benefit from the contextual proteins {xj}, j ≠ i.

• the dissimilarity measure is computed in an unsupervised way, which does not use the known information of the class labels l = {lj}, j =  <dig> ... , n in the database. although we may have no idea about whether x <dig> and xi belong to the same class  or not , we do know some prior information about other proteins l. in all of the previous studies, prior class labels l were not adopted to calculate the dissimilarity d.

due to these two bottlenecks, traditional protein retrieval systems using pairwise and unsupervised dissimilarity measure usually do not achieve satisfactory performance, even though many effective protein feature descriptors are developed and used. in this paper, we investigate the dissimilarity measure and propose a novel learning algorithm to improve the performance of a given dissimilarity measure.

recent research in machine learning points out that contextual information can be used to improve the dissimilarity or similarity measures. this kind of algorithms are called contextual or context-sensitive dissimilarity learning  <cit> . unlike the traditional pairwise distance d which only considers the two refereed proteins x <dig> and xi, contextual dissimilarity also considers the contextual proteins x when computing the dissimilarity d. the existing contextual similarity learning algorithms can mainly be classified into the following two categories:

dissimilarity regulation
the first contextual dissimilarity measure  was proposed by jegou et al. in  <cit> . they introduced the cdm, which significantly improved the accuracy of the image search problem. cdm measure took the local distribution of the vectors into account and iteratively estimated the distance update terms in the spirit of sinkhorns scaling algorithm  <cit> , thereby modified the neighborhood structure. this regularization was motivated by the observation that a good ranking was usually not symmetric in an image search system. in this paper, we will focus on this type of contextual dissimilarity learning.

similarity transduction on graph
in  <cit> , bai et al. provided a novel perspective to the shape retrieval tasks by considering the existing shapes as a group and studying their similarity measures to the query shape in a graph structure. for a given similarity measure, a new similarity was learned through graph transduction. the learning was done in an iterative manner so that the neighbors of a given shape influenced the final similarity to the query. the basic idea is actually related to the pagerank algorithm, which forms a foundation of google web search. this method is further improved by wang et al. in  <cit> . similar learning algorithms were also used to rank proteins in a protein database as in  <cit> . kuang et al. proposed a general graph-based propagation algorithm called motifprop to detect more subtle similarity relationship than the pairwise comparison methods. in  <cit> , weston et al. reviewed rankprop, a ranking algorithm that exploited the global network structure of similarity relationship among proteins in a database by performing a diffusion operation on a protein similarity network with weighted edges.

the drawbacks of the above algorithms lay on two folds. on the one hand, such algorithms do not utilize the class label information of the database images l, and thus work in an unsupervised way. the only one used l is  <cit> . however, the algorithm proposed in  <cit>  had basically the same framework as  <cit> , i.e., protein label information l was only used to estimate the parameters. on the other hand, the "context" is fixed in the iterative algorithms of most of the transduction methods  <cit> . a better way is to update the context using the learned similarity measures as in  <cit> .

to overcome these drawbacks, we develop a novel contextual dissimilarity learning algorithm to improve the performance of a protein retrieval system. the novel dissimilarity measure is regularized by the dissimilarity of the contextual proteins , while the contextual proteins are updated using the learned dissimilarities coherently. the basic idea comes from  <cit> , which assume that if two local features in two images are similar, their context is likely to be similar. in comparison to  <cit> , which use neighborhood as a single context, we partition the neighborhood into several hierarchical sub-context corresponding to the learned dissimilarities. with the sub-context, we compute the dissimilarity of sub-context of a pair of proteins and construct the hierarchial sub-contextual dissimilarity vector. moreover, using the label information l, we select pairs of proteins belonging to the same classes {|li = lj} as the relevant protein pairs. we also select the irrelevant protein pairs {|lk ≠ ll}.

finally, we train a support vector machine   <cit>  to distinguish between the relevant and the irrelevant protein pairs. the output of the svm will further be used to regularize the dissimilarity in an iterative manner.

methods
this section describes our contextual protein-protein dissimilarity learning algorithm, which utilizes the contextual proteins and class label information of the database proteins to index and search protein structures efficiently. we will demonstrate that our idea is general in the sense that it can be used to improve the existing similarity/dissimilarity measures.

protein structure retrieval framework
in a protein retrieval system, the query and the database proteins are firstly represented as feature vectors. here, we denote the query protein feature vector as x <dig> and database protein feature vectors as x = {x <dig>  x <dig>  ... , xn}, where n is the number of proteins in the database. then, based on a distance measure d0i= d, we compute the distance of x <dig> and all the proteins in the database, i.e., {d <dig>  d <dig>  ... , d0n}. the database proteins are then ranked according to the distances. the k most similar ones are returned as the retrieval results. we illustrate the outline of the protein retrieval system in figure  <dig> 

prodis-contshc: the contextual dissimilarity learning algorithm
in this section, we will introduce the novel contextual protein-protein dissimilarity learning algorithm. we first give the definition of the hierarchical context of a protein, which will be used to compute the contextual dissimilarity and regularize the dissimilarity measure. then a more discriminative regularization factor is learned using the class labels of the database proteins. finally, we propose the supervised regulating of protein-protein dissimilarity and updating of the hierarchical context coherently in an iterative manner, resulting in the prodis-contshc algorithm.

using hierarchical context to regularize the dissimilarity measure
here, we define a protein xi's context as its k nearest neighbors n. the dissimilarity between two sets of context is measured by the contextual dissimilarity as

  rij=1k <dig> ∑m∈n,n∈ndmn 

the contextual dissimilarity is illustrated in figure  <dig> 

furthermore, instead of averaging all the pairwise dissimilarities between the two context n and n, we propose the hierarchical context by splitting the context n to p "sub-context" np,p={ <dig> ⋯,p} according to their distances to xi. to be more specific, sub-context np is defined as

  np={xj|xjisamongthek′-thtok″-thnearestneighborsofxi,accordingto{dij},j∈{ <dig> ⋯,i- <dig> i+ <dig> ⋯,n}} 

where k' =  × κ, k'' =  × κ + κ, κ is the size of a sub-context, and p is the number of sub-context. in this way, we can compute the contextual dissimilarity by averaging the dissimilarity of the sub-context as

  rij=1p ∑p1κ <dig> ∑m∈np,n∈npdmn=1p ∑pdij 

where dij=1κ <dig> ∑m∈np,n∈npdmn,p= <dig> ⋯,p, is the hierarchical sub-contextual dissimilarity. figure  <dig> illustrates the idea of sub-contextual dissimilarity.

intuitively, if the context of two proteins is dissimilar to each other , they should have a higher dissimilarity value, and vice versa. we implement this by multiplying a coefficient, which is the ratio of rij to the average of all the contextual dissimilarity r ¯=1n <dig> ∑i,jrij,

  dij*=dij×rijr ¯=dij×δij 

here, δij=rijr ¯ is a regularization factor for dij, with which we can improve dij by its contextual information. moreover, this procedure can be done in an iterative manner. we can use the regularized dissimilarity measure dij* to re-define the new hierarchical context np. in this way, we can learn the protein-protein dissimilarity dij* and hierarchical context np coherently.

supervised regularization factor learning
we try to utilize the label information l = {l <dig>  ... , ln} of the database proteins to learn a better regularization factor δij. the class information is adopted both in the intraclass and interclass dissimilarity computation to maximize the fisher criterion  <cit>  for protein class separability. firstly, we can select a number of protein pairs {γ = |i, j =  <dig>  ... , n}. for each pair, we compute the hierarchical contextual dissimilarities and organize them as a p-dimensional dissimilarity vector dγ = ⊤, as shown in figure  <dig>  then, inspired by the score fusion rule  <cit> , using l, we further label each pair γ =  as a relevant pair yγ = + <dig> if li = lj, or an irrelevant pair yγ = - <dig> otherwise.

now with the training samples as Γ = {}, γ =  <dig>  ... ,n c <dig>  we train a binary svm  <cit>  classifier to distinguish between the relevant pairs and the irrelevant pairs. the publicly available package svmlight  <cit>  is applied to implement the svm on our training set Γ. this package allows us to optimize a number of parameters and offers the options to use different kernel functions to obtain the best classification performance  <cit> . the separating hyperplane generated by svm model is given by

  f=d⋅w+b 

where w is a vector orthogonal to the hyperplane, and b is a parameter that minimizes ||w|| <dig> and satisfies the following conditions:

  yγ≥ <dig> 

for all  <dig> ≤ γ ≤ n c <dig>  where nc <dig> is the total number of examples . an svm model with a linear decision boundary is shown in figure  <dig> to distinguish the relevant protein pairs from the irrelevant ones. note that not all the nc <dig> possible protein pairs are necessary to be included to train the svm model . for any pair of proteins , after we compute its contextual dissimilarity vector dij, the trained svm classifier is applied to get the distance of this point to the margin boundary of svm as ỹij=f. apparently, ỹij is a measure of dissimilarity of the context of this pair of proteins. thus, it can be used to form a regularization factor as

  δ′ij=exp=exp-σ 

where σ is a preemptor of the factor. with this regularization factor learned from the contextual proteins, we regularize the dissimilarity dij of protein pair  as

  dij*=dij×δij′ 

updating the context and dissimilarity coherently
with the learned dissimilarity measure dij*, we can re-define the "context" of a protein xi according to its dissimilarity to all the other proteins dij*,j∈{ <dig> ⋯,i- <dig> i+ <dig> ⋯,n}. the new "hierarchical-context" relying on dij* is donated as np*,p={ <dig> ⋯,p}. in this way, we can develop an iterative algorithm that learns dij* and np*,p={ <dig> ⋯,p} coherently. since np* implicitly depends on dij* through the nearest neighbors of xi, we use a fixed-point recursion method  <cit>  to solve dij*. in each iteration, np* is first computed by using the previous estimation of dij*, which is then updated by multiplying the regularization factor δij′ as in . the iterations are carried out for t times, as given in algorithm  <dig> 

with the learned dissimilarity matrix d, we use d as the dissimilarity between the query protein x <dig> and the database proteins {x <dig>  ... , xn}. thus we can rank the database proteins in an ascending order.

efficient implementation of prodis-contshc
the proposed learning algorithm is time-consuming. therefore, it is not suitable for realtime protein retrieval systems. here we propose several techniques to significantly improve the efficiency of the algorithm.

• similar to  <cit> , in order to increase the computational efficiency, it is possible to run prodis-contshc for only part of the database of the known proteins. hence, for each query protein x <dig>  we first retrieve n' ≪ n of the most similar proteins, and perform prodis-contshc to learn the dissimilarity matrix of size  ×  for only those proteins. then we calculate the new dissimilarity measure d'  ×  for only those  proteins. here, we assume that all the relevant proteins will be among the top n' most similar proteins. this strategy is illustrated in figure  <dig> and  <dig> 

• most of the dissimilarity and similarity measures are symmetric ones, i.e., dij = dji. as can be observed in , the regularization of dij is also symmetric. therefore, it is possible to develop an efficient learning algorithm by using this property. in the algorithm, all the computation results of   can be used directly by . in this way, we can save almost half of the computational time, as shown in figure  <dig> 

• a bottleneck of prodis-contshc may be the training procedure for the svm model in each iteration. for a database of n proteins belonging to c classes, there are n c <dig> protein pairs, in which ∑c=1cncc <dig> are relevant pairs, while ∑c=1c∑c′≠cnc×nc′ are irrelevant pairs, where c is the number c of the protein classes and nc is the number of proteins in the c-th class . there might be a huge number of protein pairs available for the svm training. however, it is not necessary to include all of them in the training process. one can select a small but equal number of the relevant and the irrelevant pairs to train the svm classifier. this is an effective way to reduce the training time of svm.

algorithm  <dig> prodis-contshc: supervised learning of protein dissimilarity and updating hierarchical context coherently.

require: input d = ×: matrix of size × of pairwise protein feature distances, where x <dig> is the query protein and {x <dig>  ... , xn} are the database proteins;

require: input κ: size of the hierarchical sub-context;

require: input p: number of the hierarchical context;

initialize dissimilarity matrix: d = d;

for t =  <dig>  ... , t do

update the hierarchical context for each protein xi:np,,

  np={xj|xjisamongthek′-thtok″-thnearestneighborsofxi,accordingtod} 

where k' =  × κ, k'' =  × κ + κ, and d=.

compute the contextual proteins dissimilarity vector dij for each pair of proteins , i, j ∈ { <dig>  ... , n}:

  dij=⊤ 

where dij=1k <dig> ∑m∈np,n∈npdmn.

select relevant and irrelevant protein pairs and label them as yγ = + <dig> and yγ = - <dig> respectively, train an svm model for their contextual dissimilarity vectors dγ as

  f=w⋅d+b 

compute the distance to the svm margin boundary for the contextual dissimilarity vector dij of each pair of proteins as ỹij=f), and set a regularization factor for this pair of proteins:

  δij=expσ) 

update the pairwise protein dissimilarity measures:

for i =  <dig>   <dig>  ... , n do

for j =  <dig>   <dig>  ... , n do

  dij=dij×δij 

end for

end for

d=×.

end for

output the dissimilarity matrix: d.

benchmark sets
to evaluate the proposed prodis-contshc algorithm, we conduct experiments on two different benchmark sets, i.e., the ones used in  <cit>  and  <cit>  respectively.

astral  <dig>  protein domain dataset
following  <cit> , we use the following database and queries as our first benchmark set:

database
the astral  <dig>   <cit>  95% sequence-identity non-redundant data set is used as the protein database. we generate our index database from the tableau data set published by stivala et al.  <cit> , which contains  <dig>  entries.

queries
a query data set containing  <dig> randomly selected protein domains is used in our experiment. for each query, a list that contains all the proteins in the respective index database is returned with the ranking scores.

we generate a vector of features x for a given protein based on its tableau representation  <cit> .

fssp/dali protein dataset
to evaluate the performance of the proposed methods, a portion of the fssp database  <cit>  is selected as in  <cit> . this dataset has  <dig>  proteins classified into  <dig> classes. it’s constructed according to the dali algorithm  <cit> . the protein numbers in different classes varies  <dig> to  <dig>  for protein feature representation, the following two features are extracted from the 3d structure and the sequence of a protein as in  <cit> :

• the polar-fourier transform, resulting in the ft <dig> features;

• krawtchouk moments, resulting in the kraw <dig> features.

the descriptor vectors are weighted and an integrated descriptor vector is produced as x, which will be used for the protein retrieval tasks.

RESULTS
results on astral  <dig>  dataset
to compare a query protein x <dig> to a protein xi in the astral  <dig>  dataset, we compute the cosine similarity  <cit>  as the baseline similarity measure as in  <cit> . cosine similarity  <cit>  simply calculates the cosine of the angle between the two vectors xi and xj.

  sij=c=xi⋅xj||xi||||xj|| 

a higher cosine similarity score implies a smaller angle between the two vectors. although prodis-contshc is proposed to learn protein-protein dissimilarity dij, it can be extended easily to learn similarity sij as well. the only difference is to set the regularization factor as δij′=exp instead of δij′=exp in .

roc curve and precision-recall curve performance
scop  <cit>  fold classification is used as the ground truth to evaluate the performance of the different methods. to fairly compare the accuracy, we use the receiver operating characteristic  curve  <cit> , the area under this roc curve   <cit> , and the precision-recall curve  <cit> . given a query protein x <dig> which belongs to the scop fold l <dig>  the top k proteins returned by the search algorithms are considered as the hits. the remaining proteins are considered as the misses. for the i-th protein xi belonging to the scop fold li, if li = l <dig> and i ≤ k, the protein xi is defined as a true positive . on the other hand, if li ≠ l <dig> and i ≤ k, xi is defined as a false positive . if li ≠ l <dig> and i > k, xi is defined as a true negative . otherwise, xi is a false negative . using these definitions, we can then compute the true positive rate , the false positive rate , recall and precision as follows:

  tpr=tpp=tptp+fnfpr=fpn=fpfp+tn 

  recall=tptp+fnprecision=tptp+fp 

tprk, fprk, recallk, and precisionk are calculated for all  <dig> ≤ k ≤ n , where n is the size of the database. the roc defines a curve of points with fprk as the abscissa and tprk as the ordinate. precision-recall defines a curve with recallk and precisionk as abscissa and ordinate respectively. we use the area under the roc curve  as a single-figure measurement for the quality of a roc curve  <cit> , and use the averaged auc over all the queries to evaluate the performance of the method.

to demonstrate the contribution of the supervised learning idea, we also compare prodis-contshc with its unsupervised counterpart, i.e., contextual dissimilarity algorithm based on the unsupervised learning, i.e., prodis-conthc. prodis-conthc is also applied to improve the cosine similarity. we also compare with the widely-used contextual dissimilarity measure  <cit>  , which tries to take into account the local distribution of the vectors and iteratively estimates distance update terms in the spirit of sinkhorns scaling algorithm, thereby modifying the neighborhood structures.

the performance of different methods are compared, as shown in figure  <dig>  figure  <dig> shows the roc curves of the original cosine similarity and its improved versions by three contextual similarity learning algorithms on the astral  <dig>   <cit>  95% dataset, with different numbers of proteins returned to each query. it can be seen from figure  <dig> that the tpr of all the methods increases as the fpr grows. the reason is due to the fact that, provided the number of queries is fixed, when the number k of returned proteins to each query is very small, the returned proteins are not enough to "represent" the class features of the query, which then causes the low tpr. meanwhile, in this situation, most of the returned proteins are highly confident of belonging to the same class as the query, resulting in a low fpr. moreover, the tpr is almost 100% when the fpr>50%. it is clear that the roc curve of prodis-contshc completely embodies the roc curves of the other three methods, which implies prodis-contshc is the best method among the four. that also means that supervised learning is better than unsupervised learning for this purpose. prodis-conthc, on the other hand, is the second best method among these four, which demonstrates the contribution of the hierarchical sub-context idea to the traditional contextual dissimilarity measures. the overall auc results are listed in table  <dig>  from which similar conclusions can be drawn. it is noticeable that the auc for prodis-contshc is very close to  <dig>  which means prodis-contshc works almost perfectly on this dataset. we further compare these four methods by the precision-recall curves, which are shown in figure  <dig>  it can be seen that the proposed contextual similarity learning algorithms significantly outperform the traditional methods. prodis-contshc, again, is consistently the best method among the four.

auc results for qp tableau  <cit> , sheba  <cit>  and vast  <cit>  are taken from  <cit> , which used exactly the same query set and the same dataset as our experiments.

regarding the efficiency of the method, in this experiment, the learning time of the prodis-contshc is longer than that of the prodis-conthc and cdm. this is because in each iteration of the learning algorithm, a quadratic programming problem with many training protein pairs have to be solved to train the svm. in addition, the computation of the regularization factor of supervised similarity learning algorithm needs more function evaluations.

we also compare the proposed algorithms with seven other protein retrieval methods, i.e., tableau search  <cit> , qp tableau  <cit> , yakusa  <cit> , sheba  <cit> , vast  <cit> , and tops  <cit> . the overall auc values are shown in table  <dig>  it can be concluded that the tableau feature based methods do not always achieve better performance than other methods, such as tableau search. among the existing tableau feature based methods, ir tableau outperforms the others. yakusa and sheba also have comparable performance. as seen in table  <dig>  the auc of the proposed algorithms is clearly better than all the other methods.

improving different similarity measures via contextual dissimilarity learning algorithms
to further evaluate the robustness of our method, we test the behavior of prodis-contshc and other contextual similarity learning algorithms on different similarity measures. a group of experiments are conducted on the astral  <dig>  95% dataset with the following similarity measures:

• the cosine similarity  <cit>  as introduced in the previous section.

• the jaccard index  <cit> : it is defined as the size of the intersection divided by the size of the union of two sets, i.e.,

  j=|xi ⋂xj||xi ⋃xj| 

• the tanimoto coefficient  <cit> : it is a generalization of the jaccard index, defined as

  j=xi⋅xj||xi||2+||xj||2-xi⋅xj 

• squared euclidean distance  <cit> : it is another means of measuring similarity of proteins.

  dij=⊤=∑m−xj) <dig> 

where xi is the m-th element of vector xi.

prodis-contshc, prodis-conthc, and the cdm algorithms are applied to improve each of these similarity measures, respectively. the auc values of the corresponding retrieval systems are plotted in figure  <dig>  in general, improving the original similarity measure by prodis-contshc leads to the largest improvement. the only exception is for tanimoto coefficient, on which prodis-contshc has slightly lower auc than prodis-conthc, but comparable auc to the cdm. one possible reason is that the supervised classifier fail to capture the real distribution of the contextual similarity. prodis-conthc, on the other hand, also performs better than the cdm algorithm and the original similarity measures. this strongly suggests that our previous conclusions are valid and consistent. that is, hierarchical sub-contextual information can remarkably improve the traditional context-based similarity measures, whereas supervised learning can further improve the accuracy for most of the input similarity measures.

results on fssp/dali dataset
unlike the similarity measure used in the last experiment, here we use the euclidean distance  <cit>  to compare a pair of proteins as the baseline dissimilarity measure as in  <cit> . in this way, we have an idea about how our algorithms work with both similarity and dissimilarity measures. for a query protein x <dig>  the pairwise euclidean distances, d0i, i =  <dig>   <dig>  ... , n , are ranked. the top k proteins are returned as the retrieval results. to evaluate the performance of the proposed algorithms, we test them on both the protein retrieval and the protein classification tasks, following  <cit> .

performance on protein retrieval
the efficiency of the proposed dissimilarity learning algorithm is first evaluated in terms of the performance on the protein retrieval task. in this case, each protein xi ∈ x of the dataset is used as a query x <dig> and the retrieved proteins are ranked according to the shape dissimilarity d0jto the query, where j =  <dig>   <dig>  ... , i -  <dig>  i +  <dig>  ... , n. we also use the precision-recall curve to demonstrate the performance of the proposed methods, where precision is the proportion of the retrieved proteins that are relevant to the query and recall is the proportion of the relevant proteins in the entire dataset that are retrieved as the results.

to test the robustness and consistency of our methods, we apply our methods to three different protein descriptor vectors, i.e., daras et al.'s ft <dig>  kraw <dig>  and ft02&kraw <dig>  <cit>  geometric descriptor vectors. we also apply the unsupervised version of our algorithm, prodis-conthc, and the cdm algorithm to the same dissimilarity measure and the same descriptor vectors to compare with prodis-contshc. figure  <dig> shows the precision-recall curves for different algorithms on different protein descriptor vectors. as mentioned in  <cit> , there is always a tradeoff between the precision and recall values. this is clearly shown in figure  <dig>  , and  <dig>  in which the algorithms reach their peak precision values at the smallest recall values. it can be seen that prodis-contshc has a clearly better performance than any other method, whereas prodis-conthc is the second best one. this is quite consistent with what is observed in the last experiment, in which a similarity measure is used. therefore, our algorithms can consistently improve any similarity/dissimilarity measure. among the three protein descriptor vectors, prodis-contshc performs the best on the combined vector, i.e., kraw <dig> &ft <dig>  this is because this vector not only employs the context, but also their relevant information to predict the relationship between the query and the database proteins.

performance on protein classification
the performance of the method is also evaluated in terms of the overall classification accuracy  <cit> . to be more specific, for each protein xi in the database, a dissimilarity measure is applied after removing that protein from the database . a class label l <dig> is then assigned to the query x <dig> according to the label of the nearest database protein. the overall classification accuracy is given by:

  overallclassificationaccuracy=numberofcorrectlypredictedproteinstotalnumberofproteinsinthedatabase 

we again conduct this experiment with the three descriptor vectors, i.e., ft <dig>  kraw <dig>  and ft02&kraw <dig>  the overall classification accuracy is shown in table  <dig>  it can be seen that prodis-contshc has a consistently higher than 99% accuracy on all the three descriptor vectors. each dissimilarity measure achieves its highest accuracy on kraw <dig> &ft <dig>  among the four dissimilarity measures, prodis-contshc has the highest accuracy, whereas prodis-conthc is the second best one. therefore, this conclusion has been demonstrated on both similarity and dissimilarity measures on different datasets with different descriptor vectors.

CONCLUSIONS
we have introduced in this paper a novel contextual dissimilarity learning algorithm for protein-protein comparison in protein database retrieval tasks. its strength resides in the use of the hierarchical context between a pair of proteins and their class label information. by extensive experiments, this novel algorithm has been demonstrated to outperform the traditional context-based methods and their unsupervised version.

we formulate the protein dissimilarity learning problem as a context-based classification problem. under such a formulation, we try to regularize the protein pairwise dissimilarity in a supervised way rather than the traditional unsupervised way. to the best of our knowledge, this is the first study on supervised contextual dissimilarity learning. we propose a novel algorithm, prodis-contshc, which updates a protein's hierarchical sub-context and the dissimilarity measure coherently. the regularization factors are learned based on the classification of the relevant and the irrelevant protein pairs. the algorithm works in an iterative manner.

experimental results demonstrate that supervised methods are almost always better than their unsupervised counterparts on all the databases with all the feature vectors. the proposed method, even though mainly presented for protein database retrieval tasks, can be easily extended to other tasks, such as rna sequence-structure pattern indexing  <cit> , retrieval of high throughput phenotype data  <cit> , and retrieval of genomic annotation from large genomic position datasets  <cit> . the approach may also be extended to the database retrieval and pattern classification problems in other domains, such as medical image retrieval  <cit> , speech recognition, and texture classification  <cit> .

competing interests
the authors declare that they have no competing interests.

authors' contributions
jw: designed the algorithm, carried out the experiments, analyzed the results, and wrote the manuscript. xg: designed the algorithm and the experiments, improved the manuscript. qw: carried out the experiments, analyzed the results, improved the manuscript. yl: improved the manuscript. all authors read and approved the final manuscript.

