BACKGROUND
gene expression microarrays are a prominent experimental tool in functional genomics. they have revolutionized biological research by providing genome-wide snapshots of transcriptional networks that are active in the cell. this opens the opportunity for gaining global, systems-level understanding of cellular processes. microarray platforms for measuring the expression levels of most or all genes of an organism are available for a variety of organisms ranging from yeast to human. experiments that use this technology typically generate overwhelming volumes of data, unprecedented in biological research, which makes the task of mining meaningful biological knowledge out of the raw data a major challenge. hence, exploitation of gene expression data is fully dependent on the availability of advanced data analysis and statistical tools. many algorithms and software tools for analysis of microarray data were developed in recent years, including sophisticated methods for signal extraction and array normalization  <cit> , clustering  <cit> , and statistical identification of over-represented functional categories  <cit>  and promoter motifs  <cit> . at present, of special need are integrative software packages that provide users with a set of algorithms collectively covering the whole range of steps in microarray data analysis, thereby significantly boosting the analysis flow and the researcher's ability to deduce meaningful biological conclusions from the overwhelming volume of recorded data. here we present the expander program suite for gene expression data analysis.

implementation
expander , initially developed as a clustering tool  <cit> , has been redesigned as a 'one-stop shop' tool for analysis of the data. expander  <dig>  integrates methods and algorithms that collectively cover different steps of the data analysis, ranging from the initial steps of normalization and filtering, through module detection by clustering and biclustering, to high-level analysis of functional enrichment and of promoter cis-regulatory elements. expander serves as the major platform in which we integrate various gene expression analysis algorithms that were developed in our lab, including click for clustering  <cit> , samba for biclustering  <cit> , prima for promoter elements analysis  <cit> , and tango for go functional enrichment analysis . in addition, expander implements various visualization utilities that accompany each of the analysis modules. four basic design principles instructed us in the implementation of the package: first, the analysis flow should be highly streamlined. second, although some of the modules are based on highly complicated algorithms, their use should be kept simple and results should be presented in an intuitive manner. third, data analysis is expected to be done iteratively, allowing users to examine different parameter settings and clustering algorithms – therefore, special effort was put on efficient implementation of the algorithms. forth, users should be freed from the burden of compiling annotation data required for the analysis. therefore, expander not only implements the analysis algorithms, but also supplies users with all necessary annotation and sequence data.

expander is available with genome-wide pre-processed functional gene ontology  and promoter sequences data files for yeast, worm, fly, rat, mouse and human, supporting high-level analysis of data obtained from these organisms. expander supports analysis of both relative and absolute expression level datasets, the former generated by cdna microarrays and the latter by, e.g., affymetrix oligonucleotide arrays. the main utilities provided by expander and the major algorithms implemented in it are described in the results section below. figure  <dig> gives a high level summary of expander's analysis flow and of the main algorithms implemented in each analysis step.

expander is implemented in java. most of the algorithms it runs were implemented in c. expander versions for windows and unix are freely available for academic users.

RESULTS
in this section we describe the main analysis modules implemented in expander, and present a case analysis that demonstrates the strength of this package in deriving biological conclusions out of massive gene expression datasets.

normalization
the goal of this pre-processing step is the removal of technical biases among the analyzed chips. currently, the default normalization scheme applied by affymetrix software is the global scaling, which multiplies all intensities measured in a chip by a constant factor to bring the average/median intensity level in each chip to a predefined fixed level. however, several studies pointed out that global scaling is too naïve in many cases, and that more sophisticated normalization procedures accounting, e.g., for intensity-dependent bias, are required  <cit> . we implemented in expander two such methods: non-linear regression and quantiles equalization as described in  <cit> . normalization of cdna arrays requires intensity levels measured in both red and green channels. expander expects log ratios  as input when analyzing dual channels data. therefore, normalization schemes in expander are available at this stage to one-channel datasets. several novel normalization schemes are not yet implemented in expander   <cit> , li-wong invariant set normalization  <cit> ). users can load expander with data that were normalized using external tools.

filtering utilities
expander provides several commonly-used filtering options based on fold-change factors, minimal variation criteria, or choosing the n most variant genes, allowing the user to focus downstream analysis on the set of genes that show sufficient variation across the measured conditions.

cluster analysis
clustering algorithms applied to gene expression data partition the genes into distinct groups according to their expression patterns over the probed biological conditions. such partition should assign genes with similar expression patterns to the same cluster  while retaining the distinct expression pattern of each cluster . cluster analysis eases the interpretation of the data by reducing its complexity and revealing the major patterns that underlie it. expander implements a few of the most widely used clustering algorithms – som  <cit> , k-means  <cit> , and hierarchical clustering  <cit> , as well as click, a graph theoretic based algorithm developed in our lab. click is described in detail in  <cit>  and it was demonstrated to outperform other algorithms according to several figures of merit  <cit> . when computing a clustering solution, expander also specifies its homogeneity and separation measures, enabling the user to compare the merits of different solutions. several displays for patterns  and matrices  are provided for the visualization of clustering solutions.

bicluster analysis
as expression data accumulate, and profiles over hundreds of different biological conditions are readily available, clustering becomes too restrictive. clustering algorithms globally partition genes into disjoint sets according to the overall similarity in their expression patterns, i.e., they search for genes that exhibit similar expression levels over all the measured conditions. such requirement is appropriate when analyzing small to medium size datasets from one or a few related experiments or when analyzing time-series data, as it provides statistical robustness and produces results that are easily visualized and comprehended. yet, when larger datasets are analyzed, a more flexible approach is frequently advantageous. a bicluster  is defined as a set of genes that exhibit significant similarity over a subset of the conditions . a biclustering algorithm can dissect a large gene expression dataset into a collection of biclusters, where genes or conditions can take part in more than one bicluster. a set of biclusters can thus characterize a combined, multifaceted gene expression dataset  <cit> . an enhanced version of our biclustering algorithm, called samba  is integrated in expander and is the preferable partition-analysis approach for large heterogeneous datasets that encompass dozens of conditions . samba  <dig>  can handle datasets with thousands of conditions profiled over entire genomes. for technical description of the samba algorithm see  <cit> . briefly, the algorithm first transforms gene expression data into a weighted bipartite graph  and then applies a statistical scoring scheme and a combinatorial algorithm to identify heavy subgraphs in the bipartite graph. each such heavy subgraph represents a bicluster. samba operates in three phases: in the first step bicluster seeds are detected, then each seed is optimized to a locally optimal bicluster, and finally a non redundant subset of the locally optimized biclusters is selected. samba  <dig>  contains a new implementation of the first step in which efficient hashing techniques are now utilized, thereby significantly improving running time. it also features a new redundancy filtering algorithm  that optimizes the total likelihood of a set of biclusters using a probabilistic model that generalizes the single bicluster model.expander allows the user to tune samba's performance by selecting among several multi-level discretization schemes based on the numerical characteristics of the analyzed dataset. another important tunable parameter controls the stringency of the redundancy-filtering algorithm.

functional enrichment analysis
after identifying the main co-expressed gene groups in the data , one of the major challenges is to ascribe them to some biological meaning. to assist the researcher in this task, expander contains a statistical analysis module that seeks specific functional categories that are significantly over-represented in the analyzed gene groups, with respect to a given background set of genes. in addition to pointing to possible biological roles for distinct gene sets, such analysis was demonstrated to be very helpful in assigning putative functional roles to uncharacterized genes  <cit> . expander is provided with pre-compiled functional annotation files for six organisms: yeast , worm , fly , rat , mouse  and human, releasing the user from the burden of compiling such annotation information. these annotation files, compiled based on data provided by the gene ontology  consortium  <cit>  and the central databases for these organisms, associate genes with go functional categories.

a major challenge in identifying cases of over-represented go categories is obtaining a good estimation of statistical significance for each case, that takes multiple testing into account . what complicates this task is the hierarchical tree-like structure of the ontology, which induces strong dependencies among go categories. thus, standard methods for accounting for multiple testing, which assume independent tests  are far too stringent. expander uses the tango  algorithm for coping with this problem . briefly, tango repeatedly shuffles genes to compute an empirical distribution of maximum p-values for functional enrichment obtained across a random sample of clusters that maintain the same size characteristics of the analyzed clusters. tango uses this empirical distribution to determine thresholds for significant enrichment on the true clusters. another problem that stems from the strong dependencies among go categories is the high level of redundancy in the reported enriched categories, which often include both parent and child nodes associated with highly overlapping set of genes. tango filters out such redundant categories by performing conditional enrichment tests that ensure that all the reported enriched categories are statistically significant even after taking into account the enrichment of their related nodes in the tree. an example for the visualization of tango results is shown in figure  <dig> 

cis-regulatory element analysis
microarray measurements provide snapshots of cellular transcriptional programs that take place in the examined biological conditions. these measurements do not, however, directly reveal the regulatory networks that underlie the observed transcriptional activity, i.e. the transcription factors  that control the transcription of the responding genes. computational promoter analysis can shed light on the regulators layer of the network. based on the assumption that genes that exhibit similar expression pattern over multiple conditions are likely to be controlled by common regulators and, therefore, share common cis-regulatory elements in their promoter regions, several algorithms have been developed to identify over-represented cis-elements in promoters of co-expressed genes. such computational approaches successfully delineated transcriptional networks in organisms ranging from yeast to human  <cit> . expander provides such promoter analysis utility by integrating our prima  tool which is described in detail in  <cit> . in short, given target sets and a background set of promoters, prima performs statistical tests aimed at identifying transcription factors whose binding site signatures are significantly more prevalent in any of the target sets than in the background set. typically, sets of co-expressed genes identified using either cluster or bicluster analysis serve as target sets, and the entire collection of promoters of genes present on the microarray serves as the background set. in its stand-alone version, an execution of prima typically takes several hours to complete. to facilitate the computations of prima from within expander, we added a preprocessing phase, which decreased the running time to just a few minutes on a standard pc. the preprocessing phase is run by us on occasions of major updates to genome sequence assemblies of the supported organisms . it generates promoter-fingerprints file per organism. these fingerprints files map computationally-identified high scoring putative binding sites  of all tfs to the entire set of promoters in the organisms. in the version integrated in expander, prima loads the hits data from the fingerprints files rather than scanning promoter sequences de-novo on each run, thereby drastically reducing the running time. this improvement greatly enhanced the flexibility of prima, enabling its execution in an iterative way, in which results obtained by different clustering solutions can be routinely compared. expander provides genome-wide pre-processed promoter fingerprints files for the six organisms that are we currently support . the integration of prima into expander allows the user to both identify the major expression patterns in his/her data , and points to transcription factors that underlie the transcriptional alterations observed in the clusters .

demonstration of expander's capabilities
to demonstrate the utility of the expander package, we applied it to a very large dataset published recently by murray et al  <cit> . this study recorded expression profiles in several human cell lines exposed to various stressful conditions. the authors integrated these data with a dataset in which expression profiles were measured throughout the progression of the cell cycle  <cit> . the combined dataset contains expression data for  <dig>  probes measured over  <dig> conditions. the analysis of such complex dataset poses a daunting bioinformatics challenge. murray et al. used the cluster/treeview tool  <cit>  to hierarchically cluster this dataset, and by visual inspection of the resulting tree defined the main clusters in the data. a second "adoption step" was then applied, in which each main cluster adopted genes whose expression pattern resembled the cluster's mean pattern. overall,  <dig> clusters containing  <dig> distinct genes were reported. biological meaning was assigned to the clusters by inspection of their expression profiles and of the genes they contain. no promoter analysis was reported.

as we noted above, when analyzing large datasets, biclustering becomes more appropriate than clustering. therefore, we subjected this dataset to bicluster analysis using samba. we first replaced missing entries with  <dig>  and then scanned the dataset for probes whose expression was changed by at least 2-fold in at least  <dig> conditions. some 10% of the clones  passed this filtering. we applied samba to the union of these genes and the  <dig> genes analyzed by murray et al. the union contains  <dig> genes. samba identified  <dig> biclusters on this filtered dataset.  the identified biclusters reveal the major expression patterns that underlie this intricate dataset. next, we aimed to assign biclusters with putative functional meaning, and to identify major tfs that regulate the transcriptional responses captured by them. to this goal, we applied the tango and prima modules .

the purpose of this exercise is not to apply in-depth biological analysis of stress responses in human cells, but to demonstrate the strength and agility of expander in analysis of complex microarray datasets. therefore we only briefly summarize some of the major biclusters identified in the dataset, along with their putative biological roles and transcriptional regulators that were computationally discovered by expander. the major biclusters identified are listed in table  <dig> and some of them are presented in additional file  <dig>  in agreement with murray et al., we found that most of the transcriptional responses to stressful conditions were agent- and cell-type- specific . in addition, some biclusters correspond to more general stress responses that were induced by multiple agents and in different cell lines . as pointed by murray et al, analyzing together the stress data and the cell-cycle data allows the distinction between genes that respond directly to the stress agents and those whose change can be explained by differences in the fraction of cells in the different phases of the cell cycle due to activation of cell cycle checkpoints after exposure to damaging agents. indeed, bicluster # <dig> is enriched for dna replication genes, up-regulated in s-phase time points in the cell-cycle dataset, and down-regulated in fibroblasts exposed to either ddt or menadione, probably reflecting an arrest of these cells in early g <dig> or g <dig> phase. similarly, biclusters # <dig> and # <dig> show the down-regulation of mitotic genes in several cell lines and in response to various stress agents, probably reflecting the reduction in the fraction of cells undergoing mitosis in these stressed cell populations.

in several biclusters prima identified significant enrichment for binding site signatures of tfs that are known to control the respective biological processes . in other biclusters prima suggests novel links between tfs and stress responses .

some of expander's salient advantages are evident from the above analysis: the biclustering module, which is unique to expander among packages for microarray data analysis, allows systematic detection of the major expression patterns in highly complex datasets. biclusters provide higher resolution gene groups, some encompassing many conditions but most covering relatively small subsets and thus focusing on specific phenomena. functional enrichment and promoter analyses are done in a streamlined and integrated fashion, and so most of the expert's effort can be devoted to biological interpretation. last, analysis of microarray data requires experimentation with various filtering thresholds and algorithmic parameters settings; therefore it is of high importance that the analysis modules will require relatively short running time. expander was designed to meet this requirement. a full analysis iteration, which includes biclustering, functional enrichment and promoter analyses applied to the above massive dataset that we used as an example, takes some  <dig> mins on a standard pc.

comparison with other tools
several integrative packages for the analysis of gene expression data were are available, among them are inclusive  <cit> , expression-profiler, gepas  <cit> , tigr's multiple experiment viewer, and arraypipe  <cit> . expander has several advantages over extant packages. while some of the integrative packages are designed as web portals that provide links to independent programs, where, in some cases, the outputs are sent to the user by e-mail and not always in a format directly compatible with subsequent analysis steps, in expander the analysis flow is inherently streamlined and straightforward. in addition, expanders' strength lies in the advanced algorithms it uniquely provides: click for clustering, samba for biclustering, tango for identification of go enrichment, and prima for the identification of enriched tf binding site signatures. the synergism that stems from the integration of these algorithms into one package grants expander with very powerful analytical capabilities. another feature that distinguishes expander is its built-in support for genome-wide analysis of data obtained from six major research organisms.

CONCLUSIONS
designed as a 'one-stop shop' for gene expression data analysis, expander provides algorithms covering main analysis steps including  the initial process of normalization and filtering for removing biases and focusing downstream analysis on responding genes in the dataset;  clustering and biclustering to discover the main expression patterns in the data;  high-level functional enrichment analysis; and  promoter cis-element analysis to gain insights on the biological meaning of the identified expression patterns and to point to transcriptional regulators that underlie them. these integrated capabilities provided by expander and its built-in support of multiple organisms make it a very powerful tool for analysis of microarray data. although some of the analysis modules implemented in expander are based on sophisticated algorithms, their execution remains simple and intuitive.

we will routinely post on expander's website updated go annotation and promoter fingerprint files for all the supported organisms. expander's users will be notified of such updates. we will continue to maintain and expand expander to keep it as an integrative suite that provides state-of-the-art algorithms and visualization utilities for analysis of microarray data. we will also expand the group of organisms supported by the package according to the availability of appropriate information and data.

availability and requirements
• project name: expander

• project home page: 

• operating system: windows, unix

• programming language: java for the envelope and c for most of the algorithms.

• other requirements: java  <dig>  or higher

• license: free for non-commercial users.

• any restrictions to use by non-academics: license needed.

abbreviations
expander – expression analyzer and displayer

som – self organizing maps

click – cluster identification via connectivity kernels

samba – statistical-algorithmic method for bicluster analysis

tango – tool for analysis of go enrichments

prima – promoter integration in microarray analysis

go – gene ontology

pwm – position weight matrix

tf – transcription factor

authors' contributions
r. sharan developed click. at and r. sharan developed samba, and at with is improved and enhanced it. cl and re developed prima. at developed tango. am coded and integrated the complete package and the visualization methods. re and cl created the annotation and promoter files for the six species. re performed the use-case data analysis and wrote the manuscript with r. shamir. r. shamir, with help from ys and re, conceived, designed and led the project.

supplementary material
additional file 1
examples of  <dig> major biclusters identified on the human cells stress-response dataset. enriched go categories and tfbs signature found in these biclusters are summarized in table  <dig>  in each matrix, rows and columns correspond, respectively, to genes and conditions that participate in the bicluster. labels of the conditions follow this convention: the cell line is indicated first , followed by an indication for the stress agent . the last number in the label indicates the time point.

click here for file

 acknowledgements
this study was supported in parts by research a grant from the ministry of science and technology, israel. r. elkon is a joseph sassoon fellow. a. tanay is supported in part by a scholarship in complexity science from the yeshaia horvitz association. r. sharan is supported by an alon fellowship.
