BACKGROUND
genome assembly is essential for various downstream biological studies. de novo genome assembly, however, is still challenging mainly because of the presence of repeats in genomes  <cit> . it is even more daunting with next-generation-sequencing  data because ngs sequences, often called ngs reads, are shorter than traditional sanger reads  <cit> . with shorter reads, more dna segments become repeats. as a result, state-of-the-art assemblers turn ngs reads into a set of assembled sequences, called contigs, instead of one complete genome even for small microbes  <cit> . although contigs already provide useful information, a complete genome is still superior because of its accurate and comprehensive genetic information  <cit> .

sequencing technologies keep evolving toward completing genomes. these include paired-end and mate-pair technologies  <cit> , third generation sequencing  <cit> , and optical mapping  <cit> . all the advances generate "long distance" information or longer reads to tackle repeat problems in genome assembly. among these technologies, optical mapping is unique because its long distance information can go up to hundreds of kilobases  while other methods stay at the range of a few kb. unlike sequencing, optical mapping does not give bases. instead, it digests a long dna sequence into fragments of different lengths by a restriction enzyme, and collects the length information  <cit> . the resulting optical map allows one to align contigs to the map and infer their order on the genome . completing genomes is then easier with the ordered contigs, also called scaffolds, as a backbone. optical mapping was first proposed about  <dig> years ago  <cit> , but the commercial machine by opgen appeared only recently.

scaffolding contigs, however, is not equivalent to completing a genome. one still needs to close the gaps between contigs with nucleotide sequences. several gap closers have been proposed  <cit> . but they are not suitable for filling gaps in the scaffolds obtained via optical map because the gaps are often dozens of kb in size and can be more than a hundred kb long. for such big gaps, nagarajan et al. proposed using other contig sequences for gap closures   <cit> . given two neighboring contigs, finish searches the so-called contig graph  for a path of contigs that connects the two neighboring contigs. a contig graph describes all possible connections between contigs. as an example, from the contig graph in figure  <dig> one learns that the 3' end of the red contig is connected to the 3' end of contig a and 5' end of contig d. such connections suggest that the red contig is a repeat that appears twice in the genome and connects to two different sequences at its 3' end. when many repeats are present, contigs are usually interconnected in a complex way, forming a network of contigs, i.e., contig graph. this network reveals how one contig can be linked to another via other contigs. it is common that two or more paths of contigs exist between any two contigs. finish, however, does not pick the correct contig path for gap closure in some cases.

in this work, we present a computational program omacc, an optical-map-assisted contig connector. omacc is advantageous because it takes into account gap size carefully via rescaling optical map and applying length constraint on selecting the path of contigs for gap closure. in addition, it applies an advanced graph search algorithm to efficiently infer the correct number of repeat copies in the gap between two contigs. we apply omacc and finish on both simulated and real data sets. omacc achieves a >90% accuracy, higher than the <73% by finish, and more than doubles the contig n <dig> lengths. omacc also maintains a similar sensitivity as finish does. thus, omacc should benefit various downstream biological studies via accurately connecting contigs into a more complete genome with the assistance of optical map.

methods
data and assembly
the e. coli data came from the soma <dig>  <cit>  package, which contained contig graph information  and two synthetic optical maps by the restriction enzymes aflii and nhei. we parsed the "454contigs.ace" file to obtain all contig sequences, including those shorter than  <dig> bp. for myxosarcina sp., gi <dig>  we ran  <dig> sequencing and optical mapping on the genomic dnas. the  <dig> sequencing was performed on gs flx titanium at mission biotech, taiwan. the optical mapping was performed using the restriction enzyme aflii on the opgen argus system at yourgene biosciences, taiwan. the optical mapping data were assembled by mapsolver . all experiments were done following the manufacturers' protocols. we used newbler  <cit>   to assemble the  <dig> reads of gi <dig> into contigs and obtained the contig graph.

omacc workflow
omacc requires contig sequences, the contig graph, and the optical map as input. with these data, it runs in four steps . first, omacc aligns contigs to the optical map using soma <dig>  <cit>  and obtains the relative order of contigs on the map. second, it rescales the optical map via comparing the lengths of restriction fragments  on the map to the corresponding lengths on the contigs. in the third step, for each pair of neighboring contigs, omacc searches the contig graph for all possible paths of contigs connecting the two neighboring contigs. lastly, it determines the best contig path whose length is a closest match to the gap size. we describe each step in details below.

aligning contigs to optical map
for each contig, soma <dig> computationally recognizes all the restriction sites and cleaves the contig into an ordered set of rfs. it then matches the rf sizes on the contig to those on the map . soma <dig> outputs both unique and non-unique matches. by default, omacc closes the gaps between the uniquely aligned contigs because their relative positions on the map are of a higher confidence. omacc also offers an option to include non-uniquely aligned contigs.

rescaling optical map
during alignment, sometimes two or more rfs on a contig are matched to one rf on the optical map , forming a so-called rf block . these are often the results of non-perfect enzyme restrictions or sequencing and assembly errors. omacc selects the rf blocks with only one fragment on both the contig and the map. the length ratios were calculated  for deriving a rescaling factor. because length ratio often varies a lot for small rfs, omacc uses only the rfs at least  <dig> kb long for deriving the rescaling factor, which is defined as the mean of the length ratios.

searching contig graph
for each pair of neighboring contigs on the optical map, omacc uses a modified depth-first-search  algorithm  to search the contig graph for all possible paths of contigs between the two neighboring contigs. the modified dfs algorithm considers contig orientations, i.e., contig connections at 5' or 3' end. more importantly, it applies length constraints, uniqueness of contig alignment, and a loop-path recording method to avoid deep recursion. omacc defines the gap between two neighboring contigs as from the rightmost restriction site of the left contig to the leftmost site of the right contig . a gap size is the total length of the rfs within the gap. note that when a rf on the map is shorter than  <dig> kb, omacc sets the rf length as  <dig> kb. in our experiences, rfs shorter than  <dig> kb may disappear from the map. our modified dfs stops a search when the contig path length exceeds  <dig>  fold of the gap size. it also stops a search when a uniquely aligned contig is encountered along the path because it should appear only once on the genome. finally, it records a loop when encountering a contig that has been visited on the path and avoids searching the loop again. this avoids deep recursion and makes the algorithm more practical. the recorded loop paths will be used later for determining the number of repeat copies.

determining best contig path
omacc selects from all possible contig paths the one whose length is closest to the gap size. when a loop of contigs is detected along a contig path, the best number of loop copies resulting in a length closest to the gap size is calculated. when two or more loops of contigs are detected along a contig path, omacc obtains the best number of loop copies for each loop. however, it does not consider the combination of loops to avoid the exponentially increasing number of combinations. in addition, omacc requires the length difference between the two best contig paths to be greater than a cutoff  to ensure the validity of the best contig path. finally, when the best contig path length is within  <dig> kb from the gap size, omacc connects the two neighboring contigs using the sequences of the contigs on the best path.

RESULTS
ngs data, optical map, and assembly
in this work, we analyzed the data of two species, escherichia coli k <dig> and myxosarcina sp., gi <dig>  a cyanobacterium strain . the e. coli assembly contained  <dig> contigs, among which  <dig> were large . the total length and n <dig> length of the large contigs were  <dig> , <dig> bp and  <dig>  bp, respectively. the contig graph contained  <dig> connections between  <dig> contigs and all the contigs were in the same connected component. the optical map of e. coli comprised  <dig> rfs with a total length  <dig>  kb.

the  <dig> sequencing of gi <dig> resulted in  <dig>  reads with an average length  <dig> bp. we assembled the  <dig> reads into  <dig> contigs , among which  <dig> were large. the total length and n <dig> length of the large contigs were  <dig> , <dig> bp and  <dig>  bp, respectively. the contig graph contained  <dig> connections between  <dig> contigs. the majority,  <dig>  of the  <dig> contigs were in the same connected component. the optical map assembly resulted in six maps with a total map size  <dig>  kb, similar to the total contig length. the largest map was  <dig>  kb in length and comprised  <dig> fragments, and was circular. we studied only the largest map in this work.

order of e. coli contigs
before applying omacc and finish to the e. coli data, we aligned the e. coli contigs to its known reference using blat  <cit>   and determined the contig order as follows. on the reference genome, we first picked the longest contig alignment and excluded other alignments overlapping the longest one. this procedure was repeated for the next longest alignment until no alignment remained. because some short contigs were missed during alignment, we checked all pairs of neighboring contigs with a ≥ <dig> bp gap in between. we filled in these gaps if a short contig could be found matching the sequence at the gap. in addition, we checked the contigs that were not fully aligned and replaced it with another contig if that could be fully aligned to the position. the resulting alignments and order of contigs were shown in table s <dig>  additional file  <dig>  among the  <dig> contigs,  <dig> were aligned to the reference genome. most contigs were well aligned as only three had more than five unaligned base. the genome was covered almost completely . among the  <dig> contigs,  <dig> appeared twice or more times, indicating non-simple repeat structures. we used this contig order to evaluate the performance of e. coli contig connections.

connection of e. coli contigs
among the  <dig> large contigs of e. coli, soma <dig> aligned  <dig> uniquely to the optical map . since the e. coli genome is circular, there were  <dig> gaps between pairs of neighboring contigs. omacc closed  <dig>  gaps  while finish made  <dig>  gap closures . although finish closed eight more gaps, omacc achieved a higher accuracy. that is,  <dig> of the  <dig>  gaps closed by omacc were correct. in contrast, finish only correctly closed  <dig> of the  <dig>  gaps.

the last column indicates whether the best contig path matches the true contig order in table s <dig>  additional file  <dig> 

*true contig path not in the contig graph.

for the two mis-connections by omacc, "16+:83+:33-" and "1+:117+:23+", the correct contig paths were "16+:83-:34+:83+:33-" and "1+:23+", respectively . in these two cases, omacc made mistakes simply because the correct path did not exist in the contig graph. that is, the connections "16+:83-" and "1+:23+" were missing in the contig graph. in fact, the differences between gap size and contig path length of the two mis-connections were the two largest ones , suggesting their lower confidence.

among the nine mis-connections by finish, the true contig paths of seven cases did not exist in the contig graph . although these errors could be partly attributed to the non-perfect contig graph, omacc avoided five of the seven mis-connections using length constraints. in one of the two remaining cases, finish connected contigs "120+" and "105-" with "115-:43-:103-:39+:104+:113-:100-:73-" while the true contig path was "115-:43-:103-:39+:40+:114-:113-:100-:73-". in fact, omacc found both paths, but did not select one for output because the two paths differed by only five bp in length. this indicates a possibility of incorrect gap closure by finish when two plausible paths exit. for the last mis-connection, "22+:116-:2+", the true contig path was "22+:116-:68-:11-:53+:81-:116-:2+". this path contained a loop of contigs and was correctly obtained by omacc. via this example, we demonstrate the robustness of omacc in managing repeats for contig connections.

finish made two correct contig connections, "54-:101+:84-:87-:25-:122-:123-:118-:116-:32-" and "46+:101+:84-:87-:25-:122-:120+", that were not output by omacc. in fact, the two contig paths were found by omacc. however, omacc also detected two other paths "54-:101+:84-:94-:25-:122-:123-:118-:116-:32-" and "46+:101+:84-:94-:25-:122-:120+", which were similar to the correct paths except that contig "87-" was replaced by "94-". because the two contigs, "87-" and "94-", were equal in length, omacc did not decide on the correct path. these pieces of information were recorded in the intermediate output of omacc.

connections of gi <dig> contigs
among the  <dig> large gi <dig> contigs,  <dig> were aligned uniquely to the optical map . omacc and finish closed  <dig>  and  <dig>  of the gaps, respectively. because no reference genome was currently available, we checked the difference between gap size and contig path length. by design, all the contig connections by omacc were consistent, i.e., length difference less than  <dig> kb . in contrast, only  <dig> of the  <dig>  gaps closed by finish were consistent .

the last column indicates whether the contig path length is consistent with the gap size, i.e., difference in length ≤ <dig> kb. *gap closure unique to omacc. **best contig path different from those by finish.

*gap closure unique to finish. **best contig path different from those by omacc.

omacc and finish closed gaps for the same  <dig> pairs of neighboring contigs. however, the two methods made five different contig connections because of loops of contigs . for example, between contigs "26+" and "44+", the contig paths obtained by omacc and finish were "26+:199+:193-:199+:44+" and "26+:199+:44+", respectively, and differed by a loop. the contig path length with the loop  was closer to the rescaled gap size on the optical map  than the contig path length without the loop . the path with the loop was further supported by read coverage. the  <dig> read coverage of the contigs "26", "193", and "44" were  <dig> ,  <dig> , and  <dig> x, respectively . the contig "199" had a coverage  <dig> x, indicating two copies of "199" in the gi <dig> genome. thus, we demonstrate with real data that omacc is more robust in managing repeats.

including non-uniquely aligned contigs
on the e. coli data, omacc closed two more gaps, "60+:116+:85+" and "118-:116-:32-" , when including the nine non-uniquely aligned contigs . the true contig path of the first gap, "60+:85+", did not exist in the contig graph. consistently, its difference between gap size and contig path length was the second largest. the second contig connection was correct. when including non-uniquely aligned contigs, finish closed seven more gaps . however, five original contig connections disappeared because the non-uniquely aligned contigs disrupted the original neighboring contig pairs. for example, contigs "81+" and "52-" were inserted between "38+" and "76-" . this disruption should not be problematic if "81+" and "52-" were in the contig path from "38+" to "76-", which did not hold true. in this case and many similar ones, both contig connections before and after adding non-uniquely aligned contigs were incorrect. one disruption, contig "118-" inserted between "54-" and "32-", was acceptable because "118-" was on the contig path from "54-" to "32-". in this case, the contig connection remained correct. overall, adding non-uniquely aligned contigs did not alter much the performance of omacc and finish on the e. coli data.

*these contig connections are not disrupted by any non-uniquely aligned contig, but disappear when non-uniquely aligned contigs are included, indicating a bug in finish.

on gi <dig> data, omacc closed two more gaps while disrupted two contig connections . again, all the contig connections of these altered cases were consistent in length by design. finish closed three more gaps and disrupted three contig connections . all the new contig connections and two of the three disrupted ones were inconsistent in length. thus, adding the non-uniquely aligned contigs reduced one consistent contig connection by finish.

discussion
omacc and finish
the major differences between omacc and finish are that finish does not take into account length information in an optical map and it does not find all possible paths between contigs. we find that alternative contig paths and loops of contigs in gaps are not uncommon. because finish outputs the first path of contigs detected, the correct one may not be selected when alternative contig paths exist. in contrast, omacc filters the contig path whose path length is not consistent with the gap size, increasing the chance for the correct contig paths to be selected. note that if alternative contig paths still exist after filtering, omacc does not close the gap; instead it outputs the paths to an intermediate file. these pieces of information can be helpful if additional information is available. for example, between the two e. coli contigs "46+" and "120+", omacc finds two paths "101+:84-:87-:25-:122-" and "101+:84-:94-:25-:122-", identical in length and differed by one contig. on the reference genome, "94-" is on a path "82+:84-:94-:25-:122-" . if paired-end or mate-pair information supports only the proximity between "101+" and "87-", then one can close this gap correctly.

in terms of algorithm, omacc is also more comprehensive. finish avoids deep recursion by limiting the number of contigs  on the searched path. in contrast, omacc records all loop structures and avoids visiting them again. this allows omacc to deal with long paths of contigs, which appear often because of nested or tandem repeats. combining with length constraints, omacc in principle can return all possible combinations of repeat structures. but it does not do so because when two or more loops of contigs exist, alternative contig paths are often found, leading to unclosed gaps. in any case, as repeat problem is the bottleneck of complete genome assembly, omacc should move assembly closer toward complete than finish.

completeness of contig graph
on the e. coli data, omacc and finish made two and nine mis-connections, among which the true contig paths did not exist in the contig graph in two and seven cases, respectively. detailed investigations reveal three major reasons for the absence of the true contig paths. first, some true contig paths are not continuous on the genome. for example, the true contig path between "85+" and "48+" is "85+:116+:112-:18-:52+:95-:51+:11-:53+:125+:80+:111+:48+" . along this path, all the neighboring contigs connect without gaps  except "52+" and "95-", in-between which a gap of  <dig> bp exists. it is likely that this gap region is not sequenced at all. as a result, the two contigs "52+" and "95-" are not connected in the contig graph. strictly speaking, the path should not be called a true contig path because there should be a contig between "52+" and "95-", but the contig is missing. this scenario applies for the neighboring contigs "74+:30+", "93-:92+", and "52+:95-". second, some neighboring contigs connect well  or even overlap  on the genome , but their connections are not indicated in the contig graph. checking the assembly ace file, we found that no read can bridge the two neighboring contigs long enough for them to be connected by assembler. again, this indicates the depletion of  <dig> reads at the junctions between the contigs. the missing connections of "38-:99-", "1+:23+", "93-:110-", and "73-:119+" in the contig graph fall into this category. the above two types of missing connections may be avoided if the sequencing depth is increased. in the third scenario, we found that the contig connections indeed exist in the assembly ace file, but the soma <dig> script "get_graph.pl" failed to parse them out. when a contig is flanked by the same repeat, e.g., "83-:34+:83+", "get_graph.pl" only outputs one of the connections between the two contigs. this happens in two other cases, "92+:109+:92+" and "43+:121+:43-". thus, "get_graph.pl" should be used with caution. on newbler assembly, we thus recommend using the "454contiggraph.txt" file instead of parsing the contig graph from ace file when applying soma. note that omacc parses "454contiggraph.txt" directly for contig graph.

we further tested whether restoring these missing connections improved performance. indeed, adding the missing connections eliminated the two mis-connections made by omacc . that is, omacc became error-free with a comprehensive contig graph. in contrast, finish made four more connections, among which one was incorrect . the overall accuracy of finish still remained as 71%. in general, we expect an even higher accuracy by omacc, but not by finish, if the contig graph is improved.

rescaling optical map
rescaling optical map can alter contig connections by omacc. on the gi <dig> data, omacc determined the best contig path between "26+" and "44+" as "26+:199+:193-:199+:44+", which contained a loop of contigs. without rescaling, the gap size dropped from  <dig>  bp to  <dig>  bp, compared with which "26+:199+:44+" would be selected as the best contig path. supported by read coverage, there should be two copies of "199+" in the genome. this example shows the importance and validity of our map rescaling.

on the rescaled map, we observed a trend that optical map claims longer rfs when the rfs are shorter . in principle, we can apply length dependent rescaling factors. however, the not uncommon large deviations from the fitted curve lower the confidence on length inference. it will be ideal if a mechanic model can be proposed to explain the trend, and the deviations can be explained in the future. note that most gaps between pairs of neighboring contigs are longer than  <dig> kb . thus, our rescaled gap sizes should be accurate in most cases.

read coverage
it is possible to apply read coverage as another constraint on the number of repeats in the genome. when more than one repeat contig appears on a path, this may resolve the concern of exponentially increasing number of combinations. however, read coverage can fluctuate across genomes. for example, gc content has been known to affect read coverage  <cit> . although the effects of gc bias can be tuned, the fluctuations still seem too noisy to render accurate estimation of copy numbers.

including non-uniquely aligned contigs
although non-uniquely aligned contigs did not alter much the performance of omacc and finish on e. coli and gi <dig> data, we found them potentially harmful. in the e. coli case, seven of the nine non-uniquely aligned contigs  are not properly placed on the genome . in contrast, all the uniquely aligned contigs are correctly placed. although this may not be a good example since the e. coli optical map is synthetic and the data probably has been optimized, it is certain that uniquely aligned contigs are more likely to be placed correctly on the genome. thus, we decide to turn off this option by default. however, this option can be useful for omacc. for example, combining the gi <dig> results before and after including non-uniquely aligned contigs gave two more consistent contig connections. note that the newly closed gaps did not disrupt any original contig connections because they occurred at different loci on the genome . that is, the newly closed gaps were consistent with all original contig connections.

performance on illumina data
in addition to  <dig> data, we also studied the performance of omacc and finish on illumina data. for comparison, real illumina paired-end reads of e. coli k <dig> mg <dig> were obtained from ncbi sra  <cit>  . we used velvet  <cit>  to assemble the illumina data and optimized the assembly for fewer contigs and longer n <dig> length via scanning kmer values. the optimized assembly contained  <dig> large contigs  and the n <dig> length was  <dig>  bp, which were comparable to the statistics of newbler assembly of the e. coli's  <dig> data. on this dataset, however, omacc and finish could not close any gap between contigs. detailed investigation revealed that only seven contigs were uniquely aligned to the optical map , and all the seven contigs were considered to be on different scaffolds by soma <dig>  compared with the  <dig> contigs, we found many more small insertions or deletions in the illumina contigs, which could explain the worse alignments at least partly. this raises the possibility that the soma <dig> alignments may be improved if the small assembly errors can be reduced using illumina reads with fewer errors. for this concern, we simulated several illuimina pe libraries without any errors and repeated the analysis. still, omacc and finish could not close any gap on the perfect illumina data . thus, even though the  <dig> and illumina assemblies are comparable, optical map is much more useful for improving the  <dig> assembly than the illumina assembly of e. coli. note that it is still possible that optical map can improve illumina assembly if other assemblers, e.g., allpaths-lg, are used. however, we did not try those because many illumina assemblers do not output the contig graph information.

challenges on complex eukaryotic genomes
in principle, omacc should also benefit the finishing of complex eukaryotic genomes. however, there still exist practical challenges. first, soma <dig> alignment takes a much longer time when treating a large genome. for example, the soma <dig> alignment of the e. coli and gi <dig> contigs finished in a few minutes. however, for an ~11mb genome, the alignment took about  <dig> hours . for a genome of ~ <dig> mb, the alignment cannot be finished within a week. thus, efficient alignment of contigs to optical map is necessary for treating eukaryotic genomes. fortunately, this is possible because soma <dig> applies dynamic programming for alignments, which can be speed up using seed matching. second, the current version of soma <dig> treats only two maps at most. this seems problematic because complex eukaryotes often have more than two chromosomes. one solution is to separate chromosomes by pulse field gradient gel electrophoresis before doing optical maps, which has been shown effective  <cit> .

applicability
omacc is written in perl and requires soma <dig>  by default, omacc takes as input contig sequences in fasta format and a contig graph in newbler format . omacc also offers a script to convert the optical map file generated by opgen, currently the most popular optical mapping platform, into the required format. although omacc does not improve the velvet assembly of the e. coli, it may works for other species. thus, omacc still contains scripts to treat contigs and contig graph generated by velvet. finally, omacc holds a script to connect the contig sequences together. with this script, omacc raised the contig n <dig> length of e. coli and gi <dig> from  <dig>  bp to  <dig>  bp and from  <dig>  bp to  <dig>  bp, respectively.

CONCLUSIONS
toward completing a genome, optical map is helpful in scaffolding contigs. however, many scientists still have to conduct experiments and manually fill in the gaps between the scaffolded contigs. to reduce these costly efforts, we present a computational program omacc that closes the gaps between scaffolded contigs with a higher accuracy compared with a similar tool. as accuracy is of a great concern at the stage of completing genome, omacc is useful for finishing genomes. we expect omacc to benefit many scientists because genome assembly is the fundamental of many biological studies.

competing interests
the authors declare that they have no competing interests.

authors' contributions
ymc performed sequencing and optical mapping experiments, and wrote the paper. chy conducted data analysis. cch wrote the paper. tl conceived omacc, conducted analysis, and wrote the paper.

supplementary material
additional file 1
table s <dig>  alignments of the e. coli contigs on the reference genome  sorted by alignment start on the reference genome.

click here for file

 additional file 2
table s <dig>  order of e. coli contigs inferred from the soma <dig> alignments and the mapping status .

click here for file

 additional file 3
table s <dig>  order of gi <dig> contigs inferred from the soma <dig> alignments and the mapping status .

click here for file

 acknowledgements
we thank dr. arthur chun-chieh shih and dr. tien-hao chang for their careful readings and suggestions for our manuscript. this work is supported by national science council, taiwan .

declarations
the publication fee is supported by national science council, taiwan .

this article has been published as part of bmc systems biology volume  <dig> supplement  <dig>  2013: selected articles from the 24th international conference on genome informatics . the full contents of the supplement are available online at http://www.biomedcentral.com/bmcsystbiol/supplements/7/s <dig> 
