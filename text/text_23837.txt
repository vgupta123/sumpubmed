BACKGROUND
complex networks of molecular and genetic interactions are increasingly being studied for insights into biological mechanisms  <cit> . such studies include deciphering genome-wide protein-protein interactions  <cit> ], large-scale analysis and prediction of gene regulatory networks  <cit> , construction of metabolic pathways  <cit> , and development of synthetic genetic interaction networks  <cit> . here we collectively call these different networks molecular interaction graphs . the availability of migs has paved the way for the emergence of a new paradigm of biology in which networks of interactions are being analyzed for understanding of biological phenomena  <cit> . truly integrated analyses across multiple databases of different functionalities are still rare yet promising  <cit> . such advances underscore the need to develop information management frameworks for adequate modeling of graph-structured data and graph-oriented operations  <cit> . in the absence of an efficient information management system that allows biologists to query discrete and large databases simultaneously, the full potential for functional genomics resources will remain under-utilized.

here we present pathsys as an information integration system, which integrates migs and ontologies and show how its integration engine can be used to address biologically relevant questions. we describe the capabilities of the system based upon our current yeast data warehouse, where over  <dig>  curated and publicly contributed data sources for the budding yeast  are integrated. the system architecture, however, is designed as a general-purpose tool for application to potentially any biological model.

related work
the most noted pathways source kegg  <cit>  has an api and xml schema that is centered on enzymatic activities in cellular process. no general ontology for representation of cellular events or description of biological entities exists. the kegg ontology is organized around the concept of binary relation  <cit> , defining relationships between database objects .

karp et al.  <cit> , in biocyc, on the other hand define different types of molecules each with its own class, and consider different states of a molecule as different members within a class. reactions are defined to be independent entities, and distinct relations, called slots, link molecules to the reactions. each molecule may optionally be tagged with a cellular compartment. their ontology makes use of the "pathway" concept to define summary abstractions, used for defining data at varying levels of detail. however, like kegg, the biocyc system implements a specific data model for its own application.

the pathdb  <cit>  is a relational database developed for metabolic networks. here the central element is a biochem,  which is used to build other biochem objects. the transition is modelled by the explicit representation of a biochemical reaction whose substrates, products, mediators with its kinetic properties are recorded. the pathways database system  <cit>  models pathways as a directed hypergraph where nodes represent pathway elements . pathways support queries where operations such as shortest path, unions and intersections of paths, and node-neighbourhoods can be performed. however, since they do not present a query language, the exact query capability of the system is unclear. other works include those of ochs et al.  <cit> , who developed a metabolic map from a relational model of biochemical interactions, and of bhalla  <cit> , where a database of chemical reactions is mapped to a system of pathway graphs.

by contrast to kegg or biocyc, pathsys is based upon a generic graph model that can integrate any combination of graph data sources. consequently it represents a wider range of data types and relationships and can be extended by including any new data source or ontology. unlike any previous system, pathsys is a general-purpose graph warehouse with its own data definition and query language, augmented with biological data types, and hence can implement any specific graph-structured biological model. the benefit of having an integration platform such as pathsys is that it can be constructed over those databases that typically focus on specific interaction studies  <cit> , as well as those of process-specific databases such as biocyc and kegg focusing on specific biological processes.

RESULTS
the pathsys system
architecture
the system architecture of pathsys is shown in figure  <dig>  the system is designed around a warehouse that holds the data according to an internal schema , a number of specialized index structures that facilitate graph operations, and a data manager that keeps the data and external indices synchronized.

we consider two kinds of users. the first is a typical information systems person who creates a new integrated schema through the integration client, to add a new data source to an existing integrated schema or to define new queries to support a specific kind of analysis. the process of adding a new data source is as follows. the user first determines that the data schema is specified in a language accepted by pathsys . next, the schema is sent to pathsys, which validates it and stores in the schema library. the user then specifies the mapping between the schema element and the internal data model of pathsys described in figure  <dig>  finally, it is stored in the schema map library and the data are ingested into pathsys warehouse through the data importer much like the bulk loading operation in a standard dbms.

the second category of users is a biologist who enters pathsys through the visualization client, biologicalnetworks  <cit> . in one sense the visualization and graph manipulation capabilities of biologicalnetworks are comparable to that of existing visual information integration systems such as cytoscape  <cit>  and visant  <cit>  as well as commercially available tools such as genego  <cit>  and pathwayassist  <cit> . a user's query to the system is first analyzed by the user query manager and then decomposed into a combination of acyclic graph and regular graph queries, which are handled by their respective query engines . the system uses two graph query engines to execute specialized algorithms  <cit>  customized for each kind of graph. both engines access the stored data and indices through an api exposed by the warehouse manager that provides logical access to the stored data and indices.

in contrast to the visual integration systems such as cytoscape and visant, pathsys has a more comprehensive data model such that the semantic concepts of biological objects, molecular states, and interaction types are more closely mapped to the data elements as shown in figure  <dig>  the former visual integration systems have a client-end graph manipulation engine with some basic operations, and most data manipulation operations are performed through plug-in function modules. these, however, do not have a server-side graph and relational query engine that can evaluate and optimize arbitrary combinations of operations in a scalable fashion. while the biologicalnetworks interface does allow a subset of these operations, the full power of the pathsys engine is accessible through the query language described in a later section.

the pathsys data model
a number of systems such as cytoscape models migs as a ternary relation , where the edge-label specifies the nature of interaction. we find that model to be inadequate for the following reasons:

 nodes should not only represent proteins or genes, but should also designate their state while participating in an interaction.

 for complex molecules, one needs to distinguish between the interactions of the complex and those of the component molecules.

 mechanism should be available to add as many interaction properties as needed and capture more abstract types than is possible with simple labeled edge.

 one needs to represent the fact that one interaction can be regulated by the occurrence of other interactions, thus necessitating a edge that connects two  other edges.

in pathsys we distinguish three types of nodes: primary node, connector node and graph node.

primary node
all macromolecules , small molecules  and physical events  are under 'primary node' definition.

connector node
a connector node is designed to depict the properties of a relationship between a set of source nodes and a set of target nodes. all types of interactions  are represented by connector nodes. note that a connector node is not a simple edge label but a placeholder for "interaction type" and "interaction properties", as shown in figure  <dig>  the interactions as we stated are m:n relations. hence we can represent interactions such as chemical reactions with m reactants and n products. the reason for implementing edges as connector nodes with their own properties is that an integration system should be designed to be extensible to hold different information coming from multiple sources. if we have two sources describing a protein-dna interaction between a protein-node p and a "chromosome-fragment" node d, it is quite possible that these two sources will specify two different properties about this interaction. for example, one source could state that the interaction is that of "transcription factor binding" while another source might state that this interaction is conserved in other species. modeling the connectors as special nodes allows us to seamlessly scale up by adding as many node properties as needed as information on that edge grows. this could not be accomplished if interactions were modeled just as labeled edges. we illustrate the role of a connector node in terms of the expressive power of the system. consider the edge as a triple , where n <dig>  n <dig> are node constants and 'activates' is an edge name . our query system allows us to associate a variable x to the edge, thus representing it as x: . now the triple  is equivalent to the statement "n <dig> inhibits the activation of n <dig> by n1". graphically, this would be represented as an "edge" between the node n <dig> to the connector node between n <dig> and n <dig>  now we can construct queries like "find all proteins which have properties p <dig> and p <dig> and regulate the activation of n2". the answer will find n <dig> . similarly, we can represent "competing" interactions as x: , y: , , where the last clause is an "edge" between a pair of connector nodes.

graph node 
in biological systems molecules often form clusters and groups for performing tasks, behaving like a single state. in our system all complex objects  that might contain graphs are defined by graph nodes  . a hypernode may have interactions with single nodes or other hypernodes in the graph. moreover, members of the hypernode can independently participate in different processes. a hypernode may contain members from different cellular compartments. these features are incorporated in the notion of graph node. for visual representation of metanodes see additional file or supplemental materials at .

hypernodes play a crucial role in processing graph queries such as path and neighborhood finding, the algorithmic details of the use of hypernodes in query evaluation are provided in supplementary materials.

the internal data model of the graph  consists of a node type hierarchy n , an attribute category hierarchy a , bags of nodes n and edges e and a data source d.

for some node types, e.g. gene, one can specify rules to automatically create derived node types such as mrna and protein. the node type hierarchy n can be a directed acyclic graph because it admits multiple inheritance; for example, an nuclear transcription factor is both an nuclear-localized protein and a transcription factor protein.

we distinguish between the type of the attribute, which reflects its storage data type, which might be the tuple {int, int} for a specific case, from its semantic category which might be a "chromosomal interval". in our model, attributes are attached to node instances rather than node types. thus, if one source provides one set of attributes for a node and a second source provides a different set of attributes for the same node, we can combine both sets of attributes. this enables us, for example, to unite putative transcription factor binding sites from yeast promoter database from cold spring harbor labs and intergenic binding probability information from mit data  <cit>  on compatible chromosomal intervals.

to illustrate our graph model, consider the highly simplified fact that activation of ste <dig> to the phosphorylated state ste <dig> increases the rate of phosphorylation of another protein ste <dig> that is thereby activated . simultaneously, the molecular complex of ste <dig> and ste <dig> proteins also increases ste <dig> phosphorylation. activated ste <dig> ultimately inhibits the process of cell cycle by producing a g <dig> mitotic checkpoint arrest  <cit> . the nodes in this case are ste <dig>  ste <dig>  ste <dig>  ste <dig>  ste <dig> , ste <dig> of protein type and kinase subtype; two graph nodes: protein complex and cell cycle pathway; and connector nodes: two nodes of type phosphorylation, and one node of type cellular process. an edge incident to a connector node denotes that the source nodes participate in the process depicted by the connector node. an edge from a connector node denotes that the process represented by the connector node impacts the target nodes of the edge. the choice of using the connector node implies that the so-called edge label is now a property of the connector node. syntactic sugar in the query language can specify a query in terms of the edge label, and the system translates it to a query on the connection nodes. defining a few special edge types can connect two primary nodes without having to go through a connector node. we describe two such special edge types here. the first is a subgraph edge  – it goes from a graph type node to another graph type node where the latter is a subgraph of the former, which, for example, can create named subgraphs. a subgraph may be named  for semantic reasons; for instance, it represents a functional subgroup of interacting proteins within a larger interaction graph. alternately, a subgraph is named because it has a special property. for example, the system indexes all cliques with more than  <dig> members. these cliques are denoted as special graph nodes that are used during query processing. a second special edge is a member-of edge between a node n and a graph-typed node g that designates that n belongs to the graph represented by g.

graph attributes
a significant class of systems biology queries addresses graph-theoretic properties of source graphs as well as the integrated graph. pathsys maintains a set of graph attributes for each source graph to answer these aggregate queries. at present they include in and out degrees, betweenness centrality and clustering coefficient. centrality is defined as bk = ∑ij , where gij is the number of shortest paths from node i to node j, and gijk is the number of shortest path from i to j that pass through k. for node k, clustering coefficient is the ratio of the number of k's edges to the maximum number of possible edges between k's neighbors. these parameters, together with other measures, such as the graph diameters, are maintained and indexed using conventional index structures. for regions of the graph where neighboring nodes have high clustering coefficient, a "clustering coefficient" attribute is maintained by creating a system-defined graph node that represents the highly connected neighbors. inclusion of any number of such attributes is possible.

integrating graph sources
the task of integrating a new data source to an existing integrated graph schema consists of three steps – defining a new, unpopulated data source in the integrator, mapping the just-imported schema to nodes, node attributes, and edges of the integrated graph, and expressing conflict resolution policies.

source definition
an external data source can be a relational database schema, a tree-structured xml document, an rdf-styled triplet that describes an edge set of a graph, or a dag structured owl  <cit>  document. typically, a new ontology or a node/attribute type hierarchy, such as the phenotype classification tree from mips, is presented to the system using a tree  data, and a collection of node/edge instances and node properties are presented as relational data. to import this data into pathsys, we first define a new data source

   create data source yeast phenotype 

   format xml-rdf-owl;

where the newly imported data is nicknamed yeast phenotype. xml-rdf-owl is a format known to the system. for a relational data source, we would declare the format as sql. with the data source defined, now we specify a pathsys schema element for the new source.

   create tree phenotype tree 

   source yeast phenotype;

schema mapping
the task of schema mapping is to specify how an element of the imported source should be interpreted as an element of the internal schema of pathsys. in pathsys a tree is a special case of graph that is internally used for query evaluation. in a tree structure source, the owl schema populates the node type hierarchy in figure  <dig>  the mapping declarations are:

   import node type from yeast phenotype graph phenotype tree

   import relationship from yeast phenotypegraph phenotype tree

in relational mapping the source integration imports a relational schema  into the graph elements of the internal model . for each schema mapping, the wrapper generator automatically creates the code to populate the pathsys schema from the new data source.

once the new graph is integrated, the system computes all graph indices for the new incoming graph and updates indices for the whole integrated graph. detailed information on how the data are physically represented and the data definition language are provided in additional file or supplemental materials at .

conflict resolution
crucial to information integration process is resolution of data conflicts. reconciliation problems are detected by a set of conflict detection rules and are resolved by expert user intervention. here are some example rules:

 two genes with the different names have the same chromosomal location. for this, we have an automated reconciliation procedure assigning multiple names as synonyms to the same orf.

 two genes with the same name have different chromosomal location. problems like this are due to different assigning of gene boundaries, alternative splicing etc. and are resolved by scientists.

 several genes have names such that one name is contained in the other, e.g., 'ime1', 'ime1-tap' and 'ime1'. the first record refers to the gene ime <dig>  the second to a fragment of gene ime <dig> that is modified by fusion to a domain called tap, and the third to the protein encoded by ime <dig>  with the qualifier that the amino acid 'thr' at the 210-th position was modified. thus, the records seemingly referring to an item called 'ime1' really refer to objects that are not equal and must be resolved by an expert.

 two genes with different names and chromosomal locations have over 95% similar graph neighborhoods. products of such genes are likely to be part of the same protein complex and/or have physical interaction. cases like this can be the starting points for biological discovery to identify functionally related candidate genes.

querying graphs in pathsys
bionetsql, our query language for interaction networks, has the flavor of sql that can be queried on sets and bags of nodes, edges and their attributes, but additionally allows the returned values to be bags of paths, trees and graphs. further, the language allows path, tree and graph operations. while a complete description of the language and the query evaluation process is beyond the scope of this paper, we present a few features of the language through one example where we use graph operations in the body of the query and the return data type is a graph. "find networks of co-localized proteins that are parts of protein complex and are connected by either a 2-hybrid  edge or a coimmunoprecipitation  edge."

   select

   graph,

   e2)

   from

   yeastgraphdbg1

   where

   n:n and c:n and e:e

   and n.type << 'protein'

   and c.type = 'protein complex'

   and 

   and pathexpr = true

the query declares a variable c whose type is protein complex. the query returns a graph whose nodes n should be tuples with the attributes name and source , and whose edges e has a label and a source from which that edge is known. recall that the system will convert this to a query on a connector node. the << operation specifies that the type of the node is "under" "protein" in the node type hierarchy n. the last line reads as "n has an edge whose label has the value member, and this edge points to c", where c is declared above. note that we did not mention the relationship between nodes n and edges e, namely, an instance of the returned edge set e connects instances of the returned node set n. this constraint, expressed as n.edge = e, is implied by the construct of line  <dig>  where n and e are constrained to be parts of the same graph. for more features of the language and examples see supplemental material.

discussion
we developed pathsys to address the limitations of using information from single databases for biological discovery.

using the high throughput query abilities of pathsys and custom-designed queries for data retrieval , we constructed a global, high confidence network of protein-protein interaction in s. cerevisiae. any of the sub-networks or modules from this comprehensive network can further be extracted and extended to include dna-protein interactions and genetic interactions to gain more insights into transcriptional regulation of interacting proteins as demonstrated by the mapk and cell cycle queries outlined below. additional applications of network queries include expansion to low-confidence interactions for hypothesis generation, network topology studies, deriving regulatory networks for dynamic modeling etc.

construction of high confidence integrated network
a challenge in using high-throughput data is selecting high confidence information. we used the strategy of re-enforced edges to minimize error propagation. using a set of graph queries we performed the following. 1) protein-protein interactions from mips were filtered to remove high-throughput  interactions contributed by yeast two-hybrid  and co-immunoprecipitation  studies to construct mips_hc . 2) to get high confidence interactions  we took the union of two y2h data sets  <cit>  and its intersection with union of two co-ip data sets  <cit> , using matrix interpretation for co-ip data. intersection was taken to enhance credibility of true positives over false positives. 3) high confidence dna-protein network  was constructed from lee et al.  <cit>  data filtered for a p-value threshold of  <dig> . 4) genetic interactions from mips and tong et al.  <cit>  were added to the high confidence dna-protein interaction data and all interactions from this data set that were supported by at least one high throughput protein-protein interaction evidence were used to construct genetic_hc . 5) a high confidence, integrated interaction network  was derived by taking the union of mips_hc, htp_hc all and genetic hc . the strategy to either combine or intersect the various datasets was determined depending upon the propensity of false positives and false negatives in individual datasets, always aiming for maximum coverage across the genome. this network  is a potential first goal for a user interested in a more specific biological process. a more comprehensive network  incorporating mips complexes and computational predictions  <cit>  for reinforcement as well as retrieval of cell cycle network is provided in supplementary materials. in all these applications an important impact of the "information integration" is to place different forms of interactions  between proteins and their transcribing genes on the same combined graph. this does not necessarily mean that the physical interactions imply the genetic interaction or vice versa. it simply represents a comprehensive picture of what is known about the neighbourhood of a pair of genes, from which a scientist might develop a hypothesis based on the integrated information.

retrieving complex interaction network
to compare the organizational structure of primary protein interaction network to that of a higher order network of organized protein complexes , we derived a network of high confidence protein complexes from mips that are directly linked to each other via high-confidence protein-protein interactions . in this network with  <dig> nodes and  <dig> interactions, each node represents a protein complex identified by a complex_id label from mips and edges are inter-complex protein-protein interactions from high-confidence hmi network. we analyzed this network for betweenness centrality  to see which of these complexes are potential connection hubs providing shortest paths for communication between different complexes representing various functional modules. the motivation arises from the finding that high bc proteins are functionally significant  <cit> . here we address the centrality of protein complexes rather than individual proteins. complexes with fifteen highest bc values and their functional annotations are shown in table # <dig> in supplemental materials. as expected, majority of the high bc nodes include protein complexes forming cytoskeletal structural elements  as well as complexes involved in general regulatory mechanisms such as saga complex, srb mediator complex and rna polii complex.

integration generates new knowledge
an excellent benchmark against which to validate our approach is mapk pathways involved in pheromone response, filamentous growth, and maintenance cell wall integrity , one of the most thoroughly studied networks in yeast, conserved across all eukaryotes. the pathways are activated by g protein-coupled receptors and characterized by a core cascade of map kinases that activate each other through sequential binding and phosphorylation reactions.

two sub-networks were constructed from the mips hc as well as all_hc networks by selecting for genes whose names begin with ste* and their immediate neighbors. the sub-network derived from mips  shows  <dig> genes and  <dig> interactions where as the sub-network from all_hc  shows  <dig> genes and  <dig> interactions .

validation and insights from integration
to show the impact of mig integration in understanding biology, we present a comparison between our results and those obtained from kegg. first, we start with all_hc and extract a subnetwork of genes related to "pheromone response" . compared to kegg , our results include more members of heterotrimetric g protein complex, including the alpha, beta, and gamma subunits, the gdp-gtp exchange factor, and the gtpase-activating protein . the sst2p does not appear in kegg mapk pathways. our model also includes far1p, a protein necessary for pheromone-induced cell cycle arrest in g <dig>  <cit> , mpt5p, a protein necessary for recovery from cell cycle arrest  <cit> , and bem1p and sph1p, both of which are necessary for establishment of cell polarity during budding  <cit> . neither mpt5p, nor sph1p appears in the kegg mapk pathway. in addition to direct interaction between pheromone receptor  and heterotrimetric g protein complex , our result contains the interaction of akr1p, a known inhibitor of signaling in the pheromone pathway  <cit> , with the g protein complex, a fact missed in kegg mapk pathways for pheromone response.

in the result of a query for the filamentation pathway , key components of the ras gtpase are included, such as cdc25p , cyr1p , and srv2p, which enables the activation of adenylate cyclase by ras2p. several proteins with roles in actin filament organization, cell polarity establishment, bud growth, and gt-pase mediated signal transduction are shared with the cell wall integrity pathway, including bni1p, spa2p, bud6p and act1p. the model shows interactions between abp1p and both srv2p and act1p, consistent with the function of abp <dig> in tethering srv2p to cytoskeleton. the adenylate cyclase and associated proteins mentioned above, along with hsp82p and hsc82p, activate the camp pathway  <cit> , a pathway that acts in parallel with the mapk pathway to promote filamentation. hsp82p is a chaperon protein required for activation of the pheromone signaling pathway components  <cit> , and for the general response to amino acid starvation  <cit> . most of the facts of the filamentation pathway described above are missing in the kegg mapk filamentation pathway.

the mapk neighbourhood study shows that in spite of kegg's ontology, our data integration produces more relationships, and thus lends more scientific insight that are not obtainable otherwise.

recall that we started the above queries by first creating a high-confidence network . if we start with a less stringent network by including less strongly supported edges, we can use the system as a hypothesis generator. for this, we start with a query to extract the genetic_hc network  representing pairs of genes/proteins that have at least one evidence of protein-protein interaction and at least one evidence of either genetic or dna-protein interaction has  <dig> connected components of  <dig> or more nodes. the next query filters out the largest connected component , which contains  <dig> nodes, representing functionally related genes/proteins related to cytoskeletal element organization and coordination of cellular function: from the left hand side, protein folding pathway components  interact cytoskeletal element nucleating proteins  to nucleate and assemble  microtubule and actin filaments, which interface through spc <dig> with a spindle pole body component  during mitosis, which in turn interacts with calcium regulated signaling pathway through the calmodulin cmd <dig>  and thus regulates organelle movement  and cytokinesis  during cell division. from the right hand side, the rho-gtpase activating protein  bem <dig>  acting in a multi-protein complex with sit <dig>  sap <dig>  sap <dig>  and sap <dig>  transduces a signal from the cell wall to the cytoskeletal elements through arp <dig> and rgd <dig> , and thus to the specialized mapk signaling pathway  involved in cytoskeletal reorganization. we thus hypothesize that these interactions trigger cell wall repair and morphogenesis through chs <dig>  the derivation of this set of genes/proteins as a recognizable modular unit for cellular organization, without making any explicit query related to cytoskeletal elements, is the first of its kind and depended critically on the ability to integrate multiple databases.

statistical properties of integrated networks
another important area of current research is beginning to address how molecular networks having different functional significance but comprised of the same elements evolve.

addressing such questions is possible only when data sets with very different types of data are integrated. to be most useful integrated networks should be constructed by queries, and statistical tests conducted by queries through algorithms established over the database. as an example, we studied three high-confidence sub-networks  in yeast in a pair-wise manner. in these networks, a node is a gene or a protein, and the conditions specified are expressed as queries over the integrated network. in queries for each functional network above, we issued aggregate queries to compute the degree, the clustering coefficient and the betweenness centrality of the nodes respectively. we examined for each common node whether a particular topological property shows statistical inter-dependence between any two networks. for each comparison, we used two statistical tests for inter-dependence: a correlation test and a χ <dig> test to determine whether there are systematic rules of association in the three networks that govern the allowed interaction topologies of individual network members across the different functional networks. results of this study will appear elsewhere . note that it is possible to perform analysis like this automatically mainly due to the graph-based integration of molecular interaction from different sources, even though the individual data sources had very detailed data content.

CONCLUSIONS
the approach we have presented facilitates graph information integration from multiple sources and allows one to query and retrieve biologically interesting relations between genes and proteins, and obtain topological properties on integrated graphs for biological hypothesis testing. the system, implemented on top of oracle dbms, uses a novel graph query language and evaluation engine to process complex queries some of which are illustrated here. it is now possible to interrogate simultaneously and at several levels of detail complex interactomes to return networks of interactions with multiple semantic features.

we showed that our integration approach is able to provide biologically interesting information not possible with existing databases. for example although the pheromone response pathway is commonly depicted as a linear transmission of the mating signal from the membrane receptor to the nuclear effectors via a mapk cascade, the real picture of cellular processes and interactions is not that simple; the topology of interactions is considerably more complicated than a series of pairwise interactions. this is captured well through our mapk example query. for biological hypothesis generation, we have shown an example of how to retrieve networks of lower confidence but higher biological discovery potential. finally, multiple integrated networks can be mined simultaneously for graph-properties that encode systems-level information on biological entities, such as molecular-complex integration networks. thus, data integration and query analysis systems such as pathsys, should become integral tools for future efforts to build a model of a cell as a whole.

availability and requirements
project name: pathsys. the pathsys's client software, named biologicalnetworks, is available as a java web start application at  . download version is also available.

project home page:

 and



operating system: windows  <dig> and xp, linux.

programming language: java.

license: free for academic purposes.

other requirements: java  <dig>  or higher, not yet available for macos.

any restrictions to use by non-academics: contact the authors.

authors' contributions
mb, xq and ag contributed to system concept. mb implemented the system and performed major programming work. mb, xq, sg and alr contributed to data analysis. this work was coordinated by ag and anr.

supplementary material
additional file 2
word documented supplementary material containing description of the pathsys's client called biologicanetworks.

click here for file

 additional file 1
word documented supplementary material containing all additional information and complete description of the pathsys system.

click here for file

 acknowledgements
this work was funded by the national science foundation grants eia- <dig>  eia- <dig> to anr and ag. we also thank the national biomedical computation resource for support.
