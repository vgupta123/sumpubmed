BACKGROUND
technical advances and cost reduction in genome sequencing have allowed the completion of numerous genome sequencing projects based on whole-genome shotgun fragments using high-throughput sequencing data and the assembly of these data. the genome assembly process usually involves four main steps: reads assembly into contiguous sequences , linking of contigs into larger gap-containing sequences , gap closing to fill gaps generated by the scaffolding, and anchoring onto a genetic map to build the final pseudo-molecules. during the second step, end sequences of large fragments  or long reads are aligned to the contigs and the alignment information is used to link contigs into scaffolds. several commonly used scaffolding programs have been published in the last decade  <cit> . the efficiency of the scaffolding depends mainly on the diversity and fragment size of the input reads libraries and on the size and quality of the long reads. typically,  <dig> to 20 kb libraries are used consecutively during the scaffolding step, which allows repetitive regions of various sizes to be spanned  <cit> . however, during the alignment step, the presence of repeated sequences creates multiple assembly solutions, which generally causes ambiguities that scaffolder programs cannot untangle. this is often the case in large and complex genomes where repetitive elements are large and cover a large fraction of the genome  <cit> . to decrease the number of false links, scaffolder programs require a cutoff for the minimum number of read pairs  that validate a contigs junction; as a consequence, low-covered contigs are overlooked for scaffold building.

access to a genome map is a great advantage in obtaining a high-quality genome assembly  <cit> . genome maps can also help in detecting assembly errors by revealing discrepancies between the map and the assembly  <cit>  and can provide independent information for evaluating genome assembly quality. currently, several different types of genome maps can be produced to drive or improve assemblies including physical maps, optical maps, and genetic maps.

historically, physical maps have been used for large genome sequencing projects to order clones and perform clone-by-clone sequencing, which reduces the complexity of the assembly by sequencing single or pooled clones  <cit> . although, this strategy is time consuming and expensive, it remains the best option for high quality genome sequencing of large and complex  genomes such as the wheat genome  <cit> . recently, the whole genome profiling  approach was developed by keygene nv  to create an accurate sequence-based physical map starting from a bacterial artificial chromosome  library  <cit> . in the wgp method, pooled bac dna is digested by a restriction enzyme and after amplification, illumina technology is used to obtain sequence tags . wgp has been used successfully to build physical maps of several plant genomes such as those of wheat  <cit>  and tobacco  <cit> .

optical maps were used to assemble the amborella  <cit>  and goat genomes  <cit> . for amborella, this allowed the reordering and super-scaffolding of the draft assemblies and increased their contiguity . more recently, the release of the irys system from bionano genomics provided new opportunities to improve the quality and the contiguity of genome assemblies  <cit> .

genetic maps allow the construction of pseudo-molecules by anchoring the assembly on linkage groups that correspond to the chromosomes  <cit> . genetic map construction takes advantage of sequence-based genotyping   <cit> , genotyping-by-sequencing, and rad-seq libraries  <cit>  to obtain ultra-dense genetic linkage maps  <cit> . however, missing data or genotyping errors cause map inaccuracies  <cit> . moreover, the physical distance between markers can be very high in genomic regions where the recombination rate is low, which makes it difficult to anchor or orientate scaffolds located in those regions.

methods used to anchor whole-genome shotgun  assemblies on genomes have been investigated using several genetic maps to estimate assembly quality, as implemented in metamap  <cit> . the ability of these methods to produce pseudo-molecules also was tested, as reported in popseq  <cit>  and allmaps  <cit> . allmaps infers the sizes of gaps using the relation between the local recombination rate and the physical distance between two adjacent genetic markers; however, the estimations can be inconsistent considering the inaccuracy of the recombination rate.

hybrid strategies, combining wgs and genome map data, are likely to help increase the quality of the assembled genome sequence. with this in mind, we developed magus, a modular program that combines a genome map and wgs data. magus can anchor a draft assembly onto a genome map for two applications: quality assessment of a draft assembly by calculating novel metrics, and improvement of the contiguity of a draft assembly based on evidence provided by a genome map and high-throughput screening  data. here, we detail the magus pipeline and provide an example of its applications using the arabidopsis tair <dig> genome assembly.

methods
arabidopsis thaliana genome assembly
one 350-bp paired-end   and two  <dig> -kb mate-pair   illumina sequence libraries from a. thaliana were downloaded from the european nucleotide archive . a total of  <dig>  gb of data were obtained representing a coverage depth of 306x of pe and 91x of mp reads.

adapters and primers were removed from the reads, and low quality nucleotides were trimmed from both ends . reads were also trimmed from their second n to the end and reads longer than  <dig> nucleotides were kept. reads that mapped onto run quality control sequences  were removed. to decrease the number of sequencing errors present in the paired-end  reads, we applied musket v <dig>   <cit>  with a k-mer size of  <dig> ‘-k 26’. we ran kmergenie v <dig>   <cit>  on the pe reads to find the best k-mer size for the contig construction step and obtained an optimal k-mer size of 91 bp. soapdenovo <dig>  <cit>  was used to perform the genome assembly, a de bruijn graph was constructed with parameters ‘-k  <dig> –r’. as soapdenovo <dig> produces contigs over k + 1 bp, we selected informative contigs longer than 500 bp for further processing.

we used the pe and mp reads in five different scaffolding programs: soapdenovo <dig>  sspace  <cit> , sga  <cit> , besst  <cit> , and opera-lg  <cit> . we considered that the two main scaffolding parameters were the k-mer size used at the mapping step and the minimum number of link that validates a contig junction. to perform a scaffolding with the five scaffolders in a fair way, we chose the same parameters for the five scaffolders. we set the k-mer size to 31 bp which is more stringent than the bowtie and bwa mem default parameter, k =  <dig> and k =  <dig> respectively. we set the minimum number of link to five which corresponded to the default parameter of besst and sspace. for soapdenovo <dig>  we ran the map command with parameter ‘-k 31’, the scaf command with parameter ‘–l 500’, and set the minimum number of links in the configuration file as ‘pair_num_cutoff = 5’. for sspace, we manually set the bowtie k-mer size ‘-l 31’ and ran the program with parameter ‘-k 5’. for sga and besst, we first aligned the mp reads onto the contigs using bwa aln  <cit>  with parameter ‘-l 31’. for sga, the links file was created using the sga-bam2de command with parameters ‘-n  <dig> -m  <dig> --mina  <dig> –k 31’. the astat file was generated setting ‘–m 500’. the scaf file and the corresponding fasta file were both created with parameters ‘–m 500’. for besst, we chose the optimal k-mer size used for the contig assembly as ‘-k 91’ and ran the program with parameter ‘-e 5’. for each program, we selected the scaffolds that were over 2 kb in length. for opera-lg, we set the k-mer size for scaffolding with option ‘kmer = 91’. the minimum contig size required for the scaffolding step was fixed as 500 bp with the parameter ‘contig_size_threshold = 500’. finally, the number of links to validate a connection between two contigs was assigned with the parameter ‘cluster_threshold = 5’.

to evaluate the quality of each assembly, we used quast v <dig> , a popular program based on nucmer. in the presence of a trusted reference, quast aligns with nucmer the assembly to the provided reference and generates quality metrics. we observed several inconsistancies in the quast output. after discussions with the quast authors, the source code of quast was modified to avoid, as much as possible, the detection of misassemblies  that correspond to false positives. because nucmer generated spurious alignments lower than 5 kb in highly repetitive regions, the minimum alignment length in both parts of a misassembly was set to 5 kb. moreover, the gap or overlap size threshold length was increased to 5 kb to detect relocations. by default, quast reports misassemblies found within a scaffold only if at least 50 % of the scaffold is aligned. we modified this parameter to report all misassemblies regardless of the aligned fraction of a scaffold.

analysis of a. thaliana wgp data
we used the wgp data produced from the a. thaliana col- <dig> bac library by keygene , the method applied to generate this data is fully described by van oeveren et al.,  <cit> . wgp tags were ordered by an automated procedure that performed the following steps. first, fingerprinted bac-contig data were read with bac-contig and position information per bac. then, bacs were sorted on their left and right positions in the bac-contig and assigned a rank number . next, tag information from the wgp tag file was read and occurrences of tags per bac were listed. for a given bac-contig, a tag position was calculated as the mean value of bac rank numbers on which the tag occurred. if bac ranks were too far apart, the tag was identified as an outlier and put aside. the remaining tags were ranked according to their mean bac rank value, possibly with equal rank scores for equal average bac rank values.

map-guided scaffolding of genome using magus
first, the wgp tags were aligned to scaffolds using bwa aln  <cit>  and tags with multiple locations were filtered out of the bam file  <cit> . we used the resultant alignments to anchor the scaffolds on the genome map and created links between adjacent scaffolds . however, scaffolds located within other scaffolds, according to the anchoring information, were not considered. more formally, let a mapped tag t be defined by its bac contig c and its rank r in c. let a scaffold s, , …, ) be defined by the n-uplet of a  couple, where the tag tj aligns uniquely at position pj with pj ≤ pj +  <dig>  we define a map-link as a link between two adjacent scaffolds si and sj if cni=c1j and rni≤r1j.fig.  <dig> magus pipeline. a flowchart of the magus pipeline. b comparison of the quast and magus metrics. c application of magus to wgp data



the mp reads were aligned to the assembly using bwa mem  <cit>  and pairs whose mates mapped to different scaffolds were selected. multiple hits were recorded and mapping possibilities that confirmed a map-link were kept. we estimated the gap size between two adjacent scaffolds using the mp fragment size distribution. if multiple scaffold orientations were reported by the read mapping, the one supported by the highest number of read pairs was selected. more formally, let a mapping possibility of a read pair , ) be defined by its scaffold name, orientation, and location of both reads with scaf1 ≠ scaf <dig>  for each read pair, we calculate the gap size using a “naïve” approach based on the orientation of the two linked scaffolds inferred by each supporting pairs. the gap size estimation is described in , where μ is the mean of the mp library fragment size, len <dig> and len <dig> are the lengths of scaf <dig> and scaf <dig> respectively, r is the read length.  <dig> gap++=μ−pos1−pos2−2rgap+−=μ−pos1+r−len2−pos2gap−−=μ−len1−pos1−len2−pos2gap−+=μ−len1−pos1−pos2+r 

we validate the link if mingap≤1n∑gaporient <dig> orient <dig>  where n is the number of supporting pairs for the scaffolds link with the following orientation  and mingap is the minimum gap size allowed, this value is set to −200 bp. although, the estimated gap size proposed here has an upper bound of μ and may underestimate the real gap size as previously described by sahlin et al.,  <cit>  , the naive calculation can be used for map-link supported by one read pair which enable the validation of map-link in low covered regions. finally, all validated links were formatted in a.de file for the sga program to perform the final scaffolding, the .de contains the link information required by the sga scaffolder i.e. name and orientation of the scaffolds, gap size, number of read pairs supporting the link and the standard deviation of the gap size.

quality evaluation of genome assembly using magus
we generated new quality assembly metrics from the anchoring based on the commonly used n <dig> metric  and the na <dig> introduced by the quality assessment tool quast . for each scaffold, we defined collinear segments as the fraction of a given scaffold that was correctly organized, i.e., segments anchored with tags that have the same order in the genome map and in the scaffolds . for a given assembly, the lengths of all these segments were used to calculate the following metrics: an <dig> , ana <dig> , and ang <dig> . magus also generates anx, anax, and angx graphs  that is a plot of the metrics for x values ranging from  <dig> to 100 %.

implementation of magus
magus was implemented in a perl program based on five modules: wgp2map, which performs the anchoring and creates a magus-format map that contains the anchoring information; map2qc, which evaluates the quality of the assembly; map2link, which creates the map-links between scaffolds; pairs2links, which validates the map-links, orients the scaffolds, estimates the gap size, and creates a link.de file; and links2scaf, which runs the sga scaffolding programs and creates the final assembly.

RESULTS
arabidopsis genome assembly and quality evaluation using magus
pe reads were assembled into contigs with soapdenovo <dig> . then we generated five assemblies using five scaffolding programs  with pe and mp reads. the besst assembly had the highest contiguity  followed by opera-lg , sspace , soapdenovo <dig> , and sga . to evaluate the assembly quality, we aligned the scaffolds against the arabidopsis tair <dig> reference genome with nucmer  <cit>  using the quast pipeline  <cit>  . we found that although besst and opera-lg created scaffolds that had longer alignments, they also contained relatively more misassemblies than soapdenovo <dig>  sspace, and sga. based on the quast na <dig> and na <dig> metrics, we ranked the assemblies from the highest to lowest quality as besst, opera-lg, sspace, soapdenovo <dig>  and sga.

we used the wgp map to provide a reference-free approach that evaluates the quality of the five assemblies. we applied the wgp2map and map2qc modules of magus to calculate the length of all collinear segments  and generated anx values . considering the magus an <dig> and the an <dig> metrics, the ranking of the assemblies was the same as the ranking using the quast na <dig> and na <dig> metrics. the nax and anx values were strongly correlated  for the five assemblies , which allowed us to consider using the magus anx metrics to compare assembly quality.table  <dig> quast and magus quality metrics for the five assemblies. the r
 <dig> values indicate the pearson correlation coefficients between the quast nax and magus anx values


r
2
fig.  <dig> comparison of magus and quast quality metrics for the five assemblies. a magus anx plot. b quast nax plot. c correlation between anx and nax values



selecting the appropriate bioinformatics tools to perform genome de novo assembly is difficult and often depends on the genome complexity and on the sequencing technology used. the absence of a reference sequence leads automatically to the selection of the assembly that has the highest contiguity with no regards to the quality. in the present case, access to a genome map and its use with magus allowed the besst assembly to be selected as being the most continuous and also the most collinear to the wgp map.

arabidopsis genome map-guided scaffolding using magus
we used the five assemblies produced previously to perform map-guided scaffolding through the magus pipeline . for each assembly, we first created the map-links  and aligned the mp reads onto the scaffolds to validate the map-links by first determining the scaffolds orientation  and then by estimating the new gaps size . the validated map-links were used to build the final scaffolds . only a fraction of the map-links  was validated by the mp reads. this limitation was clearly due to the mp library size, and a higher fraction of map-links would certainly be validated using larger mp libraries. although only a fraction of the map-links were used for the scaffolding, the resulting assemblies showed increases in the n <dig> metrics ranging from  <dig>  to  <dig> -fold and increases in n <dig> from  <dig>  to  <dig> -fold . to evaluate the accuracy of this scaffolding approach, we aligned the five assemblies generated by magus onto the arabidopsis tair <dig> reference genome using quast. magus generated 86 % to 97 % correct links for the five assemblies and only a limited number of misassemblies . the quality of the scaffolds also was confirmed by elevated na <dig> and na <dig> values. the number of read pairs that validated a map-link had a very wide distribution, from  <dig> to over  <dig> read pairs , which showed that magus enabled the scaffolding of both low covered and highly covered regions that corresponded to repetitive regions.table  <dig> assembly metrics after magus scaffolding for the five assemblies

fig.  <dig> distribution of the number of mate-pairs that validates map-links for the five assemblies



effect of genome map errors on the magus performance
to investigate the different types and levels of errors present in the arabidopsis wgp map, we first aligned the wgp tags on the tair <dig> reference and selected the tags aligning at a single location. we defined the genomic positions of each bac contig on the chromosomes and compared the tag rank on the wgp map to their rank inferred from their position on the assembly. this allowed us to define two types of error. the first error type concerned tags that have a different rank on the assembly but that are located within its bac contig genomic location. the second error concerned tags that have a genomic position flanked by tags belonging to another bac contig. among the  <dig>  <dig> tags that mapped on tair <dig> at a single position,  <dig>  % had a wgp map rank that was compatible to their genomic position,  <dig>  % tags were misplaced within the same bac contig and  <dig>  % were placed in another bac contig.

to determine the effect of the two error types on the magus performance, we simulated artificial wgp maps that contained different error levels. we first generated an error-free wgp that contained  <dig> bac contigs and  <dig>  <dig> tags. within a bac contig, the occurrence of each rank was set randomly from a gamma distribution , the parameters were inferred from the rank occurrence observed in the arabidopsis wgp data. for the two error types, we created wgp maps by adding random errors on the error-free wgp map. errors were added with the following rates:  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig>  and  <dig> . for each error type and error rate value, five random maps were generated as replicates. a total of  <dig> simulated maps  were generated.

we ran the magus pipeline using the simulated maps, the assembly produced by the besst scaffolder and the mate-pair reads. the effect of the errors to the collinearity between the tair <dig> sequence and the simulated wgp maps is represented by the variation of the an <dig> values on fig. 4a. the an <dig> values decreased for error rates over  <dig>  which was expected and validates the construction of the simulated wgp maps. the n <dig> and n <dig> values of the magus scaffolds were impacted by the intra and inter-bac contig errors . we compared the n <dig> obtained for each error rate and found no significant differences between n <dig> for the intra-bac contig error rate of  <dig> ,  <dig>  and  <dig>  , the first significant changes in n <dig> was obtained for intra-bac contig error rate =  <dig>   and for intra-bac contig error rate =  <dig>  . the quality of the magus scaffolds was analysed using quast on the tair <dig> sequence reference. whereas the na <dig> values were not impacted by the errors added in the artificial maps , the na <dig> values were affected by both error types. the amount of misassemblies found in the scaffolds was higher for those generated from the map containing inter-bac contig errors than for those generated from the map containing intra-bac contig errors . we also noted that fewer misassemblies occurred when the error rate increases which can be explained by the fact that less junction were found to be validated by the mate-pair reads. the simulation of artificial wgp maps containing intra and inter–bac contig errors at different rates showed that the map-guided scaffolding accuracy is not affected by errors whereas the contiguity depends closely on the noise of the wgp map . as the wgp data of arabidopsis have an intra and inter-bac contig error rate under  <dig> , we can consider that the arabidopsis wgp dataset was clean enough to be efficiently used by magus for a guided scaffolding.fig.  <dig> effect of intra and inter-bac contig errors on magus scaffolds. the intra and inter-bac contig errors are named e <dig> and e <dig> respectively. a. effect of the map errors on the an <dig> values. b. effect of the map errors on the n <dig>  c. effect of the map errors on the n <dig>  d. effect of the map errors on the na <dig>  e. effect of the map errors on the na <dig>  f. effect of the map errors on misassemblies. grey areas are values between the upper and lower pointwise confidence interval around the mean, these values were obtained from a log regression



effect of the input assembly contiguity on the magus performance
to assess the impact of the assembly fragmentation on the magus performance, we generated eight arabidopsis genome assemblies using different depths of coverage . each read set was assembled using soapdenovo <dig> with the same parameters used in the previous section but for the k-mer size which was inferred by kmergenie. the contigs were scaffolded with the mp reads by sspacev <dig>  the resulting scaffolds were used by magus to perform the map-guided scaffolding by integrating the wgp map and the mp reads . for the assemblies based on the 10× and 20× read sets magus weakly improved the contiguity of the scaffolds with a n <dig> magus scaffolds/n <dig> scaffolds ratio . for assemblies based on read sets built with 50× or more, we observed an improvement of the n <dig> magus scaffolds/n <dig> scaffolds ratio .

CONCLUSIONS
the method presented here and implemented in magus enabled the evaluation of the quality and the scaffolding of a draft genome assembly using a physical map and hts data. its application to arabidopsis with a wgp map provides a first example of its efficiency in reconstructing a eukaryotic genome. evaluating the quality of a genome assembly is necessary in order to increase the accuracy of downstream analyses, such as genome annotation or comparative genomic analyses. de novo assembly projects often lack a genome reference and different ways to assess the assembly quality have been investigated  <cit>  using either the hts data used for the assembly or a genome map. the latter remains a very good independent source of information for this task. from this perspective, we developed the map2qc module of magus to provide assembly quality metrics. its application to five arabidopsis genome assemblies showed that the new quality metrics based on the correctly anchored segments of the assembly gave the same assembly ranking as if a reference genome was available.

existing scaffolder tools encounter issues when dealing with repeat-rich regions. the use of a map overcomes this problem if a contig or scaffold can be anchored onto the map. for large genomes, the sequencing depth of an mp library may result in low covered regions. users of scaffolding programs often set a minimum cut-off for read pairs required to validate a link between contigs, to avoid assembly errors. the use of a map to guide the assembly allows this cut-off to be lowered without loss of accuracy. the use of magus is not restricted to wgp maps, other genome map types can be integrated after formatting. for example, genetic maps can be provided as input, however the performance will greatly depend on the marker density.

availability of supporting data
arabidopsis illumina reads can be downloaded from the european nucleotide archive  with the following ids: erx <dig>  erx <dig>  erx <dig>  the wgp data and magus can be accessed through github at https://github.com/institut-de-genomique/magus.

additional file
additional file 1: the supporting data are included as a single additional file which contains figure s <dig>  table s <dig> and table s <dig>  



competing interests

the sbg and wgp™ technologies are protected by patents and patent applications owned by keygene nv . wgp™ is a trademark of keygene nv.

authors’ contributions

mam designed the method. mam, la and cd implemented the method. mam, la, cd, and jvo performed the bioinformatics analyses. evdv and jvo provided the wgp data. mam and jma wrote the manuscript. all authors read and approved the final manuscript.

this work was supported by genoscope , the commissariat à l’energie atomique et aux energies alternatives , france génomique , and keygene nv. we also acknowledge the three anonymous referees for providing comments that helped us to improve magus and the manuscript.
