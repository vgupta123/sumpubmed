BACKGROUND
the rapidly expanding wealth of phylogenetic information from across the tree of life offers unprecedented opportunities for large-scale evolutionary studies and for examining an array of biological questions in a phylogenetic context  <cit> . however, much of the published phylogenetic data is not easily accessible. therefore, the storage and efficient retrieval of phylogenetic data are important challenges for bioinformatics  <cit> . treebase is the largest relational database of published phylogenetic information. it stores more than  <dig>  trees that contain over  <dig>  taxa, the data matrices used to infer the trees, and additional meta-data, such as bibliographic information and details of the phylogenetic analyses  <cit> . though treebase is a valuable repository for phylogenetic data, it is often difficult to identify and access relevant phylogenetic data from within treebase. in this paper, we present phylofinder, a new phylogenetic tree search engine that greatly expands upon the current search features in treebase and thus can enhance the utility of treebase, or any phylogenetic database.

to utilize the existing phylogenetic data effiectively, we need tools that can quickly identify phylogenetic trees containing a specified taxon or set of taxa and that can compare a specified phylogenetic hypothesis to existing phylogenetic trees. the complexity of taxonomy presents a first major challenge for identifying and accessing phylogenetic data  <cit> . taxonomic names used in stored phylogenetic trees often are based on various inconsistent taxonomies  <cit> . furthermore, taxonomic classifications and names frequently change, and these changes may not be reflected in database trees. consequently, repositories such as treebase contain many species that are represented by multiple equivalent names. taxonomic queries are further complicated by misspellings or unique subspecies designations in stored trees, both of which are common in treebase  <cit> . many of these taxonomic issues have been addressed by tbmap, a database that maps names of taxa found in treebase to other taxonomic databases and clusters equivalent taxonomic names  <cit> . however, tbmap is not incorporated in treebase or in any other phylogenetic search engines.

the hierarchical nature of taxonomic classifications presents further challenges for accessing phylogenetic data. the leaves in stored phylogenetic trees may represent different taxonomic levels, such as families, genera, species, or subspecies. it should be possible for a tree database query to identify trees containing not only the specific taxon name used in the query, but also trees containing descendants or ancestors of the query taxon  <cit> . for example, a query using the plant family name "pinaceae" ideally would identify not only trees that contain the exact name "pinaceae" but also trees containing pinaceae genera such as "pinus" or "abies" or species such as "pinus thunbergii" or "abies alba". it also would be useful to identify trees containing direct ancestors  of the query taxon. thus, a query on the species name "pinus thunbergii" would identify trees that contain the genus name "pinus" or the family name "pinaceae" as leaves. currently, treebase does not directly utilize information from taxonomic classifications to allow the user to find trees containing ancestors or descendants of the query taxon  <cit> . instead, the user can find all the taxa matching a partial name taxon query. for example, querying "pinus@" or even "pinu@" in treebase will identify all trees containing "pinus" in their species name. however, querying using "pinaceae@" will not identify trees with "pinus" or "abies" species, because they do not contain "pinaceae" in the species name. alternately, the user can identify trees with related taxa through "tree surfing", in which the user identifies neighboring trees  of a specified tree. tree surfing can be time consuming, and it is difficult if not impossible for the user to determine if s/he has found all the trees containing the relevant taxa.

another important feature of an effective phylogenetic search engine is the ability to make phylogenetic queries, in which the user can assess a specified tree by comparing it to the trees in the database  <cit> . tree mining queries must first be able to identify all trees that contain or agree with a query tree, or the trees in the database in which the query tree is embedded  <cit>  . additionally, since there is often much disagreement among trees, it is very useful to be able to identify all the trees that are similar, but not necessarily identical, to a query tree. some tree mining features are implemented with treebase  <cit> .

in this paper, we introduce phylofinder, a search engine for phylogenetic databases that enhances the ability to search a tree database. phylofinder uses tbmap  <cit>  to address the problem of taxonomic inconsistency, thereby expanding the power of taxonomic queries by recognizing synonymous taxon names. it also offers alternate spelling suggestions for taxonomic queries that do not find a match in the tree database. phylofinder further increases the querying power by using the hierarchical structure of the ncbi taxonomy  <cit>  to search for trees containing descendants or ancestors of a query taxon, and it also enables a wide range of tree mining queries. phylofinder has a tree visualization tool that displays the query results, highlighting relevant taxa and branches, and provides hyperlinks to the ncbi taxonomy and tbmap websites. the implementation of phylofinder uses simple but powerful information retrieval techniques. these include the use of an inverted index that maps taxa to trees, which allows the system to filter out many trees that are irrelevant to a given query, and a representation of trees that allows fast least common ancestor queries directly on the database. we have tested phylofinder using trees from treebase  <cit> . however, phylofinder can, in principle, be used with any phylogenetic database.

implementation
before describing the implementation of phylofinder, we outline the features that it supports.

taxonomic queries and phylogenetic queries
phylofinder's web-based interface allows the user to make taxonomic and phylogenetic queries. taxonomic queries involve a single taxon or set of taxa. phylogenetic queries take as input a phylogenetic tree and attempt to locate trees in the database that match it in some specified way.

taxonomic queries
phylofinder supports three different types of taxonomic queries: contains, related, and pathlength.

 <dig>  contains: the input for this query is a set of taxon names, given as a comma-separated list. the output is a list of the tree ids of all trees from the database that, depending on the user's choice, contain all or any of the taxon names in the set. note: in our implementation of phylofinder using treebase trees, the output is a list of the treebase tree ids and corresponding study ids.

 <dig>  related: the input for this query is a taxon name. the search engine finds all trees in the database involving any taxon that, depending on the user's choice, is a descendant or a direct ancestor of the query taxon in the ncbi taxonomy tree. for example, if the query taxon is "birds", and the user chooses the descendant option, the related command will identify all the trees in the database that contain any bird taxa  <cit>  .

 <dig>  pathlength: the input for this query is a pair of taxon names. the output is a list of the tree ids of all trees containing the two species, along with the distance  between the two taxa in each tree. note: in our implementation of phylofinder using treebase trees, the output is a list of the treebase tree ids, the corresponding study ids, and the distance  between the two taxa in each tree.

phylogenetic queries
phylofinder supports two different types of phylogenetic queries: tree mining and tree similarity search. to describe these commands, we need some definitions.

definitions
let t be a phylogenetic tree, and a be a subset of the leaves of t. following standard terminology  <cit> , we write t to denote the minimal subtree of t that contains the leaves in a, and t|a to denote the tree obtained from t by suppressing all internal nodes that have only one child. an example is shown in figure  <dig> 

let q be a query tree and t be a candidate tree . let a denote the set of leaves of q. tree q is a pruned subtree of t if and only if either  t = q, or  there exists an edge in t which, when pruned, produces q as the cut-out  subtree. this is illustrated in figure  <dig>  tree q is an embedded subtree of t if and only if it is identical to t|a . informally, this means that q shows the same evolutionary relationships implied by t. note that if q is a pruned subtree of t, it must also be an embedded subtree, but the converse is not true . if q is an embedded subtree of t, the tree t is called the embedding of q in t. we say that tree q is refined by tree t  if the set of clusters of q is a subset of the set of clusters of t|a; i.e., t|a is a refinement of q. note that if q is an embedded subtree of t, it must also be refined by t, but not vice versa .

a similarity measure is a function that, given a query tree and a candidate tree returns a percentage score between  <dig> and 100%. this percentage is called a similarity score and it reflects how similar the query tree is to the candidate tree. phylofinder uses two similarity measures, one based on the robinson-foulds  distance  <cit>  and the other based on least common ancestors . if the lca-based score is 100%, the query tree is refined by the candidate tree, while if the rf similarity score is 100%, the query tree can be embedded in the candidate tree. these measures are described in the appendix.

commands
 <dig>  tree mining: the input is a query tree q in newick format. the output is a list of tree ids  of all trees that exhibit the query tree q in some way. there are three options for this command, which are listed below:

• pruned: the output is a set of trees that contain q as a pruned subtree.

• embedded: the output is a set of trees that have q as an embedded subtree. for the same query tree q, the result of embedded subtree mining will be a superset of the output returned by the pruned subtree mining command.

• refined: the output is all trees that refine q. the result will be a superset of the output set returned by the embedded subtree mining command on the same query tree q.

 <dig>  similarity: the input is a tree in newick format. the output is a list of the ids of all trees that share at least three taxa with the query tree, ranked according to their similarity scores. two options are provided, depending on whether the similarity score is computed with the rf-based or the lca-based measure. 

system architecture
the rdbms also stores the ncbi taxon names. in order to automatically translate between synonymous names for the same species, the rdbms stores a collection of taxon clusters, where each cluster contains a set of synonymous taxa. taxon clusters are generated using tbmap  <cit>  and the ncbi taxonomy database.

phylofinder uses an inverted index to achieve fast querying. in text retrieval and web mining, such indices are used as mappings from words to sets of documents that contain them  <cit> . phylofinder's inverted index treats taxon clusters as words and phylogenetic trees as documents .

the phylogenetic query processor is the kernel of the search engine. it provides functions to parse user commands, to perform taxonomic and phylogenetic queries, and to coordinate other modules. it relies heavily on the inverted index. the query processor uses the ncbi tree as a classification guide for species in queries such as the related command.

the spelling suggestion module checks spellings in the query and provides suggestions based on taxon names in treebase or in the ncbi taxonomy database. this is implemented using the gnu aspell  <cit>  c library, with some modifications in order to handle special alphabet characters  and compound words in taxon names.

the visualization module creates html files with image map, which show phylogenetic trees in a dendrogram format, highlight the embedded query tree or species, and provide link-outs for species in ncbi taxonomy database. while there are many available tree visualization tools  <cit> , we could not find one that could easily be adapted to highlight query results and provide outlinks. therefore, we developed a new tree visualization tool for phylofinder.

the client application is an administration tool that provides an interface to handle tree insertions and deletions . it also provides commands for updating the inverted index and performing low-level queries  for testing and debugging.

the web-based interface is an interactive web application that uses the ajax technique. it is written using the google web toolkit   <cit>  and the gwt window manager   <cit> .

the system maintains a log, where it records user queries and timestamps. the statistics can be used to analyze user needs and help optimize the search engine performance.

taxonomic name consistency
as mentioned above, the search engine relies on taxon clusters provided by tbmap  <cit>  to identify synonymous taxonomic names. ideally, tbmap and phylofinder should include the same set of taxon names as treebase. however, tbmap is based on a  <dig> snapshot of treebase  <cit> . thus, some new taxon names in treebase are not included in tbmap. whenever phylofinder encounters an inconsistency, it ignores the classification provided by tbmap, and relies instead on the ncbi taxonomy. we do this because the related query is based on the ncbi taxonomy, and using the ncbi taxonomy maximizes the utility of this feature. another complication is that tbmap uses four external taxonomic databases – itis  <cit> , ipni  <cit> , ubio  <cit>  and ncbi  <cit>  – among which there are conflicts. for example, "antennaria solitaria" and "antennaria monocephala" are treated as synonyms in ipni but not in ncbi . in such cases, phylofinder again uses the ncbi classification.

query processing
when a user submits a query from a web browser, the web cgi program parses the user query into query command  and query contents . the results for some queries  can be retrieved directly from the database. other queries  go through the query processor, which first identifies candidate trees using the inverted index and then performs further computations to get the final results . identifying the candidate trees using the inverted index allows us to filter a large fraction of the database trees from further consideration, significantly accelerating the query processing.

phylogenetic queries  are implemented by using lca queries to compare ancestor-descendant relationships in the query tree and in the database tree. figure  <dig> shows a simple example where the goal is to determine if query tree q can be embedded in database tree t. the two internal nodes x and y in q map to nodes m and m in t in the sense that the lcas of the descendants of x and y are m and m, respectively. q can be embedded in t since m and m have the same ancestor-descendant relationship in t as x and y have in q. the use of nested-set representation for trees in the rdbms allows lca queries to be directly computed by the rdbms.

hierarchical queries , which require a classification  guide  <cit> , are addressed by boolean operations on the inverted index. for example, when a user query asks for trees that contain "birds" using the related/descendant command, the search engine first looks for all bird species in the stored phylogenetic trees using the ncbi taxonomy tree to identify all bird species in the trees. it then retrieves the tree id lists corresponding to each bird species and returns their union .

initial setup
while not fully automated, phylofinder's setup is reasonably straightforward and can, in principle, be used on any given data set of phylogenetic trees. the first step in the setup is to assemble all the phylogenetic trees in newick format together in a file. a program then reads this file and converts the trees into the nested set representation used by phylofinder. the output of this program consists of several mysql tables. a second program then reads in these tables, and uses data from additional sources, like tbmap and ncbi, to create some additional mysql tables which help to improve query processing. all these mysql tables must then be loaded into the mysql database. once this is done, the main program can be run. the main program first reads some tables from the mysql database in order to create the inverted index, and then waits for commands from the client application. once the server is set up, the system is ready for use.

in practice, we have found that setting up the system for treebase data is more complicated. this is because treebase data does not always conform to the newick standard, and some of the trees contain errors. in addition, several of the trees contain special international characters. dealing with this effectively requires some manual work and it makes it difficult to automatically update the local copy of treebase.

RESULTS
we tested phylofinder using the trees from treebase  <cit> . phylofinder's interactive web interface is shown in figure  <dig>  at the top center of the main window is a query panel that contains widgets for choosing commands and entering queries. at the right is a navigation bar that includes help links and links to information on the phylofinder framework. a result panel is displayed when the search engine finds results matching a query. trees are displayed graphically when the user clicks the records in the result panel. phylogenetic query results are visualized by highlighting the set c of taxa that the result tree and the query tree have in common, as well as edges in the result tree that connect c. if a taxon in the result tree is in tbmap, its name is hyperlinked to tbmap, and if the taxon is in the ncbi taxonomy database, an ncbi taxon id number with a hyperlink to the ncbi taxonomy browser is appended to the taxon name.

figures  <dig> and  <dig>  illustrate various features of phylofinder. note the use of color by the visualization module. embedded query trees and taxon names are highlighted using various colors. brown indicates an exact match . for the related command, ancestors of the query taxon are highlighted in orange, and descendants are highlighted in green.

the system provides spelling suggestions – all from treebase and ncbi – for misspelled taxon names. for example, figure  <dig> shows the spelling suggestions offered by phylofinder for the query taxon "antilocapr americanus", which is neither in any of the treebase trees nor in the ncbi database. when a user chooses a name from the suggestion list, phylofinder automatically updates the user query and the ncbi taxonomy out-link.

phylofinder effectively uses the ncbi taxonomy and the tbmap database to translate between different names for the same species . for example, if one queries for trees that are similar to ")", phylofinder will look for trees that contain scientific names for human, pig, and dog. tbmap allows us to find many synonyms that would be missed by using only the ncbi names.

there are  <dig>  leaf taxa in the treebase trees used by phylofinder. by itself, ncbi allows us to map  <dig>  of these taxa to  <dig>  distinct ncbi taxonids, leaving  <dig>  isolated taxa, each of which is in its own cluster, for a total of  <dig>  clusters. in contrast, using tbmap we are able to map  <dig>  leaf taxa in treebase to ncbi taxa. the total number of taxon clusters is  <dig> , of which  <dig>  are mapped to ncbi taxa.

phylofinder uses the ncbi classification among species in user queries. figure  <dig> shows an example of a taxon query looking for trees that contain species in "birds". the descendants of "birds" are highlighted in dark green in the displayed tree.

for the same query term, phylofinder normally returns more trees than treebase even though phylofinder uses data from an older version of treebase . for example, for a query on "angiosperms", treebase returns  <dig> studies with  <dig> trees while phylofinder retrieves  <dig> studies and  <dig>  trees using the related command; when querying on "fungi", phylofinder returns  <dig> studies with  <dig>  trees, as compared to the  <dig> studies with  <dig> trees that are retrieved using treebase searching tools. this remarkable improvement over treebase is achieved due to a combination of the classification guide provided by the ncbi taxonomy tree, and taxon cluster information from tbmap.

the time required to process a query depends on network speed, server load, client computer performance, among other factors. in most of our test queries, the results were received within a matter of seconds. in particular, elapsed times and cpu times for a taxonomic query on "angiosperms" using the related command were  <dig> s and  <dig> s respectively; and for "fungi" the corresponding times were  <dig> s and  <dig> s respectively.

discussion
phylofinder enhances the utility of treebase by making it easier to assess and obtain the phylogenetic data contained within it. phylofinder adds several new taxonomic querying capabilities to treebase, including spelling suggestions, searches for synonymous taxonomic names, and the ability to identify trees with ancestors or descendants of the query taxon and to identify path lengths between taxa in the database trees. phylofinder also expands the power of phylogenetic queries, offering more precise options for identifying different types of subtrees and more metrics for identifying similar trees than treebase. additionally, phylofinder provides a tree visualization tool that highlights query taxa in an informative manner and gives useful outlinks to genbank and tbmap. furthermore, phylofinder provides nearly immediate results for most queries. still, phylofinder is a search engine, not a database, and is not meant to be a substitute for tree repositories such as treebase.

phylofinder is not limited to treebase and can be incorporated into any phylogenetic tree database. for example, we have incorporated phylofinder into the phylota browser for gene trees   <cit> . future development of phylofinder will include a desktop version in which users can input their own sets of phylogenetic trees. a number of other extensions to the search engine are also under development. these include handling unrooted trees, providing an interface for retrieving trees in newick format and more options for drawing trees, displaying details of the phylogenetic study in the query results, and ranking trees returned by the embedded subtree mining command . the search engine can also be linked to tools for building supertrees, which will allow users to assemble large phylogenies by combining phylogenetic trees with incomplete taxon overlap.

the usefulness of any phylogenetic search engine is limited by the amount of phylogenetic information it can search. although treebase is the largest relational database of published phylogenetic trees, few journals require that trees be submitted to treebase, and thus it contains only a small percentage of published phylogenetic trees. we hope that the development of more effective methods to access and utilize phylogenetic data will further motivate efforts to collect and store phylogenetic information.

CONCLUSIONS
while there has been great progress in understanding organismal relationships across the tree of life, this phylogenetic data is often not easily accessible to scientists. phylofinder enhances the utility of phylogenetic databases, by enabling scientists to identify and assess available phylogenetic data. the taxonomic search tools in phylofinder allow researchers to identify all trees containing taxa of interest without knowing the names of all taxa in the available trees, possible synonymous taxon names, or even the correct spelling of a taxon name. the phylogenetic search tools allow one to evaluate phylogenetic hypotheses by comparing it to existing phylogenies and identifying trees that agree with or are similar to the query tree. we have tested the utility of phylofinder using trees from treebase, the largest relational database of published phylogenetic information, but the search engine can be used with any other tree database.

availability and requirements
a phylofinder server for treebase trees is set up at iowa state university. the web client application is available at http://pilin.cs.iastate.edu/phylofinder/. all the features and functions described in this manuscript are freely accessible from the web site. a detailed diagram of the database scheme is available at: http://pilin.cs.iastate.edu/phylofinder/phylofinder-schema.pdf

system requirements
phylofinder's web application has been tested with microsoft internet explorer version  <dig>  and above, and with mozilla firefox version  <dig>  and above. some minor issues with the web interface may occur using apple safari.

authors' contributions
dc was the primary designer and implementer of phylofinder, and wrote major parts of the paper. jgb was involved in the system design and the writing of the manuscript. msb contributed in the initial stages of the system design, conceived the lca-based similarity measure used by the system, helped with the design and implementation of phylogenetic queries, and contributed to the writing of the paper. dfb contributed to the system design and the writing of the paper. all authors read and approved the final manuscript.

appendix: similarity measures
here we describe the two similarity measures used by our system. the first of these is based on the well-known robinson-foulds distance. the other uses the notion of a least common ancestor . the lca of a set of nodes in a tree is the most recent node in the tree whose descendants include all elements of the set.

in what follows, q denotes the query tree and t denotes the candidate  tree. we write n to denote the total number of taxa in tree t. c denotes the set of taxa that t and q share in common and n is the number of elements in c.

robinson-foulds similarity
if t and q have the same set of taxa, then the robinson-foulds distance between them is the number of clusters in t that do not appear in q plus the number of clusters in q that do not appear in t. in practice, one must take into account the fact that the taxon overlap c between t and q may be only partial. thus, we define the  similarity between t and q as

 similarityrf={0ifr=0nn××100%otherwise 

where rf is the robinson-foulds distance between t|c and q|c and r is the total number of non-trivial clusters in t|c and q|c.

lca-based similarity
this measure is based on an lca-based mapping from nodes in q to nodes in t. the mapping assigns to each node x in q a node m in t. this is done as follows. let x be the set of all leaf-descendants of x in q. then, m is the lca of set x in t. node x in q is said to be a conflicting node  if it has a sibling y such that m is an ancestor of  m in the candidate tree t, i.e. m and m  are the same node or two nodes that have an ancestor-descendant relationship in t but such that x and y are siblings in q. our search engine can find conflicting nodes rapidly because the storage mechanism it employs supports quick lca calculation and fast determination of the ancestor/descendant relationship between any two nodes.

the number of conflicting nodes can vary between  <dig> and n- <dig>  where n is the number of internal nodes in the query tree. if node x is conflicting, then x has a sibling y such that the leaf clusters defined by x and y do not induce disjoint clades in the candidate tree. thus, the percentage of conflicting nodes is a measure of the level of agreement between the query tree q with the candidate tree t.

to define a practical similarity measure, we must take into account the degree of overlap between the query tree q and the candidate tree t. this is done as follows. let q denote the number of internal nodes in q|c, and p denote the number of conflicting nodes in q|c with respect to tree t. observe that the number of conflicting nodes is at most q -  <dig>  then, the similarity score of query tree q to candidate tree t is given as follows.

 similaritylca={nn×100%ifq=1nn××100%otherwise 

here, the term 1−pq− <dig> captures the normalized value of the conflict in tree q|c with respect to tree t.

