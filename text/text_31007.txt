BACKGROUND
whole genome shotgun  sequencing projects have been receiving recent attention since it is a critical step in many applications. for example, wgs sequencing of fungi is a fundamental process in several agricultural, environmental, industrial and medical applications  <cit> . earlier wgs sequencing projects used sanger sequencing as a central methodology for assembly. with the advent of next- generation sequencing , recent wgs sequencing projects started to use ngs technologies such as illumina, roche  <dig>  etc. these ngs technologies produce a massive amount of reads due to the fact that they have shorter read lengths than their counterpart sanger sequencing. this massive amount of reads obviously demands high-end computational resources for assembly.

several assemblers  <cit>  have been developed to handle these vast volumes of data. these assemblers have different running time and memory requirements; and produce assembly results with varying quality. for a given dataset, choosing an appropriate assembler is a challenging task that entails the identification of a good trade-off between run time, memory and quality parameters of the assemblers. we can find plenty of recent research works that focus on comparing and evaluating different ngs assemblers in the literature. in  <cit> , the evaluation of assemblers considers some quality metrics , while  <cit>  additionally consider the running-time and memory metrics in their evaluation.

the assemblathon  <cit>  is a competitive assessment study that evaluates the assembling capabilities of assemblers based on more than  <dig> metrics. gage  <cit>  evaluates the leading assemblers by conducting several assembly experiments that use four different datasets generated using the illumina technique, three datasets with reference genomes and one dataset without a reference genome. gage-b  <cit>  evaluated different finished bacterial genomes based on a set of metrics introduced in gage and added new metrics to the evaluation. finotello et al.  <cit>  explain the pros and cons of assemblers on bacterial data extracted using the  <dig> pyrosequencing technique. in  <cit> , the authors developed an assessment tool that can be used for evaluating the assemblers either with or without reference genomes. the work in  <cit> , presents a comparative study for four assembly tools to guide the biologists using fungal data generated by the illumina platform.

to the best of our knowledge, there is no separate evaluation study to assess the performance of de novo assemblers for draft genomes in the literature. hence, this paper proposes a methodology to evaluate de novo assembler tools, to assess the capabilities of assemblers based on their computational and quality parameters for draft genomes. the proposed approach is applied on the output of seven assemblers against five fungal pathogens. it classifies the assemblers based on different metrics and identifies suitable assemblers that have a good trade-off between computational and quality performance.

the rest of this paper is organized as follows: the methodology to assess the assemblers and the ranking procedure used in this study is detailed, followed by results and finally, the results are discussed based on different criteria and draws the conclusions.

methods
evaluation method
in our study, we evaluate the assemblers based on their assembly performance parameters, which are divided into computational as well as quality parameters. the quality metrics that represent the quality of an assembler output generally include contiguity, consistency, and accuracy. since we do not have the reference genome, we propose an evaluation method for the quality of assemblies which depends on splitting the quality metrics into three groups:

 <dig>  group- <dig>  measures the level of goodness in the assemblies. this group is called the goodness group.

 <dig>  group- <dig>  measures the level of problems in the assemblies. this group is called the problems group.

 <dig>  group- <dig>  measures the conservation elements in the assemblies. this group is called the conservation group.

the above method gives a general prototype for assessing draft genomes. the conservation group metrics may vary based on the type of organism. we can select suitable conservation elements based on the type of organism by hinging on available literature such as  <cit> . in this work, we apply our method on fungal genomes. therefore, we use the core eukaryotic genes as elements for the conservation group, which can also be used for other higher eukaryotic organisms  <cit> .

after obtaining the computational and quality metrics, we rank the assemblers using a dense ranking technique. each assembler on a specific dataset takes computational and quality ranks. the rank for each metric is given based on relative performance such that the assembler with the best performance has a rank of  <dig>  the second best has a rank of  <dig> and so on.

since measuring the quality of assemblies depends on several metrics and groups we can generally calculate the quality rank for a specific assembler on a specific dataset as follows:

 <dig>  rank the assembler based on each metric individually using the above method.

 <dig>  for each metric mi, assign weight wi that measures the impact of this metric in its group.

 <dig>  calculate the group rank, rj, based on the metric ranks, ri, and metric weights wi of this group, using the equation: rj=∑i=1nwirin, where n is the number of metrics in this group and i =  <dig>   <dig> ...,n.

 <dig>  for each group gj, we assign weight wj that measures the impact of this group on the quality of assemblies.

 <dig>  calculate the quality rank, r, based on the group ranks, rj, and the group weights wj by the equation: r=∑j=1mwjrjm, where m is the number of groups and j =  <dig>   <dig> ...,m.

for simplicity, we assume that the g <dig> and g <dig> metrics and all groups have the same unit weight. we give each metric in g <dig> a weight proportional to the conservation level. the quality metrics are obtained for all studied assemblers and the current version of draft genome , which is downloaded from the wgs project page in ncbi . also, the quality metrics are measured at both the contigs and scaffolds levels. we use the quality rank for the contigs level as the quality rank of the assemblies.

evaluation metrics
for computational performance, we consider the running time and memory consumption metrics. the running time is the total time taken by the assembler to complete the assembly process for a given dataset, whereas memory consumption is the maximum amount of memory used during the entire execution period. time and memory measurements are taken using the linux utility commands time and top respectively. for quality performance, we consider the following metrics:

largest contig size: the length of the largest contig in an assembly.

n <dig> size: the length of the smallest contig x, which makes the ratio of cumulative length of contigs from this length x to largest contig size covers at least 50% of the bases of the assembly. an assembler with high n <dig> size value is obviously considered to be a high quality assembler.

l50: the number of contigs with length larger than or equal to n <dig> 

chaff bases percentage  <cit> : the percentage ratio of cumulative length of chaff contigs to cumulative length of all contigs in the assembly, where a chaff contig is a single contig with a length less than  <dig> bp  <cit> . the high percentage of chaff contigs length leads to problems in further genomic analysis  <cit> . hence, high quality assemblers should possess low chaff bases percentage.

number of n's: the total number of uncalled bases or gaps  in the assembly bases. mis-assemblies and gaps usually result from repeats as well as secondary structures, either in unrepresented gc-rich regions or in un-sequenced regions due to a low depth sequence coverage  <cit> . this value is high for low quality assemblies.

cegs percentages: the percentages of different core eukaryotic genes  mapped in the assemblies. in  <cit> , the authors identify  <dig> core eukaryotic genes , which are highly conserved, present in low copy numbers in higher eukaryotes, and can be used in describing the gene space. based on the average degree of conservation observed from each ceg, the work in  <cit>  divides the cegs into four groups . this work demonstrates that the percentage of cegs can be useful as a complement for the metrics of n <dig> size and x-fold coverage. in our study we consider the percentage of cegs in each group completely mapped from the assemblies as an independent metric. in other words, we consider four metrics csg1%, csg2%, csg3% and csg4%, which represent the percentage of cegs in the groups  <dig>   <dig>   <dig>  and  <dig>  respectively. refereeing to the values  to determine the conservation degree of each group, we assume that, the weights of metrics csg1%, csg2%, csg3% and csg4% are  <dig> ,  <dig> ,  <dig> , and  <dig>  respectively.

we split these metrics into our three groups as follows:

• the goodness group, g <dig>  contains the metrics , which reflect the assembly connectivity and the nature of the bulk of the assembly  <cit> .

• the problems group, g <dig>  contains the metrics chaff bases percentage and no. of n's.

• the conservation group, g <dig>  contains the metrics csg1%, csg2%, csg3% and csg4%, which represent in our case  conservation elements in the assemblies. these metrics can be used for the other higher eukaryotic genomes  <cit> .

all these quality metrics are measured using the quast assessment tool  <cit>  except cegs percentages, which are calculated using cegma tool  <cit> . the g <dig> metrics and no. of n's metric are calculated after removing any chaff contig in the assemblies.

fungal species data
to apply our assessment method, we have chosen five fungal pathogens from several wgs sequencing projects released in  <dig>  which are still in the draft genome level and are missing the reference genome   <cit> . additionally, all datasets are generated by the illumina hiseq  <dig> sequencing platform with paired-end layout and are downloaded from the dna data bank of japan . the read length for each data is  <dig> bp. since the size of 90% of available fungal data is less than  <dig> mb  <cit> , we have chosen four datasets with a size less than  <dig> mb and one dataset with a size above this threshold .

assemblers
for assembling the above chosen fungal datasets, we selected seven open source assemblers, which can handle the short reads produced by ngs platforms: abyss  <cit> , idba-ud  <cit> , minia  <cit> , soap  <cit> , spades  <cit> , sparse  <cit> , and velvet  <cit> . for minia, we extract the assembly only at the contigs level , whereas for all other assemblers, we extract the assemblies at both contigs and scaffolds levels. table  <dig> summarizes the details of assemblers that are used in this study including their websites, and versions.

experimental setup
all assembly experiments of the five datasets over the seven assemblers are conducted on a dual octa-core processors  machine with  <dig> gb ram. all experiments are conducted using a single core. additionally, we run the assembler tools several times  with different k-mer parameter and choose the optimal value for k that exhibits high quality of g <dig> and g <dig> metrics. since the idba-ud and spades assemblers are iterative in nature, the k-mer value that exhibits best quality metrics are implicitly chosen as an optimal k-mer from multiple k-mer values so we use the default k-mer values as defined in the tool.

RESULTS
in this study, we focus on assessing the parameters that influence the selection of de novo assembler for assembling a given dataset. for that, the assembling experiments are conducted and the computational as well as quality metrics are measured. in this section, we analyze and discuss these metrics for all the seven assemblers.

computational time performance
in general, the running time of a given dataset is a parameter in deciding the candidate assembler. hence, we measure the running time of seven assemblers over the five datasets . we rank the assemblers based on their running time to decide the candidate assemblers. the ranks for different datasets are shown in the table inside parenthesis. from table  <dig> minia has the best rank in three datasets which have larger estimated genome size. among the assemblers that have both contigs and scaffolds levels, velvet obtains the best rank in four datasets while spades obtains the worst rank in all datasets. the running time of minai and velvet for any dataset did not exceed 10% of the running time of spades for the same dataset.

parentheses contain the rank the assembler on the specific dataset. "---" indicates a corrupted assembly process.

memory consumption performance
the most critical parameter in selecting a candidate assembler tool is the memory needed by the tool during the assembly process, especially with the increase of data volumes in ngs platforms. an assembler demanding huge memory can be the reason for excluding it from the list of candidate assemblers. table  <dig> gives the measured maximum memory usage of all the seven assemblers over the five datasets. we rank the assemblers based on their memory consumption to decide the candidate assemblers. the rank for a given dataset is calculated and given inside parenthesis. from table  <dig> minia obtains the best rank among all datasets followed by sparse, while spades obtains the worst rank for all datasets. the maximum memory consumption of minia and sparse for any dataset did not exceed 1% and 6%, respectively, of the maximum memory consumption of spades for the same dataset. in the case of pst <dig> dataset, the spades assembler takes more than  <dig> gb .

parentheses contain the rank the assembler on the specific dataset. "---" indicates a corrupted assembly process.

assembling quality
the quality metrics of an assembler play an important role in the selection of candidate assembler. for a given dataset, various quality metrics of each assembler at the contigs as well as scaffolds level are demonstrated .

in , which gives the quality metrics of all assemblers for the bcdw <dig> dataset, the assemblers abyss, idba-ud, and spades have better goodness  metrics performance than the current draft genome  at the contigs level, while the assemblers abyss, idba-ud, and velvet have better g <dig> metrics performance than df_ <dig> at the scaffolds level . for example, the assemblies of abyss, idba-ud, and spades have superior n <dig> size ). based on the g <dig> metrics at the contigs level, abyss is the highest quality assembler, whereas minia is the lowest quality assembler for the bcdw <dig> dataset. similarly for g <dig> metrics, idba-ud is the highest quality assembler, whereas soap is the lowest quality assembler at the scaffolds level. furthermore, soap obtains consistent quality at both contigs as well as scaffolds levels. sparse generates the large percentage of chaff bases length at both contigs and scaffolds levels, which makes it a low quality assembler in g <dig> metrics. there are no gaps at contigs level for all assemblers except abyss. velvet, on the other hand, produced a huge number of gaps with respect to other assemblers at the scaffolds level. based on the g <dig> metrics, at the scaffolds level, idba-ud and spades are high quality assemblers, whereas abyss, sparse, and velvet become low quality assemblers from the problems  metrics point of view. at the contigs level, the abyss, idba-ud, and velvet assemblers have better conservation metrics  rank with respect to other assemblers followed by soap. while at the scaffolds level, soap has better g <dig> rank followed by spades. overall, spades and idba-ud have the best quality ranks at the contigs and scaffolds level, respectively .

in the assembly of the ucrnp <dig> dataset , abyss and idba-ud show higher g <dig> quality performance as compared to the current draft genome at both contigs and scaffolds levels . at the contigs level, abyss has superior n <dig> size ). based on the g <dig> metrics at the contigs level, abyss is a high quality assembler, whereas minia is a low quality assembler for the ucrnp <dig> dataset. in addition, idba-ud is the high quality assembler for g <dig> at the scaffolds level. furthermore, abyss, minia, and sparse  generate a huge percentage of chaff bases length 23%, 54%, and 66%, respectively, at both the contigs as well as scaffolds levels, which makes them as low quality assemblers from g <dig> metrics point of view. abyss, idba-ud, spades, and velvet produce a large numbers of gaps with respect to other assemblers at scaffolds level. based on g <dig> metrics, idba-ud is the high g <dig> quality assembler, while abyss and sparse are low g <dig> quality assemblers, at the contigs level. on the other hand, at the scaffolds level, soap proves to be the best g <dig> quality assembler whose output is as good as the draft genome, while abyss and sparse are low g <dig> quality assemblers. in addition, velvet proves to be the highest g <dig> quality assembler preserving the highest percentage of cegs in three conservation groups at both contigs as well as scaffolds levels. overall, idba-ud has the best quality rank at both the contigs and scaffolds levels .

in the assembly of ucrpa <dig> dataset , the g <dig> quality of abyss, idba-ud, and spades is better than the current draft genome  at the contigs level, while abyss, idba-ud, spades and velvet have better g <dig> metrics performance than the df_ <dig> at scaffolds level . based on the g <dig> metrics at contigs level, abyss is the high quality assembler, whereas minia is the low quality assembler for the ucrpa <dig> dataset. in contrast, at the scaffolds level, the idba-ud assembler shows best g <dig> metrics quality performance whereas soap demonstrates the worst g <dig> quality. the g <dig> metrics for spades are approximately equal in both the contigs and scaffolds levels. at the contigs level, abyss, idba-ud, and spades have superior n <dig> size ). by considering the g <dig> quality metrics, sparse generates the largest percentage of chaff bases length as compared to other assemblers at both the contigs and scaffolds levels. there are no gaps at the contigs level for all assemblers except abyss. velvet produces a huge number of gaps at the scaffolds level. regarding g <dig> quality metrics, the idba-ud, and spades are high quality assemblers at both contigs and scaffolds levels. spades and idba-ud have the best quality rank at the contigs and scaffolds levels, respectively .

in the assembly of ucrel <dig> dataset , abyss, idba-ud, and spades exhibit high quality g <dig> metrics performance, which is better than the performance of the current draft genome  at the contigs level, while abyss, idba-ud, spades and velvet have better g <dig> metrics performance than df_ <dig> at the scaffolds level . at the contigs level, the abyss assembler shows the best g <dig> quality metrics whereas, idba-ud shows best g <dig> quality metrics performance at the scaffolds level. at the contigs level, abyss, idba-ud, and spades demonstrate high n <dig> size ). by considering the g <dig> quality metrics, sparse generates the largest percentage of chaff bases length at both the contigs and scaffolds levels with respect to other assemblers. there are no gaps at the contigs level for all assemblers except abyss. velvet produces a huge number of gaps at the scaffolds level. regarding g <dig> quality metrics, the idba-ud is the best quality assembler at the contigs level while idba-ud and velvet are the best quality assemblers at the scaffolds level. idba-ud has the best quality rank at both the contigs and scaffolds levels .

in the assembly of pst <dig> dataset , idba-ud exhibits better g <dig> metrics performance than the other assemblers, which is lower quality than the current draft genome at the contigs level . at the scaffolds level, velvet produces the best g <dig> quality metrics for the assemblies of the pst <dig> dataset. there is no scaffold level submitted for the current draft genome for pst <dig> dataset. at the contigs level, abyss, idba-ud, and velvet demonstrate high n <dig> size ). considering g <dig> quality metrics, all assemblers except idba-ud and velvet generated large percentages of chaff bases length at the contigs level. abyss shows a less efficient chaff bases metric at the scaffolds level. abyss, soap and velvet produce a huge number of gaps at the scaffolds level. considering g <dig> quality metrics, abyss is the best quality assembler at the contigs level , while sparse is the best quality assembler at the scaffolds level. idba-ud has the best quality rank at both the contigs and scaffolds levels .

discussion and 
CONCLUSIONS
in this section, the studied assemblers are divided into classes based on the parameters obtained from the above experiments, which include running time, memory consumption, and quality. the k-means clustering method  <cit>  is employed to classify the assemblers into these classes using the spss  tool. next, we identify the assemblers that have a good trade-off between running time, memory consumption, and quality, and therefore can be selected as the candidate assemblers. finally, we preset the conclusions of our study.

considering the quality metrics in details, the behavior of g <dig> and g <dig> metrics is approximately similar to the overall quality ranking. for g <dig> metrics we note that, for all datasets, there are no gaps at the contigs level for all assemblers except abyss. however abyss and velvet produce a large number of gaps for most datasets at the scaffolds level, while sparse produces a large percentage of chaff bases. another observation is that though some assemblers may demonstrate similar overall level of preservation of the  <dig> cegs, they differ at the individual conservation group percentages of cegs . this suggests the idea of combining two or more different assemblies for improving the overall quality of the assemblies. idba-ud and spades  use multiple k-mers and capture the benefits of the large k-mer. in  <cit> , the authors proposed the usage of different tools in post-assembly to merge different assemblies in order to benefit from the advantages of each one.

in conclusion, this paper proposes a general methodology for assessment of de novo assemblers for draft genomes in terms of running time, memory consumption, and quality metrics. the quality metrics are split into three groups: g <dig> measures the goodness of the assemblies, g <dig> measures the problems of the assemblies, and g <dig> measures the conservation elements in the assemblies. we believe that, adding more conservation metrics from closely related species in g <dig> can enhance the assessment results. we apply our method for assessing seven open source de novo assemblers to assemble five fungal pathogens at draft genome level. based on our results, we partition the studied assemblers into different classes based on the criteria of time, memory, and quality. our results support the idea of making the assemblies of wgs sequencing projects using different assemblers to exploit the strengths of each one by combining the corresponding assemblies. abyss and idba-ud offer a good trade-off between running time, memory, and quality among the studied assemblers for the studied datasets. the rapidly growing number of wgs sequencing projects can take advantage of our results and proposed methodology to choose an appropriate assembler for best quality assemblies based on available computational resources. the results of this research work are freely available at http://confluence.qu.edu.qa/display/download/bioinf.

competing interests
the authors declare that they have no competing interests.

authors' contributions
mma and qmm designed the method; mma ran the experiments; mma, qmm and p.b analyzed the results; mma wrote the draft of the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
main spreadsheet containing all results. details of quality metrics and its ranks for every assembly for each dataset. first, second, third, fourth, and fifth sheets contain tables s <dig>  s <dig>  s <dig>  s <dig>  and s <dig> which are represent a detailed results of bcdw <dig>  ucrnp <dig>  ucrpa <dig>  ucrel <dig>  and pst <dig> datasets, respectively.

click here for file

 additional file 2
basic plots for all results. basic plots for all assemblies of all datasets generated using quast tool  <cit> . for each dataset we have six plots grouped in a single figure: a <dig>  a <dig>  b <dig>  b <dig>  c <dig> and c <dig> such that: a <dig> and a <dig> represent the cumulative length plots at contigs and scaffolds levels, respectively, b <dig> and b <dig> represent the gc-content plots at contigs and scaffolds levels, respectively, c <dig> and c <dig> represent the nx plots for different × values at contigs and scaffolds levels, respectively. figures s <dig>  s <dig>  s <dig>  s <dig>  and s <dig> represent the basic plots for bcdw <dig>  ucrnp <dig>  ucrpa <dig>  ucrel <dig>  and pst <dig> datasets, respectively.

click here for file

 acknowledgements
this publication was made possible by nprp grant no. 4-1454-1- <dig> from the qatar national research fund . the statements made herein are solely the responsibility of the authors.

the authors would like to thank the anonymous referees for their helpful comments.

declarations
the publication costs for this article were funded by the qatar national research fund grant  awarded to qmm.

this article has been published as part of bmc genomics volume  <dig> supplement  <dig>  2014: thirteenth international conference on bioinformatics : computational biology. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcgenomics/supplements/15/s <dig> 
