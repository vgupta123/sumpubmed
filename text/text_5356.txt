BACKGROUND
to understand the biological phenomena behind systems biology data, researchers often need to combine different kinds of experimental results, creating complex data sets of integrated information. systems biology efforts are directed towards acquisition of high-throughput-omics data and then analysis and modeling on a whole organism scale. modeling provides the ability to infer functions and make predictions based on network perturbations  <cit> . among the most commonly modeled biological data are protein-protein interactions. proteins do not act alone, but in concert with other proteins and mapping their interactions can provide insight into the molecular pathways in which they participate  <cit> . protein-protein interaction maps also indicate a high level of molecular connectivity between different biological pathways thus highlighting the inter-related functions of many biological processes  <cit> . when approaches to perturb network interactions are utilized, such as genetic interactions using rnainterference, null-mutant alleles, or the two in combination, even greater knowledge on the identity of key network sites can be obtained  <cit> . integration of protein-protein interaction data with transcriptomics data has also been successfully applied to differentiate permanent and transient cellular complexes  <cit> . thus, the ability to construct, analyze, and interpret integrated-omics data is fundamental to understanding gene function in systems biology. to help researchers to visualize and interpret genome scale biology data, we present a novel visualization method that is based on real-time three-dimensional force-directed graphs that can be used in discovery of novel knowledge from the data.

graphs are a natural choice for visualizing genome scale data, as many connections in biology can be thought as networks, for example interactions between genes or gene products, signal transduction, metabolic pathways, functional interactions and evolutionary relationships. in addition, virtually any kind of experimental data that describes correlations or distances between measurements can be presented as a graph. commonly graphs consist of nodes and edges, where nodes present key elements  and edges present connections between the elements. visual appearance such as size, color and shape of nodes and edges can be changed to describe different features. with force-directed graphs, nodes and edges are not only assigned with visual attributes, but also with physical ones, such as mass and electric charge for nodes, and spring-constant for edges. the graph is then simulated as a physical model, where nodes interact with each other based on their physical attributes while edges constrain their movement. this allows for intuitive visualization of connection strength by the distance between the connected nodes. force-directed graphs also provide a simple and effective solution to the complex challenge of arranging nodes and edges in a formation that is easily interpreted by a human. different force-directed layouts have been successfully applied to visualizing biological data in the past  <cit> .

to demonstrate the concept of real-time force directed three-dimensional graphs in visualization of integrated systems biology data and to provide researchers with practical software tool, we have developed a software program called forg3d.

implementation
forg3d is an open source software program for visualization of network data using three-dimensional force-directed graphs. forg3d can be used as a standalone editor to create the graphs manually, or rather users can write their own scripts or plug-ins that automate creation of the graphs from their own data. this can be easily achieved by using the simple text-file format forg3d uses to save the graphs. forg3d was developed using c++ and uses the opengl graphics application programming interface . this approach allows forg3d to take full advantage of the processing capabilities of the modern 3d graphics accelerators, providing high-quality performance for real-time three-dimensional network visualization.

with the graph editor, users can change the different properties of nodes and edges . the visual properties include visible name, size, color, visibility, node shape and edge direction, while physical properties include mass and charge for the nodes and spring constant for the edges. both nodes and edges can also be assigned with custom textual properties that can be seen when the object is selected. these can be used to provide users with more information about the object in question, for example if the nodes in the graph would represent proteins and edges would represent protein-protein interactions, the custom node properties could contain protein identifier and description of its function while edge custom properties could contain information about the type of the interaction. users also have control over different options affecting the overall visual appearance, such as colors and different 3d rendering settings.

users can also change global simulation options, including electric, spring and damping constants and select a suitable numerical integration method used for the physical simulation. when the simulation is started, the nodes and edges start moving based on their set physical properties and the selected integration method. edges are assigned with spring constant, and nodes with mass and electric constant. spring simulation is based on hooke's law of elasticity where spring constant determines the strength of the connection, and nodes are simulated as electrically charged particles that repel each other determined by their assigned mass and electric constant, based on coulomb's law.

based on coulomb's law the electrostatic force between two charged particles  can be presented as fc=keq1q2r <dig>  and the restoring force of a spring based on hooke's law can be presented as fh = -kskr, where r is the distance between two charged particles, q <dig> and q <dig> are the charges of the particles, k is the spring constant of the connecting spring , ke and ks are the global electric and spring constants. when the simulation is running, the particles try to reach a distance where these forces are in equilibrium, this distance can be presented as r=keq1q2âˆ’ksk <dig>  the global damping constant representing friction is subtracted from the forces using the following formula f = -kv, where -k is the global damping constant and v is the velocity. the simulation works by taking the forces based on coulomb's and hooke's law and assigning them to newton's law of motion f = ma. newton's laws allow one to relate the position, velocity and acceleration of the simulated nodes as a differential equation for the unknown position of the node as a function of time. numerical integration can therefore be used to solve the differential equation and advance the simulation by a small time step .

the available numerical integration methods in forg3d are euler method, midpoint method and the fourth-order runge-kutta method  <cit> . the purpose of the numerical integration methods is to compute location of the nodes in the simulation, given the affecting forces. the methods differ in their time-complexity and precision, euler method being the fastest and most inaccurate and therefore suitable for real-time simulation of large graphs with thousands of nodes and edges, while runge-kutta is the most complex and accurate method and can be used when higher precision is needed or when large amount of computing power is available. besides performance, the selection of the numerical integration method also affects the precision and stability of the physical simulation, runge-kutta method resulting in most stable graphs where the behavior of the graph is closest to an ideal physical model and will most likely achieve a stable equilibrium of the modeled forces. with small networks, the resulting networks should be close to identical no matter what numerical integration method is used. when the size of the network, and therefore number of the affecting forces, increases, the simpler numerical integration methods may result in networks that do not accurately estimate the affecting forces, producing a network that is not able to reach an equilibrium. this can result in a network where the distances between the nodes do not accurately represent the connection strengths between the nodes, and therefore users should always use the most complex numerical integration method that the size of the network and the amount of computing power allows them to use.

when the simulation is running, these forces are applied to the nodes and edges, pulling the nodes closer or pushing them further apart from each other. the movement of the simulated nodes and edges can be observed in real time while these forces are applied to the simulation iteratively and the movement will continue until equilibrium is reached or the simulation is stopped. users can interact with the simulation by selecting and dragging nodes around. this also allows for an interactive explorative approach where the connection strength between different nodes can easily be observed by simply dragging a node around and watching how this will affect the connecting nodes. users can also change their viewpoint by rotating the graphs and zooming in and out, making it easier to inspect specific parts of the graph from different angles and distances.

the graph editor can be used to create the graphs and adjust all the available options, but forg3d is most useful when automated scripts are used to create the graphs from the experimental data. the text-file format forg3d uses is simple and easy to use. an example of creating two nodes and a connecting edge is presented here:

node:protein1

tag:p53_human

size:1

node:protein2

tag:mdm2_human

size:1

edge:protein <dig>  protein2

width:1

global simulation parameters and all the other visual and physical properties of nodes and edges can be changed with similar notation.

RESULTS
to evaluate the performance of forg3d, simulated network graphs of different sizes were created and tested on various modern desktop and laptop computer setups . performance of physical simulation needed to arrange the network is based on the available cpu processing power and it was observed that a network consisting of thousands of nodes and edges could be simulated in real time. the performance of exploring the network, while the simulation is not running, is based on the opengl 3d rendering performance and it was observed that networks with tens of thousands of nodes and edges could be explored while the simulation is stopped. therefore if the user wants to interact in real time with the network while running the simulation, the size of the network is limited to thousands of nodes and edges, but if there is no need for interaction while running the simulation, the user can have a network of tens of thousands of nodes and edges, run the simulation that arranges the network and then explore it afterwards. how well the network can be interpreted largely depends on the structure of the network and physical properties assigned to nodes and edges, however the ability to rotate and zoom the network in three-dimensions makes it easier for the user to focus on selected parts of the network.

forg3d implements many favorable features that are generally assigned to force-directed graphs  <cit> . these include good quality of graphs with very good aesthetic properties, such as few edge crossings, uniform node distribution and good symmetry. the behavior of the graph is also intuitive and easy to predict, as it is based on physical properties of common objects such as springs. the graph is also very interactive as the user can observe how the network evolves and arranges itself into a stable configuration, and furthermore, the user can interact with this process by moving parts of the graph or adding or removing nodes/edges. doing the visualization in three-dimensions further adds to the aesthetic properties and intuitiveness of the graph as it increases the resemblance to actual real-life objects.

a case study: visualization of integrated caenorhabditis elegans data
to demonstrate visualization of actual high throughput genome scale data, a network graph that integrates genomic data from different sources was created. interaction data was obtained from a study describing genetic interactions in caenorhabditis elegans  <cit>  and combined with a whole genome c. elegans gene expression microarray data set obtained from a transgenic parkinson's disease model compared to wild type worms  <cit> , which was combined with functional gene annotation information from wormbase  <cit> . in the resulting network , nodes represent genes and edges represent interactions between the genes.

the interaction data produced by byrne et al.  <cit>  was based on generation of synthetic genetic interactions. query null mutant strains were subjected to rna interference  screens and animals that displayed synthetic phenotypes from rnai were scored as having interaction between the query gene  and the rnai target . in total  <dig> interactions were obtained. similarly, genetic interactions based on rna interference were defined by lehner et al. by testing  <dig>  gene pairs that found approximately  <dig> interactions  <cit> . interaction strength was defined by degree of genetic interaction, as scored by the observer with a range of 0â€“ <dig> 

when constructing the network, genes that were not available in both interaction and expression data sets were filtered out. this resulted in a network of  <dig> nodes and  <dig> edges. measured fold change in gene expression between two samples was used to set the color of the nodes, green indicating up regulation, red indicating down regulation and yellow indicating no change between samples. the size of the nodes was set to represent the number of gene ontology classes assigned to the genes in question, indicating how well the function of the genes are known and how functionally active they are. width and spring constant of the edges represent interaction strength, resulting in a network where strongly interacting genes are located closer to each other and connected with wider edges. the color of the edges was set to represent the screening method that was used to evaluate the interaction between the genes, blue for byrne et al  <cit> . and violet for lehner et al.  <cit> . because of the large number of the edges, only the edges with strongest interactions  were set to visible. custom textual properties were added to nodes and edges, representing additional information about the genes and interactions, such as gene annotations from wormbase. it was observed that network of this size could be simulated in real-time using any of the available physical simulation models, and therefore the most accurate model, runge-kutta, was used.

from the visualization, most of the functionally well-known genes, indicated by large node size, are located in the center of the network, which can be explained by the fact that well described genes also are likely to have the strongest known interactions with other genes. this suggests further more detailed study of strongly regulated genes that are either 1) well known and at the outer limits of the network, indicating multiple traceable regulatory pathways or 2) not-well known and in the center of the network, indicating possible novel functional findings. it could also be seen that many genes that were up-regulated  were also directly or indirectly networked with down-regulated genes . an example is the gene aph- <dig> , which was connected to daf- <dig>  through glp- <dig>  this suggests complex changes in gene expression during parkinson's disease. the real strength of forg3d in biological interpretation may be in its ability to find key network relationships by taking advantage of its ability to move nodes and explore the dynamic movement of edges that drag other nodes along . observing the formation and movement speed of different parts of the network is a useful tool for exploring complex interactions in the data. using such an approach, it was found that one of the network hubs, daf- <dig>  was connected to many of the up- and down-regulated genes directly, and then these genes were further connected to others, thus indicating the importance of the daf- <dig> protein in regulating gene expression in this disease model. daf- <dig> is a insulin-like receptor that is now known to be a key protein in aging  <cit> .

the example network is distributed with the forg3d software package.

discussion
forg3d can be used to create intuitive visually pleasant network graphs that users can interact with. networks can be manually created and altered, and the simple text-file format makes automatic creation of networks an easy task. as forg3d is open source software, users can also alter it or integrate it with their own software programs. the types of systems biology data that can be visualized using forg3d includes, but is not limited to, interactions between genes or gene products, signaling transduction, metabolic pathways, functional interactions and evolutionary relationships. in addition, virtually any kind of experimental data that describes correlations or distances between measurements can be visualized using forg3d.

forg3d can also complement other bioinformatics tools by allowing the user to build their own integrated data networks and testing hypothesis by interactively exploring effects of movements of one or more nodes  <cit> .

network visualization is a popular topic in the systems biology field, and there are several existing network visualization tools available  <cit> . what separates forg3d from the existing tools is a combination of advanced features, including 1) forg3d is not limited to any specific type of network data, such as protein-protein interactions  <cit>  or specific species  <cit> , but can be used to visualize any kind of data that can be presented as a network, 2) networks visualized in forg3d can be fully customized, including changing the visual appearance of individual nodes and edges, as well the physical properties, which allows for detailed visualization of complex network properties, 3) forg3d contains a network editor that can be used to easily create and edit networks, 4) users can explore and interact with the network in real-time, drag, edit, delete and add nodes/edges and see how this affects the formation of the network, and therefore observe underlying network connections that would not be detectable from a static network that does not allow real-time interaction  <cit> , 5) forg3d is open-source, making it possible for users to alter the tool to suit their needs or to integrate it as a part of their own software or analysis pipelines. advantages of forg3d also includes that the implementation, which is based on c++ and opengl, takes full advantage of the processing capabilities of the modern 3d graphics accelerator hardware and therefore provides significant performance enhancement over many existing tools and plug-ins for network visualization.

when compared to one of the leaders in the field of biological network analysis and visualization, cytoscape  <cit> , forg3d offers the following major advantages: 1) support for 3d visualization of networks. 2d network renderings are flat and with the currently large amounts of systems biology data, the important features of the network can be obscured. while cytoscape offers several different 2d layout renderings to help visualize the data, the 3d feature of forg3d lets the user visualize the data from any possible number of x-y-z perspectives without the need to rearrange the network, and without loss of network structure or information. moreover, the user may choose the perspective to view the network. this allows flexibility in viewing the network and ability to explore the data in 3d without a preconceived notion or hypothesis. this is of particular advantage in dense networks with multiple hubs and large numbers of nodes, where the complexity of the interactions makes it vital to view the data from as many perspectives as possible. 2) forg3d allows users to observe and interact with the network in real-time, unlike cytoscape that does not include such functionality. the importance of this feature is the ability to perform "perturbations" to the network and visualize the effects of such actions on the network. thus, the user may drag a hub in the network, in one direction and see how the other connected nodes or hubs react, or whether new interactions can be observed. real-time adding, removing or dragging key nodes away from the network and observing the effects on other nodes and network formation based on physical properties such as spring constant values is available in forg3d. this provides a type of "virtual network perturbation analysis" for the user and is equivalent to testing a hypothesis on the importance of single nodes in the network. such an application would be critical in evaluating the relevance of knocking out or down genes in pathological processes, and modeling the outcome on other interacting genes and their protein products. to do this in cytoscape would require such a large number of node, parameter, and rendering iterations, that it would not be feasible under currently available genome scale data sets. 3) combining the features of 3d visualization, and perturbing the network, and then visualizing results on other nodes in the network in real-time provides a powerful tool to generate and tests hypothesis on the structure of the network. such a tool is envisaged to help in interpreting systems biology data and their interactions, but may finally provide the insights needed to model correctly complex biology processes. taken together, forg3d is not intended to replace cytoscape as a visualization tool for systems biology, but to complement and extend the tools already available for systems biology researchers. the field is very demanding, and forg3d provides an additional tool that is intuitive, visual, and easy to manipulate.

there are various other 3d visualization tools available, such as interviewer  <cit> , geomi  <cit>  and biolayout express 3d  <cit> . one of the advantages of forg3d when compared to interviewer and other similar biological visualization tools is that forg3d is not limited to any one kind of data , but can be used to visualize any kind of network data. other advantages over interviewer, geomi and biolayout express 3d include the ability to assign custom properties  to individual nodes and edges, making it easier to visualize and interpret large amounts of information. the main advantage over these tools though is the ability to interact with the network in real-time, as well as the c++ and opengl based implementation that takes full advantage of the 3d acceleration hardware, resulting in enhanced performance that cannot be achieved using java based tools such as cytoscape, interviewer, geomi or biolayout express 3d.

limitations of forg3d include that it does not provide support for many of the existing file formats for network data, but this limitation can be overcome by using the flexible text file format used by forg3d. as forg3d is open source, users can also add support to file and data formats of their own choosing. forg3d works best with networks containing up to thousands of nodes and edges, larger networks are likely to be too computing intensive to be explored in real-time and interpretation of them can be difficult.

the forg3d project website contains additional information about forg3d, such as details regarding the background and implementation of the software, file format specifications, detailed user manual, and downloads including source code for the software.

CONCLUSIONS
to demonstrate the concept of real-time force directed three-dimensional graphs in visualization of integrated genome scale data and to provide researchers with a practical bioinformatics tool, we have developed open source software called forg3d, that can be used to visualize complex genome scale data using real-time three-dimensional force directed graphs. forg3d was then used to visualize a network that integrates different types of genomics data from various sources. we believe that forg3d is a useful tool for visualizing and exploring integrated genome scale data.

availability and requirements
project name: forg3d

project home page: 

operating system: windows. portable to other operating systems.

programming language: c++

other requirements: opengl support.

license: open source. free for academic and non-academic use.

any restrictions to use by non-academics: none.

authors' contributions
jp conceived and carried out the project. gw supervised the project and helped to draft the manuscript. all authors read and approved the final manuscript.

