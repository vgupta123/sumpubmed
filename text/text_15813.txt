BACKGROUND
the abundance of data in the post-genomics era is a major boon for life science researchers. however, data from disparate sources arguably have the most value when considered in context with each other. for example, manually curated experimental evidence may be more reliable than computational predictions, but the latter may offer greater coverage. whilst drawing conclusions based on the results of multiple experiments is by no means a new concept in biology, omics data and in silico analyses make traditional ad hoc methods of publishing and sharing data impractical. with the trend for data expansion set to continue and the highly collaborative approaches of major projects such as encode  <cit> , integration is likely to become an increasingly important focus of bioinformatics.

efforts to integrate data sources may be broadly categorised by their motivation:

 <dig>  aggregating and presenting data in an accessible format

 <dig>  computational analysis of combined data sets

 <dig>  federation of disparate resources

each of these goals, although not necessarily mutually exclusive, has its own requirements. for example, whilst user interfaces must be responsive and accessible, computational analysis requires robust semantics.

das overview
the distributed annotation system   <cit>  was originally conceived as a mechanism to aggregate and display genome sequence annotations such as transcript predictions. it is built upon the principle that data should remain spread across multiple sites, rather than aggregated into centralised databases. thus data providers retain control over data access, releases can be more dynamic and changes to file formats or database structures are transparent. das has a "dumb server, clever client" architecture, which holds a number of advantages. for example, the minimal resources and time required of data providers to expose their data means more sources can be integrated and more readily. conversely, one of the main reasons for this ease of implementation is a lack of enforced semantics, which limits applications primarily to visual display. in addition, das has been lacking a central registry of available data sources.

das was developed by wormbase  <cit>  for sharing genome annotations, and was adopted by the ensembl project  <cit>  to facilitate the display of such distributed data in its genome browser. the applicability of das was extended to protein sequence and structure data by the efforts of the efamily project to integrate five of the major protein databases  <cit> . it was subsequently adopted by the biosapiens network of excellence as the mechanism of sharing proteomics data among member institutions  <cit> , and also by the encode project to dynamically share the latest data between collaborators. many other individual projects across the world also expose their data and/or operate integration services via das.

as a standard for the sharing of biological information, the das protocol defines how data should be represented and communicated. it takes the form of a web service based upon the open standards of hyper-text transfer protocol  for data transmission and extensible markup language  for data format. a das server may host a number of sources, each differing in the services it provides and the type of underlying data it is based on.

coordinate systems
das may be used to annotate different types of data. in order to distinguish these, coordinate systems describe the various reference data types das supports. each coordinate system may be thought of as a model that bioinformaticians commonly use to denote biological entities and locations of features within them. a coordinate system has four parts:

 <dig>  the category or type of annotatable entity. for example a chromosome, gene, protein sequence or protein structure.

 <dig>  the authority or project responsible for defining the coordinate system. for example ncbi, uniprot or ensembl.

 <dig>  the version, used where entities themselves are not versioned .

 <dig>  the species, for coordinate systems containing only entities from a single organism.

though coordinate systems are normally used to describe the location of a feature within a reference entity , some annotations are not always associated with a sequence location but rather the entity itself . such features are commonly called non-positional features and are used most when annotating genes, which themselves are often thought of as abstract entities. the difference between annotating an entity versus a region of an entity's sequence is conceptual and requires no special implementation for a data source, but does have implications for a client's display.

das commands
a das source may offer one or more different services to clients, determined by the commands it implements. a das command is a request issued by a client for a certain class of data, such as a sequence or annotations of a sequence. the server responds with an xml document representing the requested data. das defines a model for constructing the query , a model for representing the data  and its means of transport . each command has similar but distinct query and data models. version  <dig>  of the das specification  <cit>  has five main commands:

 <dig>  entry points – fetches a list of entities a source can annotate

 <dig>  sequence – fetches the sequence of a segment of dna, protein et cetera

 <dig>  features – the most commonly implemented command; fetches annotations located within a segment

 <dig>  types – fetches a list of the types of feature a source or segment has

 <dig>  stylesheet – fetches instructions for displaying features

das sources that offer sequences are often referred to as reference sources because they provide the reference entry points for other commands on the same or different servers. sources implementing the features command are by contrast referred to as annotation sources because they provide annotations based on a reference sequence. this distinction is largely historical since some das sources are conceptually both reference and annotation sources, and das has since expanded to cover non-sequence data.

the das specification has also been extended with several other commands, such as those offering 3d structures and alignments. these are discussed in the results section.

das registry
the steady growth in both the number and diversity of publicly available das sources necessitated the development of a method for the discovery of das services. previously reported is the implementation of such a mechanism in the form of the das registry  <cit> . this service allows data providers to publish their das sources, allowing their automatic discovery by compatible clients. this discovery feature has been incorporated into most client implementations and libraries. the registry also performs service validation on registered sources to check that they are both functioning and conforming to the das specification. the number of registered sources has steadily increased since the das registry was created, to date totalling  <dig> 

RESULTS
in recent years the das protocol has been expanded beyond the core specification to cater for the data integration needs of additional areas of biological research. however these extensions have yet to be incorporated into the specification itself, the latest version of which is  <dig> . instead, collectively they form an extended version of the das protocol, version  <dig> e. this protocol, documented at , comprises five additional commands, an ontology for protein features, a server-side data preparation option  and additional options for stylesheets. the extensions it offers are all optional for both servers and clients.

new commands
the das  <dig> e specification defines five new commands.

structure
similar to the "sequence" command, this command allows das sources to act as reference sources for 3d structures. clients may request the structure of a given entity, and the source responds with an xml representation of the atomic structure. pdb structures are currently served by a data source maintained by the wellcome trust sanger institute.

alignment
this command provides a flexible mechanism for exposing pairwise and multiple alignments of entities. as well as full alignments, clients can request partial alignments containing entities within a given range of a query entity. this is particularly useful for clients wishing to display alignments containing large numbers of entities, such as the protein family alignments displayed on the pfam website  <cit> .

das alignments may additionally be used by clients as a means of converting between coordinate systems. for example, the sanger institute maintains an alignment das source that offers mappings between the uniprot and pdb databases. using an alignment as an intermediary, it is possible for clients such as spice  <cit>  to project features from one coordinate system to the other.

interaction
the interaction command is used for unifying and integrating different sources of molecular interaction data. a das source implementing this command supplies xml representations of molecular interactions.

the das representation of an interaction is flexible enough to allow many types of interactions, including those for which the interacting region is known and those for which it is not. the xml document contains a list of interactions and a list of the interacting entities , with each interaction referencing two or more interactors. in addition to standard attributes such as name and database source, both interactions and interactors may be further described with additional custom properties.

an interaction das source can be queried using one or more interactor identifiers, whereupon the das source returns interactions involving them all. the client can also request that interactions be filtered by their custom properties, specifying either interactions for which a given property is defined or those for which the property matches a given value.

volmap
the volmap command is used for syndicating 3d structure volume map data from electron microscopy. it accepts a single "query" id, and the simple xml response contains metadata for the volume map and a link to the raw data. unlike other das commands, the data itself is not encapsulated in xml due to its large size. the 3dem group at the spanish national center for biotechnology offers das reference and annotation servers for volume map data, and have developed the pepper client to facilitate its display  <cit> .

sources
the sources command is different from other das commands in that it is not implemented by individual das sources. instead it is typically implemented by the servers on which das sources are hosted, and provides metadata describing their das sources. this allows clients and end users to discover the services a server offers. the command details for each source:

 <dig>  the capabilities  the source responds to.

 <dig>  the coordinate systems the source offers data for.

 <dig>  a contact email address.

 <dig>  custom properties that describe the source further .

through the sources command, the das registry can automatically 'mirror' individual servers, significantly augmenting the federation capabilities of the das protocol.

protein feature ontology
the das protocol is intended to facilitate user-driven data integration such as graphical interfaces, and to enable data providers to quickly and easily expose their data. for these reasons, although the data transport mechanism has a defined structure, unlike other data integration technologies das does not impose strict semantic constraints on the data itself. whilst this has resulted in widespread adoption, data shared via das are typically not amenable to automated analysis because the relationships between data types cannot be reliably inferred and it is difficult to assess their relative significance. to address this shortcoming, the das/ <dig> e specification defines an ontology for sharing protein feature annotations within a controlled vocabulary, developed jointly by the biosapiens, uniprot and gene ontology projects. currently,  <dig> biosapiens das sources are committed to implementing the ontology in their annotations, though any source may choose to do so.

the ontology is an optional extension to the features das command, and because it is implemented by convention rather than by modifying the xml schema it is fully backwards compatible. the ontology itself is actually a composite of three ontologies:

 <dig>  sequence ontology  <cit> , an established ontology describing features of biological sequences.

 <dig>  psi-mod, an ontology for post-translational modification terms.

 <dig>  a new ontology for biosapiens-specific terms not covered elsewhere, such as literature references and other non-positional annotations.

command extensions
the das  <dig> e specifications defines two new optional extensions to existing commands.

binning
a core principle of das is the notion of servers being relatively simple, which lowers the requirements for data providers to expose their data. however, some das sources can potentially serve very large numbers of annotation features for a given segment of sequence. this creates problems for user-driven clients that rely on fast response times. often, the client is not capable of rendering all these features because the user interface has insufficient resolution. for example, a das source might annotate every base in a megabase region of the genome, but the user of a graphical client will not be able to see every annotation.

to solve the speed issue, the ensembl das client takes advantage of this fact. it adds a maxbins parameter to a "features" command request. this parameter informs the das source of the client's maximum available rendering space by means of the number of 'bins' that features may be placed into. the das source may then choose to optimise its response by only returning features that are renderable by the client . it is up to the das source to decide which features it should filter. this process is illustrated in table  <dig> 

in this contrived example a client requests feature annotations for a segment of sequence between bases  <dig> and  <dig>  with a maxbins parameter of  <dig>  the das source has an annotation for every base but, after sorting each into its appropriate bin, returns only those features with the highest scores.

advanced stylesheets
some das sources opt to provide stylesheets – generic blueprints that allow a client, if it so wishes, to render features according to the intention of the das source provider. the core specification defines several glyphs that a feature can be rendered as such as boxes, lines and arrows. stylesheets, as in other das commands, are provided in xml format and work by specifying the size, colour and type of glyph to be rendered for each type of annotation provided by the features command.

though stylesheets work well in representing sequence annotations such as exons, it is often desirable for some feature annotations to be rendered in more elegant formats. the  <dig> e specification contains new glyph types for the "stylesheet" command that allow a server to define new ways of rendering data. the most notable of these are instructions for rendering plots according to a feature's score property. different plot types include histograms, colour gradients, line plots and tiling arrays . figure  <dig> shows some examples of these formats.

implementation
the das specification has several client implementations. the ensembl genome browser  <cit>  incorporates a das client for several of its "views", and is able to display data from a wide variety of genomic, gene and protein sequence coordinate systems. it also integrates with spice  <cit> , a java web-start application that uses das alignments to combine protein sequence and structural annotations. using spice, protein sequence annotations can be projected onto and visualised within a 3d structure. the dasmiweb portal  <cit>  integrates protein-protein and domain-domain interaction datasets. the ipfam website also integrates interaction data, comparing the interaction topologies of different sources by overlaying them in a node graph  <cit> . other clients include dasty  <cit> , a web-based standalone das client implemented in javascript, and the pfam  <cit>  website.

several solid client implementations are based on open source libraries, which are available for the perl and java programming languages. these include bio::das::lite  <cit>  and the dasobert component of biojava  <cit> . das server implementations are also provided for both languages: proserver  <cit>  and ldas  <cit>  for perl; dazzle  <cit>  and mydas  <cit>  for java.

discussion
das is a widely adopted protocol for the integration of biological data types in user-driven contexts, commonly used by consortia of distributed institutions such as biosapiens and encode. though originally designed for aggregating genomic data, over recent years it has been extended to cover additional data types such as protein structures and molecular interactions. thus das continues to increase its penetration as a data integration platform. the increase in the number of available das data sources has necessitated the development of a syndication and discovery service, which was recently established in the form of a das registry. in addition, a protein feature ontology has been developed to fulfil a desire to constrain data to a controlled vocabulary so that it may be treated in a more intelligent manner. together, these developments are ratified into a new extended das specification, version  <dig> e. this consolidation serves to present a more coherent view of das as a flexible data integration platform. the principal strength of das lies in the ease with which data providers can expose their data, specifically for visual display. this simplicity makes it a good choice for smaller or experimentally-focussed groups with limited informatics resources wishing to allow their data to be visualised alongside other resources. its decentralised structure also makes it ideal for clients when integrating frequently changing data. similarly, since data offered via das always adheres to a defined format, changes in data structure are invisible to clients. this is in contrast to other data integration methods such as data warehousing and mediators that wrap individual data sources.

however, other integration strategies do have their advantages. for example, other more complex middleware solutions may offer more advanced querying capabilities or more rigid semantics, which make them more suitable than das for data mining or as primary interfaces. their disadvantages typically lie in the inevitably more involved setup process, textual display and reduced performance. data warehouses have the capacity to provide high performance and powerful querying for analysis applications, but are often limited by the range of data sources they can integrate. this is due to the resources required to integrate each resource, with imports and structural changes typically being handled by the integrator rather than the data provider.

the das protocol will continue to evolve in response to new requirements, enabled largely by the flexibility and simplicity of the original design. future improvements may include the addition of server-side filtering for sources providing large amounts of data, a writeback function for sequence or annotation submission and "come back later" responses for exposing software as a das service. additional commands for new data types such as small molecules are also likely.

CONCLUSIONS
das is a data integration mechanism gaining greater popularity in the bioinformatics community, due largely to its simplicity of design. we have expanded the applicability and functionality of the das protocol with five new commands, two command extensions and a protein feature ontology. we have consolidated these disparate extensions into a new extended das specification, version  <dig> e. as a result, das now represents a flexible and more coherent data integration platform that spans several areas, from genomic sequences to protein interactions.

availability and requirements
• project home page: 

• operating system: platform independent

• programming language: java, perl

• other requirements: internet browser

• license: gpl and other open source

• any restrictions to use by non-academics: none

competing interests
the authors declare that they have no competing interests.

authors' contributions
amj extended and maintains the proserver library, contributed to the bio::das::lite library, contributed to the ensembl client, implemented and maintains a variety of das servers and wrote the manuscript. ma, hb, rdf, jrm and ap designed the various extensions. ma and hb implemented dasmiweb. td was involved in the design of the project and is the original author of the dazzle library. eb and th contributed guidance throughout the project. rdf is responsible for the pfam resources and extended the proserver and bio::das::lite libraries. hh and pj implemented proteomics das resources and the mydas server library. rcj implemented dasty. ak implemented various das servers. ek implemented the ensembl client and server. jrm implemented pepper. gar implemented the ontology. ap co-ordinated the  <dig> e specification, implemented spice and the das registration server and extended and maintains the dazzle and dasobert libraries.

