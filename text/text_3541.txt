BACKGROUND
sequence based typing methods are rapidly becoming the gold standard for epidemiological surveillance with the data generated being also used to study microbial population genetics.

of the several methods developed, multilocus sequence typing   <cit>  has been widely applied to clinically relevant bacterial species, and online databases have been implemented  <cit> , facilitating the sharing and analysis of mlst data. the method itself is based on the sequencing of specific regions of  seven housekeeping genes of the microorganism of choice. the selection of housekeeping genes stems from the assumption that they are under moderate to strong purifying selection, and the resulting sequence variation is mostly neutral. therefore, the accumulation of variation by mutation, in the absence of recombination, occurs approximately linearly with time, and the resulting genetic distance tends to be proportional to the time of divergence between alleles. those sequences are compared to an allele database for each gene, each unique sequence is assigned a numerical identifier and the combination of alleles at each locus creates an allelic profile. each unique allelic profile is then converted to a sequence type  that unambiguously identifies a clone. the main aim of mlst is to provide a portable, accurate, and highly discriminative typing system and this approach has been used successfully with many different bacteria and other microorganisms.

the first approach to the mlst data analysis for the illustration of the relationships between isolates, was the creation of unweighted pair group method with arithmetic mean  dendrograms from distance matrices containing the pairwise differences of allelic profiles  <cit> . this type of cluster analysis presents several advantages, such as the ease of interpretation and the creation of an hierarchical grouping of the isolates, that can provide a global overview of the relatedness of the isolates under study and how the defined clusters are connected to each other. however, the topology of such dendrograms frequently does not reflect the patterns of descent  <cit> . as discussed by hall and barlow  <cit>  bifurcating tree-like representations of the relationships between isolates are frequently misinterpreted as depicting the precise evolutionary history of the isolates and are particularly susceptible to the confounding effects of recombination. a bifurcating tree representation, rather than a graph-based one, may more easily lead to false conclusions about the relationships of the isolates, and the latter should be preferred when recombination is high  <cit> .

other analyses methodologies focus directly on the sequence data instead of on an allelic profile. although supported by a large body of work  <cit> , these methods face an even greater challenge of disentangling the role of recombination over mutation. distance metrics based on the comparison of a simple alignment of concatenated sequences can be greatly affected by a single recombination event that results on multiple nucleotide changes, thereby disrupting the phylogenetic signal. in spite of these caveats, multilocus sequence analysis  has been successfully used for the phylogenetic analysis of species relationships, partly because the use of multiple loci helps to circumvent this problem  <cit> . recently, a new bayesian model based method was proposed as a solution for this problem by detecting if the differences in the sequence came from recombination or mutation events  <cit> . the model, implemented in the clonalframe approach, relies on the analysis of the sequence of each locus and assumes that recombination occurs only with alleles not represented in the population, an unlikely assumption for many bacterial species that have been extensively sampled. the resulting distance matrix can then be represented as an upgma tree with bootstrap support or as a graph that should describe the contributions of both recombination and mutation.

nevertheless, the most popular analysis of the allelic profiles in order to infer an hypothetical phylogenetic relationship between sts is that performed by the eburst algorithm  <cit> . this algorithm allows for an unrooted tree-based representation of the relationship of the isolates analyzed, based on the number of differences in the allelic profile, assigning isolates to clonal complexes . the main advantage of eburst is that it implements the simplest model for the emergence of clonal complexes  <cit> : a given genotype increases in frequency in the population, as a consequence of a fitness advantage or of random genetic drift, becoming a founder clone in the population, and this increase is accompanied by a gradual diversification of that genotype, by mutation and recombination, forming a cluster of phylogenetically closely related strains. this diversification of the "founding" genotype is reflected in the appearance of sts differing only in one housekeeping gene sequence from the founder genotype – single locus variants . further diversification of those slvs will result in the appearance of variations of the original genotype with more than one difference in the allelic profile: double locus variants , triple locus variants , and so on. upon application of the eburst algorithm to an entire data set, the result is a forest, a disjoint set of trees , where each tree corresponds to a clonal complex. those trees are the result of the application of a set of rules based on the model just described to the graph representing all slv links. thus, by considering only slv links, eburst does not aim at linking the entire population but identifies different clonal complexes.

the final eburst forest provides us with an hypothetical pattern of descent for the strains analyzed, illustrating the possible phylogenetic relationships between sts  <cit> . the reliance on the comparison of allelic profiles buffers eburst against the possibility of the introduction of multiple sequence changes by a single recombination event.

another current data analysis methodology for sequence based typing techniques relying on the difference between two allelic profiles such as mlst and multilocus variable number of tandem repeats analysis , consists of computing a minimum spanning tree   <cit> . an mst is a tree that connects all entries in such a way that the summed distance of all links of the tree is the shortest   <cit> . in a biological context, the mst principle and a maximum parsimony principle share the idea that evolution should be explained with as few events as possible. the main difference between the two is that parsimony methods allow the introduction of hypothetical samples, that are created to construct the internal nodes of the tree, whereas the real samples from the data set are represented as the leaves of the tree. those hypothetical samples, are assumed to be common ancestors of the current population that can no longer be sampled. in the bionumerics software mlst data can be analyzed has a minimum spanning tree using a simple categorical coefficient, and the algorithm was adapted to include hypothetical sts whenever such an assumption decreases significantly the total span of the tree. these hypothetical sts usually correspond to missing types for which a number of slvs are present in the data set  <cit>  and that are assumed to exist but not to have been included due to incomplete sampling. although this is a reasonable assumption with the model of clonal expansion and diversification described above, it is a clear departure from the mst problem, since one postulates the existence of nodes that were not represented in the sampling and that clearly affect the mst topology. a tool available at the pubmlst website  <cit>  also allows users to construct msts based on mlst data, but on the same page a link to a tool allowing a burst analysis of the data is also offered and the relationship between the two methods is unclear. up to now, msts and eburst for the analysis of mlst data have been considered distinct methodologies.

in spite of both eburst and the mst approach implemented in bionumerics being clearly related to the mst problem, they present some particularities that deserve clarification. the main difference between the two methodologies is that mst will always connect all the sts without forming defined clonal complexes as eburst does. using msts, those clonal complexes have to be infered by using empirical rules based on other data available for the isolates, or by a pre-defined allelic distance. if the later is chosen, the most common definition of cc is a group of sts that have at least six alleles in common with another member of the defined group. in the mst problem one deals with a weighted graph for which one searches for a spanning tree whose sum of link weights is minimum. however, when analyzing mlst data the methods do not clearly define link weights or have identical weights for most of the links. the simple categorical coefficient of bionumerics uses the number of allelic differences between sts, similarly to the eburst approach. in a situation where multiple links connecting different st nodes have identical weights a number of solutions to the mst problem exist. to overcome the degeneracy of the mst problem and present a unique solution, these methods usually consider a quality ordering of the links relying on additional measures of profile similarity. bionumerics also has a feature to include sets of rules based on burst rules  or to add other user defined rules. in order to present the unique solution, the combinatorial optimization problem becomes finding a tree with the highest possible quality. the mst problem and the maximum weight forest problem are particular cases of graphic matroids  <cit> . thus, finding a solution to represent mlst data by the use of msts consists of solving instances of graphic matroids  <cit>  which can be optimally solved with a greedy approach  <cit> . we should also note that many optimal solutions for a given instance may exist that have the same quality. formally, this happens when considering the quality sorted lists of links for two different optimal trees, the link lists have the same size and, for each list position, links in both lists have the same quality  <cit> .

the eburst algorithmic implementation can be enunciated as follows: the sts are clustered with respect to their number of slvs, dlvs, tlvs and occurrence frequency. given a graph where each st is a node and where a link between two sts exists whenever they are slvs, we want to construct a forest, i.e. a collection of disjoint trees, such that each st connects to the neighbor with highest number of slvs. in case of a tie, we should consider the number of dlvs, followed by tlvs and lastly by the neighbors occurrence frequency.

in the current eburst implementation  <cit>  a two step approach is used for each disjoint graph. in the first step, the algorithm builds a tree by doing a breadth-first search  starting from the group founders, i.e. the sts with highest rank in the disjoint graphs, considering the tiebreak rules of number of slvs, dlvs, tlvs and occurrence frequency. the bfs is done iteratively. first, the group founder is connected to all its slvs, then, each one of those, following the st ordering, is connected to their slvs not yet present in the tree. this process is repeated until every element of the disjoint graph is present in the tree. the second step consists in a local optimization of the tree. for each st on the tree, the algorithm checks if a slv exists with higher rank than the current parent. if such slv exists, and if it is not a grandparent of the current st, the link is deleted and the higher rank slv becomes the new parent of the st, thus locally improving the tree. the grandparent check is needed to verify that the tree is not broken nor does it form loops. as we have mentioned, the initial bfs tree is locally optimized, therefore, the obtained solution may not be the optimal solution. nevertheless, and although eburst v <dig> readme file  <cit>  suggests that the problem cannot be solved without using ad-hoc rules, the described problem can be stated as a graphic matroid  <cit> . these problems can be optimally solved with the algorithm of kruskal  <cit> . thus, in this article we provide the formulation of this problem and we solve it with the mentioned algorithm . we also provide an exhaustive analysis of the existing biological data sets  and comparison of the results with both implementations. to allow readers to use the new implementation, a prototype software is provided at  where users can analyze their data sets with the proposed algorithm.

RESULTS
algorithm
in this section we provide a formal definition of the problem to be solved and the proposed algorithm. the eburst analysis of mlst results consists of building a spanning forest in a graph where each st is a node and two sts are connected if and only if they are slvs. since this forest should be optimal with respect to link selection, we want to select links between sts with higher number of slvs. in case of tie we should consider the number of dlvs, the number of tlvs and lastly the occurrence frequency of sts. thus, given a graph g and the set ℱ of all forests over g, i.e., a matroid  <cit> , the optimization problem is to find an optimal forest. as we mentioned before, the current implementation of the burst rules in the eburst algorithm may not provide an optimal solution. in order to achieve this goal we propose the following algorithm: if we start with a forest of singleton trees , we can build the optimal forest by iteratively selecting links connecting sts in different trees and with the higher number of slvs. in the current implementation of the eburst algorithm, it is implicitly defined a total order for links based on the number of slvs, dlvs, tlvs and occurrence frequency of the connected nodes. this set of rules is what we defined as eburst rules, i.e., the burst rules as implemented in the eburst software. in the proposed algorithm we include as last tiebreak rule the assigned st number . although this last tiebreak is rarely reached, this criterion is necessary to provide a consistent and unique solution to the problem as, independently of the sorting algorithm used, it will always provide a consistent tiebreak solution due to the uniqueness of st id. as implemented, lower st ids take precedence over higher st ids. the rational for this choice was that, assuming a growing database with data of several contributing international studies, the more common sts are sampled first and will have lower st ids than the subsequent studies that will add more sts do the database.

problem formalization
let  be the set of sts and let  be a function such that λ is the number of variable loci between sts u and v, i.e.,

   

where π is the allelic profile of u and δ is the kronecker delta function.

given g = , where v =  and e = { ∈ v2|λ = 1}, we define a total order ≤ on e by comparing the number of slvs, dlvs, tlvs and the occurrence frequency of the nodes. let μ:  → n <dig> be a function such that μ is a vector which components are the numbers of slvs, dlvs, tlvs and the occurrence frequency of u ∈ . given that these values should be relative to the connected component  c containing u, we formally define μ as

   

for i =  <dig>   <dig>   <dig>  and μ <dig> is simply the occurrence frequency of u. then, given ,  ∈ e, we say that  ≤  if and only if ε ≥  <dig>  being ε computed as follows, starting with i = 1:

 <dig>  set ε ← max {μi, μi} - max {μi, μi};

 <dig>  if ε =  <dig>  then set ε ← min {μi, μi} - min {μi, μi};

 <dig>  if ε =  <dig> and i <  <dig>  then set i ← i +  <dig> and go to step  <dig>  otherwise return ε.

to illustrate the problem with a practical example consider links  and  from the largest connected component/clonal complex in burkholderia pseudomallei data set. we have

  

and, by computing e, we know that  ≤  with ε =  <dig> computed at dlv level. note that the connected component c is unequivocally identified for each u ∈ .

eburst algorithm
in this section we detail the current eburst implementation for comparison purposes. eburst algorithm implementation performs two major steps, namely an expansion step and a local optimization step. in the first step the algorithm expands a tree from the st with the highest number of slvs as follows:

 <dig>  select a st with maximum number of slvs , add it to list l <dig> and set d ← 0;

 <dig>  sort ld in decreasing order of slvs ;

 <dig>  for u ∈ ld, add all new discovered slvs of u to ld+ <dig> as descendents of u, i.e., add slvs of u not yet in the tree;

 <dig>  if ld+ <dig> ≠ ∅, set d ← d +  <dig> and go to step  <dig> 

note this expansion may not get an optimal solution, thus the algorithm runs a second step where it tries to optimize the tree. in this second step we should consider each ld, for d ≥  <dig>  and proceed as follows:

 <dig>  for each u ∈ ld select the best slv v of u;

 <dig>  if v is not a descendent of u in the expansion step, v becomes the parent of u.

this last condition avoids broken trees resulting from local optimization. note also that, whenever we set the parent for a given node, it implies adding a link to the spanning tree.

the above algorithm should be executed for each connected component, i.e., we obtain a spanning forest. and, with respect to the space and time complexities, it requires o space to store the graph and it takes o time, note that expanding all adjacencies takes o time and sorting the lists takes o time. since building the graph takes o time, the running time is dominated by graph construction.

goeburst algorithm
the problem that we want to solve may be formalized as follows: find a list l of links that is maximized with respect to ≤, i.e., given other list l' and assuming that both lists are sorted against ≤, l is such that l' ≤ l, for i =  <dig> ..., |l|. note that any list with links of a spanning forest of g must have the same size. this problem can be solved by a family of well known greedy algorithms  <cit> .

as mentioned above, the algorithm can be stated as finding the maximum weight forest or, depending on weight definition, as finding the minimum spanning tree. all these problems are particular cases of a general class of problems known as matroids, namely graphic matroids. the kruskal algorithm  <cit>  provides an optimal solution for this problem class and, given g = , it works as follows:

 <dig>  sort e with respect to the total order ≤ in decreasing order;

 <dig>  create a forest f where each u ∈ v is a tree;

 <dig>  iterate over e in decreasing order and, for each  ∈ e, if u and v are in different trees, add  to f combining both trees as single tree;

 <dig>  return f.

the goeburst algorithm takes o space to store the nodes, links and all necessary information. it takes o time to sort the links, o time to create the initial forest and o) to build the optimal forest, where α is the well known inverse of ackermann function. the last complexity term arises from the use of disjoint sets data structure to efficiently trace the nodes in each tree  <cit> . since building the graph takes o time and computing the connected components and the vectors μ for all sts takes o, the running time is dominated by the graph construction. thus, analyzing a mlst instance takes o time.

groups defined at higher allelic distances
as described in the previous section, the resulting forest  is defined for an allelic distance of one, i.e, the minimum distance of any st to at least one of the sts of the same clonal complex is a difference in a single locus. the user may choose to display sets of isolates related at higher levels than slv but those are represented as sets of disjoint ccs, i.e., as a forest of trees each one connected at slv level. nevertheless, groups can also be defined at distances greater than one allele difference, iteratively following the same set of eburst rules for link selection. as an example, to define groups at tlv level, the rules are first applied to the selection of all slv links between the sts, and afterwards all the possible links between ccs or sts that are dlvs are evaluated using the same rules, and the best dlv link for each pair of ccs/sts is selected. the same process is then applied to sts or groups that can have tlv links between them.

in the current eburst implementation, the connection between sts at levels higher than slv is not explicitely represented. in the goeburst implementation, the user has the choice to link these forests to create a single tree for each clonal complex, up to tlv level. as stated above, the same eburst rules can be followed to choose the single link to be represented connecting disjoint ccs or sts. the choice of the tlv level as the upper level of connection to be displayed was based on two factors: 1) the defined rules for eburst only use tiebreaks up to tlv level, so creating groups higher than tlv will not make any changes in the drawn links and would only further join ccs/sts, and 2) the number of links to be evaluated grows quadratically with the number of sts, being computationally intensive in terms of time and memory for large data sets. an important feature in the goeburst algorithm is that, similarly to the eburst implementation, the number of dlvs and tlvs is always calculated for each group defined at the chosen allelic distance. this means that, for the purpose of link selection, only dlvs and tlvs that are within that group are taken into account. therefore higher allelic distances may result in a higher number of dlvs or tlvs for each st that can influence the decisions reached by the tiebreak rules and which links are effectively drawn.

examples of population snapshots created with groups defined a tlv level for staphylococcus aureus  and streptococcus pneumoniae .

testing
goeburst was applied to several public mlst databases for clinically relevant microorganisms: helicobacter pylori, streptococcus pyogenes, bacillus cereus, streptococcus pneumoniae, pseudomonas aeruginosa, enterococcus faecalis, klebsiella pneumoniae, campylobacter upsaliensis, streptococcus suis, neisseria spp., haemophilus influenzae, campylobacter jejuni, streptococcus uberis, staphylococcus epidermidis, staphylococcus aureus, streptococcus agalactiae, burkholderia pseudomallei and enterococcus faecium. these databases were retrieved from public mlst database repositories available in different websites . in order to provide examples of the results for different species obtained by the goeburst algorithm, population snapshots were created for the following species: staphylococcus aureus , streptococcus pneumoniae , neisseria spp. , enterococcus faecium  and burkholderia pseudomallei .

of those allelic profile databases tested, five presented differences between the current locally optimized implementation of the eburst rules and goeburst. these results are presented in table  <dig>  the differences observed are due to the heuristic optimization procedure of the eburst implementation described in the introduction, since the local optimization fails to consider all the possible ties at a certain tiebreak rule. in contrast, goeburst will always provide an optimal solution for the link assignment, since it performs a global optimization taking into consideration all possible ties at all levels between sts in the data set.

 the following data sets presented no differences: helicobacter pylori, streptococcus pyogenes, staphylococcus aureus, bacillus cereus, pseudomonas aeruginosa, enterococcus faecalis, klebsiella pneumoniae, campylobacter upsaliensis, streptococcus suis, haemophilus influenzae, streptococcus uberis, staphylococcus epidermidis and streptococcus agalactiae.

an illustration of the type of differences that can be observed in the patterns of descent for burkholderia pseudomallei can be seen on figure  <dig> and figure  <dig>  in figure  <dig> a partial view of the cc <dig>  is shown, highlighting the link between st <dig> and st <dig>  this link represents the assignment that conforms to all rules, from  <dig> possible options  when creating the tree using eburst rules. the current eburst implementation returns the pair st56–st <dig> as the drawn link. although both possible pairs have the same relationship in terms of number of slvs , the link between st <dig> and st <dig> should be drawn according to the eburst rules, since the sts in this pair have more dlvs . this change completely alters the proposed pattern of descent within cc <dig>  with st <dig> and closely related sts constituting a bridge between the group founder  and closely related sts with a marked star-like topology and a more dispersed set of sts with a more linear topology. figure  <dig> illustrates another change that occurs within cc <dig>  the representation of a link between st <dig> and st <dig> instead of the link between st <dig> and st <dig> provides a better solution for a simpler tiebreak with only  <dig> ties at the slv level.

link confidence assessment
another advantage of having a global optimal solution is the possibility of using the distinctiveness of a link among all possible links that could have been drawn as a confidence measure for the drawn link. the measure is based on the level of the tiebreak needed to decide if a certain link should be selected in detriment of others. the higher the level of tiebreak rule reached before such a decision can be made, the smaller the difference between similar links exist in the list of ties at that level and less confidence we have on link selection. this is a direct result of the tiebreak rule order of eburst implemented in goeburst.

the higher the level of tiebreak rule invoked to support the decision, the more probable it is that the identification of new sts, by more extensive sampling of the population, will change the number of slvs, dlvs or tlvs, within the cc under study leading to the replacement of these lower quality links. it is important to note that to ensure uniqueness of the solution, a final and decisive tiebreak based on the st identification number was implemented as previously described in the algorithm subsection.

in figures  <dig> and  <dig> examples using the burkholderia pseudomallei data set are represented. links where the tiebreak occurred at the number of slvs, dlvs and tlvs are shown by the goeburst software in blue, green and red lines respectively. black lines are links where no tie was found.

changes in the studied data sets
enterococcus faecium
only one difference was found in the enterococcus faecium data set studied. the changed link occurs in the largest eburst clonal complex for the data set , with st <dig> as the assigned founder . recent molecular epidemiology studies of e. faecium have shown the existence of a genetic lineage, within this largest clonal complex designated "cc17"  <cit> . this designation refers only to a subgroup of sts within the largest clonal complex defined by eburst, that are associated with hospital outbreaks and isolates recovered from infections in hospitalized patients. the importance of the detected incorrect link between st <dig> and st <dig>  lies in the fact that st <dig> is part of "cc17" while st <dig> is not. the new link connects st <dig> with st <dig>  outside the "cc17" group, which could lead to the redefinition of "cc17" patterns of descent.

streptococcus pneumoniae
the differences described in table  <dig> occur in  <dig> different clonal complexes: cc <dig>  cc <dig> and cc <dig>  for cc <dig> and cc <dig>  the observed changes alter the pattern of descent within each cc. in cc <dig> the sub-group founder st <dig> has now a shorter slv path to the group founder st <dig> than the sub-group founder st <dig>  the other affected group, cc <dig> is the second largest group in the streptococcus pneumoniae data set with  <dig> sts and  <dig> isolates . the observed change completely altered the pattern of descent from cc <dig>  the largest sub-group founder and possibly the most plausible group founder since it has only  <dig> slvs less than st <dig> but has more dlvs and tlvs and a more marked star-like topology. the change observed in cc <dig> is more subtle involving the evolutionary path between the founder st and the hypervirulent st <dig>  <cit> , that is the st representative of more isolates in the cc.

burkholderia pseudomallei
for burkholderia pseudomallei all the differences were observed in the largest cc for the data set, with st <dig> as the founder . this cc encompasses 53%  of the sts in the database and 58%  of the isolates. two of the changes observed lead to major rearrangements in the topology of the eburst tree , while the two other changes only reflect local small distance rearrangements in the tree.

also interesting, is that a large number of links in cc <dig>  were chosen at a tiebreak level of dlv and three links had a tiebreak level of tlv. this indicates that some links of this large group are unreliable and that the real pattern of descent within this group can be very different from the one produced by the optimal solution based on eburst rules.

campylobacter jejuni
in this data set, four of the five differences observed were in cc <dig>  the largest clonal complex with  <dig> sts  and  <dig> isolates . several studies identify this clonal complex as diverse and widely distributed, and associated with poultry and human isolates. of these changes the largest impact is the creation of a link between st <dig> and st <dig> instead of a link between st <dig> and st <dig>  while the other changes correspond mostly to local rearrangements.

neisseria spp
the data set used contains data for neisseria meningitidis, neisseria lactamica and neisseria gonorrhoeae, since the same mlst scheme proposed can be effectively used to type the three species. seven differences were found between the two eburst implementations: two in cc <dig> complex of neisseria meningiditis, one difference each in cc <dig>  cc <dig> and cc <dig> also from neisseria meningiditis and two in cc <dig> of neisseria gonorrhoeae. the two changes in cc <dig> of n. meningiditis change the pattern of descent between the group founder  and the largest subgroup founder, st <dig>  this clonal complex has several strains of recognized clinical importance due to their invasiveness and hypothetical capsular replacement  <cit> . cc <dig> of neisseria gonorrhoeae is a small cc with  <dig> sts and  <dig> isolates on the data set where the changes observed drastically change the topology of the group.

implementation
availability
the goeburst algorithm was implemented in java and matlab . a java interface was created allowing users to test their data sets and visualize the results of the algorithm. it is available at . it uses the prefuse visualization toolkit  <cit>  and the vectorgraphics package of the freehep java library  <cit> . for a full description of the interface capabilities a tutorial is available at  and a help section is available in the software.

changing the founder of a clonal complex
one of the features in the current implementation of the eburst algorithm is allowing the user to test an hypothesis of an alternative pattern of descent by changing the founder of a group, that eburst defines as the st with more slvs. since the current implementation relies on an heuristic local optimization procedure, when changing the assigned founder st, the optimization could also lead to non-optimal rearrangements in the tree, leading to a solution that violates the eburst rules. in the proposed implementation, when a new founder is selected, the algorithm draws all the links between this st and its slvs, effectively deciding all tiebreaks in favor of the presumed founder. this is the only observed change since the calculated tree is already optimal, however, this can still impact on the overall topology of the tree if the slvs are themselves subgroup founders and important hubs in the tree.

CONCLUSIONS
eburst provides researchers with the ability to create groups of closely related strains from mlst data. a recent simulation study showed that the eburst definition of clonal complexes and the inferred pattern of descent within them is reliable in conditions comparable to those of the majority of natural bacterial populations of many different species while also uncovering conditions when eburst performance is suboptimal  <cit> .

in this paper, we propose an algorithm for an optimal implementation of the eburst rules. this was achieved by formalizing the problem as a matroid, namely a graphic matroid that generalizes the mst problem. our analysis clarifies the relationship between an mst and the eburst approach. if one considers only the allelic profile to derive an mst connecting all sts, multiple optimal solutions exist due to the limited and discrete space of st differences. eburst is similar to finding a mst on the entire data set but restricting the links only to those between slvs and selecting the trees with the highest quality as defined by a set of rules. the eburst approach uses a set of rules to create an ordered list of the links to be drawn and this optimization problem, although akin to the mst problem, should not be confused with the mst problem itself which implies a weighted graph. formally eburst can be stated as the more general class of combinatorial optimization problems over a matroid. this relationship between eburst and a general problem category indicates that the optimal solution following the eburst rules can be provided by a greedy approach identifying the optimal forest with respect to the defined partial order on the set of links between sts. to achieve that goal we propose using the kruskal algorithm due to its desirable properties and ease of implementation, although other algorithms also provide optimal solutions to these problems. goeburst provides a global optimal solution and corrects links that were not strictly following the eburst rules occurring in the present software implementation, due to the use of an heuristic local optimization procedure. the changes were observed in bacteria with a high ratio of recombination to mutation, and the majority occurred in the largest clonal complex in each data set. these clonal complexes have usually a "straggly" appearance, meaning that the resulting tree diverges significantly from a star-like topology and presents a number of higher order ramifications. cc <dig> of enterococcus faecium , cc <dig> of neisseria meningiditis  and cc <dig> of burkholderia pseudomallei  are prime examples of such straggly groups. the majority of the differences found occurred in clinically relevant clonal complexes for the bacterial species under study and significantly altered the pattern of descent within the cc, rendering them of critical importance for the epidemiological analysis based on mlst. furthermore, the ongoing growth of mlst databases resulting from the increased sampling of bacterial populations, is expected to generate more complex optimization problems that could further bring forward the limitations of the current implementation.

msts have recently attracted attention for the analysis of mlst data since they share a similar principle to the maximum parsimony method frequently used in phylogenetic analysis. the bionumerics software has been used to identify msts using a simple categorical coefficient and mlst data  <cit> . as we discussed, the analysis of mlst or mlva data using msts is incompatible with a unique solution due to the limited space defining the weights of the links. the publication describing this feature of the software  <cit>  clarifies that, with the default options, rules similar to those of burst are used to define the quality of each link. the bionumerics approach is therefore formally identical to the burst implementation proposed here if one excludes the creation of hypothetical nodes and if all the rules are followed. similarly the mst analysis using prims's algorithm  <cit>  provided at the pubmlst site  <cit>  is formally identical to the goeburst implementation, as long as the same set of rules are used.

considering the proposed algorithm it becomes intuitive that the pattern of descent within the clonal complexes produced as well as the clonal complexes themselves, cannot be considered static and are highly dependent on the available data. each link has a number of ties and a level of tiebreak rule reached to decide if the link should be drawn. through the evaluation of these two parameters one can determine if the patterns of descent within a clonal complex are robustly defined or if the availability of new data, by more complete sampling, may significantly alter the proposed evolutionary path. goeburst allows the evaluation of link confidence through the tiebreak level reached enabling the researcher to determine by visual inspection of the tree if a drawn link represents a reliable connection between sts or if other connections with only a slightly worse quality exist, alerting for the possibility of alternative patterns of descent. at a clonal complex level, the existence of several links that were drawn at higher tiebreak levels  could point to two possible scenarios: insufficient or biased sampling or, alternatively, high recombination or mutation levels generating, in a very short time period, sets of allelic profiles with ties at all levels.

the general applicability of graphic matroids and the evolutionary model underpinning the eburst rules suggests that goeburst can be used successfully for the analysis of other microbial typing data. any multilocus typing methodology whose results can be coded into a numeric or character sequence and in which the similarity between two such profiles can be assessed by the number of differences, is amenable to analysis by goeburst. mlva and crisprs analysis  <cit>  are examples of methodologies whose results are typically analyzed by mst and where the goeburst algorithm can be fully applied. the growing interest of snp analysis to probe the recent evolutionary history of monomorphic bacterial pathogens  <cit>  has been accompanied by the use of multiple methods to analyze the data generated. the use of msts in this context in different studies  <cit>  without a clear reference to the tiebreak rules used, may compromise their reproducibility and comparability. goeburst can be used in the analysis of snp data without these caveats and using tiebreak rules based on an evolutionary model that has proven useful in the analysis of bacterial short-term evolution. nevertheless, depending the number of loci analyzed by these methods and the distribution of the number of differences found between isolates, the tiebreak rules may need to be revised since they  were originally conceived for the analysis of seven loci mlst data.

the large body of work on graphic matroids can be tapped to provide novel analysis tools that may offer fresh insights into microbial population dynamics.

authors' contributions
apf designed, proposed the new algorithm, ran the tests, implemented the visualization software and wrote the paper. mb did the initial eburst code analysis, proposed a correction and ran the tests. mr and jac designed and coordinated the study, analyzed the results and wrote the paper. all authors read, contributed and approved the final draft.

supplementary material
additional file 1
population snapshot of staphylococcus aureus with groups defined at tlv level. population snapshot of staphylococcus aureus created goeburst v <dig>  software using a data set downloaded from . gray lines define the links at dlv or tlv between the ccs , defined following the eburst rules .

click here for file

 additional file 2
population snapshot of streptococcus pneumoniae with groups defined at tlv level. population snapshot of streptococcus pneumoniae created by goeburst v <dig>  software using a data set downloaded from . gray lines define the links at dlv or tlv between the ccs , defined following the eburst rules .

click here for file

 additional file 3
population snapshot of staphylococcus aureus representing clonal complexes . population snapshot of staphylococcus aureus created by goeburst v <dig>  software using a data set downloaded from .

click here for file

 additional file 4
population snapshot of streptococcus pneumoniae representing clonal complexes . population snapshot of streptococcus pneumoniae created by goeburst v <dig>  software using a data set downloaded from .

click here for file

 additional file 5
population snapshot of neisseria spp. representing clonal complexes . population snapshot of neisseria spp. created by goeburst v <dig>  software using a data set downloaded from .

click here for file

 additional file 6
population snapshot of enterococcus faecium representing clonal complexes . population snapshot of enterococcus faecium created by goeburst v <dig>  software using a data set downloaded from .

click here for file

 additional file 7
population snapshot of burkholderia pseudomallei representing clonal complexes . population snapshot of burkholderia pseudomallei created by goeburst v <dig>  software using a data set downloaded from .

click here for file

 acknowledgements
miguel bugalho was partially supported by fundação para a ciência e a tecnologia . this work was partially funded by fundação para a ciência e a tecnologia . this publication made use of data available at mlst.net b <dig>  pubmlst b <dig> and institute pasteur mlst databases b <dig>  we would like to thank ed feil, david aanansen and brian spratt for the eburst source code and insightful discussions, and rob willems for help in the e. faecium analysis and for providing the e. faecium data set. we also want to thank ed feil for critical reading of the manuscript. we acknowledge our anonymous reviewers for important suggestions for improving the scope of the paper.
