BACKGROUND
in recent studies, classical regression methods for prediction of a continuous variable from a large number of covariates have been extended for the training of a model when the data set is hierarchical in nature  <cit> . in this article we extend our genetic algorithm  variable selection methodology in  <cit>  to allow for clustering in the data. we compare the performance of multi-model inference  using restricted maximum likelihood  mixed-effects modeling  <cit>   with ordinary least squares regression  <cit>   and compare ga-mmi with the commonly used penalized regression method least absolute shrinkage and selection operator  <cit>  . we also show how to optimally set the ga parameters.

as an example, the training of a linear regression model for prediction of raltegravir  resistance  from mutations in the hiv integrase region  is worked out. the data sets used for training and testing were described in more detail in  <cit> . the training set consisted of n =  <dig> clonal genotype-phenotype measurements, from multiple clones derived from  <dig> clinical isolates  and repeated measurements  from  <dig> site-directed mutants , and the number of candidate mutations for selection was p =  <dig>  two test sets were used: the first consisted of population data of  <dig> clinical isolates , the second consisted of  <dig> integrase site-directed mutants containing most of the known ral resistance associated mutational patterns  <cit>  . as it was found in  <cit>  that a second order model did not significantly outperform a first order model, we did not consider interaction terms.

the paper is organized as follows. we begin by recalling the simple genetic algorithm for variable selection in ols linear regression. then, we introduce ga-mm as an extension for clustered data. finally, we introduce mmi for estimation of the model parameters, combining the results from multiple ga-mm  runs, followed by a short section on how we applied the lasso method for comparison. in the remainder of the paper, we illustrate our methodology on an example for the predictive modeling of ral resistance. for this example, we describe in detail how we optimized the ga parameter settings, and we report the results of comparing ga-mm-mmi with lasso and ga-ols-mmi. when nominating one ‘best’ model, from all models evaluated in the comparison, we chose the ga-mm-mmi top <dig> model as a sparse model with high biological relevance , and having better predictive accuracy than lasso and ga-ols-mmi models with equal number of mutations selected. throughout the text of this article ga related terminology is written in italic.

methods
ga-ols
the simple genetic algorithm, due to john holland  <cit> , is used to evaluate a set p of regression models m with psel variables. in ga terminology: p is a population, and a model m ∈ p, is called an individual, the psel model variables determine the individuals’ chromosome. the number of models in a population, |p|, is fixed, as well as the number of variables psel in a model m. in ga terminology: |p| is called the population size , and psel is called the chromosome size . thus, each regression model m represents a candidate subset of psel variables , and a ga fitness function has to be defined to identify the better or ‘more fit’ individuals. in ga-ols, we used the linear model r <dig>  goodness-of-fit statistic as fitness function. the better the model m fits to the data, the higher r <dig> . models with r <dig> > goal fitness are termed solutions to the optimization problem. a darwinian evolution is applied to modify the population over several generations. the ga finds a solution using the search procedure as given in table  <dig> 

in step  <dig> of table  <dig>  the mutation genetic operator alters a gene  in a chromosome with probability pm. the crossover genetic operator re-combines the genotypes of two individuals. the probability of an individual to be selected for crossover is pc. the key in the optimization is to keep a good balance between selective pressure  and genetic diversity . the ga run is completed when an individual is found with fitness > goal fitness. when no solution is found within a maximum number of generations , the ga run is halted. for step  <dig> of table  <dig>  we used tournament selection as detailed in section ii . also, elitism is used, meaning that the best chromosome  is passed through to the next generation, with a probability pe.

the running of the ga is done multiple times to generate a set s of solutions. a ranking by importance can then be made for all variables based on their frequency in s.

ga-mm
although ols parameter estimates are known to be unbiased when neglecting the correlation structure  <cit> , in this article we want to evaluate whether using a mixed model for the ga models, using a random subject effect in addition to the fixed effects , can improve the interpretability or performance of the final linear regression model, derived with mmi .

the ga-mm methodology makes use of the simple genetic algorithm , completely analogous to ga-ols, producing a ranking of variables by their frequency in a set s of ga solutions. however, there is no single commonly used definition for the r <dig> statistic as is the case for ols  <cit> . several definitions have been suggested that all have different interpretations in the presence of correlated errors. here, we used the marginal r2mm definition from  <cit> , quantifying the variance explained by the fixed effects. as new data will originate from other subjects than those used for the training of the model, the random effects cannot be used for prediction. in  <cit>  it has also been described that conditional r <dig>  should not be used for fixed-effect variable selection. for us, the main motivation for using r2mm was that the mm can be fitted using reml, resulting in better estimates for the variance components, needed in the estimation of the fixed effects, especially in models with many fixed effects  <cit> .

in the example, for predicting the ral phenotype y from the integrase clonal genotype x ∈ p, the mixed model m uses one random effect/ cluster factor αi :

 yij=β0+∑k=1pβkxkij+αi+ϵij, 

with β <dig> the intercept, and yij the j-th response of cluster i,

 αi~n <dig> σα <dig>  

and

 ϵij~n <dig> σϵ <dig> 

if xk ∉ m: βk ≡  <dig> 

the marginal r <dig> is calculated as:

 rmm2=σf2σf2+σα2+σϵ <dig>  

where σf <dig> is the variance calculated from the fixed effects βk:

 σf2=var∑k=1pβkxkij, 

 σα <dig> 

 is the between-cluster variance, and σϵ <dig> is the within-cluster variance.

the intra-class correlation: icc=σα2σα2+σϵ <dig> for the model without fixed effects was  <dig> , showing very strong within-cluster correlation, and suggesting that accounting for this correlation may improve the performance of our model.

ga-mmi
in  <cit>  it has been described that, when the number of samples in the training data is small, making inference from a single best model, e.g., produced with stepwise regression, leads to the inclusion of noise variables. here, we used mmi to combine the information from the ga solutions into a final model for making predictions. as a ga run is stopped as soon as the goal fitness ) is achieved , ga solutions were ‘equally fit’. thus, we used equal weighting of the ga solutions in the mmi. in  <cit>  it was shown that for stepwise regression using an information criterion for selection – as we used in  <cit>  for deriving a consensus model from the ga ranking of variable frequencies – one should for mm use the biased ml estimators. an advantage of using mmi in combination with ga-mm is that reml can still be used. thus, using mmi, we could make a fair comparison between ga-ols and ga-mm.

for estimation of the parameters for the final model, we used the following three mmi approaches on the ga solutions:

 <dig>  refitting for a top selection of the ga ranking: from the ga-ranking, the variables with highest frequencies were retained for the final model, which was then refitted using ols/mm.

 <dig>  averaging of parameter estimates β^k using all ga solutions  :

 β¯=k∑s=1sβ^kss, 

with |s| the number of ga solutions.

 <dig>  averaging of parameter estimates β^k using ga solutions where β^k≠ <dig> : 

 β¯=k∑s=1sβ^ksm∈s|xk∈m. 

for the model averaging in  <dig> and  <dig>  parametersβ^k were fitted using ols/mm for all m variables with presence at least once in a ga solution or for a top selection of variables in the ga ranking only.

lasso
lasso  <cit>  is a regularization method that performs variable selection by constraining the size of the coefficients, also called shrinkage. by applying an l <dig> absolute value penalty, regression coefficients are ‘shrunk’ towards zero, forcing some of the regression coefficients to zero. using the r package glmselect  <dig> - <dig>  <cit> , for the described example in this paper we performed variable selection using the lasso technique on the clonal genotype-phenotype database returning a lasso ranking of variables  as selected by decreasing the amount of penalty applied. besides using the shrinkage coefficients for variable estimation  we also applied ols and mm to the lasso selected variables .

RESULTS
ga parameter settings
we optimized the ga parameters one by one in the order  as described below, and taking computational efficiency into account . tournament selection was used as selection method to form a new population of more fit individuals. ga parameters pm and pc were optimized together using a meta-ga. pe and pop.size were fixed in advance and were not optimized. pe was set to conserve the best chromosome in three consecutive generations, followed by a generation where the probability of keeping the best chromosome was set to 20%. pop.size was set equal to  <dig>  to set the main ga parameters: max.generations, chrom.size, and num.runs we used cross-validation .

for running the ga, we used the r package galgo  <dig> . <dig>  <cit> . after inspection of the r2cv results, with exception of goal.fitness, we took the same optimized ga parameters values for ga-ols and ga-mm : pop.size =  <dig>  chrom.size =  <dig>  pm =  <dig> , pc =  <dig> , pe = , max.generations =  <dig>  tournament.size =  <dig>  num.solutions =  <dig>  goal.fitness.ols =  <dig> , and goal.fitness.mm =  <dig> . in additional file  <dig> is the r code we used to derive these settings and to run ga-mm-mmi.

i. meta-ga for selection of pm and pc
for the meta-ga optimization of the parameters pm and pc , we used the r package gaoptim  <dig>  with the default settings )  <cit> . ga-ols was used as the meta-ga fitness function returning the r <dig> from the best chromosome for the  combinations. different random numbers were generated for each of the ga-ols runs, thus the same real-valued combination  with multiple presence in the meta-ga population did not give the same fitness result. the fitness landscape from  <dig>  points is shown in figure  <dig> 
pm 
and 
pc



ga
chosen
pre-set
being optimized

ga-ols

metaga
meta
num.generations
meta
pm
meta
pc
meta
meta
crossover was a fairly weak genetic operator as can be seen from the red band in figure  <dig>  oppositely, the mutation genetic operator was a strong operator and was best taken in the range . the meta-ga converged at  = . for further evaluation in section ii, we also selected  and  located in the largest dark red area in figure  <dig> .

ii.tournament selection
tournament selection  <cit>  is a selection method to bias the selection towards the more fit individuals. pop.size tournaments are organized with k randomly selected chromosomes. the winner of a tournament is the chromosome with the best fitness . the pop.size tournament winners become the new population. selection pressure, the degree to which better individuals are favoured, is increased when the tournament size is increased, as the winner from a large tournament will, on average, have a higher fitness than the winner of a small tournament.

in the optimization , all tournament sizes 1 ≤ k ≤ pop.size were considered. from section i, we selected the following  combinations for evaluation: , , and . we also considered , the  combination used in  <cit> . from figure  <dig>  to improve the r <dig> performance the tournament.size k should be taken >  <dig>  we chose to continue to use k =  <dig> . slightly better r <dig> performance was seen for the  combinations  and . the former was chosen for reasons of computational efficiency.
tournament.size 
and 


ga
chosen
pre-set
being optimized

ga-ols
iii. maximum number of generations
in table  <dig>  the ga settings for evaluating max.generations are summarized. evaluation was done for both ga-ols and ga-mm, calculating rcv <dig> as the mean from  <dig> repetitions of 5-fold cross-validation: rcv2=∑i=13rcv,i2/3where rcv,i <dig> was calculated as the correlation between the phenotype measurements of all observations in the database  and their mean prediction  of the  <dig> best chromosomes from ga-ols/ga-mm .
max.generations



ga
chosen
pre-set
being optimized

ga-ols

ga-mm
from figure  <dig>  it can be seen that, while the improvement in r2cv when increasing max.generations from  <dig> to  <dig> was larger for ga-mm than for ga-ols, the r2cv performance for ga-mm was found to be lower than for ga-ols. stabilization of r2cv was seen for both ga-ols and ga-mm for num.generations ≥  <dig>  we chose max.generations =  <dig> to be used further in the sections iv and v. note that for the pre-set goal fitness =  <dig>  max.generations was the number of generations always executed. for the model comparison, with the goal fitness calculated , we set max.generations =  <dig> for both ga-ols and ga-mm.

iv.chromosome size
in table  <dig> the ga settings for evaluating chrom.size are presented. analogously as for num.generations, evaluation was done for ga-ols as well as ga-mm, using  <dig> × 5-fold cross-validation .
chrom.size



ga
chosen
pre-set
being optimized

ga-ols

ga-mm
the r2cv performance is shown in figure  <dig>  stabilization in performance was seen for both ga-ols and ga-mm for chrom.size ≥  <dig>  we chose chrom.size =  <dig> to be used further. thus, after optimizing chrom.size, the ga-mm performance was now equal to the ga-ols performance .

v. number of ga runs
the ga settings for evaluating num.runs are shown in table  <dig>  analogously as for max.generations and chrom.size, evaluation was done for both ga-ols and ga-mm using  <dig> × 5-fold cross-validation .
num.runs



ga
chosen
pre-set
being optimized

ga-ols

ga-mm
in figure  <dig> the r2cv performance is shown using all best chromosomes from num.runs in the model averaging  , including the cases where the ga variable selection is done with mm and re-estimation of the variables in the mmi is done with ols and vice versa. a similar r <dig> performance was observed when using ga-ols or ga-mm for the variable selection. however, a higher r2cv performance was observed when using ols for estimation of the best chromosome parameters. the r2cv performance was stable for num.runs ≥  <dig>  when increasing num.runs from  <dig> to  <dig> for ga-ols variable selection, only a slight increase in r2cv performance was seen.

in figure  <dig> the r2cv performance is shown using only the ‘best’ best chromosome from num.runs for prediction in the cross-validation. overall, a similar r2cv performance was observed when using ols or mm for estimation of the ‘best’ best chromosome parameters, and using ga-mm or ga-ols for variable selection.

in figure  <dig>  the ‘x% best’ best chromosomes  were used in the model averaging . evaluation was done for num.runs =  <dig> or  <dig> and num.runs =  <dig> or  <dig> for ga-ols and ga-mm, respectively. for ga-ols, the highest r2cv was  <dig>  and was obtained when including the ‘five best’ best chromosomes  from num.runs = 500). also, for ga-mm, including the ‘five best’ best chromosomes  gave the highest r2:  <dig>  and  <dig>  for mmi-mm and mmi-ols, respectively. thus, both for ga-ols-mmi and ga-mm-mmi inclusion of the ‘five best’ best chromosomes yielded an improvement in r2cv performance in comparison to using all best chromosomes  or ‘the best’ best chromosome . as previously noted from figure  <dig>  also a better r2cv performance was again found using ols estimation of parameters than when using mm estimation. for ga-ols num.runs =  <dig> was repeated  <dig> times . the mean curve of these  <dig> repeats is shown, together with the 95% confidence interval error bars. the peak of this mean curve is at ‘6% best’ best chromosomes included. the ga-mm curve with mmi-ols estimation  is situated within these error bars. thus, for num.runs =  <dig> ga-mm and ga-ols perform equally well in selecting variables for the model in the cross-validation. for ga-ols the r2cv performance using the ‘five best’ best chromosomes using num.runs =  <dig> is better than when using num.runs =  <dig>  therefore, calculation of the goal fitness for ga-ols in section vi was done from the num.runs =  <dig> best chromosomes. for calculation of the goal fitness for ga-mm, num.runs =  <dig> was used. note that, once the goal fitness was calculated, num.runs was set to na . instead, the model comparison will be based on num.solutions =  <dig>  for both ga-ols and ga-mm.

vi.goal fitness
as derived from figure  <dig>  for calculating the goal fitness we considered the fitness of the ‘ <dig> best’ best chromosomes: this is the top 1%  for ga-ols and the top 5%  for ga-mm. for each of the  <dig>  cv training sets we calculated the non-parametric one-sided  tolerance upper limit  <cit>  on the r2fitness distribution of best chromosomes from num.runs with p = 1% and p = 5% for ga-ols and ga-mm, respectively, and α =  <dig>  . the interpretation is that with confidence level 1-α not more than % of the best chromosomes have r2fitness values exceeding this limit. to be able to calculate these tolerance limits the requested number of runs was lnαln1−p+ <cit> . this requirement was met for num.runs = 100 ≥  <dig>  and num.runs = 500 ≥  <dig> for ga-mm and ga-ols, respectively. the goal fitness was then calculated as the mean of the cv tolerance upper limits:

 goal.fitness=∑i=115tol.upperi/ <dig>  

which equals goal.fitness =  <dig>  for ga-ols and goal.fitness =  <dig>  for ga-mm. for the calculation we used the r package tolerance  <dig> . <dig>  <cit> .

ga-ols vs. ga-mm: variable selection
ga-ols and ga-mm variable selection were performed on the clonal genotype-phenotype database using the ga parameters as specified in the above sections. the percentage of runs that failed reaching the goal.fitness with max.generations =  <dig> was 16% and  <dig> % for ga-ols and ga-mm, respectively.

figure  <dig> shows the relation between the frequency of the variables selected in the ga using ols and mm. while frequency differences were clearly observed , a strong correlation was obtained . eight integrase mutations were selected as variables in all  <dig> ga solutions for both ga-ols and ga-mm: 92q, 97a, 143g, 143r, 148h, 148k, 148r, 155h. this number would possibly be lower when increasing num.solutions, leading to non-selection for a few ga solutions. this was now already the case with num.runs =  <dig> for 66k  and 121y .

ga-ols and ga-mm variable selection vs. lasso
figure  <dig> shows the comparison of the ga-ols and ga-mm ranking with the lasso top  <dig> ranking of variables, shown on the x-axis. the variables selected are integrase mutations, indicated as primary/secondary/other. primary and secondary mutations have been associated with ral resistance in  <cit> . note that whereas a single primary mutation causes ral resistance, the effect on resistance of secondary mutations not in a combination with a primary mutation is minor  <cit> . in figure  <dig>  most of the primary and secondary mutations had a high ranking for ga-ols, ga-mm and lasso. however, some of the ‘other’ mutations such as 66k, 121y, 143g and 155s with presence in one or more of the publically available genotypic algorithms: anrs , rega , and stanford , had a lower ranking for lasso. we note that 66k, 121y and 155s were introduced in the database as site-directed-mutants not in a combination with other mutations  <cit> , and lasso was less sensitive in selecting these. another observation was that for lasso, the secondary mutations 140a and 140s were ranked higher than the primary mutations. also, mutations not listed by any of the public algorithms such as 6e, 125a, and 200l, had a higher ranking for lasso in comparison to ga-ols and ga-mm. oppositely, one of the “other” integrase mutations ranked higher by ga-ols and ga-mm, and not listed by any of the public genotypic algorithms was 84l. in  <cit>  we already discussed that its selection may result from a more complex interaction of three secondary mutations with which 84l co-occurred in the clones of one clinical isolate.

when we compared the ga-ols ranking with the ga-mm ranking , a relatively low ranking was seen e.g., for ga-ols for 140a and 155s, which favours ga-mm for its interpretation.

ga-ols-mmi vs. ga-mm-mmi vs. lasso: r <dig> performance on test set  <dig> and test set 2
in tables  <dig> and  <dig> are the results of the r <dig> performance comparison of ga-ols-mmi, ga-mm-mmi, and lasso on the two test sets with n =  <dig> clinical isolates and n =  <dig> site-directed mutants, respectively. models containing the top15-18-21-24-27- <dig> or all variables as selected by lasso, ga-ols and ga-mm were considered. note that as randomness is incorporated in the ga optimization techniques there are more mutations with presence in at least one of the ga solutions, m =  <dig> and m =  <dig> for ga-ols and ga-mm respectively, compared to m =  <dig> mutations with absolute value of the regression coefficients above zero in the lasso solution path.
 <dig> 
performance on test set 1


variable selection

variable estimation
all 
m 
variables
a
am is the number of variables with presence in the ga solutions or with abs >  <dig> in the lasso solution path. bnot calculated due to singularity.

cno model with exactly  <dig> mutations.

in bold the highest r <dig> per row is indicated.
 <dig> 
performance on test set 2


variable selection

variable estimation
all 
m 
variables
a
am is the number of variables with presence in the ga solutions or with abs >  <dig> in the lasso solution path. bnot calculated due to singularity.

cno model with exactly  <dig> mutations.

in bold the highest r <dig> per row is indicated.

on test set  <dig>  using mm for the variable estimation had a slightly better r <dig> performance than using ols, for all models considered. note that this was not the case in the cross-validation  where ols r2cv performance was higher, possibly due to the inclusion of multiple clinical isolates from the same patient. however, as patient information was not given for the training set, we could not take this into account. for the top15/top <dig> models containing the smallest number of variables, the best performance was seen for ga-mm-mmi <dig> . for the top21- > all models with more variables considered, the best performance was seen for ga-ols-mmi <dig> . when estimating all ga-ols/ga-mm variables, the worst performance was seen for mmi <dig>  where noise variables were clearly overweighted. for lasso, the best r <dig> performance on test set  <dig> was obtained using mm for the variable estimation for the top15- > top <dig> selection of variables . for lasso top27- > all, the best r <dig> performance was obtained using the lasso shrinkage coefficients .

on test set  <dig>  for the sparse models the best performance was observed for lasso-ols top <dig> , ga-mm-mm top <dig> , and ga-mm-ols top <dig> . for the top21- > all models, the best performance was seen for lasso . in contrast to the results for test set  <dig>  the mmi <dig> r <dig> performance was now found to be higher than for mmi <dig>  for the ga-ols/mm models. the reason is that while test set  <dig> consisted of clinical samples, with  <dig> % not containing any of the primary ral resistance mutations  <cit> , test set  <dig> consisted of site-directed mutants containing most of the known resistance patterns but lacking any noise variables as found in clinical samples. nevertheless, on test set  <dig>  the ga-mm r <dig> values were found to be better than for ga-ols, confirming that a better selection of variables as made by ga-mm  led to a better performance on unseen data.

therefore, on the example training set in this article we would favour the ga-mm-mmi top <dig> model. based on the performance on test set  <dig>  for the mmi variable estimation re-fitting using mm may be preferred over mmi1-mm.

CONCLUSIONS
in this article, we extended our ga variable selection methodology to mixed models which account for clustering in the data. using cross-validation, we optimized the ga parameter settings taking also computational efficiency into account. for the worked-out example, all settings could be taken equal for ga-ols and ga-mm, with exception of goal.fitness for which we used a marginal r <dig> definition. the model parameters for prediction could then be estimated using mmi-mm  on the ga solutions obtained from  <dig> ga runs. when testing lasso, ga-ols and ga-mm on two unseen data sets, all methods had good performance. when imposing a parsimony restriction for better interpretability of the model, the ga-mm-mmi top <dig> model had better predictive accuracy  than ga-ols and lasso.

in summary, we belief that ga-mm-mmi is a direct approach to derive a sparse and interpretable model for making predictions with good accuracy on small data sets with clustered observations and a large number of candidate variables, where chance of overfitting with standard regression techniques is high.

availability and requirements
project name: ga-mm-mmi.

project home page: http://sourceforge.net/projects/ga-mm-mmi.

operating system: platform independent.

programming language: r ≥  <dig> . <dig>  perl, matlab.

other requirements: requires galgo  <dig> . <dig>  <cit> .

license: gnu gpl.

any restrictions to use by non-academics: none.

competing interests
the authors declare that they have no competing interests

authors’ contributions
kvdb developed the ga-mm-mmi approach, performed all analyses and wrote the manuscript. gv conceived of the study, assisted in its design, and revised the manuscript. hvv assisted in study design. all authors read and approved the final manuscript.

supplementary material
additional file 1
ga parameter settings and computational efficiency. computational efficiency is taken into account by setting the ga parameters one by one: i and ii: pm and pc, iitournament.size, iiimax.generations, ivchrom.size, vnum.runs . pre-set values are used for the parameters to be optimized later in the process. for deriving the ga parameters in iii - > v we used  <dig> × 5-fold cross-validation.

click here for file

 additional file 2
r code. ga-mm-mmi source code in r programming language .

click here for file

 acknowledgements
the authors would like to thank the anonymous reviewers for their constructive comments to improve the manuscript. financial support from the iap research network #p7/ <dig> of the belgian government  is gratefully acknowledged.
