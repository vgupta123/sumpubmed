BACKGROUND
some of the most important steps in the analysis of scientific literature are related to the extraction and normalization of genes and proteins in the text and their association with the particular entry in a corresponding biological database. these are known as gene/protein recognition and normalization tasks, respectively, and are common preceding steps to complex text mining tasks.

the main difficulties relating to gene/protein recognition and normalization tasks are the large number of existing gene and protein entities and a lack of rules concerning nomenclature, or the resistance of the scientific community to its use  <cit> . some entities coincide with common english words , which complicates their detection in free-form text. in addition, nomenclature can appear as long descriptive names  or as acronyms , making normalization difficult. furthermore, some existing biological entities are known by more than one name and some newly-discovered entities have been assigned a name that is already in use for an existing gene or protein.

for gene normalization, different organisms might require different strategies  <cit>  or specific curated dictionaries  <cit> , depending on the complexity of their nomenclature and the degree of ambiguity in the assigned synonyms. this is a problem because a name may or may not refer to distinct entities of the same organism. gene/protein extraction and normalization tasks are extremely important, and have received much attention from the scientific community. biocreative evaluation  <cit>  is one example of a community-wide effort to evaluate text mining systems applied to the field of biology.

many solutions have been proposed for gene/protein recognition  <cit>  and normalization  <cit>  tasks. there are freely available taggers, but a mix of them is desirable in order to extract the maximum mentions of an entity from a text. for gene/protein extraction, banner  <cit> , abner  <cit>  and genia  <cit>  produce good results based on conditional random fields  <cit> , as well as the u-compare framework  <cit> . web available systems including gnat  <cit>  and whatizit  <cit>  are available for normalization tasks. despite research into the development of gene/protein recognition and normalization methodologies, the search continues for reliable systems and dictionaries of synonyms that can be easily integrated into more general text mining systems.

moara, which comes as a freely available java library, could be an alternative to these systems. gene/protein recognition is carried out by a case-based reasoning approach , and a machine learning methodology that uses an organism-independent strategy is proposed  for normalization steps. the normalization procedure is currently available for saccharomyces cerevisiae , mus musculus , drosophila melanogaster  and homo sapiens , but can be trained with new organisms. the results presented in the supplementary material demonstrate the suitability of these strategies for gene/protein tagging and normalization tasks.

implementation
the moara project is a java library oriented to gene/protein recognition and normalization tasks, carried out by cbr-tagger and ml-normalization, respectively. the system makes use of some mysql databases and three external libraries: the weka machine learning tool  <cit> , secondstring http://secondstring.sourceforge.net/ library for string distance metrics, and abner  <cit>  as an additional tagger for the extraction of mentions.

mysql databases store data that have been learned by the system during training phases and external data that are necessary for some of the functionalities of the system. the four databases in moara are listed below:

• moara: contains general and biological data that are of use for the functionalities in the project. this database holds the data related to stopwords http://moara.dacya.ucm.es/download.html, biothesaurus biomedical terms http://pir.georgetown.edu/pirwww/iprolink/biothesaurus.shtml and a list of all organisms present in entrez gene taxonomy http://www.ncbi.nlm.nih.gov/taxonomy/, and is essential for all functionalities of the moara project.

• moara_mention: contains data  that are learned during the training step of cbr-tagger; it is used for extracting gene/protein mentions from texts.

• moara_gene: contains data related to the genome, and a dictionary of synonyms of the organisms under consideration. the current version supports yeast, mouse, fly and human. this data are used for both the matching procedure and the disambiguation strategy of the gene/protein normalization task.

• moara_normalization: contains data related to the transformations that have been applied to the gene/protein synonyms in order to compose the features that take part in the machine learning matching procedure of the normalization task.

this section describes the methodology that was used in the development of both systems, as well as the details of the available functionalities in version  <dig> . <dig> of the moara project. for the sake of simplicity only a straightforward example will be shown. the documentation page http://moara.dacya.ucm.es/documentation.html supplies complete code examples.

example of use
to demonstrate the functionality of moara, the abstract of a pubmed document  has been used to extract mentions and normalize them. figure  <dig> presents a code example of the extraction and normalization tasks. a free text is provided as the input and the mentions and their respective normalized gene/protein identifiers are returned as an array of the genemention objects. in this example we extracted the mentions using both cbr-tagger and the wrapper of the abner tagger which is included in our library . moara does not extract the title and abstract of the document directly from the medline repository; reliable, freely available tools can be used for this purpose, such as lingpipe http://alias-i.com/lingpipe/. the genemention object encapsulates all the data related to the extracted mentions, the candidates considered during the disambiguation step, and the one  that has  been chosen as the best candidate.

for the normalization function, the array of extracted mentions must be provided, as well as the original text, which is necessary for the disambiguation step. the mentions may be extracted by a tagger, the ones provided at moara project - abner and cbr-tagger - or any external one. moara does not restrict the use of any tagger. in the normalization procedure, a matching procedure is carried out and one or more candidates can be chosen, normally the one with highest score  or the top scored ones according to an automatically defined threshold .

extraction of mentions
gene/protein recognition is carried out by the cbr-tagger  <cit> , a tagger based on cased-based reasoning  foundations. case-based reasoning  <cit>  is a machine learning method that consists of learning cases from training documents and retrieving the case most similar to a given problem during the testing step. from this case, the final solution is obtained. one of the advantages of the cbr algorithm is the possibility, by means of checking the features that compose the case-solution, of getting an explanation of why a certain category has been assigned to a given token. in addition, the base of cases can be used as a natural source of knowledge from which to learn extra information about the training dataset, i.e., the number of tokens  that share a certain value of a feature. moara provides the possibility of extracting mentions from a text using cbr-tagger and training it with extra documents. in addition, a wrapper of the abner tagger  <cit>  was developed in order to use its mentions without the need to learn the abner library.

training the cbr-tagger
there are five built-in models in the "moara_mention" database; one model trained with the biocreative  <dig> gene mention task alone and four models trained with the latter in combination with the biocreative task 1b corpora for the yeast, mouse and fly and the three. this section explains the training strategy of the system and how it can be trained for extra documents.

first, several cases of the classes considered here  are stored in two bases, one storing known and the other storing unknown cases  <cit> . the known cases are used by the system to classify tokens that are not new, i.e. tokens that have appeared in the training documents. the attributes used to represent a known case are the token itself, the category of the token , and the category of the preceding token . each token represents a single case, and repetition of cases with exactly the same attributes is not allowed. in order to account for repetitions, the frequency of the case is incremented to indicate the number of times that it appears in the training dataset.

the unknown base is used to classify tokens that were not present in the training documents. the unknown cases are built over the same training data used for the known cases. instead of saving the token itself, a shape of the token is kept in order to allow the system to classify unknown tokens by looking for cases with similar shape. therefore, as in the known cases, the attributes that have been used to represent the unknown cases are the shape of the token, the category of the token , and the category of the preceding token . the system saves these attributes for each token in the sentence as an unknown case. as with known cases, no repetition is allowed and instead the frequency of the case is incremented.

the shape of the token is given by its transformation into a set of symbols according to the type of character found: "a" for any upper case letter; "a" for any lower case letter; "1" for any number; "p" for any token in a stopwords list; "g" for a greek letter; "$" for identifying 3-letter-prefixes and 4-letter-suffixes in a token. for example, "dorsal" is represented by "aa", "bmp4" by "aa1", "the" by "p", "cgki" by "aaaa", "patterning" by "pat$a"  and "activity" by "a$vity" . the symbol that represents an uppercase letter  can be repeated to take into account the number of letters in an acronym, as shown in the example above. however, the lowercase symbol  is not repeated; suffixes and prefixes are considered instead. these are automatically extracted from each token by considering the last  <dig> letters and first  <dig> letters, respectively; they do not come from a predefined list of common suffixes and prefixes.

cbr-tagger has been trained with the training set of documents made available during the biocreative  <dig> gene mention task  <cit>  and with additional corpora to improve the extraction of mentions from different organisms. these extra corpora belong to the gene normalization datasets for the biocreative task 1b  <cit>  corresponding to yeast, mouse and fly gene/protein normalization. these training datasets will be referred to hereafter as cbrbc <dig>  cbrbc2y, cbrbc2m, cbrbc2f and cbrbc2ymf, depending if they are composed by the biocreative  <dig> gene mention task corpus alone or combined with the biocreative task 1b corpus for the yeast, mouse, fly or all three, respectively. two functionalities are available in cbr-tagger: extraction of the mentions with the built-in models and training a new cbr-tagger with extra documents.

cbr-tagger can be trained with extra corpora if the documents are provided in the format used in the biocreative  <dig> gene mention task, in which the text of the documents and the annotated gene/protein mentions are provided in two distinct files. for example, the sentence below  was part of the biocreative  <dig> gene mention task training corpus identified by p00030937a <dig> 

p00030937a <dig> sgpt, sgot, and alkaline phosphatase concentrations were essentially normal in all subjects.

the mentions that are present in the sentence are listed as follows:

p00030937a0119| <dig> 3|sgpt

p00030937a0119| <dig> 8|sgot

p00030937a0119| <dig> 31|alkaline phosphatase

the position of the mention in the original text is represented by the position of the first and last characters of the token, with no consideration of the spaces in the original text. additionally, cases that have been learned for cbr-tagger beforehand, from the aforementioned five training datasets, can also be considered. cbr-tagger provides a method for copying cases automatically, without the need to train the tagger for the latter corpora. more than one tagger can be trained, although a short identifier must be provided for use as part of the name of the tables in the database.

the codes below illustrate the training of cbr-tagger using the data generated by training the tagger with the biocreative  <dig> gene mention dataset  <cit> , and documents provided in the specified files, in the format discussed above:

. . .

traintagger tt = new traintagger();

tt.usedatamodel;

tt.readdocuments;

tt.readannotations;

tt.train();

. . .

extraction of mentions with cbr-tagger
during the testing step, the system searches the known and unknown bases for the case most similar to the problem and a classification decision is given by the class of the case selected as being most similar. the classification procedure works in a similar way to the construction of cases. the text is tokenized and a sliding window is applied in the forward direction and then in the backward direction. in each case, the system keeps track of the category of the preceding token , gets the shape of the token  and attempts to find a case most similar to it in the base. if more than one case if found, the one with the higher frequency is chosen.

the search procedure is separated into two parts, one for the known cases and another for unknown cases. in this search strategy, priority is given to the known cases. for known cases, the token is saved exactly as it appeared in the training documents, and the classification is more precise than using unknown cases. the system also separates the token into parts in order to classify them individually. although cbr life cycle  <cit>  allows the re-training of the system with the experience learnt from retrieved cases, the cbr-tagger does not include this step.

the "moara_mention" database contains five built-in models; one model trained with the biocreative  <dig> gene mention task alone and in combination with the corpora for the yeast, mouse and fly, and three trained with biocreative task 1b. therefore five constants are available according to the set of documents used for training the tagger. line  <dig> in figure  <dig> shows an example of the function that extracts the mention using the tagger trained with the cbrbc <dig> dataset. there is no requirement to retrain the system; all these models are included by default in the specified database. the extraction method receives two string arguments: the predefined or user-specific model used to train the tagger and the text from which the mention are to be recognized.

when adding a new organism to moara, the user does not need to train cbr-tagger with specific documents; it is possible but not mandatory. we have implemented these specific models for the yeast, mouse and fly because these were the organisms for which annotated corpora are available from biocreative tasks. the user can always use the cbrbc <dig> model or any other tagger that is available.

extraction of mentions with abner
we have developed a wrapper for the abner tagger  <cit>  in order to allow a mix of taggers to be used when extracting mentions, with no need to learn the details of an extra library. abner comes with two models based on the corpora of the nlpba http://www-tsujii.is.s.u-tokyo.ac.jp/genia/ertask/report.html and biocreative task 1a challenges. we have constructed five more models for abner, namely cbrbc <dig>  cbrbc2y, cbrbc2m, cbrbc2f and cbrbc2ymf, by training it with the same datasets that were used for cbr-tagger. the code below illustrates the use of the abner wrapper for a given text:

. . .

abnertagger abner = new abnertagger;

arraylist<genemention> gms = abner.extract;

. . .

normalization of mentions
the normalization task is accomplished by ml-normalization, which consists of a flexible and a machine learning matching approach as well as a disambiguation strategy based on the text under consideration. organism-specific data previously extracted from the genome databases are also required at this step. more importantly, ml-normalization uses freely available minimum organism-specific data. this is especially useful if no specifically tailored dictionary is available. the normalization step was trained for the four supported organisms considered here: yeast, mouse, fly and human. for the matching strategy, a flexible and a machine learning based matching were available.

normalizing mentions by flexible matching
flexible matching is accomplished by exact matching between the mention extracted from the text and the synonyms in the dictionaries. it is flexible because the mention and the synonyms are previously pre-processed by dividing the token according to punctuations, numbers, greek letters, and biothesaurus terms, and finally ordering the parts of the token alphabetically. the initial lists of synonyms for the four organisms were available in the two editions of the biocreative challenge: biocreative task 1b  <cit>  for yeast, mouse and fly; and biocreative  <dig> gene normalization task  <cit>  for humans. the code presented in figure  <dig>  illustrates the flexible matching normalization for a given text.

for both flexible and machine learning matching, the normalization method receives the array of mentions  and the original text, which can be used for the disambiguation strategy, as illustrated in figure  <dig> . the output of the normalization procedure is stored in the same array of "genemention" objects, and each object can be associated with one or more "geneprediction" objects that keep track of the candidates that were matched to the respective mention according to the matching strategy under consideration. however, a mention  may have no associated candidates.

using the dictionary of synonyms
we have made available a list of the pre-processed synonyms used in our flexible matching strategy http://moara.dacya.ucm.es/download.html. this allows the option of using our dictionary of synonyms with other matching procedures. however, it should be noted that the same pre-processing procedure must be carried out for the mentions under consideration. we have made available a specific function for this task, which receives the text of the mention and returns a list of variations of the specified text, as shown in the example below:

. . .

organism yeast = new organism;

exactmatchingnormalization app = new exactmatchingnormalization;

string text = "alpha subunit of the rod cgmp-gated channel";

arraylist<string> variations = app.getflexiblementions;

. . .

the variations of a mention  are generated by applying a set of editing procedures to the text, such as breaking the text according to parentheses, numbers and greek letters, ignoring punctuations and symbols, and filtering tokens such as stopwords and biomedical terms. in order to illustrate the tokenization procedure, the input "ypk <dig> and ykr <dig> genes" would be separated according to the parenthesis into "ypk <dig> and ykr <dig> genes" and "ypk2". the former would be separated into smaller parts, as long as the part is a valid token, i.e., it is not a biothesaurus term or a stopword. thus, the "ypk <dig> and ykr <dig> genes" would be separated into "ypk1" and "ykr2".

biomedical terms are filtered in such a way that the number of terms in the biothesaurus that are ignored from the text is increased according to their frequency in this lexicon. only those terms with frequencies higher than  <dig>  are filtered before the procedure is repeated for terms with frequencies higher than  <dig> ,  <dig>   <dig>   <dig> or zero . this procedure generates many variations of the original mention .

regarding the biothesaurus, we consider the complete lexicon in our filtering step, i.e., the files identified as "biomedical terms", "chemical terms", "macromolecules" , "common english" and "single non-word tokens". we perform filtering for the terms identified as "gn" and "pr", as they indicate tokens that refer to genes and proteins.

training of the flexible matching normalization
moara is trained for using the flexible matching strategy with four organisms: yeast, mouse, fly and human. however, new organisms may be added to the system by providing general available information such as the code of the specified organism in ncbi taxonomy. for example, in order to train the system for bos taurus, the identifier "9113" must be used. the table "organism" in the "moara" database contains all the organisms present in ncbi taxonomy. the system will automatically create the necessary tables related to the new organism, including the table that saves information related to the gene/protein synonyms. these tables are easily identified in the database as they are preceded by a nickname such as "yeast" for saccharomyces cerevisiae; in the case of bos taurus, "cattle" would be an appropriate nickname. minimum organism-specific information must be provided, for example the "gene_info.gz" and "gene2go.gz" files from entrez gene ftp ftp://ftp.ncbi.nih.gov/gene/data/, but no gene normalization class needs to be created. an example of training the system for bos taurus is outlined below:

. . .

organism cattle = new organism;

string name = "cattle";

string directory = "normalization";

trainnormalization tn = new trainnormalization;

tn.train;

. . .

normalizing mentions by machine learning matching
in addition to flexible matching, an approximated machine learning matching is provided for the normalization procedure. the strategy is based on the methodology proposed by tsuruoka et al.  <cit> , but using the weka implementation of the vector machines , and random forests or logistic regression as the machine learning algorithms. in the proposed methodology, the attributes of the training examples are obtained by comparing two synonyms from the dictionary according to predefined features. when the comparison is between two different synonyms for the same gene/protein, it constitutes a positive example for the machine learning algorithm; otherwise, it is a negative example.

the training of the machine learning matching is a three-step procedure in which the data produced in each phase are retained for further use. all the synonyms of its dictionary are represented with the features under consideration, hereafter called "synonym-features": 3-letter-prefix, 3-letters-suffix, a number that is part of the synonym, a greek letter that is part of the synonym, bigram and trigram and the shape of the synonym, the same features used in the cbr-tagger. in the second step, pairs of synonyms are chosen on the basis of their similarity, or more precisely, on the percentage of bigrams and trigrams they have in common. this is a time-consuming step and the data obtained are stored for further use. several experiments have been carried out for different values of the percentage of similarity  for both bigram and trigrams. during the third step the system extracts the features that represent the comparison of the synonym-features of the previously selected positive and negative pairs of synonyms, hereafter called "pair-features". these features are indicative of equal prefix, suffix, number and greek letter, bigram/trigram similarity, string similarity and shape similarity. string similarity is established using the secondstring java library and experiments have been accomplished for the following string distances  <cit> : levenstein, jaro-winkler, smith-waterman, monge-elkan and soft-tfidf. these features are used for training the classifiers with one of the available machine learning algorithms: support vector machines, random forests or logistic regression.

during the testing step, when mentions are presented to be normalized, the system repeats the three-step procedure for each mention: the features of the mentions are extracted ; the system selects the candidate synonyms according to a certain percentage of bigram/trigram similarity between the synonyms and the given mention; the features of the selected pairs  are extracted to be presented to the machine learning algorithm and to be classified as positive or negative. if a pair of mention-synonyms is classified as positive, the identifier of the respective synonym is set as the gene/protein identifier of the given mention and the normalization task is over. a disambiguation strategy is carried out when more than one pair of mention-synonyms are classified as positive, allowing the best identifier to be chosen from the candidates.

listed below are the parameters that can be chosen when using machine learning matching for the gene/normalization task:

• percentage similarity: any value between  <dig> and  <dig> ;

• selection of the pair of mention-synonyms: bigram or trigram similarity, or both ;

• machine learning algorithm: support vector machines , random forests or logistic regression;

• set of pair-features: all of them  or just the best of them  .

• string similarity method: levenstein, jaro-winkler, smith-waterman , monge-elkan or soft-tfidf.

the default values shown in the list of parameters above represent the configuration of the system that works reasonably well for the four organisms we have considered . therefore, moara comes with four previously learned models using the default values, one for each of the organisms under consideration. the example below demonstrates how to normalize the previously extracted mention using machine learning matching.

. . .

arraylist<genemention> gms = gr.extract ;

machinelearningnormalization gn = new machinelearningnormalization;

gms = gn.normalize;

. . .

training of the machine learning matching
training the machine learning matching is possible for values of parameters outside the built-in models, as well as for new organisms. in the latter case, the procedure to be used is the same as the one presented for flexible matching, with the exception that we must ask the system to generate data for the machine learning matching as well. an example is shown below:

. . .

organism cattle = new organism;

string name = "cattle";

string directory = "normalization";

trainnormalization tn = new trainnormalization;

tn.usemachinelearningnormalization();

tn.train;

in order to normalize the mentions using a model based on parameters others than the default ones, the system must first be trained to create the specified model. this procedure can be time-consuming depending on the number of synonyms for the organism under consideration as well as the parameters that have been chosen. the code below demonstrates how to train a model for bos taurus according to the specified parameters:

. . .

organism cattle = new organism;

machinelearningmodel mlm = new machinelearningmodel;

mlm.setpctsymilarity;

mlm.setfeatures;

mlm.setstringsimilarity;

mlm.setmachinelearningalgorithm;

mlm.setgramselection;

mlm.train();

. . .

the "machinelearningmodel" class provides functions for setting any of the parameters discussed above. the system would be ready for normalizing the mentions using the previously trained model. in order that the system uses the model under consideration rather than the default one, the parameters for the "machinelearningnormalization" class must be explicitly specified, as carried out for the "machinelearningmodel" class. the example below illustrates how to normalize the mention for bos taurus using the previously trained model:

. . .

arraylist<genemention> gms = gr.extractbc2;

machinelearningnormalization gn = new machinelearningnormalization;

gn.setpctsymilarity;

gn.setfeatures;

gn.setstringsimilarity;

gn.setmachinelearningalgorithm;

gn.setgramselection;

gms = gn.normalize;

. . .

disambiguation of identifiers
when more than one identifier is obtained for a mention, a disambiguation procedure is used to decide which is more likely to be correct. the selection decision is performed by comparing the similarity between the abstract of the article and a document representative of each of the genes/proteins . the gene-document is constructed by compiling information extracted from several databases, such as sgd http://www.yeastgenome.org/ for yeast, mgi http://www.informatics.jax.org/ for mouse, flybase http://flybase.org/ for the fly and entrez gene http://www.ncbi.nlm.nih.gov/sites/entrez?db=gene for humans. the fields collected for the construction of the gene-documents were symbols, aliases, descriptions, summaries, products, phenotypes, relationships, interactions, gene ontology http://www.geneontology.org/ terms related to the gene and their names, definition and synonyms.

three disambiguation methodologies can be selected. the first considers the cosine similarity  <cit>  between the article and the gene-documents, while the second takes into account the number of common tokens between the two texts. in the first case, the gene-document with the highest cosine similarity is chosen as the correct identifier for the mention. in the second case, the gene-document with highest number of common tokens is chosen as the best solution. the third methodology, based the decisions on both the higher product of the cosine similarity and the number of common tokens, is the default option.

choosing between single  and multiple disambiguation selection is possible at this step. the single option selects only the best candidate; the multiple selection selects the top scored ones according to a given threshold. the threshold is not a fixed value; it is automatically calculated for each mention and it is given by 50% of the value of the highest score. for example, a mention was matched to four candidates with scores of  <dig> ,  <dig> ,  <dig>  and  <dig> . using single disambiguation, the only answer is the candidate with best score,  <dig> . using multiple disambiguation, the threshold is automatically calculated as 50% of the highest score, therefore  <dig> . the candidates with scores  <dig> ,  <dig>  and  <dig>  would be returned by the system as their scores are higher than the threshold. the code of figure  <dig>  shows an example of how to normalize the mention with flexible matching using a disambiguation strategy distinct from the default.

RESULTS
during development of the system many experiments were carried out in order to decide the final configuration of the system. experiments concerning gene/protein recognition considered the many corpora that have been used for training cbr-tagger and the results are presented in table  <dig>  the best results during the biocreative  <dig> gene mention task  <cit>  and the results with the abner tagger are included in this table. we have trained the abner tagger with  <dig>  sentences of the training corpus and evaluated over  <dig>  sentences of the test dataset. both the extracted mentions and the evaluation output are available for download at the moara website http://moara.dacya.ucm.es/download.html. although the results presented for the gene/protein mention extraction are below the best biocreative results, this task is considered as a preceding step for gene/protein normalization, and the improvement of this normalization is the main goal of a tagger. regarding the errors, false negatives in the gene/protein recognition step are not always a problem since the normalization task may be preformed successfully if others  mentions of the same gene/protein have been able to be extracted from the text.

the biocreative  <dig> gene mention test set consists of  <dig>  sentences. the first five numerical lines represent the results  according to the corpus used for training the cbr-tagger: biocreative  <dig> gene mention task only  or combined with the biocreative  <dig> task 1b for yeast , mouse , fly  or all three . the last two lines present the best results of the biocreative  <dig> gene mention task and banner and abner results when trained with the latter training corpus.

for the normalization task, we evaluated the best mix of taggers, taking into account abner and banner taggers as well as cbr-taggers. experiments were carried out in order to decide the best disambiguation strategy as well as the parameters of the machine learning matching. the results for the normalization task using the configuration of the system that performs best for all the organisms considered here are presented in table  <dig>  detailed results for the recognition and normalization tasks as well as an analysis of the mistakes are presented as supplementary material http://moara.dacya.ucm.es/results.html. the best results for yeast and fly were obtained using the biocreative task 1b  <cit>  and for mouse and human were obtained using gnat  <cit> . the geno  <cit>  system reports an overall f-measure performance of  <dig>  over the biocreative  <dig> test set.

best results by organism for the gene/protein normalization task evaluated with the test corpora of the biocreative  <dig> task 1b  and biocreative  <dig> gene normalization task . these corpora consist of  <dig> pubmed abstracts each for yeast, mouse and fly, and  <dig> documents for human. the results were produced using a mix of abner, banner and cbr-tagger , flexible matching, and single disambiguation by cosine similarity multiplied by the number of common words. the machine learning configuration is the one that performs reasonable well for all the organisms examined here and uses support vector machines as the main algorithm, the f <dig> set of features , pairs of synonyms selected by  <dig>  trigram and bigram similarity and smith-waterman for the string similarity feature. the best results for each organism in both competitions are shown.

although machine learning matching often produces poorer results than exact matching, it is a useful alternative when working with new organisms where the user has no indication of the performance of exact matching. in addition, machine learning produces better recall performance than exact matching, although it is not as precise. in cases where higher recall is needed, machine learning is the best alternative to use.

the results demonstrate that the methodology implemented in moara is capable of solving gene recognition and normalization tasks in a simple and effective manner. although cbr-tagger does not produce the best results when used alone, when combined with other taggers , our experiments  showed that it improves the final results. in the case of normalization approach moara does not reach the levels of other existing systems. however, as far as we know, no other gene/protein normalization tool is freely available for integrating and for training with new organisms. this is a strong point in moara since it allows plenty of room for improvements.

moara utilizes freely available organism-specific data and no tuning was executed for any of the organisms investigated. the possibility of training the system for more organisms makes it a flexible alternative. therefore, moara is an asset for those who wish a simple but practical solution to the primary phases of general text mining.

CONCLUSIONS
the java library presented here represents a good alternative for those scientists working in the text mining field, where gene/protein mention and normalization is required during the process. the performance of moara is below that achieved in biocreative competitions, in which the participating systems have made use of specific tailored knowledge for each organism considered, but this is not always available to the scientific community. we have constructed a system that can perform for any organism where minimum organism-specific information is supplied.

we use organism-specific information from different sources and different formats, but no manual curation is performed for the normalization task. rather than curating the dictionary for each organism, we use those provided by the biocreative's challenges or by ncbi. some existing systems  <cit>  use specific tailored information for organisms that produce very good results. however, these dictionaries are not freely available. the free availability and the ease of use of the java library, as well as the possibility of training the cbr-tagger and the ml-normalization with extra documents or organisms, respectively, makes it a necessity for any text mining system.

the inclusion of moara as an open-source application in sourceforge is intended to allow the community to change, modify and evolve moara according to their needs. it is expected that training or using moara with more specific enriched dictionaries will significantly improve precision and recall. systems that report an overall gene normalization f-measure performance of over 80% are not freely available; geno  <cit>  is not available for download and gnat  <cit>  is only available through the website. neither are open-source systems and they are not easily trained, expanded or integrated into another text mining tool such as moara. as supplementary material http://moara.dacya.ucm.es/suppl_material_bmc.html, a comparative table of the available gene/protein recognition and normalization tools has been built in order to highlight some of the important features of moara. in view of the importance of integration capabilities, moara will be fully available in the future in the biocreative meta server  <cit>  and in the u-compare framework  <cit> , for which the cbr-tagger is already integrated, and the gene/protein normalization procedure will be extended with other organisms, such as the ones included in entrez gene  <cit>  and uniprot  <cit> . some organism-specific databases might also be considered for the most important species, such as hugo  <cit>  for human.

as this system does not use features that are specific to the gene/protein domain, it might be extended to others domains, although depending on their complexity the cbr-tagger might be or not appropriate for this task. some types of entities might require more advanced natural language processing techniques, such as the part-of-speech tag or the use of parsers, while some others are better recognized with the use of specific lexicons, such as the diseases. cbr-tagger might be more appropriate to those domains which the entities have some similarities to the gene/protein, for example the entities whose names are composed by alphanumeric and symbols or that present some special suffixes or prefixes, in order to exploit the strength of the shape feature.

moara will be systematically updated to support new functionalities that could potentially help in the analysis of scientific texts. this tool has the potential to help research in this field using and adapting methods that are conceptually simple and powerful for the processing of texts but rather complex in their implementation.

availability and requirements
• project name: moara

• project page: http://moara.dacya.ucm.es/

• sourceforge page: http://sourceforge.net/projects/moara

• operating system: platform independent

• programming language: java

• other requirements: mysql, mysql jdbc connector, weka library , secondstring library  and abner tagger library .

• license: gpl

authors' contributions
mln, jmc and apm conceived and designed the study. mln designed and developed the software. mln and apm discussed and implemented the test cases. jmc and apm managed and coordinated the project. all authors participated in writing and revising the final manuscript. all authors have read and approved the final manuscript.

