BACKGROUND
approximate string matching is a fundamental, challenging problem in computer science, often requiring a large amount of computational resources. it finds applications in different areas such as computational biology, text processing, pattern recognition and signal processing. for these reasons, fast practical algorithms for approximate string matching are in high demand. there are several variants of the approximate string matching problem, including the problem of finding a pattern in a text allowing a limited number of errors and the problem of finding the number of edit operations that can transform one string to another. we are interested in the latter form in this paper.

the edit distance d between two strings a and b is defined in general as the minimum cost of any sequence of edit operations that edits a into b or vice versa. in this work we will focus on the levenshtein edit distance  <cit> , where the allowed edit operations are insertion, deletion or substitution of a single character, with each operation carrying a cost of  <dig>  the distance measure which uses this type of operation is often called the unit-cost edit distance and is considered the most common form. the weighted edit distance allows the same operations as the levenshtein edit distance, but each operation may have an arbitrary cost.

in the literature there exist a number of algorithms dealing with the calculation of the edit distance between two strings. the basic dynamic programming algorithm that solves the problem in o time and linear space has been invented and analyzed several times in different contexts  <cit> , published between  <dig> and  <dig>  early on there was an algorithm by masek and paterson  <cit> , building on a technique called the "four-russian paradigm"  <cit> , which computes the edit distance of two strings over a finite alphabet in time o. this algorithm is not applicable in practice, since it can outperform the basic algorithm only then the input size is exceeding  <dig> gb. all these algorithms can also be used to calculate the alignment of two strings, in addition to their edit distance. a modification of the basic algorithm by hirschberg  <cit>  allows the alignment calculation to be performed using linear space as well.

a few years later in  <dig>  ukkonen arrived at an o) time algorithm, using space o)  <cit> , where s is the edit distance of the two strings compared, creating a very efficient output sensitive algorithm for this problem. the following year, myers published an algorithm for the longest common substring  problem, which is similar to the edit distance problem, which has o log) time and linear space complexity  <cit> . in achieving this result, a generalized suffix tree of the input strings, supplemented by lowest common ancestor  information, has to be used, which renders the solution impractical and only of theoretical value. the practical version of that algorithm needs o) time. on the other hand, a variation of ukkonen's algorithm using o) space leads to an efficient, straightforward implementation, using recursion. lastly, the basic algorithm, although theoretically inferior, is the most commonly used, owing to its adaptability, ease of implementation, instruction value, and speed, the latter being a result of small constant factors.

in this paper we will present an o·min + m + n) time and linear space algorithm to calculate the edit distance of two strings, which improves on all previous results, the implementation of which is practical and competitive to the fastest algorithms available. the quadratic factor in the time complexity now becomes independent of the longest string, with the algorithm performing its best when the two strings compared differ significantly in size.

methods
definitions
in this section we closely follow the notation and definitions in  <cit> . let a = a1a <dig> ..an and b = b1b <dig> ..bm be two strings of lengths n and m respectively, over a finite alphabet Σ. without loss of generality, let n = m.

the edit operations defined in the previous section can be generalized to have non-negative costs, but for the sake of simplicity in the analysis of our algorithm we will concern ourselves only with the levenshtein edit distance. we also assume that there is always an editing sequence with cost d converting a into b such that if a cell is deleted, inserted or changed, it is not modified again. under these assumptions the edit distance is symmetric and it holds  <dig> ≤ s ≤ max. since n ≥ m and there is a minimum number of n - m insertions that need to be applied in transforming a into b, the last equation becomes n - m ≤ s ≤ n. the insertion and deletion operations are symmetric, since an insertion, when transforming a to b, is equivalent to a deletion in the opposite transformation, and vice versa. both operations will be referred to as indels.

the basic dynamic programming algorithm employed to solve the edit distance problem, invented in a number of different contexts  <cit> , makes use of the edit graph, an  ×  matrix  that is computed from the recurrence:

 d00=0dij=min⁡,di− <dig> j+ <dig> di,j−1+1),i>0 or j> <dig>  

this matrix can be evaluated starting from d <dig> and proceeding row-by-row or column-by-column. this process takes time and space o and produces the edit distance of the strings in position dmn. the cells of the matrix  have dependencies based on this recurrence, forming the dependency or edit graph, a directed acyclic graph that is shown in fig.  <dig>  all edit graph nodes will be referred to as cells and all graph edges  will be referred to as transitions.

to refer to the diagonals of  we number them with integers -m, -m +  <dig>  ...,  <dig>   <dig>  ..., n such that the diagonal denoted by k consists of those dij cells for which j - i = k. the diagonal n - m, where the final value dmn resides, is special for our purposes and we will call it main diagonal. the matrix cells between diagonals  <dig> and n - m  consist the center of the edit graph/matrix, the lower left triangle between diagonals - <dig> to -m will be called the left corner of the graph and upper right triangle between diagonals n - m +  <dig> and n will be called the right corner of the graph.

a path in the edit graph is a series of transitions connecting cells, similar to a path in a directed graph. whenever we generally refer to a path, we will assume that the final cell it reaches is dmn. the optimal path will be a path originating at d <dig>  and for which the sum of the costs of its transitions is minimal among all paths from d <dig> 

the concept
the basic dynamic programming algorithm evaluates unnecessary values of . this fact led ukkonen  <cit>  design an algorithm that is diagonal-based and computes cell values only between the diagonals - s and n - m + s. he also observed that di +  <dig>  j+ <dig> ∈ {di, j, di.j + 1} and therefore the values along a diagonal are non-decreasing.

both ukkonen  <cit> , for calculating the edit distance, and myers  <cit> , for calculating the length of the longest common substring of two strings, designed their algorithms with a common feature: the iterations in evaluating the edit graph cells were score based, as opposed to column or row based in the basic algorithm. in each step they would increase the edit distance d by  <dig>  starting at  <dig>  and evaluate all cells with values dij ≤ d, meaning cells reachable with edit distance d, often omitting cells not contributing to the next iteration, by considering transitions between cells where the values are incremented.

the algorithm we present here builds on all previous observations and the main iteration is score based as well. but we also make use of the following facts:

 <dig>  n - m indels are unavoidable.

 <dig>  additional indels are unavoidable when the optimal path strays away from the main diagonal.

 <dig>  certain cells do not contribute to the optimal path or their contribution is redundant.

points  <dig> and  <dig> follow from the fact that an indel is required to move to the next diagonal. at least n - m indels are required on any path that first reaches the main diagonal, and every time the path strays from the main diagonal, it must return to it.

in order to address the third fact, we will introduce the concept of dominance. we will say that cell dij dominates cell dkl if no path through dkl defines a better edit distance than the optimal path through dij. this implies that dij has an equal or better potential to belong to the optimal path  than dkl, and thus the latter and its paths do not need to be considered further.

some dominance relations between cells can be spotted easily. let us consider all possible paths starting from d <dig>  if a match exists between characters a <dig> and b <dig> , then we do not need to consider indel transitions from d <dig> to d <dig> and d <dig>  in that case actually, all cells d0k for  <dig> ≤ k ≤ n and dk <dig> for  <dig> ≤ k ≤ m are dominated by d <dig>  since a <dig> matches b <dig>  cell d <dig> obtains the value of  <dig>  then all cells d1k,  <dig> ≤ k ≤ n can obtain a value of k -  <dig> through a path traversing d <dig>  any path through d <dig> cannot result in a smaller value for cells d1k,  <dig> ≤ k ≤ n, since cells d <dig> k- <dig> have the same value. in a similar manner, cells in the second column starting at the third line are dominated by d <dig>  these arguments apply not only to d <dig> but to all dij in general, proving the following:

lemma  <dig>  a cell dij is dominated by di+ <dig> j+ <dig> if aj = bi.

let us now consider what happens when a <dig> ≠ b <dig>  in this case we can still find dominated cells in the second row and column, depending on the first matching character position in each. let us assume that the first character in a matching b <dig> is al,  <dig> ≤ l ≤ n. all cells d1k,  <dig> ≤ k ≤ l -  <dig> are dominated by d <dig>  for the same reasons that were described earlier. and a similar domination relation exists in the columns. before we generalize the dominance relation with a theorem, we will introduce a new scoring scheme to take advantage of the indel unavoidability, which will create another optimization criterion, monotonicity in the rows and columns of certain parts in our graph. for the new scoring scheme and for the rest of the description of our algorithm, we will divide our matrix into two parts, separated by the main diagonal. the first part includes the center and the left corner of the matrix, where the second part includes the right corner of the matrix, together with the main diagonal . the scoring scheme and the algorithm described further on will be analyzed on the part of the matrix left of the main diagonal, although all theory works symmetrically on the part right of the main diagonal, by substituting the rows with columns and vice versa.

the new scoring scheme, for the left part of the matrix, is implemented as follows: every vertical transition  incurs a cost of  <dig>  since it strays away from the main diagonal and creates the need of another horizontal indel to compensate. all horizontal transitions do not carry any cost. the match and substitution costs remain  <dig> and  <dig> respectively. to obtain the edit distance s, we add n - m to the value of cell dmn. the transformation is illustrated through an example in fig.  <dig> 

to guarantee the correctness of an algorithm based on that scoring scheme, we will now prove the following lemma:

lemma  <dig>  under the new scoring scheme, the edit distance of a and b remains unchanged.

proof. it has already been shown that the edit distance is defined by an optimal path of the fewest possible edit operations carrying a cost, resulting in the minimum score at dmn. we will prove the following two statements:

 <dig>  the score obtained from the optimal path remains unchanged and

 <dig>  no other path can lead to a sequence of fewer edit operations and thus a smaller score/edit distance.

to prove the first statement, we note the following: the number of match and substitution transitions in the optimal path does not alter the edit distance in the new scoring scheme, since the costs of these operations have not changed. with the optimal path starting at diagonal  <dig> and ending at diagonal n - m, there are n - m indels which can be omitted from our calculation, since with the new scoring scheme we add these at the end. the only remaining edit operations to examine are vertical indels left of the main diagonal and horizontal indels right of the main diagonal, which must be accompanied by compensatory horizontal and vertical indels in the respective parts, or the optimal path cannot end up in the main diagonal. since these indels come in pairs, with half of them carrying the cost of  <dig> and half the cost of  <dig> in the new scoring scheme, the final edit distance remains unchanged.

the second statement follows from the previous arguments, since any path under the new scoring scheme carries the same cost as before, so a new path with a better score than the previous optimal path score contradicts the optimality of the latter under the original scoring scheme.

since with the new scoring scheme horizontal transitions do not carry a cost, the values of cells in every row in the left part of the matrix are monotonically decreasing. the same holds for the columns in the right part of the matrix, which leads to the following:

corollary  <dig>  under the new scoring scheme, the values of cells in rows left of the main diagonal and in columns right of the main diagonal are monotonically decreasing as the indices of the corresponding cells increase.

let us now consider all cells in a specific row x, left of the main diagonal. values on this row are monotonically decreasing and we only need to keep the information of the first cells from the right where the values are changing , since the rest of the cells are dominated . now, if we have two consecutive dominant cells dxy and dxz on row x, with y < z and dxy = dxz +  <dig>  then the value of dxy can be propagated through a transition to row x +  <dig> only if a match exists between bx and ak, with y < k ≤ z. in order to be able to locate such matches in constant time, we will create lookahead tables for each letter of the alphabet Σ, which can point to the next matching character from strings a and b. basically these lookahead tables will be able to answer the question: given a character c ∈ Σ and a position  <dig> ≤ k ≤ n, what is the smallest index l ≥ k such that al = c? and the same for string b. such a lookahead table can be easily constructed in time and space o|Σ|), which for a fixed alphabet of constant size is linear, by traversing both strings in reverse order, once for each character of the alphabet.

one can easily verify that lemma  <dig> still holds, based on the same arguments used to prove it, under the new scoring scheme. in addition, the following corollary holds:

corollary  <dig>  a cell dij with value d dominates all cells di-k, j-k,  <dig> ≤ k ≤ max with values ≥ d.

proof. it is easy to see, with a simple inductive argument, that a cell dij dominates all parental cells on the same diagonal with the same score. since any cell dominates itself with a higher score , the corollary follows.   □

the algorithm
the algorithm works separately on the two parts of the matrix left and right of the main diagonal. the description of the algorithm considers only the part of the matrix lying left of the main diagonal, with the assumption that all operations are symmetric on the right part of the matrix. an exception occurs when we describe the interface between the two parts.

our edit distance algorithm is score based. on each iteration the edit distance score is incremented by  <dig> and the part of the edit graph that can be reached with the current score is determined. the initial score is  <dig>  although we should keep in mind that, since at the end we add n - m to the score – adjusting for the unavoidable indels that we get for free on horizontal transitions – it can be considered as if the score is initialized with the value n - m.

during each iteration, we store the values and positions of the cells we work with in a double linked list, which will be referred to simply as list. to store the position of a cell we actually need only the column index where the cell resides, for reasons that will be explained later. the initialization phase starts with the determination of the cells which can be reached with a score of  <dig>  since all horizontal and match diagonal transitions  have a cost of  <dig>  we follow horizontal transitions until we locate a match, then advance to the next line and repeat. the process ends when we reach the main diagonal. we do not need to keep information on all cells with  <dig> value, the first cell with a value of  <dig> on each line suffices, since all further cells are dominated. these dominant leftmost cells can be located in constant time for each line, by using the lookahead tables. when we encounter a series of matches on the same diagonal, we only need to keep the value of the last  cell, since all other cells are dominated. the indices of cells accessed through this process increase monotonically, as we advance forward through rows, columns and diagonals. the initialization finishes when the main diagonal is reached. thus at the end of the initialization step we have a list of cells with  <dig> value, each of which resides on a different row, column and diagonal of the matrix. an example of the initialization phase can be found in fig. 3a.

on each subsequent iteration of the algorithm and with each increasing value of the score, the linked list is updated with new cells that can be reached from members of the list. the algorithm at iteration d, with d also being the current score, starts from the top of the list and processes one cell at a time. for each list cell examined having a value of d -  <dig> or d -  <dig>  as will be proved in lemma  <dig>  we either follow a substitution transition, if the cell's value is d -  <dig> or a vertical indel transition if the cell's value is d -  <dig>  let's assume we are examining list cell dij = d -  <dig>  we know that di+ <dig>  j+ <dig> = d, since if di+ <dig>  j+ <dig> < d it would already be included in the list, unless dominated by another cell in the list, which is impossible since then dij would in turn be dominated by di+ <dig>  j+ <dig> and would not be in the list during the current iteration. we now find the largest k for which bi+k = aj+k, k ≥  <dig> and insert cell di+k, j+k in the list. that is the last cell in a series of match transitions, starting at di+ <dig>  j+ <dig>  if any exist. next, we examine the cells following dij in the list and remove the ones that are dominated by di+k, j+k. at this step, list cells dop in rows o <i + k and on diagonals o - p such that i - j <o - p ≤n - m are removed, all being dominated as proved later in theorem  <dig>  starting now at cell di + k, j + k, we repeat the process performed in the initialization, with the difference that for each new cell inserted in the list, all subsequent cells in the list that are dominated by the new member are removed. this process will stop once the next identified match in the lookahead table falls inside the dominated area. precisely, if dop is the last cell with value d that was inserted in the list, the next match from the lookahead tables resides at diagonal q and the next cell in the list resides at a diagonal p ≤ q and row r ≥ o, then the process of inserting new cells derived from dij is terminated and we proceed to the next cell in the list.

each iteration finishes once we reach the main diagonal. the reader can follow the procedure, through the five iterations in calculating the edit distance of strings a = 'gatcgcgacc' and b = 'acttcta', in fig.  <dig> 

one special case that was not covered in the above description is the handling of a cell insertion following a vertical indel transition, when another dominated cell on the same diagonal exists in the list. in this case, the only position the dominated cell can occupy is previous to the current cell examined, from which the transition emanated. this results in the removal of the dominated cell. this special case only requires a constant number of operations and does not alter the complexity of the algorithm. as already mentioned, the part of the matrix right of the main diagonal is processed in a symmetric way. at the end of each iteration, the cells of the main diagonal, which belongs to both parts, have to be updated. these cells reside at the end of the lists for both parts and the update is performed in constant time as well.

we will now proceed to prove the following theorem:

theorem  <dig>  cell dij on diagonal i - j with value d dominates all cells dkl in the list with k < i, i - j < k - l ≤ n - m and values <d, meaning all list cells in rows above it and columns with larger indices.

proof. since horizontal transitions carry a cost of  <dig>  all cells in row i and column l with j < l ≤n - m have a score of at most d. all cells dkl in the list, residing in diagonals k - l with i - j < k - l ≤n - m and in rows k with k < i lead diagonal transitions to cells dk +  <dig>  l + <dig> with score at most d, since al ≠ bk . this implies that no diagonal transition from these cells can produce a value smaller than d in any cell on row i and column > j via a path passing through these cells, since values in the paths are monotonically increasing . if we now examine the vertical transitions emanating the dkl cells under consideration, they also result in paths propagating scores at least d, which again cannot result in a better score on the cells on row i and column > j. all cells on diagonals <i - j do not need to be considered, since they cannot be reached from the claimed dominated cells of this theorem, unless a path reaches them through a cell in diagonal i - j. but in corollary  <dig> we showed that cells on this diagonal with scores ≥ d are already dominated by dij. thus all dkl cells are dominated by dij.   □

the next corollary follows from the domination theorem 1:

corollary  <dig>  no two cells in the list reside on the same column.

proof. before a new candidate cell dij is inserted in the list, any list cell on the same column will be removed, since it is dominated by the newly inserted cell, based on the previous theorem.   □

now we have the necessary tools to prove the following lemma:

lemma  <dig>  when iteration d starts, with  <dig> ≤ d ≤ s - , all cells in the linked list have either a score of d -  <dig> or d -  <dig> 

proof. initially, after the initialization, the list holds cells with value  <dig>  so the lemma holds. every time a cell is inserted in the list it will remain until it is dominated by another cell or the algorithm terminates. unless a cell with score d in the list is dominated and removed before its transitions are examined, when the algorithm reaches that cell the diagonal transition emanated from the cell will produce the next candidate, with score d +  <dig>  to be inserted in the list. the second time this cell is visited, the vertical transition from it will be examined. in that case, the next candidate with score d +  <dig> will dominate the current cell, according to the previous theorem. thus, even if a cell is not dominated by another inserted cell, it will be dominated by its siblings.   □

a direct consequence of the previous lemma is the following:

corollary  <dig>  at most two cells in the list can reside in the same diagonal, and their values differ by  <dig>  this holds for same row list cells as well.

a pseudo-code description of the algorithm is presented below. the description excludes special cases requiring substitutions of the currently examined cells of the list and only presents the operations of the algorithm in the part of the matrix left of the main diagonal. the procedure interfacing the left and right linked lists is omitted as well. the algorithm can be studied in more detail from the available code.

initialize lookahead arrays x

initialize linked list l

score d := 0

line l := 0

column c := 0

while not reached main diagonal do

   insert dlx := x into l

   c := x

   l + +

end while

while not reached cell dmn do

   d + +

   current cell dij := l → head

   repeat

      if dij = d -  <dig> then

         dij := process_next_candidate

      else

         dij := process_next_candidate

      end if

   until dij = l → head

end while

function process_left_candidate

while al = bk do

   k + +

   l + +

end while

insert dkl in list l

remove dominated dij → next by dkl from l

while not reached diagonal of dij → next do

   process_left_candidate

end while

return dij → next

algorithm complexity
the algorithm described in the previous section is score based and as such the main loop executes an equal number of times with the value recorded at cell dmn of the edit graph. since we add the value n - m to that score in order to obtain the edit distance of strings a and b, the total number of iterations is equal to s - |n - m|.

at all times during the execution of the algorithm the linked list contains at most m cells, which is a direct consequence of corollary  <dig>  also, due to corollary  <dig>  there can be at most 2s cells in the list at any given time, since the maximum number of diagonals on which the algorithm processes cells is s, consisting of the center of the matrix and diagonal bands of size / <dig> from each side of the center, accessed while the algorithm iterates. basically, for every two iterations of the algorithm, one further diagonal from each side of the center of the matrix is accessed.

all cells in the list are accessed in order and without backtracking during each iteration. each cell undergoes through a constant number of structural accesses, once when it is inserted in the list, once when it is removed and two times when the diagonal and vertical transitions from this cell are examined, if there is a chance before it is dominated. during each iteration there are other cells accessed, the candidates for insertion in the list. while processing these cells we are advancing both the indices of columns and rows without backtracking, which proves, as with list cells, that there are at most m or s candidate cells examined during each iteration.

a candidate cell may be accessed several times while compared to a list cell, in order to determine a dominance relation. a list cell can also be accessed several times during the same process, to check whether it is dominated. however, the amortized cost for each cell is constant. every time a candidate cell is re-examined, a cell from the list has been removed. and every time a list cell is re-examined, in the previous step it was not dominated by a candidate cell, the latter then having being inserted in the list and not being examined again on that iteration. since each time we advance through either a candidate or a list cell, and since both sets have o) cells , the total number of constant time operations during an iteration is o).

this analysis demonstrates that the total running time of our algorithm is o·min + m + n), where the last linear m + n component represents the time necessary to initialize the lookahead tables. it can be easily verified using simple algebra that s - |m - n| ≤ min, which provides another less tight upper bound of the worst case time behavior of the algorithm, o <dig> + m + n). we can therefore observe that the quadratic factor in the time complexity is independent of the longest string being compared. the space usage of this algorithm is o, dominated by the size of the lookahead tables kept in memory. this completes the proof of the next theorem:

theorem  <dig>  the edit distance s of two strings a and b with lengths n and m respectively can be computed in time o·min + m + n) and in space o.

RESULTS
we have implemented our new algorithm to test its performance in practice. for comparison purposes, we implemented the basic o algorithm, also known as needleman-wunsch  <cit> , as well as the ukkonen o) algorithm  <cit> . all algorithms were implemented in perl, using the same input/output procedures and no optimizations. benchmarking was performed with the benchmark perl module for the experiments averaging a large number of random runs, and the time unix command for individual experiments, the same method always used across algorithms. all tests were performed on an  <dig> gb ram  <dig>  ghz intel processor ibm compatible desktop machine, running ubuntu linux. in all test cases the data completely fit in the main memory.

since perl does not support pointer structures efficiently, we implemented the double linked list with arrays, using the fact that no two cells in the list can reside on the same column. this way we access list cells using their column index. as such, the list occupies more space than the minimum possible, where the implementation may have been more efficient in another programming language supporting these structures.

ukkonen's algorithm implementation was based on the outline found in  <cit>  and the more detailed description found in  <cit> . the version used is particularly simple by making use of recursion, but has larger than linear space demands, specifically o). the basic algorithm was implemented using linear space and row-by-row iterations.

the first two experiments were run on random sequences over alphabets of  <dig> and  <dig> characters respectively, similar to random dna/rna and amino acid sequences. the length of the first sequence from the two compared was set at  <dig> characters, where the length of the second sequence varied between  <dig> and  <dig> characters. we examined a total of nine length ratios n/m values between  <dig> and  <dig> . for each length ratio,  <dig> different comparisons were run, with the execution time and edit distance values averaged among these. the results are depicted in fig.  <dig> 

in these simulations it is worth noticing significant performance improvement of the new algorithm with increasing length ratio of the random strings, although the total length of the strings is increasing. this is not surprising, since the number of iterations s - |m - n| is decreasing, caused by a slower increase in edit distance than difference between the lengths of the two strings.

ukkonen's algorithm performs poorly when comparing random strings over a large alphabet, because of the large expected edit distance value in these cases. this algorithm is designed for comparing similar strings, which is the case most often encountered in practice. in contrast, the basic algorithm, owing to its simplicity, performs uniformly and surpasses the other algorithms when the edit distance is large compared to string length, unless when the s - |n - m| value becomes small enough, where our algorithm takes the lead.

next, we designed computational experiments performing comparisons most often encountered in practice, drawn from the computational biology domain. in all examples the sequence pairs examined have comparable lengths, not differing more than 5%. the results are presented in table  <dig>  the first simulation involved  <dig> random sequence pair comparisons from a pool of approximately  <dig> vetted 16s ribosomal rna sequences, provided by the ribosomal database project .  <cit>  these sequences average about  <dig> characters in size, drawn from an alphabet of size  <dig>  a random pair of 16s rrna sequences from the same genus and another from the same class but different order are compared in the next two lines, followed by a comparison of two viral genomes and two virion proteins. as these results demonstrate, the performance of our algorithm compares favorably to ukkonen's algorithm, which is asymptotically slower but has smaller constants, while the basic algorithm is outperformed in almost every case, except when matches are sparse. performance comes with some cost though and it is interesting to note that the size of the program implementations of the three algorithms, the basic, ukkonen's and ours, is  <dig>   <dig> and  <dig> lines of code respectively.

random 16s
hyphomonas 16s
alphaproteobacteria 16s
cucumber necrosis
human poliovirus 1
the perl implementations of all three algorithms used in this paper for performance comparisons can be downloaded online.  <cit> 

CONCLUSIONS
in this paper we have provided the design, analysis and implementation of a new algorithm for calculating the edit distance of two strings. this algorithm is shown to have improved asymptotic time behavior, while it is also demonstrated to perform very well in practice, especially when the lengths of the strings compared differ significantly. the performance of our algorithm in this case, which is encountered less often in instances of the edit distance problem, could find application in the related longest common subsequence  and other similar problems solved with dynamic programming techniques.

future directions for this algorithm include the investigation of further practical applications of the techniques described to other similar problems, as well as generalizing the results to cover additional edit operations such as swaps.

competing interests
the authors declare that they have no competing interests.

authors' contributions
both authors designed and analyzed the algorithm, dp implemented the algorithm, performed the experiments and wrote the manuscript. both authors read and approved the final manuscript.

