BACKGROUND
the next generation sequencing  technology has scaled up dna sequence acquisition by several orders of magnitude  <cit> . however, the short read sequences  from ngs, generally 100 bp or so in length, have only limited uses without further bioinformatic processing  <cit> . sequences obtained by the conventional sanger sequencing methods, generally >600 bp in length, are much more useful but the throughput is too low and the cost is too high. therefore, an efficient method for increasing the read length from ngs should be valuable.

a major advance in ngs is the development of paired-end  library construction, which generates two short reads from a single dna fragment separated by an insert of a known size. in principle, longer sequences could be produced post-hoc, if the gap between the paired-ends could be filled correctly. several attempts have been made to extend the length of short reads by merging the paired-end reads from small fragments into longer single end reads  and proved the advantages of longer reads in metagenomics and genome assembly. however, due to the requirement of library insert size less than twice of read length, merging of overlapped reads could only increase the read length by a small fraction. the merged reads are often less than doubling the read length. gapfiller tried to fill the gaps but not repetitive sequences within a longer insert based on 'seed-and-extend’ strategy in bacteria genomes  <cit> , but its performance in large genomes might decrease due to the largely existing repetitive sequences. allpaths <cit>  is a standalone genome assembler. it efficiently utilized paired-end information by filling the inner gaps using extension, but also suffered much from extensions from one end to the other end of paired-end reads in global graph of reads overlaps. successive multiple libraries were used in the long march  <cit>  and subassembly <cit> . they used the paradigm of clustering and local assembly, to avoid the repetitive sequences and computing complex in overlap extension. in general, read pairs from the same dna fragment were indexed with sophisticated unique tags so that they could be locally assembled. however, the application of these methods to large genomes has two major limitations. first, the experiments are complex and cannot be consistently executed. for example, subassembly requires the dilution of dna to obtain a desired number of dna molecules, but the amount obtained may vary by orders of magnitude. second, the sequencing costs are equivalent to  <dig> sequencing, which produces long reads directly without a complicated third-parity library preparation. the goal of this study is to fill in the gap between paired-end reads from large dna fragments , and produce sequences like sanger reads even when the sequence of gaps is repetitive.

we have now developed a new computational approach, referred to as pseudo-sanger  sequencing , which can generate long reads from paired-end srs. unlike previous methods, we sequence successive multiple libraries prepared with standard protocols, take two reads in a pair of large-insert pe reads as a tag, cluster other pe reads that have one end overlapped with it as local reads group, and locally assemble them to fill in the inner gap of the large-insert pe reads. the nested set of libraries are composed of paired-end reads with decreasing insert sizes  . the paired-end reads from the library with the largest inserts serve as anchor reads . the nested reads with shorter inserts are referred to as supporting reads  and are local assembled to fill the gap between the two ars to create contiguous ps sequences. because srs are strongly associated with their ar, the advantage of ps method lies in its local assembly which is less impeded by repetitive sequences. another advantage of the ps method lies in its operational simplicity and low cost, both only marginally higher than the current practices in generating srs.figure  <dig> 
construction of pseudo-sanger sequences. genomic dna  is randomly sheared into fragments  of a wide range of sizes. libraries are constructed for each band with a step size of ~100 bp and subjected to illumina paired-end sequencing . anchor reads  come from the library with the largest fragments. the rest are supporting reads . each ar is aligned with all srs that are likely to fill in its internal gap . local assembly is then performed on of the ar plus the associated srs to construct a pseudo-sanger sequence. the resulting pseudo-sanger sequences cover the entire genome much like other wgs reads .



the ps approach is a general computational method that provides the insert sequence between paired-end or mate-pair reads. since the current end sequences are roughly 100 bp in length, the resulting filled-in sequences happen to approach the length of the conventional sanger reads. as the paired short reads increase in size, the insert between them can be increased correspondingly and the pseudo-sanger sequences can be expected to greatly exceed the sanger reads in length . besides the increase in read length, ps sequencing corrects most of sequencing errors and tolerates heterozygous sites. with these advantages, ps sequencing can have applications for many problems requiring long and error-free dna sequences. for example, ps sequences are sufficiently long for the detection of chromosomal structural variations at the base-pair resolution. furthermore, the analysis of metagenomic diversity by ngs is often hampered by the paucity of species markers due to the absence of long reads, which ps sequencing can rectify. finally, an obvious application and a stringent test of ps sequencing is whole-genome de novo assembly, which will be reported below.

RESULTS
algorithm for constructing pseudo-sanger sequences
our method, implemented in the new software package anytag, utilizes a nested set of paired-end libraries with decreasing insert sizes . three steps are used to construct a pseudo-sanger sequence for each ar. first, we align ars against all srs to obtain candidate srs located within the span of every ar. second, we perform a local assembly using these candidate srs. in general, the local assembly utilizes an overlap-layout-consensus  approach but with the constraint that the two ends of the layout come from an ar. we refer to the resulting segment as a primitive pseudo-sanger sequence. finally, we identify all srs, both reads of which are located inside the primitive pseudo-sanger sequence, to call the consensus sequence .

we have also introduced a module to verify that both reads in an ar are not repetitive sequences. if either read of an ar is deemed to be repetitive, we do not construct a pseudo-sanger sequence from it.

to efficiently align ars against srs, we use block spaced seeds to index the reads of srs, and scan the ar base by base. when an ar and a sr share the same seed sequence, they are considered a potential match, and the sequence is extended without gaps. if the extension fails due to excessive mismatches, the smith-waterman algorithm is used to perform a gap alignment. otherwise, the result of the simple extension is used as an alignment. if a sr read overlaps with an ar on the same strand , the partners of the sr pair and the ar pair will also have the same orientation. because we are only concerned with filling the gap between the two members of an ar pair and the distance between any sr pair will always be shorter than the distance between an ar pair, only forward overlapping sr reads and their partners are used in our search. we, therefore, create a localized cluster of sr pairs with the same orientation as the first read of each ar pair, greatly reducing the complexity of the following local assembly.

our local assembly uses a modified layout step that ensures the final contig starts from one read of ar and ends at the other read. an overlap graph is built with reads as nodes and overlaps as edges. we traverse the graph between the two ends of an ar and try to find a path that connects them. for each end of the ar, a heap table is used to find the path to the other end with the maximum number of overlapped bases. when two traversals meet, we check whether the length of the layout is within the insert range of the ar library.

to improve the quality of the pseudo-sanger sequences, we add inner srs  and call the consensus sequence again. to reduce the computing time, we query primitive pseudo-sanger sequence against all srs without using gap alignments. if one end of a sr matches, the other end is aligned to the primitive pseudo-sanger sequence by the smith-waterman algorithm.

we calculate the expected number of srs aligned to a given ar using the formula:  

where l is the length of each read, o is the minimum overlap, and d is the sequence depth. ars with  <dig>  times this expected value are considered repetitive sequence and pseudo-sanger sequences are not constructed for them. to account for potential missing sequence in regions where an ar has been labeled as repetitive sequence and excluded, we iteratively use the next largest insert size library’s paired-end reads as ars to construct pseudo-sanger sequences. additionally, reads that are not used in the local assembly are kept for possible use in closing gaps in the subsequent assembly.

construction of pseudo-sanger sequences from simulated data
the sequenced genome of drosophila melanogaster and human chromosome  <dig> were used in our simulation. for each dataset, we simulated 60x genomic coverage with paired-end short reads with a sequencing error of  <dig>  and heterozygosity of  <dig> . the simulated datasets are composed of four libraries .

we used our software anytag to convert the simulated paired-end short reads into pseudo-sanger sequences. in the simulation of d. melanogaster, anytag generated 22x long sequences, of which the mean length was  <dig>  bp. the error rate was reduced from  <dig> % to  <dig> %, and was uniformly distributed across the pseudo-sanger sequences . in the simulation of human chromosome  <dig>  anytag generated 19x long sequences, of which the mean length was  <dig>  bp. the error rate was reduced from  <dig> % to  <dig> %, and was also uniformly distributed.

comparison of genome assemblies from simulated data
once the pseudo-sanger sequences were constructed, the newbler program  <cit>  and minimus <dig> from the amos package  <cit>  were used to assemble them into contigs. to compare the effectiveness and accuracy of our method against other current de novo short read algorithms, we chose four general de novo assemblers, velvet, soapdenovo, abyss and msr-ca to directly assemble the same simulated paired-end reads. each of the four programs can output scaffolds for paired-end short reads, and we treated the continuous sequences  in these scaffolds as contigs. to explore the best assemblies for those three programs, we ran them with different parameters and selected the assembly with the largest n <dig> contig . the evaluation program from gage <cit>  was used to assess the mis-assemblies.

overall, anytag performed substantially better than the other programs . anytag always ranked best in n <dig> contig size , n <dig> contig size  and mean contig size , for drosophila and human, respectively. for human chromosome  <dig>  which has a larger genome size and is more repetitive, the contig sizes from anytag were about three times greater than the best of the other assemblies. msr-ca performed better than the other assemblers . both anytag and msr-ca convert short reads into long sequences, and utilize overlap-layout-consensus  assemblers to finish the assembly, whereas the other assemblers assemble the short reads using de bruijn graphs. the olc approach appears to be superior to the de bruijn graph approach in creating longer contigs.table  <dig> 
statistics of contigs assembled from simulated data


dataset a

anytag
c

abyss
d

msr-ca

soap
d

velvet
d

anytag

abyss

msr-ca

soap
velvet

aall programs use the same simulated raw data. our dataset was generated into four libraries, with insert sizes at 200 bp, 300 bp, 400 bp and 600 bp. sequencing error was simulated at  <dig>  and randomly distributed on the reads. the diploid heterozygosity is set at  <dig> .


berror = inversion + relocation + translocation. the evaluation was completed by the evaluator from gage.


c
anytag constructed pseudo-sanger sequences, newbler and minimus <dig> were used to assemble pseudo-sanger sequences.


dkmer size was iteratively set to  <dig>   <dig>   <dig>   <dig>   <dig> for abyss, soapdenovo and velvet. the assembly with the largest n <dig> contig was showed.


eour memory limit is 450 g bytes.



we evaluated the large mis-assemblies  of all assemblies using evaluator from gage. anytag introduced a bit more large mis-assemblies than short reads assemblers based on de bruijn graph. msr-ca got worst performance in evaluation. both those two assemblers lies on third-party olc assemblers. however, it is expected to validate and revise the contigs by paired-end reads mapping in genome assembly.

comparison of the pseudo-sanger approach with other methods in assembling the drosophila genome from experimental data
we applied the pseudo-sanger approach to the genome of the w <dig> strain of drosophila melanogaster. unlike the reference strain iso- <dig> <cit> , this line is not isogenic and has an estimated heterozygosity of  <dig> % per site in our sequencing data. this level of heterozygosity is less than half of the population genetic diversity of the species  <cit> . as shown in figure  <dig>  the genomic dna was randomly sheared into a series of decreasing fragment sizes and was used to create a nested set of paired-end libraries with insert sizes of 200 bp, 300 bp, 400 bp and 600 bp. all libraries were subjected to illumina paired-end sequencing.

in total,  <dig>  million 100 bp paired-end short reads were produced. running anytag with  <dig> threads for  <dig>  hours, we were able to construct  <dig>  million  pseudo-sanger sequences with an average length of  <dig>  bp. these long sequences cover the d. melanogaster genome at a depth of 55×. the assembly of pseudo-sanger sequences yielded  <dig>  contigs greater than 100 bp in length, and the n <dig> contig length was  <dig>  bp.

we also investigated the best assembler using the w <dig> dataset. in almost every category in table  <dig>  the pseudo-sanger assembly performed substantially better than other methods. the pseudo-sanger method produced similarly sized contigs on both the simulated and real datasets, but the performances of other assemblers often dropped sharply on the real data. in addition to comparing methods based on the same srs platform, we also compared methods for a different data platform. for that purpose, we downloaded three  <dig> datasets from the sequence read archive  of the drosophila genetic reference panel  . all  <dig> datasets are based on isogenic lines. the whole genome coverage is 19-21x, which is quite enough for isogenic genomes. although the  <dig> platform generates long reads  directly, the ps method compensates for its extra step by its error-correction and rare homo-polymer errors. it is also worth noting that  <dig> data costs much more to generate.table  <dig> 
statistics of contigs assembled from the experiment data from
d. melanogaster


illumina paired-end short reads from the nonisogenic w
anytag

abyss

msr-ca

soap

velvet
 <dig> long reads from  <dig> isogenic lines a
newbler
20x ps reads b
anytag

ancbi sra accessions: srx <dig>  srx <dig> and srx <dig> 


b20x ps reads were randomly selected to fit the coverage of  <dig> long reads.



in table  <dig>   <dig> sequences were assembled using newbler. the longest n <dig> contig length from the  <dig> data is  <dig>  bp, much shorter than that from the pseudo-sanger method. the mean contig length and n <dig> contig length are also both shorter by the  <dig> data. 20× ps reads were randomly selected and assembled to generate an equal coverage of  <dig> dataset. the reduced dataset produced n <dig> contig size of  <dig>  bp.

evaluating the pseudo-sanger approach on a large genome
assembly of large genomes  poses additional challenges. first, an assembler needs to handle billions of short reads in memory. second, the increased computing time can become an important issue. repetitive sequences also become a bigger concern in larger genomes. for example, abyss performed surprisingly worse with our simulated human chromosome  <dig> dataset than with the drosophila one.

the naked mole rat  genome is about  <dig>  gb, and was firstly assembled using soapdenovo <cit> . the nmr assembly project generated nested libraries with insert sizes of 170 bp, 350 bp, and 500 bp with some long inserts of up to 20 kb. although such paired-end libraries are not ideal for the pseudo-sanger method, they may still provide a crude glimpse of its effectiveness in assembling large genomes. we downloaded  <dig>  mil-lion 100 bp paired-end reads from three libraries . the raw illumina reads cover the nmr genome with a depth of  <dig> x,  <dig>  ×, and  <dig> ×, respectively. our program, anytag, ran for 62 hours on  <dig> cores and constructed  <dig>  million pseudo-sanger sequences with a mean length of 442 bp. using newbler and minimus2-blat  <cit>  to assemble the long sequences, we obtained the initial contigs with a mean of  <dig>  kb, an n <dig> of  <dig>  kb, and an n <dig> of  <dig>  kb. we also tried other assemblers on the same dataset, but only soapdenovo finish the assembly. abyss ran out of 450g memory. msr-ca ran out of time . soapdenovo obtained the best assembly under k-mer size of  <dig>  its n <dig> contig size was  <dig>  bp, n <dig> contig size was  <dig>  bp. please note that we did not perform either scaffolding with the long jump libraries or filling gaps , but our contigs are even better than the published nmr assembly  <cit>  with long jump libraries .

discussion
we presented the pseudo-sanger sequencing  method to produce long and near error-free sequences with high throughput by filling the gaps between the paired-end short reads produced by ngs platforms. compare to other gap-filling method, the ps method presented advantages on the aspects of read accuracy and repeat tolerance.

one obvious advantage of the ps method is that the error rate of the produced long sequences is extremely low. by local assembly of highly redundant reads, almost all the errors in the original short reads were corrected with very few remained in constructed long reads, and the allele of heterozygote with relatively higher frequency is kept as reference allele. in our simulation, the assembly of less repetitive genome was improved significantly due to error correction and heterozygote merge.

another advantage of pseudo-sanger method is that the structure of repetitive elements shorter than the insert size of anchor reads  can be solved spontaneously. we used both end of anchor reads as a tag, supporting reads have one end match the tag are clustered to do local assembly. this strategy is like subassembly  <cit> , which uses one of paired-end reads as tag, and local assembly of the other ends to build a contig of long dna fragment. nevertheless, our two short reads tag has more sensitivity and specificity over subassembly’s 17-base single end tag. even when our two paired reads tag are repetitive, we are able to correctly recover full-length sequences theoretically by carefully examining the multiple paths connecting two ends of ar. however, when both ends of ar lie in highly repetitive regions, there will be too many srs involved in the local assembly process, which makes local assembly extremely slow and it is difficult to distinguish the correct ps sequences from thousands of possible paths. in practice, we calculate the repetitiveness of ars and refuse to do local assembly on highly repetitive regions.

in comparison with other methods of long read construction , the ps method takes advantages of the length space of the genomic fragments and generates long reads about five times longer than the original short reads, which outperforms the existing methods. for example, shera <cit> , flash <cit>  and cope <cit>  could at most double the length of single short reads by identifying the overlapped part of paired reads sequenced from short dna fragments. although gapfiller produces long reads up to  <dig>  kb in size  <cit> , it can hardly resolve repeats, which largely restricts its application in large eukaryotic genomes.

continuous insert sizes libraries are upmost ideal for pseudo-sanger method. however, the cost of library construction should be in consideration. for small genomes, at least two libraries must be provided .

the potential applications of the ps method are extensive. because of the possibility of routine usage, most problems that require long and error-free sequences in high throughput can benefit from this method. we chose de novo genome assembly for a demonstration. although next generation sequencing  techniques have been used successfully to assemble large genomes  <cit> , the direct de novo assembly of srs often leaves many gaps in the scaffolds and assemblies of questionable quality  <cit> . by first converting short reads into pseudo-sanger sequences, we show that whole genome assembly using ngs sequencing platforms can be done efficiently. the contigs generated from the ps sequences are much longer than from srs directly . it can be reasoned that longer contigs would generate longer scaffolds if given long jump reads, and thus contribute to better genome assembly. interestingly, our results were at least as good, if not slightly better, than assemblies based on  <dig> sequencing but come at a fraction of the cost.

the pseudo-sanger method is a general approach that fills in the sequence between paired-end or mated-pair reads. because the expected number of srs for one ar is linearly correlated with read length times sequencing depth, ps sequences longer than the sanger-sequence length have not been practical to obtain. now that paired reads are becoming much longer, the distance between the pairs can be increased correspondingly. the resulting pseudo-sanger  sequences of a few kb with errors corrected may greatly expand the general utility of ngs sequencing.

CONCLUSIONS
by paired-end sequencing of a series of stepwise insert size libraries, we are able to recover the full length sequences of the largest dna fragments using computational method. smaller dna fragments are aligned to the largest dna fragments by one of their two-ends. thus, the other ends can be used to fill the un-sequenced regions in the largest dna fragments. our local assembly enable to remove partial matched dna fragments , correct sequencing errors, and tolerate heterozygote. by recovering full length sequences of paired-end sequencing, de novo assembly can be improved significantly. besides, ps sequences can be applied for many other problems requiring long dna sequences, such as the detection of structural variations and the analysis of metagenomics diversity.

