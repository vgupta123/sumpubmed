BACKGROUND
hiv is a pandemic cause of lethal pathologies in more than  <dig> million people. its horizontal transmission trough mucosae is difficult to control and treat because the virus has a high virulence and it infects several type of immune surveillance cells, such as those characterized by cd <dig> receptor . the major problem in treating the human virus infection is the drug selectivity since the virus penetrates in the cell where it releases its genetic material to replicate itself by using the cell mechanisms. a drug target is the replicating apparatus of the cell. hiv antiviral molecules will be directed against several cells such as macrophages or lymphocytes t to interfere with viral replication. the hiv releases a single-strand rna particle, a reverse transcriptase and an integrase into the cell cytoplasm. quickly the rna molecule is retro-transcribed in a dna double strand molecule, which is integrated into the host genome. the integration events induce a cellular response, which begins with the transcription of the tat gene by the rna polymerase ii. tat is a well-known protein responsible for the hiv activation since it recruits some cytoplasm host proteins involved in the expression of viral genes. remarkably, hiv can establish a life-long latent infection by suppressing its transcription, thus making ineffective the large part of antiviral drugs aimed at controlling the viral replication. however replicating viruses adopt several drug resistance strategies, for instance, hiv induces amino acid mutations reducing the efficacy of the pharmaceutical compounds. the present work is aimed at gaining knowledge on mutations that may occur into the viral rna transcriptase  <cit> . this is an important target to develop antiretroviral medicines and different types of molecules have been found active: the nucleoside reverse transcriptase inhibitors  and non nrti . although rna rt inhibitors are active, the hiv virus is capable of quickly changing the rna rt encoding sequence thus acquiring drug resistance. the antiviral therapy is based on the use of cocktails of molecules including new rna rt inhibitors. a computational approach to predict possible mutation sites and their sensibility to drug is thus an important tool in drug discovery for the antiretroviral therapy.

computational methods can assist here by exploring the space of potential virus mutants, providing potential avenues for anticipatory drugs  <cit> . to achieve such a goal, one first needs to understand what kind of mutants may lead to resistance. a general engineering technique for building artificial mutants is referred to as rational design
 <cit> . the technique consists in modifying existing proteins by site directed mutagenesis. it relies on a deep domain knowledge in order to identify candidate mutations that may affect protein structure or function. the process typically involves extensive trial-and-error experiments and is also aimed at improving the understanding mechanisms of a protein behavior.

in this work we report on our initial investigation to develop an artificial system mimicking the rational design process. we consider two increasingly complex learning settings and corresponding learning techniques. in the first one we rely on a training set made of single amino acid mutations known to confer resistance to a certain class of inhibitors . an inductive logic programming  learner  <cit>  is trained for each class of inhibitors in order to extract general rules describing mutations conferring resistance to the drug class. the learned rules are then used to infer novel mutations which may induce similar resistance. in the second setting we learn directly from mutants  that have been experimentally tested for their resistance to the same classes of inhibitors . this second setting is actually the most common situation, in which one is presented with a number of mutants together with some evidence of their susceptibility to certain treatments, but no clear information on which mutation is responsible for their behaviour. in this setting we employ a statistical relational learning approach  <cit>  capable of learning weighted combinations of relational rules discriminating between groups of instances, drug-resistant vs drug-susceptible mutants in our case. the learned model is then used to generate novel mutants together with a score indicating their predicted resistance.

machine learning methods have been previously applied to mutation data for predicting the effects of non-synonymous single nucleotide polymorphisms on protein stability  <cit> , function , and drug susceptibility  <cit> . all of the these predictors make use of pure statistical learning techniques  in combination with a large variety of sequence, structural, and functional features. a recent evaluation of the predictive performance of mutation prediction methods can be found in the review by thusberg et al.
 <cit> .

to the best of our knowledge, the present paper is the first attempt to learn relational features of mutations affecting protein behavior and use them for generating novel relevant mutations. modeling mutant resistance with relational rules provides two key advantages. first, the learned rules can be easily interpreted by human experts, providing valuable insights into the mechanisms of drug resistance. second, while previous work focused uniquely on the identification of resistance mutations, our method can natively produce novel candidate mutations that are likely to confer greater fitness/resistance to a drug.

in the case of single mutations, it is straightforward to generate a set of potentially resistant mutations simply by testing all candidates with any of the above predictors. the same procedure, however, does not scale to the multiple case, where exhaustive enumeration is infeasible. on the contrary, our method can be readily extended to produce mutants with two or more mutations: the learned rules effectively constraint the space of candidate mutants, drastically reducing the  number of candidates. additionally, it is possible to augment our approach by employing a more sophisticated statistical predictor to further characterize the generated mutants. although in the experimental evaluation of the present work we focus on single residue mutations, we are actively working on extending our approach to generate mutants characterized by multiple mutated residues.

we report an experimental evaluation focused on hiv rt. rt is a well-studied protein: a large number of mutants have been shown to resist to one or more drugs and databases exist that collect those data from different sources and make them available for further analyses  <cit> . we tested the ability of our approach to generate drug-resistant amino acid mutations for nrti and nnrti. our results show statistically significant improvements for both drug classes over the baseline results obtained through a random generator. a preliminary version of this work was presented in  <cit> .

the approach can be in general applied in mutation studies aimed at understanding protein function. by searching for residues most likely to have a functional role in an active site, the approach can for instance be used in the engineering of enzyme mutants with an improved activity for a certain substrate.

methods
datasets
we applied our approach to predict hiv rt mutations conferring resistance to two classes of inhibitors: nrti and nnrti. the two classes of inhibitors differ in the targeted sites and rely on quite different mechanisms  <cit> . nnrti inhibit the reverse transcriptase by binding to the enzyme active site, therefore directly interfering with the enzyme function. nrti are instead incorporated into the newly synthesized viral dna for preventing its elongation.

we compiled two datasets ={∈×}, where is the input space where the examples x are drawn from, either the space of single mutations or the space of mutants, depending on the learning setting . examples x are expressed in the form of ground facts as well as the labels y, which represent the targets of the prediction. for instance, ={resistant, non-resistant}  in the mutation-based learning setting and with respect to a specific inhibitor.

the former  is a dataset of amino acid mutations derived from the los alamos national laboratories  hiv resistance database  <cit>  by richter et al.  <cit> , who used it to mine relational rules among mutations. it consists of  <dig> amino acid mutations labeled as resistant to nrti and  <dig> labeled as resistant to nnrti, over a set of  <dig> observed mutations. for the mutant-based setting, we collected  hiv rt mutation data from the stanford university hiv drug resistance database. the database provides a dataset of selected mutants of hiv rt with results of susceptibility studies to various drugs, and was previously employed  <cit>  for predicting drug resistance of novel  mutantsa. it is composed of  <dig> different mutants annotated with susceptibility levels  to drugs belonging to the nrti  and nnrti  drug classes. we considered a setting aimed at identifying amino acid mutations conferring high susceptibility , and considered a mutant as highly susceptible to a drug class if it was annotated as being highly susceptible to at least one drug from that class.

learning in first order logic
our aim is to learn a first-order logic hypothesis for a target concept, i.e. mutation conferring resistance to a certain drug, and use it to infer novel mutations consistent with such hypothesis. we rely on definite clauses which are the basis of the prolog programming language. a definite clause c is an expression of the form:
  

where h and the bi are atomic literals. atomic literals are expressions of the form p where p/n is a predicate symbol of arity n and the ti are terms, either constants  or variables  in our experiments. the atomic literal h is also called the head of the clause, typically the target predicate, and b1and … and bn its body. intuitively, a clause encodes the fact that the head will hold whenever the body holds. for instance, a simple hypothesis like:
  

indicates that a mutation c in the proximity of a binding site confers to mutant a resistance against a certain drug .

a clause c is said to cover a mutant if the mutant is classified as resistant according to the clause, i.e. if the head is true. learning in this setting consists of searching for a set of definite clauses h={ci,…,cm} covering all or most positive examples, and none or few negative ones if available. standard ilp techniques, such as aleph, golem  <cit> , progol  <cit> , and foil  <cit> , employ one of two opposite strategies to search the space of hypotheses. in bottom-up learning, the search starts from the most specific clause  that covers a given example, which is then generalized until it cannot be further generalized without covering any negative examples. generalization of the current clause relies on applying a generalization operator, which either i) substitutes a variable to a constant, or ii) removes a literal from the body. conversely, top-down approaches start from the true hypothesis, which entails all examples, and gradually specialize it to reduce its coverage of negative examples. clause specialization is performed by i) substituting a constant to a variable, or ii) adding a literal to the body. while these strategies are  heuristic, it is possible to control the complexity of the hypothesis space by choosing an appropriate language bias. a more detailed treatment of the learning algorithm used by aleph can be found in the algorithm overview section.

the learned first-order clauses can be interpreted as relational features that characterize the target concept. the main advantage of these logic-based approaches with respect to other machine learning techniques is the expressivity and interpretability of the learned models. models can be readily interpreted by human experts and provide direct explanations for the predictions. on the other hand, purely logic-based approaches fail to incorporate uncertainty in the hypotheses they produce, and different degrees of importance of the clauses of which hypotheses are made. statistical relational learning  <cit>  techniques aim at filling this gap by combining statistics and expressive representational languages in developing predictive models. a simple and effective solution consists of learning a weighted combination of clauses, where clauses and their weights are jointly learned in trying to model the concept of interest.

in the biological domain, ilp has been successfully applied to a variety of learning problems, such as predicting sequence-based homology and gene/protein function  <cit> , finding regularities in microarray data  <cit> , modeling protein–ligand  <cit>  and protein–protein interactions  <cit> , discovering pharmacophores  <cit> , and drug design  <cit> .

background knowledge
we built a relational knowledge base for the problem domain. table  <dig> summarizes the predicates that we included as a background knowledge. we represented the amino acids of the reference wild type  with their positions in the primary sequence  and the specific mutations characterizing them . target predicates were encoded as resistance of the mutation or mutant to a certain drug .table  <dig> 
background knowledge predicates



position

mut

res_against

color

typeaa

same_color_type

same_typeaa

same_color_type_mut

different_color_type_mut

same_type_mut_t

different_type_mut_t

aamutations

close_to_site

location

conservation

in_ss

in_motif

catalytic_propensity

mutated_residue_cp
summary of the background knowledge facts and rules. mutid is a mutation or a mutant identifier depending on the type of the learning problem.



note that this encoding considers mutations at the amino acid rather than nucleotide level, i.e. a single amino acid mutation can involve up to three nucleotide changes. focusing on single nucleotide changes would have drastically expanded the space of possible mutations. we thus kept the focus on amino acid mutations but we included the cost  of a certain amino acid mutation to further refine our search procedure as explained in the following.

additional background knowledge was included in order to highlight characteristics of amino acids and mutations. to this aim we devised all the subsequent predicates: typeaa/ <dig> indicates the type of the natural amino acids according to the venn diagram grouping based on the amino acids properties proposed in  <cit> . for example, a serine is a tiny and polar amino acid. color/ <dig> indicates the type of the natural amino acids according to the coloring proposed in  <cit>  and reported in table  <dig>  for example the magenta class includes basic amino acids as lysine and arginine while the blue class includes acidic amino acids as aspartic and glutamic acids. these groups of amino acids do not overlap as in the previous case. same_type_aa/ <dig> indicates whether two amino acids belong to the same type t, i.e. a change from one amino acid to the other conserves the type of the amino acid. same_color_type/2indicates whether two amino acids belong to the same coloring group, i.e. a change from one amino acid to the other conserves the coloring group of the amino acid. same_type_mut_t/3indicates that an amino acid substitution at a certain position does not modify the amino acid type t with respect to the wild type. for example mutation i123v conserves the aliphatic amino acid type while mutation i123d does not . same_color_type_mut/2indicates that an amino acid substitution at a certain position does not modify the amino acid coloring group with respect to the wild type. for example mutation d123e conserves the blue amino acid group while mutation d123a does not . aamutations/4indicates whether a given amino acid mutation can be triggered by a single, double, or triple nucleotide substitution. for instance to change an alanine a into an aspartic acid d a single nucletotide substitution can be sufficient as in the case a: gct →d: gat.table  <dig> 
amino acid types encoded in color classes


classification of amino acid types in color classes originally proposed in  <cit>  and used to define the color/2predicate.



the predicates color/ <dig>  same_color_type/ <dig>  and same_color_type_mut/ <dig> have been originally proposed in  <cit> . other background knowledge facts and rules were devised in order to express structural relations along the primary sequence, secondary structure, and catalytic propensity of the involved amino acids: close_to_site/ <dig> indicates whether a specific position is less than  <dig> positions away from a residue belonging to a binding or active site. in our specific case, the background theory incorporates knowledge about a metal binding site and a heterodimerization site. location/2indicates in which fragment of the primary sequence the amino acid is located. locations are numbered from  <dig> by dividing the sequence into fragments of  <dig> amino acid length. conservation/2indicates whether a position is highly conserved or not. conservation is defined in terms of positional variation  among a curated multiple-alignment of reverse transcriptase sequences, taken from the lanl hiv resistance database  <cit> . in_ss/3indicates whether a mutation occurs within a known secondary structure element. we encoded position specific knowledge for the four secondary structure classes: helix, strand, turn, and coil, through the predicates helix/ <dig>  strand/ <dig>  turn/ <dig>  and coil/ <dig>  this information was derived from the 3d model of the rt structure by using the dssp program  <cit> . in_motif/2indicates whether a mutation occurs within a known sequence motif. our background theory includes information about prosite  <cit>  and pfam motifs  <cit> . catalytic_propensity/2indicates whether an amino acid has a high, medium or low catalytic propensity according to  <cit> . mutated_residue_cp/5indicates how, in a mutated position, the catalytic propensity has changed .

conservation, secondary structure, and features encoding the closeness to the active site are among the standard features used by mutation effect predictors  <cit> . motifs have been used for a number of tasks, such as the identification of non-neutral single nucleotide polymorphisms  <cit> .

algorithm overview
the proposed approach is sketched in figure  <dig> figure  <dig> 
mutation engineering algorithm. schema of the mutation engineering algorithm.



step 1: learning phase
the first step is the learning phase. a learner is fed with a logical representation of the data and of the domain knowledge to be incorporated, and it returns a first-order logical hypothesis h for the concept of mutation conferring resistance to a certain class of inhibitors.

in this context there are two suitable ways to learn the target concept, depending on the type of input data and their labeling:

the one-class classification setting, learning a model from positive instances only. this is the approach we employ for dataset 1: positive examples are mutations for which experimental evidence is available that shows resistance to a drug, but no safe claim can be made on non-annotated mutations.

the binary classification setting, learning to discriminate between positive and negative instances. this setting is appropriate for dataset 2: positive examples are in our experiments mutants labeled as highly susceptible to the drug class, negative examples are those with medium or low susceptibility.



in the one-class classification case we employ the aleph  ilp system  <cit> , which learns first order logic hypotheses in a bottom-up fashion. it incrementally builds a hypothesis trying to cover all positive examples. the hypothesis search is guided by a bayesian evaluation function, described in  <cit> , scoring candidate solutions according to an estimate of the bayes’ posterior probability that allows to trade-off hypothesis size and generality. aleph adds clauses to the hypothesis based on their coverage of training examples. given a learned model, the first clauses are those covering most training examples and thus usually the most representative of the underlying concept.

in figure  <dig> we show a simple example of hypothesis covering a set of training mutations from dataset  <dig>  the learned hypothesis models the ability of a mutation to confer resistance to nnrti and is composed of four first-order clauses, each one covering different sets of mutations of the wild type as highlighted in colors: yellow for the first clause, blue for the second, red for the third, and green for the fourth one. some mutations are covered by more than one clause as shown by the color overlaps. for instance, a mutation of the glycine in position  <dig> satisfies three clauses: the first, the second and the fourth. on top of the rt consensus sequence we also report the corresponding secondary structure annotation, by highlighting in magenta the helices and in blue the β-strands. the prosite and pfam motifs prf:rt_pol and pfam_fs:rvt_thumb appearing in the clauses identify specific regions along the rt sequence. bold letters in the picture indicate residues involved in the rt metal binding site .figure  <dig> 
model for the resistance to nnrti learned from dataset  <dig>  an example of learned hypothesis for the nnrti task with highlighted amino acid positions covered by the hypothesis clauses.



in the binary classification case, we employ kfoil  <cit> , a statistical relational approach which learns a weighted combination of clauses discriminating positive from negative instances. kfoil is a kernel-based approach  <cit> , capable of learning hypotheses made of complex non-linear combinations of clauses. for the sake of interpretability we limit ourselves to second degree polynomial kernels, where the predictive model is a combination of conjunctions of up to two clauses.in figure  <dig> we show an example with a few clauses extracted from the hypothesis learned on one of the dataset partitions generated during the experimental evaluation . as in the above example, the model is composed of four first-order clauses, each contributing to the characterization of nnrti resistance mutations. three of the four clauses specify positions  <dig>   <dig> and  <dig> directly as likely targets for resistance conferring mutations. the second clause, which is not position specific, represents mutations of thyrosines occurring within a strand, where the mutation is a non-charged amino acid. note that two clauses with distinct position predicates cannot be simultaneously satisfied by the same mutation. conjunctions of clauses will thus typically involve one position-specific clause and one or more position-aspecific ones, where the latter further detail the features that likely resistant mutations at that position are expected to exhibit.figure  <dig> 
model for the resistance to nnrti learned from dataset  <dig>  an example of learned hypothesis for the nnrti task with highlighted amino acid positions covered by the hypothesis clauses.



step 2: generative phase
the second step of our approach is the generative phase, in which the learned hypothesis is employed to find novel mutations that can confer drug resistance to an rt mutant. a set of candidate mutations can be generated by using the prolog inference engine starting from the rules in the learned model. the rules are actually constraints on the characteristics that a mutation of the wild type should have in order to confer resistance to a certain inhibitor, according to the learned hypothesis.

algorithm ?? details the mutation generation procedure. we assume, for simplicity, to have a model h for a single drug class. the procedure works by querying the prolog inference engine for all possible variable assignments that satisfy the hypothesis clauses, each representing a mutation by its position and the amino acid replacing the wild type residue. the set of mutations generated by the model is ranked according to a scoring function sh before being returned by the algorithm. when using aleph, we define sh as the number of clauses in h that a candidate mutation m satisfies. when using kfoil, sh is the value of the weighted combination of the satisfied clauses. the latter case allows a much more refined scoring, as will be showed in the experimental evaluation.

algorithm for novel relevant mutations discovery.
  

consider the example model in figure  <dig>  among the mutations generated using the model are all those changing the glycine in position  <dig> in a non polar amino acid: 190p, 190a, 190f, 190i, 190l, 190v, 190m. here 190p indicates a change of the wild type amino acid at position  <dig> into a proline. each of these mutations satisfies the first, the second and the fourth clause, receiving a score of three. note that mutation 190a is part of the known nnrti surveillance mutations .as for the model in figure  <dig>  the position specific rules all identify known surveillance mutations: 103n, 103s, 106m, 106a, 190a, and 190s. clause two affects position  <dig>  a thyrosine occurring within a strand, and corresponds to surveillance mutations 181c, 181i, 181v.

RESULTS
learning from mutations
we first learn general rules characterizing known resistance mutations  to be used for predicting novel candidate ones.

we divided the dataset of mutations into a training and a test set  in a stratified way, which means by preserving, both in the train and test set, the proportion of examples belonging to one of the two drug classes. this produces a training set of  <dig> mutations and a test set of  <dig> ones.

we trained the ilp learner on the training set and we evaluated on the test set the set of mutations generated using the learned model. the evaluation procedure takes the set of generated mutations and checks which of them appears in the test set. we compare the recall of the approach, i.e. the fraction of test mutations generated by the model, with the recall of a baseline algorithm that generates a set  of random mutations. by random mutation we mean here the mutation at a random position in the wildtype into a randomly chosen amino acid, different from the one occurring in the wildtype at that position. a random generation is admittedly a rather simple baseline, but it is useful in highlighting the amount of reduction of the search space  achieved by our algorithm. in order to fully exploit this gain in exploration efficiency, the algorithm should be extended to generate mutants with multiple mutations. this is the subject of our future work, as discussed in the conclusions.

we computed  <dig> random 70/ <dig> train/test splits and performed  <dig> runs of our algorithm on each split . figure  <dig> reports results averaged over all runs for both nnrti and nrti tasks. in this setting, the average size of the learned hypotheses for nnrti and nrti are  <dig> and  <dig> rules respectively. the figure shows the mean recall on the test set when increasing the score threshold for accepting a mutation, i.e. the number of clauses a mutation must satisfy in order to be accepted. the results of the random baseline consider the same number of mutations selected by the method for each threshold. the recall trend is shown in orange for our approach and in green for the random generator for both classes of inhibitors. recall differences are statistically significant according to a paired wilcoxon test .figure  <dig> 
mean recall trend by number of satisfied clauses . mean recall of the generated mutations on the resistance test set mutations from dataset  <dig> by varying the number of satisfied clauses. the mean recall values in orange refer to the proposed generative algorithm. the mean recall values in green refer to a random generator of mutations.



we finally learned a model on the whole dataset in order to generate a single set of mutations for further inspection. we report five examples of novel mutations with the highest score for each one of the tasks: s105y, s105t, s105n, s105g, s105c for nnrti and 50a, 63a, 63m, 159l, 195v for nrti. for nnrti, known resistance mutations are found in positions  <dig> and  <dig>  possibly explaining the high score of mutations at position  <dig>  in  <cit> , the authors found a set of novel mutations conferring resistance to efavirenz and nevirapine, which are nnrti. our mutation generation algorithm partially confirms their findings. apart from mutation 138q, not generated by our model, all other mutations have been generated, with 90i satisfying two out of five clauses and 101h, 196r, and 28k satisfying one.
most frequent learned clauses 



nnrti
mut and strand
mut and location
mut and strand and in_motif
mut and in_motif
mut and same_type_mut_t and strand
mut and color and in_motif
mut and same_type_mut_t
mut and in_motif
mut and color
mut

nrti
mut and location
mut and in_motif
mut and turn and in_motif
mut and same_type_mut_t and in_motif
mut and coil and conservation
mut and conservation
mut and same_color_type_mut and in_motif
mut and same_color_type_mut
mut and in_motif
mut and color and in_motif
list of the ten most frequent rules learned on dataset  <dig>  sorted by average number of models they appear in.



learning from mutants
the next set of experiments is focused on learning mutations from mutant data . learned models are still limited to single amino acid mutations, and so are novel mutants generated by the system.

we randomly assigned the mutants in dataset  <dig> to  <dig> train/test set splits, by avoiding having mutants containing the same resistance mutation  in both training and test sets. for each of the  <dig> splits, we evaluated the recall of the generated mutations on the known resistance mutations , by first removing all the mutations that were also present in the training set. comparison is again made on a baseline algorithm generating random mutations.

results averaged on the  <dig> random splits are reported in figure  <dig>  the curve shows the average recall of the generated mutations while varying the threshold over their confidence, and the corresponding number of overall generated mutations. for nnrti, we can see that we obtain an average recall of 25% while generating only  <dig> mutants, and can reach up to 27% with about  <dig> generated mutants. in both cases the results are statistically significantly higher than those achieved by a random generator .figure  <dig> 
mean recall of the generated mutations on the resistance test set mutations from dataset  <dig> by varying the threshold on the prediction confidence, and the corresponding average number of overall generated mutations , in blue. the red line refers to the random generator of mutants.  left panel: results for the nnrti case.  right panel: results for the nrti case.



the hypothesis for the resistance to nnrti identifies more than half  of the known resistance surveillance mutations reported in  <cit> : 103n, 103s, 106a, 181c, 181i, 181v, 188l, 188c, 190a, 190s, 190e, all with very high confidence. the model also predicts other not previously reported mutations as being resistant with high confidence, for instance 183f and 232a, very close to known surveillance mutations 181c and 230l.

also in the case of nrti the generative algorithm suggests most  known surveillance mutations reported in  <cit> : all of them except those targeting position  <dig> .
most frequent learned clauses 



nnrti
mut and position
mut and position and typeaa
mut and position and typeaa
mut and typeaa and strand
mut and strand
mut and position
mut and typeaa
mut and position and correlated_mut
mut and position and same_type_aa
mut and typeaa and strand and typeaa

nrti
mut and position
mut and same_type_aa
mut and highconservation
mut
mut and inmotif
mut
mut
mut and position and correlated_mut
mut and position and correlated_mut
mut and inmotif
mut and inmotif
list of the ten most frequent learned rules for dataset  <dig>  sorted by number of models they appear in. the table also includes the clause position, which is present in all models for different values of x.



discussion and future work
the results shown in the previous section are a promising starting point to generalize our approach to more complex settings. we showed that the approach scales from few hundreds of mutations as learning examples to almost a thousand of complete mutants. moreover the learned hypotheses significantly constrain the space of all possible single amino acid mutations to be considered, paving the way to the expansion of the method to multi-site mutant generation. this represents a clear advantage over alternative existing machine learning approaches, which would require the preliminary generation of all possible mutants for their evaluation. restricting to rt mutants with two mutated amino acids, this would imply testing more than a hundred million candidate mutants. at the same time our statistical relational learning approach cannot attain the same accuracy levels of a sophisticated technique modelling for instance the three dimensional rearrangements of the resulting mutant. we plan to combine the respective advantages of the two approaches by using our statistical relational model as a pre-filtering stage, producing candidate mutants to be further analysed by complex modelling techniques and additional tools evaluating, for instance, a mutant stability. an additional direction to refine our predictions consists of jointly learning models of resistance to different drugs , possibly further refining the joint models on a per-class basis. on a predictive  task, this was shown  <cit>  to provide improvements over learning distinct per-drug models.

our approach is not restricted to learning drug-resistance mutations in viruses. more generally, it can be applied to learn mutants having certain properties of interest, e.g. improved or more specific activity of an enzyme with respect to a substrate, in a full protein engineering fashion.

CONCLUSIONS
in this work we proposed a simple statistical relational learning approach applicable to mutant prediction and protein engineering. the algorithm relies on a training set of mutation data annotated with drug resistance information, builds a relational model characterizing resistant mutations, and uses it to generate novel potentially resistant ones. encouraging preliminary results on hiv rt data indicate a statistically significant enrichment in resistance conferring mutations among those generated by the system, on both mutation-based and mutant-based learning settings. albeit preliminary, our results suggest that the proposed approach for learning mutations has a potential in guiding mutant engineering, as well as in predicting virus evolution in order to try and devise appropriate countermeasures. in the next future we plan to generalize the proposed approach to jointly generate sets of related mutations shifting the focus from the generation of single amino acid mutations to mutants with multiple mutations.

endnote
agenotype-phenotype datasets.http://hivdb.stanford.edu/cgi-bin/genophenods.cgi

competing interests

the authors declare to have no competing interests.

authors’ contributions

ec compiled the datasets. ec, st, and ap participated in building the background knowledge. ec and st conducted the experimental evaluation and contributed to the interpretation of the results. ap designed and coordinated the whole study. all authors participated in the design of the study and contributed in writing the article. all authors read and approved the final manuscript.

