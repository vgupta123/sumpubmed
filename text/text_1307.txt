BACKGROUND
ontologies are engineering artefacts that can formally represent the concepts and their relationships within a given knowledge domain. they can provide a computationally processable conceptual representation of our current understanding of reality, as described within the information we hold. bio-ontologies  are becoming increasingly important  <cit> . bio-ontologies play a central role in bioinformatics: they act as knowledge bases, database integrators, shared vocabularies, and more  <cit> . many bio-ontologies are available through the open biomedical ontologies  project  <cit> , with the gene ontology   <cit>  being the most important example.

bio-ontologies are implemented in different knowledge representation  languages, differing in properties that can be described along the following axes:

• syntax: what constitutes a well formed statement.

• semantics: what well formed statements mean, often defined as the set of concrete situations  that are consistent with a sentence or set of sentences.

• expressiveness: ability of the language to distinguish different kinds of concrete situations—something that can be called “precision”.

• reasoning: answering some semantic based query, such as determining if one statement follows from another. reasoning is performed by a program called a “reasoner”.

the most used kr languages in bioinformatics are obo  <cit>  and/or owl  <cit> . owl has three sub-languages, depending on the expressivity: owl-lite, owl-dl and owl-full. owl-full is the most expressive type, and reasoning results are not warranted. the expressiveness of a kr language can be exploited to produce rich bio-ontologies, that is, bio-ontologies that represent the knowledge most accurately, precisely and comprehensively, with the highest possible resolution. rich bio-ontologies are amenable to more diverse interactions with biologists, for example when querying. a rich bio-ontology can also facilitate more interesting reasoning, for example to obtain new hypotheses from biological knowledge. presently, however, bio-ontologies mainly tend to be lean, as opposed to rich, due to the gap between the potential of kr techniques and their actual implementation in bio-ontologies. most bio-ontologies do not come close to using all the expressiveness of the selected kr language  <cit> , even if that language has limitations in its ability to fully describe the biological domain knowledge  <cit> . as a result, only a limited part of the domain knowledge is captured.

another problem with current bio-ontologies is the lack of rigour . rigour ensures a sound structure and hence a more robust development and maintenance over time. despite efforts to improve the rigour of some bio-ontologies  <cit> , rigorous modelling is not general practice within bio-ontologies.

the modelling effort required for obtaining a rich and rigorous bio-ontology is usually too demanding for many bio-ontologists, as they are usually biologists with a limited training in either ontology development or the kr language used for the ontology's representation. if, however, we are to improve the knowledge management in bioinformatics and move from lean to rich bio-ontologies, the bio-ontologies must be built by expert biologists who really know the vital subtleties of the knowledge domain. this tension between modelling best practice and modelling skills  <cit>  is a fundamental barrier for progress in bio-ontologies, as the bio-ontologists only rarely use the whole power of kr languages.

one way to help bio-ontologists to model in a rich and rigorous manner is to provide them with “cookbook recipes” named ontology design patterns . odps are a development paradigm analogous to software design patterns   <cit> , widely used in oop. a sdp is a proven solution to a known modelling problem that repeatedly appears when designing different software systems. moreover, sdps offer an “off the shelf” solution for the programmer: for example, in the case of the model-view-controller sdp a method for implementing graphical interfaces is provided. we propose that odps offer similar advantages to the bio-ontologists.

structures similar to odps have already been used in ontologies and appear in the literature. there are, however, still open issues, such as documentation, representation, application methods, detection of application targets, etc. in addition, whole areas of biological knowledge lack odps. the work presented here begins to tackle those issues by providing a definition and classification of odps, methodologies for spotting application targets for odps in bio-ontologies, methodologies for applying odps, a documentation system and an odps public catalogue  <cit> . some examples of odps that have been used on the cell cycle ontology  are presented as use cases .

RESULTS
definition and classification of odps
odps are solutions to modelling problems that help the bio-ontologist to better use the expressivity and rigour of the kr language of choice. odps are examples of solutions, rather than abstract solutions that are instantiated in different systems, unlike sdps. thus, the bio-ontologist uses the odp as a guide and is able to recreate the odp in the concrete bio-ontology that it is being built.

odps are used as samples of knowledge. for example, a bio-ontologist may want to model biological regulation, which can only be positive or negative. what constructs does owl, for example, offer to create such a model of regulation and how can the bio-ontologist combine them? the answer is to use the value partition odp  <cit>  as a sample . the value partition odp consists of a covering axiom and disjoint axioms that allow the values a parameter may take to be captured precisely. for example, a person can only be tall or short, but not both; the value partition odp also makes the property by which an object ‘bears’ the value functional—so an object only has that property once. since regulation can only be positive or negative , this value partition odp should be used .

odps are in principle abstract and implementation independent. we focus on owl to provide a framework for direct implementation, adequate expressivity and ease of sharing. odps could be described in a more abstract formalism  but that would decrease usability. odps can be classified according to their complexity, granularity, usability, popularity, etc. here, we classify them according to the way they are used:

• extensional odps: odps that provide ways of extending the limits of the chosen kr language. some odps can be used to overcome those limitations and present a suitable representation of the knowledge domain that needs to be captured. for example owl cannot be used to express exceptions  <cit>  or n-ary relationships  <cit> , and there are odps to work around those limitations .

• good practice odps: odps that are used to ensure a modelling good practice. these odps are used to produce more modular, efficient and maintainable ontologies, tackling already known pitfalls of ontology engineering such as hard-coding of multiple subsumptions  <cit> . examples include normalisation odp  <cit> , value partition odp  <cit>  and upper level ontology odp  <cit> .

• domain modelling odps: odps that are used to model a concrete part of the knowledge domain. they can be defined as “signature” odps: each knowledge domain has its peculiarities and these odps are used to model those peculiarities. biological knowledge sometimes differs from other domains because of contingency, symmetry, different levels of complexity interacting with each other, emergent properties, etc. examples include list odp  <cit> , adapted sep odp  <cit> , sequence odp  <cit>  and species odp  <cit> .

extensional and good practice odps are common to all ontologies. domain modelling odps are more specific to the knowledge domain , but they can also be used in other domains.

applying odps
an important aspect of odps is understanding when it is appropriate to apply a particular odp. ideally, the situation in which it is appropriate to apply an odp should be apparent to a bio-ontologist; the odp should be self explanatory in terms of documentation . the bio-ontologist can, however, be guided using competency questions such as the ones described in table  <dig>  these and other questions will be used to form a decision tree that will guide a bio-ontologist towards an appropriate odp. these questions can be supplemented with material on the types of entity that can be involved and the kinds of relationships they have with other entities, eventually being refined down to the granularity of semantics used in the odp itself.

once chosen, the main method for applying an odp is to recreate completely or in part the structure of the example odp in the ontology, optionally reusing  parts of the example odp. the user can be guided in the process with wizards, for example using the wizards provided by the co-ode project  <cit>  for the protégé ontology editor  <cit> .

another method of applying odps is to use condition matching. the ontology processing language  is a syntax that allows conditions to be defined for matching classes in an ontology written in owl. the classes matched have transformations applied on them that change axioms or annotation values. thus opl can be used to create odps in an ontology, by defining and odp as the changes to be made when a match happens.

the matching condition can be of two types:

• syntactic condition: the condition relies on a string value. thus, the class name or any annotation value, such as label or comment, can be used to try to match the condition. the condition can be a given value  or a regular expression  ).

• semantic condition: the condition relies on the semantic structure of the ontology—the odp is applied to any classes matching a class expression. for example, a condition can be defined so as to match any class that is subsumed by the class expression located_in all ) ) as a necessary condition). a semantic condition can be as complex as the user wishes  as the reasoner  <cit>  will process the ontology and retrieve any matched classes.

opl is partially based on the manchester owl syntax  <cit>  and sparql  <cit> , and it is available as a standalone application  <cit>  or as a protégé plugin  <cit> . the opl commands are written in a flat file by the user and the opl program parses the file, selecting classes and applying the changes defined, creating a new ontology. odps can be codified in the defined changes, and human-readable explanations can be written in comments. thus, the odps are stored in a flat file for direct application, together with any comments bio-ontologists might find of interest. therefore, odps can be applied at any time, to any ontology, by running the opl program, and are persistently stored .

documenting odps
the documentation system proposed in this research is inspired by the original sdps documentation system  <cit> , with some changes; the basic system is essentially the same, relying on some predetermined sections with which each odp must be described; name, structure, etc. in the case of odps the sections are different, and some of them are optional . an implementation of the documentation system is available as an odps public catalogue  <cit> . the catalogue is directly implemented in owl: each odp is described in an ontology, using annotation properties for the sections that describe the odp. the semantics of the odp are directly expressed in the ontology, allowing for importing the odps and sharing the odps together with all the information codified in the annotation properties. each ontology is translated to html by an script  and the url of the ontology is automatically generated from the uri of the ontology. the whole catalogue can be downloaded  <cit>  and generated locally from the owl files by running the owl2html script. the catalogue is open for suggestions and corrections, and any user can propose new odps to be added using the mailing lists and forums provided by sourceforge  <cit> .

the names of the sections are given in the left column; the explanation in the center column, and the right column states which sections are optional

sdps and odps are described in a different manner in a documentation system. sdps are described with uml in a generic manner, and then the instances of the sdp are applied in the programming language of choice. in contrast, there is no easy, graphical, complete and established language a la uml for describing odps, because there is not such a language for kr languages. as a consequence, odps have to be described using instances: the model, rather than being a generic structure like in sdps, is an instance that implicitly describes the generic structure.

the absence of a language that can describe the same structure in different kr languages makes it very difficult to develop a suitable graphical representation for ontologies. in the case of the odps public catalogue uml has been chosen in the hope that better languages will be developed. despite having certain advantages  and having been designed as a general purpose modelling language, uml lacks native structures for a straightforward representation of owl. therefore, the uml representation is not compact enough and it is too complex. the uml to owl mapping used in the public odps public catalogue is the one proposed in  <cit>  . owlviz  <cit>  is also used for simple subsumption hierarchies.

use of odps on the cell cycle ontology
in the context of the fp <dig> project diamonds  <cit> , an ontology is being developed to represent the knowledge about the cell cycle  <cit> . this application ontology, called cell cycle ontology  <cit> , comprises data from a number of resources such as go, relations ontology   <cit> , intact  <cit> , ncbi taxonomy  <cit> , uniprot  <cit>  as well as data from diamonds partners. the resulting cco is designed to provide a richer view of the cell cycle regulatory process, in particular by accommodating the intrinsic dynamics of this process. for that purpose, three major components are considered: the  entity itself, its spatial localization, and its temporal localization. cco provides a test bed for the development of new approaches and tools necessary to create a fully-fledged knowledge base. this knowledge base is expected to enable deployment of advanced reasoning approaches for knowledge discovery and hypotheses generation. cco supports four model organisms: human , arabidopsis , baker's yeast  and fission yeast . there is an ontology file for each of the four model organisms and the file is available in several formats  <cit> : obo  <cit> , owl-dl  <cit> , xml, dot  <cit>  and gml  <cit> . presently, cco holds more that  <dig>  concepts  and more than  <dig> types of relationships. at present, two odps have been applied in cco: the sequence odp and the upper level ontology odp.

the sequence odp  <cit>  is used in cco to model the cell cycle . the cell cycle is modelled as a sequence of events, starting in the phase g <dig>  followed by s, g <dig> and finally m  <cit> . for the sake of simplicity, only the described steps of a standard cell cycle are considered, not considering the other steps  or variations such as endoreduplication.

there are other sequences of events that in principle can be modelled in the same manner, such as metabolic pathways. this odp is a “trimmed down” version of another odp, the list odp  <cit> . the list odp is a much more complex structure in which the exact order of items is very important, whereas in the sequence odp the only aspect modelled is what happens after or before a given event. for example, the sequence odp cannot be used to compare different sequences of events. the sequence odp  makes use of the relationships precedes and preceded_by from ro, both being transitive. it also uses two relationships not present in ro, namely immediately_precedes  and immediately_preceded_by , both being functional.

when the odp is applied to cco , each phase of the cell cycle is immediately_preceded_by a phase and immediately_precedes another phase, only one in both cases, due to the fact that immediately_preceded_by and immediately_precedes are functional. any phase that is immediately_preceded_by one phase is also assumed to be preceded_by the same phase, because preceded_by is a superproperty of immediately_preceded_by. the same applies to immediately_precedes and precedes.

the use of the sequence odp allows to do flexible queries against the ontology. for example, if a given interaction occurs at m, and a query is defined to retrieve anything that happens after s , a reasoner will retrieve the interaction . this is due to the transitivity of preceded_by, which is assumed to relate the pertinent phases by the reasoner  because it is the superproperty of the actual property that has been used to assert the relationship in the model, immediately-preceded_by. however, if the user is only interested in something happening just after s , immediately_preceded_by should be used instead.

the upper level ontology odp  <cit>   can be used to facilitate modelling through its basic ontological distinctions. a principle application of upper level ontologies is to integrate different ontologies. this can be done because an upper level ontology makes distinctions between classes, independent of any particular domain: the classes in it represent types of concepts, such as physical entity, process, etc. for example, if an ontology that describes processes needs to be integrated, it can be done so under the class process. the classes of the upper level ontology are generally created according to philosophical criteria such as continuants vs. occurrents. therefore, the use of an upper level ontology is controversial, because there are many flavours of philosophical approach and the bio-ontologist may follow a particular view of the world that will highly influence the structure of the bio-ontology. in the case of cco an upper level ontology has been created  to include classes from other ontologies such as the whole cell cycle subontology from go. the use of an upper level ontology also helps to ensure a good modelling practice, as different kinds of classes  are created in separate disjoint subtrees, resulting in a cleaner model.

discussion
even if odps have already been documented in the literature, they have not been explicitly mentioned as such until recently  <cit> . in  <cit>  they are mentioned as part of some ontology building methodologies, without further analysis such as documentation and application. the idea of codeps   <cit>  is close to odps, but they differ in the level of granularity of the proposed solution; codeps are necessarily less fine grained than odps, as they represent conceptual and general solutions, whereas odps offer solutions in a given kr language with full semantic coverage. we propose that codeps and odps are complementary: a codep will incarnate itself in an odp that will show the bio-ontologist how to implement the codep in a concrete kr language, much as happens with the codep description-reification and the n-ary relationship odp  <cit>  in owl. in summary, the application procedure, documentation system and representation of odps and codeps are different. knowledge patterns  <cit>  are conceptual general patterns that are “morphed” into a given knowledge base by a set of mapping axioms. thus, the knowledge pattern can not be applied directly by the bio-ontologist: this is a drawback since the application of the pattern needs to be as intuitive as possible. the same argument applies for the semantic patterns  <cit> . the odps presented herein are real solutions to biological knowledge modelling problems, rather than theoretical propositions of general patterns; the value of these odps is that they are ready to be used by bio-ontologists, without any morphing axiom. odps are presented in owl to make full use of the language's semantics. those semantics can be mapped to other languages for interoperability , but the opposite does not often happen: it is difficult for bio-ontologists, given a pattern in an abstract formalism, to apply that pattern to an actual bio-ontology with a concrete kr language.

some attempts have been made to provide best practice guidelines in ontology engineering and kr, which in some cases are semantically equivalent to odps. some of those efforts have been collected  in the w3c semantic web best practices and deployment working group web  <cit> . other efforts have been published as self-contained patterns in single publications, regarding partonomy  <cit> , transitive propagation  <cit> , ontology level  <cit>  and multi-ontology level best practices  <cit> , and granularity  <cit> , to mention some representative examples. in all cases, documentation, graphical representation and application methodologies as such have not been addressed in detail; at best, they were only implicitly and partially used. some of those odps are collected in the odps public catalogue  <cit> .

the use of odps will most likely give several advantages to bio-ontologists when creating and maintaining bio-ontologies. the following advantages have not been thoroughly tested, and therefore there is not experimental evidence for them, but they are reasonable assumptions based in the authors' experience in bio-ontology engineering. the advantages are divided in three areas:

 <dig>  design :

• rich and granular modelling. odps should facilitate the production of more richly axiomatised ontologies by allowing a more fine-grained modelling of the knowledge domain. they should help in making the implicit knowledge found, for example, in term names, explicit, encoding it in the semantics of the ontology. additionally, bio-ontologies are deepening the knowledge they model, and odps to represent that deeper knowledge with the suitable granularity are needed.

• semantic encapsulation. odps provide an easy way of dealing with the complexity of semantics in conceptual modelling by encapsulating it in the odp.

• robustness and modularity. some odps help in creating more robust and modular ontologies.

• reasoning. the richer axioms needed for efficient and productive reasoning should be reached more easily using odps. therefore, as more axioms are placed in the ontology more sophisticated inferences can be undertaken.

• alignment. more and more ontologies are being developed and efficient ways for comparing/aligning them are consequently necessary. the consistency of modelling inherent in the use of odps should support semantic matching between different ontologies.

 <dig>  implementation :

• focused development. having an odp as an engineering artefact should reduce the development time, so that the domain expert can be focused on the modelling details of the specific area that is being modelled.

• tooling. odps can be codified programmatically, providing tools that can automatically build sectors of an ontology that are complex or regular. the same tools could also guide the ontologist in the process of building ontologies.

• rapid prototyping. odps are ideal for rapidly developing prototypes. having prototypes should allow developers to discuss complete models of ontologies in early stages and hence make more sound ontologies. it should also allow faster development.

• re-engineering. odps could be applied in the beginning of an ontology development process as well as during the life cycle of it, providing, for instance, valuable insights for refactoring some components which may hold an inconsistency or which may violate design principles.

 <dig>  communication:

• good communication. the use of odps should improve communication between ontology developers. the developers could easily recognize the different features of the ontology produced by the odp, as it represents a well known and thoroughly documented abstraction.

• documented modeling. when creating ontologies the process should be more precisely documented by simply mentioning which odps were used. as a result, the design decisions would become explicit.

• comprehension of advances in kr. kr languages are evolving fast  and it is usually difficult to understand the new features of the languages: by providing odps it should become much easier, as odps are examples of how to use the new features.

CONCLUSIONS
odps are ready-made solutions for tackling complex modelling issues when creating and maintaining bio-ontologies. moreover, they provide a bridge to rich and rigorous modelling. they also offer advantages in design , implementation  and communication . even if odps present all those advantages, it remains essential that bio-ontologists are provided with ontology building blocks and tools to easily create and manage odps. a protégé plugin is foreseen as a supporting tool that will allow the creation and storage of odps by means of a graphical and user-friendly environment, and there is already a protégé plugin for applying odps that uses the odps public catalogue presented  <cit> . odps might ideally follow a path similar to sdps: first, they are discovered or identified, then they are comprehensibly tested, and finally, they become part of the language or system itself. such a process cannot occur within odps  to the same extent but in an ideal situation the odps might well be perceived by the bio-ontologist as something that comes “for free” in the language or the tools for supporting the development of ontologies.

in order for the odps to be used, not only tooling but also proper documentation is vital, and there are open issues in the documentation system presented. the most important problem is the lack of a proper graphical language for representing the structure of the odps; uml is acceptable for the current implementation but a better representation is needed and growl  <cit>  is a promising possibility. on the other hand, other uml to owl mappings can also be used  <cit> . the sections for the documentation system might evolve in the future as odps are more widely used and identified, depending on the users' feedback. two new sections are foreseen in the short term: a section with the questions for choosing odps  and a section for the version of the odp, including a backwards-compatibility mechanism. classification of odps might well also evolve towards a classification adapted to the needs faced while building and maintaining ontologies. in the long term, metrics for evaluating odps will also be studied so that a degree of complexity will be associated to each odp , that in turn will provide users more information about the odps they would like to use. the same metrics will also provide a way to measure the complexity of the resulting ontology.

the odps identified in cco will support its sound evolution by being part of the cco maintenance life cycle. there are still some odps that have not been completely explored such as odps dealing with temporal aspects or those dealing with negative  knowledge. besides, many more odps within cco and other bio-ontologies will be identified and added to the odps public catalogue. there are plenty of areas of biological knowledge that have not yet been explored to find possible odps, such as phylogeny, molecular interactions, etc. in any of those areas of biological knowledge the identification of odps will facilitate the development of rich and rigorous bio-ontologies. this will ultimately provide a robust and fine grained representation of the knowledge in biology, allowing for a more efficient knowledge management in the field, and increased exploitation of computational reasoning.

abbreviations
cco: cell cycle ontology.

codep: conceptual design pattern.

gml: graph modelling language.

go: gene ontology.

html: hypertext markup language.

kr: knowledge representation.

obo: open biomedical ontologies.

odp: ontology design pattern.

oop: object oriented programming.

opl: ontology processing language.

owl: web ontology language.

ro: relations ontology.

sdp: software design pattern.

uml: unified modelling language.

uri: uniform resource identifier.

url: uniform resource locator.

w3c: world wide web consortium.

xml: extensible markup language.

competing interests
the authors declare that they have no competing interests.

authors' contributions
mea led this effort, working in the core ideas about odps and in the implementations . rs provided expertise in kr and in general aspects of odps. ea provided expertise in the cell cycle ontology and in technical aspects of odps. mk provided general ideas related to the cell cycle ontology knowledge management system. all authors contributed to, read and approved the final manuscript.

