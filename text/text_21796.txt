BACKGROUND
proteins are building blocks of life, serving main roles in the body. since the function of a protein is dependent on its structure, some experimental methods are applied for tertiary structure determination. not only these methods are time-consuming and expensive but also they cannot build a proper atomic model for some proteins. thus, computational methods have been known as favorable approaches for protein structure prediction  within the last two decades.

in psp problem, an amino acid sequence is given as an input and the goal is to predict the best-adapted structure respective to its function. in this regard, another essential problem called protein design or inverse protein folding   is defined to identify a sequence of amino acids whose tertiary structure corresponds to a given target structure. indispensable applications of ipf in drug design, medicine and advanced disease treatment evoked scientists to develop methods for designing appropriate sequences. unfortunately, because of ipf np-hardness  <cit> , it is impossible to give an exact algorithm to solve this problem.

first attempts to solve this problem back to late 1980s which mainly focused on amino acid compositions of designed sequences  <cit> . in  <dig> ragan and degrado had a somewhat successful design for a 4-helix bundle structure  <cit> . later, yue and dill  <cit>  developed a high simplified model, called hydrophobic-polar, embedded in a cubic lattice. this model was developed according to the structural pattern in globular proteins where hydrophobic and polar residues, respectively form internal core and surface of the protein. many attempts have been done to extend lattice-based methods such as approximation algorithms  <cit> .

in  <dig>  a multi-objective genetic algorithm was developed by jones to solve ipf problem, in which the input of algorithm is a protein secondary structure  <cit> . however, improvements in proteomics including protein force fields  <cit>  and rotamer libraries  <cit>  enabled scientists to solve this problem in the atomic level. in this era, several algorithms were developed to find the best sequences through the solution space using energy functions  <cit> . besides, they take into account the effects of amino acid conformations, commonly in the form of “rotamer libraries”. the essence of ipf solutions, up to  <dig>  was to find an amino acid sequence which folds to a low energy structure by means of assigning more hydrophobic residues or minimizing a protein energy function.

due to the simplifications of folding driving forces by protein design models including discrete rotamer space and approximate energy functions, ipf problem was incapable to reach its holy grail. until  <dig>  the point which had been ignored was the evolutionary information derived from protein databases. recently, evodesign  <cit>  has been developed to take into account the evolutionary information in form of profile collections obtained by native structures of the pdb database. as it was mentioned in  <cit> , several methods in the literature were developed to design specific proteins, but modern methods should be able to design sequences for any protein scaffold. despite the abovementioned de novo protein design algorithms, evolver  <cit>  has another point of view which evolves three different types of protein sequences for each input target structure using simulated annealing. the first one is the native sequence of input structure extracted from the pdb database. while, the second one is obtained by shuffling the native sequence and the last one is a random protein-like sequence.

since ipf is the reverse procedure of protein folding, any suitable method to solve this problem should employ folding driving forces. as the folding initially involves the establishment of regular structures, in particular alpha helices and beta sheets, secondary sub-structures would be useful in solving pssif problem. actually, these regular structures can make an appropriate scaffold of protein tertiary structure; furthermore, they can affect amino acid composition in primary structure through evolution process. in general, importance of pssif problem arises from the fact that secondary structure is one the most effective features in tertiary structure and function of proteins.

this paper involves native secondary sub-structures as evolutionary information to improve designing process. thus, a novel genetic algorithm, named gapssif, using these sub-structures is proposed to solve pssif problem. in other words, a precise protein repository is constructed by extracting all possible protein secondary sub-structures from pdb. in this algorithm, each individual takes advantage of a knowledge-based procedure using the sub-structure repository. in essence, evolutionary information can lead the algorithm to design appropriate amino acid sequences respective to the target secondary structures. furthermore, they can be folded to tertiary structures almost similar to their reference 3d structures. gapssif is compared with two well-known algorithms called evodesign and evolver. the assessment of proposed algorithm on  <dig> non-redundant proteins confirms the strong performance in solving pssif. in addition, the predicted tertiary structures of designed sequences represent acceptable results.

method
in this section, a genetic algorithm  <cit>  called gapssif is presented to solve pssif problem. this algorithm makes use of evolutionary information through pdb secondary structure elements. thus, prior to explain the proposed algorithm, constructing a repository of protein secondary sub-structure elements is described.

building up sub-structure repository
a collection of  <dig> proteins was derived from the pdb secondary structures file generated using dssp  <cit> . it contains all existing amino acid sequences as well their secondary structures. since pdb is highly redundant, proteins with more than 90 % sequence identity were omitted to eschew bias of designed sequences to a specified group of proteins. afterwards, corresponding amino acid fragments were extracted for all helices , beta sheets  and all other kinds of secondary structure elements .

eventually, by fetching amino acid fragments for each distinct sub-structure, an amino acid fragment repository  which highly increases the precision of proposed algorithm, is formed. this repository comprises three main clusters including helix, beta sheet and coil. each sub-cluster contains non-identical amino acid fragments with a specified length. for example, a sub-cluster named “h11sc” includes some fragments with  <dig> amino acids whose secondary structures are helix. in essence, we represent a sub-cluster with eksc where e ∈ {e, h, c} and k assigns the length of sub-structure e. there are totally  <dig> sub-clusters in the repository,  <dig> for beta strands,  <dig> for helices and  <dig> for coils. clearly, some lengths do not exist among pdb peptides.

the proposed algorithm to solve pssif problem
in this subsection, we aim to describe the steps of gapssif for solving pssif problem to design appropriate amino acid sequences folded to target secondary structures. the following mathematical definition outlines pssif problem: input:ss=ss1…ssl,ssi∈Γ=ehc,output:s=s1…sl,si∈∑={20standardaminoacids}. 

algorithm  <dig> depicts an overview of the proposed method. in the first step of gapssif, the input secondary structure is split into a set of sub-structures, elements, as described below:  <dig> subss={<σ,k,e>j|e∈Γ&ssσ− <dig> ssσ+k≠e&σ,k= <dig> …,l}, where σ, k and e indicate respectively, the start position, length and type of jth element in the l-length target structure.

creating initial population
this subsection describes the second step of gapssif  to make an appropriate initial population where each individual of the population is a 2-tuple < si, fiti > whose si is made up of  <dig> standard amino acids as follows: si=f1…fsubss, 

where fj shows the corresponding amino acid fragment for jth element, <σ, k, e > j, of subss and it is built up as follows:  <dig> fj={exactfragmentneighboringchofageneratoreksc∈afr∧r∈[ <dig> .7),)∨)otherwise,, 

where eksc represents a sub-cluster in afr  and r ∈ [ <dig> ) is a random value. in equation , exactfragment procedure is applied if the intended sub-cluster exists and the random value r ∈ [ <dig> .7). this procedure randomly fetches an amino acid fragment from eksc. in contrast to the first case of equation , the second case occurs if the intended eksc exists and the random value r ∈ [ <dig> , <dig> ) or intended eksc does not exist in afr but the random value r ∈ [ <dig> .9). in general, neighboring procedure is employed to edit a shorter or longer element of the repository, see algorithm  <dig>  steps  <dig>   <dig> and  <dig> of this algorithm find ek′sc sub-cluster with the lowest difference from k. afterwards, in step  <dig>  exactfragment procedure is used to fetch a fragment from ek′sc sub-cluster and then, step  <dig> modifies the fetched fragment to length k.

in case  <dig> of equation , if none of the two first cases is satisfied, the required fragment is generated by chofagenerator procedure using chofaweight  function. according to chou-fasman  <cit>  analysis on secondary structure dependent propensities, amino acids have various tendencies to participate in each secondary sub-structure or element. therefore, cfw function applies roulette wheel selection through  <dig> standard amino acids in order to select an appropriate residue.

accordingly, using evolutionary information in creating amino acid sequences results in a better starting point to search through the sequence space and substantially accelerates convergence of the algorithm. in order to calculate the fitness value of generated amino acid sequence , two main steps should be taken. at first, the secondary structure of si called pssi = pssi1…pssil is predicted by reprof  <cit> . secondly, the similarity is computed between the predicted secondary structure, pssi, and target structure, ss, as described below: fiti=∑j=1lχssj,χh={ <dig> ,h=h′,h≠h′. 

eventually, |subss| individuals are generated using aforementioned processes to construct an initial population.

enriching amino acid individuals
in the third step of proposed algorithm , each individual is enriched using gibbs sampling algorithm. this method employs afr mutation  operation iteratively to fortify the individuals using evolutionary information in afr.

in the first step of gibbs sampling method, afrm operation takes individual si and its predicted secondary structure, pssi, to generate p'ssi which specifies incorrectly predicted positions of pssi as follows: p′ssi=p′ssi1…p′ssil, 

where p′ssij={−χssj= <dig> pssijelse. 

then, pattern p'ssi is split into a set of secondary sub-structures as described below: subp′ssi={<σ,k,e>j|e∈Γ&ssσ− <dig> ssσ+1≠e&σ,k= <dig> …,l}. 

in the following, for each element in set subp′ssi, a fragment is built according to the equation . at last, these fragments are located on the corresponding fragments in sequence si to generate a new sequence called newsi. then, the fitness value of newsi is computed and named newfiti.

in the second step, gibbs sampling method replaces sequence si with designed sequence newsi when newfiti is greater than fiti. the first and the second steps of gibbs sampling are conducted |subss| times.

constructing hit map repository
in step  <dig> of gapssif , hit map repository  is constructed to contain all correctly designed subsequences whose structures are identical to the corresponding elements of target structure. each identical element is represented as follows: t=<key,s>, 

where “key” shows the structure of subsequence s in structure pss. for instance, <, s > indicates that there is a subsequence s in the designed sequence whose structure consecutively contains a beta-sheet, alpha helix and coil respectively with lengths four, three and two.

in fact, hit map repository is the result of complementary collaboration between afr and secondary prediction algorithm. it means that hmr comprises those fragments which are accepted by both evolution process and the secondary structure predictor. in other words, hmr consists of multi-structural fragments which are simulated during the algorithm using both prediction algorithm and afr.

mutation operations
gapssif employs two mutation operations to mutate individuals in step  <dig>  each individual is mutated randomly using afrm  or hmr mutation  operations. the first operation, afrm, was described as a part of gibbs sampling method in “enriching amino acid individuals”. the second one, hmrm, employs hit map repository to mutate a designed sequence, si, to generate an offspring named newsi as described in algorithm  <dig>  hmrm operation tries to find a proper multi-structural fragment from hmr to locate in si. finally, the fitness values of mutated individuals are computed and added as new individuals to the population p.

eventually, in step  <dig> of algorithm  <dig>  the extended population is sorted in descending order based on the fitness values of individuals. afterwards, in step  <dig>  extra individuals are removed from the population till the new generation reaches the size of initial population. gapssif is repeated until a solution with identical secondary structure to the target is found or goes on for  <dig> iterations. according to the length of the largest sub-structure in the benchmark, the maximum number of iterations is set to  <dig> 

RESULTS
gapssif was implemented using perl and all calculations were done on an intel core i7- <dig> processor  with 16gb ram in 64bit ubuntu linux.

in this section, the quality of 2d and 3d structures of designed sequences by gapssif are evaluated. thus, a set of  <dig> non-redundant proteins is used with different lengths vary from  <dig> to  <dig> amino acids  <cit> . according to structural classification of proteins   <cit> , the selected dataset includes  <dig> alpha ,  <dig> beta ,  <dig> alpha + beta ,  <dig> alpha/beta  and  <dig> small proteins.

gapssif evaluation on a non-redundant dataset
this subsection presents gapssif evaluation on  <dig> proteins. with reference to heuristic nature of gapssif, it was executed ten times for each pdb id of additional file 1: table s <dig>  it should be noted that the best designed sequence in these  <dig> executions is the one with higher accuracy  and less iterations.

an investigation over additional file 1: table s <dig> shows significant success of gapssif in designing amino acid sequences for the target secondary structures. column , psd-q <dig>  represents the percentage of similarity between target and predicted secondary structure of designed sequence  <cit> . in addition, column , sov, illustrates the segment overlap score which is based on the average overlap between the reference and designed segments  <cit> . as it is shown by q <dig> and sov, the proposed algorithm successfully designed appropriate sequences for  <dig> proteins with different lengths and folding classes. in  <dig> samples, resultant sequences have identical secondary structures to the target structure. even in 1nxm, there is just one residue with non-identical secondary structure. furthermore, the value of column  which specifies the iteration number of the algorithm demonstrates the high convergence of gapssif. even in 1nxm, the best possible sequence was designed just through  <dig> iterations and it did not change till termination condition. meanwhile, column  shows the execution time for making and enriching initial population using afr. moreover, column  indicates the execution time to search through the solution space using genetic algorithm operations. thus, column  refers to the total time of proposed algorithm given by the summation of columns  and  plus one second for loading afr. generally, the process of making initial population is in the order of o and the time complexity of iteration is o where l shows the length of target secondary structure. moreover, the space complexity of this algorithm is also in the order of o to save hit map repository and individuals in each generation.

the values of column  illustrate normalized difference of amino acid compositions between designed sequence s = s1…sl and reference sequence r = r1…rl as follows: ndc=120∑j∈Σ|∑i=1lχj−∑i=1lχj|. 

the zero value of ndc shows that amino acids distribution in designed sequences is typical of their references. however, the rationale of having ndc value greater than zero is the one behind pam or blosum substitution matrices, namely some amino acids are mutable to one another. in this regard, the low sequence and fragment identities in columns  and  not only mitigate the conjecture of using the reference sequence from afr in designing sequence for the corresponding structure, but also show high diversity of designed sequences. as it is marked by “#” in additional file 1: table s <dig>  fortunately just five proteins have non-zero fragment identity. in fact, high sequence identity cannot validate the quality of designed sequences alone, since pdb database has been completed from structural perspective not amino acid sequences. as we know many amino acid sequences can be folded to one protein conformation. in addition, this high diversity could be more useful for practical applications such as biological or chemical purposes. meanwhile, amino acid composition variance in column  demonstrates that the designed protein amino acid compositions are typical of the input scaffold folding class  <cit> . the number of successful hits in column  emphasizes that there is an appropriate designed sequence in almost all ten independent runs of the proposed algorithm. in column , the average value of  <dig>  for all  <dig> designed sequences  confirms remarkable achievement of gapssif in solving pssif problem. the success of proposed algorithm is due largely to the evolutionary information and the simulation of multi-structural fragments. column  indicates that although in some executions the predicted secondary structure of designed sequences is not identical to the target structure, the algorithm is able to design sequences with few incorrect residues. it is clear that the zero values in this column clarify a successful design in all ten executions. in order to better represent the simultaneous effect of afr and hmr, the predicted secondary structure accuracy of reference sequences is shown in the last column of additional file 1: table s <dig>  in fact, the limitations imposed by prediction algorithms intentionally are used to enhance the performance of gapssif. to be more specific, for each secondary structure segment we have two possible repositories, the first one is authorized by nature-evolved sequences and the second includes common fragments which are acceptable by both nature and predictor. in fact, gapssif uses a prediction algorithm not only to evaluate individuals as a fitness assessor but also to play an effective role in constructing amino acid sequences. although, the prediction accuracy of a reference sequence is restricted  even in the best secondary structure predictors, threat can turn into opportunity by the complementary collaboration of evolutionary and simulated data.

it should be mentioned that in order to cross-validate evaluation procedure, pdb ids in additional file 1: table s <dig> marked with “*” were omitted while creating afr. eliminating 1y <dig>  1v5i, 2wlv, 2erb and 3fil does not affect gapssif good performance. moreover, despite the existence of 1nxm in afr, it does not have any exact hit.

secondary structure assessment of designed sequences
to assess the quality of designed sequences, a comparison is held between gapssif and the most recent protein design algorithms, evolver  <cit>  and evodesign  <cit> . in this analysis, five protein structures are extracted from  <cit>  to evaluate the aforementioned algorithms. for each input structure, evodesign announces ten amino acid sequences in ten independent runs. each run comprises a population of  <dig> sequences and  <dig> iterations. also, evolver is executed on three different types of sequences for each protein of this benchmark as it was mentioned in background. in addition, gapssif runs ten independent times on the benchmark. for each protein, the size of population is defined based on the number of sub-structures in target structure, and the algorithm is repeated almost  <dig> iterations.

evodesign benefits from a secondary structure predictor in its fitness function with comparable results to pss-pred  <cit>  while gapssif uses a development version of phd  <cit>  called reprof. in order to have a fair comparison between gapssif and evodesign, psi-pred  <cit>  is used to have an impartial secondary structure prediction. for this, psi-pred, pss-pred and reprof prediction results are compared on five proteins in table  <dig>  since gapssif uses reprof as its fitness function, better performance of gapssif draws on reprof prediction results would be doubtful. therefore, secondary structures of designed sequences from gapssif, evolver and evodesign are predicted by pss-pred, psi-pred and reprof predictors. since evolver does not use any prediction algorithm, the results of pss-pred and reprof are sufficient to compare the accuracy of designed sequences.table  <dig> secondary structure assessment of designed sequences. the predicted secondary structure accuracies of designed sequences by gapssif, evodesign and evolver on five proteins are estimated. pss-pred, psi-pred and reprof are used as secondary structure prediction algorithms



table  <dig> illustrates secondary structure assessment of three abovementioned designers, gapssif, evodesign and evolver; such that each designed sequence of each protein is evaluated using three different secondary structure predictors. in other words, the secondary structures of designed sequences obtained by independent executions were predicted by reprof, pss-pred, and psi-pred. thus, columns  and  in table  <dig> respectively indicate maximum and average q <dig> among all independent runs. for each protein in table  <dig>  ten independent runs of evodesign and gapssif as well as three different executions of evolver were used. comparison in this table firmly corroborates strong performance of the proposed method in pssif problem.

undoubtedly, studying the pssif problem is a quantum leap forward in solving protein design, since protein secondary structure represents a primary scaffold of the protein conformation. successful solution for pssif problem by gapssif demonstrates that evolutionary information from naturally occurring proteins can lead ipf problem to an efficient solution. recent studies have demonstrated that pdb database has reached its completeness  which means that there are few structures outside pdb.

tertiary structure assessment of designed sequences
in this subsection, predicted tertiary structure accuracy of designed sequences is evaluated using i-tasser  <cit> . actually, the ultimate goal of ipf problem is to create proteins with enhanced properties or even novel functions. inasmuch as, protein structure determines its function, understanding the functional architecture enables us to study this macromolecule more practical.

thus, five designed sequences by gapssif extracted from  <cit>  are folded by i-tasser  <cit>  where tertiary structure results are evaluated using tm-score  <cit> , assigned ss and rmsd  <cit> . tm-score represents structural alignment score obtained from tm-align  <cit>  and assigned ss shows the similarity between target and secondary structures taken from dssp, as well root mean square deviation, rmsd, measures the average distance among atoms of superimposed proteins. in table  <dig>  tm-score greater than  <dig>  indicates that the structural similarity is not random. moreover, tm-score greater than  <dig>  means that 1zzka, 1r26a, 1xte, 3i4o and 2vou are in the same folding class with the input scaffold which means a relative success in solving ipf problem. the value of mean ± standard deviation  for tm-score indicates that all of the predicted tertiary structures of proteins are in the same fold with their respective native structures. in addition, the value of mean ± standard deviation of the rmsd is  <dig>  ±  <dig> . moreover, the average value of q <dig>  79 %, is acceptable because finding appropriate templates highly affects the precision of template-based algorithms such as i-tasser while the sequence identity of designed sequences is low.table  <dig> tertiary structure assessment of designed sequences. tm-score, rmsd and assigned ss measure the predicted tertiary structure accuracy of designed sequences by i-tasser



despite the simplicity of fitness function of gapssif in comparison to evodesign and evolver, the proposed method shows a good performance in designing amino acid sequences. evolutionary information in both gapssif and evodesign can significantly affect designing appropriate sequences for a target scaffold. while, evodesign creates a position specific scoring matrix of divergent sequences taken from homolog structures to the target structure, gapssif employs fragments of secondary sub-structures which explicitly participate in building up amino acid sequences. the procedure of assembling amino acid fragments respective to the secondary sub-structures of the target generates protein-like sequences with high diversity. on account of not explicitly considering structural features and the simplicity of the fitness function in proposed method, gapssif shows strong performance in solving pssif problem and acceptable results for ipf problem. furthermore, unfair evaluation of gapssif by homology-based folding algorithms due to low sequence identity negatively affects the evaluation designed sequences. in other words, evolutionary information lends gapssif an ability that improves the designing process in this approach by imposing implicitly tertiary structure constrains which implied by natural data.

statistical assessment of designed sequences
in this subsection, two statistical tests are applied to confirm that designed sequences share common characteristics with reference sequences. for this, pot statistic and pearson’s chi square tests are employed respectively to measure bunching and inconsistency of the observed amino acid distribution in a designed sequence.

bunching assessment
one of the possible issues in designing artificial sequences is bunching or grouping of a particular amino acid based on the secondary structure state, e.g. β structures are populated by isoleucine and valine. thus, to exclude this possibility, a pot statistic  <cit>  test is employed to penalize the short-range bunching of particular amino acid in sequence s = s1…sl, as follows: epot=1l∑j∈Σ <dig> −ln1σj <dig>  

where for each amino acid j, potj¯ and σj assigns to the mean and the corresponding standard deviation calculated for a set of non-redundant pdb native sequences . in addition, potj is computed as below: potj=potj1−potj0σj <dig>  

with potj0=ojoj−1ll−1×r1−r×l−11−r, 

and potj1=∑i<ki,k= <dig> …,lχjsi×χjskri−k, 

and σj0=r21−r2×oj2l×1−ojl <dig>  

where oj shows the frequency of amino acid j in sequence s as well r=e−oj/l.

for each protein in additional file 1: table s <dig>  the epot value of designed, reference, bunched and random protein-like sequences are illustrated in table  <dig>  in fact, the epot score of reference sequences are assessed to demonstrate that the bunching of designed sequences is typical of the native protein sequences. moreover, in order to compare the obtained results, the maximum and minimum bunching are assessed by calculating the epot score respectively for bunched and random protein-like sequences. to acquire the maximum bunching, the reference sequences are bunched, e.g. the bunched sequence of dcadcda is aaccddd. in addition, the reference sequences are shuffled to generate random protein-like sequence to obtain minimum bunching value.table  <dig> statistical assessment of designed sequences. 

e
χ
2

 pot statistic test penalizes short-range bunching of amino acids. the e
pot value of reference and protein-like sequences give the minimal bunching. on the other hand, the maximal bunching is obtained from bunched sequences. the e
pot values of designed sequences confirm that their bunching is typical of the native sequences.  chi-square test is applied to determine if there is any significant difference between two sets of categorical data. the χ
 <dig> values indicate that the distribution of designed sequences versus uniprot database is as significant as reference sequences



finally, mean, standard deviation, median, quartile  <dig> and quartile  <dig> of table  <dig> indicate that the amino acid bunching of designed sequences is typical of the reference and random protein-like sequences as well much lower than the bunched sequences.

pearson’s chi-square assessment
pearson’s chi-square test  <cit>  is applied to sets of categorical data to determine if there is any significant difference between the background  and observed distributions of amino acids in a protein sequence. for each protein i with length l, we define a random l-length sequence according to the amino acid distribution in uniprot. in the following, chi-square test is calculated on designed, reference and uniprot-distributed sequences versus background: χj2=∑j∈Σoj−ejej, 

where oj and ej are the frequency of amino acid j in a protein sequence and uniprot database, respectively. table  <dig> illustrates the obtained chi-square for each designed, reference and uniprot-distributed sequences of a protein. the mean, standard deviation, median, quartile  <dig> and quartile  <dig> indicate that the distribution of the designed sequences versus background is as significant as the reference sequences.

CONCLUSIONS
gapssif algorithm performs successful design for its input secondary structure scaffold. interestingly, the acceptable results for 3d structure in lack of crucial tertiary structure features arise from the effect of evolutionary information. on the other hand, taking into account extra important features such as solvent accessibility and torsion angles, can significantly enhance tertiary structure results.

using the evolutionary information from proteins with known structures significantly improves the quality of designed sequences. in fact, ipf problem would be solved by applying this information for both 2d and 3d structures. evidently, in order to have better results in 3d, some effective features such as solvent accessibility and torsion angles should be considered. therefore, the simple fitness function of gapssif would be improved by a multi-featured one to search through the sequence space more precisely.

additional file
additional file 1: table s <dig>   gapssif evaluation on a non-redundant dataset. 



abbreviations
aframino acid fragment repository

afrmamino acid fragment repository mutation

assigned ssassigned secondary structure

ccoil

dsspdefine secondary structure of proteins

ebeta sheet

gapssif genetic algorithm for protein secondary structure inverse folding

halpha helix

hmrhit map repository

hmrmhit map repository mutation

ipfinverse protein folding

pdbprotein data bank

pspprotein structure prediction

pssifprotein secondary structure inverse folding

rmsdroot mean square deviation

scopstructural classification of proteins

