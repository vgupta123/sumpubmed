BACKGROUND
coalescent simulation is a very useful tool in population genetics with a rich variety of applications, particularly to evaluate and compare performances of various statistical methods in rare variant analysis  <cit> , to estimate parameters for different population histories  <cit>  and to infer phylogenetic trees  <cit> . in simulating dna sequence data for studying human complex diseases, recombination hotspots, defined as genomic intervals with local recombination rates increased relative to that of the surrounding dna region, need to be taken into account given their ubiquity in the human genome  <cit> . further, population geneticists are interested in examining haplotype block patterns delineated by recombination hotspots along chromosomes in fine-mapping locations of disease loci. over the past decade, a plethora of coalescent simulators have been developed, e.g. selsim  <cit> , coasim  <cit> , fastcoal  <cit> , mlcoalsim  <cit> , and recoal  <cit> , to name a few. of them, five most representative and widely used coalescent simulators, hudson’s ms  <cit> , mshot  <cit> , markovian coalescent simulator   <cit> , simcoal <dig>  <cit> , and fastsimcoal  <cit> .

coalescent process, based on the neutral wright-fisher model, was first introduced by kingman  <cit>  . simulating the entire ancestral recombination graph   <cit>  encompassing all coalescent and recombination events in the past for a sample of dna sequences imposes a considerable computational burden. in  <dig>  hudson  <cit>  developed ms, a monte carlo program based on standard coalescent that assumes an infinite-sites model for mutational events, which allows for recombination and gene conversion events, as well as symmetric migrations of subpopulations. while the standard coalescent starts at the present time and simulates backward in time, wiuf and hein  are the first to introduce a sequential interpretation of the coalescent with recombination  <cit> , such that genealogies could be simulated by moving along a dna sequence. based on the wiuf and hein algorithm, mcvean and cardin in  <dig> developed a sequential markov coalescent  method  <cit> . the smc starts with a coalescent tree at the left-hand end of the sequence and progressively modifies the tree with recombination events as it moves to the right, and has been shown to produce patterns of polymorphisms and linkage disequilibrium  extremely similar to those generated under a classical arg model  <cit> . smc’ , an improved algorithm based on the smc method, was developed by marjoram and wall in  <dig>  <cit> , such that a lineage separated by a recombination event is allowed to also attach to its old path . while retaining the speed and memory efficiency of smc, smc’ appears significantly more accurate when benchmarked by the exact coalescent process. macs, also a variant of the wiuf and hein algorithm, generates simulated data that are virtually identical to data simulated under the standard coalescent, but in much less time and using much less memory. macs is considered as a “generalized” smc, which could provide a better approximation to results of standard coalescent than smc, by tuning a user-specified “history” parameter h denoting a sequence length  <cit> . taken together, both smc’ and macs give closer approximations to standard coalescent than smc.

although a set of dna sequences with a pre-determined number of recombination hotspots at user-defined positions could be generated by mshot, macs, simcoal <dig>  and fastsimcoal, there appears to be a lack of rigorous validation of hotspot detection software tools in the current literature. popular computer programs for discovering recombination hotspots include ldmap  <cit> , ldhot  <cit> , ldhat  <dig>  rhomap package  <cit> , hotspotter  <cit> , and sequenceldhot  <cit> . the widely used haploview program  <cit>  is also an appealing tool to visually localize recombination hotspots given the delineated ld block structure. based on popularity, ldhat  <dig>  rhomap, sequenceldhot, and haploview programs were chosen for detecting recombination hotspots in both real data and simulated data generated by the coalescent process. because sequenceldhot gave the best performance in inferring locations of cross-over hotspots, recombination hotspots simulated by mshot, macs, and fastsimcoal were subject to validation by sequenceldhot.

methods
coalescent process
coalescent process was initially derived as an approximation of the neutral wright-fisher model. this approximation works well when sample sizes are small relative to the population size. mutations are assumed to be poisson distributed along each branch given the mutation rate and branch length. normally, an infinite-sites model  <cit>  is assumed, which means no recurrent mutations occur. each recombination event breaks the sequence into several segments, and each segment is modeled by a genealogy tree. simulation of recombination hotspots is realized by changing the rates where these recombination events occur. the process that includes both mutation and recombination events is illustrated by args . the smc is an approximating algorithm for simulating a series of trees that differ from each other by a single recombination event, starting from the left end and moving to the right end of the dna sequence.

wright-fisher model
consider a population of constant size consisting of n diploid individuals, which means there are 2n copies for a given gene. generations are assumed to be non-overlapping and denoted by t =  <dig>   <dig>  …. each individual in the next generation receives two copies of the gene  and for each respective parental copy, the gene is selected randomly and with replacement from the two copies of the gene present among the parents. at time t =  <dig>  without loss of generality, assume i  of these gene copies are of type 
a
. let y
t
 denote the random variable for the number of type 
a
 gene at the time of t, then y
t
|y
t-1
= y
t-1
 ~ bin , such that 

 pyt=yt|yt-1=yt-1=2nytyt-12nyt1-yt-12n2n-yt, 

where y
t
 denotes the realized value of the random variable y
t
.

based on this model, the trajectory of the coalescent process  tracing from the current generation backwards in time to the generation where 
a
 is coalesced could be modeled. the current generation could then be simulated through this trajectory given a random seed.

arg
figure  <dig> illustrates a simplest arg  <cit> . take the third 4-letter sequence “tcct” as an example. the common ancestral sequence evolves into two branches. for each branch, mutations have taken place on alleles at loci  <dig> and  <dig>  respectively, giving rise to “tcgt” and “acct”. next, a recombination event arises between these two sequences on , and “tcct” is produced. in the standard coalescent, a full arg delineating all past coalescent and recombination events is constructed, with simulated samples corresponding to the edges of the graph.

smc approach and its two variants 
in contrast to standard coalescent which starts at the present time and is simulated backwards in time, the smc approach  <cit>  builds a coalescent tree by moving along the dna sequence starting from the left end, and progressively updates the tree by incorporating recombination event until the right end of the tree is reached. the region flanked by two neighboring recombination events is modeled by a local tree. recombination is assumed to follow an exponential distribution along the sequence. a recombination event occurs randomly along the current tree, and the detached recombining lineage is free to coalesce with the other remaining lineages, leading to a new tree with a potentially different topology and most recent common ancestor  . smc’  <cit> , a variant of smc, allows the detached lineage cut by recombination event to coalesce with the exact same branch where it is detached from , and results in a closer approximation to exact standard coalescent. macs algorithm  <cit> , also a modified smc algorithm, further allows for coalescence with trees one recombination away on the left hand side, thus achieving a higher accuracy than smc in approximating the standard coalescent. fastsimcoal  <cit> , a completely rewritten continuous-time implementation of simcoal <dig>  <cit> , implements a fast smc’ that allows for multiple recombination events between markers at fixed recombination distances on the sequence.

detection of recombination hotspots
the ldhat  <dig>  rhomap package  <cit> , sequenceldhot  <cit> , and haploview program  <cit>  were applied respectively to detect recombination hotspots in the simulated sequences. ldhat is a popular software for estimation of recombination rates, which was developed based on bayesian reversible-jump markov chain monte carlo  algorithm, and rhomap is a new method incorporated into ldhat  <dig>  that specializes in fitting cross-over hotspot model. another widely used computer program in detecting recombination hotspots— sequenceldhot, uses an approximate marginal likelihood method of  <cit>  to estimate a likelihood ratio  statistic to unveil a cross-over hotspot. further, haploview was implemented to obtain a visualization of the ld block structure that could reflect varying recombination rates along a contiguous dna sequence.

real data set
the 216-kb human leukocyte antigen  class ii region is a well-studied region where recombination hotspots have been identified with sperm typing technology  <cit> . the original data set analyzed in the current study  contains genotype data for  <dig> unrelated uk caucasians for  <dig> markers   <cit> . a subset of  <dig> snps without missing data were selected for recombination hotspot detection. multi-locus haplotypes are required as an input for hotspot detection programs such as sequenceldhot, and they provide crucial phase information that is important for understanding haplotype structure  <cit> . therefore, haplotypes across the  <dig> snps were reconstructed by phase v <dig>  program, a haplotype inference method based on the  coalescent theory using a variant of canonical gibbs sampling  <cit> ,  an ld decay model  <cit> , and  the partition-ligation algorithm  <cit> . in total,  <dig> haplotypes for the 216-kb region were statistically inferred.

simulation data sets
in order to assess the running efficiency with or without recombination hotspots, we simulated a set of dna sequences  according to 0-, 2-, and 5-hotspot models using these five simulators respectively. all three hotspot models were simulated based on sequences with lengths 1- and 5-mb, respectively. for each hotspot model and each sequence length, we simulated sample sizes  of  <dig>   <dig>   <dig> , and  <dig> , respectively. we implemented a symmetric two-island model with a total effective population size of  <dig> . the recombination rate and mutation rate were both assumed to be  <dig>  × 10- <dig> per site. fifty replicates were done and the running times were recorded. all simulations were run on the platform — linux os,  <dig> -ghz cpu, 1tb-ram.

to validate the recombination hotspot position and intensity accuracy, we simulated the data sets according to 2- and 5-hotspot models along a 200-kb long dna sequence. the recombination hotspots’ intensities were set to be  <dig> times higher compared to the background recombination rates.

RESULTS
features comparison
the features of the five simulators  are shown in table  <dig>  except for ms, all the other four simulators are able to simulate recombination hotspots with arbitrarily chosen recombination rates. simcoal <dig> and fastsimcoal cannot simulate gene conversion events, whereas ms, mshot, and macs could. macs, simcoal <dig> and fastsimcoal allow stochastic uncertainty in sampling of segregating sites to be incorporated as a factor. for simulating rare mutation events, the desired allele frequencies could be preset for macs, simcoal <dig> and fastsimcoal, but not for ms and mshot. one of the advantageous features is that these coalescent simulators are able to simulate according to presumed migration patterns , although the population structures vary to some degree — ms, mshot and macs require these subpopulations to be symmetric across all islands , while both simcoal <dig> and fastsimcoal allow for arbitrarily chosen population structures . this feature makes the coalescent simulation a good choice for simulating admixture populations. both simcoal <dig> and fastsimcoal could simulate a mixture of different data types including dna sequences, snps, microsatellites, which make them good tools for studying a variety of chromosome structures. in particular, the coalescent simulation strategy of fastsimcoal <dig> adopts a so-called “approximate bayesian computation ”  <cit>  to estimate the demographic parameters and the mutation and recombination rates, which has a unique feature that allows for sampling simulation parameters from predefined prior distributions, thus facilitating simulations for estimating the parameters. because simcoal <dig> implements a discrete time generation-by-generation simulation, it allows for multiple coalescent events per generation. however, the generation-by-generation simulation is very time-consuming, which significantly lowers its computational speed .

†standard coalescent.

#modified version of sequential markov coalescent.

*discrete time generation-by-generation simulation.

**google scholar .

running efficiency
for each design of simulation, we generated  <dig> replicates according to our simulation settings  and the average execution times are presented in tables  <dig> and  <dig>  for simulations of a 1-mb sequence , all the simulations could be performed within  <dig> minutes. when sample size was increased to  <dig> , both ms and mshot gave a segmentation fault error on our platform  when 0-hotspot model was simulated. for simulations of a 5-mb sequence , both ms and mshot gave segmentation fault errors when the sample sizes exceeded  <dig>  this indicates the limitations of ms and mshot in simulating long sequences and for large sample sizes. it is interesting that when recombination hotspots are simulated, mshot is able to simulate long dna sequences for large sample sizes. this is because mshot is exactly the same as ms when simulating a 0-hotspot model. when simulating 2- and 5-hotspot models, mshot and simcoal <dig> performed much slower than macs and fastsimcoal because of algorithmic differences. further, when the number of hotspots got larger, mshot performed slower than simcoal <dig>  to simulate  <dig>  dna sequences , it could take three and a half hours for mshot, and one and a half hours for simcoal <dig>  respectively. in contrast, macs and fastsimcoal were much faster – simulating  <dig>  of 5-mb sequences under the 5-hotspot model took only  <dig> seconds for macs and  <dig> seconds for fastsimcoal, respectively. for all simulation settings, fastsimcoal always performed a little faster than macs . it is worthy to mention that increasing the number of hotspots did not affect the execution times for macs, simcoal <dig>  and fastsimcoal, but did so for mshot.

n
*
* “n” denotes sample size  for each replicate. “---” denotes a segmentation fault .

n
*
* “n” denotes sample size  for each replicate. “---” denotes a segmentation fault .

validation of recombination hotspots
for real data based on the hla class ii region, ldhat  <dig>  rhomap, sequenceldhot and haploview were applied to detect the six recombination hotspots  identified by sperm typing  <cit> . this 216-kb region has a comparable length to that of our simulated data . results of these three hotspot detection programs are shown in figure  <dig>  the haploview plot displayed a rugged “block-like” pattern of haplotype structure , which did not reveal precise locations of these recombination hotspots. since ldhat  <dig>  rhomap adopted the mcmc approach, the estimation of recombination rates along the dna sequence was performed in five runs in order to determine the consistency across different runs. for each time, we ran rhomap for a total of  <dig> , <dig> iterations including a burn-in of  <dig> , <dig> iterations and taking a sample every  <dig>  iterations, as suggested by the ldhat  <dig>  user manual, both block penalty and hotspot penalty were set to be 0’s. as shown in figure  <dig> , moderate variations across these five runs were observed , and the positions of the six recombination hotspots were not indubitably discernable. the lr graph for the estimation results by sequenceldhot provided the most accurate results, correctly identifying five of the six recombination hotspots, but not the leftmost hotspot  which is the weakest hotspot spaced very close to the adjacent dna <dig> hotspot . for simulated data, we first simulated a total of  <dig> dna sequences  for  <dig> snps based on a 1-hotspot model by macs. ldhat  <dig>  rhomap was run five times  to detect this recombination hotspot for a single simulation data set. then, sequenceldhot was run to detect the recombination hotspot. among the five runs of ldhat  <dig>  rhomap, only one run appeared to identify the correct hotspot peak , and the results across these five runs were not consistent . by contrast, sequenceldhot precisely detected the recombination hotspot at the correct position . we also simulated a total of  <dig> dna sequences  for  <dig> snps based on a 2-hotspot model by fastsimcoal. haploview results gave rise to a rumpled ld pattern that could be barely perceived as three “fuzzy” ld blocks , but the precise locations of the two recombination hotspots were far from clear . however, sequenceldhot correctly detected the two simulated recombination hotspots at expected 70- and 140-kb positions  unambiguously. taken together, our results based on both real and simulated data indicate that for hotspot detection, ldhat  <dig>  rhomap performed much less accurate than sequenceldhot, and the visual discernment of recombination hotspots based on the haploview plot was much less obvious as compared with results of sequenceldhot. therefore, sequenceldhot was chosen as the software tool to validate the recombination hotspots from simulated data by various coalescent simulators, which was shown to be much more robust and accurate in detecting recombination hotspots than the other two computer programs. twenty replicates for each simulation setting  were simulated for each coalescent simulator. two types of metrics were applied in assessing the accuracy of the simulated recombination hotspots. the first metric is the proportion of simulated hotspots that could not be detected by sequenceldhot based on a hotspot intensity threshold. the other metric is the extent of shifting of the detected hotspot position from the expected position. we define a recombination hotspot shifting > 1-kb  as a significant shifting. for each recombination, hotspot, sequenceldhot provided an estimated value of the lr statistic. if the lr exceeded a predefined threshold , the hotspot would be treated as a significant one. the higher the lr, the more certain the corresponding hotspot. we chose the default parameter settings such that the width  of the hotspot was  <dig> -bp, and the spacing  was  <dig> -bp. the value of c of lr for claiming a significant hotspot was set to be  <dig>  of the five programs, only mshot, macs, and fastsimcoal were selected for comparisons because ms could not handle a user-specified hotspot model  and simcoal <dig> was not so scalable .

†
*a negative number indicates a shifting to the left of the expected position.

†a significant shifting was defined as a shifting out of the range defined by ± 1-kb away from the expected peak position.

when sequence data were simulated according to the 2-hotspot model, sequenceldhot detected  <dig> of the total  <dig> hotspots from data simulated by mshot, and of the detected ones, two shifted significantly away from their expected positions. the mean shifting of all detected hotspots was 26-kb to the left. it had the highest mean lr  and the lowest standard deviation  . data simulated by macs had the lowest mean lr  and the highest standard deviation , with  <dig> of the total  <dig> hotspots detected and  <dig> of the detected ones significantly shifted. the mean shifting of recombination hotspots simulated by macs was  <dig> -kb. hotspots simulated by fastsimcoal had the smallest shifting — a mean of  <dig> -kb, but had the least number of significant ones found by sequenceldhot —  <dig> of  <dig>  two of the detected ones were found significantly shifted. thus, our simulation results based on 2-hotspot model showed that, macs had the poorest performance, with the largest mean shifting and number of significant shiftings, whereas mshot and fastsimocal had comparable performances. for simulations according to the 5-hotspot model, fastsimcoal-simulated data had the best performance, with  <dig> out of  <dig> hotspots detected by sequenceldhot, as compared to  <dig> out of  <dig> for mshot-simulated data, and  <dig> out of  <dig> for macs-simulated data. besides, it had the highest mean lr  and the lowest standard deviation . its mean shifting was also the lowest , while the number of significantly shifted hotspots was comparable to that of macs and smaller than that of mshot. the mean shifting for mshot was substantially higher than those of macs and fastsimcoal, which was  <dig> -bp to the left. in our simulations based on the 5-hotspot model, fastsimcoal had the most stable performance and generated the most accurate recombination hotspots whereas mshot had comparatively the worst performance of the three coalescent simulators. figure  <dig> showed positions of hotspot peaks detected by sequenceldhot from data simulated by mshot , macs , and fastsimcoal  according to the 5-hotspot model. for each model, for the sake of clarity, we randomly selected five of the  <dig> replicates, and then superimposed them on the same graph. each color represents a replicate. all these five lines were supposedly to be matched perfectly with  <dig> hotspot peaks at positions 3-, 6-, 9-, 12-, and 15-kb, respectively, if all the simulations were accurate. however, the positions of hotspot peaks detected from data simulated by mshot were not consistent across the five replicates . a significant shifting was observed for one of the five replicates , and the lrs of the five hotspot peaks across the five replicates exhibited dramatic variations . if an lr of  <dig> was applied as the threshold to define hotspot peaks,  <dig>  were “noisy”  peaks out of the  <dig> total detected peaks   from data simulated by mshot. hotspot peaks detected from macs-simulated data appeared more consistent  — no significant shiftings were detected and  <dig>  “noisy” peaks out of  <dig> total detected peaks were found. for fastsimcoal-simulated data sets, no “noisy” peaks were found  and the positions of these hotspot peaks were the most consistent . a similar pattern was shown when the lr graph was generated for all  <dig> data sets simulated by each of mshot, macs, and fastsimcoal . therefore, although mshot could be applied to simulate recombination hotspot peaks, their positions appear to be less precise compared to those of macs and fastsimcoal, at least based on a 5-hotspot model.

discussion
advances in next-generation sequencing technologies have resulted in a dramatic increase in generating whole genome sequence data. there is an urgent need to develop novel methods for analyzing such huge amounts of data. along with it, computer simulation of genome-wide data is also crucial. coalescent model has been the most attractive model in population genetics, and is widely recognized as the cornerstone in statistical analysis of dna sequences  <cit> . the quintessential feature of coalescent is to start with the current sample of dna sequences and then trace backward in time to identify past events since their mrca  <cit> . the standard coalescent provides an accurate characterization of genealogies of haploid individuals of constant size, which can incorporate recombination  <cit> . however, the original standard coalescent does have several restrictive features based on the neutral theory that limits its application to real-world dna sequences, and has been extended to handle selection  <cit> , gene conversion  <cit> , and migration  <cit> . as indicated by  <cit> , the generating models based on coalescent theory should resemble real data as much as possible. therefore, even the exact standard coalescent might not be the “best” model that could generate simulated data “most” similar to present-day dna sequences. nevertheless, the coalescent model based on the wright-fisher model is a theoretically convenient and reasonable approximation to real-world scenarios. by incorporating prior information based on coalescent theory, phase v <dig>   <cit>  significantly improved phasing accuracies for both real and simulated data sets. therefore, standard coalescent remains a widely applied tool in modeling real-world dna sequences. however, standard coalescent implemented based on full args incurs a high computational cost for a relatively long dna sequence , making it difficult to simulate dna sequences at the genome scale for a large sample size . to overcome this obstacle, smc, an approximation to standard coalescent, has been developed which scales linearly with the length of the dna sequence being simulated from the left to the right, and has the remarkable advantage of being much faster and more extensible than standard coalescent algorithm  <cit> . based on variants of smc, both macs and fastsimcoal could generate ld patterns of dna sequences very close to those generated under a classical arg model but much more swiftly  <cit> .

after our extensive simulations based on five widely used programs, for simulating up to a few hundred of samples  with sequence lengths spanning several mbs, hudson’s ms is a great choice for its flexibility in handling historical events and robust modeling. for simulating sequences up to tens of or a few hundred of mbs or a large number of samples, ms is no longer adaptable. in our simulations, ms could not handle  <dig>  samples for a 1-mb sequence or  <dig> samples for a 5-mb sequence. the basic algorithm of mshot  <cit>  is an extended version of ms  by adding both recombination hotspot and gene conversion hotspot models to the implementation of standard coalescent by ms. in simulating the simplest scenario of 0-hotspot model assuming also no gene conversions, the implementation of mshot appears to be the same as that of ms . however, when there is at least one recombination hotspot in the simulated dna sequences, the implementation of mshot algorithm must differ from that of ms to account for the presence of recombination hotspot in coalescent simulation. as stated in  <cit> , the modification of mshot allows the user to insert any pre-specified non-overlapping cross-over hotspots and non-overlapping gene conversion hotspots into the genetic region by specifying the locations and intensities for each. specifically, incorporating r recombination hotspots requires the user to specify a left endpoint , right endpoint , and intensity  for each hotspot h, where h =  <dig>  …, r. inside a given hotspot h, the probability of a recombination occurring between two adjacent base pairs in a single transmission from parent to offspring is λ
h
r
bp
. outside recombination hotspot, this probability is the recombination probability per base pair — r
bp
. that is the reason when for simulating scenarios for 2- and 5-hotspot models, mshot performance appears to be much slower  than for the 0-hotspot model. in addition, in the absence of a recombination hotspot, just like ms, mshot could not handle a sample size of  <dig>  sequences for simulating 1-mb dna sequence data  or sample sizes of  <dig>   <dig> , and  <dig>  for simulating 5-mb dna sequence data . however, in the presence of at least one recombination hotspot, by taking a very different implementation compared to ms by including a more complex hotspot model, mshot could handle such large sample sizes. by contrast, macs, which is based on a modified smc algorithm, could achieve coalescent simulations for many more samples with much longer length, while accurately approximating the results simulated by standard coalescent  and maintaining its flexibility. theoretical interpretations for empirical observations of table  <dig> are as follows. when simulating 2- and 5-hotspot models for relatively long dna sequences , mshot  and simcoal <dig>  are understandably much slower than macs and fastsimcoal due to their critical algorithmic differences — macs has taken a faster modified smc approach and fastsimcoal has also taken a computationally more efficient smc’ approach. as indicated in background section, the smc method of  <cit> , and the smc’ method of  <cit>  are both approximations to the standard coalescent algorithm, which have the advantage of being much faster. specifically, macs  <cit>  is a generalized smc which is equivalent to smc when the “history” parameter h =  <dig> bp, but becomes a closer approximation to ms than smc when h increases . generally speaking, macs produces simulated data that are virtually identical to data simulated under the standard coalescent, but in much less time and using much less memory  <cit> . similar to macs, fastsimcoal is based on a continuous-time smc’ by applying abc, which is much faster than mshot or discrete generation coalescent approach of simcoal <dig> that also gives excellent approximations to standard coalescent with a much quicker speed  <cit> .

based on cross-over hotspot validation results , recombination hotspots simulated by macs did not appear to be as accurate as those of mshot and fastsimcoal for a 2-hotspot model. for a 5-hotspot model, macs outperformed mshot, but fastsimcoal was the most accurate simulator. when there is a demand for simulating dna sequences under a variety of population genetic models , fastsimcoal appears to be the best choice. different data types  and sequences of different structures could be simulated by fastsimcoal, in addition to its advantages in terms of efficiency, accuracy, and capability of generating any user-defined patterns of recombination hotspots. from a practical standpoint, when a set of recombination hotspots need to be simulated, mshot, macs, and fastsimcoal are all applicable, but mshot performed much slower than macs and fastsimcoal, and had the lowest accuracy based on validation results of sequenceldhot.

CONCLUSIONS
while hudson’s ms remains an excellent choice for simulating relatively short dna sequences  under general scenarios, macs and fastsimcoal are much more scalable and flexible in simulating many different demographic histories and diverse dna sequence structures . based on both running time and hotspot validation comparisons, fastsimcoal is shown to be the fastest and most reliable and consistent coalescent simulator, especially when the number of hotspots is large. macs is a runner-up with a lower speed and a slightly less accuracy. based on our extensive simulation evaluation and comparison results, cautions should be taken in applications of these widely used coalescent simulators, such that sequence data simulated by a given software should be checked and validated — e.g., the positions and intensities of recombination hotspots, to guard against any discrepancy between the intended objective and the actual simulation results. further, for detecting and validating recombination hotspots, among the three widely used computer programs, sequenceldhot appears to be the best choice— fast, robust and accurate. in real-world dna sequence data, a variety of factors such as gc content, local ld block structure, dna elements that act as enhancers or inhibitors of recombination  <cit> , could affect the intensities and locations of recombination hotspots along a given chromosome. for example, recombination hotspots correlate positively with gc content  <cit> . further, certain dna motifs are enriched in cross-over hotspots, among which cctccct and ccccacccc are the most prominent  <cit> . thereafter, in real-world scenarios, these factors should be taken into consideration in identifying genuine cross-over hotspots.

abbreviations
abc: approximate bayesian computation; arg: ancestral recombination graph; ld: linkage disequilibrium; lr: likelihood ratio; hla: human leukocyte antige; mcmc: markov chain monte carlo; mrca: most recent common ancestor; smc: sequential markov coalescent; snp: single nucleotide polymorphism; str: simple tandem repeat.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
tn conceived the idea for the project, tn and hwd contributed to study design and conception, ty and tn participated in data simulation, analysis and interpretation, ty and tn drafted the manuscript and hwd revised it critically for intellectual content. all authors read and approved the final version of the manuscript.

