BACKGROUND
protein structure comparison is crucial for understanding protein evolution, architecture and function  <cit> . the protein data bank  database  <cit> , a public repository for macromolecule structure data, is a rapidly growing database which currently  contains structural information of  <dig>  proteins. the steady growth of the pdb is now beginning to place considerable computational demands on queries which search the entire database, a routine task for determining structural protein similarities. there are a number of existing techniques to compare protein structures: methods based on structural alignments  compare protein structures at a level of residues , and hence detect structural similarities  with high sensitivity and accuracy. however, the long running times of these methods are prohibitive for exhaustive searches across the entire database. pride  <cit>  has been proposed for fast recognition of folds, with reasonable accuracy, using the cα - cα distance profiles of a fixed range of residues. sarst  <cit>  utilizes sequence alignment methods to compare ramachandran codes of different proteins. it is fast enough perform database search. yakusa  <cit>  and sheba  <cit>  also compare protein structures using their one-dimensional characterizations, either based on protein backbone internal angles or on their environmental profiles. although these methods are significantly faster than their structural alignment-based counterparts, the lack of global geometric information makes these methods less accurate. several methods have also been proposed which compare proteins at a coarse level of secondary structures  <cit> . prosmos  <cit>  and tableausearch  <cit>  both try to match the orientation between secondary structure elements . rather than only using angles, opaas  <cit>  uses a probability-based method to align the angle-distance map of sses. mainly, these programs look for similarities in the geometry of interactions between the secondary structural elements in the proteins being compared.

lesk  <cit>  proposed tableau as a concise representation of protein folding patterns. the tableau encodes the geometry of interactions between pairs of secondary structural elements that are in contact  <cit> . konagurthu et al.  <cit>  proposed three methods to identify structural similarities using a generalized tableau description of protein folding patterns. their first method allows the identification of identical and near-identical folding patterns in constant time. the second method facilitates a rigorous comparison of two tableaux to identify maximally similar substructures using computationally expensive quadratic and linear integer programming techniques.  the third method  was proposed as a fast heuristic to detect similarities using a two-step dynamic programming method.

most of the existing protein comparison techniques share a major limitation. they are computationally expensive, requiring hours or even days to search a large protein structure database. this has motivated us to develop a new and rapid protein comparison algorithm, ir tableau, based on feature indexing techniques from information retrieval . our method transforms the robust tableau representation of a protein fold into a vector of features, allowing the application of several well-known similarity measures to efficiently compare these feature vectors. ir tableau achieves excellent search efficiency , while providing accuracy comparable to the existing methods.

methods
this section describes our ir tableau method, which utilizes ir techniques to index and search protein structures efficiently.

tableau representation of protein structure
briefly, tableau encodes the geometry of pairs of secondary structural elements  - that is, helices and strands of sheet  <cit> . the relative orientation of a pair of sses in a protein is defined by the angle between their axes. each angle between pairs of sses  uses a double-character encoding scheme  <cit> . 

there are  <dig> possible combinations of two characters. for example, table  <dig> shows the tableau of a ubiquitin-like protein, 1ubi . we used the idea of generalized tableau, which is introduced in  <cit> .

information retrieval  approach
a typical ir system aims to retrieve documents that are relevant to keywords  in a user-query. each document is represented as a vector of weights, where each weight denotes the importance of a given term. terms are usually the words used by a document and each weight may correspond to the frequency of occurrence of some terms in the document. the collection of all term weights for a document effectively describes the contents of that document. this is known as the 'bag-of-words' model. different documents can then be compared by comparing their weight vectors. if they use similar weights for each term, then they are likely to be related. since only vector comparison is used, similarity matching of vectors can be performed extremely fast.

in our protein context, we analogously translate each protein tableau into a vector of weights, where each weight describes the importance of some feature of the protein. protein structure comparison is then performed by similarity matching of protein vectors. we next describe our technique for creating the vector for a protein structure.

protein feature construction method
we generate a vector of features for a given protein based on its tableau representation. so effectively, we translate a two dimensional  tableau into a one dimensional  vector. each cell in a tableau describes the angle between a pair of sses in the protein. for example, in table  <dig>  the ot in < row  <dig> column 2> is the orientation between sse β  <dig> and sse β  <dig>  to turn this tableau into a 1d vector, we summarise the distribution of angle frequencies for each possible pair of sse types.

each feature of our vector will describe a pair of sse types in one of eight possible orientations: pe, pd, rd, rt, ot, os, ls, and le. the value of each feature corresponds to the frequency at which that configuration occurs in the protein. there are also four possible pairs of sse types: αα, αβ, βα and ββ . hence each protein can thus be described by  <dig> ×  <dig> =  <dig> features.

again, in table  <dig>  there are two ββ ot in the tableau of 1ubi, which appear at <row  <dig>  column 2> and <row  <dig>  column 6> in the matrix. therefore the value for the feature ββ ot is  <dig>  the full feature vector for this protein is given in table  <dig>  in this table, each number indicates the frequency for some combination of sse types and angle. in summary, there are  <dig> features, each with an associated frequency count. we construct the above feature vector transformation for every tableau in a structure database. given a protein structural query, searching can now be performed rapidly in the new 1d feature space.

similarity function
choice of an appropriate similarity function is important for accurate comparison. in ir tableau, there are a number of possible similarity functions which can be applied for comparing the protein vectors.

cosine similarity  <cit>  simply computes the cosine of the angle between two vectors in a n dimensional space. a higher score implies a smaller angle between the two vectors. if the value is  <dig>  it means that the two vectors have the same direction.  

the jaccard index  <cit>  is another popular similarity function, defined as the size of the intersection, divided by the size of the union of two sets.  

where a and b are sets.

the tanimoto coefficient  <cit>  is a generalization of the jaccard index.  

euclidean distance is another means of measuring similarity of proteins. unlike the similarity functions described above, the value for euclidean distance is not normalized to be between  <dig> and  <dig>   

where ai is the ith element of vector a, bi is the ith element of vector b.

unless stated otherwise, our results in the rest of the paper assume the use of the cosine similarity function.

variation of featuring process
in addition to the method we have described for generating  <dig> features for each protein , we have also explored the value of associating further, additional features with each protein vector. in general, there is a trade-off between adding extra features which can help discriminate between classes of proteins, versus adding too many features which overwhelm accurate similarity calculation.

alternative combinations of sses
in our base method, ordering information was only used for pairs of sse types. this description loses some information about the position of each sse. by instead preserving positional information about sses, we can hope to build a more accurate profile in each protein vector. incorporating such relationships may be carried out as described in the following example. protein 1ubi, whose tableau is shown in table  <dig> has  <dig> sses: sse <dig> compared with sse <dig> is ββ ot, sse <dig> compared with sse <dig> is βα rt and sse <dig> compared with sse <dig> is βα le. combining these, we get the triplet of sse <dig>  sse <dig> and sse <dig>  which is ββα ot rt le. in general, we can record statistics for all triplets of the form ssem, ssem+ <dig> and ssem+ <dig>  . in this triplet approach, there there are  <dig> =  <dig> sse types and  <dig> =  <dig> angles, giving a space of  <dig> ×  <dig> =  <dig> possible features. this idea can be further extended to the use quadruplets, quintuplets and so on of sses to generate a larger feature space. however, as we can clearly see, the size of the protein vector grows exponentially with the increase in the number of sses in each combination. another possibility is to disregard the ordering information between sses, which may be useful for non-linear matching of sub-structures. in this case, there are only three possible orderings, between two sses, rather than four: all αα, ββ and αβ . a final possibility is to only consider consecutive sses for generating features from a tableau  <cit> . this can be done by only using the ±  <dig> off-diagonal entries.

approximate ordering: partitioning the sse chain
using the exact order of sses as the basis for forming a protein vector can cause the vector to be very large, for complex combinations. to handle this, we have investigated a strategy which uses approximate positions for each sse, rather than exact positions. suppose we have a protein with n sses. the sequence of sses can be partitioned into two halves along the chain. all the sses in the first-half part will be given a position marker p <dig>  sses in the second-half will be marked as p <dig>  then, when comparing each pair of sses, position markers can be used to provide additional position information. in protein 1ubi, the first sse compared to the last sse will be β p <dig> β p <dig> ot. the number of features generated by using this strategy will then be  <dig> sse types × <dig> angles × <dig> positions =  <dig> features. if a protein sse sequence is partitioned into n parts, the number of features will be  <dig> sse types ×  <dig> angles × n2positions.

datasets

for our experimental evaluation, we use:

 <dig>  the entire astral  <dig>   <cit>  protein domain database. all  <dig> protein domains in this data set are processed through the tableau generator program of konagurthu et al.  <cit> . the program successfully generated  <dig>  tableaux of protein domains covering  <dig> different scop folds. using these tableaux, our index database is generated in a single preprocessing step.

 <dig>  the astral  <dig>  95% sequence-identity non-redundant data set. we generate our index database from the tableau data set published by stivala et al.  <cit>  containing  <dig>  entries.

we also use the query data set of stivala et al.'s  <cit>  containing  <dig> randomly chosen protein domains. each run using a query returns a list containing all proteins in the respective index databases along with the associated scores.

evaluation methodology
all experiments were conducted using a intel core  <dig> duo  <dig>  ghz processor running ubuntu  <dig>  linux system. ir tableau was implemented in java. scop  <cit>  fold classification is used as the gold-standard while assessing the accuracy of each search. we use the receiver operating characteristic  curve, the area under this roc curve , precision-recall curve and the mean average precision  to gauge the accuracy.

given a query protein pq which belongs to the scop fold fq, let us consider the top k proteins returned by the search as hits and the remainder as misses. for an ith protein  belonging to the scop fold , if  = fq and i ≤ k then the protein  is a true positive . on the other hand, if  ≠ fq and i ≤ k then  is a false positive . if  ≠ fq and i >k then  is treated as a true negative . otherwise,  is a false negative . using the above statistics, we can then compute the true positive rate , false positive rate  and positive predictive value  using the following formulae:  

using the above formulae tprk, frpk and ppvk are calculated for all  <dig> ≤ k ≤ n, where n is the size of the data set. the roc defines a curve of points with fprk as the abscissa and tprk as the ordinate. precision-recall defines a curve with tprk and ppvk as abscissa and ordinate respectively. for a good search system, the roc curve is closer to the top-left corner and the precision-recall is closer to the top-right corner of the plot.

the area under the roc curve  is a single-figure measurement for the quality of an roc curve. the averaged auc over our experiment with queries can thus be used to evaluate the method's performance. mean average precision  is another useful single-figure accuracy measurement. here, the average precision over the top k positive results is computed by varying k over all possible values. the mean of these precisions gives the map.

RESULTS
in this section we first compare our ir tableau against several popular methods for protein structure comparison. prosmos, opaas, sarst and some other web-server based programs are not tested, as results are not comparable. later, we assess the sensitivity and accuracy of ir tableau using different types of features defined in this work.

comparison between protein comparison algorithms
running time performance
comparing the running times in table  <dig>  we can clearly see the superior speed of ir tableau taking merely  <dig> seconds to complete the  <dig> query set, while all the other methods take hours and in some cases even days. searching the full astral  <dig>  database ir tableau takes only  <dig> seconds, while the search times of other methods increase drastically. we note here that qp tableau, sheba, and vast are infeasible to run on the full astral data set. for the smaller astral 95% data set, the search speeds reported in this work of qp tableau, sheba, vast, and tops are estimations based on the corresponding figures from the work of stivala et al  <cit> . these estimations account for the different systems used to conduct our experiments, by using the running time of tableausearch as a reference to normalize the speeds reported in  <cit> .  on the other hand, tableausearch takes a variable amount of time to complete a query depending on the size of the query. for example it takes  <dig>  seconds  to search the whole database using scop domain d1ubia, a protein which contains only  <dig> sses. but searching on the scop domain d1f6dc_ containing  <dig> sses takes  <dig> seconds. for the same query of d1ubia_, yakusa takes  <dig> minutes to search the full astral  <dig>  data set.

roc curve and precision-recall curve performance
in table  <dig>  the auc is shown for the  <dig> query set. surprisingly, ir tableau achieves the second highest auc value of  <dig> . this clearly suggests that the protein feature vectors seem to capture important structural information from tableau. roc curves for ir tableau, tableausearch and yakusa are shown in figure  <dig> 

yakusa has the highest tpr when the fpr is less than  <dig> . after this point, ir tableau becomes slightly better than the other two. tableausearch is always worse than yakusa, but better than ir tableau when the tpr less than  <dig> . so in terms of roc performance, ir tableau is as good as yakusa, but over three hundreds times faster.

the precision-recall  curves for ir tableau, tableausearch and yakusa are shown in figure  <dig>  we note that the performance of both tableausearch and yakusa is better than the performance of ir tableau . clearly, the precision-recall curve exposes differences between the algorithms that weren't apparent in roc space.

the difference between the behaviour in roc-space compared to pr-space can be explained based on the imbalance between the classes formed from the top-k results when k is small. in this circumstance, a small number of positive and a large number of negative results are returned. therefore a difference in the absolute number of fps only results in a small change in fpr . on the other hand, the same difference in fp results in a large change of precision . in other words, for small k, yakusa and tableausearch have an advantage in accuracy over ir tableau, but as k becomes larger, all three are very similar.

this suggests that ir tableau may be very useful to use as a hybrid technique in conjunction with one of these more computationally expensive algorithms. under this strategy, one would first search the protein database using ir tableau to return a relatively large set of matches and then pass these results to a second algorithm for deeper, more computationally demanding analysis and reranking of matches.

we also conducted experiments on searching for commonly occurring protein folds. for scop domain d1ae6h <dig>  a β-grasp protein, the auc of ir tableau is  <dig>  compared with  <dig>  in qp tableau,  <dig>  in tableausearch and  <dig>  in yakusa. this is also better than the version of qp tableau with added sse distance information, which is  <dig>   <cit> . the roc and precision-recall curves for this protein search are shown in figure  <dig> and  <dig> respectively.

ir tableau achieves a superior tpr across almost all the regions in the roc curve. for the precision-recall curve, the performance of ir tableau is comparatively not as good for low k , but becomes comparatively better for higher k . the mean average precision is  <dig>  for ir tableau,  <dig>  for tableausearch and  <dig>  for yakusa.

in some cases, search results with higher scores are more important than ones with lower scores. superposition of these returned protein structures is then a very good demonstration of the quality of the top ranked proteins. for protein d1ubia_, the graph in figure  <dig> shows the superposition of the top  <dig> proteins returned by ir tableau, aligned using mustang  <cit> . we see that all helices and strands are superposed well, indicating good quality of the results.

testing different ir tableau feature choices
results of ir tableau when partitioning proteins into n parts are shown in table  <dig>  as the number of partitions increases, the auc gradually decreases. when n is between  <dig> to  <dig>  the system achieves the highest map values. the sse length distribution in figure  <dig> clearly shows that most of proteins have  <dig> to  <dig> sses.

so it is therefore natural that partitioning the sse chain into  <dig> to  <dig> parts works well, since it means that we are effectively trying to match the position of each sse exactly.

the behaviour for different similarity functions is shown in table  <dig>  cosine similarity has the highest auc  <dig> , followed by the tanimoto coefficient at  <dig> . even the worst, jaccard index, still achieves  <dig> . with respect to map, the differences are greater. the tanimoto coefficient and jaccard index have very low map, while euclidean distance gives the highest map. unlike the other measures, euclidean distance is not normalized. if two proteins greatly differ in size, we can expect un-normalized similarity measures will reduce the distance greatly.

CONCLUSIONS
we have introduced ir tableau, a new algorithm for protein structure comparison. a key advantage is that it is highly scalable, being faster than existing methods, by over a factor of  <dig>  this speed up factor also increases for longer proteins. moreover, it is able to achieve good quality of search results, obtaining comparable auc scores to existing algorithms and slightly lower map scores. highly efficient search algorithms will be very important for protein structure databases of the future, which may contain millions of proteins. we believe that our ir tableau approach is very promising for such a scenario. in particular, it may be used as part of a hybrid filter approach. the user can run ir tableau for a high throughput scan of the database for approximate matches. the search results would then be passed to a second algorithm, for deeper  comparative analysis. conducting experiments along these lines is an interesting avenue for future work.

competing interests
the authors declare that they have no competing interests.

authors' contributions
all authors contributed to this paper equally.

