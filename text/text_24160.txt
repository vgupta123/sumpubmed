BACKGROUND
during the last decade, high-throughput technologies have allowed scientists to collect large sets of genomic and proteomic data. these data sets are then often screened for groups of genes that are over-represented or depleted when compared to a reference set or the entire genome/proteome of a specific organism. therefore, great efforts have been made to develop computational methods to translate the flourishing raw data into meaningful biological knowledge.

gene ontology  is a dictionary of controlled biological vocabularies to annotate genes at different levels of granularity
 <cit> . the go dictionary can be envisioned as a graph that has, in a first approximation, the architecture of an upside down tree in which connected nodes, i.e., related go terms, have a parent–child relationship and all nodes can be connected back to the three root nodes . this well-structured knowledge has been utilized to identify specific biological processes or functions enriched within sets of genes. there are many tools that can carry out this task: david, funcassociate, bingo, etc.
. these tools output lists of all individual go terms that are significantly enriched in the analyzed data set. however, listed go terms often refer to the same biological process. in addition, many go terms are highly specific and difficult to interpret in the larger biological context that is investigated. as the research of most scientists is focused on a specific area, scientists are often less interested in the enrichment of specific go terms in a set of genes but more in the enrichment of all go terms that are associated with their area of interest. in order to reach this goal, researchers define categories of interest and manually assign genes into one of these categories according to their go annotations
 <cit> . this is a laborious process and categorization results may differ from person to person.

there are tailored cut-down versions of go, go slims, to give a broad overview of the ontology content without the details
 <cit> , and there is also a script that automatically maps go terms to go slim terms
 <cit> . however, this script simply searches for ancestor go terms that are also included in the go slim list and assumes that the go graph has the architecture of a perfect tree in which all parent–child go pairs are separated by the same distance. this is not true. not all parent–child relationships in the hierarchical structure of go have the same closeness in a biological sense. for instance, the relationship of ‘protein serine/threonine kinase activity’  and ‘ikappab kinase activity’  is definitely much closer than that of ‘biological process’  and ‘cellular process’ . moreover, the go architecture is more accurately represented by a directed acyclic graph, not a tree. therefore, there can be more than one path from a go term up to the root node and one go term can be mapped to multiple go slim terms. as a result of the differences in parent–child closeness, a child term having two parent terms may be much closer to one of them in a biological sense. an example for such a case is shown in figure 
1a. according to the go slim mapping script, the term ‘gamma-amminobutyric acid import’  can belong to ‘amino acid imports’  and ‘gamma-amminobutyric acid transport’ , since the graphical distances to both parent terms are identical . however, the term ‘gamma-amminobutyric acid import’ is closer to ‘gamma-amminobutyric acid transport’ than ‘amino acid imports’ in the biological sense. accordingly it is more reasonable to say that ‘gamma-amminobutyric acid import’ belongs to ‘gamma-amminobutyric acid transport’ , which can’t be deduced from the graphical distance alone. hence, the biological closeness of go terms, not the graphical distance, should be utilized for reliable go analyses. another problem with the tools mentioned before is that they assume independence of go terms. functions and processes encompassed by a specific go term are a subset of the functions and processes encompassed by its parent term. thus, go terms cannot be independent but are associated. the use of redundant terms can lead to overestimation or underestimation of relevant biological processes or functions. therefore, go annotations should be analyzed in the context of the hierarchical structure of go and by taking semantic distances between terms into account.figure  <dig> 
categorization based on the graphical structure of go . a. section of the go structure. go terms of interest are colored in green and categories to which go terms are assigned are colored in blue. in this example, each of the blue go terms refers to a particular category. b. mapping results by the go slim approach, which takes only the graphical structure of go into account.



several semantic similarity measures have been developed recently in order to approach some of these problems
 <cit> . as the name indicates, they provide a measure for how close two annotation terms are, and their calculation is based on the information content , respectively the specificity of each annotation term. in the determination of the specificity of annotations, it is assumed that more frequently used terms are less specific
. different types of semantic similarity measures have been introduced
 and used in very diverse applications including the clustering of microarray data
 <cit> , the comparison of sets of genes and proteins from different species 
 <cit> , the assessment of functional similarity of genes or proteins 
 <cit>  and the identification of new disease genes based on known disease annotations 
 <cit> . however, if one uses semantic similarity measures for the categorization of genes into groups of interest, one has to consider that categorization is not about predicting how close two terms are but assessing how well two terms go together.

to meet these demands, we developed categorizer that assigns genes to pre-defined biological functions or processes based on their go annotations. as biological functions or processes of interest are different from field to field, this new tool allows users to define their own categories.

implementation
categorizer was implemented using a platform-independent language, python, and thus it can run on any operating systems. for the user’s convenience, we also provide a pre-compiled version of categorizer that runs on the windows operating system.

the overall scheme of the approach implemented in categorizer is shown in figure 
2a. categorizer employs three steps to categorize genes.  the ic scores of go terms are calculated from the occurrence of go annotations in uniprotkb-goa
 <cit> . this score denotes the biological relevance of a go term, i.e., the more frequently a term is used the less relevant the term is.  a semantic similarity score is calculated for all go parent–child pairs based on their ic and the hierarchical structure in go.  according to the semantic similarity scores, genes with annotations are assigned to biologically appropriate categories. in the following sections, the details of these three steps are described.figure  <dig> 
approach used in categorizer to assign genes to categories. a. three steps used in the categorization process:  information content calculation,  semantic similarity score calculations for parent–child pairs and  categorization according to the semantic similarity scores. see the main text for details. b. illustrative  example for the calculation of semantic similarity scores. information content scores  are shown for each go term. g <dig> is a root term. in this example, a user defined two categories  and assigned g <dig> to category a , and g <dig> to category b . semantic similarity scores  of several terms are also shown.



information content 
an ic score has to be assigned first to all go terms in order to calculate semantic similarities. the ic represents the significance of go terms in a biological sense. we assume that more frequently used go terms are less significant
 <cit> . we therefore counted all the occurrences of go terms in a reference database. here, we used all the proteins and their annotations in uniprotkb-goa
 <cit> . the hierarchical structure of go was taken into account when counting occurrences. for example, when a protein has the annotation of ‘g21’ in figure 
2b, we also counted its parent terms, ‘g11’ and ‘g0’. when another protein has the annotation of ‘g22’ , we also increased the occurrences of ‘g11’ and ‘g0’. the overall occurrences in the given example are then ‘g0’ , ‘g11’ , ‘g21’  and ‘g22’ . the occurrences are then divided by the number of annotations  in order to get occurrence probabilities of go terms, p:
  

in this equation, orphan go terms that have not been used in uniprotkb-goa were assigned the lowest p value of the terms, meaning the maximal ic. the probability is finally converted into an ic score that denotes the significances of each go term:
  

in the given example, i is zero, which means that annotations with g <dig> are biologically meaningless. as the calculation of the ic score i for all go terms is computationally expensive, categorizer comes with a file that contains pre-computed values. in addition, we also provide a script with which users can pre-compute other i values taking their annotations of interest, e.g. uniprotkb-goa , human goa, or customized annotation files. synthetic ic scores for each term in our example are shown in figure 
2b.

semantic similarity
when a specific go term needs to be categorized, categorizer searches for its parent terms that are assigned to a category and calculates semantic similarity scores with them. the semantic similarity scores are calculated as follows. ic scores are used to calculate  the semantic distance of a category-assigned parent go term from the root node,  the semantic distance of the go term to be categorized and its category-assigned parent term from their most informative child terms and  the semantic distance between the category-assigned parent term and the go term to be categorized . all three scores are then combined in a final semantic similarity score
 <cit> . given two go terms, for instance g <dig>  and g <dig>  , we calculate the semantic similarity of these two terms as follows
 <cit> :

distance of a category-assigned parent go term from the root node 
first, the semantic distance of the category-assigned parent term  to the root term is calculated, which is defined as the difference in ic scores between the two go terms :
  

where r is the root term and p is the parent.

thus, the distance of g <dig> from the root term is α = <dig> .

distance from the most informative child terms 
next, the average distance of the go term to be categorized  and its category-assigned parent term  from their most informative child terms is calculated. the distance is defined as below:
  

where c <dig> and c <dig> denotes the most informative child node of x <dig> and x <dig>  respectively. if c <dig> and/or c <dig> do not exist, they are set to x <dig> and x <dig>  respectively.

in our example, g <dig> has the child term g <dig> and g <dig> has child the terms g <dig>  g <dig>  g <dig>  and g <dig>  the most informative child term of g <dig> is g <dig> and that of g <dig> is g <dig>  therefore, β =  + )/2 =  + )/2 =  <dig> .

distance of a category-assigned parent go term and a go term to be determined 
the third step is to calculate the distances between a category-assigned go term  and a go term to be categorized , which is defined as:
  

where p is a parent term assigned to a category and x <dig> is a term to determine its category.

in this example, γ = d =  =  <dig> 

semantic similarity score
the final step is to calculate the semantic similarity score  from the three values, α, β, and γ:
  

where by 0 ≤ s ≤  <dig> 

consequently, the semantic similarity score between g <dig> and g <dig> is
  

categorization
conventional semantic similarity measures were developed to assess how similar two go terms are, but categorization is about assessing how well a specific term belongs to another term or a group of other terms. thus, we use semantic similarity in the categorization process but require that a categorized term is a child of any term in the assigned category. for instance, two sibling terms, ‘dna-templated transcription initiation ’ and ‘dna-templated transcription elongation ’, are semantically very similar. they could be categorized to their parent term ‘rna biosynthetic process ’ because transcription initiation and elongation are both important steps in rna biosynthesis. however, they cannot be categorized to each other because transcription initiation and elongation are two different molecular processes. therefore, categorizer first determines whether a term to be categorized is a child of only one or more category-assigned terms. if it is the child of only one term that has a category assignment, the similarity score of this parent–child pair is set to  <dig> and the term is assigned to the corresponding category. for a term that is a child of two or more category-assigned terms, categorizer assesses semantic similarity between this term and all category-assigned terms and then assigns it to the category with the highest semantic similarity score. we demonstrate the procedure in the following examples:in the example shown in figure 
2b, the user assigned the term g <dig> to category a and the term g <dig> to category b. first, categorizer automatically identifies child terms that belong to a single category only . for go terms that have multiple parents, i.e. could belong to two or more categories , semantic similarity scores are calculated with the go terms that are assigned to a category and their parents. then the go terms of interest are assigned to a category with the highest semantic similarity score.

assignment example g32
categorizer calculates pairwise semantic similarities of g <dig> with all the go terms that belong to category a and are a parent of g32: s. in the same way, categorizer also calculates semantic similarities of g <dig> with the terms in category b: s. since s =  <dig>  and s =  <dig> , a gene with the annotation of g <dig> is more likely to belong to the category a.

assignment example g41
categorizer calculates the pairwise semantic similarities s and s. since s =  <dig>  and s =  <dig> , a gene with the annotation of g <dig> should belong to the category a.

assignment example g43
categorizer calculates the pairwise semantic similarities s, s, s, and s. since s =  <dig> , s =  <dig> , s =  <dig>  and s =  <dig> , we can infer that the term g <dig> is closer to g <dig> than g <dig> in a biological sense and accordingly a gene with the annotation of g <dig> should belong to the category a.

one can allow a go term to go into multiple categories if its semantic similarity score is above a user-defined threshold. for instance, a gene with the annotation of g <dig> can belong to category a and/or b depending on the semantic similarities and the user-defined threshold. the default threshold is set at  <dig>  in categorizer. this threshold value was determined by calculating an average semantic similarity score for two randomly selected go terms that are linked directly or indirectly in a parent and child relationship. the average score was  <dig>  ±  <dig>  and accordingly categorizer uses  <dig>  as a default cutoff value for reliable categorization. after assignment of genes to one or several categories, enrichments of the categories are calculated.

enrichment analysis
most go enrichment analysis tools use simple statistical methods, including hypergeometric distribution, chi-square, fisher’s exact test, and binomial probability
 <cit> . when these methods are used to assess enrichment of categories, it is assumed that categories are independent. however, one gene may belong to two or more categories, and thus some categories may co-occur more frequently than others. recently, a random model-based statistical enrichment analysis has been proposed
 <cit> . following this suggestion, categorizer first calculates the probabilities of each category in a reference gene set:
  

where p denotes a probability of category c in a reference gene set, n denotes the number of genes in a reference set, m denotes the number of categories, and fi is  <dig> if the gene i is assigned into the category c, otherwise,  <dig>  then, the genes in the reference set are randomly assigned to categories according to the category probability, p, while retaining the number of assigned categories to each gene in order to keep the degree of categories. l different genes are randomly chosen from the reference, where l denotes the number of screened genes or genes of interest. the frequency of each category is then counted. these randomizations are repeated  <dig>  times to obtain an average frequency and standard deviation of each category. with these averages and standard deviations, z-scores for each category are calculated as below:
  

the μ and σ denote an average number and standard deviation of category c obtained from the randomization. the p-values for each category are calculated from the z-scores.

utilization
for practical categorization, the following key steps are carried out. first, a user has to define categories that are of interest and assign key go terms to each category; a category is defined as a set of one or more go terms. the user does not need to assign all go terms to newly defined categories because categorizer is capable of identifying semantically close go terms and, by doing so, decides whether a go term belongs to a category or not. alternatively, the user can select among three commonly used category sets that are shipped with categorizer: biological processes, cellular localizations, and enzyme functions . for instance, the "biological processes" set contains  <dig> sub-categories. to run the software, at least three files  should be provided:  a category file defining categories and their go terms,  an annotation file containing gene-to-go annotations, and  a gene file containing the list of genes to be analyzed. a background gene file has to be provided for the category enrichment analysis.table  <dig> 
categories provided with categorizer

snapshots of the gui of
categorizer
. a. initial window for setting up the categorization parameters: category definitions, gene annotations, gene test set, background genes, and categorization options. b. categorization results: category statistics , detailed categorization results , and enrichment analysis result .



RESULTS
genetic modifiers of huntington’s disease
in order to demonstrate the functionality of categorizer, we first analyzed the enrichment of specific categories in a set of genes that have been identified as genetic modifiers in drosophila models of huntington’s disease . the data was compiled from neurogem, a database of genetic modifiers of neurodegenerative diseases including hd, alzheimer’s, parkinson’s, amyotrophic lateral sclerosis, and several spinocerebellar ataxia types
 <cit> . modifiers are genes that are capable of modulating disease phenotypes; in this case the neuronal cell death caused by protein aggregation.

we categorized genetic modifiers into  <dig> groups that are of interest to researchers studying hd: cell cycle , cytoskeleton , metabolism , protein synthesis , protein folding , proteolysis , signaling , splicing , and transport . we loaded the drosophila gene-to-go annotation file , and entered the list of high-confidence genetic modifiers of hd  obtained from neurogem. as a reference, we entered all drosophila genes that had been tested experimentally as modifiers . we allowed a gene to be included into multiple categories with the default cutoff value of  <dig> .

with this information, categorizer assigned the genetic modifiers to the defined categories. as shown in figure 
3b, categorization results for each gene are reported in the middle of the graphical user interface , i.e., the categories that each gene is assigned to are listed together with the semantic similarity score in parenthesis. on the left side of the gui, there is a pie chart that displays the category statistics. in this example, the metabolism category is the largest while the protein folding category is the smallest. on the right side of the gui, category enrichment analysis results are shown . consistent with the knowledge on the importance of the protein folding machinery in the pathogenesis of neurodegenerative diseases
 <cit> , the category of protein folding is highly enriched among genetic modifiers of hd, though they account for only a small portion of the genetic modifiers. additionally, the categories of cell cycle, cytoskeleton, protein synthesis and splicing are also enriched among the genetic modifiers of hd. this finding is consistent with recent research data on neurodegeneration and hd in particular
.

in the given example, we categorized genetic modifiers of hd into broad biological processes and calculated their enrichment. however, if a user is interested in signal transduction, one could define categories such as nk-kappab cascade or tor signaling. it is up to the user to decide how specific or broad the defined categories are.

comparison of analysis results generated with categorizer and classical approaches using go slim terms
categorizer is different from go slim-based methods in that it identifies biologically relevant categories by using both the graphical structure of go and the semantic similarities between go terms. therefore, we decided to compare the performance of categorizer with that of the classical methods using go slim. first, we assessed the accuracies of category assignment by comparing assignment results of categorizer and the go slim approach for a gold standard set of genes. second, we evaluated the quality of enrichment analyses by comparing the results of the two approaches for the  <dig> high-confidence genetic modifiers of hd .

zhang et al. have previously categorized genetic modifiers, which they had identified in a high-throughput screen, manually into few broad biological processes  based on the go annotations of the modifiers
 <cit> . we used these categorized genes as a gold standard to evaluate the accuracies of categorizer and go slim-based methods. for this comparison, we customized a go slim ontology that is composed of the same nine go terms that we used for categorizer . then, drosophila go annotations were mapped to these nine terms with the help of the go slim assignment script map2slim.pl <cit> . categorization accuracy was calculated as below:
  

where n denotes the number of genes in the gold standard set; nc denotes the number of total categories. as categorization is a multi-class problem, it is necessary to include both correct assignment to true categories and correct non-assignment to false categories when calculating accuracy. briefly, we built two matrices named g and p denoting true answers and predictions, respectively. g =  <dig> if a gene g in the gold standard set belongs to a category c and g =  <dig> if the gene g does not belong to category c. p =  <dig> if a gene g is categorized into a category c by categorizer or the go slim-based method, respectively, and p =  <dig> if the gene g is not categorized into category c. thus, f =  <dig> if g = p and  <dig> otherwise. the categorization accuracies of categorizer and go slim are 81% and 70%, respectively . as a control, a random predictor was built that randomly assigns genes to three categories. three categories were chosen because the average number of assigned categories per gene in the gold standard by categorizer and the go slim approach was  <dig> . the accuracy of this random predictor is 65%. since many genes are categorized into only a few categories, the number of correctly non-assigned genes has a big impact on this accuracy measure . in order to deal with this issue, we also calculated the classical mathew’s correlation coefficient  that is a suitable measure for evaluating unbalanced datasets. the mcc values of categorizer, go slim-based method, and random predictor are  <dig> ,  <dig>  and  <dig> , respectively. overall, these tests demonstrate that the category assignment of categorizer is more accurate than a classical categorization with go slim terms and, thereby, underlines the importance of semantic similarity for this task.figure  <dig> 
comparison of results generated by using categorizer and a go-slim-based approach. a. overall accuracies of categorizer, go slim and a random predictor. the categories of genetic modifiers obtained from a high-throughput screening study  were used as a gold standard. b. enrichment of the  <dig> categories. all the genes tested for hd were used as a reference. c. numbers of genes for each category in the test and randomized reference sets. since we allowed multiple categorization, one gene may appear in several categories. significantly enriched categories  were marked as *.



next, we compared the quality of enrichment analyses of the two approaches. we did so by analyzing the enrichment results of the two methods for the  <dig> genetic modifiers of hd used in figure 
 <dig>  the statistics of categories and enrichment results generated by using categorizer and by the go slim-based approach are shown in figure 
4b and c. the go slim approach identified the categories ‘cell cycle’ and ‘cytoskeleton’ as significantly enriched among the genetic modifiers of hd, which is consistent with the results found by categorizer . however, the three categories of ‘protein folding’ , ‘protein synthesis’ and ‘splicing’ were not identified as enriched categories by the go slim approach . this result of the go slim approach is in stark contrast to the literature on modifiers of neurodegenerative diseases, including hd. genes whose products are involved in protein folding, protein synthesis and splicing are found in most screens for modifiers of neurodegenerative diseases that have been carried out to date
. as shown in figure 
4c, both categorizer and go slim assigned the same number of genes to the categories of protein folding and splicing. however, the go slim approach assigned more genes to these categories in the randomized model of the reference gene set than did categorizer. therefore, the p-values obtained by the go slim method were larger than those obtained by categorizer. interestingly, categorizer identifies protein synthesis as enriched in contrast to the go slim approach, although categorizer assigned fewer genes to the protein synthesis category than go slim. the solution to this conundrum is that categorizer assigned much fewer genes in a reference set to protein synthesis than go slim. overall, these comparisons reveal that categorizer provides more reliable categorization and enrichment results compared to the conventional go analysis method.

comparison with other semantic similarity measures
as different flavors of semantic similarity measures have been introduced
 <cit> , we assessed the accuracy of category assignment as a function of the semantic similarity measure. we used again as a gold standard the genetic modifiers of hd that were already categorized manually by experts in that field. hence, we categorized hd modifiers based on different semantic similarity measures and assessed the accuracy of the categorization as we did for the go slim-based categorization in figure 
4a. we tested the semantic similarity measures developed by lin, resnik, wang et al., and zhang et al., as well as the one of xgrasm, and go-universal
. cutoff values for each measure were determined, as for categorizer, from the average similarity scores of randomly selected go terms and measures were calculated using the annotations in uniprotkb including iea. a key difference between these different metrics is the method used to calculate the ic. the approaches of lin and resnik use only the ic of the most informative common ancestor for similarity calculations, while xgrasm uses the averaged ic of all informative common ancestors . the combined methods, xgrasm-lin and xgrasm-resnik, calculate semantic similarities based on lin’s and resnik’s semantic similarity metrics, but use the averaged ic of xgrasm. as shown in figure 
 <dig>  categorizer outperforms all other measures commonly employed for assessing semantic similarity. consistent with previous findings
 <cit> , xgrasm provides the best categorization results of all the older methods . it is interesting to note that the mcc values calculated for xgrasm-lin and xgrasm-resnik are slightly higher than the mcc calculated for go slim. this finding provides further support for the importance of the semantic similarity in categorization.figure  <dig> 
performance comparison of different semantic similarity measures and the one implemented in categorizer. mcc values were calculated with hd modifiers as done for the comparison of categorizer and go slim in figure 
4a.



CONCLUSIONS
here we developed a flexible and extendable tool that can be used to find over-represented categories within sets of genes. categorizer classifies genes to categories according to biological meanings and assesses their enrichment. thus, categorizer offers a new way of enrichment analysis that allows focusing on processes that are of specific interest to the user.

availability and requirements
project name: categorizer

project home page:http://chibi.ubc.ca/gsponer/categorizer

http://ssbio.cau.ac.kr/software/categorizer

operating system: platform independent

programming languages: python

other requirements: none

license: apache license  <dig> 

any restrictions to use by non-academics: none

competing interests

the authors declare that they have no competing interests.

authors’ contributions

dn implemented the software, hs tested the software and assisted in manuscript preparation, and jg supervised this project and assisted with writing the manuscript. all authors read, reviewed, and approved the full manuscript.

