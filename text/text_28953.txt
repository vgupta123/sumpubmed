BACKGROUND
phylogeny inference methods can be classified into two main categories: character-based  and distance-based approaches. the latter have low running times which are quite useful  to perform large-scale studies and bootstrap analyses. a number of computer simulations  <cit>  have shown that distance methods are fairly accurate, though not as accurate as likelihood-based methods that are much more time consuming. using any distance-based method first requires to estimate the pairwise evolutionary distances between every taxon pair. these distances are usually estimated from dna, rna or protein sequences, but can also be obtained from dna-dna hybridization experiments or, e.g., computed from morphological data .

in the last few years, phylogenomic studies  have instigated to the development of fast tree-building techniques being able to infer trees from datasets comprising hundreds of genes and taxa. the low-level gene combination involves concatenating the different genes into a unique supermatrix of characters, and then analyzing this matrix with a standard tree building method. this approach was shown to perform poorly when combined with distance methods, due to inaccurate distance estimations from such large heterogeneous character matrix  <cit> . better distance-based trees are obtained by extracting the phylogenetic information from each gene separately, and then combining resulting information sources into a unique distance supermatrix. the average consensus supertree  and super distance matrix  techniques input a collection of distance matrices being estimated from each gene separately , or being equivalent to the gene trees . these distance matrices are deformed, without modifying their topological message, and then averaged to obtain the distance supermatrix, which is finally analyzed using a distance-based tree building algorithm.

estimating the distance supermatrix is fast. however, missing entries may occur in distance supermatrices depending on the extent of taxon overlap within the source matrices. for example, with the two large data sets of driskell et al.  <cit> , which were collected from swiss-prot and gen-bank thanks to a computer program, the ratio of missing distances is ~19% and ~ <dig> %, respectively. these distances are missing because only a few genes are sequenced within each species, meaning that a number of species pairs do not share any sequenced gene in common and cannot be compared using available data. however, driskell et al. showed that, despite the sparseness of data and the fact that only a small subset of these data is potentially phylogenetically informative, a topological signal still emerges, which provides useful insights into the tree of life . analogous findings were reported by a number of authors in various contexts  <cit> , and tree building from sparse data has become topical, as can be seen from the flourishing literature on supertrees.

however, tree building from incomplete distance matrices is np-hard  <cit> , and thus practical algorithms are heuristics. the indirect approach involves first estimating missing distances by applying an ultrametric  <cit> , additive  <cit> , decomposition-based  <cit> , or quartet-based  <cit>  completion algorithm. the trex package  <cit>  provides several implementations of such algorithms to be used before tree building using any standard method with the completed matrix. the direct approach involves using a weighted least-squares  algorithm and associating missing distances with null weight , which means that missing distances are simply discarded from wls computations . the fitch algorithm  <cit>  from the phylip package  <cit>  and the mwmodif algorithm  <cit>  from trex implement this technique. a combination of both direct and indirect methods is provided by mw*  <cit>  ; this algorithm first applies an ultrametric or additive completion algorithm  and then infers a tree using mwmodif, where weights are set to  <dig>  for known distances,  <dig>  for estimated distances, and  <dig>  for missing distances . all these  algorithms have o time complexity or more, where n is the number of taxa. this limits their application to medium-sized datasets .

agglomerative algorithms are much faster and allow dealing with thousands of taxa, as soon as the distance matrix is complete. the most popular of them is the neighbor-joining  algorithm  <cit> . starting from a star tree, agglomerative algorithms iteratively perform the three following steps, until the tree is completely resolved:

 select a taxon pair xy that is agglomerated into a new node u;

 estimate the length of the two so-created external branches ux and uy;

 replace x and y by u in the distance matrix, and estimate the new distances between u and the not-yet-agglomerated taxa.

step  is more time consuming than the two other steps, because of testing all the o taxon pairs to select the optimal one. to this purpose, nj optimizes a numerical criterion that is denoted as qxy. this criterion admits several interpretations related to the minimum evolution principle  <cit> , but also to the acentrality of the considered pair  <cit> . in this last interpretation , qxy measures how much the path joining x to y is far from the other taxa i ≠ x, y. the xy pair maximizing qxy corresponds to the two taxa which are most distant from the other ones and is the best candidate for agglomeration. another criterion, denoted as nxy, is used by addtree  <cit> ; this second criterion is based on the four point condition  <cit>  and counts the number of taxon quartets xyij where x and y are neighbors. when the distance matrix exactly corresponds to a tree , nxy indicates all pairs of sibling taxa in the tree, whereas qxy indicates just one such taxon pair. we shall see that this property of nxy is a great advantage when dealing with incomplete distance matrices. indeed, qxy is sometimes unusable whereas nxy is still informative.

steps  and  essentially correspond to distance averaging, which requires o run time. these three steps being repeated n -  <dig> times, agglomerative algorithms require o time when using the qxy pair selection criterion, and o with nxy  <cit> .

several refinements of the nj algorithm have been proposed. bionj  <cit>  minimizes the variances associated to the new distances being estimated during each reduction step . this way, bionj makes use at each iteration of reliable distance estimates to select the new taxon pairs to be agglomerated. to this aim, bionj uses a simple poisson model of the variances and covariances of the distances being contained in the initial distance matrix. bionj was generalized into the minimum variance reduction algorithm , a wls variant of which can deal with any distance variance model, but which does not account for the distance covariances. it has been shown using computer simulations that this variant  has similar accuracy as nj when applied to distance matrices estimated from one-gene alignments  <cit> . weighbor  <cit>  further refines bionj approach and uses an agglomeration criterion which accounts for the variances of evolutionary distances. all these algorithms require o time. faster, sophisticated distance-based algorithms have been proposed in the last few years  <cit> , some of them being clearly more accurate than nj and bionj ) and o, respectively).

in this paper, we propose an adaptation of the agglomerative scheme to quickly infer phylogenetic trees from incomplete distance matrices. we show that the qxy criterion may be rewritten to express the mean acentrality of the xy taxon pair. in the same way, the nxy criterion may be rewritten to express the mean number of taxon quartets where x and y are neighbors. by estimating these two means using all available  distances, we define the two criteria qxy∗ and nxy∗ which allow for the selection of taxon pairs in step , even when the distance matrix is incomplete. using these two new criteria in the agglomerative scheme requires o and o run time, respectively. a limitation of qxy∗ and nxy∗ is that they cannot be computed when the distance corresponding to the xy pair is missing . however, this difficulty is inherent to the problem of building trees from incomplete distance matrices and is encountered  by all methods to deal with this problem. moreover, nxy∗ partly circumvents this difficulty thanks to its ability to indicate several relevant pairs, rather than a single one with qxy∗ . as running nxy∗ requires o time, we use a filtering technique: at each step  we use qxy∗ to select the s most promising pairs for agglomeration, and then use nxy∗ to select the best of these s pairs. this computational trick  greatly improves the accuracy compared to using qxy∗ only, while requiring o time, where s is a small constant . finally, the original nj, bionj and mvr formulae corresponding to steps  and  essentially are distance averaging and are easily adapted to incomplete matrices. the three new algorithms are named nj*, bionj* and mvr*, respectively.

RESULTS
several computer simulations are presented in this section to assess the performance of nj*, bionj* and mvr*. we first compare the agglomeration criteria qxy∗, nxy∗ and their combination with distance matrices that are additive, but contain missing entries. then, using more realistic datasets, we compare nj*, bionj*, mvr* to fitch  <cit>  and mw*  <cit> , in terms of both topological accuracy and run times.

comparison of agglomeration criteria
our approach is similar to makarenkov and lapointe's  <cit> . we analyze with various algorithms and criteria a distance matrix with randomly deleted entries. the distance matrix we use is additive, i.e. is obtained from a tree by computing the path length distance between every taxon pair. let t denote this tree and  be the corresponding distance matrix, where tij is the path-length  distance between taxa i and j in t. when no entry is missing, such an additive matrix uniquely defines t, which is recovered by any consistent algorithms . when entries are missing in , recovering t becomes a difficult task , and we measure how well the algorithms perform when given an increasing number of missing distances. such data thus are not realistic from a biological stand point, as evolutionary distances estimated from sequences are not additive, but this is a simple and standard approach to compare algorithms and agglomeration criteria.

we use for the correct tree t the phylogeny of  <dig> placental mammals from  <cit> . the percentage of missing entries is pmiss = 1%, 5%, 10%, 20%, 30%. for each pmiss value,  <dig> replicates are randomly generated. from each of these  <dig> ×  <dig> incomplete additive distance matrices, a tree t^ is inferred by fitch, mw* and bionj*. various values of the s parameter are tested for bionj*, in order to compare the topological accuracy of qxy∗, nxy∗, and of the combination of these two agglomeration criteria. with s =  <dig>  bionj* uses qxy∗ only. with, s >  <dig>  the taxon pairs corresponding to the s highest values of qxy∗ are reanalyzed with nxy∗ . when s becomes large  bionj* uses nxy∗ only, as all taxon pairs are retained in the first selection step.

each inferred tree t^ is compared to the correct tree t by using the quartet distance dq  <cit> . this topological distance measures the number of resolved 4-taxon subtrees which are induced by one tree but not the other, and thus is more precise than the widely used bipartition distance  <cit>  which counts the number of internal branches present in one tree but not in the other. moreover, the quartet distance is less affected than the bipartition distance by small topological errors, e.g. wrong position of a single taxon  <cit> . this distance is normalized: dq =  <dig> indicates that t and t^ are identical, whereas dq =  <dig> means that both trees do not share any resolved 4-taxon subtrees. averages of the  <dig> dq measures for each pmiss value are displayed in figure  <dig>  for fitch, mw*, and bionj* with various s values.

all curves in figure  <dig> are decreasing; as expected, the correct tree t is better recovered  as the proportion of missing distance pmiss becomes closer to  <dig>  using nxy∗ in bionj* greatly improves the agglomeration step; e.g. with pmiss = 10%, mean dq values of bionj* are ~ <dig>  and ~ <dig> , with s =  <dig> and s =  <dig>  respectively. however, there is no significant difference between s =  <dig> and s = max , meaning that a small value of s  seems to be enough to focus on the most relevant pairs, while avoiding the computational burden of using nxy∗ only. further experiments  confirm this finding. fitch and bionj*  have similar accuracy, while mw* tends to perform better than the other algorithms with these data. however, we shall see that algorithm ordering is different with more realistic simulations. these experiments thus confirm the advantage of combining qxy∗ and nxy∗ within bionj*, and similar results  are obtained with nj* and mvr*.

comparison of reconstruction algorithms with distance supermatrices
we re-use a simulation protocol that we have used previously to compare a number of tree-reconstruction methods in a phylogenomic context  <cit> . this protocol involves generating sequences and evolving them along trees, and is more realistic than the comparison described above. we first summarize this protocol, and then report the results that are obtained with the simulated datasets by fitch, mw*, nj*, bionj* and mvr*. to estimate the distance supermatrix that is the input of these algorithms, we use the sdm method  which computes a supermatrix that summarizes the topological signal being contained in a collection {,,...,} of k distance matrices. simulations  <cit>  have shown the high-quality of this distance supermatrix in both medium- and high-level gene combinations.

simulations are as follows . starting from a randomly generated tree t with n =  <dig> taxa, evolution of k genes is simulated, with k =  <dig>   <dig>  ...,  <dig>  for each of the k genes, some taxa are randomly deleted. two deletion probabilities are used: 25% to preserve high overlap between the different taxon sets, and 75% to induce low overlap. from these k partially deleted gene alignments, k distance matrices are estimated to compose the collection cΔ of source matrices. the sdm method is then run with cΔ to obtain a distance supermatrix corresponding to a medium-level combination of the k partially deleted genes. to study the high-level combination, a phylogenetic tree is inferred by phyml  <cit>  from each of the k partially deleted genes; then, the path length distance between each taxon pair for each of the k phylogenies is computed, to form the collection ct of k additive distance matrices that are equivalent to the k phyml trees. finally, sdm is applied to ct to obtain a distance supermatrix corresponding to a high-level gene combination.

this simulation protocol is repeated  <dig> times for each value of k and each deletion proportion. we obtain this way  =  <dig>  distance supermatrices, which are denoted as  and are frequently incomplete. indeed, if taxon i is missing for gene p, then Δijp is missing – which is denoted as Δijp = ∅—, and if Δijp = ∅ for all p =  <dig> , ..., k, then Δijsdm = ∅. with 25% deletion rate, almost all distance supermatrices are complete when k ≥  <dig>  with 75% deletion rate, all distance supermatrices are incomplete, but the number of missing distances decreases as k increases .

fitch and mw* are run with default options. in accordance with figure  <dig>  s is set to  <dig> for nj*, bionj* and mvr*. with bionj*, vij variances  are naturally defined by vij ∝ Δijsdm if Δijsdm ≠ ∅, else vij = ∅. variances used by mvr* comply with the same rule, but account for other parameters such as the length and the number of sequences being used to estimate each Δijsdm distance . accuracy of the five algorithms is measured with the topological distance dq, as above, and averaged for the  <dig> replicates corresponding to each of the conditions. results are reported in table  <dig> for the medium-level gene combination, and in table  <dig> for the high-level gene combination. for each value of k, the first- and second-best mean dq values are indicated in bold&underlined and bold, respectively, and a sign-test  <cit>  based on the  <dig> replicates is used to assess the significance of the difference between these two best values.

in the medium-level combination, distance matrices are directly estimated from each of the genes and then combined  into the distance supermatrix. topolological accuracy is mesured by the mean  quartet distance  between the correct and inferred trees. k: number of genes. p-value: sign-test significance when comparing the  <dig> dq values of the two best methods that are indicated in bold and underlined  and bold 

in the high-level combination, ml trees are first inferred separately for every genes, and then these trees are turned into path-length distance matrices which are combined  into the distance supermatrix. for symbols and notation, see note to table  <dig> 

in the medium-level gene combination, nj* and mw* are outperformed by other algorithms. with a 25% deletion rate, bionj* has best topological accuracy, followed by fitch. however, the sign-test indicates that the difference between these two algorithms is moderately significant as the p-value is lower than  <dig>  for only five k values . with a 75% deletion rate, fitch is best, but again the sign-test shows that fitch, bionj* and mvr* are broadly equivalent.

with high-level combination distance supermatrices, nj* and mw* still tend to be outperformed by other algorithms. bionj* is in between, and the best mean dq values are observed with mvr* which is followed by fitch. the sign-test broadly confirms the significance of this observation, though the accuracy difference between mvr* and fitch is relatively low.

altogether, these experiments show that mvr* is at least as accurate as fitch, that bionj* has similar performance, while nj* and mw* are behind these three algorithms. comparing these findings with the results from , we see that  mvr* is more accurate than the standard matrix representation with parsimony method , in most cases; e.g. with k =  <dig>  mvr* has mean dq values of  <dig>  and  <dig> , for 25% and 75% deletion rate, respectively, while mean dq values of mrp equal  <dig>  and  <dig> . mvr*  outperforms mrp with sparse information , while both approaches are nearly equivalent when the information is abundant . an explanation  <cit>  of this finding could be that the distance approach not only uses the topology of the source trees  but also their branch lengths. distance-based supertrees thus contain more information than mrp supertrees, which makes a noticeable difference when the information is sparse, but does not impact much the results with abundant information .

results with simulations based on driskell et al.  <cit>  dataset
this section aims to measure the accuracy of the different tree building algorithms when applied to simulated datasets being more realistic than those commonly used in a phylogenomic perspective. most notably, uniformly random gene deletion  is not fully realistic because some genes  are sequenced for most species, while some other genes are rarely sequenced . it follows that the gene presence/absence pattern is different with real datasets to this being induced by uniformly random gene deletion . to this purpose, we use the character supermatrix from driskell et al.  <cit> , which comprises  <dig> green plant species and  <dig> genes, and was built via an automated exploration process of genbank. this matrix contains a total number of  <dig> sequences and has 87% missing characters, which are unequally distributed among taxa. only  <dig> taxa have more than 50% genes, whereas  <dig> have 10% genes or less. in the same way, a few genes are present in most taxa , whereas other genes are rare . however, these k =  <dig> genes are complementary and the sdm distance supermatrix only contains ~ <dig> % missing entries. this low proportion of missing entries is favorable to tree reconstruction, but still requires an algorithm able to deal with incomplete matrices.

we use a simulation protocol analogous to that described above  <cit> . the only difference is the deletion procedure, with random deletion replaced by the gene presence/absence pattern of . we generate  <dig> datasets this way with n =  <dig> taxa and k =  <dig> genes. from these  <dig> datasets, we infer  <dig> distance matrix collections cΔ and  <dig> tree collections ct. each of these  <dig> ×  <dig> collections is dealt with by sdm, to obtain a distance supermatrix  that contains the same missing entries as those induced by the original dataset  <cit> . we use these matrices to compare fitch, mw*, nj*, bionj* and mvr*, based on dq quartet distance between the correct and inferred trees . our three algorithms are run with both s =  <dig> and s = max. results of mrp are also computed, using tnt  <cit>  to infer the most parsimonious trees. tnt is run with  <dig> random addition sequences, tbr branch swapping and ratchet. the mrp supertree is defined in the standard way  <cit>  as the strict consensus of the most parsimonious trees. results are displayed in table  <dig>  which is similar to tables  <dig> and 2; the first- and second-best mean dq values are indicated in bold&underlined and bold, respectively, and sign-tests are used to assess the significance of the differences between mvr* , fitch and mrp.

: medium-level combination of the distance matrices being directly estimated from the gene sequences. : high-level combination; ml trees are first inferred separately for every genes; mrp turns the gene trees into a matrix of partial binary characters, which is analyzed with parsimony; with the other  methods, the gene trees are turned into path-length distance matrices which are combined into the distance supermatrix. all combinations of source distance matrices are achieved using sdm. p-value: sign-test significance when comparing the  <dig> dq values of mvr*  to those of fitch and mrp. for other symbols and notation, see note to table  <dig> 

nj*, bionj* and mvr* do not show any significant difference when used with s =  <dig> and s = max . this confirms the results of the previous experiments to compare our various agglomeration criteria. nj* has the worst accuracy, especially in the high-level combination framework. mw*, fitch and bionj* show similar performance, while mvr* is best among distance approaches in the two gene combination levels. moreover, the difference between mvr* and fitch is highly significant . in the high-level framework, mvr* tends to be better than mrp, although the information is quite abundant ; however, the difference is not significant with  <dig> replicates . the results among distance methods are explained by the fact that mvr* uses fairly accurate estimates  of the variances of the distances in . indeed, dataset  <cit>  induces a highly heterogeneous distribution of missing sequences, meaning that some distances are well estimated thanks to a large number of sequences, while some others are poorly estimated via a few sequences. this is accounted for by mvr* in  calculations , while mw*, fitch and bionj* lack this information and use inaccurate estimations of . the difference between these two approaches  is somewhat hidden when using uniformly random sequence deletion, because with the latter all distances are broadly estimated with the same number of genes. with biologically realistic pattern of gene presence/absence, the difference becomes important, especially for the high-level combination. thus, this last set of simulations confirms the findings of the previous ones and supports the capacity of mvr* for dealing with phylogenomic data.

run time comparison
run times with various dataset sizes have been measured on a pc pentium iv  <dig>  ghz  and are displayed in table  <dig>  we do not report the run times of nj* and bionj*, as they are nearly the same as those of mvr*. in fact, nj* and bionj* are ~2% faster than mvr*, because they are simpler, but these simplifications does not concern the heavy o parts of the algorithms . we also report the run times of sdm  <cit> , which are in the same range as the fastest tree building algorithms, except with driskell et al.  <cit> -like datasets, where sdm has to summarize a large number  of source matrices, but where the number of taxa  is relatively low. in this case, the run time of sdm is analogous to that of fitch and mw* and remains quite handy .

mean run times are provided for various taxon numbers , gene numbers  and proportions of missing entries:  25%,  75%, and   <dig> % using driskell et al.  <cit> -like datasets. run times are measured in seconds using a standard pc . the low run times with k =  <dig> and 75% deletion rate are explained by the low size of the distance super-matrices .

as expected from their mere principle, the run times of the various tree building algorithms are not much affected by the proportion of missing distances, which is induced by the taxon deletion rate  and the number of source matrices . the only apparent exceptions correspond to k =  <dig> and 75% deletion rate, where all algorithms seem to be quite fast; but in this case the distance supermatrices are of low size , which explains this finding. indeed, in this case it occurs frequently that some taxa have no gene  in common with any of the other taxa, and such taxa cannot be analyzed as all their distances to the other taxa are missing.

with 25% taxon deletion proportion, n =  <dig> and k =  <dig>  run times of ~ <dig> hours and ~ <dig> hours are required by fitch and mw*, respectively, to build the  <dig> trees corresponding to all gene collections in any given gene combination level. the same task, which induces calculations similar to bootstrapping, is achieved in ~ <dig> seconds by any of our agglomerative algorithms. the difference between the agglomerative algorithms and the others increases when the number of taxa increases, as expected given that their time complexity are o  as s is kept constant) and o or more, respectively. with  <dig> taxa, fitch and mw* require more than  <dig> hours to build a single tree, while the agglomerative algorithms require less than  <dig> minute; this run time makes easy to perform a bootstrap study with our algorithms, but pretty much impossible with fitch or mw*. with even larger datasets  neither fitch nor mw* can be used to build a single tree, while our algorithms still run in a few minutes.

CONCLUSIONS
thanks to the ever increasing flow of sequence data, phylogenomic analyses and supertree buildings are more and more frequently used to draw the evolutionary tree of living species. larger and larger datasets are processed, requiring sophisticated approaches and algorithms. in this context, distance-based methods are quite useful, as they are both very fast and fairly accurate. new techniques, such as sdm  <cit> , allow quickly estimating distance supermatrices that summarize the topological signal being contained in a collection of source distance matrices or gene trees. however, these supermatrices may be incomplete due to low taxon coverage in the selected genes. in this  case, fast distance-based tree building algorithms such as nj, bionj, fastme or stc are no longer applicable.

this paper presents an adaptation to incomplete distance matrices of several agglomerative algorithms, namely nj, bionj and mvr. we show that the formulae forming the basis of these algorithms can be rewritten to account for missing distances. moreover, the same holds for the quartet-based pair selection criterion of addtree. combining both nj and addtree generalized pair selection criteria, we obtain fast and accurate algorithms that require o run times, where n is the number of taxa, i.e. run times that are similar to nj's. these three novel algorithms, named nj*, bionj* and mvr*, show  topological accuracy similar or higher to that of fitch and mw*, which are much more time consuming. mvr* appears to be best, followed by bionj*. in a phylogenomic context, mvr* accounts for  the fact that gene distribution among species is very heterogeneous, which implies that some distances are accurately estimated  while some others are poorly estimated . combined with the sdm method  <cit>  to estimate distance supermatrices, mvr* and bionj* are relevant alternatives to standard supertree techniques  <cit> , as mrp  <cit> . java implementations of these algorithms are available in phyd* software and downloadable from  <cit> . all our datasets are also available from this url.

several research directions would deserve to be explored. the variances and covariances of the distance estimates in the distance supermatrix could be accounted for in a more complete and accurate way, e.g. in the line of weighbor  <cit>  for the pair selection criterion, or using the generalized least-squares version of mvr  <cit> . there is a clear need for a pair selection criterion being able to point out xy taxon pairs, even when the corresponding Δxy distance is missing. theoretical results highlighting the cases where our algorithms will succeed  in recovering the correct tree, would likely help to improve these algorithms or design new ones. adapting to missing distances very fast algorithms  <cit>  could be promising. finally, dealing with missing distances is likely required in other  applications of phylogenetic trees, and in related problems, as phylogenetic network inference  <cit> .

