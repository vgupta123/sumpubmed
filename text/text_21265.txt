BACKGROUND
biomedical semantic role labeling 
biomedical semantic role labeling  is an important natural language processing technique for life scientists who are interested in uncovering information related to biological processes within literature. in biosrl, sentences are represented by one or more predicate argument structures , also known as propositions  <cit> . each pas is composed of a predicate  and several arguments  that have different semantic roles, including main arguments such as agent and patient, as well as adjunct arguments, such as time, manner, and location. here, the term argument refers to a syntactic constituent of the sentence related to the predicate, and the term semantic role refers to the semantic relationship between a predicate and an argument of a sentence. for example, in figure  <dig>  the sentence "il <dig> and il <dig> receptors activate stat <dig>  stat <dig>  and stat <dig> proteins in the human b cells," describes a molecular activation process. it can be represented by a pas in which "activate" is the predicate, "il <dig> and il <dig> receptors" and "stat <dig>  stat <dig>  and stat <dig> proteins" comprise arg <dig>  and arg <dig> , respectively, with "in the human b cells" as the location. thus, the agent, patient, and location are the arguments of the predicate.

given a sentence, the srl task executes two steps: predicate identification and argument recognition. the first step can be achieved by using a part-of-speech  tagger with some filtering rules. then, the second step recognizes all arguments, including grouping words into arguments and classifying the arguments into semantic role categories. some studies refer to these two sub-steps as argument identification and argument classification, respectively  <cit> . in the second step, it is often difficult to determine the word boundaries and semantic roles of an argument as they depend on many factors, such as the argument's position, the predicate's voice  and the sense . the second step can be formulated as a sentence tagging problem. a sentence can be represented by a sequence of words, a sequence of phrases, or a parse tree; the basic units of a sentence are words, phrases, and constituents  arranged in the above representations, respectively. hacioglu et al.  <cit>  showed that tagging phrase-by-phrase  is better than word-by-word . however, punyakanok et al.  <cit>  showed that constituent-by-constituent  tagging is better than p-by-p. based on punyakanok et al.’s findings, biosmile  <cit>  also adopted c-by-c tagging for biosrl and achieved an accuracy close to that of top general srl systems.

c-by-c approaches can be called “discrete approaches” because they do not consider dependencies among constituents/nodes. for example, a parent node and any of its children nodes cannot both be labeled with semantic roles simultaneously. in srl, collective approaches which label several or all nodes simultaneously have been proposed and outperform discrete approaches  <cit> . the markov logic network  model is a good representative collective approach. it offers the flexibility to model dependencies with first-order-logic formulae.

in this paper, we explore the collective approach to biosrl by building an mln-based system. despite the convenience of modeling dependencies and the high accuracy of mln, we have observed that it requires more memory and longer training times on a large corpus. this is an obstacle to applying mln to biosrl, which requires a large amount of training data to cover the wide variety of specialized biomedical subdomains. to reduce the resources used in biosrl training, we employ a tree-pruning filter to remove unlikely nodes from the parse tree and four argument candidate identifiers to retain candidate nodes in the tree. nodes not recognized by any candidate identifier are discarded. the pruned annotated parse trees are used to train a resource-saving mln-based system, which is referred to as resource-saving collective biosmile .

methods
in this section, we will firstly describe our main contribution: resource-saving preprocessing. then, we will illustrate the markov-logic-network-based collective learning approach. before entering into the explanation of our methods, we define the terms used in this section. given a sentence s and its full parse tree p, every node n
i
 in p corresponds to some substring of s, referred to as sub
i
. for the convenience of explanation, sub
i
 is referred to as n
i
’s span. take the sentence in figure  <dig> for example, the node np’s span is “htlv- <dig> transcription”. arg <dig> is this node’s semantic role or argument type. all nodes with semantic roles are referred to as “argument nodes”. in srl, predicate means the verb while in mln, predicate represents relationships among objects in the first order logic. to avoid the ambiguity between the predicates in fol and srl, we follow punyakanok et al.  <cit>  to refer to the predicates in srl as “verb predicate ” afterwards.

resource-saving preprocessing
to reduce the resources used in biosrl training, we employ a tree-pruning filter to remove unlikely nodes from the parse tree and four argument candidate identifiers to retain candidate nodes in the tree. nodes not recognized by any candidate identifier are discarded. in the following subsections, we describe these components.

tree pruning filter 
we employ four rules to prune nodes unlikely to be arguments. the first rule is based on the intuition that if a node’s span overlaps with the verb predicate, the node is unlikely to have a semantic role. such nodes are located in the same path as the node whose span is the verb predicate and must be removed. an example is shown in figure 3a. figure 3b shows the application of rules  <dig>   <dig>  and  <dig>  the second rule r
2
 is to remove all leaf nodes, which are enclosed in a dotted box. the third rule r <dig> is to remove all nodes without any siblings. these nodes are enclosed in dotted circles and labeled with “r3”. the fourth rule r <dig> is to remove all nodes whose spans are stop-words. these nodes are enclosed in dotted circles and labeled with “r4”.

association rule candidate identifier 
rules containing several predicates are effective for identifying argument candidates. for example, if a node i starts with “in” and ends with “cell”, then it is very likely to be a location argument . this rule can be translated into the following first-order logic formula:

rule1:firstword  ∧ lastword  ⇒ role 

we can see that this rule is composed of three predicates: firstword , lastword , and role .

however, compiling the set of rules is labor-intensive. to automatically generate a rule, the main task is to decide which predicates must be included. we select several basic predicate types listed as follows.


the pool of predicates


 node type

 first word and last word stem

 pos of the first word and last word

 pos of the verb predicate

 voice of the verb predicate

 before or after the verb predicate

 semantic role

 the verb predicate

 syntactic path from the verb predicate

these features are selected from basic features used in the biosmile  <cit>  system. we formulate the rule-generation problem as a problem of association rule mining  <cit> .

to formulate the rule generation problem as an association-rule-mining task, it is necessary to define four things including item, transaction, support and confidence. an item is a predicate appearing in a rule, such as the predicates firstword , lastword , and role  from the above example. to acquire i, the set of all items, we process the training set and extract predicates from arguments. a transaction is a collection of items. in this work, all arguments  in the training set are treated as transactions. for instance, the two sentences shown in figure  <dig> can be transformed into the transactions shown in ‘the transactions extracted from the sentences in figure  <dig>  the full name of all abbreviations can be found in table 1’. the support supp of an itemset x is defined as the proportion of transactions in the data set which contain x. the confidence of a rule x ⇒ y is defined as conf = supp/supp. for example, rule  <dig> has a confidence of  <dig> / <dig>  in the database, which means that 95% of the transactions that follow the rule are correct. using the apriori algorithm  <cit> , rules such as

 event_triggerp∧node_type∧firstword∧lastwordi,"cells"∧lastword_pos⇒candidate_rolep,i,"argm‒loc" 

can be generated.

the generated association rules are employed to identify argument candidates. nodes not matching any rule are discarded.


the transactions extracted from the sentences in figure
4
. the full name of all abbreviations can be found in table
1

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

fw, lw, ct, path, verb_predicate, role

word-based candidate identifier 
some types of arguments can be identified by checking if they exactly match specific words with other conditions. we compile lists of words corresponding to three types of arguments. these argument types are:


discourse argument 
: discourse arguments connect sentences to preceding sentences. if a node’s span can be found in the word list for argm-dis, the node is regarded as an argm-dis candidate. the word lists for argm-dis, argm-mod and argm-neg are shown in table  <dig> 


modal argument 
 and 
negation argument 
: if a node’s span appears right before a verb predicate and can be found in the word list for either argm-mod or argm-neg, it is regarded as an argm-mod or argm-neg candidate, respectively.

pattern-based candidate identifier 

extent marker
: the extent marker indicates the amount of change caused by an action, such as “approximately 12-fold” in figure  <dig>  we have observed that extent markers are usually siblings of the verb-predicate node . for each sibling sib, the identifier checks whether the subtree with root sib has any nodes whose spans match the extent marker pattern . matching nodes are regarded as argm-ext candidates.


temporal marker 
: the temporal marker indicates when an action takes place. like extent markers, temporal markers are usually siblings of the verb-predicate node and are identified in the same manner. the identifier finds argm-tmp candidates by checking whether the subtrees of verb-predicate node with root sib have any nodes whose spans match the temporal marker pattern. in addition, temporal markers sometimes appear at the beginning of a sentence. therefore, the identifier also checks if any nodes whose spans start with the first word of a sentence match the temporal marker pattern . such nodes are also considered argm-tmp candidates.

parse-tree-based candidate identifier 
if a node n is not identified as a candidate by the above components, this module will check if the path from the verb-predicate node to n is equal to any path from the verb-predicate node to an argument node m in the training set. if yes, n will be treated as a candidate of m’s argument type.

markov logic
first-order logic
mln combines first order logic  and markov networks. in fol, formulae consist of four types of symbols: constants, variables, functions, and predicates. constant symbols represent objects in a specific domain . variable symbols range over the objects in the domain. function symbols  represent mappings from tuples of objects to objects. predicates represent relationships among objects , or attributes of objects . constants and variables may belong to specific types. an atom is a predicate symbol applied to a list of arguments, which may be constants or variables. a ground atom is an atom whose arguments are all constants. a world is an assignment of truth values to all possible ground atoms. a knowledge base  is a partial specification of a world; each atom in it is true, false, or unknown.

markov networks
a markov network represents the joint distribution of a set of variables x = {x <dig>  …, x
n
} ∈ x as a product of factors: px=x=1z∏kfkxk, where each factor f
k
 is a non-negative function of a subset of the variables x
k
, and z is the normalization constant. the distribution is usually equivalently represented as a log-linear form: px=x=1zexp∑iwigix, where the features g
i
 are arbitrary functions of  the variables’ states.

markov logic networks
an mln is a set of weighted first-order formulae. together with a set of constants representing objects in the domain, it defines a markov network with one variable per ground atom and one feature per ground formula. the probability distribution over possible worlds is given by px=x=1zexp∑i∈f∑j∈giwjgjx where z is the partition function, 
f
 is the set of all first-order formulae in the mln, 
g


i

 is the set of groundings of the i-th first-order formula, and g
j
 =  <dig> if the j-th ground formula is true, and g
j
 =  <dig> otherwise. markov logic enables us to compactly represent complex models in non-i.i.d. domains. general algorithms for inference and learning in markov logic are discussed in richardson and domingos  <cit> . we use the1-best mira online learning method  <cit>  for learning weights and employ cutting plane inference  <cit>  with integer linear programming as its base solver for inference at test time as well as during the mira online learning process. as aforementioned, to avoid the ambiguity between the predicates in fol and srl, we refer to srl predicates in as “verb predicate”.

formulae
local formulae 
as shown in table  <dig>  local formulae are derived from the features used in the srl systems  <cit>  based on the maximum entropy  model and support vector machine  model. we used these features in biosmile  <cit> , and we have transformed them into formulae here to employ them in our mln model.

a local formula consists of two observed predicates, one corresponding to the verb predicate and the other one denoting a feature of a node. for example, the headword feature can be expressed in fol as

 candidate_rolep,i,+r∧headwordi,+w⇒rolep,i,+r 

where w is the headword of the node i. if the “+” symbol appears before a variable, it indicates that each different value of the variable has its own weight.

collective formulae 
collective classification is a methodology that simultaneously classifies related instances. it can improve classification accuracy over non-collective methods when instances are interrelated  <cit> . mln performs well in many collective classification tasks such as entity linking  <cit> , coreference resolution  <cit>  and biomedical event extraction  <cit> . in node-by-node srl, related instances are nodes having linguistic dependencies.

there are two main types of linguistic dependencies in srl: tree dependency and path dependency. they have been shown to be effective in improving the consistency of srl results  <cit> . nodes with tree dependencies and path dependencies can be treated as tree collectives and path collectives, respectively. in mln-based srl, collectives can be implemented with collective formulae that model dependencies among nodes.

given a sentence sen and a verb predicate p, a tree collective is composed of all nodes in sen’s parse tree. in this tree collective, there is a constraint that each core semantic role of p can only be assigned to one node, which can be expressed in the following formula:

 verb_predicatep∧core_arg+r⇒rolep,i,+r≤ <dig> 

in addition, a path collective is composed of all nodes in a path. spans of nodes in the same path collective overlap. therefore, only one node in a path can play a semantic role. this dependency can be formulated as follows:

 overlapi,j∧rolep,i,r1⇒rolep,j,r2= <dig> 

candidate identification formulae 
in our resource-saving preprocessing step, candidate identifiers recognize the most likely semantic roles for each node. the information can be transformed into formulae to improve the accuracy of mln inference. for a node i retained as a candidate node by our resource-saving preprocessing, an observed predicate candidate_role is added to our mln-based inference system.

RESULTS
dataset
we use bioprop  <cit>  as our evaluation dataset. bioprop is a semantic role labeling corpus which contains  <dig> biomedical abstracts containing  <dig>  pas’s labeled with the  <dig> most common biomedical verb predicates and their semantic roles. table  <dig> shows the statistics of the bioprop corpus.

core arguments such as argx, r-argx and c-argx play the main semantic roles in a pas. argx  are the most necessary arguments of a given verb predicate. c-argx is used to represent multi-node arguments. a node labelled c-argx is assumed to be a continuation of the closest node to the left labelled argx. a node labelled r-argx is assumed to be a relative pronoun of the closest node to the left labelled argx. adjunctive arguments  play the semantic roles of location, manner, time, or extent in a pas.

evaluation metric
the argument-wide results are given as f-score using the conll- <dig>  <cit>  evaluation script and defined as f=2×p×rp+r, where p denotes the precision and r denotes the recall. the formulae for calculating p and r are as follows:

 p=thenumberofcorrectlyrecognizedargumentsthenumberofrecognizedarguments 

 r=thenumberofcorrectlyrecognizedargumentsthenumberofarguments 

furthermore, we also evaluate the results in terms of the pas-wide f-score , which is defined as fpas=2×ppas×rpasppas+rpas. the formulae for calculating p
pas
 and r
pas
 are as follows:

 ppas=thenumberofcorrectlyrecognizedpas'sthenumberofrecognizedpas's 

 rpas=thenumberofcorrectlyrecognizedpas'sthenumberofpas's 

t-test
in order to evaluate our performance under an unbiased circumstance, we apply a two-sample paired t-test, which is defined as follows:

the null hypothesis, which states that there is no difference between the two configurations a and b, is given as

 h0:μa=μb 

where μ
a
 is the true mean f-score of configuration a and μ
b
 is the mean of the configuration b, while the alternative hypothesis is

 h1:μa>μb 

a two-sample paired t-test is applied since we assume the samples are independent. as the number of samples is large and the samples’ standard deviations are known, the following two-sample t-test can be administered:

 t=xa¯−xb¯sa2na+sb2nb 

if the resulting t-score is equal to or less than  <dig>  with a degree of freedom of  <dig> and a statistical significance level of 95%, the null hypothesis is accepted; otherwise it is rejected.

to retrieve the average f-scores and their deviations required for the t-test, we randomly sampled thirty training sets  and thirty test sets  from the  <dig> abstracts. each training set and test set contains  <dig> and  <dig> abstracts, respectively. we trained the model on gi and tested it on di. afterwards, we summed the scores for all thirty test sets and calculated the averages for performance comparison.

configuration settings
we construct three configurations of our system for comparison. the biosmile configuration uses the local formulae , which is equivalent to our previous work. the cbiosmile configuration uses both the local  and collective formulae . in the rcbiosmile configuration, we firstly employ our proposed resource-saving preprossing  step. then, the local , collective , and candidate identification formulae  are all used. the settings of these three configurations are shown in table  <dig> 

*significantly outperforms biosmile.

extraction performance
table  <dig> shows the argument-wide performance of all configurations of our system on the conll evaluation metrics, which measure whether each argument is independently correct. table  <dig> shows configuration performance on pas-wide evaluation metrics, in which a pas is regarded as successfully extracted only if all its member arguments are correctly extracted. we use ‘*’ to indicate that the configuration shows a statistically significant improvement over biosmile. cbiosmile is biosmile with integrated collective learning. table  <dig> shows that, across all arguments, cbiosmile outperforms biosmile by  <dig> % on average in terms of f-score. rcbiosmile boosts the improvement to  <dig> %.

in pas-wide evaluation , cbiosmile shows an improvement of  <dig> %  over biosmile, and an even larger advantage can be observed on core arguments . rcbiosmile enlarges the improvement to  <dig> %  over biosmile, and an even larger advantage can be observed on core arguments .

resource savings
we first examine the effects of tree pruning filters. on average, rules  <dig> , <dig>  and  <dig> removes 10%, 36%, 5%, and 13% of all nodes, respectively. applying all four tree pruning rules can filter 43% of all nodes.

table  <dig> displays time and memory costs. we compare each configuration’s training time per iteration and test time per instance. compared to cbiosmile, which has similar performance , rcbiosmile requires 92% less memory and 57% less training time, which are dramatic savings. we believe that rcbiosmile could be further improved by adding new srl patterns written manually by biological experts.

discussion
advantages of  cbiosmile over biosmile
cbiosmile and rcbiosmile excel at correcting two error types,  duplicate arguments and  overlapping arguments. an example of a duplicate argument would be:

partial amino acid sequences obtained from purified ebf were used to isolate ,    

here biosmile, working node by node, labels both “cdna clones” and “multiple criteria” as arg0—the former because it appears before “which”, and the latter because is the nearest noun phrase to the verb predicate “encode”.  cbiosmile avoids this error because the tree collective formulae limit the maximum number of any core argument type to one. therefore, it labels only the node with the highest likelihood of being arg <dig> 

similarly,  cbiosmile can avoid overlapping errors such as:

isolation of        <dig> 

in this example, biosmile incorrectly labels the two overlapping nodes “isolation of a rel-related human cdna” and “a rel-related human cdna” as arg <dig>   cbiosmile does not make such errors because path collective formulae assert that only one node in a path of a parse tree can be an argument.

advantages of rcbiosmile over cbiosmile
according to the results of individual arguments for all argument types , we can see that rcbiosmile significantly outperforms cbiosmile in argm-adv, argm-tmp, and r-arg <dig>  this may be because rcbiosmile employs several candidate identifiers to enhance the likelihood of true arguments being correctly labeled. take the following sentence for example:

,  are   .

the parse-tree-based candidate identifier employed by rcbiosmile recognizes the node whose span is “although lymphokine genes are coordinately regulated upon antigen stimulation” as a candidate of argm-adv or argm-tmp, and rcbiosmile adds the predicates “candidate_role” and “candidate_role” into the inference system. therefore, this node can be successfully labeled as argm-adv. because cbiosmile does not use the candidate identifier, it has difficulty labeling such long-span nodes with the correct argument types.

disadvantages of  cbiosmile
rcbiosmile and cbiosmile, which use collective learning, outperform biosmile in most argument types. surprisingly, they perform worse than biosmile in argm-dis and argm-adv. we believe that this may be because argm-dis can be easily recognized by position information , and duplication and overlapping errors  seldom occur in argm-adv.

pruning errors of rcbiosmile
we observed that rcbiosmile cannot recognize some arguments that can be recognized by biosmile and cbiosmile. after analysis, we found that such errors are caused by rcbiosmile’s pattern-based pruning step, as in the following sentence:

however, the profound t cell deficit of nude mice indicates that  is by far the most potent site for   , even if other sites can induce some response acquisition.

in this example, since the syntactic path from the node whose span corresponds to “the thymus” does not link to an arg <dig> node and a verb-predicate node, this node is pruned. therefore, rcbiosmile predicts a nearer noun phrase “the most potent site” as arg <dig> 

related work
biomedical semantic role labeling corpus
pasbio  <cit>  is the first pas standard used in the biomedical field, but it does not provide a srl corpus. grec  <cit>  is an information extraction corpus focusing on gene regulation events. however, grec does not support the treebank format srl annotations  <cit> . bioprop is the only corpus that provides srl annotations and annotates semantic role labels on syntactic trees. it is created by  <cit> . bioprop selects  <dig> most frequent or significant verbs found in biomedical literatures, and defines the standard of the biomedical pas. furthermore, in accordance with the style of propbank  <cit> , which annotates pas on penn treebank   <cit> , bioprop annotates their pas on the genia treebank beta version  <cit> . gtb includes a collection of  <dig> medline abstracts selected from the search results with the following keywords: human, blood cells, and transcription factors and contains a treebank that follows the style of penn treebank.

biomedical semantic role labeling system
most semantic role labeling systems follow the pipeline method, which includes predicate identification, argument identification and argument classification. however, in recent years, instead of using the pipeline method, several researches have shown that using the collective learning method can outperform the traditional pipeline method. riedel et al.  <cit>  uses markov logic to collectively learn these stages on srl. however, to the best of our knowledge, there seems to be no existing srl system using mln in the biomedical field. dahlmeier et al.  <cit>  uses the domain adaption approaches to improve srl in biomedical field. bethard et al.  <cit>  considers srl as a token-by-token labeling problem and focuses on the srl in transport proteins. biosmile is a biomedical srl system that focuses on  <dig> frequently appearing or important verbs in biomedical literatures and trained on the bioprop, and it is based on the maximum entropy  model.

CONCLUSIONS
currently, a major problem of biosrl is that most systems label every node in a full parse tree independently; however, some nodes always exhibit dependency. in general srl, collective approaches based on the markov logic network  model have been successful in dealing with this problem. in this paper, we explore the collective approach to biosrl by building an mln-based system.

despite the convenience of modeling dependencies and the high accuracy of mln, we have observed that it requires more memory and longer training times on a large corpus. this is an obstacle to applying mln to biosrl, which requires a large amount of training data to cover the wide variety of specialized biomedical subdomains. to reduce resource usage, we designed a pattern-based method to prune parse-tree nodes that may not have semantic roles. this method is applied to the parse trees in bioprop. to minimize the efforts of domain experts in manual pattern compilation, we developed an automatic pattern generation approach. the pruned annotated parse trees are used to train a resource-saving mln-based system, which is referred to as resource-saving collective biosmile .

our experimental results show that our proposed cbiosmile system outperforms biosmile, which is the top biosrl system. furthermore, our proposed rcbiosmile maintains the same level of accuracy as cbiosmile using 92% less memory and 57% less training time. this greatly improved efficiency makes rcbiosmile potentially suitable for training on much larger biosrl corpora over more biomedical domains. compared to real-world biomedical corpora, bioprop is relatively small, containing only  <dig> medline abstracts and  <dig> event triggers. it is not large enough for practical applications, such as pathway construction. we consider it of primary importance to pursue srl training on large corpora in the future.

competing interests
the authors have no competing interests.

authors' contributions
rth tsai designed the algorithm and all the experiments, wrote most of this paper, and guided the whole project. pt lai wrote the programs and conducted all experiments. all authors read and approved the final manuscript.

acknowledgments
this research was supported in part by the national science council under grant nsc 98-2221-e-155-060-my <dig>  we especially thank the bmc editors and reviewers for their valuable comments, which helped us improve the quality of the paper.
