BACKGROUND
since haldane's analysis of a simple enzyme mechanism  <cit> , kinetic analysis has been central to our quantitative understanding of enzyme mechanisms  <cit> . in conventional applications, kinetic data from initial-rate experiments are used to evaluate enzyme mechanisms based upon derived mechanistic rate expressions. such rate expressions are important in building integrated models of metabolic systems which involve a number of enzymatic reactions  <cit> . in principle, the rate equations for a given discrete-state reaction mechanism can be derived by solving a system of simultaneous nonlinear algebraic equations that result from the steady-state expressions for the concentrations of all of the enzyme intermediates. this approach was first applied successfully by botts and morales  <cit>  to some enzymatic systems. however, when the system involves multiple substrates, enzyme complexes, and products  <cit> , deriving rate equations based on steady-state equations may be too complex to be of practical interest and also can be liable to human errors. therefore, systematic approaches, as reviewed by huang  <cit> , are desirable.

king and altman  <cit>  introduced a graphical/schematic method for facilitating derivation of steady-state rate equations in enzymatic systems. modifications introduced by volkenstein and goldsein  <cit>  and cha  <cit>  added substantial power to the king-altman method by applying graph theory and allowing for the assumption that one or more of the reversible steps in the enzyme mechanism is maintained in rapid equilibrium  <cit> . other alternative methods include those described by fromm  <cit> , orsi  <cit> , ainsworth  <cit> , indge and childs  <cit> , and chou and forsen  <cit> .

even when using graphical methods, manually deriving the steady-state rate equations for non-trivial enzyme mechanisms can be cumbersome and error-prone. therefore, computer-assisted methods are useful. applying the method of king-altman, pring  <cit>  and rhoads  <cit>  developed two programmes, k and d, which perform logical operations essential for generating rate equations based on the strictly steady-state assumption with respect to a certain class of species present. lam and priest  <cit>  introduced an algorithm based on graph theory that is computer programmable. cornish-bowden  <cit>  presented a computer implementation of cha's method using an exhaustive search. a computer program developed by kinderlerer and ainsworth  <cit>  is restricted to enzyme mechanisms involving up to  <dig> enzyme intermediates. straathof and heijnen  <cit>  and fromm and fromm  <cit>  introduced methods to derive rate equations for enzyme systems using the symbolic algebra packages maple and mathematica. however, these programs derive only strictly steady-state rate equations and cannot obtain rate equations involving irreversible steps. varon et al.  <cit>  developed a program called albass that overcame many of the limitations of earlier programs. several years later, the varon group developed two new programs written in c++, called referass  <cit>  and winstes  <cit> , which can derive rate equations for mechanisms with up to  <dig> intermediate states with up to  <dig> reactions. the algorithms and software developed by varon and colleagues represent the most powerful and flexible previously developed tools for deriving enzyme rate expressions. yet, like other previous packages, it does not appear to be currently available.

we present here a simple, stand-alone computer program written in matlab gui, called kapattern, for generating rate equations in complex enzyme systems. this program is based on the schematic method of king and altman  <cit> , and uses the topological theory of linear graphs, called wang algebra  <cit> , that systematically generates valid king-altman directed graph patterns. our package provides the functionality of the winstes program of varon and colleagues  with several additional features:

 <dig>  there is no limitation on the size of the system other than that imposed by the available memory and cpu resources.

 <dig>  the program can output the results  as a mathml file or a matlab .m file which may be integrated into simulation program. 

 <dig>  the program provides visualization of all the valid ka patterns.

 <dig>  functions available in kapattern may help the end-users to obtain insights on catalytic mechanism  that may be useful for other applications.

 <dig>  foremost, the package is freely available for download and use by the community.

RESULTS
the king-altman method
the king-altman  procedure is easily understood based on an illustrative example, as described here for the enzyme mechanism illustrated in figure  <dig>  this mechanism is the proposed five-state catalytic scheme for fumarase , which catalyzes the hydration of fumarate to malate  <cit> . this mechanism involves  <dig> enzyme states  and  <dig> links between those states, characterized by  <dig> rate constants.

the first step in applying the ka procedure is listing all of the valid ka patterns for the enzyme mechanism. these patterns, illustrated in figure 2a, are the set of all subsets of the graph in figure  <dig>  with the maximum number of edges while excluding any closed loops. there there are  <dig> possible ka patterns associated with the mechanism of figure  <dig> 

the next step is to determine all of the directional diagrams associated with each state in the enzyme mechanism. the directional diagrams associated with a given state are constructed from the ka pattern set, with directions indicated on each edge on each ka pattern. the directions are chosen so that, for state i, the arrows are directed toward state i with no diverging edges. the set of all directional diagrams associated with state  <dig> for the mechanism of figure  <dig> is illustrated in figure 2b. since there are  <dig> states and  <dig> ka patterns, there are  <dig> ×  <dig> =  <dig> directional diagrams associated with the mechanism of figure  <dig>  each directional diagram is associated with a product of pseudo-first order rate constants for the arrows in the directional diagram. for example, the term for the top-left directional diagram in figure 2b is . the relative steady-state concentration of each state is proportional to the summation of  <dig> terms associated with the  <dig> directional diagrams for each state. specifically, the relative concentration of the ith enzyme state can be computed as a fraction of the total enzyme concentration whose numerator is the sum of the  <dig> terms associated with the  <dig> directional diagrams which all point or end to ith state , and denominator is the sum of all  <dig> terms associated with the directional diagrams for all  <dig> states in the system . that can be written as:

   

here Σi represents the sum of the  <dig> terms associated with the state i and Σ is the sum over all  <dig> sets of  <dig> terms for all states, and eo is the total enzyme concentration.

the ka method is described in somewhat more detail in  <cit>  and  <cit> .

algorithm
as described above, the graphical method of king and altman is based on determining a set of ka patterns that are subsets of the graph of the enzyme mechanism. each ka pattern contains the maximal number of edges possible while not containing any closed loops. each enzyme state  has associated with it a directional diagram for each ka pattern. enumerating all directional diagrams becomes more difficult as the enzyme mechanism becomes more complex.

previous applications of the theory of graphs to the solution of enzyme kinetic problems have been aimed at developing algorithms that are easy to program and allow users to rapidly calculate the steady-state concentrations of enzyme states, and thereby obtain expressions for the rate of product accumulation  <cit> . unlike using symbolic algebra packages to solve a set of nonlinear algebraic equations based on steady-state and mass conservation, these approaches take advantage of the similarity between complex enzyme mechanisms and electrical networks. specifically, it has been proved that the method used to generate trees from linear graphs can be applied to complex enzymatic reaction mechanisms  <cit> .

here we use the method described by lam and priest  <cit>  to automatically generate the valid ka patterns from the reaction graph. this method makes use of the theory called wang algebra  <cit> , where the key principle is that the addition or multiplication operation on two or more identical elements leads to zero . this property can be expressed as

   

   

where c is a element which has been operated. we will see below how this property can be applied as an algebraic representation of a requirement for valid ka patterns.

to apply the lam-priest algorithm, we first simplify and re-plot the enzymatic system as shown in figure  <dig>  in this linear graph representation, a node  represents the enzyme form and a link  represents the inter-conversion relationship between two enzyme forms. that means if there is inter-conversion between two enzyme forms, whether reversible or irreversible, then there is a link to connect them. the links are nondirectional. a number is assigned to each node , and each link . the linear graph structure is represented by an n × n symmetrical matrix . for the example of figure  <dig>  ℒ can be written as:

   

each element ℒij is the index of the link between node  i and j.

further information on the kinetic mechanism of the reaction system is stored in an n × n matrix . for the current example,  is given by:

   

note that  is not symmetric in general.

application of the lamb-priest algorithm starts with randomly selecting n -  <dig> nodes from the linear graph, and determining the links connected to the n - <dig> nodes.  it is easy to carry out this operation on ℒ by deleting a row  and then listing separately all the nonzero entries from the remaining n -  <dig> rows . in the next step, using the wang algebra described above, the links listing obtained in previous step are alphanumerically multiplied. here the alphanumeric multiplication of elements  is defined as a list rather than numerical values. for example, multiplying alphanumerically  <dig> and  <dig> is equal  <dig> rather than  <dig>  the result of this operation is the set of all valid ka patterns, expressed by a set of link index array. the wang algebra principle guarantees that no invalid or redundant patterns are generated through these steps.

in the final step, the links  in each ka pattern are assigned directions so that the reaction steps, individually or in sequence, lead to a given enzyme state ei. for example, if we delete the second row corresponding to the enzyme form  <dig> , we obtain e <dig> ; e <dig> ; e <dig> ; e <dig> . in the next step, we alphanumerically multiply these four lists:

   

thus, an alphanumerical multiplication of two lists, such as  and , yields a list of all of the entry-by-entry products,  . the result lists all the valid ka patterns represented by  <dig> lists of link indexes. the graph representation of all the valid ka patterns is shown in figure 2a. the algorithm ensures that only one link shows up in one single pattern only once  and equation ), and that there are no redundant patterns.

as an internal check, we apply an independent method to calculate the expected number of valid ka patterns. several such methods are available, including one introduced by chou and forsen  <cit>  based on the wong-hanes rule  <cit> . a simpler method is to calculate the determinant of the product of the cut matrix  and its transpose, yielding the correct number of valid ka patterns for any enzyme mechanism  <cit> . the cut matrix is defined by using the n -  <dig> nodes of n enzyme complexes as the row numbers and the link indexes as the column numbers. thus

   

where

   

here, n = total number of enzyme forms and m = total number of links. each entry is defined ci,j =  <dig> if link j enters state i, ci,j = - <dig> if link j leaves enzyme i, and =  <dig> otherwise. thus there is a different definition of the cut matrix  for each set of definitions of link directions. for the purpose of computing the number of valid ka patterns, the assignment of directions of these links is arbitrary. for example, if we exclude node  <dig>  and assign directions for each link as shown in figure  <dig>  the cut matrix will be:

   

and

  

implementation
we use the enzyme-catalyzed reaction mechanism of fumarase to illustrate the usage of the kapattern program. given a simple input file for this complex enzymatic reaction, this program produces the link matrix ℒ and kinetic matrix  as well as generates all the valid ka patterns, outputs each pathway corresponding to each enzyme form based on the generated valid patterns, and outputs the results  as a mathml file or a matlab .m file, which can be used in a simulation program of an integrated metabolic system model.

in this program, the input file for an enzyme-catalyzed reaction mechanism is a simple .txt file that lists every pseudo-first-order rate constants in the enzyme catalytic system. below is the input file for the fumarase reaction mechanism; the first column and the second column are the indexes of the enzyme forms, the third column is the pseudo-first-order rate constants connecting the corresponding two enzyme forms :

input.txt

 <dig>  <dig> k1*a

 <dig>  <dig> k_1

 <dig>  <dig> k_6*p

 <dig>  <dig> k6

 <dig>  <dig> k3*b

 <dig>  <dig> k_3

 <dig>  <dig> k_5

 <dig>  <dig> k5*c

 <dig>  <dig> k2*b

 <dig>  <dig> k_2

 <dig>  <dig> k_4

 <dig>  <dig> k4*a

to clarify, the first line of the input.txt file is  <dig>  <dig> k1*a, which means the rate constant for the enzyme conversion from form  <dig>  to  <dig>  is k1*a. the functions readinput and getlink in our kapattern program, read the input file and generate the matrices ℒ ) and  ). the function wang is used to generate the valid ka patterns. 

with all the valid ka patterns generated, it is straightforward to enumerate all of the directional diagrams using the information from the  and ℒ matrices. for the enzyme form ei, the program checks each non-zero entry of the ith column in the ℒ matrix against all links in the link list of one pattern and finds every link that points to the enzyme form ei. based on the next end point, the process is repeated until no links is left out in the list. finally, multiplying all the pseudo-first-order rate constants, we can get the expression corresponding to one pattern. repeating this procedure for each ka pattern and for each enzyme form, we obtain the concentration of each enzyme form ei relative to the total concentration of enzyme eo.

the cost of the rate equation generation depends not only on the size of the problem, but also on the complexity of the problem. for most small-sized enzyme systems we tested, the program gives results less than  <dig> second. for the moderate-size problem example we present in the additional file , the program generates  <dig> valid ka patterns in about  <dig>  seconds .

below is the matlab output file generated from the function buildfile of the kapattern program for the fumarase reaction mechanism. the output has one or two input parameters, depending on whether there are pseudo-first-order rate constants, and three output variables. if there are pseudo-first-order rate constants, which include substrates or products concentrations, the two parameters will be two arrays k and con, corresponding to reaction rate constants and substrate and product concentrations, respectively. the three output variables are n, f, and d, where n and f are vectors listing the numerators Σi and the fractions Σi/Σ for equation . the output variable d is the denominator d.

function  = expression

%% concentration values

a = con;

b = con;

c = con;

p = con;

%% rate constant k values

k <dig> = k;

k <dig> = k;

k <dig> = k;

k <dig> = k;

k <dig> = k;

k <dig> = k;

k_ <dig> = k;

k_ <dig> = k;

k_ <dig> = k;

k_ <dig> = k;

k_ <dig> = k;

k_ <dig> = k;

%% numerators

e = k6*k_1* k_3*k5*c + k6*k_1*k_3*k_ <dig> + k6*k_1*k_3*k_ <dig> + k6*k_1*k5*c*k4*a + k6*k_1*k_2*k4*a + k6*k_3*k5*c*k2*b + k6*k_3*k_4*k2*b + k6*k5*c*k2*b*k4*a + k_1*k_3*k_2*k_ <dig> + k_1*k_3*k_4*k_ <dig> + k_1*k_2*k_5*k4*a + k_3*k_4*k_5*k2*b;

e = k_6*p*k5*c*k_1*k_ <dig> + k_6*p*k_1*k_3*k_ <dig> + k_6*p*k_1*k_3*k_ <dig> + k_6*p*k5*c*k_1*k4*a + k_6*p*k_1*k_2*k4*a + k_6*p*k5*c*k_3*k2*b + k_6*p*k_3*k_4*k2*b + k_6*p*k5*c*k2*b*k4*a + k5*c*k2*b*k1*a*k_ <dig> + k5*c*k4*a*k3*b*k_ <dig> + k5*c*k2*b*k4*a*k1*a + k5*c*k2*b*k4*a*k3*b;

e = k1*a*k6*k_3*k5*c + k1*a*k_2*k6*k_ <dig> + k1*a*k6*k_3*k_ <dig> + k1*a*k6*k5*c*k4*a + k1*a*k_2*k6*k4*a + k_2*k_5*k_6*p*k_ <dig> + k_2*k4*a*k3*b*k <dig> + k_2*k_5*k4*a*k_6*p + k1*a*k_2*k_3*k_ <dig> + k1*a*k_3*k_4*k_ <dig> + k1*a*k_2*k_5*k4*a + k_2*k_5*k4*a*k3*b;

e = k_5*k_6*p*k_1*k_ <dig> + k2*b*k1*a*k6*k_ <dig> + k4*a*k3*b*k6*k_ <dig> + k_5*k4*a*k_6*p*k_ <dig> + k2*b*k4*a*k1*a*k <dig> + k_5*k2*b*k_6*p*k_ <dig> + k2*b*k4*a*k3*b*k <dig> + k_5*k2*b*k4*a*k_6*p + k_5*k2*b*k1*a*k_ <dig> + k_5*k4*a*k3*b*k_ <dig> + k_5*k2*b*k4*a*k1*a + k_5*k2*b*k4*a*k3*b;

e = k3*b*k6*k_1*k5*c + k3*b*k6*k_1*k_ <dig> + k3*b*k_4*k6*k_ <dig> + k_4*k_5*k_6*p*k_ <dig> + k_4*k2*b*k1*a*k <dig> + k3*b*k6*k5*c*k2*b + k3*b*k_4*k6*k2*b + k_4*k_5*k2*b*k_6*p + k3*b*k_1*k_2*k_ <dig> + k3*b*k_4*k_1*k_ <dig> + k_4*k_5*k2*b*k1*a + k3*b*k_4*k_5*k2*b;

%% denominator

d = e + e + e + e + e;

%% fractions

f = e/d;

f = e/d;

f = e/d;

f = e/d;

f = e/d;

another useful feature of our kapattern program is that it can deal with the irreversible reaction steps. this feature is accessed through the input file. for example, assume that we can neglect the reaction from state  <dig> to state  <dig> and from state  <dig> to state  <dig>  in this case, the input file is simply modified by deleting the lines ' <dig>  <dig> k_6*p' and ' <dig>  <dig> k_5'. the generated link matrix ℒ will be the same as above. but the kinetic matrix  matrix will be modified:

   

correspondingly, the numerator part in the output file will be changed to

%% numerators

e = k6*k_1*k_3*k5*c + k6*k_1*k_3*k_ <dig> + k6*k_1*k_3*k_ <dig> + k6*k_1*k5*c*k4*a + k6*k_1*k_2*k4*a + k6*k_3*k5*c*k2*b + k6*k_3*k_4*k2*b + k6*k5*c*k2*b*k4*a;

e = k5*c*k2*b*k1*a*k_ <dig> + k5*c*k4*a*k3*b*k_ <dig> + k5*c*k2*b*k4*a*k1*a + k5*c*k2*b*k4*a*k3*b;

e = k1*a*k6*k_3*k5*c + k1*a*k_2*k6*k_ <dig> + k1*a*k6*k_3*k_ <dig> + k1*a*k6*k5*c*k4*a + k1*a*k_2*k6*k4*a + k_2*k4*a*k3*b*k6;

e = k2*b*k1*a*k6*k_ <dig> + k4*a*k3*b*k6*k_ <dig> + k2*b*k4*a*k1*a*k <dig> + k2*b*k4*a*k3*b*k6;

e = k3*b*k6*k_1*k5*c + k3*b*k6*k_1*k_ <dig> + k3*b*k_4*k6*k_ <dig> + k_4*k2*b*k1*a*k <dig> + k3*b*k6*k5*c*k2*b + k3*b*k_4*k6*k2*b;

graphical user interface 
our stand-alone kapattern package is developed using matlab gui. the executable program is available in windows, mac, or linux formats that do not require matlab installed on the end-user's computer. furthermore, end-users do not need any particular computer programming knowledge to use the package. the gui has different windows that can display various components of the program, such as input file, link matrix ℒ, kinetic matrix , generated ka pattern list, and matlab .m output file. there is also a separate window called pattern viewer which provides users the flexibility to visualize any selected ka pattern, like that shown in figure 2a. users can drag and drop nodes and links of one pattern to where they want to deploy them. as an example, a screen-shot of the fumarase enzyme-catalysed reaction system is shown in figure  <dig>  users can provide their own input.txt file defining any specific enzyme catalyzed reaction, and run the program in the gui to view all the valid ka patterns and generate the corresponding rate equation. in addition, the program can generate mathml and matlab .m output file in the end-user's working directory. 

CONCLUSIONS
we have described a systematic method and the corresponding computer program, called kapattern, for generating rate equations for any complex enzyme systems. this program generates complete set of valid king-altman patterns for complex enzyme-catalyzed reaction mechanisms. unlike other computer-assisted methods that use symbolic algebra packages to solve the system of nonlinear algebraic equations arising from steady-state mass conservation, our program is developed from the original schematic method of king-altman  <cit>  and employs the topological theory of linear graphs  <cit> . our program can derive rate equations for both strictly steady-state conditions and those with rapid equilibrium steps. the enzyme mechanism can be either branched or unbranched enzyme mechanisms containing both reversible and irreversible reactions steps. using a simple, easy-to-understand input file, our program can produce a matlab .m file or mathml file that can be integrated into other biochemical system model programs. it can illustrate the visualization of all the valid ka patterns as well. in addition, the generated link matrix ℒ and kinetic matrix , which characterize the enzyme mechanisms here, may be useful for other applications .

it should be emphasized that in the current version, our program is restricted to systems whose element reactions are association or dissociation of substrates or first-order inter-conversion of enzyme species.

systems involving allosteric activation and inhibition or other protein-protein interactions should be handled carefully, because our approach still lacks direct connections between the rate constants and the kinetic constants, such as michaelis-menten constants. those connections are important for analyzing enzyme kinetic experimental data.

availability and requirements
the kapattern is written in matlab and distributed as a standalone gui-based application for windows, mac or linux/unix. the matlab source codes, and the kapattern stand-alone program are freely available and can be accessed at .

authors' contributions
basic idea was conceived by fq. software was developed and implemented by fq and yh, with rkd and dab advising. the manuscript was written by fq and revised by rkd and dab. manuscript was read and approved by all authors.

supplementary material
additional file 1
appendix for "generating rate equations for complex enzyme systems by a computer-assisted systematic method". contains the brief description of all of the functions in the package and a full example to demonstrate the use of the package.

click here for file

 acknowledgements
we thank fan wu and kalyan vinnakota for helpful discussions. special thanks to brain carlson for helping us compile the mac version package. this work was supported by national institute of health grant r01-hl <dig> 
