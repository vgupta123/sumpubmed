BACKGROUND
high-throughput 16s rrna gene sequencing is widely used in microbiome studies for characterizing bacterial community compositions. a key computational task is to perform taxonomic classification for 16s rrna gene sequences, with emphasis increasing on species-level classification  <cit> . the published tools dedicated for 16s rrna gene classification include the rdp classifier  <cit> , 16s classifier  <cit>  and spingo  <cit> . there are also software packages or websites that provide 16s classification options, e.g., qiime  <cit>  and mg-rast  <cit> .

despite the availability of those taxonomic classification tools, species-level classification for 16s rrna gene sequences still remains a serious challenge for microbiome researchers. some of the tools simply do not classify at the species level. for example, the standard version of the widely-used software, rdp classifier, only classifies 16s rrna gene sequences from the phylum to genus levels, although the rdp classifier can be re-trained for species level classification. another recently published software, the 16s classifier, is not capable of classifying sequences at the species level either. for the other tools that can classify at the species level, they suffer from at least one of the two major limitations: i) nucleotide k-mer frequency is used for measuring similarity between query and database sequences, a proxy measurement of true sequence similarity; ii) solid probabilistic-based criteria is lacking for evaluating the confidence of taxonomic assignment results, particularly to evaluate whether the best-matched database sequence is significantly better than other database matches for the taxonomic assignments.

taxonomic classification of 16s gene sequences typically requires comparing query sequences to annotated database sequences. the k-mer based approaches, e.g., the rdp classifier and spingo, compare the frequency of k-mer nucleotides between query and database sequences. the higher degree of shared k-mer nucleotide frequencies, the more similar the two sequences are. the advantage of k-mer based approaches is its fast computational speed. however, k-mer based approaches rely on two key assumptions: i) the k-mer nucleotides in dna sequences used as discriminating features among different taxa are independent, and ii) the actual nucleotide position of the k-mers in the dna sequences is not important. in reality, nucleotides in different positions of a gene sequence can be correlated , and gene sequences with the same set of k-mer in different orders are clearly not the same sequences. therefore, these two assumptions are the theoretical sources of taxonomic misclassification by k-mer based approaches. there is also a nontrivial practical limitation for a k-mer based approach: it is extremely difficult to determine an optimal size of k-mer for discriminating among different species at different regions of 16s sequences. for example, the accuracy of the rdp classifier, which uses a k-mer size of eight, varies significantly with different types of bacterial taxa at different 16s gene regions  <cit> . therefore, k-mer based approaches rely on a proxy measurement of the sequence similarity between the query and database sequences, which is inherently less accurate than the gold standard sequence-alignment-based method.

as mentioned above, another major limitation for most existing methods is that they lack solid probabilistic-based criteria to evaluate the confidence of their taxonomic assignments. although all existing methods infer taxonomic classification based on matched database sequences, most of the existing methods do not provide any indication on whether the best-matched database hit sequence is significantly better than other database hits. since the 16s rrna gene is highly conserved among different bacterial taxa and the query sequences in microbiome studies are often only a short fragment of the full-length 16s rrna gene with sequencing errors, it is common to have several database hits from different taxa that may have comparable sequence similarities to the query sequence. therefore, it is not reliable to simply transfer the taxonomic annotation associated with the best database hit for the query sequence  <cit> . instead, a better method for 16s classification may consider multiple database hits together and evaluate whether the best database hit is significantly better than other database hits.

the lowest common ancestor  algorithm, implemented in the megan package  <cit> , provides a natural biological framework to integrate taxonomic annotations associated with multiple database hits when classifying query sequences. in megan, all taxa corresponding to the blast  <cit>  hits are first mapped to ncbi taxonomic trees and the lowest common ancestor of all mapped taxa is then assigned to the query sequence. for example, if a query sequence has two blast hits belonging to two different species, e.g., one from lactobacillus acidophilus and the other one from l. casei, the lca algorithm assigns the query sequence to the genus lactobacillus, which is the lowest common taxonomic level of these two species. however, the lca algorithm fails to consider the differing degrees of similarity between the query and the database hit sequences. in other words, when inferring the lca for the query, the algorithm acts as if all the hit sequences, affected by an arbitrary sequence similarity threshold, were equally similar to the query sequence, even though in practice they are often not. biologically speaking, the greater the degree of sequence similarity between the query and the hit sequences, the more likely they may belong to the same taxon, but the current lca algorithm lacks a quantitative way to incorporate this important information on sequence similarity in its taxonomic assignment.

to overcome the above limitations of the existing software, we have developed a bayesian-based lca method, named blca. blca can perform species and even sub-species level taxonomic classification. it relies on sequence alignment instead of k-mer frequency for sequence similarity measurement; it considers multiple database hits instead of only the best database hit for taxonomic assignment; it provides a probabilistic-based confidence score for evaluating taxonomic assignments. the novelty of our method is that the contribution of each database hit to the taxonomic assignment of the query sequence is weighted by a bayesian posterior probability based upon the sequence similarity of the database hit to the query. the calculated bayesian posterior probability implicitly penalizes dissimilar database hit sequences in a quantitative way, which makes our method insensitive to arbitrary sequence similarity thresholds for selecting candidate database hits for each query sequence. we show that blca provides significantly more accurate classification results at the species level when compared to all other existing tools.

implementation
the blca method is implemented as a python package, which is freely available at https://github.com/qunfengdong/blca under the gnu general public license. an overview of the blca method is illustrated in fig.  <dig>  users start by comparing the query 16s sequences against entries in an annotated 16s database using blastn. the taxonomic lineage of each 16s database sequence is extracted from the ncbi taxonomic database . as with megan, we chose the 16s rrna gene collection from ncbi  as the default database, although users can also use the greengenes database  <cit>  or adopt any custom collection of 16s sequences provided that the sequence ids can be mapped to the ncbi or greengenes taxonomy. next, the blast hits are extracted; by default, blca only extracts the blast hits from blast pairwise alignments with at least 95% identity and 95% coverage with respect to the query, but users can easily change these parameters using the command-line at execution as well as setting an additional criterion to retain only the blast hits whose bit scores are within a certain percentage of difference from the top hits . each query sequence and its corresponding blast hits are passed as an input to the muscle program  <cit>  for multiple sequence alignment. because most 16s query sequences are not full-length gene sequences in practice, blca only extracts the relevant subsequences of the hits – those that actually align to the query sequences in the blast pairwise sequence alignments. an extra  <dig> nucleotides upstream and downstream relative to the aligned regions from the hit sequences are also included to avoid potential overhangs at the 5′ or 3′ end of the query sequences in the multiple sequence alignment.fig.  <dig> the overview of the blca algorithm. see main text for details




we define pr as the bayesian posterior probability for a taxon t
i being assigned to a given query sequence q. based on bayes’ rule, we obtain  <dig> prtiq=prqtiprti/prq wherein pr is the likelihood of observing the sequence q if it were derived from the taxon t
i. the likelihood can be calculated as the pairwise alignment score between the query sequence q and the database hit sequence annotated as t
i, divided by the pairwise alignment score between the hit sequence t
i to itself. in other words, the likelihood is defined as the similarity score between the query and the database hit normalized by the maximum possible similarity score between any sequences to the hit sequence. the likelihood pr is a real number between  <dig>  and  <dig> . our definition of pr as a likelihood simply reflects the degree of support by the evidence  for the hypothesis . in our current implementation, the pairwise alignment score between the query sequence and blast hit sequence is computed from the multiple sequence alignment, which tends to be more accurate than the original blast pairwise alignment because blast alignment performs local alignment, whereas muscle is a global alignment program. since the alignment is between dna sequences, the pairwise alignment score can be simply computed with the following criteria: match = + <dig>  mismatch = − <dig>  and gap = − <dig>  . pr is the prior probability of a particular taxon t
i for the query sequence, which is set to a uniform distribution in our implementation. the uniform prior is a suitable choice for taxonomic classification, since, without knowing the data, we can treat every taxon as equally probable . if necessary, non-uniform priors can be easily adopted for specific situations where certain taxa are more likely than others in the same bayesian framework described in this work. pr is the marginal distribution of the query sequence q, which can be calculated as the summation of the product of likelihoods and priors of all the blast hits, i.e., ∑i = 1m
prpr for m total blast hits, based on the law of total probability. note that the term pr, assumed to be a uniform prior, can be cancelled from the denominator and numerator when calculating pr. in addition, sequence similarity estimations might be improved by specifying sequencing error models for both query and database sequences ; these can be incorporated in our bayesian framework by adjusting the likelihood calculation in eq. .

since t
i corresponds to the taxonomic annotation for an individual blast hit sequence, it represents the leaf node in the ncbi taxonomic tree . we also need to compute the posterior probability at higher taxonomic levels, i.e., the internal nodes in the taxonomic tree that correspond to the antecedents of t
i . using the addition rule for probability, the posterior probability of any internal node i, pr, in the taxonomic tree can be computed by a simple summation of those of all the descendant leaf t
i:  <dig> prtiq=∑i=1kprtiqi wherein the internal node i has k total descendant leaf nodes. the eq.  allows us to easily compute the posterior probability of any higher taxonomic level, e.g., from genus to phylum, by simply summing the posterior probabilities associated with all the descendant leaf nodes in the taxonomic trees under any internal nodes. using the previous example in which a query sequence has one blast hit from l. acidophilus and the other from l. casei, the posterior probability for the genus level of lactobacillus for the query is the sum of the posterior probabilities for l. acidophilus and l. casei, respectively.

based on the posterior probabilities calculated for all the nodes in the taxonomic tree, a bootstrap confidence score is derived to evaluate the reliability of the taxonomic assignment for each node. specifically, aligned nucleotide positions in the multiple sequence alignment between query and blast hits are randomly sampled with replacement; the total number of sampled nucleotide positions is the same as the length of the query sequence . using the pseudo multiple-sequence alignment, the posterior probability of each leaf node in the taxonomic tree is re-computed by the same procedure as described above and the leaf node with the highest posterior probability is identified and tallied as the “winning” node. the process is repeated  <dig> times, and the number of times that a leaf node emerged as the winner becomes the confidence score for the taxonomic assignment of the particular node. similar to the posterior probability calculation, the confidence score for internal nodes can also be obtained by summing up the confidence scores of all their descendent leaf nodes. the rdp classifier uses a similar bootstrapping strategy to assign confidence scores for its taxonomic classifications. however, unlike the rdp classifier, which is based on bootstrapping k-mers from query and database sequences, our strategy randomly samples from aligned nucleotides in multiple sequence alignment, a method that is commonly used for evaluating the confidence of branches in molecular phylogenic trees  <cit> .

to assess the accuracy of a classification tool, we must have a benchmark dataset with known taxonomic annotations for each 16s sequence. therefore, we extracted the v <dig>  v <dig>  v1–v <dig>  v3–v <dig>  and v6–v <dig> regions of 16s sequences from  <dig> randomly selected bacterial species with known taxonomic annotations in the ncbi database as the benchmark dataset. these variable regions were chosen for testing because they represent typical 16s sequences in real-world microbial studies. instead of using the exact sequences from those regions for testing, we introduced sequencing errors to each sequence, using a customized python script to generate an average of 1% random mutation based on a poisson distribution. the 1% mutation rate is based on the reported upper range of the illumina miseq sequencing platform  <cit> . the test sequences, with sequencing errors, were searched against the 16s sequences from ncbi  using blastn version  <dig> . <dig>  for megan parameters, we set the same default settings  for both blca and megan. for blca, spingo, and the rdp classifier, two sets of confidence score thresholds were used:   <dig> –rdp classifier’s default confidence score and   <dig> –rdp classifier’s confidence score threshold recommended for short-read sequences, as written in the rdp classifier’s documentation. neither megan nor kraken  <cit>  have a probabilistic-based parameter for evaluating the assigned taxa, thus we used their default taxonomic assignments for comparison.

for each of the taxa in the benchmark dataset , we were able to identify whether the classification results from each software represent a true positive , false negative , false positive , and true negative . the total amount of tp, fn, fp, and tn are tallied from the  <dig> test sequences from the species to the phylum levels. the rates of tp, fn, fp, and tn were used for computing the f-score, which is a standard measure of a classifier’s accuracy by combining both the precision and the recall of the classifier  <cit> . the procedure above was repeated three times to measure the variability of the classification accuracy.

besides the above-simulated dataset, we also evaluated the performance of blca with a real-world 16s dataset, which was suggested by one of the reviewers of our manuscript. the dataset was originally produced by pop et al.  <cit>  and is available in the bioconductor package   <cit> . the msd16s dataset contains  <dig>  species-level operational taxonomic unit  sequences from the v1v <dig> rrna gene region. the original authors used the top blast hit against the rdp 16s database  <cit>  as the taxonomic annotation for each otu sequence. since megan and spingo can only use ncbi taxonomy nomenclature, we re-annotated the msd16s dataset by using the top blast hit against ncbi 16s database  in order to ensure that megan and spingo can be compared against blca and other programs using the same reference taxonomic annotation.

RESULTS
to compare blca against other software, we reviewed all recently published 16s taxonomic classification tools. since blca aims to improve species-level classification accuracy compared to existing tools, we excluded the 16s classifier program since it cannot classify at the species level.

to obtain a fair comparison with megan , we used the same default criteria as megan for retaining the blast hits. the most important megan parameter for extracting blast hits for downstream analysis is the parameter toppercent, used to keep only the blast hits whose bit scores are within a given percentage of the best blast hit. the default value in megan for this parameter is 10%. for example, if the top blast hit has a bit score of  <dig>  we only retain blast hits for downstream analysis if their blast bit scores are at least  <dig> . as shown in table  <dig>  blca consistently outperforms megan with all the tested 16s variable regions from the species to the family levels of taxonomic classification. from the order to the phylum levels, the accuracies of blca, megan and other software are similar and above 98% . more importantly, the accuracy of megan drops significantly when the toppercent filter was relaxed from  <dig> to 10% and further to 20%  at both the species and genus levels . for example, using v1–v <dig> sequences, the species-level accuracy of megan, measured by the f-scores, drops from  <dig>   to  <dig>  , and further down to  <dig>  . besides v1–v <dig>  these same trends are observed for all other tested 16s regions . these results are expected because, by relaxing this parameter, more dissimilar blast hits  are included in the analysis and the inclusion of bad blast hits leads to erroneous taxonomic assignments. this reveals a fundamental limitation of the megan method: its results are sensitive to which blast hits are included for analysis and it lacks a probabilistic method to penalize bad blast hits. conversely, the results from blca, which showed higher accuracy than megan, remained robust to the number of included blast hits  since bad blast hits are penalized using posterior probability scores assigned by the blca algorithm. it is worth noting that it is unrealistic to prevent the inclusion of bad blast hits in a typical large-scale data analysis since there is no universal cutoff to exclude bad blast hits. any such cutoffs are heuristic in nature, as such, they are inevitably either too stringent or not stringent enough.table  <dig> comparison of the classification accuracies using the simulated dataset

each entry in the table shows the average and standard deviation of the f-scores for a particular classifier  at a specific 16s region  based on three random sets of  <dig> test sequences. two confidence score thresholds ,  <dig>  and  <dig> , were applied for blca, rdp classifier, and spingo as described in the main text. the *indicates that the f-scores of blca are significantly higher than those of other software, based on a one-tailed paired t-test with a p-value less than  <dig> . similar statistical significance was also obtained using the one-tailed wilcoxon signed-rank test. note that the spingo program does not produce family-level classification. in addition, kraken and megan do not provide any probabilistic-based parameters for evaluating the assigned taxa, thus we used their default taxonomic assignments for comparison


the parameter toppercent is for keeping only the blast hits whose bit scores are within a given percentage of the best blast hit. the larger the parameter is, the more dissimilar database hits are included for taxonomic classification for the query sequence. the default value in megan for this parameter is 10%. in our comparisons, we set the value of toppercent to be  <dig>   <dig> and 20% for both blca and megan, the recommended range by the original megan publication, to compare the performance of blca and megan under different stringencies of retaining blast hits. each table entry shows the average and standard deviation of the f-scores, based on the confidence score threshold of  <dig> , for each tested software at the corresponding 16s region. the f-scores of blca are much less sensitive to the value of toppercent when compared to megan




the spingo program is specifically designed for species-level classification. the authors of spingo even showed that spingo has superior classification accuracy compared to a customized rdp classifier and best-matched blast hits at species level  <cit> . like blca and megan, spingo uses the ncbi taxonomic database for taxonomic assignments. unlike those tools, however, spingo uses a k-mer based approach instead of sequence alignment to measure the similarity between query and database sequences. the only threshold for spingo is its confidence score for taxonomic assignments, which is compatible with the blca confidence score. table  <dig> shows that the accuracy of blca is statistically significantly higher than that of spingo in all tested 16s regions at the confidence score thresholds of  <dig>  and  <dig> , respectively. in addition, spingo cannot do subspecies classification, nor can it do family or higher level classification, whereas blca can classify reads from any level ranging from subspecies to phylum .

even though the standard release of the rdp classifier cannot classify 16s sequences at the species level, we obtained the training script from the rdp classifier’s development team  and re-trained the rdp classifier for species-level classification with the same ncbi 16s database that blca uses. the ncbi 16s database is used because megan and spingo must use ncbi taxonomic database. therefore, the ncbi database provides a common ground for evaluating the results of all of these tools on the basis of their computational algorithms without being influenced by different taxonomic standards. similar to spingo, the rdp classifier’s confidence score is also compatible with the blca confidence score. although the default threshold for the rdp classifier’s confidence score is  <dig> , the developers of the rdp classifier also recommend a threshold of  <dig>  for short read classification. our results show that blca has higher accuracy than the rdp classifier at the thresholds of  <dig>  and  <dig>  .

besides these 16s-specific classification tools, there are also metagenomic classification tools that are designed for identifying microbial taxa from whole metagenome shotgun  sequences. we have chosen kraken  <cit>  as a representative wms classification tool to compare with blca. kraken is chosen because of two reasons: i) it has superior or comparable classification accuracy to other existing wms tools  <cit>  and ii) to our best knowledge, it is the only wms tool that has been successfully applied in a published 16s study  <cit> . kraken’s default database incorporates reference genome sequences. to have a fair comparison with blca, we have replaced kraken’s default database with the same ncbi 16s database used for blca, thus increasing its sensitivity to classify a broader range of bacterial taxa. kraken, a k-mer based program seeking best database matches, does not provide any confidence score to evaluate the confidence of assigned taxonomies, although kraken’s output can be filtered based on the percent of k-mers matched to each taxa . as shown in table  <dig>  even allowing the maximum sensitivity for kraken , which is the default setting for kraken, blca still significantly outperforms kraken with all tested 16s regions from the species to the family level.

in addition to using simulated datasets to evaluate blca and other software, table  <dig> shows that blca had either higher or comparable classification accuracies when tested with a real-world 16s dataset. for example, with a confidence score threshold of  <dig>  , the species-level classification accuracy of blca, measured using an f-score, is  <dig> , much higher than the classification accuracy of megan , the rdp classifier , and spingo . the same trends were observed when the default confidence score threshold of  <dig>  was applied . it is worth noting that, as this is a real-world dataset, the true taxonomic classification is unknown. we had to rely on the top blast hit as the reference taxonomic classification when we evaluated the classification accuracies of each software. nonetheless, the results from the real-world dataset were consistent with those from the simulated datasets, showing that blca tends to produce higher taxonomic classification accuracies than currently existing software.table  <dig> comparison of the classification accuracies using a real-world dataset

each entry in the table shows the f-scores for a classifier  based on all the otu sequences in the msd16s dataset, as described in the main text. two confidence score thresholds ,  <dig>  and  <dig> , were applied for blca, rdp classifier, and spingo, the thresholds as in table  <dig>  note that the spingo program does not produce family-level classification. in addition, kraken and megan do not provide any probabilistic-based parameters for evaluating the assigned taxa, thus we used their default taxonomic assignments for comparison




discussion
despite the importance of species-level classification, the existing tools either do not classify 16s sequences at the species level or their taxonomic assignments are not reliable. as discussed above, k-mer based methods are intrinsically less accurate than an alignment-based sequence similarity measurement. the k-mer based approaches may be sufficient for high level taxonomic classification, since sequences from different higher taxonomic levels tend to be very divergent. for lower level taxonomic classification, however, particularly species-level classification, we have shown that blca significantly outperforms k-mer based methods  in classification accuracy.

in addition, the bayesian posterior probability of blca quantitatively measures the difference between the best database hit and other database hits, and the bootstrapping principle, adopted by blca for providing confidence score, has solid statistical foundation for measuring prediction errors  <cit> . in this study, we have applied  <dig>  and  <dig>  as thresholds for the blca confidence scores for comparison with other software. the confidence score of blca is comparable to that of the rdp classifier and spingo. there is no perfect universal threshold that is suitable for all datasets. we recommend that users consider exploring several different thresholds  to examine if their results are consistent under different thresholds. if not, the users need to be wary that their results may be too sensitive based on the particular threshold they have chosen.

it is worth mentioning that blca does not require a training process for classification, which can be more convenient for some users when compared to some other software. for example, the 16s classifier trains a standard machine-learning model, a random forest, with k-mer nucleotides from different regions of 16s rrna genes. we could not even test our v1–v <dig>  v3–v <dig>  and v6–v <dig> datasets with the 16s classifier because the published software has not been trained for this region, even though these regions are widely used in microbiome studies. in contrast, our blca program requires no training process at all since our algorithm is based on the alignment between query and reference database sequences. therefore, users only need to download reference 16s database sequences for blca and this allows our method to be easily applied to any other dna marker gene families for taxonomic classification . the accompanying blca package includes instructions on how to replace the default 16s sequences with the user’s own customized gene family sequences. for example, to demonstrate the flexibility of alternative database sequences, blca provides an option to use the greengenes 16s database and its associated taxonomy  <cit>  instead of the default ncbi 16s database since many researchers may prefer the greengenes taxonomy.

we have shown that blca has significantly higher accuracy than existing taxonomic classification methods at the species level. this higher accuracy comes with the cost of longer computation time. blca is not designed for performing taxonomic classification for raw 16s sequences. instead, raw 16s sequences should be first clustered into otus to eliminate redundant or highly similar sequences before performing taxonomic classification, which is a standard procedure for 16s sequence processing by widely used software packages, e.g., qiime. with  <dig>  otus, blca can have a run-time of approximately  <dig> days, which is not unusual for modern-day bioinformatics tasks with large datasets. considering the significant gains in accuracy with our method, we believe that many researchers will find the time tradeoff to be reasonable. in addition, users can divide the input sequences into multiple files and execute blca in parallel on computer clusters to hasten the classification process, if necessary. in addition, not all otus require species-level classification in practice. typically, researchers are only interested in a small subset of otus, e.g., a list of otus that are differentially abundant in different ecosystems . in these cases, blca may take only a few minutes to classify a subset of several hundreds of otus of interest.

CONCLUSIONS
in summary, we have developed a novel computational method that significantly outperforms previously published software for species-level classification accuracy. its probabilistic-based confidence score helps users evaluate the confidence of the resulting taxonomic assignments based on multiple database hits. in addition, our methods do not require any training, which makes it easily applicable for different regions of 16s rrna gene or even different phylogenetic marker genes. despite its higher computational costs, our method is still suitable for large-scale microbiome datasets, providing a valuable alternative option for microbiome researchers who prefer higher classification accuracy.

abbreviations
fnfalse negative

fpfalse positive

lcalowest common ancestor

otuoperational taxonomic unit

rrnaribosomal rna

tntrue negative

tptrue positive

