BACKGROUND
life sciences make heavy use of the web as a medium for data access and computational analyses. web services make such functionality available to machines while html-only web pages do not  <cit> . the ability to have two or more machines interact to solve bioinformatics problems opens up a wide area of computing, beyond the scope of manually visiting web pages. for example the members of the international nucleotide sequence database collaboration  and many other institutions offer public accessible and machine-readable services to retrieve, submit, or analyze bioinformatic data  <cit> . in recent years various tools have been introduced to aggregate services, among them workflow environments like taverna  <cit>  and cyrille <dig>  <cit> , and scripting environments like biopipe  <cit> . this aggregation of services shows great potential, as exemplified in the successful experiment in  <cit>  where microarray data, genomic sequence information, and pathway databases were integrated in a workflow to aid the search for candidate genes responsible for phenotypic variation.

the most common technologies underlying life science web services are soap , biomoby  <cit>  and rest . these technologies formalize how computers exchange messages, such as assignments, input data, computation results, and the output of database searches. soap and biomoby are extensively used in life sciences  <cit> , but the complexity and initial version incompatibilities of libraries that implement the soap specification have made rest an increasingly popular alternative  <cit> . while soap and biomoby wrap the data in xml envelopes, rest can send around any data type. this makes rest less formal, easier to implement and use, but the lack of semantics also makes it difficult to write general clients for  <cit> . the web application description language  is intended to formalize rest services to overcome this issue  <cit>  but is unfortunately not widely supported yet. in bioinformatics, biomart  <cit>  and das  <cit>  are prominent examples of projects that utilizes the rest technology for data provision.

a problem in bioinformatics is that soap-based services, which are common in the field, suffer from various design flaws. firstly, although the specification does not require this  <cit> , soap services are typically using hyper text transfer protocol  as communication channel. http was originally designed to accommodate query and retrieval of web pages and is not aimed to more complex communication, something which is common in bioinformatics. the intrinsically synchronous http protocol is unsuitable for time-consuming operations, like computationally demanding database lookups or calculations, and server timeouts and firewall issues are common obstacles. a very common workaround is to implement a ticketing mechanism in the service, where the client receives a ticket that can be used to repetitively poll for results. this is not only inefficient but also makes it impossible to create a general client for these services, as services implement the ticketing mechanism in a not standardized way. secondly, soap services do not specify which data types are supported as input and output, which can be described with an xml schema document. a separate specification, the web service description language , similar to wadl, has been set up to address this, with the result that two technologies are required instead of only one. thirdly and finally, the soap specification does not by itself provide means of service discovery, and another complementary technology, universal description discovery and integration , has been developed for this purpose. to our knowledge uddi is not used in bioinformatics.

biomoby was more recently developed for life sciences as layer on top of soap to address its limitations, and allows for service annotation. it uses a data type ontology to describe which service supports which kind of life science data, taking the same role wsdl has, with users having the possibility to register new custom data types where necessary. biomoby also has established a service registry, addressing the service discovery missing from soap itself. however, biomoby still separates the services from their properties, and being restricted by the underlying http protocol, it also does not support efficient asynchronous communication without repetitive polling. however biomoby provides a standardized polling mechanism wich makes it currently better than plain soap-based services  <cit> .

this paper introduces a method to overcome the limitations of currently available web service technologies. it introduces a protocol  that is based on top of the extensible messaging and presence protocol  to overcome limitations of the http transport protocol. the web services glossary  <cit>  defines " web service is a software system designed to support interoperable machine-to-machine interaction over a network. it has an interface described in a machine-processable format . other systems interact with the web service in a manner prescribed by its description using soap-messages, typically conveyed using http with an xml serialization in conjunction with other web-related standards". even though they acknowledge that "here are many things that might be called 'web services' in the world at large", we will refer to the method proposed in this paper as cloud services, where the cloud is a synonym used for the cloud of resources available on the internet  <cit> .

the extensible messaging and presence protocol  is an open and decentralized xml routing technology that allows any entity to actively send xmpp messages to another entity  <cit> . the xmpp network consists of xmpp servers, clients, and services . each xmpp entity is identified by a unique identifier, the so called jabber id . xmpp services are hosted by xmpp servers and offer remote functionality to other xmpp entities connected to the network, for example to xmpp clients. all traffic is routed through the xmpp servers. when required, e.g. users of different xmpp servers want to exchange messages, the involved xmpp servers initiate server-to-server connections, consequently forming a loose network. the xmpp server component that handles the server-to-server communication is the entry point to the public xmpp cloud. this entry point is configurable allowing the creation of private clouds. the conventional use of xmpp has been in instant messaging software like jabber and gmail chat, but a large collection of xmpp extension protocols  extends the core specification, widening the scope of xmpp into various directions including remote computing. xmpp and http are both used to transfer content from one computer to another. the main difference between the two protocols is how the messages are wrapped; whereas http supports unstructured text, xmpp demands a pure xml environment, allowing seamless integration with the multitude of xml languages used in bio- and cheminformatics.

RESULTS
xmpp services
an xep, named io data, was designed for sending messages from one computer to another, providing a transport for remote service invocation and attempting to overcome the problems with soap. the xep was proposed as an experimental open standard to the xmpp standards foundation  <cit> , and was later accepted as xep- <dig>  <cit> . this xep solves two primary issues: 1) the unnecessary separation of the description  and the actual soap service itself, and 2) asynchronous service invocation . the xep hence enables services to publish their own input and output data types, truly asynchronous invocation without any additional technology, and the advantage that existing xmpp infrastructure can be utilized to discover services  <cit> .

reference implementation
a reference implementation for the io data xep, xmpp web services for java , was developed. the library is written in java and provides a simple framework for developing and deploying xmpp cloud services and clients. demonstration code to show how the library is used to generate and call services, as well as documentation, is provided together with the library's download packages and on the xws4j project web page  <cit> .

to accommodate the large number of data types in life sciences, a library was developed  to create java bindings and client stubs from the xml schemata that can be obtained from xmpp cloud services. this way any xmpp service can be consumed and resulting data objects can directly be used in subsequent analysis, which is extremely powerful when pipelining services. the implementation is generic and works with any valid xml schema. a specific xmpp cloud service, xml schemata compatibility service, was set up to demonstrate binding generation for several xml schemata in life sciences: the xml schema definitions of embl nucleotide sequence database xml  <cit> , functional genomics experiment  <cit> , genomic contextual data markup language  <cit> , molecular interaction xml format  <cit> , systems biology markup language  <cit> , and uniprot knowledgebase  <cit> .

cloud services for bio- and cheminformatics
xmpp services were developed using xws4j for bioinformatics and cheminformatics, as shown in table  <dig>  a service, hivpred, was set up that predicts the susceptibility of sequences for seven known hiv protease inhibitors using a proteochemometric model  <cit> . a resource description framework service  has been added to show that rdf/xml integrated well, allowing integration in ongoing semantic web efforts in life sciences. two xmpp services provide functionality to perform various cheminformatics algorithms , and to calculate various molecular descriptors  using the chemistry development kit  <cit> . the cdk service allows calculation of 2d and 3d coordinates and to derive various simple molecular properties for small molecules. particularly the calculation of 3d coordinates can be time consuming for larger molecules and invoking those asynchronously is highly advised. the molecular descriptors returned by the descriptor service are numerical representations of the chemical structure which reflect some property of the structures; for example, it can describe the shape of the molecule, or the presence of certain functional groups, such as amine and acid groups. calculating a single descriptor is typically fast, but calculating many descriptors for one molecule can be time consuming. the cheminformatics services apply the chemical markup language   <cit>  to define the services' semantics. cml is also used in various other applications and resources, and therefore provides a desirable interoperability with those resources. while cml is a fairly large xml schema   <cit> , the xws4j library has no problem generating client side bindings on the fly.


complex calculations, e.g. which incorporate multiple database requests or simply are computationally intensive, will not finish within a few seconds after invocation. to demonstrate the suitability for time-consuming services the blast service was set up that supports asynchronous client notification. although this is just a simulation - the blast service simply wraps an existing soap service provided by the center for information biology and dna data bank of japan  <cit>  - it shows the advantages of this approach: after the remote process is invoked the client waits for a notification message. after the notification message is received the client requests the result from the service. several sample scripts were prepared that show how a result is retrieved after the calculation finished, and how the remote data is deleted after successful retrieval .

integration with desktop tools
bioclipse is a graphical workbench for life science with advanced integration and scripting capabilities  <cit> . based on the xws4j library, two plugins were developed for bioclipse. the first plugin provides the platform with generic xmpp service consumer functionality, facilitating discovery and invocation of xmpp services from the graphical user interface  as well as from the integrated scripting environment . the service discovery view in bioclipse is capable of listing xmpp services of any xmpp server, and services in turn are able to list their provided functions . the client is able to discover changes in any xmpp entity, for example if a technical problem occurs and the entity is unavailable. discovery of xmpp entities is not restricted to the local xmpp server the user is connected to but rather discovery of any xmpp entity is possible as long as the hosting xmpp server allows public access. as a consequence, an xmpp entity can also list xmpp entities that are not associated with the hosting server. the second bioclipse plugin is a specific client for the hivpred service that provides convenience methods as well as visualizes results in a bar diagram.

taverna is a software tool for designing and executing workflows  <cit> . a taverna plugin was written that allows calling xmpp services as part of workflows . the plugin introduces an activity that can be configured with the xmpp account information used to connect to the xmpp network, and the details of the xmpp service being called. the activity passes its inputdirectly to the service, and the returned output is passed unchanged to the activity.

discussion
today's bioinformatics with high throughput technologies and large and complex information sources requires not only interfaces to users but also programmatic interfaces to allow machines to access these services. xmpp and the developed extension io data improve greatly over existing remote service technologies in bioinformatics. many services in bioinformatics take longer than just a few seconds to complete, for example querying over large or multiple databases, and computationally intensive calculations like protein structure prediction  <cit> , identification of protein domains, families and functional sites  <cit> , and sequence alignments  <cit> . these services would directly benefit from the xmpp, which makes all custom polling mechanisms, common with long running soap-based services, redundant. such workarounds, called for example "ticketing" or "polling", are ad hoc solutions to a problem inherited from http. xmpp services are intrinsically asynchronous, and completely eliminate this obstacle. this not only applies if the bioinformatics operation is long in itself, but could also be due to heavy load on the server and/or a large job queue.

it is important to make cloud services and their semantics publicly available so that users can discover and use them. while soap-based web services require other methods to publish , xmpp not only allows discovering of services out of the box but also supports determining their status and availability, which is shown with the service discovery view of bioclipse . xmpp services are connected to a single xmpp server, but since xmpp servers can communicate server-to-server it allows users to discover and consume services hosted on other servers. however, since new servers do not publish their availability to the xmpp network automatically, it is conceivable that a registry, similar to the recent initiatives like the embrace service registry  <cit>  and biocatalogue  <cit> , will be required to find new servers and their services. the already existing xmpp feature to run manually curated service directories makes this trivial  <cit> . however, we see the embrace service registry and biocatalogue as excellent complements and envision them to present xmpp services next to soap and rest services in the near future.

io data and soap both use xml schema to describe a service's semantics, and in the last years several projects defined xml schemata for data commonly used in life science, for example the systems biology markup language  <cit> . the xml schemata compatibility service demonstrates that these xml schemata for life science are compatible with xmpp. reusing such generally accepted xml data types makes pipelining of services straightforward, as it is easy to attach a service with a certain output to another service that accepts this as input. this methodology of reusing certain defined data types has previously been shown successfully with biomoby  <cit> . while biomoby explicitly annotates a service with an entry from its data type ontology, xmpp services annotate themselves by publishing what xml schema they support instead. this does not have the advantage that biomoby puts on top of soap to have the data type independent from any schemata, however biomoby's ontology does not allow a smooth integration of external formats, making reuse of emerging or existing standard formats like those used in the xml schemata compatibility service difficult. in contrast to biomoby where the common use of the centralized ontology guarantees the compatibility of different biomoby services, the developer of an xmpp services must choose an adequate xml schema himself, ideally using an emerging or existing standard. it is interesting to note that existing biomoby services can be rewritten as xmpp services, requiring only the biomoby data type to be expressed as xml schemata.

however, while soap relies on a separate document  to describe the service, io data makes this information available from the service itself. removing an external file reduces the hassle to download a wsdl file from a web page. all the user needs to start is the jid of the xmpp server.

service federation is a concept to address the need for trust agreements among decentralized security and policy domains, and is an important requirement for cloud service architectures  <cit> . such scaffolds allow a commercial service provider to restrict access to registered customers, and non-public research groups to restrict access to collaborators. while http-based web services require the implementation of additional complex specification stacks, for example the ws-security framework  <cit> , the xmpp specifications describe authentication, security, and federation as core parts of the protocol  <cit> , effectively causing all xmpp libraries to support such functionality by default: xmpp entities are primarily identified by their jids. as xmpp servers connect server-to-server on demand and form networks, with all traffic routed through these server-to-server connections, each xmpp client and service must authenticate with its server, and this authentication is easily controlled and/or extended by the server administrator. additionally, xmpp servers support encrypted communication  and tls ) with the option to restrict xmpp servers to accept only encrypted client-to-server and server-to-server connections. all this implies that xmpp and io data are well suited for forming the basis of a federated service infrastructure.

despite the many advantages of the xmpp cloud services there are some limitations when it comes to transfer of large data for two reasons. firstly, though not restricted to xmpp, all data transmitted with xmpp must be wrapped in xml. this requires data conversions that might be less efficient when compared to a plain binary stream transmitted through a network connection. secondly, each xmpp message must be submitted sequentially through the xmpp stream. in case a large message is transmitted the following messages are retained until the transmission of the large message completes. xmpp servers react on this issue by having a "maximum stanza size" that limits the accepted and processed message size. the default "maximum stanza size" differs from server software to server software and ranges from a few kilobytes to several megabytes. after adjusting the "maximum stanza size" in our test settings' server we experienced no problems transmitting messages of several megabytes of size. however this clearly shows that xmpp by itself is not the best choice for performing large file transfers. this limitation does not only concern cloud services but all other sorts of xmpp-based applications, too. for example instant messengers are often used to share files and to perform voice and video chat, both being bandwidth hungry. the xmpp community has solved this issue by defining extensions that are used to initiate out-of-band file transfers or voice over ip sessions. an xmpp service has the possibility to take advantage of such xmpp extensions, and "pass by reference" is currently explored by the authors as an extension to io data.

encapsulating technical details is important to hide complexity from developers, while making it easier to write intuitive end user tools to take advantage of the possibilities of xmpp. this research has shown how xmpp services can be integrated using a java library for xmpp into existing workflow and scripting frameworks like taverna and bioclipse. however, the java library is only a reference implementation of the proposed protocols and it is our intention to integrate xmpp cloud services in other frameworks by delivering client and server libraries in other programming languages. there are a large number of open source xmpp libraries that can serve in this approach  <cit> .

finally, it is worth mentioning that reusing xmpp, which is a versatile transport protocol not primarily aimed at a single task, has many advantages. xmpp is already extended by a long list of other xeps, defining other domains of application. among these are extensions that bridge the xmpp network to other communication channels, such as the short message service . this opens up a wide variety of new possibilities to easily integrate cloud services with human oriented communication. for example, we are exploring services to optionally send an sms message when a time consuming calculation has finished.

CONCLUSIONS
web services are commonplace in bioinformatics now, but the currently used de facto standards http, soap and wsdl make it a non-trivial task to set up, maintain, and publicly propagate a service. to overcome these issues, several solutions have been proposed. the embrace consortium  has defined best practices for implementing services, and set up a website for service directory. the latter has also been addressed in the biocatalogue and biomoby registries. additionally, biomoby addressed the lack of strong data typing by defining an ontology of scientific data types, and annotation of services with these data types. the increasing use of rest services in bioinformatics also reflects the need for services that are easy to consume, but rest lacks the strong data typing needed in life sciences.

this paper introduces an alternative to soap-based web services, providing intrinsic asynchronous capabilities, a tight integration with service discovery, and strong data typing by the service itself. the proposed cloud services use the versatile xmpp as the transport protocol, and the results have shown that the method can be used for a wide variety of bioinformatics tasks and how easily they can be integrated with existing scripting and workflow platforms for consuming remote services. although development of http started much earlier compared to xmpp  we believe xmpp has reached a technical maturity and acceptance to be a robust and flexible basis for future cloud service technologies in bioinformatics.

