BACKGROUND
large scale genomic rearrangements  have been widely studied due to their implication in the evolution of the species. the study of rearrangements is strongly linked with synteny blocks  defined as conserved regions between sequences  <cit> . the regions between sb are called breakpoints , and their study might reveal clues towards evolutionary mechanisms  <cit> . both, sb and bp, have been used for phylogeny distance calculation  <cit> , ancestral genome reconstruction  <cit> , and others.

although there are many methods to identify sbs, they usually do not refine their borders  <cit> . those methods that refine sbs -and therefore bp- they usually focus on extending the borders of the sb, aiming to maximize a specific target function based on the alignment. additionally, the lack of a well-accepted definition of sb  <cit>  might be among the reasons that current tools yield widely different results. furthermore, the presence of repeated regions or small blocks between the sbs increases the complexity of the detection, one of the main reasons why most methods do not take into account such repetitions. however, these repetitions -mostly associated with mobile elements- have been driving the evolution in many ways  <cit> .

one of the main problems to identify bps is the unclear definition. for example, lemaitre et al.  <cit>  reasoned that a bp is not a single “point” but a region between two sb; while others, for example chu et al.  <cit>  describe a method to determine the exact location of a bp at nucleotide level for inversions and block interchange events.

a second problem appears when trying to refine the sb by extending its borders. current methods try to maximize the alignment in the region between two sbs, but boundaries are less conserved. most of them , remove the small blocks or repetitions to simplify the sb detection. clearly the resulting bps might be contaminated by small subsequences which actually have a homologous region in the other sequence. any analysis based on these contaminated sequences will be biased by these small subsequences.

in a recent work  <cit>  we addressed the detection of blocks of large rearrangements, called computational synteny blocks, taking into account repetitions. in this manuscript, we propose a method to refine these detected csbs and detect also bps taking into account small blocks and any kind of repetitions. indeed, we use the repetitions alignment to improve the accuracy of the refinement process. in our model, we contemplate inversions, duplications and translocations.

our results show a higher accuracy in terms of percentage of identity in refined sbs. our results also indicate biological differences between refined sbs and detected bps sequences. sequences in the sbs borders are richer in dna damage whereas sequences in the detected bps are richer in dna replication and stress response, strongly linked to evolution  <cit> .

methods
our method starts with the collection of computational synteny blocks  - similar to sb associated with coding regions, and csb also covering non-coding regions. the csbs are calculated using gecko-csb  <cit>  . applying linearity and collinearity functions  over the csb provided by gecko-csb we identify lsgr . the next step — which is reported in this document- is the precise refinement of the borders of csbs involved in every detected lsgr . this refinement is applied to the sequences involved in calculation  in two independent and separable processes. after that we combine the results to get the final refinement. figure  <dig> describes the workflow step by step.
fig.  <dig> workflow from fasta sequences to refined blocks and bp detection




once an lsgr is detected, we take the two csbs involved. the repetitions in between them, if any, are also take into account. then we define a region of interest  running from the tail of one csb to the head of the other . this roi includes an arbitrary offset to force the overlapping between csbs and repetitions . a virtual csb  and virtual repetitions are created by extending the borders in order to cover the roi. afterwards, these c
s
b
v and virtual repetitions are aligned using a fast customized implementation of the needleman and wunsch  <cit>  global alignment method. the main idea of this process is to force overlapped regions to study the alignments within the roi.
fig.  <dig> illustrative representation of the region of interest . a roi region in an inversion event . coordinates are calculated following the eqs.  <dig>  virtual csbs and repetitions. virtual csbs are calculated using the eqs.  <dig>  same representation but including identity vectors and vector difference graphs




at this point an identity vector for every aligned c
s
b
v and all repetitions is computed . then, a “difference vector”  is calculated . if we are working with only two c
s
b
v, the v
diff contains the normalized absolute difference between the two identity vectors. if besides that we are working with repetitions, we compute the v
diff taking into account a consensus identity vector from the repetitions .

the rationale behind the method is the following: the v
diff vector contains high values when identity vectors are different. in those regions where values are similar in both identity vectors, the values contained in v
diff will be low. at some point we will observe a transition between high and low values along the v
diff vector. these transitions will define the bp. a finite-state machine  was designed to detect these transitions . at the end of the process, csb borders are refined based on the bps detected by the fsm. the method does not force the bp to be a region or a point. this will depend on the transition’s features.

detection of csbs repetitions and large-scale genomic rearrangements
csbs and repetitions are detected using gecko-csb  <cit> , an extension of gecko  <cit> . this software has demonstrated its capacity to yield hsps of high-quality beating reference software. in  <cit>  we presented a set of formal definitions describing different levels of linearity and collinearity between csbs. using these definitions, a set of rules was defined to identify lsgr in single chromosome species, such a inversions, translocations, reverted translocations and duplications. once a lsgr is detected, we perform our refining method over those csbs involved in the lsgr.

after the detection of a lsgr two csbs  are selected. optionally, if collinearity between csb a and csb b is interrupted by a set of repeats, the repeats will be included in the selection as well. repeats can be separated in two groups. those repeats whose coordinates in the sequence x overlap with csbs a and b are grouped in a collection named repeats-x. in the collection repeats-y are the equivalents regarding sequence y.

refining csbs
at this point the method splits in two branches. the refinement in the sequence x and y are complementary and independent. in this document we will describe the refinement for the sequence x branch. the sequence y branch is the same, but interchanging x by y.

calculating the region of interest
the csbs and repeats define a roi . since our method is focused on finding transitions between csbs and repetitions, we introduce an offset parameter, which ensures overlapping between the end of csbs and the beginning of virtual csbs and the virtual repetitions, guaranteeing that transitions are present. in the worst case, the method will have offset number of nucleotides in both csbs that share similarity and therefore, they can be aligned with a high value of identity. in other words, the offset parameter stabilises the beginning and the end of the signal . the roi is defined as follows: 
  <dig> roixstart=min−offsetroixend=max+offsetroiystart=min−offsetroiyend=max+offset 


after calculating the roi, new csbs named virtual csbs  are created using the roi x
start and x
end coordinates. this means that all c
s
b
vs will start and end at the same point. in this step we are extending or trimming the old csbs concerning roi start and end points. new c
s
b
vs’ y coordinates will be calculated depending on how much we have trimmed or extended the coordinates in x regarding the old csb. the equations that describe this process are the following: 
  <dig> csbvxstart=roixstartcsbvxend=roixendαl=csbxstart−csbvxstartαr=csbvxend−csbvxendcsbvystart=csbystart−αlcsbvyend=csbyend+αr 


notice that α takes negative values when trimming and positive when extending. new c
s
b
vs are aligned using a needledman and wunsch implementation.

calculating identity vectors
after the alignment of c
s
b
vs, identity vectors  are created for every c
s
b
v. all i
vs have the same length and they represent the percentage of identity that a certain region of length w has in the alignment. we take a window of length w to calculate that percentage of identity.

first we create a binary vector  which represents matches in the alignment. v
b has the length of the alignment. since v
b takes into account gaps, its length can be different from one c
s
b
v to another. by using a window of length w, we can compute the percentage of identity at any point in v
b. as long as we are going to compare i
v from different c
s
b
vs, identity values from those points in the alignment that represent a gap in sequence x are not stored. this way, all identity vectors from different c
s
b
vs will have the same length, r
o
i
length.

low values in parameter w produce a noisy identity vector corresponding with high frequency changes of identity. on the contrary, high values in parameter w smooth the noise and produce a low frequency signal. the selection of a proper w value is not possible as it might change depending on the c
s
b
v involved. we could also be interested on changes that happen at different frequencies. therefore, instead of choosing a fixed w value, which would mean changes at only one frequency, we build a vector containing all frequencies as follows: 
  <dig> iv=∑i=0naiii 


where a
i is the weight of the identity vector at a certain frequency 
  <dig> ∑i=0nai= <dig> 


and the identity vector at a certain frequency is calculated as follows: 
  <dig> ii=12n+1∑j=x−nx+nvb 


in this model, n defines the maximum window to compute the percentage of identity and also defines the start and end positions where the values of the vector can be used. from  <dig> to 2n+ <dig> and from 2n+1−r
o
i
length to r
o
i
length the i
v is uncompleted. therefore, n cannot be as long as we want. it should be at least lesser than offset. in practice we have observed that a value of  <dig> is enough to get good results.

finally, since identity vectors are going to be compared, they must to be normalized.

calculating consensus identity vector
in the case that a group of repetitions are detected, we use the information of the consensus sequence to improve accuracy of the refinement method.

after repeats have been aligned and the v
bs have been computed, a sum match vector  is calculated by adding all v
bs vectors. this vector has a length of r
o
i
length, so only positions which are not representing a gap are taken into account -as we did in the previous section. then, we calculate the percentage of repeats that cover one specific position in the v
sm. to calculate the consensus identity vector , only positions that comply with a given threshold are set to  <dig>  and  <dig> otherwise. in this implementation the threshold was set to  <dig> %. this new vector is named consensus binary vector. after this process, we calculate the v
ci by processing the consensus binary vector as we already described in the previous section.

vector difference
in order to detect transitions which delimitate the bp, we compute the absolute difference between the c
s
b
vs identity vector. c
s
b
vs are extracted from csbs according to the roi, using the offset to ensure that similar regions are represented in c
s
b
vs. as a result, the identity vectors for the c
s
b
v-a have a high value at the beginning and low value at the end. on the contrary, the identity vectors for the c
s
b
v-b have a low value at the beginning and high value at the end. this is the reason why the vector difference will start and end with high values. if repetitions are detected, then the difference vector will have high values in the middle as well.

anyways, transitions will be found in between these high values .

detecting transition points
to detect transitions a finite-state machine  was designed. figure  <dig> shows the design. basically, the fsm detects the coordinates where the vector difference value was the last time at a certain threshold  before reaching the second threshold . as a result, the selected region defined by the coordinates is the transition between high and low values along the vector difference.
fig.  <dig> finite state machine to detect transitions. this fsm has six states. the first three states  are to calculate the bp’s start coordinate, and the last three states  to calculate the bp’s end coordinate. changes from one state to another will depend on vector difference values  and thresholds u <dig> and u2




we associate these transitions as a candidate for a bp. after this process, the refined sb can be trimmed or extended. the threshold selection is discussed in the next section.

RESULTS
simple case
we will use a simple case to illustrate the algorithm behaviour in the sb borders-refinement method using m. hyorhinis hub- <dig>  and m. hyorhinis sk <dig>  genome sequences with a length of  <dig>  bp and  <dig>  bp, respectively.
a shows the full comparison of hub- <dig> against sk <dig>  figure 4
b shows a particular area where a lsgr  is presented, before the refinement.
fig.  <dig> 
a full comparison of hub- <dig> against sk <dig>  main diagonal represents that both subspecies are quite similar. small points represent repetitions, with a notorious one  present upper zone of the image   zoomed display of the marked region in 4a. three csbs are going to be extended in this example. repetitions are represented in a different colour



x and Δ
y columns.
x
start
y
start
x
end
y
end
x
y

c
s
b
1

c
s
b
2

c
s
b
3



the percentage of identities has increased a bit due to the extension . notice that in c
s
b
 <dig> the refine process has extend the y
start coordinate making the csbs  <dig> nucleotides shorter. on the other hand, in the opposite border  it has extended  <dig> nucleotides.

four regions have been detected as repeated sequences. a database search  using sma3s  <cit>  was carried out. results and sequence features are shown in table  <dig> 
hyorhinis hub-1
hyorhinis hub-1
hyorhinis sk76
hyorhinis sk76



and the bps are shown in the table  <dig> 



in this case the method has found  <dig> bps. due to repetitions that the method detects between two csbs, two bps are detected in each sequence. for each bp found, we have performed a database search using uniprot and ncbi non-redundant with no results. no annotation was found.

comparing with cassis software
we have processed the csbs detected by gecko-csb using cassis  <cit>  in order to refine them. since cassis cannot handle repetitions and following the recommendations from its article, we have masked all the repetitions in both sequences using repeatmasker  <cit>   and we did not include the repetitions in the input file. data set and results can be found in the additional file  <dig> 

results from cassis are widely different than those obtained by our method because, among other reasons, they do not take into account repetitions. our method detects  <dig> short bps where cassis detects a big one. indeed, bp 3b and 4b  cover the region contained by csbs  <dig>   <dig> and  <dig>  this result is incomprehensible because it implies that the sbs desapear, creating a huge bp of size around  <dig> kbps, instead of these  <dig> sbs.

bp 1b has a length of  <dig>  bps. we have performed a blast  <cit>  search using the sequence of bp 1b with default parameters. the sequence has been found several times in different sub species of hyorhinis with high values of identity and coverage, which point-out that this sequence is a part of a conserved repetition . an additionally blast search was carried out using sequences from bp 2a with similar results.

we have performed a database search using sma3s over the bp detected by cassis. results are shown in table  <dig> .



testing the method with a  <dig> mycoplasmas dataset
for the next test, a collection of  <dig> mycoplasmas was used. this test was performed with the aim to avoid bias in the analysis that a selection of two particular genomes could introduce. the genome collection and their gene bank annotations are available at http://bitlab-es.com/gecko/. for the biological analysis we have performed sma3s  <cit>  over the sequences to find annotations using the uniprot bacteria database . additionally blast2go  <cit>  was used to carry out a second annotation process using blastx and the non-redundant protein database filtered by bacteria taxa.

we run first gecko  <cit>  over the resulting  <dig>  comparisons following by gecko-csb  <cit> . after that, the refinement process was carried out giving the refined collection of csbs as a result.

our method refined  <dig>  csbs,  <dig> were trimmed after the refining process and  <dig>  were extended. around  <dig> % of the bps detected are sized below  <dig> bps,  <dig> % below  <dig> bps . the bp detection was limited in the implementation at a size of  <dig> bps to avoid spurious long bps. as it can be observed in fig.  <dig>  the frequency of the length tends to zero at length of around  <dig> bps.
fig.  <dig> progressive distribution of breakpoint length 


fig.  <dig> frequency distribution of breakpoint length




to analyse the results from a biological point of view, bps sequences were extracted. the sequences of the proportional region of the adjacent synteny block  of each bp were also extracted according with the bp length . the purpose was to find biological differences by comparing results from annotations in bp and prasb sequences. the sequences were compared against the ncbi non-redundant protein database, filtered by bacteria taxa. after that, the sequences were mapped and annotated using blast2go  <cit> .

the number of sequences with annotation was higher in bps  than in prasbs . for more details, see fig.  <dig>  we also analysed the percentage of annotations by level of coverage that cover the csbs in the comparison from which the bps were detected. we found that at a lower level of coverage , more sequences were annotated, especially in bps sequences .
fig.  <dig> results of blast search, mapping and annotation process with blast2go for bp and prasb sequences


fig.  <dig> percentage of annotated sequences in bp and prasb by percentage of coverage in the comparisons in which the sequences were extracted from




regarding the content of the annotation, we found several differences in the biological process and molecular function categories. figure  <dig> shows a summary of the biological process category with the most significant differences between bps sequences and prasbs sequences. sos response, dna integration or metabolic process were more present in prasb sequences. proteolysis, response to heat, protein folding, dna topological change and dna replication were found in more proportion in bp sequences. full reports are available as additional file.
fig.  <dig> results from blast2go for biological process in annotations of bp and prasb sequences. percentages are over the total amount of annotations




we also performed another database search, which was carried out using sma3s  <cit>  against the uniprot database. the results showed strong differences between annotations in bps and prasbs sequences. figure  <dig> shows the uniprot keyword categories for biological process. stress response and dna replication are more present in bp sequences. on the other hand, glycolysis, calvin cycle and dna damage are significantly more present in the prasb than in bp sequences.
fig.  <dig> results of uniprot keyword categories for biological process in annotations of bp and prasb sequences. percentages are over the total amount of annotations



fig.  <dig> results of uniprot pathways in annotations of bp and prasb sequences. percentages are over the total amount of annotations


fig.  <dig> csbs before and after the refinement. at the end of the refinement process, we detect bps. we also extract prasb and gap sequences to analyse accuracy of the method. prasb and bp have the same length




the method we present in this manuscript detects two bps when refining sbs, one at each border  of the sb, instead of considering the whole region between these sbs as one large bp. therefore, after the refining process we have two bps and one region in between , as it can be observed in the fig.  <dig>  the sequences corresponding with this region in between the bps were extracted to be analysed.

around  <dig> % of the gap regions in between two breakpoints are shorter than  <dig> bps of length,  <dig> % below  <dig>  bps.

in order to analyse biological differences between bps and the gap between two bps once sbs borders have been refined, we have extracted the sequences corresponding with the gap regions between bps.

a sma3s search was carried out over bps sequences and the gap sequences using the uniprot database. the main difference according with these results is at the biological process . dna replication, stress response and purine salvage were found more often in the gap whereas transport, dna damage and dna excision were more present in the bp sequences.
fig.  <dig> results of uniprot keyword categories for biological process in annotations of bp and gap sequences. percentages are over the total amount of annotations




discussion
the break point definition
a sb is defined as a relation between two conserved regions in the sequence of two different species, in terms of homology or similarity. a bp is usually known as the region in between two sbs that have suffered a rearrangement due to a lsgr. many studies support that lsgr do not happen randomly but follow an unknown model. some regions of the sequence seem to be more fragile or predispose to suffer a large-scale lsgr  <cit> . indeed these bps can be reused  <cit>  and the bp reuse rate is strongly linked with the resolution in which sb are detected  <cit> .

therefore, if a bp depends on the “fragility” of the specific regions in the sequence then it should not be defined as a relation between two specific regions of two sequences . although so far a comparison method is needed to detect them.

current methods based on sequence comparison, detect sbs by joining or chaining high score segment pairs, and when they refine their borders, they try to expand the sb borders by maximizing a target score function. this means that the bp region will be a region without similarity. however, following the previous reasoning about bp definition, it implies that bps regions do not have to be necessarily regions with almost no similarity. two species could share the same bp and therefore, the sequences would have some level of similarity. we think that when refining sbs, they can be trimmed as well as expanded after the refinement process.

threshold selection in the finite state machine
our method bases the bp detection on transition points in the differences of the percentage of identities. we have analysed the behaviour of the identity vector along sbs. we have found that coding regions and non-coding regions have different levels of identity, which can be explained because of different evolutionary level of pressure. but we also have found that in many cases there is a perceptible transition that could be detectable using a fsm . we think that something similar might happen between sbs and bps, a detectable transition that could determine the bp region.
fig.  <dig> real case of sb identity vector. in dotted lines codding regions for sequence x. sb extracted from nc- <dig>   vs nc- <dig>   comparison. x
start:  <dig> , y
start:  <dig> , x
end:  <dig> , y
end:  <dig> 




to identify these transitions we have designed a fsm which uses two thresholds. in the current version of the implementation of the method, which we have described in this document, thresholds are set to  <dig> and  <dig> respectively. the selection of the parameter values was made empirically. .

we analysed the identity percentage of sbs and bps at different length and have found a strong correlation between sb and bp levels of identity percentage . in general bps have less identity percentage than sb.
fig.  <dig> percentages of identities in sb  and bp  regions. a all pairs of sbs and bps. b only bps with length between  <dig> and  <dig>  c length between  <dig> and  <dig>  d length between  <dig> and  <dig> 




CONCLUSIONS
we have developed a method to refine the borders of csbs taking into account repetitions and using them to improve the accuracy of the refinement. the method is not based on maximizing any target function, but studies the alignments to refine and uses a finite-state machine to find transition points in the alignment. these transition points set an accurate refinement of the involved blocks. due to the method’s features, bps are detected as regions or as points, depending on the specific case. it also takes into account the repeated regions, so between two csbs it can give  <dig> breakpoints,  <dig> for each sequence, demarcating start/end of one block and end/start of the region in between.

several analysis were carried out in order to find biological differences between bps, sbs borders and gap regions.

the results showed that there are biological differences between bps sequences and the prasb sequences. bps sequences are biologically richer than prasb. both searches using uniprot and ncbi databases gave more results in bps sequences than the prasb sequences. however, prasb showed more diversity in annotations than those obtained for bps.

our experiments show that there may to be a correlation between the number of sequences annotated in bps and prasb and the relatedness of the species from which those sequences were extracted.

we have also found that there are differences between what we consider as bps and the region in between the bps, whereas other methods just consider the whole region as bp.

our method needs two thresholds to detect the transition points in the difference vector in which the bp is defined. thresholds pick up the abrupt changes in the signal. these thresholds are fixed in this version of the method, however, we will work on a dynamic configuration of the threshold based on sb similarity that might produce more accurate results.

additional file

additional file  <dig> supplementary material. 

 


