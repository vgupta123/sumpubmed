BACKGROUND
the dramatically increasing worldwide utilization of genetically modified plants, animals and microbes  presents challenges to ensure security, authenticity and validation of material goods and legal agreements. similarly to the evolution witnessed in internet protocols, strategic focus is required to anticipate, track and address potential infringements of gmo security. it is imperative that unimpeachable protocols assure product ownership, provide data to track the product supply chain, and to preempt malicious attacks especially related to bioagents, such as weaponized anthrax spores. as gmos are not tamper proof or invulnerable to outside attack, it is necessary to encode and embed cyber-security data within the gmo genome. an ideal gmo based security mechanism should provide a secure authentication process accessible to relevant parties without revealing the specific signature components to outside parties. watermarking has been used extensively to establish authentication signatures that validate ownership by providing a mechanism to conceal and recover the required data necessary to authenticate the identification signature of the originator . however, in watermarking applications, the identity of the authentication information is disclosed as validity is verified . although these methods would be useful under many scenarios, they are unacceptable in the context of sophisticated gmo security because they would fail under concerted attack based on malicious transfer and signature duplication. for example, clelland et al.  <cit> , although establishing significant message secrecy, does not protect the key decoding signatures after access by a third party. it also appears that their approach would be best suited to small message concealment because the dna based message length must be similar to that of the background sonicated genomic dna . ideally, the signature should not be transferrable, and should remain concealed even from third parties utilizing the cryptographic code. integrating this sophisticated cryptographic modification is critical for sustained next generation security of gmos. a focused adversary should only be able to speculate whether a given sequence of nucleotides is a random sequence or a valid signature sequence. considering a scenario where an attacker might seek to modify a gmo or weaponized bioagent in order to adversely affect function, coercion of individuals having information components or even alignment of whole genome sequences from target and wild type stains via blast or other programs should have an extremely low probability of identifying and/or validating an authentic signature. clearly any security approach also must align with prokaryotic and eukaryotic gmo development and application technologies.

in this paper we demonstrate a novel algorithm that addresses these concerns using advanced cryptographic techniques. for every signature string generated, the developer generates a populating subset with fake signatures . thus, each clone would contain adequate information for identification whether or not it is a signature carrying clone. the valid signature can be established by techniques developed in  <cit>  and would be available to the developer and/or third party inspector. those techniques assure that the input information is correctly received on the output side, i.e. when they are stored and read out there is no loss or change of information, while there is no concern that someone would actively modify or manipulate the data. since each clone contains a valid or fake signature element, it would be virtually impossible to correctly select the authentic signature. we emphasize that while our algorithm uses watermarking, it is not a watermarking protocol per se. the process of watermarking by itself does not provide adequate security during its verification as it allows potentially malicious transfer and signature duplication. our protocol uses sophisticated novel cryptanalytic attack models and protection mechanisms. while many of the existing methods use classic cryptography such as symmetric - aes, nonsymmetric -rsa and more classical approaches, we use zero-knowledge and confirmer signature techniques applied to gmos. these are much more advanced crypto systems than aes and rsa. this algorithm should become the standard in implementation of this technology in practice.

comparison with other work
practical realization and combination with data-encoding mechanisms into dna
embedding of data in dna has received a lot of attention. previous algorithm proposals primarily concerned about biological aspects and correct and efficient decoding. heider and barnekow  <cit>  focus on error detection and correcting properties - not in the sense of cryptography - but inside the genome, to detect and correct mutations occurring during cell division that might destroy the information that is ’encrypted’ , inside the genome. as such the dna medium can be interpreted as a noisy channel and has been addressed by tools of digital coding and information theory  <cit> . depending on usage requirements in living cells, our watermarking step might benefit from such additional features and could easily be combined with theirs or related algorithms. yachie et al.  <cit>  considered error detection and correction of the data-encoded dna sequence inside of living organisms. their approach is a refined repetition code that avoids multiple segments of the same dna sequence within a single genome. our method can be combined with their alignment-based dna-data storage and retrieval method, or any of the sequence alignment methods. in fact, we propose a modern alignment method with provably secure decoding properties in  <cit> .

however, no attention has been placed on the cryptographic aspect of the problem. in particular, in the case of ownership watermarks, biocompatibility along with the correct and efficient encoding is not enough. the embedded information that is stored and retrieved additionally requires specific cryptographic security requirements unique to this situation. it is imperative that the secret key remains hidden during watermark verification to prevent the unintended copying of signature data or specified information. these are independent cryptographic security considerations established in this paper.

clarification about utilization of cryptography
in contrast to correctness of encoding and decoding and efficiency, cryptography considers the security aspects of a  communication medium. these security concerns are unique to the dna setting. an example can be seen work by gibson et al.  <cit>  who established the synthesis and assembly of a synthetically designed bacterial cell. watermark sequences are included which distinguish the synthetically designed from naturally occurring dna and cells. this type of watermark does not yield unique ownership in that watermark verification is only done by multiplex pcr and the entire watermarking procedure could be imitated by others. they were not concerned about cryptographic security features, e.g., if someone were to produce a harmful bacterial clone carrying their watermark information. how would they refute this clone was not theirs?

haughton and balado  <cit>  first incorporated a secret k to keep the encoding secret. the key is shared only between an encoder and decoder. this has the advantage that only the encoder and decoder will have knowledge of the secret message that is embedded in dna. in the context of ownership watermarking, unfortunately, this scenario is not fully satisfactory. it requires that verification of the watermark is only possible to a selected list of decoders which has to be determined prior to embedding the watermark. once the watermark is placed, the watermark verification process is only possible within this fixed set of users. in the case of verification of a watermark ownership to a user outside of this fixed set, this scenario is not applicable.

heider and barnekow  <cit>  suggest to integrate several private and public key cryptographic algorithms, by employing encryption or a one-time pad. both are done to create a short binary message. although the authors did not make this explicit in their work, the first obvious advantage of this approach is that by doing so the information to be hidden inside the dna is now scrambled inside a binary string. however, it is imperative to note that they do not utilize any of the mentioned cryptographic algorithms. what is needed for dna-crypt is a plaintext message  that is efficiently converted to a binary string. thus, they correctly argue, that any function, mapping, or algorithm, which takes meaningful input and coverts it to binary, can be used for their purpose. their main concern is only the output binary string. they do not incorporate any cryptographic features. they do not consider security, cryptographic approaches, or utilize encryption and decryption. in fact, they argue that the keys used for these cryptographic algorithms could be exchanged with other users. however, precisely for private key crypto, keeping the keys secret is the most important requirement to ensure security. clearly, their concern is not to utilize the mentioned algorithms for their cryptographic features, but mainly to generate a binary string. their concern is for better storage utilization, and hence, the cryptographic integration is only for compression purposes of text data into binary . in summary, all that is utilized by dna-crypt is a binary encoding table  <cit> .

in summary, while data embedding methods have benefited from numerous disciplines of digital communication theory, unique requirements of cryptography and security requirements are first addressed in this work. it is crucial to note, that our work can seamlessly be combined with previous data embedding methods. balado-haughton  <cit>  determine the maximal number of ways that dna watermarking can be done, by considering it as a special data hiding problem. their basic requirement is the primary structure preservation achieved via the redundancy of the genetic code. this does not lead to a unique solution. depending on biocompatibility constraints and other practical considerations, the tagging of dna can be performed in various ways. we have not focused on length requirements of the signature sequence, how easily the signatures can be inserted and read, as our method can easily be combined with any others that focus on such issues.

our work complements these proven practical realizations, can easily be combined with related successful in vivo experiments to hide the secret information in non-coding regions, and addresses the missing security issues not considered before.

each of  use some watermarking as a means to ensure tracking or ownership of dna or organism. table  <dig> gives a comparison with our work.


methods
the basic cryptographic building block is defined as a zero-knowledge  proof of knowledge  <cit>  of a hidden signature to constitute the designated confirmer signature  <cit> . zk proofs are both convincing and yet yield no identifying key code information beyond the validity of the assertion being proved. they are typically used to force malicious parties to behave according to a predetermined protocol.

the specific cyber-security protocol is as follows: let Σ be a digital signature scheme given by its key generation protocol Σ.keygen which generates a key pair Σ.sk and Σ.pk consisting of the secret and private key for the signature generation and verification protocols, respectively. let Γ be a cryptosystem described by Γ.keygen that generates the pair  to be used for encryption and decryption. classes and properties required for Σ and Γ suitable for designated confirmer signatures have been described and analyzed in  <cit> . to give a specific example, Σ will be represented by a suitable rsa signature scheme and Γ by elgamal.

the full domain hash rsa  <cit>  signature scheme Σ is given by the key pair , Σ.sk=d) where n is an rsa modulus and ed≡ <dig> mod ϕ. the keys here are those used by the signer. with all computations in zn∗, a valid signature σ on a message m is defined via σ=hd, where h is a public hash function. the verification equation will make use of the following one-way function and image 
  <dig> f=xeandi=h. 

importantly, f is homomorphic as for all x,y∈zn∗, f=ff.

for the encryption scheme Γ we use elgamal’s encyption  <cit> . it operates in a group =<g> of large enough order where computing discrete logarithms to base g is difficult. the confirmer’s secret key is Γ.sk=x and the corresponding public key is Γ.pk=y=gx. to encrypt a message m∈g, one chooses a random r and computes the ciphertext as the pair e=. to decrypt a ciphertext , one first obtains the session key k=k1x=yr and then computes m as k2·k− <dig> 

let ∘, the binary operation defined on g×g, be the term-wise product ∘=. fundamental for the construction is the fact that elgamal is homomorphic since  <cit> , 
  <dig> e∘e=∘==e. 

the space of signatures produced by Σ must be the same as the space of messages encrypted by Γ. this can be done as follows: the signer chooses two sufficiently large primes p and q such that p′=/ <dig> and q′=/ <dig> are prime. the signer sets n=pq and chooses g∈zn∗ such that  qn={a2:a∈zn∗}⊆<g>⊆zn∗ and sets g=qn. the signatures produced by Σ are mapped into g by squaring all the parameters  before performing any modular operations with them. we also assume that the respective keys are verified with a certificate authority and the respective public parameters are publicly accessible. the symbol || will denote the operation which when applied to two strings m and z results in the ‘usual’ concatenation of the string m, and the string z.

the individual steps of our cryptographic protocol are described next. let the given message m be the signature data to be signed. throughout, if m is given in its binary representation , then after appropriate parsing m∈zn  is considered to be the representation of the integer m modulo n . the signer first generates a verifiable signature μ on m using the following steps: 
the signer chooses rr←zp′q′ and computes z←gr in g.

the signer uses his secret key Σ.sk=d of rsa-fdh to compute σ=h2d.

σ is converted into dna bases via our watermarking protocol below and hidden inside the gmo.

the signer encrypts σ via elgamal with the confirmer’s public key Γ.pk=y=gx and the random r, e==.

μ= is stored in an electronic database as the designated confirmer signature of m.



a candidate signature μ of m from a public database can only be validated by the ttp according to the following verification protocol.

given m and μ=, the confirmer computes σ as the decryption of the elgamal ciphertext  using the secret key x.

the confirmer verifies if σ is a valid rsa-fdh signature of m||z by testing σe=h <dig> using the signer’s public key e.

the signature μ is accepted as valid if and only if this verification step passes.



therefore, the algorithm runs as follows: 
determine the number of occurrences ni of each codon ci in the host genome, see e.g.  <cit> .

determine the number mj of binary triplets bj in the given binary sequence .

let n={a,c,g,t} be the set of nucleotides. there are  <dig> ways in which these can be ordered. let n <dig> n <dig> be the first two nucleotides, and n <dig> n <dig> the latter two in an arbitrary ordering.

associate with each triplets bj of a given binary string a set of possible codons cj, b1↦{n1n1n <dig>  n1n1n <dig>  n1n2n <dig> …,n2n2n2},…b8↦{n3n3n <dig>  n3n3n <dig>  n3n4n <dig> …,n4n4n4}, where the associated codon list excludes the atg start codon  <cit> .

the number of times each text triplet is represented by each associated codon cj is determined according to the following: for each bj determine the number of occurrences nj of each of the eight codons cj that is associated to bj via the above mapping. spread out the nj occurrences of each bj according to match the individual numbers of occurrences of their associated codons cj.



RESULTS
the main difference between confirmer signatures and ordinary electronic signatures based on watermarking techniques is that confirmer signatures are not self-authenticating. our algorithm is essentially based on the confirmer signature concept. in this case, the entity requiring proof of authentication  cannot check the ownership or the validity of a signature unless a legitimate party confirms or disavows it  <cit> . while the original signer  can confirm the signature, it also may be verified by a semi-trusted third party  “confirmer”  <cit> . there are several advantages to limiting signature validation access to the confirmer and verifier. first, it protects the signer against coercion. second, it protects the buyer if the signer becomes unavailable. third, it validates the authentic signature without disclosing the actual signature sequence to an adversary who may even masquerade as a verifier. while the constant involvement of a ttp in the cryptographic protocol gives more power to the ttp, it also enables the ttp to obtain and disclose the signature in case of dispute and has additional important forensic implications. following successful protocol implementation, the verifier and ttp have certifiable validation that the gmo contains a specific identifying signature although the verifier never acquires the exact signature  <cit> .

specifically, the confirmer and/or signer provides a zk proof to demonstrate the validity of this signature to the verifier . a valid signature is not accepted without the confirmation protocol, and a falsely alleged signature can only be repudiated via the denial protocol. in figs.  <dig> and  <dig>  the prover is either the confirmer of the signature who can undo encryption via elgamal with the knowledge of the private key, or the signer who wishes to confirm the validity of signature μ. thus, signature verification can be established by the signer without the involvement of the ttp. the ttp has the ability to undo elgamal encryption and is the only party who can obtain the signature σ. signature verification is therefore solely based on the encrypted signature μ=e, not the signature σ itself. in case of dispute the ttp can make σ public, convert it into nucleotides, and determine presence in the gmo.
fig.  <dig> zk proof of knowledge to verify authenticity. the prover and verifier are given the public input, an alleged signature =μ with z=k
 <dig>  and the message  m. if μ=e is generated as above, then t
1=e and t
2= where s is the randomness used in elgamal to encrypt s
′, and r is that used to encrypt σ. in this case, the protocol allows the prover to confirm the signature in zk. if μ is a falsely implied signature, the protocol allows the prover to deny the signature in zk

fig.  <dig> proof that  is the encryption of the given message m under elgamal. if the prover can successfully answer two distinct challenges c
 <dig> c
 <dig> with two acceptable answers s
 <dig> s
 <dig> then the verification step results in ys1−s2=wc1−c2andgs1−s2=k1c1−c <dig> . thus, if c
1−c
2<p
′
q
′ a value r exists such that r=logy
w=logg
k
1=/ mod p
′
q
′. consequently, w=y
r, k
1=g
r, and k
2=m
y
r. this proves that  is indeed an encryption of the message m under elgamal that can be translated into a zkpok according to  <cit> 



step  <dig> in fig.  <dig> requires a protocol for proving that a given ciphertext under elgamal decrypts to a given message m. the general building block is termed the proof of equality of two discrete logarithms  <cit> . adapted to our context, this protocol runs as depicted in fig.  <dig>  this protocol can be modified into a zk proof of knowledge  protocol by augmenting the fig.  <dig> process by steps – of fig.  <dig>  <cit> .

it is important to note that a signature cannot be verified solely from identification of a unique sequence string. with our algorithm, as opposed to standard watermarking methods, a signature is not accepted as valid without the cooperation of the prover or delegate through the cryptographic confirmation protocol. hence, even if an attacker detects a candidate signature, its validity is known only to the legitimate verifier who interacts with the prover in the protocol. without the prover, no party can determine whether σ is a valid signature for m or not. similarly, the specific denial protocol process ensures that a certain string cannot be denied by the original signer as an invalid signature. the protocol provides objective certifiable authentication of ownership as the signature is retrievable and verifiable by designated parties, e.g. the ttp. the ttp may disclose the signature for verification by other parties although normally, the company’s signature data remain completely hidden. the zk property ensures that no one has access to the signer’s secret key or the signature. even if the buyer or a masquerading adversary analyzes via genome sequencing individual gmo’s in a population, the secret key or the signature that allows them to impersonate the verifier cannot be discovered.

the protocol ensures that the signature string is indistinguishable in the electronic signature space as represented by integers  <cit> . in conjunction with the signature protocol we developed a watermarking algorithm that is designed to provide signature invisibility. the protocol consists of converting the cryptographic signature σ into the dna alphabet such that it is indistinguishable from the endogenous dna after insertion in the genome. the algorithm effectively camouflages the required authentication and/or tracking data to ensure that an adversary cannot identify the signature as a security or watermarking feature. the process also is reversible. from the nucleotide sequence, the signature can be translated to cryptographic code. the algorithm encodes binary triplets based on the frequency of each codon as determined by the codon bias of the host. codon bias refers to each organism’s inherent preferences of certain triplet nucleotides for translation into corresponding amino acids. our approach is solely dna based and does not require transcription or translation of sequences. alignment of the message with the host codon bias is designed to better hide the message in the genomic background. each binary bit is assigned to a choice of two specific nucleotides ni∈{a,c,g,t}, i.e. 0↦n1or n <dig>  1↦n3or n <dig> to mirror the codon frequencies of the host with the frequencies of the binary text triplets. figure  <dig> shows the correspondence between the binary text triplets bi and dna codons ci for the specific example where n1=a,n2=c,n3=g,n4=t. each of the text triplets is distributed over the associated codon triplets so that the resulting representation resembles the codon bias of the host genome. further improvement can be made by renaming and reordering, as the choice of the ni is arbitrary. renaming the codons by matching the obtained string with the host frequency distribution results in a correlation of the obtained with the host frequency distribution of typically  <dig>  or more.
fig.  <dig> correspondence between the binary text triplets b
i and dna codons c
i for the specific example where n
1=a,n
2=c,n
3=g,n
4=t. each of the text triplets is distributed over the associated codon triplets so that the resulting representation resembles the codon bias of the host genome. to demonstrate the watermarking protocol, assume there are  <dig> occurrences of  <dig> in the binary text and that the codon frequency values as determined from the entire codon frequency distribution, are: a
a
a, <dig>  %, a
a
c, <dig>  %, a
c
a, <dig>  %, a
c
c, <dig>  %, c
a
a, <dig>  %, c
a
c, <dig>  %, c
c
a, <dig>  %, c
c
c, <dig>  %, covering a total of  <dig>  % of the total codon distribution. among the codons assigned to  <dig>  there are 100· <dig> / <dig> = <dig>  % for aaa,  <dig>  % for aac etc. consequently, we assign /100∼ <dig> occurrences of  <dig> to aaa,  <dig> to aac,  <dig> to aca,  <dig> to acc,  <dig> to caa,  <dig> to cac,  <dig> to cca, and  <dig> to ccc, covering the total  <dig> occurrences of 000



therefore, each of the binary triplets is represented in terms of their associated codons according to the number of occurrences. figure  <dig> shows the correlation to the overall e. coli genome codon frequencies that is obtained when an arbitrarily chosen binary signature of length  <dig> is represented in terms of dna nucleotides as determined by our algorithm.
fig.  <dig> representation of the correlation between codon frequency distribution produced via our watermarking algorithm and the initial codon distribution of the host genome . the watermarking algorithm generates a signature indistinguishable from the rest of the genome. the x-axis here is  <dig> randomly generated binary signatures of length  <dig> mapped to the codon frequency distribution of the individual codons in e. coli



following design and construction of the entire nucleotide array encompassing the message and algorithm components, there are numerous approaches to incorporate the construct stably in the target organism using standard biotechnological tools for prokaryotes and eukaryotes.

CONCLUSIONS
our protocol is provably secure in terms of standard cryptanalytic tools, and integrates advanced electronic signature methods with a new watermarking or data-embedding technique, yielding a highly secure and authentication-based product. importantly, the authentic signature is indistinguishable from random elements in the signature space and the authentication string can be confirmed or denied without disclosing the actual signature. the signature data are not strictly limited in sequence size and may include, but are not limited to, security details, the product production and distribution chain and company licensing details. the resultant data are used as input to establish the security signature in binary according to an algorithm that yields a corresponding string with a nucleotide distribution that closely reflects the natural codon bias of the given host genome. the resulting sequence construct may be inserted into the gmo genome using established genetic engineering technologies such that it is stably inherited through generations. further increasing the security level can be accomplished by inserting the authentic signature into a subset of the gmo population with the remaining population containing imitation signatures. authentic signature clones may be identified via pcr by the legitimate owner of the signature or by a designated judge. importantly, the signature key allowing decoding and authentication is not revealed during this process, thus allowing continued utilization of the key. this provides an increased level of security against whole-genome sequencing and alignment that might increase the probability of identifying a security signature with other standard watermarking approaches.

the authors thank the anonymous referees for their careful reading of this manuscript and their extensive comments. the paper has improved with these changes.

funding
none.

availability of data and materials
the data in this study were computer generated. the codes were implemented in maple, and have been described extensively in the manuscript. the algorithm represents a theoretical contribution to the literature; the implementation itself is not necessary for public distribution.

authors’ contributions
sm is responsible for developing the algorithm and the project. dr envisioned the project, dr and fj oversaw the project and all authors cowrote the manuscript. all authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
