BACKGROUND
dna-binding proteins  are fundamental in many biological processes, such as recognition of specific nucleotide sequence, regulation of gene, transcription and translation, and dna replication and repair  <cit> . thus, it is highly desirable to develop effective dbp identification methods. traditionally, experimental techniques, which include filter binding assays  <cit> , x-ray crystallography  <cit>  and genetic analysis  <cit> , are used to identify dbps. although these techniques can produce detailed information and provide confident assertion of the dbps, they are both expensive and time-consuming. this spurred the development of computational methods to tackle this problem.

these computational methods can be divided into two categories: structure-based methods  and sequence-based methods . many of the early methods are structure based. gao et al.  <cit>  developed a knowledge-based method named dna-binding domain hunter for identifying dbps and associated binding sites using structural comparison. zhao et al.  <cit>  proposed a template-based prediction method by employing both structural similarity and binding affinity. nimrod et al.  <cit>  recruited random forests to identify dbps by detecting evolutionarily conserved regions and using electrostatic features. however, the number of proteins with well annotation and good resolution structure are very limited. the structure-based methods may break down when homogeneous structures of a query protein is not available. hence, many sequence-based methods had been proposed to deal with this problem. kumar et al.  <cit>  utilized various svm modules and evolutionary information to forge the dna-binder method. kumar et al.  <cit>  employed random forest to predict dbps. lin et al.  <cit>  proposed the idna-prot predictor by incorporating the features into the general form of pseudo amino acid composition that were extracted from protein sequence via the grey model and adopting the random forest operation engine. song et al.  <cit>  and xu et al.  <cit>  both applied the ensemble learning technique combined with hybrid features to predict dbps. zou et al.  <cit>  conducted a comprehensive feature analysis of four categories of protein properties and three different feature transformation methods to find an optimal prediction model. lou et al.  <cit>  predicted dbps by performing feature ranking with random forest and feature selection with forward best-first strategy. the features comprised properties from primary sequence, predicted structures and sequence alignment.

although many efforts were put on the computational identification of dbps, the prediction performance was still far from satisfactory. there are some possible reasons:  structure-based methods can provide reliable results in recognizing specific proteins. however, the insufficiency in known dbp structures leads to limited applications of these methods. sequence-based methods are featured by their widely application, while the performance of these predictors are usually not as good as expected;  the complexity of dbps. the dbps span over many protein families from enzymes to transcription factors  <cit> , which makes it very difficult to describe dbps discriminatively using mathematical models;  a common approach to describe a protein in dbp prediction is by forming a feature vector, but the redundancy and contradiction among these features may seriously deteriorate the predication and generalization ability of the model.

in light of the aforementioned problems, we proposed a novel sequence-based predictor, named idbp , to identify dbps in this study. firstly, instead of developing a narrow-application structured-based method, we focused on the challenge of sequenced-based methods. secondly, a number of discriminative features, including evolutionary conservation, secondary structure motifs and physicochemical properties, were constructed to encode the proteins. these informative features have been proved to be associated with dna binding interactions. thirdly, a novel improved binary firefly algorithm  was introduced to remove redundant and noisy features as well as select optimal parameters for the classifier. in the proposed bfa, we used normalized hamming distance to calculate attractiveness for fireflies, which greatly improved the converging rate. we also added a dynamic mutation operator to increase the diversity of fireflies. based on the effective bfa, our predictor produced promising performance on the main dataset and two benchmark datasets. tests on an independent testing dataset collected from pdb and a large-scale dbp dataset collected from uniprot database demonstrated the good generalization ability of idbp.

methods
datasets
in this study, experimentally verified dbps were collected from the protein data bank  by specifying keyword “dna binding protein” and release date “before 2015-05-01” through “advanced search”, and  <dig> sequences were obtained. then, these sequences were pre-processed through the following procedures:  sequences which contained unknown residues were discarded.  sequences with less than  <dig> amino acid residues or belonged to fragments were removed  <cit> .  sequences with multi-bindings were removed to avoid other influences.  sequence similarity among the dataset was reduced to less than 30 % by using pisces  <cit> . as a result,  <dig> experimentally verified dbps were obtained as positive samples. similarly,  <dig> experimentally verified non-binding proteins were also extracted from pdb with “does not contain: dna binding protein” as key words with less than 30 % identity. finally, a main dataset was obtained by combining the  <dig> dbps and  <dig> non-dbps. this main dataset was used to find the optimal feature subset and train the idbp prediction model. to construct the training dataset,  <dig> sequences were randomly picked from positive and negative samples of the main dataset, respectively. the remaining positive and negative samples were used for testing. in order to ensure unbiased and objective results, the process of under-sampling was performed  <dig> times. the final performance was the average prediction results of  <dig> experiments on different training and testing datasets.

to evaluate the effectiveness of the proposed method as well as to perform fair comparisons with previous methods , two benchmark training and testing datasets were adopted:  pdb <dig> and pdb <dig>  <cit> . the training dataset pdb <dig> contained  <dig> dbps and  <dig> non-dbps, and the testing dataset pdb <dig> contained  <dig> dbps and  <dig> non-dbps. both pdb <dig> and pdb <dig> shared sequence similarity of less than 25 %;  dnadset and dnaiset  <cit> . dnadset included  <dig> dbps and  <dig> non-dbps, and dnaiset contained  <dig> dbps and  <dig> non-dbps. the sequence similarity in dnadset and dnaiset was less than 30 %.

in real life, the number of dbps is much less than that of non-dbps. to further test the generalization ability of our method, a new-compiled independent testing dataset  was introduced in this work. all the predictors that we compared with in this research were built before may  <dig>  therefore, proteins released in pbd after may  <dig> would be less likely to be used to train these models. dbp <dig> contained  <dig> dbps and  <dig> non-dbps, which were deposited in pdb between 2015-05- <dig> and 2016-05- <dig>  none of these proteins shared more than 30 % sequence similarity with the main dataset. the main dataset and dbp <dig> were provided in additional file  <dig> 

feature vector
evolutionary conservation profile
highly conserved regions are often required for basic cellular function, stability or reproduction. thus, evolutionary conservation analysis are often indicative of structural or functional importance  <cit> . the position specific scoring matrix , which carries evolutionary information of proteins, was widely used in various bioinformatics researches. in this study, the pssm of each protein was generated by using psi-blast  <cit>  to search against the non-redundant database  through  <dig> iterations with e-value of  <dig> . a l ×  <dig> pssm was generated for each protein, where l was the length of the sequence.  <dig> pssm=e <dig> e <dig> ⋯e <dig> e <dig> e <dig> ⋯e <dig> ⋮⋮⋯⋮el,1el,2⋯el, <dig> 

each score in pssm represents whether the related substitution exceed or beneath expected frequency, and indicates whether this substitution would be favored in the process of evolution. here, these preferences are statistical classified and analyzed by using the following formula:  <dig> pm,n=∑m=1lem,n×δδ= <dig> rm=anδ= <dig> rm≠an 

where rm indicates the m-th  residue in the protein sequence, and an  indicates the type of amino acid. to eliminate the influences of sequence length, pm,n is normalized into the  <cit>  interval by using logistic function:  <dig> eri→ai=11−e−pm,n 

finally, feature vector eri→ai|r∈1l,i∈12… <dig> was generated to construct the features of evolutionary conservation profile.

secondary structure motifs
secondary structure plays an important role in the function of dbps  <cit> . many dbps show obvious preference of certain secondary structure motifs, such as helix-turn-helix and coil-helix-coil. these structures are usually solvent exposed and hydrophilic, which grant high probabilities in interaction with dna segments  <cit> . shown in fig.  <dig> are the examples of dbp complexes. the secondary structure motifs repeat regularly in dbps, and this phenomenon could be utilized to discriminate dbps from non-binding proteins. figure  <dig> shows the distributions of the secondary structure motifs on the main dataset. the over-expression of “cxc”, “hcx” and “ecx” confirms the experimental observation of enrichments of a series of helices or strands in dbps.fig.  <dig> an example that illustrates the preferences of certain secondary structure motifs of a protein complex. panel  is a tata-binding protein . the binding surface is composed of strands  while the outer region is composed of helices . the general secondary structure pattern of this protein is strand-helix-strand-helix-strand-helix-strand-helix. panel  is a transcription initialization protein  that is mainly composed of helices  and turns 

fig.  <dig> the distribution of secondary structure motifs



to obtain secondary structure motifs, firstly, the predicted secondary structure for each residue was calculated as a probability matrix using psipred  <cit>  ).  <dig> ssprobmarix=p1→hp1→ep1→cp2→hp2→ep2→c⋮⋮⋮pl→hpl→epl→c 

where pi → h/e/c  is the probability of the i-th residue to be part of a helix , strand  or coil . next, max for each position would be selected as the corresponding secondary structure, and secondary structure segments were generated to represent the secondary structure distribution for the protein. then, the secondary structure motifs were obtained from the segments:  <dig> ssmotif=∑segαsegβsegγ 

where segα/β/γ indicates continuous secondary structure segments of the same type and α, β, γ ∈ {h, e, c}. finally, a protein was encoded by a 12-dimentional feature vector.

physicochemical properties
physiochemical properties reveal macroscopic phenomena among atoms and molecules such as motions, energy, force and dynamics  <cit> . for instance, surendra et al.  <cit>  pointed out that hydrophobic and polar residues contributed the bonds across the interfaces and binding residues were strongly correlated with exposed surface area. solvation free energy  <cit>  and transfer free energy  <cit> , which helped to form small paths, were vital free energy to the hot spots. in addition, graph shape also played an important role in deciding the functional sites on the protein surface  <cit> . in this study, fourteen physiochemical properties, namely net charge  <cit> , hydrophobicity  <cit> , hydrophilicity  <cit> , polarity  <cit> , polarizability  <cit> , solvation free energy  <cit> , graph shape index  <cit> , transfer free energy  <cit> , amino acid composition  <cit> , correlation coefficient in regression analysis  <cit> , residue accessible surface area  <cit> , partition coefficient  <cit> , entropy of formation  <cit> , and pka values of side chain  <cit> , were collected and used. in this encoding scheme, each property were first calculated by taking the sum of its value over the residues on the whole sequence. then, the summarized value of each property was divided by the length of the sequence  <cit> .

support vector machine
support vector machine  is a machine learning technique derived from statistical learning theory first proposed by vapnik  <cit> . it was successfully applied in many bioinformatics problems and yielded promising results. in this study, we utilized the libsvm toolset  <cit>  and chose radial basis function  as the kernel function. two parameters c and γ of svm were optimized using bfa. all feature descriptors were normalized into the  <cit>  interval by using logistic function.

the proposed binary firefly algorithm
continuous firefly algorithm
the continuous firefly algorithm  is a swarm-intelligence and meta-heuristic optimization algorithm developed by xin-she yang in  <dig>  <cit> . fa is based on the idealized behavior of the flashing characteristics of the fireflies. it is featured by its efficiency as well as robustness. as a novel meta-heuristic algorithm, fa has been proved to be able to find almost optima in continuous problems  <cit> . in essence, the idea of fa can be abstracted into the following three rules  <cit> : every firefly has its own lightness and could be attracted by other fireflies;

  the brightness and distance determine the attractiveness. that is, a brighter firefly will always attract its adjacent less bright ones. the attractiveness will decline if the distance between two fireflies increases. if a firefly cannot find a brighter firefly within the designated distance, it will make random movements;

  the brightness of a firefly is referred as light intensity , which is defined as:

  <dig> i=ffx,β 

where f is the objective function. the attractiveness β is proportional to i, and is defined as:  <dig> β=β0e−γr <dig> 

where β <dig> is the attractiveness at r = 0; γ denotes the light absorption coefficient; and r represents the distance between any two fireflies. the movement of a firefly xi attracted to another firefly xj is defined as:  <dig> xi=xi+βxj−xi+αεi 

where α is the randomization parameter, and εi is an element of a vector drawn from random gaussian or uniform distributions.

binary firefly algorithm
the original fa is designed for continuous problems, which means that the outcome of the objective function  must lie in a continuous interval. recently, several bfa were developed to solve discrete problems, such as scheduling, timetabling and combination. compared with the original fa, bfa obeyed similar fundamental principles while redefined distance, attractiveness, or movement of the firefly . palit et al.  <cit>  applied bfa to discover the plaintext from the cipher text. sayadi et al.  <cit>  defined a new firefly position and applied bfa to manufacture cell formation. poursalehi et al.  <cit>  introduced a new form of movement of fireflies to global best in each iteration, and applied bfa on fuel reload design of nuclear reactors. in this study, a novel improved bfa was proposed for feature selection as well as parameter optimization.

the feature selection task is a typical combination problem in essence. that is, to select an optimal combination of features from a given feature space. by using this optimal subset, the machine learning algorithm could produce the best predictive performance. every feature must be either in or not in this subset. theoretically, for an n-dimensional feature space, there will be 2n possible solutions . empirically, meta-heuristic algorithms will perform better than traditional filter or wrapper methods  <cit> . in bfa, every firefly represents a subset of the feature space and a group of parameters . the effectiveness of bfa is determined by two factors: the ability to converge to the potential global optimum rapidly and the capability of jumping out of local optima. in this work, normalized hamming distance was used to calculate attractiveness and improve converging rate in feature selection; dynamic mutation operator was introduced to increase the diversity of fireflies. the pseudo code of bfa is provided in algorithm  <dig> 

firefly representation



in bfa, a binary string is used to encode a firefly. every element in the string is either  <dig> or  <dig>  the length and interpretation for the string are both problem specific. that is, a firefly x is defined as the following:  <dig> x=x1x2x3…xnwherexi∈ <dig> 

figure  <dig> shows an instance of the definition of a firefly x with a length of n. the string is divided into three parts. the first part  and second part  are used to represent the values of parameters c and γ of svm, respectively. the third part represents the features. its length w is the same as the dimension of the feature space. in this part,  <dig> denotes the corresponding feature is selected, and  <dig> indicates the opposite.fig.  <dig> the coding scheme for a firefly

b. the attractiveness of a firefly



similar to fa, a firefly in bfa is also attracted by brighter fireflies. however, the attractiveness is not only determined by the brightness but also greatly affected by the similarity between fireflies. in bfa, the attractiveness β between a pair of fireflies is defined as β=β0e−γr <dig>  here, γ controls the impact of β in the movement function; r determines the stride of the firefly movement. for two fireflies xi and xj, r is defined based on the similarity ratio of the two fireflies  as follows:  <dig> r=1−∑k=1nxik⊕xjkn 

where ⊕ denotes the xor operation, n is the length of x. mathematically, the less identical bits two fireflies share, the greater stride a firefly would take and the more likely it would move towards the brighter one. β is the probability of a hetero-bit in the moving firefly changes to the corresponding bit in the brighter firefly . compared with cartesian distance and euclidean distance, the normalized hamming distance performs best in keeping good feature as well as removing bad ones, and also made the algorithm converge fast. figure  <dig> demonstrates an example of calculating parameter r.fig.  <dig> an example of calculating parameter r. firefly x = { <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig> 0}, firefly y = { <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig> 0}. the distance or difference is calculated by x ⊕ y operation and equals { <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  <dig> 0}. finally, the similarity ratio of between x and y is r. - =  <dig> 

c. the movement of a firefly



when a firefly moves, every bit in its representation string will make a decision to move  or not. the decision is determined after two actions: the attraction, which is regulated by the attractiveness ; and the mutation, which is controlled by a parameter . the movement of a bit xik in firefly xi moving towards the corresponding bit xjk in firefly xj is defined as follows:  <dig> xik=gfxikxjkβ,α   <dig> fxikxjkβ=xjk,xik,ifxik≠xjkandrand01<βotherwise   <dig> gxikα=1−xik,xik,ifrand01<αotherwise   <dig> α= <dig> − <dig> ×iterationmaxiteration 

where the inner function f of  regulates the attracted movement of bit xik to xjk, and the outer function g regulates the random moving behavior  of xik. it should be noted that an attracted movement would incur only when the two corresponding bits are different, while the mutation might occur on every bit with the same probability. the introduction of dynamic mutation operator grants the firefly the ability to escape from a local optimum and check nearby regions while flying. in this work, parameter α controls the probability of mutation. the mutation probability is high in initial iterations, which makes bfa focus on exploration. as the number of iteration increases, the mutation probability will decrease, and bfa will accelerate its converging pace gradually. figure  <dig> demonstrates an example of firefly movement. if a firefly is attracted by another, each different bit in the attracted firefly would change with probability β. then each bit in the new firefly mutates with probability α.fig.  <dig> an example of movement and mutation for a firefly



statistic inference and performance evaluation
five indices were employed to measure the performance of our method. these indices included sensitivity , specificity , accuracy , and matthews’s correlation coefficient :  <dig> sn=tptp+fn   <dig> sp=tntn+fp   <dig> acc=tp+tntp+tn+fp+fn   <dig> mcc=tp×tn−fn×fptp+fn×tp+fp×tn+fp×tn+fn 

where tp, fp, tn, and fn were the abbreviations of true positive, false positive, true negative, and false negative, respectively. the area under the receiver operating characteristic curve  was carried out when we assessed our method with other feature selection methods. the performance was evaluated by using leave-one-out cross-validation on the main dataset and selected optimal feature subset and parameters. finally, the workflow of our method is shown in fig.  <dig> fig.  <dig> the flowchart of proposed method



RESULTS
the performance of the proposed method
the proposed method was implemented by combining informative features and optimizing parameters using bfa based on svm. the settings of bfa were tuned as the following: the number of fireflies was set to 30; the visibility γ was set to 1; and the maximum iterations was set to  <dig>  the light intensity was defined as follows:  <dig> i=ω×mcc+1−ω×1−nn 

where n was the number of selected features, n was the total number of features, and ω was the weighting coefficient that controlled the trade-off between the prediction accuracy and the selected features. usually, the weighting coefficients of an algorithm are determined empirically. in our research, ω was set as  <dig> . here, mcc was used as the key criterion to evaluate the performance of a feature subset, as it could provide balanced and unbiased measurement of the prediction ability of the model. nn was used to assess the number of selected features. this experiment was repeated  <dig> times. the final performance was the average of the  <dig> results. the experiment with the medium value of mcc were chosen and the corresponding optimal feature subset and parameters were used to build the idbp prediction model. the following experiments were all based on the selected optimal feature subset and parameters. finally, the proposed method achieved a promising performance with the mean mcc of  <dig> , acc of  <dig> , sn of  <dig> , sp of  <dig>  on the main dataset.

comparison with other feature selection techniques
feature selection is an important technique in predictive modeling. by removing redundant features, it can considerably improve the prediction accuracy. in this section, we compared bfa with several popular feature selection techniques: binary particle swarm optimization   <cit> , genetic algorithm   <cit> , minimum redundancy maximum relevance  <cit>  combined with incremental feature selection   <cit> , the original fa  <cit> , and the straightforward method with all features.

pso is a meta-heuristic algorithm that optimizes a problem by searching optimal particle . the position and velocity of the particle vary in each iteration to approach the best position . bpso is the binary version of pso. ga is a classic intelligent algorithm that emulates genetic evolution. it uses binary representation in nature and is good at discrete optimizations. mrmr + ifs is a combined feature selection scheme. it firstly sorts the features with criteria of minimum redundancy maximum relevance. then, it iteratively uses the first n ranked features to build models to find the best feature subset. for the original fa, which should only be used in continuous problems, the binary string of the feature vector was transferred to decimal values. all these methods were embedded with svm and run  <dig> times on the main dataset using exactly the same procedure. the final performance for each method were the average performance of  <dig> results.

table  <dig> lists the detailed results of five feature selection methods and the straightforward method with all features. compared with simple feature fusion or filter feature selection, the meta-heuristic algorithms were more effective in selecting the optimal feature subsets. in addition, the fa produced an unsatisfactory performance, which proved that it was not suitable for discrete problem. among the three meta-heuristic algorithms, bfa outperformed other methods with the highest mcc of  <dig> .table  <dig> comparison of bfa with different feature selection methods



to assess the robustness of our bfa, we further drawn roc curves for each method using the leave-one-out cross-validation on the main dataset. with all features, the predictor gave an auc of  <dig> . the mrmr + ifs scheme gave an auc of  <dig> . additionally, the heuristic feature selection algorithms achieved better performance, an auc of  <dig>  for fa, an auc of  <dig>  for ga and an auc of  <dig>  for bpso . the newly proposed bfa produced an auc values of  <dig> , which was the highest among these feature selection methods. in our research, the bfa takes about 90 min to complete one entire experiment on a pc with a  <dig>  ghz intel xeon cpu and 8gb ram. further improvement can be achieved by parallel computation, which is almost  <dig> times faster by computing  <dig> fireflies concurrently.fig.  <dig> roc curves of different feature selection methods



comparison with existing methods
comparison with other predictors on benchmark datasets
in recent years, several methods were proposed to identify dbps. these methods included dnabinder  <cit> , idna-prot  <cit> , endna-prot  <cit> , ndna-prot  <cit> , dbppred  <cit> , dbd-threader  <cit>  and zou’s method  <cit> . among these methods, dnabinder, idna-prot, endna-prot, ndna-prot, dbppred and zou’s method were sequence-based methods. to ensure a fair comparison with previous studies, the training dataset pdb <dig> of dbppred was adopted to train idbp and the independent testing dataset pdb <dig> was used to evaluate our predictor and compare with previous studies. listed in table  <dig> are the results of the comparison. our idbp achieved the highest sn of  <dig> , acc of  <dig>  and mcc of  <dig> . additionally, we also compared the auc value of idbp with these predictors. as the auc scores for idna-prot, dna-prot, endna-prot, ndna-prot, and dbd-threader were unavailable, the comparisons were performed among dbppred, dnabinder, dnabind and idbp. the dbppred, dnabinder, dnabind produced the auc scores of  <dig> ,  <dig>  and  <dig> . our idbp yielded the highest auc score of  <dig> , which was slightly better than dbppred.table  <dig> comparison of idbp with existing methods on dataset pdb186



similarly, the training dataset dnadset from zou’s method was adopted to train idbp and the independent testing dataset dnaiset was used to evaluate idbp and compare with previous studies. as the services of dbppred and dbdthreader were not availiable. the comparison on zou’s benchmark dataset was performed among idna-prot, dnabinder, endna-prot, ndna-prot, zou’s method and our idbp. as shown in table  <dig>  the idbp yielded the best performance with the sn of  <dig> , sp of  <dig> , acc of  <dig>  and mcc of  <dig> .table  <dig> comparison of idbp with existing methods on dataset dnaiset



theoretically, protein structures could provide more information than primary sequences. however, our experiments showed that the sequence-based method could produce approximate or even better results. in general, the sequence-based methods are significant supplements for the structure-based methods, especially when the high-resolution 3d structures or the homology templates of the query proteins are hard to obtain.

comparison with other predictors on dbp <dig> dataset
to demonstrate the generalization ability of our idbp, we performed further comparisons with previous methods on dbp <dig>  three dbp prediction tools, namely dna-prot, idna-prot and dnabinder, still provided online or local prediction services. the prediction results  on the dbp <dig> dataset indicated that our method still characterized by good predictive performance on imbalanced testing dataset. among these methods, our idbp achieved the highest mcc of  <dig> , which was about 5 % more than the second highest method dna-prot.table  <dig> comparison of predictive quality on the dbp <dig> dataset



application to large-scale dbp prediction
in real-life application, computational tools are often used to identify possible candidate proteins in large scale. to simulate this scenario, we collected  <dig>  dbps from five most popular organisms  in uniprot database. after removing incomplete segments and unannotated proteins, we finally obtained a large-scale testing dataset with  <dig> dbps . as shown in table  <dig>  by using our idbp, nearly 59 % of human proteins, 53 % of a. thaliana proteins, 54 % of mouse proteins, 61 % of s. cerevisiae proteins, and 59 % of fruit fly proteins were successfully predicted as dbps. in summary, about 56 % proteins were successfully recognized. the results showed that idbp could be a reliable tool in large-scale applications.table  <dig> number of annotated and recognized dbps in uniprot database



CONCLUSIONS
in this work, we proposed a new method, named idbp, to predict dbps from primary sequence. multiple informative features, which derived from evolutionary conservation profile, secondary structure motifs and physiochemical properties, were used to discriminate dbps from non-binding proteins. next, a novel improved bfa was forged to perform feature selection and parameter optimization. the experimental results of our predictor on two benchmark datasets outperformed many state-of-the-art predictors, which revealed the effectiveness of our method. moreover, the promising performance on an independent testing dataset and large-scale proteins from uniprot database proved the good generalization ability of our method. in addition, the novel improved bfa would be of a powerful algorithm which could find widely applications in discrete optimization problems. the web-server is available for academic research at http:// <dig> . <dig> :8080/idbp/.

additional files
additional file 1: the main dataset and dbp <dig> used in this study. 

additional file 2: the large-scale testing dataset compiled from uniprot. 



we thank fundamental research funds for the central universities  for proving the funding for this work.

funding
this work was supported by the fundamental research funds for the central universities .

availability of data and material
all the datasets used in this research can be found in additional files associated with this paper.

authors’ contributions
jz conceived the idea and was in charge of the idbp implementation. bg, htc and zqm optimized the algorithm and participated in the development and validation of the web server. bg and gfy drafted the first version of the manuscript. jz and bg designed experiments, gathered test data, and were in charge of the experiments. zqm and gfy supervised the progress of the whole project and critically checked the first draft. gfy was in charge of the whole process of final revision. all authors have read and approved the final manuscript.

authors’ information
not applicable.

competing interests
the authors declare that they have no competing interests.

ethics approval and consent to participate
not applicable.

consent for publication
not applicable.
