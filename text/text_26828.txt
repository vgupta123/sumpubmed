BACKGROUND
automated analysis of microscopy images is of growing importance in many biological fields  <cit> . the improvements in microscopy and informatics hardware as well as the development of software tools have enabled ambitious experiments like genome scale rnai screens, screening of large libraries of chemical compounds, etc. image processing involves segmentation of the image into objects, in the biological setting usually nuclei and cells. object attributes, for instance intensity, shape or texture can later be measured. for simple tasks, e.g. presence/absence of a color signal from a specific response reporter, a single object attribute is sufficient to distinguish biological phenotypes. however, biological questions often involve complex phenotypes that cannot be differentiated using a single object attribute. changes in the cell organelle distribution or changes of the actin cytoskeleton are examples for this. therefore, determination of such phenotypes makes the parallel evaluation of multiple object attributes necessary. this can be achieved by classification via machine learning approaches, for instance by specific supervised statistical pattern recognition algorithms. supervised methods need training of objects by a user with prior knowledge; objects are thereby labeled to belong to one of several classes of phenotypes. a classification algorithm later utilizes the collected object attributes to identify a decision boundary between the phenotypes trained. an example for a commonly used classifier is the support vector machine  algorithm  <cit> .

in images of biological samples, typically objects with several complex phenotypes are simultaneously present on one image. cell populations are inherently heterogeneous, for instance presenting themselves in different stages of their cell cycle. in addition, cells might react differently to a given experimental intervention. the combination of these phenotypes would make multi-class classification necessary for successful image analysis. in another common scenario, two independent objects might be identified on an image, for example the cell and a pathogen. analysis might require first to classify one of these objects and later, classification information has to be collated with information about inter-object relationships. in conclusion, a tool which can handle multiple classes as well as inter-object relationships after classification is necessary. enhanced cellclassifier is a software solution for such complex image analysis problems.

commercial image analysis software has tremendously improved over the recent years. arrayscan  is one of the most popular programs. it is usually directly integrated with an automated screening microscope, enables image analysis with many features and handling of high content experiments. in this program, machine learning approaches are not supported but can be incorporated in connection with third party commercial data visualization and data mining software. another program, cellenger , offers image analysis with great flexibility using pre-set modules and a powerful scripting language. an image browser, analysis modules and programming tools for image analysis including some machine learning algorithms are integrated in one single program that can also handle high content experiments. limitations of some commercial programs include licensing fees and difficult customization, as well as lack of transparency of the analysis process and limited flexibility.

among the currently available open source software resources, the matlab based program cellprofiler  <cit>  is popular and has been successfully used in many biological applications. it provides image segmentation and measurement routines as modules which can be flexibly combined. cellprofiler analyst  is a recently released cellprofiler extension which employs a gentle boosting algorithm for  <dig> class classification  <cit> . even though the biological image analysis field has made tremendous progress because of the above programs, the user still faces limitations. importantly, classification by cp analyst is restricted to two classes. moreover generation of a flexible output and solving of more complex image analysis tasks requires individual programming in addition to the usage of these tools. other highly successful software projects focus on different aspects of image processing for instance subcellular localization of proteins  <cit> , cell cycle phase identification  <cit> , image segmentation  <cit> , characterization of drugs based on cell phenotypic features  <cit> , phenotypic changes after rnai treatment  <cit> , analysis of high content rnai screening by time-lapse microscopy in a high throughput setting  <cit>  or specific histopathology questions  <cit> ; however, these approaches cannot easily be generalized. in a similar focused approach, the open source program imagej  <cit>  has been used in combination with the image analysis program weka  <cit>  to classify images of biological species  <cit> . image analysis and classification can also be done with tools based on the open source platform r  <cit>  including tools for analyzing rnai-screens  <cit> . some software packages focus on classification of whole images, not objects within images . in addition, many of the above mentioned tools are used from a command line and might be useful mainly for bioinformatics experts but much less so for typical biological laboratories.

in a typical laboratory setting, experiments and microscopy are done by biologists without programming knowledge. assays are typically performed in a  <dig> or 384-well format and 4- <dig> microscopy images are acquired in  <dig> to  <dig> or  <dig> channels per well. the task generally involves identifying the changes in cell phenotypes to evaluate the effect of the compound, condition or perturbation. when using the currently available software tools, in our experience four limitations are apparent: 1) images belonging to the same well need to be summarized. 2) out of focus images need to be excluded. 3) several post-processing steps of the data need to be performed and 4) a comprehensive overview of data and an output in a human readable format needs to be generated. in cellprofiler, currently these tasks can only be accomplished by scripting. since most biologists would need additional training before being able to write programs, tools for flexible post-processing analysis are required. for daily experiments with quickly changing conditions, flexibility of evaluation, ease of use and transparency of the evaluation process becomes very important.

in this publication we introduce enhanced cellclassifier, a flexible and easy to use tool which allows classification as well as flexible post-processing that enables the user to evaluate many biological phenotypes. in the implementation section, we provide definition and description of important concept and terms, a detailed discussion of the svm approach chosen by us and additional technical details. in the results section we present important features of our tool such as the graphical user interface, the different training methods and data integration and output generation. in addition we provide two biological case studies to illustrate the usage of our tool. finally we compared our tool to another open source program, cp analyst.

implementation
definition of important terms
object
an object is an observation or an item on an image, defined and identified by an image analysis algorithm, for instance a recognized nucleus, cell or a spot.

object attributes
measurements of an object, for instance concerning its shape, intensity or texture; object attributes are often also referred to as object features.

class
user defined phenotypic labels of an object are called classes. classes might be mitotic, non-mitotic etc. during training the user assigns a class to an object.

model
a set of instructions to predict the class of an object from object attributes. in enhanced cellclassifier, a "model" can be trained, saved and reloaded, it contains the output of the svm classifier, information about scaling of the data and the names of the object attributes.

5-fold cross-validation accuracy
the data set is randomly divided into  <dig> equal parts. the classifier takes 80% of the data to calculate a model to predict the classes of the remaining 20% and to calculate the accuracy of this prediction. this is done five times and the accuracies are averaged.

vector
in enhanced cellclassifier vectors are user defined variables, important for summarizing and integrating data. a vector is binary  and has one type of object as its parent . classification results, object attributes or inter-object relationships are translated into vectors for every image. the number of vectors that can be defined is not limited. please refer to results section for an example.

image, well and plate variables
user defined variables which integrate data and yield in a single value for an image, a well or a plate, respectively.

programming
enhanced cellclassifier was programmed in matlab. graphical user interfaces were designed using the matlab-feature guide. matlab was chosen because cellprofiler has also been written in matlab; a good compatibility between both programs could thus be ensured. the program is easy to extend and to prototype.

svm classification
svm is one of several supervised statistical pattern recognition algorithms. such supervised machine learning algorithms classify objects of different classes according to their object attributes. in svm, an object with n object attributes could be considered a point  in an n-dimensional space of the object attributes. in a dataset consisting of two classes and appropriately chosen object attributes, the objects of each class might cluster together in this space. therefore, in this n-dimensional space hyperplanes would exist, which separate the objects of the two different classes. in a simple case, the two classes could be distinguished by a linear separation and the hyperplane would lack any curves. a linear svm algorithm would calculate the hyperplane separating these objects with the largest possible margin. the objects which are situated just at these margins and thus define the margins are called support vectors. if the dataset cannot be separated in a linear way, non-linear svm-classifiers are used to calculate a curved hyperplane. for these calculations, the object attributes are mapped by a kernel function into a higher dimensional space in which the separation can be done linearly. furthermore, in many practical examples, two classes cannot be separated perfectly; therefore a "soft margin" is introduced, where each misclassification yields in a "penalty" for the classifier, this penalty will be minimized by the algorithm . for multi-class classification, internally several hyperplanes are calculated to separate all possible pairs of classes; for three classes,  <dig> hyperplanes would be necessary .

in enhanced cellclassifier, svm-classification is done using libsvm  <cit> ; this software package can handle multi-class classification and is integrated in enhanced cellclassifier. before training the data set is scaled, unknown to the user to ensure the best possible classification. we use a non-linear kernel -kernel) to calculate models; other kernels are currently not supported. in the svm window, the user can freely combine data from the current session and up to  <dig> previous sessions to form a set of training data and validation data. if a model is calculated, the accuracies of prediction for the training and validation data sets are calculated as well as the confusion matrix .

in enhanced cellclassifier, a separate window is dedicated for svm training and adjustments. our tool provides maximum flexibility in dividing all loaded objects into a training and a validation subpopulation, before calculating the model. the resulting model can thereby be tested against the current objects as well as objects from former training sessions. optimization and adjustment of the critical parameters c  and gamma of the rbf-kernel is supported  <cit> , to optimize classification for different data sets. enhanced cellclassifier also allows adjustment of the penalties for the different classes to ensure balanced classification of a heterogeneous data set. histograms of the features of the trained cells can be visualized; apparently useless features can be excluded to save computation time.

while using svm, enhanced cellclassifier makes a powerful classifier available to the user; the approach worked better or as good as alternative classifiers in the biological examples  <dig> or  <dig>  respectively  and has been successfully applied on two unrelated microbiological problems . moreover, reducing the numbers of classifiers to just one might avoid confusion for the novice user. however, our approach faces some potential limitations. first, in datasets containing an exceedingly large number of objects or a large number of object features, computational power for calculating models might become prohibitive. in this situation, for instance tree based classifiers or svm using linear kernels might yield equivalent results in a shorter time frame. enhanced cellclassifier users would need to apply feature selection techniques and exclude useless object features before training to overcome this potential problem. however, in our experience training time on normal desktop computers is usually within 1- <dig> seconds during normal usage; we tested datasets of up to  <dig> cells and up to  <dig> features without training time exceeding  <dig> min. second, optimal performance of the svm classifier for some datasets  requires a grid search of the critical parameters c and gamma of the rbf-kernel which is supported by enhanced cellclassifier. otherwise poor classification of the training data set or overfitting, indicated by poor classification of the validation data set, might occur. in contrast, other classifiers either need no or considerably less parameter optimization. finally, even though svm with an rbf-kernel and correct settings can model every training data set accurately, it might predict a new data set not as accurately as other algorithms. therefore, for some biological questions svm using other non linear kernels, other classifiers or meta-classifiers might perform better than our approach even though we did not experience an example for this.

workflow in enhanced cellclassifier
integration with other programs
enhanced cellclassifier can load cellprofiler data; the output of other image analysis programs is currently not supported. data from trained enhanced cellclassifier objects including object attributes and their classification can be saved as '.arff' files and imported into the open source program weka   <cit>  for further analysis of the data with different classifiers. in addition, the data can be imported into the recently released open source program hcdc-knime http://hcdc.ethz.ch,  <cit> ); this workflow based system enables linking enhanced cellclassifier output data with the original images, experimental data  and further advanced bioinformatics analysis.

flexible and automated focus analysis
autofocus problems are virtually unavoidable when working with automated microscopes. therefore, image series are likely to include a small number of images which are out of focus and therefore unsuitable for analysis. it is desirable to exclude those images or at least identify such problems. we use the cellprofiler module "measureimagegranularity" which performs several rounds of image erosion followed by image reconstruction and measures the difference of the mean image intensity after each round  <cit> . for images with many objects and high contrast these values will be high whereas out of focus images or images with fewer objects yield lower values. in a designated window, we plot the number of nuclei  against the image granularity. the user trains images as being in focus or out of focus; finally a line is adjusted separating both groups of images in this plot. if the user wants, out of focus images will be excluded; in that case they will never be presented for training and are not summarized when the final output is generated. in the two biological examples provided, focus exclusion has not been necessary.

demonstration and manual
for the demonstration of our program, two different biological examples  were chosen; a brief tutorial guides step by step through the demonstration. the examples are integrated in the program and can immediately be used after starting enhanced cellclassifier. our tool is accompanied by an extensive manual covering all important aspects of enhanced cellclassifier.

the experiments for the two biological examples are briefly described within the text, further experimental details and details of the cellprofiler analysis pipelines used are available upon request.

the program can be downloaded at: http://www.micro.biol.ethz.ch/downloads

RESULTS
program feature 1: training and interactive decision making
enhanced cellclassifier is a novel application which efficiently integrates image analysis results from the open source program cellprofiler  <cit>  with svm classification algorithms  <cit> . multi-class classification is a distinguishing feature of enhanced cellclassifier. the current version of enhanced cellclassifier supports five classes; a case study involving  <dig> classes is given in biological example  <dig> below: hepatocyte growth factor induced ruffling of hela cells. enhanced cellclassifier facilitates image display in a browser which supports three channels, scaling, zooming, and image navigation. the images are randomly selected from user defined image groups which correspond to the wells from which the images are derived. the class of an object is directly shown on the image; the color of the outline of the object thereby indicates the class. both, display of images and the presentation of objects can be customized.

during supervised learning, the user labels the objects; thereby attributing a class to them . these objects  had first been identified and measured by cellprofiler; object attributes  are thereby extracted . thereby, a data set of trained cells containing object attributes and the class label is assembled. the algorithm of the classifier then calculates a set of instructions to predict the object labels from the measured object attributes. several strategies to achieve this have been proposed and successfully applied including decision tree based, bayesian and nearest neighbor classifiers, neuronal networks, perceptrons and support vector machines . enhanced cellclassifier uses an svm algorithm with a radial basis function  kernel for training; the open source program libsvm  <cit>  is integrated in our tool and is exclusively used for these calculations. a detailed discussion of svm and machine learning is given in the implementation section.

in enhanced cellclassifier, training is done by direct clicking on the respective object on an image . training strategies might critically influence the classification process; enhanced cellclassifier offers four intuitive training modes. training in the exploratory mode  provides maximum flexibility to the user to freely select any object. however, in this mode the user might avoid frequent borderline phenotypes. therefore, a second mode, "random", exists. this is a forced choice mode; the user is required to decide about the phenotype of randomly selected objects from a randomly selected image. this training mode thereby avoids any selection bias by the user. at any time point training can be interrupted for calculation of a svm model.

in a later stage of the training process, the user might want to refine a preliminary model. training more objects would obviously be useful. however, a more efficient strategy would to be to limit training to objects which had been difficult to classify for the algorithm. the predictions for these objects will either be incorrect or just correct; the objects are located at the decision boundaries for the classifier. therefore, in a third training mode, the "correction" mode, predictions for all objects will be displayed on the image. only objects corrected by the user will be memorized. adding these borderline objects to the data set can greatly improve the model. finally, in a fourth mode, the "decision boundaries" mode, only objects for which the predictions are closest to the decision boundaries of the current model are presented; these objects are also most valuable for further refinement. the user can freely switch between training modes; moreover, training can be performed in an "informed" or a "blinded" fashion, either displaying the image filenames or not.

presentation of objects within the original images directly illustrates the biological process, image segmentation and performance of the classifier to the user. it might enhance training accuracy, since the context of each object can be taken into account by an experienced biologist. on the other hand, the context might result in a training bias and image based training might cause under-representation of objects from images with high cell densities. therefore, training can also be conducted in another window; here,  <dig> individual objects from up to  <dig> different images from the 96- or 384-well plate will be displayed.  <dig> of those objects are selected to be close to the decision boundaries of the current model, the remaining  <dig> illustrate the positive and negative phenotype. this mode avoids any training bias and might enhance the efficiency of the training process by selecting the most interesting objects from the whole plate. a similar training mode has recently been described  <cit> .

program feature 2: data integration
enhanced cellclassifier facilitates the integration of classification information with other cellprofiler data. during image analysis by cellprofiler inter-object information can be calculated. for instance, two independent object types can be related to each other if they overlap ; one object will be labeled as the child of the other. with a different module, neighborhood information for objects of the same kind can be calculated. however, in cellprofiler this information can only be utilized after individual programming.

enhanced cellclassifier allows the user to define internal representations of the objects which we call "vectors". a vector is binary and will be calculated for each image; it contains as many numbers as objects of the specified kind. classification, measurement and inter-object information can all be translated into binary vector information. since one can generate new vectors from existing vectors using logical operations, the user is now able to define any subgroup of objects desired. for example: if an image contains  <dig> cells, of which  <dig> and  <dig> are mitotic, the vector for mitotic cells for this image would be  <dig>   <dig>   <dig>   <dig>   <dig>  if cells  <dig>   <dig> and  <dig> are calculated to be infected by a pathogen, the vector for infected cells would be  <dig>   <dig>   <dig>   <dig>   <dig>  the vector infected mitotic cells would be  <dig>   <dig>   <dig>   <dig>   <dig>  infected non-mitotic cells  <dig>   <dig>   <dig>   <dig>   <dig> and so on. this vector concept enables the user to handle cases combining classification and inter-object relationships or other object properties which would otherwise only possible by scripting. feature integration is illustrated below in the biological example  <dig>  salmonella-docking onto hela cells.

program feature 3: dynamic data extraction
to ensure the greatest possible flexibility three further internal representations can be defined by the user: "image variables ", "well variables " and "plate variables". image variables comprise just one number for each image, for instance "number nuclei", "number infected cells" or "percent infected cells". they are in most situations calculated from vectors; however, enhanced cellclassifier also allows importing cellprofiler data directly, for instance threshold information. well variables are summaries of the image variables of one well. well variables can also be the result of a calculation, for instance the normalization of the number of docked or ruffling cells by the total number of nuclei in this well. plate variables are summaries of variables from wells chosen by the user. they are especially useful for normalizing all data on a plate or for bringing internal controls prominently to the attention of the user. all variables are defined via a graphical user interface where predefined choices avoid "impossible" settings.

program feature 4: flexible output options
most important for the user is the summary of the whole experiment in a comprehensible and human readable format. our program generates four different kinds of output data: outlined images, excel-files, graphical summaries and a matlab readable output. outlined images visualize a vector or the result of the classification for a given image; if for instance the user wanted to visualize the vector "mitotic cells" using a yellow color, for all objects for which the vector had been positive  the outlines would be stained yellow . outlined images allow for a visual control of the final analysis and documentation. excel-data are probably the most popular data format for biologists; all image, well and plate variables are automatically exported to an excel-sheet. well variables from the whole plate can be visualized as heat maps, histograms or scatter plots. they allow a quick overview over the whole experiment. when doing larger experiments, the user might want to do further customized analysis. therefore, image and well variables of interest can be exported in a matlab readable format.

enhanced cellclassifier supports automatic processing of multiple plates. to allow for the analysis of a high content screen, the enhanced cellclassifier output can be imported into the open source program hcdc-knime which enables the analysis of large experiments as well as integration with the original images, experimental data and further advanced bioinformatics analysis.

biological example 1: hepatocyte growth factor induced ruffling
we chose ruffling of cells in response to hepatocyte growth factor  as an example for automated identification of complex phenotypes. hgf is a cytokine which can stimulate cell motility, proliferation and morphogenesis. a visible sign of hgf-activity is the appearance of pronounced "dorsal" ruffles on the surface of the cell  <cit> . ruffles are driven by rapid actin polymerization. in this context, the master regulator of actin polymerization arp2/ <dig> with its central component actr <dig> is known to play a major role. the intracellular signaling from hgf-receptor leading to ruffling is currently a subject of intense research  <cit> .

we established an image based ruffling assay using hela cells . hela cells were incubated for  <dig> minutes with hgf at a final concentration of  <dig> ng/ml, fixed and stained with 4', 6-diamidino-2-phenylindole , for visualization of nuclei and tetramethyl rhodamine iso-thiocyanate -phalloidin for staining of the actin cytoskeleton. where indicated, cells had been incubated with lipofectamine  <dig> and  <dig> nm of an sirna directed against the mrna of actr <dig> for down regulation of this protein prior to the assay.  <dig> images were acquired per well with an image xpress microscope  using a 20×-objective. in the microscopy images, nuclei and cells were identified in the dapi and the actin channel, respectively using established cellprofiler modules.

cells and nuclei were subsequently measured in both channels using cellprofiler tools for measurements of object texture and intensity. in brief, cellprofiler texture measurements include haralick features, comprising a set of statistical calculations derived from the grey level co-occurrence matrix of an object  <cit>  and gabor features, obtained after applying gabor filters  <cit>  in the x and y direction. intensity measurements include the minimum, maximum, median and mean pixel intensities over an object and its edge regions, respectively. both, intensity and texture measurements were performed for the actin- and dapi-channel of the image for the region of the nucleus and the cell.

in order to improve the performance of the classifier, customized cellprofiler modules were developed. our modules take advantage of the high difference in the intensity of a ruffle in the actin channel compared to the remainder of the cell and their distinctive compact shape. in brief, in one strategy we determined the regions of the cell with the brightest intensities, either by applying a fixed circular mask or by thresholding using the otsu algorithm  <cit> . subsequently, features describing the contrast between the brightest area and the remaining area of the cell were extracted  <cit> . in an additional approach, we took advantage of the fact that the area of ruffles within a cell consisted usually of the 5% brightest pixels within a cell. the shape of the thus identified regions was measured  as well as the contrast  of the potential ruffle relative to the remainder of the cell.

however, no single feature could clearly distinguish ruffling from non-ruffling cells . this was not entirely unexpected, since changes in actin polymerization also happen during normal cellular life, for instance at the entry into mitosis. therefore this problem required to identify three different cell types: ruffling, non-ruffling and mitotic cells. this task could conveniently be achieved using enhanced cellclassifier.

for identifying dorsal ruffles on hgf-treated cells, objects were trained in the "default" and "random" training mode. after training a preliminary svm model, incorrectly classified cells were corrected in the "correction" mode, yielding a final data set of  <dig> objects. after a grid search of the parameters c and gamma for the rbf-kernel, the 5-fold cross-validation accuracy was  <dig> %. this slightly less than optimal performance is most likely due to the presence of weakly ruffling cells with a borderline phenotype which are difficult to classify, even for a human observer. in agreement with this interpretation, a detailed look on the confusion matrix of the 5-fold-cross-validation procedure showed, that mitotic and non-ruffling cells were mainly correctly predicted , in contrast to ruffling cells  which were frequently misclassified as non-ruffling . in further tests with the same images, a dataset containing  <dig> objects with exclusively strong phenotypes was classified almost perfectly , while another dataset from the same image set containing  <dig> objects trained in a strictly random and blinded manner yielded a 5-fold cross-validation accuracy of  <dig> %.

to allow for experimental comparison of the performance of different classifiers, our dataset  was exported to the open source program weka. we tested a large set of classifiers of which only few algorithms approached the accuracy of svm with an rbf-kernel . from these tests we conclude, that for this dataset the performance of libsvm with an rbf-kernel and our settings cannot easily be outperformed by other algorithms.

when the different object features were ranked by weka for their ability to distinguish ruffling from non-ruffling cells using different algorithms, for instance svm attribute selection  <cit> , the object attributes describing texture in the actin channel consistently ranked best followed by our customized object attributes. to determine the relationship between the number of available object attributes and the 5-fold cross-validation accuracy, we systematically tested the performance of our classifier using increasing numbers of object attributes. we started with one attribute and added more attributes in the order suggested by the svm attribute selection algorithm and optimized the kernel parameters c and gamma. a set of  <dig> object attributes performed best, achieving a 5-fold cross-validation accuracy of 89%, thereby marginally exceeding the cross-validation accuracy of the whole set of object attributes. object attribute selection  has the additional advantage of decreasing training time. nevertheless, a model for this dataset could be calculated in only  <dig> seconds on a desktop computer, therefore no further attempts were made. object attribute selection algorithms are currently not supported by enhanced cellclassifier but will be the scope of future developments.

in summary, enhanced cellclassifier could identify mitotic and non-ruffling cells with high and ruffling cells with moderate accuracy. using our tool in the "correction" training mode, the biologist can directly visualize the predictions of the model on different images; this increases the confidence of the researcher to the analysis algorithm. subsequently, the model was applied to the complete dataset of the biological experiment. as shown in figure  <dig>  frequent ruffling was observed under control conditions; in contrast, without hgf, only background ruffling was observed. moreover, elimination of a critical component of the cascade leading from hgf to actin polymerization also reduced ruffling: after sirna mediated knockdown of the actr3-component of the arp2/ <dig> complex, ruffling was reduced to background. therefore, enhanced cellclassifier can automatically analyze hgf-induced ruffling. this could be useful for future identification of new intracellular proteins important for ruffling.

biological example 2: docking of salmonella onto hela cells
salmonella typhimurium is an important food borne pathogen causing diarrhea and rarely systemic disease. central to the pathogenesis by salmonella is its ability to invade epithelial cells  <cit> . docking onto cells is the first crucial step of the infection by salmonella. this process can be studied in tissue culture: cells were incubated with the non-invasive salmonella typhimurium strain m <dig>  for  <dig> minutes, washed and fixed. nuclei were visualized using dapi, salmonella by indirect immunofluorescence in the green channel using a rabbit antibody directed against the o-side chain of lps .  <dig> images per well were acquired with a 4×-objective. using cellprofiler modules, nuclei could be identified in the dapi-images. cells were defined by expansion of the area of the nucleus. infectious "spots" representing single bacteria or a small number of salmonella cells were identified as independent objects in the green channel. during cellprofiler analysis inter-object data were collected: the relationship of spots and cells was determined using the cellprofiler module "relate": any spot overlapping with a cell was labeled the child of this cell. in addition, neighborhood information of different cells was also calculated.

when looking at the microscopy images, a striking preference of salmonella for mitotic cells was observed . salmonella were also enriched at cells adjacent to mitotic cells. therefore, when investigating the docking process, the researcher would like to quantify docking properties for  <dig> types of cells: mitotic cells, neighbors of mitotic cells and non-mitotic cells.

nuclei of mitotic cells can easily be recognized in the dapi-channel by the human observer. however, for automated analysis more than one object attribute was necessary . therefore, the final analysis was done using enhanced cellclassifier. two classes were defined: mitotic and non-mitotic nuclei and trained first in the "default" training mode, followed by a refinement of a model in the "correction" training mode. the final data set contained  <dig> objects from samples of forty 96-well plates of  <dig> independent experiments.

object attributes, measured by cellprofiler available to the classifier were intensity and texture measurements of the nuclei in the dapi-channel . the object attributes ranking best according to their ability to distinguish between classes  <cit>  included intensity measurements followed by gabor and haralick features . the combination of these object attributes enabled the svm-algorithm to reliably distinguish between mitotic and non-mitotic nuclei with a 5-fold cross-validation accuracy of  <dig> %. using a large data set including  <dig> cells was not necessary to achieve reliable discrimination between the classes, since 5-fold cross-validation accuracies above 93% were consistently achieved with random samples as small as  <dig> objects. nevertheless, a larger data set did not require extensive computational power, since calculations needed only  <dig>  seconds on a desktop computer.

other classifiers performed equally well on this data set: after exporting the training data set to weka, 5-fold cross-validation accuracies ranging from 94% to 97% were obtained with the  <dig> algorithms tested .

for the summary of the data  <dig> vectors were calculated: one with information about the cell cycle , the second with information about neighborhood to mitotic cells and a third with information about associated spots. combining these three vectors yielded all the desired subtypes of cells . as shown in figure 4c, mitotic cells, neighbors of mitotic cells and normal cells differ greatly in the percentage of docked salmonella. to the best of our knowledge, this is the first demonstration of the docking preference of salmonella to mitotic cells; however, the biological basis for this interesting phenomenon remains elusive. in any case, to investigate the docking process independently from the cell cycle, the user can now concentrate on the purged cell population.

experimental comparison of enhanced cellclassifier with cp analyst
we wanted to compare our new tool with existing software; among the available open-source software only the program cellprofiler analyst  was developed with a similar scope as our tool: flexible image analysis using machine learning algorithms for biologists without the need for scripting.

we compared several aspects of the two programs including the scope of the classifier, the training process, and the user interface and export options. importantly, cp analyst is limited to  <dig> class classification where as enhanced cellclassifier can manage up to  <dig> different classes. this is a limitation for the analysis of many complex biological phenotypes. for the training process, both, cp analyst and enhanced cellclassifier provide innovative methods. in cp analyst, the algorithm selects for presentation of an adjustable number of objects, either randomly or of the "positive" or "negative" phenotype; these objects are chosen to be close to the decision boundaries of the current model and can quickly improve the current model. the different training options of our tool have been described above. in cp analyst, the user interface is less friendly and offers very little flexibility. the objects are presented to the user as little image snippets which have to be sorted into a bin of positive and negative objects. therefore, visual judgment of the object phenotypes becomes extremely difficult. in contrast, enhanced cellclassifier offers many options for image presentation in order to ease visual inspection and training. furthermore, enhanced cellclassifier provides a visual feedback of the current model on the whole image which allows for immediate evaluation of the performance of the current model. in contrast, cp analyst lacks such a feature. finally, cp analyst uses a mysql database for data retrieval which facilitates quick summarization of data. however, output options were severely limited; for example, the results of the 2-class classification cannot be integrated with other object information. in addition, customization or well-based data summary were not supported. in comparison, enhanced cellclassifier has a dynamic way of integrating results with maximum flexibility. this allows the user to define an output with almost unlimited options .

for experimental comparison, we chose our biological examples mentioned above. for biological example  <dig>  classification had to be simplified since cp analyst only supports two classes; mitotic cells therefore could not be simultaneously identified. however, the program could clearly distinguish ruffling and non-ruffling cells and recognized the phenotypes of the rnais tested in this experiment . in biological example  <dig>  the program could learn to distinguish mitotic from non-mitotic cells, however, the differential analysis we did with enhanced cellclassifier to measure the percentage of infected cells for mitotic cells, its neighbors and interphase cells were not possible with cp analyst.

in summary, while classification of biological objects is also possible in cp analyst, the user is restricted to two-class classification and an inflexible display and output which only provides most basic analysis options. most likely, these problems will be solved in the next version of this software, classifier  <dig> , which is not available for windows yet.

CONCLUSIONS
in summary, enhanced cellclassifier is a user-friendly and intuitive tool which allows multi-class classification of biological objects in many intuitive and performance enhancing training modes. for feature integration, classification information can subsequently be combined with data about inter-object relationships and object measurements, greatly enhancing the evaluation options. further useful features are focus exclusion, well summary, and specific calculation and normalization options. the output function which can be defined by the user within broad ranges should cover many needs of image analysis in a biological setting. our tool greatly facilitates image analysis for biologists without requiring programming skills.

availability and requirements
project name: enhanced cellclassifier

web page: http://www.micro.biol.ethz.ch/downloads

operating system: platform independent

programming language: matlab

other requirements: matlab  <dig>  full version, release 2008a or later

license: gnu gpl

list of abbreviations
dapi: 4',6-diamidino-2-phenylindole; hgf: hepatocyte growth factor; rbf: radial basis function; svm: support vector machine; tritc: tetramethyl rhodamine iso-thiocyanate; weka: waikato environment for knowledge analysis

competing interests
the authors declare that they have no competing interests.

authors' contributions
bm designed and developed the program, did the salmonella experiments and wrote the paper. gs designed and performed the hgf experiments. bp participated in interpretation of the data, and writing of the manuscript. ms, ph, kk participated in interpretation of the data. sr performed the salmonella experiments. wdh designed the research and participated in interpretation of the data and writing of the manuscript. all authors read and approved the final version of the manuscript.

supplementary material
additional file 1
comparison of svm with rbf kernel with other classifiers. classifiers were tested using weka  <cit> . meta-classifiers were tested in combination with the classifiers performing best when tested alone including random forrest, j <dig>  simple logistic and decision stump. please refer to the documentation of the weka program for a detailed description of the classifiers and respective references.

click here for file

 acknowledgements
the authors would like to thank michael held and jonathan oakley for stimulating discussions, matthias truttmann, kerstin weidner, vanessa landtwing, alexander sturm, patrick kaiser, pascale vonaesch, stefano bruni and laura falter for critical feedback on the program, florian strittmatter for help with the figures, jacques laville and the management of the brutus cluster at eth for excellent it-support, kumaran kandasamy for help with the mysql database and pascale vonaesch for critical reading of the manuscript. bm and wdh were supported by a grant from the bonizzi-theler foundation and by a grant from ubs. the project was financed in part by a grant  from the swiss systemsx.ch initiative, evaluated by the swiss national science foundation. bp is supported by a grant from the ubs optimus foundation.
