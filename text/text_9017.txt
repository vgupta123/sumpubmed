BACKGROUND
infectious pathogens such as influenza virus and hiv have large databases of genetic data. in spite of efforts to sequence broadly representative viruses, bias still emerges from the substantial contribution of data from specialized sources, such as infection outbreaks, vaccine candidate selection or clinical studies. when databases are large and imbalanced, they pose a substantial challenge to selection of a dataset with desired evolutionary properties, such as evolutionary representation or shared genotype. an obvious selection approach is to control for relevant epidemiological variables. however, the resulting dataset may not have the desired properties, particularly when organisms are readily transmitted. for example, two identical  human influenza a viruses can be collected from hosts separated by thousands of miles. an alternative selection approach is to use an alignment of candidate nucleotide or protein sequences for visualizing genetic relationships. however, alignments are viewed as deviations from a reference sequence, making it easy to see when a sequence is similar to the reference sequence, but difficult to visualize the degree of similarity among non-reference sequences.

when data sets are imbalanced, clustering into groups of similar sequences is a powerful adjunct to the selection process. an example of such a capability for influenza sequences is smartblast  <cit> . smartblast uses a query sequence to search the database for other sequences within a close distance, as measured by blast. smartblast then collapses the ordered blast hits into clusters of similar sequences and chooses a representative of each cluster to comprise a dataset for subsequent analysis. currently, smartblast operates on protein sequences and the degree of similarity that determines cluster membership is preset. performance is achieved by pre-computing pairwise blast similarity scores between all pairs of sequences in the influenza database.

smartblast is well suited for selecting a coarse representation from a very large data set. for example, smartblast with a recent  influenza a hemagglutinin  query sequence efficiently selects  <dig> representatives from 3000+ hemagglutinin  sequences from viruses collected between  <dig> and the present. however, there are tradeoffs for the simplicity and efficiency of the automation of smartblast. for example, smartblast does not allow the user to control the degree of similarity required for clustering. in the above example of smartblast, all  <dig> pandemic h <dig> sequences fell into a single cluster. further, smartblast operates on protein sequences. therefore, similarity in smartblast does not guarantee closeness in a nucleotide-based phylogenetic tree. if a cluster can be equally well represented by multiple sequences, the user cannot choose from alternatives based on relevant epidemiological or other variables. automation also denies the user the possibility of recognizing and culling data with incorrect details. smartblast does not allow the user to define the domain within which selections are to be made. for example, a user may be interested in only sequences from a specific host species. such epidemiological control is not possible in smartblast. for the above reasons, we believe that smartblast generates data sets well suited to exploratory data analysis, but possibly not well suited for detailed analysis of specific evolutionary events.

to select a dataset with the desired evolutionary properties, selection from a phylogeny of the candidate data provides a direct, and therefore efficient, approach. the adaptive tree visualization capability  <cit>  of the influenza virus resource  <cit>  can vary the amount of detail presented in a phylogenetic tree display. tree-distance between sequences is used to automatically collapse sub-trees to a degree of detail controlled by the user. however, the visualization does not provide a mechanism for producing a dataset to match the tree as ultimately visualized. as with smartblast, the automation of the adaptive tree visualization has tradeoffs for the user, who gives up control over the selection of the representatives of a sub-tree.

we developed a tool, tree pruner, for obtaining a dataset with desired evolutionary properties from a large, biased genetic database. tree pruner produces a high-quality dataset by giving the user complete control over the data selection process. thus, tree pruner trades off some of the simplicity and speed of automation in the interest of greater quality of the final data selection. data selection is carried out by interaction with a display of the phylogeny of a large selection of data from a domain of interest. custom tree pruner commands allow the user to fade-out or accentuate tips or sub-trees in the tree display to represent de-selection or selection of data to be included in the final dataset. thus, at all times the user has a view of the approximate tree of selected sequences only. because tree pruner gives the user complete control over the choice of evolutionarily representative sequences, it fosters selection of high-quality datasets. when tree pruner is connected to data management capabilities, such as those of the influenza research database, the user can save an edited dataset for further editing or subsequent analysis.

implementation
requirements
the development of tree pruner was subject to both scientific and technical requirements. the critical scientific requirements were  an interactive phylogenetic tree display that allows the user to read taxon labels regardless of the size of the tree, so that the user can curate the data; and  data management support for successive rounds of editing. the existing "working set" capabilities of the influenza research database  were used to satisfy . a number of existing code bases for interactive tree displays  were examined for their potential to satisfy . since tree pruner would be web-enabled, java code was preferred in order to achieve platform-independence. additionally, because ird is a free, open web site, only source code available free or through open-source agreements, or whose licensing requirements, if any, would permit redistribution of modified source code was considered. out of the available options, archaeopteryx  <cit>  was selected. source code for archaeopteryx is available on sourceforge .

overview of a tree pruner session
users begin a tree pruner session with queries  of the ird and save selected results in a stored working set. when a tree pruner session is initiated on this working set, the ird server infers a basic tree from the working set. tree pruner does not need a high-quality  tree; it is effective for a simple and quickly computed tree, leaving any refined phylogenetic inference to the final, pruned data set. when pruning is complete, tree pruner sends to ird a list of the unique identifiers of those records to be deleted from the working set. since tree pruner is intended to work on large datasets, we chose to carry out pruning on the client side, to minimize the burden on performance due to communications with the server.

tree pruner applet
the tree pruner code modifies  <dig> classes of archaeopteryx and adds  <dig> new classes. modifications to archaeopteryx provide:  custom functions in the control panel, used for editing;  painting of the display to represent editing actions; and  custom interactions with the applet for autosave, termination, crash recovery and opening a sub tree in a new window. tree pruner also supports export of png or jpeg images to the user's desktop.

input to tree pruner is a modified newick tree file. the standard newick format is modified to use two labels for each taxon. one label is a strain name, which, for influenza virus, contains essential epidemiological information, including geographical location, year and host species from which the sample was collected. this information is important for curation during the editing process. however, since a given influenza virus can be sequenced multiple times, the second taxon label is an identifier unique to a particular sequence . this unique label is essential for ensuring that a tip in the phylogeny and a record in the working set are correctly matched when editing the dataset. tree pruner parses the input newick tree file so that the accession numbers, which are generally uninformative, are omitted from the tree display. if the user re-roots the tree, using the appropriate archaeopteryx command, tree pruner models the new hierarchical relationships among taxa.

applet-server communications
communications between the tree pruner applet and the server comply with the rest architecture . http get and post commands pass information between the server and the client.

after generating the modified newick file, ird stores the file in a web-accessible location on its server. the user is then presented with a web page that contains the tree pruner applet. one of the parameters passed to the applet is the url of the newick file on the ird server. tree pruner uses http get to retrieve the newick file. another parameter is the url for making service requests using http post. tree pruner uses http post to send data to the ird server in javascript object notation  format to call services. the data sent contains an action describing the type of service needed and data that acts as input to that service. the following services can be requested: commit - apply changes made in tree pruner to the working set and store in the ird database; save/auto-save - store the current state of tree pruner , but do not delete anything from the working set; discard - remove any stored tree pruner state, but do not delete anything from the working set; lock - mark a working set as locked to prevent conflicts that could arise if multiple sessions attempt to edit the same working set; unlock - reverse the locking of a working set.

if a session becomes suspended, tree pruner supports auto-recovery by using http get to request the state that was most recently stored. tree pruner then makes its user interface consistent with the stored state.

the server locks the working set during a pruner session; the set is unlocked once the user commits or discards all changes. if the user exits from tree pruner without committing or discarding all saved changes, the working set will remain locked until a new tree pruner session is initiated and saved changes are committed or discarded. locking a working set ensures that the 1: <dig> relationship between taxa in the tree and records in the working set is not corrupted.

tree pruner was designed flexibly to enable interaction with server software other than ird. to support tree pruner, server software must implement an api to provide the services listed above; there are no further technology or language restrictions on the server software.

RESULTS
tree pruner is an efficient, visual editing capability for obtaining a dataset of genetic sequences with desired properties, such as evolutionary representation or shared genotype. importantly, it provides the user curatorial control over the final selection of sequence data. while it is currently used with the large, biased influenza sequence database, it can be implemented for other viral genetic databases, such as those for hiv and hcv.

overview of tree pruner
the two editing functions of tree pruner, keep and remove/restore, act in complementary modes to edit a phylogenetic tree . keep is particularly suited to selection of a small subset of a dataset. remove/restore is particularly suited to fine-tuning a dataset by removal of just a few sequences. during a tree pruner session, editing actions are represented on the tree by changes in the color of branches and labels. at the end of a tree pruner session, the editing actions are committed to the original data set, resulting in the removal of sequences corresponding to deselected tips in the tree.

editing actions are selected by custom additions to the archaeopteryx drop-down menu for actions on nodes. custom buttons on the archaeopteryx control panel, such as discard all or commit changes, translate editing actions into changes to the dataset.

example of editing using tree pruner
the following illustrations of tree pruner are based on an initial dataset of all instances of sequences of the hemagglutinin  gene from influenza a  viruses that were collected in the period  <dig> -  <dig>  a minimum length of  <dig>  nucleotides was required for inclusion in this initial dataset. a search of the influenza research database   <cit> , conducted on march  <dig>  <dig>  yielded  <dig> sequences, which were stored in a working set called demotreepruner on the ird server. instructions for accessing this dataset to test tree pruner are given in figure  <dig>   viruses, together with an equine np sequence as an outgroup, is available at the influenza sequence database, http://www.flu.lanl.gov.)

tree pruner is launched from the working set, and automatically infers a phylogeny of the sequences in the set.  tree pruner then opens an archaeopteryx applet, labeled with the name of the working set  and the name of the gene , and displays this tree.

the user can carry out multiple keep and/or remove editing sessions. before switching from one edit action to the other, the user must save or discard all edits of the current type. this ensures that the keep/remove status of all "untouched" taxa is defined. the user can end a tree pruner session by committing changes. then taxa marked for removal in the tree will be removed from the dataset, thus maintaining a 1: <dig> relationship between the dataset and tree display.

 keep function
when a user clicks on a node at the tip of the tree, or at the root of a sub-tree, the label of the selected tip  is  written in black, designating inclusion in the final dataset. all non-selected labels are written in blue. blue tips are "active," meaning they can be selected by future actions, but are not currently designated for inclusion in the final dataset. branches are also colored; black branches lead to sequences selected for inclusion in the dataset; blue branches lead to sequences whose status is undetermined. 

 remove/restore function
when a user clicks on a node at the tip of the tree, or at the root of a sub-tree, the color of the label of the selected tip  switches between black and grey. all non-selected labels remain black. black tips are "active" and can be removed by future actions. alternatively, clicking on a grey node is a restore action. restore will change the tip label and relevant branches from grey to black. 

 handling large trees
a key scientific requirement of tree pruner was to enable the user to view taxon labels, even in large trees. archaeopteryx offers three features for viewing large trees. "dynamic hiding" displays a subset only of taxon labels in order to squeeze a large tree into the window. zooming allows reading of all taxon labels, but loses the overall tree structure. viewing a sub-tree allows reading of all taxon labels in a sub-tree, but loses the context of editing because the sub-tree replaces the full tree in the window. archaeopteryx was modified so that tree pruner displays a sub-tree in a separate window, side-by-side with the display of the complete tree. multiple levels of sub-tree are permitted. pruning actions are mapped among windows by the refresh action. thus, a sub-tree can be pruned while viewing its context.

 concluding a tree pruner session
the user may use commit to exit from tree pruner; all taxa tagged for removal  will be removed from the working set. the tree used to edit the dataset is removed from the server. to perform further editing, tree pruner infers a tree from the revised dataset, thereby retaining a 1: <dig> correspondence between the dataset and the tree display.

 crash recovery
autosave is run every  <dig> minutes after the most recent user-instigated save. if the server or client crashes during a pruning session, tree pruner can resume from the most recent save.

discussion
selecting a dataset of sequences with specific evolutionary properties from a large, biased genetic database is problematic. selection by inspection and editing of a phylogeny of candidate sequences is an obvious approach. tools such as treedyn  <cit>  and archaeopteryx  <cit>  allow manual editing of a phylogenetic display; the influenza virus resource's  <cit>  adaptive tree visualization  <cit>  uses an algorithm to automatically edit a phylogenetic display. however, none of these tools can translate editing actions into data selection.

tree pruner was designed for selecting data from the influenza genetic sequence database. tree pruner uses a manual editing process to avoid the potential of automatic editing to select poor quality data. the intuitive editing actions of tree pruner allow the user to quickly converge on a final data set with the required evolutionary properties. tree pruner uses sub-trees to facilitate reading the labels on a large tree, thus fostering curation of the final data. communications between the tree pruner applet and the server translate editing of the phylogeny into selection of data from the database.

the size of the dataset that can be edited by tree pruner is limited by the capacity of the server to infer a phylogeny for the initial superset of data and not by the capacity of archaeopteryx, which can display trees of  <dig>  -  <dig>  taxa without significant degradation of performance. currently, phyml is used to infer trees for tree pruner; phyml works reliably for trees with  <dig>  -  <dig>  taxa. thus, tree pruner is relevant for typical large influenza virus sequence analyses.

tree pruner can be easily adapted for data selection from large genetic databases of other organisms such as hiv, provided the appropriate software for applet-server communications is used, and the database has a means of storing a dataset.

CONCLUSIONS
tree pruner is an efficient tool for selecting a curated dataset with the required evolutionary properties from a large, biased database of genetic sequences.

availability and requirements
project name: tree pruner

code availability: http://github.com/caml/tree-pruner/

link to full implementation: http://www.fludb.org/

link to static demonstration: http://www.flu.lanl.gov

link to user guide: http://www.fludb.org/brcdocs/tutorials/treeeditor.pdf

http://www.flu.lanl.gov/

operating systems platform-independent if browser is java-compatible

programming language: java

other requirements: a code-signing certificate is required to allow exporting of graphics onto a user's desktop.

license: l-gpl

authors' contributions
mk, pp, md wrote the tree pruner code; mg guided the technical development; jd and the northrop grumman team implemented the code on the influenza research database and contributed to the manuscript. cm provided the scientific guidance and wrote the manuscript. all authors read and approved the final manuscript.

