BACKGROUND
next generation sequencing offers a powerful tool to investigate genetic aberrations in a comprehensive manner on a wide scale, ranging from point mutations  <cit>  to large-scale genomic rearrangements  <cit> . however, low complexity genomic regions, artefacts produced by the ngs pipeline, and regions of homology across diverse parts of the genome often make it difficult to produce a reliable call on a given somatic single nucleotide variation  . snv identification is further hampered when no information is available on common variations among individuals . a well-annotated reference genome, such as the human genome, and the use of appropriate controls, such as sequencing of matching germline dna, can significantly reduce the effects of these problems. however, in many experimental setups such control reference genomes are not available. also, even though ngs is a very effective way of genome analysis, it generates sequencing errors that may be falsely detected as mutations  <cit> .

while the human genome is relatively well-researched and extensive effort was put into retrieving information on variation among humans  <cit>  to reduce the detection of false positive mutations, the case of less commonly sequenced organisms and cell lines is different. also, the practice of repeat masking of the genome is usually either unavailable or less reliable for non-human organisms. as most publicly available mutation detection software tools are optimised for human genomes and also for specific experimental scenarios such as cancer genome analysis, it may be expected that they do not perform satisfactorily in many other experimental designs.

one of the most common ways of overcoming these difficulties and adjusting already existing software to the special needs of a given experiment is running the tool with default settings and applying in-house scripts with little or no documentation to remove false positive calls. these methods are rarely tested or optimised and do not allow the straightforward reproduction of the results, which presents a great disadvantage when one attempts to compare scientific findings.

a specific, but relatively straightforward mutagenesis experimental set-up involves a population of essentially identical starting cells which over the course of the experiment individual cells are expected to acquire different treatment-induced sets of mutations. such experiments are routinely used to survey the mutagenic effect of various drugs or environmental agents  <cit> , to detect mutations that contribute to the development of treatment resistance  <cit> , or to identify mutagenic processes dependent on various genetic backgrounds  <cit> . in the past, the read-out of mutagenesis assays was commonly obtained from the sequence of a single gene, but whole genome sequencing can provide a broader, unbiased mutation dataset. during our work on chicken dt <dig> cells, we found that whole genome sequencing data from mutagenesis experiments could not be processed with sufficient reliability by routinely used mutation detection software, such as varscan  <dig>  <cit>  or mutect  <cit> , even when tuning the appropriate control parameters of the tools. mutect <dig>  which was not yet available at the time of this study, is a more sophisticated version of mutect and is able to detect indels  besides snvs, however it would have taken unfeasibly long to run on our experimental data.

in this manuscript we describe a very fast method for accurate somatic mutation calling that is adequate when multiple, differently treated isogenic samples are investigated, by using information from many available samples to rule out false positives. samples were derived from single cell clones, and we made use of the assumption that mutations are independent in each sample. therefore, our method identifies snvs and short indels present in a single sample only, filtering out snps, sequencing and alignment bias primarily on the basis that the false positive calls tend to be present at the same genomic location in multiple samples. this way, the need for a well-annotated reference genome or pre-existing databases of germline variants is eliminated. isomut applies a very simple strategy for filtering by using fixed thresholds for most of the filtering parameters which are in clear connection with the actual sequencing data, allowing the user to easily interpret the results without dwelling deep into statistical models. on the other hand, isomut also provides an additional filtering option which is based on the statistical fisher’s exact test and can be used to finely tune the results to remove all false positive calls from control samples if such samples are available. we successfully used isomut to measure the mutagenic effect of common cancer chemotherapeutics  <cit>  and to determine the effect of dna repair gene defects on mutagenesis  <cit> . in this paper we present proof for the accuracy of mutation detection using isomut.

methods
dataset
our method was optimised using a dataset of whole genome sequences, obtained from a panel of cell line clones used for assessing the effect of various chemical agents on mutagenesis. the dt <dig> chicken lymphoblastoma cell line  <cit>  was used for the experiments; the wild type and brca1
-/- cell clones used in this work were derived from a previous study  <cit> . single cell clones were isolated and expanded before sample preparation. instead of sequencing a mixture of genomes in a population, this arrangement allowed us to derive the sequences of the individual cloned cells, as any mutation arising during the clonal expansion would only be present in a small proportion of the sequence reads and thus filtered out during the analysis. the experimental setup results in an expected number of 50– <dig> mutations in each sample, similar to or lower than the number of mutations found in cancer samples  <cit> . this relatively low overall mutation rate made it crucial to keep false positive mutations to an absolute minimum.

altogether n =  <dig> samples were analysed, each of them identified by a unique id . samples differ from each other in both their genotype  or ‘mutant1’) and their treatment. mutant <dig> samples carry a homozygous brca <dig> mutation that deletes exons 6– <dig> of the gene  <cit> . however, as the actual genotypes and treatments are irrelevant to the purposes of this paper, only general names are used below. the genome sequences of samples with same genotype and treatment are not identical, as they arose from distinct cell clones. the only identical samples in the dataset are two pairs , which were acquired by sequencing the same dna preparation twice. the availability of repeat samples allowed us to control for false positive mutations occurring due to sequencing and alignment error.

whole genome sequence data was obtained by illumina paired end sequencing with read sizes of  <dig> and  <dig> bases in two sequencing batches. the different read lengths and variations in other sequencing parameters among sample groups are not unusual in real studies and present the substantial challenge of reliably comparing genetic information that may have been influenced by various kinds of instrumental and computational artefacts.

sequencing data generated for this study have been submitted to the european nucleotide archive  under study accession number erp <dig> 

preparation of input files
as isomut uses bam files as its input, and optimisation steps described below were carried out on pileup files generated from these, reads were first aligned to the chicken  reference sequence galgal <dig> , which was downloaded from ensembl  <cit> . the alignment was made using the burrows-wheeler alignment tool . the reference sequence was indexed with the bwt-sw algorithm  <cit> , which is recommended in the case of large genomes. the alignments of paired-end reads were generated with the bwa-mem algorithm  <cit> . duplicated reads were removed using the samblaster program  <cit> . additionally the aligned reads were realigned near indels by the gatk indelrealigner  <cit> . after the generation of bam files, a joint and filtered pileup file of all investigated samples was created  for time management purposes, as we needed to have access to this information repeatedly. further details on the generation of pileup files can be found in additional file  <dig> and additional file  <dig> 

mutation detection method based on multi-sample noise filtering
as the naïve approach of using commonly applied mutation detection tools with the suggested default settings failed to produce satisfactory results or could not detect small indels , we designed a filtering method that combines information from all available samples and gives robust snv and indel calling with low false positive rate. a general overview of the method can be seen on fig.  <dig>  the method looks for heterozygous mutations with respect to the reference genome, and filters out positions where other samples also differ from the reference. this approach ensures that ‘germline’ variations, present in multiple samples, are not called as false ‘somatic’ mutations even in the absence of an available snp database. the other common source of false positive mutation calls are alignment errors. typically they occur at the same genome positions in multiple samples, so with multi-sample filtering they are easily eliminated.fig.  <dig> an overview of the testing and optimisation of the mutation detection method




results were evaluated using a set of validated genotype-specific snvs , the generation of which is described below. the calculated true positive and false positive rates  were used as indicators of the goodness of the filtering and optimisation was carried out based on these values.

establishing snv test sets
to measure false negatives and validate the snv detection results, we established two different high-confidence reference snv sets from within our dataset. the test sets consist altogether of around  <dig> positions, which is a sufficiently large number to calculate reliable estimates of tpr and fpr values.

the cell clone whole genome sequence panel used contains several isogenic samples of two different genotypes  that underwent various mutagenic treatments. cell populations were grown separately for some time, accumulating mutations, before the isolation of single clones for genome sequencing. therefore, we expected to find two types of snvs within our dataset. there should be treatment-induced, primarily heterozygous snvs present in individual samples only. in addition, there would be snvs arising from the genetic differences of the starting wt and mutant  <dig> cell clones, which could be either heterozygous or homozygous. heterozygous snvs of the latter category were used as test set positions.

a plot of the mean reference nucleotide frequency  of all wt samples against the mean rnf of all mutant  <dig> samples readily identifies heterozygous snvs present in the mutant  <dig> genotype at the  position. mutations present in the wt samples but not in the mutant  <dig> samples are clustered around  . additional clusters around  <cit>  and  are due to genomic regions with ploidy >  <dig> in the experimental cell line. to verify this statement, we replotted the previous figure using only disomic chromosomes  and used the clusters on this latter graph as test cohorts, as the resulting clusters have very clear outlines and show no overlap with the rest of the data. thus all optimisation procedures were limited to disomic chromosomes only, which proved to be sufficient for the relatively stable dt <dig> genome  <cit> . in cases when ploidy varies greatly in the investigated genome, a ploidy-specific optimisation should be carried out. also, it is impossible to separate loss of heterozygosity  events from real germline mutations during test set generation. this is not a problem, as loh regions can be included in the reference sets for testing purposes, increasing the number of positions which can be used for statistical analysis.fig.  <dig> test set detection for wt and mutant  <dig> samples. a, b plots of mean reference nucleotide frequency values in the samples of the two geno-types; a whole genome, b diploid chromosomes only. insets are zoomed-in regions of the underlying plot. dashed rectangles mark the clusters identified as test cohorts. c generating the same figures for different sample numbers. percentages in purple show the ratio of lost test set positions, while percentages in orange represent the ratio of gained positions in the area in the dashed rectangle




the described method for generating test sets is applicable whenever two sample groups of related but separate genetic origin are available. details of the very similar indel test set generation can be found in additional file  <dig>  in-depth workflow of the test set generation from pileup files for both snvs and indels is in additional file  <dig> 

testing of different filtering methods
regardless of the snv detection method selected, the above test sets can be used to determine their accuracy. false positive rates  were calculated by running isomut on all samples, and counting independent mutations in pre-treatment starting cell clones and in the repeatedly sequenced identical control samples, in which no independent mutations may be present. to obtain estimates for the true positive rate , we ran the algorithm using the starting clone of one genotype and all clones of the second genotype. this way, the genotype-specific snvs were detected as unique in the selected starting clone, and the proportion of the respective genotype-specific test set detected in this individual sample was used as tpr. further details can be found in additional file  <dig> 

defining filtering parameters to handle snps and alignment noise
isomut detects somatic mutations by considering all input samples and applying filtering criteria at each genomic position. to effectively discard germline mutations and false positives arising from alignment noise, three basic filtering parameters were introduced: a minimal threshold for the ratio of the most common type of non-reference reads in the investigated sample , a minimal threshold for the ratio of reference reads in the noisiest non-selected  sample  and a coverage limit for the selected sample . for detailed verification of using such filters, see additional file  <dig>  these parameters were optimised for the desired values of tpr and fpr using the above described testing method.

this thorough optimisation procedure requires a very specific experimental setup and is often not feasible with the available set of sequencing data. thus a more rapid and convenient method is desired to adopt isomut to specific needs. to provide a much simpler tuning option, isomut calculates the s score value of each candidate mutation, which is inversely related to the probability of falsely categorising a position as a unique mutation, thus high-confidence mutations have higher s values than unlikely ones. more precisely, s is calculated as the negative logarithm of the probability p, that given the assumption that the distribution of bases in the two noisiest samples  at the genomic position is the same, we would observe the actual sequencing data. thus a low p  value suggests that it is unlikely that the two investigated samples have the same base-distribution, making it likely that the noisiest sample indeed has a unique mutation in the given position. the probability p is determined by the fisher’s exact statistical test. for more details, see additional file  <dig> 

the availability of negative controls allows for a simple, yet effective tuning of isomut by setting an s score threshold for more rapid results. in this case, a separate optimisation can be carried out on snvs, insertions and deletions.

post-processing
snv and indel candidates were subjected to different post-processing steps, the details of which can be found in additional file  <dig> 

RESULTS
optimal threshold values
we tested isomut on whole genome sequences of mutagen-treated cultured cells. in the tests described below, worst case scenarios were considered. one test for determining the fpr was the inclusion of only two samples of a given genotype, which makes the testing procedure as strict as possible.  if samples are distributed more evenly among genotypes, isomut can achieve even better results than the ones presented below, simply by adjusting the s score parameter.  filter threshold values were selected based on tpr and fpr requirements. we tested the effect on tpr and fpr of varying the sample_mut_freq_min filter at different values of sample_cov_min coverage requirement and a fixed other_rnf_min =  <dig>  . as the depth of the sequencing data limits coverage thresholds, we chose an intermediate, fixed sample_cov_min =  <dig> value for further optimising. at this value, we investigated how varying sample_mut_freq_min at different values of the other_rnf_min filtering parameter influences the relation of tpr and fpr . depending on the number of expected mutations in the investigated samples, different fpr values can be tolerated. the inset on fig. 3a shows the corresponding maximal achievable tprs and optimal filtering parameters to arbitrarily chosen fpr values. for the low fpr requirement of the test sample set, a fixed parameter set of sample_mut_freq_min =  <dig> , other_rnf_min =  <dig> , sample_cov_min =  <dig> provided the best tpr of 92%. further parameter settings with the respective tpr and fpr values can be found in additional file  <dig> fig.  <dig> quality components resulting from different parameter settings and different datasets. a effects of varying other_rnf_min  and sample_mut_freq_min  with constant sample_cov_min =  <dig>  the inset contains maximal achievable tprs for given fpr thresholds with the optimal parameter settings. b effects of changing sample_cov_min  and sample_mut_freq_min  with fixed other_rnf_min =  <dig> . c effects of varying other_rnf_min  and the s score parameter  with sample_cov_min =  <dig> and sample_mut_freq_min =  <dig> . d effects of varying the size of the dataset. measurement points correspond to the parameter settings of the inset of . mean values and standard deviation of three randomly chosen datasets are shown . e effects of decreased sample coverage. measurement points correspond to the parameter settings of the inset of . mean values and standard deviation of three randomly down-sampled measurements are shown 




effects of sample number and sequencing depth
to assess the effects of having smaller datasets with fewer samples, different n sized subsets of the original  <dig> samples were investigated. details on this technique can be found in additional file  <dig>  when using fewer samples, the outline of mutation clusters used for establishing a test set gets progressively more blurred , but the number of lost and gained positions remains relatively small  even for only  <dig> samples. the dominant effect of reducing the number of available samples is an increased fpr . for very strict parameter settings the number of true positives also increases when using smaller datasets. in case of the samples used for demonstration here, to keep fprs below  <dig> per genome  while maintaining a tpr of at least 85%, no fewer than  <dig> samples are required for analysis.

to demonstrate how a decreased coverage in one of the samples effects the results, we down-sampled the sequence read data of the mutant  <dig> starting clone using different down-sampling factors  of  <dig> ,  <dig>  and  <dig>  and recalculated tprs and fprs for the parameter settings shown in the inset of fig. 3a. further details are included in additional file  <dig>  we found that having 70% of the original coverage had minimal impact on mutation detection, but further decreasing the sequencing depth produced lower tpr and higher fpr values. as the mutant  <dig> starting clone had a mean coverage of  <dig>  we advise using samples with a mean coverage of at least  <dig> 

isomut software implementation – guidelines for different experimental setups
we created an open-source c implementation of the somatic mutation detection steps of the above algorithm with a python wrapper for parallelisation . the tool expects bam files as its input and returns a list of detected mutations  by applying predefined filtering parameters and a post-processing step different for snvs and indels  in each genomic position. thus an appropriate reference genome is necessary for running isomut for alignment purposes, but mutations are not detected based on differences of the samples and the reference genome, but on differences between investigated samples.

isomut can be applied whenever multiple isogenic samples are available and unique mutations are sought. negative control samples should be used when possible. these can be either pre-experiment starting clones or dna preparations sequenced multiple times, neither of which should contain experiment-induced unique mutations. with the availability of negative controls and a positive control test mutation set, best results are achieved by optimising the three isomut filtering parameters as demonstrated above.

however, the availability of negative controls also allows for the tuning of the s score value for more rapid results, skipping the generation of positive test sets.

an example run of the isomut tool is shown in additional file  <dig>  in the following we present the main steps of the analysis. the generation of bam alignment files is not included and should be carried out separately, prior to running isomut.downloading and compiling isomut.

modifying user-specific data in the example script .

running isomut.

tuning of the s score threshold value to minimise false positives in negative control samples.




the first three steps are necessary, the fourth one is optional and requires the availability of negative control sample. whenever possible, this last fine-tuning step is strongly encouraged and yields better results than using the predefined filtering parameters only. for this procedure we suggest choosing less strict values for the sample_mut_freq_min and sample_cov_min filters, and further filtering the results based on the s score . the effects of tuning the s score value and the other_rnf_min parameter with fixed sample_mut_freq_min =  <dig>  and sample_cov_min =  <dig> is shown in fig. 3c. according to the figure, whenever a very low  fpr is desired, we suggest choosing a strict other_rnf_min value of  <dig>  . when the fpr can exceed  <dig> per gbp, less strict filtering is advised, other_rnf_min can be decreased to around  <dig> . isomut default values are sample_mut_freq_min =  <dig> , sample_cov_min =  <dig> and other_rnf_min =  <dig> .

in the absence of negative controls, step  should be skipped and we advise using filtering values from the inset of fig. 3a fitting the desired fpr. in this case snvs and indels are detected with the same filtering thresholds. more details on the performance of our method in such cases can be found in additional file  <dig>  an example run without using an s score threshold, with parameter settings sample_mut_freq_min =  <dig> , other_rnf_min =  <dig> , sample_cov_min =  <dig> can be found on fig.  <dig> for our dataset. this resulted in an average of only  <dig> mutations in starting clones or identical sample pairs , even though the dt <dig> genome differs from the chicken reference genome in  <dig>  million snps  <cit> . on the other hand, differently treated samples have up to  <dig> mutations, proving that the lack of these in untreated starting clones is not due to overly strict filtering.fig.  <dig> results of running isomut without tuning the s score value. a snv counts for each sample, grouped by genotype. colours indicate the treatment of the given sample. b indel counts for each sample, grouped by genotype. colours indicate the treatment of a given sample, darker bars representing insertions, lighter ones deletions




advantages of a straightforward filtering algorithm
although setting fixed thresholds for the above described simple filtering parameters might appear unsophisticated, the approach has a general advantage over complex statistical models besides being just as effective. in spite of recent developments of bioinformatics software and mutation calling algorithms, the unspoken consensus remains that ambiguous mutation calls are best verified by checking the raw sequencing data either in a genome viewer  or a pileup file. the above filtering parameters are directly related to the number of different bases detected at each genomic position, making the evaluation of mutations very straightforward, without the need for decoding the meaning of different p-values.

performance comparison with standard tools
we developed isomut because we had found that standard tools could not detect both snvs and indels in the above described samples with the precision required for biological interpretation without heavy additional in-house filtering. here we present a comparison with two very popular software tools, varscan  <dig>  <cit>  and mutect  <cit> .

varscan  <dig> was run in its tumor-normal comparison mode for the two pairs of identical samples in our dataset .  this way all mutations found by varscan  <dig> are false positives. filtering parameters and additional filtering steps were applied according to the instructions provided in  <cit> . the analysis resulted in  <dig>   <dig>   <dig> and  <dig> mutations in samples s <dig>  s <dig>  s <dig> and s <dig> respectively. on the other hand, the numbers of false positives using isomut were  <dig>   <dig>   <dig> and  <dig> for the same samples. this difference in performance is probably due to the fact that varscan  <dig> relies largely on filtering methods which have proved to be successful in case of human genomes, but are not available for our current dataset .

mutect is not capable of detecting indels , but we selected it for testing because besides normal-tumor sample pairs, mutect can also use a panel of normal samples. with default settings, mutect did not perform efficiently for our dataset, but with our control samples we were able to optimise mutect’s lod parameter threshold , and obtained good results. compared to mutect isomut has similar characteristics at very low false positive rates , and it has higher sensitivity when we allow for higher false positive rates . additionally we found that isomut adapts significantly better to lower sample numbers .

to get an estimate of the runtimes of different software, we ran isomut, mutect, mutect <dig> and varscan  <dig> on the short chicken chromosome  <dig>  using the  <dig> samples described above. we used a modest computer with a memory of 23 gb and  <dig> cores, with a performance achievable in a high-end desktop computer. varscan  <dig> was run in somatic mode by comparing each sample with its appropriate ‘normal’ pair, resulting in  <dig> comparisons. both for mutect and mutect <dig>  the general guidelines provided online were followed. first a unique panel of normal samples was created for each sample by combining the results of the artefact detection runs of all other samples. after this preliminary step, mutations were detected by comparing each sample with its ‘normal’ pair using the previously generated panel of normals. for further details on the used pipelines and scripts see additional file  <dig> 

using all resources of the above described computer, isomut turned out to be around  <dig> times faster than mutect <dig>  more than  <dig> times faster than mutect and more than  <dig> times faster than varscan  <dig> . extrapolating to the whole chicken genome, mutation analysis on the set of  <dig> samples using this 12-core computer would take 5 h with isomut, but over 35 days with mutect <dig>  the number of possible mutect <dig>  mutect and varscan  <dig> processes that can be run in parallel is limited by the finite memory of the computer, as all these software use java tools which require several java virtual machines when run in parallel. on the other hand, the parallelisation of isomut is only limited by the number cores on the computer and the runtime appears to be mainly i/o bound. the performance of the three java applications can be significantly improved by using a high-performance computer with a memory of 100–200 gb. however, high-end computer clusters have limited availability, and isomut presents a great speed advantage when using modest resources. even though it is not realistic to run any of the above tools on a single core without parallelisation, for a more straightforward comparison the results of such a scenario are also presented in table  <dig>  demonstrating similar performance advantages for isomut.table  <dig> comparison of runtimes of different tools with all available resources

table of the runtime comparison of different mutation detection software using a computer with 23 gb memory and  <dig> cores or a single core only. the tools were run on the  <dig>  mb chicken chromosome  <dig> using the 30-sample dataset used throughout this study




CONCLUSIONS
the described snv identification method requires no prior knowledge of genomic nucleotide polymorphisms . as these are expected to be present in all the isogenic samples, they are filtered out based on their difference from the reference genome. the availability of a non-mutated reference sample is also not necessary if the mutated samples contain independently formed mutations.

using the experimental dataset to establish reference test sets also presents a great advantage to currently used alternative approaches, which usually use some independent procedure to validate a small number of well-chosen snvs  <cit> . as this is usually done experimentally at a great cost of time and money, it is desirable to generate test sets in a more efficient manner. using these test sets we demonstrated the optimisation of filtering parameters for diploid chromosomes. this way we were able to present filtering parameter settings suitable for different desired fprs that can be used on datasets with no mutation-free control samples.

we designed isomut to be used in cases when multiple isogenic samples are available and unique mutations are sought. it is easily adapted to cases when the independence of mutations in certain sample subsets is not guaranteed; in these cases all but one of these sample subsets should be excluded from the analysis, while including several truly independent samples. based on down-sampling an experimental dataset, we can recommend a minimum sample number of  <dig> and a minimum short-read sequence coverage of  <dig> 

we strongly recommend sequencing negative control samples, and designed an adjustable approach that can be conveniently and quickly optimised for any specific dataset with such controls. this optimisation procedure can also be applied to non-diploid regions, where each level of ploidy should be treated separately.

mutation analysis is widely used in the study of the dna damaging effect of environmental substances and metabolism, dna repair, cancer, and evolution. isomut can aid these studies by providing a solution for the accurate identification of snvs and indels from pure isogenic samples such as cell clones or animal progeny regardless of the species and the available data on genomic polymorphisms.

additional files

additional file 1: table of samples. list of samples used in the study. half the samples had wild type  and the other half’mutant 1′ genotype. samples underwent different types of mutagenic treatments, which are also indicated in the table. 


additional file 2: detailed methods. a detailed description of methods for testing and mutation detection. 


additional file 3: generating pileup files. scripts and pipeline for pileup file generation. 


additional file 4: generating snv test sets. workflow for the generation of snv test cohorts. 


additional file 5: verification and description of filtering parameters. a detailed verification of the chosen filtering parameters. 


additional file 6: example run and tuning of isomut. an example run of isomut on a reduced dataset for easy testing. 


additional file 7: table of tested parameter settings. list of tested parameter settings with the resulting tpr and fpr values. 


additional file 8: running varscan  <dig> on our dataset. computational details and results of running varscan  <dig> on the described dataset. 


additional file 9: running mutect on our dataset with default settings. computational details and results of running mutect on the described dataset without the tuning of the lod parameter. 


additional file 10: comparison of isomut and mutect. comparison of false positives rates when running isomut versus running mutect with a finely tuned lod parameter. 


additional file 11: runtime comparison of standard tools and isomut. a list of scripts and functions used to test the speed of standard mutation detection tools and isomut, using all resources of the available computer and using a single core only. 




abbreviations
ds_factordown-sampling factor

fprfalse positive rate

indelinsertion and/or deletion

lohloss of heterozygosity

ngsnext generation sequencing

other_rnf_minminimal threshold for the ratio of reference reads in the noisiest non-selected sample

rnfreference nucleotide frequency

sample_cov_minminimal threshold for the coverage of the selected sample

sample_mut_freq_minminimal threshold for the ratio of the most common type of non-reference reads in the investigated sample

snpsingle nucleotide polymorphism

snvsingle nucleotide variation

tprtrue positive rate

wtwild type

