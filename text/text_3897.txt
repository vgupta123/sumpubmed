BACKGROUND
three-dimensional  images are now commonplace in biomedical research. techniques for direct capture of 3d data are widespread and new techniques are becoming available,  <cit>  to complement existing sectioning methods  <cit> , confocal and micro-ct/mri  <cit> . in addition such data is being stored in databases that can be accessed freely  and many more such atlases and bioinformatics resources will become available. there are a number of tools available for browsing such data, but they are either commercial with a significant cost for the user  or free but tied to a specific architecture. systems based purely on an architecture neutral language such as java  can be slow when processing large 3d volume images and have not been developed with the 3d atlas browsing application in mind. the purpose of this work is to combine the machine-architecture independence of java, with a highly portable, freely available fast and efficient c-coded image processing library tuned to the requirements of the atlas browsing and data analysis task. the java atlas-viewer  interface has been developed as a series of modules that can be readily re-used within other applications to build more complex interfaces. the java interface elements and the image processing library can be downloaded from the eadhb and emap web-sites. 3d images are regularly captured as part of biomedical research. in many fields the most useful and regularly used visualisation of the grey-level or colour voxel image is to view sections. these are 2d images generated by digitally cutting throught the volume and mimic the traditional mechanism of physical microtome sectioning for revealing detailed structure. the benefit of digital models is that the sectioning plane, orientation and position, can be selected arbitrarily to suit the required usage and the volume can be scanned interactively.

for the expert viewer, digital re-sectioning is sufficient for data-analysis but for others, panning through the volume at non-standard angles leads to disorientation. in addition if used in conjunction with atlas information in which the histology images are segmented in terms of the recognisable tissues, the building of a 3d view of the tissue/anatomical components is very difficult, particularly when learning the anatomy. this orientation and structural visualisation problem is solved by using 3d visualisation of the underlying tissue coupled with interactive feedback of the section location within the volume.

the basic structure of the jatlasview is therefore a combination of a 3d feedback window with a number of section views. each section view is independent and feedback is provided by displaying the position of the section within the 3d volume either as a simple polygon indicating the plane of section or as a full grey-level image, displayed appropriately in 3d. in addition each section will display the intersection with all other sections currently being viewed.

in this short note we describe the structure of the software and the functionality of the interface. this application is directed to the use of the eadhb and emap atlases and for browsing 3d grey-level data. in the first instance the data is formatted as a woolz image structure  <cit> , tools are available for data conversion and future versions will include this as standard.

implementation
the software design has been developed to meet a number of code requirements:

• portability to all major architectures – unix/x <dig>  microsoft windows and macintosh,

• fast and efficient image processing, compatible with existing formats and interfaces,

• freely available code and modular design so display elements and functionality can be easily included in other applications and

• the user-interface should be mappable to the "look and feel" of the specific machine window system.

the portability and user-interface behaviour requirements are satisfied by using java as the language and environment for the user interface level. for image processing we have adopted the ansi standard c image processing library woolz. this already includes the required functionality for calculating and manipulating section views through 3d voxel images and is open-source software.

a potential problem with java is that it can be very inefficient for heavy numerical work  and the effort required to port existing libraries  to java is too high. to solve this we use the tools within java for accessing "native" code so that the computational work is undertaken in c. the management and coding of the interface is potentially time-consuming and prone to error with any small change in the c code requiring complementary effort to modify the native interface code. we have addressed this problem by implementing an automated method which will build the interface directly from the c-library header files. by adopting a standard convention for function prototyping it is possible to use a parser generator, javacc <cit>  to build a java program that can analyse the c-headers and automatically generate the java class files and matching c-library files required for the java native interface . this has made it possible to relegate generating the interface to an automatic process hidden from the primary code develoment, in fact without this development the system would be very difficult to manage.

two other key choices have been made in the design of the code structure. the first is that the 3d visualisation and feedback should be developed at a level independent of the underlying hardware within an environment that allows a high level of abstraction of the 3d view. the java 3d extension to the core java environment provides such a model and we have adopted this as standard. java 3d is available for all java  <dig> platforms.

the second key choice is that the software will be delivered using java webstart <cit> . this is a freely available application that will download code across the internet and check system, version and supplementary module requirements. in addition it will start the application and maintain a local cached version. the local cache will be used for fast start if it is the same version as currently available at source or if the machine is off-line. source code is maintained with cvs <cit>  for version management and tracking and gnu gmake for compilation. the interfaces are developed using borland jbuilder <cit>  or a standard editor  and documented using javadoc/doxygen <cit> .

help is provided in two ways, the first is a simple popup "balloon" help on mouse-over and as a series of help files arranged using javahelp <cit>  which provides an indexing, search and context help facility. the help html files are generated using dreamweaver  <cit>  and maintained in a cvs repository.

java is now widely used and the first choice for new applications that require portability across machine architectures. it is a strict object-oriented language and interfaces adhere to the model-view-controller  design pattern  <cit> . java also defines a standard under the name java-bean, that components should meet to guarantee the mvc behaviour and enable easy re-use in other applications using case tools. we have adopted this standard for the jatlasviewer application so that individual interface elements, e.g. the section panel or even our extended view of the slider, can be used simply and conveniently in other code.

RESULTS
the user interface, shown in figure  <dig>  has a primary window for the 3d view and top-level menu options, and a number of section-views for visualising the virtual sections cut through the data. the basic functionality of the viewer is to allow interactive digital resectioning of a 3d grey-level or voxel image. the special feature of this viewer is that any number of section views, each with an independent and arbitrary orientation and position can be displayed. to aid navigation through the volume a 3d feedback window is provided. this displays the bounding box of the 3d volume and a transparent surface, of e.g. the embryo model. in addition feedback of the current section position is provided in a number of selectable options: an intersecting polygon of the plane with the bounding box, display of the plane filled with a solid colour and display of the image of the section mapped onto the plane in the 3d view.

with appropriate data, the jatlasviewer will import a mapped "anatomy". this is in two parts, a hierarchy of terms and a set of "domains" linked to specific terms in the hierarchy. the domains are 3d binary images which identify the region of space or set of voxels within the grey-level image associated with that term. the anatomy will then be used to provide feedback within the section views. these anatomy options, the controls for the section views and the main window options are discussed below.

main dialog
when the application is invoked a top-level dialog is presented to the user. before anything can be displayed the user must select a grey-level 3d image. currently this must be formatted as a woolz image, but converters for many 3d formats are available from the emap web site. once read in, the bounding box of the 3d voxel image will be displayed in the main window along with a surface representation of the data if available. this 3d view can be manipulated interactively using the cursor to provide views from arbitrary orientations and positions.

the menu options of the primary window are:

file
commands to open image data, save views, save and restore settings, recent file-list and quit.

view section
select a section view through the voxel model. a new window will display one of the pre-set sections which are transverse, frontal and sagittal planes if the image model is appropriately aligned. each of these can be set to display views at arbitrary orientations and locations within the 3d volume image.

anatomy
if the voxel model data is configured with a set of anatomical regions, these can be selected from the menu and displayed in the section views. for the eadhb and emap atlases the menu hierarchy corresponds to the humat and emap anatomy ontologies.

3d view
options to control the 3d visualisation in the main window, toggle the visibility of 3d surface, bounding box and intersection lines, display the focus section and selected anatomy.

orientation
preset 3d orientations to provide standard viewing directions.

help
on-line help menu.

the 3d view window displays the bounding box of the opened volume and a transparent view of the embryo surface. this surface is pre-determined and stored in the visualization toolkit  format. the 3d rendering is programmed in java 3d, the objects  inside the 3d view window can be freely interactively manipulated with controls  for rotation, translations and zoom .

if an anatomy hierarchy and associated data files are provided then an additional window will allow browsing through the ontology and selection of components for display both in the section views and the 3d view window. as for the embryo surface, the surface models are pre-calculated and stored in vtk format. the data layout recognized by the jatlasviewer is described in detail on the emap web-site.

section views
each section view is displayed in its own section viewer, either inside the main window  or in an independent external window. section viewers are java components that can be easily imported into other applications. the primary viewing control is to move the view plane-parallel through the image volume as a form of "digital microtome" with section thickness determined by the underlying resolution of the 3d image, i.e. moving the microtome by a single step will move to the next voxel in the stack. the assumption is that once the section orientation has been determined the typical use will be to explore the volume in this fashion. the section position is determined by the "distance" parameter which is the voxel distance from the fixed point . section orientation is selected by setting a number of view-angles. these control the view-direction which is perpendicular to the view-plane. we use the standard viewing angles defined by  <cit>  which are related to the euler angles of rotation  <cit> . two of the angles determine the view-direction and the third is rotation around that direction. these angles can be understood in nautical/aeronautical terms as pitch, yaw and roll respectively. these viewing controls are hidden by default.

in addition to the primary view-direction controls there are options to assist navigation. these are view-mode: options for automatic roll determination in terms of the pitch and yaw values.

fixed-point: select the fixed point used as the centre of rotation. the effect of setting this is to keep that voxel in view for all view-directions provided the "distance" is zero.

fixed-line: set a second fixed-point and constrain the view so that both fixed points remain in the section. the effect of this is to reduce the degrees of freedom to a single parameter of rotation around the line between the two points.

the remaining controls for each section view are to set the feedback options including between section views, between the section view and the 3d view and to allow saving of the view and its settings . the within view and between views feedback options are provided by the "show" menu. this provides toggle controls to enable:

• cursor position in the reference image coordinate space and image grey-value to be displayed,

• line of intersection with section views. if two views intersect then the line of intersection is displayed in the appropriate colour,

• anatomy feedback – shows the domain and name of the anatomical component under the current cursor position,

• visible fixed point,

• visible fixed line.

the 3d view can provide feedback of the viewed sections in terms of the 3d volume. for most users these are important aids to understanding the position and direction of the viewed section. most publications adhere to a convention for displaying section images, with this interface it is possible to view section data at any orientation and direction, i.e. depending on the view-direction the section may appear "reversed", so positional and directional feedback is critical. the positional feedback is provided in a number of forms but all indicate the intersection of the viewed plane with the bounding-box of the reference image. the most informative choice is to use texture mapping to render the grey-level image of the section into the 3d view. this is computationally expensive and so two other options are provided. these use the intersection polygon between the section plane and bounding box, either as-is, or filled with solid colour. the directional feedback is optional and provided by an arrow displayed in the 3d view.

anatomy manager
the primary purpose of the jatlasviewer is to provide an integrated viewer for 3d atlases. these comprise a grey-level  reference image and a set of domains or regions which are associated with terms in a text hierarchy. for a geographic atlas these would correspond to the physical geography and the areas associated with individual countries. the hierarchy would then list the country names, perhaps under continents and split into counties. for eadhb and emap the reference image is the voxel reconstruction of the embryo and the domains are delineated anatomical components. the hierarchy of terms are the corresponding anatomy ontologies  <cit> . the user can select anatomical terms from the ontology for display in the section and 3d views. once selected the component is handled by the anatomy manager  which controls the display properties visibility and colour. the anatomy-manager displays the full component name, visibility control toggles, colour chooser and a delete button. this style has been adopted because the number of possible component selections is large  and thus the user requires detailed control. in addition, although only selected terms in the anatomical hiearchy have corresponding domains defined, combinations of domains are generated "on-the-fly" so that larger scale structures can also be visualized.

the colour chooser button allows the user to change the colour of an anatomy component using a standard color chooser dialogue. the change is reflected immediately in all open section views and and the 3d feedback window..

the text field displays the full name of the anatomy component. anatomy components fall into  <dig> broad hierarchies starting either at embryo or extra-embryonic component. the intervening higher level structures are separated with "/"  and the final part of the name is capitalised. an asterisk following a name indicates that this is an atomic component, referred to in the anatomy menu as a . anatomical components are selected from the anatomy menu using a left mouse click. higher level components or structures may also be selected from the anatomy menu using a right mouse click or a combination of the shift key and  mouse click. the anatomy name may be scrolled by dragging the mouse left or right inside the text box.

the visibility toggles select whether a component is displayed in the section views and in the 3d feedback window. this fine control helps the process of analysis and allows the user to build up a visualization showing all or parts of the anatomy. the delete is a toggle control which removes an anatomy component from the table.

CONCLUSIONS
3d images are in widespread use in medical and biological research and there are a large number of options to view this data, but many of these are commercial and expensive, and are architecture and operating system dependent. more recently atlases and spatially mapped databases in biomedicine have been developed and whilst these packages can provide solutions for browsing this data we believe a simple, free-to-use, open-source and architecture-neutral solution provides a useful tool for biological research and teaching. the jatlasviewer is intended to fill this requirement. the viewer provides the browsing functionality to locate and display arbitrary sections through the data with simultaneous 3d display. the jatlasviewer can also read and display a full anatomy atlas.

the jatlasviewer is programmed in java. the 3d programming technology is java3d, which is a wrapper to the opengl or directx libraries. the java and java3d runtime environment are freely available from the sun microsystems web site and in most systems java is pre-installed. these techniques minimize the coding work and developing time. the file size of the jatlasviewer is less than  <dig>  mb. java webstart manages the deployment, installation, upgrade and launch via a simple click on a html page link or an icon in the webstart application. it is portable to any operating system to which java has been ported and is currently available for windows, linux, solaris and mac os.

the jatlasviewer design is of reusable and extensible components. based on the viewer a 3d tie-point collector for capturing 3d to 3d correspondences, and an atlas viewer that can also import gene expression data, have been developed.

availability and requirements
• project name: the mouse atlas project

• project home page: 

• application download: 

• operating system: solaris, linux, mac osx, ms windows.

• programming language: java, ansi c.

• other requirements: java  <dig> , javadoc, java 3d.

• license: gnu gpl

• any restrictions to use by non-academics: none

authors' contributions
authors gf and nb undertook the main java development and implementation, bh and rb develop and maintain the woolz image processing library and bh implemented the automatic generation of the jni. dd, jk, ms and sl all contributed to the design and testing of the interface and the preparation of the atlas data for use with the tool.

