BACKGROUND
the advent of bioimaging technology has made it possible to observe the molecular and cellular architecture and interactions that underlie essential functions within cells and tissues. the availability of bioimaging techniques  in laboratories is growing rapidly. so is the need for advanced image processing methods that facilitate analysis and interpretation at different scales of resolution and complexity.

electron tomography , which combines electron microscopy with the power of three-dimensional  imaging, is the leading technique to elucidate the molecular architecture of biological specimens in a close-to-native state  <cit> . et produces extremely noisy and low contrast 3d density maps . the poor signal-to-noise ratio  severely hinders visualization and interpretation. sophisticated filtering techniques are thus indispensable  <cit> . similar filtering needs arise in other bioimaging modalities .

noise reduction is paramount for proper interpretation or post-processing of multidimensional images in bioimaging in general, and electron tomography in particular. standard linear filtering techniques based on local averages or gaussian kernels succeed in reducing the noise, but at the expense of blurring edges and features  <cit> . anisotropic nonlinear diffusion  is currently one of the most powerful noise reduction techniques  <cit> . it achieves feature preservation and enhancement as the strength and direction of the smoothing are adaptively tuned to the local structures  <cit> . however, and may be intensive in terms of computation time and memory consumption  <cit>  and, moreover, there is need for tuning their parameters, which may be certainly far from trivial. these drawbacks have led to the proposal of other simpler, more practical, but less powerful, methods like iterative median filtering  <cit> , or attempts for automated parameter tuning  <cit> .

tomobflow is a program for noise reduction with feature-preserving capabilities based upon geometric flow, particularly the so-called beltrami flow. the fact that this approach is parameter-free is one of its main advantages and makes it user-friendly. therefore, tomobflow combines the power of diffusion-based noise filtering approaches with the easiness from the user's point of view. furthermore, the program has been implemented efficiently in order to minimize the memory requirements and reduce the computation time.

implementation
several approaches for noise reduction in multidimensional image processing are based on considering images as maps that are embedded into a higher dimension and that flow towards minimal surfaces  <cit> . in these approaches, a 2d image is considered as a 2-manifold embedded in 3d, i.e. the image i is regarded as a surface s = ) in a 3d space . similarly, a 3d volume i is considered as a 3-manifold embedded in a 4d space s = ). embedding the multidimensional image into a higher dimension allows the use of powerful differential geometry operators  <cit> .

the beltrami flow is an efficient geometric diffusion flow approach that aims to minimize the area of the image manifold, driving the flow towards a minimal surface solution while preserving edges. the beltrami flow is formulated as follows  <cit> :

   

where it = ∂i/∂t denotes the derivative of the image density i with respect to the time t; ▽i is the gradient vector, that is ▽i ≡  for 2d images whereas ▽i =  for 3d volumes, being ix = ∂i/∂x the derivative of i with respect to x ; div is the divergence operator, defined for a vector function f =  as div = ∂fx/∂x + ∂fy/∂y + ∂fz/∂z. finally, g denotes the determinant of the first fundamental form of the surface, which is g =  <dig> + |▽i| <dig> 

the term g comes from an induced metric for the euclidean -d space where the density of a n-d image is embedded in the -th dimension  <cit>  . this g provides the measure of the area expansion between the image domain i and the surface domain s, and thus plays an important role to drive the flow towards a surface with the least area.

moreover, the term  in equation  acts as an edge indicator since it is proven to be the projection of the normal-to-the-surface to the vector representing the -th dimension  <cit>  . therefore, the beltrami flow is a selective noise filtering method that preserves edges as minimizes diffusion at and across edges whereas it applies extensive diffusion elsewhere  <cit> .

in tomobflow, the implementation of the partial differential equation derived from equation  is based on finite differences, using an euler forward difference approximation for it and central differences to approximate the spatial derivatives :

   

where ik is the image in the k-th iteration, ht is the time step , ix is the derivative with respect to x , ixx is the second order derivative with respect to x  and ixy is the mixed second order partial derivative with respect to x and y. the derivatives are computed from the image in the previous iteration ik- <dig>  and are numerically approximated by central differences, as shown for x :

   

   

   

where i, j are the indices of the pixel. tomobflow has the option of applying a slight gaussian filtering  to the input dataset. this initial gaussian filtering is employed for regularization purposes to yield better estimates of the derivatives, as commonly used in other diffusion approaches  <cit> .

an efficient implementation has been carried out using single processor optimization  <cit>  to reduce memory and time consumption. only one copy of the input dataset, which is progressively updated during the processing, is held in memory. a sliding window  is used to keep the data needed for the current slice/row in order to avoid overwriting. figure  <dig> illustrates how the sliding window is used during the processing of 3d volumes. this optimization allows processing of huge datasets, as commonly found in et, on computers with modest amounts of memory.

to make it suitable for bioimaging in general, tomobflow is capable of dealing with most image formats in electron microscopy , in other microscopies  and general formats  by using the bsoft library  <cit> . furthermore, tomobflow is also able to filter 3d volumes, individual 2d images, or stacks of 2d images. finally, it is available for most unix platforms, including os x and windows . the command line user interface follows the unix-style and the options follow the conventions of bsoft  <cit> . a comprehensive documentation is provided at the website .

RESULTS
the performance of tomobflow is illustrated with its application to a number of experimental datasets obtained from electron tomography. tomograms  of  spiny dendrite,  algae chloroplast,  mitochondrion,  small unilamellar liposomes with integrin,  vaccinia virion and  human immunodeficiency virions  were tested. different contrast and signal-to-noise ratio were present in those datasets as they were obtained by using different preparation techniques. the specimens in  were stained before imaged, hence their much better contrast in the original dataset compared to the other specimens in , which were imaged while frozen in close-to-native conditions without stain. the datasets in  were taken from the cell centered database  <cit>  . the datasets in  were taken from the electron microscopy data bank  at the european bioinformatics institute  <cit>  . the vaccinia virus dataset was obtained from a previous work  <cit> . the mitochondrion dataset was kindly provided by dr. g. perkins. in order to compare tomobflow with other comparable standard  nonlinear noise reduction technique, the datasets were also subjected to iterative median filtering  <cit>  as implemented in bsoft  <cit> . this method is getting increasing interest in the electron microscopy field  <cit> . the standard number of three iterations was used for all the experiments carried out in this work where the iterative median filtering was involved. for tomobflow, a number of iterations between  <dig> and  <dig> were used, which yielded a satisfactory level of smoothness for the background of the datasets. a gaussian filtering with standard deviation of  <dig> was used to regularize the derivative estimation in tomobflow. for the results obtained with tomobflow, the median filtering was not used prior to the iterations of the beltrami flow.

the evolution of the denoising with the iterations was then studied on the hiv- <dig> dataset. figure  <dig> shows the result of tomobflow after  <dig>   <dig>   <dig>   <dig> and  <dig> iterations. it is clearly observed that the background is progressively flattened whereas the structural features are well preserved in general. however, the decrease in resolution at high number of iterations is expected to blur some details of interest. for instance, at  <dig> iterations some edges begin to look blurred. a more objective assessment of these results was carried out based on snr  measures, as defined in  <cit> : snr = /σb, where is and ib denote the average intensity in the structure of interest and in the background, respectively, and σb is the standard deviation of the background. this snr metric is similar to the contrast-to-noise ratio  used in other disciplines  <cit> . the background in this tomogram was determined based on the isosurfacing thresholds  used in figure  <dig>  and refined afterwards by means of some morphological operators applied in this sequence: flooding, dilation  and erosion . this background was used for computing all the snr measures presented in this work. table  <dig> summarizes the snr results of the tomograms shown in figure  <dig>  the snr measures quantitatively reflect the effects of the denoising seen in the visual results in figure  <dig>  the snr for the original tomogram was  <dig> . tomobflow outperforms the median filtering  at  <dig> or more iterations . the snr was also computed for  <dig>   <dig> and  <dig> iterations of tomobflow . as reflected by the snr metric, the results begin to degrade at a number of tomobflow iterations between  <dig> and  <dig>  therefore, the snr metric acts as an indicator of the degradation with high number of iterations.

the snr was computed for the original dataset and the denoised versions. for the median filtering, the standard of three iterations were used. for tomobflow, several tests with different iterations  were performed in order to study the evolution with time and to identify the decrease in resolution at high number of cycles.

the snr metric was also used to assess the results shown in figure 4c. the result from  <dig> iterations of tomobflow yielded snr  <dig> , higher than the result from the median filtering . these measures complement and confirm the visual results shown in figure 4c. for comparison, the snr was computed for a denoised version of the tomogram with anisotropic nonlinear diffusion, which is the leading denoising method in the field. the package tomoand  was used  <cit>  with the automated parameter tuning activated  <cit> . the number of iterations  and the initial gaussian filtering  was set up as with tomobflow. the snr of the tomoand-denoised tomogram turned out to be  <dig> . therefore, and is superior to tomobflow, though at the expense of higher computation time and memory consumption. this behaviour was expected because the beltrami flow is an isotropic nonlinear method and thus it is not equipped with the enhancement capabilities of anisotropic nonlinear methods, hence these two methods are not directly comparable. 

tomobflow and the iterative median filtering were also compared in terms of computation time. the average time per iteration was computed in both methods  and the ratio between both was then calculated. for the six datasets, which had very different sizes , it turned out that a single iteration in the median filtering took around  <dig> times more than a single iteration of tomobflow, regardless of the data size. as the number of iterations of tomobflow is usually between  <dig> and  <dig>  this involves that the computation times for both methods are of the same order of magnitude . as far as memory consumption is concerned, tomobflow only used space for one copy of the dataset, as described above. it thus required half the amount of memory allocated by the median filtering  as implemented in bsoft.

discussion
tomobflow allows efficient noise reduction with levels of background smoothing and feature preservation better than other comparable standard nonlinear filtering methods. tomobflow applies an isotropic nonlinear filtering method based on the beltrami flow, which tunes the strength of the smoothing according to a local edge indicator. in contrast to anisotropic nonlinear filtering , there is no enhancement of features since the direction of the smoothing is not tuned. therefore, it must not be expected that tomobflow will outperform and. in this regard, the comparison with and carried out in this work suggests that the method based on the beltrami flow lies between the median filtering and the and methods.

the main advantage of the method implemented in tomobflow stems from the fact that there is no need for complicated parameter tuning. nevertheless, it is indeed an iterative method and one thus needs to specify a number of iterations. but this does not pose a serious inconvenience as the program easily allows an experiment to be continued with further iterations, if necessary. on the other hand, there has been intense investigation on objective stopping criteria for iterative noise reduction methods . however, none of the proposed criteria have turned out to be generally applicable and the number of iterations still remains to be fixed subjectively by visual inspection of the results .

on the other hand, the computational burden involved by sophisticated diffusion-based filtering methods precludes their integration on interactive environments  <cit> . the fact that the method implemented in tomobflow is not computationally expensive along with the optimized implementation in terms of memory consumption makes this filtering method very appropriate to be embedded into interactive packages  <cit> .

CONCLUSIONS
tomobflow allows efficient noise filtering of datasets with preservation of the features of interest, thereby yielding data better suited for post-processing, visualization and interpretation. the program is versatile to deal with different types and formats of multidimensional images produced by bioimaging techniques.

availability and requirements
project name: tomobflow

project home page: 

operating system: unix-based .

programming language: c.

other requirements: none.

license: public domain binaries.

any restrictions to use by non-academics: none.

authors' contributions
jjf conceived and designed the work, developed the program, carried out the experiments, interpreted the resulting data and wrote the manuscript.

