BACKGROUND
in recent years there has been a great interest in modeling and simulating various aspects of population dynamics in biological and ecological systems . the increasing computational resources along with a deeper understanding of biological and ecological phenomena have led to the development of many languages for describing, analyzing and simulating concurrent stochastic processes. many such languages specify markovian dynamics and differ by level of abstraction, ease and complexity of the description and execution efficiency  <cit> . two widely used formalisms are based on chemical reaction networks   <cit>  and stochastic process algebras   <cit> .

crns were originally used to describe chemical systems. a crn description consists of a finite set of reactions acting on a finite number of species. each reaction specifies the identity and stoichiometry of the reactants and products along with a rate constant. many processes can be described using crns, for example, predator-prey models  <cit> , cellular cascade pathways  <cit> , cancer progression  <cit> , epidemics dynamics  <cit> , and many others  <cit> . each of these processes consists of a continuous interaction between individual species  that occurs at a certain rate and produces a group of other individuals  that can be of the same  or of different type. the description of dynamical systems using crn is relatively simple and can be used both for analytical solving and simulations. however, this approach neglects biological aspects of the described systems by treating each object  as a simple entity, which ignores its environmental context and structure. for example, many molecular objects maintain their overall identity while changing in specific attributes, such as chemical modification or location. when using a crn abstraction such molecules cannot retain identity while changing state.

pas, on the other hand, are a family of mathematical formalisms that were originally developed to model concurrent computer systems. they enable the abstraction and specification of communication and synchronization between a collection of processes by passing messages between them. one of the most well studied pa is the π -calculus, which has been shown to be very useful in describing a range of biological systems  <cit> . the language consists of processes that are mapped to real-world objects, and channels, which are mapped to communications and interactions between the different objects. a unique feature of the π -calculus allows to dynamically communicate new channels between the processes , which enables the objects to keep their identity while changing their internal states or interactions with other objects. this feature is more compatible with real biological and ecological scenarios and fits well to the way we think and observe these processes. it also allows one to abstract and specify the dynamics in a more accurate fashion. it has also been shown that this abstraction can be treated as an executable computer program, allowing to stochastically simulate any specified model  <cit> .

many tools have been developed in order to allow and simplify the use of mathematical modeling for the life-science community, and each one has its strengths and weaknesses . there is no single formalism that has all the required features and choosing the appropriate one depends on the specific goals and resources of the modeler. our goal in this work is to develop and formulate a simpler and practical tool for modeling and simulating the behavior and interaction of populations. we do so by extending the notion of stochastic tree grammar   <cit>  by incorporating both rates and probabilities to the transition rules. these can be dynamically updated by defining them as functions of the system’s state, which includes global values such as current population size, generation count or elapsed time. in addition, we extend the system by allowing each individual to hold its own internal states which can change through inheritance. we later discuss implementation of stochastic simulation and the relation to ordinary differential equations .

a prominent feature of the language is that it enables to stochastically produce possible lineage trees corresponding to single executions. these lineage trees contain a representation of the entire events history of the process, including the dynamics that led to the existing as well as to the extinct individuals. as opposed to standard approaches that output only the population size dynamics, our implementation also outputs the corresponding lineage trees, which can be used to analyze the evolutionary and developmental history of the process.

recently, vaughan et al.  <cit>  presented the usage of crns as lineage grammars and used them to simulate phylogenetic trees. although they enable to sample possible genealogies based on the defined reaction rules, they do not allow the specification and analysis of more complex behaviors such as feedback onto the dynamic rates and general inherited properties.

throughout the paper, we demonstrate the usability of the language by presenting a wide range of examples that can be modeled and simulated using this approach. the examples show that the language can provide simple descriptions of systems from various domains. example parameter values were taken from the literature when available or chosen arbitrarily in order to simplify the presentation.

RESULTS
estg programs
following is an example of an estg program for stem-cell differentiation  <cit> :
  

in this example, sc  divide symmetrically  <dig>  times per day, while self-renewing or differentiating with the same probability , and diff  can once a day either proliferate  or die .

alternatively, one can define an average time to event t instead of a rate, which can be translated interchangeably into a rate using . the above rules are then written:
  

an execution of an estg program proceeds through the stochastic application of its transition rules on its state. an example execution of the program, on an initial  <dig> sc and  <dig> diff, can be summarized by a cell lineage tree and population size graphs shown in figure 1b and figure 1c. in addition to single executions, estg can also be used for obtaining overall population statistics, for example, to calculate the average population size over time  and the distribution of clone sizes .figure  <dig> 
an example of the stem cell differentiation program execution. the program was executed up to simulation time 100 days.  schematic representation of the estg rules .  population size over time of a specific execution.  cell lineage tree of a specific execution .  average population size over time .  clone size distribution, which is the final population size derived from each initiating individual .



following is another example of an estg program for the luria–delbrück model  <cit> :
  

in this model, wild-type bacteria  are randomly mutated  to form a resistant bacteria , thus the population size of mutated bacteria varies dramatically and is dependent on the timing in which the mutation has happened. figure 2b and figure 2c show specific executions of typical and rare lineage trees. averaging over many executions can yield average population size  and clone size distribution .figure  <dig> 
an example of the luria–delbrück program execution. the program was executed from  <dig> wt to  <dig> cells.  schematic representation of the estg rules.  typical lineage tree execution where mutations do not occur early.  rare lineage tree execution where a mutation occurs early.  average population size over time .  clone size distribution . in the rare events where the mutation happens early in the lineage, the clone size of the mutated population is large.



internal states
we define internal states for each species as a vector of variables that can change, either deterministically or stochastically for each individual, with every execution of a rule. internal states can be used to model inherited attributes, such as mutations or substance accumulation, or record historical events such as the number of generations, number of symmetrical/asymmetrical divisions, or time since historical events. we thus extend the basic rules defined above to include internal states which are functions of the predecessor’s internal states. for example, extending the previous stem-cell differentiation scenario:
  

in this example, we define a vector of n variables , which correspond to the number of repeats in n microsatellite  loci in the dna  <cit> . in every cell division, the number of ms repeats for each locus changes according to the stochastic function fms, which can cause either a decrease or an increase of one repeat with probability p <cit> :
  

this simulated data can be used for example to evaluate the relationship between n, the number of ms, and the accuracy of phylogenetic reconstruction based on ms lengths of the tree .

another example for the use of internal states is the following program, which counts the number of generations since each differentiation event:
  

figure  <dig> shows various distribution statistics of the internal state gen over the population at different time points.figure  <dig> 
an example of generation counter internal state. each species of the type diff holds an internal state called gen which holds the number of cell divisions since the differentiation event. the histogram of the gen values over the entire population can be calculated at different time points ,  and  respectively).



other examples of internal states can be the counting of historical events  or measuring the time since a certain event.

probabilities and rates as functions
population dynamics can change based on various conditions such as population size, internal or external changes, and elapsed time. a common phenomenon in population dynamics is the reaching of a homeostasis, meaning that at a certain point, the population size reaches a steady state.

a simple example is the growth of a species until reaching a target size. consider the following parametric rule:
  

without feedback regulation on the population size, a setting of  results in an extinction with probability  <dig>  <cit> . a simple regulation scheme is the logistic model  <cit> :
  

where n is the population size, r is the growth rate and k is the target size . we can use the above parametric estg rule to model a logistic population growth by solving:

 
  

for simplicity, r in the estg rule is the same as the r in the logistic model.

we then get:
  

figure 4b and figure 4c show the resulting dynamics  starting from a single a of the following program :figure  <dig> 
an example of dynamic population growth. an example of a simple proliferation with fate probabilities and rates that are functions of the population size.  schematic representation of the estg rules.  population size over time of a logistic growth starting from a single instance.  the corresponding lineage representation of the specific execution.  population size over time of a production-removal growth starting from a single instance.  the corresponding lineage representation of the specific execution.



  

in a different scenario, the growth is also regulated by the rate but is leading to the same steady state. using the following production-removal equation  <cit> :
  

we can model the dynamics using the parametric estg by solving:
    

the steady state of this system is  and for simplicity we limit p to be either  <dig> or  <dig>  and set α =  <dig>  β =  <dig>  we thus define the following estg program:
  

here, the rate is inversely dependent on the population size and the population is growing until reaching the steady state that is maintained by a feedback on p, which causes either a proliferation  or death . figure 4d and figure 4e show the resulting dynamics starting from a single a.

another interesting scenario is described in  <cit> , where an optimal development of the intestinal crypts is analysed. in the first stage, stem-cells are quickly amplified using self-replicating symmetric divisions, and after reaching the target size they differentiate asymmetrically into stem-cells and differentiated cells. we can describe this scenario using the following rules:
  

where |x|time = t is the population size of species x at time t and |x|target is the target population size of x. although not described in  <cit> , we continue the scenario with homeostasis by solving:
  

we thus extend the program with the following:
  

figure  <dig> shows simulation results of a specific execution.figure  <dig> 
rules for optimal development of the crypt. simulation results of the rules for optimal development of the crypt . the rules are executed with r
1 =  <dig> , r
2 =  <dig>  |sc|time = 0 =  <dig>  |diff|time = 0 =  <dig>  |sc|target =  <dig>  |diff|target =  <dig> . shown are execution results for two time windows starting with one sc.  schematic representation of the estg rules.  population size for simulation time of 10 days. the beginning of the process is shown where the switch between p
1 =  <dig> and p
1 =  <dig> occurs at around time t =  <dig> .  the corresponding lineage representation of the specific execution.  population size for simulation time of 50 days. shown is the homeostatic phase that occurs after |diff|time = t reaches |diff|target at around time t =  <dig>   the corresponding lineage representation of the specific execution. it is interesting to observe the  <dig> clones that are maintained by the  <dig> scs.



an example from a different regime is the predator/prey model of lotka-volterra  <cit> . it describes the interaction dynamics between two species using two odes:
  

where ci are parameters. these equations are usually translated into the following mass action kinetic reactions:
  

since estg has only context-free transitions, we convert the second reaction into two unimolecular reactions while preserving the 2nd order rate . the new reactions and their rates are described in table  <dig>  we note that although these new reactions are not identical to the original ones, they are still in agreement with the odes described above. the model can be described using the following parameterized estg program:table  <dig> 
lotka-volterra unimolecular representation



prey → 2prey
c
1 ⋅ prey

prey → ϕ
c
2 ⋅ prey ⋅ predator

predator → 2predator
c
2 ⋅ prey ⋅ predator

predator → ϕ
c
3 ⋅ predator


  

figure  <dig> shows an example execution of the program.figure  <dig> 
an example execution of the lotka-volterra scheme. an output example of the executed program using c
1 =  <dig>  c
2 =  <dig> , c
3 =  <dig>  |prey|time = 0 = |predator|time = 0 =  <dig>   population size as a function of time.  a lineage tree of one of the  <dig> originating preys.  a lineage tree of one of the  <dig> originating predators. both  and  exhibit the characteristic bottleneck phenomenon, where most lineages get extinct.



the role of different feedback strategies on the control of organ and tissue growth can be investigated through the rates and probabilities of cellular decisions. lander et al.  <cit>  suggest two types of feedback strategies for the olfactory epithelium, one on the rate of division and the other on the probability of self-renewal . they show that a feedback control onto the probability is a much more effective strategy for steady-state robustness and rapid regeneration.

the two strategies can be described using the following estg program :
  

and the two feedback strategies are implemented by updating the inp parameters.

strategy 1: feedback onto the probability

 where g is a constant.

strategy 2: feedback onto the rate:

 where h is a constantfigure  <dig> shows possible executions generated using the two suggested strategies.figure  <dig> 
scenarios for feedback regulation.  schematic representation of the estg rules. left plots - feedback regulation onto the probability, where population size of an example execution, average population size over  <dig> executions and an example of a lineage tree starting from a single sc are shown . execution started with  <dig> sc
s,  simulation time:  <dig>  right plots - feedback regulation onto the rate, where population size of an example execution, average population size over  <dig> executions and an example of a lineage tree starting from  <dig> sc
s are shown . execution started with  <dig> sc
s and  <dig> , simulation time:  <dig> .



possible extensions
compartments
in many cases the population moves stochastically between different compartments, where each compartment corresponds to a different environment and different resources. extending the language to include compartments allows one to define the same transition rules for species from the same type but different rates and probabilities, depending on the physical location of the individual. the system’s state is then extended to include the population size in each compartment. in addition to the regular transition rules, one also needs to define rules for the migration of each species between each two compartments.

individual’s probabilities and rates as functions
defining probabilities and rates for each individual separately is not recommended due to heavy computational requirements when implementing such a scenario, however, an extension of the language can support such a definition. in this case we can allow the probabilities and rates of each individual to be also dependent on its internal states. this allows each individual to have a distinct stochastic value of its probabilities and transition rates. for example, we can define a more sophisticated predator/prey model where the probability of reproduction is dependent on the individual’s age  which is represented as an internal state, or define the proliferation dynamics of a cell based on its mutations .

CONCLUSIONS
stochastic simulation is a powerful tool to execute a complicated modeling system for which a closed form analytical solution is not possible. in addition, a simulation can generate a sample of representative scenarios that can be used for further analysis or as inputs to other programs. the complexity of natural phenomena requires a formal description framework which on one hand should be rich enough to capture the complexity and dynamics of the system and on the other hand will be compact and simple so it can be widely used by a broad community and could be implemented efficiently. there are many systems that are purely generative and derive their core results by ignoring interactions . although the assumption of independence enables certain analytical techniques, it precludes the ability to model processes and lineages that evolve through complex interactions between individuals and their environment. in order to allow both generativity and interaction, systems such as pa and crn are more suitable. as described in  <cit> , the trend towards individual-based stochastic models carries many advantages; they are easier to construct, more intuitive and can predict richer phenomena than population level models. in addition, it is possible to deduce population level conclusions  from the stochastic model. the presented formalism does not offer a new modeling approach in the sense that estg programs can be translated interchangeably into other languages . instead, the suggested estg language formalism allows a simpler description and specification of complex stochastic dynamics of individual entities. as demonstrated by the host of examples provided, these may include population level feedback from the current system’s state  onto the rates and probabilities of the different species. in addition, estg, as a lineage grammar also enables the representation and analysis of historical events including those of extinct sub-lineages and transitional time points. derivation trees produced by simulations can be examined for consistency with specific biological hypotheses  <cit> , so that estg models can be validated or falsified on the basis of the trees that they generate.

the language can also be used as a basis for inference and learning of the system’s governing rules, described in the estg formalism as the transition rules and the underlying rates and probabilities as functions of the system’s state. the question of parameter inference from biological data is an active area of study . in our context, biological knowledge inferred from experimentally-obtained trees  could be used in order to infer the corresponding lineage grammars  <cit> . this will allow the use of computers and computing resources in order to gain new biological insights. this is a great challenge, especially given noise and hidden variables, and is a subject of our future work. we hope that the development of theoretical models and tools, such as the one presented here, will facilitate research in this important direction.

