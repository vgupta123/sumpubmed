BACKGROUND
dna- and rna-binding proteins are essential for the regulation of gene expression at many levels. they control many biological processes in all organisms by altering gene expression at the levels of transcription, pre-mrna splicing, mrna export, stability, localization, and translation. although some proteins bind specific sequences, others bind short or degenerate patterns, also called motifs, that occur frequently in the genome by chance. these patterns can even be defined by base composition rather than by an exact sequence.

proteins that bind frequently-occurring sites cannot individually be highly specific, but such proteins can achieve specificity by cooperation in complexes clustered near regulatory sequences. this combinatorial control is the rule rather than the exception in higher eukaryotes for critical processes including transcription  <cit>  and splicing  <cit> , and has also been observed in bacterial transcription  <cit> . building up regulatory complexes in this way, rather than using individual gene- or transcript-specific factors, confers many advantages. these advantages include tissue-specific fine-tuning of biological responses through interactions with different combinations of proteins, increased evolutionary stability by mitigating deleterious effects of changes in an individual pattern, and repeated recognition of sequences by dynamic multi-protein complexes such as the spliceosome  <cit> .

unfortunately, this combinatorial flexibility substantially complicates computational searches for patterns involved in function, because most occurrences of most patterns are not biologically meaningful. although there are many well-established approaches for defining and searching for patterns in strings, these techniques typically either require a linear scan of the sequence or cannot deal with compositionally-defined patterns. examples of the former type include regular expressions  and weight matrices ; examples of the latter include suffix trees and suffix arrays . because the patterns for nucleic acid binding proteins are often poorly defined, it is critical to avoid a linear-time search, and to be able to conveniently locate multiple patterns near regions of biological interest. in this paper, we present fast-find , a new algorithm that addresses this class of problem by indexing sequences in a relational database.

as an example of the application of fast-find to the study of combinatorial regulation, we searched for patterns potentially involved in alternative polyadenylation. polyadenylation, or addition of a poly tail at the 3' end of a cleaved mrna, is required for the synthesis of almost all mrnas in higher eukaryotes  <cit> . the polyadenylation machinery recognizes a combination of two patterns: a conserved aauaaa consensus polyadenylation signal located between  <dig> and  <dig> nucleotides upstream of the cleavage site, and a relatively flexible gu-rich enhancer element located between  <dig> and  <dig> nucleotides downstream of the cleavage site  <cit> .

alternative polyadenylation, in which the transcripts from a single gene have alternative 3' ends, is an important but poorly-studied process. although both tissue-specific and disease-specific differences in alternative polyadenylation patterns have been reported  <cit> , and many transcripts in different organisms have alternative 3' ends   <cit> , little is known about how this important process of gene regulation occurs. we chose to study alternative polyadenylation in drosophila because this model organism can be conveniently manipulated by genetic techniques to confirm predictions from genome-wide sequence analysis.

implementation
databases and programming
we downloaded sequences for drosophila complementary dnas   <cit>  and expressed sequence tags   <cit>  in fasta format. all source code for fast-find, written in python, is available from the authors upon request.

we implemented fast-find in a relational database because relational database management systems  automatically provide solutions to many problems that would need to be considered if using custom data structures and code to support searches. these solutions include a standard, declarative language for performing queries , efficient indexing mechanisms and caching strategies, support for concurrent access by multiple users, and scalability to multiple processors and/or distributed systems  <cit> .

fast-find consists of two phases: a one-time, o indexing phase, which generates and populates the database tables, and an o search phase, in which arbitrary queries can be evaluated. we now describe these phases in detail.

fast-find indexing phase
overview
during the fast-find indexing phase, we analyze each sequence using overlapping 32-base sliding windows. we pack the bases in each window into a bitvector  and store them in the database. we also use overlapping, variable-sized sliding windows to calculate the composition of each 3- to 20-base substring within the sequence. this indexing produces two ancillary tables. one table contains the bitvector and position of each  <dig> base window, while the other contains a window size, a pointer to the window composition, and the window position in the longer sequence. the bitvector table is used for exact matching, and the composition table is used for compositionally defined patterns.

sequence indexing
for each unambiguous position n in the sequence we compute and store an 8-byte integer from the  <dig> base window,  for exact matching , which we associate with the identifier of the matching sequence and the position where the match occurred. to save both computation time and space, we use a bitvector encoding scheme that packs non-degenerate sequences into  <dig> bits per base: the first bit indicates purines  or pyrimidines , and the second indicates weak  or strong  h-bonding for base pairing. this type of 2-bit encoding has been widely used elsewhere . each base maps to a specific bit pattern: a maps to  <dig>  g to  <dig>  u/t to  <dig>  and c to  <dig>  we excluded the few records in our data set that contained degenerate bases, accounting for less than  <dig> % of the data.

composition indexing
for each unambiguous position n in the sequence we compute and store the base composition of all 3- to 20-base windows , where y is the length of the window . we thus calculate and store the location and composition of all sliding windows from  <dig> to  <dig> bases in length within each sequence; all biologically relevant protein-binding sites in rna that we are aware of fall within this range.

fast-find search phase
overview
fast-find supports composition and exact searches by numerical range operations on the composition and sequence indexes respectively. it supports inexact searches  using application logic rather than within the database.

composition searches
to find a pattern of specified length and composition, we use range operations to look up all possible counts of each of the four bases that could match the pattern, and join these compositions to the table containing the locations of the windows that match them. this design allows us to rapidly locate arbitrarily degenerate patterns with a specified range of compositions.

exact pattern searches
to find exact patterns up to  <dig> bases , we search the sequence index for windows that contain the pattern as a prefix. instead of storing all window sizes up to  <dig> bases , we use bit masking to simulate the effect of storing smaller windows. because we store each window as an 8-byte integer , we can perform searches by finding all windows where the s bits in a given pattern  exactly matched the first t bits of the window. to examine the first t bits of a 64-bit window we need to mask out the remaining  bits. since 2^n > , we can generate a mask of all 0's for bit positions < 64-t- <dig> for the lower bound, l, and a mask of all 1's for bit positions < 64-t- <dig> for the upper bound, u. thus, the first t bits in an integer between l and u will match the s bits of the given pattern. however, if there is a position y in the first t bits of a window that differs from the corresponding position in the s bits of the given pattern, the computed search integer for the given pattern will be 2^ +y) > u or 2^ +y) < l. thus, by simply searching for a bounded range of integers, we can immediately find the location of any s/ <dig> base pattern in the sequences.

degenerate pattern searches
we support searches using patterns containing any of the iupac degenerate bases using two methods, depending on the level of degeneracy. in the first method, we generate all possible sequences that match the pattern, and then combining the search results of exact matching from each sequence. although this technique is exponential ) in the number of unspecified positions, five degenerate bases  are sufficient to identify essentially all well-characterized binding sites for rna-binding proteins  <cit>  and imposes little computational burden in practice. in the second method, we use a different encoding scheme in which each position is represented by four bits, indicating presence/absence of each base in the degenerate symbol, and perform masked searches. this latter method requires a linear table scan, making it o in the number of indexed windows, but is useful for highly degenerate searches and for searches against sequences containing ambiguous bases.

applying fast-find to alternative polyadenylation in drosophila
overview
to apply fast-find to the study of alternative polyadenylation, we needed to identify alternatively polyadenylated transcripts. rather than using annotated polyadenylation sites, which are unreliable, we identified alternative polyadenylation by fully indexing the drosophila cdna and est libraries downloaded from ncbi and identifying cdnas that contained both 3' and internal matches to ests annotated as "3prime" or "complete". we then defined the region of interest for alternative polyadenylation as the region from  <dig> bases upstream of the first internal match to a cdna through the end of the sequence . finally, we constructed search tables containing only this region of interest to reduce the table sizes, increasing performance.

mapping cdnas and ests onto the genome
we used blat  <cit>  to map cdnas and ests onto the genome, which also provided information about which ests matched which cdnas .

identifying candidates for alternative polyadenylation
we defined cdnas with alternative 3' ends as candidates for alternative polyadenylation. these candidates were identified by ensuring that at least two sets of ests annotated as "3prime" or "complete" matched somewhere on the same cdna. the 'region of interest' for alternative polyadenylation is defined as the region within a candidate cdna sequence that begins  <dig> nucleotides upstream of the end of the first est set through the end of the cdna . sequences within this region were further indexed to support pattern searches as described above.

properties of the alternative polyadenylation database
the relational database took ~ <dig> hours to build on a  <dig>  ghz pentium  <dig> dell optiplex, a one-time investment because incremental updates can be used to add new data as necessary, and required ~ <dig> gb  of disk space. for comparison, the original est library was  <dig> mb and the original cdna library was  <dig> mb. from the matches between drosophila cdnas and ests, we determined the subset of cdnas that showed evidence of potential alternative polyadenylation. ~12% of the est sequences matched the 3' ends of the corresponding mrnas, the remainder matching the 5' ends. we identified ~ <dig> candidate cdnas for further indexing. these restrictions minimize potential concerns about multi-gene families and avoid artifacts from contaminants in the est libraries  <cit> . as a positive control for the method, vimar shows two alternatively polyadenylated transcripts for which the 3'ends in the database are supported by experimental analysis  <cit> . as expected, queries for sequences from only the region of interest specifically identify this candidate using fast-find.

confirming the significance of motif co-occurrence
to test whether pairs of binding sites were correlated in abundance, we used the g test to determine whether transcripts that contained one site were more likely to contain the other. the g test is a test for association similar to the familiar chi-squared test widely used in genetics, but is more accurate for small sample sizes  <cit> . to confirm the g test results, we performed monte carlo simulations of the sequences using three markov models:  first-order markov model using the full set of regions of interest as a training set;  fifth-order markov model using the full set of regions of interest as a training set; and  permuting the nucleotides in each sequence independently. the first two of these models preserve the single-base and five-base 'word' frequencies respectively, while the third model accounts for compositional heterogeneity between the sequences. for each model, we made  <dig> random sets of sequences of the same length as the actual sequences, recalculated the g statistic using each random set, and compared the value of the g statistic in the actual set to that in each random set. the empirical p-value was estimated as the fraction of random sets with lower g scores than the actual set. this analysis corrects for any error due to biases in the length or composition of the alternatively polyadenylated transcripts. as an additional control, we verified that the counts and locations of motifs identified by fast-find were identical to those found by using python's built-in string-matching facility.

web interface
we have set up a web form allowing searches of arbitrary combinatorial patterns against the portions of the drosophila cdnas relevant for alternative end formation and retrieval of relevant sequences at  <cit> .

RESULTS
performance characteristics for arbitrary pattern searches
we tested the effects of several variables on the time taken to search for patterns in the database within regions of interest for alternative polyadenylation. the time taken to perform an exact search was independent of the size of the pattern; it took < <dig>  seconds for patterns expanding to  <dig> to  <dig> sequences, containing  <dig>   <dig>   <dig>  or  <dig> nucleotides and  <dig>   <dig>   <dig>  or  <dig> degenerate nucleotides. in addition, for a compositionally defined pattern  =  <dig>  length = 17), there were  <dig> possible matching sequences: this search identified  <dig> cdnas, and took  <dig>  seconds. thus, fast-find provides an efficient tool to search for arbitrary user defined pattern .

identification of cdnas containing binding sites for rna-binding proteins
in eukaryotes, binding sites and biologically relevant targets are known for very few of the several hundred known rna-binding proteins  <cit> . we tested whether several well-characterized rna-binding proteins were significantly associated with one another near alternative polyadenylation sites. for this analysis, we used several rna-binding proteins for which binding sites have been identified by iterative selection amplification or biochemically: sex-lethal   <cit> , rbp <dig>  <cit> , p-element somatic inhibitor   <cit> , rbp <dig>  <cit> , and hnrnp h/h'/f family  <cit> . the binding sites for sxl and cstf <dig> are both defined by base composition rather than by exact sequence  <cit> , highlighting the necessity for both composition- and sequence-based searches. the similarities between the u-rich binding sites for rbp <dig>  and a subset of the gu-rich polyadenylation enhancers or cstf <dig> binding sites suggested to us that they might affect alternative polyadenylation  <cit> . sxl regulates specific 5' and 3' splice sites by blocking the binding of a specific splicing factor, u2af,  <cit> . thus it might similarly regulate alternative polyadenylation by binding to and blocking certain gu-rich polyadenylation enhancers, thus activating an alternative polyadenylation site.

searching for sxl-regulated polyadenylation: a natural compositionally-defined site
if an rna-binding protein such as sxl affects alternative polyadenylation, we would expect to find its consensus binding site close to the first 3' end of alternatively polyadenylated transcripts from the same gene. we used fast-find to search for cdnas meeting these criteria.

searching for combinatorial patterns of degenerate binding sites
in natural situations, genes are typically regulated by combinations of binding sites rather than by single binding sites  <cit> . we tested whether the binding sites for several well-characterized rna-binding proteins occurred in the same alternative polyadenylation region more frequently than chance would predict. specifically, for each pair of binding sites, we used the g test to determine whether transcripts that contained one site were more likely to contain the other. the g test is a test for association similar to the familiar chi-squared test widely used in genetics, but is more accurate for small sample sizes  <cit> .

although the initial g tests indicated that the rna-binding patterns for cstf <dig> and the hnrnp h/h'/f family members are significantly associated in the alternatively polyadenylated regions of drosophila cdnas , the monte carlo analysis did not confirm the significance of these associations. in contrast, associations between sxl and cstf <dig>  sxl and the hnrnp core, and psi and the hnrnp core were marginally statistically significant in the g test but were highly significant  in all three monte carlo simulations, even when heterogeneity in composition and overlap between the sites were accounted for. one cdna that provides an example of potential regulation by the hnrnp h/h'/f family of rna-binding proteins is shown in figure 4b.

discussion
we have used fast-find to identify genes that are promising candidates for regulation by alternative polyadenylation. we have demonstrated that fast-find can be used to rapidly search for both individual and multiple patterns within defined regions of sequence that are biologically important, and that the queries are sufficiently fast to support the analyses of many different variations on pattern, which is important when knowledge about the pattern is limited.

the two proteins that we found to be associated near alternative polyadenylation sites, cstf <dig> and the hnrnp h/h'/f, have previously been linked to polyadenylation site choice  <cit> . they are not known to interact in the cell, and, in this context, it is interesting that their sites are not significantly co-located, although each is significantly co-located with other rna-binding proteins, including sxl. the other proteins we examined have not been implicated in polyadenylation regulation, but may act as cofactors with cstf <dig> or hnrnp h/h'/f. we have thus used our new tool to generate novel hypotheses about specific biological interactions that we now plan to test experimentally. our identification of alternatively polyadenylated mrnas that contain specific combinations of binding sites thus opens up possibilities for new studies of both gene function and the molecular mechanisms by which polyadenylation site choice regulates genes. most importantly, because each of the individual short, degenerate binding sites occurs frequently, identification of such candidates would not have been possible without using associations between the different sites.

fast-find offers several advantages over other solutions to the pattern-matching problem. first, except for the one-time investment of computational resources during the indexing phase , the indexed approach eliminates the linear scan for every new pattern. consequently, many different combinations of search patterns can be evaluated until an experimentally manageable number of potential cdnas is identified for further analysis. second, fast-find allows searches for combinatorial patterns. this capability is particularly important because most eukaryotic genes are regulated by a combination of multiple sequence patterns rather than by a single pattern. third, fast-find is uniquely suited to finding short patterns defined by composition. because each window has only one composition, and because the compositions are inherently ordered according to the number of each base they contain, we can store the composition for each window in the database and then search for all windows within any arbitrary range of compositions rapidly. in contrast, it is impossible to precalculate matches for all possible regular expressions or for all possible weight matrices, making it difficult to avoid a new o linear scan through the sequence when searching for a new pattern. finally, fast-find is easily implemented using standard database software, making it easily accessible to a broad audience.

the indexing approach used in fast-find is not appropriate for all applications. the database tables take up much more space than the original sequences, limiting its use for extremely large data sets. generalized suffix trees and suffix arrays provide better performance in a smaller space in cases where the entire data structure can fit into main memory and concurrent access by multiple users is not required. weight matrices are more suitable for highly degenerate sequences, where the o in the number of possible matching patterns can become larger than a linear scan that is o in the length of the sequence to be searched. the specific indexing scheme we used for this analysis does not handle degenerate bases, although we provide this capability by using a different bitvector scheme, which degrades the search performance to a linear scan . however, even taking these limitations into account, fast-find is useful for a wide range of biologically important problems.

CONCLUSIONS
fast-find provides a versatile tool for searching for exact and compositionally defined search patterns. we have applied this approach to analyzing the role of rna-binding proteins with known binding sites in regulating alternative polyadenylation in drosophila, and have found several mrnas that are plausible targets for known rna-binding proteins. although the database we created is drosophila-specific, the general approach described here can easily be extended to the analysis of combinatorial regulation in other species and in other contexts, including the control of transcription, splicing, mrna stability, and translation.

availability and requirements
the fast-find interface is available at . the software is available under the gpl by request to the authors.

abbreviations
fast-fully indexed nucleotide database, fast-find; complementary dnas, cdnas; expressed sequence tags, ests; relational database management systems, rdbms; international union of pure and applied chemistry, iupac; sex-lethal, sxl; p-element somatic inhibitor, psi; heterogeneous nuclear ribonuclear protein, hnrnp.

authors' contributions
mh implemented fast-find and improved the algorithm; ep curated the database and independently analyzed the presence of alternative polyadenylation sites; rk designed the fast-find algorithm and performed statistical analysis; and rs proposed the biological problem, designed variants of the sxl-binding site, assisted in ep's analysis, and drafted the manuscript. all authors read and approved the final manuscript.

