BACKGROUND
high-throughput gene expression technologies  are used to estimate expression levels of thousands of genes in one experiment. often the aim of such experiments is to find pathways and biological processes altered between two conditions, which helps investigators to propose biologically relevant hypotheses for further research. achieving this aim implies integration of a priori known pathway information into the data analysis. most often, a set of genes with similar biological function or participating in a regulatory process is employed as a set of entities in enrichment-based methods  <cit> . this approach, however, ignores known interactions between particular genes reflected in the topological structure. thus, if a change in interactions occurs, this is not reflected in the results. the last generation of pathway analysis methods takes into account the topological structure of a pathway, which helps to increase both specificity and sensitivity of the findings.

several types of methods for topology-based pathway analysis were proposed in the recent years  - in all of them, the topological structure of a pathway is represented as graph with nodes  and edges . the methods test one of the two types of null hypotheses as proposed in  <cit>  for gene set enrichment analysis. independently on the hypothesis tested, we can further distinguish multivariable and univariable methods. for more detailed description of differences between multivariable vs univariable methods, we refer the reader to additonal file  <dig> 

here, we focus on methods that  aim to identify pathways affected between two conditions based on differential expression of genes in the pathway - the most frequent aim of high-throughput genomic data studies,  use the a priori known pathway topologies and  use the pathway topologies separately.

the vast majority of existing topology pathway analysis methods were designed for continuous gene expression measures as obtained from microarray experiments. in order to apply them to discrete count data - a typical output from rna-seq experiment  - one must use a suitable transformation. poisson or negative binomial distribution are used as model distributions in differential expression analysis at gene-level for rna-seq data and a wide range of both transformation methods and statistical tests for this purpose exists. performance of these methods is only recently being compared in extensive simulation studies .

the published methods are only rarely implemented as a publicly available software tool or package, and sometimes the existing implementation is not available anymore . the existing implementations can be divided into three categories:  commercial products ;  r-packages   standalone applications  and  web-based applications . all of these tools usually offer embedded pathway topologies with a limited battery of methods  and simple visualization  of the results. simultaneous application of different methods and comparison of their results is therefore very time-consuming, cumbersome and prone to clerical errors due to need for repeated data conversion and transfer. additionally, the results may not be directly comparable, since some of the implementations use either built-in pathway topologies or their own pathway topology processing algorithm that leads to different topological structures. one of the best existing tools offering common interface to four topology-based pathway analysis methods  is the r/bioconductor package graphite  <cit> . the user can also access lists of parsed pathway topologies for some of the most common experimental organisms  from several distinct databases  stored as objects of class pathwaylist where individual pathways are represented as instances of class pathway. although more pathways can be obtained from public databases or specialized websites and parsed to the r environment with available cran/bioconductor packages, there is no transformation function from other pathway classes to the pathwaylist or pathway. the current graphite implementation has no uniform way of calling methods or specification of their parameters, making simultaneous application of different methods unhandy. additionally, spia is limited only to data with entrezgene identifiers and the signs of the interactions are neglected in degraph.

here, we present topaseq  - a bioconductor package that adjusts the set of methods available through graphite and extends them by addition of three more methods. the package offers their unified manipulation and provides tools for their easy application on rna-seq count data. in addition, it provides special functions for conversion of user-imported pathways into pathway class and a set of tools for coercing graphs between different formats and manipulation and visualization of the results.

in section implementation, we describe the software implementation and available functions. concrete examples of package usage and its comparison to other tools are given section results and discussion.

implementation
topaseq was implemented using statistical programming language r and the package is available through the open-source bioconductor project  <cit> .

in order to apply a topology-based pathway analysis method we need  gene expression measurements ,  a vector with sample class labels and  a list of pathways of interest together with their topologies in a specific format. the gene expression measurements and sample class information are usually available from the experiment.

pathway topologies and their manipulation
pathway topologies are necessary for topology-based pathway analysis and can be created manually, or - even better - obtained from public databases or r packages, where they are typically stored in one of the standardized formats . these formats, however, need to be parsed  to be used within the methods’ particular implementations. within r framework, multiple ways exist for pathway topology/graph representation. more detailed description of some of them in the context of biological pathways can be found in additional file  <dig> 

our package requires the pathway topologies in format defined as s <dig> class pathwaylist where individual pathways are of class pathway, which allows combination of oriented and not-oriented edges as well as multiple edges between nodes. we have especially designed several transformation functions that convert the most common formats into pathway.

the users might be interested in manual editing of topology of the parsed pathways. we added group of methods such as  adding/removing of the nodes and edges,  changing the type of interaction/directionality,  merging two pathways into one,  obtaining the induced subgraph. additionally, the user may need to select only a subset of pathways based on their topological properties . these can be easily obtained with other set of available functions.

moreover, we especially designed a new function reducegraph which merges the user defined named sets of nodes into a single node. the members of the sets must form either a gene family or a protein complex. the another function estimatecf estimates the maximal list of the sets of the nodes that can be merged. finally, we provide a general function convertidentifiersbyvector which requires user specified information. for the detailed desctiption of the functionalities mentioned above we refer the reader to additional file  <dig> 

methods for topology-based pathway analysis
the package offers seven different methods covering various approaches in topological pathway analysis . for detailed description of each method the reader is referred to cited references. we will focus on those aspects that are relevant to methods’ new implementation. all methods are implemented as a single function that applies the method over the list of pathways. more detailed description of differences between previous implementations of methods to our implementation can be found in additional file  <dig> 

a - m - multivariable, u - univariable b - a - activation, i - inhibition c - the data related to the pathway topology



we imported and adjusted the implemetation of the following methods: topologygsa, degraph, spia and clipper. we found that the original implementation of the topologygsa method is extremely computationally intense for some of the pathways as the authors employ function that implements the exact branch-and-bound algorithm  <cit>  to detect all of the cliques  in a pathway topology. in our implementation, we substituted this function with getcliques which implements more efficient bron-kerbosch algorithm  <cit> . for the degraph method we have created a new wrapper function that preserves the possibility to consider interaction types  and transforms the results into more user-friendly format - a data frame. the previous implementations of the spia method were limited to entrez identificators. in our package we have bypassed this limitation by incorporating a more general converting function. additionally, the user can also obtain a gene-level net perturbation accumulation — a measure of the importance of a gene in the topology. the clipper method constists of two steps:  first, the differential expression of a pathway is assessed,  then, the pathway topology is transformed into a junction tree and the portions of the tree which are mostly associated with phenotype are identified. we designed a new function that performs both steps of the algorithm in a single call.

in all of the imported and adjusted implementations we also added, when appropriate, an additional parameter specifying how should be the undirected interactions oriented. the user can choose whether an edge is oriented in both directions or only in one according to the order of the nodes.

we de-novo implemented three methods: tappa, pwea, prs, for which there was no implementation available within r framework. the prs and pwea are implemented in matlab and c++ respectively and these tools are discussed in the section comparison with other tools. our de-novo implementations are settled for pathway topologies from graphite package where one node is represented by only one gene or protein. both pwea and prs methods incorporate a permutation-based test in order to assess the statistical significance of the pathway score. considering the computational complexity of this approach we parallelized the crucial step of the pwea method . in addition, the function for obtaining the number of the differentially expressed genes in prs algorithm was implemented in c++ via rcpp package.

while several methods  work directly with normalized gene expression values, others  use the result of differential gene-expression analysis with or without application of significance thresholds to obtain the list of differentially expressed genes . with respect to this, all the methods were adapted also for a simple use of rna-seq count data. first, we employed pre-processing step for rna-seq normalization, with a selection of two best performing methods tmm  <cit> , deseq  <cit> , as compared in dillies et al.  <cit>  and regularized log transformation from deseq <dig> package which effectively removes the mean-variance relationship known in rna-seq data. second, we added methods for rna-seq differential gene expression analysis .
fig.  <dig> schema of a processing pipeline. the red boxes refer to the outputs from regular analysis of differentially expressed genes and possible inputs for topology-based pathway analysis. arrows indicate the processing pipeline of each of the methods implemented in the package



usage and visualization
each method is implemented as a single wrapper function which allows the user to call a method in a single command. the wrapper function offers:  normalization of count data;  differential gene expression analysis and  pathway analysis. the data input types were unified for all the methods. expression data can be supplied both as matrix or as expressionset. the functions’ outputs have uniform format defined as a new s <dig> class topresult with specified output of generic functions  and methods for accessing individual slots of the resulting object. the users can specify which method should be used for normalization or differential expression analysis of the rna-seq data, with respect to their own preferences. this data pre-processing step can be completely omitted and users can submit already normalized data or, if appropriate, the results of the differential expression analysis . note, that pwea method requires also so called topology influence factors , which need to be calculated from normalized gene expression data matrix.

when the generic function plot() is applied to a topresult class, together with a name of the pathway or position in the list of pathways identifying the pathway to be plotted, a visualization of the pathway with three gene-level statistics is produced .

the topology can be reduced by user specified list of nodes that are to be merged into one node. in this situation a pie chart is used as a representation of a node and the number of slices equals to the number of nodes merged. the filling colour and the radius is preserved from the separated nodes . by default a mean change of the gene expression is used as a representative of the values when the agreement between gene expression and the interaction type is examined, but the user can specify another aggregation function. a slightly modified graph is plotted for topologygsa and clipper, which perform differential expression analysis of the cliques. since a single node can be a member of more than one clique, the colour of edges is used for their visualization .
fig.  <dig> visualization of the results after merging some of the gene families into one node. some of the genes families present in the pathway were merged into single nodes. those nodes are drawn as pie-chart, in which the number of slices equals to the number of gene merged. the colour, border and radius are preserved from the complete graph . average log fold-change is used as representative value, when the agreement between expression and interaction type is assessed



RESULTS
for a simple example of how to create and manipulate a pathway, we refer the reader to additional file  <dig> 

we provide a simple application example of implemented methods on a rna-seq dataset. for more detailed descriptions of all the functions we refer the reader to the package manual.

the aim is to compare gene expression profiles between wild-type and rna-binding protein hnrnp c  knockdown hela cells  <cit> . the rna-seq dataset came from gagedata package. there are four knockdown samples and four experimental samples in this dataset containing the count data for  <dig> genes. we load the data and remove genes with count  <dig> in all samples:



... download the kegg pathways and apply all seven topology-based pathway methods:



the arguments of all functions are as follows : a count matrix , a grouping vector, list of pathways with topologies and a type of the data). the tmm normalization and the limma-based differential gene-expression analysis are used by default. the pre-set thresholds for considering a gene significant are p-value less than  <dig>  and the absolute log fold change above  <dig>  further, the gene identifiers in pathways are automatically converted to the entrezgene identifiers and the non-oriented edges are oriented in both directions, when required.

the results for an individual pathway can be visualized as shown in fig.  <dig> in additional file 1:



comparison with other tools
the known previous implementations of the methods  offered in topaseq are summarized in table  <dig>  we will further discuss only the methods implemented de-novo in r/bioconductor frame work. for tappa there is no other available implementation known to the authors. a c++ implementation of pwea can be downloaded from http://zlab.bu.edu/pwea/download.php. the expression data have to be in the gsd format from gene expression omnibus, where the probesets are named by both manufacturer ids and the gene symbols. it is coupled with python script for retrieving and processing of kegg.xml and.gene files. beside the limitation to kegg pathways and the need for manual downloading of non-human pathways or conversion to kgml format, it can be run only on unix-like systems. recently, a standalone matlab-based implementation of prs was published  <cit> . the application requires normalized microarray data in xls file with manufacturer identifiers of the probesets, together with specification of the platform and the normalization method that was applied to the data. the set of possible platforms is limited to selection of affymetrix hg and one agilent platform. the user has no control over the pathway topologies that are used.

topologygsa
graphnel

clipper
pathway

degraph
graphnel

spia

graphite
pathway

a - http: //www.buckingham.ac.uk/research/clore-laboratory-diabetes-obesity-and-metabolic-research/staff/maysson-al-haj-ibrahim/prs-tool/
b - http://zlab.bu.edu/pwea/index.php
c - http://watson.mcgee.mcw.edu:8080/~sgao, the page is down.  ppi - protein-protein interactions gedm - gene expression data matrix, log2-transformed and normalized expression profiles



none of these tools allows for different method for normalization  or differential expression analysis; nor can it be used to analyse the rna-seq data.

some users may prefer cytoscape for visualization of pathways, since it provides user-friendly and interactive interface, which can be achieved using the rcytoscape package. within this interface, however, the user can specify only the basic graphical parameters like size, shape or colour of the nodes or the styles of edges. advanced graphical approaches provided through plug-ins can be accessed only directly from cytoscape. we are currently working on the option of interactive graph visualization.

CONCLUSIONS
topology-based pathway analysis comprises a new generation of methods in gene set analysis, with the potential of generating more sensitive and more specific results. currently, high-throughput technologies producing gene expression data that serve as input to these methods are employed in almost every biological and biomedical research with rna-seq being in the leader position. tools for comfortable and quick application of these methods and visualization of their results are needed. available packages or standalone applications are usually limited to one or few methods, readily applicable mainly to human studies and rarely contain also a visualization tool. we propose topaseq, a bioconductor package providing a set of easy-to-use and general tools for topology-based pathway analysis within the r workspace. it offers seven distinct topology-based pathway analysis methods that cover wide range of approaches and can be easily applied on both microarray and rna-seq data. it also offers a visualization tool that is able to capture all the relevant information about the expression of genes within one pathway. finally, the functions for pathway conversion extend the application of topology-based pathway analysis to experiments on species other than human.

availability and requirements
project name: topaseq project home page: http://www.bioconductor.org/packages/release/bioc/html/topaseq.html
operating system: platform independent programming language: r other requirements: r version  <dig> . <dig>  cran and bioconductor packages: graphite , graph, grbase license: agpl- <dig> any restrictions to use by non-academics: none availability of supporting data: ebi arrayexpress experiment e-mtab-1147: http://www.ebi.ac.uk/arrayexpress/experiments/e-mtab-1147/, also in gagedata package

additional file
additional file  <dig> 
supplementary material.pdf. the file contains additional details on the following: i) common principles of the multivariable and univariable topology-based methods; ii) the functions for pathway creation and manipulation ; iii) comparison of topaseq with existing tools.  

 competing interests

the authors declare that they have no competing interests.

authors’ contributions

ii and eb designed the package. ii implemented the methods in r and drafted the manuscript. all authors contributed to, read and approved the final version of the manuscript.

