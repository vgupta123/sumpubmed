BACKGROUND
repbase is the most widely used database of transposable elements, with ~ <dig> entries as of october  <dig>  representing over  <dig> superfamilies of dna transposons, ltr and non-ltr retrotransposons, and endogenous retroviruses  <cit> . the current version of repbase is based on a flexible and extensible relational database schema implemented in mysql. ongoing large-scale sequencing of eukaryotic genomes has resulted in a rapid increase in the rate at which new transposable elements are discovered. rather than relying on error-prone automated processing, the philosophy behind repbase has been to incorporate a significant amount of manual curation into the database. however, the increasing number of sequences to be annotated and entered led us to develop a standardized submission interface that external users can use to provide information on their sequences, with a minimum of subsequent reformatting being necessary.

repbase is primarily being used for screening and annotation of genomic dna. censor was the first program for repbase-based repeat detection and masking, originally released in  <dig> and later published  <cit> . its major drawback was inefficient implementation of the smith-waterman algorithm and, therefore, the publicly accessible censor server ran exclusively on specialized paracel hardware. in the meantime, other programs, notably repeatmasker  <cit> , and blaster  <cit>  became available. repeatmasker uses a customized version of the repbase library that can sometimes have significant differences from the original repbase submission. furthermore, censor can be used to search dna sequences against a library of proteins, or translated nucleotide sequences.

manual curation of databases has both advantages and drawbacks compared to automated processing. automatic annotation has the significant advantage of much higher potential throughput, freedom from user error, and elimination of unintended bias in the processing. on the other hand, it is hard to anticipate every contingency in, for example, correct reconstruction of consensus sequences. a particular problem with automated reconstruction of transposable elements is over-fragmentation, where algorithms do not correctly assemble related parts of an element into a complete consensus. the principal source of mistakes in manual curation is user error in entering data. all complex data such as taxonomy, literature references, transposable element classifications are potentially problematic, since simple misspellings can render a database entry unretrievable based on exact string-based searches.

for these reasons, we have chosen to adopt a hybrid approach: keeping the positive aspects of manual curation, while attempting to eliminate the most common sources of user-supplied errors, by automating the import and annotation of complex, but well-defined information including taxonomic information, referencing, etc. the purpose of repbasesubmitter is to provide an easy to use interface that permits flexibility in annotation, while at the same time reducing the scope for mistakes in the manual curation process.

implementation
repbasesubmitter
repbasesubmitter is implemented in java . the interface is structured around six data entry pages, together with an initialization page for creating a new entry, and a final submission page for performing checks and submitting to repbase. new entries are not directly entered into repbase, but are submitted to a review database for editorial approval and additional curation.

censor
the new version of censor described here uses an unaltered version of repbase , and is composed of perl and c++ modules for identification of both interspersed and tandem repeats using similarity searches. censor analyzes dna/rna sequences for repeats and provides a description of repetitive elements from their repbase update annotation  <cit> . censor can optionally use either wu-blast or ncbi blast as its search engine, and can perform both direct na-na searches, as well as any combination of protein-na or translated na searches using the appropriate blast modules.

the downloadable version of censor can be installed on virtually any unix system  with perl and a c++ compiler, that has wu-blast or ncbi blast installed. it can also utilize symmetric multiprocessor machines. censor uses blast to detect similarity between repeat libraries and nucleic acid  or protein sequences. for simple na-na searches, blastn is used . for more sensitive detection of distantly-related protein coding sequences, a six-frame search  or protein-na search  is available. censor offers three sensitivity modes: normal, rough and sensitive, each offering a different balance of sensitivity and speed. the difference in performance is determined by the blast search parameters . censor automatically determines the type  of input sequences by calculating base composition, and calls the appropriate blast program, although this behavior can be overridden as described below. censor relies on some standard unix system commands. for that reason a unix/linux operating system is required. censor requires perl to work, which is standard on most unix systems. wu-blast  or ncbi-blast is required to perform searches. if the blast installation directory is on the user's path, the configuration script will automatically detect it and assign corresponding variables. otherwise, users must manually edit the header of censor's main script to provide this information. gcc or another c++ compiler, and "make' utility, are required to build the censor distribution.

RESULTS
repbasesubmitter
at all stages of data entry using the submission interface, required fields are indicated by boxes highlighted in red. although the data entry forms can be accessed in any order, if required information is omitted, the program will not allow the user to proceed until it has been entered. the entry forms of repbasesubmitter, and the main information that can be entered through them, are summarized in table  <dig>  the initialization  page allows the user to begin creation of a new repbase sequence by loading data from a pre-existing file, or by starting with a completely blank template. after this initial selection, the summary data entry page is displayed. the primary fields required for creation of a new entry include a repbase accession number. the format of accession numbers is not fixed, and is user-defined; however, it must be unique. this repbase identifier can be considered analogous to a hugo gene name, rather than an abstract database entity such as a genbank accession number. there is no currently accepted standard of assigning of names to transposable elements. however, this topic was the subject of a recent special working group . the summary page also requires a description of the sequence being submitted. ideally this is a succinct outline of the sequence type and nature, for example "l1-1_md: a young l <dig> element from monodelphis domestica – consensus sequence". a comments section is also available for a more detailed description of the sequence, and is not limited in scope. examples of such information might include number of copies of the sequence in a genome; age distribution of transposable elements ; relationship of this sequence to other transposable elements that may be of interest; etc. finally, it is possible to specify free-form keywords which provide pertinent information specific to this sequence. repbase entries can be searched by keyword, so a user may wish to specify information such as characterization of protein coding domains present in the sequence . the keyword field is also used internally by repbase to indicate links to corresponding repeatmasker library entries. the summary page also notes the ip address of the computer submitting the data to repbase – this is not user-editable.

the seven main forms presented by repbasesubmitter are listed with their title, and a summary of the information which can be entered.

the organism entry page ensures that correct taxonomy of entries is maintained; both at the level of species, and for classes of repeat element. as species name is typed, repbasesubmitter dynamically searches the ncbi taxonomy tree  <cit>  and lists matching entries. the species can be selected from the list as soon as the correct one appears, or can be typed fully – the more of the species name that is typed, the narrower the list presented. once a specific species has been selected, the interface pulls the correct taxonomic classification from the ncbi taxonomy database, and enters this information in the relevant field. in addition, this section of the interface facilitates correct classification of transposable entries. the current classification scheme implemented in repbase is given in table  <dig>  however the scheme is transparently extensible as new superfamilies of transposable element are identified. the status of the sequence as an autonomous or non-autonomous element can also be specified at this point. if non-autonomous, the corresponding mobilizing element may be indicated.

repbase currently recognizes over  <dig> superfamilies of transposable/repetitive element. the major classes and superfamilies are listed here. the underlying relational database structure of repbase allows easy addition and modification of the classification scheme, based on currently accepted conventions.

the sequence entry page is the simplest, and requires only the sequence data to be input. if a dna or rna sequence was loaded from file at the initial entry creation page, it will be displayed here. otherwise, sequence data can be cut-and-pasted into the window. the base count and composition of the sequence is automatically updated and entered. sequences can also be complemented, if it is determined that the other strand is more appropriate .

autonomous transposable elements encode proteins such as transposase, reverse transcriptase, endonucleases, etc. this information is often of interest to researchers using repbase, and the proteins interface  provides a convenient way for identification and annotation of open reading frames  in the sequence. multiple proteins can be specified for the same repbase entry, and therefore it is necessary to supply a unique repbase protein identifier. one is generated automatically for each orf added – users may choose to specify their own identifier, but it must be unique in repbase, and will be checked at the final stage before upload to the review database. a comment field is associated with each protein entry on a sequence. coordinates of coding regions can be entered manually, and the corresponding region will be translated and entered as the coding sequence. however a useful feature of the protein annotation page is the ability to predict orfs. upon selecting the "predict" option on this page, the user is prompted to specify how many orfs, n, are anticipated. the program will graphically display the n longest orfs on all strands, along with their corresponding coordinates in the sequence. the user can select an orf to add to the repbase entry as a putative protein coding region; in addition, several fragments of orfs can be merged together as one coding region if it is anticipated that they are part of the same protein. this is generally only recommended if resulting gaps are small. finally, an option is provided to truncate a specified coding region to the first occurring methionine.

an important feature of repbase is the ability to supply references to appropriate scientific literature, or to other repbase entries and other databases. the submission interface facilitates both types of referencing. references to scientific literature can be added manually i.e. by supplying authors, title, journal etc. in the normal manner; however, in this case entries are not automatically verified in any way. as an alternative, repbasesubmitter provides an "import" option on the references entry page. this allows users to specify partial information such as author names, article title, journal name, and then search the ncbi pubmed database  <cit> . a list of matching references is returned, and multiple selections can be made from this list and included in the repbase entry. in this way, references to literature will correspond exactly to how they appear in pubmed, which can substantially eliminate errors due to mistyping of reference information. in some cases, a particular reference may only apply to part of a sequence. this is often true if the sequence currently being entered is an extension of a previously-existing partial repbase entry; or if the element being annotated combines information that has been reported fragmentarily in multiple locations. a reference may also be to another database such as genbank or embl, or to another repbase entry. in this case, the user needs to supply the author information manually. if the creation of this repbase entry represents new work, the user will generally want to supply a title, and submit it to repbase reports. entries already described in another publication should be directed to repbase update. repbase reports provides a medium for publication of novel transposable elements in an online journal form, so that the work may be referred to in other publications. finally, the reference page provides an option for "free text" references, for those cases which do not correspond to traditional journal references, or links to those databases specifically recognized by repbase.

the release and accessions page summarizes the information supplied on the references page, primarily to allow selection of a primary reference for sequences which are consensi. additionally, it is possible to specify a "creation date" for this repbase entry ; and a "last update" which will be the same as the creation data for a new sequence, but may be different if this is a refinement of a pre-existing repbase element. this section is also the appropriate place to specify accession number linking to other databases  – one accession number will be the primary accession for the sequence.

the last screen of the submission interface is for actual submission to the repbase review database. the database entry as it will appear in native repbase  format is displayed, and may be saved to a file. upon selecting "submit", the entry is checked for correct formatting, and basic consistency such as unique repbase accession and sequence information; and is then entered into the mysql database for approval

censor
pre-processing of data
before performing each search, input data is checked and formatted. censor automatically chops long sequences into smaller fragments to reduce blast memory requirements and to facilitate splitting of jobs on multiple processor machines. base composition is calculated for query and database sequences, and based on the total percentage of atcgn bases, censor decides whether each sequence is nucleotide or protein. this information is used in automatic selection of the blast search program – blastn, blastp, blastx or tblastn. in order to run a translated versus translated search of nucleotide against nucleotide sequences, tblastx must be specified as the search program . by default, simple tandem repeats are masked using filter modules prior to similarity searching, to prevent false hits. two approaches are available for dealing with simple repeats. the built-in blast filters, seg and dust, can be applied in initial sequence processing. however this prevents identification of simple repeats in the censor output. another approach is to mask them by first blasting the query sequence against a library of simple repeats, which is included with the censor distribution. in this case simple repeats will be reported in the program's output. both filtering functions can be disabled if required, but this is not recommended, since it can lead to a significant proportion of false hits between the query sequence and simple repeats that are internal parts of repetitive elements curated in repbase. however, disabling annotation of simple repeats can lead to a significant decrease in overall processing time.

similarity searching
in the main search phase, censor uses blast to compare the input sequence to annotated repetitive elements in repbase, or a custom user-supplied library. there are two separately developed and maintained versions of blast available: wu-blast, copyrighted and maintained by washington university  <cit> , and a free version developed by ncbi  <cit> . both versions have their advantages and disadvantages. wu-blast is faster than ncbi blast, and has more options, making it very flexible. however wu-blast requires licensing from commercial companies and academic users , while ncbi blast is free for all users. as a result, we created two versions of standalone censor, with parameters optimized for each version of blast. a web-based censor server is also available, which uses wu-blast solely. the default wu-blast parameters for censor's "normal", "sensitive", and "rough" modes are described in the supplementary material . in addition, all blast parameters can be overridden by specification on the command line of standalone censor. the query sequence is scanned against each library of repeats specified using censor's "-lib" option, in the order in which they are listed. after processing each library, detected repeats are masked out from the query sequence before comparison to the next library.

post-processing and output
censor performs post-processing of blast output by removing overlaps and defragmenting detected repeats. the program reports positions of repetitive elements in ".map" files. figure  <dig> shows an example of a repeat map. many methods for evaluating the similarity between two or more homologous sequences exist  <cit> . in the case of transposable elements, even a large indel , which corresponds to any uninterrupted alignment gap, can reflect one event in evolution  and should impact the value of similarity the same way unrelated to its length. the similarity values output in maps are therefore calculated as follows: sim = match_count/ where: match_count = number of matching base positions in alignment; alignment_length = length of alignment, i.e. number of matches + number of mismatches + length of gaps; query_gap_length = total length of alignment gaps on submitted query sequence; subject_gap_length = total length of alignment gaps on library sequence; gap_count = number of uninterrupted alignment gaps of any length on either query or subject sequences. in addition to this measure, the censor output incorporates an alternative similarity measure pos, that is calculated on the basis of positive scores between aligned base pairs. this is typically higher than the previous similarity score, and may be more appropriate for protein alignments. furthermore, censor can produce pair-wise alignments of detected repeats using the swat algorithm  <cit> . for these, the similarity reported incorporates an affine gap penalty.

maps include simple repeats unless the "-nosimple" option was specified. the web-based version of censor provides a graphical representation of the map in svg  format, with colour-coding of different repeat types. by default, censor also produces a ".masked" file containing the original sequence with all detected repeats masked out; and a ".found" file containing the genomic sequence fragments that were detected as matching a known repeat. general information on the query sequence and their repeat content is stored in ".tab" files.

finally optional tasks are performed, including classification of repeats into subfamilies based on maximum similarity to consensus sequences. currently the censor distribution supports only classification of human alu subfamilies. however other repeat families can be classified after an easy setup process that requires a list of consensus sequences and a hierarchy of subfamilies. a complete description of censor parameters can be found in the program documentation. details of blast parameters for the available sensitivity modes are given in the supplementary material .

CONCLUSIONS
the resulting new package, repbasesubmitter, facilitates and automates many aspects of repbase entry creation and maintenance. the program performs numerous checks on formatting of entries, and consistent entry of certain data fields; as well as ensuring that required data are provided.

availability and system requirements
project name: censor

project home page: 

operating system: unix/linux

programming language: perl, c++

license: gpl

any restrictions to use by non-academics: none

project name: repbasesubmitter

project home page: 

operating system: any, with java virtual machine  <dig>  or above

programming language: java

other requirements: java  <dig>  or higher

license: gpl

any restrictions to use by non-academics: none

authors' contributions
ok wrote and developed software for censor and repbasesubmitter. ag helped with debugging and feature addition of both programs, and wrote the manuscript. lh did the initial design and coding of repbasesubmitter. jj directed development of both programs as principal investigator. all authors contributed to and approved the final manuscript.

supplementary material
additional file 1
supplementary material a. parameters supplied to wu-blast by censor

click here for file

 acknowledgements
development of censor was supported by national institutes of health grant  <dig> p <dig> lm006252- <dig>   we would like to thank jolanta walichiewicz for help with preparing the  manuscript.
