BACKGROUND
the role of ontologies in the life sciences domain has increased in recent years, as the development of high-throughput measurement technologies has made it a data-intensive discipline. ontologies are necessary for the annotation and the interpretation of large datasets, for the integration of heterogeneous information and for the creation of common languages across disciplines, ranging from the life sciences to healthcare.

the success of the gene ontology   <cit>  is an example of the usefulness of ontologies. go is a unique resource for uniform annotation of gene products across organisms; and it is used to relate experimental data and knowledge on processes and functions of genes on a high-throughput scale. a typical case of this use of go is the functional characterization of patterns of gene expression data  <cit> .

the development of ontologies such as go has been driven at first by the need of a wide-coverage annotation of the entities of their domain. the resulting ontologies provide a large shared terminology, but they have limited ontological commitment. current research is also focusing on clear and formal definition of entities, relations and their properties  <cit>  <cit>  <cit>  <cit> . as a result, bio-ontologies are shifting from almost terminological resources used for annotation of biological entities, to a formal representation of a knowledge domain that allows inference of biologically meaningful facts  <cit>  <cit> .

regarding the integration of heterogeneous information, ontology development in the life sciences is increasingly adopting the semantic web  <cit>  in particular through the owl language  <cit> . in the semantic web vision, information resources such as biological databases can expose their data on the web in a common language , together with ontologies encoding their semantics. this de facto integrated set of resources can be queried not only for its content, but also for information that is a consequence of what is explicitly asserted, given the semantics provided by ontologies. within the same framework, languages for expressing queries such as sparql  <cit>  are also defined.

an example of how heterogeneous information can be integrated and queried in this context has been developed by the w3c healthcare and life sciences interest group  <cit> . it should be noted that the development of ontologies in life sciences covers not only the domain of biomedical entities, but also methodologies. this is the case of the ontology for biomedical investigation , that aims at providing terms for the annotation of protocols, instrumentation, materials and data  <cit> .

focusing on biological pathways, the pathway commons initiative  <cit>  readily provides access to information from resources such as kegg  <cit> , reactome  <cit> , humancyc  <cit>  and others on the semantic web. this information is presented in a common format whose semantics is described through the biopax ontology  <cit> . ontologies provided by pathway commons could be used to annotate biological entities, and their semantic annotation allows for inferences such as the abstraction of relations between entities, or the derivation of causality relations among them .

however, there is still a disconnection, in tools and methodologies, between the use of ontologies as annotations of biological entities in data analysis tools, and their use as a formal specification of entities and relations in the domain, with associated semantics. in the first case, ontologies are commonly considered as a set of semantically opaque labels associated to biological entities such as genes or proteins. these labels can be used to qualify other information about these biological entities, like experimental measurements, but relations among labels, and their semantics, are scarcely taken into account. on the other hand, tools for ontology editing such as protégé  <cit>  allow to edit and visualize logical constraints relating entities and properties, and to inspect the entailed consequences of their definitions, but they are unconnected from other aspects of biological investigation, such as experimental measures.

the lack of a common platform that can exploit ontologies both as an annotation tool for experimental data interpretation and as a formal representation of a domain in which new knowledge can be derived through inference has motivated the development of the work presented here. among the tools used for data integration and analysis in the biological domain, cytoscape is of particular interest  <cit> . it offers an interactive visual environment to explore biological networks whose elements can be characterized through different types of information, including experimental measurements and ontologies, by virtue of an extensible plug-in architecture.

here we present rdfscape, a platform that integrates the ability to interpret the semantics of ontologies into a biological analysis framework such as cytoscape.

brief introduction to the semantic web and to the terminology adopted in the present manuscript
rdf is a simple language that stands at the basis of the semantic web framework. it encodes semantics with simple statements of the form <subject predicate object>. a set of rdf statements  can be represented as a graph.

the elements of rdf are identified by unique strings called uris. some uris have an associated semantics. specifically, rdfs and owl are sets of uris whose semantics can be used to define ontologies. sets of related uris can be grouped in namespaces.

in the present article, the term ontology refers both to the representation of classes and their relations and to their instances. the term knowledge-base is used almost as synonym to indicate a set of ontologies deployed in a system providing inference support.

inference is the process of deriving new facts as logical consequences of known ones. these new facts are said to be entailed by the known ones.

methods
rdfscape is implemented as a cytoscape plugin. it makes use of external libraries for managing ontologies and reasoning, and it provides additional logic to map these to graphs represented in cytoscape.

although its design is modular and could accommodate different libraries, the current implementation of rdfscape uses the jena semantic web library  <cit> . this library allows for parsing of ontologies and offers a way to represent them via a graph data structure in memory . inference is provided by a reasoner within the jena library and by pellet  <cit> .

rdfscape organizes data structures and inference in a peculiar way, whose usage will be presented in the results section.

initially, a single graph data structure holds the union of all the rdf descriptions of ontologies selected by the user. based on a selected set of standard entailments  a second graph is then inferred. this computation is provided either by pellet or by the jena inference engine, and reasoning settings can be changed at run time. it is possible to select one of the two reasoners and, since the latter consists in different reasoning modules, the set of entailments it computes can be finely tuned.

this second graph is intended to hold an unification of the ontologies provided. identical uris are resolved by definition, when a formal characterization of elements in the ontologies is present, equivalence of classes, properties and individuals can be inferred in the reasoning step. when this equivalence can be inferred by other means that go beyond the semantics encoded in the ontologies, it is expected that an ontology providing explicit equivalence information is presented to the system.

the second rdf graph then provides the basis for an additional inference step that applies user-defined inference rules, implemented via the jena backward rule engine; this results in the knowledge-base that the user can query. details on the reasoning process in jena can be found in  <cit> .

consequence of this setup is that the information entailed by user-specified rules does not affect the computation of rdfs or owl entailments. this choice reduces the risk that user-defined rules lead to an inconsistent knowledge-base, and it is coherent with instance-rich ontologies such as biopax.

rdfscape maintains a connection between the data structure of the network in cytoscape and the knowledge-base. it populates the network in cytoscape with information as uris, values, types for the elements  for which a correspondence to an ontology is found. a direct access between the internal representation of these elements and the attributes controlling their rendering is also kept. for instance, this is the case for associations between colours and namespaces. the link between these elements and the knowledge-base is based on different interfaces : depending on which interfaces are supported by the knowledge library in use, rdfscape provides more or less functionalities for querying and browsing the content of ontologies within cytoscape. for instance, if the knowledge library only provides a sparql interface, it is not possible to retrieve information relative to the representation of a blank node . on the other hand, if the knowledge library allows direct access to the rdf graph representation of ontologies, this functionality is enabled .

rdfscape also implements i/o on files of its actual configuration parameters: these are rich data structures including ontologies, settings, inference rules, graph patterns that are grouped on the basis of work-cases called analysis contexts.

requirements
rdfscape requires the following software and libraries:

cytoscape 

jena 

pellet 

no specific requirements are given for hardware and software: rdfscape is a java based cross platform project whose requirements are equivalent to the fore-mentioned software.

RESULTS
a number of interesting synergies result from the enrichment of cytoscape with semantic web technologies. as ontologies represented in the semantic web framework are networks of concepts themselves, they can be treated as graphs within cytoscape and hence visualized  taking advantage of its interactive features.

at the same time, ontologies can be used to annotate, and hence query elements in networks representing biological entities and experimental data.

herein ontologies are not just seen as a set of annotations, but as a knowledge-base where the explicit representation of semantics is the basis to infer additional information. this semantics can then be extended in a user-specific way through the definition of inference rules that enrich the knowledge-base at run-time.

here we present some of the results obtained through this integration.

ontology query and navigation
rdfscape provides a system for visualizing and querying ontologies represented in owl within cytoscape .

a set of features improves the readability of this visualization of ontologies as networks. for example, objects of datatype properties can be visualized as attributes of nodes representing the corresponding subjects, and visual features such as node shapes or colours can be associated to these attributes . it is possible to select which resources should be visible, based on their namespaces.

networks represented in cytoscape can be populated in several ways: through the use of queries, through an interacting browsing system or through the visual definition of graph patterns.

in the first case, the plugin presents the user with a choice of panels to perform queries: a sparql query panel , a class based query panel  or a string matching based query panel .

after performing a query, a list of results is returned as a table . the user can then select a subset or all of the results and plot them into cytoscape.

whenever elements visualized in cytoscape are relative to entries in ontologies, rdfscape presents an interactive browsing system: right-selecting a node prompts a contextual menu with all the statements that have this node as object or subject. selecting one of these menus entries leads to the addition of the relative statement to the cytoscape network .

“re:phosphorilation_of_p53_at_ser_15_by_atm_kinasestep bp:pathway-step re:kinase_activity_of_phospho_atm_ser__1981___nucleoplasm_1”.

browsing ontologies at this level of details is not intuitive. later in this paper it will be shown how, through reasoning, ontologies can be transformed to provide information easy to understand by the user.

both of these query methods only yield results within the namespaces that are selected as relevant by the user.

right-selecting a node or an arc prompts also other menu items, as the possibility to declare it a variable. this feature, coupled with the possibility to select sub-networks proper of cytoscape, allows the definition of graph-patterns or “visual queries” .

“all the elements of type protein whose name contains the string “p53” that are part of an interaction taking place in the nucleoplasm region”.

this pattern was generated while browsing the homo sapiens reactome export in pathway commons, by declaring as variable two of the elements. it presents several elements describing the structure of a pathway: these are from the biopax ontology . the object of the cellular-location property is a term defined in reactome . results of this query on the reactome homo sapiens ontology are presented in table  <dig>  this query can be used both to map its results to an existing cytoscape network, or to generate a new network from all possible occurrences of the relative pattern in the ontology.

this table shows results from the query of figure  <dig> on the reactome homo sapiens ontology. for proteins, objects of the name property are presented instead of their uris. physicalentityparticipant is an “utilityclass” in biopax: it represents the state or context of an element in an interaction, not a biological entity.

these visual queries can be saved in libraries and they can be used both to map their results to an existing cytoscape network, or to populate a new network .

it is important to note that unlike other biological oriented software, queries on ontologies in rdfscape are not only relative to biological entities and their annotation. they can also target relations among elements and more general patterns that can be defined on the rdf representation of an ontology .

finally, queries can lead to the selection of results on a graph representing an ontology, or to the selection of a set of nodes in a graph representing a biological network , once the latter is linked to one or more ontologies.

support for inference on ontologies
the target of queries in rdfscape is not only the knowledge stated in ontologies, but also the knowledge that can be inferred from them. the inference procedure is customizable in two distinct ways, that we have shortly introduced in the methods section. first, some options are available to perform a subset of all inferences proper to the owl/rdf semantics. there is a trade-off between the coverage of possible entailments computed and the execution time, and in many cases only a subset of possible inferences is relevant. it is thus possible to tune the system to maximize performance in specific cases. one very common example is the use of a reasoner to efficiently compute only transitive closures when the ontologies considered are taxonomies.

second, in addition to the knowledge that can be derived through this standard inference, a set of rules specified by the user is processed for the production of additional statements. these rules are simple production rules matching a graph pattern on the left side.

two facts should be noted on the use of reasoning in rdfscape.

first, custom inference rules can be saved in libraries and applied at run time. that is, the interpretation of the facts in ontologies can be interactively varied by the user.

second, additional logic to interpret ontologies can be provided in two ways, via the aforementioned inference rules, or via additional ontologies to be added to the knowledge-base. the latter approach is analogous to the one that was used in  <cit> .

these two ways overlap in their expressiveness, but none of them is exhaustive. however, it may be argued that additional logic encoded in ontologies would not be necessary if those ontologies were properly formalized to begin with.

an example: abstracting pathway ontologies to interaction data
we show how the features of rdfscape, including inference, can be used to provide a semantic-based transformation of a knowledge-base through the following use case:

“visualize a set of pathways as an interaction network”.

as a first step we consider a subset of pathway commons, in particular a subset of reactome, represented in biopax . this ontology provides classes and relations for the description of biological pathways. for instance it defines classes such as “catalysis”, “control”, “interaction”, that are related by the “subclassof” relation .

an introduction to the biopax ontology is out of the scope of this work, however we refer to figure  <dig> to introduce some simple concepts used here.

a fragment of the class hierarchy in biopax is shown in figure 4a, as well as the particular way in which interactions are represented. interactions are classes. elements that participate in an interaction  are related to it through an additional class “physical entity participant”. this has the meaning of “the physical element with the features it has when participating in a specific interaction”, thus representing context information. pathways are, for the scope of the present work, collections of interactions.

in order to derive an interaction network from a set of pathways represented in biopax, we need to perform two operations.

first, we need to abstract as “interactions” all of its subclasses. for instance when querying a network for interacting elements, those that are annotated as participating in a biochemical reaction should be also retrieved. this can be achieved through the computation of standard owl entailments. in particular, the subset of owl that can be expressed with rdfs is sufficient.

the representation of an interaction, at this point, would still not be intuitive: a query for an interaction would be represented as in figure 4b.

we would like to “view” this interaction network as a graph representing biological entities as nodes, and interactions as edges. a set of custom inference rules  allows for this transformation. the result of these rules is the assertion of a new property “interacts” between nodes participating in the same interaction .

a visual query yielding all interactions known in an ontology will now look like in figure 4d.

we apply this transformation to the homo sapiens release of reactome in pathway commons. this knowledge-base is directly accessible on the web. however, access to its content is on a single pathway basis. we therefore downloaded the entire version of reactome in pathway commons, and loaded it from a local file.

no interactions are recovered from a sparql query unless inference is activated. when rdfs inference is activated,  <dig> interactions are retrieved.

we apply rdfs inference and the set of custom rules introduced earlier. then we extract from the ontology only the “interactions” we have now defined. the result of the application of this procedure to the entire ontology is shown in figure  <dig>  here we show also the application of a query for all proteins interacting with rnas. in this case the result of a query appears as a selection of nodes within the overall interaction network.

although not shown here, it would be possible to integrate this information with other data such as microarray data: size of nodes representing rnas could for instance be made proportional to the fold change of rna presence in a stimulus-response experiment.

it should be noted that the derivation of an interaction network from a set of pathways was realized without a custom representation of data. the knowledge-base used was available and in principle directly accessed on the web : we only provided definitions for our interpretation of biopax elements.

towards reasoning on pathways
here we show how inference can be used on pathways to answer specific queries. we refer to  <cit>  for an introduction to queries on pathways and we focus on an example derived from this work: “find all genes whose expression is directly or indirectly affected by a given compound”.

in order to keep this presentation simple, and in order to evaluate it on the pathway commons knowledge-base, we consider a related simpler query:

“find all compounds whose expression is directly or indirectly affected by a given compound”. this query is similar in the form of reasoning required to answer the former query, but it allows to define easily a meaning for “affects”: focusing on biochemical reactions, “a compound a affects a compound b if it can be used directly or indirectly in its synthesis”.

this can be stated through the set of axioms illustrated in figure 6a. note that we have expressed the transitivity of the property “affects” through production rules. another alternative would be to declare it transitive within owl .

availability
rdfscape is released under a lgpl license and is available at  <cit> . it is a prototype: the intended audience of this project are researchers interested in exploring how semantic web technologies can be applied in biological investigation.

discussion
since the goal of the semantic web is to enable the web to become a distributed knowledge-base, in principle it would be possible to point rdfscape to a set of urls of ontologies of interest, to define an interpretation for these, and to derive information that can enrich the analysis performed within cytoscape.

we illustrated this approach in two examples with ontologies relative to biological pathways, but it can be extended to a heterogeneous domain  <cit> . in fact, a consistent amount of information is being published in the semantic-web framework, including resources as pathway commons, all the obo ontologies  <cit>  and uniprot  <cit> .

this vision is still constrained by current ontologies and tools. the use  of uris is at the basis of the semantic web framework. up to now, different ontologies often refer to the same entities with different uris. this requires a uri resolution step between loading ontologies and reasoning on the resulting knowledge base . furthermore, most of the bio-ontologies currently available scarcely adopt owl expressivity. the examples that we have presented rely only on their rdf description .

this limits the extent to which, when dealing with different ontologies, a reasoner is able to determine relations among their classes.

the tools that support the semantic web also present relevant limitations. most notably, current reasoners require that all the information that they process is present in memory, which poses a scalability problem.

these limitations in the implementation of the semantic web are proper of the early stages of adoption of a new technology. despite these limitations, we have shown how ontologies and reasoners in the semantic web framework can already be used for real tasks.

this has required some knowledge of details of the representation of ontologies and of the reasoning process that is unlikely to be held by a researcher whose area of interest is primarily in the life sciences. in order to improve the usability of rdfscape we have addressed this issue by providing “analysis contexts” where ontologies, reasoning settings and rules can be prepared for the user as an expandable base. the two examples we presented are defined in two analysis contexts, and users can abstract pathways ontologies as interaction networks or inspect causal relations in them without needing to know the internals of the biopax ontology.

in the contribution of the semantic web to life sciences, rdfscape fills a gap in the availability of tools that rely on ontologies for biological data analysis, since no other tool presents the ability to use a reasoner on a standard knowledge base within an open environment such as cytoscape.

we trace a comparison between rdfscape and other related tools, that are intended to represent prototypical examples of their classes.

we chose the cytoscape biopax loader  <cit>  and golorize  <cit>  as examples of other cytoscape plugins processing ontologies, pathwaytools  <cit>  <cit>  as a relevant representative of tools for pathway analysis, biodash  <cit>  as an example of projects that provide a “semantic visualization” of ontologies  and ontoviz  <cit> , owlviz  <cit> , jambalaya  <cit>  as ontology visualization tools .

in this comparison, we consider four features:  whether a tool is based on semantic web technologies,  whether it allows reasoning,  whether it provides an interactive visual environment and  whether it supports the integration of ontologies and experimental data. results of this comparison are shown in table  <dig> 

rdfscape presents a unique combination of features.

ontoviz, owlviz and jambalaya allow interactive visualization of owl ontologies , but they don't have the ability to relate them to other biological information. the cytoscape biopax loader addresses the xml representation of biopax and lacks support for inference. golorize provides an interesting ontology-driven layout feature, but its scope is limited to rendering and layout tasks. pathway tools provides a rich set of tools but is not based on semantic web technologies . the scope of biodash is similar to that of rdfscape, but with focus on the integration of heterogeneous ontologies rather than on reasoning.

the ultimate goal of rdfscape is to improve the use of ontologies in systems biology investigation. in particular it addresses the problem of associating biological functions, as defined in ontologies, to high-throughput observations of biological systems.

cytoscape provides a platform to visualize and analyse data relative to an actual biological system in specific conditions. the semantic web provides a distributed knowledge base on what is known on this biological system as a potential system. rdfscape provides the link between the two.

it therefore realizes an intelligent annotation system where the object of queries on the potential properties of a given biological subject is not only what is explicitly asserted in ontologies, but also what can be inferred from them.

an example of its usage would be to derive an interaction network from microarray data and compare it to the networks induced by the “interacts” or “affects” relations introduced in the previous examples.

given the plugin architecture of cytoscape, and its flexible use of reasoning, rdfscape can address a significant range of data in the systems biology domain and provide relevant interpretations.

future developments of rdfscape will target scoring functions to determine which parts of the ontological knowledge on a subject are related to given experimental observations.

notes on performance
performance of rdfscape is strictly related to those of the cytoscape rendering system, the libraries used to manage ontologies and the reasoner selected. it is highly variable and influenced by many factors, beside the size of ontologies: the constructs used by these, the settings of the reasoner and the inference rules defined by the user. in queries, the lack of the optimizer in the underlying libraries results in variability of performance depending on their formulation.

here we provide some empirical measurement of performance, with a breakdown in times needed to load and parse ontologies, compute inference, execute queries, map results to cytoscape, layout and render the resulting network. we consider the previously introduced task of abstracting pathway ontologies to interaction networks, and the homo sapiens release of reactome. this ontology contains approximatively  <dig> individuals grouped in  <dig> classes. its rdf/xml representation is about 27mb in size. execution times are measured on a standard desktop machine  and are reported in table  <dig> 

 minimum and maximum time measured .

 reasoning time and query time are reported separately.

all times reported are the approximate average of two measurements.

since some of the reasoners used by rdfscape perform part of the reasoning process on demand, it is not always possible to account for reasoning independently of queries. we have provided two grouped measures relative to different settings.

these results show that it is possible to use inference within an interactive environment: query times are contained and the most demanding task, reasoning, is still performed in an acceptable time .

however, it should be noted that wrong settings of the inference process, and possibly some ontologies, can easily result in unacceptable reasoning and answering times, in execution of infinite loops by the reasoner, or can make this exceed the memory capacity of an average workstation.

CONCLUSIONS
we have developed rdfscape, a plugin for cytoscape that enables it to use ontologies represented in the semantic web framework.

in rdfscape, it is possible to query and visualize not only the information explicitly asserted in ontologies, but also what can be inferred from them, where the inference process can be tuned by the user within cytoscape to produce her own interpretation of data. beside that, rdfscape enables new queries functionalities in cytoscape, like sparql queries, visual queries or interactive browsing of ontologies.

the introduction of reasoning in a platform oriented to biological data analysis fills a gap in the availability of semantic web tools in the life sciences area.

we have shown how rdfscape can enhance visualization and understanding of pathway ontologies in two example cases: abstracting pathway information as interaction networks, and deriving causal information between elements.

future development of rdfscape will target the link between ontologies and experimental data.

list of abbreviations used
go, gene ontology, owl ontology web language, rdf resource description framework, sparql, simple protocol and rdf query language, w3c world wide web consortium, obi ontology for biomedical investigation, kegg, kyoto encyclopaedia of genes and genomes, uri, uniform resource identifier, rdfs, resource description framework schema, rna, ribonucleic acid, lgpl, lesser general public license, url, uniform resource locator, obo, open biomedical ontology, gb gigabyte, ghz gigahertz, ram, random access memory, xml, extensible markup language, eu, european union, vm, virtual machine.

competing interests
the authors declare that they have no competing interests.

authors' contributions
the author conceived rdfscape, implemented it and developed the examples presented in this manuscript.

