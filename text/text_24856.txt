BACKGROUND
genomic research often requires classifying regions of the genome according to their biochemical or functional properties and then investigating how these classes relate to one another and to complementary genomic data sets. one might create these classifications automatically, by using machine learning methods that partition the genome into labeled segments  <cit> , or manually on the basis of one or more experimental data sets.

in either case, one then faces the challenge of exploring the biological meanings of the segment labels. the ucsc genome browser  <cit>  allows researchers to explore some such relationships manually, but such analyses do not efficiently scale to aggregation over a complete genome. the galaxy platform  <cit>  and bedtools  <cit>  provide useful large-scale automated analyses, but these methods do not generate the aggregate comparisons and visualizations critical to understanding these genomic segmentations. epigraph  <cit>  is a more sophisticated software toolkit that, in conjunction with galaxy, offers some visualization capabilities in addition to a variety of machine learning analysis methods.

to address this type of analytical challenge, we have developed segtools, a software toolkit that facilitates the exploratory analysis of genomic segmentations. segtools is designed to provide segmentation-centric summary statistics and visualizations, in a manner that is scalable and easy to use. in this context, a segmentation is defined as a set of non-overlapping regions of a genome, where each segment is assigned one of a small set of labels. manually or automatically generated classifications, such as the examples above, are easily represented as segmentations, with a segment for each genomic locus. labels may correspond to different types of functional elements — intron, exon, promoter — or to different subtypes of a single element — genes with high, medium or low expression. a user can then employ segtools to explore how the labels relate to transcription factor binding sites, peaks of histone modification, or any other annotation. note that some segtools commands can operate on sets of regions that contain overlapping segments, such as overlapping transcripts. throughout this manuscript and the segtools documentation, we refer to this more relaxed form of segmentation as an annotation. segtools generates results in tab-delimited text and image formats, and can summarize them in a single html report. furthermore, segtools analyses are easy to perform, script, and incorporate into existing analysis pipelines, making them useful for both manual and automated exploration.

implementation
segtools is implemented as a collection of python modules that process input files and output results in tab-delimited data files. these output files are then processed by visualization code written in r to generate plots.

usage
segtools provides a set of tools for analyzing segmentations, a subset of which are summarized in table  <dig>  these tools can be run via a command-line or python interface to create or compare segmentations and to visualize the properties of a segmentation and its relationships with provided annotations. a typical workflow involves 1) running the length-distribution, nucleotide-frequency, and transition commands on a segmentation to get a high-level view of its structure and the relationships among labels, 2) running signal-distribution against a set of signal tracks such as chlp-seq signal intensities, and aggregation and overlap against a collection of annotations set such as genes, tsss, enhancer sites, insulator sites, repetitive regions, cpg islands, or any other  region sets, and then 3) generating an html report to collate these results. because each segtools command performs an independent analysis against a single annotation file, such a workflow is trivial to parallelize.

the commands offered by the segtools package and their associated inputs and outputs. the first four commands analyze a single segmentation. the following three commands compare a segmentation to another segmentation or to an annotation. the last four commands generate no visualizations and are utilities to be used in conjunction with the other segtools commands. in each row of the table, the second column indicates the input file types , and the fourth column indicates how the outputs are visualized . "pr curve" refers to a precision-recall curve.

as input, segmentations are accepted in browser extensible data  or general feature format  formats, with the "name" column used as the segment label. point and region annotations are accepted in bed or gff formats with the "name" column as an optional grouping variable, gene annotations in gene transfer format , and signal annotations in genomedata format  <cit> . as output, each command produces a tab-delimited text file containing the primary results, and most commands also produce a visualization of the results. a summary of the data outputted by each command is shown in table  <dig>  and the specific visualizations are as follows:

• the aggregation command produces a plot in which the x-axis is either a specific type of point annotation  or a region , and the vertical axis is the relative enrichment of a given label at each position .

• the length-distribution command produces two visualizations:  a stacked collection of violin plots, each showing the distribution of segment lengths for one label, and  a bar plot showing the fraction of the segmentation  that is occupied by each label .

• the nucleotide-frequency command produces a heat map in which rows are segment labels, columns are dinucleotides, and values are frequencies of the given dinucleotide in the given label .

• the overlap command produces a series of precision-recall plots, one per annotation label. in each plot, every point corresponds to a segmentation label, the x-axis is the percentage of annotation labels that overlap the segmentation label, and the y-axis is the percentage of segmentation labels that overlap the annotation label. the command also produces a heat map in which rows are segment labels, columns are annotation groups, and values represent the fraction of overlap between segments of the given label and annotations of the given group. this overlap fraction is either in terms of segments or bases overlapped.

• the signal-distribution command produces a heat map in which rows are data tracks, columns are segment labels, and values represent the mean data value associated with the given label .

• the transition command produces a heat map in which rows and columns are segment labels, and values represent the frequency with which the row label occurs immediately following the column label. the command also produces a graph visualization of the same data, in which nodes are labels, and edges represent transition frequencies. the command provides options to include only edges corresponding to high-frequency transitions.

online documentation linked from the project web page contains complete usage information for each command.

RESULTS
case study 1: histone modifications in the human genome
certain post-translational covalent modifications of histones are associated with gene expression  <cit> , with specific combinations known to act cooperatively  <cit> . to demonstrate segtools's functionality, we generated a segmentation from the chlp-seq "peaks"  for core histone h <dig> methylated at three different lysine residues . the broad institute produced these data from the chronic myelogenous leukemia cell line k <dig> as part of the encode project  <cit> , and we downloaded them from the ucsc table browser  <cit>  on assembly ncbi <dig> 

we compared the segmentation against gencode  <cit>  version 3c gene annotations and transcription start sites . we classified a gene as active when the number of encode project rna-seq  <cit>  reads per kilobase per million mapped reads  in the gene exceeded the 75th percentile and as inactive when the gene had  <dig> rpkm. we classified tss as active when it had at least  <dig> k <dig> cytosolic poly+ cage tags mapped from the encode project cage data  <cit> , and as inactive when the tss had  <dig> cage tags. first, we used flatten to create a segmentation in which the label for each segment corresponds to the combination of histone modifications with a peak at that segment. for example, the "4/27" label corresponds to regions spanned by both h3k4me <dig> and h3k27me <dig> chlp-seq peaks. we then used aggregation in "gene mode" to visualize the enrichment of each label around the  <dig>  protein-coding gencode genes active in the k <dig> cell line. consistent with previous studies, figure 1a shows the enrichment of h3k4me <dig>  around active transcription start sites in the first row, depletion of h3k27me <dig>  around active genes in the second row, and enrichment of h3k36me <dig>  in the bodies of actively-transcribed genes in the third row.

then we created figure 1b, with nucleotide-frequency. it shows the increased frequency of cpg in all labels that include promoter-associated h3k4me <dig>  peaks.

finally, we used overlap to explore each label's predictive power for protein-coding tss activity. with precision  of  <dig> % and and recall  of  <dig> %, segments high in both h3k4me <dig> and h3k36me <dig> were most predictive of overlapped tsss being active. surprisingly, segments high in all three histone modifications were the next most predictive of tss activity, with precision of  <dig> % and recall of  <dig> %, suggesting that the presence of the other two histone modifications compensates for the inhibitory effect of h3k27me <dig>  segments with h3k27me <dig> alone were the most predictive of inactive tsss, with precision of  <dig> % and recall of  <dig> %, though segments also high in h3k36me <dig> spanned an additional  <dig> % of the inactive tsss with a precision of  <dig> %. in general, segtools analyses are quick and parallelize easily. for this case study, the flatten analysis, which operated on three segmentations consisting of around  <dig>  segments spanning ~50% of the human genome, required only  <dig> s on a single  <dig>  ghz intel xeon cpu. the nucleotide-transition command processed the  <dig>  billion bases spanned by the segmentation in  <dig> min, the overlap command summarized the intersection between these segments and  <dig>  transcription start sites in  <dig> s, and the aggregation aggregated the segmentation over  <dig>  gene models in  <dig> min.

case study 2: gene expression and local chromatin structure in the plasmodium falciparum genome
we used segtools to investigate the relationship between gene expression and local chromatin structure in plasmodium falciparum, the parasite responsible for the most lethal form of malaria. le roch et al.  <cit>  performed microarray expression assays in two time series across the plasmodium erythrocytic cell cycle, corresponding to cell cycle synchronization performed with a 5% d-sorbitol treatment  and a temperature cycling incubator . recently, these data were complemented with cell cycle time series data from two assays that measure local chromatin structure  <cit> : formaldehyde-assisted isolation of regulatory elements   <cit>  and mnase-assisted isolation of nucleosomal elements   <cit> . we used segtools to investigate the extent to which the local chromatin profile varies as a function of gene expression.

our analysis consisted of three steps. first, we identified genes that were significantly expressed in each of the three primary stages of the erythrocytic cycle: ring, trophozoite and schizont. to do so, we applied the statistical criterion from  <cit> , and we required that the gene be expressed either in the "early" or "late" gene expression experiment for the given stage. this procedure was carried out separately for the two cell cycle data sets . second, we used a previously curated set of transcription start sites   <cit>  to identify genes with a single, known tss, and then we labeled these tsss with one of eight labels  indicating the stages during which the gene is expressed. this labeling was accomplished by creating a bed file for each stage and then using flatten to merge the separate files into a single segmentation. the flattening was carried out separately for each cell cycle data set, resulting in two distinct labelings. third, we applied several segtools commands to each of the two segmentations, using a genomedata archive that contained the faire and maine data.

first, we note that the hierarchical clusterings shown along the right edge of both panels indicate that the faire measurements at the end of the erythrocytic cycle  most closely resembles maine measurements . this observation — that the faire measurement of open chromatin at hr <dig> resembles measurements of closed chromatin — is consistent with the model proposed by ponts et al., in which the parasite strongly compacts its chromatin in preparation for egress from the red blood cell at the end of the erythrocytic cycle. second, we note that the genes expressed exclusively at the beginning of the cell cycle  show an extremely strong and complementary pattern to genes expressed during the middle of the cell cycle . this pattern is particularly strong in cell cycle d , but also appears in cell cycle i . apparently, ring-specific genes exhibit closed chromatin around their tsss, whereas trophozoite-specific genes exhibit open chromatin around their tsss. this pattern is consistent across nearly the entire cell cycle, with the possible exception of hr <dig>  suggesting that local chromatin structure may contribute to stage-specific gene expression, but that local chromatin dynamics may not be the only mechanism regulating gene expression.

overall, the figure shows relatively little correlation between the time at which a gene is expressed and changes in local chromatin structure. canonically, time points  <dig>   <dig> and  <dig> of the maine/faire data correspond to the ring stage, time points  <dig> and  <dig> correspond to the trophozoite, and time points  <dig> and  <dig> correspond to schizont. the absence of a strong correlation between time of expression and the degree of local chromatin compaction suggests that, though ponts et al. have clearly demonstrated that local chromatin structure changes over the course of the erythrocytic cycle, the current analysis does not support a model in which the degree of chromatin compaction around the tss directly correlates with the expression of the gene. apparently, a more complex model that integrates additional types of data, such as transcription factor binding and histone modification profiles, is required to fully understand plasmodium's unusual gene expression machinery.

discussion and 
CONCLUSIONS
segtools enables the rapid exploration of a bird's-eye view of complex multi-label data, allowing researchers to easily generate and confirm hypotheses.

one challenge in creating any software toolkit is to define the scope of the project, treading a line between solving many problems and solving a few problems well. segtools is specifically targeted toward the analysis of segmentations, which we believe will become an increasingly prevalent and useful way to make sense of collections of parallel genomic data sets. segtools emphasizes the efficient calculation of summary statistics and publication quality visualizations thereof. indeed, all of the figures in this article were generated directly by segtools with no subsequent processing. statistical hypothesis testing — that is, testing for the enrichment of a specific annotation label within a specific segment label — has not been implemented, primarily because many such tests have been proposed  <cit> . full implementations of such tests are available in r, and segtools can interoperate seamlessly with these existing functions. similarly, we have not attempted to build into segtools sophisticated functionality for pre-filtering segmentations and annotations. segtools currently includes limited pre-processing functionality, in the form of the flatten and feature-distance commands; however, for sophisticated logical filtering operations, a toolkit such as galaxy  <cit>  or bedtools  <cit>  should be used prior to segtools analysis.

given the growing availability of large-scale heterogeneous functional genomics data sets, methods that allow us to quickly and easily summarize and make sense of these data are in growing demand. the two case studies included in this paper demonstrate how one can use segtools to pick out interesting results from complex data. individually examining many potential hypotheses one-by-one would prove laborious and difficult, but segtools makes it trivial to perform a broad battery of exploratory data analyses and find the important features of segmentation results.

availability and requirements
project name: segtools

project home page: http://noble.gs.washington.edu/proj/segtools

operating systems: linux, mac os x

programming language: python  <dig> .1- <dig> , r ≥  <dig> 

other requirements: segtools requires numpy ≥  <dig> , two r packages , one python package , and the genomedata python package for the two commands that process genomedata files. segtools can then be easily installed by typing easy_setup segtools at the shell prompt. segtools can also be acquired using our installation script that attempts to install segtools and all missing dependencies, or it can be downloaded as a virtual machine complete with all dependencies. see the project home page for additional installation instructions.

license: gnu gpl

any restrictions to use by non-academics: none

authors' contributions
mmh and wsn conceived of and supervised the project. ojb and mmh developed the software. ojb and wsn carried out the experiments. ojb, mmh, np, kglr and wsn wrote the manuscript. all authors read and approved the final manuscript.

