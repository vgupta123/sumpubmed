BACKGROUND
bio-ontologies are artefacts used to represent, build, store, and share knowledge about a biological domain by capturing the domain entities and their interrelationships. bio-ontologies have become an important asset for the life sciences. they not only provide a controlled, standard terminology ; a variety of tools are available to exploit these ontologies, making them one of the cornerstones for biological data analysis. the gene ontology   <cit>  is probably the best known bio-ontology. one of the most common uses of the go is to perform term enrichment  <cit>  on a gene set. the go website lists over fifty such tools  <cit> . in addition, the life sciences community began to utilise other available ontologies  as well as to develop their own bio-ontologies to support other biology or technology domains. a recent example is the ontology of biomedical investigations , a community effort to build an ontology describing the different elements of a biomedical investigation . the open biomedical ontologies  foundry  <cit>  suggests a set of principles to guide the development of ontologies, for instance the ‘orthogonality principle’ designed to prevent overlapping ontologies. most of the bio-ontologies gathered by the obo foundry are represented in the obo format  <cit> , which has became the lingua franca to build bio-ontologies. an increasing number of bio-ontologies is being developed in the more expressive web ontology language  that allows for advanced automated reasoning  <cit> . automated reasoning, performed on owl-formatted ontologies via the so-called reasoners , allows bio-ontologists to perform various tasks such as classification , which enables the process of making explicit the relations that were hidden , and in general provides help to ensure the consistency of an ontology.

several open source tools are available to deliver native support for bio-ontology manipulation . we have previously published onto-perl, a suite of perl tools supporting the management of ontologies represented in obo format . onto-perl is a full-blown api to manipulate bio-ontologies in obof. it offers a set of scripts supporting the typical ontology manipulation tasks, which can be used from the command line. useful as this api may be for bioinformaticians or expert ontologists, biologists may find it intimidating to use. to accommodate their easy use, working with ontologies has for instance been facilitated by the setting up of ontology portals  <cit> . these applications can be directly linked to knowledge systems that store information in local infrastructures, thus taking advantage of the ontological scaffold  through mappings between the ontology components  and actual data. the linking of ontologies and biological data is proving to be a successful stepping stone towards ontology-based knowledge discovery platforms  <cit> . those platforms may eventually become important tools in the quest for new hypotheses that can drive experimental design.

to further improve the repertoire of tools available to biologists to handle and analyze the knowledge available through ontologies we have turned to galaxy  <cit> , a web-based environment that integrates various types of tools to handle biological data. galaxy’s development is strongly targeted towards end-users who have limited computational skills , so that they may easily perform analysis or have their favourite command line tool integrated. a tracking of the history of analyses, support for building workflows and data sharing are among galaxy’s most appealing features.

we used galaxy to construct onto-toolkit, which is an extension of the onto-perl software that we developed previously. onto-perl consists of a collection of perl modules that enable the handling of obo-formatted ontologies . with these modules a user can for instance manipulate ontology elements such as a term, a relationship and so forth, or employ scripts to carry out various typical tasks .

onto-toolkit allows exploiting the onto-perl functionality within the galaxy environment. galaxy not only provides a user friendly interface to manipulate obof ontologies, it also offers the possibility to perform further biological  analyses by using other tools provided within the galaxy platform. in addition, onto-toolkit provides tools to translate obof ontologies into semantic web formats such as rdf  and owl.

methods
the functionalities of onto-perl are enabled as tools in galaxy through a set of tool configuration files , or ‘wrappers’. these files contain execution details of the tool, e.g. path to the script, the arguments and the output format. table  <dig> lists the functionalities provided by onto-perl that are useful to understand the relationship between various biological components. the script get_ancestor_terms.pl, for instance, retrieves all the ancestor terms for a particular term id from a given obo ontology. furthermore, through obo2owl.pl and obo2rdf.pl scripts users can convert their data  into owl and rdf, respectively. a schematic representation of how onto-perl is embedded as onto-toolkit in galaxy is given in figure  <dig>  a detailed description of installing onto-toolkit is available at http://bitbucket.org/easr/onto-toolkit/wiki/home.

the left column lists onto-perl scripts available in onto-toolkit, with their functionality described in the right column. *: scripts written specifically for onto-toolkit and included in the onto-toolkit download package.

RESULTS
we illustrate the use of onto-toolkit through three ontology-analysis use cases. in use case i we have analysed the relationship between terms from the cell cycle ontology , an application ontology that we described previously  <cit> . in use case ii we carried out an analysis combining onto-toolkit functionality with other tools available in galaxy, and in use case iii we have demonstrated how a workflow was built to analyse gene sets with go and s. pombe annotations.

use case i: “investigating similarities between given molecular functions”
the first use case illustrates the functionality of onto-toolkit in identifying the ontology terms linking a pair of molecular function terms. a user might be interested to search for the most specific ancestor term that is shared by two molecular functions, to see if these functions fall into the same biological category. as a primary step all ancestor terms pertaining to the molecular function term ids defined in a query are retrieved. in a next step a comparison is made between the two sets of ancestor terms for their relatedness. figure  <dig> shows a schematic depiction of this use case, with retrieval of individual ancestor terms and checking for the most specific terms shared by the two molecular functions specified in the query. it is noteworthy that such a step will always result in a set of shared upper-level terms , but obviously the relationship will be more specific if their shared terms are positioned further away from the root of the ontology, where information is more fine-grained. to implement this concept, the s. pombe-specific cco was chosen along with the two molecular function term ids . the analysis consisted of several steps. firstly, using the get_ancestor_terms functionality two queries were used to fetch the ancestor terms for each of the two term ids . this resulted in two sets of ancestor terms and annotations associated with the terms. the intersection of these two sets was determined using the get_list_intersection_from function yielding one set of specific terms  and corresponding annotations allowing the assessment of the relatedness of the initial terms.

use case ii: “identifying shared terms for a pair of proteins”
use case ii illustrates how onto-toolkit can be used in combination with other functionalities available in galaxy. a user might be interested in identifying the functional relatedness of two proteins, as described by their go annotations. to assess this, two lists of go terms associated with the two proteins need to be retrieved and then matched to determine their intersection. the example uses the h. sapiens proteins jun  and fos . their uniprot ids were used to query the biomart  <cit>  central server from within galaxy to retrieve lists of jun and fos go terms and annotations . in the second step, the onto-toolkit function get_list_intersection_from was used to obtain all the annotations shared between jun and fos . the results show the four go terms  common between these two transcription factors.

use case iii: “performing term enrichment using an ontology subset”
use case iii shows how onto-toolkit can be used to create interdependent workflows . here a researcher may wish to analyze an s. pombe gene expression dataset using a subset of go. the dataset contains a set of genes that have a high likelihood of being differentially expressed, and the researcher wants to know if this gene set has an overrepresentation of go terms that are annotated to a specific biological process. as this type of analysis considers all go terms sequentially, running this analysis on the whole go may result in insignificant p-values due to the large hypothesis space. this may be remedied by reducing this hypothesis space – for example, by considering only the role of these genes in the cell cycle.

this workflow starts by fetching an ontology and a set of gene associations, in this case, the gene ontology and the s. pombe annotations. the next step is to use the get_descendant_terms function  to extract a subset of the ontology . to get the corresponding annotations an annotation mapping function is used to get all annotations corresponding to this sub ontology. this cell cycle specific annotation file is fed into the go termfinder  <cit>  enrichment tool, along with a user-supplied gene set. this workflow can be reused multiple times , and can be shared between galaxy users.

discussion
a coherent integration of public, online information resources is still a major bottleneck in the post-genomic era. bioinformatics databases are especially difficult to integrate because they are often complex, highly heterogeneous, dispersed and incessantly evolving  <cit> . moreover, consensus naming conventions and uniform data standards are often lacking. nevertheless, the need for efficient procedures to integrate data is only increasing, due to the growing popularity of integrative biology and systems biology: approaches that need a variety of data from multiple sources to build computational models in order to understand biological systems behaviour.

bio-ontologies can greatly facilitate this integration process  <cit>  because they provide a scaffold that allows computers to automate parts or the whole of the integration process  <cit> . setting up an integrative platform that can support an advanced data analysis based on bio-ontologies typically requires the establishment of an environment that enables access both to the many public biological databases that contain curated information, and to the various bio-ontologies. moreover, such an integrative environment must enable the sharing of the information at any time with all contributors to the data curation process. in addition to curated databases, vast amounts of literature-independent data are being generated by high-throughput genome-wide analyses and accumulated in various databases. these databases represent another resource of context to infer biological function and to assess relations between biological entities. to obtain a powerful structuring and synthesis of all available biological knowledge it is essential to build an efficient information retrieval and management system. this system requires an extensive combination of data extraction methods, data format conversions, ontology-based analysis support and a variety of information sources. ultimately, such an integrated and structured knowledge base may facilitate the use of computational reasoning for analysis of biological systems, an approach that we have named semantic systems biology  <cit> .

onto-toolkit offers functionality that allows a biologist to exploit the increasingly abundant information supported by ontologies. the gene ontology consortium is participating in the development of onto-toolkit as an integration platform for performing many go based workflows, replacing existing functionality in amigo  <cit>  and expanding the range of tools to be used. for example, it is possible to extract all experimental annotations for the clade mammalia, generate a slim  from this set, or to fetch all annotations belonging to a pre-defined ontology subset. annotations extracted in this way can also be used in term enrichment analyses using go termfinder  <cit> . term enrichment analysis on ontology subsets reduces the number of terms that are considered for the overrepresentation analysis, making the analysis more sensitive.

platforms such as galaxy are aimed to overcome the barriers in global data processing, and its flexibility offers ample opportunity to identify and implement new ways to fill the gaps in data visualisation and analysis. we have explored galaxy’s use to implement data analysis techniques based on bio-ontologies. bioinformatics data resources are constantly updated, i.e. by automated, software-mediated annotation or manual curation processes that depend on human intervention. ontologies provide a means of improving the annotation process and to semantically represent the knowledge contained in biological databases in an unambiguous way. onto-toolkit builds on this trend by enabling the manipulation of bio-ontologies within an integrative platform, which in turn allows analysis results to become the entry-point for further biological data analysis.

CONCLUSIONS
we presented several use cases to illustrate how the functionality of onto-perl can be combined with the functionality of other tools in galaxy. we have shown how the functionality of onto-perl can be used to identify all the ancestor terms of a pair of ontology terms, or to simply retrieve all the terms shared by two proteins in order to assess their potential biological relatedness. we have extended and used onto-toolkit to build a workflow to dynamically extract a subset of go, map annotations to this subset, and then perform term enrichment analysis. with this we have shown that onto-toolkit constitutes a useful extension to the functionalities available in galaxy, by adding a variety of ontology-based analysis approaches that can improve the depth of the overall analysis because it builds on an increasing wealth of annotation and curation results.

availability
onto-toolkit can be obtained from its project page  <cit>  or from the galaxy tool shed  <cit> . onto-toolkit is distributed under an open source license: gnu general public license  <cit> . onto-toolkit provides access to the latest obo2owl conversion code that implements the new proposed obo foundry mapping to owl  <cit> . once the ontology is converted to owl, there are a number of owl processing tools available, including pellet  <cit> , and ontology processing via the thea library  <cit> .  ontotoolkit, including the workflow example mentioned in use case iii, is also available on-line  <cit> .

competing interests
the authors declare that they have no competing interests.

list of abbreviations used
obo: open biomedical ontologies; obof: open biomedical ontologies format; obi: ontology of biomedical investigations; go: gene ontology; cco: cell cycle ontology; rdf: resource description framework; owl: web ontology language; xml: extensible markup language.

authors' contributions
ea implemented the onto-perl extensions, the onto-toolkit tools and steered the project. av implemented use cases i and ii. cm implemented the workflow example. vm and mk provided expertise in biological data management. all the authors have contributed to and approved the manuscript.

supplementary material
additional file 1
this file contains all the additional results referred to in the description of the use cases i and ii.

subsection i: use case i - lists the ancestor terms for cco:f <dig> 

subsection ii: use case i - lists the ancestor terms for cco:f <dig> 

subsection iii: use case i - lists the overlapping terms generates as part of step  <dig> 

subsection iv: use case ii - go terms associated with jun 

subsection v: use case ii - go terms associated with fos 

subsection vi: use case ii - intersection of go terms associated jun and fos

click here for file

 acknowledgements
we thank the galaxy developers for the support they provided while implementing onto-toolkit, and two anonymous reviewers who greatly helped to improve our manuscript

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2010: proceedings of the 11th annual bioinformatics open source conference   <dig>   the full contents of the supplement are available online at http://www.biomedcentral.com/1471-2105/11?issue=s <dig> 
