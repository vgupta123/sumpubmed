BACKGROUND
one of the most striking discoveries of the genomic era is the unexpectedly small number of genes in the human genome. this amount has decreased from more than  <dig>  <cit>  to an estimated number of roughly between  <dig> and  <dig>  <cit> , tens of thousands less than initially expected and essentially the same number as found in phenotypically much simpler organisms. a question of overriding biological significance is, how complex phenotypes of higher organisms arise from limited genomes. part of the explanation may be that many genes undergo a process called alternative rna splicing, which can generate many distinct proteins from a single gene.

rna splicing is a post-transcriptional process that occurs prior to mrna translation. after the gene has been transcribed into a pre-messenger rna , it consists of intronic regions destined to be removed during pre-mrna processing , as well as exonic sequences that are retained within the mature mrna. after transcription occurs the actual splicing process, where it is decided which exons are retained in the mature message and which are targets for removal. in general, exons and introns are retained and deleted in different combinations to create a diverse array of mrnas from a common coding sequence. this process is known as alternative rna splicing. depending on the source, the percentage of alternatively spliced genes lies between 35% and 60%  <cit> . by screening many full-length cdnas it is possible to record the complete cdna from a mature rna for the same gene again and again and a full-length cdna library, also known as single-gene library , builds up. the library contains detailed information about how specific exon combinations go together. this information is directly related to the functional regions of the proteins as they are grouped in domains which in many cases correspond to a single exon which encodes these domains. for example a transcription factor consists of a dna binding domain and a regulatory domain. thus the alteration of the exon structure corresponds to an alteration in the function of this particular domain. the central premise is that a dependency in the domains points to a functional association. if domains interact functionally then their splicing should be co-regulated. and this co-regulation has direct biological significance because it shows us which variable components also interact in the expressed protein. because the polypeptide is intricately folded and tightly packed, segments that are separated by dozens of introns in the primary transcript may encode domains that interact functionally within the protein. these domains need not be structural neighbors even in the folded protein, but may interact through electrical or van der waals forces, effects of global conformational changes, or even associations with other proteins. because of these intricacies, there are no inherent distance restrictions, or limits on the number of interacting sites, and separate domains may combine their functional effect in unpredictable ways.

due to the large number of potential combinations in highly alternatively spliced genes, any library will only comprise a small portion of the total theoretically possible inventory of combinations. statistically, this leads to sparse contingency tables in which dimensions represent exons and cells represent variants. the investigation of interactions among categorical variables where not all possible combinations are observed, means addressing a model selection problem that is challenging both inferentially and computationally.

as far as alternative splicing is concerned, there is an important reason to determine this interaction structure: searching for intrapeptide interactions in functional assays is a very difficult, open-ended problem, where statistical analysis of the splicing interaction structure in the transcriptome can simplify this task enormously by identifying the sets of interacting domains. and as more investigators become interested in this type of information, and large-scale single-gene libraries become available, there is a strong need for reliable statistical methods for analyzing the resulting datasets.

we develop different statistical methods to analyse sparse contingency tables in order to determine the underlying interaction pattern and we use graphical models to visualize these patterns. the methods are compared in a simulation study and illustrated on full-length cdna libraries.

RESULTS
algorithm
general introduction to contingency tables and log-linear models
in this section we provide general definitions and notations.

assume we have q categorical random variables or factors, c = {c <dig> ..., cq}, where each cj can take on a finite number gj of possible values, called levels. the vector  represents a particular combination of levels of the joint random variable c = {c <dig> ..., cq}. the total cardinality of c is m=∏j=1qgj, which corresponds to the m different combinations of levels .

we simplify the notation by mapping each configuration of c to a unique natural number i ∈ { <dig> ..., m} with a  function f:

 f:  ↔ i ∈ { <dig> ..., m}, 

so we may write ci = . for n observations of c, the corresponding q-way contingency table has m cells, each listing the frequency of a particular configuration ci:

 nc <dig> ...,cq=ni,∑i=1mni=n. 

a general introduction to contingency tables can be found in  <cit> .

if the observations are independent, with pi the probability of sampling configuration ci, the distribution of the cell counts t is multinomial with probability p = .

in the splicing example, we may consider the cj as dichotomous random variables representing q sites of alternative splicing, each with two levels, denoted by cj ∈ { <dig>  -1}, corresponding to the presence or absence of exon j in a transcript. the contingency table therefore has m = 2q cells, with each cell represented by the q-dimensional binary vector ci = . a log-linear model for the cell probabilities can be written the following way:

 log⁡pi=β∅+∑l∈{ <dig> ...,q}βlcl+∑j,kj<k∈{ <dig> ...,q}βjkcjck+…+β <dig> ..qc1c2⋯cq. 

a general log-linear model represents p as:

 log  = xβ, 

where β is a vector of unknown coefficients and x a suitable design matrix as indicated below. let's assume that the cell probabilities are expressed in the following way:

 log⁡pc <dig> ...,cq=δ∅+δc1c1+…+δcqcq+δc <dig> c2c <dig> c2+…+δc <dig> ...,cqc <dig> ...,cq, 

where δ∅ is the global mean, δc1c <dig> is the main effect of the first variable and only depends on the distribution of c <dig>  similarly δc <dig> c2c <dig> c <dig> is the first order interaction between the first two variables and its value only depends on the joint distribution of these two variables.

we now look for a suitable parametrization x˜ci of the vector spaces spanned by the main effects δci, a parametrization x˜ci,cj for the vector spaces spanned by the first order interactions δci,cj and so on. to ensure identifiability, we impose constraints on these matrices and denote the resulting matrices by xci, xci,cj and so on. the design matrix x finally consists of these submatrices. the constitution of the design matrix x for factors with two levels can directly be derived from . the derivation of the design matrix x from  in the case of more than two levels per factor is basically an analysis of variance  parametrization with poly-contrasts. details can be found in additional file  <dig> section  <dig> 

sometimes we may assume a smaller model without some of the interaction terms. it is of the form as in  with some columns removed from the design matrix x. we denote matrices of the form xcj <dig> ...,cjk by xa, with a={cj <dig> ...,cjk}⊆c. the corresponding subvector of β is denoted by βa.

graphical models
a powerful way for visualizing conditional dependencies among variables is given by a graph. a graph g= consists of a finite set v of vertices and a finite set ℰ of edges between these vertices. in our context, the vertices correspond to the different discrete random variables. we form the so-called conditional independence graph by connecting all pairs of vertices that appear in the same generator, that is the maximal terms a ⊆ c which are present in the model. to translate a vector β into a graphical model we look for βa ≠  <dig> with βb =  <dig> ∀ a ⊂ b  and we draw edges between all vertices corresponding to a. from this graph we can directly read off all marginal and conditional independences by the global markov property for undirected graphs which states: if two sets of variables a and b are separated by a third set of variables c then a and b are conditionally independent given c , where for three subsets a, b and c of v, we say c separates a and b if all paths from a to b intersect c. for details, see  <cit> .

model selection – non-hierarchical versus hierarchical models
in the following subsections we introduce different model selection strategies for log-linear models. we first develop an ℓ1-regularization model selection approach, which is then expanded to the new so-called level-ℓ1-regularization approach. in addition, different bayesian model selection strategies, which we use for comparisons, are explained in additional file  <dig> section  <dig>  hierarchical models are a subclass of models such that if an interaction term βa is zero, then all higher order interaction terms βb for b ⊇ a are also zero. if we consider the example above with  <dig> levels, this means for example that if the first order interaction coefficient βij =  <dig> then all higher order interaction coefficients including i and j are also zero, i.e. βijk =  <dig>  ∀ k. while it is possible that the true underlying interaction model may not be hierarchical from a biological standpoint, a difficulty in the use of non-hierarchical models arises from the fact that they are not invariant under reparametrization. we have chosen the design matrix x with some constraints to ensure identifiability, and we used a specific, namely an orthonormal basis. in terms of anova, this choice is equivalent to choosing a poly-contrast. we could have imposed different constraints or have chosen a different basis, and this would have resulted in a different design matrix x or in terms of anova, a different choice of contrast. suppose we have found an interaction vector β for one parametrization of the log-linear model and that this vector corresponds to a non-hierarchical model, meaning there is at least one lower order interaction term βa equal to zero, while βb ≠  <dig> for at least one b ⊇ a. if we reparametrize the model, using a different design matrix, the coefficient for the model term a may no longer be zero. on the other hand, by reparametrizing a hierarchical model, all zero terms remain zero after reparametrization. therefore, hierarchicity is preserved after reparametrization while non-hierarchicity depends on the parametrization. this is a distinct advantage of working within the hierarchical class. in a hierarchical model, all zero coefficients can directly be interpreted in terms of conditional independence, while this is not true for non-hierarchical models.

ℓ1-regularized model selection
the lasso, originally proposed by  <cit>  for linear regression, performs regularized parameter estimation and variable selection at the same time. the lasso estimate is defined as follows:

 β_λ=arg⁡min⁡β, 

where y =  is the response vector. this can also be viewed as a penalized maximum likelihood estimator, as ∑ii <dig> is proportional to the negative log-likelihood function for gaussian linear regression. while the mle for the general regression model is no longer uniquely defined and very poor in the case of more variables than observations, the lasso estimator is still reasonable as long as λ >  <dig>  for our analysis, we have a similar problem, namely that the mle does not exist in case of zero counts in the contingency table: a detailed description of the existence of the mle in general log-linear interaction models is given in  <cit> . inspired by the lasso, we estimate our parameter vector β by the following expression:

 β_λ=arg⁡min⁡β, 

where l is the log-likelihood function l=log⁡ℙβ∝∑i=1mnnnn. this minimization has to be calculated under the additional constraint that the cell probabilities add to 1:

 ∑i=1mexp⁡{i}= <dig>  

a problem of the optimization  is that the solution is no longer independent of the choice of the orthogonal subspaces xa. that is, if any set of orthogonal columns xa of x is reparametrized by a different orthogonal set, we get a different solution. to avoid this undesirable outcome we use a penalty that is intermediate between the ℓ1- and the ℓ2-penalty. this penalty, called group-ℓ1-penalty, has the following form:

 ∑a⊆c‖βa‖ℓ <dig>  where ‖βa‖ℓ22=∑jj <dig> 

originally, this has been proposed by  <cit>  for the linear regression problem with factor variables. the estimator of β then becomes

 β_λ=arg⁡min⁡β, 

subject to the constraint in . by imposing a penalty function on the coefficients of the log-linear interaction terms, overfitting as it might occur by using mle is reduced. furthermore, the ℓ1-penalty encourages sparse solutions for the single components of β, the group ℓ1-penalty encourages sparsity at the interaction level, meaning that the vector βa, which corresponds to the interaction term a is either present or absent in the model as a whole. in case of factors with only  <dig> levels, the group ℓ1-penalty and the ℓ1-penalty are equivalent.

for both the ℓ1-, and the group ℓ1-regularization, the parameter λ can be assessed by cross-validation: we divide the individual counts into a number of equal parts and in turn leave out one part for the rest to form a training contingency table with cell counts ntrain. the solution for an array of values for λ, the so-called solution path, is calculated according to an algorithm described in the following implementation section. the corresponding vectors of cell probabilities are denoted by p. we then use the remainder of the cell counts ntest to calculate the predictive negative log-likelihood score

 −∑i=1mntest,i⋅log⁡)∑i=1mntest,i, 

which is proportional to the out-of-sample negative log-likelihood. this score is on the same scale when varying the number of observations and may therefore be used to compare contingency tables of the same dimension but with different numbers of cell entries. the parameter λ is chosen as the value which minimizes the cross-validated score in . we use a ten-fold cross-validation in our example.

the resulting model does not necessarily have to be hierarchical and if we consider the hierarchical model induced by this procedure, it might happen that the final model is large for example if a single high order interaction is estimated to be active. to address this, we set up an algorithm described in the next section.

level-ℓ1-regularized model selection
in order to prevent the procedure from choosing single high-order interactions, we alter the ℓ1-regularized algorithm described in the previous section: we do not exclusively apply it to the fully saturated model but also to submodels with lower order interactions. precisely, a model is fitted with main effects only, and the predictive negative log-likelihood score  is calculated for the best main effects model . the same is done for the model including all main effects and first order interactions . proceeding accordingly, we get |c| log-likelihood scores corresponding to the |c| levels. the level with minimal score  is then chosen .

with this procedure the tendency of including a single high-order interaction while most of its lower order interactions are absent is decreased, and the inclusion is only forced if the predictive negative log-likelihood score strongly speaks in favour of the inclusion. therefore we tend to select sparser models which can be better hierarchized and interpreted in terms of conditional independence, in contrast to the ordinary ℓ1-model selection procedure.

algorithm for ℓ1-regularization for factors with two levels
for the regularization approaches we calculate β_λ over a large number of values of λ in order to do some cross-validation using . for this purpose, an efficient algorithm is required. as one can easily verify by introducing lagrange multipliers, finding the solution to  under the constraint  is equivalent to minimizing an unconstrained function g:

 g=−l+∑i=1mexp⁡+λ∑a⊆ca≠∅‖βa‖ℓ <dig>  

with μ = xβ and l∝∑inini. here, g is a convex function. if each factor has two levels only, as in our application with single-gene libraries, we can set up an algorithm, which efficiently yields the estimates for a whole sequence of parameters λ. let a denote the set of active interaction terms, which means for a ∈ a it holds that βa ≠ 0; xa is the corresponding sub-matrix of x, βa the corresponding sub-vector of β and ga is g restricted to the subspace βa. we restrict ourselves to the currently active set a, where ∇ga and ∇2ga are well-defined:

 ∇ga=−xat{nn−⋅exp⁡}+λ)t∇2ga=xatdiag{exp⁡{xβ)}xa. 

the algorithm, which is an adaption of the path following algorithm proposed by  <cit> , is set up as follows:

 start with β_ = ,  <dig> ..., 0)

 set: λ <dig> =  <dig>  a = {∅} and t =  <dig> 

 while 

 λt+ <dig> = λt - ε

 a = a ∪ {j ∉ a: |j| > λt+1}

 β_ is updated as β_t+ <dig> = β_t - ∇2ga-1·∇ga.

 a = a\{j ∈ a: {β_t+ <dig> j| <δ}

 t = t + 1

the pairs , obtained from the algorithm above, represent the estimates from  under the constraint  for a range of penalty parameters λt e.g. . the choice of the step length ε represents the tradeoff between computational complexity and accuracy. to increase accuracy, one can perform more than one newton step  if the gradient starts deviating from zero. the coefficient δ is also flexible. typically it is chosen in the order of ε. the lowest λ for which one wants the solution to be calculated is denoted by λmin. technical details concerning the algorithm can be found in the appendix.

testing
data
we choose the true underlying interaction vector β consisting of  <dig> factors of  <dig> levels. by enumerating the factors from  <dig> to  <dig>  the generators of the model are  <dig> +  <dig> +  <dig> +  <dig> +  <dig> +  <dig>  which means that all third and fourth order interactions are absent, only five of ten second order interactions and all first order interactions are present. the corresponding coefficients of β are independently simulated using a normal distribution with mean zero and variance one.

then,  <dig> draws from a multinomial distribution with probability vector p where log  = xβ, are taken. this corresponds to a reasonable number of cdnas in a single-gene library. this is then repeated  <dig> times. with our choice of β, the resulting contingency tables are sparse. with the simulated cell counts, β_ is estimated with different methods described in the previous sections and these methods are then compared as follows:

criteria
as a model selection score , we consider the fraction of correctly assigned model terms:

 mss=1−1m∑i=1m|1{βi≠0}−1{β_i≠0}|. 

moreover, we consider the root mean squared error for the interaction coefficients,

 rmse=1m∑i=1m <dig>  

for assessing how much the estimation of β varies over multiple datasets, we calculate for every coefficient β_i the estimated standard deviation σ_i. the means of these standard deviations are reported as

 spread=1m∑i=1mσ_i, 

a measure of variability.

to compare the different procedures for estimation of probabilities p = exp , we calculate the negative log-likelihood score  similar to the score in :

 nls=−∑i=1mpi⋅log⁡). 

results of simulation study
the results of the simulation study are summarized in table  <dig>  where we also include the map estimators of the bayesian approaches described in additional file  <dig> section  <dig>  we notice that the penalty-based regularization approaches proposed in this article leads to comparable or better results than the bayesian approaches with respect to the nls-score, rmse and the variation , though the results of bayesian approaches vary with the prior and the set of possible priors has not been extensively explored.

comparison of different methods to estimate the interaction strength vector β. mss, nls, rmse and spread are described in the implementation section. the additional methods relaxed ℓ1-regularization and ℓ2-regularization listed in the table are explained in the results section.

the level-ℓ1-regularization and the relaxed ℓ1-regularization  are both competitive and can be better than mcmc for model selection.

the results of the mcmc procedures are sensitive to the choice of the prior value or the prior distribution for σ <dig>  a at prior for αa  results in worse performance than that of a prior that shrinks the coefficients more towards zero . this suggests that specification of this prior hyperparameter may be difficult in practice, while we can easily optimize λ in the regularization approach by cross-validation.

the mcmc approaches without model selection perform poorly, as should be expected from data generated by a sparse model. mcmc methods based on a non-hierarchical model selection are also clearly inferior to the hierarchical counterpart. this is not surprising, as we have simulated data from a hierarchical model. in table  <dig> we have also added an additional approach, denoted by ℓ <dig>  the equivalent to the ℓ1-regularization but using an ℓ2-penalty instead of an ℓ1-penalty on the coefficients of the log-linear model. this method is equivalent to the map estimator with gaussian priors on βa, with the parameter of the distribution optimized by cross-validation. this ridge-type method does not perform variable selection, but it is competitive for all other criteria that we assessed.

in addition we consider the relaxed ℓ1-regularization approach. rather than using a single penalty parameter λ, the idea of this method is to control variable selection and parameter estimation by incorporating two penalty parameters. for linear regression it has been proven theoretically as well as empirically  <cit>  that under suitable conditions the relaxed ℓ1-regularization is better than lasso.

overall, the level-ℓ1-regularization has good model selection performance  in combination with low negative log-likelihood score  and a low mean squared error for the true β . in addition, it is feasible to optimize the tuning parameter λ by cross-validation as the computational cost is very low compared to the mcmc approaches. on the other hand, posterior distributions of estimates from mcmc methods provide additional information about uncertainty in the model space, compared to point estimates from ℓ1- or ℓ2-regularization.

implementation
dataset
we estimate the splicing interaction pattern for a dataset corresponding to the itpr <dig> gene, one of three mammalian genes encoding receptors for the second messenger inositol  <dig> ,5-trisphosphate . this gene is subject to alternative rna splicing, with seven sites of transcript variation,  <dig> of these within the orf and among these, q =  <dig> were completely assessed in the single-gene libraries. five single-gene libraries were built, one for adult rat cerebrum as well as four for different stages of postnatal cerebellar development, namely on days  <dig>   <dig>   <dig> and  <dig>  the latter being considered as adult. each library consists of between  <dig> and  <dig> transcripts which were assessed, i.e. ∑j=1mnj ∈  <cit> . this gene is 89% identical at the cdna level and 95% identical at the amino acid level with the human receptor gene. the complete dataset can be found in  <cit> .

results of application to single-gene libraries
unless stated differently, we report the results using the level ℓ1-penalization method. we display the interaction vector β_ graphically by plotting the components β_j for the different tissue and development stages in figure  <dig>  our results suggest that the exons interact mainly in pairs and there is no reliably estimated higher order interaction in the splicing interaction pattern of rat cerebellum. we further notice that the main interaction pattern is very well conserved over different developmental stages. a strong mutual interaction between exons number three, four and five can be observed in all development stages of rat cerebellum as well as in the cerebral tissue. the biggest changes in the interaction pattern during development of rat cerebellum occur from postnatal day six to day  <dig>  this can be seen at position number  <dig> on the x-axis in figure  <dig>  and it corresponds to the first order interaction between exons two and three, and from day  <dig> to day  <dig>  the first main effect changes in sign and magnitude. the first main effect decreases progressively from day  <dig> to adult, reversing in sign between day  <dig> and  <dig>  between day  <dig> and  <dig>  the interaction pattern is strongly conserved. comparing the splicing interaction patterns between cerebellum and cerebrum in the adult rat, we see a much more complex pattern in the cerebrum, involving several second order interactions, and therefore a clear distinction from that of the cerebellum.

the conditional independence graphs for the estimated log-linear models are drawn in figure  <dig>  where the thickness of the edges are proportional to the corresponding coefficient of the interaction vector β_  and the radius of the vertices are chosen proportional to the corresponding main effect coefficient. figure  <dig> graphically exploits the strongly conserved interactions between exons three, four and five. except for a rather strong interaction between exon two and three on day six, all other interactions appear to be rather small. the graphical representation of the interaction pattern of adult rat cerebrum reveals a more complex interaction pattern with no conditional independences.

the approaches and results presented here can provide valuable insight into the underlying processes in alternative splicing in general, and specifically in the brain development experiments considered here. most striking is the strong conservation over developmental stages at day  <dig>   <dig> and  <dig> ; some differences are showing between postnatal day six and day  <dig>  also, the conservation between the cerebellum and cerebrum is less pronounced than over developmental stages. finally, second- or higher-order interaction terms seem to be of minor relevance, suggesting that in this gene/tissue combination, direct interaction mainly happens between pairs of exons, but not combinations of three or more exons.

we have also estimated β with the hierarchical bayesian approach using mcmc. for the choice of σ <dig> =  <dig> this resulted in very similar interaction patterns as for the level ℓ1-penalization method. for σ <dig> =  <dig> it led to remarkably different results. in addition to this, a further dataset was analyzed where the details can be found in additional file  <dig> section  <dig> 

CONCLUSIONS
we have developed an efficient method for identifying interaction patterns of categorical variables. this can be used to fit a graphical model which is a valuable tool to visualize the conditional dependence structure among the random variables. in a simulation study, the results of the new level-ℓ1-regularization method are superior in comparison to ℓ1-regularization and slightly better than the map estimator from some of the mcmc methods we considered. with real data, the level ℓ1-regularization and hierarchical bayesian approach led to similar results, subject to a specific choice of priors for the bayesian method. an important computational advantage of the level-ℓ1-method in comparison to mcmc, is that cross-validation becomes feasible which in turn allows for an empirical choice of the tuning parameter. while the methodology described in this article is motivated by the study of exon splicing interactions in single-gene transcriptomes, it provides a general and flexible toolbox for regularization analysis in relatively high dimensional, sparse contingency tables. model selection in high dimensional contingency tables has been a traditionally challenging area, and we hope that our generalization of regularization methodologies to this context will prove useful in a variety of areas of computational biology and biostatistics. several technologies generate categorical data: these include snp chips that provide genotype and copy number information at the dna level, sequencing technologies, assays that study binding properties of proteins and binding of rna to dna, a variety of disease phenotypes, and more. in most of these contexts the interactions among the variables are critical features in systems biology investigations that aim at studying how the components of complex systems work together in in fluencing biological outcomes. for example, the log-linear models described here provide a natural approach for fitting very general classes of networks to discrete data. the level-ℓ1-regularization is a general tool which can be applied to a wide variety of problems involving sparse contingency tables.

an r package called logilasso will be available for download on the comprehensive r archive network .

authors' contributions
cd derived the mathematical details, implemented and tested the algorithm. gp initiated the project, suggested ideas and edited the manuscript. me provided the datasets and the biological interpretation. pb supervised the project and suggested some of the main ideas. all authors read and approved the final manuscript.

appendix
we note that if β is a minimum of g, then βa is a minimum of ga.

in our application with single-gene libraries, all factors have two levels only, which allows to construct an efficient algorithm. since the gradient

 ∇=−xt⋅), 

where exp is understood as the componentwise exponential function, it follows that for a minimum βa of ga, the following equation holds:

 ∇ga=−xat⋅)+)t⋅λ= <dig> 

without loss of generality, we can restrict ourselves to the subspace β ∈ ℝ- × ℝm- <dig>  because the constraint  can only be satisfied for β∅ <  <dig> as is proved in the following lemma  <dig>  therefore β∅ ∈ a.

lemma  <dig>  β∅ <  <dig> for a minimum of g for all λ ∈ ℝ+.

proof.

 log = xβ <  <dig> which yields xβ = mβ∅ <  <dig> this implies β∅ <  <dig>  

this holds because  is orthogonal to all columns of x except for the first one.   □

additionally for β being a minimum, a necessary condition is:

 |))j|<λ,∀j∉a. 

conditions  and  are sufficient for β being a minimum of . to find the β's that solve these equations for an array of values for λ, we set up a so-called path following algorithm. the idea is to start from an optimal solution βλ <dig> for λ <dig>  and follow the path for decreasing λ, using a second-order approximation for βa. in the following, we restrict ourselves to the currently active set a, omitting the index a. it then holds:

 ∇g=0≈∇g+∇2gδβ. this impliesδβ=−∇2g−1∇g. 

the algorithm tries to follow the optimal path as close as possible. at each step, it aims to meet the conditions  and . in step , the active set a is identified, which forces β_ to meet the condition . in step , a newton step as described in  is performed. starting from a solution which meets condition , the new β_λ approximately meets  again.

supplementary material
additional file 1
the additional file consists of  <dig> sections. section  <dig> contains details concerning
the parametrization of the log-linear model. section  <dig> describes some bayesian model selection approaches, which were used for comparison with our algorithm. in section  <dig> a further dataset on which we tested our algorithm is introduced and the results are given on that dataset.

click here for file

 acknowledgements
cd was partially supported by the swiss national science foundation grant  number nf 200020- <dig> and by a phd scholarship from the cc-spmd. gp was  partly supported by nsf grant dms <dig> 
