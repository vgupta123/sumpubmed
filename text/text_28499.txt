BACKGROUND
a phylogenetic tree models the evolutionary history of a set of taxa from their most recent common ancestor. the assumptions of strict divergence and vertical inheritance render trees appropriate for modeling the evolutionary histories of several groups of species or organisms. however, when reticulate evolutionary events such as horizontal gene transfer or interspecific recombination occur, the evolutionary history is more appropriately modeled by an evolutionary network.

evidence of reticulate evolution has been shown in various domains in the tree of life. bacteria obtain a large proportion of their genetic diversity through the acquisition of sequences from distantly related organisms, via horizontal gene transfer   <cit> . furthermore, more evidence of widespread hgt in plants is emerging recently  <cit> . interspecific recombination is believed to be ubiquitous among viruses  <cit> , and hybrid speciation is a major evolutionary mechanisms in plants, and groups of fish and frogs  <cit> . all of these processes result in networks, rather than trees, of evolutionary relationships, even though at the gene level evolutionary histories may be treelike, as we now describe.

in the case of interspecific recombination, as illustrated in figure  <dig>  some genetic material is exchanged between pairs of species; in this example, species b and c exchange genetic material. the genes involved in this exchange have an evolutionary history  that is different from that of the genes that are vertically transmitted .

in the case of hybrid speciation, as illustrated in figure  <dig>  the two parents contribute equally to the genetic material of the hybrid: in diploid hybridization, each parent contributes a single copy of each of its chromosomes, while in polyploid hybridization, each parent contributes all copies of its chromosomes. thus, each set of "orthologous sites" from all taxa has an evolutionary history that is depicted by one of the trees inside the network.

a few software tools for analyzing reticulate evolutionary relationships have been developed recently. the splitstree <dig> tool, which incorporates several algorithms that have been developed by daniel huson and his co-workers, is a tool for reconstructing and visualizing splits networks  <cit> . the tool enables constructing networks from several types of data, including sequence data, distance matrices, and sets of trees. two major differences exist between splitstree <dig> and phylonet. first, splitstree <dig> constructs and analyzes splits networks, which are graphical models of incompatibility in the data, whereas phylonet constructs and analyzes evolutionary networks, which are rooted, directed, acyclic graphs, that represent evolutionary relationships. second, the two tools differ in the utilities they provide, and we view them as complementary. while splitstree <dig> is mainly aimed at reconstructing networks, phylonet has several utilities for evaluating networks.

programs such as eeep  <cit> , horizstory  <cit> , lattrans  <cit> , and t-rex  <cit>  are aimed at detecting horizontal gene transfer by reconciling a pair of species/gene trees. the phylonet software package that we developed contains an extended implementation of the riata-hgt algorithm  <cit>  with several improved algorithmic techniques for computing multiple solutions and handling non-binary trees  <cit> . the new version of riata-hgt significantly outperforms, in terms of speed, eeep, horizstory and lattrans, and performs at least as well in terms of accuracy  <cit> . we have recently added a new heuristic for inferring the support of hgt moves from bootstrap values of gene tree edges. further, we have added the capability of visualizing the networks computed by riata-hgt. besides riata-hgt, the phylonet software package implements methods for comparing and characterizing evolutionary networks, which include:  evolutionary network representation: reading/writing evolutionary networks in a newly devised compact form;  evolutionary network characterization: analyzing evolutionary networks in terms of three basic building blocks – trees, clusters, and tripartitions;  evolutionary network comparison: comparing two evolutionary networks in terms of topological dissimilarities, as well as fitness to sequence evolution under a maximum parsimony criterion; and  evolutionary network reconstruction: reconstructing an evolutionary network from a species tree and a set of gene trees. furthermore, since various evolutionary network utilities use functionalities from the phylogenetic trees domain, phylonet provides a set of standalone phylogenetic tree analysis tools.

RESULTS
the evolutionary network model
in this paper, we assume the "evolutionary network" model, which was formulated independently by moret et al.  <cit>  and baroni et al.  <cit> . we now describe the model as well as some basic definitions and notations that we will use later.

let t =  be a tree, where v and e are the tree nodes and tree edges, respectively, and let l denote the tree's leaf set. further, let χ be a set of taxa . then, t is a phylogenetic tree over χ if there is a bijection between χ and l. henceforth, we will identify the taxa set with the leaves they are mapped to, and let  = { <dig> ..., n} denote the set of leaf-labels. a tree t is said to be rooted if the set of edges e is directed and there is a single node r ∈ v with in-degree  <dig>  let t be a phylogenetic tree on set χ of taxa, and let χ' ⊆ χ be a subset of taxa; then, we denote by t|χ' the subtree with minimum number of nodes and edges that spans the leaves in χ' .

an evolutionary  network n =  over the set χ of taxa is a rooted, directed, acyclic graph such that there is a bijection between χ and the set l of the network's leaves . the set v is partitioned into two sets: vt, the set of tree nodes, which are the nodes with in-degree smaller than two, and vn, the set of network nodes, which are the nodes with in-degree greater than or equal to two. similarly, the set e is partitioned into two sets: et, the set of tree edges, which are edges incident into tree nodes, and en, the set of network edges, which are the edges incident into network nodes.

for two nodes u and v in directed graph g, we say that v is reachable from u, denoted by u⇝v if there exists a directed path from u to v in the tree g. for three nodes u, v and x in directed graph g, we write u⇝v if all directed paths from u to v go through node x; u/⇝v if no directed paths from u to v go through node x; and u⇝v if at least one directed path from u to v goes through node x and at least one directed path from u to v does not go through node x. for example, in network n <dig> in figure  <dig>  rooted at node r <dig>  we have r1⇝d, r1/⇝e, and r1⇝d.

evolutionary network representation
the newick format for representing and storing phylogenetic trees was adopted in  <dig>  <cit> , and it has been the standard for almost all phylogeny software packages ever since. this format captures an elegant correspondence between leaf-labeled trees and matched parentheses, where the leaves are represented by their names and the internal nodes by a matched pair of parentheses that contains a list of the newick representation of all its children. shown in figure  <dig> are three trees along with their representations in the newick format.

existing phylogenetic network software tools store these networks as adjacency lists of their underlying graphs, which are usually very large and necessitate translation of representations among the different tools. morin and moret  <cit>  proposed a modified version of the newick format for representing such networks. in their format, network nodes are represented by nodes labeled with #h, and those nodes are considered as two separate nodes in the normal newick format for trees. see figure  <dig> for an example. we have independently proposed a new method of tree decomposition of evolutionary networks, which provides the basis for a new format, extended newick , and used it as a compact representation of evolutionary networks. the idea in our method is to break the network into a set of trees, and then represent the network as a collection of newick representations of those trees. since the enewick format is nothing but a collection of trees in the newick format, it follows that enewick can represent unrooted networks. however, both in this paper as well as in the phylonet utilities, rooting is assumed, since different ways of rooting the same evolutionary networks may imply different evolutionary relationships.

let n = ; e) be an evolutionary network, with |vn| = ℓ. we create a forest of ℓ trees as follows.

• for every ui ∈ vn

- compute the set vi = {v ∈ v :  ∈ e} of ui's parents;

- create k new leaves, all labeled with xi  = ∅);

- delete from v the set of all edges in vi × {ui};

- add to v the set of edges vi × {xi};

- assign xi as the name of the tree rooted at node ui;

the result is a forest of trees f = {t <dig> ..., tℓ} such that  |l| ≥  <dig> for every  <dig> ≤ i ≤ ℓ,  ∪i=1ℓl=l and  l ∩ l = ∅ for every  <dig> ≤ i, j ≤ ℓ and i ≠ j. we call f the tree decomposition of n. then, the enewick representation of n is the ℓ-tuple ⟨n;...; n⟩, where n is the newick representation of tree ti. figure  <dig> shows the tree decomposition and enewick representation of the network n <dig> in figure  <dig> 

in the case of modeling networks with horizontal gene transfer events, it is often very helpful to the biologist to know what the species tree is and what the additional set of hgt events are. such information is "lost" in an enewick representation, unless the representation is extended further to keep a record of the "species tree parent" of each network node. therefore, in this case  we opt for the format of a species tree t, in newick format, followed by a list of the hgt edges, each written as x → y, where x and y are two nodes in t.

evolutionary network characterization
as we described in the background section, an evolutionary network induces, or contains, a set of trees. we now formalize this concept and characterize networks in terms of the trees they induce. a tree t is induced by a network n if t is obtained from n as follows:  for each node of in-degree larger than one, remove all but one of the network edges incident into it, and  for every node of in-degree and out-degree  <dig>  and whose parent is u and child is v, remove the two edges incident with it, and add an edge from u to v. we denote by t the set of all trees induced by n. figure  <dig> shows the sets t and t for the two networks n <dig> and n <dig> in figure  <dig>  it is important to note that this set of trees is completely different from the set of trees obtained by the tree decomposition we introduced to facilitate the enewick format. an evolutionary network n with vn = {v <dig> ..., vℓ}, such that indegree = ρi, induces m trees, where m≤∏i=1ℓρi

given an evolutionary network n, the set t is unique. further, this set informs about the possible gene histories that the network reconciles.

in addition to characterizing evolutionary networks by the set of trees they induce, we consider a cluster-based characterization. this view of evolutionary networks is very important for understanding the relationships among the "evolutionary perspective" of evolutionary networks and the "cluster, or splits, perspective", which is adopted in various methods  <cit> . let t =  be a phylogenetic tree on set χ of taxa and rooted at node r. each edge e =  ∈ e induces a cluster of taxa, denoted ce, which is the set {x∈χ:r⇝x}. the  clusters of tree t is the set c = {ce : e is an internal edge in e}. the topology of a tree is a compact graphical representation of its clusters, where the root of the clade that corresponds to cluster ce' lies on the path from the root of the tree to the root of the clade that corresponds to cluster ce if and only if ce ⊆ ce'. hence, clusters play an important role in phylogenetic tree characterization and reconstruction. a straightforward way to extend this concept to evolutionary networks is to define the set of clusters of evolutionary network n as c=∪t∈tc. the clusters of the two networks n <dig> and n <dig> in figure  <dig> are listed in table  <dig> 

a table of the  clusters of the two networks n <dig> and n <dig> in figure  <dig>  denoted by c and c, respectively, in the text. highlighted are rows corresponding to clusters that differ between the two networks.

in this form of cluster-based characterization, clusters are unweighted; equivalently, all clusters are weighted equally. one option of weighting the clusters is by considering the fraction of trees in which it appears. in other words, the weight of a cluster ce can be computed as

 w=|{t∈t:ce∈c}||t|. 

this weighting scheme informs not only about the clusters of taxa that the network represents, but also how many gene trees in the input share each cluster. it is important to note here that this weighting of a cluster should not be confused with, or used in lieu of, support values of clusters, since a cluster may appear in only one gene tree and have a high support  whereas a poorly supported cluster may appear in several trees.

nakhleh and colleagues have recently introduced a new characterization of evolutionary networks based on the tripartitions of their edges  <cit> . let e =  be an edge in an evolutionary network on set χ of taxa and rooted at node r. we define three disjoint sets ae = {x∈χ:r⇝x}, be = {x∈χ:r⇝x}, and ce = {x∈χ:r/⇝x}. then, the tripartition induced by edge e, denoted θe, is the triplet ⟨ae; be; ce⟩. roughly speaking, the tripartition induced by an edge is the three sets of taxa reachable from the root only through that edge , reachable through that edge but not exclusively , and not reachable through that edge . the set of  tripartitions induced by a evolutionary network n, denoted by θ, is {θe : e is an internal edge in e}. the tripartitions of the two networks n <dig> and n <dig> in figure  <dig> are listed in table  <dig> 

a table of the  tripartitions of the two networks n <dig> and n <dig> in figure  <dig>  denoted by θ and θ, respectively, in the text. highlighted are rows corresponding to tripartitions that differ between the two networks.

tripartition-based characterization of an evolutionary network helps to identify clades across which no genetic transfer occurred. if ae = x and be = ∅ for an edge e = , this implies that the clade rooted at node v has set x of leaves, and there does not exist any exchange or transfer of genetic material between any organism in x and another organism that is not in x. equivalently, an evolutionary network can be partitioned into a collection {n <dig>  n <dig> ..., nk} of evolutionary networks that result from n by deleting every edge e for which be = ∅. such a partition informs about the "locality" of reticulation events: each event in n is local to one of the k components in {n <dig>  n <dig> ..., nk}. further, this partition implies that each of the trees in t has k clades that have the sets {l, l,..., l} of leaves.

evolutionary network comparison
researchers are often interested in quantifying the similarities and differences between two phylogenies reconstructed either from two different sources of data or from two different reconstruction methods. such a quantification provides insights into agreements and disagreements among analyses, confidence values for different parts of the phylogenies, and metrics for comparing the performance of phylogenetic reconstruction methods. in the context of phylogenetic trees, this quantification is most commonly done based on one of two criteria:

• topological differences. the topologies, or shapes, of two phylogenetic trees are compared, and their differences are quantified. several measures have been introduced to quantify topological differences and similarities between a pair of trees, such as the robinson-foulds measure and the spr distance; see  <cit>  for a description of several such measures.

• fitness to sequence evolution. when two phylogenies are reconstructed from the same sequence data set, it is common to compare them in terms of how well they model the evolution of the sequences. the most commonly used criteria for measuring such fitness are maximum parsimony, maximum likelihood, and the bayesian posterior probability; see  <cit>  for a detailed discussion of all three criteria.

in this section, we report on the capabilities in phylonet for comparing two evolutionary networks in terms of their topological differences and similarities, as well as in terms of their fitness to sequence evolution based on the maximum parsimony criterion.

for quantifying the dissimilarity between two evolutionary network topologies n <dig> and n <dig>  we want a measure m that satisfies three conditions:

identity: m =  <dig> if and only if n <dig> and n <dig> are equivalent;

symmetry: m = m; and

triangle inequality: m + m ≥ m for any evolutionary network n <dig> 

this issue of evolutionary network equivalence was discussed in  <cit> . the three characterizations of evolutionary networks that we described above induce three measures which we now define. let n <dig> and n <dig> be two evolutionary networks on the same set x of leaves; we define the three measures as follows.

tree-based comparison
let t and t be the two sets of all trees induced by the two networks, and let d be a distance metric on trees . the idea is to compare the two networks based on how similar their corresponding sets of trees are. we formalize this as follows. construct a weighted complete bipartite graph g, where |ui| = |t|, and there are two bijections fi : ui → t for i =  <dig>   <dig>  the weight of an edge e =  ∈ e for u ∈ u <dig> and v ∈ u <dig>  w = d, f2). then, the tree-based measure mtree is defined as the weight of a minimum-weight edge cover of g divided by, the number of the edges in the cover. in its current implementation, phylonet uses the robinson-foulds distance measure  <cit>  for d. the tree-based measure was first introduced by nakhleh et al.  <cit> . an illustration of tree-based comparison of the two networks n <dig> and n <dig> in figure  <dig> is given in figure  <dig>  shown on the left of figure  <dig> is the bipartite graph g built from the sets t and t of trees induced by the two networks; these two sets are shown in figure  <dig>  the weight of each edge connecting two nodes in g is the rf distance between the two trees corresponding to these two nodes. these weights can be normalized by the number of internal edges in the trees. since each of the eight trees has six internal edges, the weight of each edge in g can be divided by six to normalize it.

shown on the right of figure  <dig> is the minimum-weight edge cover of g, which is the set of edges that satisfies two conditions:  each node in g must be the endpoint of at least one edge in the set, and  the sum of the weights of the edges in the set is minimum among all sets of edges satisfying condition  <dig>  in this case, the four edges shown are a cover, since each node in g is "covered" by at least one edge . further, it is of minimum weight, which equals  <dig>  since a simple inspection yields that every other cover has a weight larger than  <dig>  since the cover has four edges in it, we have mtree = / <dig> = 1/ <dig>  if we use the raw rf values, then mtree = / <dig> = 1/ <dig> 

cluster-based comparison
let c <dig> = c and c <dig> = c be the two sets of all clusters induced by the two networks. we define the measure based on these two sets to be

 mcluster=/ <dig>  

the rationale behind this measure is that it is the sum of the ratios of clusters present in one but not both networks. the cluster-based measure was first introduced by nakhleh et al.  <cit> . the sets c <dig> = c and c <dig> = c of the two networks n <dig> and n <dig> in figure  <dig> are listed in table  <dig>  with |c1| = |c2| =  <dig>  since |c <dig> - c2| = |c <dig> - c1| =  <dig> , we have mcluster = 1/ <dig>  a similar weighting scheme to that described in the previous section can be used to incorporate the fraction of trees in which a cluster appears into the measure calculation.

tripartition-based comparison
let θ <dig> = θ and θ <dig> = θ be the two sets of all tripartitions induced by the two networks. we define the measure based on these two sets to be

 mtripartition=/ <dig>  

this measure views the two networks in terms of the sets of edges they define  and computes the sum of the ratios of edges present in one but not both networks. the tripartition-based measure was devised by moret et al.  <cit> . the sets θ <dig> = θ and θ <dig> = θ of the two networks n <dig> and n <dig> in figure  <dig> are listed in table  <dig>  with |θ1| = |θ2| =  <dig>  since |θ <dig> - θ2| = |θ <dig> - θ1| =  <dig> , we have mtripartition = 1/ <dig> 

which measure to use?
several distance measures, such as the robinson-fould measure and the subtree prune and regraft  distance, have been introduced over the years to quantify the difference between the topologies of a pair of phylogenetic trees; e.g., see  <cit>  for description of many of these measures. even though these measures may compute different distance values on the same pair of trees, there has been no consensus as to which measure should be used in general  <cit> . it may be the case that the robinson-foulds measure is more commonly used than the others, but this may be a mere reflection of its very low time requirements as compared to the other, more compute-intensive, measures.

regarding the three measures for comparing networks, a scenario analogous to that in phylogenetic trees arises here: each measure gives a different quantification of the dissimilarity between two networks based on one of the three ways to characterize a given network. as shown in the examples above, some or all of these measures may compute the same value for a given pair of networks, but that may not always be the case. tree-based comparison of networks can be viewed as a method to quantify how similar, or dissimilar, two networks are in terms of their quality as a summary of a collection of trees. in some cases, even though two networks "look different," they may be identical in terms of the trees they induce – this is the issue of indistinguishability of networks from a collection of trees that nakhleh and colleagues discussed in  <cit> . in such a case, using the tree-based comparison, or equivalently the cluster-based comparison, is most appropriate. however, if the similarity/dissimilarity of two networks means something close to an isomorphism, then the tripartition-based measure is more appropriate. however, it is important to note that none of the three measures described here is a metric on the general space of all evolutionary networks labeled by a given set of taxa.

a practical distinction among the three measures can be derived based on the methods used to infer the evolutionary history of the set of species under study. methods such as splitstree  <cit>  and neighbornet  <cit>  represent the evolutionary history as a set of splits, or clusters, hence making it more natural to use cluster-based comparison to study their performance. methods such as riata-hgt  <cit>  and lattrans  <cit>  compute evolutionary networks that are rooted, directed, acylic graphs, where internal nodes have an evolutionary implication in terms of ancestry. for these two methods, all three measures are appropriate. when the evolutionary history of a set of species is represented as a collection of its constituent gene trees, the tree-based measure is most appropriate.

finally, a clear distinction can be made among the methods in terms of computational requirements. in their current implementations, the tripartition-based measure is very fast in practice, taking time that is polynomial in the size of the two networks. on the other hand, the tree- and cluster-based measures are much slower, taking time that is exponential in the number of network nodes in the two networks . in light of recent complexity results that we obtained  <cit> , it is very likely that no polynomial-time algorithms exist for computing the tree- and cluster-based measures in general.

parsimony of evolutionary networks
nakhleh and colleagues have recently formalized a maximum parsimony  criterion for evolutionary networks  <cit>  and demonstrated its utility in reconstructing evolutionary networks on both biological and synthetic data sets  <cit> . in this section, we describe a phylonet utility that allows for comparing two evolutionary networks in terms of their fitness to the evolution of a sequence data set, based on the mp criterion. we first begin with a brief review of the mp criterion, based on the exposition in  <cit> .

the relationship between an evolutionary network and its constituent trees, as described in the background section, is the basis for the mp extension to evolutionary networks.

definition  <dig> the hamming distance between two equal-length sequences x and y, denoted by h, is the number of positions j such that xj ≠ yj.

given a fully-labeled tree t, i.e., a tree in which each node v is labeled by a sequence sv over some alphabet Σ, we define the hamming distance of an edge e ∈ e, denoted by h, to be h, where u and v are the two endpoints of e. we now define the parsimony score of a tree t.

definition  <dig> the parsimony score of a fully-labeled tree t, is Σe ∈ e h. given a set s of sequences, a maximum parsimony tree for s is a tree leaf-labeled by s and assigned labels for the internal nodes, of minimum parsimony score.

the parsimony definitions can be extended in a straightforward manner to incorporate different site substitution matrices, where different substitutions do not necessarily contribute equally to the parsimony score, by simply modifying the formula h to reflect the weights. let Σ be the set of states that the two sequences x and y can take , and w the site substitution matrix such that w is the weight of replacing σ <dig> by σ <dig>  for every σ <dig>  σ <dig> ∈ Σ. in particular, the identity site substitution matrix satisfies w =  <dig> when σ <dig> = σ <dig>  and w =  <dig> otherwise. the weighted hamming distance between two sequence is h = Σ <dig> ≤ i ≤ k w, where k is the length of the sequences x and y. the rest of the definitions are identical to the simple hamming distance case. as described above, the evolutionary history of a single  gene is modeled by one of the trees contained inside the evolutionary network of the species containing that gene. therefore the evolutionary history of a site s is also modeled by a tree contained inside the evolutionary network. a natural way to extend the tree-based parsimony score to fit a dataset that evolved on a network is to define the parsimony score for each site as the minimum parsimony score of that site over all trees contained inside the network.

definition  <dig>  the parsimony score of a network n leaf-labeled by a set s of taxa, is

 ncost:=∑si∈stcost) 

where tcost is the parsimony score of site si on tree t.

notice that as usually large segments of dna, rather than single sites, evolve together, definition  <dig> can be extended easily to reflect this fact, by partitioning the sequences s into non-overlapping blocks bi of sites, rather than sites si, and replacing si by bi in definition  <dig>  this extension may be very significant if, for example, the evolutionary history of a gene includes some recombination events, and hence that evolutionary history is not a single tree. in this case, the recombination breakpoint can be detected by experimenting with different block sizes.

the mp utility in phylonet allows the user to specify two evolutionary networks  n <dig> and n <dig> and a sequence data set s, and computes the parsimony scores ncost and ncost. the user can then compare the two scores and evaluate the fitness of the networks to the data set s based on the difference in the scores. further, the utility allows the user, for example, to evaluate the significance of each network edge in a network n by comparing the parsimony scores of two different versions of n that contain different subsets of the network edges in n.

reconstructing evolutionary networks from species/gene trees
assuming incongruence among gene and species trees is the result of hgt events only, the phylogeny-based hgt reconstruction problem, or hgt reconstruction problem for short, is defined as follows:

problem  <dig> 

input: a species tree st and a set t = {t <dig> ..., tp}of gene trees.

output: an evolutionary network n, obtained by adding a minimal set of edges Ξ to t, such that n contains every tree ti ∈ t

the minimization criterion is a reflection of occam's razor: in the absence of any additional biological knowledge, hgt events should be used sparingly to explain data features otherwise explainable under a tree model. the problem of finding a minimum-cardinality set of hgt events whose occurrence on species tree st would give rise to the gene trees in set t is computationally hard  <cit> . in  <cit> , nakhleh et al. introduced an accurate, polynomial-time heuristic, riata-hgt, for solving the hgt reconstruction problem for a pair of species and gene trees . in a nutshell, the method computes the maximum agreement subtree  <cit>  of the species tree and each of the gene trees, and adds hgt edges to connect all subtrees that do not appear in the maximum agreement subtree. theoretically, riata-hgt may not compute the minimum-cardinality set of hgt events; nonetheless, experimental results show very good empirical performance on synthetic as well as biological data  <cit> .

computing multiple solutions and the graphical output
riata-hgt was designed originally to compute a single solution to the problem, and was mainly aimed at binary trees. later, than and nakhleh  <cit>  extended the method to compute multiple solutions and to handle non-binary trees. these two features are very significant: the former allows biologists to explore multiple potential hgt scenarios, whereas the latter allows for analyzing trees in which some edges were contracted due to inaccuracies . we have conducted an experimental study to compare the performance of riata-hgt with lattrans  <cit> . although riata-hgt and lattrans  <cit>  have almost the same performance in terms of the number of hgt solutions and the solution size, the former runs much faster than the latter.

for a compact representation of multiple solutions, we introduce four terms:

• an event: this is a single hgt edge, written in the form of x → y, where x and y are two nodes in the species tree.

• a subsolution: this is an atomic set of events, which forms a part of an overall solution. in other words, either all or none of the events of a subsolution are taken in a solution.

• a component: a set of components and/or subsolutions. two components at the same level of decomposition are independent, in that an element of each component is needed to form a solution.

• a solution: the union of a single element from each component at the highest level.

to illustrate these concepts, consider species tree , c), )) and the gene tree , b), , e)). observe, that each hgt event required to reconcile the two trees has both endpoints in the subtree , c) or both endpoints in the subtree ), and no hgt event has endpoints in both subtrees. in this case, riata-hgt divides the pair of trees into two pairs:

• pair 1: , c) and , b)

• pair 2: ) and , e),

and solves the hgt reconstruction problem on each of the two pairs independently. the set of solutions of each pair is a component. notice that for each pair there are three possible ways to reconcile them; each such way is a called a subsolution. each subsolution is a set of events, which in this case is only one event. figure  <dig> shows the screen captures of two graphical outputs that correspond to two solutions on this pair of trees. notice that if a component can be further divided into independent components, riata-hgt would do so, which will result in components at different levels, with the largest components being at the highest level.

the compact representation of riata-hgt's output in terms of subsolutions and components is especially helpful when the number of solutions is large. riata-hgt also has an option to display all complete solutions. riata-hgt enumerates all complete solutions that are compactly represented as described in the preceding paragraphs. each solution, which is a set of hgt events, along with the species tree defines an evolutionary network, which riata-hgt displays in the enewick format. for example, for the trees , c), )) and , b), , e)), riata-hgt outputs  <dig> different networks in the enewick format, if riata-hgt's option for displaying complete solutions is on. figure  <dig> shows the corresponding enewick representations.

from the multiple comparisons between a species and a set of trees, riata-hgt offers a  consensus network. for each pair of species tree and gene tree, riata-hgt computes a set of hgt events for reconciling them. to obtain the consensus network, riata-hgt retains only hgt events that appear in every set of solutions for every pair of species tree and gene tree. those events are then added to the species to build the consensus network.

we note here that while offering a simple summary of solutions, this way of computing consensus networks may not be appropriate in general; work is under way to address this issue more properly.

finally, riata-hgt may report '' next to an inferred hgt x → y. if this is the case, this indicates that node x lies on the path from y to the root of the species tree. theoretically, this indicates that two nodes that do not co-exist in time, x and y in this case, shared genetic material, and hence the warning of 'time violation.' however, this may be the case simply due to incomplete taxon sampling, as discussed in  <cit> . therefore, the warning is issued in this case so as to alert that user that this inferred hgt edge is worth further inspection.

assessing the support of hgt edges
in  <cit>  we proposed a method for assessing the support of hgt edges. roughly speaking, the support value of hgt edge x → y in the species tree, where y'is the sibling of y, is derived from the bootstrap values of the gene tree branches that separate the clade under y from the clade under y'. the rationale behind the idea is that if y' and y are well separated in the gene trees , hgt is necessary to move y away from y'). for example, the support of hgt edge x → y in figure  <dig> is calculated based on the bootstrap values of the branches separating b from a in the gene tree, and it is  <dig> . more technical details can be found in  <cit> .

than et al.  <cit>  have studied the reliability of this method for assessing the support of hgt edges on various data sets from  <cit> . in this paper, we illustrate the output of riata-hgt on a pair of species/gene trees from  <cit> , as shown in figure  <dig>  the output of riata-hgt on this pair of trees is shown in figure  <dig>  riata-hgt computed four solutions, each of which has nine hgt edges. to allow for a compact representation of the solutions, they are divided into two components , and each solution is formed by taking one subsolution from each component. hgt edges for the solutions are divided into two components, which means that a complete solution is formed by taking one solution from each component. each component is labeled by the name of the internal node that is the root of the clade corresponding to that component. in the case of the solutions presented in figure  <dig>  each solution contains nine hgt edges, eight of which form a single subsolution in component i <dig> and the ninth is the only edge in the only subsolution in component i <dig>  the value in parentheses next to each hgt edge is its support value computed from the bootstrap values of the gene tree branches ). bergthorsson et. al.  <cit>  reported three hgts involving amborella: one hgt with donor being a species in the moss group  and the other two with donors being species in the eudicot group . the hgt from moss has high sh support value  <cit> . riata-hgt finds this event, i <dig> → amborella_h_m, with bootstrap value  <dig> %. the other two hgt events from eudicot do not have significant sh support values. riata-hgt also finds these events, i <dig> → amborella_h_e <dig> and i <dig> → amborella_h_e <dig>  however, their support values are  <dig> %, much smaller than that of the event from moss. in addition to these three hgt edges, riata-hgt identified six more edges, four out of which had support values smaller than  <dig> % . the hgt edge from component i <dig>  which is shared among all four solutions, has support value of  <dig> %. this edge was not reported in  <cit> . a similar situation arises with the hgt edge i <dig> → i <dig>  which is part of the three solutions that contain subsolutions  <dig>   <dig>  and  <dig> from component i18: the hgt edge has support of  <dig> %, and was not reported in  <cit> , which may be a reflection that the authors focused only on hgt events involving amborella. the ninth hgt edge in subsolution <dig> of component i <dig> has support value smaller than  <dig> %.

other utilities
as evident from the description of the methods above, there are fundamental correlations between phylogenetic trees and networks. hence, many of the evolutionary network utilities use functionalities from the phylogenetic trees domain, which we have implemented and provide as standalone tools in phylonet:

• a tool for computing the maximum agreement subtree  of a pair of trees using the algorithm of steel and warnow  <cit> . we also extended the algorithm so that it computes all masts of a pair of tree, and this feature is implemented as well.

• a tool for computing the robinson-foulds distance measure between two phylogenetic trees  <cit> .

• a tool for computing the last common ancestor  of a set of nodes in a phylogenetic tree.

additionally, phylonet provides an implementation of the parsimony-based method recomp of ruths and nakhleh  <cit>  for detecting interspecific recombination in a sequence alignment.

implementation
a major goal for the phylonet package was to make its functionality platform-independent and accessible both to end users for data analysis and to researchers designing new computational methods and techniques. in order to encompass as many platforms as possible, phylonet was implemented in java. as a result, any system with the java  <dig> platform  installed can run phylonet.

phylonet can be used in two ways, depending on how the functionality needs to be accessed. a command-line interface exposes all of phylonet's tools on a unix or dos command-line. each command accepts input from and writes output to text files. this allows phylonet's functionality to be used for manual data analysis or integrated into scripts for performing larger-scale processing. additionally, a rich and thoroughly documented object model allows the incorporation of any of phylonet's functionality into existing java programs. also bundled are various programmatic utilities that represent trees, networks, and that read and write these various data structures to and from files.

the command line interface
phylonet has a consistent and easy-to-use command line interface. a detailed discussion of this interface and all available options is available in the documentation that accompanies a download of the tool. here we provide a brief overview of the design of the command-line tool and the tools that can be accessed. table  <dig> lists all the commands that are currently available from the command-line. each of these commands accepts a set of parameters as command-line arguments. all trees, networks, sequences, and other major data structures are read in either from standard in or from text files. similarly all results can be written either to standard out or to a desired text file. all trees are read and written in newick format. networks are read and written in enewick format. these design features allow the easy use of phylonet for manual data analysis or as a tool used within a larger scripted automated analysis.

a table of the tools currently implemented in phylonet. with the exception of the three phylogenetic trees tools lca, mast, and rf, all the other tools are for analyzing reticulate evolutionary relationships.

with the exception of the recomp tool, all the functionality of phylonet is independent of other third party tools. because recomp must compute many trees using maximum parsimony trees, this tool requires that paup*  <cit>  be installed on the local system. to run a tool in phylonet, invoke the executable .jar file downloaded from the phylonet project homepage:

java -jar phylonet.jar charnet -i net.in -m tree

here phylonet.jar is the executable jar downloaded from the project homepage , charnet is the name of the tool that decomposes the network contained in file net.in into a set of trees. the reference manual included with the executable jar provides very detailed instructions regarding how to run each tool in the phylonet package.

programmatic interface
many phylogenetic methods comprise critical, but intermediate, steps in much larger methods. as a result, there is also a need for the functionality in phylonet to be available for incorporation into larger programs. as a result, all of phylonet's functionality is exposed through an extensive set of java classes. each tool is contained within its own java class and exposes a carefully constructed set of public methods that will be preserved and maintained even as phylonet grows. this modular design allows for the easy addition functionality in the future without effecting existing programs that use phylonet as a programmatic library. in addition to exposing a consistent api, phylonet also provides implementations of the most common phylogenetic data structures: trees and networks. utility classes are also included that read and write these data structures to and from files. these classes can accelerate not only incorporation of phylonet's functionality, but also the development of new phylogenetic functionality within other applications. as phylonet grows, programmatic interfaces will be added to provide access to new functionality and tools. detailed documentation of these libraries is available in javadoc form on the phylonet website.

CONCLUSIONS
analyzing and understanding reticulate evolutionary relationships have been hindered by the lack of software tools for conducting these tasks. the proposed software package, phylonet, offers an array of utilities to allow for efficient and accurate analysis of such evolutionary relationships. these utilities allow for representing networks in a compact way, characterizing networks in terms of basic building blocks and comparing them based on these characterizations, comparing networks in terms of their fitness to the evolution of a given data set of sequences under the maximum parsimony model, and reconstructing networks from species/gene trees.

the software package will help significantly in analyzing large data sets, as well as in studying the performance of evolutionary network reconstruction methods. further, the software package offers the novel enewick format for compact representation of evolutionary networks, a feature that allows for efficient interoperability of evolutionary network software tools.

availability and requirements
 <dig>  project name: phylonet | phylogenetic networks toolkit.

 <dig>  project home page: .

 <dig>  operating system: platform independent.

 <dig>  programming language: java.

 <dig>  other requirements: java  <dig> , paup* .

 <dig>  license: gnu gpl.

 <dig>  any restrictions to use by non-academics: the gnu gpl license applies.

authors' contributions
all authors contributed equally to the work described in this manuscript.

