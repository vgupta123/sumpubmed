BACKGROUND
multiple cellular properties can be monitored simultaneously over time at the single-cell level using fluorescence time-lapse microscopy  <cit> . this method is based on the repeated imaging of cell at regular time intervals, resulting in an image sequence that can be viewed as a time-lapse movie. by combining it with a computer controlled microscope stage and microfluidic devices, many cells can be observed in controlled, varying environments for days  <cit> . this powerful method is currently the only available approach to obtain real-time information on the dynamics of intracellular processes, to determine individual cell lineages, and to monitor cell-to-cell variation over time.

quantitative biological information needs to be extracted through subsequent processing of time-lapse movies, a step that significantly limits the potential of this method. this entails delineating individual cells in each movie frame , following identified cells through the movie , and identifying cell division events . done manually, this process is extremely time-consuming and error-prone, whereas universal and fully automated software does not exist. nevertheless, many automated analysis programs have been developed for specific experimental setups, mostly for analysis of eukaryotic cells . for prokaryotic cells, several software solutions exist , among which only schnitzcells  <cit>  and microbetracker  <cit>  are widely used.

all these programs were developed and tested for the model organisms escherichia coli, bacillus subtilis or caulobacter crescentus under a limited set of experimental conditions, but were also used with other bacteria having similar cell properties . all these bacterial species share low variation in shape and size between individual cells and exhibit clear contours, even when allowed to grow into a large microcolony. these characteristics enable existing algorithms to recognize every cell in each frame. however, some bacterial types cannot be easily segmented. specifically, none of the known programs could be used to automate analysis of mycobacterial time-lapse movies. this is attributed to the tendency of mycobacterial cells to form closely-packed microcolonies, lacking visible separation between neighbors. moreover, individual cells possess highly irregular morphology and do not form readily detectable division sites. these factors, combined with technical issues and experimental conditions that sometimes result in poor image quality, preclude automated analysis.

development of image analysis software that can facilitate processing of mycobacterial cells would be of great value to the field. the mycobacterium genus notably includes mycobacterium tuberculosis, the causative agent of tuberculosis. this disease caused over  <dig>  million deaths in  <dig> and the emergence of drug-resistant strains poses a great public health threat and global economic burden  <cit> . several recent publications have demonstrated that it is possible to monitor real-time growth of m. tuberculosis and its non-pathogenic relative m. smegmatis by combining fluorescence time-lapse microscopy and microfluidics. these studies have resulted in new biological insights on cell cycle dynamics, antibiotic persistence, and drug-susceptibility .

in all these studies, mycobacterial time-lapse movies were analyzed manually by using multipurpose image analysis platforms such as imagej  <cit> . however, none of these analyses were real-time gene expression studies and hence did not require the tracking of each individual cell in every frame of the time-lapse movie. such gene-expression analysis would generate considerably larger and more complex datasets and it would become challenging to efficiently store, exchange, statistically analyze, and visualize them. therefore, beyond the problem of cell segmentation and tracking algorithms, a major obstacle to a much wider application of bacterial time-lapse microscopy is processing and managing the generated data. this is, in fact, a common problem to all bioimaging methods, see  <cit> .

in this study we present bactimas  – a java-based program designed for semi-automated cell segmentation and tracking, as well as storage, analysis, and visualization of acquired time-lapse data. it includes a newly developed algorithm that allows segmentation of mycobacterial cells and manages extracted data using a database. we tested bactimas on time-lapse movies from an m. smegmatis icl reporter strain and analyzed expression dynamics of the icl gene using a novel visualization tool and a built-in sql editor.

implementation
bactimas is a java-based program that incorporates the latest imagej version   <cit>  and a relational database  . the interaction between the program and the user is facilitated through a graphical user interface loosely inspired by movie editing tools . we incorporated imagej, a tool well known to the biological community, in our gui for various image processing tasks. we also used imagej data structures and functionalities in the implementation of our algorithm. the program is distributed, with identical features, in two ways: as an icy  <cit>  plugin and as standalone software. if used as a plugin, bactimas is installed  through icy. installation of the standalone version consists of downloading and extracting the application files from  <cit> . in both cases, the sqlite database has to be installed for the program to work. in windows os, sqlite installation is a simple task, whereas in mac os x and many distributions of linux os it is already pre-installed.figure  <dig> 
program architecture and gui.  schematic representation of bactimas modular architecture. the gray box represents the main, java-based part of bactimas. the database  is a separate part of the platform. all communication between different modules, indicated with arrows, is done through the bactimas core.  bactimas gui: panel on the right displays a frame →bacteria→roi hierarchy of the current movie and is synchronized with three horizontal scroll panes on the left, showing recorded images from each channel. selected frame with annotated segmented cells is shown using an imagej stack dialog . the user can manipulate selections using the incorporated imagej application. status pane on the bottom displays various messages from the program e.g. progress updates, measurements, etc.



analyzing time-lapse movies with bactimas consists of preprocessing the images, followed by computer-assisted segmentation and tracking, and finally measurement of features of the segmented cells for further analysis. all regions of interest  and extracted measurements are automatically and continuously saved in the database, thereby reducing the chance of error and data loss. this feature also allows image processing to be a collaborative effort between multiple users.

preparation of images
individual images from up to three recorded channels must be stored as image sequences. alongside the set of original images, the user has to provide the 8-bit png versions  that the software uses internally for displaying and tracking tasks. both these sets are easily prepared using, for instance, the attached imagej program. this does not limit the format of the original images, as measurements can be taken on any image format supported by imagej.

due to the imprecision of the motorized stage, there is often a translational shift between two successive frames in an image sequence. this must be corrected before cell segmentation. to this end, bactimas has a simple and robust built-in registration algorithm  to identify and correct this. if this algorithm fails, images can be registered using external software.

apart from these mandatory steps, the user may opt to define parameters such as pixel-to-micron ratio, specify frames that should be ignored , and associate experimental information with the corresponding frame .

cell segmentation and tracking
once the images are loaded, the user must delineate contours of the cell of interest in the first frame. for easier tracking of cell poles, generations, and lineages in general, initial cells are named in an alphabetical manner and their progenies in binomial fashion . the user then selects an algorithm that segments and tracks each cell for the assigned number of frames on a selected channel.the user can easily inspect the segmentation results throughout the movie processing step. upon selecting a frame of interest, the program produces a new image stack with roi selections superimposed on the images from each channel  and of merged combinations of channels  . in addition, bactimas can generate an image sequence of all processed frames composed of roi selections superimposed on phase-contrast images. if errors are observed, the segmentation can be repeated with different algorithm parameters or by using images from a different channel . alternatively, any erroneously segmented cells can be manually corrected. this not only corrects the roi selection of the selected frame, but also facilitates the correct segmentation for the subsequent frames.

in addition to manual selection of cells, it is possible to set a specific cell to be ignored , to be defined as “dead”, or to be assigned any other property from a certain frame onwards.in many cell types, a division event is easily defined by a membrane constriction between two adjacent cells, visible on phase-contrast images. in contrast, in mycobacteria a division event often precedes any identifiable membrane constrictions. this mycobacterial feature makes it challenging for an algorithm to define the exact frame and intracellular position of the division event. bactimas therefore relies on the user to define the division events throughout movie processing. the user is assisted in this decision-making process in two ways: image sequences of each channel are separately displayed in the gui and the aforementioned image stack, displaying a combination of channels for a selected frame . after recognizing a division event, the user has to define which specific cell divided  and then to delineate the contours of the two daughter cells.

mycobacterial segmentation algorithm
previously developed algorithms cannot deal with typical m. smegmatis time-lapse movie due to challenges illustrated in figure  <dig>  to segment mycobacteria-like cells we developed an algorithm  based on the following assumptions: cells change only slightly from frame to frame thus making tracking straightforward; cells are sometimes in close juxtaposition to neighboring cells but most juxtaposed cells have at least some segments of visible edge; cells are worm-shaped with a relatively fixed width but varying length; and almost all growth happens along the length of the cell.figure  <dig> 
snapshots of mycobacterial time-lapse movie. images of phase-contrast, green fluorescence, and red fluorescence channels taken at indicated times from the time-lapse movie following the reporter strain of m. smegmatis. gfp signal, representing induction of the icl gene, increases upon addition of acetate , whereas the constitutively-expressed dsred <dig> signal is present throughout the experiment. main challenges of automated analysis of such a movie are noted: lack of visible edges between adjacent cells, lack of clear division site, cell shape variations , and non-cell objects present in the images . scale bar,  <dig> μm.



the algorithm requires three parameters to be defined, corresponding to cell width, maximum pole elongation, and the maximal area increase . for any given frame, the algorithm consist of the following steps:

 original image  is processed by applying a  <dig> x  <dig> sobel edge detection filter  <cit>  .
description of the algorithm.  original image.  image after edge detection.  thresholding.  skeletonization.  cell selection from the previous frame thinned to the skeleton pixels .  pixels of the adjusted skeleton area for the skeleton in e.  area probed for elongation  and pole elongation pixels .  new cell area is reconstructed by smearing the disk of configured radius along the pixels from f and g yielding white and green area, respectively.



 thresholding is performed using the isodata algorithm  <cit>  . optionally, the user can choose between various other auto threshold algorithms implemented in imagej. to assist the user in choosing, bactimas generates an image stack consisting of the same image frame with the different threshold algorithms applied.

 edges are thinned using the zhang and suen algorithm  <cit>  .

 the resulting image provides information about cell edges used in subsequent steps.

 cell selection from the previous frame is copied and thinned to the skeleton  <cit>  . the skeleton is expended into area by probing whether the previous skeleton pixels and neighboring pixels fit within the configured distance from the cell edge  . the skeleton is expanded lengthwise at the poles by probing the half disc area oriented away from the skeleton endpoints . the radius of those discs is determined by the algorithm’s maximum pole elongation parameter. also, in this step the algorithm is constrained by the configured maximal area increase parameter. pixel sets obtained in two previous steps form an area used to reconstruct the cell by smearing along it the disk of configured radius  .



selections are calculated in a round robin fashion, which is a drawback of this algorithm, as it makes it order dependent. however, this feature comes into play only in situations where there are no detectable borders and it is not clear to which cell to initially assign the joint area.

extraction and visualization of quantitative data
the user can extract quantitative data for the annotated cells in a configurable and fully-automated way. measurements can be taken from images in any file format, as long as they are of the same resolution and alignment as those used in segmentation and tracking . additionally, it is possible to define whether to morphologically erode the shape before taking measurement . furthermore, bactimas can acquire measurements from a user-defined background area on all channels for each frame. this information is utilized to provide an additional set of background-corrected values for each cell.

many additional pre-defined variables are provided in the sqlite database to simplify subsequent data analysis, such as interdivision time and growth rate . the user can export all or a subset of data as a csv file and then analyze them externally. we provided a built-in sql editor to query the database and perform basic time-lapse analysis but the user can also use other specialized software such as squirrel sql  <cit> .

bactimas enables visualization of the cell lineage according to user-defined graphic parameters. in such a lineage tree, the branch length corresponds to the time between divisions and branching points represent division events. if there is more than one cell at the beginning of the experiment, a separate lineage tree is plotted for each cell. optionally, the designated name of each progeny cell is plotted. the user can select any two variables and visualize them on the lineage tree, one as the branch width and the other as branch color.

RESULTS
bactimas as a platform for bacterial time-lapse movie analysis
in contrast to other matlab-based analysis software , bactimas is a freely available, open-source program written in java. table  <dig> lists the major differences between bactimas and the two most widely-used bacterial time-lapse software schnitzcells  <cit>  and microbetracker  <cit> . these two programs fully-automate cell segmentation and tracking by batch processing the movies and then provide limited tools for reviewing and possibly correcting the results. this approach works well if segmentation algorithms rarely fail. however, for many cell types this is not the case and manual intereventions are frequently needed. in contrast, multipurpose image analysis tools such as imagej provide full manual control but with limited automation. this manual approach is useful for small datasets, but as the microcolony grows, it quickly becomes error-prone and time consuming. in bactimas, we combine these two approaches. we automated the straightforward tasks  but rely on the user to detect cell divisions and, if the algorithm fails, correct cell segmentation. in doing so, the user retains complete manual control, implemented in an easy-to-use way, and benefits from computer assisted workflow. this semi-automated approach makes bactimas unique, and well suited for analysis of time-lapse movies in which existing algorithms frequently fail.table  <dig> 
comparison of bactimas with imagej 
 <cit> , microbetracker 
 <cit> , and schnitzcells 
 <cit> 

m. smegmatis
c. crescentus, e. coli
b. subtilis, e. coli


an important novelty, with respect to all other bacterial time-lapse analysis software, is data storage in the form of a relational database. the advantages of this approach are manifold: easy data backup and exchange, elegant retrieval of results via the standard sql language, and simple data maintenance/handling in general. we are using the sqlite database as a data repository for all the information extracted from the movies . the sqlite is portable, has low memory requirements, and is freely available. however, it is easy to replace sqlite with any other database management system  since the java database connectivity standard is used to connect the program with the database. this replacement would be advisable should the program be configured to use one centralized database. by default, the platform is single-user oriented, with the ability to exchange data with other users by simply transferring a single sqlite file .

the bactimas platform is built in a modular fashion  to facilitate addition of new functionalities, primarily additional cell segmentation and tracking algorithms. similar to schnitzcells  <cit>  and microbetracker  <cit> , it is possible to build an algorithm collection so that users can perform the segmentation and tracking with the best fitting algorithm. to add an algorithm, one has to write a java class implementing the given programming interface . bactimas adopts imagej data structures and functionality for various image processing tasks  and adds a number of its own functionalities, which facilitates the development of new algorithms.

segmentation and tracking of microfluidics-grown mycobacteria
we validated bactimas on time-lapse movies of microfluidics-grown m. smegmatis cells . details on the experimental setup are given in the additional file  <dig>  the bactimas algorithm tracked the growth of every individual cell in a microcolony using phase-contrast images with parameters for cell width, maximum pole elongation, and the maximal area increase set to  <dig>   <dig>   <dig>  respectively . in the presented time-lapse movie,  <dig> %  of the roi selections had to be manually corrected. manual interventions were also required to define division events. however, division events represent only a small percentage  of total cell selections in a typical mycobacterial movie. similar results were obtained with other processed movies, resulting in, at least, a 10-fold decrease of processing time when compared to manual analysis. as these results were obtained using suboptimal images , we expect a further reduction in the percentage of manual selections when using higher resolution images.figure  <dig> 
segmentation and tracking of mycobacterial cells using bactimas. cell segmentation results are presented as red  and green  outlines with phase-contrast images  and by shaded colors  at indicated times. in the bottom row, different stages of descent from a common ancestor  are represented by different nuances of red and manual interventions as white cells. scale bar,  <dig> μm.



currently available software solutions were developed for bacterial species where the typical frame-to-frame difference between cells is high, but the programs could rely on the clear cell contours to obtain good segmentation. in our experimental system, the situation is the opposite: cell delineation is difficult, but the tracking is simple because cells grow slowly and minimally change position between two successive frames . to examine if the developed algorithm is more widely applicable, we processed published time-lapse movies from three different bacterial genera: fast-growing rod-like bacillus  <cit> , crescent-shaped caulobacter  <cit> , and filamentous streptomyces  <cit> . the most promising results were obtained by processing the streptomyces time-lapse movie. the main limitation of the algorithm lies in its sensitivity to significant frame-to-frame changes in cell shape and position. should the skeleton from the previous frame fail to overlap with the contours of the cell body in the following frame, an erroneous selection would likely be generated. this presents a problem when detecting fast-growing organisms  and/or when the frequency of imaging is such that significant changes occur between subsequent frames. hence, selection of an appropriate image acquisition frequency, one that enables good automation of the tracking step, should be considered when designing the time-lapse experiments.

we intend to build a multi-channel version of the algorithm to simultaneously use the information from all available channels. this would potentially allow automated detection of cell division events in mycobacterial strains that express a fluorescently-tagged wag31protein, a reporter that accumulates at the position of cell division septum and poles  <cit> , clearly marking division events.

visualisation and analysis of bacterial gene expression
we illustrate the usage of bactimas by analyzing real-time expression of icl, a gene previously shown to be indispensable for chronic infection of m. tuberculosis in mice  <cit> . a change of carbon source in the growth medium from glucose to acetate affects the quantity and activity of icl in m. tuberculosis
 <cit> . to investigate the role of icl induction in this process, we followed the icl reporter strain of m. smegmatis  in which a green fluorescence protein  signal serves as a proxy for icl production within the cell . beside reflecting changes in icl expression, the gfp fluorescence is also influenced by fluctuations in the global gene expression machinery  within each cell. to account for differences in icl expression that stem from these other cellular factors, we monitored, in parallel, the signal of dsred <dig>  a red fluorescent protein constitutively-expressed from an independent chromosomal locus . dual-fluorescent icl reporter cells were cultured in a custom-made microfluidic device  <cit>  and imaged every  <dig> minutes. for the initial  <dig> hours cells grew in a glucose-based flow medium and then the glucose was replaced with acetate. we processed three time-lapse movies and extracted quantitative data for every cell of the microcolony. this data is the first such demonstration of single-cell gene expression dynamics in mycobacteria.

although time-lapse data is commonly represented as a lineage tree, researchers predominantly use unavailable in-house software. bactimas includes a novel and advanced visualization tool that can display lineage tree superimposed with any two variables from the database. a representative tree, with cell size displayed as proportional to the branch width and mean green fluorescence mapped to a color scale, demonstrates the advantages of such visualization for representing complex information . upon switching to an acetate-based growth medium, there is a clear increase in icl expression, with concomitant decrease in typical cell size. phenotypic heterogeneity in icl induction and cell growth, observed even between sibling cells, is clearly evident from such visualization.figure  <dig> 
visualisation and analysis of gene expression.
 lineage tree from the presented time-lapse movie. color scale represents background-corrected mean green fluorescence in arbitrary units . cell area  is displayed as proportional to the branch width. time is indicated on the vertical axis. switch to the acetate-based carbon source of the growth medium  induces strong expression of gfp, representing induction of the icl gene.  the average green-to-red fluorescence ratio calculated from all cells from three time-lapse movies. throughout the course of the experiment there were  <dig> cells in total. error bars represent standard deviation. red vertical line indicates the time of switch of the carbon source in growth media from glucose to acetate.



the built-in sql editor allows data analysis to be performed directly with bactimas. with a single query to the database , we analyzed the dynamics of icl expression in all processed movies. we calculated the green/red fluorescence ratio for every cell  and then plotted the average ratio as a function of time . the icl expression was found to be stable in the  <dig> hour interval prior to the glucose-to-acetate switch. upon the switch, icl expression continuously increased over the next  <dig> hours before reaching a 6-fold higher plateau. this is in very good agreement with the  <dig> -fold difference in the icl expression level determined after  <dig> hours by quantitative real-time pcr in m. tuberculosis
 <cit> .

CONCLUSIONS
here we present bactimas – a java-based, open-source platform for semi-automated analysis of bacterial time-lapse movies. image processing tasks are carried out through a user-friendly gui and incorporated imagej program. all resulting information is stored and retrieved from an sqlite database. the platform includes a newly-developed segmentation and tracking algorithm based on the assumption that the frame-to-frame difference in a cell’s shape and size is usually very small. the algorithm allowed us to process mycobacterial time-lapse movies for the first time. while the user is still responsible for identifying cell division events, we were able to reduce the number of manual selections by 90%. finally, we implemented a novel graphic tool and an sql editor and illustrate their usefulness by analyzing icl gene expression in m. smegmatis, the first such gene expression study in the mycobacterium genus.

the bactimas platform is currently the only available tool for analysis of mycobacterial time-lapse movies and we believe it will be useful for other similar organisms. by adding segmentation algorithms optimized for other bacterial species, it has the potential to become a much-needed platform for universal bacterial time-lapse movie analysis.

availability and requirements
project name: bactimas project home page: http://homer.zpr.fer.hr/bactimas/ operating system: linux, macos x, windows programming language: java other requirements: java  <dig>  or higher and sqlite <dig> license: gnu gpl v <dig>  please cite this paper in any publications that use this software. any restrictions to use by non-academics: none.

electronic supplementary material
additional file 1:
details about software implementation and experimental setup. 1) algorithm used to correct translational shift between frames; 2) algorithm for segmentation of mycobacteria-like cells; 3) algorithm parameters; 4) list of variables measured and calculated by bactimas; 5) implementation of a new algorithm; 6) relational model diagram of the bactimas database; 7) details about experimental setup; 8) sql query used to obtain figure 5b. 

 additional file 2:
time-lapse movie of
m. smegmatis
acquired on phase-contrast channel. details about the experimental setup are presented in additional file  <dig>  

 additional file 3:
cell segmentation results superimposed on phase-contrast movie of
m. smegmatis
. manual interventions  are indicated with a green outline and automatic ones with red outline. 

 additional file 4:
time-lapse movie of
m. smegmatis
acquired on green fluorescence channel. gfp was used as a proxy for icl expression during switch of the carbon source in growth media from glucose to acetate. 

 additional file 5:
time-lapse movie of
m. smegmatis
acquired on red fluorescence channel. this channel was used to monitor expression of dsred <dig>  a red fluorescent protein constitutively-expressed from an independent chromosomal locus, during switch of the carbon source in growth media from glucose to acetate. 

 competing interests

the authors declare that they have no competing interests.

authors’ contributions

im and žm designed the software. im implemented the software. žm performed experimental work and validated the software. dm and žm performed data analysis. im, dm and žm wrote the paper. all authors read and approved the final manuscript.

