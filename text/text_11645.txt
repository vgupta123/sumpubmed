BACKGROUND
relational biology is a discipline founded by robert rosen   <cit> , based on the previous work of nicolas rashevsky , which considers biological network structures using the mathematical tools of category theory. relational biology might be considered a branch of systems biology, in that it studies the same objects as systems biology, and for similar reasons, namely to improve our understanding of how complex biological processes work. however, its methods and conclusions are so radically different to those of conventional systems biology that one might almost say it constitutes an alternative discourse on the subject. systems biologists attempt to represent biological network systems as software objects for simulation on computers. these network structures may vary in their degree of complexity, but the difference between simple and complex networks is treated as one of degree rather than of kind. by contrast, relational biologists define complex systems as only those systems having impredicative  components, and claim that these systems are non-computable as functions by turing machines. for relational biologists, complex systems are therefore qualitatively different to simple ones.

a turing machine is a formal mathematical model of computation, which has a notion of its internal state, an unbounded tape and a read-write head for that tape  <cit> . it also has a table to determine the next internal state, the symbol to be written to the tape and the direction in which to move the head, all of which depend on the current internal state and the current symbol. the concept of the unbounded tape may be taken to imply limitless time and space for computation. a function is  computable if it can be evaluated by a turing machine which, when given an input to the function, eventually writes the value of the function for that input on its output tape, assuming that the function is defined for the input. no time bound can be imposed on how long the turing machine will take to output the value.

an adequate exposition of the logic of relational biology is impossible within the limits of a research paper. the strategy adopted here is therefore to concentrate on rosen’s metabolism-repair/replacement system, conventionally abbreviated in brackets as , a very small, but nevertheless allegedly non-computable, network which is the central object of study in modern relational biology. metabolism-repair was rosen’s own phrase, but metabolism-replacement is used here for reasons given by previous authors  <cit> . readers interested in the construction of , and in particular the reasons why it is deemed to be non-computable, are referred to louie’s recent book  <cit> , and for contextual material to rosen’s previous book  <cit>  and the recent series of reviews  <cit> . only the briefest description of  is given in the following paragraphs, referring to figures  <dig> and  <dig>  which illustrate  in two ways.

relational biologists argue that the non-computability of  by turing machines is achieved through a circular pathway of causal relations, termed closure to efficient causation <cit> . furthermore relational biologists seek to demonstrate that such non-computable systems, when represented as graphs, may be surprisingly small in terms of their total number of nodes and edges. relational biologists do not deny that complex systems can be simulated, but maintain that they can never truly be computed as functions  <cit> . since even the most advanced computers still use turing architecture , the full computational analysis of complex biological systems is therefore postulated to be beyond our current computing abilities.

relational biology has therefore concentrated its efforts into pure mathematics to the exclusion of computational analysis. rosen once quipped that his mentor, rashevsky, had lived in a time when computers were not easily accessible but, even if they had been, he would not have used them  <cit> . the abstract graph structures developed by relational biologists are referred to as models, and a modelling relation is achieved between a system in the natural world and a model in the mathematical world when their entailment structures, meaning the totality of their internal causal relations, are identical. entailment is an important concept in relational biology. when a certain pattern of system states necessarily results in a certain outcome, it is said that this outcome is entailed by that cause. relational biologists describe logical entailments in their mathematical work that represent entailments from the physical world and insist, for a correct modelling relation to be obtained, that these entailments must occur in the model. a simulation, by contrast, represents the world in a much more approximate way than a model, without the requirement for congruence of internal causal relations. a simulation may be an excellent predictive tool for the natural world, but when it goes wrong one may have no idea why, since its entailment structure is largely a work of creative approximation. relational biologists maintain that much of conventional systems biology is merely about the development of such approximate simulations  <cit> .

rosen also argued that a corollary of the non-computability of complex systems is the fact that they are also non-reducible to their component reactions, in that a model of a complex system cannot be constructed simply by an additive assembly of smaller models of that system’s individual reaction components  <cit> . by contrast, whatever claims that systems biologists may make about their own anti-reductionism  <cit> , the construction of software representations of biological networks requires the individual representation of component reactions in code, in effect a reduction at the software level. relational biologists acknowledge that there are many systems that are reducible and algorithmically computable in this way, but none of these are truly complex, and therefore few are really interesting from a biological point of view. a further point of disagreement concerns the issue of mechanism. systems biologists, and molecular biologists in general, view biological processes as machine-like. relational biologists maintain that closure to efficient causation ) produces an entailment structure, meaning a pattern of necessary causal relationships, that is quite unlike that of a machine. in summary, relational biologists see complex biological systems as non-mechanistic, non-reducible and non-computable  <cit> . relational biologists are therefore drawn to the conclusion that much of systems biology is at best over-ambitious, an attempt to compute the impossible and to force biological systems into inappropriate mechanist and reductionist straitjackets, and as a result of this that systems biology has no predictive power. on the other hand, systems biologists rarely stay the course with the two book-length expositions of relational biology  <cit> , and may even believe that anything is computable, given sufficient time and processing power, despite the fact that computer scientists have long known this to be trivially false  <cit> . the two disciplines exist on either side of a looking-glass. in this paper, we attempt, like systems biology versions of alice, to cross the looking-glass and force the tools of one world onto the materials of the other. a certain amount of abrasion inevitably results, both to tools and materials, but we aim to demonstrate that a minimal degree of adjustment is required to achieve congruence between the two approaches. whether this represents genuine progress or yet another fudge perpetrated by systems biologists, is left to the judgement of the reader.

we now turn to consideration of  in more detail. figure  <dig> shows the current standard representation of  as given by louie & kercel  <cit> . figure  <dig> shows an alternative provided by goudsmit  <cit> . figure  <dig> follows the representative conventions of relational biology, as follows: b is produced from a, and this is represented by an open-headed arrow from a to b. this productive reaction is catalysed by f, and this is represented by a filled arrow from f to a. these diagrams can be re-expressed algebraically in category theory within which it is possible to manipulate set theoretical expressions to deduce that  contains impredicative set structures, i.e. sets that are members of themselves  <cit> . these form the centrepiece of the conclusion that  as a function is not turing-computable. some authors have questioned the mathematical correctness or completeness of the various category theory manipulations performed by relational biologists  <cit> . others have disputed these claims  <cit> . the present paper concentrates solely on the diagrammatic representation of  and attempts to re-express it in process algebra.

rosen intended  to be interpreted very generally, as a representation of a whole metabolic system b produced from an entire set of nutrient sources a. metabolic activity in b is catalysed by a set of enzymatic functions f and maintained by replacement functions Φ. here, in the spirit of the previous simulation by prideaux  <cit> , we consider  as a representation of a single metabolic pathway, with a, b, f and Φ as individual entities, rather than the sets of metabolites and enzymes implied in rosen’s use of  as a general schema. the goudsmit representation  can be thought of as emphasizing this narrower interpretation, although it was not necessarily intended as such by its author. this therefore makes  more readily comprehensible to systems biologists, in effect bringing  as close as possible to the kind of network diagram typically displayed in the systems biology literature. in the aristotelian language used by relational biologists, a is the material cause of b, demonstrated in figure  <dig> by the open arrowhead and f is the effective cause of b, represented by the closed arrowhead ending on the material cause, a. the combination of two sequential closed and open ended arrows together represents entailment – the presence of f entails  the presence of b. a similar relationship of material causation exists between b and f, this time effected by Φ, and between f and Φ, effected by b, which is represented as b when acting as an effective cause. this gives rise to a circular entailment structure: f entails b which  entails Φ which entails f and so on. such a circular entailment structure results in self-reference or impredicativity and therefore, it is claimed, non-computability by a turing machine.

figure  <dig> represents  in narrower terms, a is a substrate for the production of b under the catalytic action of the enzyme f. b is also an enzyme  which catalyses the production of Φ from f. similarly Φ catalyses the production of f from b. rather than attempting to represent the whole of metabolism and replacement, this second version of  demonstrates circular entailment and impredicativity in a single network with four components. it can thus readily be seen how , as a network motif  <cit> , may repeatedly intrude into larger networks. if ’s non-computability really presents an insuperable obstacle to understanding complex biological systems, then by implication this raises questions concerning the usefulness of computational systems biology.

table  <dig> summarizes previous attempts to simulate . as long ago as  <dig>  varela et al. <cit>  simulated an autopoietic system as a tessellation automaton on an ibm  <dig>  the relevance of this early result to the computability of  systems only became apparent once letelier et al. <cit>  demonstrated that autopoietic systems constitute a sub-class of  systems, by which time several further simulations of autopoietic systems had been developed  <cit> . cho et al. <cit>  produced an extension to rosen’s  system by allowing for mutation, defined simply as alterations to the system while it is in operation, transforming  from “a description in terms of mappings into a dynamical model familiar to control engineers”. this dynamical model was then represented as a hybrid automaton operating with non-deterministic state transitions. this automaton was then applied to a real example, the xanthophyll cycle in plants. other researchers attempted to construct realistic biological network structures that capture all the required properties of . cardenas et al. <cit>  demonstrated that both a completely abstract system that merely manipulated numbers and a plausible biochemical network both fulfilled the theoretical requirements of . they then simulated the latter using matlab, copasi and metatool  <cit> . a similar philosophy was adopted by prideaux  <cit>  who constructed an  system using the spice circuit simulator software. the present study follows previous studies  in attempting to simulate  on a computer. this is the first such attempt using the process algebra bio-pepa  <cit> .

RESULTS
it is immediately evident that the bio-pepa  model has dynamic behaviour. figure  <dig> shows an ordinary differential equation  analysis of the model with parameters chosen so that the model converges to steady state behaviour. since odes are a continuous representation of a system that actually consists of discrete components, it is also interesting to perform a stochastic simulation  of the model. each stochastic simulation represents one possible trajectory of the model . figure  <dig> shows a single stochastic simulation and figure  <dig> shows the average of ten such simulations, illustrating the smoothing effect of averaging over multiple simulations. at steady state, there are  <dig> molecules of a, approximately  <dig> of p ,  <dig> of b,  <dig> of f,  <dig> of pb,  <dig> of fa and  <dig> of bf. the ode analysis can be performed for larger number of molecules by appropriately scaling the rate constants, and an analysis for a with an initial quantity of  <dig> molecules is given in the additional file  <dig> 

by contrast to figures  <dig>   <dig> and  <dig>  figure  <dig> shows analysis of the model with one parameter changed: d2 =  <dig>  instead of d2 =  <dig>  in the proceeding figures. this bistability in  simulations has also been found by piedrafita et al. <cit> 

it can also be the case that for a given set of parameters, different stochastic simulations can have different outcomes . the model in figures  <dig> and  <dig> uses different parameters to those illustrated in figures  <dig>   <dig>   <dig> and  <dig>  figure  <dig> shows the ode analysis with a steady state outcome and figure  <dig> shows a stochastic simulation with the same parameters and initial starting conditions that nevertheless ‘dies’ at time  <dig> after which no more reactions occur.

the explanation for the fact that the parameter regime in figures  <dig> and  <dig> is more likely to produce a simulation with a finite lifespan, whereas the parameter regime shown in figures  <dig>   <dig>   <dig>   <dig> and  <dig> more consistently survives beyond the  <dig> time unit point, appears to be related to the steady state values of b, f and p that are obtained in each simulation. in the former case, these values are closer to zero than in the latter case, and hence it is more likely for two of these species to reach zero at the same time which brings all reactions to a halt.

we have also modelled the stu model presented in piedrafita et al. <cit>  in bio-pepa. our bio-pepa model agrees with the ode analysis presented in that paper and also allows us to do stochastic simulation. the results of the simulation  demonstrate that when stu is modelled stochastically, it is a possibility that all reactions cease close to the initial time when molecule counts are low but that if the species can be established in sufficient numbers then the reactions are likely to continue indefinitely.

discussion
rosen’s  system has been encoded in the bio-pepa process algebra and this representation has been simulated in the bio-pepa java eclipse tool. in some runs, the system achieves a steady state and in others it exhibits initial activity and then becomes quiescent, similar to results from other simulations  <cit> . due to the use of a stochastic sampling algorithm, identical input parameters can occasionally produce either “life” or “death”.  is therefore shown to be a fragile system under certain parameters and starting conditions, vulnerable to small perturbations, but nevertheless one that can on occasions achieve a metabolic equilibrium. study of the behaviour of the model under an exhaustive range of input parameters, has, however, not been performed. it is possible that the system is more fragile in certain input ranges than others, but that remains unknown.

this paper represents the latest in a handful of attempts to produce realizations of  in computers . it differs from previous versions in that it uses as its starting point the diagrammatic representation of  , rather than any of the mathematical formulations. our simulation represents a hypothetical universe where biological networks are structured precisely as described by . what therefore are its implications for rosen’s thesis that  network structures are non-computable? given the demonstrated activity in figures  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig>  one might jump to the conclusion that rosen’s theory has been falsified, but for several subtle reasons it is not possible to state this without reservations.

previous attempts to re-express  in mathematical terms that might be more conducive to construction of a turing computable model have often met with the response that they misrepresent in some way the structure of . for instance, goertzel’s transformation of  in category theory into a representation in division algebra  <cit>  was dismissed by louie for the reason that it altered the entailment structure  <cit> . similarly, the re-expression of  in terms of λ-calculus by mossio and colleagues  <cit>  omitted a crucial component  <cit> . the latter is of particular significance since anything that can be represented in terms of λ-calculus can be encoded in the computer language lisp, and is therefore by implication turing-computable. this insistence that no alternative mathematical expression of  has correctly captured the entailment structures has also been extended to practical attempts to simulate  on computers. for instance, louie takes this stance  <cit>  relative to the work of prideaux  <cit> , insisting it is merely a simulation of  and not a successful computation of the model. this issue of simulation versus modelling has also been a subject of much discussion in the field of autopoietic systems. a case has been made that autopoietic systems are subsets of   <cit> . within the autopoietic field the issue of turing computability has been much debated  <cit> . those persuaded of the computability of autopoietic systems have therefore deduced that  must also be turing-computable  <cit> . nevertheless, it has also been maintained that autopoietic systems as constructed so far in software are not congruent with  entailment structures  <cit> . the relevance of this debate to the computability or otherwise of  depends entirely on the validity of the parallel drawn between  and autopoietic systems, for which there is still only a single derivation  <cit> .

the model presented here is also open to the same potential criticism: that we have distorted the entailment structure of  or have not completely achieved the requirement for all entailments to be internal to the system. insofar as our bio-pepa realization of  resembles prideaux’s spice realization  <cit> , it is vulnerable to louie’s same criticism of the latter  <cit> , if that criticism is accepted. nevertheless, we believe that all the necessary productive, or perhaps one might say the synthetic, entailments represented by arrows in figures  <dig> and  <dig> are captured in our bio-pepa representation. rosen did not specify within the context of  where the raw material for a was to be obtained or how to prevent its dissipation or that of any of the other components. the questions of how to define ancillary system properties, such as the boundaries of the reaction compartment, arise only when one insists on forcing  into a biologically plausible context.

a related issue concerns the way that the entailment structure of  is translated into software processes. bio-pepa is used to simulate  in both stochastic and deterministic ways. in the stochastic implementation, the entailment structure is “sampled”, meaning that one randomly chosen entailment will update the whole system state based on the rules of that entailment and the existing system conditions. in the deterministic version, there is no such “sampling”, but we set an arbitrary starting condition which determines the subsequent development of the system. the deterministic version is obviously the one closest to rosen’s notion of entailment, but given that its behaviour is indistinguishable from the average of hundreds of runs of the stochastic version, we do not believe that this issue is important.

the second potential criticism is that the unfolding of the system through time in both stochastic and deterministic versions of the simulation, is represented by a sequence of states. rosen was quite explicit that relational systems such as  do not have states, since states are by rosen’s definition a feature of systems where the entailment comes from outside the system, i.e. systems existing in a changing environment  <cit> . all computational simulations of  to date are temporal and pass through a sequence of states. at this point, systems biologists may insist that all models must of necessity have states since organisms  exist in time. however, many of our standard representations of biological networks are state-free, without it being much commented on. for example the diagrams of metabolic cycles found in biochemistry textbooks have no explicit time component. state-free does not therefore necessarily imply atemporality, merely a condition of representation. we consider this issue to be unresolved.

we now turn to issues related to computability, and whether  is noncomputable. the first issue is that of definition of computability  <cit> . the theory of computation in general, and specifically the definition of computability, applies to partial functions, i.e. those that need only be defined on a proper subset of their input set. the computability of a function does not require termination for an input value on which that function is not defined, so it is not necessary for a turing machine computing that function to terminate for every input. this issue of partial versus total functions  is raised in the appendix of mossio et al.  <cit>  cárdenas et al. <cit>  in their rebuttal of that paper, state that rosen’s definition of computability requires termination after a finite number of steps, presumably regardless of the input. however, as suggested by mossio et al. <cit>  in their appendix, rosen’s notion of computability is non-standard since if the function is not defined for an input, the standard definition of computability does not require termination. if rosen’s definition of computability does not match current mathematical understanding of computation, then it severely weakens his argument about the non-computability of life.

the second item we discuss is impredicativity. one of the foundations of relational biology’s claim that  is not computable is the existence of an impredicative set within its entailment structure when developed in category theory  <cit> . however, impredicativity in and of itself is insufficient to ensure non-computability. for example, recent work in theoretical computer science has produced techniques for rendering impredicative sets  as predicative ones  <cit> . this opens the possibility of transforming  in such a way as to eliminate its impredicative sets and show its turing-computability. some initial work has been done on applying hypersets, a method for representing impredicative and predicative sets under a single graphical notation, to   <cit> . however, this is not fully worked out with respect to  as yet.

mossio et al. <cit>  expressed the basic  system in λ-calculus, using recursion to capture the impredicativity. they then used a fixed point operator to identify functions for f, b and Φ. they emphasise that “…rosen’s definitional infinite regress is perfectly handled by recursion, in particular as formalized in the λ-calculus” . since the expression of a function in the λ-calculus and computability of the function by a turing machine are equivalent, this means that mossio et al. <cit>  purport to have shown that a general form of the  system can be expressed as a computable function. however, this has been questioned by cárdenas et al. <cit>  on the grounds that mossio et al. <cit>  do not accurately represent , specifically that they fail to capture the difference between b as product and b as catalyst . this refers to the original formulation of  by rosen as a depiction of a whole living system, where b represents the totality of the products of metabolism from nutrient sources represented by a. only a subset of those products would have a catalytic function, and they are represented as b. since the present adaptation of  represents a single metabolic pathway, b and b are the same entity. it should be noted that this is one respect in which our simulation differs from that of prideaux  <cit> , who treated b and b as separate entities and incorporated a conversion parameter between them.

this brings us to the search for such predicted real  systems. some of the work on simulation of  has involved attempts to define a plausible biological network that satisfies the constraints applied by the model  <cit> . however, it is also possible to approach this from the opposite direction. given that a large amount of data is now available from the systems biology world on the structure of real biological networks, it may be possible to search known networks for topological structures similar to . the simplicity of  interpreted in its micro-form, with four entities and three reactions, suggests that it would be extremely common. defining  as a network motif and searching for it in databases of networks would appear to be straightforward  <cit> . however, there is one major obstacle to this, namely that  mixes two kinds of reactions, synthetic and regulatory, that are frequently represented separately. lerman et al. <cit>  call these m-models and e-models respectively. for instance, classical metabolic diagrams  frequently feature reaction intermediates and omit information on the catalysts of those reactions. likewise, genetic regulatory network diagrams  tend to represent which genes activate or interact with others without necessarily specifying any of the products of those reactions. the search for real examples of  would be best focussed on models combining both metabolic and expression data. lerman et al. have produced such a model, which they call an m-e model, for thermotoga maritima, available in systems biology markup language   <cit> . the resources to answer this question are therefore beginning to become available, and this would seem to be the obvious next step in the integration of relational and systems biology.

CONCLUSIONS
 is presented here in a version using the process algebra bio-pepa. this is the latest in a series of attempts to realise  in software form. under some input parameter configurations, the system can achieve a stable active state, whereas with others it dies. as in real living systems, stochastic factors influence the outcome. this “life-like” property suggests to us that computational relational biology is possible, provided it is recognised that its computational component will consist of open-ended processes.

