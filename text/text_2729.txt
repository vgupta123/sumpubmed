BACKGROUND
the number of mathematical models of biological processes published over the last decade has grown in part due to standard format and software tool development efforts in the systems biology community. biomodels database  <cit>  was developed to support the storage, search and retrieval of these models. it provides around  <dig> models published in the scientific literature  and over  <dig>  models automatically generated from pathway resources  <cit>  such as from kegg  <cit> , biocarta  <cit> , metacyc  <cit>  sabio-rk  <cit>  and pid  <cit> .

the core format used by biomodels database is the systems biology markup language   <cit> , a widely used computer-readable format for representing computational models in biology. in an effort to unambiguously identify model elements and understand their relation with the biological processes they describe, they are extensively annotated with cross-references to external resources such as gene ontology  <cit> , chebi  <cit> , reactome  <cit>  and uniprot  <cit> . the relationship between each annotated model component and the accompanying cross-reference to an external resource is specified using terms from a controlled vocabulary  <cit> .

the model files are stored in a file system, while metadata, such as elements’ name and annotations, are stored in a sql database. this enables convenient querying of the repository’s content and retrieval of models of interest. the database also supports programmatic access to its content through web services.

making data available as linked data using the resource description framework   <cit>  is becoming a popular method for integrating resources  <cit> . rdf is based on a simple triple concept, subject-predicate-object, which allows users to capture detailed or abstract concepts. an rdf-based data model is essentially a collection of rdf statements. the statements form a linked structure where two labeled nodes  is linked via a named edge .

rdf triples are often hosted in a triple store, a purpose-built database for the storage and retrieval of triples. for example, openlink virtuoso  <cit>  is an open source triple store for storing large rdf graphs. apis are available for extracting data and generating rdf graphs, such as apache jena  <cit> , an open source semantic web framework for java which provides an api for handling rdf graphs. sparql  <cit> , a query language for databases that are able to retrieve and manipulate data stored in rdf format, also supports complex queries that merge data distributed over multiple rdf resources hosted at different physical locations.

to enable wider access and better integration with data across multiple repositories, we have exposed the models from biomodels database in rdf. this effort, named the biomodels linked dataset is part of an ebi wide effort to support semantic integration of bioinformatics data  <cit> . this effort includes other embl-ebi resources such as uniprot, chembl  <cit> , gene expression atlas  <cit> , reactome, and biosamples  <cit> .

method
sbml to rdf conversion
the definition of a sbml model consists of lists of one or more components. this includes compartment, species, reaction, parameter, unit definition, and rule. these are represented in xml using listofx elements  which are used to list each of the corresponding elements found in the entirety of the model. xml attributes are used to represents parameters such as name, identifier, etc.

the conversion of an sbml model into rdf is performed by representing each sbml element  with a corresponding class from the biomodels rdf vocabulary. each of these is represented as a subclass of the sbmlelement class, which itself is a subclass of element. the generic element class was introduced to extend this structure to other formats, such as cellml  <cit> .

the sbml xml attributes are captured using rdf properties. for example attributes such as name , initialamount and initialconcentration  are captured as properties with the same names.

the listofx element, which is used to group concepts in sbml, is not represented in rdf. instead the content of these elements is directly linked to the parent resource using rdf properties, and rdf typing is used to type each class. this simplifies the rdf representation and improves query performance.

similarly, the annotation element, which is used to add rdf content to any sbml element, is not represented, but its content is provided in a simplified way, by removing the rdf:bag tags. this allows the resulting rdf to provide direct relationship between a sbml element  and its annotations using biomodels qualifiers.

an additional attribute, curated, was introduced to capture whether a particular model had undergone the resource’s manual curation process .

since current use cases focus on the linking of model component data, rather than the simulation behavior of the model itself, the mathematical constructs present within the sbml models has been omitted. also, converting mathematical constructs into owl/rdf is a complex exercise, a research topic that needs to be addressed separately. this means that the rdf representation of the models should not be seen as a replacement for sbml representation, but more a complement to be used in specific cases. the biomodels linked dataset enables users to find and explore relevant models using semantic web technologies easily, while the sbml encoded models are used for exchange and simulation purposes.

the complete biomodels rdf vocabulary used here is available at: http://identifiers.org/biomodels.vocabulary, and a diagrammatic representation of the schema is available at: http://www.ebi.ac.uk/rdf/documentation/biomodels. table  <dig> lists the prefixes and the namespaces that are used in this paper to denote different statements.table  <dig> 
prefixes and namespaces used in this paper



prefix
namespace

biodb
http://identifiers.org/biomodels.db/

sbmlrdf
http://identifiers.org/biomodels.vocabulary

bqbiol
http://biomodels.net/biology-qualifiers

bqmodel
http://biomodels.net/model-qualifiers

cco

atlasterms
http://rdf.ebi.ac.uk/terms/atlas/


a detailed explanation of the biomodels linked dataset structure using specific examples is provided below. it describes how species and reactions elements are captured in rdf and illustrates the resulting triples.

an sbml species represents a pool of entities . such entities are considered indistinguishable from each other for the purposes of the model, may participate in reactions, and are located in a specific compartment. the sbml species element is represented as a class species in rdf. its attributes, for instance the xml attribute name, are captured as properties in rdf .figure  <dig> 
sbml species definition.  diagrammatic representation of the sbml xml species class definition.  diagrammatic representation of the sbml rdf species definition. classes are illustrated using boxes and the arrow denotes the property relationship between the classes.



the rdf triples generated through such a species conversion are illustrated below, using http://identifiers.org/biomodels.db/biomd0000000001#_ <dig> as an example. all rdf snippets are expressed using the turtle format.

an sbml reaction represents any kind of process that can change the quantity of one or more species in a model. figure 2a illustrates the rdf schema that was created for the reaction. figure 2b shows an instantiation of the reaction class to capture the following reaction: basalach↔basalach <dig> figure  <dig> 
sbml reaction definition.  diagrammatic representation of the sbml rdf reaction definition. classes are illustrated using boxes and the arrow denotes the property relationship between the classes.  diagrammatic representation of instantiation of a reaction, http://identifiers.org/biomodels.db/biomd0000000001#_ <dig> 



each species participating in a reaction as a substrate or product is declared using a speciesreference. the speciesreference class has the property sbmlrdf:species to reference the participating species. currently mathematical equations are captured as strings using the property sbmlrdf:notes. following this conversion, the triples generated for the example reaction above are:

uris
each rdf model is identified using a unique resolvable uniform resource identifier  provided by identifiers.org  <cit> . specific model elements are uniquely identified using a leading hash combined with the sbml meta id; for example http://identifiers.org/biomodels.db/biomd0000000008# <dig>  in addition to providing a globally unique way to identify models, identifiers.org uris also enable direct access to models by just resolving the url .

references to external resources are made using identifiers.org uris, and in cases where canonical uris are available, owl:sameas statements are added to record them too. this provides a greater degree of interoperability with other linked datasets.

storage and provision
to enable semantic query of such data, it is necessary to populate a triple store with the rdf statements resulting from the previously described conversion. we use openlink virtuoso for storing biomodels linked dataset. query access to the dataset is provided by exposing the triple store through a sparql endpoint that can be accessed at: http://www.ebi.ac.uk/rdf/services/biomodels/sparql.

distribution
rdf files are regenerated with each biomodels database release , and distributed with the other model archives, and the virtuoso triple store is repopulated with the new files. this means that the triple store only contains the latest release and does not keep track of the old revisions.

system architecture
the system is running on two independent data centers. each datacenter consists of instances of a virtuoso repository and a lodestar application  <cit> . the lodestar application provides a simple interface for querying and browsing the rdf triples.

RESULTS
this paper describes the biomodels linked dataset using biomodels database release  <dig>  from apr  <dig>  the sbml and rdf files for this release can be downloaded from: ftp://ftp.ebi.ac.uk/pub/databases/biomodels/releases/2014-04-11/. this includes all models published in the literature, together with the sbml rdf schema and a dataset description which contains metadata about the dataset. the source code for the sbml to rdf converter can be found at https://github.com/sarala/ricordo-rdfconverter. a set of example sparql queries are detailed at http://www.ebi.ac.uk/rdf/documentation/biomodels/queries, which includes all the queries described in this paper.

data statistics
the biomodels linked dataset consists of an rdf representation of all models from biomodels database’s literature branches . it includes  <dig> curated and  <dig> non-curated models, comprising  <dig> , <dig> triples, and  <dig> , <dig> cross-references pointing to  <dig>  different biological concepts.

the dataset includes  <dig>  species in total. this number can be obtained via the following sparql query:

it is also possible to calculate the distinct number of species using the annotations. the following query returns  <dig>  species .

the dataset includes  <dig>  reactions representing  <dig>  distinct reactions deduced using the annotations. queries can also be performed to collect statistical information, such as the number of model elements annotated to a given resource.

example local queries
simple queries can be written to list individual elements such as species or reactions within a particular model. for example, the query below will list all the species  which appear in the model edelstein <dig> - epsp ach event :

queries can be constructed to identify elements that relate to specific concepts using ontological annotations. the example below finds all model elements linked to the gene ontology term, acetylcholine-gated channel complex :

sparql also allows pattern matching. for example, it is possible to write a query to find all model elements that have annotations to any reactome pathways. the following query does just that and returns the model elements, element type, qualifier and the specific reactome annotation:

it is possible to run more complex queries using sparql. for example query for models which describe reactions involving calcium ions in the cytosol of rat. the following query looks up models that have annotations to rat , cytosol , and calcium ion . the results list models and their reactions that have elements with annotations to all three concepts.

federated queries
most bioinformatics resources cross reference each other and have direct references to ontological terms . using these mappings, it is possible to construct a query which retrieves and integrates information from different resources. for example one can query for chembl protein targets present in a particular model. this can be achieved by writing one query which integrates data from biomodels database and chembl via the common cross references to uniprot proteins. the query below first looks up model elements with annotations to uniprot. the result is then used to query chembl linked dataset via its sparql endpoint to retrieve chembl targets:figure  <dig> 
biomodels linked dataset mapping. dashed lines illustrate the direct links that exist within the dataset to other data resources and ontologies. this enables queries that span across multiple data stores via the sparql endpoints. access to individual models can be achieved via identifiers.org uris.



using external links, one can query models using resources that are not directly used to annotate models. for instance both biomodels database and expression atlas  <cit>  provides direct extensive annotations to uniprot proteins, but provides no cross-references to each other. using these common uniprot cross references, it is possible to run a query to find all model elements that relate to a particular gene, tgfbr <dig>  even if biomodels database does not have models directly annotated with tgfbr <dig>  this query first looks up in the atlas linked dataset to find relevant uniprot identifiers. the result is then used to query biomodels linked dataset to find relevant model elements:

biomodels linked dataset can be used to compare models. for example: finding models to compare with annotations to some proteins that are used as drug targets by lactic acid molecule. the query below returns two models that link to proteins which can be used as target proteins for the lactic acid molecule. without biomodels linked dataset, one would have to write a small program which would call many different web services to achieve this result. note that model comparison will be done manually, while finding models to compare with is done via one sparql query.

discussion
biomodels linked dataset provides a unique interface to query both the content and semantics of models. this solution also allows execution of federated queries across other rdf repositories, providing a powerful mechanism to integrate heterogeneous data.

the tools provided so far by biomodels database, such as the web search, and soap based web services, could not answer some of the queries described in this paper. for example, queries across elements from multiple models would previously require a user to download all the models locally and run some custom scripts to extract the necessary information.

biomodels web services  <cit>  provide several methods that can be used to retrieve all models annotated with commonly used resources such as go, uniprot, taxonomy, chebi and reactome. for example, getsimplemodelsbyreactomeids method retrieves all the models which are annotated with the given reactome records. however, it is not possible to retrieve all models that have any reactome annotation. as described in the results section biomodels linked dataset could be used to execute such queries.

in addition to a richer data query and access method, biomodels linked dataset provides users with an interoperable dataset, which can be accessed using standard semantic web technologies, such as sparql. previous efforts have explored semantic data integration of sbml models  <cit> . they mainly focused on transforming the sbml files into biological models encoded in the web ontology language  <cit> . these representations were generated from the model annotations and enabled complex ontological reasoning over the resulting dataset.

our approach focuses on linking and integrating data across multiple data sources to extract more information about the models. it relies on some concepts from the ricordo framework  <cit> , which illustrates querying biomodels linked dataset through intermediate reasoning over ontologies used for annotating resources  <cit> . this allows users to run complex queries, such as ‘find all models which have annotations to some part of membrane’.

future plans include the integration of the path2models  <cit>  branches of biomodels database into the biomodels linked dataset.

CONCLUSIONS
exposing biomodels database content through semantic technologies makes the knowledge captured within individual annotations more widely accessible and discoverable. this information can be used to link data and models seamlessly across multiple resources, thereby facilitating complex query across multiple such resources, through a simple interface. hence, this provides a novel and useful addition to the current set of services provided by biomodels database.

moreover, being developed as part of the ebi rdf effort, the biomodels linked dataset is built upon a stable and powerful infrastructure for the storage and query of rdf triples.

ultimately, this new offering from biomodels database enables the semantic web community to cross query between ebi and others datasets as one large web of data.

ethical approval
this work does not require ethical approval.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

smw led the development of biomodels linked dataset and its services and drafted the manuscript. pg, hh, nln, and cl were involved in discussions on the development of the biomodels link dataset. pg and cl were involved in testing the dataset and services. all authors contributed to and approved the final manuscript.

