BACKGROUND
with recent advances in dna sequencing technology and reductions in sequencing costs, it has become relatively easy to sequence the complete genomes of many viruses and it is not uncommon for researchers to determine the sequence of multiple virus isolates as part of a single experiment. although this ability to gather larger collections of genome sequences has opened up new avenues of research, it has also led to significant problems related to data management and sequence annotation. examples of this data explosion include the following, all found in genbank: 1)  <dig> nearly complete genomes of human immunodeficiency virus ; 2)  <dig> complete poxvirus genomes, with genomes ranging in size from  <dig> â€“  <dig> kb; 3) more than  <dig> sars genomes submitted since the first two sars coronavirus genomes were published in may,  <dig> 

the fact that the value of genomic data extends far beyond its use in an original publication is the foundation of data mining experiments. unfortunately, however, a large number of the complete virus genomes submitted to genbank lack annotations, severely limiting the usefulness of the data. the subsequent annotation of these genomes by multiple researchers, who may lack bioinformatics experience, is a tedious and time-consuming process. in order to facilitate the process of annotation, we have developed a tool, genome annotation transfer utility , which makes use of the fact that most unannotated genomes are closely related to previously annotated genomes. the application can be run on most major operating systems including mac os x, windows and linux.

although a similar program, sequin  <cit> , can transfer annotations between two related sequences, these sequences must be co-linear and aligned. for example, sequin can be used to transfer annotations between highly similar hiv genomes that have identical gene content. however, sequin is not designed for use with larger viruses such as poxviruses and herpesviruses; the genomes of these viruses are far more variable, and contain many non-essential genes not conserved between closely related viruses. for such viruses, gatu is ideal, as it does not require the two input genomes to be aligned and can handle significant variations  between the two genomes.

to summarize, gatu has been designed to fill a gap in the currently available software repertoire. by automatically transferring gene annotations that have very similar orthologues in closely related genomes, it reduces much of the tedious, time-consuming task of annotation while still leaving critical decisions in the hands of the researcher. further, it does not require the target and reference genomes to be aligned and is able to deal with significant differences between the genomes. gatu does not, however, use sophisticated tools to make gene predictions because the simplicity of viruses, which have relatively small genomes, and availability of well annotated reference genomes make this unnecessary. instead, gatu is intended to address the problem database curators face in attempting to annotate a large number of closely related genomes.

implementation
design rationale
before implementation of gatu, the following goals were set for the program: 1) provide automated transfer of annotations, but do not take decision-making out of the hands of the annotator; 2) provide a simple platform-independent graphical user interface ; 3) reuse tools familiar to researchers in the field in order to lessen the learning curve; 4) when feasible, pre-calculate alignments to reduce the waiting time during the hands-on checking of annotations.

gatu was implemented in java to allow its use with multiple operating systems. users simply launch the application  from a web page using java web start. this downloads a copy of the program to their system and opens the application, thereby avoiding most installation problems. if an updated version of the program has been released since it was last accessed, this version is automatically downloaded upon starting the program; this feature eliminates the need for users to check for updates. java web start is included in the mac os x operating system and can be easily installed on other operating systems in a few minutes. help and instructions are available on our website  <cit> . furthermore, coding in java allows interoperability of gatu with existing java-based applications developed by our group, including base-by-base   <cit>  and viral genome organizer   <cit> .

components
gatu consists of two distinct components. the first is a java swing-based gui that allows the user to select the reference and target genomes, initiate automatic transfer of annotations, view and evaluate the results, and finally select the orfs to be annotated. the second is an application server, which runs programs such as blast  <cit> , needle  <cit> , and clustalw  <cit>  on a remote server and then returns the results to the client machine. the user may choose not to use our application server and run blast, needle and clustalw on the local machine if the appropriate programs are installed on that machine. the complete instructions on how to do that are available from our documentation page.

the gatu gui consists of five sections within a main window: 1) a menu bar that provides access to help texts, preference settings, etc.; 2) a genome selector with which the user chooses the reference and target genomes; 3) the annotations area, which shows the annotations of both genomes, blast and needle results, and orf predictions; 4) the genome map sub-window, which displays a graphical view of the target genome and/or the reference genome and their associated annotations; 5) and a set of action buttons to access the supporting applications , initiate annotation, and finally save the annotation results to genbank, embl or xml files.

the role of the application server is to link the gatu client to the database search and sequence alignment applications the program uses; for convenience and enhanced speed, these may be installed on a more powerful machine or on a cluster. the process operates in the following simple manner. the client system sends a request to the application server to run a specific program ; the application server then runs the program using the client's input and subsequently passes the output of the program back to the client machine, where it is displayed to the user in the gui. the primary goal of this client-server arrangement is to allow the client to run a wide variety of bioinformatics applications without the need to have those applications installed on the machine where the client resides. this optimizes speed, reduces the ram required for the client machine, and reduces the problems associated with cross-platform support.

annotation
to initiate the process of transferring annotations using gatu, the user selects the reference genome  and the target genome to be annotated  and then clicks the annotate button; the reference and target genomes reside on the local/client machine. the program will then begin the annotation routine. the first step is to use each orf in the reference genome as a query to search the target genome. gatu runs the following searches: 1) tblastn for intron-less genes and mature peptides  and 2) blastn with the exons of intron-containing genes. the alignments returned by the blast searches are used, together with a list of putative orfs , to infer potential annotations for the target genome.

of note, is that gatu allows the user to review the blast alignments together with the reference genes used in this process; for all the suggested annotations that are displayed in the annotation window, links are provided to the search and alignment results. the overall annotation algorithm is shown in figure  <dig>  for each reference gene tested, gatu takes the start and stop positions of the best blast match in the target genome; if necessary, it then extends the ends of this exon in both directions in the same reading frame until the nucleotide sequence contains a start or a stop codon. exons in the reference genome that lack either a start or a stop codon are excluded from this process, along with mature peptides. the region found in this manner is translated into a peptide sequence; needle then generates a global alignment between this translated sequence and the corresponding protein from the reference genome. if the similarity score for the alignment exceeds the cut-off value for acceptance , the "accept annotation" box for this gene will be pre-checked to simplify the process for the user.

since it is possible that the reference genome may have not been fully or correctly annotated, or that the target genome contains orfs that are not present in the reference genome, gatu also finds all possible target genome orfs. these are defined simply as any nucleotide sequence starting with atg and ending with a stop codon; all those that have not already been matched to a reference genome orf are displayed as unassigned-orfs. the user may enter the minimum required length for these orfs  and can also choose not to show unassigned-orfs that overlap significantly with regions that contain significant gene matches in the reference genome. blast searches of the unassigned-orfs against the ncbi database can be run automatically or manually, as required.

once this automated process is complete, the user is then able to review the suggested annotations and apply any modifications deemed necessary. gatu allows the user to review the blast and needle alignments as well as the reference genes used; it simplifies this process by caching all of the previously performed searches and alignments; these can be instantly obtained by selecting the orf and clicking the appropriate button.

in addition to transferring the location of the genes from the reference genome, gatu also takes the associated product name from the genbank file and displays it in the main annotation window; it can be edited if required, and is exported to the final annotation output file.

RESULTS
basic use of gatu
the utility of gatu is illustrated here by the annotation of sheeppox virus strain a  which was deposited to genbank unannotated . the related sppv strain tu-v <dig>  is used here as the reference genome. the annotations are extracted from the reference genome and displayed graphically . the sppv genomes are approximately  <dig> kb in length; running on one processor of a dual  <dig>  ghz macintosh g <dig>  the automated process took less than  <dig> min to complete, with no user intervention required during this time. however, if a blast search is also performed against the ncbi nr database for each orf, the running time will be substantially longer; we routinely run these searches interactively since only a small fraction of the orfs require them.

after processing is complete, gatu provides the user with an interactive table  and a graphical view  of annotations; the views in these panels can be modified in the preferences. clicking on a row in the table  will automatically highlight this annotation in the graphical view; the jump button moves the graphical display to center the orf in the window. the slider at the bottom of the graphical view allows the user to zoom in and out. the interactive table contains a list of all the putative annotations for the target genome, along with relevant information for each annotation; clicking on the column header will sort the table by the column value. the buttons below the interactive table allow the user to switch between lists of the reference genes and target genome annotations.

the interactive table and graphical display allow the user to review the automatically generated annotations and accept or reject them as desired. to aid the user, gatu pre-selects the accept annotation box for all annotations that meet user-specified requirements of length, percent sequence identity and coding strand identity. in our example, gatu found and automatically accepted target sequence counterparts of  <dig> of the  <dig> genes  present in the reference genome. the accepted orfs were  <dig> â€“100% similar  to the reference genes and  <dig> were 100% similar; this also indicates that the start/stop positions of the reference and target genes matched. variation in the start/stop positions can also be examined by comparing the p. size column  with the size column  and viewing the needle alignments.

before deciding which annotations to include in the genome file, the user may wish for more information about a particular annotation. in our example, genes  <dig> and  <dig>  need reviewing, as they were not automatically accepted for inclusion; the user will have to determine whether they should be accepted. to assist with this task, a global alignment of the reference protein and its putative counterpart on the target genome  can be obtained by clicking on the needle alignment button . the needle alignment shows that the orf in the target genome is truncated at the n-terminus but contains the remaining  <dig> aa encoded by the reference genome. this global alignment also provides a useful indication as to the level of similarity between the two orfs. another useful tool is a tblastn search of the target genome using the reference gene as a query; the results of this search can be obtained by clicking on the blast alignment button . from the data shown, it is apparent that a frame-shifting mutation is responsible for the difference between the target and reference orfs. if desired, the user could open these two genomes in our viral genome organizer  program to determine if the promoter regions are similar and the position of the frame-shifting mutation . another application that users will find useful at this stage is jdotter, which can show an alignment of the genomes together with the whole genome dotplots  <cit> . with these data at hand, the user can now make an informed decision as to whether this putative orf should be included in the target genome annotations. given that the promoter regions and orf start sites are similar, it is likely that protein translation of this mrna would begin at the same position as in the reference genome, leading to the synthesis of a polypeptide only  <dig> aa in length. therefore, this orf should be omitted from the annotation even though, at first glance, it appears to be significant. alternatively, the annotation could be accepted with the frag  designation; the user can select this by clicking in the relevant row of the genetype column.

to complement the process of matching known genes in the reference genome to the target, it is necessary to search for potential orfs in the target genome that have no obvious match in the reference genome. such orfs could be the result of additional sequences in the target genome, minor sequence differences in the reference genome resulting in the loss of a functional gene, errors in the original annotation, overlapping orfs, or failure to use the first met codon as the orf start. all orfs larger than the cutoff size that have not been matched to a gene in the reference genome are automatically placed in an unassigned-orfs table, which is accessed by clicking on the relevant button below the interactive table. unassigned-orfs can be added to the list of selected annotations and the graphical display by checking the accept box for a given orf; the jump button moves the graphical display to show the selected orf in the window . several utilities have been built into gatu allowing the user to further investigate the nature of these unassigned-orfs. right-clicking on any of the unassigned-orfs and selecting the appropriate option allows the user to view the results of pre-run blast searches for the orf, run blast searches if the manual blast search option was checked during the initial annotation run, or initiate a new search using a different algorithm  or database .

in summary, gatu correctly transferred and automatically accepted annotation for  <dig> of  <dig> genes from the reference sheeppox genome to the target genome. the missing genes  encode a protein of only  <dig> aa and were subsequently detected by a tblastn search of the target genome. in further tests, 97% of the genes in rabbitpox virus  were correctly annotated by using vaccinia virus strain wr  as the reference genome, whereas 88% of the genes in rabbitpox virus were correctly annotated by using ectromelia virus  as reference . it should be noted, however, that although duplicated genes, such as those in poxvirus terminal inverted repeats, are detected by gatu, the evaluation of paralogues requires special attention because gatu can only match a reference gene to the first blast hit that is found. gatu places other paralogues into the unassigned-orfs group where they can be reviewed by the annotator and manually added to the annotation.

annotation of bacterial genomes with gatu
since many problems associated with genome annotation are magnified considerably when dealing with bacterial genomes due to their large size, we have tested gatu on bacterial genomes up to ten times the size of a typical poxvirus genome. first, chlamydia pneumoniae strain tw <dig>  was annotated using c. pneumoniae strain ar <dig>  as the reference genome, containing  <dig> annotated genes in its genbank file. these two strains are highly similar . of the  <dig> reference genes,  <dig> were 100% similar  to a gene found on the target genome,  <dig> genes were 95â€“99% similar,  <dig> genes were 90â€“94% similar,  <dig> genes were 85â€“89% similar,  <dig> genes were 80â€“84% similar,  <dig> genes were 75â€“79% similar,  <dig> genes were 70â€“74% similar and  <dig> genes were <70% similar. this information is available from the statistics menu within gatu. with a minimum threshold of 60% aa similarity between the reference gene and the target ortholog,  <dig> orfs  were accepted automatically by gatu and a further  <dig> were accepted from the reference genome after reviewing data in the unassigned orf table. although annotation of bacterial genomes is outside of our area of expertise, another  <dig> orfs that were not annotated in the reference genome were added from the unassigned-orf table to the target genome based on their similarity to genes in the ncbi nr database. in total, we were able to annotate the c. pneumoniae tw <dig> genome with  <dig> genes and gene fragments; in comparison, the genbank file for this genome contains  <dig> annotations . additional file  <dig>  contains two excel spreadsheets showing a more detailed comparison of these annotations; in summary, our annotation performed with gatu added several annotations to the target that were not in its genbank file and failed to predict a small number of short orfs. however, such differences will arise whenever two authors annotate a genome using different processes and standards; the discrepancies seen here represent less than 10% of the total genes, indicating a high level of consistency between the two annotations.

for our second test using bacterial genomes, we used two different species from the thermoplasma genus; t. volcanium strain gss <dig>  was annotated using t. acidophilum strain dsm  <dig>  as a reference. the reference genome genbank file contained  <dig> annotated genes, and based on a threshold of 60% aa similarity 1103annotations  were accepted automatically into the target genome annotation  were added following further analysis of the unassigned-orfs, to yield a total of  <dig> orfs accepted for annotation. a comparison between our annotation of gss <dig> using gatu and the annotated gss <dig> genbank file  showed  <dig> differences, approximately 7% .

the  <dig> and  <dig> blast searches/needle alignments required for these two annotation trials took  <dig> and  <dig> minutes, respectively, to run on a  <dig> ghz g <dig> macintosh computer. in both cases, a large fraction of the total bacterial orfs present were automatically annotated correctly by gatu; the majority of the "missed" orfs were small  hypothetical genes that were either not annotated in the reference genome or were unique to the target genome. this represents a substantial reduction of the time and effort required for annotation, allowing the annotator to concentrate on those areas of the genome that require expert knowledge to correctly annotate.

CONCLUSIONS
although gatu is not a comprehensive genome annotation system such as pedant  <cit>  or manatee  <cit> , gatu significantly reduces the annotation workload by automatically transferring over 90%  of the annotations from a reference genome to the target. gatu was designed for use with viral genomes, but as demonstrated here, gatu is also useful for annotation of bacterial genomes. furthermore, gatu offers a variety of built-in tools to assist the user in assigning novel annotations.

currently, the client-server nature of gatu relies on the use of our server for searches; high-throughput users can contact the authors for local installation instructions. in addition, we have also modified gatu to run as a simple stand-alone application that does not connect to the viral databases at the vbrc  <cit> .

availability and requirements
project name: gatu

project home page: gatu may be accessed from the workbench at 

operating systems: all platforms supporting sun's jre version  <dig> . <dig> or compatible

programming languages: java, sql

other requirements: java  <dig>  or higher

license: gnu general public license

restrictions for non-academic use: contact corresponding author

tutorials: a flash based tutorial is available from the  website

authors' contributions
vt and cu described and specified the features of, and problems to be solved by gatu, tested the program, and provided usage examples; ae implemented coding of the software; all authors contributed to writing of the manuscript.

supplementary material
additional file 1
additional file  <dig> is a microsoft excel spreadsheet containing chlamydia pneumoniae strain tw <dig> open reading frames transferred from c. pneumoniae strain ar <dig>  and accepted for annotation by gatu. the annotations are compared to genes of c. pneumoniae tw <dig> found in the genbank file .

click here for file

 additional file 2
additional file  <dig> is a microsoft excel spreadsheet containing t. volcanium strain gss <dig> open reading frames transferred from t. acidophilum strain dsm  <dig>  and accepted for annotation by gatu. the annotations are compared to genes of t. volcanium gss <dig> found in genbank file .

click here for file

 acknowledgements
this work was funded by niaid grant hhsn266200400036c and canadian nserc strategic grant stpgp 269665- <dig>  the authors thank cristalle watson for critically reviewing the manuscript.

figures and tables
