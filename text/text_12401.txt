BACKGROUND
dna sequencing provides fundamental data for many research areas e.g. genomics, bioinformatics, and biology  <cit> . rapid progress has been made for dna sequencing technologies, especially the high-throughput next-generation sequencing , in the last few years. newly proposed high efficiency methods significantly stimulate the production and usage of ngs data  <cit> . however the exponential growth of ngs data poses huge challenge to data storage and transmission  <cit> . thereby efficient compression algorithms are required.

general-purpose compression algorithms e.g. gzip and bzip <dig> usually fail to obtain satisfactory results on ngs data, because they are designed for ordinary plain text or binary files. to achieve higher compression ratio, many specialized methods are proposed. for instance, cox et al.  <cit>  proposed a burrws-wheeler transform based compression algorithm for large scale dna sequence databases. jones et al.  <cit>  presented quip, a high efficient reference-based ngs data compression tool relying on external reference genomes or light-weight de novo assembly to generate reference sequences from the target data. popitsch et al.  <cit>  proposed the ngc tool for sam format files compression. hach et al.  <cit>  proposed scalce by introducing locally consistent parsing in data encoding. more comprehensive review on ngs data compression can be found in  <cit> .

typically, raw ngs data includes a series of sequencing records . each record consists of three major components: a metadata containing the read name, platform, and other useful information; a dna sequence read obtained from one fold of the oversampling; and a quality score sequence estimating accuracies of the corresponding dna bases. existing algorithms usually focus on the compression of dna sequence reads, and utilize conventional methods e.g. huffman coding and run-length encoding  to compress quality scores  <cit> . quality score data is considered more important than the metadata, and usually occupies similar or even more space than the dna sequences. it may pose bigger challenges for compression than dna sequence reads, due to the larger alphabet size. by introducing compressor specific for ngs quality scores, the overall compression ratio of ngs data can be further improved.

in this paper, we propose a memetic algorithm  based ngs quality scores compression algorithm, namely mmqsc. the algorithm consists of three major parts: a huffman coding based preprocessing is conducted in the first place, followed by ma based encoding codebook design. finally, quality score data is compressed by using the codebook. ma is widely known as a synergy of population-based evolutionary algorithm and local search or individual learning procedures. mas are capable of solving various complex optimization problems more effectively than their conventional counterparts  <cit> . in this work, the self-adaptive differential evolution combining with neighborhood search   <cit> , and davies, swann, and campey with gram-schmidt orthogonalization   <cit> , or sansde-dscg for short, are introduced to mmqsc, to optimize the ngs quality scores compression codebook, with which most repetitive short score segments are identified and represented with much shorter encoding.

in conventional mas, each individual represents a candidate solution of the entire problem, i.e., compression codebook. its optimization is highly complex, because the codebook consists of hundreds of quality score symbols. multimodal optimization tries to find all or most of the multiple solutions within a population in a single simulation run  <cit> . based on multimodal optimization, the mmqsc uses an individual to represent only a single specific code vector, and composes codebook with the entire evolution population. thereby computational complexity distributed to each individual's fitness evaluation is significantly reduced.

the proposed mmqsc obtains promising performance on ngs quality scores stored in the widely used fastq format  <cit> . experimental results on five representative ngs data sets show that mmqsc obtains better compression ratio than other state-of-the-art methods. particularly, mmqsc is a reference-free algorithm for lossless compression, yet obtains an average compression ratio of  <dig> %, i.e.,  <dig>  bits per quality value  on the experimental data sets.

the remainder of this paper is organized as follows: section ii describes details of the proposed mmqsc compression algorithm. section iii presents the experimental results of mmqsc on the five real-world ngs data sets. finally, a conclusion is provided in section iv.

methods
sansde and dscg based memetic algorithm for multimodal optimization
ma is introduced whereby the concept of "meme", which was coined by dawkins  <cit> , is employed within an evolutionary computation framework to improve search efficiency. typically, ma utilizes a population-based global optimization as fundamental framework, and introduces separate local searches or 'memes' embedded in each generation of the global evolution to refine the population  <cit> . the procedure of a canonical ma framework is illustrated in algorithm  <dig>  <cit> .

in mas both global search and local search strategies can be selected flexibly according to the target problem. typically, ngs data consists of thousands or even millions of read entries, wherein each of them contains hundreds of quality score symbols. finding a codebook for compressing such data is naturally a high-dimensional optimization problem. differential evolution   <cit>  is capable of solving large scale problems effectively. in this paper, a high performance de variant namely the sansde is utilized as the global optimizer. particularly, sansde uses three self-adaptive mechanisms to select mutation strategies and control parameter values. by introducing neighborhood search in the optimization process, sansde obtains higher performance than conventional algorithms. moreover, the widely-used local search strategy dscg is introduced to increase convergence speed. dscg is a gradient-based optimizer that searches solution space in a greedy manner. combining the exploration of sansde and exploitation of dscg, the proposed ma obtains promising performance on quality scores compression codebook design.

as shown in figure  <dig>  multimodal optimization searches for not only the global best solution gbest , but also all the local optimal pbesti, i =  <dig>   <dig>   <dig> .. multimodal optimization has been used in a wide range of applications, because it can locate all or most of the optimal solutions in a single simulation run. fitness sharing  <cit>  is introduced in the proposed sansde-dscg to conduct multimodal optimization. given a raw fitness value fr, wherein xi is the candidate solution of individual psi. fitness sharing transforms it into shared fitness fs using following equation:

  fs=fr×τi 

in which:

  τi= ∑j∈ps,j≠iα 

where ε is the niching radius, parameter α controls the shape of the sharing function, distance di,j is defined as:

  di,j=distxi,xjifdistxi,xj≤ε0otherwise 

where dist is the manhattan distance between xi and xj. if evolution population is gathering in the same optimal region, its shared fitness values will deteriorate significantly to disperse the individuals. by utilizing fs to guide the search process, sansde-dscg is capable of finding all optimums effectively.

compression codebook design using sansde-dscg
as shown in figure  <dig>  a ngs quality score sequence is compressed by substituting original scores with the index of its most similar code vector in the codebook, and their corresponding symbol differences.

given a quality score sequence q = "cccgff' and code vector c = "ccghffc". sequence q is encoded as {i, q∗}, where i is in the index of c, and q∗ records the symbol differences as:

  q=cccg-ff-c=cc∧ghffcq*=uui,"c"uduud 

in which u denotes symbol matching , i stands for insertion , d for deletion , and s for substitution. for insertions and substitutions, the original symbol should also be recorded . this matching process is conducted by using dynamic programming .

data size of the original p-dimensional sequence is lo =  <dig> × p, because raw quality scores are stored in  <dig> bits ascii format. on the other hand, each difference type in {u, i, d, s} takes  <dig> bits to represent. thereby the encoded data size is:

  lc=⌈log2⌉+2×p*+8×r 

where m is the number of code vectors in a codebook, p∗ denotes length of the symbol differences sequence , and r is the number of all original symbols recorded for insertions and substitutions. given the example above, original quality score sequence takes lo =  <dig> bits of storage, while the encoded data uses only about  <dig> bits. usually the encoding process makes lc smaller than lo, i.e., conducts compression. the more the code vector is similar to the original quality score sequence, the higher compression ratio is achieved. that is, quality of the codebook decides the overall compression performance.

in this paper, we utilize the proposed sansde-dscg to optimize compression codebook design. during the initialization, code vectors in the codebook are generated randomly, and encoded as individuals to form an evolution population. in each fitness evaluation, input candidate solution xi =  is mapped into code vector ci = "s <dig> s <dig> ... sn" using the following equation:

  sn=s[xn⌉,n= <dig> ,…,n 

where characters set s includes all unique symbols in the original quality score sequences, variable n is the predefined code vector length. this mapping is conducted because candidate solutions consist of continuous values, while code vectors are discrete symbol strings. the ci is then matched to all quality score sequences, and calculates the corresponding encoded data size. raw fitness value of xi is defined as:

  fr= ∑k∈klc 

in which k is the total number of quality score sequences, lc denotes encoded data size on the kth sequence qk using code vector ci. small fr indicates that ci is more similar to the original score data, i.e., obtains higher compression ratio. shared fitness fs is then calculated accordingly.

it is noted that accurate symbol differences information, e.g. mismatched symbol positions, is not necessary for fitness values calculation. in most cases the approximate levenshtein distance  <cit>  is good enough to guild the codebook optimization process. moreover, calculation of levenshtein distance requires much less computational resources than the dp based matching algorithm. by utilizing levenshtein distance in fitness evaluation, we can achieve similar optimization performance in a relatively high speed. approximate size of encoded data can be calculated as:

  lc′=⌈log2⌉+2×pk+4×lev 

in which pk is the length of qk, and lev denotes levenshtein distance between the two input sequences. it's value is multiplied by  <dig>  because there is a half chance  in {u, i, d, s} needs to record the original quality score. accurate matching information is obtained only after the codebook design process for actual sequences compression.

procedure of the sansde-dscg based compression codebook design algorithm is illustrated in figure  <dig>  in conventional single-objective optimization based design algorithms, the entire compression codebook is encoded in each individual in the evolution population. typically, an individual in such methods is constructed by connecting all code vectors in the codebook from end to end, i.e. xi' = {c <dig>  c <dig> ..., cm}  <cit> . optimal codebook is obtained by searching the global best solution. dimensionality of solution space is m × n, and the algorithm calculates encoded data size ) for m × n × |ps| time in each generation of the evolution optimization. its computational complexity is too high to be applied on large ngs data. in contrary, mmqsc searches the solution space by using multimodal optimization, wherein each individual is utilized to represent one specific code vector, and the entire evolution population is utilized to compose the optimal compression codebook. mmqsc evolves each individual to make the code vector more representative to original quality score sequences, and accordingly the optimal codebook as a whole can compress input data more effectively. moreover, dimensionality of solution space in mmqsc is reduced to n, because individual xi and corresponding code vector ci have the same length. in each generation of the evolution optimization, the encoded data size is calculated for only m × n times.

the mmqsc algorithm
the proposed mmqsc algorithm consists of three major parts: huffman coding based preprocessing, sansde-dscg based codebook design, and quality score data compression. details of sansde-dscg optimization algorithm and its application on compression codebook design have been discussed in the previous sections.

during the preprocessing, raw quality score sequences are extracted from target fastq file, and undergo a huffman coding. each sequence is then converted into a symbol string by mapping every  <dig> bits of the encoded binary data to readable ascii character:

  ht=chr)) 

in which ht is the tth symbol in converted string hk = "h <dig> h <dig> ... ht ", function huff denotes huffman coding, int converts binary data to corresponding integer value, and chr maps integer number into ascii character. offset value  <dig> is added to the input number in chr to ensure exported character is readable. in the majority of cases hk consists of fewer symbols than original sequence qk. thereby dimensionality of code vectors is reduced, and the codebook design problem is simplified.

the sansde-dscg is conducted afterward on the encoded sequences. after optimization, mmqsc maps individuals in the evolution population into code vectors using equ.  to construct a compression codebook. this codebook is then utilized to compress the input data, wherein accurate symbol differences information is obtained by using dp based matching algorithm.

procedure of the mmqsc algorithm is demonstrated in algorithm  <dig>  it is worth noting that the codebook design process can also be conducted in an offline manner. that is, a universal compression codebook obtained from representative ngs quality score data sets is utilized to encode all input sequences. the time-consuming optimization process is performed for only one time. successive compressions, which are usually conducted repeatedly, require much less computational time.

RESULTS
five representative ngs data obtained from various species, and also of different read numbers and file sizes, are selected to evaluate the overall performance of mmqsc. details of the data sets are summarized in table  <dig>  all data are downloaded in fastq format from the national center for biotechnology information - sequence read archive  database  <cit> .

in sansde-dscg optimization, the compression codebook size m is used as the number of individuals, i.e., |ps|. the value is decided as:

  m=) <dig> 

the length of code vectors, i.e. dimensionality of solution space, is calculated using the following equation:

  n=12× 

parameters setting for sansde-dscg based multimodal optimization is listed in table  <dig> in which |s| is the number of unique symbols in the original quality scores, and fes denotes the maximum fitness evaluation calls of the optimization.

ε
α
five widely used compression algorithms including the rle, huffman coding, gzip, bzip <dig>  and lempel-ziv-markov chain algorithm  are utilized for comparison with the proposed algorithm. all algorithms are compared in terms of compression ratios  and bits per quality value . the bpq is defined as follows:

  bpq=∑k∈kmini∈mlc∑k∈kpk 

compression results of all algorithms on the ngs data sets are summarized in table  <dig> 

results in table  <dig> show that, the proposed mmqsc obtains better performance than the counterpart representative algorithms. particularly, mmqsc obtains average compression ratio of  <dig> %, resulting in an over  <dig> % size reduction in the quality score data. the average  <dig>  bpq result is much smaller than the original  <dig> bpq in ascii format. moreover, performance of mmqsc remains stable in the experimental data sets, indicating that the algorithm has good robustness on different types of ngs data.

convergence trace of codebook optimization processes on experimental data sets is illustrated in figure  <dig>  in which y-axis, labeled as function value, is the optimal shared fitness value in sansde-dscg optimization. the figure shows that by combining sansde and dscg in an ma framework to conduct multimodal search, compression codebook is optimized effectively. particularly, dscg increases convergence speed in the early stage of optimization. premature convergence is successfully prevented by using the high performance sansde algorithm.

CONCLUSIONS
this paper presents mmqsc, a ma based ngs quality scores compression algorithm. the mmqsc utilizes huffman coding to preprocess raw quality score sequences stored in fastq format. to obtain higher performance, a sansde and dscg based ma is proposed to optimize the compression codebook design. the levenshtein distance is used in fitness evaluations to estimate encoded data size, and improves computation speed. after the codebook optimization, a dp based matching algorithm is conducted to obtain accurate symbol differences information. this information, as well as the optimized codebook, is utilized to compress input quality score data. experimental results on five ngs data show that the proposed mmqsc obtains higher compression ratio than counterpart state-of-the-art algorithms. particularly, mmqsc reduces about 77% of the storage space on the experimental data sets.

competing interests
the authors declare that they have no competing interests.

authors' contributions
jrz and zj conceived and designed the study. jrz, zxz, and sh performed the experiments. jrz and zxz wrote the paper. zj, zxz, and sh reviewed and revised the manuscript. all authors read and approved the manuscript.

algorithm  <dig> - canonical memetic algorithm framework

1:  begin

2:  initialize: randomly generate an initial population |ps|;

3:  while stopping criterion is not satisfied do

4:      evolve population |ps| using global optimization;

5:      for each individual psi in |ps| do

6:          improve psi using local searches;

7:      end for

8:  end while

9:  end

algorithm  <dig> - procedure of mmqsc algorithm

1:  begin

2:  preprocessing:

3:  obtain raw quality score sequences {q <dig>  q <dig> ..., qk} from target fastq file;

4:  conduct huffman coding, convert input sequences into {h <dig>  h <dig> ..., hk};

5:  compression codebook design:

6:  randomly generate evolution population |ps|;

7:  while stopping criterion is not satisfied do

8:      evolve population |ps| using sansde;

9:      calculate raw fitness values for |ps| using equ. ;

10:      calculate shared fitness values using equ. ;

11:      for each individual xi in |ps| do

12:          improve xi using dscg;

13:          calculate raw fitness value fr  using equ. ;

14:          calculate shared fitness value fs  using equ. ;

15:      end for

16:  end while

17:  construct optimal compression codebook using |ps|;

18:  quality scores compression:

19:  obtain accurate symbol differences information using dp based matching;

20:  encode each quality score sequence qk with corresponding code vector index and symbol differences information as ;

21:  end

