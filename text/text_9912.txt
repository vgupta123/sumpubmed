BACKGROUND
visualization of sequence annotation is a common feature in many bioinformatics tools. for example, the widely used ucsc genome browser  <cit>  and ensembl  <cit>  web sites, and also standalone programs such as artemis  <cit>  or the integrated genome browser  <cit>  graphically display genetic features in their genomic context. these tools also provide means to import additional user-defined numerical annotation, e.g., for the display of experimental data along the genome. these data are then displayed either as continuous line or bar graphs along the sequence, or as boxes covering a sequence range coloured according to the numerical data, i.e., a scored annotation.

a better understanding of a data set can often be achieved when its complexity can be reduced. while all of the aforementioned frameworks are suited to display user-defined data in its entirety, they do not allow for convenient and dynamic customisation of the graphics on-the-fly. the genome browsers are similar to other previously published tools for visualising annotation, such as gff2ps  <cit> , in that they produce "static" output as either a web page or a postscript file. the artemis and integrated genome browser programs have their strength in presenting gene annotation or tiling array data, but are not easily customisable for display of other data types such as position weight matrix matches.

implementation
here, we present biosave , a graphical mac os x application for visualisation of scored annotation in a sequence context. it is written in objective c and makes use of os x-specific system libraries for responsive display of annotation changes. a plug-in interface allows to invoke external scripts  upon loading an annotation file, which is useful for converting external formats into gff <dig> 

RESULTS
biosave will read sequence data in fasta format  <cit>  or raw text, annotation scores from gff <dig> files  <cit>  or, using a plug-in interface, any other parse-able file format that contains coordinates and scores for an annotation. only data with scores that lie within a user-specified score range will then be displayed along the sequence. adjusting the score thresholds will dynamically change which annotations are visible, and at which colour level. where other tools only support a fixed score range , this range automatically adjusts to the data present in the user's input. in addition to the dynamic view, biosave can display additional tracks along the sequence comprising a conventional bar graph visualisation. the sequence view itself can be adjusted and allows for continuous zooming from the entire sequence down to the nucleotide level. in our hands, on a  <dig>  ghz powerpc g <dig> with  <dig> gb of ram, biosave can reliably handle up to  <dig> mb of sequence along with about  <dig>  microarray data points for numerical annotation.

the versatility of biosave extends to the display of annotation scores also in protein sequences. only a small number of tools for handling protein sequence allow to load and display additional numerical annotation . however, these programs are comparable to the static display of artemis and the integrated genome browser, and do not allow for the on-the-fly customisation found in biosave.

in the following section, we discuss two applications in which biosave could be used in day-to-day research.

usage example: transcription factor binding site matches in a dna sequence
the binding specificity of a transcription factor  or other dna-binding protein is often represented as position weight matrix , which allows for a numerical description of the binding site rather than a fixed search string. many theoretical frameworks and bioinformatic tools exists to identify nucleotide sequences that are matched by a pwm, e.g., patser  <cit> , clover  <cit>  and motifscanner  <cit> . while these programs are powerful in the identification of pwm matches to a sequence, they all lack an immediate and intuitive display of the results, which is key to make useful biological interpretations.

the difficulty in the interpretation of pwm matches to a sequence is often the lack of a score threshold that reliably distinguishes biologically relevant matches from closely related hits in the sequence. thus, it is desirable to display the identified pwm matches at various score cutoffs. this helps to establish a cutoff at which the pwm match is convincing, both in terms of its similarity with the sequence, and, if known, whether biologically relevant sequences are being recognised. for patser and clover, the web interfaces rsa-tools  <cit>  and motifviz  <cit>  are available to visualize pwm matches in input sequences, thus making the results accessible to the bench biologist. however, by default, these interfaces display every possible match to the pwm and lack the ability to dynamically adjust score thresholds.

a common problem in the interpretation of chromatin immunoprecipitation  experiments is to precisely identify the tf binding site  from a much larger region showing chip enrichment for the factor. in figure  <dig>  a portion of the adh region in the d. melanogaster genome and the results of a chip experiment for the suppressor of hairy wing ) protein  <cit>  are being shown. biosave shows a clear correlation between chip enrichment along a  <dig> kb tiling path and the strength of su pwm matches . at the nucleotide level, focussing on the cyclin e gene within the adh region, a validated binding site is shown alongside phastcon scores  <cit> , which further characterise it in terms of evolutionary conservation.

usage example: structural hidden markov model matches in a protein sequence
functional annotation of proteins includes the assignment of structural domains. a common strategy is to identify regions of homology to functionally characterised domains. this is often achieved by searching the protein sequence with hidden markov models from databases such as superfamily  <cit>  and pfam  <cit> . figure  <dig> shows the structural annotation of the su protein, along with data of putative phosphorylation sites from the netphos  <dig>  server  <cit>  and the degree of sequence identity seen amongst six closely related drosophila species. it can be observed that phosphorylation sites are relatively sparse within the predicted zinc finger domains, which are evolutionary highly conserved in this protein.

CONCLUSIONS
biosave is a highly focused, easy-to-use tool for viewing scored annotation in a sequence context. it has many advantages over other sequence annotation visualisation systems not specifically designed for this task. for example, the aforementioned web interfaces do not allow for prompt user interaction, and other tools developed primarily for visualisation of microarray data are too inflexible to handle scored annotation of different types or sources appropriately, e.g., quick highlighting of matches to a particular pwm etc. to our knowledge, biosave is the only tool for annotation visualisation that handles dna and protein sequences alike.

this paper describes several applications in which biosave is used in our day-to-day research. through its support of standard sequence and annotation formats, as well as the versatile plug-in system , biosave can be used in a wide range of applications not specifically discussed here. for example, it can be used for display of mutation hotspots in dna or protein sequences  or display of predicted interaction surfaces along a protein sequence .

availability and requirements
the universal binary for mac os x is available for download at the biosave web site  <cit> , along with an extensive tutorial detailing many features not previously mentioned in this paper. the objective c source code is available from the web site under the gnu gpl.

project name: biosave

home page: 

operating system: os x

programming language: objective c

other requirements: none

license: freely available, source code under gnu gpl.

list of abbreviations
gff – general feature format, tf – transcription factor, pwm – position weight matrix

authors' contributions
rfp wrote the software and created the web site. ba defined the software architecture and created demonstration and test datasets. both authors wrote the manuscript.

