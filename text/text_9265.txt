BACKGROUND
the wealth of newly sequenced genomes has provided us with an unprecedented resource of information for phylogenetic studies that will have extensive implications for a host of issues in biology, ecology, and medicine, and promise even more. yet, before such phylogenies can be reliably inferred, challenging problems that came along with the newly sequenced genomes have to be overcome. evolutionary biologists have long realized that gene-duplication and subsequent loss, a fundamental evolutionary process  <cit> , can largely obfuscate phylogenetic inference  <cit> . gene-duplication can form complex evolutionary histories of genes, called gene trees, whose topologies are traditionally used to derive species trees. this approach relies on the assumption that the topologies from gene trees are consistent with the topology of the species tree. however, frequently genes that evolve from different copies of ancestral gene-duplications can become extinct and result in gene trees with correct topologies that are inconsistent with the topology of the actual species tree . in many such cases phylogenetic information from the gene trees is indispensable and may still be recovered using gene tree reconciliation.

related work
gene tree reconciliation is a well-studied method for resolving topological inconsistencies between a gene tree and a trusted species tree  <cit> . inconsistencies are resolved by invoking gene-duplication and loss events that reconcile the gene tree to be consistent with the actual species tree. such events do not only reconcile gene trees, but also lay foundation for a variety of evolutionary applications including ortholog/paralog annotation of genes, locating episodes of gene-duplications in species trees  <cit> , reconstructing domain decompositions  <cit> , and species supertree construction  <cit> .

a major problem in the application of gene tree reconciliation is its high sensitivity to error-prone gene trees. even seemingly insignificant errors can largely mislead the reconciliation process and, typically undetected, infer incorrect phylogenies . errors in gene trees are often topological errors and rooting errors. topological error results in an incorrect topology of the gene tree that can be caused by the inference process  or the inference method itself . this problem has been addressed for rooted gene trees by 'correcting the error'; that is, editing the given tree such that the number of invoked gene-duplications and losses is minimized  <cit> . however, most inference methods used in practice return only unrooted gene trees  that have to be rooted for the gene tree reconciliation process. rooting error is a wrongly chosen root in an unrooted gene tree. whereas rooting can be typically achieved in species trees by outgroup analysis, this approach may not be possible for gene trees if there is a history of gene duplication and loss  <cit> . other rooting approaches like midpoint rooting or molecular clock rooting assume a constant rate of evolution that is often unrealistic. however, rooting problems can be bypassed by identifying roots that minimize the invoked number of gene duplications and losses  <cit> .

in summary, even small topological error or a slightly misplaced root can incorrectly identify enormous numbers of gene duplications and losses, and therefore largely mislead the reconciliation process. therefore, gene tree reconciliation requires gene trees that are free of error and correctly rooted at the same time  <cit> . however, as previous work has incorporated topological error-correction only separately from correctly rooting gene trees into the reconciliation process  <cit> , this process can still be misled.

our contribution
we address the problem of reconciling erroneous and unrooted gene trees by error-correcting and rooting them at the same time. solving this problem efficiently is a crucial step towards making gene tree reconciliation more robust, and thus to improve on the accuracy of applications that rely on gene tree reconciliation like the construction of gene-duplication supertrees. we introduce the problem and design an efficient algorithm that facilitates a much more precise gene tree reconciliation, even for large-scale data sets. our algorithm detects and corrects errors in unrooted gene trees, and thus we avoid the biologists' difficulty and uncertainty of handling erroneous gene trees and correctly rooting them. the presented experimental results suggest that our novel reconciliation algorithms can identify and correct topological error in unrooted input gene trees, and at the same time root them optimally.

our algorithm is designed to search for the correct and rooted tree of a given unrooted tree in local search neighborhoods of the given tree. the size of these neighborhoods is described by a positive integer k that allows to fine-tune the search. while in theory k can be large it is assumed that gene trees have only small topological error, which typically can be captured by small values of k. for a fixed but freely choosable integer k the runtime of our algorithm is o), where n and m is the size of the gene tree and species tree respectively, and l is the number of edges in the gene tree that potentially contain an error . thus, for a small error, which is expressed by k =  <dig>  our algorithm runs in linear time. our experiments show that error-correction runs of the algorithm for k =  <dig> are still possible even for trees with large number of weak edges  on a standard workstation configuration.

further, we address the problem of constructing rooted supertrees by reconciling unrooted and erroneous gene trees with assigned weak edges, a key problem in illuminating the role and effect of gene duplication and loss in shaping the evolution of organisms. we introduce the problem and develop an effective local search heuristic that makes the construction of more accurate supertrees possible and allows a much better postulation of gene duplication histories. our experimental results demonstrate that our approach is effective in identifying gene duplication histories given erroneous gene trees and producing more accurate supertrees under gene tree reconciliation.

duplication-loss model
we introduce the fundamentals of the classical duplication-loss model. our definitions are mostly adopted from  <cit> . for a more detailed introduction to the duplication-loss model we refer the interested reader to  <cit> .

let ℐ be the set of species consisting of n >  <dig> elements. the unrooted gene tree is an undirected acyclic graph in which each node has degree  <dig>  or  <dig> , and the leaves are labeled by the elements from ℐ. a species tree  is a rooted binary tree with n leaves uniquely labeled by the elements from ℐ. in some cases, a node of a tree will be referred by "cluster" of labels of its subtree leaves. for instance, a species tree ) has  <dig> nodes denoted by: a, b, c, bc and abc. a rooted gene tree is a rooted binary tree with leaves labeled by the elements from ℐ. the internal nodes of a tree t we denote by int.

let s=⟨vs,es⟩ be a species tree.  can be viewed as an upper semilattice with + a binary least upper bound operation and ⊤ the top element, that is, the root. in particular for a, b∈vs, a <b means that a and b are on the same path from the root, with b being closer to the root than a. we define the comparability predicate d =  <dig>  if a ≤ b or b ≤ a and d =  <dig>  when a and b are incomparable. the distance function ρ is used to denote the number of edges on the unique  path connecting a and b.

we call distinct nodes a, b∈vssiblings when a + b is a parent of a and b. for a, b∈vs let sb be the set of nodes defined by the following recurrent rule:  sb = ∅ if a = b or a and b are siblings,  sb = {c} ∪ sb, if a <b or a + c <a + b; here c is the sibling of a, and  sb = sb otherwise.

by l we denote the number of elements in sb. observe that l = ρ -  <dig> · ). let m:vg→vs be the least common ancestor  mapping, from rooted  into  that preserves the labeling of the leaves. formally, if v is a leaf in  then m is the node in  labeled by the label of v. if v is internal node in  with two children a, b, then m = m + m. an example is depicted in figure  <dig> 

in this general setting let us assume that we are given a cost function ξ:vg×vs→r which for all nodes v∈vg, a∈vs assigns a real ξ representing a contribution to node a which comes from v when reconciling  with . having ξ we can define k= ∑aξv, a to be a total contribution from v in the reconciliation of  with . we call κ a contribution function. finally, σ= ∑vkv is the total cost of reconciliation of  with .

now we present examples of cost functions that are used in the duplication model. we assume that if v is an internal node in  then w <dig> and w <dig> are its children. the duplication cost function is defined as follows: ξd =  <dig> if v∈int and m = m = a for some i, and ξd =  <dig> otherwise. the loss cost function: ξl =  <dig> if v∈int and a ∈ sb , m), and ξl =  <dig> otherwise. it can be proved that if v∈int then κd = d, m) and κl  = l, m) .

the duplication cost function is defined as follows: ξd =  <dig> if v∈int and m = m = a for some i, and ξd =  <dig> otherwise. loss cost function: ξl =  <dig> if v∈int and a ∈ sb, m), and ξl =  <dig> otherwise. it can be proved that if v∈int then κd = d, m) and κl = l, m) .

observe that a node v∈vg is called a duplication  <cit>  if κd =  <dig>  moreover, κl = l, where l is the number of gene losses associated to v. it can be proved that σd and σl are the minimal number of gene duplications and gene losses  required to reconcile   with . please refer to  <cit>  for more details. the example of an embedding is depicted in figure  <dig> 

introduction to unrooted reconciliation
here we highlight some results from  <cit>  that are used for the design of our algorithm. from now on, we assume that g=〈vg,eg 〉 is an unrooted gene tree. we define a rooting of  by selecting an edge e∈eg on which the root is to be placed. such a rooted tree will be denoted by ge, where v* is a new node defining the root. to distinguish between rootings of , the symbols defined in previous section for rooted gene trees will be extended by inserting index e. please observe, that the mapping of the root of ge is independent of e. without loss of generality the following is assumed:   and  have at least one internal node and  me=⊤; that is, the root of every rooting is mapped into the root of   with no change of the cost).

first, we transform  into a directed graph g^=⟨vg,eg^⟩ where eg^={⟨v,w⟩|{v,w}∈eg}. in other words each edge 〈v, w〉 in  is replaced in g^ by a pair of directed edges 〈v, w〉 and 〈w, v〉.

edges in g^ are labeled by nodes of  as follows. if v∈vg is a leaf labeled by a, then the edge ⟨v,w⟩∈eg^ is labeled by a. when v is an internal node in g^ we assume that 〈w <dig>  v〉 and 〈w <dig>  v〉 are labeled by b <dig> and b <dig>  respectively. then the edge ⟨v,w3⟩∈eg^, such that w <dig> ≠ w <dig> and w <dig> ≠ w <dig> is labeled by b <dig> + b <dig>  such labeling will be used to explore mappings of rootings of . an edge {v, w} in  is called asymmetric if exactly one of the labels of 〈v, w〉 and 〈w, v〉 in g^ is equal to ⊤, otherwise it is called symmetric.

every internal node v, and its neighbors in g^ define a subtree of eg^, called a star with a center v, as depicted in figure  <dig>  the edges 〈v, wi〉 are called outgoing, while the edges 〈wi, v〉 are called incoming. we will refer to the undirected edge {v, wi} as ei, for i =  <dig>   <dig>   <dig> 

the are several types of possible star topologies based on the labeling :  a star has one incoming edge labeled by ⊤ and two outgoing edges labeled ⊤ and these edges are connected to the three siblings of the center,  a star has exactly two outgoing edges labeled by ⊤,  a star has all outgoing edges and exactly one incoming edgd labeled by ⊤,  a star has all edges labelled by top, and  a star has all outgoing edges and exactly two incoming edges labeled by ⊤. figure  <dig> illustrates the star topologies.

in summary stars are basic 'puzzle-like' units that can be used to assemble them into unrooted gene trees. however, not all star compositions represent a gene tree. for instance, there is no gene tree with  <dig> stars of type s <dig>  it follows from  <cit>   that we need the following additional condition:  if a gene tree has two stars of type s <dig> then they share a common edge.

now we overview the main result of  <cit>  . let  be a species tree and  be unrooted gene tree. the set of optimal edges, that is, candidates for best rootings, is defined as follows: ming={e∈eg|σemα,β is minimal}, where σemα,βis the total cost for the weighted mutation cost defined by ξemα,β=α⋅ξed+β⋅ξel, e is an edge in  and α, β are two positive reals. then  if |ming|> <dig>  then ming consists of all edges present in all stars of type s <dig> or s <dig>   if |ming|= <dig>  then ming contains exactly one symmetric edge that is present in star of type s <dig> or s <dig>  from the above statements,  and star topologies we can easily determine ming. more precisely, the star edges outside ming are asymmetric and share the same direction. thus, to find an optimal edge it is sufficient to follow the direction of non ⊤ edges in g^.

now we summarize the time complexity of this procedure. it follows from  <cit>  that a single lca-query  can be computed in constant time after an initial preprocessing step requiring o time. other structures like g^ with the labeling can be computed in o time. the same complexity has the procedure of finding an optimal edge in . in summary an optimal edge/rooting and the minimal cost can be computed in linear time. see  <cit>  for more details and other properties.

methods
first we describe our algorithm for computing the optimal cost and the set of optimal edges after one nearest neighbor interchange  operation performed on an unrooted gene tree, and then extend it to a general case with k nni operations. for the definition of nni please refer to def.  <dig> and figure  <dig> 

algorithm
now we show that a single nni operation can be completed in constant time if all structures required for computing the optimal rootings are already constructed. first, let us assume that the following is given:  two positive reals α and β, a species tree ,  lca structure for  that allows to answer lca-queries in constant time,  an unrooted gene tree ,  g^ with the labeling of edges,  ming - the set of optimal edges, and  σ - the minimal total weighted mutation cost. as observed in the previous section ,- can be computed in o). now we show that - can be computed in constant time after a single nni operation.

nni operation  and the update of lca-mappings .

definition  <dig>   an nni operation transforms a gene tree g=,) into g′=,), where ti-s are  subtrees of . the edge that connects the roots of  and  in is denoted by e <dig> and called the center edge. for each i =  <dig>   <dig>   <dig>   <dig> we assume the following: wi is the root of ti, ei is the edge connecting wi with e <dig> and ai is the lca-mapping of ti. similarly, we define the center edge e0′and ei′ in g′.

an nni operation is depicted in figure  <dig> with the transformation of g^ into g′^. the notation will be used from now on. note that there is a second nni operation, when  is replaced with , ). however, it can be easily defined and therefore it is omitted here. observe that the nni operation  can be performed in constant time for both trees.

the right part of figure  <dig> depicts the transformation of g^. observe that the labels of the incoming and outgoing edges attached to each wi in g^ do not change during this operation. lemma  <dig> follows directly from this observation.

lemma  <dig>  an nni operation changes only the labels of the center edge.

we conclude that updating g^ requires only two lca-queries, and therefore can be performed in constant time.

reconstruction of optimal edges . we analyze the changes of the optimal set of edges ming. to this end we consider a number of cases depending on the relation between the optimal set of edges and the set of edges, incident to the nodes of the center edge. let cg={ei}i= <dig> …, <dig> 

for convenience, assume that the nni operation replaces ei with ei′ as indicated in figure  <dig>  we call two disjoint edges from cgsemi-alternating if they share a common node after the nni operation. in figure  <dig> {e <dig>  e4} and {e <dig>  e3} are semi-alternating. for two edges a and b that are incident to the same node let ⋆ be the set of three edges defining the unique star that contains a and b.

lemma  <dig>  assuming that ei is replaced by ei′ after the nni operation the set of optimal edges does not require additional changes if and only if one of the following conditions is satisfied:

ming∩cg=∅,

ming⊇cgand each pair of semi-alternating edges contains at least one symmetric edge,

mingconsists of only the center edge,

ming∩cg={ei}for some i > <dig> and the center is asymmetric after the nni operation.

proof:  all edges in cg are asymmetric . then, after the nni operation e0′ is asymmetric and .  cg consists of  <dig> stars of type s4/s <dig> and at most two asymmetric edges. it follows from eq <dig> that the asymmetric edges in cg′ cannot form a star of type other than s <dig>  together with m <dig> it follows that cg′ is optimal.  by m <dig> the center is symmetric in . it remains symmetric after nni. from c <dig> and m <dig>  ming′ consists of the center edge.  note, that the type of ⋆ is s <dig>  s <dig> or s <dig> 

lemma  <dig> . if ming⊇cgand there exists a pair {ei
, ej} of asymmetric semi-alternating edges, then min′g=ming\cg∪.

proof: the type of ⋆ is s <dig> or s <dig> and the other star has type s <dig> or s <dig>  by m <dig> ei′ and ej′ are not optimal.

lemma  <dig> . if ming∩cg={ei} for some i > <dig> and the center is symmetric after the nni operation then min′g=ming\{ei}∪⋆.

proof: in this case e0′ has two arrows and ⋆ is of type s <dig> 

lemma  <dig>  assume that ming∩cg={e <dig> ei,ej}
, where i ≠  <dig> 

 if both ei and ej are symmetric then ming′=ming\cg∪cg′,

 if ej is asymmetric and e0′ is symmetric then ming′=ming\cg∪⋆.

 if both ej and e0′ are asymmetric then ming′=ming\cg∪{ei′}.

proof: note that {e <dig>  ei
, ej} must be a star in g⋅⋆ has type s <dig> or s <dig>  after the transformation the two stars ⋆ and ⋆ have type s <dig>  both are optimal in g′⋅⋆ has type s <dig>  after the transformation ⋆ has type s <dig> and ⋆ has type s <dig>  only the first is optimal in g′⋅⋆ has type s <dig> while the other star in cg has type s <dig>  after the transformation only ei′ remains symmetric in cg′ therefore it is the only optimal edge in cg′.

computing the optimal cost . observe that from lemmas 2- <dig> at least one optimal edge remains optimal after the nni operation. therefore, to compute the difference in costs between optimal rootings of  and g′ we start with the cost analysis for the rootings of such edge.

first, we introduce a function for computing the cost differences. consider three nodes x, y, z of some rooted gene tree such that x and y are siblings and the parent of them , is a sibling of z. in other words we can denote this subtree by , z). then, the partial contribution of , z) to the total weighted mutation cost can be described as follows: ∑a∈sα*+ξd)+β*+ξl). assume that x, y and z are mapped into a, b and c , respectively. it can be proved from the defnition of ξd and ξl that the above contribution equals: ϕ = α *  + d) + β *  + l). now, assume that a single nni operation changes , z)) into ). it should be clear that the cost difference is given by: Δ <dig> = ϕ - ϕ. similarly, we can define a cost difference when a single nni operation changes , ) into , ). assume, that v is mapped into d. then, the cost contribution of the first subtree is ϕ' = ϕ + α *  + β * l. the cost difference is given by: Δ <dig> = ϕ' - ϕ'.

lemma  <dig>  if the center edge is optimal and remains optimal after the nni operation then the cost difference equals Δ <dig>  where ai  is the mapping as indicated in figure  <dig> 

as mentioned the above lemma can be proved by comparing the rootings placed on the center edges in  and g′. lemma  <dig> gives a solution for cases: eq <dig>  eq <dig>  ne <dig> and ne <dig>  the next lemma gives a solution for the remaining cases.

lemma  <dig>  if for some i > <dig> there exists an optimal edge in ti ∪ {ei} that remains optimal after the nni operation  then the cost difference is Δ <dig> if i =  <dig>  Δ <dig> if i =  <dig>  Δ <dig> if i =  <dig> and Δ <dig> if i =  <dig> 

similarly to lemma  <dig> we can prove lemma  <dig> by comparing the rootings of ei and ei′.

error correction algorithm. finally, we can present the algorithm for computing the optimal weighted mutation cost for a given gene tree and its k-nni neighborhood. see figure  <dig> for details. it should be clear that the complexity of this algorithm is o). we write that a gene tree has errors if the optimal cost is computed for one of its nni variants. otherwise, we write that a gene tree does not require corrections. please note that it for a special case of k =  <dig>  this algorithm is linear in time .

general reconstruction problems
we present several approaches to problems of error correction and phylogeny reconstruction. let us assume that σα,β,k is the cost computed by algorithm from figure  <dig>  where α, β >  <dig>  k ≥  <dig>   is a rooted species tree and  is an unrooted gene tree.

problem  <dig> . given a rooted species tree and a set of unrooted gene trees, g compute the total cost ∑g∈gσα,β,k.

the knnic problem can be solved in polynomial time by an iterative application of our algorithm. additionally, we can reconstruct the optimal rootings as well as the correct topology of each gene tree. please note that for k =  <dig> , we have the cost inference problem for the reconciliation of an unrooted gene tree with a rooted species tree  <cit> .

problem  <dig> . given a set of unrooted gene trees g find the species tree  that minimizes the total cost ∑g∈gσα,β,k.

the complexity of the knnist problem is unknown. however, similar problems for the duplication model are np-hard  <cit> . therefore we developed heuristics for the knnist problem to use them in our experiments.

in applications there is typically no need to search over all nni variants of a gene tree. for instance, a good candidate for an nni operation is a weak edge. a weak edge is usually defined on the basis of its length, where short length indicates weakness. to formalize this property, let us assume that each edge in a gene tree  has length. we call an edge e in weak if the length of e is smaller than ω, where ω is a non-negative real. now we can define variants of knnic and knnist denoted by ω-knnic and ω-knnist, respectively, where the nni operations are performed on weak edges only. these straighforward definitions are omitted. please note that the time complexity of the algorithm with nnis limited to weak edges is o), where l is the number of weak edges in .

software
the unrooted reconciliation algorithm  <cit>  and its data structures are implemented in program urec  <cit> . our algorithm partially depends on theses data structures and therefore was implemented as a significantly extended version of urec. additionally, we implemented a hill climbing heuristic to solve knnist and ω-knnist.

software and datasets from our experiments are made freely available through http://bioputer.mimuw.edu.pl/~gorecki/ec.

experimental 
RESULTS
data preparation
first, we inferred  <dig> unrooted gene trees with branch lengths from nine yeast genomes contained in the genolevures  <dig> data set  <cit> , which contains protein sequences from the following nine yeast species: c. glabrata , s. cerevisiae , z. rouxii , s. kluyveri , k. thermotolerans , k. lactis , y. lipolytica , d. hansenii  and e. gossypii .

we aligned the protein sequences of each gene family by using the program tcoffee  <cit>  using the default parameter setting. then maximum likelihood  gene trees were computed from the alignments by using proml from the phylip software package. the original species tree of these yeasts  <cit> , here denoted by g <dig>  is shown in figure  <dig> 

inferring optimal species trees
the optimal species tree reconstructed with error corrections  is depicted in figure  <dig> and denoted by 1nniec. this tree differs from g <dig> in the rooting and in the middle clade with klla and ergo. additionally, we inferred by the heuristic an optimal species tree, denoted here by noec, with no error corrections . all the trees from this figure are highly scored in each of the optimization schemas.

from weak edges to species trees
in the previous experiment, the nni operations were performed on almost every gene tree in the optimal solution and with no restrictions on the edges. in order to reconstruct the trees more accurately, we performed experiments for ω-knnist optimization with various ω parameters and subsets of gene trees. the filtering of gene trees was determined by an integer μ >  <dig> that defines the maximum number of allowed weak edges in a single gene tree. each gene tree that did not satisfy such condition was rejected.

figures  <dig> and  <dig> depict a summary of error correction experiments for weak edges. for each ω and μ we performed  <dig> runs of the ω-knnist heuristic for finding the optimal species tree in the set of gene trees filtered by μ. the optimal species trees are depicted in the diagram, where each cell represents the result of a single ω-knnist experiment. we observed that g <dig>  1nniec and noec are significantly well represented in the set of optimal species trees in ω-1nnist experiments, while in ω-2nnist and ω-3nnist experiments only g <dig> and noec were detected. note that the original yeast phylogeny  is inferred for ω =  <dig> - <dig>   and μ ≥  <dig> in most experiments. in particular for ω =  <dig>  and μ =  <dig>   <dig> gene trees were rejected . these results significantly support the g <dig> phylogeny. please note that the results for the standard unrooted reconciliation algorithms without error correction are located in the first column of diagrams .

from trusted species tree to weak edges in gene trees - automated and manual curation
assume that the set of unrooted gene trees and the rooted  species tree  are given. then we can state the following problem: find ω and μ such that  is the optimal species tree in ω-nnist problem for the set of gene trees filtered by μ. for instance in our dataset, if we assume that g <dig> is a given correct phylogeny of yeasts, then from the diagrams  one can determine appropriate values of ω and μ that yield g <dig> as optimal. in other words we can automatically determine weak edges by ω and filter gene trees by μ. this approach can be applied in tree curation procedures to correct errors in an automated way as well as to find candidates  for further manual curation. for instance, in the previous case, when ω =  <dig>  and μ =  <dig>  we have  <dig> trees that can be corrected and rooted by our algorithm, while the  <dig> rejected trees could be candidates for further manual correction.

discussion
we present novel theoretical and practical results on the problem of error correction and phylogeny reconstruction. in particular, we describe a polynomial time and space algorithm that simultaneously solves the problem of correction topological errors in unrooted gene trees and the problem of rooting unrooted gene trees. the algorithm allows us to perform efficiently experiments on truly large-scale datasets available for yeast genomes. our experiments suggest that our algorithm can be used to  detect errors,  to infer a correct phylogeny of species under the presence of weak edges in gene trees, and  to help in tree curation procedures.

CONCLUSIONS
we introduced a novel polynomial time algorithm for error-corrected and unrooted gene tree reconciliation. experiments on yeast genomes suggests that an implementation of our algorithm can greatly improve on the accuracy of gene tree reconciliation, and thus, curate error-prone gene trees. moreover, we use our error-corrected reconciliation to make the gene duplication problem, a standard application of gene tree reconciliation, more robust. we conjecture that the error-corrected gene duplication problem is intrinsically hard to solve, since the gene duplication problem is already np-hard. therefore, we introduced an effective heuristic for error-corrected gene duplication problem. our experimental results for a wide range of error-correction tests on yeasts phylogeny show that our error-corrected reconciliations result in improved predictions of invoked gene duplication and loss events that then allow to infer more accurate phylogenies.

the presented error correction is based on gene-species tree reconciliation using gene duplication and loss. however, there are other major evolutionary mechanism that infer gene tree topologies that are inconsistent with the actual species tree topology, like horizontal gene transfer and deep coalescence. gene tree reconciliation using these mechanisms is highly sensitive to topological error, similar to gene tree reconciliation under gene duplication and loss. future work will focus on the development of algorithms that can also reconcile unrooted and erroneous gene trees using horizontal gene transfer and deep coalescence.

competing interests
the authors declare that they have no competing interests.

authors' contributions
pg and oe were responsible for algorithm design and writing the paper. pg implemented the programs, and performed the experimental evaluation and the analysis of the results. both authors read and approved the final manuscript.

