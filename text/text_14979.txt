BACKGROUND
membrane proteins carry out a variety of essential functions and are targeted by over half of drugs in use  <cit> , yet only make up ~2% of proteins in the protein data bank due to difficulties in structure elucidation. the dearth of structures has in turn led to a lack of prediction tools, which have typically focused on either α-helical or β-barrel membrane proteins  <cit> , or on specific features like the prediction of membrane pores  <cit> . one important characteristic of membrane proteins is accessibility to the lipid environment of the bilayer. knowledge of lipid accessibility is important for our understanding of membrane protein structure, stability  <cit> , interactions inside the bilayer, the development of membrane protein energy functions, the development of sequence-based predictors, and as an indicator of binding interfaces. while sequence motifs for helix-helix interactions in the membrane have been well-studied  <cit> , the broader picture of large protein-protein interfaces in the membrane is still developing.

prediction of lipid accessibility is not trivial: the protein ‘interior’ can either be water accessible, in the case of pores, or buried hydrophobic residues. for the latter, the hydrophobicity profile of buried residues is similar to lipid-facing residues, hence hydrophobicity as a solitary feature would be insufficient for classification. solvent accessible surface area  is useful to identify accessibility of the residue to the solvent, yet it does not distinguish between lipid or water accessibility. further, geometric considerations might be useful for the structures of β-barrels, as sidechains typically either face into the barrel or away from it, but this distinction is typically less clear for α-helical proteins. therefore, a combination of different features is required for accurate prediction of lipid accessible residues.

the problem is further complicated by the fact that accessibility to lipid relies on protein embedding in the membrane and experimental measurements of membrane embedding features  are challenging. lipid molecules are only present in a few crystal structures, and the model membrane used for crystallization or structure determination is very different from a native membrane environment because it lacks the exact lipid composition  <cit> , membrane thickness, asymmetry  <cit> , lateral pressure  <cit>  and shape  <cit>  . protein embedding in the membrane is therefore predicted using computational approaches that rely on different score functions, such as tmdet  <cit> , ppm  <cit> , and imembrane  <cit> . however, benchmarking of these tools is difficult without high-resolution experimental data. similarly, for lipid accessibility there are no compiled structural databases to test the performance of a predictor from the protein structure, hence expert manual curation of such a database is required.

a range of sequence-based predictors is available that specialize in transmembrane span or topology prediction for α-helical bundles or β-barrels, sasa or lipid accessibility. transmembrane span predictors classify residues as in the membrane vs. in solution and are able to achieve prediction accuracies >90% in the two-state scenario  <cit> ,  <cit> . topology predictors  <cit> ,  <cit>  classify residues as inside/outside the cell or organelle and in the membrane  database  <cit> , see http://opm.phar.umich.edu/about.php?subject=topology). sasa predictors classify residues as buried or exposed to the solvent without specifying whether the solvent is water or lipid. they typically use machine learning  approaches and report prediction accuracies in the range of 70-75%: the asap tool can be used for both α-helical and β-barrel membrane proteins  <cit> , the mprap method is optimized for sasa prediction of both soluble and transmembrane regions of membrane proteins  <cit> , and the tmexpo tool predicts embedding angles in addition to sasa  <cit> . further, pore-lining residues and channels can be predicted from the protein sequence using the recently developed tool primsiplr  <cit> , which achieves a prediction accuracy around 86%. lipid accessibility  can be predicted from the protein sequence with the lips server  <cit> , which uses contact maps between helical faces and residue conservation for classification. it achieves a prediction accuracy of 88%, according to the authors.


sasa prediction directly from protein structure can be obtained with a few early predictors ; unfortunately, some of these methods lack benchmarking results, were only tested on a few low-resolution crystal structures or lack availability as a web server and/or lack documentation. the recently developed, well-documented 3v web interface for volume, solvent exclusion and channel prediction does not compute sasa values per residue  <cit> .

here, we present a method to identify lipid accessible residues from a protein structure that is already transformed into membrane coordinates. our method uses a 2d concave hull algorithm on a point cloud, which is generated by projecting cα coordinates from horizontal slices of the protein within the bilayer, onto the plane of the membrane. for each slice, the convex hull, the concave hull and a ‘concave shell’ are computed, through which lipid accessible residues are identified . the classification of the concave shell is output as adjusted b-factors in the pdb file, which can be easily visualized or extracted for further analysis. we compute prediction accuracies on a manually curated benchmark dataset available for download at http://tinyurl.com/mp-lipid-acc-dataset. our method mp_lipid_acc is also publicly available as a webserver on rosie  <cit>  at http://rosie.graylab.jhu.edu/mp_lipid_acc/submit. to our knowledge, this is the first tool to classify lipid exposure of residues from a protein structure. our method is applicable to both α-helical and β-barrel membrane proteins of any architecture and will be useful for a variety of problems from score function derivation, development of sequence-based predictors and structural modeling.

implementation
curation of training and benchmark datasets
we created a small dataset of  <dig> proteins for the development of the algorithm  and to find an optimal parameter set. these proteins cover a wide range of protein folds from one or two transmembrane helices, helical bundles with and without smaller pores , small and large helical pores, transporters , ion channels with voltage sensor domains, oblong helical channels , β-barrels with and without internal domains, β-barrel monomers and trimers and cigar shaped β-barrels and pore-forming toxins. the pdbids for this dataset were 1afo, 1ek <dig>  1fep, 1kpk, 1qd <dig>  2kix, 2r9r, 2rh <dig>  2wcd, 3emn, 3ne <dig>  3wmf, 4tnw, 7ahl.

we curated a benchmark dataset for testing our method : all membrane protein chains were downloaded from the pdbtm database  <cit> , which were then culled with the pisces server  <cit>  with the following parameters: sequence identity ≤ 25%, resolution ≤  <dig>  Å, r-factor cutoff  <dig> , sequence length 40– <dig> , include non-xray entries, exclude cα-only entries, cull by chain. we then excluded all em structures with resolutions > 3 Å and removed all xfel structures with resolution “ <dig> ” or proteins for which no method was specified. further, we removed photosynthetic reaction centers and photosystems i and ii as they have very loosely packed helices complexed with a large number of interstitial chlorophyll molecules. we also removed the proteins present in the training dataset.

the structures in each set were downloaded from the pdbtm database  <cit> , for which the proteins are already transformed into the membrane coordinate frame: the membrane center is defined as the origin at  =  and the membrane normal vector lies along the z-axis with . to compute the membrane embedding of a protein structure, pdbtm uses the tmdet algorithm  <cit>  that fits the membrane embedding according to an objective function that contains measures of hydrophobicity and structural information regarding the cα-trace within a protein slice, such as straightness, turns and termini. initially, we downloaded structures from the opm database  <cit> , but through visual inspection of the entire database we realized that the protein embedding seems generally better in pdbtm. the structures were then cleaned from additional atoms , renumbered and the span files were computed as described previously  <cit>  with a fixed membrane thickness of 30 Å. we used a fixed membrane thickness to avoid a potentially circular influence of the thickness prediction from pdbtm onto our benchmark dataset.

we ran our algorithm over the benchmark dataset , which outputs the lipid accessibility as a modified b-factor column in the pdb file. we then manually corrected classification errors by visualizing each protein in pymol  <cit> , coloring it according to b-factors, and then manually adjusting the b-factors for each incorrectly classified residue. our benchmark dataset is described in additional file 1: table s <dig> and is available for download at http://tinyurl.com/mp-lipid-acc-dataset.

algorithm overview
to identify lipid exposed residues on the outer perimeter of the protein, we approximate the membrane protein as a stack of 2d slices and then within each slice, use a 2d concave hull algorithm to determine water and lipid accessible boundaries. for this, the protein was cut into 10 Å thick horizontal slices along the membrane normal . for each slice, the cα atoms were projected onto the xy plane , from which points the convex hull was computed . the convex hull is the smallest set of points on the outer perimeter of the 2d point cloud that encloses the entire point cloud; it is computed by a quickhull algorithm  <cit>  . from the convex hull , we computed the concave hull  <cit>  , which defines the set of points on the outer perimeter of the point cloud and encloses the point cloud within each slice by potentially concave surfaces . we then computed the concave shell that includes points  whose xy coordinates are within a radius of the original boundary points . concave shells were computed for each stacked horizontal slice in the membrane region.fig.  <dig> algorithm. in our algorithm mp_lipid_acc, the protein is cut into horizontal slices . in each slice, the coordinates of the cα atoms are projected onto the xy-plane, from which points first the convex hull, then the concave hull and then the ‘concave shell’ are computed  and see implementation). for β-barrels, the center-of-mass in each slice is computed from the coordinates of the cα atoms and only residues which are part of the concave shell and have a cα-cβ-com angle larger than a cutoff value of 65° are classified as lipid accessible . for instance, the residue with a sidechain orientation represented by the yellow vector in  would be lipid accessible, whereas the sidechain in blue would be lipid inaccessible


fig.  <dig> convex and concave hull algorithms. illustration of the convex hull, concave hull and ‘concave shell’ from a 2d point cloud that was projected onto the xy plane from the 3d structure. the example protein is the sodium channel with pdbid 4dxw and the points in blue are outside the hull, the points in black are inside the hull and the points in red are part of the hull. the convex hull algorithm starts by connecting the points with smallest and largest x and y values in counter-clockwise direction and identifying the points inside the hull . the hull is extended to a convex hull by connecting two points on the boundary, finding the point in the outside list that is farthest away from the two boundary points and that is in clockwise direction, and adding this point to the boundary . the points within the triangle between the old two boundary points and the added one are then classified as inside the hull. these steps are repeated until all points are inside the convex hull . the concave hull is then computed by finding the longest distance between two connected points on the boundary, finding the point inside the hull that has the smallest enclosing angles with respect to the two original boundary points, and adding this new point to the hull boundary. the distance cutoff defines the ‘resolution’ of the hull with a distance cutoff of 15 Å in  and 5 Å in . this process is repeated until all distances between connecting points are smaller than the cutoff distance. lastly, a concave shell is computed by including points within an xy distance radius from the original boundary points . all boundary points in f are now part of the concave shell and classified as lipid exposed




residues with cα atoms in the concave shell are classified as lipid exposed with the following exceptions:  if the number of tm spans is smaller or equal  <dig>  all residues in the membrane region are classified as lipid exposed;  for β-barrels, we make the distinction of whether the sidechain faces into the interior of the barrel or not. for each slice, we therefore compute the center-of-mass  of the cα atoms and only classify residues with the cβ-cα-com angle larger than 65° as lipid accessible .  for smaller helical bundles with  <dig> or less tm spans, the concave shell algorithm over-predicted lipid accessible residues in the interior of the protein. to counter balance this over-prediction, we took into account an angle cutoff of 45° as described above.

convex and concave hulls
a convex hull is a subset of points in a point cloud that engulfs all points in the cloud via convex surfaces . the convex hull algorithm starts with a classification of a 2d point cloud into three lists: inside the hull , outside the hull , and part of the hull . the quickhull algorithm starts by classifying all points as outside the hull  <cit> ,  <cit> . then, the points with the smallest x value, smallest y, largest x and largest y are connected and moved to the list of points on the boundary. the points inside the rectangle are moved to the inside list . then, two neighboring points in the boundary list are connected by a line and the point outside with the largest distance in clockwise direction is moved to the boundary , while the points inside this triangle are added to the point list inside the hull. this last step is repeated until all points are either inside the hull or on the boundary and the outside list is empty. the convex hull algorithm identifies the points on the hull that make up a convex shape . however, it fails to identify points on the hull that encompass the smallest surface area.

the concave hull on the other hand , engulfs all points with the smallest surface area, which requires ‘cutting into’ the boundaries of the convex hull to create concave surfaces. starting from the convex hull, two neighboring points on the boundary are connected by a line  <cit> . if the distance of the line segment is larger than a pre-defined distance cutoff , the point inside the hull  is identified that has the smallest sum of angles to the two original boundary points. this point is added to the boundary and this last step is repeated until all the distances between neighboring points in the boundary list are smaller than the pre-defined cutoff. the distance cutoff is required because there is no unique solution to the classification problem as to which points are part of the concave hull. the distance cutoff is therefore a measure similar to a ‘resolution’ that defines how rugged the concave surfaces are .

to extend the information of the concave hull back into three dimensions, we classified points  within a certain xy-distance  from the points on the boundary as part of the boundary—we call this the concave shell .

adjustable parameters in the algorithm
optionally adjustable parameters for this application are:  the slice width  as the width of the horizontal slices for which the concave shells are computed. as only cα atoms are considered and to avoid overfitting of the convex shell due to data sparsity, the default slice width is set to 10 Å, corresponding to approximately 1/ <dig> of the thickness of a physical membrane bilayer. the three slices therefore extend over the inner and outer leaflets and the space in between. further, the membrane thickness should be an integer multiple of the slice width to avoid data sparsity in the last slice. the current membrane thickness is fixed at 30 Å.  distance cutoff : the ‘resolution’ of the concave hull is defined by the distance cutoff between points on the hull boundary. 2d line segments between neighboring points on the hull are ‘cut in’ if their distance is longer than the distance cutoff. the default value for the distance cutoff is 10 Å, which is approximately the distance between two cα atoms on the same side of neighboring helices.  shell radius : to map the 2d concave hull back into three dimensions, cα atoms with xy coordinates within a certain radius  of the original boundary points are added to the hull, which we call the concave shell. the default shell radius is 6 Å, which is about half the diameter of an α-helix.  angle cutoff : to distinguish between sidechains facing water-filled interiors in β-barrels from sidechains facing the lipid environment, we defined a cutoff for the cβ-cα-com angle. the default value for the angle cutoff is 65°, which is empirically determined and smaller than 90° to account for the curvature of β-barrels.  to classify lipid accessibility we distinguish between an α-helical bundle  or β-barrel membrane protein , which refers to the secondary structure facing the lipid . the type is auto-detected based on the prevalent secondary structure in the membrane, as computed by dssp  <cit> . in the rare scenario that auto-detection fails, the secondary structure type can be set by the user.

if a residue is classified as lipid accessible, its b-factor is set to  <dig>  otherwise it is set to  <dig>  the pdb structure with the adjusted b-factor is output and can be visualized in pymol  with the provided script color_b-factor.pml.

RESULTS
we present an algorithm that classifies lipid exposed residues in membrane protein structures. it is applicable to monomeric and oligomeric α-helical and β-barrel membrane proteins with and without pores. our algorithm uses protein structures transformed into membrane coordinates and a fixed membrane thickness and is applicable to a wide range of protein architectures. classification is achieved through a 2d concave hull algorithm applied to the point cloud of membrane embedded cα atoms projected onto the membrane plane. mp_lipid_acc then creates a pdb structure file with modified b-factors that can then be visualized by a provided pymol script. we further provide a publicly accessible webserver to run the classification, which is implemented in the rosie environment  <cit> , accessible at http://rosie.graylab.jhu.edu/mp_lipid_acc/submit. additionally, we make our manually curated benchmark dataset available to the public , which will be useful for the development of sequence-based predictors and membrane protein scoring functions.

the prediction accuracies for our benchmark set are shown in table  <dig> with counts for true positives, true negatives, false positives and false negatives. accuracy, sensitivity and specificity are also computed. as a baseline for comparison, we used the prediction of rasa with a cutoff of  <dig> . table  <dig> shows that while rasa achieves almost as high prediction accuracies as our predictor, it is unable to distinguish between lipid accessible and water accessible residues, as demonstrated by the low sensitivity. in contrast, our simple algorithm correctly identifies lipid exposed residues, achieving a prediction accuracy of  <dig> % , with consistently high sensitivity and specificity .table  <dig> prediction accuracies in percent for the benchmark set. the first row indicates a prediction using relative accessible surface area in the membrane  without lipid accessibility classification. the second row shows results for predicted lipid accessibility with our concave hull algorithm. note that mp_lipid_acc is able to identify lipid exposed residues, giving rise to an almost 20% increase in sensitivity over a standard rasa algorithm


tp number of residues predicted as true positives, tn true negatives, fp false positives, fn false negatives, acc accuracy = /; sens = tp/; spec = tn/


fig.  <dig> classifications on selected examples from the benchmark dataset with diverse architectures. details about the individual proteins are provided in table  <dig>  in panel d, the pore of the protein  is shown on the right, where the residues that protrude into solution, are clipped to show the prediction for the pore residues





we aimed to classify residues in well-packed α-helical proteins, helical pores, plain β-barrels, β-barrels with plug domains, monomeric and multimeric membrane proteins with and without pores, and multimeric ion channels with a large lipid exposed surface area due to their voltage sensor domains . because we are using a concave hull algorithm, mp_lipid_acc is applicable to a wide range of protein architectures that have perimeters of different shapes, for instance oblong protein structures , ‘winged’ structures , and multimeric proteins.

we explored alternate parameterizations of our algorithm to evaluate our default choices for these parameters. the results in table  <dig> demonstrate that the classification of lipid accessibility by our algorithm is quite stable with varying parameter sets. the default parameter set we used for benchmarking was a slice width of 10 Å, a distance cutoff of 10 Å, a shell radius of 6 Å and an angle cutoff of 65°. in addition to the default parameter set, we tested additional values for each parameter. even with different parameter sets, our algorithm consistently achieves accuracies, sensitivities and specificities around 90%, with two exceptions. if the distance cutoff  is increased to 15 Å or greater, the algorithm under-predicts lipid accessibility: the number of true positives decreases while the number of false negatives increases. a similar situation occurs when the shell radius is decreased to 4 Å, as fewer residues are classified as lipid exposed.table  <dig> prediction accuracies for different parameter sets, showing the stability of the algorithm


default
10
10
6
65
 <dig> 
 <dig> 
 <dig> 
5
 <dig> 
5
15
 <dig> 
4
 <dig> 
8
50
80

acc accuracy = /; sens = tp/; spec = tn/ with tp number of residues predicted as true positives, tn true negatives, fp false positives, fn false negatives

the meaning of the parameters is explained in the methods section. our algorithm is stable with respect to smaller slice widths  and different angle cutoffs . for larger distance cutoffs  and smaller shell radii  the number of predicted true positives decreases while the number of false negatives increases, resulting in a substantial drop in sensitivity 




runtimes for mp_lipid_acc are consistently short, typically under 1 min for proteins up to  <dig> residues, using default parameters . the algorithm only takes into account cα atoms in the protein. we tested using all atoms for the calculation of the hulls and the concave shell, which increased the runtimes considerably , especially for large proteins, while achieving similar results. we therefore only make the option available to use cα atoms.fig.  <dig> runtimes of mp_lipid_acc in seconds for proteins of varying sizes. runtimes are obtained when using the default parameters of a slice width of 10 Å, a distance cutoff of 10 Å, and a shell radius of 6 Å




while improvements to the algorithm might lead to a smaller number of false positives, our algorithm is the first to classify lipid exposed residues from the protein structure, yielding prediction accuracies around 90%. it will be useful for molecular modeling and developing score functions and more sophisticated sequence-based approaches for the prediction of lipid accessibility. classification of lipid accessibility from the structure is also useful to advance our understanding of membrane protein folding, stability and their interactions in the membrane bilayer  <cit> .

CONCLUSIONS
here we present a novel method to classify lipid accessibility in membrane protein structures. our algorithm is applicable to α-helical and β-barrel membrane proteins with and without pores and for diverse protein architectures. mp_lipid_acc is implemented in rosettamp and uses membrane embedded structures  and a fixed membrane thickness to classify residues based on a concave hull algorithm. to test our method, we manually curated a benchmark dataset, on which mp_lipid_acc achieves accuracies, specificities and sensitivities around 90%. we believe that mp_lipid_acc and our benchmark set are an important first step for sequence- and structure-based prediction of lipid accessibility, score function optimization and membrane protein modeling in general.

additional file

additional file 1: table s <dig>  dataset for developing the algorithm: the table contains details about each protein in the training dataset. table s <dig>  test database: the table contains accuracies for each protein in the benchmark dataset. 




abbreviations
abcatp-binding cassette

emelectron microscopy

gpcrg-protein coupled receptor

pdbprotein data bank

rasarelative accessible surface area

sasasolvent-accessible surface area

tmtrans-membrane

xfelx-ray free electron laser

