BACKGROUND
the distribution of fluxes  in large metabolic networks is commonly calculated by means of constraint-based optimization methods, usually referred to as flux-balance analysis . the first fba applications relied on the steady-state assumption and biomass maximization only  <cit> . however, recently the scope of fba has widened:  alternative objective functions are necessary to adapt fba to different environments, metabolic excretion and growth patterns, and cell types  <cit> ,  thermodynamic principles have to be considered in the calculation  <cit> ,  mrna, protein and metabolite profiles are available as an additional information source  <cit> ,  metabolic networks are curated using on the fly verification  <cit> , and  fba is used for structural network analysis avoiding the combinatorial explosion that topological algorithms suffer from. thus, the quality of fba software must now be measured on  the flexibility in the definition of objectives and constraints and  the ability to perform batch series of calculations with varying objectives and constraints whose results are automatically evaluated.

several software solutions for fba are currently available. the freely available software cobra  <cit>  covers a considerable variety of fba algorithms and is conceptually similar to fasimu. it is a matlab  <cit>  toolbox using a variety of free and commercial solvers including cplex via the tomlabÂ® optimization environment  <cit>  as the recommended choice. optflux  <cit>  covers an even larger range of flux optimization methods accessible through a graphical user interface. it is an easy-to-use solution well suited for biotechnologists with lesser interest in the algorithmic details. systems biology research tool   <cit>  is a conceptually very powerful framework for the analysis of stoichiometric networks. a number of algorithms based on flux-balance optimizations is implemented and the addition of further "processes" is possible. the biospice  <cit>  framework includes two modules performing flux balance optimization: fluxor  <cit>  computes biomass maximization and moma  <cit>  is the original implementation of the method with the same name. the open source program pathwayanalyser  <cit>  is a simple command-line program implementing fba and moma. see table  <dig> for a feature comparison of the cited packages.

feature comparison of recent programs focusing on flux-balance optimization. +/- denote the existance/absence of the feature. the row solver selection indicates the number of solver programs to choose from.

for all of the above programs, the use of thermodynamic feasibility as a direct constraint is currently missing. annet  <cit>  is the only available tool so far that tests a given flux distribution on thermodynamic feasibility but only as a post-check and not as a constraint for fba. a number of fba-based algorithms such as pruning  <cit> , thermodynamic realizability  <cit> , inferring active subnetworks from expression profiles  <cit>  are not yet available as an easy-to-use implementation. batch processing of easily definable simulation series required for on-the-fly testing of network functions in a network curation process are not included in the above software solutions. this prompted us to develop a new software.

implementation
we have developed fasimu - a comprehensive, flexible and user-friendly computation environment for fba. its command-line interface allows to tackle difficult problems in an interactive approach which can later be transferred into an executable computation script. fasimu is "open" in two aspects:  the source code is open and written in widely known scripting languages which makes it easy to adapt and to implement new functions and  intermediate results are stored in human-readable files rendering the calculation process traceable.

for the computational effort, fasimu is divided in two parts. the computationally expensive part, the solution of the optimization problem, is left to specialized and highly optimized software: the commercials programs cplex  <cit>   or lindo  <cit> , alternatively the open source programs glpk  <cit>  or lp_solve  <cit> . the computationally easy but semantically complex part is written in a combination of scripting languages which are easy to understand and modify: the parser language gawk   <cit>  and the script language bash  <cit> . bash is the default command-line shell in linux, macos, and many unix systems, so many computer users are familiar with it already. in fasimu it is used to start and iterate gawk calls, define command-line functions, and to call the solver. gawk allows to program data processing in an extremely terse form. in fasimu it is used to transform raw data into intermediate files, to prepare the input files for the solver, to interpret the solver output, and to generate result files. it is preinstalled on every linux and macos system and available for windows and unix.

fasimu is structured in two layers: functions of basic layer, fabase, deal with a single fba problem, whereas functions of the upper layer, fasimu, generate a series of fba solutions by running fabase functions iteratively . the instructions for the iterative calls are listed in a user-editable file comprising  the simulation identifiers,  metabolic target functions,  constraints, and  expressions for the automatic evaluation of the flux distribution. therefore, in one such simulation series different metabolic objectives, enzyme knock-outs, and media composition can be considered. upon a function call the simulations are performed and  an evaluation file as a short report on succeeded and failed computations and  a detailed solution file are created. the latter can be further processed to provide the input files for bina  <cit> , cytoscape  <cit> , or cellnetanalyzer  <cit>  visualization.

RESULTS
algorithms implemented in fasimu comprise biomass maximization  <cit> , the principle of flux minimization  <cit> , the fitness maximization at enzyme deficiencies  <cit> , the minimization of metabolic adjustment   <cit>  and the similar room  <cit> , inferring active subnetworks from expression profiles  <cit> , also in combination with flux minimization  <cit> , flux variability analysis  <cit> , metabolic flux analysis  <cit> , leak analysis  <cit> , and pruning to the functional subnetwork  <cit> . it can be combined with constraints on flux values, metabolite exchange rates, and the thermodynamic feasibility constraint based on variable metabolite concentrations  <cit> .

crucial to the evaluation of a large number of flux distributions is their visualization. here, we developed the plugin fabina for bina  <cit>  showing a computed flux distribution where the thickness and color of reaction arrows visualize the flux rate. the compartment of the metabolite is either shown as a color of the metabolite node or all metabolites of a compartment are displayed in a separate box. the particular strength of bina is the customizable automatic generation of a graph layout using yfiles algorithms  <cit>  which provide coherent graphs for up to  <dig> reactions. it can also be used to scroll through a set of precomputed flux distributions and show them in the context of the whole network or alternatively only the nonzero fluxes. the definition of reaction subsets  will show the flux distribution in a hierarchical layout. additional network information like gene expression can be mapped to node color or line thickness. finally, flux modes can be exported by vector or scalar images. fasimu also prepares the input files needed by cellnetanalyzer  <cit>  and fluxviz  <cit> , a plugin for cytoscape  <cit> , especially suited to visualize the flux in the full network context.

example
in a network curation process the batch processing of defined simulations is required to verify metabolic functions on the fly. as an application example we show how fasimu has successfully aided the curation of the genome-scale model of the human hepatocyte  <cit>  . the raw network as the output of the curation tool metannogen  <cit>  at the final stage comprised of  <dig> reactions and  <dig> metabolites in  <dig> compartments . to assert the functional parts of the network the pruning algorithm  <cit>  is applied yielding  <dig> reactions and  <dig> metabolites . on a 64-bit linux pc  using cplex  <dig>  the running time of this process was 27: <dig> min. as the process included  <dig> single optimizations, that averages  <dig>  s for a single optimization. on the reduced model we performed  <dig> simulations  which required 4: <dig> min by simple flux minimization,  <dig>  s for a single optimization. the full computation including the thermodynamic feasibility constraint  and a check on the computed solutions  required  <dig> h: <dig> min: <dig> s,  <dig> s for a single simulation. the protocol for these computations using  is:

unzip fasimu_complete.zip

cd fasimu_liver_example

sbml2fa liver.sbml

source fasimu

prune-network

cp mimes.txt mipes.txt pipes.txt sub

cd sub

unzip ../../fasimu_complete.zip\

fasimu_liver_example/simulations

source fasimu

simulate

optimization_call="compute-fba-t-c"

simulate

requirements
fasimu can run on linux, windows , macos, aix, hp-ux and possibly many other operating systems since its minimal requirements, gnu bash  <cit> , gnu awk  <cit>  and glpk  <cit>  are open source and ported to many systems. fasimu requires the alternative use of one of the solvers: the external solver lp_solve  <cit> , glpk  <cit> , lindo  <cit> , cplex  <cit> . for microsoft windows, using cygwin  is recommended providing bash, gawk, glpk for almost any windows version available.

fasimu's input is a stoichiometric model given in sbml  <cit> , level  <dig> version 1- <dig>  cellnetanalyzer  <cit> , or plain text format and additional text files specifying fba objectives and constraints. fasimu's computed flux distribution are returned in sbml level  <dig> version  <dig> or val files .

discussion
with other powerful flux-balance optimization programs at hand, the question arises why another product is necessary. the fact that important published methods have not been available as an executable program has already been mentioned. an alternative to a new software would have been to implement the required algorithms in one of the more open programming frameworks cobra  <cit> , sbrt  <cit> , biospice  <cit>  or even as direct plugins to cytoscape  <cit> , celldesigner  <cit> , sbw  <cit>  or bina  <cit> . however, we found that the important preconditions could not be met in one of the solutions:  integration of powerful commercial solvers and free solvers,  independence on the matlab framework,  description language of simulations and the integration in scripts,  easy implementation of new algorithmic ideas.

cobra  <cit>  has a comprehensive coverage of flux-balance methods, however, being a matlab  <cit>  toolbox somewhat hampers its applicability. it is necessary to purchase a license of matlab for every machine cobra should run. to use the best available lp solver, cplex  <cit> , additionally a license of tomlabÂ®  <cit>  is required. the modification and integration of cobra into a workflow is confined to the matlab language and its api. in contrast, fasimu can be integrated directly on the level of the operating system. in sbrt  <cit>  the development of the mentioned algorithms as new processes is not as straightforward and it lacks the integration with a network visualization program. optflux  <cit>  has quite a number of algorithms already implemented but lacks the flexibility of tools which are designed in a more open framework. the analysis of large networks is hampered by the fact that only glpk  <cit>  is used as the solver. in our comparison of the solvers in fasimu we found that cplex is numerically stable for considerably larger milp problems compared with glpk. for biospice  <cit> , the development of flux-balance optimization is not the main focus in the biospice development and only two algorithms are implemented. pathwayanalyser  <cit>  also covers only two fba variants and its installation is not straightforward, it requires the solvers glpk and ooqp http://pages.cs.wisc.edu/~swright/ooqp, the latter requiring blas and software from hsl  <cit>  only available after registration and a fortran  <dig>  compile process.

the main difference between fasimu and all other comparable software is the concept of a concise description file for flux-balance simulations. its development has been driven by the necessity of a clearly defined protocol for network testing. the main objective was that the description file contained the minimal necessary information but allows considerable flexibility to define heterogeneous network tasks, beside  the simple test on the producibility or degradability of metabolites, also  simulations of enzymopathies,  tests on the non-existence of solutions, and  tests on side conditions in the flux distributions. for instance the  <dig> simulations to test hepatonet <dig>  <cit>  are contained in a text file of only  <dig> k characters . this is extremely condensed given that it even contains some documentation.

a freely available software based on free and widely available software has large advantages for a first test as the program can immediately be tested. aside from the consideration whether the fee for a commercial product such as matlab or cplex is worth the investment free software such as gnu bash, gawk, and glpk is available for the maximum of possible computer architectures and operating systems.

basing fasimu on free software is a practical consideration rather than a decision on principle. we found out that for problems such as a feasible milp implementation for a large metabolic system, the available free software is not yet sufficient. thus, to integrate cplex or lindo is a logical consequence of common sense: free software where possible, commercial where necessary. the same is true for the use of bina which uses powerful algorithms to draw network graphs. bina is freely available but not open source since it uses the commercial software yfiles licensed for free of charge use in conjunction with bina.

for fasimu a compilable language such as java or c++ was not used to support easy modification. fasimu is also designed as a testing environment for newly developed algorithms, thus, development time is critical. furthermore, the majority of the computation time is used by the external solver program. therefore, to decrease the running time of the software which merely controls and transforms the input and output of the solver program would not have a great effect.

graphical user interfaces  allow an easy access to the possible options and require minimal learning time. however, users who want to combine and modify the given algorithms rely on a scripting language. programs allowing both the control by a graphical user interface and by a command-line interface require considerably more software development time. for fasimu the focus is clearly the command-line usability. powerful network visualization products such as bina, cytoscape, celldesigner, sbw  <cit>  have already been developed. thus, the integration of fasimu with the programs mentioned appeared to be the better solution than the development of a separate visualization component in fasimu. this integration is simplified by the sbml standard  <cit> . fasimu solutions can be converted to sbml. however, to increase the usability in connection with fasimu computations, fabina and fluxviz have been developed to allow an even better control of bina and cytoscape.

CONCLUSIONS
we present a flux analysis simulation framework which  offers the first available implementation of thermodynamic feasibility as a quickly computable milp,  is flexible in the choice of objective functions and constraints,  allows for batch processing of heterogeneous computations and automatic evaluation of the solutions,  facilitate visualization of the computed fluxes with plugins for bina and cytoscape, and  can completely be based on free software.

availability and requirements
project name fasimu

project home page http://www.bioinformatics.org/fasimu

operating system platform independent.

programming language bash version  <dig> . <dig> or higher, version  <dig> . <dig> or higher recommended. gawk version  <dig> . <dig> or higher.

other requirements any of cplex , glpk , lp_solve , lindo .

license gnu gpl

any restrictions to use by non-academics none.

authors' contributions
ah developed fasimu; sh, ag, and ah wrote fabina. ah and cg wrote the manual/tutorial. ah, sh, hh, and cg drafted the manuscript, approved by all authors.

supplementary material
additional file 1
fasimu  <dig> . <dig> release archive. this archive contains the complete fasimu distributions and unzips in five directories: fasimu contains the programs, fasimu-doc contains the documentation , fasimu-ery-example contains a small example of the human erythrocyte, fasim-ecoli-example a large example of the e. coli, fasimu-liver-example another large example of the human hepatocyte.

click here for file

 acknowledgements and funding
the work of ah has been funded by hepatosys, the network systems biology, funded by bundesministerium fÃ¼r bildung und forschung, germany.
