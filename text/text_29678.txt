BACKGROUND
recent developments in artificial gene synthesis have enabled the construction of synthetic gene circuits  <cit>  and even the synthesis of whole bacterial genome  <cit> . the introduction of synthetic genes into a living system can either modulate existing biological functions or give rise to novel cellular behavior. in this sense, de novo gene synthesis is a valuable synthetic biological tool for biotechnological studies, which typically aims to improve tolerance to toxic molecules, retrofit existing biosynthetic pathways, design novel biosynthetic pathways and/or enhance heterologous protein production  <cit> . in the aspect of recombinant protein production, natural genes found in wild-type organisms are usually transformed into the heterologous hosts for recombinant expression. this approach typically results in poorly expressed recombinant protein since the wild-type foreign genes have not been evolved for optimum expression in the host. thus, it is highly desirable to harness the flexibility in synthetic biology to create customized artificial gene designs that are optimal for heterologous protein expression. to aid the gene design process, computational tools have been developed for designing coding sequences based on some performance criteria.

specifically, the degeneracy of the genetic code, reflected by the use of sixty-four codons to encode twenty amino acids and translation termination signal, leads to the situation whereby all amino acids, except methionine and tryptophan, can be encoded by two to six synonymous codons. notably, the synonymous codons are not equally utilized to encode the amino acids, thus resulting in phenomenon of codon usage bias which was first reported in a study that examines the frequencies of  <dig> amino acid codons  in  <dig> genes  <cit> . the emergence of codon usage bias in organisms has been largely attributed to natural selection, mutation, and genetic drift  <cit> . more importantly, codon usage bias has been shown to be correlated to gene expression level  <cit> . as a result, this bias has been proposed as an important design parameter for enhancing recombinant protein production in heterologous expression hosts  <cit> . consequently, the algorithms implemented in many of the sequence design software tools, such as codon optimizer  <cit> , gene designer  <cit> , and optimizer  <cit> , are mainly focused on the frequency of individual codon occurrences. notably, the popular web-based software, known as the java codon adaptation tool , is integrated with the prodoric database to allow convenient retrieval of prokaryotic genetic information  <cit> . however, apart from individual codon usage  bias, nonrandom utilization of adjacent codon pairs in organisms has also been reported in several studies  <cit> . this phenomenon is termed “codon context” as it implicates some “rule” for organizing neighboring codons as a result of potential trna-trna steric interaction within the ribosomes  <cit> . codon context  was shown to correlate with translation elongation rate such that the usage of rare codon pairs decreased protein translation rates  <cit> . therefore, the incorporation of cc has been proposed in the conventional icu-based gene optimization algorithm geneoptimizer  <cit> . furthermore, a patented technology, known as “translation engineering”, demonstrated that better enhancement in translational efficiency is achievable by optimizing codon pair usage in addition to icu optimization  <cit> . however, there is yet a study to investigate the relative effects of icu and cc on protein expression. to address this issue, we propose a computational analysis to evaluate the performance of sequences generated by various icu and cc optimization approaches.

in this study, we applied novel computational procedures to generate dna sequences exhibiting optimal icu and cc in escherichia coli, lactococcus lactis, pichia pastoris and saccharomyces cerevisiae based on information obtained from omics data analysis. while e. coli and s. cerevisiae has been model organisms for recombinant protein production studies, we also consider codon optimization in the gram-positive bacterium l. lactis and methylotrophic yeast p. pastoris since they are also promising candidates for expressing recombinant proteins  <cit> . assuming that the native dna sequences of highly expressed genes have evolved to exhibit optimal icu and cc for high in vivo expression, we demonstrated the efficacy of our computational approaches by performing a leave-one-out cross-validation on the high-expression genes for each expression host.

RESULTS
codon optimization formulation
to investigate the relative importance of icu and cc towards designing sequences for high protein expression, we implemented three computational procedures: the individual codon usage optimization  method generates a sequence with optimal icu only; the codon context optimization  method optimizes sequences with regard to codon context only; and the multi-objective codon optimization  method simultaneously considers both icu and cc. thus, the resultant sequence is icu-/cc-optimal when its icu/cc distribution is closest to the organism’s reference icu/cc distribution calculated based on the sequences of native high-expression genes. based on the mathematical formulation presented in methods, the ico problem can be described as the maximization of icu fitness, Ψicu , subject to the constraint that the codon sequence can be translated into the target protein . due to the discrete codon variables and nonlinear fitness expression of Ψicu, ico is classified a mixed-integer nonlinear programming  problem. nonetheless, it can be linearized using a strategy shown in an earlier study by decomposing the nonlinear |p0k − p1k| term  into a series of linear and integer constraints which consist of binary and positive real variables  <cit> . the resultant mixed-integer linear programming  problem can be solved using well established computational methods such as either branch-and-bound and branch-and-cut  <cit> . however, due to the large and discrete search space which contains all possible dna sequences that can encode the target protein, solving the milp using these methods may require a long computational time. thus, alternative methods, such as gasco  <cit>  and qpsobt  <cit> , have been proposed for solving ico using genetic algorithm and particle swarm optimization. although these heuristic methods are more efficient than conventional milp solving procedures, they still require a significant amount of computational resources due to the iterative nature of the algorithms. to circumvent the high computational costs, we developed the non-iterative method for solving ico using the following steps:

i <dig>  calculate the host’s individual codon usage distribution, p0k.

i <dig>  calculate the subject’s amino acid counts, θaa,1j.

i <dig>  calculate the optimal codon counts for the subject using the expression: θc,optk=p0k×∑j=121θa,1j×1αj=fκk∀k∈ <dig> ,…, <dig> 

i <dig>  for each τi in the subject’s sequence, randomly assign a codon κk if θck >  <dig>  and decrement θc,optk by one.

i <dig>  repeat step i <dig> for all amino acids of the target protein from τ <dig>  to τn, <dig> 

similarly, cco can be formulated as the maximization of cc fitness, Ψcc , subject to the constraint that the codon pair sequence can be translated into the target protein . to find the solution for cco, the procedure in ico may not be applicable due to the computational complexity which arises from the dependency of adjacent codon pairs. for example, given a codon pair “aug-aga” in a 5’-3’ direction, the following codon pair must only start with “aga”. therefore, if we had adopted the ico procedure to directly identify the codon pairs and randomly assign them to the respective amino acid pairs, there could be conflicting codon pair assignments in certain parts of the sequence. since the characteristic of independency, which was exploited to develop a simple solution procedure for ico, is absent in the cco problem, we resort to a more sophisticated computational approach.

the cco problem can be conceptualized in a similar way as the well-known traveling salesman problem whereby the traversing from one codon to the next adjacent codon is analogous to the salesman traveling from one city to the next  <cit> . since there will be a “cost” incurred by taking a particular “codon path”, the cco problem aims to minimize of the total cost for traveling a codon path that is able to code the desired protein sequence. however, the cco problem is more complex than the traveling salesman problem due to the nonlinear cost function evaluated based on the frequency of codon pair occurrence . for an average sized protein consisting  <dig> amino acids, the total number of codon paths can be as many as  <dig>  finding an optimal solution for such a large-scale combinatorial problem within an acceptable period of computation time can only be achieved via heuristic optimization methods. incidentally, the use of genetic algorithm  <cit>  provides an intuitive framework whereby codon path candidates are “evolved” towards optimal cc through techniques mimicking natural evolutionary processes such as selection, crossover or recombination and mutation. thus, the procedure for solving cco is as follows:

c <dig>  randomly initialize a population of coding sequences for target protein.

c <dig>  evaluate the cc fitness of each sequence in the population.

c <dig>  rank the sequences by cc fitness and check termination criterion.

c <dig>  if termination criterion is not satisfied, select the “fittest” sequences  as the parents for creation of offsprings via recombination and mutation.

c <dig>  combine the parents and offsprings to form a new population.

c <dig>  repeat steps c <dig> to c <dig> until termination criterion is satisfied.

in step c <dig>  the termination criterion depends on the degree of improvement in best cc fitness values for consecutive generations of the genetic algorithm. if the improvement in cc fitness across many generations is not significant, the algorithm is said to have converged. in this study, the cc optimization algorithm is set to terminate when there is less than  <dig> % increase in cc fitness across  <dig> generations, i.e. Ψcc/Ψcc <  <dig>  where r refers to the rth generation of the genetic algorithm. when the termination criterion is not satisfied, the subsequent step c <dig> will perform an elitist selection such that the fittest 50% of the population are always selected for reproduction of offsprings through recombination and mutation. during recombination, a pair of parents is chosen at random and a crossover is carried out at a randomly selected position in the parents’ sequences to create  <dig> new individuals as offsprings. the offsprings subsequently undergo a random point mutation before they are combined with the parents to form the new generation.

unlike traditional implementations of genetic algorithm where individuals in the population are represented as as 0– <dig> bit strings, the presented cc optimization algorithm represents each individual as a sequential list of character triplets indicating the respective codons. therefore, the codons can be manipulated directly with reference to a hash table which defines the synonymous codons for each amino acid. as a result, the protein encoded by the coding sequences is always the same in the genetic algorithm since crossovers only occur at the boundary of the codon triplets and mutation is always performed with reference to the hash table of synonymous codons for each respective amino acid.

based on the formulations for icu and cc optimization, the moco problem, which is an integration of both, can be described as maximizing both icu and cc fitness, i.e. max , subject to the constraints that both the codon and codon pair sequences can be translated into the target protein sequence. as such, due to the complexity attributed to cc optimization, solution to moco will also require a heuristic method. in this case, the nondominated sorting genetic algorithm-ii  is used to solve the multi-objective optimization problem  <cit> . the procedure for nsga-ii is similar to that presented for cc optimization except for additional steps required to identify the nondominated solution sets and the ranking of these sets to identify the pareto optimum front. the nsga-ii procedure for solving the moco problem is as follows:

m <dig>  randomly initialize a population of coding sequences for target protein.

m <dig>  evaluate icu and cc fitness of each sequence in the population.

m <dig>  group the sequences into nondominated sets and rank the sets.

m <dig>  check termination criterion.

m <dig>  if termination criterion is not satisfied, select the “fittest” sequences  as the parents for creation of offsprings via recombination and mutation.

m <dig>  combine the parents and offsprings to form a new population.

m <dig>  repeat steps m <dig> to m <dig> until termination criterion is satisfied.

the identification and ranking of nondominated sets in step m <dig> is performed via pair-wise comparison of the sequences’ icu and cc fitness. for a given pair of sequences with fitness values expressed as  and , the domination status can be evaluated using the following rules:

• if  and , sequence  <dig> dominates sequence  <dig> 

• if  and , sequence  <dig> dominates sequence  <dig> 

• if  and , sequence  <dig> dominates sequence  <dig> 

• if  and , sequence  <dig> dominates sequence  <dig> 

whenever a particular sequence is found to be dominated by another sequence, the domination rank of the former sequence is lowered. as such, the grouping and sorting of the nondominated sets are performed simultaneously in step m <dig> . in the original nondominated sorting algorithm  <cit> , the set of individuals that is dominated by every individual is stored in memory. therefore, for a total population of n, the total storage requirement is o. however, for the abovementioned algorithm, only o storage is required for storing the domination value of each individual. in terms of computational complexity, both the original and modified algorithm requires at most o computations for m objective values since all the n individuals have to be compared pair-wise for every objective to be optimized. therefore, the nondominated sorting algorithm presented in this thesis is superior on the whole, especially with regards to computational storage requirement which can become an important issue when dealing with long coding sequences.

the output of multi-objective optimization is a set of solutions also known as the pareto optimal front. since the aim of moco is to examine the relative effects of icu and cc optimization, it is not necessary to analyze all the sequences in the pareto optimal front. instead, the solution which is nearest to the ideal point will represent the sequence with balanced icu and cc optimality. as such, the solutions of ico, cco and moco will subsequently be referred to as xico, xcco and xmoco respectively . the program for performing ico, cco and moco can be downloaded from the following link: http://bioinfo.bti.a-star.edu.sg/tool/codonoptimization/.

finding the codon preference
the entire workflow for codon optimization of a target protein sequence begins with the identification of the host’s preferred icu and cc distributions as the reference . these icu and cc distributions should ideally capture codon usage patterns that correspond to efficient translation of mrna to protein. therefore, the first step of codon optimization identifies the reference icu and cc distributions by characterizing the underlying mechanisms of efficient translation which can be achieved through transcriptome, translatome and proteome profiling as demonstrated in earlier studies  <cit> . however, such large-scale experimental data are not readily available for the extraction of codon usage preference information in all the expression hosts considered in this study. alternatively, it is assumed that the organisms have evolved to conserve resources by producing high amounts of transcripts for genes that will also be efficiently translated. as such, the widely available transcriptome data from microarray experiments can be used to identify the highly expressed and efficiently translated genes. thus, the codon pattern of the host’s native high-expression genes will be a suitable reference point for codon optimization.

the step for selecting high-expression genes codon pattern for codon optimization is only relevant if the following two conditions are true:  icu and cc distributions of high-expression genes are significantly biased and nonrandom; and  there is a significant difference in icu and cc distribution between highly expressed genes and all the genes in the host organism’s genome. it is noted that if the first condition is false, there is no codon  bias and codons can be assigned randomly based on a uniform distribution; if the second condition is false, the computation of icu and cc distributions based on all the genes in the genome will be sufficient to characterize the icu and cc preference of the organism without the need for selecting high-expression genes.

to determine the significance of icu and cc biases, we applied the pearson’s chi-squared test . using a p-value cut-off of  <dig> , the icu and cc distributions of at least 80% of the amino acids  amenable to the chi-squared test were found to be significantly biased in the micro-organisms . in the high-expression genes, aspartate was found to be the only one among all amino acids exhibiting an icu distribution that is not significantly different from the unbiased distribution for e. coli, p. pastoris and s. cerevisiae. similarly, more than 80% of the amino acids  show significant difference in icu and cc distributions between high-expression genes and all genes in the genomes of these three microbes. contrastingly, 80% amino acids did not show significant difference in cc distributions between high-expression genes and all genes in l. lactis, suggesting that the selection of highly expressed genes may not be required to establish the cc preference of l. lactis. by applying the principal component analysis, we can observe that the icu and cc distributions for all types of genes in l. lactis are close to one another when compared to genes from other organisms . this indicates that the short listing of highly expressed genes may not be necessary for organisms like l. lactis. nonetheless, we recommend the identification of high-expression genes to characterize the icu and cc preference of any host, such that there is a better level of confidence that the optimized recombinant gene can be efficiently expressed.

the chi-squared statistic is computed based on the observed occurrence of each codon  and the expected occurrence under the null hypothesis of uniform distribution. any amino acid  with p-value <  <dig>  is considered to exhibit significantly biased codon  usage. singular amino acids  and singular amino acid pairs  are not amenable to the biasness analysis since they are not encoded by more than one synonymous codon . chi-squared statistic and p-value are not calculated for amino acid  with expected counts less than  <dig> . abbreviations: da, codon  distribution of all genes in the genome; dh, codon  distribution of high-expression genes; u, uniform distribution.

performance of codon optimization methods
the performance of each optimization approach was evaluated using a leave-one-out cross-validation, where a gene is randomly selected from the entire set of high-expression genes for sequence optimization while the rest of the genes will be used as the training set to calculate the reference icu and cc distribution . the predicted optimum sequences are compared with the original native sequences to evaluate the performance of each codon optimization approach . as the degree of similarity to the wild-type high expression genes indicates the gene expressivity potential of the optimized sequences, the quality of each optimized sequence was measured in terms of the percentage of codons matching the corresponding native sequence, denoted by pm. from the results, the xico, xcco and xmoco solutions were generally found to be more similar to the native genes than the random sequences generated by rca indicating that all the optimization approaches are indeed capable of improving the codon usage pattern compared to the control . the pm values of xico, xcco, xmoco and xrca sequences for each gene are further compared in a “tournament” style to show the relative performance of each optimization method. in the tournament matrix , each cell shows the number of wins by the method in the left-most column against that in the upper-most row. whenever the numbers of wins and losses  do not sum up to  <dig>  the shortfall will be equal to the number of draws.

for every gene, the pm of the optimal sequences generated by respective optimization approaches are compared pair-wise for each expression host. the numbers of tournament wins/losses by each approach for all the genes in each expression host are added up. the sequences generated by ico, cco, moco and rca are indicated as xico, xcco, xmoco and xrca respectively. in each cell, the numbers from top-most to bottom-most corresponds to the data for e. coli, l. lactis, p. pastoris and s. cerevisiae, respectively.

through the comparison of ico and cco, the xcco solutions have a higher average percentage of codon matches than xico sequences for all four microbes , with at least 90% of the xcco sequences matching the native corresponding sequences better than those generated by ico . this result indicates that cc fitness can be a more important design parameter for sequence optimization than icu fitness which has been a conventional design criterion implemented in several software tools. while it appears likely that the integration of cco with ico under a multi-objective optimization framework can potentially lead to even better sequence design, results from our moco analysis suggest otherwise. the average of pm value of xmoco were observed to be lower than that of xcco, indicating that the consideration of icu fitness in addition to cc fitness can be detrimental to the sequence design. to our best knowledge, no such formal evaluation of the relative impact of icu and cc fitness on synthetic gene design has been presented to date. hence, based on the promising in silico validation results which implicate cc as an important design parameter for optimizing sequences, the newly developed cco procedure can potentially supersede the icu optimization techniques currently implemented in gene design software tools. it is noted that similar observations on the relative performance of ico, cco and moco were made when we performed the in silico leave-one-out cross-validation on the set of  <dig> high-expression genes of e. coli reported in an earlier study  <cit> . details of this analysis can be found in additional file  <dig> 

discussion
capturing the preferred codon usage patterns
earlier codon optimization studies have recommended the usage of high expression genes to design the recombinant gene for efficient heterologous expression  <cit> . in the analysis of codon usage patterns, the significant distinction in the icu and cc distributions between highly expressed and other genes corroborated the relevance of identifying high-expression genes to characterize the preferred codon usage patterns. it is noted that although there is codon usage information readily available in the codon usage database   <cit> , these data may not be useful as prior filtering of highly expressed genes was not performed. such codon usage data may reflect some degree of preference for “rare” codons, thus leading to low gene expression  <cit> .

several options are available for quantifying the codon usage patterns. in this study, we have adopted the method of treating the icu and cc distributions as a vector of frequency values to capture the relative abundance of individual codons and codon pairs. an earlier well-known method for quantifying codon usage bias is the codon adaptation index . the cai has been widely used for codon optimization due to its observed correlation with gene expressivity  <cit> . however, by designing a gene through the maximization of cai, the resultant coding sequence will become a “one amino acid – one codon” design where cai =  <dig> . this sequence design may not be desirable as the overexpression of this gene can lead to very rapid depletion of the specific cognate trnas resulting in trna pool imbalance, which can in turn cause an increase in translational errors  <cit> . in this aspect, the icu fitness measure will be a better performance criterion than cai since the former allows a small number of rare codons to be included in the final sequence. furthermore, the calculation of cai, as described in its original paper  <cit> , is intrinsically based on individual codon usage and does not have the capability to account for codon pairing. therefore, the information captured by the cc fitness cannot be reflected in the cai value.

therefore, the proposed approach of optimizing codons according to the complete icu and cc distributions of highly expressed genes will be suitable to alleviate the problem of trna pool imbalance when the cell is induced to overexpress the target gene. as such, the concept of cai was not considered in this study as this single value does not capture the details in icu and cc distributions.

other potential issues in efficacy of cco
codon usage has been shown to affect the accuracy and speed of translation  <cit> . hence, the concept of cco implementation is to identify favorable codon pairings that can lead to more efficient protein synthesis process. notably, an optimization framework based on the dynamic modeling of protein translation has been recently developed to identify suitable codon placements to improve translation elongation speed  <cit> . although this method provides a mechanistic understanding of how codon choice affects translation efficiency, it requires a protein translation kinetic model and codon-specific elongation rates which may not be readily available for organisms other than e. coli as shown in previous studies  <cit> . therefore, cco may be a better alternative as it can achieve the aim of enhancing translation efficiency while having the advantage of utilizing information, including genome sequence and gene expression data, which are easily accessible in public databases such as the gene expression omnibus  and genbank . incidentally, there was evidence suggesting that translation initiation rather than elongation is the rate limiting step  <cit> . nonetheless, cco generated sequences can indirectly increase translation initiation by freeing up more ribosomes through enhanced translation elongation rates. the increased pool of free ribosomes can then help to improve translation initiation by mass action effect.

on the other hand, translation initiation can also be affected by the mrna structure of the initiation site. at the primary structure level, shine-dalgarno sequence and kozak sequence should be added to the 5’ end of the coding sequence since previous studies have shown that they are required for recognition of the aug start codon to initiate translation in prokaryotes and eukaryotes, respectively,  <cit> . at the secondary structure level, it was found that hairpin, stem-loop and pseudoknot mrna structures can repress protein translation  <cit> . although this suggests that the computationally intensive mrna secondary structure evaluation may be required for designing synthetic genes, it was also reported that the helicase activity of ribosome is able to disrupt the secondary structures for mrna translation  <cit> . therefore, we suggest using the mrna secondary structure analysis only as a supplementary step for the cc-optimized sequences such that no significant computational cost is added to the main cco procedure.

cco tool for synthetic biology
to further develop cco into a software tool for designing synthetic genes, several other factors may have to be considered. from the experimental aspect, the gene optimization should take into consideration the types of restriction enzymes used for vector construction such that the restriction sites dna motifs are avoided to prevent unnecessary cleavage of the coding sequence. in certain cases where the optimized coding sequence tends to have nucleotide repeats, additional steps may be required to avoid the repeats or inverted repeats which may lead to dna recombination or formation of mrna hairpin loops, respectively, that will reduce the heterologous expressivity of the target protein  <cit> . in addition, sequence homology may also be considered to design genes that are resistant to rna interference such that complementary sequences of the silencing rnas are avoided in the coding sequence  <cit> . possible strategies to tackle the aforementioned issues during gene optimization have been discussed in a previous study  <cit> .

the optimal sequences generated by cco are not found in any natural organism. thus, the cco software tool should also consider challenges involved in the synthesis of these artificial genes. the current technology for de novo gene synthesis involves the chemical synthesis of short oligonucleotides followed by ligation- or pcr-mediated assembly of the oligonucleotides to form the complete gene  <cit> . the way in which a long coding sequence is broken down into short oligonucleotides has to be properly designed to minimize the oligonucleotide synthesis error rate and maximize the uniformity of the oligonucleotides’ annealing temperatures for efficient assembly. several methods such as dnaworks  <cit> , gene2oligo  <cit>  and tmprime  <cit>  have been proposed to these goals in oligonucleotide design optimization for gene synthesis. although these oligonucleotide optimization methods can be performed independently from the codon optimization procedure, these two processes can be integrated to facilitate the “design-to-synthesis” workflow. as long as the current gene synthesis paradigm prevails, researchers can further explore the possibility of developing an integrated codon and oligonucleotide optimization software tool to effectively and systematically design high performance synthetic genes for protein expression.

potential applications of cco
the motivation behind codon optimization is usually to enhance the expression of foreign genes in expression hosts such as e. coli, p. pastoris and s.cerevisiae. in addition, codon optimization can also be used to generate synthetic designs of native genes for metabolic engineering applications. while conventional overexpression of native metabolic genes is achieved by increasing gene copy number through the introduction of plasmids, codon optimization provides an alternative approach for enhancing pathway utilization via insertion of high-expression synthetic genes of the respective metabolic enzymes into the host’s genome. the latter technique can be advantageous as it obviates the metabolic burden associated with plasmid maintenance  <cit> , thus allowing the cells to have more resources for growth and biochemical production.

apart from biotechnological applications, codon optimization can also be used in biomedical research where modulation of protein expression is required to alter physiological response. for example, in the development of vaccines against viruses, one approach is to genetically manipulate the virus to obtain a “live attenuated” strain as the vaccine. such a vaccine, when administered to the host, will elicit an immune response for the host to develop immunologic memory and specific immunity against the virus without severe disruption to the overall physiology. some conventional methods of developing live attenuated vaccines include laboratory adaptation of virus in non-human hosts and random/site-directed mutagenesis  <cit> . since the wild-type virus is able to hijack the gene expression machinery of the host for replication, the de-optimization of viral codon usage can lead to the development of live attenuated vaccines as demonstrated in a recent study  <cit> . therefore, the cco framework developed in this study can be slightly modified to design synthetic virus consisting of more rare codons that can be used as vaccines. specifically, we can either invert the objective function to minimize cc fitness or alter the target cc distribution during the execution of the optimization procedure to design the sequence of the attenuated virus.

CONCLUSIONS
through novel implementations of ico, cco and moco, the high-expression genes of four microbial hosts were optimized and cross-validated to compare the performance of the optimized sequences. amongst all the optimization approaches, cco was found to generate the sequences that are most similar to the native high-expression genes, indicating a greater potential for high in vivo protein expression. contrary to the conventional practice which adopts icu optimization as the key element of gene design, our study suggests that cc fitness is a more relevant design parameter for optimizing the sequence for improved heterologous protein expression. thus, future works to incorporate the optimization of cc fitness into synthetic gene design software can lead to the development of more efficient platforms for gene optimization.

