BACKGROUND
introduction
computational modelling is a key element of both systems  <cit>  and synthetic  <cit>  biology research. in systems biology models are constructed from biological observations and are used to generate predictions of system behaviour under various conditions. conversely in synthetic biology models are employed as executable prototypes/designs for engineering useful synthetic biological systems.

one of the major limitations of the existing models is that they are restricted to small scale biological subsystems  <cit> . for real life application areas such as medicine or biotechnology there is a need to scale up and build more complex multiscale models which cover multiple spatial and/or temporal scales  <cit> ; the virtual physiological human  <cit>  and high-definition physiology  <cit>  projects are international initiatives attempting to  address this challenge.

results generated through computational model simulation can be used for real life applications only if the model has been validated first. traditionally this has been done by comparing time series data generated by models with biological observations recorded in the wet lab. if significant inconsistencies are detected the model needs to be updated and/or the experiments have to be repeated which is both expensive and time consuming. in an attempt to detect modelling errors as soon as possible in silico formal validation methods are additionally employed  <cit> . one of the most employed model validation methods in systems and synthetic biology is model checking.

in this paper we present a model checking methodology for the validation of multidimensional  computational models, and its application to two multicellular population based examples from systems biology.

model checking
model checking  <cit>  is a validation method which automatically verifies if a model of a system is correct according to a given formal specification. the general model checking steps are:
modelling: creating an abstract representation of the system ;

specification: encoding the formal specification of the system.

verification: automatically validating the model against the specification.



models which are validated using model checking approaches are dynamic i.e. they can be simulated in order to generate timeseries data which illustrate how they change over time.

system specifications are usually encoded using formal languages due to their rigorous syntax and semantics. traditionally in model checking the system specification is formalised using a class of formal languages called temporal logics because they enable reasoning about how the state of the system changes over time.

linear time temporal logics assume the structure of time to be linear which means that at each moment in time a system state has at most one possible successor state  <cit> . the first temporal formalism considering a linear time structure used for model checking  was linear temporal logic   <cit> .

logic statements written in ltl are composed of atomic, boolean and temporal logic propositions.

an atomic proposition is a statement which evaluates to true/false and cannot be divided into simpler logic statements. for biological systems specifications the set of atomic properties usually comprises  arithmetic expressions of the form {a}≍r, where {a} denotes the concentration of species/protein a, ≍ ∈{<,<=,=,>=,>} and r∈ℝ. in addition {a} can be prefixed with the difference/differential operator d such that d represents the rate of change for concentration {a} from the current to the next timepoint.

conversely a boolean proposition is a compound statement comprising a boolean operator and logic proposition :
¬ϕ : the negation of logic proposition ϕ is true i.e. ϕ is false.

ϕ1∧ϕ <dig> : logic proposition ϕ <dig> is true and logic proposition ϕ <dig> is true.

ϕ1∨ϕ <dig> : logic proposition ϕ <dig> is true or logic proposition ϕ <dig> is true.

ϕ1⇒ϕ <dig> : logic proposition ϕ <dig> is true implies logic proposition ϕ <dig> is true.

ϕ1⇔ϕ <dig> : logic proposition ϕ <dig> is true equivalent to logic proposition ϕ <dig> is true.



where ¬ is a unary boolean operator, and ∧,∨,⇒,⇔ are binary boolean operators.

finally temporal propositions are used to reason about how the system changes over time. they comprise a temporal operator and logic proposition:
fϕ : eventually logic proposition ϕ holds.

gϕ : logic proposition ϕ holds always.

ϕ1uϕ <dig> : logic proposition ϕ <dig> holds until logic proposition ϕ <dig> holds.

xϕ : logic proposition ϕ holds in the next time point.



where f, g, u, x are temporal operators.

bounded linear temporal logic   <cit>  is an extension of ltl where a bounded time interval is associated to the temporal operators:
f ϕ: eventually logic proposition ϕ holds within the time interval .

g ϕ: logic proposition ϕ holds always within the time interval .

ϕ1u ϕ2: logic proposition ϕ <dig> holds until logic proposition ϕ <dig> holds within the time interval .

x ϕ: logic proposition ϕ holds in the next k-th timepoint.



the advantage of employing bltl instead of ltl is that only a bounded simulation time interval has to be considered for the evaluation of the temporal logic propositions.

considering a model and formal bltl specification a software called “model checker” automatically verifies if the model is valid or not with respect to the specification.

model checking in systems and synthetic biology
in systems biology model checking has been proposed as a methodology for validation  <cit>  and parameter synthesis/estimation , respectively in synthetic biology for efficient design  <cit>  and in silico validation  <cit> .

probabilistic model checking approaches are employed for the formal validation of systems which exhibit stochastic behaviour and can be either exhaustive or approximate. exhaustive approaches potentially explore the entire state space  to decide if a model is valid and are therefore highly accurate. the disadvantage is that their complexity increases with the size of the state space which means they are not scalable. conversely approximate probabilistic approaches decide if a model is valid based on methods from statistical theory using only a finite set of simulations. therefore they are scalable because the state space is only partially explored. although such approaches provide an answer based on an approximation, which is not guaranteed to be correct, the user can place an upper bound on the approximation error.

due to the stochastic nature, high complexity and multiscale representation of biological systems approximate probabilistic model checking approaches are preferred both for systems and synthetic biology applications; an extensive review of relevant model checking approaches is provided in  <cit> , respectively a review of statistical model checking methods employed in systems biology is provided in  <cit> . two known model checkers which support both exhaustive and approximate approaches are marcie  <cit>  and prism  <cit> .

traditional model checking approaches in systems and synthetic biology only capture how non-dimensional properties  evolve over time, and are appropriate for small scale systems such as signalling/ metabolic pathway models. the evolution over time of spatial patterns and their properties has to be additionally considered when building computational models of more complex systems . such multidimensional  properties cannot be captured by the traditional non-spatial approach.

contributions
since one of the main aims of systems and synthetic biology is to scale up the development of computational models corresponding formal validation methods need to be in place. in this paper we attempt to address this challenge by developing and implementing a methodology for automatic spatio-temporal model validation. due to the high complexity inherent to spatial computational model only approximate probabilistic model checking approaches will be considered throughout. in the interdisciplinary spirit of computational biology research this paper covers aspects ranging from theory development to software implementation and application to biological case studies. our main contributions are:
the definition of a stochastic spatial discrete-event system  as an abstract representation for describing how stochastic biological systems evolve in time and space;

a formal probabilistic bounded linear spatial temporal logic  for specifying spatio-temporal logic statements;

the implementation of the methodology in the multidimensional model checking platform mudi which enables validating spatio-temporal models against pblstl properties. mudi comprises both bayesian and frequentist, estimate and hypothesis testing based validation approaches.

parameterised image processing algorithms for detecting and analysing spatial patterns and clusters of such patterns in time series data;

the spatial temporal markup language  for representing spatio-temporal properties extracted from time series data;



our methodology was validated against two biological case studies namely phase variation patterning in bacterial colony growth and the chemotactic aggregation of cells; see figure  <dig> for illustrative real-life images.real-life images for considered case studies.
 multiple bacterial colonies with phase variable genes. sector-like patterns  are an indication of high proportions of “mutant” cells . conversely gray parts of the colony are an indication of high proportions of wild-type cells. .  population of dictyostelium discoideum cells chemotactically aggregating in the centre where the chemical attractant concentration is highest .



the contents of this paper are organised as follows. all theoretical computer science and software implementation details are provided in the “methods” section, while the application of the methodology to two biological case studies is described in the section “results”. the interpretation of the results, limitations, future work and a comparison to related work are provided in the “discussion” section. finally a summary of our contribution is provided in the section “conclusions”.

methods
the general workflow for spatio-temporal model construction and validation is depicted in figure  <dig> and comprises the following steps:spatio-temporal model validation workflow. workflow comprising all steps from model construction to model validation. the first step  describes the construction of the model from biological observations and/or literature. in the second step  the model is simulated to generate time series data which is passed to the spatio-temporal analysis module for automatic detection and analysis of spatial patterns and clusters of such patterns. the third step  comprises the translation of the natural language specification of the system to a formal probabilistic blstl  specification. finally the fourth step  describes the validation of the model with respect to the pblstl specification using the model checker mudi. in case the model is invalid it is updated and the validation procedure repeated.

model construction. building the computational model from biological observations and/or relevant references from the literature.


spatio-temporal analysis. the model is simulated to generate time series data in which spatial patterns and clusters of such patterns are automatically detected and analysed. the output of the spatio-temporal analysis is formatted according to the stml standard specification.

formal specification. natural language properties representing the specification of the system are translated to formal pblstl statements.

model checking. the model checker mudi takes the spatio-temporal analysis output and the pblstl statements as input and decides if the model is valid or not using the validation method chosen by the user . in case the model is invalid it is updated and then checked again.



model construction
biological systems are usually modelled as stochastic processes which transition from the current state to the successor state when an event occurs . this specific type of stochastic process is called a stochastic discrete-event system .

definition <dig> 
the factored representation of an sdes   is a 5-tuple 〈s, t, μ, sv, v〉 where:
s is the set of all possible states of the system;

t is the transition rates matrix which records the probability of the system to transition from the current state si to the next state sj, ∀si,sj∈s;

μ is a probability measure computing the probability of the system to reach a certain state along the sequences of states described by a set of simulation traces;

sv is the set of state variables describing the state of the system;

v is the value assignment function which computes the value ∈ℝ of each state variable for a given simulation trace and state of the system.



our aim is to additionally reason about properties of spatial patterns in such systems, and to quantify how these properties change over time. the following assumptions are made regarding the representation of space:
only the discretised version of the 2d, respectively pseudo-3d euclidean space is considered. a pseudo-3d space extends a 2d euclidean space with a density measure for each position. the density measure indicates the proportion of occupied positions on the oz axis for a fixed  position. compared to a full 3d representation it does not specify explicitly which positions of the oz axis are occupied but only their proportion.

the 2d euclidean space is discretised by splitting it into m rows and n columns obtaining an m×n regular grid where m and n are finite, natural, positive numbers. the resolution of the results depends on the values of m and n. higher values guarantee a fine-grained resolution while lower values account for a coarse-grained resolution.



the evolution of an sdes in space could be represented using one/multiple collections of m·n state variables such that each state variable represents one discretised position in space. the main advantage of this is that the structure of sdes does not change when adding spatial information to a model. however the main disadvantage is that semantically different state variables  belong to the same set without the possibility to explicitly distinguish between them at the entire set level. in the following we would like to reason about how subsets of positions in the discretised space  and their geometric properties  change over time. therefore there is a need to define detection and analysis methods which are specific to the collection of state variables encoding space, and do not apply to state variables encoding numeric values such as concentrations. for this reason the state variables encoding spatial information will be extracted in a separate set denoted as spatial state variables . moreover instead of representing space using m·n spatial state variables such that the value of each state variable ∈ℝ, a single spatial state variable whose value ∈ℝ+m×n is employed. the evaluation of such state variables to m×n real-valued non-negative matrices cannot be performed by the existing value assignment function v whose codomain is . thus a corresponding spatial value assignment function  is defined.

considering the above notations we define stochastic spatial discrete-event systems  as an extension of sdes with a set of spatial state variables spsv and a spatial value assignment function spv.

definition <dig> 
an sspdes  is a 7-tuple 〈s, t, μ, nsv, spsv, nv, spv〉 where:
〈s, t, μ, nsv, nv〉 is a sdes ;

spsv is the set of spatial state variables;

spv is the spatial value assignment function.



the set spsv contains all spatial state variables i.e. the variables recording the configuration of the discretised space in the current system state. the value of these variables is computed using the spatial value assignment function spv:
 spv:e×s×spsv→ℝ+m×n  where e denotes the set of all possible model executions/simulations, s the set of states, spsv the set of spatial state variables, and m and n the dimensions of the discretised space. given a model simulation σ at state s and a spatial state variable ssv, spv=sv such that sv∈ℝ+m×n returns a m×n matrix of real non-negative values, where each element of the matrix corresponds to a position in the discretised space. for explanatory purposes an illustrative example of a simple sspdes is provided in additional file  <dig> 

the size of the discretised space and the semantics of the values stored for each spatial compartment depends on the biological problem one tries to address. for instance space was discretised in 101× <dig> compartments for the phase variation case study because the sector-like patterns  should be easily recognizable. employing a more coarse-grained spatial resolution would distort the shape of the sectors, respectively a more fine-grained resolution would lead to an increased model simulation time. the values recorded for each position of the discretised space are the number of wild-type, respectively “mutant” cells. conversely in case of the chemotaxis case study the size of the discretised space was 100× <dig> with 1% of the spatial compartments occupied by cells. the reason for choosing this spatial resolution was to ensure that the formation of clusters is not an artifact of the inability of cells to move due to lack of space, but is a consequence of their chemotactic behaviour . in this case both number of cells and chemical attractant concentration were recorded for each position in the discretised space.

finally one of the main advantages of defining sspdess as an extension of sdess is backwards compatibility i.e. existing sdes models can be interpreted as sspdess having an empty set of spatial state variables spsv. moreover sspdess enable scaling up the development of computational models by extending existing non-spatial models, typical for subcellular scales , with spatial information relevant to potentially higher scales . for instance the computational model employed for the phase variation case study  <cit>  is an illustrative example of constructing a spatial stochastic computational model from an initially non-spatial deterministic model  <cit> .

spatio-temporal analysis
simulations of an sspdes  provide timeseries data describing how each position of the discretised space changes over time. in order to reason about  spatial patterns an automatic mechanism for detecting and analysing the relevant subsets of positions in the discretised space is required. two parameterised mechanisms will be employed for automatically detecting subsets of the discretised space; one for spatial patterns denoted in the rest of the paper as regions and the other for clusters. depending on the values of the detection parameters a more fine- or coarse-grained subset of the discretised space is considered.

regions
one of the main assumptions of the region detection mechanism is that subsets and not individual positions of the discretised space are considered. secondly the value of each position of the discretised space records the number/density of entities of interest. each position can hold  <dig> or more entities without pileup. the identity of the elements forming the region is not relevant. it is assumed that the type and size of the entities is constant throughout the entire space. therefore the region detection mechanism operates in a homogeneous context with respect to the type of modelled entities. in the case that the system comprises multiple types of entities, each type is represented by a different spatial variable. therefore the regions defined by groups of different entities can be computed by repeatedly applying the region detection mechanism for each spatial variable.

given a model execution/simulation σ, the i-th state σ, 0≤i≤|σ|, where |σ| represents the length of σ, and a spatial state variable ssv, let sp=spv.

definition <dig> 
a regionr with respect to σ and ssv is a subset of neighbouring positions in sp such that ∀x∈r,value≥threshold and |r|>εsize, where threshold,εsize∈ℝ are user-definedparameters.

the problem of finding regions is similar to the segmentation problem in the computer vision literature  <cit> . 2d images can be represented as vectors or matrices where each position records the colour  or intensity  of the image. in order to apply computer vision methods for finding regions the matrix sp is translated to a grayscale image. the value of each position in the matrix is normalised and converted to the intensity value of the corresponding pixel in the resulting image. examples of grayscale images in which sector-like patterns  have been detected are depicted in figure  <dig> detection of sector-like patterns in bacterial colonies. grayscale images depicting the final state of two phase variation model simulations. sector-like patterns corresponding to high-proportions of “mutant” cells are automatically detected and outlined in blue. note that the colour scheme in these images is the inverse of the one in figure 1a i.e. sector-like patterns are highlighted in white instead of black, respectively patches of wild-type cells are highlighted in black instead of white . moreover only one bacterial colony is depicted in each one of these images while in figure 1a multiple bacterial colonies are shown.



the parameterised mechanism for detecting regions in grayscale images is described in algorithm ??. all mentioned subalgorithms are implemented in the open source computer vision library opencv  <cit> ; see table  <dig> for a mapping between the subalgorithms described in algorithm ?? and the opencv functions. detailed descriptions of the opencv function parameters are provided in  <cit>  and will not be restated here.mapping between subalgorithms employed by algorithm ?? and opencv functions



subalgorithm signature
opencv function signature
the left column describes the signature of the subalgorithms employed by algorithm ??. the right column describes the signature of the corresponding opencv function.





clusters
given a collection of regions, the cluster detection mechanism constructs groups of sufficiently similar regions. during this procedure no assumption is made regarding the size and type of the regions. in contrast to the region detection mechanism, the mechanism for detecting clusters operates in a heterogeneous context where both fixed and variable size subsets of the discretised space are considered.

our assumption is that two regions should belong to the same cluster if the distance between them is below a certain threshold. a distance pseudometric d is defined for this purpose:
 d:reg×reg→ℝ,d=2+ <dig>  where reg is the set of all regions, and d computes the euclidean distance between the centroids of two regions a,b∈reg.

definition <dig> 
a clusterc with respect to a set of regions reg, and a pseudometric d, is a subset of regions in reg such that ∀x,y∈c,d≤εdistance and |c|>εsize, where εdistance and εsize are user-defined parameters.

the problem of grouping entities into clusters is addressed by the cluster analysis literature  <cit> . a popular algorithm which considers distance  as a criterion for grouping objects is dbscan  <cit> . the original algorithm has a known issue because the assignment of border objects  to clusters depends on the order in which the set of objects is iterated. an improved version of the dbscan algorithm was introduced in  <cit>  for addressing this issue and is employed by our cluster detection mechanism considering the pseudometric d as the distance function. illustrative examples of grayscale images in which clusters of cells  are automatically detected are depicted in figure  <dig> detection of clusters in population of cells. grayscale images representing the distribution of cells at a particular timepoint in two chemotaxis model simulations. clusters comprising at least  <dig> sufficiently close cells are automatically detected and outlined using different colours. cells are represented as gray points if they do not belong to a cluster. otherwise they are represented as coloured points such that the colour of the cell matches the colour of the cluster it is a member of. each cluster is enclosed by a polygon whose shape  best matches the shape of the cluster. similarly to figure 1b cells aggregate in the centre where the concentration of chemical attractant is highest.



spatial measures
each detected region/cluster is characterised by the set of spatial measures sm = {clusteredness, density, area, perimeter, distance from origin, angle, triangle measure, rectangle measure, circle measure, centroid , centroid }. a detailed description of the semantics specific to regions and clusters is provided below; see figure  <dig> for a graphical illustration.visual description of the spatial measures. the clusteredness  computes how close regions/neighbouring positions are to each other in a cluster/region. density  measures the average value  of the considered positions in the discretised space. area  and perimeter  have the usual meaning from discrete 2d geometry. distance from the origin  represents the minimum distance between the point from the centre of the discretised space and the considered region/cluster. the angle  associated to a region/cluster is determined by three points: the origin, and the points found at the intersections of the region/cluster convex hull with the line perpendicular on the line determined by the origin and the centroid of the region/cluster. the shape  is determined by computing the degree of similarity between the shape of the region/cluster and a triangle, rectangle and circle. the centroid  is the geometric centre of the considered region/cluster.



semantics of spatial measures for regions
the clusteredness of a set of regions represents the inverse of the average euclidean distance between the centroids of the regions. conversely the clusteredness of a single region is computed as follows:
 clusteredness=areaarea+∑h∈holesarea  where r is a region and holes is the set of holes contained by r. as the area of the holes contained by regions increases the value of the clusteredness degree decreases and vice-versa.

the density of a set of regions is equal to the average density of the regions divided by the average euclidean distance between the centroids of the regions. conversely the density of a single region represents the average density value of the positions defining the region in the discretised space.

the area of the region is equal to the area of the polygon defined by the neighbouring positions in the euclidean plane .

the perimeter of the region is equal to the perimeter of the polygon defined by the neighbouring positions in the euclidean plane. holes contained by the region are ignored in this case.

the distance from the origin is equal to the minimum distance between the polygon defined by the region and the centre point of the discretised space .

the angle  is equal to the angle determined by the centre point of the discretised space p and the points obtained from the intersection of the line perpendicular on the line determined by p and the centroid of the region, and the convex hull of the polygon defined by the region.

the shape of the region is determined in a fuzzy manner by the triangular, rectangular and circular measures. each one of these measures computes the likelihood of the region to have a triangular, rectangular, respectively circular shape using the following formula:
 measures=areaarea  where r is a region, and the value of measures∈ ,∀s∈ {triangular, rectangular, circular}. algorithms for computing the minimal enclosing triangles are provided in  <cit> , respectively  <cit>  for rectangles and  <cit>  for circles. for the phase variation case study, where the region detection mechanism is employed, the triangular shape is most relevant because it closely matches the shape of the sector-like patterns in the bacterial colonies; see figure 1a for examples of such patterns highlighted in black.

the x/y-coordinates of the centroid are computed using moments of the polygon defined by the neighbouring positions in the euclidean plane  <cit> .

semantics of spatial measures for clusters
the clusteredness of a set of clusters represents the inverse of the average euclidean distance between the centroids of the clustersa. conversely the clusteredness of a single cluster represents the inverse of the average euclidean distance between the centroids of the regions in the cluster.

the density of a set of clusters is equal to the average density of the clusters divided by the average euclidean distance between the centroids of the clusters. conversely the density of a single cluster represents the average density value of the spatial entities defining the cluster in the discretised space.

the area of a cluster is equal to the area of the polygon defined by the convex hull of all regions in the cluster .

the perimeter, distance from the origin, angle , shape and x/y-coordinates of the centroid of the cluster are determined using the same methods employed for regions. the main difference is that the polygon used to determine the outer boundary of the cluster is the convex hull computed for a group of regions instead of a single one. moreover for the chemotaxis case study the circular and rectangular shapes are most relevant because they closely resemble the shape of cells clusters, respectively the shape of cell streams moving towards the point where the chemical attractant concentration is highest; see figure 1b for an example of a circular cluster forming in the middle, respectively streams of cells moving towards it.

spatio-temporal markup language 
the output of the region/cluster detection mechanism comprises the spatial measures computed for each region/cluster. a standard data representation format is employed to describe the evolution of these spatial and other numeric measures over time. the main advantage of such a format is that data is represented in a uniform and consistent manner which facilitates exchange of data sets and integration of software tools. we define the spatial temporal markup language  as an initial attempt to standardise the representation of spatio-temporal time series data.

for portability, structuring and readability purposes spatio-temporal time series data is stored in extensible markup language  files. the rules and constraints for the structure of these xml files are formalised in xml schema definition  files with the filename format stml_lxvy.xsd ; see  <cit>  for the latest version of the format. an example of an xml file recording experimental spatio-temporal data is depicted in listing  <dig> 



the results of an  experiment are recorded as a list of time points. the constraint imposed on experiment elements are that they must contain at least one time point.

each timepoint element can be identified by a non-negative integer value representing when the data was recorded. in case values are missing  the value is determined automatically using the following formula:
 ti=val,if the valuevalwas predefined forti <dig> if no value was predefined fortiandi=0ti−1+ <dig> otherwise 

the information stored in timepoint elements are a list of zero or more unique spatial entities, and a list of zero or more unique numeric state variables.

a spatialentity element currently comprises only one element called pseudo3d which stores a pseudo3d spatial description of the entity. in the future if 2d or full3d representations are of interest they can be added as additional child elements to the spatialentity element.

every pseudo3d element has an associated type which can be either cluster or region. similarly to the detected regions/clusters every pseudo3d element is characterised by a set of spatial measures constrained as described below:
clusteredness, density, area, perimeter, distancefromorigin, centroidx and centroidy - real non-negative values;

angle - a real non-negative value between  <dig> and 360;

shape - an optional element which can take the values “triangular”, “rectangular” or “circular”;

triangularmeasure, rectangularmeasure and circularmeasure - real non-negative values between  <dig> and 1;



the basic shapes considered by the current version of stml are appropriate to describe simple spatial patterns such as patches which spread outwards as they develop , ordered structures/streams , and  groups/clusters . illustrative real-life examples of such shapes are the sector-like patches highlighted in black in figure 1a , and the streams of cells  depicted in figure 1b which chemotactically migrate towards the centre and form a cluster . in contrast complex patterns composed of multiple basic shapes cannot be described appropriately by the current shape similarity measures. in order to address this issue a potential future version of stml could include a more complex suite of shape descriptors.

finally numericstatevariable elements contain a name and a value child element where the name is a string and the value a real number.

all timeseries data are translated to stml using the region/cluster detection mechanisms and are then provided to the model checker mudi for evaluation.

bounded linear spatial temporal logic
we define a logic called bounded linear spatial temporal logic  for specifying quantitative spatio-temporal properties against which stml files are automatically evaluated. blstl is an extension of bltl, and ltl, with spatial, arithmetic and statistical functions. the temporal and boolean propositions specific to bltl remain unchanged, but new functions are introduced enabling to reason about how  regions/clusters and their spatial properties change over time. for brevity purposes only an informal description of blstl is provided below; see additional file  <dig> for more details and the formal syntax and semantics definition.

the same non-dimensional properties, spatial entities  and measures , triangle measure, rectangle measure, circle measure, centroid  and centroid ) are considered both by the stml specification and the blstl formal language. therefore blstl enables encoding logic statements with respect to both non-dimensional  and spatial properties, and correlations between the two.

in order to allow the construction of more complex logic statements blstl additionally enables specifying how arithmetic expressions comprising non-dimensional or spatial properties change over time. the considered functions which enable the construction of complex logic statements are either unary  or binary .

these arithmetic functions take a single real value as input and are directly applicable to non-dimensional properties. however in order to apply the same functions to collections of regions/clusters, the distribution of spatial measures characterising the regions/clusters has to be reduced to a single real value. a set of statistical functions is made available in the specification of blstl in order to address this problem. the considered statistical functions are either unary , binary , ternary  or quaternary . one of the main differences between blstl and traditional bltl-based formal languages is that the former enables reasoning about dynamic sets of spatial patterns whose cardinality changes over time, while the latter usually only considers fixed sets of non-dimensional variables.

although the arithmetic and statistical functions described above enable the construction of more complex logic statements, there is a need for a mechanism which enables reasoning about particular subsets of the detected regions/clusters. for instance it may be the case that only regions with the area greater than a certain value, or clusters close to a particular point in space are of interest. in order to address this challenge blstl comprises a constraint-based mechanism which filters out all regions/clusters whose spatial measures do not meet a set of user-defined conditions.

examples of natural language statements which can be encoded in blstl using the logic constructs defined above are:
considering the time interval  <cit> , at some point in the future the number of cell clusters emerging in the environment, when the concentration of camp is less than  <dig>  is greater than zero ;

f ∧>0)) .

the mean area of all cancerous regions grows throughout the entire simulation interval  <cit>  ;

g )>0) .

within the time interval  <cit>  the number of mutant cell populations emerging at a distance smaller than  <dig> from the area of inflammation  is greater than  <dig> until the concentration of x drops below  <dig> ;

)>0)u .



blstl can be employed for specifying properties of individual simulation traces. however for specifying properties over a collection of traces we will extend blstl to probabilistic blstl.

probabilistic blstl
definition <dig> 
a probabilistic bounded linear spatial temporal logic  property ϕ is a logic property of the form p⋈θ where ⋈ ∈{<,≤,>,≥}, θ∈ and ψ is a blstl property.

a pblstl property ϕ≡p⋈θ holds for a sspdes   if and only if the probability of ψ to hold for an execution of  is ⋈θ. therefore in order to determine the truth value of a pblstl property ϕ the likelihood of it being true is computed.

similarly to  <cit>  evaluating the truth value of a pblstl property ϕ is harder than determining the truth value of a blstl property ψ. one counterexample for a blstl property is sufficient to decide that the property does not hold. conversely one counterexample for a pblstl property ϕ does not necessarily imply that ϕ is not satisfied. a pblstl property ϕ does not hold if the likelihood of all counterexamples provides sufficient evidence to invalidate ϕ.

pblstl model checking
definition <dig> 
the probabilistic spatio-temporal model checking problem is to automatically verify if a sspdes  satisfies a pblstl property ϕ≡p⋈θ.

different approximate probabilistic model checking algorithms can be employed depending on the method of constraining the approximation error and the approach for deciding if a logic property holds. for flexibility and completeness purposes in our approach both bayesian and frequentist, statistical hypothesis test and estimate based methods are considered. the specific algorithms which were considered are provided in table  <dig> considered approximate probabilistic model checking approaches


frequentist
bayesian

estimate

hypothesis testing
bayesian methods consider prior knowledge about the parameters and variables in the model when deciding if a logic property holds. conversely frequentist approaches assume no prior knowledge is available. all methods except probabilistic black-box take as input a user-defined upper bound on the approximation error. they request additional model executions until the result is sufficiently accurate. probabilistic black-box model checking takes a fixed number of model simulations as input and computes a p-value as the confidence measure of the result.



all methods except probabilistic black-box take a user-defined  parameter as input representing the acceptable value of the approximation error. such methods request and evaluate a variable number of model simulations until the approximation error constraints are satisfied. conversely the probabilistic black-box model checking approach decides based on a fixed number of model simulations if the logic property is satisfied. however in this case the confidence measure of the provided result is not specified by the user and varies depending on the number of available model simulations.

bayesian approaches should be used when information about the prior probability distribution of parameters in the model is available. this could lead to a reduced number of required samples in order to decide if a logic property holds. conversely if no prior knowledge is available frequentist methods could be employed instead.

statistical hypothesis test based approaches should be employed whenever deciding between two hypotheses where usually the null hypothesis represents the pblstl logic property ϕ, respectively the alternative hypothesis ¬ϕ. conversely if the true probability of ϕ being true is computed and then compared to θ estimate based methods should be considered.

the algorithms provided in the original papers describing the model checking methods  were employed for all approaches except frequentist statistical. an improved version of this model checking method requiring less input parameters is described in  <cit> . however the initialisation step of the improved algorithm could potentially lead to invalid arithmetic expressions if extra conditions are not added to the algorithm implementation . we propose a variant of the algorithm described in  <cit>  with a modified initisalisation step which no longer requires adding extra conditions to the implementation. a more detailed description of the proposed solution which we consider in our approach is given in additional file  <dig> 

finally the semantics of all considered approximate probabilistic approaches is described in additional file  <dig>  moreover we prove in additional file  <dig> that the model checking problem is well-defined; see  for a similar proof for bltl.

implementation
all spatio-temporal model validation algorithms were implemented in the multidimensional model checking platform mudib. for both efficiency and cross platform compatibility reasons mudi was implemented in c++. the current version of the model checker was designed to be executed only from the command line. the user chooses the desired model checking algorithm and enters the required parameters via command line flags; run mudi with the “–help” command line argument for more details.

the modular architecture of mudi is separated into the inference engine and the model checking layers as depicted in figure  <dig>  the main advantage of this design choice is that changes at the inference engine layer do not require updates at the model checking layer and viceversa.the architecture of the model checker mudi. the model checking layer is decoupled from the inference engine and comprises all model checking types supported by mudi. all model checking types depend on the same inference engine layer which contains the pblstl logic property parser  and evaluator .



the model checking layer comprises all supported model checking algorithms. independently of the chosen algorithm the same inference engine is used for the logic statements’ evaluation. conversely the inference engine layer comprises the logic statements parsing and evaluation algorithms. the parsing module verifies if a given logic property is syntactically correct and the evaluation module determines if the property is true/false considering a spatio-temporal execution of the model.

RESULTS
we have illustrated the efficiency and expressivity of our methodology based on two case studies: phase variation patterning in bacterial colony growth  and the chemotactic aggregation of cells . the datasets employed for both case studies were generated in silico through model simulation.

in both cases our assumption was that no prior knowledge is available and therefore a frequentist model checking approach was employed. moreover for simplicity purposes only the frequentist statistical model checking results will be presented here. however all model checking approaches have been tested against these datasets. relevant comparisons between different approximate probabilistic model checking approaches are given in the original papers introducing them. since these approaches abstract away from particular model representations and logic formalisms the comparison results should not change and therefore will not be restated here.

phase variation patterning in bacterial colony growth
phase variation is a stochastic gene expression switching mechanism employed by microbial populations to potentially develop variants which adapt to foreseeable frequent environmental or selective conditions  <cit> . in particular it is of interest to better understand how pathogenic organisms use this mechanism to adapt to different hosts and evade host defenses and immune responses. the most readily observable compositional effect of phase variation in cultures grown in vitro is the development of sector-like patterns. to study the growth of bacterial colonies with phase variable genes a computational model was constructed  <cit>  enabling the investigation of different parameter sets  and geometries . the model was constructed using coloured stochastic petri nets in snoopy  <cit>  and was executed on a unix cluster using marcie  <cit> ; see  for details on how to obtain a copy of the model. for brevity purposes only the rectangular version of the model was considered here.

all one thousand stochastic simulations which were executed for the rectangular model during our previous study  <cit>  will be reused. in order for the simulation output to be processable by mudi it needs to be translated into stml format. for this case study the region detection and analysis module was employed because sector-like patterns  are of interest. an example of the translation steps applied to each spatio-temporal timeseries is depicted in figure  <dig>  the simulation output is visualised as images from which regions are extracted and analysed. results corresponding to each timeseries are stored in a separate stml file.spatio-temporal detection and analysis of a phase variation model simulation. each column corresponds to a different timepoint from the simulation . the rows considered from top to bottom represent the stages of translating timeseries data to stml output files .



the generated stml dataset is evaluated against the formal specification comprising pblstl logic properties. depending on the modelled microorganism and the associated mutation rates the values and/or parameters of the logic properties will vary. we will describe here a generic set of logic statements to illustrate the expressivity of the formal language pblstl. therefore the structure of pblstl statements is emphasized and not particular parameter values. moreover the chosen pblstl probability values are approximations relative to their expected level . for simplicity purposes the specification, which partially relates to figure 1a, will be described in natural language below; see additional file  <dig> for the equivalent specification written in pblstl.
one of the first requirements is that the probability of the number of sector-like patterns to increase or stay constant  during the bacterial colony growth is greater or equal to a threshold value. in our case we set this threshold to  <dig> . the reason for this requirement is that we do not expect developed sectors to disappear.

in case sector-like patterns emerge the probability that one of them will contain holes is less than  <dig> . this statement can be rewritten using the clusteredness measure of the regions i.e. the probability that the minimum clusteredness degree of all sectors is less than a certain threshold value  is less than  <dig> .

the average density of the detected sectors, representing the concentration of “mutant” cells relative to “normal” cells, should be greater than  <dig>  with probability greater than  <dig> .

moreover the average area of the sectors oscillatesat least one time during the growth of the bacterial colony with probability greater than  <dig> . by oscillations we mean an increase of the average area followed eventually by a decrease or viceversa. in pblstl oscillations can be represented using the difference operator d. for this particular statement we will specify that at some point in the future the rate of change  of the average area will be positive and then eventually negative or viceversa. such oscillations are expected because the relative density of “mutant” cells with respect to “normal” cells is considered when detecting sectors. therefore as the colony grows it may be the case that at the most outward edge of a sector initially the “mutant” cells dominate a position in the discretised space but then they are overrun by the “normal” cells. in other words it may be the case that a position which is contained by a sector will no longer do so in the future.

following the same reasoning we also specify that the average perimeter value of the sectors oscillates at least five times during the growth of the bacterial colony with probability greater than  <dig> . from an implementation point of view this logic statement was added to check the increase in runtime due to nesting multiple temporal logic propositions.

the maximum angle described by any sector with respect to the origin is expected to be greater than 120° with probability less than  <dig> .

moreover sectors are expected to develop from the origin outwards. therefore the minimum distance from the origin would be expected to be greater than  <dig>  with probability greater or equal to  <dig> .

finally on average most of the sectors should develop and maintain a triangular-like shape throughout the entire bacterial colony growth with probability greater than  <dig> .



the natural language specification was translated to pblstl such that the i-th pblstl logic statement corresponds to the i-th natural language statement. each pblstl statement  was individually evaluated against the stml dataset  <dig> times using the frequentist statistical model checking approach implemented in mudi. the results corresponding to each pblstl statement and execution of the model checker are described in additional file  <dig>  conclusions drawn from the statistical analysis of the results corresponding to each pblstl statement are summarized in table  <dig> model checking statistical analysis results for the phase variation case study



id
% true
#total stml
#true stml
#false stml
exec. times
pblstl
μ
σ
μ
σ
μ
σ
μ
σ
entries in the “id” column represent the numeric identifiers placed at the right of each pblstl statement. the “% true pblstl” column describes what percentage of the  <dig> executions concluded that the pblstl statement is true. “#total stml” represents the total number of stml files evaluated for the pblstl statement; columns “#true stml” and “#false stml” represent the number of stml files for which the pblstl statement was evaluated true, respectively false.“ μ” and “ σ” represent the mean and standard deviation. “exec. times” presents the average model checking execution time for each pblstl evaluation using the “minutes:seconds” format.



for half of the pblstl statements  100% of the  <dig> model checker executions concluded with the answer true. however in case of pblstl statements  <dig> and  <dig> the percentage was  <dig> %, respectively  <dig> % for pblstl statement  <dig> and  <dig> % for pblstl statement  <dig>  it is important to note that this does not mean that the model checking results are incorrect. moreover in the approximate probabilistic setting if the model checking result is false for a logic property ϕ this does not imply that ¬ϕ is true. the variation in the results obtained for pblstl statement  <dig>   <dig>   <dig> and  <dig> are due to the fact the we executed the model checker with the maximum probability of type i and type ii errors equal to 5%. under these assumptions the evaluation result for a pblstl statement depends on the order and number of obtained true/false evaluations for individual stml files. to reduce the variation of the pblstl evaluations the value of the probability of type i/ii errors needs to be decreased. the required number of evaluated simulations is indirectly proportional to the type i/ii error probability. thus more simulation evaluations are required as the error probabilities are decreased. in the extreme case if the probability of both type i and type ii errors is set to zero the expected number of evaluated simulations is infinite i.e. the entire state space of the model would be potentially investigated.

similarly there is a significant difference in the average total number of stml files against which the pblstl statement was evaluated. depending on the comparison operator  and the specificity of the probability θ corresponding to each pblstl statement more/less evidence is required to prove that the statement is true/false. in our case the logic statement  <dig> required on average more than  <dig> stml evaluations and most of the time more than the maximum number of available simulations  <dig> . since no path to an external model simulator was specified the model checker did not have enough evidence to decide using the frequentist statistical model checking approach if the pblstl statement holds. therefore the provided answer was computed using the probabilistic black-box model checking approach.

the considerable difference in the number of required stml files is additionally reflected in the average execution times of the model checker. thus the highest average execution time was recorded for the evaluation of pblstl statement  <dig>  since the formal specification for this case study comprises all pblstl statements the average execution time for the entire specification is computed as the sum of all average execution times :
 execution timespecification=0: <dig> +0: <dig> +0: <dig> +0: <dig> +0: <dig> +0: <dig> +0: <dig> +0: <dig> =01: <dig> . 

in order to decrease the overall execution time the model checker was extended such that it can evaluate the specification comprising all pblstl statements in a single run. in this case each stml file is read into memory only once and thus reduces the number of required input/output  operations. under these conditions the average execution time for the entire specification considering  <dig> runs was 0: <dig>  , compared to 01: <dig>  when the pblstl statements were evaluated individually.

for reproducibility purposes the dataset of generated stml files and the file containing the spatio-temporal pblstl statements are made available in additional files  <dig> and  <dig> 

chemotactic aggregation of cells
chemotaxis is the process through which cells detect concentration changes in chemical gradients and move towards chemical attractants, respectively away from chemical repellants. it is employed both by prokaryotic and eukaryotic cells and underpins many biological processes   <cit> . in an attempt to better understand the intracellular mechanisms underlying chemotaxis computational models for various type of cells have been constructed  <cit> . although such models differ at the intracellular level they exhibit relatively similar behaviours at the population level i.e. cells aggregate in the area with the highest concentration of chemical attractants. in this work we were only interested in the evolution over time of the spatial distribution of cells and therefore have abstracted away from all the intracellular details.

a computational model illustrating the chemotactic aggregation of cells was constructed using the modelling and simulation software morpheus  <cit> . the discretised 2d space was represented using a rectangular lattice of size  <dig> × <dig> on which  <dig> cells were randomly distributed; cells’ positions are recomputed for each model simulation. in order to activate the chemotactic behaviour of the cells a chemical gradient was added in the environment according to a gaussian distribution with parameters μx=μy= <dig> and σx=σy= <dig>  the cells and their movement in the environment was represented using a cellular potts model  <cit>  and the distribution of the chemical gradient was encoded using partial differential equations. a copy of the model is made available as additional file  <dig> 

the output of each model simulation was translated to stml using the cluster detection mechanism because groups of  cells were of interest. cells occupied only one position of the discretised space and therefore their detection in images was straightforward. instead of employing the region detection mechanism we implemented a custom lightweight cell detector which verifies the presence/absence of cells in each position  considering the average pixel intensity; see figure  <dig> for an example of the translation steps performed by the cluster detection mechanism for each model simulation.spatio-temporal detection and analysis of a chemotaxis model simulation. each column corresponds to a different timepoint from the simulation . the rows considered from top to bottom represent the stages of translating timeseries data to stml output files . the colour employed in the first row plots represents degree of pileup. “yellow” positions in the discretised 2d space are occupied by  <dig> cell, respectively “green” positions by  <dig> cells and “teal” positions by  <dig> cells. the colours employed in the second row plots are used only to distinguish between different clusters. each cluster is surrounded by a polygon whose shape  best matches the shape of the cluster.



in order to illustrate the integration of mudi with a model simulator the model checker was executed initially without making available any stml files. instead an external script responsible for simulating the model and converting the output to stml was provided as a command-line parameter. thus mudi executed the script on demand whenever extra model simulations were required. in general if a large number of simulations is required the maximum model checking time can be bounded via a user-defined parameter.

considering this scenario the computational model was validated against a formal pblstl specification. similarly to the phase variation case study the chosen set of logic statements is generic and was chosen to illustrate the expressivity of pblstl and not the phenotypic characteristics specific to a particular type of cells. moreover the specification, which partially relates to figure 1b, will be described in natural language below; see additional file  <dig> for the equivalent specification written in pblstl.
 <dig>  one of the most important properties is that cells aggregate in the area with highest concentration of chemical attractant. this means that at least one cluster is formed at a distance smaller than δ> <dig> from the chemical gradient centre. let us assume that the cluster centroid is the point , respectively the centroid of the chemical gradient is . then a cluster is at a distance smaller or equal to δ from  if and only if:
 d=2+2<δ  considering that y∈ this means that:
 x< <dig> +δ2−2x> <dig> −δ2−2y< <dig> +δy> <dig> −δ.  for this particular case study we set the value of δ to  <dig> 

 <dig>  in addition the average clusteredness degree of individual clusters increases at least  <dig> times during the simulation time interval  <cit>  with probability greater than  <dig> . this means that the average distance between cells in the clusters is reduced at least five times during the specified time interval.

 <dig>  in order to quantify the degree of clusteredness within and between different clusters a cluster validity index such as the sillhouette can be employed. the value of the silhouette is recorded for each timepoint by the avgclusterednessclusters numeric state variable. the probability of the avgclusterednessclusters to decrease under a threshold value  during the time interval  <cit>  is less than  <dig> . note that avgclusterednessclusters could be replaced by any other numeric state variable representing the concentration of a species/protein. therefore our approach can be employed to reason about both spatial and non-spatial properties, and how changes of non-spatial properties reflect on the spatial properties and viceversa.

 <dig>  similarly the number of clusters is expected to decrease and remain throughout the entire simulation less than  <dig> with probability greater than  <dig> . the reason for this is that simulations start with multiple small clusters which are then expected to merge and form larger clusters close to the area where the chemical attractant concentration is highest.

 <dig>  the chemical gradient is distributed such that the areas of approximately equal chemical concentration have a circular/ring shape. therefore the shape of at least one aggregated cells cluster should be eventually circular with probability greater or equal to  <dig> .

 <dig>  finally the probability of the average clusters’ density to never oscillate is less than  <dig> . oscillations of the density are expected because sometimes cells pile up.



similarly to the phase variation case study the natural language specification was translated to pblstl such that the i-th pblstl logic statement corresponds to the i-th natural language statement. each pblstl statement  was individually evaluated against the stml dataset  <dig> times using the frequentist statistical model checking approach. the results corresponding to each pblstl statement and execution of the model checker are described in additional file  <dig>  the output of the statistical analysis of the results corresponding to each pblstl statement are reported in table  <dig> model checking statistical analysis results for the chemotaxis case study



id
% true
#total stml
#true stml
#false stml
exec. times
pblstl
μ
σ
μ
σ
μ
σ
μ
σ
entries in the “id” column represent the numeric identifiers placed at the right of each pblstl statement. the “% true pblstl” column describes what percentage of the  <dig> executions concluded that the pblstl statement is true. “#total stml” represents the total number of stml files evaluated for the pblstl statement; columns “#true stml” and “#false stml” represent the number of stml files for which the pblstl statement was evaluated true, respectively false.“ μ” and “ σ” represent the mean and standard deviation. “exec. times” presents the average model checking execution time for each pblstl evaluation using the “minutes:seconds” format.



similarly to the phase variation case study there are fluctuations in the evaluation results of some pblstl statements. moreover the number of required stml files to reach a conclusion differs depending on the specificity of the logic statement and the distribution of pblstl truth evaluations. in contrast to the phase variation case study for many pblstl statements the variation in the number of required stml files, respectively the number of true and false stml evaluations, is equal to zero. furthermore although the average number of required stml files for the evaluation of a pblstl statement  is less than for the phase variation case study , the average execution time is higher . the reason for this is that most of the execution time of the model checker is spent on i/o operations. thus the execution time depends on both the number and size of stml files which are read into memory. the average stml file size for the phase variation case study is  <dig>  bytes, respectively  <dig> bytes for the chemotaxis case study. thus the ratio between the file size for the phase variation and chemotaxis case study is  <dig> , respectively the ratio between their average execution times is only  <dig> .

finally the average execution time for the entire specification is computed as the sum of all average execution times :
 execution timespecification=0: <dig> +0: <dig> +0: <dig> +0: <dig> +0: <dig> +0: <dig> =02: <dig> . 

similarly to the phase variation case study evaluating the specification comprising all pblstl statements in the same model checker run leads to a decrease in the execution time. the average execution time recorded for the entire chemotaxis specification considering  <dig> runs of the model checker was 0: <dig>   i.e. less than 50% of the average execution time when each pblstl statement was evaluated separately.

for reproducibility purposes a subdataset of  <dig> stml files generated on demand and the set of pblstl statements for the chemotaxis case study are made available in additional files  <dig> and  <dig>  due to file size constraints the full dataset of  <dig> stml files is made available only on the “case studies” subpage of  <cit> .

discussion
the need for spatio-temporal models and corresponding analysis and validation methods was mentioned previously in the literature. an example framework for spatio-temporal modelling and simulation based on the automatic detection and analysis of biochemical species in microscopy images is described in  <cit> . most of the existing formal methods employed for the quantitative validation of such models only consider the evolution over time of non-spatial properties such as concentrations. to the best of our knowledge the only existing quantitative spatio-temporal model checking approach is described in  <cit>  for reasoning about uncertainty in epidemiological models. the authors define a bounded spatio-temporal logic which extends bltl with two spatial functions p for computing the number of type a entities present in the compartment c and n for computing the number of type a entities lying within a radius r of one or more type b entities. more recently this work was extended in  <cit>  where a probabilistic spatio-temporal specification language called epispec is defined. compared to the previous approach epispec is based on first-order logic, defines functions with a similar semantics to p and n and additionally enables the use of potentially complex arithmetic e.g.dedt,∫t1t2edt expressions. from a spatial point of view in both approaches only the number of entities in a location or the neighbourhood of a location are considered. thus spatial patterns described by locations or clusters of locations are not detected and analysed. moreover geometric properties  are not considered.

our methodology is an extension of the existing model checking approaches because it enables the validation of models with respect to  spatial patterns and how their geometric properties change over time. the ability to reason about spatial structures and the interactions between such structures proves useful for the automatic in silico validation of complex spatio-temporal models. stochastic biological systems are represented as sspdess and the formal specification is encoded in pblstl.

the presented methodology and the model checker mudi have been designed to not place any restrictions on the relevantly employed modelling formalism. in order to illustrate the generalisability of our approach the computational model for the phase variation case study was formalised as a coloured stochastic petri net, respectively the computational model for the chemotaxis case study as a cellular potts model integrated with a system of partial differential equations.

although mudi is not dependent on the model type it does place a restriction on the simulation output format. all timeseries data need to be translated to the standard data representation format stml. in our approach this conversion is carried out automatically by the parameterised region  and cluster  detection mechanisms.

the main reason for choosing image processing functions for the translation of timeseries data to stml is that images could be generated from in silico simulations but also recorded during wet-lab experiments. therefore our methodology could potentially be used in the future to automatically determine if certain spatio-temporal properties hold for both in silico and in vitro generated datasets. quantifying how many logic statements hold for computational models vs wet-lab datasets could prove to be useful as a measure of similarlity/fitness and therefore be employed in automatic model construction and/or parameter estimation/synthesis algorithms. although image processing functions were employed here to translate timeseries data to stml the system was designed in a modular fashion such that the model checker mudi  is decoupled from the region/cluster detection mechanism . thus potential users of the model checker could extend our implementation with their own customized timeseries translators.

in addition mudi supports validating models based on pre-generated stml files  or it can generate stml files on demand . in case stml files are generated on demand a user-defined script calling the model simulator needs to be made available. for the chemotaxis case study a bash script was created to execute the linux version of the morpheus model simulator and translate the simulation output to stml. although writing scripts for the integration of mudi with various model simulators requires expert knowledge, the scripts, if designed properly, need to be potentially written only once.

the efficiency and complexity of the methodology was illustrated for the phase variation and chemotaxis case studies by employing only the frequentist statistical model checking algorithm. however mudi comprises both bayesian and frequentist, estimate and statistical hypothesis test based model validation approaches. depending on the availability of prior knowledge and the preferred method to formulate the model validity problem different algorithms could beused.

the scalability of the methodology depends directly on the size and representation of the modelled system. an increase in the size of the system will negatively impact the model simulation time directly, respectively the spatio-temporal analysis and the evaluation of logic properties indirectly. the rate at which the model simulation time changes, with respect to the system size, can vary considerably depending on the employed model representation and simulation algorithm. for instance the systems considered by the phase variation and chemotaxis case studies were of similar size  and complexity but their simulation time was significantly different . in contrast both the spatio-temporal analysis and evaluation of logic properties only depend on the size of the simulation traces and are expected to scale well  with respect to the size of the system. therefore one potential bottleneck, if any, for the scalability of the methodology is the model representation and/or simulation algorithm.

although the methodology was applied only to uniscale computational models a certain class of multiscale models are supported as well. these are models for which the model checking specification can be decomposed into n logic properties such that each logic property corresponds to a single uniscale submodel. in this case the assumption is that, from a model checking point of view, the interactions between different uniscale models are not relevant and can be ignored. if this is true the multiscale model validation task could be executed as a batch of n uniscale model validation tasks where the results are aggregated accordingly.

the model checker mudi and supplementary materials are made freely available on the official webpage  <cit> .

in spite of the above described features our approach has the following limitations. first one of the main assumptions made is that space is represented in pseudo-3d dimensions. this means that models ranging from 0d  to pseudo-3d  are supported without the possibility of explicitly referring to positions on the oz axis. therefore the current version of the model checker cannot be employed for full 3d models and spatial properties of such models . the extension of the methodology to the full 3d scenario would require defining a set of 3d specific spatial properties, including them in the logic pblstl and developing algorithms for automatically extracting such spatial properties from 3d images. second the presented methodology is limited to spatio-temporal uni-scale models i.e. it assumes that all spatial properties correspond to the same spatial scale. however for real life applications there is a need to build and integrate models across multiple temporal and/or spatial scales which are not covered here. multiple spatial scale models are not currently supported because the methodology does not include a mechanism to explicitly distinguish between spatial patterns from different scales. finally our approach has been validated only on simulated data but it should be applicable to real life datasets as well. moreover the usefulness of our methodology was illustrated only on biological case studies. however there is nothing inherent to the methodology which limits it to the biological and/or medical scenarios. therefore we would like to consider applying this approach to non-biological case studies as well in an attempt to test its applicability limits and/or discover new features which should be included. in the future we would like to extend our methodology and address the limitations presented above.

CONCLUSIONS
in this paper we defined and implemented a methodology for the automatic in silico formal validation of computational models using pseudo-3d spatio-temporal model checking. the advantage of this methodology, in contrast to the existing ones, is that it enables validating computational models with respect to both spatial  and numeric  properties, which means it can be employed for small  as well as large  scale systems. implicitly it also enables verifying correlations between changes in spatial properties with respect to numeric properties or viceversa.

we implemented the methodology in the freely available model checking platform mudi using a cross-platform programming language. no restriction is placed on the type and representation of the computational model because mudi operates directly on timeseries data. therefore it can be potentially integrated with most existing model construction workflows. for flexibility purposes mudi supports both frequentist and bayesian, estimate and statistical hypothesis testing based probabilistic model checking algorithms.

the efficiency and applicability of the methodology was illustrated based on two biological case studies namely phase variation patterning in bacterial colony growth and the chemotactic aggregation of cells. although both models were uni-scale, mudi could be employed for multiscale models by applying it iteratively for each scale without the possibility of relating properties between scales. we would like to address this limitation in the future. our work is a precursor to the development of more complex multidimensional and multiscale computational models.

availability of supporting data
the data sets supporting the results of this article are included within the article and its additional files.

endnotes
a the clusteredness is usually measured using what is known in the cluster detection and analysis literature as cluster validity indices. although there is no index which performs best for all scenarios silhouette  <cit>  obtains good/best results in the majority of cases according to  <cit> . the silhouette value is computed with respect to the regions in all clusters. thus in our case it could be determined only at cluster detection and analysis time when the information about individual regions is available. at a particular timepoint we associate to a set of clusters a unique silhouette value which means we could encode it as a numeric state variable in our model.

b the name of the model checker is composed from the uppercase letters in the word multidimensional.

additional files
additional file  <dig> 
example of a simple sspdes. an example illustrating how to construct a sspdes model for a simple system.



additional file  <dig> 
formal blstl syntax and semantics definition. a detailed description of the blstl formal language syntax and semantics.



additional file  <dig> 
improved frequentist statistical model checking. a brief description of the proposed frequentist statistical model checking algorithm improvement.



additional file  <dig> 
semantics of the considered approximate probabilistic model checking approaches. a description of the semantics of the considered approximate probabilistic model checking approaches.



additional file  <dig> 
well-defined model checking problem. a proof that the model checking problem is well-defined.



additional file  <dig> 
input file containing all pblstl statements for the phase variation case study. the input file containing all pblstl statements for the phase variation case study. any regular text editor can be used to open this file.



additional file  <dig> 
model checking results for the phase variation case study. the results obtained for each model checker execution and pblstl statement considering the phase variation case study. for statistical analysis of the results the pdf file can be converted to a microsoft word document, using the online converter , from which the table of results can be directly copied in a spreadsheet-like software such as microsoft excel . in case you would like to use statistical software such as r you can save the results from excel/calc in csv format and then import them into r.



additional file  <dig> 
dataset of stml files for the phase variation case study. the dataset of one thousand stml files corresponding to the stochastic simulations of the rectangular model for the phase variation case study. we recommend using the freely available 7zip software  to extract this archive.



additional file  <dig> 
chemotaxis model. computational model for the chemotaxis case study. please use the morpheus modelling environment  to open this file.



additional file  <dig> 
input file containing all pblstl statements for the chemotaxis case study. the input file containing all pblstl statements for the chemotaxis case study. any regular text editor can be used to open this file.



additional file  <dig> 
model checking results for the chemotaxis case study. the results obtained for each model checker execution and pblstl statement considering the chemotaxis case study. for statistical analysis of the results the pdf file can be converted to a microsoft word document, using the online converter , from which the table of results can be directly copied in a spreadsheet-like software such as microsoft excel . in case you would like to use statistical software such as r you can save the results from excel/calc in csv format and then import them into r.



additional file  <dig> 
dataset of stml files for the chemotaxis case study. the subdataset of  <dig> stml files corresponding to the stochastic model simulations for the chemotaxis case study. we recommend using the freely available 7zip software  to extract this archive.



abbreviations
blstlbounded linear spatial temporal logic

bnfbackus-naur form

pblstlprobabilistic bounded linear spatial temporal logic

sdesstochastic discrete event system

sspdesstochastic spatial discrete event system

stmlspatial temporal markup language

competing interests

the authors declare that they have no competing interests.

authors’ contributions

op defined and implemented the algorithms for spatio-temporal detection and analysis, provided the standard format stml for representing spatio-temporal properties, defined the theoretical model for stochastic spatial discrete-event systems, defined the formal probabilistic spatio-temporal logic pblstl, implemented the model checking platform mudi, and illustrated its effectiveness based on the two biological case studies. he also wrote the core parts of the manuscript. dg described the need for a spatio-temporal model checking methodology and supervised the development and implementation of the entire project. moreover he helped draft the manuscript and provided constructive critical reviews which led to its improvement. all authors read and approved the final manuscript.

