BACKGROUND
neural stem cells  are motile and proliferative cells that undergo mitosis, dividing to produce daughter cells and ultimately producing differentiated neurons and glia. understanding the mechanisms controlling nsc migration and proliferation will play a key role in the emerging field of regenerative medicine and in cancer therapeutics. all of the cells in a clone are genetic copies of the original stem cell. image-based analysis of static 3-d images demonstrated the important relationship between neural stem cells and blood vessels, and the propensity of both adult and embryonic nscs to seek out and maintain distinct spatial relationships with respect to vasculature known as their vascular niche . confocal and multiphoton microscopes that contain integrated incubation systems are able to image live nscs together with blood vessels in intact tissue slices, with 5-d image stacks  captured at intervals  over a period of 16– <dig> hours. here, λ represents spectral information from a fluorescent label. by labeling the blood vessels and the nscs with different fluorescent markers, these microscopes are able to capture image sequence data that show the dynamic behaviors of migrating proliferating nscs while simultaneously capturing the relationship to other structures including blood vessels. we have developed an application that for the first time enables the use of time-lapse microscopy data to quantify the dynamic relationship between clones of mammalian nscs and their niche in intact tissue containing vasculature and live proliferating cells.

the analysis of clones of migrating proliferating nscs starts with segmentation, the delineation of individual cells in each image frame. tracking then establishes temporal correspondences between segmentation results. finally, lineaging establishes parent-daughter relationships across mitotic events. the analysis of stem cell clonal dynamics to date has consisted primarily of extracting and analyzing a lineage tree generated from cultured cells. a lineage tree is a graphical representation showing each cell’s division time and the offspring it produces. each daughter cell is a genetic copy of its parent cell. a lineage tree is often referred to as a clone of stem cells. lineages also indicate the population dynamics of clones of stem cells, showing the lifespan and parentage of each cell in the clone, as well as indicating the phenotype of differentiated progeny. these trees summarize patterns of division  and differentiation in a single view. the lineage tree is a key tool in the analysis of stem cell clonal dynamics. in addition to tree level features, we can analyze cellular properties such as motion and morphology using tools such as algorithmic information theoretic prediction and discovery   <cit> . aitpd analyzes the patterns of cellular dynamic behavior for individual cells established by segmentation, tracking and lineaging. it can accurately predict development potential for individual nscs. previously, we have shown that software in conjunction with aitpd enables the search for behavioral markers of different functional subtypes as well as the potential discovery of molecular mechanisms controlling stem cell proliferation  <cit> . there is a pressing need for new approaches to visualize and validate 5-d image sequence data of proliferating mammalian cells to enable quantitative analysis of the mechanisms controlling cellular proliferation and differentiation.

while it is possible to analyze the dynamic behaviors of stem cells in a manner that is robust to segmentation errors, anyerrors in tracking or lineaging are likely to corrupt all subsequent analysis. for in vitro phase contrast time lapse image sequence data  we recently developed a software tool called lever that allows a biologist to run automated segmentation, tracking, and lineaging on image sequence data in the laboratory  <cit> . lever displays the lineage tree in one window, while the image sequence data with segmentation and tracking results overlaid are displayed in a second window. navigation and editing can be done on either window. the interface is designed so that users are able to easily identify and quickly correct any mistakes in the automated image analysis. we have found in this work and in previous studies that the vast majority of errors in tracking and lineaging are the result of segmentation errors  <cit> . these errors happen often when the number of cells in a given area have been incorrectly estimated. lever uses an inference-based learning approach, which propagates user-supplied corrections forward to reduce errors on later frames. here we present an application called lever 3-d which displays image data in full stereoscopic 3-d and includes a utility to reconstruct 3-d image montages with the intent to be run in the biology lab. lever 3-d uses commodity gaming hardware to implement a high-performance interactive system for validating and correcting the automated image analysis results for 5-d stem cell data. this will allow the biologist to better understand stem cell dynamics and regulation within the neural stem cell micro-environment.

methods
a total of  <dig> 5-d image sequences showing adult mouse neural stem cells, ependymal cells, and vasculature were analyzed. the stem cells were imaged within a 3d wholemount explant culture of the subventricular zone  of the brain. each 5-d voxel location is specified as  where λ refers to a multichannel fluorescence signal, one channel imaging nscs, the second channel containing ependymal cells and vasculature. the movies were captured on two microscopes at two different laboratories. svz wholemounts were dissected under a dissection microscope as described previously  <cit>  from transgenic mice that express green fluorescent or tomato red fluorescent protein in neural stem cells  14mes/j, the jackson laboratory; ascl1tm <dig> ; b <dig> cg-gt26sortm <dig>  nsci). briefly, the brain was removed and halved and the cortex was peeled back to reveal the svz. a scalpel was used to make a 2– <dig> mm cut on the striatal side of the svz and watchmaker forceps were used to clip off the svz at the anterior and posterior sides and carefully transferred into phosphate buffered saline containing  <dig> μg/ml alexa fluor  <dig> conjugated isolectin gs-ib <dig>  on ice for  <dig> minutes to label the ependyma and blood vessels. svz wholemounts were transferred svz side down to a glass bottomed culture dish  and immobilized by covering with cold  growth factor free matrigel  and immediately transferred to an incubator set at 37°c with 5% co <dig> for  <dig> minutes to allow the matrigel to solidify. freshly made slice culture medium was added to the culture dish and the dish was placed on a zeiss lsm <dig> confocal microscope equipped with an environmental enclosure set at 37°c and 5% co <dig>  the pinhole was set at  <dig> au and z stacks  were collected every  <dig> minutes using a 20x objective for  <dig> hours. spatial resolution was  <dig> × <dig>  at a pixel spacing of  <dig>  μm for a total of  <dig>  gbytes of image data at  <dig> bits per voxel . at this resolution, the entire image sequence can be downloaded to the video ram on a  <dig>  gb card, with room left for the frame buffer and back buffer. images were also captured on a zeiss lsm <dig> confocal microscope at a spatial resolution of  <dig> × <dig> at a pixel spacing of  <dig>  μm for up to  <dig> hours, resulting in as much as  <dig> gbytes of image data per sequence. these larger sequences require the image sequence data to be buffered in system memory, a task that is handled automatically by the display driver. interestingly, less proliferation was observed in image sequences captured at the higher spatiotemporal resolution. once the 5-d image sequence data has been captured it is imported directly from the microscope output file using the open source bioformats application.

processing of the 5-d image sequence data begins by using the open-source bioformats  <cit>  tool to convert the native microscope data  into intensity valued tiff images. the use of bioformats enables lever 3d to work not only with the zeiss specific file formats, but with file formats used by most of the major microscope manufacturers. in addition to the image data, bioformats extracts the imaging settings including the spatiotemporal resolution used to account for image anisotropy, providing scaling for the tracking and distance-based calculations.
schematic diagram of lever 3-d. this flow chart shows the process in which lever 3-d uses automated algorithms along with user inputs to create a 100% corrected lineage tree. note the feedback loop from the “validation and correction” section back into “segmentation” and “tracking”.



background noise removal
confocal and multiphoton fluorescence microscopy of live stem cells is a battle between capturing enough signal and the disturbance of the specimen. imaging is done in a manner that maximizes the signal-to-noise ratio  of the image data while being minimally invasive. using less excitation energy causes less phototoxicity and disturbance to sensitive proliferating cells. this means that in practice, snr ends up being quite low. one way to improve the analysis of this large volume of challenging image sequence data is to apply pre-processing techniques that model the underlying dynamic data and noise processes. here we use two different background noise removal techniques for the stem cell and the vasculature channel to better match the characteristics of the objects being imaged. these background noise removal algorithms provide the benefit both of removing noise and of providing adaptive contrast enhancement. this simplifies and improves the performance of the subsequent visualization transform as well as the cell and vessel segmentation algorithms.

for the stem cell channel, we adapt the background noise removal technique described by michel et al.  <cit>  that models the noise as a slow varying low-frequency background noise signal combined with a random  noise process. our approach differs slightly in that rather than using extreme value theory and peaks over thresholds approach to detecting fluorescent particles, we use a segmentation approach based on mathematical morphology combined with an adaptive otsu transform  <cit>  on the filtered image as described in the “segmentation” section. this technique works as following: given the observed image  that we model as a combination of low-frequency background , random shot noise  and the original  image  that we wish to recover,
  <dig>  

the low-frequency background contribution  is estimated using a low pass  filter. the size of the neighborhood for the gaussian filter can be set by the user, but is defaulted to  <dig> in each  dimension. when subtracting the results of this filter that had a large neighborhood, structure is preserved. making the neighborhood too small will subtract away too much structure and the image will lose substantial overall energy. we have found that neighborhoods sizes in the range 75– <dig> give expectable results. however, going above  <dig> gives diminished returns. after subtracting the estimated background component from the observed image, the high frequency shot noise is removed using a median filter to produce the final denoised stem cell image used in the visualization transfer functions and the segmentation algorithm.

the above denoising approach works well on the stem cell channel where the foreground voxels  are found in relatively small high frequency regions corresponding to cells. in the vasculature channel, foreground voxels can constitute large portions of the image corresponding to dense regions of blood vessels. for denoising the vasculature channel we have adopted a different denoising approach using markov random fields  <cit>  and a global estimate of noise variance rather than the local background estimate used in the stem cell channel. this is an iterative technique that first estimates the noise variance  for the original image i <dig> by convolving it with a laplacian operator. this noise variance estimation is used as the stopping condition for our iterative denoising where we keep the nth image that is as different from the original image as our noise estimator predicted,
  <dig>  

each iteration changes a voxel by the minimum value Δ, where Δ= minq,r∈i,q≠r|vq−vr| and vi is the finite set of voxel values in the image. in other words, Δ is the minimum gap found on the current histogram. each iteration adjusts the intensity of every voxel by a Δ depending on the gradient of the neighborhood, as defined as:
  <dig>  

this gradient decent/accent is continued until the stopping criterion  is met. the background denoising algorithms for both the vasculature and stem cell channels simplify segmentation, registration and visualization. the efficiency of all of the subsequent steps increases greatly if a “pure” signal can be extracted.

registration
one of the next steps of preprocessing large static images is registration. one particularly interesting structure that produces stem cells throughout the life of the mammal is the subventricular zone  in the brain. in previous studies, only subsections of the svz have been targeted for inspection  <cit> . subsections were necessary due to the field of view being small given high magnification. we would rather be able to inspect the structure of the svz at the highest resolution possible. having a sub-cellular resolution means that we can compare different populations with a higher level of precision. however, subsections may not contain corresponding structures that exactly line up between experiments. our solution to this problem is to break the svz into a mosaic of high resolution overlapping subsections. these images are then reconstructed into an ultra high resolution large volume image of the entire structure.

here we detail a novel optimization to this problem exploiting the constraints given by the structure of the specimen and the imaging modality. with modern microscopes, stage position is stored in the metadata of each image capture. knowing the approximate stage position of the subsections with respect to one another, restricts which images can have adjacency. this information is enough to reconstruct the entire structure. however, the results leaves much to be desired. the initial reconstruction positions are displayed as green lines in figure  <dig>  during the imaging process, the specimen can shift relative to the stage, making stage position insufficient for registration. this can be caused by vibration of the stage, mechanical drift, dehydration or settling of the tissue slice, as well as removal of the slide between images. these position inaccuracies can be quickly overcome by using the overlapping image regions to find the relative offsets  of the mosaic of images.figure  <dig> 
reconstruction of an entire svz. the image is the result of registering  <dig> subsections of a mouse subventricular zone. registration using only microscope stage position data is indicated with a green dashed line. the blue solid lines represent a max spanning tree indicating which edge of the subsection was registered, e.g. subsection  <dig> was registered to  <dig>   <dig>  and  <dig>  where subsection  <dig> was only registered to  <dig>  the red dashed lines indicate the final position of each subsection after registration. registration happens in the z direction as well, not shown here.



the complexity of the registration problem can be reduced by the fact that images consist of a single time-point and that each image in the montage is oriented orthogonal to the imaging stage. a montage with a large number of subsections, approaching  <dig>  implies that the specimen has to be static in time. imaging one subsection is time consuming and by the time another column or row is started, the overlap sections would have changed too much to be reconstructed. the next assumption comes from the movement of microscope stage itself. the stage moves in such a way that the subsections are all at right angles to one another in a checkerboard fashion. our last assumption is that the volume will only deform in the direction of gravity. this is consistent with settling and dehydration. there should be only one subsection along this direction. this alleviates the need for transformations such as rotation, shearing, and deformation when registering. based on these assumptions we can formulate an effective and accurate translational registration algorithm.

the following technique works best with a channel with unique semi-sparse structures that will span image subregions. the svz’s vasculature channel is an ideal example of such a structure. the first step in our registration method is to create a maximum intensity image along the single subsection direction as stated in the paragraph above. the two overlapping maximum intensity projections are then shifted along the remaining two axes relative to each other as defined by a windowed area around the stage position data. each position is evaluated to determine how well they fit together. we use the normalized covariance between the two overlapping volumes, normcov in equation  <dig>  to quantify similarity and select the maximum value. once the best match is found, we use the original 3-d overlap volumes  to find the best registration along the remaining axis. the benefits to this method are that it is robust to variation in imaging parameters such as intensity  and contrast , as well as being object agnostic. this technique also works directly on the images rather than requiring preprocessing to determine a set of feature points that are used in more complex registration schemes.
  <dig>  

each overlapping subsection is evaluated and stored in a graph structure. the nodes represent an offset from the original stage position. each edge is the normalized covariance measure at the given offset. we then drop the lowest scoring edges until we are left with a max spanning tree, represented by the blue line in figure  <dig>  this allows us to anchor a single sub-image and follow this max spanning tree assigning delta values relative to the change from the previous node in the graph. in other words, a node is chosen to be stationary . the delta for each node connected to this root node is based only on the registration position change. each subsequent delta on a path of edges is calculated from the cumulative delta from the root and local registration delta. the final positions can be viewed as the red lines in figure  <dig>  once deltas has been calculated for each sub-image, a final reconstructed image can be created. given that each channel of a particular sub-image has been taken at the same time, we can register every channel using just one delta value. figure  <dig> shows a fully registered svz containing five channels. additional file  <dig> shows the same volume rotating and zooming into a region of interest. these images are then exported as large tiff files along with updated metadata files which contain the new dimensions. the image in figure  <dig> has dimensions of  <dig>  pixels in x,  <dig>  in y,  <dig> in z, and five channels. these newly exported images are now ready to be processed just like any other images received from the microscope.figure  <dig> 
fully registered 3-d montage with  <dig> channels. this image has been reconstructed and rendered using the 3-d view window with adjustments made in the transfer function interface in figure  <dig>  the channels are: blood vessels , cell nuclei , neural stem cells and astrocytes , oligodendrocytes , and migrating neuroblasts .



segmentation
in previous applications involving stem cell segmentation and tracking in phase contrast 2-d image sequences  <cit>  we have found that the most significant challenge to segmenting stem cells is to identify the correct number of cells in each connected component of foreground pixels. on a given frame, the numbers of cells in a given area may be ambiguous to even a domain expert. ambiguity arises when the cells touch and most often occurs immediately following a mitosis event. this can also occur when there is a high density of cells. it is our experience that it is easier to resolve the correct segmentation in 3-d images as compared to 2-d images for both human and automated algorithms. the problem of estimating the number of cells in any connected component of foreground voxels is easier in 3-d due to the discriminative nature of the extra spatial channel. the output of the denoising algorithm improves segmentation accuracy by removing data that is not directly related to foreground voxels. our denoiseing techniques are especially useful at preserving the gradient boundaries between cells and can remove ambiguity.

our segmentation algorithm begins by applying an adaptive thresholding to all channels, using a cuda otsu filter  <cit> . this results in a binary image of foreground and background voxels. a morphological closing operator using a binary ball structuring element is applied to remove any erroneous holes in the structures. the stem cell channel is next processed with a connected component image filter and any connected components less than  <dig> μm <dig> in volume are discarded. this value can be empirically set by the user prior to running the segmentation algorithm and is dependent only on cell type. removing objects that fall below the smallest expected volume of a given cell type reduces spurious segmentations typically attributed to noise. finally, the convex hull of the foreground voxels for each cell is computed using the open-source qhulls package  <cit> , creating facet and vertex lists for each cell. the convex hulls generated by qhulls are then loaded into direct 3d vertex and index buffers.

the vasculature channel is processed in a similar manner. following the adaptive thresholding, a distance map is computed using the matlab distance map filter. this provides the distance from each voxel to the nearest foreground voxel, and is used in the subsequent analysis to quantify the distance between each cell and its nearest vessel. the results of the stem cell segmentation are next passed to the tracking algorithm to establish temporal correspondences between segmentation results and assign tracking ids to each cell.

tracking
once the cells have been segmented we use an approach called multitemporal association tracking   <cit>  to establish temporal correspondences among segmentation results. mat is a graph-based tracking approach which, for each frame, evaluates a multi-temporal cost function that approximates the bayesian a posteriori association probability between the current set of tracks and all feasible track extensions out to a fixed window size w. in multiple hypothesis tracking, this data association problem is typically solved using bipartite or multidimensional assignment, which is np-hard and requires explicit modeling of imaging specific conditions including occlusions, missed and extraneous detections. mat instead uses a minimum spanning tree approach to solve the data association problem. it relies solely upon typical cell dynamic behavior of smooth motion and is independent of imaging conditions. in addition to the current results tracking stem cells in 3-d, mat has achieved excellent results for hundreds of in vitro  image sequences of mouse adult and embryonic neural stem cells, as well as hematopoietic stem cells and rat retinal progenitor cells  <cit>  and has been applied to tracking high density organelle transport along the axon  <cit> . all of the stem cell movies tracked by mat in 2-d and 3-d were processed with the same implementation.

in order to extend tracks from frame t to t+ <dig>  we denote a partially constructed track terminating at the ith detection in frame t as , and denote the set of all feasible extensions passing through the jth detection in frame t+ <dig> as . the cost of edge cij in the tracking graph is assigned the minimum cost of extending partial track  through the jth detection in the next frame . edges  satisfying  and  for any m≠i and n≠j are called matching edges. if it exists we extend each track  along its matching edge . for any detections in t+ <dig> without a matched incoming edge , we initialize a new track. occlusions, where one cell is visually obscuring another, are handled by allowing tracks that are not extended to be considered in subsequent frames.

for tracking stem cells in the 5-d image sequences we used the same cost function used previously for tracking 2-d phase-contrast imaged nscs  <cit> , with the sole modification of using a z value in the connected-component distance. we define the connected component distance between two detections as
  <dig>  

where rα, rβ are the scaled-voxel coordinates corresponding to the foreground-voxels of the segmentation detections and, respectively. we also define a detection size distance to preserve homogeneous sizes along a given track,
  <dig>  

where |α| is the number of pixels in the foreground connected-component of detection α. for a given path extension we calculate the cost of the extended track , as a weighted sum of the local connected component distances along the detections of ,
  <dig>  

with ρi indicating the ith detection on path . we define |ρ| as the minimum of the track length or window size w. by convention, if i≤ <dig> we use , which allows evaluation of the cost over the full-extended path. this cost reflects the expected behavior of neural stem cells, namely, the cells should not move far  and their size shouldn’t vary greatly in adjacent frames. the multiplicative term discourages shorter tracks which would otherwise have lower cost due to fewer terms. we use a window size w= <dig>  this cost function has proven effective in tracking both 2-d and 3-d cells as shown in the current and previous applications.

lineaging
lineaging identifies parent-daughter relationships among the proliferating cells. our lineaging approach uses the minimum cost path extensions discovered by the mat algorithm and stored in a sparse graph structure during tracking, and is the same algorithm we have previously used for 2-d lineaging  <cit> . cells that constitute viable tracks that appear after the first image frame are assigned parents based on these tracking results. given a track τnewborn, we identify its parent track  as,
  <dig>  

once this has completed for all tracks in the image sequence, the largest  lineage tree is presented to the user. this tree is the first one to be displayed with the expectation that it represents either the most interesting biological lineage or the lineage that needs the greatest number of user edits.

traditional lineage trees communicate informative data such as cell cycle time, number of progeny, apoptosis, symmetry of subtrees, etc. in order to study cells in their niche, the spatial relationships between objects must be measured. figure  <dig> and additional file  <dig> shows a lineage tree that encodes the spatial distance between stem cells and the nearest vasculature. the vertical lines on the lineage tree in the direction of the x-axis have been modified to show the distance between a particular stem cell and its nearest vasculature voxel at each image frame. at the time of division, the lineage tree shows one daughter cell farther from the vascular structure while the other daughter cell maintains its distance. we also represent the angle in which the cells cleave during mitosis by a plane. this cleavage plane allows for qualitative inspection of how cells divide as well as an additional feature for quantitative analysis.figure  <dig> 
mitosis event with lineage tree. the lineage tree in the right panel shows an entire clone starting with the progenitor cell  <dig> which divides into two daughter cells,  <dig> and  <dig>  the y-axis represents time where the x-axis represents the cell’s distance to its closest blood vessel. the left panel shows cell  <dig> in the frame prior to it undergoing mitosis. the center panel shows the frame in which cell  <dig> divides into cells  <dig> and  <dig>  the cleavage plane is represented by a white mesh and shows the angle of cleavage relative to the vessel channel. specimens that are imaged over time typically have fewer channels than static samples. immunofluorescence can be detrimental to natural cell behavior and has to be used sparingly. static images can be stained allowing for a larger number of channels given that the cells are already dead.



user interface
automated analysis of image sequence data showing proliferating cells will inevitably make mistakes. in addition to low snr, these image sequences often contain visual ambiguities, e.g. due to cells dividing, entering or exiting the imaging frame etc., where it may be impossible even for a human domain expert to correctly identify the number of cells in a connected component of foreground voxels from a single time point. these segmentation errors cause tracking and lineaging errors which can then corrupt the ultimate analysis. once all of the automated image analysis algorithms have completed, the data needs to be displayed to the user in such a way that it enables errors to be easily identified and quickly corrected. the approach adopted here is to display the volumetric image sequence data with segmentation and tracking results overlaid in a direct 3d window and the lineage tree in a second matlab interactive figure window. the direct 3d and matlab components run in a single memory process, launched from matlab and communicating with shared memory via the matlab mex interface. this allows for fast prototyping and scripting right in the matlab integrated development environment. this enables programmers to extend the image processing and biologists to access their data directly .

visualization of the volumetric data uses the notion of 3-d textures. the slices of each 3-d texture are projected onto planes which consist of two view aligned triangles. there are  times the maximum pixel dimension of these planes spanning the depth of the image volume. direct 3d maps the image data onto the triangles using a custom shader. this shader incorporates parameters derived from the transfer function sliders in figure  <dig>  the transfer function was inspired by the work of wan et al.  <cit> . currently there are six unique colors that each channel can be assigned. as wan et al. point out, it is difficult to render unique visually separable colors greater than three. when channels are allowed to alpha blend  it becomes even more difficult to differentiate between colors that have been mixed. lever 3-d allows any of the colors to be assigned to a channel and its visibility toggled.figure  <dig> 
3-d image viewer and transfer function windows. the right panel shows the controls to set a transfer function which maps the intensity values of the original images into values and colors in the view window. the left panel shows the original image data without any changes to the transfer function. the middle panel shows an image where the transfer function settings shown in the far right panel have been applied.



the colored sliders for an assigned channel are used to set a polynomial transfer function that will map the original image intensity values to an intensity value that will be colored and displayed in the 3-d window. the darker  slider for a given channel will set where the low values of the original image will be floored to zero. the brightest  slider for a given channel is used to set the threshold in which all larger values are mapped to the maximum value; in this case  <dig> for an 8-bit image. the middle slider changes the curve of the line between the max and min values. the slider on the left edge is used to set the multiplier on the base alpha value for a given channel, allowing a particular channel to be more or less transparent relative to the others. the base alpha for a given pixel is set to the maximum channel intensity at that voxel after the transfer function has been applied. this slider operates on the range of , where the center position equals a multiplier of  <dig>  the last user interface control that pertains to the image data is whether to light the texture or not. the lighting check box turns on and off a global directional light. the image data is lit using the surface normal of each voxel. this normal is approximated directly in the shader by finding the gradient direction for each pixel based on a 3×3× <dig> neighborhood. lighting of this kind gives a more three dimensional feel to the image even when viewed on a two dimensional medium . once the images are set to the user’s liking, they are able to integrate the segmentation results into the 3-d window.

segmentation data is then loaded into video ram to be overlaid onto the image volume to show tracking and lineaging results. the triangle meshes generated by qhulls as the convex hull of each cell’s voxels by the segmentation process are loaded into direct 3d index and vertex buffers  and colors are assigned according to tracking and lineaging results. the segmentation buffer is rendered by a second custom shader that can be toggled between off, wire-frame, and solid. the default renderer draws the texture in its entirety and then draws the segmentation results on top of that. this means that the segmentation triangles will always be drawn on top of the image data. this does not show when segmentation is embedded into another structure; however, it renders at high frame rates. objects obscure one another based solely on their placement in the render loop. depth peeling gives more visual cues that one object is obscured by another. this is accomplished by layering or “peeling” from each structure in a depth sorted order and interlacing them in the render loop. that will draw the objects that are closer to the view after the further objects, obscuring more distant objects. this can slow the rendering of larger volume data down to non-interactive speeds. to mitigate this problem, a chunked depth peeling has been implemented  <cit> . there is a slider on the transfer function window  labeled “peeling”. this allows for  chunks to be peeled, where n is the view aligned voxel count of the volume. this slider can be used to add a level of segmentation integration in the image data as the user’s hardware will allow for and still be interactive. the segmentation results are quite often the reason for errors in the tracking and lineaging and are where the majority of the edits take place. this is why it is important to give as many visual cues as possible to show where the segmentation is wrong. when it is wrong, lever 3-d allows the user to correct it manually.

selecting a cell for visualization or editing in the 3-d volume with the use of two dimensional tools  can be challenging. when the user clicks on the volume, an inverse projection is used to find the intended cell. the inverse projection consists of a ray starting at the view origin passing through the cursor’s position on the projection plane and continuing through the volume space. the cell containing the first triangle that is intersected by this ray is then selected. with this selected cell, the user then can remove all other segmentations from the display to leave emphasis on the cell in question. in this view configuration, the user has the ability to play the sequence and follow the particular cell through the experiment.

once a cell has been selected, the user then can correct the segmentation or tracking results for the cell. for correcting segmentation results, a cell can be split into n cells or can be deleted. to split a cell, we fit a mixture of gaussians  <cit>  on the foreground voxels of the cell. this is effective because a mixture of gaussians decision boundaries favor ellipsoidal shapes that model 3-d nscs more appropriately than k-means, which favor more spherical shapes. after a segmentation has been corrected, the tracking automatically reruns. the segmentation edit provided by the user can be “propagated” by inspecting tracking assignments for the original segmentation as potential automated correction candidates until the newly added segmentation establishes its own track. this is the same inference-based approach to learning from user provided edits used in our previous 2-d stem cell lineaging application  <cit> .

the selection of a particular cell also selects the clone to show in the 2-d lineage tree window. the lineage tree is one of the easiest ways of identifying errors in the automated image analysis routines due to predictable qualities such as regularly spaced mitotic events, cells on the lineage tree existing until they reach the end of the sequence or a frame boundary, etc. the selection of a cell is translated through a mex interface to matlab allowing the selected clone to be toggled. the shared memory mex architecture enables all of the segmentation, tracking, and lineaging results to be accessed directly as matlab data structures and leverages the implementation from our previous 2-d stem cell lineaging application  <cit>  for lineage tree manipulation and display. the mex interface allows bidirectional communication between the matlab and the direct 3d user interfaces allowing the two windows to be tightly coupled and enabling a high throughput approach to validating and correcting the automated image analysis algorithms.

the typical work flow of lever 3-d proceeds as follows. the user with access to the matlab program can launch lever 3-d from inside the matlab development environment. this allows the user to integrate lever 3-d visualization and analysis components with their own scripts. for user that do not have access to matlab, we provide a standalone program. the results from the stand alone program can be exported for analysis in other environments. the first step is to specify the location of the location of the raw data file from the microscope. the image data is then buffered onto the graphics card and is displayed in the image window. if the current dataset has been processed previously , the segmentation results are rendered in the image window. the lineage tree containing the most cells is shown in a second window. if the dataset is unprocessed, the user is able to specify a processing method on a particular channel. now the user can explore the image data and validate the automated processing. viewing of the image data is enhanced by the transfer function window. the transfer function is used to compensate for images with low amounts of fluorescence and uncalibrated monitors. once the user is satisfied with data and the view settings, lever 3-d then can export image, movies, and metrics for external use. additional file  <dig> provides a short video overview of the usage of the lever 3-d application from within the matlab environment. a similar usage scenario is also possible without requiring matlab by using our compiled executable.

RESULTS
the analysis of the image sequence data proceeds as follows. all timing information is based on a windows pc with dual xeon x <dig> processors ,  <dig> gb of ram and an nvidia gtx  <dig> video card with  <dig> gb of video ram. the automated image analysis routines were implemented in c++ using cuda. background noise removal, segmentation, tracking, vascular distance and lineaging are run off-line. this step requires seconds to only a few minutes using cuda compared with up to  <dig> hours of processing time using the open source insight toolkit . these times are dependent on the size and dimensionality of image sequence data. the vast majority of this time is consumed by the background noise removal in itk; in cuda the task of noise removal, segmentation, tracking, and lineaging are more equally spaced. background noise removal is a task that is only run once per image sequence and improves the results of the subsequent automatic segmentation algorithm, especially with suppressing image noise between closely adjacent cells improving the ability of the segmentation algorithm to separate nearby cells.

after the automated image analysis routines complete, the 3-d image data with segmentation and tracking results overlaid are shown in the imaging window  and the lineage tree is shown in a matlab figure window. the active shutter stereoscopic 3-d visualization glasses improve the visualization of the stem cell data, and especially the relationship between stem cells and vasculature. stereoscopic rendering allows the viewer to disambiguate the relative distances between objects compared to a monoscopic viewing where additional visual cues are necessary, such as movement  or lighting.

image sequence data displays at  <dig> frames per second, and manipulation of the 3-d volumetric data is fully interactive even with the 3d stereo vision hardware activated. navigation can be done on either the 3-d window or on the 2-d lineage window. clicking in the lineage tree window causes the frame to advance to the selected time point. the time can also be navigated on the direct 3d window using the mouse wheel, and causes the time indicator on the lineage tree window to update. users can edit the segmentation and tracking in the imaging window by splitting cells with the mouse or by typing tracking numbers directly onto a cell. the user has only had to correct the automated processes 7% of the time on average. most of these errors were due to the cells not separating immediately after mitosis. we recently developed improved techniques for resolving visual ambiguity in 2-d image sequences of proliferating cells by incorporating tracking and lineaging information  <cit> . these methods offer a promising approach to reduce the number of errors in the 3-d segmentation and will be added in future versions. given correct segmentation and the time resolution of the imaging is such that object overlap themselves by at least 50% between frames, there should be no tracking errors  <cit> . the tracking and lineaging algorithms are automatically executed in response to user provided segmentation edits in order to dynamically update the results and also to correct related segmentation errors in future frames. this process typically requires a few seconds to complete, making response to editing operations as well as the 3-d visualization fully interactive.

once the tracking and lineaging for a clone of stem cells has been corrected, the data can be exported to matlab for further analysis. in order to explore the relationship between stem cells and their vascular niche, we used a distance map of the vascular channel. for each stem cell on the clone, we can use this distance map to instantly find the distance between the cell and the nearest blood vessel. in figure  <dig> we plot this distance for the three cells on the lineage tree of the selected clone. cell  <dig> is at a stable distance to the nearest blood vessel. when the cell divides one of the daughter cells moves into contact with the vessel while the second daughter continues on its parent’s trajectory. this is a result of the cleavage plane, formed by the division between the two daughter cells, being oriented acutely toward the vessel. interestingly, the daughter cell that is closer to the vasculature following division, cell  <dig>  has a different pattern of motion than the daughter cell that is not in contact with vasculature. this may be indicative of a different sub type of stem cell or of the cell seeking to re-establish its location in the vascular niche following division. this is the first time, to our knowledge, that this relationship between a clone of mammalian nsc’s and their vascular niche has been visualized and quantified dynamically in live cell and tissue image sequence data.

a key decision in the design of our application was the use of direct 3d rather than opengl to provide 3-d rendering. in general, scientific visualization applications tend to use opengl while gaming applications tend to use direct 3d. this decision was primarily based on the need to incorporate support for nvidia’s 3-d vision to utilize active shutter stereoscopic glasses into our application. using direct 3d enables the use of 3-d vision on less expensive nvidia gtx-class gaming cards, as well as on the more expensive quadro cards. additionally, automatic driver optimized support for stereo separation is available to direct 3d applications only  <cit>  eliminating coding overhead. the 3-d vision stereo glasses can be used from opengl, but that requires the use of the more expensive quadro card and also requires explicit application support for stereo via quad buffering. stereoscopic viewing enables a user to quickly identify and easily correct tracking and lineaging errors in a natural and highly interactive manner. shortcomings of using direct 3d are discussed in the “conclusions” section.

other applications have been developed for 3-d stem cell lineaging, notably by murray et al.  <cit> . they developed an approach that does not however, include capabilities for learning from user supplied edits or 3-d visualization. in later work they incorporated a support vector machine to automatically identify segmentation errors  <cit> , although we have found that segmentation errors occur primarily when there is visual ambiguity in the image data that the human eye is unable to resolve using only a single image frame. the current project is an extension of the lever application designed for 2-d phase contrast stem cell image sequences which uses a human observer to assist in correcting the visual ambiguity inherent in image sequences of live proliferating cells  <cit> . aside from the 3-d rendering, one other difference of the current work is that the segmentation is implemented using cuda rather than matlab or itk. cuda provides a significant performance improvement over matlab and itk, making the 3-d noise and background removal and segmentation algorithms approximately  <dig> times faster.

in the area of biological image sequence data visualization there are a large number of commercial and open source products, as described in a review paper by walter et al.  <cit> . one thing that differentiates our work from the described approaches is the tight integration between the automated image analysis algorithms and the direct 3d visualization. in contrast, most other applications utilize the visualization toolkit  an open source visualization library  <cit> . the 3-d rendering for our application was initially implemented using vtk, however vtk is only compatible with opengl and not with direct 3d. direct 3d has the benefit of using low-cost gaming hardware for stereoscopic visualization which is necessary for efficient validation of 3-d volumes. the open source icy application  <cit>  uses vtk for visualization and provides an extensible user interface for visualizing 2-d and 3-d images and incorporates segmentation and tracking algorithms, as well as editing of results and multiple linked views. our work differs from icy in supporting stem cell lineaging and using inference-based learning to propagate user-provided edits. a related application for visualizing multichannel fluorescence microscopy data for biological applications was presented by wan et al.  <cit> . their application provided more control over the viewing of the volumetric data including a user controllable 2-d transfer function for setting the rendering properties of the volumetric data. in contrast, the approach presented here uses the automatic image analysis algorithms to set the parameters on the visualization transfer function with the intention that our application will be used for quickly validating and correcting the clonal tracking and lineaging results prior to subsequent statistical and algorithmic information theoretic analyses.

there are a number of papers describing tools for visualizing and analyzing 3-d image sequence data . taken together, these show the power of combining image analysis and visualization tools. as amat et al.  <cit>  note, extending such techniques to “3d+t is not straight forward.” the approach described here is novel in the ability to visualize 5-d image sequence data, utilizing automated tracking and lineaging algorithms to analyze the time course of the dynamic behaviors for all of the cells in a developing clone and incorporating user-provided edits to automatically correct related errors. this provides unprecedented functionality for working with complex live cell and tissue image sequence data and ensures that subsequent analysis starts with 100% corrected data.

visualization comparison between 2-d projection and stereoscopic 3-d rendering is difficult to quantify. confocal microscopes are able to capture true three-dimensional data and there are many tools that make two-dimensional projections of this data, such as that of schmid et al.  <cit> , and peng et al.  <cit> . however, 2-d projection relies on visual cues to convey the relative depth between objects as explained by wan et al.  <cit> . using a stereoscopic projection allows our binocular vision to convey this information more precisely  <cit> . even without depth peeling, lighting, or other cues necessary with monoscopic projection, the user can perceive depth between objects. we incorporate both depth peeling and lighting to make the scene look more natural. with the perceived depth from stereoscopic visualization, validation can be more accurate and efficient. stereoscopic projection can also help earlier in the processing pipeline by expediting discovery. interactions between structures in the svz are not fully known. direct stereoscopic observation facilitates the identification of regions to quantify and determine their significance. this discovery phase optimizes the processing pipeline by identifying more precisely what models the analysis phase can emulate or exploit. we believe that there is enough qualitative benefit to the stereoscopic projection to base a large part of visualization decisions upon it.

CONCLUSIONS
we have developed a new application called lever 3-d for validating and correcting the automated segmentation, tracking and lineaging of stem cells from 5-d time lapse image sequence data. the segmentation and tracking results are overlaid on the image data in the 3-d rendering window. the lineage tree for the currently selected clone is shown in a matlab 2-d window. navigation and editing can take place on either window; the matlab mex interface is used to communicate between the c++, cuda, directx, and matlab components. the ability to visualize the image data simultaneously with segmentation, tracking, and lineaging makes it possible to quickly identify and easily correct any errors in the automatic analysis. direct 3d is used for 3-d rendering, providing active shutter stereoscopic visualization and interactive rendering on low-cost gaming hardware. we use the open-source bioformats tool to read the image data directly from the microscope and cuda kernels to implement the background removal and segmentation algorithms. the open-source mat tracking algorithm developed previously for 2-d stem cell image sequences has been enhanced to work with 5-d stem cell data.

one drawback to our use of direct 3d to enable active shutter stereoscopic is that our application is only available on the windows operating system. the use of opengl would have required explicit application support for active shutter stereoscopic visualization and also the use of the more expensive quadro-class video cards together with additional ram for quad buffering, but would have allowed for true cross-platform support. another drawback of direct 3d is the lack of a web integration module such as webgl, which makes it difficult to implement a web client for demonstrating the capabilities of the system or for implementing distributed applications for validating and correcting the 5-d image sequence data. we believe that these shortcomings are offset by the improved visualization available for low-cost from directx, with active shutter stereoscopic visualization automatically in the display driver using nvidia gtx class display cards.

our goal is to develop an open source solution that allows biologists to process, validate and analyze 5-d stem cell image sequence data in the laboratory, increasing the pace of discovery by combining accurate unsupervised image analysis together with intuitive visualization and validation tools. the current version of the source code as well as video tutorials are available at . we are including executables along with a complete 5-d dataset to enable readers to run the interface directly. data collection has begun for a number of biological experiments that will utilize lever 3-d in a high throughput capacity to quantify dynamic behaviors and niche associations for clones of nscs. the application described here represents a first step in disseminating widely applicable software tools for the analysis of proliferating cells and vasculature from 5-d image sequence data.

availability of supporting data
source code and test image data is available on our website http://bioimage.coe.drexel.edu in the software section.

electronic supplementary material
additional file 1:
video showing multi-resolution visualization of the  <dig> channel 3-d montage from figure
3
. starting with the full resolution image a complete rotation of the volume is rendered using  <dig> intermediate frames. following each revolution the width and height of the field of view are reduced by a factor of two. the white rectangle shows the location of the next field of view that will be rendered. the process is repeated five times, ultimately showing the image data at full resolution with no scaling. 

 additional file 2:
video showing analysis results together with image data from 5-d confocal microscopy showing neural progenitors undergoing mitosis. the left panel shows the segmentation and tracking results overlaid on the image data. the right panel shows the lineage tree encoded with division time combined with the distance from each neural progenitor to the nearest vasculature at each image frame. the color of the segmentation on the left panel corresponds to the track shown on the lineage tree. the cleavage plane shows the orientation of the daughter cells at the time of separation relative to the surrounding vasculature. the ability to interactively explore complex spatiotemporal relationships in 5-d image data is an important prerequisite to quantitative analysis. 

 additional file 3:
a video demonstrating the use of lever 3-d from a matlab session. the control window provides access to the transfer functions with parameters controlling visualization. the image window shows the microscopy data together with the segmentation and tracking results. as the transfer functions are manipulated, the image display is updated immediately. the control window also provides access to the denoising and segmentation algorithms. all the data structures and functionality is accessible from matlab scripts. stereoscopic 3-d requires a monitor and video card that supports nvidia’s 3-d vision. 

 abbreviations
nscneural stem cells

aitpdalgorithmic information theoretic prediction and discovery

svzsubventricular zone

snrsignal-to-noise ratio

matmultitemporal association tracking.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

ew implemented algorithms, designed the user interface, and integrated the original lever program into the new imaging paradigm. mw was instrumental in the design of the shader paradigm, designing the mex interface, and provided underling theory to the registration algorithm. cb and yw prepared the tissue samples and captured the subsequent images of both the time lapse and the montage. ek and yw prepared the tissue samples for the time lapse, sg captured the subsequent timelapse movies. st was the principle investigator and provided oversight in the biological laboratory. ew and ac wrote the paper. all authors have read and approved the final manuscript.

portions of this research were supported by drexel university, by grant number r01ns <dig> from the national institute of neurological disorders and stroke, and by the national institute on aging of the national institutes of health under award number r01ag <dig>  the content is solely the responsibility of the authors and does not necessarily represent the official views of drexel or the national institutes of health.
