BACKGROUND
life science ontologies
ontologies have become increasingly important in life sciences  <cit> . they consist of a set of concepts denoted by terms describing and structuring a domain of interest. concepts are interconnected by different relationship types such as is_a and part_of relationships. a heavily used ontology is the gene ontology   <cit>  providing sub-ontologies for molecular functions , biological processes  and cellular components . a wide range of life science ontologies is made available by the obo  foundry  <cit> . the ontologies cover various life science disciplines, such as anatomy, health, biochemistry or phenotype. other biomedical ontologies consider clinical and disease-related issues . due to their different focus and usage the developed ontologies vary in their size and complexity. for example, some obo ontologies consist of only a few hundred concepts while others, such as the go possess up to several ten thousand concepts.

there are different kinds of applications of life science ontologies. they are used for the annotation of biological objects, such as gene products and proteins. particularly, biological objects are associated  with ontology concepts to consistently and semantically describe their properties, for example the molecular functions and biological processes in which proteins are involved. for instance, the human protein tubulin-specific chaperone d  is associated with go concepts go: <dig>  go: <dig>  go: <dig>  thereby expressing that the protein is involved in the biological process beta-tubulin folding , is associated with the molecular function chaperone binding  and that it acts in the cellular component microtubule . such annotations can be specified manually  or derived automatically . there are different data sources providing go annotations for various species, examples are goa  <cit> , swiss-prot  <cit> , ensembl  <cit> , mgd  <cit>  or agbase  <cit> . in a wide range of applications ontologies facilitate the structuring of and the focused search within large data sources. for instance, the gopubmed application  <cit>  makes use of mesh  <cit>  and go to classify millions of articles of pubmed  <cit> . users can find relevant articles significantly faster by navigating and filtering along the applied ontologies. another ontology application is the standardization of data exchange formats in heterogeneous environments by providing a common and explicit background. for example, the cabig project  <cit>  utilizes the nci thesaurus as a foundation for defining metadata and sharing data objects in their grid environment. metadata stored in the central cadsr repository are semantically described by referring to concepts of the thesaurus. hence, ontology concepts are associated to metadata compared to the more common annotation of data objects .

ontology evolution
usually, life science ontologies are explicitly modeled by ontology developers and scientists. the evolution of these ontologies is based on specific community agreements  and influenced by advances in the domain knowledge to be included in the ontologies. new research results/insights and new agreements may lead to additions or revisions of ontology elements. as a result ontologies evolve continuously and a sequence of ontology versions is provided where each version represents the state of an ontology at a specific point in time. the different versions are the basis of our change analysis. for instance, our analysis showed that in the last five years the number of concepts in go and nci thesaurus more than doubled . while most changes are additions of new concepts, many concepts have been deleted or declared obsolete . setting an "obsolete status" for concepts is a common alternative to physically deleting a concept of an ontology. both deleted and obsolete concepts result in a similar revision of the information represented in an ontology and may indicate a reduced stability of the ontology which negatively affects ontology usage. in particular, annotations referring to deleted or obsolete concepts are no longer valid and may have to be deleted or adapted. other ontology changes such as additions also influence ontology usage, e.g., since they may trigger the addition of new annotations. hence, frequent changes may impact the results of annotation analysis studies and indicate a need to rerun an analysis. thus, there is a need to make ontology users aware of the evolution of an ontology including the quantity and quality of changes that occurred. since not all parts of an ontology evolve at the same rate, it is useful to support the look-up of the change history for specific ontology concepts of interest, for example to see older concept names. this information may be used by curators when creating manual annotations. it would also be valuable to semi-automatically migrate out-dated annotations to newer ontology versions instead of performing a time-consuming manual adaptation.

there has been little research and support on ontology evolution and its impact for the life sciences. several tools support change management and versioning of ontologies, e.g., the protégé tool  <cit> , the kaon infrastructure  <cit> , or obo edit  <cit>  focusing on the obo ontology file format. however, these approaches do not consider the impact of ontology changes on related data such as annotated biological objects or analysis results. information on changes of current ontologies  is primarily limited to mailing lists and reports by the ontology distributors. for instance, the go consortium summarizes changes on the gene ontology in a monthly report which is available on their website . mailing lists notify interested users about changes and modifications of obo ontologies at . these approaches textually describe changes but cannot directly be used for automatic change processing such as an automatic migration of ontology-related data.

theoretical aspects of ontology evolution have been studied for semantic web languages such as rdf  <cit>  and owl  <cit> . stojanovic et al. formalize the process of ontology evolution  <cit>  and propose strategies to unambiguously handle critical changes during evolution  <cit> . klein investigates versioning of ontologies in a framework  <cit> . noy investigates change operations describing the evolution  between ontology versions  <cit> . oliver et al.  <cit>  present a concept model, typical change operations and a change-documentation model for change management of controlled medical terminologies.

there have been some studies to quantify the evolution of specific life science ontologies and terminologies. for instance, ceusters has studied the evolution of concepts in snomed ct  <cit> . simple change statistics such as the evolution of number of concepts, relationships and paths have been determined for the gene ontology  <cit> . in our previous work  <cit> , we propose a generic evolution model and measures to study the evolution of ontologies, annotations and ontology-mappings. this framework serves as the basis for the onex system presented in this paper.

online ontology tools
there are several online tools providing interfaces to query and search life science ontologies and related data. the well-known online browsers amigo  <cit>  and quickgo  <cit>  allow to query the gene ontology including ontology concepts and associated gene products. results are presented utilizing the graph structure of go. users can filter results and download them for further processing. other online portals tend to integrate multiple ontologies into a single browser that offers a common query interface for all ontologies. for instance, the ebi ontology lookup service   <cit>  is a web-based application allowing searching and browsing of approx.  <dig> life science ontologies within a central portal. the terminology browser of the nci  <cit>  offers a common interface to ontologies such as the nci thesaurus, gene ontology and snomed ct. however, the functionality of these browsers is limited to browsing and searching in one ontology version, mostly the latest one. historical information about former ontology versions and changes on ontology concepts are rarely provided. for example, the nci terminology browser merely provides the creation and modification dates for concepts.

there exist only few online tools or web services for comparing versions of an ontology. the ows framework presented in  <cit>  proposes an architecture for ontology access and manipulation through web services. a diff web service takes as input two versions of an owl ontology and returns their structural diff . another web service for comparison of ontology versions is described in  <cit> . the service accepts a pair of ontologies written in owl and returns a numeric value which represents their semantic difference. to the best of our knowledge gochase  <cit>  is the only online tool providing more detailed historical information about ontology concepts. however, the tool is specific to the gene ontology and is no longer maintained. modification histories are based on go accession numbers and the tool finds incorrect hyperlinks to go concepts. newer go concepts introduced since  <dig> are not captured. in contrast to gochase, we focus on exploring and evaluating quantitative changes in many life science ontologies. our system is not limited to one specific ontology but extensible so that further ontologies can be added in the future.

presenting onex
as mentioned in the previous sections, there is currently no online tool available for users to analyze the evolution of ontologies represented in different ontology versions. ontology browsers do not support history tracking but at most provide creation and modification dates of concepts. to address these shortcomings we designed and implemented the onex toolkit to serve the community, especially bioinformaticians and biologists working with life science ontologies and ontology-related data.

the rest of the paper is organized as follows: the implementation section presents an overview of the onex system architecture. next we discuss the import and versioning of ontologies within the system. the onex web application and its usage workflows are described and illustrated with sample application scenarios. the results section briefly describes the current state of the application. we finally conclude and outline possibilities for future work.

implementation
overview
the onex system is based on a three-tier architecture displayed in figure  <dig>  the backend of the system consists of a data server  for storage and management of numerous ontology versions and corresponding statistics. import modules allow the integration of ontology versions in various formats. a middleware component implemented in java provides a common api to applications or visualization components. the middleware utilizes core functions such as query methods which use sql calls to access the ontology version repository. the web application itself is platform-independent  and is based on the google web toolkit  <cit>  as well as the ext gwt library  <cit>  for building rich internet applications. the modular architecture could also support additional applications besides the online tool presented herein. in particular, web services could be added for programmatic access to the change analysis primitives as well as the ontology versions.

ontology import and versioning
the import function utilizes the public archives of the ontology distributors, for example the cvs repositories of the obo ontologies or the archive of gene ontology. each ontology version integrated in onex is described by a version number and a release timestamp. a new ontology version is integrated by comparing elements of the new version with the latest available version in the repository. elements include  concepts,  relationships between concepts, and  attributes, such as the obsolete status or alternative synonyms of a concept.

the comparison is based on our evolution model proposed in  <cit>  which distinguishes between the following change types:

• add : addition of an element

• del : deletion of an element

• value change: value of an element has changed

change detection between two succeeding ontology versions is based on the comparison of accession numbers. an added element only exists in the new version. in contrast, a deleted element is available in the old version however not in the new version. a value change is detected if an element is available in both versions having different values, for example the name of a concept has been modified. changes to the values of the obsolete status are especially important as they indicate whether an element has become obsolete.

the differences between two succeeding ontology versions are used to update the version repository of onex. each element in the repository is assigned a start timestamp  and an end timestamp describing the time period within which it is valid. an unspecified end timestamp indicates that an element is still valid. in case of an addition a new element is inserted with a start timestamp of its first occurrence. a deletion results in the adaptation of an element's end timestamp to the date of its last valid occurrence. in case of changes the old entries are assigned according end timestamps; furthermore new entries are created. inspection of the obsolete attribute allows to detect concepts that have become obsolete. another important change type are concept fusions which can be determined by studying alternative synonyms of concepts.

the example in figure  <dig> illustrates selected changes that occurred during the version change of go cellular components between may and june  <dig> resulting in adaptations of repository elements . go: <dig> – desmotuble central rod  has been deleted. thus, the end timestamps of this concept as well as its attributes and relationships are set to 2007- <dig>  in contrast, the concept go: <dig> – nucleoplasmic tho complex with attributes  and relationships  was added to the ontology. as a result the system creates new entries with a start timestamp of 2007- <dig>  the name of go: <dig> has changed from p-aminobenzoate synthetase complex to aminodeoxychorismate synthase complex, hence the end timestamp of the corresponding attribute entry is set to 2007- <dig> and a new entry with start timestamp 2007- <dig> is inserted.

the repository is updated periodically with automatic routines which load and integrate the latest ontology versions from the distributor sites. while only few ontology distributors  release versions every day we currently consider at most one version per month . of course, all changes that occurred between two releases are captured by comparing the monthly ontology versions. the repository is not limited to a particular ontology format such as obo, but we can customize the import to integrate ontologies of various formats .

web application
onex allows the exploration of ontology evolution by providing three interactive workflows:  the general quantitative evolution analysis,  the concept-based analysis and  the annotation migration workflow. in the following these workflows are explained in detail.

quantitative analysis
the quantitative evolution analysis provides an overview about the evolution of the ontologies supported by onex. an overview table comparatively summarizes change statistics and the development of the ontology sizes. for a selected ontology, trend charts illustrate the evolution history. different tables display the changes that occurred between ontology versions, in particular added, marked obsolete, fused and deleted concepts. users can thus first compare the overall development of different ontologies and then focus on a specific ontology of interest. they can identify phases of ontology stability or instability to estimate the potential impact of ontology changes on annotations and analysis results of interest. moreover, they can quickly find new or changed ontology concepts.

an application of the first workflow is illustrated in the example scenario of figure  <dig> focusing on changes in the go sub-ontology biological processes . the overview panel  shows basic statistics of all available ontologies. for instance, it is indicated that go bp consists of approx.  <dig>  concepts interconnected by  <dig>  relationships in the march  <dig> version as opposed to only  <dig>  concepts and no relationships in the first available version of december  <dig>  the trend chart for go bp illustrates a steady increase in the number of both concepts and relationships. it can be observed that relationships have been introduced in april  <dig> and that a significant increase occurred between july  <dig> and december  <dig>  users can then navigate to evolution details to see average evolution statistics and quantitative changes between the captured ontology versions. for instance, the go bp sub-ontology experienced approx.  <dig> concept additions per month while on average about  <dig> concepts are modified per month, i.e., have become obsolete or were deleted. the exact number of added, deleted, fused and obsolete marked concepts is displayed in a table that can be sorted according to different criteria such as the number of affected concepts. one can see that most additions occurred between the versions of september and november  <dig> . if a user is interested in a specific version change, she may navigate to a further panel displaying the affected concepts per change type. as an example, in the july  <dig> version of go bp five concepts have become obsolete, e.g., go: <dig>  and go: <dig> . as a next step the user may navigate to details about the affected concepts by clicking on the accession number .

concept-based analysis
the concept-based evolution analysis workflow supports a detailed change analysis for specific concepts of interest. this workflow should also be relevant to curators of annotations to inspect the history of a specific concept to notice former changes such as re-definitions or new synonyms which may be useful for the manual annotation process. the workflow starts with a search for the relevant concepts, either by accession number or a keyword search across all or selected ontologies. the workflow can also be accessed from the quantitative evolution analysis workflow by selecting a concept of interest. the system provides current information about the selected concepts as well as the concept history in tabular form.

the scenario in figure  <dig> illustrates the concept-based evolution analysis for blood coagulation concepts across all ontologies. we first use a string-based keyword search for the expression blood coagulation  delivering search results, i.e., matching terms in the selected ontologies. in the example we obtain  <dig> matches for the go bp sub-ontology and further matches in two other ontologies. the user may now select a matched term of interest to inspect its history in more detail . the resulting concept evolution panel has two parts. the first part provides information about the concept in the latest version  and some historical statistics . the second part presents the history of the concept in tabular form. the table indicates the initial status  of a concept at creation time and lists all concept changes such as additions, modifications or deletions of attribute values and relationships. for instance, the blood coagulation concept has been introduced in december  <dig> and was available in all versions until now. parent relationships to go: <dig> , go: <dig>  and go: <dig>  were added between  <dig> and  <dig>  other changes affected the synonyms, for example the expression blood clotting was temporarily deleted and blood coagulation factor activity was only present between  <dig> and  <dig> 

annotation migration component
finally, onex allows the migration of annotations after the release of a new ontology version. out-dated annotations can be detected and automatically migrated to a newer  ontology version. the updated annotations may then be used to rerun an analysis that was originally performed for older ontology versions. the annotations to be updated are provided by an annotation file. the migration component accepts csv annotation formats such as the goa format. the migration workflow is based on the analysis of differences between the ontology version utilized in the user annotation file and the new ontology version. the adaptation of the annotations relies on the detected change types.

the example in figure  <dig> uses a data set with pig gene product associations from agbase  <cit>  using the gene ontology version of may 2008; the annotations should be migrated to the current go version. the migration input form allows users to specify the parameters for migrating their annotations, in particular the date of the ontologies utilized in the annotations, the new date of ontologies, information about the format and the annotations themselves .

after submitting the data to the system, the changed concepts and affected annotations are reported based on the computation of changes between the relevant ontology versions. we focus on three change types that affect the annotations: deleted concepts, fused concepts and concepts marked as obsolete. a result table displays the observed ontology changes and the number of affected annotations. now the user has different possibilities to migrate the out-dated annotations to the new ontology version. in case of deletions the corresponding annotations are deleted as well. annotations to obsolete concepts can be deleted or updated. as some ontology distributors provide links to alternative concepts after setting them to obsolete, an annotation deletion can often be avoided. we thus integrated mappings between obsolete and alternative concepts in our repository. for instance, go offers such mappings on their website  and some obo ontologies specify alternatives within term descriptions or comments. in case of multiple migration alternatives the user can decide to which ontology concept affected annotations should be migrated. for concepts to be fused to another concept one may migrate the annotations to the fused concept or delete the annotations. users can set migration options for a complete change type or can set individual specifications. the example of the pig gene product annotations of may  <dig> possesses one fused and four obsolete ontology concepts resulting in  <dig> affected annotations. for instance, the discovered obsolete concept go: <dig>  has two migration alternatives  between which the user can choose. finally, the specified migration settings are applied to migrate the out-dated annotations to the new ontology version. the migrated annotations results are provided in an output panel and can be downloaded for further processing.

RESULTS
as of april  <dig> onex integrates about  <dig> versions of  <dig> life science ontologies from different ontology sources, such as gene ontology and obo foundry dating back to  <dig>  the version management presented in the implementation section supports an efficient storage of a large amount of ontology versions. currently, the repository includes approx.  <dig>  concepts,  <dig>  relationship and  <dig> , <dig> attribute entries which occur in different ontology versions. to avoid duplicate storage of unchanged ontology parts we only store differences between ontology versions after the first version. a specific ontology version can be retrieved by merely providing the timestamp. onex is not limited to a particular ontology format and can thus flexibly include further ontologies in the future.

the web application contains help pages describing the workflows step-by-step for novice users. sample data is provided to follow the workflows and see how the system works. onex is running since june  <dig> and has been tested by five different life science research groups at the university of leipzig. moreover, the system is also utilized within the german-wide medigrid community  <cit> .

CONCLUSIONS
onex provides an interactive and user-friendly access to valuable information about evolutionary changes in life science ontologies. users are able to detect changes that occurred in an ontology version they utilize or plan to apply. for instance, one can estimate how intensive the analysis results are affected by ontology evolution and how frequent rerunning an analysis may be advised. onex is available at  with currently approx.  <dig> versions of  <dig> life science ontologies.

three workflows of the system address different analysis aspects: the comparative quantitative analysis of different life science ontologies, the detailed inspection of single ontology concept histories and the semi-automatic migration support for out-dated analysis results .

for future work, we plan to extend the system by additional change types and the identification of stable ontology regions. we further plan to establish a "traffic-light" visualization for ontologies to display their stability or instability in an intuitive manner. finally, the three-tier architecture can be extended by a web service interface to allow a software-based access to the stored ontology versions as well as the change analysis routines.

availability and requirements
• project name: onex – ontology evolution explorer

• project home page: 

• operating system: platform independent

• programming language: java

• any restrictions to use by non-academics: none

authors' contributions
mh has designed and implemented the web application. the middleware and the data server including ontology versioning, import functionalities and further components were realized by mh and tk. ag participated in the gui component design, the description of the help pages as well as testing the system. er provided higher-level supervision and coordinated the project. all authors contributed to, read and approved the final manuscript.

