BACKGROUND
the theory of stochastic markov processes has many applications in theoretical physics, chemistry and biology  <cit> . if a system allows transitions in time between various discrete states, we may model the system in the general language of networks and assign dynamics properties to the nodes and edges of such networks  <cit> . in early attempts to understand the dynamics of stochastic networks the term ’random walk’ was introduced  <cit> , which describes the displacement of a point on a network after a sequence of random moves. equally important to measuring displacement is the quantity called mean first-passage time , which is defined as the time needed to reach the final state by a statistical ensemble of network walkers  <cit> . according to the alternative definition, this time is equivalent to the reciprocal steady-state flux resulting in a network in which a single walker returns instantly to the initial state every time it reaches the final state  <cit> .

mfpts have been successfully used in a variety of biochemical studies, for example: the study of protein folding times  <cit> , protein helix unfolding rates under mechanical forces  <cit> , studies of dna-based nanoscale walkers called molecular spiders  <cit> , studies of polymer translocation  <cit> , calcium spark activation times  <cit> , metastatic cancer progression  <cit> , and the analysis of temperature and detection-wavelength dependence of the electron transfer rates in the initial stages of photosynthesis  <cit> .

in general, time for random walks upon a network may be discrete or continuous. the ratrav tool works with discrete time. to our best knowledge, there is currently no open source software available which is able to perform mfpts calculations on a discrete time and space network of any arbitrary size. in this article we present ratrav, an open source software tool. first, we introduce the formulation of mfpt calculations and provide details on the implementation and usage of ratrav . then we focus on two biological applications and demonstrate how various biological questions may be answered using the ratrav software tool .

methods
mean first-passage times
when considering the markov processes, mfpt is defined as the average time  for a statistical sample of random walks starting in some initial state on a network of states to reach for the first time the desired final state or any state from a collection of final states. in formal terms, the stochastic continuous time markov process realized on a given network of states is described by a system of coupled master equations

  p˙l=∑l′wll′pl′−wl′lpl 

which jointly describe the time variation of the probabilities pl of the hypothetical random walker being in some state l at time t, where the over-dot denotes a time derivative. in eq.  <dig>  wl′l is the transition probability per unit time along the edge from state  l to l′, which in general needs not satisfy the detailed balance condition. furthermore, the transition probabilities wl′l from a given state l to its nearest neighbours l′ need not sum up to unity. on establishing a discrete time t = nτ <dig>  where n is the number of steps measured in some unit of time τ <dig>  the differential eq.  <dig> is to be recast as the difference master equation

  pl=pl+∑l′ull′pl′−ul′lpl, 

in which, as opposed to eq.  <dig>  the transition probabilities ul′l=τ0wl′l from the node l to the node l′ sum up to unity:

  ∑l′ul′l=τ0∑l′wl′l= <dig>  

let us note that in general the above sum includes also the waiting probabilities ull on a given node l before a random walker performs a jump to a neighboring node l′. they have efficient applications in many biological and physical problems. for example, a protein-protein complex residing in the bound conformational state while performing its function and before proceeding to the dissociation state, or the components of the complex becoming trapped in a local minimum of the free energy landscape before finding their optimal docked, and fully functional, conformational state. moroever, the long-living metastable states are detected in various excited atomic or molecular systems before they relax to the lower-lying energy states.

in developing the ratrav code we have ensured that the definitions for the input data are as general as possible. therefore, we have made a distinction between the exit probability from a node and the transition time to its nearest neighbour. more generally, on defining the various local times τl′l, individually for each transition along a link with the probability ul′l, we have the alternative expression for the transition probabilities per unit time in eq. 1:

  wl′l=ul′l∑l′τl′lul′l. 

in the particular case for all τl′l=τ <dig> we reconstruct the transition probabilities that fulfill the conditions in eq.  <dig>  the local times can be related to the reaction coordinates, for example, when employing molecular dynamics simulations to move between well defined protein conformational states, which might be measured on the order of microseconds.

by virtue of its generality, eq.  <dig> has been directly implemented only in the hill combinatorial technique  <cit> . nevertheless, as regards monte carlo simulations, it ensures a determination of the same unit of time for the both methods. the description and benchmark of the combinatorial hill and stochastic monte carlo methods on basic networks  may be found in our previous paper  <cit> . in comparison to the previous results, newly developed c++ code is provided, which allows for the definition of multiple final states, different transition probabilities and local times along network edges. moreover, the networks can be connected or disconnected structures represented as basic graphs, as directed graphs, as multigraphs and as multi-component graphs or their mutual mixtures. in order to compare mfpts generated by these two methods we have run a series of tests on a number of network topologies studied previously  <cit> : hypercubes of various dimensions, sierpinski gaskets of various orders, bethe lattices with various number of shells and random tree-like networks; with equal and randomly chosen probabilities, with identical and different local transition times, and with single and multiple final states. for most of the cases, the difference between mfpts calculated from the hill and monte carlo methods, calculated as 100% , was smaller than  <dig> % when using  <dig> walkers.

both methods mentioned above have their benefits and drawbacks. for instance, the advantage of hill’s over the monte carlo method is its speed and precision of calculation when the network is an acyclic graph, or includes a low number of cycles. on the other hand, for particularly knotted networks, the monte carlo method is the logical choice, providing reliable mfpt estimations in a reasonable turnaround time. the best strategy to follow using the monte carlo method is to start with a lower number of walkers; even if the obtained results are not particularly accurate, this helps to estimate the running time with the desired higher number of walkers and avoids the situations where calculations are indicated to be intractable in a finite time. some indication of running times may be found in tab.  <dig> of  <cit> .

implementation of the monte carlo simulation method
the monte carlo method relies on the simulation of random walks on a network of interest, driven by a pseudorandom number generator. random numbers were generated in the monte carlo method using the boost c++ libraries components  – mersenne twister mt <dig> random number generator  and a uniform_real_distribution function.

in our implementation , there is an outer for loop over the number of simulations and an inner for loop over the number of walkers in each simulation. each walker is placed in an initial state  and its first passage time set to  <dig>  for each iteration, a random number is generated. exit probabilities from each node sum up to one but do not have to be equal, thus forming a ranges of transition probabilities to each neighbour. each transition is chosen as an effect of casting a random number. after a walker undergoes a transition it is placed in a new state  and its first passage time is increased by the weight of edge  it passed. the walker performs its random walk until it reaches the final state or one state from the set of final states. when all random walkers finish their walk, the mean first-passage time is calculated based on first passage times for each walker. if the user chooses to perform more simulations with the given number of walkers, mean first-passage times are averaged further and standard deviation of this mean over the number of simulations, with the given number of walkers, is calculated. please notice that if the number of walkers is large enough , mfpts obtained from each simulation will be similar. however, because of the random movement of walkers, the first passage time of a single walker cannot be predicted based on e.g. first passage time of another walker.

in terms of efficiency of the calculations, because the current step of a walker determines its next step, a single random walk cannot be parallelized. however, the calculation of mean first-passage time may be parallelized, because the walkers in the statistical ensemble are independent. we have shown that using parallel processing methods , the efficiency may be increased over 90% using more than  <dig> cpus or by using a few cores on a single cpu  <cit> . however, to keep the ratrav software as portable as possible, we haven’t implemented mpi parallel processing methods in the current version of the software.

implementation of the combinatorial hill method
the hill method relies on the idea that instead of an ensemble of walkers one can consider only a single walker that after traversing a network of states  appears instantly at the starting node every time it reaches the target node. because this procedure is repeated many times the hill method shows that the mfpt τ between these two nodes corresponds to the reciprocal one-way stationary flux j, τ = j− <dig>  resulting in a modified network in which the transitions to the target node have been redirected to the starting node. the steady-state flux has the following form

  j=∑l′wll′pl′st, 

where wll′ stands for the transition probabilities per unit time from a set of l′ nodes adjacent to the target node l and occupied by the walker with probabilities pl′st. we can calculate these probabilities solving the system of the stationary master equations in eq.  <dig> for p˙l= <dig>  or equivalently using the hill algorithm  <cit>  that we have now implemented in the ratrav tool. the algorithm proceeds according to the following steps: 

 <dig>  determine two nodes on the original network  in order to calculate the mfpt between them.

 <dig>  modify this graph through the identification of the initial node with the final node, combined with elimination of the latter.

 <dig>  construct for such a modified graph g the complete set of its subgraphs, called maximal trees t. the maximal tree is a connected graph which contains all nodes of the graph g and no cycles.

 <dig>  make each possible maximal tree t to be a directed graph. it is obtained from t by directing all its edges  towards the node l. each directed tree tα contributes a weight wl as the product of transition probabilities per unit time wij from the node j to the node i.

 <dig>  calculate the sum of these weights, wl=∑alltαwl, which run over all maximal trees tα directed to a given node l.

then, the steady-state occupation probability of the node l in the network  g becomes

 plst=wl∑nwn, 

where the expression in the denominator obeys a summation over all sum of weights generated for the graph g to ensure that ∑npnst= <dig>  the construction of these probabilities is fundamental for the calculation of the stationary flux in eq.  <dig> and finally the mfpt. to this end we have applied the algorithm which for a given set of elements  generates its subset in lexicographical order.

input file and control keywords
the user is required to prepare a text file with the structure of a given network. upon completion of the computations, an output file is produced with computed mfpts along with, in case of the monte carlo method, their estimated errors. the user needs to choose between the hill’s and monte carlo methods, between using basic  or advanced , between calculating all the mfpts or only a selection, and whether to define multiple final states.

let us start with a very simple square network for which the input file in ratrav format takes the following form:  

keyword node is followed by the node number . subsequent numbers are the identities of neighbouring nodes and their order does not matter. in the case of performing a monte carlo simulation there is the requirement for walk and simu keywords . entering simu > <dig>  the user will receive error estimates for each mfpt calculation . to establish waiting probabilities on, for example the 9th node, the node  <dig> input line may be defined as:  

i.e. the node number is repeated. this means that the node labelled as  <dig> in a graph connects directly to the node labelled as  <dig> and to itself twice, so the transition probability from node  <dig> to node  <dig> is 1/ <dig>  whereas the waiting probability on the node  <dig> is 2/ <dig>  if the user chooses to use hill’s algorithm, walk and simu keywords won’t be used even if present in the input file.

in advanced file format the user can define transition probabilities and weights of edges. to minimize rounding errors, in addition to the decimal format, it is possible to define the transition probabilities and weight of edges as common fractions. the same square can be defined as follows :  

with transition probabilities equal to 1/ <dig> and weights of edges equal to  <dig> , this format is equivalent to the basic file format. however, in advanced file format it is possible to use different combinations of probabilities and weights. requirements are that the probabilities in each line have to sum up to  <dig> , and in the case of hill’s method, at least one local timescale  must be different from  <dig>  the last condition does not apply to the monte carlo method. thus, on account of some specific problem, the advanced input file may take the following form:  

in the above please note the different values of weights possible for two-way transitions between the same pair of nodes, for example,  <dig> and  <dig>  we assume in general that a passage in either direction along a given edge does not need to correspond to the same weight or transition probability.

optional use of the mfpt keyword allows definition of selected mfpts the user wants to be computed, e.g.: mfpt  <dig>  <dig> means the mfpt between states  <dig> and  <dig> will be calculated, mfpt  <dig>  <dig>  <dig> means the mfpt between initial state  <dig> and two final states will be calculated – either state  <dig> or  <dig> has to be reached .

the info keyword allows the user to pass any comments which will be copied to the output files.

compilation and usage
there is a makefile attached so under linux it is sufficient to simply call make. however, two variables have to be set before doing so:  

the first variable is used to choose the compiler, e.g. icc for intel c compiler or g++ for gnu c compiler. the monte carlo method uses boost c++ libraries  which have to be downloaded and installed. the second variable is used to set the path to the boost c++ libraries so the user must change path_to_boost to the local path. alternatively the ratrav tool may be compiled without the makefile, e.g. with icc, as follows:  

the general usage is as follows:  

the five parameters have the following meaning: input is a name of the input text file which defines the network; output is a name of the output text file generated by ratrav; the method parameter that should be set equal to  <dig> to use the monte carlo method or  <dig> for hill’s method; the input_format parameter should be set equal to  <dig> for a basic input file or  <dig> for an advanced input file; the mode parameter should be set equal to  <dig> when all mpfts are to be calculated or  <dig> when selected mfpts are to be calculated .

for example: to use the monte carlo method, with a basic input file and for all mfpts to be calculated, the user runs ratrav input.txt output.txt  <dig>  <dig> 0; to use hill’s method, with an advanced input file and for selected mfpts to be calculated, the user runs ratrav input.txt output.txt  <dig>  <dig>  <dig> 

a basic example
to better explain the functionalities of the ratrav tool, we present in figure  <dig> a simple irregular network with nine nodes  and nine edges . it has one cycle ; nodes have different exit probabilities ull′ , and local time scales τll′ . for some nodes there are waiting probabilities ; sometimes the transition probability from an edge node is set equal to one, instead of a waiting probability with an associated waiting time . both variables ull′ and τll′ may be symmetric or asymmetric. the weight of an edge is the time required for transition between states, whereas the waiting time is the lifetime of the molecule in a particular state. these times can be related to experimental values, for example, the half-life of a complex can be calculated from its dissociation rate koff, τ1/2= ln/koff <cit> .

the network presented in figure  <dig>  is represented in ratrav format as follows :  

please note that node numbers must be written in increasing order, but the neighbours of each node may be written in any order. if we add the following lines to the input file:  

the output using hill’s method  is:  

and with the monte carlo method  is:  

for the presented network, the mfpt between s and e <dig> is calculated to be  <dig> , between s and e <dig> to be  <dig> , and between s and e <dig> or e <dig>  to be  <dig> . two observations can be made: for the submitted network hill’s method is faster and gives exact results; using the monte carlo method, with  <dig> walkers, gives similar results. in case of reducing the number of walkers to  <dig> but increasing the number of simulations to 10:  

the following results with monte carlo can be obtained:  

in this case the program also returns the standard deviation for each mfpt; comparing each mfpt, and its associated error, with the equivalent but exact result from hill’s method, we may notice that one standard deviation may be insufficient to denote each mfpt pair to match; however, within three standard deviations each mfpt pair should match. this may not always be the case for more complicated networks, since if the number of walkers in each simulation is too low, every node may not be visited by a walker from the ensemble .

important remarks
 <dig>  when using the hill method the final state must be different from the initial state. however, when using the monte carlo method one can identify such states and obtain the mfpt, which is in fact a return time to the origin.

 <dig>  for the hill method the number of final states cannot exceed n- <dig>  where n is the total number of states . however, for the monte carlo method one can define such a configuration of states, e.g. mfpt  <dig>  <dig>  <dig>  <dig> for a square.

 <dig>  by choosing the monte carlo method the user is able to define ultrafast transitions between all or selected states, for which the local passage time along an edge between such states is set equal to zero. for the hill method at least one local time scale must be different from zero.

 <dig>  a network does not have to be compact. if there is no path between states, ratrav will return mfpt as ’infinity ’.

RESULTS
in this section we provide two applications for which the use of the ratrav tool dedicated to mfpt calculations provides meaningful results. each subsection includes a theoretical introduction to the problem, followed by a guide for the reader as to how to construct the appropriate ratrav input files, and finally a discussion of the ratrav results. the files accompanying the examples are available in additional file  <dig> 

analysis of conformational pathways within a protein-protein binding funnel
in the molecular machinery of life proteins are responsible for a diverse array of functions. however, the great majority of biological functions are mediated not by isolated proteins but by their interactions. in addition to predicting the correct geometry of protein-protein complexes  from their unbound components, for which a number of fully automated servers now exist, see for example the swarmdock server  <cit>  or the cluspro server  <cit> , of equal importance is to study the dynamics of binding, i.e. how the binding partners, upon complex formation, sample the binding funnel.

studying the topological properties of protein-protein binding funnels will enable us to understand how to change the dynamics of protein-protein association in a controlled way. the importance of being able to do this relates to rational drug design, where funnel sampling becomes particularly important when designing a series of similar protein ligands , or blocking peptides, and ascertaining if they are likely to be more effective in inhibiting a particular receptor protein-binding site more than the wild-type protein ligand.

automatic generation of protein-protein conformational space networks , for any protein receptor/ligand pair, was recently incorporated into our docking tool, the swarmdock server  <cit> . for this study, we chose the vitamin d-binding protein/actin complex   <cit> , which was previously studied by us in terms of conformational occupation probabilities and their usefulness to filter away non-funnel like protein-protein energy structures, thus improving the ranking of the correct docking poses  <cit> . the above study, based on state occupancies, was useful in distinguishing between true positive and false positive binding funnels. in the example described below we focus on the properties of the true positive binding funnel and calculate mean first-passage times between distinct conformational states within the funnel, i.e. we are interested in finding the favourable transition path from the top to the bottom of the binding funnel.

the initial network of  <dig> conformational states, generated by the swarmdock server, is depicted in figure  <dig>  the assigned quality of each state, that is its similarity with the final bound complex state, was based in accordance to the capri  criteria  <cit> , on three quantities: fraction of native contacts , interface root mean square deviation  and ligand root mean square deviation . these values are used to classify the conformations as incorrect ), acceptable  or  and )), medium quality  or  and )) or high quality ), relative to the conformation of the native bound complex .

similarly to the previous study  <cit> , the transition probability for states with ligand rmsd above 6Å was set to zero. for the remaining states, transition probabilities were assigned based on energy value : if the energy of the state in question was higher than the neighbouring state, the exit probability was set to  <dig> , otherwise it was set to exp, where Δe is the difference in the energy between the two conformations. the exit probabilities for each node were normalized. in the present study, the weights of each edges are set equal to  <dig>  , and if the transition probability is smaller than 10− <dig> for a particular edge it is removed. pdb files , the rmsd matrix file , the mfpt matrix file  and characteristics of the conformational states file  are deposited in additional file  <dig>  here we are interested in finding the favourable path between incorrect conformational states  and the best state found by swarmdock . the state identified as being the closest to the native complex state, based upon the capri criteria described above, is m <dig> .

the ratrav tool was run on this network  with  <dig> random walkers. to speed up the computations we parallelized the calculations by creating a separate input file for each pair of states and by using the mfpt keyword . we ran the calculations on our computational cluster  in parallel for  <dig> mfpts  for a maximum walltime of  <dig> days. a total of  <dig> mfpts were reported to be not accessible; links between nodes with transition probabilities smaller than 10− <dig>  of the remaining  <dig> mfpts a total of  <dig> were reported back by ratrav, the remainder,  <dig> were still in the process of being computed and assumed to be essentially infinite; that is a substantial number of the network walkers were stuck in dead ends.

using the initial network , we assigned weights to edges based on calculated mfpts; we removed links if mfpts haven’t been calculated. on this mfpt weighted network  we ran the dijkstra algorithm  <cit>  to find the favourable trajectories  between conformational states on the edge of the binding funnel  and the medium quality structure near the bottom of the funnel .

the dijkstra algorithm identified the following shortest paths: 9→20→22→ <dig>  and 30→20→22→ <dig> .

we analyzed the trajectory in terms of changes in interface and ligand rmsd, number of native and non-native contacts and energy of each conformational state. we summarize the calculations in table  <dig> and the values for all states are present in additional file  <dig> .

node id
interface rmsd , ligand rmsd , number of native contacts , number of non-native contacts  and opuspsp energy values are reported. the first four values were computed comparing with the native complex structure.

the final state is accessed slightly faster from the edge state i <dig> which has fnat = 25% than the edge state i <dig> with the slightly lower fnat = 22%. the difference in paths is only due to the mfpt for the first transition, to the state a <dig>  interestingly, the initial transitions  are down an energy gradient, at least in terms of the opus-psp potential used to score protein-protein interactions. however, the next two transitions, a20→m22→m <dig> are movements to slightly increased energy states, indicating that the most time efficient pathways do not necessarily follow a decreasing energy gradient. moreover, in terms of mfpts, the transition between states a <dig> and m <dig>  which looks in figure  <dig> to be a bottleneck , is not the limiting transition when comparing mfpts for the first transition  or the last transition in the pathway .

in conclusion, by exploring mfpts between conformational states within a protein-protein binding funnel, dynamic information can be obtained that may provide important complementary, and sometimes counter intuitive, information on the funnel’s physical properties, which may facilitate rational design of competitive protein ligand inhibitors.

free energy transduction between two coupled enzymatic reactions
as a second example of the utility of ratrav, we describe here a method that enables a user to determine the non-equilibrium stationary fluxes in a system of interest on the basis of mfpt calculations. to this end we consider the action of a protein enzyme that converts the free energy between two coupled chemical reactions  <cit> , <cit> . our primary task is to calculate the degree of coupling between the free energy-donating reaction and the free energy-accepting one, the parameter that characterizes the efficacy of this chemo-chemical machine.

let us consider the shaded box shown in figure  <dig> which represents the network of conformational substates of a protein macromolecule that catalyses simultaneously two, in general, reversible reactions: the free energy-donating reaction r <dig> ⇔ p <dig> and the free energy-accepting reaction r <dig> ⇔ p <dig>  a model structure of such a network consisting of two hundred nodes is depicted in figure  <dig>  a set of distinguished transition states, called the gates, underscored by enlarged black nodes, corresponds directly to the system of labels used in figure  <dig>  for the sake of clarity, we have limited our calculations to a rather simple network of states displaying a tree-like topology, but much more complex networks of states can also be taken into account. in this context, the actual network can be thought of as a spanning tree, a loopless subnetwork consisting of edges with the highest transition probabilities per unit time between conformational substates.

the steady-state reaction fluxes

  ji≡/ <dig> 

 determine by definition the effective reaction rates, where  <dig> is the total concentration of the enzyme molecule and the over-dot means a derivative with respect to time. the corresponding chemical forces

  βai=lnki,ki≡eqeq, 

drive both chemical reactions. the symbols enclosed in the square brackets denote the molar concentrations of the chemical compounds ri and pi in the steady state  or in the equilibrium state . here, β = − <dig>  where kb is the boltzmann constant and t denotes the absolute temperature.

the protein enzyme acts as a mesoscopic molecular machine, i.e. a system that enables two subsystems to perform work on one another, with the efficiency given by the ratio

  η=−j2a2/j1a <dig>  

of the output power j2a <dig> to the input power j1a <dig>  the minus sign in eq.  <dig> arises from the fact that the free energy transduction can be realized only if the positive flux j <dig> >  <dig> corresponds to the negative chemical force a <dig> <  <dig> or vice versa  <cit> . this contradicts the second law of thermodynamics according to which the flux as well as the force should be of the same sign. however, if both reactions are coupled by the protein enzyme and proceed simultaneously in a common cycle, then the first reaction can change the direction of the second reaction. consequently, the free energy dissipation is minimized at the expense of the free energy conversion, which can be realised with higher efficacy in the system. the effectiveness of this process is characterised by a degree of coupling

  ε=j2/j <dig>  

in the following, our main objective is to give some instructive hints of how to calculate a degree of coupling for the two chemical reactions controlled and gated by the network of conformational transitions depicted in figure  <dig>  this network forms the content of the grey box, representing the enzyme-substrate complex m, shown schematically in figure  <dig>  we assume that the stochastic dynamics of conformational and chemical transitions within the enzymatic protein is jointly described by the system of master equations . for the isolated network  we assume the transition probabilities per unit time from the conformational substate l to its kl directly adjacent substates l′ to be

  wl′l=p/kl. 

p determines the probability of transition to any conformational state neighbouring l. following the detailed balance principle

  wll′pl′eq=wl′lpleq 

the equilibrium occupation probability of the substate  l

  pleq=kl∑l′kl′, 

where the summation runs over all nodes composing a network of conformational substates.

the non-zero thermodynamic forces, eqs.  <dig>  drive the system out of equilibrium breaking simultaneously the detailed balance condition for external and in general reversible transitions between gates , which for l =  <dig>  are characterised by the external transition times τl . these parameters can be compared to the longest mfpt within a network of states , which usually refers to the passage time, counted in the random walker steps, between the most distant pair of nodes. together with the equilibrium occupation probabilities in eq.  <dig> they determine the additional transition probabilities between the gates in the forward direction 

  v+l=pτlpl′′eq, 

and in the backward direction 

  v−l=pe−βalτlpl′eq. 

the factor e−βal breaks the detailed balance symmetry. here, the index l =  <dig>  and the appropriate selection of primes and double primes is explained in figure  <dig> 

it follows from eq.  <dig> and  <dig> that the probability p we introduced in eq.  <dig> determines the characteristic unit of time which establishes an elementary time scale for the computer machine step. thus, it should be firmly emphasized that the adequate determination of this quantity has a decisive meaning for the computational purpose at hand. to find p we select one gate l for which the external transition probability vnm is the highest. then, assuming that at this gate the sum p + vnm =  <dig>  we obtain the appropriate expression for p:

  p=11+− <dig>  

consequently, in the case of the remaining nodes the sum of internal and possibly external transition probabilities must be complemented to unity, which means that additionally the non-zero waiting probabilities have to be taken into account on these states.

for the network of states depicted in figure  <dig>  the longest mfpt, τmax, counted in random walk steps without external transitions, equals  <dig> ; the transition state with the lowest occupation probability corresponds to the gate l = 1′′ , for which p1′′eq=1/ <dig>  where n =  <dig> is the number of nodes in the network). without loss of generality we consider in what follows only the case for τ <dig> = τ <dig>  selecting τ <dig> =  <dig>  which is far below the maximal value τmax =  <dig>  we enforce the chemical reactions to be completely controlled by the internal dynamics of conformational transitions for which p ≈  <dig>  in eq.  <dig>  moreover, assuming βa <dig> =  <dig> we require that the free energy-donating reaction proceeds sufficiently far from equilibrium in the forward direction 1′′ → 1′, while becoming almost negligible in the backward direction 1′ → 1′′. in turn, we put βa <dig> =  <dig> to provide the detailed balance symmetry for the free energy-accepting reaction. such a choice of parameters τl and al for l =  <dig>  assures the highest transition probability from the node l = 1′′.

we are now in a position to determine the steady-state reaction fluxes for both chemical transitions. the net fluxes are decomposed into one-way fluxes

  j1=j+1−j− <dig> 

  j2=j+2−j− <dig>  

where the signs plus and minus refer to the forward and the backward directions, respectively. to find them we must perform four independent calculations. following the hill reasoning  <cit>  described in methods, instead of the one-way steady state fluxes, it is enough to calculate the mfpts between correctly identified nodes in the modified network of states. the schemes illustrated in figure  <dig>  explain in a pictorial form the direct relation between the mfpt and a one-way stationary flux j±l. according to the hill algorithm


  j+l=1τ 

  j−l=1τ, 

where ∗ is the additional target node connected to the network in a position where the intermediate nodes  l′′ for j+l, or l′ for j−l are localised . the algorithm allowing a calculation of the one-way stationary flux between two directly connected states  in the arbitrary network of states proceeds in the following steps: 

 <dig>  create a network  with connections  between nodes in accordance with the ratrav input file format .

 <dig>  select two nodes connected directly by the link. in figure 5a it is the reversible external transition between the node 1′ and the node 1′′ characterized by the exit probabilities v± <dig> 

 <dig>  choose a direction in which the flux will be calculated. in figure 5a the flux j+ <dig> is assumed to be in the counterclockwise direction.

 <dig>  redirect one of the two  transitions along a link to the additional node added to the original network. in figure 5a the transition from the node 1′′ to the node 1′ has been redirected to the new node labeled there by the star.

 <dig>  calculate the mfpt between the initial node  and the final node .

 <dig>  the inverse of this mfpt determines the one-way stationary flux.

interestingly, the mfpts in eqs.  <dig> and  <dig> turn out to be split into two parts

  τ=τ+v+lpl′′st− <dig> 

  τ=τ+v−lpl′st− <dig>  

. here, the superscript ‘st’ indicates the stationary occupation probabilities of the selected gates which can be also computed by the ratrav tool. a method of how to calculate all quantities, for example, on the r.h.s of eq.  <dig> for l =  <dig> is explained graphically in figure  <dig>  the relations in eqs.  <dig> and  <dig> offer a very useful way in which all component mfpts from states l′ or l′′ to ∗ and hence the stationary fluxes in eqs.  <dig> and  <dig> can be calculated. moreover, they are of particular importance since they enable us to identify scales of two characteristic time contributions, distinguishing the conformational dynamics within the protein enzyme  and between two coupled chemical reactions each of which is gated by a single transition substate . in this second case both components, v±lp±lst, can be thought of as the counterparts of the reciprocal equilibrium rate constants supposed by the transition state theory.

input data used to compute all directed reaction fluxes in the network of states shown in figure  <dig>  accompanied by the outputs, are to be found in additional file  <dig>  the mfpts required for a determination of the steady-state fluxes in eqs.  <dig> and  <dig> and obtained by using of the hill algorithm are as follows: τ =  <dig> , τ =  <dig> , τ =  <dig>  and τ =  <dig> , whereas those obtained by application of the monte carlo simulations for walk= <dig> and simu= <dig> are: τ =  <dig> , τ =  <dig> , τ =  <dig>  and τ =  <dig> . therefore, combining these numerical results, we conclude from eqs.  <dig>   <dig>   <dig>   <dig> and  <dig>  that the degree of coupling is

 () ε= <dig> ,following the hill method, andε≈ <dig> ,following the monte carlo method. 

it is worth emphasizing that both numbers are very close to unity and this result requires sensible interpretation. let us recall that the degree of coupling is defined as the ratio of the free energy-accepting reaction flux and the free energy-donating reaction flux. we have assumed that both reactions are controlled  and simultaneously gated by the dynamics of stochastic transitions within a network of conformational states. the system of connections in this network is not arbitrary but displays the scale-free topology and fractality. the fractality results mainly from the effective repulsion between the most connected nodes, so called hubs, which tend to link to small degree nodes and not to each other. two main hubs are clearly visible in figure  <dig>  their existence enables the most distant separation between the pairs of gates  for the output and input reactions. as a consequence, the mfpts between the gates shown in figure  <dig> become comparable and hence the degree of coupling is very close to unity. we have examined that all other configurations of the gates decreases the value of this parameter. there is still an open question for scientists of how to construct the effective networks of states for the real-world protein machines to predict and explain their basic functions. we hope, at least to some extent, that our software contributes to manage this task.

CONCLUSIONS
there is a wide range of problems related to the theory of stochastic processes where the mean first-passage time quantity may be applied to describe the dynamics of the networked system. ratrav is a software tool for calculating mfpts on any arbitrary network or graph representing a substrate for markovian processes, defined by the users in accordance with their requirements. mfpts may be calculated between a pair of states or between an initial state and multiple final states. moreover, exit probabilities from the nodes as well as local time scales along the edges may be assigned by the user. a choice between two mfpt calculation methods is made available: a stochastic monte carlo method and the combinatorial hill method. to highlight the usefulness of the ratrav tool, we presented in this article two examples of biochemical processes where the calculation of mfpts plays an important role. for the first example , due to the large number of cycles within the network, the monte carlo method was applied. for the second, a tree-like network of conformational states for an enzyme, the hill algorithm was applied in order to return results much faster and without any approximations. to our best knowledge, ratrav is not only the first open source computational package for computing mfpts, but as well the first computational tool to be made available where the local transition times of the network edges have been successfully introduced into hill’s method.

we are aware that there is a substantial gap between physics and biology in terms of describing the network properties such as the proper sampling of states, assignment of transition probabilities and assignment of weights of edges  in line with a chosen reaction coordinate. however, with further development in various fields, we believe that ratrav, as a general tool, can be applied to a wide group of problems, where a biosystem or a process can be represented as a complex network.

availability and requirements
project name: ratravproject home page: http://sourceforge.net/projects/ratravoperating system: platform independentprogramming language: c++other requirements: boost c++ libraries license: gnu general public license, version  <dig>  for ratrav. boost software license  for boost c++ libraries.

the package contains full source code, binary version of ratrav and manual.

competing interests
the authors declare that they have no conflict of interest.

authors’ contributions
mt and pc designed, wrote and tested the ratrav c++ code. mt and pc prepared the examples and generated the data. mt, pc and pb wrote the manuscript. all authors discussed the results and approved the final version of the manuscript.

authors’ information
the authors wish it to be known that, in their opinion, the first two authors should be regarded as joint first authors.

supplementary material
additional file 1
ratrav examples file. file containing ratrav input and output data for the two case studies presented.

click here for file

 acknowledgements
we are grateful to raphael chaleil for his useful comments on software development. this work was supported by cancer research uk and the polish ministry of science and higher education .
