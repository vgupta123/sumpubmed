BACKGROUND
a fundamental problem in modern genomics is to taxonomically or functionally classify dna sequences derived from environmental sampling . many metagenomic studies are essentially community ecology studies, which seek to characterize communities statically or dynamically in terms of composition, structure, abundance, demography, or succession, and sometimes with consideration of other biotic or abiotic factors. consequently many of these characterizations, and inferences derived from them, are sensitive to the accuracy and precision of taxonomic assignment of the metagenomic sequences involved. these sequences are often in the form of unassembled reads whose average length in a sample may vary by an order of magnitude depending on the sequencing technology used . to classify these sequences of unknown origin, the basic strategy employed is to compare them to annotated sequences that reside in public databases . on the basis of such comparisons, one may be able to say with some certainty that a particular sequence belongs to a specific taxon . sometimes the query sequence does not have a close relative in the database, which is problematic for all methods.

the classification of unlabeled sequences using previously labeled sequences is supervised learning; this approach is the focus of our evaluation. however, it is important to mention that unsupervised learning techniques exist for “binning” sequences in an environmental sample , i.e., clustering groups of similar sequences together. these techniques are useful when one desires a high-level characterization of their sample . binning may also be used to improve subsequent supervised classification of groups of sequences .

it is important to note that some supervised learning methods will only classify sequences that contain “marker genes”. marker genes are ideally present in all organisms, and have a relatively high mutation rate that produces significant variation between species. the use of marker genes to classify organisms is commonly known as dna barcoding. the 16s rrna gene has been used to greatest effect for this purpose in the microbial world . for animals, the mitochondrial coi gene is popular  <cit> , and for plants the chloroplast genes rbcl and matk have been used  <cit> . other strategies have been proposed, such as the use of protein-coding genes that are universal, occur only once per genome , and are rarely horizontally transferred  <cit> . marker gene databases and their constitutive multiple alignments and phylogenies are usually carefully curated, so taxonomic and functional assignments based on marker genes are likely to show gains in both accuracy and speed over methods that analyze input sequences less discriminately. however, if the sequencing was not specially targeted  <cit> , reads that contain marker genes may only account for a small percentage of a metagenomic sample.

general approaches to sequence classification
we have identified three main supervised learning approaches that compare query sequences to database sequences for the purpose of assigning a taxon label: sequence similarity search , sequence composition methods , and phylogenetic methods . most software programs use only one of these approaches, but some use a combination of two approaches. .

programs that primarily utilize sequence similarity search include carma  <cit> , facs  <cit> , jmotu/taxonerator  <cit> , marta  <cit> , megan  <cit> , metaphyler  <cit> , mg-rast  <cit> , mtr  <cit> , and sort-items  <cit> . most of these programs employ blast , and several incorporate some version of the lowest-common ancestor  algorithm first pioneered by megan. after blast, the second most common method aligns a query sequence to a reference sequence represented by a profile hidden markov model ; usually a pfam domain. alignment-based methods display great accuracy, even for short query sequences, but suffer from two general shortcomings: a) since the reference databases are very large, it can take a long time to search each query sequence against them; and b), if the query sequence is not represented in the database, as could often be the case, assignment accuracy may suffer more so than when using other methods.

programs that primarily utilize sequence composition models include naive bayes classifier   <cit> , phylopythia  <cit> , phymmbl  <cit> , raiphy  <cit> , rdp  <cit> , scimm  <cit> , sphinx  <cit> , and tacoa  <cit> . methods for building sequence models often make use of interpolated markov models , naive bayesian classifiers, and k-means/k-nearest-neighbor algorithms. there is some overhead to computing sequence models of various organisms, but once models are built, query sequence classification is generally faster than with alignment-based methods. accuracy, however, may still be able to be improved — this is why phymmbl incorporates similarity search . as a result, phymmbl achieves greater accuracy than either phymm or blast alone. finally, it was widely reported that the initial version of phylopythia performed poorly for query sequences less than  <dig> bp in length  <cit> ; few current next-generation sequencing  technologies produce reads of that length. however, composition-based methods are now perfectly capable of classifying short query sequences. for example, nbc obtained over 90% accuracy for  <dig> bp reads with 5-fold cross-validation  <cit> .

programs that primarily utilize phylogenetic methods include epa  <cit> , fasttree  <cit> , and pplacer  <cit> . phylogenetic methods attempt to “place” a query sequence on a phylogenetic tree according to a model of evolution using maximum likelihood , bayesian methods, or other methods such as neighbor-joining . some programs compute the length of the inserted branch, which represents the amount the query sequence has evolved relative to the rest of the tree; most programs, however, are simply concerned with the placement  of the sequence. programs assign a specific taxon  to a “placed” sequence using different algorithms, but they all make use of the basic observation that an inserted branch will be divergent from an internal node representing a species or higher rank. since phylogenetic methods require a multiple alignment, and a fixed topology , the first step in most phylogenetic workflows is to add a query sequence containing a marker gene to a reference alignment . hence, most phylogenetic methods require the use of marker genes. one that does not, however, is sap  <cit> , in which the first step is to construct a multiple alignment from the results of a blast search. phylogenetic methods assume that using computationally intensive evolutionary models will produce gains in accuracy, and their inherent use of tree-based data structures makes taxon assignment to higher ranks as well as lower ones very straightforward. the additional algorithmic complexity means that phylogenetic workflows currently require substantial computing power to analyze large metagenomic samples, however; this is true even for methods that only use marker genes. large-scale analyses will gradually become more practical as more efficient algorithms are developed, computational resources become more powerful, and through use of parallelization.

additional considerations
one important consideration for any sequence classification method is whether the method offers a measure of assignment confidence. such an uncertainty measure is extremely useful; assignments whose confidence score is below a certain threshold can be disregarded, for example. phylogenetic methods tend to provide confidence of assignment through use of bootstrap or posterior probabilities, or other techniques. alignment-based methods generally do not provide a confidence estimate.

another consideration is the availability and ease of use of the program — whether it is a command line program, has a graphical user interface , is available as a web service, and so on. if the program is to be downloaded and installed, one must consider how much processing power, memory, and disk the program will need to analyze a particular data set. some of these needs will prohibit local execution of the program for large data sets, perhaps instead necessitating use of a compute cluster. if there is a web service available for the program, one needs to find out how much computational power is allocated to a single user, and thus whether the service can be used in practice to analyze entire metagenomes. a further consideration is whether the program continues to be actively developed and maintained after a paper is published and the code is initially released. actively maintained programs are likely to be improved as a result of feedback from users, and may eventually become “standard” tools used by the community.

program capability analysis
we identified  <dig> programs for sequence classification that fall into one of the three primary analysis categories we described: sequence similarity or alignment-based , sequence composition model-based , and phylogenetic-based . our list is not exhaustive, but we do include a broad cross section of widely used and interesting programs in our comparison.

the attributes and capabilities of each program are given in table  <dig>  for each program, we report the general analysis method it uses, and more detailed analysis characteristics, as applicable; whether the program requires specific genes as input; and the type of interface to the program. for a given program attribute , it is possible for a program to have multiple values. we defined a distance function and created a neighbor-joining tree that clusters the programs based on their similar attributes .

program performance evaluation
when publishing their method, researchers typically compare their program to one or more existing programs. presumably they attempt to choose programs that are most similar to their own, but we find that this is not always the case. perhaps the researcher is simply not aware of all the tools in existence, or does not have the time to evaluate them all, so they pick a couple of popular or well-known tools. in contrast, we focused our comparisons on a single category at a time, which we believe generates more interesting and generally useful comparisons between conceptually similar programs.

we evaluated the performance of sequence classification programs in two main areas: 

 <dig>  assignment accuracy — we tested assignment accuracy using data sets from the publications associated with each program, and analyzed each data set with as many programs from the corresponding category as possible. specifically, we measured assignment sensitivity , precision , the overall fraction of reads that were assigned, and the taxonomic rank at which assignments were made. .

 <dig>  resource requirements  — we monitored the resources consumed by each program during the analysis of each data set. some programs have web services available that we used in program evaluation, which made it more difficult to precisely measure how much of each resource was consumed.

RESULTS
within each category, we selected a subset of programs to evaluate. programs were selected on the basis of several factors: whether they are actively maintained, how popular they are, how recently they were published, whether they have been superseded by another program, and so on. from this standpoint, we have attempted to make the comparisons in each category as interesting and useful to the current active community of researchers as possible.

alignment
in the alignment category, we selected five programs to evaluate: carma , facs , megan , mg-rast , and metaphyler . based on our experience using these programs, we note the following: 

 <dig>  facs requires bloom filters to be built for the reference sequences that are to be searched, which is infeasible to do for large databases  and protein  databases). therefore, we were unable to analyze the majority of data sets with facs.

 <dig>  we ran blastx with default parameters against the nr database, and used this as input to carma and megan. blast accounted for  <dig> % and  <dig> % of the total runtime for these workflows, respectively .

 <dig>  mg-rast has several different analysis options. we used the non-redundant multi-source annotation database, or m5nr, and their implementation of an lca algorithm for taxon assignment.

 <dig>  mg-rast requires input sequences to contain protein-encoding genes , and assigns each of these to a particular taxon. not all query sequences in a random shotgun sample will contain a peg, so mg-rast typically classifies fewer overall sequences than other methods. in addition, it is possible for a single input sequence read to contain multiple pegs. in order to be consistent with other methods that make classifications on a read-by-read basis, we map the peg assignments back the read they came from, and make fractional read assignments to a particular taxon as necessary. .

 <dig>  metaphyler requires input sequences to contain certain “marker genes” , an approach pioneered by amphora. very few query sequences in a random shotgun sample will contain marker genes, so metaphyler typically classifies fewer overall sequences than other methods; many fewer than even mg-rast, for example.

measurements of sensitivity, precision, and resource consumption on four simulated data sets.

1analysis performed on a  <dig>  ghz intel core i <dig> macbook pro running mac os x  <dig> . <dig> with  <dig> gb  <dig> mhz ddr <dig> ram.

2blast v <dig> . <dig> analysis performed using ∼ <dig> opteron  <dig> he  cores; each node has 48g ram.

3analysis performed on an amd opteron  <dig>  sun fire v40z with  <dig> gb ram.

4used web service; recorded value is number of minutes to receive results, not actual cpu runtime.

5used web service; memory usage was unable to be determined.

four data sets were selected for analysis with each of the alignment-based programs. percentage of sequence classified, sensitivity, precision, and resource consumption are shown for the alignment-based programs in table  <dig>  what follows is a short description of each data set, and a summary of the results of analysis with each program.

facs  <dig> bp high complexity  <dig> metagenomic data set
this data set, which consists of 105sequences of average length  <dig> bp, originally used by stranneheim et al.  <cit> , was downloaded from the facs web site. the sequences are from  <dig> bacterial genomes, three viral genomes, and two human chromosomes. the distribution of sequences is as follows:  <dig> % eukaryota,  <dig> % bacteria, and  <dig> % viruses.

it was reported that facs assigned sequences to species with  <dig> % sensitivity and 100% specificity using a k-mer size of  <dig> and a match cutoff of 35% sequence similarity  <cit> . however, we encountered technical difficulties using the facs software and were unable to reproduce the results reported in the facs paper.

distribution of sequence assignments produced by the alignment-based programs is shown in table  <dig> 

the actual distribution of sequences compared to the distribution inferred by the alignment-based programs.

metaphyler  <dig> bp simulated metagenomic data set
this data set, which consists of  <dig>  sequences of length  <dig> bp, originally used by liu et al.  <cit> , was acquired from the authors. the sequences are simulated reads from  <dig> phylogenetic marker genes from bacterial genomes. the distribution of sequences into bacterial phyla is as follows: proteobacteria,  <dig> %; firmicutes,  <dig> %; actinobacteria,  <dig> %; bacteroidetes,  <dig> %; cyanobacteria,  <dig> %; tenericutes,  <dig> %; spirochaetes,  <dig> %; chlamydiae,  <dig> %; thermotogae,  <dig> %; chlorobi,  <dig> %.

although a comparison of metaphyler, megan, carma, and phymmbl is already given for this data set  <cit> , we decided to redo these analyses in a way that is consistent with our standard procedures . additionally, we restricted our analyses to the phylum rank.

distribution of sequence assignments produced by the alignment-based programs is shown in table  <dig> 

the actual distribution of sequences compared to the distribution inferred by the alignment-based programs.

carma  <dig> bp simulated  <dig> metagenomic data set
this data set, which consists of  <dig>  sequences of average length  <dig> bp, originally used by gerlach and stoye  <cit> , was acquired from the webcarma web site. the sequences are simulated  <dig> reads from  <dig> bacterial genomes. the distribution of sequences into bacterial phyla is as follows: proteobacteria,  <dig> %; firmicutes,  <dig> %; cyanobacteria,  <dig> %; actinobacteria,  <dig> %; chlamydiae,  <dig> %.

distribution of sequence assignments produced by the alignment-based programs is shown in table  <dig> 

the actual distribution of sequences compared to the distribution inferred by the alignment-based programs.

phylopythia  <dig> bp simmc data set
this data set, which consists of  <dig>  sequences of average length  <dig> bp, originally used by patil et al.  <cit> , was downloaded from the fames  <cit>  web site. all classifications were performed at the genus rank.

discussion
from the alignment-based analyses, we can make several observations. 

 <dig>  the blast step completely dominates the runtime for alignment-based methods. it can use a fair amount of disk space in the process , and can use a considerable amount of ram if analyzing a large number of sequences on a single node.

 <dig>  metaphyler is the one exception to the previous observation; its blast step and subsequent algorithmic steps run extremely quickly, but it generally only classifies a small fraction of reads in a typical sample. also, table  <dig> shows that metaphyler uses a large amount of ram ; this is in part due to a memory leak that has been fixed in a subsequent release .

 <dig>  the mg-rast web service showed a large variance in time required to receive results, although there is at least a weak correlation with data set size and analysis parameters. with a web service, it is difficult to know what other variables affect time to results , and currently the mg-rast server does not provide an estimate of how long a given submission will take.

 <dig>  for the facs high complexity data set, none of the programs produced a taxonomic distribution that was remotely close to the known distribution ; all greatly underestimated the amount of eukaryotic dna. the reason for this is unclear.

 <dig>  for the metaphyler  <dig> bp data set, all four alignment programs recapitulated the known distribution of bacterial phyla extremely well . all had near-perfect precision, and sensitivity was greater than 80% for 3/ <dig> of the programs . mg-rast only had sensitivity of 30%, but this was still enough assignments to accurately estimate the taxonomic distribution .

 <dig>  for the carma  <dig> bp data set, carma, megan, and mg-rast recapitulated the known distribution of bacterial phyla extremely well . metaphyler was slightly worse, but still quite good considering that it only classified  <dig> % of sequences.

 <dig>  for the phylopythia  <dig> bp data set, all programs except metaphyler displayed comparable sensitivity and precision .

 <dig>  methods that use marker genes  are generally less sensitive than methods that do not use marker genes , but typically run faster . all methods displayed comparable overall precision; carma and mg-rast were the most precise .

composition
in the composition category, we selected four programs to evaluate: naive bayes classifier , phylopythias , phymmbl , and raiphy . based on our experience using these programs, we note the following: 

 <dig>  all four programs need to be “trained”  before they can be used to classify unknown query sequences. training times for all four programs can be found in table  <dig> 

 <dig>  nbc, phylopythias, and phymmbl were all trained on the latest microbial genomes in the refseq  <cit>  database.

 <dig>  the database we used for raiphy is the one currently available on the raiphy web site, which was built from refseq in  <dig>  we built our own database using the latest version of refseq and retrained raiphy with this updated database, but found that classification accuracy was drastically lower. we have been in contact with the developers about the problem, but so far no satisfactory explanation has been found.

 <dig>  technical limitations having to do with memory usage or program bugs required us to break up our fasta input files into multiple, smaller input files to use with phylopythias and phymmbl.

 <dig>  nbc produces raw output as hundreds of large matrices, in which the rows represent genomes and the columns represent sequence reads. the value in a particular cell is the score given by the algorithm for assigning a particular sequence read to a particular genome. therefore, it was necessary to parse this output to find the largest score in each column in order to assign each read to a particular taxon.

measurements of sensitivity, precision, and resource consumption on three simulated data sets.

1analysis performed on an amd opteron  <dig>  sun fire v40z with  <dig> gb ram.

2analysis perfomed on an amd opteron  <dig>  workstation with  <dig> gb ram.

3analysis performed on a  <dig>  ghz intel core i <dig> macbook pro running mac os x  <dig> . <dig> with  <dig> gb  <dig> mhz ddr <dig> ram.

4input sequences were broken up into smaller files.

three data sets were selected for analysis with each of the composition-based programs. percentage of sequence classified, sensitivity, precision, and resource consumption are shown for the composition-based programs in table  <dig>  what follows is a short description of each data set, and a summary of the results of analysis with each program.

phylopythia  <dig> bp simmc data set
this data set, which consists of  <dig>  sequences of average length  <dig> bp, originally used by patil et al.  <cit> , was downloaded from the fames  <cit>  web site. all classifications were performed at the genus rank.

phymmbl  <dig> bp refseq data set
this data set, which consists of  <dig>  sequences of average length  <dig> bp, originally used by brady and salzberg  <cit> , was downloaded from the phymmbl web site. all classifications were performed at the genus rank.

raiphy  <dig> bp refseq data set
this data set, which consists of  <dig>  sequences of average length  <dig> bp, originally used by nalbantoglu et al.  <cit> , was downloaded from the raiphy web site. all classifications were performed at the genus rank.

discussion
from the composition-based analyses, we can make several observations. 

 <dig>  phylopythias took the longest to train , but its classification step was relatively fast . however, the fastest program was raiphy, which took a negligible amount of time to train, and classified sequences ∼4× faster than phylopythias and ∼159× faster than phymmbl .

 <dig>  nbc displayed the highest average sensitivity and precision , and phymmbl displayed the second-highest average sensitivity and precision  .

 <dig>  phylopythias displayed very low average sensitivity , but competitive average precision  .

 <dig>  average precision is lower for composition-based programs than for alignment-based programs, but this is probably mainly due to the fact that classifications were made at the genus rank for composition-based classifications, and primarily at the phylum rank for alignment-based classifications .

 <dig>  composition-based programs are supposed to excel at classifying sequences that are not exactly represented in the database, so it would be interesting to compare the performance of these programs in that type of analysis .

phylogenetics
in the phylogenetics category, we selected two programs to evaluate: mltreemap  and treephyler . based on our experience using these programs, we note the following: 

 <dig>  the mltreemap web interface limits an analysis to  <dig>  sequences, so we used the command line version. the mltreemap workflow makes callouts to blast, gblocks  <cit> , hmmer  <cit> , and raxml  <cit> , and is very sensitive to the versions of these dependencies used, so it is important to use the specific versions of these programs that are bundled with mltreemap.

 <dig>  treephyler requires that the input sequences be converted to amino acids, and corresponding ufo  <cit>  assignments provided. thus, we performed a 6-frame translation of our dna input sequences, and used the ufo web server to assign protein sequences to pfam domains. these files were then used as input to treephyler.

 <dig>  treephyler is capable of utilizing multiple processing cores during analysis.

the only simulated data set associated with the mltreemap and treephyler publications is the simulated medium complexity  phylopythia data set, so we analyzed this with both programs. percentage of sequence classified, sensitivity, precision, and resource consumption are shown for the phylogenetic-based programs in table  <dig> 

measurements of sensitivity, precision, and resource consumption on the phylopythia  <dig> bp data set.

1analysis performed on an amd opteron  <dig>  sun fire v40z with  <dig> gb ram.

phylopythia  <dig> bp simmc data set
this data set, which consists of  <dig>  sequences of average length  <dig> bp, originally used by patil et al.  <cit> , was downloaded from the fames web site. all classifications were performed at the genus rank.

discussion
from the phylogenetic-based analyses, we can make several observations. 

 <dig>  treephyler took twice as long to run as mltreemap, but was ∼8× more sensitive and achieved higher precision. .

 <dig>  mltreemap and treephyler made some assignments at taxonomic ranks higher than genus that were not included in this analysis, but would otherwise be useful.

 <dig>  mltreemap and treephyler are capable of producing measures of confidence of assignment, which we did not include in this analysis but would be of practical use in most scenarios.

comparison of all programs
all  <dig> programs were used to analyze the simulated medium complexity  phylopythia data set, so it is interesting to compare their relative performance on this particular data set. 

 <dig>  composition-based programs displayed the highest average sensitivity , and alignment-based programs displayed the highest average precision  .

 <dig>  the two most computationally expensive programs, carma and megan, achieved the highest precision  .

 <dig>  in terms of best combined sensitivity and precision, nbc outperformed all other programs, achieving sensitivity and precision of  <dig> % .

CONCLUSIONS
the performance of a particular category of programs varied substantially between data sets. the precise reasons for this are likely a complex function of sample taxonomic composition and diversity, level of sequence representation in databases, read lengths and read quality. in general, however, if a data set was challenging for one program, it was challenging for the other programs in that category. the overall variance of the statistics makes it difficult to make definitive statements about the superiority of one program or method over another, but we can state some broad conclusions.

in general, high sensitivity is undesirable if corresponding precision is low. however, very precise methods that do not assign a large fraction of sequences may still be useful, depending on the application. for example, we have shown that in some cases, classifying only a small percentage of a sample may still be enough to recapitulate the correct organismal distribution, especially at a high rank . methods that search for marker genes in a metagenomic sample interrogate relatively few sequences, but as a consequence run quickly and with high precision. in a targeted sequencing experiment, phylogenetic methods and other methods that use marker genes might thus be especially appropriate.

in general, composition-based programs classified sequences the fastest, once they were trained. phylogenetic programs might be the most computationally intensive on a per-read basis, but owing to their use of marker genes only ran for an intermediate amount of time in our experiments. as expected, blast-based programs that did not use marker genes consumed the bulk of the computing resources in our study. researchers should take note of the fact that programs vary by orders of magnitude in computational resource requirements, and should thus choose programs appropriately depending on the computing resources they have access to, the amount of data to analyze, and the particular bioinformatic application. in addition, some programs are much easier to set up and use than others. of course, there is often a tradeoff between level of flexibility and configurability, and ease of use.

taxonomic sequence classification is a fundamental step in metagenomic analyses, as classification accuracy has a direct impact on downstream analyses and the conclusions drawn from them. therefore, it is important to be aware of the wide variety of tools that currently exist to address this need, and to choose the best performing and most appropriate tools for a given analysis and set of resource constraints.

