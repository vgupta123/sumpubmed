BACKGROUND
cellular regulatory networks consist of thousands of molecular processes/reactions collected over years from many studies. based on their relationships and functions, these interactions and their associated molecular entities have been categorized into various pathways. biologists have long used pathway knowledge to help derive the dynamics of cellular interactions, generate plausible hypotheses, and design promising experiments; however, our knowledge of regulatory networks is growing quickly and manual exploration is becoming increasingly difficult. the challenge of understanding network dynamics has become overwhelming in cancer drug development because multiple pathways are commonly involved and the direct targets of drug intervention are often multiple steps away from the key mechanism to be controlled, which could be in a different compartment and different pathway. thus, a salient goal of computational biology is to simulate the dynamics of genetic/molecular regulatory networks based on available biological knowledge and in doing so help biologists generate meaningful hypotheses and improve experimental design.

a considerable amount of pathway knowledge centered around biological interactions is currently being curated into well organized public databases, such as pid  <cit> , reactome  <cit> , and pathway commons  <cit> , where the interactions and their associated physical entities are defined and shared via a standard language such as biopax  <cit> . the popular standard, systems biology markup language , has adopted systems of ordinary differential equations  or partial differential equations  as a natural way to describe the fine-grained interactions inside the pathways  <cit> . along with the emergence of sbml, there are softwares that can run ode and/or pde-based cell models, e.g. libsbml  <cit> , celldesigner  <cit> , and the virtual cell  <cit> . however, such an approach demands complete information on the rate equations and their parameters in all reactions to be determined before any simulation can be conducted  <cit> . this requirement is commonly not available in translational research, for instance, in drug discovery  <cit> .

taking a coarse perspective, qualitative methods such as boolean networks for regulatory networks  <cit>  or petri net for metabolic networks  <cit> , focus on the physical entities rather than interactions. in these methods genes and gene products are linked by logical or algebraic relationships. while there are some popular knowledge databases, such as kegg  <cit> , where direct relationships are readily available, these cannot be directly adapted to interaction-centered databases . although it is possible to manually convert such databases into a form fit for boolean modeling, the translation is not unique and can be unstable in relation to small interaction alterations. there are also software tools that can be used to run such simulations, including cellnetanalyzer  <cit> , cellnopt  <cit> , booleannet  <cit> , and cpn tools  <cit> .

furthermore, all the existing approaches, differential equations, boolean, or petri net, require a complete and exact knowledge of the network, including the networks readily available from the public databases, whereas such knowledge associated with the biological processes is often incomplete and admits multiple possibilities. although biologists routinely take these uncertainties into their own consideration, current computational approaches do not. hence, a huge amount of curated pathway knowledge cannot be effectively utilized by the computer.

to help remedy this situation, we proposed a general scheme in which uncertainty is considered as part of the system and all possible outcomes that are attainable due to different possible ways in which pathway steps can be carried out will be considered accordingly. via this approach, one can apply knowledge retrieved from interaction-centered knowledge databases directly to perform systematic simulations. ultimately, with more meaningful predictions of network dynamics, a better guide to experimentation can be achieved.

this paper is organized as follows. in the methods section, we provide some definitions and introduce an interaction-based network model which can be generated from an input biological database. we discuss about the dynamic trajectories of a network and the concept of uncertainty in network dynamics. an abstract form of the dynamical modeling algorithm for computing the dynamic trajectories characterizing the dynamical behavior of a network for a given initial condition is also provided in this section. a study on the dynamics of a number of real data networks using our dynamical modeling methodology is given in the results and discussion section. we also describe our current research activities. finally, we provide our concluding remarks in the conclusions section.

methods
to produce our network model, we employ knowledge retrieved from public knowledge databases such as pid and reactome. to simplify the discussion, we assume that knowledge is shared via the standard language biopax, specifically, biopax <dig>  to facilitate efficient simulation, we first represent the interactions and associated physical entities shared in biopax using a set of nodes and edges.

an interaction-based network model
the model m, of the biological database under study, is a 2-tuple m = , where n is the set of network nodes representing the biological entities in the database, including genes, proteins, complexes, molecules, transcripts, metabolites and chemicals, interacting with each other, and e is the set of network hyper-edges , or simply edges, representing the biological interactions and processes in the database. the set of network nodes n and network edges e can be automatically generated from a simple text-based input file describing the biological interactions using our developed software package  <cit> . a detailed description on preparing the input file can be found in the appendix section.

each node in the network has a value, where the abstract term "value" is interpreted based on the characteristics of that biological entity. it may represent the concentration level of a protein/chemical or the expression level of a gene, indicating whether the gene is active or inactive. it does not necessarily indicate the relationship, such as concentration relationship, between different biological entities. the concentration of proteins, chemicals, and so on, in the cell are continuous variables; however, there are reasons why discrete variables are more suitable. first, accurate real-time concentration measurements are almost impossible. second, a gene/protein typically participates in a biological process if its concentration is above a threshold level and such behavior is readily handled using discrete variables. finally, from a control system engineering perspective, it is computationally and practically easier to deal with discrete-time systems rather than continuous-time systems. therefore, we assume that network nodes take non-negative integer values. the state of a network with m nodes, namely n = {n <dig>  n <dig> ..., nm}, is a vector x∈ℤ≥0m,ℤ≥ <dig> being the set of non-negative integers, where each element of x is the value of a node n ∈ n. let us also denote by y the vector of observable/measurable states, representing the subset of genes, proteins, transcripts, and so on, whose activities can be observed or measured and are of our interest. we represent the i-th node in n by ni. the same notation will be used for network edges, for example, ej refers to the j-th edge in e.

each network edge represents a corresponding biological process or interaction in which, generally, the process reactants  interact with each other to form products  under a set of conditions. thus, in general, each edge will have input and output nodes. in cases where a process is controlled, for instance, via activation or inhibition by a biological entity, a corresponding control node is associated to that edge. the input, output, and control nodes of the i-th edge are denoted by ei.i, ei.o and ei.c, respectively. we assume that an edge  can dynamically take place if all its input and activator nodes have nonzero values and its inhibitor nodes have zero values. we use the following rules to update the node values when the i-th edge is being dynamically processed:

  ei⋅i|new=ei⋅i|old-1ei⋅o|new=ei⋅o|old+1ei⋅c|new=ei⋅c|old 

arrows indicate the directions of processes/edges graphically. a dashed arrow is used to show an activation or inhibition in a network process. as an example, a process in which protein a converts to protein b if the activator protein c presents is shown as follows:

  c⇣a→b 

to generate a network model for the above process, we define the set of network nodes by n = {n <dig>  n <dig>  n3} = {a, b, c}, and the set of network edges by e = {e1}:

  n3⇣n1→n2e <dig> 

where n <dig>  n <dig> and n <dig> are the input, output and activator nodes of e <dig>  respectively. supposing that the initial condition is given by x <dig> =  <cit> t, since the input and activator nodes have nonzero values, the updated state vector, following the rules in , becomes x <dig> =  <cit> t, and we write:

  101︸x0→e1011︸x <dig> 

generally, in conversion processes to which activator entities are associated, if the activator is removed, the conversion will be halted and even reversed. also, as can be seen in real cellular systems, if the activator does not present then the new input species coming from other processes will not convert to outputs and will accumulate; thus, the outputs gradually degrade and will be depleted. based on this observation, we make the following assumption.

assumption  <dig> if in a conversion process, the activator entity has zero value and the outputs  have nonzero values, then the process takes place in the reverse direction.

considering the statement of assumption  <dig> for any conversion process in the network under study to which an activator entity is associated, an additional network edge corresponding to the reverse direction of the original process will be automatically added to e. for instance, for the conversion process in , we present the network model in the following form:

  n3⇣n1→e1n <dig> 

now, if x <dig> =  <cit> t, then the process takes place in the reverse direction resulting in x <dig> =  <cit> t .

for the set of biological processes in which a transcription takes place we follow the biopax format in which no input is assigned, but only an activator and an output are defined, these representing whether the transcription has occurred or not. thus, for this subset of network edges we use the following logic to update the output node value:

    ifei⋅cact>0thenei⋅o|new=1else ifei⋅cact=0thenei⋅o|new= <dig> 

where ei.cact represents the activator node associated to ei. once we have updated the output node of a transcription process we will not update that node any further until the activator node value changes. for example, suppose that transcription b happens if protein a presents. we thus define n = {n <dig>  n2} = {a, b} and e = {e1}:

  e1:n1⇢n <dig> 

now, for the initial condition x <dig> =  <cit> t , the updated state vector will be x <dig> =  <cit> t , implying that the corresponding transcription happens.

dynamic trajectories and uncertainty in network dynamics
once an interaction-based network model m is developed, a dynamical analysis can be performed. given a network model m = , an initial condition vector x <dig>  and defining the parameter time step, the network state vector x can be updated at each time step based on our proposed algorithm, presented later in this section. the abstract term time step does not necessarily reflect the real clock time that biological processes take to complete; the real clock time for one time step can be substantially different from another time step. we denote by xk the network state vector at the k-th time step. generally, a complete knowledge of all parameters affecting the dynamics of a biological process is not available. besides, in most practical cases, these parameters can not be even measured or observed. therefore, in general, for a given network initial condition x <dig>  different sequences of processes can happen, these being referred to as dynamic trajectories and denoted by t. each trajectory t ∈ t, indicates one possible sequence of processes that can take place. we describe the trajectory t ∈ t by t = {ei, ej ,...}, for appropriate values of i, j,..., which means that in the first time step process i  happens, in the second time step process j  takes place, and so on. the fact that, for a given x <dig>  multiple dynamic trajectories can be computed reflects uncertainty that we refer to as dynamics uncertainty. in cases where a possibly limited knowledge about the biological processes is available, it can be effectively used to reduce the dynamics uncertainty of the model. this can be accomplished by assigning appropriate properties to the set of network edges, as discussed next. we emphasize that the dynamic trajectories of a network depend on the properties assigned to the network edges as well as the network initial condition.

network edge properties
to each network edge a set of properties, upon availability of corresponding information in the biological database under study, can be associated, these being critical in characterizing network dynamics. for each network edge, these properties will be stored in a vector associated with that specific edge and can be accessed in the dynamical modeling algorithm, to be discussed shortly. for instance, to access the property x of the i-th edge we call ei.x. the dynamical modeling algorithm consists of conditional statements being functions of the edge properties; thus, the algorithm outputs depend on the edge properties. the properties, speed and priority, are assigned to each edge according to the nature or earlier measurements of that biological process.

speed
the speed label describes the time scale needed for a process to complete  <cit> . this is critical in dynamical network modeling because fast processes, such as complex assembly processes in which a group of proteins bind together to form a complex, happen almost instantaneously, while slow processes, such as transcription and apoptosis , take much longer times to complete. if such qualitative knowledge on the time scale of processes can be obtained from the biological database, then corresponding speed labels can be assigned to network edges, thereby reducing uncertainty in the dynamical model; otherwise, the dynamical model will embrace such uncertainty. in biopax <dig>  processes are categorized into conversion, template reaction, control, molecular interaction, and genetic interaction. in process-based knowledge databases, almost all processes belong to the first three categories and every control process is essentially associated with either a conversion or a template reaction process. by default, to any process labeled as conversion in the knowledge database, we assign a "fast" label; however, for those labeled as template reaction, such as processes that end in a phenotypical or pathway level event, a "slow" label is assigned, because the control and conversion interactions generally happen considerably faster than the template reaction processes. if knowledge about the time scale of a process is not available, then a "fast" label is assigned to the corresponding edge by default.

to show how the speed property can affect network dynamics, consider proteins a, b, and c interacting according to:

  a+b→a.bc+a.b→a+b.ca.b→apoptosis 

where the first two processes are of conversion  type and the last one, resulting in apoptosis, is a template reaction process. we define n = {n <dig>  n <dig>  n <dig>  n <dig>  n <dig>  n6} = {a, b, c, a.b, b.c, apoptosis}, and e = {e <dig>  e <dig>  e3}:

  n1+n2→e1n4n3+n4→e2n1+n5n4→e3n <dig> 

also, suppose that the initial condition is given as x <dig> =  <cit> t . according to the above description of processes, e <dig> and e <dig> happen fast, while e <dig> takes more time to complete. if such time-scale knowledge is not incorporated into the network model in the form of appropriate edge properties and we, by default, assign a "fast" label to all the edges, then the network state vector can be updated in two different ways, as detailed below, thereby introducing uncertainty to the dynamical model:

  111000︸x0→e1001100︸x11→e2100010︸x <dig> 

  111000︸x0→e1001100︸x11→e3001001︸x <dig> 

in the above updates of the network states, xkp indicates the p-th possible update of the state vector at the k-th time step. now, if one applies the process timescale knowledge by assigning a "fast" label to the speed of e <dig> and e <dig>  and a "slow" label to that of e <dig>  then the state vector will be updated only according to the sequence in . use of time-scale information reduces uncertainty in the dynamical model.

priority
the priority label helps when there exist two or more processes with nonzero input and activator nodes, and zero inhibitor nodes, meaning that they have equal probability to happen; however, a prior knowledge states that only one or few of them will happen in practice. priority is usually not provided in the knowledge database; but in many cases we can set default priorities based on experience. for instance, if an entity is an input in process  <dig> and a control node in process  <dig>  then process  <dig> has higher priority than process  <dig>  because in process  <dig>  the entity will be converted and not be available for control. for example, pip <dig> is needed to phosphorylate akt, yet pip <dig> can also be converted to pip <dig> by pten. hence, if pten exists, pip <dig> will be converted and not be able to phosphorylate akt. therefore, upon availability of such prior knowledge, one can assign priority labels to the network edges and reduce the uncertainty in the dynamical model; if this is not the case, then no priority labels will be assigned and the dynamical model will contain all of the possibilities. now, consider the following example in which proteins a, b, c, and d bind together to form complex assemblies:

  a+b→a.bc+a.b→a+b.cd+a.b→b+a.d 

we define n = {n <dig>  n <dig>  n <dig>  n <dig>  n <dig>  n <dig>  n7} = {a, b, c, d, a.b, b.c, a.d} and e = {e <dig>  e <dig>  e3}:

  n1 + n2→e1n5n3 + n5→e2n1 + n6n4 + n5→e3n2 + n <dig> 

since all the above processes are of conversion type, we assign the "fast" label to the speed property of all the edges. assuming that the initial condition is given by x <dig> =  <cit> t , the network state vector can be updated in two different ways:

  1111000︸x0→e10011100︸x11→e21001010︸x <dig> 

  1111000︸x0→e10011100︸x11→e30110001︸x <dig> 

now, suppose that a prior knowledge indicates that, in situations where e <dig> and e <dig> can mathematically happen at the same time owing to nonzero input nodes, e <dig> has higher priority than e <dig> to take place. accommodating this priority information into our network model by assigning the label "e2prio>e3prio" to the priority of e <dig>  and "e3prio<e2prio" to that of e <dig> , the state vector can now be updated based on the sequence of processes given in .

dynamical modeling algorithm
an abstract form of the algorithm proposed to perform the dynamical analysis is provided below. a detailed algorithm can be found in the additional file  <dig> to this manuscript. the algorithm is based on the breadthfirst search algorithm  <cit> . it takes the network model m =  and an initial condition x <dig> as inputs, and return the resulting dynamic trajectories t, and the corresponding updates of the state vector xk at each time step k. there are two approaches to update the network state vector: synchronous and asynchronous  <cit> . with synchronicity, multiple network edges can be processed at the same time step; while with asynchronicity, only one network edge is processed at each time step. our software package  <cit>  has the capability to update the network state vector using either approach. since, in general, the asynchronous approach yields a larger set of possible dynamic trajectories compared to the synchronous method  <cit> , asynchronicity is the default method to update the network state vector. the abstract algorithm given below updates the state vector asynchronously.

algorithm dynamical modeling algorithm

inputs: 

outputs: 

1: k ←  <dig>  t ← ∅, xin ← x <dig>  sin, xk, sk ← ∅

2: run states update subroutine , outputs: )

3: while xk ≠ ∅ do

4:   new time step: k ← k +  <dig>  xk, sk ← ∅

5:   for each updated state vector xk-1i in xk -  <dig> do

6:      if corresponding sk-1i forms a cycle then

7:         if sk-1i∉t, then add sk-1i to t

8:      else

9:         xin←xk-1i,sin←sk-1i

10:         run states update subroutine , outputs: )

11:      end if

12:   end for

13: end while

states update subroutine

inputs: 

outputs: 

1: initialize all nodes by xin

2: ev ← find all edges that have nonzero input nodes, nonzero activator nodes and zero inhibitor nodes 

3: if ev ≠ ∅ then

4:   remove edges in ev having relatively slow/low priority label

5:   for each edge in ev do

6:      initialize all nodes by xin

7:      xknew ← update the state vector using the given rules

8:      xk ← {xk, xknew}

9:      sknew ← the sequence of edges yielded xknew

10:      sk←sk,sknew

11:   end for

12: else

13:   if sin ∉ t, then add sin to t

14: end if

to illustrate the algorithm, consider the network in figure  <dig>  where n = {n <dig>  n <dig> ..., n12} and e = {e <dig>  e <dig> ..., e6}. suppose that the biological database provides the following information about the processes in this network: in process/edge e <dig> proteins n <dig> and n <dig> bind together to form the complex n <dig>  if the inhibitor gene n <dig> does not express; e <dig> is a transcription process  in which n <dig> is the activator and n <dig> accounts for the status of the transcription; in e <dig> proteins n <dig> and n <dig> convert to complex n <dig> ; in e <dig> proteins n <dig> and n <dig> form compound n <dig> and release n <dig>  if the activator n <dig> presents; and finally, in e <dig> proteins n <dig> and n <dig> convert to compound n <dig>  but this process is assumed to have less priority compared to e <dig> . based on the above description and according to the statement of assumption  <dig>  our method automatically adds edge e <dig> to the set of network edges to account for the reverse direction of e <dig>  we incorporate the above biological information into the network model by assigning appropriate labels to the properties of network edges . suppose that the initial condition is:


x0= <cit> t


following the proposed algorithm to calculate the dynamic trajectories and state vector updates, we get :

- line 1: k ←  <dig>  t ← ∅, xin ← x <dig>  sin, x <dig>  s <dig> ← ∅

- line 2: run states update subroutine

- line su1: initialize all nodes by xin

- line su2: eυ= {e <dig>  e <dig>  e3}

- line su4: eυ= {e <dig>  e3} ⊳ e <dig> is removed because it is slower than other edges

- line su6: initialize all nodes by xin

- line su7-8: x1new=x11= <dig> , <dig> , <dig> , <dig> , <dig> , <dig> t,x1←x1new

- line su9-10: s1new=s11={e1},s1←s1new

- line su6: initialize all nodes by xin

- line su7-8: x1new=x12= <dig> , <dig> , <dig> , <dig> , <dig> , <dig> t,x1←{x <dig> x1new}

- line su9-10: s1new=s12={e3},s1←{s <dig> s1new}

- line 4: k ←  <dig>  x <dig>  s <dig> ← ∅

- line 9: xin←x <dig> sin←s11

- line 10: run states update subroutine

- line su1: initialize all nodes by xin

- line su2: eυ= {e <dig>  e3}

- line su4: eυ= {e3}

- line su6: initialize all nodes by xin

- line su7-8: x2new=x21= <dig> , <dig> , <dig> , <dig> , <dig> , <dig> t,x2←x2new

- line su9-10: s2new=s21={e <dig> e3},s2←s2new

- line 9: xin←x <dig> sin←s12

- line 10: run states update subroutine

- line su1: initialize all nodes by xin

- line su2: eυ = {e <dig>  e5} ⊳ since e <dig>  which has higher priority than e <dig>  is not in eυ, then e <dig> will not be removed once line su <dig> is processed.

- line su6: initialize all nodes by xin

- line su7-8: x2new=x22= <dig> , <dig> , <dig> , <dig> , <dig> , <dig> t,x2←{x <dig> x2new}

- line su9-10: s2new=s22={e <dig> e1},s2←{s <dig> s2new}

- line su6: initialize all nodes by xin

- line su7-8: x2new=x23= <dig> , <dig> , <dig> , <dig> , <dig> , <dig> t,x2←{x <dig> x2new}

- line su9-10: s2new=s23={e <dig> e5},s2←{s <dig> s2new}

- line 4: k ←  <dig>  x <dig>  s <dig> ← ∅

- the next time steps can be followed easily.

finally, the algorithm outputs are:

dynamic trajectory t <dig> ∈ t : t1:=s33={e <dig> e <dig> e1}

state updates for t <dig> ∈ t: x <dig> x <dig> x33

dynamic trajectory t <dig> ∈ t: t2:=s41={e <dig> e <dig> e <dig> e2}

state updates for t <dig> ∈ t: x <dig> x <dig> x <dig> x41

RESULTS
in this section we study the dynamics of  <dig> networks: bak1-mcl <dig> interaction, the map kinase pathway, and the erbb2/erbb <dig> pathway. for each network we calculate the dynamic trajectories for a given initial condition vector. for illustration, these networks are graphically plotted in microsoft visio software and provided here. the computer used to perform dynamical analysis and compute dynamic trajectories is a sony vaio laptop with intel core  <dig> duo  <dig>  ghz cpu and  <dig> gb ram.

bak1-mcl <dig> interaction
biological database and network model
consider the network of bak1-mcl <dig> interaction shown in figure  <dig>  in cells, once synthesized, protein bak <dig> is localized at the mitochondria. following the apoptotic stimulus, bak <dig> will dimerize to form homodimers. these dimers will further oligomerize and trigger mitochondrial outer membrane permeabilization  and induce apoptosis  <cit> . to counter such apoptosis stimulus and keep the the cell alive, an anti-apoptotic protein like mcl <dig> will bind to bak <dig> with higher affinity and block bak <dig> from forming homodimers, thereby stopping apoptosis  <cit> . thus, in cancer cells, especially melanoma, mcl <dig> is commonly found to be overexpressed  <cit> .

in this network x.y indicates a binder complex produced by x and y. we define the set of network nodes and edges by n = {n <dig>  n <dig> ..., n5} = {bak <dig>  mcl <dig>  bak <dig> bak <dig>  apoptosis, mcl <dig> bak1} and e = {e <dig>  e <dig>  e <dig>  e4}. process e <dig> is the only slow process in this network resulting in apoptosis; thus, we assign a "slow" label to the speed property of e <dig> and, by default, a "fast" label to e <dig>  e <dig>  and e <dig> . also, as discussed, mcl <dig> binds to bak <dig> with higher affinity than bak <dig> binding to itself to form bak <dig> bak <dig>  <cit> ; therefore, e <dig> has higher priority than e <dig>  and we accordingly assign the priority label "e1prio<e3prio" to e <dig>  and "e3prio<e1prio " to e <dig> . in this network the observable state is y = n <dig> = apoptosis, since it can be checked under a microscope.

dynamic trajectories
suppose that the network initial state vector is given by x <dig> =  <cit> t , biologically meaning that the concentration of bak <dig> is considerably higher than mcl <dig>  the concentration of mcl <dig> is enough to participate in the processes in figure  <dig>  and other entities do not exist or have considerably low concentrations. for this initial condition and the assigned edge properties, our algorithm returns the following possible updates of the network state vector :

  21000︸x0→e310001︸x1→e100101︸x2→e200011︸x <dig> 

the dynamic trajectory in  is

  t={t1}={e <dig> e <dig> e2} 

the dynamic trajectory obtained here yields the final value of the observable state y, the apoptosis status, to be  <dig>  which biologically means that apoptosis takes place. this result agrees with our expectation from a biological point of view because initially there was insufficient amount of mcl <dig> to bind to the higher amount of bak <dig> to avoid apoptosis. the cpu time to calculate the dynamic trajectories for this network using the computer specifications described above was  <dig>  sec.

map kinase pathway
biological database and network model
the dynamical study of pathways containing feedback processes has practical importance for experimental design and therapy. in this example we considered the set of biological processes shown in figure  <dig>  which is based on the well-studied mak kinase pathway. under the stimulus of a growth factor, grb <dig> sos complex will be recruited to the cell membrane, which will transform the gdp-bound ras into its active form, gtp-bound ras. the activated ras will in turn activate the raf/mek/erk pathway  <cit> . however, it has been shown that the activation of ras is often short and transient, due to a negative feedback loop through erk, which dissociates the grb <dig> sos complex, thereby inducing an oscillatory pattern in erk activity  <cit> .

the set of network nodes is n = {n <dig>  n <dig> ..., n9} = {ras.gdp, ras.gtp, grb <dig> sos, raf, praf, erk, perk, grb <dig>  sos} and the network edges are e = {e <dig>  e <dig> ..., e <dig> }. the database provides information about the processes e <dig>  e <dig>  e <dig>  and e <dig> . owing to assumption  <dig>  our algorithm automatically generates the corresponding edges e <dig>  e <dig>  e <dig>  and e <dig> to account for the reversible direction of the original processes. by default we assign a "fast" label to all edges. since the database gives no information about the priority between the processes, no priority labels are assigned.

dynamic trajectories
given the initial condition x <dig> =  <cit> t , our algorithm yields the following dynamic trajectory:

  t={t1}={e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> ...} 

and this sequence repeats. the effect of the feedback process can be seen in the dynamic trajectory as the sequence of edges is repeating over time. the network state vector evolves as follows:

  101101000︸x0→e1011101000︸x1→e2011011000︸x2→e3011010100︸x3→e4010010111︸x4→e5100010111︸x5→e6100100111︸x6→e7100101011︸x7→e8101101000︸x0→e <dig> .... 

the cpu time for this network was  <dig>  sec.

erbb2/erbb <dig> pathway
biological database and network model
in this example  we studied the dynamics of the erbb2/erbb <dig> pathway downloaded from the nci pathway interaction database . the roles and connections of the erbb <dig>  erbb <dig> and neuregulin proteins and peptides in supporting both the mek and pi3k pathways were first mapped out around the year  <dig>  <cit> , and form the basis for the pathway displayed in figure  <dig>  the dependencies of raf/mek pathways  <cit> , and pi3k/akt pathways  <cit> , on the levels of activated erbb <dig> have been thoroughly demonstrated to show a very high level of reliance. in this network, the edges e <dig>  e <dig>  e <dig>  e <dig> are transcription processes and are the only slow processes in the network; thus, they are assigned a "slow" label. a "fast" label, by default, is assigned to all other edges. since no priority information is available in the database, no priority labels are assigned. the vector of observable states for this pathway is y = , chrna <dig>  jun, chrne]t , which are the output nodes of the transcription processes e <dig>  e <dig>  e <dig>  and e <dig>  respectively, whose activities can be measured by a microarray.

dynamic trajectories
assuming that the initial condition of the nodes marked with  is  <dig> and the others are  <dig>  our algorithm gives  <dig> dynamic trajectories:

  t1={e <dig> e <dig> e <dig> e47}∈tt2={e <dig> e <dig> e <dig> e <dig> e <dig> e48}∈tt3={e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e49}∈tt4={e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e50}∈tt5={e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e51}∈tt6={e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e33}∈tt7={e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e <dig> e19}∈t 

where the dynamic trajectories t <dig> and t <dig> contain transcription processes giving the final value of vector y, as y =  <cit> t. the cpu time for computing these trajectories was  <dig>  sec.

drugs such as lapatinib can have a very strong inhibitory effect on levels of erbb2/erbb <dig> activity, though the drug's effects are themselves highly dependent on the presence of only low levels of erbb2/erbb <dig>  <cit> . the immunoblot figure in  <cit>  shows that by suppressing activated erbb2/erbb <dig>  both akt and erk phosphorylation will be turned off. to see how suppressing the activity of erbb2/erbb <dig> affects the network dynamics we consider another initial condition vector. suppose that the nodes marked with  are initially set to  <dig> and the others are  <dig>  for this initial condition, our algorithm yields no dynamic trajectory, t = ∅. this implies that none of the akt and erk phosphorylation processes occur, as we expected from the results in  <cit> . a similar dynamical analysis can be performed for other initial conditions, thereby giving the set of all possible outcomes.

current research
each network edge in a dynamic trajectory can be mathematically expressed by a state transition matrix a. for instance, the transition from x <dig> to x <dig> in  can be described by

  x1=a1x <dig> 

where

  a1=0001/201/21/201/ <dig> 

a state transition matrix facilitates writing the network dynamics in terms of state space equations suitable for control system studies.

given a network model m = , an initial condition x <dig>  the calculated dynamic trajectories t, and recalling the notion of observable state vector y, one can mathematically describe the network dynamics corresponding to trajectory t ∈ t by the following set of state space equations:

  xk+1=ak+1xkyk=c xk 

which is a linear discrete-time time-varying system. we alternatively refer to yk as the system output at the k-th time step.

from a biological viewpoint, not all dynamic trajectories are primarily of interest for design purposes, but those including observable states are important because the result of changes to network inputs or initial condition can be measured. thereafter, a suitable experimental design can be proposed to attain a desired performance. we are currently conducting research on developing a new methodology to find logical relationships between network state variables and a set of desirable values for network observable states. this problem, referred to as a "backward inference problem", is a key step toward experimental design because it characterizes the necessary and sufficient conditions on the network state variables for which a desirable network performance can be obtained.

CONCLUSIONS
we have proposed a new dynamical modeling methodology that can handle common biological knowledge without the need of exact parameters related to process dynamics. our proposed approach has similarities in some aspects to other qualitative methods. the node update for conversion processes is similar to token passing in petri nets, while the update for transcription processes functions like boolean logic. these similarities occur because they are natural ways to describe the basic processes. however, to properly handle the pathway knowledge commonly available from a public database as a biopax file with minimal extra input, one needs to apply these canonical approaches in a practical way, which results in the kind of hybrid approach introduced in this paper. for instance, in the erbb2/erbb <dig> pathway example we were able to use different updating rules for the conversion and transcription processes that resulted in a dynamical model which captures the network dynamics more accurately. we would like to conclude by pointing out critical differences between our proposed method and the standard petri net and boolean network approaches.

first, for conversion type processes, a petri net usually does not consider the role of activator by assuming they are always present, and the potential reversibility of the process, so that every physical entity  is either an input or an output. although this can be partially solved by introducing a reading arc to indicate when a process can take place, it cannot be incorporated into the incidence matrix, which is critical for a fast update. as a result, a petri net loses one of its most attractive properties. the use of an incidence matrix is further hampered by the synchronous update, which assumes that equal time elapses for each process.

for practical applications, a critical shortcoming of the standard approaches is the manner in which they handle uncertainty. a standard petri net handles uncertainty in a random manner and boolean networks demand that all uncertainties be resolved before simulation starts. in reality, a biological process often takes a deterministic fashion unknown to the modeler, which demands a comprehensive exploration of all the possibilities. our choice of this hybrid approach is based on the purpose of utilizing public knowledge databases; however, the concept of exploiting all possible uncertainties is not limited to the specific procedure considered here. it can be applied to other qualitative methods, including both boolean networks and petri nets.

in conclusion, the entire procedure emulates how biologists actually utilize available pathway information. our ultimate aim is to use predicted outcomes to design the most efficient experiments  <cit>  to reduce uncertainty and find the best perturbation scheme to achieve desired network performance.

appendix
the input and output file formats of our software package are simple-text files. the input file contains the set of interactions/processes in the network and the initial condition vector in the following form:

 processinputoutputactivatorinhibitor 

for instance, for the following process

 c↓a+b→d 

the input file contains:

 process1inputaboutputdactivatorc 

the initial condition vector is added to the input file  as follows:

 entityvalue 

for the above process, if a, b and c are initially  <dig> and d is  <dig>  then it will be added to the input file as:

 entityvaluea1b1c1d <dig> 

the output file summarizes the given initial condition vector and the calculated dynamic trajectories as well as the corresponding updates of the state vector in the following form:

dynamic trajectories for initial condition: x <dig> = 

trajectory t = {}

state vector updates for t:

time step 1: 

x <dig> = 

time step 2: 

x <dig> = 

...and so on for the next time steps and other dynamic trajectories. the output file for the above process and initial condition is:

dynamic trajectories for initial condition: x <dig> =  <cit> t

trajectory t <dig> = {e1}

state vector updates for t1:

time step 1: e1

x <dig> =  <cit> t.

availability
a matlab software package enabled with graphical user interface  is programmed based on our proposed approach to perform dynamical modeling of uncertain biological networks. this package along with the real data examples presented in this manuscript are available at http://gsp.tamu.edu/publications/supplementary/mohsenizadeh15a.

competing interests
the authors declare that they have no competing interests.

authors' contributions
d.n.m., j.h. and e.r.d. conceived the method. d.n.m. developed the dynamical modeling methodology and programmed the software package. d.n.m., j.h., m.b. and e.r.d. selected the real data examples and provided insights on the interpretation of the results. all authors wrote the manuscript.

supplementary material
additional file 1
dynamical modeling algorithm. this file contains the detailed algorithm proposed for dynamical modeling of uncertain interaction-based biological networks.

click here for file

 acknowledgements
this work and its publication were supported by the national institutes of health  grant number 5r25ca <dig> 

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2015: proceedings of the 12th annual mcbios conference. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/16/s <dig> 
