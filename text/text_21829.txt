BACKGROUND
pyelph is an open source python based software for gel images analysis which can be used for different molecular biology or genetics studies. the software is able to analyze genetic variations of the dna molecules from different species or populations. pyelph analyses gel image patterns of dna genetic markers and generates phylogenetic trees based on the information available in a gel image. thus, the software can be successfully used for population genetics, phylogenetics and taxonomic studies. an important feature of pyelph is its interactive graphical user interface  which has a simple design that makes the program easy to use and learn.

genetic variation can be studied using molecular techniques based on genetic markers. dna fragments obtained through these techniques are used to estimate the similarity between samples of dna sequences. genetic markers are used for various studies and genetic tests, such as paternity tests, forensic tests, studies of intra- and inter- population polymorphisms  <cit> , taxonomic classifications, genetic mapping. a few examples of genetic markers used for phylogenetic and genomic studies are rflp , aflp , rapd , str . genetic markers based techniques usually use pcr  to amplify the dna fragments and gel electrophoresis to separate them. after migration  of the samples in the electrophoresis gel, a photo of the resulting pattern is taken by a common digital camera or a dedicated system. pyelph automatically detects the migration lanes and bands, computes the molecular weight of each separated fragment, matches the bands from all samples, based on their migration distance, computes similarity and distance matrices which are then used to generate phylogenetic trees.

the authors are aware of other software systems for gel images analysis which have similar functionalities to pyelph. such a software tool is the commercial program quantityone from bio-rad, which offers automatic lane/band detection, band matching, molecular weight computation and phylogenetic tree computation and display. on the other hand quantityone includes additional features , but it is very expensive and has a complex design, which requires prior training of the user. in contrast, pyelph is free and easy to learn and use, because it is oriented on gel image analysis applications and has a friendly gui. moreover, pyelph is a general tool that can be used with simple gel image acquisition systems . another example of a gel image analysis software is the java based program gelanalyzer, freely available at http://www.gelanalyzer.com. however, this software does not include phylogenetic analysis and is not open source. a big advantage of pyelph is that new functionalities can be added by users according to their needs. thus, science laboratory courses and low budget research laboratories would benefit greatly from the proposed software.

implementation
pyelph gui is structured in six processing steps and has three main components: a toolbar, an options panel and the image view . the operations for manipulating and editing the image are embedded in toolbar. the options panel contains the parameters and important operations of each processing step. and finally the image view displays the processed image or the phylogenetic trees.

the functionalities provided by the proposed software system are structured in six steps, as follows:

step  <dig> the program opens the first window of the gui which provides the following operations, available from the toolbar:

• load an image - pyelph accepts the following formats: gif, png, jpg, tiff, bmp. the image can be either grayscale or rgb, but it is automatically converted to grayscale;

• editing operations : crop, rotate;

• navigation operations : zoom in, zoom out, move the view, back, forward, home;

• save, which is also available for all the  <dig> steps;

for the next processing steps, the image must be placed such that the wells are situated at the top of the image view. after the image was prepared, the button next, placed on the option panel, will lead to the next step.

step  <dig> is responsible for lane detection. lanes are automatically detected by accessing the detect button, but the software also provides manual detection or removal of the lanes and manual adjustment of the detection. if the image has a low quality and the automatic detection fails, it is recommended to use the option  which allows the operator to graphically define the lane's width and improve the automatic lane detection. the method implemented for automatic lane detection is based on computing the maximum value of each pixels column . the mean value of the lanes' width is computed by using a threshold, set to 70% of the maximum value of the domain. by considering this threshold with a high intensity value, a lot of noise is eliminated and the probability that the detected lanes are real lanes is higher. using the lanes detected at this threshold level, a mean value for the lanes' width is computed and the lanes thinner than the mean width are eliminated. then the mean width of the selected lanes is again computed and it is used to detect all the lanes, between two thresholds , which have a width deviation of 25% from the mean width value. the width deviation value can be modified from the gui. after the lanes are detected, the operation of background subtraction is performed. the gui also provides an option to visualize the image after background subtraction. after lane detection is finished, the next step can be accessed.

step  <dig> is dedicated to band detection. at this point all the bands that correspond to real molecular fragments are detected and marked with an x. band detection is made automatically, but it can also be adjusted by changing some parameters or by manually adding or removing bands. automatic band detection is performed by summing the columns of a lane and comparing the values obtained with an intensity threshold set to  <dig> multiplied with the lane's width. this threshold can be modified from the gui. to avoid the detection of false peaks, a moving average filter was applied on the data. the width of the filter and the filter passes can be modified from the gui to improve detection. the filter width determines how many values are used to compute the average for the current position as follows: xf=12*width+1⋅∑k=i-widthi+widthx. the passes filter parameter represents the number of times the filter is applied on the data. for large images it is recommended to use higher values for both the filter width and the filter passes. by selecting a lane, the graph on the right side of the image view shows the values of the pixels corresponding to the column situated in the middle of a lane . so, each peak corresponds to a band in the selected lane. after band detection is finished, the next step can be accessed.

step  <dig> is optional and provides molecular weights computation using a defined molecular weight marker. the lanes which contain molecular markers must be selected from the gui. then, one marker is used to compute all the molecular weights, based on a defined standard. new standards can be easily defined by introducing the number of bands and then, the corresponding molecular weights in a decreasing order. the new defined standard is a text file with .marker extension and it is stored in a local directory . after it is defined, the new standard is saved automatically and it will be available in the interface for future use. the molecular weights are fitted after a linear electrophoresis migration model:

 lnweight=α*migrationdistance+β,α< <dig> β> <dig> 

the parameter α of the model is negative because the migration distance of the fragments is inversely proportional to the logarithm of their molecular weights. β is a positive offset due to the distance from the top of the image to the wells.

step  <dig> provides the operation of band mathing  as shown in figure  <dig>  the clusters are represented as horizontal lines or isolated points . the clusters are also colored by alternating red and yellow, such that they can easily be differentiated. a heuristic algorithm for band mathing was developed such that any two bands in a cluster satisfy two conditions: they don't belong to the same lane and the distance between them is less than 2% of the image's height . thus, a clustering matrix is obtained which can be modified and saved from the gui. each column of the clustering matrix is a sample  and each line represents a cluster. the presence or absence of a band is marked with  <dig> , respectively  <dig> . this matrix is used to compute the similarity matrix using dice coefficient  <cit>  which expresses the similarity level between two dna patterns. for samples si and sj the similarity is:

 dice=2*numberofcommonbandsinlanesiandjnumberbandsinlanei+numberbandsinlanej 

then, the distance matrix is computed as  <dig> times matrix of ones minus the similarity matrix. this matrix is used for generating phylogenetic trees by clustering methods.

step  <dig> computes phylogenetic trees based on clustering methods applied on the distance matrix computed in the previous step: neighbor joining  <cit> , upgma , wpgma , single linkage, complete linkage  <cit> . the method is selected from the gui and then the corresponding tree can be displayed. the labels of the analyzed samples can be modified from the gui and the genetic distances can be displayed on the branches of the tree.

an example of a phylogenetic tree generated by pyelph using neighbor joining method is provided in figure  <dig>  the tree was computed based on the information extracted from the gel image shown in figure  <dig>  the genetic distances are also displayed on the branches. the distance matrix corresponding to the gel image in figure  <dig> was computed and saved using pyelph. in order to verify the phylogenetic tree computation, the distance matrix was introduced in the online phylip package for phylogeny inference, in the required format . the phylogenetic tree generated by phylip was compared to the one obtained using pyelph. the results correspond and the lengths of corresponding branches of the two trees have equal values.

the video clip  shows pyelph's functionalities and options and is a step-by step demon- stration of how to use the software tool.

RESULTS
pyelph has been tested on over  <dig> agarose gel images in which dna molecules were stained with ethidium bromide which is a fluorescent dye and the pictures were taken using an uv transilluminator and a common digital camera. patterns of different genetic markers: random amplification of polymorphic dna   <cit> , amplified ribosomal dna restriction analysis  which is an extension of rflp technique  <cit>  and repetitive extragenic palindrome   <cit>  have been analyzed for population genetics studies and taxonomic classification of new isolated bacteria.

as mentioned in the background section, pyelph provides similar functionalities, regarding gel images analysis, with the commercial program quantity one from bio-rad. other programs for gel image processing are gelanalyzer, which is freely available, but not open source, and the software package proposed in  <cit> , which provides automatic allele classification. the main advantages of pyelph towards other gel images analyzing systems are the following:

• it is free and open source;

• it provides a very easy to use gui which allows visualization of the processed data in a suggestive and interactive manner;

• it is implemented in python, so it can be integrated in bigger bioinformatics packages, like biopython for example; it can also be extended by the bioinformatics research community;

• it runs on both windows and linux platforms;

• it provides both molecular weights and phylogenetic trees computation and visualization;

• it implements a band matching algorithm;

• it provides access to different parameters which contribute to automatic detection adjustments;

• it is independent of the gel image acquisition device and it can be used with simple, low cost systems.

pyelph can be extended and reused very easily. future work includes combining data from multiple gel images to infer phylogenetic trees. it is of current research to determine how to combine data obtained from different experiments of the same samples  in order to compute trees which describe phylogenetic relations better. the interface and methods of pyelph will also be reused to build tools for microarray analysis and colony counting.

CONCLUSIONS
this paper proposes pyelph, a free and open source software, implemented in python, which analysis gel images and generates phylogenetic trees. the methods used for its implementation have been presented. the originality of the software tool is its gui design, based on six steps that gradually lead to the results, and also, the clustering algorithm implemented for the band matching step. the program is very easy to use due to its expressive and interactive python based gui. it is an useful tool which has been tested on real molecular data. thus, pyelph can be used by researchers and students who work in the fields of molecular biology and genetics.

availability and requirements
• project name: pyelph

• project home page: http://sourceforge.net/projects/pyelph/files/releases/

• operating system: platform independent

• programming language: python  <dig> x

• other requirements: python  <dig>  or higher, numpy, pil , wxpython, matplotlib

• license: gnu gpl v3

• any restrictions to use by non-academics: restrictions specified by gnu gpl v3

before the application can be started, the following open source python packages must be installed:

 <dig>  python  <dig>  or  <dig>  interpreter - http://python.org/download/releases/

 <dig>  the following python packages for python  <dig>  or  <dig> :

 numpy - http://numpy.scipy.org or http://sourceforge.net/projects/numpy/files/numpy/

 pil - http://www.pythonware.com/products/pil/

 wxpython - http://www.wxpython.org or http://sourceforge.net/projects/wxpython/files/wxpython/

 matplotlib - http://matplotlib.sourceforge.net or http://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib- <dig> /

after instalation of the required packages is ready, pyelph can be started by double-clicking on pyelph.py python script. the folder standards contained the defined weight marker standards. new weight marker stadards can be defined and saved from pyelph gui or by editing a text file with the .marker extension.

for the convenience of windows users, an installation kit is also available at http://sourceforge.net/projects/pyelph/files/releases/pyelph <dig> -installer.exe/download. the kit installs a windows executable version of pyelph, which was generated with py2exe. therefore, there is no need to install python or other python packages to run this executable version of pyelph.

authors' contributions
both authors contributed to the development of all parts of pyelph. abp provided the biological expertise and had a significant contribution to the back-work of the program: lane and band detection, weight computation, band matching and phylogenetic tree generation. she also tested all the components and ensured that the program runs smoothly and correct. civ was involved with the gui design and implementation. he integrated matplotlib with wxpython in order to enhance the interaction with the user. he also implemented the display method for the phylogenetic trees. both authors developed the clustering algorithm that is used for band matching. all authors read and approved the final manuscript.

supplementary material
additional file 1
pyelph demo video clip. the pyelphdemo.mp <dig> mpeg- <dig> video presents most of the features of pyelph. it follows all six processing steps.

click here for file

 acknowledgements
the authors would like to express thanks to alexandra simon-gruiţa, tatiana vassu, ecaterina nedelciu and diana smarandache from the department of genetics, university of bucharest, for useful discussions about the software and for providing test data.
