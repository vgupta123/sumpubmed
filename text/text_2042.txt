BACKGROUND
classification of protein domains based on their tertiary structure provides a valuable resource that can be used to understand protein function and evolutionary relationships  <cit> . as a result, several classification databases  <cit>  have been developed, of which scop  <cit>  and cath  <cit>  are the most widely used databases. both databases are hierarchically organized and use protein domains as a basic unit of classification. while scop and cath provide a valuable resource for biologists, these databases are updated only intermittently – for example, over the past three years, scop has been updated roughly every six months, and cath has been updated annually. updates to these databases require varying degrees of semi-automated methods and manual interpretation. as a result, newly deposited protein structures only show up in the classification hierarchy in the next release cycle of these databases. at the same time, the number of newly determined protein structures has been growing rapidly. for instance, during the past year, more than  <dig> structures were deposited in pdb. also, the number of structures in pdb today is roughly double the number of structures in the year  <dig>  <cit> . this rapid increase in the number of new protein structures makes the need for automated classification tools even more important.

we recognize that the manual and semi-automated methods used in scop and cath produce classification hierarchies that are of high quality, and automated methods are unlikely to incorporate the nuanced judgment that an experienced biologist brings to the classification task. nevertheless, automated methods, if they are highly accurate, can provide a valuable complementary approach in producing classification hierarchies. with the rapid increase in the number of protein structures, automated methods can  play an important role as a pre-processing step for producing manually-tuned classification hierarchies.

recognizing this need, several automatic domain classification methods  <cit>  have recently been developed. superfamily  <cit>  is purely based on sequence comparison criteria. it is efficient, but often fails in correctly classifying remote homologs of structurally similar proteins. methods such as f2cs  <cit>  and sgm  <cit>  are based purely on structure comparison. they are computationally very efficient and accurate for classifying at the fold level, but not necessarily at the superfamily and family levels. recent methods  <cit>  combine sequence and structure information for classification, and make a classification decision based on a consensus of several sequence and structure comparisons. in general, these methods are more accurate than previous methods, though they are computationally more expensive.

an important issue in automatic protein classification is the ability of a tool to detect new classes . detecting such new classes is important as novel domain structures are constantly found in newly determined protein structures, and the information about new classes can be effectively used to better understand the new structures and can also be used to assist humans in organizing the new structures into the next version of the classification hierarchy. while many of these existing protein classification methods are very good at classifying new domains into existing classes, the effectiveness of these methods in detecting new classes is modest. of the existing classification tools, both sgm  <cit>  and scopmap  <cit>  can be used to detect new classes, and as we show in this paper our method is much more effective compared to these two methods for new class detection.

in this paper, we present procc – an automatic, accurate, and efficient classification framework, which consists of three components. given an unclassified query domain, a structure comparison component employs an index-based method to quickly find domains with similar structures. then, based on these results, a classification component assigns the query to an existing class label, or marks the query as unclassified to indicate that the query domain is potentially a new fold. finally, a clustering component takes all domains marked as unclassified and runs a clustering method to detect potentially novel folds.

collectively, these components provide a unified and automated protein domain classification tool. to demonstrate the capabilities of our methods, we have tested our method to predict the classification for new domains in scop  <dig>  based on prior knowledge of the previous version of scop . our experimental results show that the precision of our method is  <dig> %,  <dig> %, and  <dig> % at the family, superfamily, and fold levels. we also compare our method with sgm and scopmap, and show that our methods are about 15–19% more accurate than sgm and comparable to scopmap. however, scopmap only classifies at the superfamily and the fold levels, whereas our tool also provides a classification at the the family level. more significantly for new fold detection, the predications made by procc is 20% better than scopmap. our experimental evaluation also shows that our method produces clusters which closely correspond to the new families in scop  <dig> .

RESULTS
experimental setup and datasets
in this section, we present results measuring the effectiveness of our classification methods. for the empirical evaluation, we employed the experimental strategies used in previous studies  <cit> : namely, domains in an older version of scop are used as the set of database domains with known class labels, and domains in a newer version of scop are used as the query set. classification accuracy is measured by comparing the predicted labels with the  labels in the newer version of scop. in our experiments, scop  <dig>  and scop  <dig>  are used as the database and the query set respectively.

scop  <dig>  and  <dig>  contain  <dig> and  <dig> domains, which are grouped into  <dig> and  <dig> families respectively. however, in our evaluation theoretical domains and domains with less than  <dig> sses are excluded. after these exclusions, we end up with  <dig> and  <dig> domains in scop  <dig>  and  <dig>  respectively. our database is the set of  <dig> domains in scop  <dig> , and our query set is the  <dig> newly added domains in scop  <dig> . we used the astral compendium  <cit>  for the pdb-style coordinate information for these scop domains. in addition, we used the stride program  <cit>  to generate secondary structure assignments for each domain.

our implementation is written in c++, and uses the leda  <dig> r package for the maximum bipartite graph matching, and the svmlight <cit>  package. the svm model was trained using scop  <dig>  and scop  <dig>  . we used a radial basis function as the kernel with a weight cost set to the ratio of the number of negative examples to the number of positive examples. all experiments were run on a  <dig>  ghz opteron machine, with  <dig> gb of ram, and running the linux  <dig> . <dig> kernel. throughout this section, we will use the term class to refer to a class in the classification scheme.

experimental evaluation
precision and computational cost
to measure the effectiveness of our classification method, we compare the predicted classification label  with the actual label in scop  <dig>  using the following metrics:

overall precision = /

classification error ratio = ci/

new class detection ratio = un/tn

in the above equations, cc is the number of correctly classified domains, and ci is the number of incorrectly classified domains. un represents the number of domains of new structures which are not in existing classes and therefore are correctly marked as unclassified. ue is the number of domains which should have been classified into existing classes, but which are marked as unclassified by our method.  te represents the total number of domains in common classes in scop  <dig>  and scop  <dig> , and tn represents the total number of domains in new classes in scop  <dig> .

overall precision measures how many proteins are correctly classified or correctly labeled as unclassified. the classification error ratio measures how many errors are made when query domains are assigned actual labels. a new class detection ratio measures how effectively a method can detect domains that are in new classification classes.

the results for this experiment are shown in table  <dig>  as can be seen from this table, our classification method is highly accurate and is fairly effective in detecting domains that are in new classification classes. with respect to the computation time for classification, the computation cost is linearly proportional to the number of sse triplets in the query. the average number of sses per domain is about  <dig>  and for queries of this size, our method requires about  <dig> seconds of execution time. of this computation time, the index matching component takes about 38% of the time . about 56% of the computation time is spent on the overall structure matching component , and the remaining 6% of the time is spent for program setup, input and output processing, and svm classification .

this table shows the result of classifying  <dig> new domains in scop  <dig>  using procc.

comparison with other methods
a number of methods have previously been proposed for automatic classification  <cit> . in evaluating performance, we considered comparing our method with each of these methods. however, some of these methods are not suitable for comparison because of the following reasons. currently, a fair comparison with superfamily  <cit>  is not possible since a scop  <dig>  hidden markov model is required for comparison, and this model is currently not available . comparison with  <cit>  is not possible since its implementation or result data sets are not available.

therefore, in this section, we compare our method with sgm  <cit>  and scopmap  <cit> . the sgm method is a classification method based on 30-dimensional gaussian integrals of protein structures, and nearest neighbor classification. the sgm method has been shown to be very fast and effective for classifying cath. scopmap is a consensus-based method that uses seven different sequence and structure comparison methods. scopmap has been extensively compared with superfamily, and has been shown to be more accurate than superfamily  <cit> .

comparison with sgm
before presenting the results with sgm, we note that the performance of sgm can change depending on adjustable parameters, such as the distance ratio cutoff in sgm. we experimented with a variety of parameter settings for sgm and found that settings that increase the new class detection ratio , degrade the overall precision. to select a reasonable baseline for comparison, we picked parameter values for sgm which produce a new class detection ratio similar to our method. with this method, we end up with distance ratio cutoff values of  <dig> ,  <dig> , and  <dig>  at the family, superfamily, and fold levels respectively.

the results comparing sgm and procc for the  <dig> new domains in scop  <dig>  are shown in table  <dig>  although sgm was very effective for classifying cath, this method is less successful with scop. as these result shows, our method is 15–19% more accurate than sgm at the family, superfamily, and fold levels, and makes fewer misclassification mistakes.

this table shows the result of comparing sgm and procc for classifying  <dig> new domains in scop  <dig> .

we have also evaluated procc, and compared it with sgm, using cath . we used cath  <dig>  and cath  <dig>  as the database and query domains. the overall precision of the sgm method in classifying cath is  <dig> %,  <dig> %,  <dig> %, and  <dig> % at the h, t, a, and c levels, whereas the overall precision of our method is  <dig> %,  <dig> %,  <dig> % and  <dig> % at the h, t, a, and c levels. compared to scop, both methods generate more accurate results with cath. however, the higher precision with cath is expected since cath uses a broader definition of fold, i.e. there are fewer folds in the cath classification compared to scop  <cit> .

in addition, we have also compared the sensitivity and specificity of procc with sgm and plotted standard roc curves. these results are presented in the additional file  <dig> 

comparison with scopmap
in this section, we present results comparing scopmap and our procc method. in comparison with scopmap, we note that scopmap takes as input a query protein chain, identifies domains by aligning the query protein chain to sequences and structures in its database, and assigns a classification label to each identified domain. on the other hand, the input to procc is a domain rather than a protein chain. so for comparison with scopmap, we first ran a domain prediction method with query protein chains to identify the domain boundaries. then, we ran our classification method on the identified domains. for domain boundary prediction, we used the ssep-domain method  <cit> , which was shown to be very accurate in the cafasp4-dp competition  <cit> .

we compared scopmap and procc using  <dig> new single domain chains in scop  <dig> . for this experiment, multi-domain chains are excluded, due to the difficulty in measuring effectiveness objectively .

initially, we attempted to run scopmap on the  <dig> chains. however, running scopmap on these  <dig> chains takes an enormous amount of computational resource requiring approximately 2– <dig> hours to process each individual chain . due to this high computation cost, new proteins are typically classified using large clusters and classification results are posted at . therefore, we compared our method with scopmap based on the latest result posted on the scopmap ftp site.

finally, while our method can predict the family, superfamily, and fold labels, scopmap primarily predicts the superfamily label, and only predicts the fold label for queries that it cannot assign a superfamily label. scopmap never predicts a family label. since the main classification prediction made by scopmap is at the superfamily level, for this evaluation we compared the classification effectiveness only at this level. the results of this evaluation are shown in table  <dig>  from this table we can make the following observations:

this table shows the result of classifying  <dig> single domain chains in scop  <dig> . all numbers reported in column 2– <dig> are in terms of the number of chains . column 2– <dig> show the number of single domain chains which are correctly identified as single domain chains and are classified to known superfamilies. column 4– <dig> show the number of single domain chains which are correctly identified as single domain chains and are labeled as unclassified. column  <dig> shows the number of single chain domains which are incorrectly identified as multi-domain chains.

 overall precision
by examining column  <dig> in table  <dig>  we observe that the overall precision of scopmap is marginally lower than procc with the ssep-domain prediction method. from column  <dig>  we also observe that the ssep-domain prediction method performs better than scopmap in identifying single domain chains. to isolate the effect of domain prediction from the classification accuracy, we also measured overall precision as /. this adjusted overall precision is  <dig> % and  <dig> % for scopmap and procc respectively. we note that scopmap is tightly coupled with its domain prediction method, and considered as an entire package, procc coupled with ssep provides slightly higher overall precision than scopmap. furthermore, the added advantage of our approach is that it can be coupled with any domain prediction method allowing our approach to easily leverage future improvements in domain predication methods.

 detection of novel structures
from column  <dig> in table  <dig>  we observe that with respect to detecting novel structures, our method is about 20% more accurate than scopmap. the reason for this difference is that scopmap aggressively classifies a query into a known classification class if at least one of the  <dig> sequence and structure comparison methods can find a significant match to the query. this approach can be effective when the query belongs to a known class, but is vulnerable to making false predications for queries that have novel structures, especially when classification boundaries for those structures are ambiguous. on the other hand, our method makes a classification decision based on a sophisticated decision model, which distinguishes novel protein structures from known protein structures based on knowledge learned from a prior classification database.

 computational cost
with respect to computation time , our method has a clear advantage over scopmap. while scopmap takes on average 2– <dig> hours per query, our method can classify a query on average in  <dig> minutes. of these  <dig> minutes, on average  <dig> minutes are spent on the ssep domain prediction web service, and on average only  <dig> minute is spent in our classification method. we recognize that a technique to address the significantly higher computational cost of scopmap is to employ a large cluster. while this solution is practical in some cases , with the increasing rate of production of new structures it may be more practical to employ a much cheaper solution like procc which has comparable precision and offers more flexibility as it can be coupled with any domain prediction tool. finally, we note that in contrast of scopmap, procc also provides classification predictions for the scop family level. such predictions are useful as it is known that several domains in the same superfamily can be functionally divergent, and a more fine-grained family level classification is more useful for predicting domain functions  <cit> .

detection and clustering of novel families, superfamilies, and folds
from the query set of  <dig> domains, our classification method labels  <dig> domains as unclassified. as a way of identifying and describing novel families, superfamilies, and folds among these unclassified domains, we ran the mcl clustering algorithm on a graph constructed using these unclassified domains. to construct a graph for clustering, a threshold value for structure similarity is required . in addition, for the clustering at the different scop levels, different threshold values are needed. for this experiment, we set the threshold value to  <dig> ,  <dig> , and  <dig>  for the family, superfamily, and fold levels respectively, based on the observation that more than 90% of correctly classified proteins have a similarity score above these values with their nearest structure neighbor in the same scop family, superfamily, and fold.

to measure the capability of the automated method in identifying novel scop families, we compared the automatically produced clusters with the family level classes in scop  <dig> . the  <dig> unclassified domains are spread across  <dig> families in scop  <dig> . for these domains, the automated method produced  <dig> clusters. to check the agreement between scop and the automatically generated clusters, we generated class labels for the clusters based on the most common family label in a cluster. based on this class label assignment, each scop family is paired with one or zero cluster having the same class label. when more than one cluster maps to the same scop family, we count only the assignment of one of the automatically generated cluster; this cluster is the one in which the number of domains that correctly match the scop family label is highest amongst the set of clusters that also have the same scop family label. we then counted the number of common clusters/families that were "correctly" mapped, and found that there are  <dig> common clusters between the two classifications. then, for each correctly mapped cluster, we counted the number of actual domains in the cluster that had the same label as the corresponding scop family. this total is  <dig>  which is 88% of the total number of unclassified domains.

using the same method, we also computed the clustering effectiveness at the superfamily and fold levels. these results are shown in table  <dig> 

this table shows the result of clustering  <dig> unclassified domains at the scop family, superfamily, and fold levels. column  <dig> shows the number of scop families, superfamilies, and folds that these  <dig> domains are spread across. column  <dig> shows the number of automatically generated clusters at each scop level. column  <dig> shows the number of common clusters/scop classes that were correctly mapped. column  <dig> shows the number of actual domains in the cluster that had the same label as the corresponding scop class.

in table  <dig>  of the  <dig> identified clusters at the family level,  <dig> clusters actually correspond to  <dig> novel families in scop  <dig> , which is 74% of the  <dig> total number of novel families introduced in scop  <dig> . at the superfamily level, out of  <dig> identified clusters,  <dig> clusters actually correspond to  <dig> novel superfamilies in scop  <dig> , which is 65% of the  <dig> total number of novel superfamilies introduced in scop  <dig> . at the fold level, out of  <dig> identified clusters,  <dig> clusters actually correspond to  <dig> novel families in scop  <dig> , which is 75% of the  <dig> total number of novel families introduced in scop  <dig> . in addition, to measure the extent of homogeneity in automatically generated clusters, we also evaluated the quality of clusters using a measure called "cluster purity"  <cit> . it is  <dig> when all domains in the same cluster have perfect agreement in their class labels, and it is defined as:

cluster  purity=1n∑c∈ℂmax⁡s∈s|c∩s|
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgdbwqcqwgsbabcqwg1bqdcqwgzbwccqwg0badcqwglbqzcqwgybgccaamc8uaagpavlabdcfaqjabdwha1jabdkhayjabdmgapjabdsha0jabdmha5jabcicaomrr1ngbprwthrhayaqeguudjxwakbsthrhagq1dvbaceagae8nahmecbagae4hlawiae8nkwplae4xkakcccagae0xpa0zaasaaaeaacqqfxaqmaeaaiegacqafobgtaawaaabeaeaacyggtbqbcqgghbqycqgg4baedawgaawcbagaem4uamlaeyici4sae8nkwpfabeaakiabcyha8jabdoeadjabgmiihdwcbagaem4yammaeyici4sae8nahmeabeqdcqghris5aogaem4uamlaeiifawhaaa@6a24@

in the above equation, c is a cluster in the set of mcl clusters ℂ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaatuudjxwak1uy0hmmaehbfv3yslgzg0uy0hgiud3bagabaiab=jqidbaa@3739@, s is a family in the set of scop families s
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaatuudjxwak1uy0hmmaehbfv3yslgzg0uy0hgiud3bagabaiab=jj8tbaa@38a8@, and n is the total number of domains in s
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaatuudjxwak1uy0hmmaehbfv3yslgzg0uy0hgiud3bagabaiab=jj8tbaa@38a8@.

using this measure, the cluster purity of the mcl clusters is  <dig> ,  <dig> , and  <dig>  at the scop family, superfamily, and fold levels respectively. this high cluster purity value shows that our clustering method produces clusters that have a high degree of agreement with the scop classes. an example of automatically clustered novel scop families is shown in figure  <dig> 

discussion
applications for efficient structure comparison
in general, existing protein classification methods have focused on classifying new domains into existing classification hierarchies. however, it has been observed that in scop previously classified domains are often rearranged in subsequent releases, as new structures sometimes reveal more relationship amongst new and existing domains  <cit> . therefore, in addition to classifying new structures, it is to automatically detect such potential rearrangements.

one way of approaching this problem is to perform an all-to-all comparison with existing and new domains, and then generate clusters using a clustering method. for instance, if the introduction of a new domain provides evidence connecting previously unrelated domains, a cluster that consist of these domains can be found, suggesting some potential rearrangements involving these domains.

in performing this task, along with clustering techniques, an efficient and accurate structure comparison method is crucial since one has to compare each pair of structures  comparisons). our structure comparison method , is very efficient and could be a suitable choice for this task.

incorporating this functionality to continually detect rearrangements of the classification hierarchy into our classification framework will be part of our future work.

integration with domain prediction methods
to make a domain classification truly automatic, given a protein structure, first the domain boundaries must be identified. the domain boundary prediction problem is well recognized as a crucial component for functional classification and structure prediction  <cit> , and there are a number of competing domain prediction methods  <cit> . the procc method provides a framework which allows us to couple our classification method with any domain prediction tool. while we have used the ssep-domain method in our current study, other domain prediction methods, for instance, rosseta-ginzu  <cit> , which is more accurate but slower, can be used to potentially produce even better classification results. in addition, the loose coupling between the classification and domain prediction components will easily allow us to leverage future advances that are likely to be made in domain boundary prediction methods.

CONCLUSIONS
in this paper we have described a method called procc for automatically classifying proteins. using extensive experimental evaluation, we have demonstrated that our method often has higher accuracy compared to existing automated methods. our method is also very effective in predicting new folds, and is very efficient. while our method cannot completely remove the need for manual intervention that is invariably needed in producing high-quality classification hierarchies such as scop and cath, it can provide a valuable complimentary method for classifying new domains that have not been incorporated into the latest releases of these databases. in addition, our method can also help the curators of these databases in reorganizing the existing classification hierarchies to accommodate new protein structures.

