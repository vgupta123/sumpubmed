BACKGROUND
the introduction of rna-sequencing  has revolutionized the field of molecular biology, revealing that up to 75% of the human genome is actively transcribed  <cit> . the majority of this transcriptome consists of so-called long non-coding rnas . reconstructing accurate transcript models for these lncrnas is a major challenge when processing rna-seq data. in general, lncrna transcripts are less abundant compared to protein coding genes  <cit> , often resulting in a lack of junction reads from which transcript models are inferred. in addition, lncrnas are frequently located in the vicinity of protein coding genes and could therefore represent unannotated extensions of untranslated regions  rather than independent transcriptional units. finally, transcript reconstruction from rna-seq data often gives rise to large numbers of single-exon transcripts. distinguishing single-exon fragments that represent independent transcriptional units from those that result from genomic dna contamination or incomplete transcript assembly is not straightforward.

state-of-the-art tools for lncrna annotation based on evolutionary constraints such as plar   <cit>  and slncky  <cit> , might filter out some putative lncrna transcripts depending on stringent conservation criteria. plar removes transcripts that are short  and lowly expressed  and focuses on the annotation of syntenic lncrnas. given the limited conservation of lncrnas  <cit>  and given that both tools exclude any transcript that partially or totally overlaps protein-coding genes, such approaches may result in a large number of false negatives.

lncrna transcript models can be refined and filtered by integrating complementary datasets on chromatin state  for histone marks or dnase sequencing ) and transcript boundaries  to mark the transcription start site  or 3p-seq to mark the 3′ end of poly-adenylated transcripts)  <cit> . transcripts for which the transcription start site coincides with a cage-peak and is in close proximity to a h3k4me <dig> or h3k27ac mark are more likely to be independent transcriptional units compared to transcripts that lack these features.

grit  <cit>  is a command line-based tool that uses cage in conjunction with rna-seq data but does not take advantage of other important layers of genomic information such as open chromatin  and histone marks  typically associated with active transcription.

to tackle the challenge of establishing lncrnas as independent transcriptional units we have created the zipper plot, a novel visualization and analysis method available as a quick and user-friendly webtool  <cit>  that employs publicly available cage-seq, chip-seq and dnase-seq data across a large collection of tissue and cell types. the user only needs to provide a list of genomic features , each consisting of three tab-separated fields: chromosome, human genomic coordinate  of the tss and strand. our webtool will retrieve the closest cage-seq/dnase-seq/chip-seq peak to each tss for thousands of genomic features at the same time. the closer these peaks are, the higher the evidence of independent transcriptional activity for the set of genomic features.

RESULTS
implementing the zipper plot as a webtool
the zipper plot is freely available as a webtool  at  <cit>  and has been implemented using the javascript library jquery, php and html <dig>  the back-end  contains a peak-based database  and the necessary code to retrieve and sort the closest cage-seq/chip-seq/dnase-seq peak to each tss, to create the plot  and to compute several statistics to assess the tss-peak associations . this code was written using the r statistical programming language  <cit>  along with the data.table  <cit> , ggplot <dig>  <cit> , knitr  <cit> , r.utils  <cit> , grid  <cit>  and gridextra  <cit>  packages. the communication between the web interface and our server is established using php.

due to memory constraints on our server, we limited the number of genomic features per input file to  <dig> . however, to allow users to integrate our tool as part of bigger pipelines, we have made our scripts available at github  <cit> .

database querying
to start using the webtool, the user only needs to upload a list of genomic features , each consisting of three tab-separated fields: chromosome, human genomic coordinate  of the tss and strand. optionally, users can provide an additional fourth column containing labels for the genomic features being studied.

if the user has a file from another genomic build , we propose two alternatives to convert it to hg19: 1) hgliftover  <cit> : a webtool where users can upload a file with “chrn:start-end” or bed format and select the new genomic build of interest; 2) crossmap  <cit> : a tool that supports more file types as input, including bam, sam and bigwig among others. detailed information about its usage and download can be found at  <cit> .

importantly, hgliftover can also be installed locally on unix-based systems by downloading the executable  <cit>  and appropriate chain files  <cit> .

in a second step, the user has to select the data type of interest among the ones available in our database  and has the option to run the analysis in one sample type of interest or across all available sample types. in the first option, the user knows in advance in which tissue the set of genomic features are more likely to be expressed; with the second option, each individual genomic feature is analyzed across all samples and the sample in which the peak is most closely associated to the genomic feature is retained for further analysis. importantly, all cage-peaks are used by default but the user can set a more stringent threshold if desired  > 0). a detailed user guide can be found at  <cit> .

zipper plot construction
once the user’s input is uploaded to our website and the data type of interest has been selected, the data.table package  <cit>  is used to sort tsss from the user’s input in a chromosome-wise manner and to perform a fast binary search  time) in compiled c to retrieve the closest chip-seq/dnase-seq/cage-seq peak to each tss. it retrieves the “start” and “end” genomic coordinates of the closest peak, always considering the “start” as the part of the peak closest to the tss. the additional file 1: methods  contain three different examples on how these coordinates are determined.

the peaks are then ranked based on the distance from the tss to the “start” of the closest peak and a zipper plot is generated with the aid of the ggplot <dig> package  <cit> : peaks overlapping with the tss are placed at the top of the plot and the zipper starts to open as the peaks are located further away from the tsss. by default, the zipper plot is visualized in a +/−  <dig> kilobase  window around the tss but the window size can be adjusted by the user. figure  <dig> shows in detail how the zipper plot is built.fig.  <dig> the closest cage-seq/chip-seq/dnase-seq peak to each tss is rapidly retrieved using a binary search. a the process of finding the closest cage peak takes into account the strand information supplied by the user . if a tss is located on the positive dna strand , peaks with a genomic coordinate greater than the tss are considered downstream  of the genomic feature. if a tss is located on the negative dna strand , peaks with a genomic coordinate greater than the tss are considered upstream  of the genomic feature. peak widths and overall peak enrichment for each region  are simultaneously retrieved. b once the distances to the closest peaks have been retrieved they are ordered and placed on top of a vertical axis representing the tss. since the zipper plot is visualized  in a 5 kb window, peaks that are wider than 5 kb or are further away from the tss will not appear 




summary statistics and generation of html summary reports
in parallel with the construction of every zipper plot, two statistics named zipper height  and area under the zipper  are calculated. zh corresponds to the quotient between the number of genomic features with a peak overlapping with the tss and the total number of genomic features being studied . the auz_global is computed as the sum of all the areas between the closest peak and the tss of each genomic feature ” in the additional file 1: methods).

however, since the distribution of peaks upstream or downstream of the tsss can be asymmetric, auzleft  and auzright  are considered independently .

the closer the peaks are distributed around the tsss, the smaller the auz and the higher the evidence of independent transcriptional activity for the set of genomic features. a “closed zipper”  indicates an overlap between the closest peak and tss for all the genomic features being studied. we have also incorporated the auz_window, which depends on the window size choice  and is computed using only those peaks that lie within the window. the method virtually sets to 5 kb  all those distances that are located more than 5 kb away from the tss. this allows a quick visual comparison between two zipper plots built using the same window size. following the same reasoning as the paragraph above, we have incorporated both auz_window_right and auz_window_left separately. of note, zh and auz are negatively correlated.

a one-sided p-value  is calculated by comparing the auz of the zipper plot built with the user’s input to  <dig>  or  <dig> random zipper plots created by selecting as many random locations as the number of genomic features supplied by the user while maintaining the same distribution of tsss per chromosome. since truly random locations picked uniformly along the length of each chromosome are not representative of possible lncrna tsss, we have excluded from the selection those genomic regions containing gaps, centromeres, telomeres, heterochromatin and repetitive regions from  <cit>  using the bedtools suite  <cit> . the p-value is computed dividing the number of random cases with auz values smaller than or equal to the auz for the user case by the total number of repetitions. the p-value represents the chance of finding a random zipper plot with an auz_global smaller than or equal to the auz_global of the actual use case or, in other words, whether it is likely that the set of tsss chosen by the user was randomly selected or not. therefore, the smaller the p-value, the higher the likelihood your set of genomic features are truly independent transcriptional units.

when evaluating genomic features in one sample type, the closest peaks in that sample type are retrieved for both the random tsss and the user input. optionally, the closest peak in each sample type can be retrieved for each tss and, for each tss, a tss p-value is calculated comparing how many tissues have a peak as close  to the tss than the one found in the tissue chosen by the user.

on the other hand, if the user selects all sample types, the closest peaks among all possible sample types are retrieved for both the random tss and the user input. auzs are calculated and a p-value is calculated similarly to the case where the user selects one sample type.

eventually, the knitr package  <cit>  is used to generate an html report containing 1) the zipper plot; 2) all the aforementioned parameters/statistics; 3) a summary table listing closest peaks, peak widths and overall peak enrichment information.

validation and applications of the zipper plot
to assess the usefulness of our webtool, we first investigated a set of  <dig> well-characterized lncrnas proposed by  <cit> . the zipper plot created using only the fantom <dig>  data showed that  <dig> out of  <dig> lncrnas have a cage peak within +/− 5 kb from their tsss in at least one of the sample types present in our database . moreover, when also including h3k4me <dig> and dnasei  together with h3k4me <dig> and h3k27ac ,  <dig> out of  <dig> lncrnas have peaks within +/-﻿ 5 kb from their tsss . these results demonstrate that, while most of the well-characterized lncrnas have evidence for transcription initiation at or near their presumed tss, some may be incompletely annotated with respect to their tss. this is especially apparent from the cage-seq zipper plot .fig.  <dig> there is evidence of transcriptional activity for  <dig> out of  <dig> well-characterized lncrnas using the zipper plot. a zipper plot and associated statistics for the set of  <dig> well-characterized lncrnas proposed by  <cit>  using cage-seq data. even though the visualization contains a +/− 5 kb window, it is clear that the closest cage peaks for  <dig> lncrnas are within +/−  <dig>  kb from the tss. both auz_right_pval and auz_left_pval are smaller than  <dig> , suggesting that the set of tsss are more closely associated with cage peaks compared to random regions in the genome. b heatmap showing the distance between tsss and cage-seq, dnase-seq, h3k4me <dig>  h3k4me <dig> and h3k27ac peaks. darker colours represent peaks that are closer to the tsss. lncrnas marked with an asterisk do not have enough evidence of transcriptional activity. 




as a second example application of the zipper plot, we evaluated the transcriptional independence of all human lncrnas listed in lncipedia  <dig>   <cit> . we studied the distribution of the closest cage-seq peaks  around the tsss of all mono-exonic and all multi-exonic human lncrna transcripts   and found that  <dig> mono-exonic lncrnas  presented a cage-peak overlapping with the tss and  <dig>  had a peak within a +/− 5 kb window. on the other hand,  <dig>  multi-exonic lncrnas  presented a cage-peak overlapping with the tss and  <dig>   had a peak within a +/− 5 kb window . these differences, also reflected in greater auz_global values in the former case, suggest that numerous mono-exonic lncrnas might not be truly independent transcriptional units.fig.  <dig> fewer mono-exonic lncrnas have cage-seq peaks overlapping with their tsss compared to multi-exonic lncrnas. this is reflected in smaller zipper height  and higher area under the zipper  values. a) as described in the “database querying” section, users may provide an additional fourth column in the input file with labels for each tss . b) fantom <dig> data  and “all sample types” workflow was selected. c) ﻿the data.table package was﻿ used to retrieve the closest ﻿cage-seq peak to each tss.﻿ d) peaks are ranked based on the distance from the tss to the closest peak and a zipper plot is generated. since both plots are visualized in a +/− 5 kb window, auz_window values can be directly compared: smaller values  represent higher evidence of independent transcriptional activity for the set of genomic features being studied. this conclusion can also be made looking at the zh values: a bigger zh value means a higher proportion of lncrnas with a cage peak overlapping with the tss. finally, both auz_right_pval and auz_left_pval are smaller than  <dig> , so it is unlikely that the set of tsss from mono and multi-exonic lncrnas were randomly selected




we hypothesized that at least a fraction of mono-exonic lncrnas were actually extensions of utrs from upstream protein coding genes or genomic dna contamination. to further investigate this hypothesis, we first retrieved the intron lengths for all refseq protein coding genes   <cit>  and found that 80% of them are smaller than or equal to  <dig> nucleotides. in a second step, we artificially “stitched” mono-exonic lncrnas that do not have a cage peak within  <dig> nucleotides from their tsss to the 3′ end of any protein coding gene located within  <dig> nucleotides on the same strand. this process led to  <dig> mono-exonic lncrnas stitched to upstream protein coding genes.

if these lncrnas were truly unannotated portions of upstream coding genes, we should find junction reads spanning one exon from a protein coding gene and another exon from a lncrna. to evaluate this, we used rna-seq data from the cancer genome atlas   <cit>  and universal human reference rna  samples  <cit>  . since junction reads that are shared between exons of overlapping lncrnas and protein coding genes cannot be assigned unambiguously, they were excluded from the analyses. next, we established a minimum of at least one junction read linking a lncrna to an upstream protein coding gene and a minimum overlap of two nucleotides between the junction read and the protein coding gene exon and a minimum overlap of two nucleotides between the junction read and the lncrna exon.

strikingly, we found spanning reads for  <dig> out of the  <dig> cases  based on the tcga rna-seq data and for  <dig>  based on uhrr rna-seq data .

we also tried to stitch multi-exonic lncrnas that do not have a cage peak within  <dig> nucleotides from their tsss in the same manner as we did for mono-exonic lncrnas, resulting in  <dig> multi-exonic lncrnas stitched to upstream protein coding genes. we found spanning reads for  <dig> out of the  <dig> cases  based on the tcga rna-seq data and for  <dig>  based on uhrr rna-seq data . of all the junction reads from the tcga rna-seq data fou﻿nd to span a protein coding gene and a lncrna,  <dig> % of them﻿ entirely overlap with protein coding gene exons and  <dig> % of them entirely overlap with lncrna exons. on the other hand,  <dig> % of the junction reads from uhrr rna-seq data entirely overlap with a protein coding gene exons and  <dig> % of the junction reads entirely overlap with lncrna exons.

both tcga and uhrr samples shared junction reads for  <dig> mono-exonic and  <dig> multi-exonic lncrnas stitched to an upstream protein coding gene. table  <dig> shows the distribution of junction reads spanning a protein coding gene and downstream lncrna based on the tcga rna-seq data.table  <dig> distribution of junction reads  from  <dig> tcga samples connecting protein-coding gene exons with a downstream mono and multi-exonic lncrna

these junction reads suggest that the latter are actually extensions of untranslated regions from upstream protein coding genes. detailed information for each individual case can be found on additional file 3: table s2




these results support our hypothesis and reveal the need for a careful evaluation of lncrna 5′-boundaries using cage-seq data and histone marks as demonstrated here or alternative procedures such as 5′-race  <cit> .

to further expand the applicability of our tool, we plan to integrate publicly available data from methods that detect nascent rnas , to extend the number of samples when new data becomes available and to allow users to work with their own data.

CONCLUSIONS
we have created the zipper plot, a novel visualization and analysis method available as a webtool  <cit>  that allows researchers to quickly evaluate the reliability of the annotation of thousands of novel transcripts and lncrnas at the same time. using the zipper plot we found evidence of transcription for a set of well-characterized lncrnas and observed that fewer mono-exonic lncrnas have cage peaks overlapping with their tsss compared to multi-exonic lncrnas. using publicly available rna-seq data, we discovered more than one hundred cases where junction reads connected protein-coding gene exons with a downstream mono-exonic lncrna, revealing the need for a careful evaluation of lncrna boundaries.

we also recognize a limitation in our webtool: the presence of a cage-peak and activating histone marks at the tss is indicative of independent transcription, but the absence of such features does not imply the opposite. low abundant transcripts may not show up in the cage-seq data because of too low sequencing depth or the expression of the lncrna may be restricted to a tissue of cell type not  included in the cage-seq, chip-seq and dnase-seq database. importantly, tsss of rna transcripts reconstructed from rna-seq data might appear several nucleotides downstream of a cage-seq peak. particularly for low abundant rna transcripts, this inconsistency may be the result of an incomplete transcript assembly due to non-uniformity of read coverage towards 5′ ends and should be carefully examined.

