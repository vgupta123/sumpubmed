BACKGROUND
collections of protein interactions, gene expression vectors, metagenomic samples, and gene sequences containing thousands to hundreds-of-thousands of elements are now being analyzed routinely. clustering is often used to condense such large datasets into an understandable form: it has been successfully used on protein-protein interaction  networks to discover protein complexes and predict protein function, e.g.
 <cit> ; on gene expression data to find patterns in gene regulation and essential cell processes, e.g.
 <cit> ; and on metagenomic samples to identify new species, compare them to existing clades, evaluate the diversity of a population, and suggest interdependencies between them
 <cit> . in other words, clustering has become a ubiquitous part of analysis for large biological datasets.

there are many clustering algorithms available for numerical and network data, e.g.
 <cit> . each algorithm, and choice of its parameters, results in different clusterings. sometimes, clustering algorithms must resolve ties when generating modules or may be randomized. consequently, a single clustering algorithm may produce diverse partitions on the same data
 <cit> . clusterings may also change when the underlying data becomes increasingly noisy or displays variation under different conditions . in addition, considering many optimal and near-optimal partitions has been shown to improve the understanding of module dynamics and the strength of relationships between individual items
 <cit> . such clusterings may offer drastically different perspectives on the data, where assessing the commonalities and differences is of great interest.

there are several ways in which the problem of diverse clusterings has been addressed. some tools rely on a single clustering only and focus on module quality assessment, e.g.
 <cit> . comparing two or more clusterings at a time is usually done by computing a single metric, such as the jaccard or rand index
 <cit> , to compare clusterings side-by-side
 <cit>  or in a dendrogram
 <cit> . these approaches can easily compare a pair of clusterings, but are not extendable to greater number of clusterings. another approach is to aggregate multiple partitions into a consensus clustering
 <cit>  without delving into the differences between individual clusterings and, thus, disregarding possibly important information about the clusterings. finally, some approaches have made steps towards visual examination of multiple clusterings: king and grimmer
 <cit>  compare clusterings pairwise and project the space of clusterings onto a plane to visualize a clustering landscape, and langfelder et al.
 <cit>  investigate ways to compare individual modules across multiple conditions. however, none of these approaches offer a platform for a multi-level analysis of ensembles of diverse clusterings.

in the present study, we describe coral—a tool that allows for interactive and comprehensive comparison of multiple clusterings at different levels of abstraction. coral allows users to progressively move from an overview to analysis of relationships between individual data items. users may start by examining statistics on the data and individual clusterings, or by assessing the overall homogeneity of a dataset. users can then compare any two partitions in the ensemble in greater detail. larger scale trends become pronounced when groups of items that co-cluster often are automatically identified and highlighted. we also extend parallel sets plot
 <cit>  to show how individual items switch modules across clusterings. coral’s visualizations are interactive and are coordinated so that users can track the same group of data items across multiple views.

implementation
in coral’s design, we followed the visualization mantra coined by shneiderman
 <cit> : overview, zoom-and-filter, details-on-demand. at the overview level, coral displays dataset statistics and highlights the most similar and dissimilar clusterings; at the mid-level, “zoomed-in,” analysis explains similarities between clusterings through module comparison; the low-level analysis compares co-clustering patterns at the level of individual data items: the genes, proteins, or sequences. the displays are coordinated
 <cit>  so selecting data in one of the views highlights the corresponding items in the other views .

coral works with modules — groups of items closely related to one another according to some metric or property. for example, modules can constitute a collection of genes that get co-expressed together or proteins forming a complex. a clustering is a collection of modules and usually is an output of a clustering algorithm. users may also choose to group data according to attributes that come with the data such as cellular component or molecular function go terms and use that partition as a clustering. users may combine data from different experiemnts and across species so long as the data items that the user treats as homologous have the same ids across the dataset.

coral takes as an input the module files where each file represents a single clustering, and each line in the file contains a list of data items  from a single module, e.g. as produced by mcl, the clustering algorithm by van dongen
 <cit> . coral aggregates and visualizes these data through several connected displays, each of which can be used to answer specific questions about the clusterings. below, we examine a few such questions and describe how coral’s visualizations help to answer them.

how many and what size modules do clusterings have?
to gain a quick overview of their collection of clusterings, coral users may start the analysis by reviewing basic statistics about their data: number of modules per clustering, average module size, number of items that were clustered, clustering entropy
 <cit> , and percentage of data items that ended up in the overlapping modules. questions such as “do clusterings have the same number of modules?” and “are module sizes evenly distributed?” can be easily answered through these statistics. each statistic is shown as a bar chart, and each clustering is associated with a unique color hue that is used consistently to identify the clustering throughout the system. if a clustering contains overlapping modules, the corresponding bar in the chart is striped as opposed to a solid bar for the clusterings containing no overlapping modules .

which clusterings are the most and least similar?
coral computes similarity scores between all clusterings and visualizes the lower triangle of the similarity matrix in a ladder widget . the ladder compactly displays similarity scores for every pair of clusterings in the ensemble allowing for precise comparisons. coral offers a choice of several similarity measures to compare partitions: jaccard coefficient, mirkin metric, rand index, folkes-mallow metric, mutual information, variation of information, purity and inverse purity, and the f-measure
 <cit> . the ladder is color-coded as a heatmap with more intense blue cells corresponding to higher similarity scores and paler cells corresponding to low scores. clicking a cell updates the contents of a module-to-module comparison widget .

which modules are the most similar between the two clusterings?
a natural follow-up to finding a highly similar pair of clusterings is to review the similarities between their individual modules. is a group of interacting genes preserved between the two stages in the cell life cycle? is there a match for a given protein complex in the ppi network of another species? module-to-module comparison answers these questions and explains the origins of clustering similarity at a “zoomed-in” module level.

for a given pair k <dig> k <dig> of clusterings, coral calculates the jaccard similarity
j=|mi1⋂mj2|/|mi1⋃mj2| between every module
mi1∈k <dig> and
mj2∈k <dig> thus capturing the amount of overlap between the two modules. for every such module pair, coral displays the pair’s jaccard score and items in the union, intersection, left and right set differences. all module pairs are organized in a sortable table . the slider above the table allows the user to filter out module pairs for which the jaccard score is outside the slider’s range allowing users to focus on highly similar  modules. although module-to-module analysis is possible with the parallel partitions plot , the table offers a sortable and filterable view of the same data while supplying additional information . the module-to-module table shows only the module pairs with some overlap and easily scales to hundreds of modules, thereby offering a more compact and easily navigable alternative to a confusion matrix .

does this module appear in other clusterings?
the ability to track individual items and whole modules across multiple clusterings provides a high level of abstraction in clustering analysis: modules may split and merge as users switch from clustering to clustering. to afford an exploration at the module level, we have developed a parallel partitions plot — an extension of a parallel sets plot used in the analysis of categorical multivariate data
 <cit> . the parallel partitions plot represents each clustering as a horizontal band. the blocks comprising each bands represent modules, with the width of a block proportional to the number of items in that module. semi-transparent parallelograms between clusterings connect data items with the same name. that is, each item in a clustering will be connected to its copy in the band immediately below it .

the parallel partitions plot allows users to track individual items and whole modules across all partitions. to see whether a module splits or merges in other clusterings, users can select a module with a mouse while holding a shift key to highlight its members in every clustering in the plot . similarly, users may select individual items and trace them through every clustering band. the selections made in the parallel partitions plot propagate to other views making it easy to track the same group of items throughout the application. the plot is zoomable — users may zoom in to focus on a few items at a time or zoom out to see global trends across the ensemble. when the zoom level permits it, the plot displays the item labels.

the order of items in the clustering bands matches the order of items in the co-cluster matrix  as closely as possible, while at the same time attempting to minimize the amount of crossover between the parallelograms connecting items in the consecutive clusterings. however, the items in the bands must be placed inside their respective modules. we discuss an algorithm that finds a good ordering of items in the clustering bands in the methods section.

what other items are in the same module as a given item u?
a single clustering assigns a data item v to a module defining its cohort — a set of items in the same module as v. knowing the item’s module helps in assigning function to unknown proteins
 <cit>  and novel genes
 <cit> ; knowing that the item’s cohort is consistent across many clusterings increases the confidence of such predictions.

in coral, pairwise co-cluster memberships are aggregated in a co-cluster matrix <cit> . given a single clustering k, n = |k|, we define an n × n matrix ak to be k’s co-cluster matrix where its entries
aijk are: 

 aijk=0viandvjare in different modules ink1viandvjare in the same module ink. 

for some item pairs, co-clustering may be an artifact of a tie-breaking policy or a choice of an algorithm parameter: such item pairs may only co-cluster in few clusterings. on the other hand, we would like to know whether there were item pairs that co-clustered across most partitions in the ensemble. these cohort dynamics stand out if we sum up the co-cluster matrices to form a single matrix: 

 a+=∑t=1katk, 

 where akt is a co-cluster matrix for a clustering kt and k is the number of clusterings. here, the
aij+ entries equal k  for item pairs  that have co-clustered in all partitions suggesting a strong relationship between the items, and the low
aij+ values correspond to pairs that co-clustered in only a few clusterings and are more likely to have been assigned to the same module by chance. the cells are colored according to their values and vary from white  to red . users may zoom in and out on the matrix to focus on areas of interest.

the co-cluster matrix is hard to read unless similar rows and columns are placed near each other. reordering the rows and columns of a+ brings non-zero entries closer to the diagonal and exposes any modular structure. when clusterings are highly similar, the reordered matrix will consist of blocks along the diagonal with high
aij+ values . clusterings that are very dissimilar produce reorderings similar to figure
 <dig> — the diagonal blocks mostly contain low
aij+ values  with many entries away from the diagonal.
 <cit> . pink regions represent item pairs that were placed in the same module by very few clusterings while regions of more saturated red represent proteins that co-clustered in most clusterings. black indicates that the items never co-clustered. on the inset matrix, the matrix items under the green square formed a core. a large blue square overlay suggests that the core was tightly integrated into the rest of the network.  left: nodes that formed a core in  are colored green, the edges between the nodes within the core are colored blue. the inset to the right shows an isolated view of the core nodes , edges between core nodes , and nodes one hop away from the core nodes . green nodes share many edges with nodes outside of the core which resulted in the core’s low cohesion.

are there whole groups of items that co-cluster together often?
groups of items that end up in the same module across many clusterings are of a particular interest because they represent the robust subclusters in the data. such commonly co-clustered sets are called cores. items in cores form the most trustworthy modules and indicate particularly strong ties between data items, increasing, for example, the confidence in protein complex identification
 <cit>  and gene annotation
 <cit> .

in a co-cluster matrix, cores translate to contiguous blocks of high-value entries. coral finds the cores using a fast dynamic programming algorithm and highlights them within the co-cluster matrix . when users provide clusterings derived from a network, coral can augment cores with an overlay showing each core’s cohesion — the ratio ein/eout where ein is the number of edges within the core and eout is the number of edges that have one endpoint inside the core and another endpoint outside of it
 <cit> . when a core’s cohesion is low, the blue overlay is smaller indicating that the core shares many connections with the rest of the network . cores for which cohesion is high are more isolated from the rest of the network — these cores are distinguishable by the blue overlays that almost cover the core.

do items within a ground-truth clustering often co-cluster in other clusterings?
when validating new protein complexes or co-expressed gene modules, users may want to see how well their results match ground-truth clusterings such as protein complexes from mips
 <cit> , or sets of co-regulated genes from regulondb
 <cit> . in coral, users may designate a single clustering as a base — a set of trusted modules with which other clusterings are expected to agree. when in this mode, coral will only highlight those cells in the co-cluster matrix that are within the modules of the base and gray out all other non-zero matrix cells to bring users’ attention to the clustering in question. figure
 <dig> shows an example of a co-cluster matrix with the base set to be the a. thaliana modules reported in
 <cit> .
 <cit> .

in which clusterings do particular items co-cluster?
the co-cluster matrix displays the total number of times any two items were co-clustered, and the tooltips that appear after hovering over a matrix cell show a list of clusterings in which a given pair has been co-clustered. to facilitate sorting and search for particular item pairs, coral provides a companion table where each row represents a pair of data items and displays the number of times the items co-clustered along with the pair’s signature. the signature is a k-long vector where the tth element is  <dig> when both data items, say, proteins, have been placed in the same module in clustering kt. if the pair’s items were not in the same module in kt, the tth element is set to  <dig> 

visually, the signature’s elements that are  <dig> are drawn as tall solid columns and zeros are represented by the short stumps using the same color for each clustering as used in the overview statistics and in the parallel partitions plot. figure
 <dig> shows an example of two such pairs that have different co-cluster signatures suggesting that the relationship between the last two a. thaliana proteins is stronger than that of the first pair. users can sort the rows by either the item name, the number of shared clusterings, or by the co-clustering signature. users can also filter by the signatures to display only the rows matching a user’s pattern.

reordering the co-cluster matrix
the order of rows and columns in the co-cluster matrix is critical to extracting meaningful information from it. finding an optimal matrix reordering is np-complete for almost any interesting objective. algorithms for the optimal linear arrangement
 <cit>  and bandwidth minimization
 <cit>  problems have been used to reorder matrices with considerable success; however, both approaches perform poorly for matrices that have many off-diagonal elements. after comparing several reordering algorithms using the bandwidth and envelope metrics, we have chosen the spin
 <cit>  approach that consistently produced better results on a wide range of matrices.

this approach works as follows: given a matrix a+ , we solve a linear assignment problem  by mapping a+ ’s rows to their optimal positions in the matrix. in other words, given a bipartite graph g =  with r being the set of a’s rows, i a set of indices to which the rows will be assigned, and e all possible edges between nodes in r and i, we seek a matching between r and i with in a minimum cost. the edges connecting the row nodes to index nodes are weighted according to how well a row fits a particular index according to a metric that rewards rows that have non-zero entries close to diagonal and penalizes those rows that have weight away from diagonal: 

 w=∑j=1naij+|j−i|, 

 where w is the weight of assigning ith row to ℓth position, and the
aij+ values are the co-cluster matrix entries. after permuting a+ ’s rows, the columns of a+ must be permuted to match the row order, thus changing the weights w and making the row assignments found previously no longer optimal, so this process is repeated. in coral, we use two different solvers for the lap problem: a fast, greedy solver and the hungarian algorithm. the greedy solver matches rows to indexes by iteratively selecting the best row-index pair; it quickly finds a starter reordering that can later be improved by the hungarian algorithm. the hungarian algorithm solves the linear assignment problem optimally, but because a permutation of rows invalidates the ordering of the columns, the algorithm has to be re-run for several iterations to improve the reordering. we continue iterating lap until we get no improvement in assignment cost, observe a previously considered permutation, or exceed the maximum number of iterations.

identifying cores
given a reordered co-cluster matrix a, we want to find contiguous areas containing high co-cluster values . we rely on the notion of region density: 

  d=∑i=pq−1∑j=i+1qaij+|q−p|=s|q−p|, 

where a region is a square block on the matrix diagonal between rows p and q, and its density is the sum s of all matrix entries within the area divided by the area’s width |q−p|. alternatively, we can think of the co-cluster matrix a+  as a weighted adjacency matrix of some graph g, then d is the density of a subgraph s induced by the vertices p,…,q: d = |e|/|v|, where |e| is the sum of edge weights in s and v is a set vertices in s <cit> .

to find cores, we want to find areas on the diagonal such that the sum of their densities is highest. we do not allow the identified cores to overlap . we formulate the problem of finding maximally dense arrangement of areas as a dynamic program with the recurrence: 

 dopt=max1≤i<j{dopt+d}. 

 where dopt is the optimal area arrangement between 0th and jth item, and dopt  gives the optimal partition of a matrix a+ into cores.

assuming that densities d are precomputed and require only a constant time to look up, the dynamic program above takes o time . however, a brute force algorithm for computing the block sums s  in equation  <dig> must iterate through every pair  <dig> ≤ p < n, p < q ≤ n, each time computing a sum of
|q−p+1| <dig> entries, resulting in a runtime of o. this can be improved because the sums are related. we have: 

 s=s+∑i=pqai,q+ <dig>  

 making it possible to compute all s in o time. this reduces the total runtime to find cores to o = o.

the algorithm finds a series of areas of varying size and density. some areas are of no interest and were included in the series only because every block contributes a non-zero score to the total sum. to focus on the meaningful regions only, we filter out the cores with density less than the average density. to calculate the average density for a region p,…,q, we first compute an average cell value for a+ : 

 wavg=sz¯, 

 where
z¯ is the number of non-zero cells in a+ . we then define a probability of an edge existing in a graph induced by a+ : 

 p=z¯n− <dig>  

then, for a given ordering of the matrix a+ , let s be a subgraph induced by vertices p,…,q. then hpq = |q−p + 1| is the number of vertices in s and
hpq <dig> is the maximum number of edges s can possibly have. for this block, the expected block density would be: 

 davg=wavgphpq2hpq=sz¯z¯n−12hpq2hpq=hpq2shpqn− <dig>  

the areas that have density higher than their davg represent groups of data items that have co-clustered together more often than is expected by chance. hence, coral displays only these cores.

ordering in parallel partitions
when ordering clustering bands in the parallel partitions plot, we would like to put similar clusterings next to each other and avoid putting two dissimilar clusterings vertically adjacent. the intuition for such a constraint is that if the two clusterings ki and ki+ <dig> share many similarities, the bands connecting individual items between the clusterings will only cross a few times making it easier to track module changes. we also need to order items within the bands in a way that puts items from the same module next to each other and does not allow items from other modules to interleave.

to find a vertical order for the clustering bands, we apply a greedy algorithm that uses clustering similarity scores. first, we compute the similarity for every pair of clusterings sim using jaccard. next, we find the two most similar clusterings k <dig> k <dig>  add them to a list, and look for a clustering most similar to either k <dig> or k <dig> . we proceed by repeatedly picking the clustering that is most similar to the last clustering added to the list. the order in which clusterings were added to the list determines the order of the clustering bands.

we pursue two objectives when ordering items and modules within a single clustering band: items that belong to the same module must be placed next to each other, and the ordering has to be similar to the column ordering in the co-cluster matrix . to preserve the matrix ordering in clustering bands, each module is best placed in a position where most of its items are close to the matrix columns corresponding to those items. however, the order of the columns in the matrix may be such that two items u and v from the same module are far apart in a+ . we propose a heuristic to solve this ordering problem: given an ordering of the columns in the matrix a+ , for each module mi in clustering
k={m <dig> …,mki} we compute its rank based on how “displaced” items in the module are relative to the positions of the module’s items in the matrix: 

 d=∑u∈mji, 

 where i is the index of a column in a+ corresponding to the data item u. modules that should be placed first in the clustering band would have the lowest rank, so we sort the modules in order of increasing d, and the module’s position in the sorted array determines module’s position in the clustering band.

RESULTS
data
arabidopsis thaliana is a model organism widely used in plant science, but out of its  <dig>  predicted proteins one third still lack an assigned function
 <cit> . a recent publication reports a new protein interaction network for a. thaliana that covers a part of the plant’s proteome not studied previously
 <cit> . we have selected several clustering algorithms that are often used on ppi networks  and, for each of the algorithms, we have generated a clustering of the largest connected component of the a. thaliana’s network. to test the resulting modules for robustness, we compare this ensemble of clusterings to the modules reported by the authors of
 <cit>  who used a link-clustering method by ahn, bagrow, and lehman
 <cit> . prior to comparison, we filtered the newly generated modules using the same criteria as
 <cit>  by removing modules of size smaller than  <dig> and with partition density <  <dig>  the new modules were tested for go enrichment with funcassoc
 <cit>  .

statistics on clusterings of the largest connected component of the a. thaliana network. all algorithms were run using their default settings. mcode was run without “haircut” and no “fluff,” mcode.f included “fluff.” the table reports the number of proteins that were assigned to at least one module, the number of modules after filtering according to procedure used in vidal et al.
 <cit> , and the number of modules funcassoc
 <cit>  reported as enriched for at least one go annotation.

for our comparison, we have focused on the graph clustering algorithms for which the implementations were available . louvain <cit>  and clauset <cit>  are two algorithms that search for a network partition with highest modularity
 <cit> . both tend to find large clusters and usually cover most of the nodes in a network. cfinder <cit>  is a clique percolation method that identifies overlapping communities by continuously rolling cliques of an increasing size. resulting clusterings usually contain many small modules with a high amount of overlap and cover only a part of the network ignoring graph structures like bridges and stars. mcl <cit>  is a fast, flow-based clustering algorithm that uses random walks to separate high-flow and low-flow parts of the graph. its modules tend to be small and usually cover most of the input network. mcode <cit>  algorithm finds modules in biological networks by expanding communities around vertices with high clustering coefficient. “fluff” and “haircut” options for mcode allow to add singleton nodes connected to the module by just one edge and to remove nodes weakly connected to the module correspondingly. mine <cit>  is closely related to mcode, but uses a modified weighting scheme for vertices which results in denser, possibly overlapping modules. spici <cit>  grows modules around vertices with high weighted degree by greedily adding vertices that increase module’s density. the partitions contain many dense modules, but usually cover only a part of the network.

applying coral to a. thaliana clusterings
to get an overview of the data, we review various statistics on the generated clusterings. for the majority of the clusterings, modules that remained after filtering covered only a portion of the network. the two clusterings produced by the modularity-based methods, louvain and clauset, were the only clusterings that included more than 95% of all proteins into their modules. the number of modules per clustering varied significantly from  <dig> to  <dig> . the average module size was highest for clauset , louvaine , and the mcode.f  clusterings significantly exceeding the average module size among all other clusterings . for the original  <dig> a. thaliana modules
 <cit> , 3% of the proteins were assigned to more than one module; in the cfinder clustering over half of the clustered proteins  participated in multiple modules.

the nine a. thaliana clusterings are highly dissimilar: most cells in the ladder widget  are white or pale blue, and the majority of pairwise jaccard similarity scores are below  <dig> . mcl yielded the partition most similar to a. thaliana modules reported in
 <cit>   with jaccard similarity of  <dig> . surprisingly, the  <dig> modules generated by link clustering
 <cit>  shared very little similarity with cfinder, the only other algorithm in the ensemble designed to produce overlapping modules.

low pairwise similarity scores between so many pairs of clusterings is easily explained using the module-to-module table: clusterings with jaccard similarity below  <dig>  overlap by a few small modules or no modules at all. the similarity of  <dig>  between mcl and a.thal  may be attributed to the two big modules that are largely replicated between the two clusterings: the module m <dig> from mcl and the module m <dig> from a. thaliana  overlap by  <dig> proteins with jaccard similarity  <dig> . several smaller modules  are duplicated exactly between the two clusterings.

the co-clustering matrix for a. thaliana clusterings contains several large regions of co-clustered proteins along the diagonal , however, most cells are pale indicating that they were co-clustered by only a few clustering algorithms; very few matrix cells are close to the saturated red. indeed,  <dig> % of all co-clustered pairs of a. thaliana proteins have co-clustered just once across all of the nine clusterings used in the analysis and only  <dig> % of protein pairs were co-clustered in  <dig> or more partitions. this low number of protein pairs that were assigned to the same cluster means that the clusterings in the ensemble mostly disagreed.

the dynamic program for identifying cores found  <dig> areas in the a. thaliana network in which proteins co-clustered more often than could be expected by chance, with the largest core containing  <dig> proteins and with the average number of proteins per core of  <dig>  proteins. most cores, including the largest core, had low cohesion values indicating that the proteins forming the cores had many connections to proteins outside of the cores . this finding is correlated with the fact that the clusterings did not agree in general and only small sets of proteins were consistently clustered together across the ensemble.

finally, setting a.thal original to be the base clustering shows that the modules found by
 <cit>  covered only a fraction of modules found by other methods, although they included the largest core. the majority of a.thal original modules were colored pale pink indicating that modules found by the link clustering were found by no more than  <dig> other clustering methods. we trace the largest core in the parallel partitions plot : the proteins in the core are co-clustered by a.thal original, clauset, louvaine, mcl, and mcode.f while spici, mine, and mcode ignored the majority of core’s proteins completely. cfinder, with its many overlapping modules of size  <dig>   <dig>  and  <dig>  clusters some of the core’s proteins and puts a large part of the core in the grab bag group representing unclustered proteins.

discussion
clustering algorithms may generate wildly varying clusterings for the same data: algorithms optimize for different objectives, may use different tie breaking techniques, or only cluster part of the data items. a popular technique for optimizing modularity has been shown to suffer from a resolution limit
 <cit>  and multiple decompositions may have the same modularity value
 <cit> . when a true decomposition is available, the clustering quality can be quantified using the similarity score and the true positive and true negative rates. however, when there is no true clustering, it is hard to decide which clustering is better than the others. we propose that researchers generate several clusterings by either using different clustering algorithms or varying algorithm parameters. coral can help compare such clusterings and identify cores in which the data items co-cluster across multiple clusterings.

most views and statistics in coral work for both non-overlapping and overlapping clusterings. all overview statistics extrapolate well for overlapping modules except for entropy which assumes that no two modules overlap and therefore may overestimate the actual entropy. the co-cluster matrix naturally adapts to overlapping modules by allowing their corresponding blocks to overlap. currently, if a pair of data items co-occur in more than one module within a single clustering, their co-cluster value is set to  <dig> and is not weighted higher relative to other pairs. the parallel partitions plot assumes that the modules in individual clusterings do not overlap. however, if there are overlapping modules, parallel partitions will still lay out the modules in a line by duplicating the co-occurring element in every module in which it occurs.

although the examples we use in this paper are based on network clustering, coral does not require its input data to be a network partition and can be used with equal success on gene expression or classification data. in particular, if users would like to compare several classification results, they can do so in the same manner as we have demonstrated for the a. thaliana clusterings. the similarity measures of purity, inverse purity, and the f-measure implemented in coral are helpful in comparing classifications to the available truth. the module-to-module table is a more flexible alternative to the confusion matrix that is often used to evaluate classification results.

coral has been used to analyze clusterings of up to  <dig> items. the runtime varies with the number of clusterings, number of modules and data items per clustering, and the size of the modules. the startup operations — parsing the input clusterings, computing dataset statistics and all-to-all clustering similarities, as well as rendering the views — take from under a second to  <dig> seconds for clusterings from  <dig> to  <dig> data items. matrix reordering is the single biggest performance bottleneck for coral. reordering the co-cluster matrix for  <dig> a. thaliana proteins took, on average,  <dig> seconds when to reorder using the greedy heuristic and  <dig> seconds when to reorder using the hungarian algorithm. however, both the greedy heuristic and the hungarian algorithm find good orderings after very few iterations and the reordering only needs to be computed once before analysis. solutions for lap computed with the hungarian algorithm improve with every iteration and usually converge on a good reordering fast.

CONCLUSIONS
coral offers a comprehensive array of visualizations that allow users to investigate modules from various viewpoints inlcuding several novel views. coral guides users from overview statistics implemented as familiar bar charts to detailed cluster-to-cluster comparison in a table. the ladder widget, a lower triangle of the comparison matrix, helps users pick the most similar  pair of clusterings and to judge how similar clusterings in the dataset are overall. a color-coded co-cluster matrix shows how often any pair of items in the dataset have been placed in a module together. a novel adaptation of parallel coordinates, parallel partitions plot, makes tracking a group of items across clusterings easy with intuitive selection techniques. these views combined create a powerful tool for a comprehensive exploration of an ensemble of clusterings. coral can help users generate questions and hypotheses about the data that could be later definitively answered with the help of additional experiments.

availability and requirements
- project name: coral

- project home page:http://cbcb.umd.edu/kingsford-group/coral/

- operating systems: platform-independent

- programming language: java

- other requirements: java  <dig>  and 1gb of ram

- license: gnu gpl

competing interests
the authors declare that they have no competing interests.

authors’ contributions
ck and df conceived the project, df is the designer and developer for the application. ck provided design considerations and worked on developing some of the algorithms. ag implemented reordering algorithms for co-cluster matrix. df and ck contributed to final manuscript. all authors read and approved the final manuscript.

