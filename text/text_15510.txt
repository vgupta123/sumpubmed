BACKGROUND
large-scale discovery of repeat junction markers
centromeres are chromosomal regions that are essential for chromosome segregation during cell division. maize  centromeres span several megabases each and consist predominantly of repetitive dna that is enriched for the tandemly arranged centc satellite sequences as well as certain subfamilies of the retrotransposon family named "centromeric retrotransposons of maize"   <cit> . crm <dig>  crm <dig> and crm <dig>  as well as the non-autonomous crm <dig> element centa, can insert into each other, as well as into centc satellite repeats and other dna sequences found in centromeres. although these elements insert preferentially into active centromeres, they do not appear to target specific sequences.

due to their centromere-targeting integration mechanism, crm elements are excellent cytogenetic markers for centromeres  <cit> . however, genetic mapping requires the use of single copy molecular markers. the estimated  <dig> copies of crm elements are very similar to each other, but each retrotransposon insertion creates two "repeat junctions" that, due to the fact that retrotransposon insertion is not sequence-specific, have the potential to be unique even if the target sequence itself is a high-copy retrotransposon. any given repeat junction can be used in combination with the repeat junction of another element inserted nearby to create a single-copy marker  <cit> . mapping the highly repetitive crm elements, and thus the centromeres, using the "junction marker" approach therefore required the efficient identification of repeat junctions no more than  <dig>  kb apart in maize genomic dna sequence.

an added complication of using crm elements for repeat junction identification is that several crm subfamilies were discovered to contain two "parental" variants with about 80% identity that, in the case of crm <dig>  form at least  <dig> different recombinants with different periods of activity  <cit> . these recombinants contain up to  <dig> recombination breakpoints that separate segments that are close to 100% identical to one parent or the other, and would appear as repeat junctions if they were annotated using only the parental variants.

graphic display of sequence annotation
in addition to the centromere-specific repeat junctions, we wanted to display other important features in our graphical representation of centromere sequences. ltr retrotransposons, which represent >75% of the maize genome  <cit> , are named for their long terminal repeats, which are identical at the time of insertion and can be used to date the insertion time of each element  <cit> . we used mummer  <cit>  to identify the ltrs of unknown retrotransposons. although maize centromeres consist primarily of centromere-specific and other repeat elements, we expected them to also contain genes and organellar sequences based on the previously characterized rice centromeres  <cit>  and maize fluorescent in situ hybridization results  <cit> , respectively. furthermore, centromeric dna is marked epigenetically by the centromeric histone h <dig> variant cenh <dig>  and antibodies against this histone have been used successfully to immunoprecipitate centromeric dna in maize  <cit> . sequencing and mapping of such dna fragments is an efficient means for delineating the border of the functional centromeres  <cit> .

all of these features are detectable by sequence homology using widely available software such as ncbi blast  <cit> , wu-blast http://blast.wustl.edu/, cross_match http://www.phrap.org/, and mummer. since all crm elements are homologous to each other as well as to other retrotransposons at some level, we needed the ability to use different alignment parameters for different sequence features depending on the feature length and the level at which we wanted to distinguish related sequences .

sequence annotation is often displayed in a stacked format  with the intent of letting the user decide which features are important or real. the dawgpaws scripts  <cit>  run a variety of sequence similarity and gene prediction programs for finding genes and repeat elements, the output files of which are converted in subsequent steps into the gff format that can be read by a genome browser , but again the voluminous annotation is displayed in a stacked format. although the stacked format can be very useful for displaying variants of a given genomic region , this is not desirable for the display of repeats. instead, it was critically important that our software be able to select the single repeat subclass present at a particular genomic locus and display it in an easily comprehensible manner.

junctionviewer was developed to automate the process of discovering, filtering, and visualizing key features of the recently sequenced dna of maize centromeres. it allowed us to expediently sift through and understand these complex sequences, significantly decreasing the time required to analyze the centromere sequences of maize  <cit> . automatic reannotation of evolving genome sequences as they passed through the stages of finishing, as well as the ability to add relevant novel repeat classes as they were discovered in the emerging sequence, are two key applications of this software.

implementation
junctionviewer  is a perl script using the tk module to manage its gui and the bioperl module to parse biological data files . these modules can be obtained through cpan http://www.cpan.org/.

input to the script is provided by a single text file, which defines all user parameters. if no file is given the script generates a template file with comments describing argument fields.

the parameters file is composed of six sections: 1) general parameters , 2) ncbi blast parameters for each subject sequence database , 3) wu-blast parameters for each subject sequence database, 4) color schemes for displaying blast database sequences, 5) color assignments for cross_match subject sequence databases, and 6) custom annotation charts parameters .

the script runs nucleotide ncbi blast, wu-blast, cross_match, and mummer, and combines these results, as well as custom annotation data  into one graphical display per query sequence .

tick marks at the top of each display indicate sequence locations at  <dig> kb intervals. if  <dig> contiguous ns are found within the query sequence , a grey vertical bar is drawn. a secondary value below each tick mark represents the number of nucleotides relative to the end coordinate of the last gap.

below the query coordinates, custom data is represented as overlapping charts in two chart sets. different y-axes  may be used for each of the two chart sets . a numerical y-value can be assigned to each nucleotide on each chart, and a different color can be assigned to each chart. the y-axis is automatically extended to the largest value in a given chart.

in the current implementation, junctionviewer displays homology data in separate cross_match, blast and mummer panels. under the charts are displayed sequence homologies based on cross_match results that are represented as filled boxes. longer contiguously masked sequences are drawn over and eliminate shorter ones, unless the overlap is within a user-defined allowance . each masking database may be assigned a color. query sequence coordinates of the homologous sequences are also indicated.

blast alignments, shown as large filled arrows that indicate hsp orientation, are drawn below the cross_match results. start and stop coordinates are given for both query and subject sequences. parameters for each subject database are defined individually. all ncbi and wu blast hsps are combined and competed, i.e., longer hsps eliminate shorter overlapping ones if they correspond to sequences from different databases, unless the overlap is within a user-defined allowance. if hsps are generated from sequences within the same database, longer hsps will overlap but not eliminate shorter ones. this aids in the display of tandem repeats. each sequence in a blast database may be assigned a color. additionally, subsequence positions within subject sequences may be assigned different colors.

at the bottom of the display, exact sequence matches identified with mummer , are drawn as thin line arrows. solid lines indicate exactly matching sequence regions and are connected by dashed lines. direct and indirect repeats are colored red and blue, respectively. lines can be drawn on a fixed number of levels . the longest matches are drawn first on the top level, and smaller matches that overlap are drawn on lower levels until the number of levels is exceeded.

if a fingerprinted contig  assembly project exists for the query sequences, the project file  can be provided as an argument and the script will label and sort the query sequences in the gui and name postscript output files based on their positions in the fpc project. this is useful for labeling individual annotated bacs of a set , which facilitates subsequent arrangement in the correct order .

results can be viewed through the junctionviewer gui or from postscript file results. within the gui, the number of nucleotides displayed per pixel can be modified, thus changing the zoom of the resulting image. postscript files are created automatically each time that a given sequence is visualized in the gui by either highlighting the id and pressing the "display single selection" button, or by pressing the "process all displays" button. postscript files can be converted into other graphic file formats and imported into microsoft® powerpoint®, enabling the display of entire centromeres or other regions spanning 5- <dig> megabases. we routinely use junctionviewer to analyze  <dig> kb genomic fragments that overlap by  <dig> kb to ensure that features of  <dig> kb or less  are drawn completely at least once.

on an amd athlon™  <dig> processor 3500+  with  <dig> gb  <dig> mhz ddr <dig> ram running fedora™ linux, it took  <dig> minutes  <dig> seconds to generate graphical displays of the two  <dig> kb centromeric chromosome  <dig> sequences shown below. maximum ram memory usage is  <dig> mb and output files, including postscript output, total  <dig> mb.

junctionviewer  <dig>  can be setup and used in four steps: 1) the installation of supporting software , 2) populating a parameters file, 3) revising the parameters file as necessary after testing with previously characterized sequences, and 4) using the refined parameters file to automatically annotate uncharacterized sequences .

although defining all parameters for each repeat and algorithm takes some time during the initial setup for each new organism, this up-front cost is quickly compensated by the ease with which large tracts of genomic dna can subsequently be analyzed and reanalyzed as genome sequence is improved.

RESULTS
prior to our discovery of recombinant crm subtypes, we displayed sequence features in shotgun reads  using a junctionviewer  <dig>  script that generated stacked annotations. this was effective for screening short reads for junctions using a small set of distinctly different repeats, i.e., crm <dig>  crm <dig> and centc. the coordinates determined by the software were subsequently used to manually design primers across junctions, but alternatively the junctionviewer output could be used to generate primer sequences automatically.

the maize genome sequencing consortium  <cit>  produced large  assembled bac sequences that made finding pairs of nearby junction sites easier, but also resulted in junctionviewer  <dig>  displays becoming cluttered and difficult to interpret . novel recombinant crm elements were discovered during the sequencing phase, and these needed to be differentiated in our graphical displays. at the same time we needed to visualize a number of other features, including gene homologies and cenh <dig> associated sequences.

we therefore developed junctionviewer  <dig>  to automatically generate compact graphical representations of only the best fitting annotations for the larger and more complex bac sequences. with this software we were able to distinguish and visualize not only the  <dig> centromere-enriched subfamilies of crm  <cit>  but also five major subgroups of crm <dig>  <cit> , as well as other repeat types and gene coding sequences as condensed graphical representations. the centromeric repeats we selected for representation were ltrs from  <dig> subfamilies of crm <dig> , as well as crm <dig>  and crm <dig>  polyprotein coding sequences  of these three crms were displayed in the same color. differently colored crm ltrs flanking cdss were used to identify the crm element types. we chose not to draw the utrs since these highly variable and low-complexity regions are difficult to consistently detect. we also displayed ltrs and cds of the non-autonomous centromeric retrotransposon centa, the centromeric tandem repeat centc, non-centromeric "maize repeats"  <cit> , "maize genes", "maize organelle" sequences, and "rice genes" . we did this by adjusting the parameters used for each of the sequence databases.

we developed our junctionviewer parameters by estimating the score obtained for a near-perfect match to each of the different sequence databases and subsequent testing of those parameters using a set of characterized sequences . for example, we set the score-equivalence threshold  of wu-blast to 10% less than a perfect complete match in order to distinguish crm <dig> and crm <dig> ltrs. the detailed process of refining the parameters to achieve the desired sensitivity, specificity and resolving power will vary - in some cases we had to fine-tune the parameters until the features we wanted to visualize were properly displayed by the software. we set mummer to report exact sequence matches >=  <dig> nt.

we used the top section of the junctionviewer  <dig>  display to plot the coverage of cenh3-associated centromeric sequences that had been obtained by chromatin immunoprecipitation followed by pyrosequencing . three categories of pyrosequencing reads were created based on the number of occurrences in the genome sequence, and visualized using  <dig> graphs and two different y axes. plots were generated based on the number of reads covering a given nucleotide, e.g., a nucleotide covered by two reads was assigned a value of  <dig> 

for bacs, which can overlap considerably with neighboring bacs, pyrosequence reads that mapped to one or two bacs in a set representing the genome  were used to create two charts sharing one y-axis. the first chart displayed nucleotide coverage for reads that mapped to only one location within the bac. the second displayed coverage for reads that mapped any number of times within that bac. a third chart was used to display coverage for reads that mapped any number of times to any number of bacs in the genome set. this third chart was plotted in the same display region as the first two but on a separate y-axis under the others .

juntionviewer was used to generate over  <dig> potential junction marker primers resulting in  <dig> junction markers that were used to map all  <dig> centromeres of maize. in addition, the visualization of gene homologies located within the repeat-rich centromeres helped us identify  <dig> single copy markers that we used to confirm the chromosome assignments of centromeric bac sequences  <cit> .

next, we utilized junctionviewer  <dig>  to automatically visualize the centromeric features within several megabases of centromeric dna sequence of the zmb73v <dig> maize reference chromosomes  <cit> . for the custom annotation charts we created graphs using cenh <dig> associated reads that mapped uniquely, twice within one reference chromosome, or any number of times within the genome. we cut the reference chromosomes into  <dig> kb fragments that overlap by  <dig> kb, and used the parameters we had developed previously to visualize the major features within two centromeres. this enabled us to automatically obtain graphical representations of centromeres  <dig> and  <dig> as scalable postscript images that were printed on poster paper to allow visualization of up to  <dig> mb of contiguous centromere sequences .

visualizing centc and crm arrangements in centromeres  <dig> and  <dig> revealed that crms in both centromeres frequently inserted into tandem centc arrays. expanded junctionviewer displays of centromere  <dig> also illustrated a very distinct crm <dig> and crm <dig> distributions, as well as the presence of about one megabase of chromatin in the middle of centromere  <dig> that is free of cenh <dig>  junctionviewer images also facilitated the quantitation of  <dig> reads derived from chromatin immunoprecipitated with anti-cenh <dig> antibodies that mapped uniquely to crm elements located within and outside of the functional centromeres  <cit> .

using mummer exact sequence match representations we were able to identify ltrs of retroelements with high probability, reducing the time to discover and date the insertions for these elements. as an example, we were able to identify two non-crm retroelements that had inserted into crm <dig> and crm <dig> sequences based on mummer match and non-centromeric repeat homology depictions in junctionviewer output . the graphical representation of mummer results also revealed the presence of tandem repeats even where the sequence was unknown .

CONCLUSIONS
rapid and customizable annotation will become increasingly important as the rate of genome sequencing accelerates. junctionviewer was developed, and is particularly suited, for automating the process of running, filtering, and graphically combining the best-fitting features of complex repeat sequences. it automatically merges various types of annotations across numerous and large regions of genomic dna, and generates concise graphical representations of sequences, ranging in length from less than  <dig> kb to multiple megabases, that can be interpreted quickly. the concise graphical representations generated by junctionviewer were critical for gaining insights about the sequence organization of maize centromeres. this software was designed to visualize key features of maize centromere sequences; however scientists may find it useful for annotating repeat-rich regions in other organisms. another potential application of this software is the display of other sequence coverage data, e.g., illustration of the coverage of bacterial genome assemblies by short read shotgun sequences together with competed gene features to detect horizontal gene transfer.

availability and requirements
• project name: junctionviewer

• project home page: http://junctionviewer.sourceforge.net/

• operating system: platform independent

• programming language: perl

• other requirements: bioperl, perl tk, ncbi blast and/or wu-blast, mummer, cross_match

• license: gnu gplv3

• any restrictions to use by non-academics: gnu gplv3

list of abbreviations used
bac: bacterial artificial chromosome; cds: coding sequence; cenh3: centromeric histone h <dig> variant; centa: centromeric retrotransposon of maize similar to crm3; centc: centromeric tandem repeat of maize; chip: chromatin-immunoprecipitation; crm: centromeric retrotransposon of maize; fpc: fingerprinted contigs; hsp: high-scoring segment pairs of a blast result; ltr: long terminal repeat of a retrotransposon; mgsc: maize genome sequencing consortium; oma: oat-maize addition; pcr: polymerase chain reaction; tigr: the institute for genomic research; utr: untranslated region of a retrotransposon.

authors' contributions
the software was conceptualized by tkw and ggp, and written by tkw. this manuscript was written and approved by tkw and ggp.

supplementary material
additional file 1
junctionviewer  <dig>  package. the gzipped tar  contains the juntionviewer  <dig>  package including the main program, documentation, and example files. please see http://junctionviewer.sourceforge.net/ for the latest version.

click here for file

 additional file 2
junctionviewer  <dig>  setup and usage. junctionviewer  <dig>   can be set up and used in four steps: 1) install supporting software which enables jv to run, 2) define parameters for testing on a set of characterized sequences, 3) refine parameters until output matches what is expected for the characterized sequences, and 4) edit the refined parameters file to automatically process uncharacterized query sequences.

click here for file

 additional file 3
junctionviewer  <dig>  display of a bac sequence assembly fragment. this junctionviewer  <dig>  display of a  <dig>  nt bac sequence assembly fragment includes graphical overlays  indicating the type of sequences represented and where primers were designed. "zea repeats" means tigr zea repeats v <dig>  database  <cit> . cross_match and blast results show the similarities between centa and crm <dig> ltrs, which both align along the central part of the fragment. the difference is great enough, however, that this region can clearly be assigned to centa. in this case, the unique junction sites were found between crm <dig> and centa.

click here for file

 additional file 4
list of annotated sequences. this table lists centromere features that are represented graphically in junctionviewer  <dig>  images of maize sequences, as well as a description of the sequence files used to detect each feature.

click here for file

 additional file 5
centromere  <dig>  graphical representations are drawn for  <dig> kb regions overlapping  <dig> kb along  <dig>  mb of zmb73v <dig> reference chromosome  <dig>  including the centromeric and pericentromeric sequences. several kb of plastid  sequence appears at the edge of the centromere. the central regions include a complex mixture of centc tandem repeat arrays  interrupted by various repeated sequences . notably, crm <dig> and crm <dig> elements  dominate this section of the genome. additionally, numerous nested retrotransposon insertions appear to have had a deleterious effect at least on the contiguity of centc arrays.

click here for file

 additional file 6
centromere  <dig>  graphical representations are drawn for two  <dig> kb regions overlapping by  <dig> kb along the central centc region of centromere  <dig> . as in centromere  <dig>  centc and crm sequences are relatively abundant and have been subjected to numerous insertions.

click here for file

 additional file 7
junctionviewer  <dig>  display of nested retrotransposon insertions in the interstitial region of centromere  <dig>  the presence of non-crm ltr retrotransposons and order of insertions are apparent and were confirmed by the dating method of sanmiguel et al.  <cit> : first a crm <dig> element inserted into the genome , followed by a crm <dig> , then the left non-crm ltr retrotransposon  inserted into the crm <dig>  and finally the non-crm ltr retrotransposon  jumped into the crm <dig> sequence. this order of nested insertions is in accord with mummer sequence match representations, where longer match lines between ltrs correlate with younger elements.

click here for file

 additional file 8
junctionviewer  <dig>  reveals the presence of a tandem repeat. the foreground chart plots chip read match coverage results by blast   <cit> . this image displays the plots created using uniquely matched reads  and reads matching any number of times in the genome . the stack of  <dig> grey vertical bars on the left of the display indicates the presence of a reference chromosome gap . to the right is a smaller assembly gap  represented by one grey vertical bar. between the gaps, red arrows at the bottom represent >=  <dig> nt exact sequence matches as reported by mummer. these arrows indicate the presence of a tandemly repeated sequence that was subsequently confirmed to be maize knob tandem repeat.

click here for file

 acknowledgements
we thank anupma sharma at the university of hawai'i for help with the crm datasets. this work was supported by nsf grant # <dig> 
