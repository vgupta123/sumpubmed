BACKGROUND
our realization of the complexity of signaling networks that regulate cellular physiology is growing commensurate with the rapid growth in biological knowledge. it is now clear that biological pathways that govern cellular development and responses to environmental challenges are not linear, parallel and independent, but rather form an intricate web of interlocking processes tightly controlled by various logics of positive and negative feedback loops  <cit> . given this high degree of complexity, it is essential to develop computational means for processing, presenting and analyzing cellular signaling networks. however, at the present time most biological knowledge resides as free text in archives of scientific journals. before this knowledge can be processed by computers, it has to be transformed into symbolic form using highly structured languages. the need to represent biological knowledge in a formal language within electronic knowledge-bases  is well recognized and several ontologies have been defined and electronic repositories have been established in recent years. many of them  focus on metabolic pathways in lower organisms, which at present are the most characterized pathways. kbs are also being developed for signal transduction pathways in higher eukaryotes together with supporting network visualization packages .

biological kbs are also becoming essential to the analysis of data obtained by high-throughput functional genomic and proteomic technologies. for example, when the effect of a certain perturbation on the cellular transcriptome is examined, hundreds of genes typically respond. one way to understand the biological meaning of the observed response is to systematically integrate these results with current biological knowledge and then search for pathways that are significantly enriched for responding genes. genmapp  <cit> , kegg  <cit> , and cytoscape  <cit>  are examples of tools that provide such capabilities in various forms.

we are developing spike  as a tool to help researchers integrate, visualize, interpret and share existing and novel information on cellular signaling networks, and to boost the biological interpretation of wide-scale 'omic' datasets. spike's db already contains extensive and highly curated data on signaling pathways in human cells related to dna damage and other stress responses, cell cycle checkpoints, apoptosis, and innate immunity signaling, in addition to data from massive screenings for human protein-protein interaction. the main feature that distinguishes spike from other extant signaling kbs is its design and implementation as a community tool. our vision is that the manually curated tier of the db will be populated by a distributed and highly collaborative effort undertaken by multiple groups in the research community, where each group contributes data in its field of expertise. to meet this goal, both the modeling scheme used in spike for the representation of signaling pathways and the process of data upload by end users are kept very simple, making spike a highly flexible and agile platform for storing, sharing and analyzing data on cellular networks.

implementation
overall architecture
spike is composed of three main software components: 1) a database  of biological signaling pathways with an interface that supports data uploading and querying by multiple end-users. carefully curated information from the literature as well as data from large public sources constitute distinct tiers of the db. spike db is implemented using mysql as the db management system . 2) a java-based visualization package that allows interactive graphic representations of regulatory interactions stored in the db, dynamic layout and navigation through the networks, and superposition of high-throughput genomic and proteomic data on the displayed maps. 3) an algorithmic inference engine that analyzes the networks for novel functional interplays between network components, and enhances the analysis of omic datasets .

modeling scheme
spike uses a formal modeling scheme in which information on signaling pathways is summarized in a structured language amenable to computerized manipulation and analysis. the scheme is based upon three fundamental requirements: first, it should be of sufficient expressive power to capture information on most aspects of regulatory pathways. second, it should focus on signaling rather than metabolic pathways, and on the regulatory interplays maintained between network components . third, the scheme should be kept simple in order to ease data input by the spike user community. such input is crucial as our long-term goal is to have the manually curated tier of the db populated primarily by the users' community.

with these considerations in mind, we adopted  an 'entity-relationship' scheme over a 'state transition' one. the 'state transition' scheme regards different post-translational modified versions of a protein as separate entities , visually represents them as distinct nodes in the map, and seeks to trace the transition between these states. the 'entity-relationship', on the other hand, does not distinguish between different modified states of a protein and does not look for such state transitions; it focuses, rather, on the regulatory effects maintained between different proteins within a signaling network . in a state transition scheme , representation of signaling pathways could become extremely complex due to combinatorial growth of possible states . an entity-relationship scheme  is much simpler, having all these states represented by only one protein entity, but at the price of not accounting for possible temporal order constraints on the state transitions .

the entity-relationship scheme we designed for spike is based on two basic types of objects: "biological entities" and "relations".

biological entities
spike's modeling scheme comprises four types of biological entities:

a. gene/rna/protein
genes  are the primary atomic elements of the scheme. to avoid ambiguities, only characterized human genes that are assigned a formal designation by the human genome nomenclature committee  are included in spike's gene space. these objects are uniquely identified by their entrez gene ids  <cit> . for simplicity, we decided not to define distinct objects for genes, their transcribed rnas and translated proteins, and their modifications. see below a discussion of scheme limitations. non-protein coding genes  are also included in this entity type.

b. family
a family is a group of isoform genes  with high sequence homology and whose encoded proteins share most of their biological activities. well known examples are the jnk family, which includes the jnk <dig>  jnk <dig> and jnk <dig> proteins , and the p <dig> family, which is comprised of four p <dig> isoforms .

c. complex
a complex is a group of proteins  that carry out a specific function only when associated with their complex mates. an example is the dna-damage sensor mrn complex, which is composed of the proteins mre <dig>  rad <dig> and nbs <dig>  <cit> . the complex entity supports a nested structure, namely, a complex can be built from sub-complexes.

d. small molecule
this entity enables the modeling scheme to include descriptions of regulations involving small signaling molecules such as gtp, camp, ca++, etc. signaling molecules in spike are identified using their id in the chebi db  <cit> .

in contrast to genes/proteins and small molecules, no controlled nomenclature is available for designating families and complexes. for these entities we use the most common name in the literature.

relations
the second type of object in our modeling scheme is relations. the scheme defines three types of relations:

a. regulation
every regulation in spike is defined by a triplet of the following simple form: source, regulatory effect, and target. for example, "atm activates tp53", and "cdkn1a inhibits the cdk2-ccne complex". a regulatory interaction can be defined between any two biological entities, or between a biological entity and another regulation. a regulation can have one of three regulatory effects: "promote/activate", "inhibit/repress", or "unknown". each regulation  is associated with several attributes: the biochemical mechanism by which it is driven , one or more supporting references, quality level and status flag for quality control , and the submitter/data source.

the fact that our scheme allows one regulation as the target of another enhances its expressivity. first, it enables us to describe regulations that affect only a subset of downstream regulations emanating from an entity, as illustrated in figure 3a. second, it improves the specificity of the description, as demonstrated by the comparison between figure 3b and figure 3c. for regulations that act on other regulations, an additional attribute is added: the physical target, which specifies the physical entity on which the biochemical interaction is exerted .

b. interaction
much data exist on pairs of proteins that are known to physically interact, but whose regulatory effect is not yet understood. interaction relations represent such physical interactions, which, unlike regulations, are symmetrical rather than directional. each interaction is defined by the two participating proteins, and has the following attributes: the experimental method used to identify it , supporting reference, quality and status flags, and the submitter/data source.

c. containment
this type of relation is used to define the relationship between families/complexes and the members they contain.

limitations
spike's modeling scheme is intentionally simple, facilitating easy input to the db by many end-users. despite its simplicity, the scheme can describe most key aspects of signal transduction pathways. however, at this stage it deliberately does not account for metabolic reactions, splice variants, cell types and cellular compartments, or for any quantitative aspects of regulations. it also deliberately avoids distinction between a gene and its rna and protein. spike focuses on regulatory effects maintained between components within signaling networks. we found that for our goals it is not essential to explicitly model the layer in which the regulatory effect is exercised . however, information on the specific biochemical mechanism is stored in the db, being one of the attributes attached to each regulation. while spike's modeling scheme can accommodate data on any signaling pathway from any organism, at present the implemented db supports data obtained only in human cells .

despite these limitations, spike's design is flexible enough to allow its adjustment to support many of the above features in the future, as biological knowledge expands and standard ontologies and nomenclatures become widely accepted.

RESULTS
the database
spike db contains data from three sources: 1) relations uploaded manually by spike curators and users; 2) relations imported en masse from external signaling pathway dbs . 3) wide-scale protein-protein interaction datasets that resulted from high-throughput screens in human cells. currently, the datasets reported by stelzl et al.  <cit> , rual et al.  <cit> , lim et al  <cit>  and ewing et al.  <cit>  are incorporated. table  <dig> summarizes the current status of the db.

spike defines a user hierarchy of four levels: guest, user, curator and admin. users at the second level and above are privileged to upload new relations to the db . a privacy mechanism was implemented that allows users to mark as 'private' entries submitted to the db. such entries can be accessed only by the laboratory that submitted them. this feature is used for including data in the pre-publication phase. curated data uploaded manually to date have focused mainly on pathways related to dna damage responses, cell cycle regulation, apoptosis, innate immunity and stress responses. data loaded en masse from external kbs and high-throughput datasets cover all aspects of cellular physiology.

the issue of data quality is addressed by several means. first, only privileged users are allowed to upload data to spike db. such a privilege is granted only to labs with established expertise in their research field. second, each submission is assigned a quality level and a status flag. the quality level is set by the user who uploads the regulation and reflects the reliability he/she ascribes to it; in general, relations derived from highly focused biochemical studies are assigned high quality, while those derived from high-throughput experiments are assigned low quality. the status flag is set to 'draft' at the time of submission. spike designated curators review all new submissions, decide whether to accept, edit or reject them, and set the status flag accordingly.

the current version of spike employs a decentralized db architecture that supports automatic database synchronization. a local copy of the db is installed along with the software in each research lab, and these dbs are periodically synchronized with the central db. a detailed description of spike db synchronization mechanism is provided in appendix a. having local installation of spike db ensures a genuine and full support for private data. data are exchanged between the local and central dbs using the spike xml schema that we defined for this purpose . additionally, the spike xml serves as the primary import/export format in which all the information stored in the spike db is available. consequently, this information can be electronically manipulated by any interested party and may be readily incorporated into other external kbs. to facilitate data exchange, we implemented a program that converts spike data to the standard biopax format . the content of spike db is available in this format from our website. however, due to differences in the representation, biopax cannot fully convey all the information stored in spike xml.

the visualization module
the pathway visualization module allows dynamic network representation of selected biological data stored in the db and gradual navigation through it. researchers can manipulate the network map interactively, control its layout, expand or collapse selected segments, and retrieve further information on both biological entities and regulations. spike's four types of biological entities are displayed in the maps using nodes of different colors . although the modeling scheme does not distinguish between a gene and its rna and protein products, given the growing data on regulatory roles played by micrornas in various signaling pathways, protein-coding and non-coding genes are displayed using different colors. the three types of relations  are denoted by distinct types of edges .

salient features implemented in spike's visualization module include:

• dynamic navigation and expansion of maps. double clicking on a node leads to the addition to the map of all its direct neighbors meeting the quality-level threshold set by the user.

• retrieving further information on genes and regulations. clicking on a gene's pop-up menu opens its entrez-gene web page. clicking on an edge's pop-up menu allows opening abstracts of the supporting citations from pubmed. in addition, a properties description panel displays more details about each object, in addition to the information supplied in the map itself .

• data filtering. a filtering mechanism allows users to display only data filtered according to different parameters, such as status flag, quality level, data source, and data owner.

• graph layout. automatic and manual layout mechanisms can be used to facilitate organization of the maps. edges can also be moved and manipulated by the user to improve the layout of the map.

• a 'recycling bin' enables users to temporarily hide specific nodes and edges in order to improve clarity of the displayed maps.

• superposition of omics data on the maps. this utility facilitates the biological interpretation of microarray and other high-throughput measurements. for example, coloring maps according to gene expression levels might point to pathways that are active in the analyzed dataset . spike's node coloring mechanism is very flexible and allows the coloring of nodes according to any node partition defined by the user .

• maps built and laid out by the user can be saved and reloaded for further analysis and manipulation. the map files are saved using the spike xml format. this also allows exchange of detailed signaling maps among spike users.

we have built network maps for several key cellular signaling networks, including maps for the p <dig> and atm networks, cell cycle, apoptosis, and mapk and tlr signaling. the maps are posted on the spike website. importantly, these are not static maps: they are linked to the spike db, so when loaded by the user they can be further expanded . in addition, updates to the db are automatically reflected in the map . this ensures that the maps posted on the site are continuously synchronized with the db. spike users can join the collaborative effort, building signaling maps for pathways that are in the focus of their research, and contributing these maps to the community by posting them on the spike web site.

the algorithmic engine
spike's algorithmic engine is designed to include various graph-theory algorithms that analyze the network, characterize its topological properties, integrate omics data to identify functional modules in the network, and suggest novel regulatory interplays between components. at present, we have implemented three basic utilities:

• path finding
this utility finds and displays all direct paths, up to a pre-defined maximal length, that connect source and target nodes specified by the user . this utility supports also undirected edges . however, by default, undirected edges are excluded from this analysis as such links are much less informative than directed ones. the user can choose whether to include or exclude interactions .

• interconnections within a set of genes/proteins
given target sets of genes/proteins provided by the user , this utility displays all the direct connections among nodes within each set  .

• enriched maps
given target sets of genes/proteins uploaded by the user, the utility searches for signaling maps enriched for nodes included in one of the target sets. enrichment scores are calculated using the hypergeometric distribution and are computed with respect to a given background set . maps that are significantly enriched  are listed in the results table. clicking on a map's link in this table opens the enriched map, in which target set nodes are highlighted .

installation
spike can be downloaded from  <cit> . it has two modes of installation: a stand-alone tool  and a community tool . installing the evaluation mode  is straightforward: it requires the execution of a single file, and installation is completed by a few clicks. it also provides a mechanism for automatic software upgrades and maintenance. this installation is currently limited to microsoft windows 2000/xp os and requires ad-hoc procedures for synchronization of data with the central spike db.

a research group that wishes to join the spike community should fill-in an online form available at spike website and have the tool locally installed in its "standard installation" mode. the standard mode of installation grants the user full functionality of the tool. mainly, it supports synchronization between the site and the central db and can serve several users on different machines within one internal network site . it requires installation of the mysql db server on one machine on the site. detailed installation instructions are provided on the website. this installation mode allows data submitted at the site to be shared with the entire spike community , and enables that site to benefit from the data submitted by other sites. the standard installation supports windows, unix and mac os.

CONCLUSIONS
spike provides the research community with a powerful integrated kb of signaling pathways in human cells. the tool helps researchers integrate, visualize and interpret existing and novel information on cellular networks. it can be of great utility both for labs whose research is focused on specific processes and networks , and for 'omics' labs that strive for comprehensive, systems-level delineation of cell functioning.

gene/protein-centric labs can utilize spike as a central repository for regulations and interactions involving genes, proteins and processes that are in the focus of their research, and greatly benefit from data uploaded by other labs in the same research field. as a pilot case, at present we are focusing our curation effort on signaling pathways that are induced by dna damage , and are building a community of spike users in the dna damage research field. any biologist in this community can find spike very useful in addressing simple queries such as 'which proteins are directly regulated by p53?', 'is there a pathway that connects two genes whose knockdown results in a similar hyper-sensitivity to dna damage?'. in parallel, we encourage and support the establishment of additional sub-communities that cover other aspects of cellular physiology.

labs that carry out wide-scale 'omics' experiments can utilize spike's analytic and visualization features to mine meaningful biological hypotheses out of the data , and present them in lucid, aesthetic network graphs. the flexible coloring schemes implemented in spike make it very powerful for this task. for example, using spike we built network maps in which gene nodes were colored according to the kinetics in which they were induced in the dataset that we analyzed and according to regulatory-elements that we identified in their promoter regions  <cit> .

spike is under continuous development and we plan to enhance several functionalities in future versions. it will be upgraded to a web-based system that will enable its use over the web without local installation. it will be developed into a multiple-species kb. visualization capabilities will be enhanced by adding hierarchical and other graph layout mechanisms. we are currently implementing an interface between spike and our expander package for analysis of microarray data  <cit>  aimed at creating one streamlined process for handling such data, beginning in the very early preprocessing stage of data-normalization and ending with integrating the results with knowledge on signaling networks. we are also using high-throughput results to develop algorithms for the identification of 'connected modules' and 'hot-spots' in the network . in parallel, we will continue to populate the spike db, supervise its quality, and build additional maps for pivotal signaling pathways.

availability and requirements
project name: spike

• project home page: 

• operating system: windows, unix or mac.

• programming language: java

• other requirements: java  <dig>  or higher, mysql db server

• license: free for non-commercial users

• any restrictions to use by non-academics: license needed

authors' contributions
re, ys and rs designed the functionality of tool and coordinated its development. rv, na, iu, iz and ja developed the system architecture, wrote the code and tested it. no, gs and rb implemented an earlier version of the system. re also populated the database and performed beta testing. gm and mw are the principal curators of spike. all the authors have read and approved the final version of the manuscript.

appendix a – db synchronization
spike's db synchronization module makes it possible for remote sites to receive and send updates from/to the central db. below we describe the logic of db synchronization as implemented for remote sites and for the central site.

a snapshot of the central db saved in xml format on the spike web site, and is updated periodically. upon initiation of the synchronization process at the remote site, spike downloads the latest version of the central db from the web site and compares it with the local db. all entities in the spike db are tagged with an internal accession id. this id is unique, yet it is possible that the same object will temporarily have different accession ids in different dbs . therefore, objects in the central snapshot that match those present in the remote db are first sought using spike accession id, and then by searching for objects with identical defining components. for example: families and complexes are defined by the set of their genes/proteins members; a regulation is defined by its source, target and effect.

the synchronization process first handles entities and relations that are present in both the local and central dbs, starting with matching biological entities and proceeding to matching relations. the tool identifies differences between matching objects  and handles these differences by the following logic: each db change that is applied by a remote site is attached with a change-id, and for each remote site there is a record  for the last change that was already reviewed by a curator at the central site. then, if an object that is present in both dbs is attached with a change-id that is smaller than the last-review-change-id , then the object's version of the central db prevails and overwrites the local version. otherwise , the local version of the object prevails and remains as is.

following the handling of objects that are present in both dbs, the procedure handles objects that exist in only one of them: objects that exist only in the local db remain as they are and objects that exist only in the central snapshot are added to the local db. at the end of the synchronization process, the application provides the user with a summery of the updates made to the local database and creates an xml snapshot of it, which is sent to spike central site. importantly, data uploaded at the remote site and flagged as private are excluded from the snapshot, ensuring the confidentiality of such data. a curator at the central site will review the snapshot sent by a remote site and integrate it into the central db.

the logic of db synchronization carried out at the central site is similar to the one of the remote sites with the major difference that while at remote sites local db changes due to synchronization are exerted automatically, at the central site all db changes are presented to and manually reviewed by a curator . these changes include differences between objects that are present in both dbs and whose remote change-id is higher than the last-review-change-id of that remote site, or objects found only in the remote db. the curator examines these differences and decides which to approve  and which to reject. a decision to reject may involve a discussion with the author of the change in order to understand the cause of disagreement. the status flag of changes approved by the curator is set from draft to approved. the central database is updated by the application according to the curator's decisions. when the update is completed, the last-review-change-id parameter of the corresponding remote site is updated, and a new snapshot of the central database is posted on the web site in xml format.

we have thoroughly tested the synchronization module and implemented an automatic benchmarking suit that examines proper functionality of the module both at remote and the central sites under different db change scenarios . a typical db synchronization takes approximately  <dig> minutes on a pc with at least  <dig>  gb ram.

appendix b – benchmarking of db synchronization
we have implemented an automatic benchmarking suit that examines proper functionality of the db synchronization module both at remote and the central sites under different db change scenarios as listed below.

remote side
the tested scenarios for the remote site are:

 <dig>  addition of a group by the remote-site – should not be affected by synchronization

 <dig>  deletion of a group by central – should be removed from the remote site after synchronization

 <dig>  addition of a group by central – should be added to the remote site after synchronization

 <dig>  editing of an existing group locally – should not be affected by synchronization

 <dig>  editing of an existing group by central – should be updated at the remote site after synchronization

 <dig>  editing of an existing group both locally and by central – should not be affected by synchronization

 <dig>  same tests for regulations and interactions.

central side
the tested scenarios for the central site are :

 <dig>  a group deleted at the central site still exists in the remote site – the group should not be restored by synchronization

 <dig>  addition of a group by central – should not be affected by synchronization

 <dig>  addition of a group by the remote site – should be added to the central site after synchronization

 <dig>  editing of an existing group by the remote site – should be updated at the central site after synchronization

 <dig>  editing of an existing group by central – should not be affected by synchronization

 <dig>  editing of an existing group both by a remote site and by central – should accept remote changes

 <dig>  same tests for regulations and interactions

appendix c – spike xml
as the information stored in the spike database is fundamentally different from that stored in reaction-based database, the widely accepted biopax and sbml formats were not found to be suitable for conveying spike pathways. we thus developed a specialized xml schema for describing a spike pathway. importantly, the same xml format is used for all communications between spike sites and for storing pathway maps. also, the format is extremely simple and can be easily used for converting information to and from other formats. examples of xml files can be found on the spike website .

on the top level of the xml, <spikedatabase> conveys general information on the version of the database from which the pathways were extracted. on the next level the following information is encapsulated into three blocks:

• <siteblock> contains information about spike sites, intended for internal use of spike. each site is represented by a single <site> tag

• <buildingblock> contains information about the basic entities in spike.

• <regulationblock> contains information about the regulations contained in the pathway.

• <interactionblock> contains information about the interactions contained in the pathway.

the <buildingblock> contains entities referring to single genes/proteins or gene/protein groups:

• a <gene> entity refers to a gene/protein and is linked to an entrezgene identifier through an <xref> tag. information about the graphical properties of an entity, its description and aliases are given in the <display>, <description> and <alias> tags, respectively.

• a <group> entity contains information about the two groupings supported by spike: complexes and families. these two groupings are distinguished by the type attribute of the entity. the members of the group are described in <member> entities, each referring to an identifier of another entity from the <buildingblock>.

the <regulationblock> contains <regulation> entities describing regulations within the pathway. recall that regulations in spike are directed events  as opposed to mere interactions . the constituents of the regulation are referred to by the <source>, <target> and <physicaltarget> entities. note that while the target of a regulation can be any entity from the <buildingblock> or from the <regulationblock>, the physical target and the source are always entities from the <buildingblock>. literature support for each regulation entity is given in a <reference> entity.

the <interactionblock> is generally similar to the <regulationblock>. it consists of <interaction> entities, describing an undirected connection between a pair of entities from the <buildingblock>, which are referred to by the <proteina> and <proteinb> entities.

as an example, below we give spike xml statements for the three cartoon cases shown in figures 3a–3c. for clarity, we include only the core parts of spike xml format and leave out additional attributes, such as links to other databases, visual settings and information on the source and quality level of the regulations.

   <regulation id="b→c">

<source ref="b"/>

<target ref=" c"/>

<physicaltarget ref="c"/>

   </regulation>

   <regulation id="b→d">

<source ref="b"/>

<target ref=" d"/>

<physicaltarget ref="d"/>

   </regulation>

   <regulation id="b→e">

<source ref="b"/>

<target ref="e"/>

<physicaltarget ref="e"/>

   </regulation>

   <regulation id="a--| ">

<source ref="a"/>

<target ref="b→c"/>

<physicaltarget ref="b"/>

   </regulation>

   <regulation id="chk2--| p53">

<source ref="chk2"/>

      <target ref=" p53"/>

      <physicaltarget ref=" p53"/>

   </regulation>

   <regulation id="mdm2--| p53">

<source ref=" mdm2"/>

      <target ref=" p53"/>

      <physicaltarget ref=" p53"/>

   </regulation>

   <regulation id="chk2--| ">

<source ref="chk2"/>

      <target ref="mdm2--| p53"/>

      <physicaltarget ref="p53"/>

   </regulation>

supplementary material
additional file 1
curator's report for db synchronization. when synchronizing the central db with a snapshot of a remote site db, all db differences are reported to the curator at the central site in such a report table. the curator manually reviews it and decides which changes to accept and which to reject.

click here for file

 acknowledgements
the development of spike, formerly called sharp, was supported by grants from the a-t children's project, by a converging technologies grant from the israeli science foundation, and by esbic-d: european systems biology initiative for combating complex diseases, a coordinated action under the eu sixth framework call for life sciences, genomics and biotechnology for health. r. elkon was supported by an eshkol fellowship from the ministry of science, israel. i. ulitsky and i. zohar were supported by fellowships from the edmond j. safra bioinformatics program of tel aviv university. we thank anna pavtulov for her contribution to the development of the system.
