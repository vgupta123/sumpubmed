BACKGROUND
a reference genome for a species makes it possible to represent genomic features from different sources in a common reference. examples of such features can be genes, methylation status or histone modifications. the common reference enables analyses of the relationship between these features, e.g. computing the distance between a gene and a regulatory element. in order to perform such computations generically, a common coordinate system on the reference genome is needed.

formally, a reference genome coordinate system is a system that uses coordinates to uniquely determine the positions of bases in the reference genome. until recently reference genomes have exclusively been represented in linear form, meaning that there is only one path from the beginning of each chromosome  to the end. this enables a coordinate system where each base can be uniquely identied by the chromosome id and the offset from the beginning of the chromosome. an example of a coordinate is chr <dig>  offset  <dig> , <dig>  written more compactly as chr14:150m. a genomic interval can then be represented unambiguously by two such coordinates, the start and end position of the interval. such a linear representation simplifies genomic arithmetics, done by e.g. bedtools  <cit>  and the gsuite hyperbrowser  <cit> .

a problem with linear reference genomes is that they are unable to represent variation within a species, making them incapable of adequately representing features from individuals that are very different from the reference. a solution to this problem is to use sequence graphs as reference structures .

in addition to the  <dig> primary chromosome assemblies, the newest human reference genome, genome reference consortium human build  <dig> , contains  <dig> alternative loci, regions with significantly different sequences between individuals. grch <dig> can be represented as a sequence graph by connecting the alternative loci to the primary chromosomes . generally, a sequence graph can represent genomes from one or more individuals along with additional variation data. each vertex in the graph represents a dna-sequence of one or more base pairs, and each edge connects two consecutive sequences in the genome. examples of the use of sequence graphs are de-bruijn graphs in de novo assembly , the software project vg  <cit>  that has built a framework for representing variation data on graphs, the fastg  <cit>  and gfa  <cit>  formats, as well as in certain applications for genotyping  <cit>  and multiple sequence alignment  <cit> .
fig.  <dig> coordinates in grch <dig>  a visualization of alternative loci in the igh and the serpin region on chromosome  <dig> in grch <dig>  the main path is shown in black and an alternative locus in blue. b a closer look at coordinates in the igh region, with coordinates obtained from hierarchical partitioning  and sequential partitioning . on the alternative locus, the coordinates are the same, as this is a separate region path in both partitionings. using the sequential partitioning, coordinates on the main path are more similar to those on the alternative loci




referencing positions and intervals on graph-based reference genomes poses challenges not present with linear reference genomes. first, positions such as chr1: <dig> will be ambiguous if there are multiple positions on chromosome  <dig>  on different paths, having offset  <dig>  second, intervals represented by only a start and an end coordinate will be ambiguous, since there can be different paths taken within the interval. for instance, there is no standard method of representing genes that are partly on alternative loci in grch <dig> 

in this article we address these issues by discussing suitable coordinate systems and proposing interval representations for graph-based reference genomes, using grch <dig> and its alternative loci as an example.

RESULTS
coordinate systems on graph-based reference genomes
the newest human reference genome, grch <dig>  can be seen as a graph. defining a coordinate system on such graph-based reference genomes has been discussed by marschall et al.  <cit> . they propose that nearby bases should have similar coordinates , that coordinates should be concise and interpretable , and that coordinates should increment along the genome . in addition, we propose that the coordinate system should be backward compatible, meaning that if the reference graph has been updated, coordinates from a previous version of the graph should preferably still be valid and unambiguously refer to the same bases in the new graph.

spatiality and readability are useful in order to manually check the validity of results obtained from a computer analysis, while backward compatibility removes the need of updating all previous data when updating the reference graph. an update to the reference genome can include various types of alterations to the graph, e.g. edge/vertex removal or vertex merging, but here we will only look at updates in which new paths are added to the graph.

in this article, we discuss a class of coordinate systems which we denote as offset-based coordinate systems. in offset-based coordinate systems, coordinates consist of a region identifier and an offset that is counted from the start of the region. offset-based coordinate systems include those used on linear genomes today, with chromosome ids as region identifiers and offsets counted from the beginning of each chromosome, e.g chr1: <dig>  this class of coordinate systems has intuitive and readable coordinates, and two coordinates representing bases close to each other in the genome will be similar. also, computing the distance between two coordinates within the same region is as simple as taking the difference between the offsets.

offset-based coordinate systems can be defined on graph-based reference genomes by partitioning the graph into a set of non-overlapping linear sequences, which we denote as region paths. there are different ways to divide the reference genome into region paths, and this is what separates different offset-based coordinate systems from each other. here we will discuss two variants, which we refer to as hierarchical and sequential partitioning .
fig.  <dig> region path partitions. a hierarchical partitioning. the graph is partitioned into the main region path  and an alternative region path  with its own alternative region path . b sequential partitioning. the graph is partitioned into unambiguous region paths. both the top and bottom layer are divided into three region paths




the hierarchical partitioning
the most common way of referencing positions on grch <dig> today is using an offset-based coordinate system. this coordinate system is obtained by what we define as hierarchical partitioning: choosing one main region path through the graph, and defining alternative loci as alternative region paths.

thus, the offsets for positions on the main region paths are counted from the beginning of each chromosome, and offset for positions on alternative loci are counted from the beginning of each alternative locus. this can be extended to graphs with more layers of alternative loci  by choosing a main region path for each layer, and defining its alternative loci as region paths .

this coordinate system is backward compatible, since adding a new path to the reference will not change the existing coordinates. however, spatiality is not fulfilled .

the sequential partitioning
an alternative to the hierarchical partitioning is to also divide the main paths wherever an alternative path starts or stops . thus, adding a new alternative path to the reference graph will lead to three new region paths on the main path . this change in the partitioning breaks backward compatibility, since coordinates on the old region path are changed when updating the graph. thus, in order to keep backward compatibility, one needs to keep record of what region path the three new region paths come from, which will make it possible to map coordinates on the old region path to coordinates on the new one.

naming schemes
naming individual region paths is not straightforward, as there are multiple criteria that can be in conflict with each other: the ability to deduce from the names whether two region paths are variants of each other , whether they are close to each other along the genome , and which comes first in the genome . two naming schemes are commonly used in grch38: the genbank sequence accession number   <cit> , and a combination of the region name and the assembly-unit . the first naming scheme fulfills none of the above criteria, whereas the second only fulfills vertical spatiality.

achieving all three criteria can be a challenge when new region paths are added. for instance, when a region path is added between two existing region paths, the name of the new region path should ideally indicate that it is closer to each of the other two region paths than they are to each other, something that can result in less readable region path names after many iterations of changes to the reference genome. in some cases, it is possible that the best solution is a naming scheme not fulfilling all criteria; sacrificing efficiency in updating the reference graph and ease of manually inspecting data for a more lightweight coordinate system.

interval representations on graph-based reference genomes
a genomic interval on a graph-based reference genome can either be a single path between two vertices  or a set of paths between two vertices . we here propose a method for representing single-path intervals, and present possible methods for representing multipath intervals, on offset-based coordinate systems.

single-path intervals
a natural way to define a genomic interval in a graph-based reference genome is as a single path between two vertices. such an interval should be represented unambiguously. when using a linear reference structure, the demand for unambiguity can be satisfied by storing the start and end coordinates of the interval. on a graph-based reference genome, this will not give unambiguous intervals if there is more than one path between a start and an end coordinate in the graph.

to resolve this problem, the representation must indicate which path the interval follows in the graph. the minimal solution is to indicate which region paths the interval follows wherever it is ambiguous. an interval can then be represented as a list containing the start and end coordinates in addition to information about the region paths followed by the interval.

an example of a genomic interval represented this way is , which denotes the interval from offset  <dig> to 150m on chromosome  <dig> going through the region path igh-alt <dig> and the region path serpin-alt <dig> . this representation does not indicate that the interval follows the main path between the igh-alt <dig> and the serpin-alt <dig> region paths, since the path taken here is unambiguous.

however, we argue that also including information about unambiguous paths will improve readability . in the above example, this would make it possible to deduce that the interval follows the main path in between the igh and the serpin regions. the interval would then be represented as . this representation is equivalent to including a region path identifier every time the identifier changes . if the coordinate system is backward compatible, intervals defined on the coordinate system will also be backward compatible, since the intervals can be uniquely determined by a set of  coordinates .
fig.  <dig> an interval spanning the region paths a, d, c and f. using the minimal notation, this would be represented as , but with the proposed full notation the c region path is also included: 




multipath intervals
the representation of single-path intervals on complex graphs may become unreadable due to the number of region paths that need to be specified. moreover, the exact path of an interval, e.g. what snp variations a gene has, may not be of interest. in such cases multipath intervals can be appropriate.

one way of representing multipath intervals is to explicitly list all paths included in the interval representation, which will lead to less concise representations on complex graphs. alternatively, one can only explicitly list the start and end coordinate of the interval, and implicitly include all paths between those. while this leads to more concise representations, it cannot represent intervals that only follow a subset of the paths between the start and end vertex. we propose two alternative representations, combining the principles of explicitly representing paths and implicitly inferring paths from the representation, to achieve a better trade-off between expressive power and conciseness.

the critical subpaths representation uses a set of critical subpaths to denote all paths between the start and end vertex that traverse all the critical paths. using this representation, one can allow variation in some regions, while being specific in others. for instance, genes can be represented this way by specifying exonic regions as critical paths, and interpret the gene as all paths through these.

the fuzzy path representation uses a central path between the start and end vertex, along with a threshold, to denote all paths deviating from the central path with a distance less than the threshold. different definitions of the edit distance can be used, for instance global edit distance or the maximum of local edit distances . figure  <dig> shows an example of different ways to represent two intervals using single- and multipath intervals.
fig.  <dig> multipath intervals. illustration of two genomic features represented by single-path intervals . assuming that which paths are taken between a and e is irrelevant, as long as they go through c, both can be represented by the same critical multipath interval a
 <dig> e
 <dig> critical=c. the same can be achieved by using a fuzzy interval with either of the two singlepath intervals as a main path and a threshold of  <dig>  since the edit distance between region path c and f is  <dig>  note that if using a threshold of  <dig>  both region path b and b
∗ cannot be contained in the same multipath interval




both these methods have the ability to represent intervals at different levels of resolution, either by specifying more or fewer critical subpaths, or varying the threshold parameter. large genomic areas, such as the human leukocyte antigen  super-locus in the human genome, can be represented at low resolution, large elements such as genes can be represented with higher resolution and small elements such as mapped reads can be represented at the highest resolution, accurately representing their exact sequence.

example: genes on grch38
we here show how our proposed interval representations can be used on graph-based reference genomes, by representing grch <dig> transcript variants from the refseq gene database  <cit>  on graphs created from grch <dig>  first, we show how the single-path interval representation gives a more natural image of these transcript variants. second, we show how multipath intervals can be used to represent transcript variants on a more detailed graph.

representing transcript variants using single-path intervals
the alternative loci of grch <dig> contain regions at the beginning and end with identical sequence to the main path. these flanking regions provide contexts to the non-flanking parts — the varying regions of the alternative loci. when creating a graph from grch <dig>  these contexts are provided by the connections to the main path, and so the flanking regions are unnecessary. thus, we create a graph by removing these flanking regions from the alternative loci and connecting only the varying regions of the alternative loci to the main path.

the refseq database contains  <dig> transcript variants on the alternative loci of grch <dig>  and  <dig> transcript variants on the main path , each identified by a refseq transcript identifier. we look at pairs of alt-locus transcripts and main-path transcripts that have the same refseq transcript identifier, to show how our single-path interval representation can give a clearer image of these pairwise relationships.

we represent all refseq transcripts on the graph created from grch <dig>  by representing each transcript as a list of single-path intervals . since some transcript variants  span multiple region paths, we need our, or a similar, interval representation to be able to represent them. also, by using sequential partitioning, it is easy to see whether two transcript variants are on parallel paths in the graph. we categorize all alt-locus transcripts based on their relationship with their corresponding main-path transcript. these categories are illustrated in fig.  <dig>  table  <dig> shows the number of transcripts in each category. these result show that there are alt-locus transcripts that have been unnaturally cut on the alt locus border . also, eight alt-locus transcripts on the flanking regions do not have a copy on the corresponding part of the main path . it is possible that these alt-loci transcripts should have been removed or that a corresponding main-path transcript should have been included .
fig.  <dig> five types of alt-locus transcripts. category a : alt-locus transcripts on flanking regions that have nearly identical copies on the main path. category b : alt-locus transcripts on the varying regions that have similar transcripts on the main path. category c : alt-locus transcripts that are partly on flanking regions, and have similar transcripts on the main path. category d : alt-locus transcripts on the flanking regions that have copies somewhere else on the main path . category e : alt-locus transcripts on flanking regions that have copies on the main path that also extend outside the alternative locus


categories are described in fig. 5





representing transcript variants using multipath intervals
we also show how multipath intervals can be used to compare alt-loci transcripts with main-path transcripts. to do this, we create a more detailed graph by using the alignments of the alternative loci to the primary assembly generated by ncbi  <cit>  to merge the alternative loci to the main path. this creates a graph where the regions on the alternative loci that have common sequence with the main path are merged to single paths interspersed with diverging paths representing insertions, deletions or snps. we represent transcript variants  on this graph using two different multipath interval representations — critical subpaths and fuzzy path multipath intervals. table  <dig> shows the number of alt-loci transcripts that on this graph have an identical representation to a main-path transcript. these results show that by representing transcript variants as multipath intervals, the number of duplicate representations for a transcript variant can be reduced .
number of alt-locus transcripts that can be represented with the same multipath interval as a main-path transcript




software
we have created a python package, offsetbasedgraph, that can be used to represent intervals on offset-based graphs, available at https://github.com/uio-cels/offsetbasedgraph. an interactive web-tool using this python package to visualize transcript variants on a graph created from grch <dig> can be found at https://github.com/uio-cels/genomicgraphcoords , along with instructions for running the gene experiments presented in this section. additional file  <dig> shows an example of the notation for transcript variants from grch <dig> 
fig.  <dig> example from the web tool. visualization of two sequence-graphs, both around region  <dig> on chromosome  <dig> from grch <dig>  created by the web tool. a simple graph with the alternative locus is shown at the top. on the bottom, a graph created by removing the flanking regions from the alternative locus before connecting it to the main path. two genes  are shown. on the top sequence graph, these genes are on separate paths. by removing the flanking regions and using our notation for genomic intervals , we see that uc284nkk. <dig> and uc058yja. <dig> are very similar. both end at the same position within a flanking region, and, barely visible from the figure, they have approximately  <dig> base pairs each at the beginning that are different




CONCLUSIONS
after more than three years since the release of grch <dig>  only a few bioinformatic tools are using its alternative loci, viz. bwa-mem  <cit> , ibwa  <cit> , gsnap  <cit> , and srprism  <cit> . in order to realize the potential of this additional data in grch <dig>  one needs a common framework for referencing positions and intervals in the reference genome. an offset-based coordinate system makes it possible to reference positions, but there is currently no standard approach to reference intervals in graph-based coordinate systems.

we propose a simple way to unambiguously represent genomic intervals by including information about all region paths covered by the interval, as well as the start and end coordinates, using an offset-based coordinate system. we also present ways of representing multipath intervals, and show how these can be used to represent genes on a graph created from grch <dig>  being able to represent genomic intervals on graph-based reference genomes makes it possible, for instance, to analyse a gene on an alternative locus in grch <dig> with epigenetic data  from the main path.

working with graph-based genomes will inevitably lead to complications not present with linear reference genomes. while the coordinate system for linear reference genomes is simple and achieves our discussed criteria , a graph-based coordinate system will be much more complex and only partially meet these criteria. thus it is necessary to weigh the different criteria, as well as the overall goal of simplicity, against each other in order to find the most suitable coordinate system.

with a system for representing genomic intervals on graph-based reference genomes and a common coordinate system, researchers can begin to utilize more fully the potential of grch <dig> and future graph-based reference genomes.

