BACKGROUND
protein interaction datasets are typically presented as graphs , in which the nodes are proteins and the edges represent the interactions between the proteins. these graphs can be used to investigate the functions of unannotated proteins through their interactions with neighbouring annotated proteins. protein interaction datasets frequently contain many false positives and false negatives,  but studies have shown that true positives are frequently associated with areas where there are many interactions between neighbours . for example giot et al  <cit>  used independent datasets to remove false positives from a large-scale protein interaction dataset and as a result were able to demonstrate that true positives had a strong positive correlation with the clusters. spirin and mirney  <cit>  found that clusters of highly interconnected proteins are significant features of protein interaction networks. these could not have occurred by chance and are therefore likely to represent groups of proteins that have co-evolved to serve a common biological function. identification of clusters is therefore likely to capture the biologically meaningful interactions in large scale datasets.

edge-betweenness clustering  <cit> , the method used here, has been exploited in the social and ecological sciences to study communities  <cit>  and in the study of biochemical pathways  <cit> . it has proved to be a useful and adaptable method. as discussed by holme et al  <cit>  edge-betweenness uses properties calculated from the whole graph, allowing information from non-local features to be used in the clustering. many other clustering methods, which have proved useful for clustering protein interaction graphs, are based on calculation of local quantities such as node degree   <cit> . these 'local' methods will exclude nodes with a low degree e.g. the many prey nodes attached to their bait by a single edge, which are common in yeast two-hybrid  datasets. methods using whole graph properties will automatically include these poorly connected nodes in clusters  <cit> , whilst a 'local' method would need to restore such nodes in a post-processing step  <cit> . clusters created using edge-betweenness clustering are therefore useful when the information associated with these nodes is required. other methods based on whole graph properties will also have this advantage, for example markov clustering  <cit> . a discussion of different clustering methods can be found in  <cit> 

we applied the edge-betweenness method to a set of human protein interactions from our laboratory  <cit> . in these experiments interactions were identified using the y2h method. for comparison, two datasets of yeast protein interactions  <cit>  were also analysed. one yeast dataset also used the y2h method  <cit>  whereas the other was prepared using affinity purification  <cit> . the functions identified for clusters by the automatic method were compared with the expert biologists' interpretations presented in these papers.

RESULTS
allocation of go terms
differences in clustering between the datasets
the three datasets used differ in content, purpose, size, structure and species. a more detailed description of each dataset is given in the 'methods' section and in table  <dig>  but briefly, the gavin and uetz datasets were large scale screens of the yeast proteome, not focused on particular metabolic pathways, whereas the lehner dataset is focused on a few metabolic areas/complexes related to the human mhc class iii region. while lehner and uetz both used the y2h method to detect protein-protein interactions, gavin used a combination of affinity purification and mass-spectroscopy. the two yeast datasets  have approximately 5× more nodes than the lehner dataset. whilst the gavin and uetz datasets have roughly the same number of nodes, the gavin  dataset has twice as many edges  as the uetz  dataset. the affinity purification method  retrieves fairly stable complexes of proteins whereas the y2h method detects direct protein-protein interactions which may be weak or transient.

from tables  <dig> and  <dig> it can be seen that the affinity purification dataset gives much bigger clusters with the removal of a similar proportion of edges, when compared to the y2h datasets. when 15% of edges were removed from the gavin dataset, the clusters  had an average of  <dig> nodes whilst for uetz the average was just over  <dig> nodes. the lehner dataset fell between these values. diagrams showing the lehner dataset before and after clustering are presented in additional files  <dig> and  <dig> 

the choice of the number of edges removed needs to be guided by the dataset and problem under consideration. a number of criterion could be used.  range of cluster sizes: to decide what a sensible distribution of cluster sizes would be, the range of sizes of clusters found by affinity purification was used as a guide. gavin  <cit>  reported the distribution of cluster sizes as follows:-51% had 1– <dig> nodes, 18% 6– <dig> nodes, 15% 11– <dig> nodes, 6% 21– <dig> nodes, 4% 31– <dig> nodes, and 6% >  <dig> nodes. in order to emulate this type of distribution with the automatic clustering  it is necessary to remove more than 13% of edges from the uetz and lehner datasets and more than 25% from the gavin dataset. therefore it is necessary to remove a much higher proportion of edges from the affinity purification dataset.

other results from tables  <dig>   <dig> and  <dig> that could also be used to try and determine the appropriate number of edges to remove are  increasing the significant number of go terms per protein  aiming for an average size of cluster of 5– <dig> proteins  reducing the size of the biggest cluster to < 20% of the dataset, a useful metric to indicate reasonable decomposition of the dataset   reducing the number of nodes not associated with any other nodes to < 30%. the proportion of edges that need to be removed in order to attain each of these criteria would be:-

distribution cluster size gavin 25% uetz 13% lehner 14% edges

 significant go terms for all datasets, the more edges that are removed the more terms become significant down to the smallest cluster sizes investigated

average cluster 5– <dig> gavin 25% uetz 2–13% lehner 7–25% edges

biggest cluster < 20% gavin 25% uetz 13% lehner 14% edges

single nodes <  <dig> % gavin 25% uetz 27% lehner 25% edges

the data above shows that most of these criteria give similar results and suggest that the method used to produce the data  will be a major determinant of the proportion of edges to remove. to summarise, for y2h, useful results are obtained by removing 10%–15% of edges whereas for affinity purification, removing 25% edges gives better results. newman and girvan  <cit>  have developed methods for assessing the 'modularity' of the clusters produced by edge-betweenness clustering. it would also be possible to use methods of this type, as a more objective way of deciding how many edges to remove in different datasets.

size of cluster is important, because the quantity of significant annotation information i.e. the average number of significant go terms per protein,  increased, for all datasets, as cluster size decreased. however the detail of the information, measured as average depth of go per node, did not change with cluster size. it is noticeable that human proteins in the lehner dataset  <cit>  had been annotated to a greater level of detail  than the yeast proteins  and whereas virtually all of the clusters in the lehner dataset had a correlation with at least one go term there were many clusters in the yeast dataset which had no significant go terms . this could be a peculiarity of the metabolic areas chosen for the lehner study.

scaling
the utility of this approach is currently restricted by the size of the dataset being analysed, especially when a large number of edges are being removed. for the gavin dataset, when  <dig> edges were removed the total time to cluster was  <dig> h  <dig> min but when removing  <dig> edges it took  <dig> h  <dig> min. according to the software documentation  <cit>  and as discussed by newman  <cit>  the running time for sparse graphs  is proportional to both the number of edges removed and the total number of nodes. the ito dataset  took >> <dig> h when >  <dig> edges were removed. this method is therefore of greater utility for small to medium datasets, having less than  <dig> nodes or edges.

significance of go terms
after performing the chi squared tests and checking them against a random reallocation of go terms across the network, all the significant go cluster correlations remained significant. in no case were more than 5% of the lowest p values of the randomly reallocated go terms lower than the lowest p value in the original dataset.

in almost every case the significant annotations were informative about a potential function for the clusters , providing distinctive groupings of annotations which distinguished different functions for the different clusters . it was often a very small proportion of the proteins which provided the annotations which were used to characterise the cluster, .

correlation with biological function
one test of this method was to determine whether the clusters generated and the associated go terms corresponded to clusters previously identified by expert biologists.

with respect to the lehner et al dataset  <cit> , the authors identified groups of interacting proteins which appeared to be involved in distinct biological processes including transcription regulation, protein-ubiquination, cell cycle regulation and mrna processing

when edge-betweenness clustering was used to remove  <dig> edges,  <dig> clusters  were created . from table  <dig> , it can be seen that these clusters differ in the significant go terms associated with them i.e. the method does separate groups of proteins with different metabolic functions. significantly, clusters were generated with functions corresponding to all of the metabolic areas identified by informed biological interpretation. these were transcription , ubiquination , cell cycle reg  and mrna processing  only one cluster, cluster  <dig>  had a description  which was too general to give useful information about function. however when this cluster was broken down further  more informative terms  were associated with the new, smaller parts of the cluster. interestingly cluster  <dig> contained very few proteins with go terms assigned to them and therefore may represent an under-investigated module in the human proteome. this highlights the dependence of this method on the quality  and quantity of the go annotations available. this was good for the h.sapiens proteins but less good for the yeast proteins.

one important question is whether the functions identified for these protein clusters are confirmed by biological experimentation. the lsm complex is mentioned by the authors of all  <dig> papers  <cit> , it has been extensively studied in both yeast and human  <cit> . the lsm complex has been shown to have a number of functions related to rna processing, including the splicing of nuclear pre-mrna and the decapping of cytoplasmic mrna prior to degradation.

clusters in the lehner dataset
in the lehner dataset two go terms, go: <dig> "mrna splicing" and go: <dig> "rna splicing", were always associated with only one cluster in the dataset. this was a good candidate for the lsm complex.

of the  <dig> lsm proteins examined in  <cit> , all eight were found in the cluster associated with these two go terms for the tests when  <dig>   <dig> and  <dig> edges were removed. a diagram showing the cluster containing these proteins, in the dataset with  <dig> edges removed, can be seen in additional file  <dig>  when  <dig> edges were removed, the cluster labeled as rna splicing contained 5/ <dig> of the lsm proteins. the three clusters containing the other  <dig> proteins had the following significant descriptions .

go: <dig> energy derivation by oxidation of organic compounds 

go: <dig> 26s proteosome 

go: <dig> transcription 

for the lehner data, when  <dig>   <dig> and  <dig> edges were removed, the clusters labeled as being associated with rna splicing are large containing  <dig>   <dig> and  <dig> proteins respectively . the cluster with 5/ <dig> lsm proteins  had only  <dig> proteins. in addition to the lsm proteins the large clusters contained other proteins known  to be involved in rna splicing. the proportions are shown in table  <dig> 

this data clearly shows that as the cluster size gets smaller, the cluster is more focused round the rna splicing function. larger clusters must have sub-clusters related to other functions. the last column in the table above shows that many of the rna splicing proteins grouped in these clusters were the prey of the lsm proteins in the original experiments  <cit> , which is what we hoped this method would achieve.

therefore for the lehner data, the cluster identified by edge-betweenness clustering as the "rna splicing" cluster, did contain the proteins expected to be associated with this process. however this is a small dataset focused around a specific biological process. a more stringent test of this method is provided by the yeast proteome datasets where screening was not functionally focused.

clusters in the yeast datasets
gavin et al  <cit>  and uetz et al  <cit>  both describe the lsm complex. one complication in both of these datasets, is that the yeast proteins are not annotated to the same level of detail as the human proteins. for example there is no annotation for "rna splicing" but only the higher level go term go: <dig> "rna metabolism", which covers a much broader range of cellular processes.

in gavin et al  <cit> , the lsm proteins are found in the complex described as tap-c <dig>  this contained  <dig> proteins. the distribution of the tap-c <dig> proteins between the clusters are shown in table  <dig>  it can be seen that a minimum of 6/ <dig> lsm proteins and proteins associated with rna metabolism are clustered together, at all numbers of edges removed.

therefore in a dataset not focused round rna metabolism, the edge-betweenness algorithm successfully clustered the lsm proteins with a number of other proteins that were co-purified in the tap-c <dig> complex and a cluster produced using the graph topology was shown to correspond to a cluster of known function.

in uetz et al  <dig>  <cit> , the lsm complex is described as a set of  <dig> interacting proteins. the one cluster containing all of these proteins does not correlate with the go term for "rna metabolism" in the datasets with  <dig> or  <dig> edges removed. this correlation only emerged once  <dig> edges had been removed. with  <dig> edges removed 11/ <dig> are still in the same "rna metabolism" cluster .

therefore in the uetz dataset although all the lsm proteins clustered together, it was only once more than 10% of edges had been removed that it was possible to get a significant association with the relevant go term. finding the correct number of edges to remove is obviously essential to extracting the required information.

overall it can be seen that the method is capable of finding clusters of proteins with known biological function and of correctly assigning a relevant annotation to a particular group.

stable and transient clusters
in gavin et al  <cit>  the authors discuss two clusters which are described as "stable and "transient". tap-c <dig> is an example of a "stable" complex which was always isolated with the same members. it is part of the poly-adenylation machinery. in contrast, tap-c <dig>  the "transient" complex was frequently isolated with different components. it is a signaling complex formed around protein phosphatase 2a.

the distribution of these two complexes between the clusters generated by edge-betweenness clustering, was compared at different levels of clustering, . while tap-c <dig> remains mainly associated with one cluster at all numbers of edges removed, tap-c <dig> becomes distributed much more evenly between a greater number of clusters. therefore it seems likely that the method described here favours the detection of more stable clusters, as the number of edges removed increases.

false positive interactions
clustering the lehner dataset with added false positive edges  gave no obvious difference in cluster size  or quality or quantity of go annotation . the dataset with false positives is slightly larger than the original dataset, but this did not change the number of clusters. the slight increase in average cluster size led to a commensurately small fall in annotation quality , but there were no dramatic differences in cluster size distribution or any of the other measurements.

fourteen out of twenty-one of the clusters in the original dataset remained completely intact, and even when this was not the case a minimum of 70% of the original proteins in the other clusters could still be found together in one of the new clusters. therefore adding the false positives did not render any of the original clusters unrecognisable.

when the dataset with the false positive edges removed was compared to the dataset with the same number of edges removed at random, the differences were more marked. the dataset where edges were removed at random had smaller clusters  and more single nodes . the identity of the clusters was perturbed to a greater extent. further analysis showed that when the false positives were removed 12/ <dig> clusters still remained completely intact. with removal of random edges only 4/ <dig> clusters were completely intact. however even in this dataset 14/ <dig> clusters had 80% of proteins from the original clusters co-occurring i.e. 3/ <dig> of clusters were still recognisable. randomly removed edges can be considered to be false negatives and so the method is also showing good tolerance to false negatives, and can still preserve a good level of cluster identity.

overall, even though the false negatives reduce the average sizes of the clusters and splits off many single nodes  the same clusters are still being found 75% of the time. in other words the presence of false positives and false negatives in the dataset does not seem to distort the composition of the clusters created by the edge-betweenness method in a way that obliterates cluster identity. but false negatives do appear to have a slightly more detrimental effect than false positives.

looking at the edges which were removed during clustering, when  <dig> edges were removed  3/ <dig>  had false positive nodes at one or both ends. when clustering was done by removing  <dig> edges 15/ <dig> were attached to false positive nodes. this compares with 68/ <dig> edges attached to false positive nodes in the whole dataset. there is no obvious bias in the presence of false positive edges between or within clusters.

overall it appears that the clustering is fairly robust to the presence of false positives and also to the random removal of edges i.e. false negatives.

with the ito et al  <cit>  dataset it was hard to say whether there was much effect from the removal of false positives or addition of false negatives, as the proportion of nodes and edges affected was so small, but again there were no obvious differences.

discussion
edge-betweenness clustering can be used to separate protein interaction networks into clusters which have correlations with annotated gene functions. this can be done in an automated fashion and thus can provide a means of rapidly screening the results of protein interaction experiments. clusters produced by this method contain groups of proteins which are known to cooperate to perform common functions, described by the correlating annotations. therefore the clusters detected by this method correspond to active protein complexes found in the cell. moreover the method worked for different types of dataset  different organisms  and for datasets with a 5× difference in the number of edges.

the smaller the clusters generated by this method, the higher the average number of significant annotations. the preliminary results presented here suggest that, in general, useful information was obtained once approximately 10% of edges were removed from y2h datasets and a slightly higher proportion  from affinity purification data. this method is particularly good at detecting "stable" clusters. the method is also flexible and can be adjusted according to the nature of the dataset and to the function being studied. currently scaling to very large datasets when large numbers of edges need to be removed is problematic, but this may soon be alleviated by new developments of the algorithm  <cit> . the level of detail and amount of available annotation will have a significant effect on the utility of this method although it is possible to tune the amount of annotation found by the method, by altering the number of edges removed. the amount of available annotation will increase as proteome annotation progresses.

spirin and mirny  <cit>  have demonstrated the robustness to false positives and negatives of various clustering methods . they found that 80% of clusters could still be detected if up to 20% of links were added or removed. our results suggest that edge-betweenness clustering is similarly robust. this robustness is undoubtedly for the reason identified in  <cit>  which is "the use of multiple interactions to identify a cluster", in other words the interconnectedness of a pair of proteins is reconfirmed by the interconnectedness of their neighbours. the biological significance of these interconnected sets of proteins was shown by the high correlation between true positive interactions and clusters in drosophila protein interaction networks, found by giot et al  <cit> .

giot et al  <cit>  also found that prey  with a large number of neighbours had a significant negative correlation with the reliability of the interactions. these highly connected prey correspond to the promiscuous prey which we identified as false positives and which although highly connected do not have neighbours which are themselves highly interconnected. as this method appears robust to the presence of such proteins it is not necessary to "clean up" the datasets before using them.

the hierarchical nature of the gene ontology made this a very useful system of annotation to exploit in this method. it allows proteins to be grouped according to the most detailed shared level of annotation but also enables higher level  annotation to be used when this is all that is available. the very high level terms which apply to almost all proteins are usually ignored as they are not concentrated in a particular cluster, although these terms occasionally appear as significant, in clusters with higher than average levels of annotation.

CONCLUSIONS
edge-betweenness clustering provides a quick way of picking out functionally interesting areas of protein interaction datasets. it also appears to be robust against false positives and negatives. as such this approach can be applied to any quality of data. it also deals effectively with poorly connected nodes, such as the many prey with single connections found in y2h graphs. because the edge-betweenness algorithm does not scale well to larger graphs, this method is currently most appropriate for studies focused on specific areas of the proteome. however, modifications of the algorithm are being developed and these should allow it to be applied to larger datasets in the future  <cit> . the implementation described here is particularly effective where good quality go annotation is available, which is especially true for many human proteins. it will be a useful method for detecting functions for unannotated proteins based on the knowledge of the functions of their neighbours and for exploring functional modules within the proteome.

