BACKGROUND
one of the several ways that species evolve and diverge from each other is through changes in regulatory networks and more specifically through changes in the regulation of genes by transcription factors. the  <dig> species with an established phylogeny in fig.  <dig> are collectively an excellent environment or model for the study of gene regulation in general. to investigate evolutionary changes, we generally compare regulation in the species in one branch of the phylogenetic tree and compare that with the remaining species. a group of functionally linked and co-regulated genes is called a “regulon”. a regulon  may be preserved across a family of related species despite changes in regulation. in the review  <cit> , li and johnson propose three different scenarios for the evolution of transcriptional networks in yeast. their scenarios are  “transcription factor turnover” where the transcription factor is conserved , but membership of genes in the regulon can change;  “transcription factor rewiring” or “switching” where the regulon members are conserved, but the regulation switches from one transcription factor to another transcription factor;  evolution of combinatorial interactions between transcription factors due to direct protein-protein contacts between dna binding proteins.
fig.  <dig> tree phylogeny for  <dig> species of yeast. we test each of the  <dig> selected branches  to partition the species in the tree for rewiring events. note that the partition numbers that are one or two digits indicates the branch includes all species up to that species number. a whole genome duplication is indicated in branch # <dig>  each branch partitions the set of species into two sets m  and m
⋆ . the  <dig> species are: saccharomyces  cerevisiae , s. paradoxus, s. mikatae , s. bayanus , candida  glabrata , s. castellii , kluyveromyces  waltii , s. kluyveri , k. lactis , ashbya gossypii , clavispora lusitaniae , debaryomyces hansenii , c. guilliermondii , c. tropicalis , c. albicans , c. parapsilosis , lodderomyces elongisporus , yarrowia lipolytica , aspergillus nidulans , neurospora crassa , schizosaccharomyces japonicus , schizosaccharomyces octosporus , schizosaccharomyces pombe 





in this paper we are interested in scenario  <dig>  hogues et al.  <cit>  report an example of scenario  change in regulation, namely that in saccharomyces cerevisiae the transcription factor rap <dig> regulates ribosomal rp genes, while in the same conditions in candida albicans the regulation of the same ribosomal rp genes is done by the transcription factor tbf <dig> . there one transcription factor for certain species is replaced by another transcription factor for different species, carrying out the regulation of the same collection of genes. in order for a collection of related genes to preserve their function, we must expect change in transcription factors to be carried out for a collection of genes. additional such cases have been documented for yeast genes involved in mating  <cit>  and in galactose metabolism  <cit> . see also cases discussed in  <cit>  and references therein.

scenario  can also be discussed in terms of “motifs”. a motif is a short segment in the dna sequence, between 6– <dig> nucleotide pairs, usually fewer than  <dig>  that can be positioned at different locations within the regulatory region of a gene  <cit> . tanay et al.  <cit>  focus on identifying motifs that are “enriched”, i.e., the motif occurs in multiple species, controlling analogous regulons in those species.

sarda and hannenhalli  <cit>  present a method for detecting rewiring, switching one transcription factor to another transcription factor in the same  <dig> yeast species we investigate.

nocedal and johnson  <cit>  analyze more complex cases of transcription factor rewiring in yeast and concludes that future research is needed to understand transcription factor rewiring in regulatory networks that involve multiple transcription factors and larger regulons. they also say that it is important to consider evolution in the study of transcription factor rewiring. for us that means considering how regulation in a branch differs from the regulation in the other species of the tree. our algorithm automatically finds a collection of genes for which switching occurs.


what our method does while it has been demonstrated that one transcription factor can be replaced by another , our algorithm looks for larger scale replacements. we present the first computational method that finds a regulon  and two teams of transcription factors  for which there has been rewiring over evolutionary time for a specified branch m of the phylogenetic tree.

methods
data
we use  <dig> evolutionarily conserved co-expression modules detected in  <cit>  based on s. cerevisiae and c. albicans. additional file 1: our supplementary material lists the genes in each module . some modules are contained in larger modules. the number of genes in each s. cerevisiae module ranged from  <dig> to  <dig> with an average of  <dig> and a total of  <dig> genes for all the s. cerevisiae modules. we study the  <dig> ascomycota fungi species with an established phylogenetic tree from  <cit>  shown in fig.  <dig>  our yeast species includes saccharomyces cerevisiae, candida albicans and ashbya gossypii. all  <dig> yeast species names are provided in additional file 2: supplementary material.

we used the orthology mapping of corresponding genes across the  <dig> yeast species from  <cit> . in some cases there is no gene for a given species, but we chose genes that had the representatives  in all or almost all of the species. “orthologs” are genes in related species that have similar nucleotide sequences, suggesting they came from the same ancestral gene by speciation. when a gene has multiple copies in one species, we pick one copy at random, resulting in  <dig> genes of s. cerevisiae – plus the orthologous genes across the other  <dig> ascomycota species.

this paper is based on our calculation and analysis of transcription factor binding probabilities, the computed probability that a transcription factor binds somewhere in the 600-base region preceding a gene of one of our species . we refer to that region as the “upstream promoter region”. the set of  <dig> yeast transcription-factor-dna binding-motifs ) was obtained from transfac db database  <cit> . while there are many factors determining whether a gene is activated or deactivated, it seems likely to be significant if the probability of a transcription factor is high for a branch of the phylogenetic tree and lower for the remaining species, or vice versa. we computed a binding probability for each of  <dig> transcription factors binding to each of  <dig> genes in each of  <dig> ascomycota species for a total of approximately 126×2557× <dig> probabilities, i.e., approximately  <dig> million probabilities . each of the genes that we selected was present in s. cerevisiae. we used the same  <dig> ascomycota fungi and phylogeny  <cit> , and our set of  <dig> transcription factors includes most of the  <dig> transcription factors that  <cit>  uses, so we safely use  <dig> transcription factor binding motifs associated to s. cerevisiae and applied them to the other yeast species as  <cit>  has demonstrated that most transcription factors have conserved their dna motifs over large evolutionary distances.

our skewness method
for each species, gene, and transcription factor, we examine the “binding probability”, the probability that the transcription factor binds to the upstream promoter region of the gene.

if a particular branch of the phylogenetic tree has been selected, we say a transcription factor-gene pair is  skewed toward that branch if the binding probabilities are on the average higher for species in that branch than for the species in the complement. later we will define our function skew that measures how much it is skewed; . we say the pair is negatively skewed toward a branch if the reverse is true, that the binding probabilities are lower for the branch than in the complement. we usually average the skewness of a transcription factor over a collection of genes.


computing skewness we pick a group m of species representing some branch of species in the phylogenetic tree in fig.  <dig> . we use m
⋆ to designate the remaining species, 11− <dig> in this case. hence m defines a branch  of species in the tree.

all calculations use some choice of m but we often omit mention of m and m
⋆ to simplify the notation.

for a collection of genes g we say a transcription factor is skewed towards m if it binds more strongly  for species in m than for species in m
⋆, and similarly it is skewed towards m
⋆ if the reverse holds. we aim at finding a branch and some related genes g in some module r and two collection of transcription factors that we denote t and t
⋆ so that on the average, transcription factors in t are skewed towards m for genes in g, while transcription factors in t
⋆ are skewed towards species in m
⋆.

to make that precise, we define the skewness, a measure of the difference in the average binding probabilities between m and m
⋆. specifically, for a given branch m  and each transcription factor x and each gene g, we compute the skewness
skew as follows in eq.  <dig>  we write 〈… 〉 for an average. we note that the average binding probability is computed by averaging over those species that have an ortholog of g; we exclude those species that do not have an orthologous gene from the average. all of the following depend on the choice of m. first we define p
x,g,s= the binding  probability for transcription factor x to bind to the promoter of gene g in species s. . we will use “ ∗” to indicate m
∗, the complement of m is being used in a calculation.

now we present a formula for the extent to which the binding probability of one transcription factor to one gene is “skewed”, that is, stronger on the species in m than in m
⋆, 
  <dig> skew=〈px,g,s〉s∈m−〈px,g,s〉s∈m⋆, 


here “skew” measures how much x is skewed towards m for g. it is greater than  <dig> if x is skewed towards m and is less than  <dig> if x is skewed towards m
⋆.
⋆ while the three transcription factors  are higher in m than in m
⋆ for those genes. hence the overall dominance between the two teams is opposite for the red and blue teams. note that the literature discusses this kind of switch for transcription factor tbf <dig> versus transcription factor rap <dig> , but here we find the switch apparently involves two other transcription factors as well, transcription factor fhl <dig> and transcription factor sfp <dig>  members of the red team.
fig.  <dig> transcription factor rewiring for module  <dig>  ribosomal protein  genes. here we describe the meaning of this and several following graphs. the species tree is partitioned into two groups: m is the set of species in one branch  and m
⋆ consists of the rest of the  <dig> species. in this and related figures, a dashed vertical line  separates m from m
⋆. for each of the  <dig> species on the horizontal axis, we plot two dots, each of which is an average of binding probabilities that a transcription factor binds to a gene. here for example each red dot is the average of  <dig>  binding probabilities for the species in question, i.e., averaging over the genes in g and the transcription factors in team t  or in team t
⋆ . the two dots for each species are connected with a solid line using the color of the upper dot. the first row in table  <dig> reports on this case. note that the box in the lower right specifies first the blue team t
⋆ , then the red team t , and finally the number of genes in the block. when there are too many transcription factors to fit in the box, only a few are given, but full data is given in the additional file 5: supplementary material for this graph  including the names of the  <dig> genes that are discussed here


⋆:#t
2
3
4
5
6
the first row  describes the max block found for this module and branch. the column “skew” is the max block’s skewness score skew= <dig> ; next is the difference between the averages of t and t
∗ on the species in m
∗, i.e., dif)= <dig> , followed by the corresponding difference for the species in m is dif=− <dig> . the column # t
⋆:#t reports the numbers of transcription factors in t
∗ and t; and the column #g/#mg reports the number of genes in the regulon compared with the number in the module. the column “figure” lists the figure number corresponding to the module or ’-’ for modules without figures. the cases shown have the highest skew scores and are listed in order of those scores. when a module has similar results for branches that only differ slightly, we show only the one whose block has the highest skewness. a more extensive set of data is included in additional file 5: supplementary material




we also define the skewness for a collection t of transcription factors, a collection of genes g, and a branch m as follows by averaging the skew all the the transcription factors x in t and all the genes g in g, as follows. 
  <dig> skew=〈skew〉x∈t,g∈g. 


for each branch m and module r our goal is to identify a group g of genes in r and two teams or groups of transcription factors t and t
⋆ so that 
  <dig> skew=skew−skew 


is large. in the cases we care about, skew> <dig> and skew< <dig> 

algorithms
terminology
blocks and substitution-maximizing blocks
we define a block denoted  to be two groups or teams t and t
∗ of transcription factors and a group g of genes. we say there is a rewiring for a branch m of the tree when transcription factors in t are positively skewed for species in m for the genes in g while the transcription factors in t
∗ are negatively skewed.

we define a “substitution-maximizing block” or more simply a max block to be a block which has the property that if we substitute any gene for one of the genes in g, or any transcription factor for one of the transcription factors in the teams, then the skewness cannot not increase. but discarding a low scoring gene or transcription factor would raise the score of the block. indeed the blocks with the highest scores are those that that have exactly one gene and one transcription factor in each of t and t
∗.

finding max blocks by enumerating subsets is clearly out of the question, since we are dealing with candidate sets that may have dozens of genes and dozens of transcription factors.

we can refer to a block  as an -block when m,m
∗, and m
g are the numbers of elements in t,t
∗, and g respectively.

overview
for any starting collection g
 <dig> of m
g genes, the ping-pong algorithm finds some sets t and t
∗ and eventually a max block  by repeatedly making substitutions in the elements of t,t
∗, and g that increase the score skew; and since only substitutions are made, the numbers of elements in t,t
∗, and g remain m,m
∗, and m
g respectively. a gene or transcription factor that is eliminated from one of the sets at one stage may later return after the mix of genes and transcription factors has changed.

a sequence of ever-shrinking max blocks
next one of the numbers m,m
∗, and m
g is decreased by 1: the discussion of “importance” below describes which of these is decreased. this decrementing process continues, yielding a sequence of max blocks whose total m+m
∗+m
g decreases in steps of  <dig>  when the process is stopped depends on the needs of the user. as discussed below, here we chose to stop when the importance  reaches  <dig> .

our ping-pong algorithm that yields a max block
in the game of ping-pong, the ball goes back and forth between the two sides. here the block goes back and forth between two steps. the ping-pong algorithm consists of alternating between steps tf and g below repeatedly with skew increasing at each step until the process stops in the sense that skew reaches an equilibium, a max block.

a key point is that t and t∗ are generated from g without knowledge of previous versions of t and t∗. similarly g is generated purely from t and t∗ without reference to any previous versions of g.

the ping-pong algorithm requires three positive integers, m,m
∗,m
g and a set g of m
g genes in a regulon r. the first time the ping-pong algorithm is applied, m
g is the number of genes in the module r and m+m
∗ is the total number of transcription factors. at least one of these three numbers will decrease during the attrition step described below.

step tf: choosing transcription factors t and t∗
given a set g of genes, we compute the skew scores of every transcription factor x and let the new t be the m highest scoring transcription factors and let t
∗ be the m
∗ lowest scoring transcription factors. since skew is the average of skew for x in t, it follows that skew is increased  by this new t. similarly −skew is increased by the new choice of t
∗ and so is skew.

step g. choosing g
note that skew is the average over the m
g genes in g of the terms 
 skew−skew. 


next compute that term for each gene g in r and we set the new g to be the m
g highest scoring genes in r. that increases  in skew.

lemma: steps g and tf never decrease the skew score.

to see this, let m be the number of transcription factors in t and m
g be the number of genes in g. notice that skew can be written three ways, namely as the average of the m terms skew, averaging over all x in t, or as the average of the m
g terms skew, averaging over all g in g. both are equal to the average of the m×m
g items skew. 
  <dig> skew=〈skew〉g∈g=〈skew〉x∈t 


hence if any gene g is introduced by step g, it must have a higher skew scores 
 skew=〈skew〉g∈g−〈skew〉g∈g  than each gene that is replaced. similarly each transcription factor changed by step tf must increase the skew score.

in the above transcription factor step the algorithm is supposed to select the highest m scoring transcription factors for t, but for some choices of g there are fewer than m that have positive scores, or similarly with t
∗ there can be too few with negative scores. in such cases we terminate the ping-pong run. there are ways around this as long as there are some transcription factors with positive scores and others with negative scores: just decrease m or m
∗ as needed, but our goal was to present the algorithm in its simplest form. it is also possible to encounter sets of genes g for which there are no transcription factors with positive scores or none with negative scores.

ping-pong stops at a max block
after applying this algorithm repeatedly, there will be no substitution of a single transcription factor or a single gene that would increase skew so that t,t
∗,g is a max block.

the algorithm alternates back and forth between the two steps repeatedly, letting t and t
∗ determine the set of genes g, and then letting g determine transcription factor teams t and t
∗. each step increases the overall score skew until it stops at a max block: the only changes in the sets are those that increase the overall score. since there are only a finite number of choices, the procedure must eventually stop at a max block, where the g that is used in step g is the g that is produced in the tf step.


ping-pong pseudocode



input: : all_gs is the set of all genes in some module r; g
 <dig> is an initial gene set of mg genes; all_tfs is the set of all transcription factors; m,m
⋆,mg remain constant; and m,m
⋆ are the numbers of transcription factors in team t and t
⋆ and mg is the number of genes


output: the output is the max block  and its skewness score 

new_score=0


g=g
0



do



score=new_score


compute step tf: choose transcription factor teams t and t
∗


compute step g. choose genes g



new_score=skew


while
new_score>score: 

return g, t, t
⋆, score


stopping condition: neither step g nor step tf ever decreases the skew score, so it must reach an equillibrium




the attrition step
for each x in t we define the “importance” of x to be the ratio of skew divided by the highest score of the transcription factors in t; similarly for each y in t
∗, the “importance” of y is the ratio of skew divided by the lowest score of the transcription factors; and for each g in g, the “importance” of g is the ratio of skew divided by the highest score in g. we now compare all of the importance scores and delete the one with the lowest score. in other words, we decrease by  <dig> one of the m,m
∗,m
g. that increases the overall skew score. now again we play ping-pong with the new reduced numbers, starting the game with our current g, possibly reduced by one gene.

as we proceed decreasing the numbers, we may lose some transcription factor or gene that later becomes more important to a reduced set of genes and transcription factors and so it enters back in. that is why we choose new teams from all transcription factors, not just the ones that were included on the last step, and the same holds for genes, using any genes in the specified regulon. we compute binding probabilities with  <dig> digit precision to avoid having tie scores, but if there is a tie score and one transcription factor or gene must be chosen, we retain the one that comes first alphabetically.

when should attrition stop?
when we start, it is likely that some skew scores will be near  <dig>  much smaller than other skew scores, so their importance will be near  <dig>  the scientist who wishes to find many involved interacting genes and transcription factors might stop when the importance has risen to  <dig>  . the experimentalist might wish to deal with fewer transcription factors and genes and so might stop at  <dig> . in this paper and in the additional file 5: supplementary material we stopped when the importance reached  <dig> .

RESULTS
we have examined the  <dig> largest branches of the species tree for each of the above mentioned modules using this approach. we indicated the branches with a slash and labeled them with a number as shown on fig.  <dig>  we determined a “max block” for each module and branch. for some, we found strong indications of rewiring.
⋆, on m
⋆, 
  <dig> dif=dif⋆=〈px,g,s〉x∈t,g∈g,s∈m⋆−〈px,g,s〉x∈t⋆,g∈g,s∈m⋆ 


while column  <dig> shows the difference dif on m, 
  <dig> dif=dif=〈px,g,s〉x∈t,g∈g,s∈m−〈px,g,s〉x∈t⋆,g∈g,s∈m 



transcription factor rewiring for module- <dig> genes module  <dig>  consists of ribosomal protein  genes exclusively. in the introduction we noted that  <cit>  reported that one transcription factor substitutes for another on some collection of genes in two species, namely rap <dig> in saccharomyces cerevisiae substitutes for tbf <dig> in candida albicans for ribosomal rp genes. we find for a branch of  <dig> species, rap <dig>  fhl <dig>  and sfp <dig> substitute for tbf <dig>  indeed we find that their skewness scores are similar: skew= <dig> ;skew= <dig> ;skew= <dig> , where our algorithm finds the regulon g consists of  <dig> of the  <dig> rp genes in module  <dig>  see the additional file 5: supplementary material for a list of the  <dig> genes and other detailed information about the most significant block that was found for each module. note that fhl <dig> is mentioned in  <cit>  as a “a key player” in the regulation of rp genes in s. cerevisiae. we find it is involved in rewiring, according to our calculations.


transcription factor rewiring for module- <dig> genes module  <dig> consists of conserved, co-expressed genes related to the biological function rna methylation. here there are two genes in the module and both are in the rewiring block. in fig.  <dig> we see a much more complicated apparent rewiring than in fig.  <dig> 
fig.  <dig> transcription factor rewiring for module- <dig>  genes. here m is branch  <dig> from the phylogeny tree, so m={ <dig> ⋯,17} and m
⋆={ <dig> ⋯,13; <dig> ⋯,23}. in mred dominates blue, while elsewhere blue mostly dominates red




what is striking is that in  <dig> of the  <dig> species in m
⋆ transcription factor mata <dig>  has binding probabilities near  <dig>  . in contrast in the branch m, it is higher than the t
⋆ team  very clearly dominate the  <dig> transcription factors of the t
⋆ team. in contrast on the right side, the binding probabilities of the two teams are much closer, apparently all active. so the apparent switching behavior here is that the t clearly dominates t
⋆ on the left, while on the right all the transcription factors interact at similar levels .
fig.  <dig> transcription factor rewiring for module- <dig> genes. here m is branch  <dig> from the phylogeny tree, so m={ <dig> , <dig> }, and m
⋆={ <dig> ⋯,23}. notice the large difference between red and blue dots in all species in m, while blue mostly dominates in m
⋆






transcription factor rewiring for the module- <dig> gene module  <dig> consists of conserved, co-expressed genes related to the biological function actin cortical patch assembly. the phenomenon seen in fig.  <dig> is somewhat similar to what is seen in the previous figure for module  <dig>  the branch of three species has one team turned on and one turned off, or at least at much lower binding probabilities, while for each of the other species, the two teams have similar binding probabilities.
fig.  <dig> transcription factor rewiring for module- <dig> genes. here m is branch  <dig> from the phylogeny tree, so m={ <dig> ⋯,20}, and m
⋆={ <dig> ⋯,23}. branch  <dig> is special in that it cuts the tree at the root separating the tree into two branches: m
⋆ is also a branch. hence the roles of m and m
⋆ can be switched and the red and blue colors could be reversed. notice then that branch m
⋆ has a wide separation between red and blue, while for the rest of the species of the tree, red and blue are closer together




here in fig.  <dig> if the tree is cut at the top, separating the left branch of  <dig> species from the right-most branch of  <dig>  it is arbitrary as to which of the two branches is called m and we have called it the left branch. what we see is that in the three species of m
⋆, the two transcription factors of the t
⋆ team  very clearly dominates the  <dig> transcription factors of the t team for the  <dig> genes in the block. in contrast on the left side, the binding probabilities of the two teams are much closer, apparently all active. so the apparent switching behavior here is that the m
⋆ clearly dominates m on the right, while on the left all the transcription factors interact at similar levels .


transcription factor rewiring for module- <dig> genes module  <dig>  consists of conserved, co-expressed genes related to the biological function purine ribonucleotide biosynthetic process. this example is most similar to module  <dig> above in that there is an extreme difference between red and blue in m but not in m
∗.
fig.  <dig> transcription factor rewiring for module- <dig> genes. here m is branch  <dig> from the phylogeny tree, so m={ <dig> ⋯,13}, and m
⋆={ <dig> ⋯,10; <dig> ⋯,23}. notice the large difference between red and blue dots in all species in m, while blue mostly dominates in m
⋆





discussion
our method can address questions such as the following: can different groups of genes in related species be regulated by the same group or “team” of transcription factors ? another question: can a team of transcription factors become dominant for a collection of related genes in a tree branch while a second team is dominant on the other species ? in this paper we focus in scenario  <dig> 

our approach differs from that of sarda and hannenhalli  <cit>  in that we define our skewness for each transcription factor while they define a function that compares the skewness of two transcription factors. they require more computation than our approach since they must make a complex computation of rewiring scores for each pair of transcription factors. we use extensive computation instead to look for more complicated situations where there can be several transcription factors that switch with one or more transcription factors. that is we find collections or teams of transcription factors which are positively skewed, averaging over the genes in a regulon, and for those transcription factors which are negatively skewed. we vary the selection of genes in the regulon and the teams of positively skewed transcription factors and the teams of negatively skewed transcription factors.

one of our colleagues, chris dock, tested a module  of  <dig> genes. he picked g
 <dig> to have  <dig> randomly selected genes, and repeated this process  <dig> times. the process always arrived at the same max block . that suggests the process is robust, but does not guarantee a unique result.

a module consists of related genes and one can imagine simplistically that the module represents a process with just two stages; first one set of genes is activated, and later another set. if there is rewiring, each might have its own max block, the union of which might be the max block that the above process finds. these can be found by using a modified approach, where instead of starting with a large set of genes and contracting it as we have described above, one can start with one gene and expand the collection of genes until importance  <dig>  is reached. this ‘expanding“ approach would often yield a subset of the “contracting” approach and the subset would depend on the initial gene. here we chose to keep our report simple by restricting attention to the expanding max block approach which gives an overview.

note that while t* consists of the transcription factors for which skew is smallest , they are not necessarily all negative, and we have excluded some cases where not all x in t* had negative skew score. this was an optional choice, but it seemed appropriate in view of the concept of rewiring.

CONCLUSIONS
nocedal and johnson  <cit>  write “we do not yet understand how a large network, composed of many transcription regulators and hundreds or thousands of target genes, forms in the first place.” we believe that considering only cases in which one transcription factor is switched with another will be inadequate to describe the evolution of networks. they also write “a change even in the regulation of a single gene can have important consequences in modern species’.... however, most biological processes require the coordinated expression of many genes rather than a single gene” to produce a useful phenotype.

our investigation aims at providing a new approach to thinking about the very complex idea of rewiring, freeing us from the constraint of considering only one transcription factor substituting for one transcription factor .

all the examples in this paper discuss rewiring  via one team of transcription factors substituting for another team on a collection of genes. however, it is an equivalent problem mathematically - using the same set of binding probabilities - to have one team of genes substitute for another team of genes for a collection of transcription factors . in an example of a scenario  <dig>  habib et al.  <cit>  present a method for tracing the evolutionary history of regulatory interactions of  <dig> regulatory dna motifs associated with transcription factors across  <dig> ascomycota fungi, . they use their method to explain the evolution of transcription factor turnover for a collection of genes. here the transcription factor changes which genes it regulates while preserving the function of the genes. gasch et al.  <cit>  also study changes in which regulon members that are regulated by certain transcription factors.

we further expect to be able to investigate more complicated problems with very similar ideas in which there is simultaneously a rewiring of transcription factors and a turnover of genes.

no numerical investigation such as ours can produce definitive biological results, but the fact that our first case in table  <dig>  top row, is similar to a well known case is promising since our results find a team of three transcription factors instead of one in the published results. table  <dig> shows the  <dig> cases with the highest skew scores, and for the top  <dig> we have included figures. these seem to suggest rewiring of teams of transcription factors. of course it is desirable to have some of these cases checked experimentally.

it may be significant that eight of the twelve cases in table  <dig> involve only two branches, namely branches  <dig> and  <dig>  while branch  <dig> includes saccharomyces cerevisiae and relatives, branch  <dig> includes candida albicans and relatives. those species have been reported in cases of rewiring in the literature.

for each module and each branch of the tree we have computed a block . the existence of a max block is not evidence of significant rewiring, and in fact there is no apparent test of statistical significance. our solution to this complication is to examine the blocks that have the greatest skewness. for each module and each branch of the tree we compute the skewness of the resulting max block. figure  <dig> is the histogram. the distribution has a long tail consisting of high skew scores. we believe that several cases in this flat tail represent actual cases of rewiring.
fig.  <dig> histogram of skewness scores. the histogram of all skewness scores for the max blocks of all modules and all branches is shown in blue. the horizontal axis reports the two-digit truncation of skew and the height is the number of max blocks that had that score. the moving average in a sliding window of size  <dig> is shown in red. note the long tail on the right, which corresponds to the high skew max blocks that we are most interested in




we believe that the understanding of the evolution of transcription networks will have to invoke teams of transcription factors and teams of genes in some essential form.

additional files

additional file  <dig> supplementary material: all genes present in each module. we report all modules and for each module, we list all genes in the module. each gene entry includes identifier and name. 

 



additional file  <dig> supplementary material: yeast species. we report the yeast species names and identifier. 

 



additional file  <dig> supplementary material: database of the computed transcription factor binding probabilities. we report the database of the computed binding probabilities of  <dig> transcription factors to  <dig> genes shared by  <dig> species. 

 



additional file  <dig> supplementary methods. we describe the method for estimating transcription factor binding probabilities for each pwm  on the gene promoter, for each gene in each species. 

 



additional file  <dig> supplementary material: the transcription factors and genes, and their skewness scores of the rewiring blocks. for each module, results are reported for its top scoring branch. each module lists the highest scoring block. 

 



additional file  <dig> supplementary material overview. we give an overview of the supplementary material and methods provided in this paper. 

 


the authors would like to thank chris dock, s. hannenhalli, and m. roberts for suggestions, and we thank the referees for their many useful comments.

declarations
the publication charges for this article were supported by national science foundation plant genome research program grant  <dig> 

this article has been published as part of bmc genomics vol  <dig> suppl  <dig>  2016: proceedings of the 14th annual research in computational molecular biology  comparative genomics satellite workshop: genomics. the full contents of the supplement are available online at https://bmcgenomics.biomedcentral.com/articles/supplements/volume-17-supplement- <dig> 

funding
this project was supported in part by national research initiative competitive grants 2009-35205- <dig> from the united states department of agriculture national institute of food and agriculture. this research was also supported by national institutes of health grant r01-hg <dig> and national science foundation plant genome research program grant  <dig> 

availability of data and materials
the overview of the supplementary material and methods is provided in additional file 6: supplementary material. the database of the computed binding probabilities of  <dig> transcription factors to  <dig> genes shared by  <dig> species is included in additional file 3: supplementary material. additional supporting data is included in additional files.

authors’ contributions
am and jy formulated the problem. am and jy developed this novel mathematical approach. am designed this computational tool and the mysql relational database. am, and dsm implemented this computational tool in matlab. am selected and extracted the data sets from the public databases, pre-process and loaded them into our mysql database. am and az loaded the datasets into matlab. ds prepared figures and supplementary information. am, jy conducted the interpretation of the results. am, jy, and az contributed equally to the writing of this manuscript. all authors read, revised and approved the final version of the manuscript.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
