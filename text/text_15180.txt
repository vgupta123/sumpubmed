BACKGROUND
ncrna
computational screens  <cit>  predict thousands of potentially conserved secondary structures in the human genome. similar screens in yeast and nematodes  <cit>  also produced thousands of potential non-coding rnas . some were already identified by sequence comparison as members of the known rna families, but the meaning of the majority remains unclear. with functional rna, structure is often more important than primary sequence content. thus, a blast screen against rna sequence databases is not enough – the structure needs to be taken into account when searching for known relatives of a query rna.

rfam and its usage
the rfam database  <cit>  is a constantly growing data source for ncrnas. the current release  appeared.) contains  <dig>  <dig> annotated sequences grouped in  <dig> families. an rfam family contains two secondary structure annotated, multiple alignments, a so called seed alignment and a larger full alignment. a consensus structure is also provided , with no guarantee that family members actually fold into this consensus. the seed alignment usually is hand-curated and contains only validated sequences from the literature and other databases. from the seed alignment, a probabilistic model is learned, which is then used to annotate new members of this family. all members with a good cm  score build the full alignment.

researchers today use the information stored in rfam routinely to annotate newly sequenced bacterial genomes, and with caution also for more complex eukaryotic genomes. the major obstacle researchers encounter hereby is the high computational complexity, which makes the annotation process very time consuming or even impossible. filtering techniques are therefore necessary to speed up the analysis. in the next sections we will shortly review the probabilistic models used for searching and two sequence based filtering techniques.

searching with covariance models
covariance models   <cit>  are probabilistic models, incorporating family specific structural information, much like profile hidden markov models  in  sequence analysis do. the main advantage of a cm over a hmm is, that it can model the long range interactions we see with rna base pairing.

cms basically are profile stochastic context free grammars . each base pair and each unpaired residue is represented by one state. states are arranged in a tree-like structure that mirrors the tree-like consensus structure of an rna family. additional states model insertions and deletions of bases, differing from the consensus. transitions from one state to another in a cm are modeled by production rules, each having certain transition and emission probabilities, learned from a multiple structural alignment. given a cm and a query sequence, the algorithmic problem is to find the path through the cm that emits the sequence with the highest probability. this can be done efficiently using dynamic programming with a cyk-like parsing algorithm in o, where l is the target sequence length and n the window size. the programs to build and search with cms are bundled in the software package infernal.

despite some recent improvements  <cit> , many rfam families still require more than an hour cpu time per mb. consequently, a large eukaryotic genome cannot be annotated in total within reasonable time. the search procedure has to be restricted to the most promising regions. this is where the need for efficient filters arises.

filtering
basic concepts of filtering
usually, filters strive to rule out as much of the input data as possible, without discarding too many positive cases. of course, these are two competing goals and in practice a trade-off has to be made. we define the ratio of the input data that passes the filter and the total input data as the filtration ratio. a good filter has a low filtration ratio, a useless one a ratio of  <dig>  the sensitivity is defined as the ratio of positives passing the filter and all positives. a special case are rigorous filters, which have a perfect sensitivity. they never filter out a true positive.

with most non-rigorous filters, we can easily change sensitivity versus filtration ratio, i.e. accuracy versus speed. plotting these two values, yields a roc-like curve , see figure 1), which allows for an easy comparison of different filters over a wide range of parameters.

blast-filter
the curators of rfam provide a simple and fast blast based filtering heuristic  <cit> : all blast hits with a p-value < <dig> to any member of the seed alignments are extracted and a family specific window size is added to both ends of the hit. only the much smaller subsequences are then analyzed with an expensive cm search. despite its simplicity, the filter has been used to add sequences to rfam. for each new rfam release, a portion of the embl nucleotide database is scanned this way. the resulting cm hits, together with the seed members, then constitute the full alignment.

the more diverse in sequence the seed alignment is, the more likely distantly related family members will be recognized. also, with each new family member the filter becomes more sensitive, yet less specific. however by construction, an rna perfectly in agreement with the consensus structure but very dissimilar in sequence will be discarded. at the moment, it is unclear how many homologues are hidden in the databases, overlooked by the blast filter.

hmm-filter
recently, another filtering approach was introduced by weinberg and ruzzo. they suggest profile hmms, automatically built from the cm, as a prefilter to the cm search. in  <cit> , the authors demonstrate how to convert a cm into a rigorous hmm filter. first, the cm has to be linearized. for a base pair state s in the cm, emitting columns i and j in the multiple alignment, two states in the hmm are introduced, namely at position i and j. now, assume the cm emits only c-g and g-c base pairs in state s, then the hmm would emit a c or g at position i and another c or g at position j. of course the base pair condition cannot be modeled this way, but nevertheless the sequence information is still available. second, the scores of the hmm are cleverly chosen, such that the hmm viterbi score is an upper bound for the cm score. thus any subsequence scoring below a certain threshold can be safely discarded. for many rfam families the filtration ratio is < <dig> , thus making the hmm scan itself the run time determining step. the hmm searches scan the database approximately  <dig> times faster than the original cm searches.

however, for some families the rigorousness requirement prevents a significant speed up of the resulting hmm over the cm. also the filtering efficiency may suffer from the attempt to capture even the most excentric family member. a way out of this dilemma are heuristic filters  heuristics in  <cit> ), which sacrifice rigorousness for speed. the roc-like curves in  <cit>  and the pink data point in the lower right of figure  <dig> give an impression of this fact. the current infernal release  <dig>  provides a variant of the ml-heuristic.

a new approach: shape based filtering
our idea of rna shape index filtering  is based on the following rationale: an rna family is characterised by structure, much more succinctly than by sequence content. structures of individual family members, which naturally have different length and sequence composition, may exhibit structural variation in detail, but overall, they have a common shape in a more abstract sense. given a fixed release of the database, we can compute these abstract shapes for all families. this is called a shape index.

if a query sequence belongs to a certain family, it must be able to fold into the family shape with reasonable free energy. therefore, rather than matching the query against all families in the data base, we can first  compute its feasible shape, and use the shape index to access only the families where a match is possible due to a common shape with the query.

in an ideal world, this results in a rigorous filtering algorithm : it reduces the number of searches , while no potential match is missed. in reality, the outcome depends on many details – the structural homogeneity of families, the type of shapes we compute, and so forth. moreover, the general idea gives ample room for alternative implementations. we will explore some of these in the sequel, and end up with a quite effective  parameter set that finds  <dig> % of all hits performing only  <dig> % of the queries.

a review of abstract shapes of rna
abstract shapes of rna were introduced in  <cit> . we give a short review, avoiding a fully formal treatment. when we speak about functional rna classes, we do not refer to concrete structures – we employ abstraction. a trna has a cloverleaf structure, a microrna precursor is a lengthy hairpin, oxys rna has three adjacent hairpins. obviously, the most important structural characteristic is the specific arrangement of rna helices, governed by the two principles of adjacency and embedding. the cloverleaf, for example, is a helix which embeds three helices adjacent to each other. sometimes, we want to be less abstract. the iron responsive element, for example, is a small hairpin with a bulged-out cytosin that is essential. the technique of abstract shape analysis  <cit>  formalises the concept of shapes and teaches rna folding programs to compute with these shapes. this is done in a mathematically precise sense, with no heuristics involved. the program rnashapes computes the k ≥  <dig> near-optimal structures which have different shapes, thus giving a concise overview over a molecule's structural inclinations. these structures are called shape representatives, shrep for short, as each is an optimal structure with respect to its shape.

probabilistic shape analysis  <cit>  computes boltzmann statistics shape-wise, giving us the accumulated probability of all ways in which the given sequence can fold into  a cloverleaf shape. being a cloverleaf shape with  80% probability is much more handsome information than traditional mfe folding, as this is independent of sequence length and composition, and hence comparable between different sequences. formally, a shape abstraction is a mapping from concrete rna structures to abstract shapes. concrete structures are modeled as trees, as frequently done in the rna bioinformatics. this is natural, as trees incorporate the two principles of adjacency  and embedding . abstract shapes, then, are also trees, but containing less detail. any mapping from structures to shapes that is a tree homomorphism, i.e. preserves adjacency and embedding, can be used as shape abstraction. it is our decision which structural feature is to be retained and what is to be abstracted from.

in  <cit> , five abstraction functions π ∈ {π <dig>  ... π5}  were introduced. they all abstract from the length of helices and unpaired regions, but are more or less forgetful about the presence of structural features like bulges and internal loops.

these five abstractions are the ones also used within the present approach. here we skip their formal definitions, and rather explain them by example. in doing so, we use a string representation of shapes akin to the dot-bracket strings that commonly encode concrete structures. we use square brackets to denote helices  and underscores for unpaired regions. their precise meaning, however, depends on the shape level used.

note that the level-5-shape  comprises all structures with level-3-shape , ], ]], and so on – this is because on level  <dig>  helix interruptions are not accounted for at all, while on level  <dig>  each interruption of a helix by a bulge or internal loop implies an extra helix part recorded by an extra pair of square brackets.

shape levels  <dig>  ...,  <dig> are designed to form a strict hierarchy: if πi = πi, then also πj = πj for j > i. 

methods
throughout this section, we use rfam as "the" rna family database. note, however, that our filtering technique applies to any database that groups rna sequences into structurally related families.

shape-based indexing framework
shape-based indexing works as follows:

 <dig>  for each family f ∈ rfam, we compute a family shape spectrum fss.

 <dig>  {fss | f ∈ rfam} is converted into an index data structure irfam such as a hash table or a suffix tree, with search access time independent of the size of irfam and hence of rfam size.

 <dig>  for a given query sequence x, we compute a query shape spectrum qss.

 <dig>  we access the index irfam to determine the match set m = {f | qss ⋂ fss ≠ ∅}.

 <dig>  if m = = ∅, the query ends with a negative result, without access to rfam. otherwise, we execute cmsearchf for each f ∈ m, which determines the outcome of the query.

index construction  must only be performed once for each release of the data base. the matching against the index  requires an exact match of a shape in qss to a shape in some fss. this makes access to the index so fast that its execution time is negligible compared to a call to cmsearch. the shape spectra qss and fss can be computed in many different ways, and can be combined  arbitrarily in indexing. we describe several variants and finally report which combination of ideas has worked best after extensive evaluations.

alternative shapes of a sequence, as computed by rnashapes, are ranked according to the free energy of their respective shreps. we denote by rnashapes the computation of the k top-ranked shapes of x under the shape abstraction function π, where π ∈ {π <dig>  ... π5}. k =  <dig> means we compute all shapes for x. by π, we denote the shape of structure s. rnafold-c  <cit>  denotes the minimum free energy structure of x under the constraint that the base pairs indicated in the annotation string a must be formed.

shape index construction
1-ss cons-shape-index: fss = {π}
the simplest way to get a shape abstraction for each rfam family is by translating the already given secondary structure consensus – that is the ss_cons row in the family alignment – with rnashapes to one single shape. rnashapes is not able to deal with pseudoknots, so these sparsely occurring structures must be resolved before by unpairing crossed over basepairs.

1-consensus-shape-index: fss = rankmin{⋂x∈f rnashapes}
evaluations revealed that the given ss_cons in rfam often is not a really consensus structure in terms of a commonly shared shape. there are even a few families where not a single member folds in the shape π! this can be caused by many reasons, e.g. inaccuracies in the thermodynamic model, too inhomogeneous families, or misbuilt families. therefore, we construct consensus-shapes directly from the family f. first we calculate all possible shapes for each family member. then we scan for shapes common to all family members. if there are more than one common shapes, they are ranked by the sum of their individual ranks. the top-ranked common shape then represents the family in the index. this resembles the rnacast approach to consensus structure prediction  <cit> . using a trusted sequence alignment, this could also be done with rnaalifold  <cit>  or rnalishapes  <cit> .

1-hybrid-shape-index
when a family is large, sequences are long, heterogeneous in structure, and shape abstraction level is low, the number of shapes to be computed to find a common shape may be impractical. in such a case, the 1-consensus-shape-index construction resorts to 1-ss_cons-shape indexing.

union-shape-index: fss = {π) | x ∈ f}
the first three approaches all use a single shape to represent a family. but often, a family is too diverged to be characterized well by a single shape. instead, it can be described with one shape per sequence. we could simple use the shape of the mfe folding. however, to make use of the information in the family model, as captured by ss_cons, we use rnafold for a constrained folding of each sequence, and compute the shapes from these folds. this implies that all shapes agree on the helices required by ss_cons, but may have additional helices in different places. we still expect |fss| < |f|.

k-best-shape-index: fss = ⋃x∈f rnashapes
respecting the fact that a single shape may be too strict to describe a whole family, we finally use the k top-ranked shapes for each individual sequence in the family, this time ignoring ss_cons. in a homogeneous family, the sequences will mostly agree on these shapes. but otherwise, this results in a manifold growth of the shape index – which is not a problem, as index access is independent of index size. in the end, this index turned out as the most effective. figure  <dig> visualizes the shape index construction for just one of the  <dig> rfam families, employing multilevel shape abstraction as explained below.

in the hash based shape index, where they later serve for the query look-ups. the index is a hierarchically arranged, 3-dimensional search structure – in descending search order of shape-abstraction-level, shape-string and shrep-energy. the example also displays a very characteristic phenomenon: the weaker an abstraction is, the greater is the variance of shapes and the smaller are the family-lists that are associated with these shapes. the last fact is not shown directly, but can be recognized by the increasing energy-interval-size.

query shape spectrum construction
the five methods for index shape spectrum construction differ in the way they use family information, or effectively treat each family individually. for the query shape spectrum, we have only one sequence, and discuss only two variants.

1-shape-spectrum: qss = rnashapes
this naive spectrum represents the query simply by its top-ranked shape, which by definition is the shape of its minimum free energy folding.

k-shape-spectrum: qss = rnashapes
we tend not to trust solely in the minimum free energy folding of a sequence as its "true" structure. accordingly, we should not use its shape alone. choosing k >  <dig> shapes to represent the query results in a trade off between more shapes for a higher chance to find the right family, but potentially more fruitless calls to cmsearch.

using multi-level abstraction
all the previous constructions of family and query shape spectra can be used in combination, under the restriction that both were made using the same shape abstraction function. but which abstraction level should be used? how does the level of abstraction influence index-based search? on the lower abstraction levels , shapes are most specific. relatively few families are associated with each shape. a shape match on this level often leads directly to the "right" family. however, if there is no match on the low abstraction level, the sequence may be a diverged family member, and a match on a higher abstraction level is still possible.

to take advantage of both, short runtime at low abstraction level and better chances to find diverged families with a strong abstraction, we construct fss and qss for level  <dig> through level  <dig>  and the search iterates ascendingly through the five available abstraction levels. the hope is, that on average, a match can be found in one of the lower levels. ascending through shape abstraction levels incurs practically no overhead – an unsuccessful cm search on  level  <dig> means that we need not re-search this family because of its hits to the index on a higher level.

using folding energies
members of sequence families often share a typical range of folding energies. a query that folds in a common shape with some family members, but with substantially different energy, is unlikely to be a family member. together with the shapes, rnashapes also delivers the energies of the corresponding shreps. hence, the shapes in the index can be recorded together with their shrep energies, and the matches in m are restricted to those with a similar energy. figure  <dig> shows a very clear example. while all three families share the same shape – a simple hairpin – their energies form quite distinct energy ranges, independent of sequence length and gc-content. to this end, we reduce the match set m to those families f that share a shape of their fss and the qss with the shreps free energy tolerance between both shapes less than ε percent.

this normalized energy value. several distinct peaks can be seen, showing that the shrep energy does not only depend on sequence length. therefore, it provides an additional attribute of a family that can be used in filtration.

omitting "difficult" families
our evaluation shows that there are a few families which can hardly be found. often , these are families with pseudoknots. shape abstraction can, in principle, be extended to pseudoknots and implemented in pseudoknot folding programs such as pknotsrg  <cit> . however, this has not been done yet. for the moment, it is not surprising that these families perform badly. in a large scale project, some more runtime can be saved by ignoring these families. additional file  <dig> lists the most difficult families, sorted by their impact on the filter sensitivity.

algorithm
the idea of shape-based indexing, as we have seen in the previous section, opens up a four-dimensional search space: we may vary the construction of family shape spectra, query shape spectra, shape abstraction level, and consider different tolerances in the use of energies. there are many trade-offs. for example, when the family is represented by several shapes per family member, chances increase that describing the query with a single shape is sufficient.

we have explored numerous points in this methodical space, and for the routine application considered here – matching a large number of predicted ncrnas as queries against rfam – the choice of methods described in this section has worked best.

method of choice
the method of choice for our program rnasifter is a combination of the k-best-shape-index, together with the multilevel abstraction, use of the folding energies and a k-shape-spectrum of the query:

 qss=rnashapes∀π∈{π <dig> ...,π5}fss=∪x∈frnashapesπ∈{π <dig> ...,π5}m={f|qss∩fss≠ <dig> ∃q∈qss,d∈fss|e−e|<ε,} 

where e  denotes the shrep energy of shape q.

this combination of methods is implemented by rnasifter  <cit> , available as source code or for online submission. figure  <dig> shows the iterative workflow through the  <dig> abstraction levels.  <dig> parameters remain to adjust to find an acceptable trade-off between sensitivity and filtration ratio, namely the number of shapes for the query kqueryπ for all five shape-levels, five parameters for the numbers of shapes for each family to build the shape index kfamilyπ, and the allowed energy tolerance between query-shape and the family-shape ε. it is optional to omit "difficult" families due to the decision of the user. this is realized by removing bad families from the set m  before applying cmsearchf .

the corresponding level-1-shape index so the system goes to the next higher level. a lookup for the second and third level  <dig> query shape  results in the two candidate families rf <dig> and rf <dig>  the exact but expensive cmsearch is now applied to the candidates but it turns out that they are not the right families. so the process continues with level  <dig>  this time all three shapes match with the level  <dig> shape index and suggest six, two and six candidate families. two of the six candidates from the upper shape have been checked already, so they can be removed from the candidate list to save runtime. again, a cmsearch is performed for each of the remaining  <dig> candidates. after the candidate rf <dig>  is identified as a true hit, the filter aborts the remaining operations and reports the identified hit to the user. the use of the shrep energies and the energy-indices is not shown here, but one can imagine it as a second lookup placed between the first query-shape look up and the cmsearch in order to thin out the candidate list.

RESULTS
leaving out the blast filtering, the existing search process for a query sequence uses all available covariance models from the rfam database and compares them to the query via the cmsearch program. the rfam is an increasing set of r covariance models, for rfam  <dig>  r is  <dig>  so the runtime for one query would be o, in the worst case. our approach reduces r to rsifter, the number of models that have to be considered for a cmsearch comparison.

construction of a testing set
performance of a filtering system is governed by sensitivity and filtration ratio. to measure sensitivity, one needs a set of queries with known family membership. we build this set by dividing all rfam full alignments into two disjoint sets. 60% sequences from each family are used for constructing the shape index. from the remaining 40% of the family-sequences we choose at most four sequences for inclusion in the test set. this procedure yields  <dig> test sequences in total, because some smaller families lack sufficient members. this set is named "family".

the second value for filtering performance is filtration ratio. in a whole genome screen, in most cases, a query will not result in a match to rfam. the filtering suggests several possible families, which later have to be checked by cmsearch. queries that result in a true match may lead to success after inspecting only a few suggested families, but queries with no family membership could only be rejected after checking each family that was recommended by the filter. this is why for evaluating efficiency, non-matching samples in the testing set are important. they constitute the worst case in an application scenario.

the most obvious way of constructing non-matching sequences is to generate them by random. each nucleotide occurs with a relative frequency of 1/ <dig>  the length of the artificial sequences is uniformly distributed in the range from the shortest to the longest sequence in the rfam database.  <dig> random sequences build the "random_uniform" testing set.

in order to achieve a biological more realistic scenario,  <dig> protein-coding genes, considered unlikely to form any ncrna, were selected from ncbi. subsequently these genes were verified to truly not contain any ncrna structures via the rfam sequence search. these genes serve as source for further  <dig> sequences, randomly cut out of the original genes. again, lengths are uniformly distributed relative to rfam. this set is called "genes_uniform". the chosen genes have the following accession-numbers: gi| <dig>  gi| <dig>  gi| <dig>  gi| <dig>  gi| <dig>  gi| <dig>  gi| <dig>  gi| <dig>  gi| <dig>  gi| <dig> and gi| <dig> 

the energy-index depends on the folding energies and the folding energies are related to the sequence lengths. the previous sampling sets, namely "random_uniform" and "genes_uniform", are based on uniformly distributed sequence lengths in the rfam database. but this is not true for the database. rfams longest sequence has approximately  <dig> bases, but the overwhelming majority has around  <dig> to  <dig> nucleotides. the two further test sets "genes_nonuniform" and "random_nonuniform" reflect this imbalance, because their sequence lengths are distributed equally to rfam. each set is a composition of  <dig> sequences. all test sets are provided on the rnasifter web site, the whole evaluation was done with the union of all test sets .

testing
rnasifter offers  <dig> parameters for choosing an acceptable trade-off between sensitivity and filtration ratio:

• five parameters for the numbers of shapes for the query kqueryπ. one for each shape abstraction function π <dig>  ⋯, π <dig> 

• five parameters for the numbers of shapes for shape index construction kfamilyπ. one for each shape abstraction function π <dig>  ⋯, π <dig> 

• percentage of tolerance between query- and shape index energy ε.

we decided to freeze the number of shapes in each level to the same value and to sample with the following energy tolerances  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> . so kquery is the number of shapes for a query in all five shape-levels. kfamily is the same for shape index construction. this results in 5·5· <dig> =  <dig> different parameter settings. each setting is used for an rnasifter invocation with the app.  <dig>  test sequences. the sensitivity  is then calculated as the ratio between true positive rnasifter outcomes and the overall number of positive test sequences, that is 2030: sen=tp <dig> 

filtration ratio  is the ratio between all candidate families suggested by the rnasifter and the number of all sequences multiplied with the number of families in rfam: eff=#candidates#sequences×#families. rnaalifold but with suboptimal structures of different shape), and the results from a complete run with the hmm filter .  <dig> different parameter sets, see subsection testing in the evaluation, are used for the k-best-shape-index. the blue coloured data point  displays our recommended parameter settings as a practical trade-off between filtration ratio and sensitivity.

kfamily for the k-rnalishapes-shape-index is handled as before, but the energy-index is switched off by a gigantic value for ε. the other five shape-indices use only one shape per family or per family member, so their kfamily is always set to  <dig>  their energy-index is switched off, too.

the results for all  <dig> parameter settings are depicted in figure  <dig>  the relatively wide parameter space allows to adjust rnasifter for different applications. for a very accurate search the given parameters could be set to very high values, like our analysed maximum kfamily =  <dig>  kquery =  <dig>  ε =  <dig>  – this is the right uppermost data point in figure  <dig>  this unbalanced setup results in a good sensitivity of  <dig> %, but it must be bought by a poor filtration ratio of only  <dig> %. vice versa, a fast runtime comes with a lower sensitivity, e.g. the data point kfamily =  <dig>  kquery =  <dig>  ε =  <dig>  indicates a good filtration ratio of  <dig> % and a low sensitivity of  <dig> %. our recommendation  for a good trade-off between filtration ratio  and sensitivity  is the parameter setting kfamily =  <dig>  kquery =  <dig> and ε =  <dig> .

in the filtering section we introduced two existing filtering approaches. table  <dig> compares their asymptotical runtime with rnasifter and the unfiltered procedure with cmsearch. figure  <dig> illustrates the differences of measured runtimes for the four variants of retrieving the right families. once more, the app.  <dig>  sequences of the testing set are used for this analysis.

"blast-filter": the rfam perl script "rfam_scan.pl" from the rfam website is used. "rnasifter" uses the k-best-shape-index with the suggested parameter set. the considered sequences for this comparison is the whole testset.

CONCLUSIONS
we have introduced the idea of shape-index based filtering for faster search in structural rna databases. the approach is based on the use of family shape spectra, query shape spectra, and shape abstraction levels, each of which can be computed in different ways. central to all combinations of these constituents is that the shape index can be accessed with exact matching techniques, which requires negligible computing time. different parameter settings have been explored systematically, with a filtration ratio ranging from  <dig>  to  <dig> , and sensitivity ranging from  <dig>  to  <dig> . we recommend a particular setting with filtration ratio  <dig>  and sensitivity  <dig> . not all possibilities have been explored yet. for example, one could work with family-specific parameters kfamily when constructing the index.

when  15% of all family models must be searched, the practical speed-up depends on which models these are. mirnas, for example, can be searched with cm models much faster than  rnasep. therefore, we cannot simply derive a 40-fold runtime speedup from a filtration ratio of  <dig> . to provide a concrete example: the first  <dig> ncrna predictions from the rnaz screen  <cit>  were matched against rfam, and rnasifter reduced runtime from  <dig>  to  <dig>  hours. using the default parameters in this experiment, the filtration ratio is  <dig>  but runtime only decreases to  <dig> 

two interesting observations can be drawn from the performance curve in figure  <dig>  consider the relative position of the data points for  and , where the former is better both in terms of filtration ratio and of sensitivity. hence, it is more important to consider multiple structures in the query than in the family. this has the plausible explanation that the several members in a family normally do not all fold into the same top-ranked shape, and this behaviour helps to find queries with similar behaviour. this means that structural variation within the family, to a certain extent, is positive information.

the other interesting observation suggested by the curve is that our method seems to hit the wall near 98% sensitivity. assuming for a moment that shape-index based filtering was a perfect method, a keen conclusion would be that 2% of rfam sequences are misclassified. however, we know that our filtering cannot be perfect when structures are classified using pseudoknot features, which currently cannot be handled by shape abstraction. a closer look at the missed cases shows that these are mainly due to the members of the "difficult" families. they include the families rf <dig>  rf <dig>  rf <dig> ; a full list of  <dig> "difficult" families in the present rfam release is given in additional file  <dig> 

in a preliminary investigation of human ncrna predictions from the screen by washietl et al.  <cit> , applied to  <dig> hypothetical ncrnas of high rnaz score, our filtering technique discovered  <dig> new rfam hits. on the other hand, it overlooked  <dig> hits found in the original study. this can be traced back to cases where the candidate ncrna was poorly embedded in the rnaz window. naturally, our structure based approach is more sensitive to this than a filter that looks for a short stretch of sequence similarity. working with an adaptive window size is a current research problem in rna gene prediction. rnasifter will benefit from advances in this direction.

comparing the different filtering techniques, the method of choice depends on the scenario. if  a complete genome is to be scanned, the hmm-based filtering  <cit>  provides a fast screening approach, where the faster hmms must be run for each family, but only a few cm searches. shape-index based filtering does not provide a screening mode, and can only be applied when individual ncrna candidates have been predicted by  methods. the two filters can also be used in cooperation: the shape index can be used to further restrict the number of cm searches that have to be performed as the result of positive hmm filtering. conversely, the hmm family model could be run prior to a cm search triggered by a shape index hit. here, we have presented the shape indexing technique in its pure form. the trade-offs achieved with filter combinations are a subject of future work.

second row family rf <dig> is omitted, the third row omits families rf <dig> and rf <dig> and so on. note that the testset shrinks, because the sequences of a skipped family are also removed from the set.

authors' contributions
rg had the initial idea for a shape filter. all three authors participated in the conceptual development of the approach. sj analyzed the data and implemented all software. all authors read and approved the final manuscript.

supplementary material
additional file 1
effects of skipping "difficult" families on sensitivity and filtration ratio. the test- and training sets are constructed as above, but this time we choose up to  <dig>  sequences for each family instead of four. random- and gene- testsets are not considered, because we focus on the changes of the sensitivity. rnasifter is set to kfamily =  <dig>  kquery =  <dig>  ε =  <dig> . one has to read the rows in a accumulative fashion. in the first row no family is skipped, in the second row family rf <dig> is omitted, the third row omits families rf <dig> and rf <dig> and so on. note that the testset shrinks, because the sequences of a skipped family are also removed from the set.

click here for file

 acknowledgements
sj is grateful to pp gardner and the rfam group for in-depth discussions of indexing strategies. sj was partially funded as a research assistant by bielefeld university.
