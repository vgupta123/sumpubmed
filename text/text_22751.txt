BACKGROUND
more genomes have been sequenced from ascomycete yeast species  than from any other group of eukaryotes. yeasts provide an excellent system for exploring eukaryotic genome evolution by comparative genomics because their genomes are compact  with few introns, making them straightforward to sequence, but they still retain extensive synteny across deep phylogenetic distances
 <cit> . moreover, there is a wealth of information about gene functions in saccharomyces cerevisiae, probably the most extensively-studied model organism in the world
 <cit> .

yeast comparative genomics has produced many insights into genome evolution, including the discovery of whole-genome duplication 
 <cit> ; development of methods for identifying conserved regulatory elements and rna genes
 <cit> ; exploration of changes in the genetic code
 <cit> ; and detection of horizontal gene transfer and its functional consequences
 <cit> . furthermore, comparative genomics has played a major role in gene discovery and improving the quality of genome annotations. for example, a comparative analysis of four closely related saccharomyces species
 <cit>  led to a revision of the previous annotation of the s. cerevisiae genome: elimination of previously annotated orfs, redefinition of start and stop codons, and discovery of new introns. a similar approach was conducted with the pathogenic basidiomycete yeast cryptococcus neoformans, responsible for cryptococcal meningitis
 <cit> .

the need for automated annotation has become urgent with the development of next-generation sequencing technologies, but annotating genomes remains a challenge and still relies on a process that includes many manual steps
 <cit> . annotation can be viewed as consisting of two primary steps: inferring gene structures, and making decisions about the orthology or paralogy relationships between these genes and genes in other species. yeast genomes present an unusual set of circumstances at both of these steps. the first step, inferring gene structures, is very simple for most yeast genes because they are intronless. however, accurate identification of the coordinates of the other ~4% of yeast genes that have introns is difficult unless cdna information is available, particularly because many yeast introns are very close to the gene's start codon
 <cit> . some previous automated approaches to annotation of yeast genomes either ignored all introns
 <cit> , or used generic fungal gene models that resulted in the over-prediction of hundreds of nonexistent introns
 <cit> . the second step, classifying genes as orthologs or paralogs of genes in other species, is often ignored by automated approaches. they typically use blast
 <cit>  to identify unidirectional or bidirectional best hits between genes in the new genome and a reference database, and then annotate genes as 'similar to' genes in other species, or as members of particular gene families, without an explicit statement about whether the authors consider the interspecies relationship to be an orthologous one. decisions about orthology versus paralogy are important because, in general, orthologs tend to have conserved gene function whereas paralogs often diverge
 <cit> . for this reason, manual annotators and scientists working on specific genes usually want to identify orthologs between species, and these orthology decisions frequently make use of synteny information. in yeasts of the family saccharomycetaceae, orthology relationships are complicated by a wgd event in the common ancestor of several species, leading to a 2: <dig> synteny relationship between genomic regions in post-wgd and non-wgd species
 <cit> . among all the automatic annotation tools currently available, only a few use synteny data
 <cit>  and none consider wgd. until recently, none had been developed specifically for yeast species
 <cit> .

in  <dig> our laboratory developed the yeast gene order browser , which is a database and interface for comparative genomics for saccharomycetaceae yeasts
 <cit> . a major strength of ygob is that it contains manually curated sets of orthologs , which have been identified based on their conserved synteny relationships. we recently carried out a project to sequence the genomes of multiple previously unstudied yeast species by roche- <dig> sequencing and de novo assembly
 <cit> . we reasoned that the information in ygob could be used to automatically annotate the new yeast genomes with accuracy comparable to a manual annotation. the core concept of our approach is that any particular region of a newly yeast sequenced genome is likely to contain genes whose gene order is similar to that in other yeast species, and therefore can be mapped onto the 'ancestral' gene order that we previously inferred to have existed just before the wgd occurred
 <cit> . after the approximate correspondence between a region of the newly-sequenced genome and a region of the ancestral genome has been established, the gene content of that ancestral region can then be used to improve the annotation of the corresponding region in the new genome – for example to make decisions about the correct orthology relationships for genes that are members of multigene families, or to find genes that were not initially annotated but which are expected to be present in the region because they are present in the syntenic region in other species
 <cit> .

in this manuscript we present ygap , the pipeline we developed to carry out automated annotation by this approach. the data input to ygap are the entire ygob database, the scaffold sequences from the newly sequenced species, and  its contigs and individual sequence reads. the output includes a set of annotation files, both in ygob's internal format and as standard embl database format. the webserver also provides a 'mini-ygob' interface for the new genome that allows its gene order to be compared to other species. to test the pipeline we used the genome of the extensively studied s. cerevisiae as well two of the new genomes from our sequencing project, naumovozyma castellii and tetrapisispora blattae <cit> .

methods
input data
next-generation sequencing projects can produce three different types of output dna sequence files:  a 'reads' file containing all the primary sequence reads; and after assembly,  a 'contigs' file containing the contigs assembled from overlapping reads; and  a 'scaffolds' file, typically made by concatenating together those contigs whose relative order and orientation is known, separated by runs of 'n' bases representing the estimated lengths of unsequenced gaps. for example, our genome project for naumovozyma castellii generated  <dig>  million roche- <dig> reads. the celera assembler
 <cit>  assembled these reads into  <dig> contigs, and arranged  <dig> of these contigs into  <dig> scaffolds that correspond to almost complete chromosomes .

to run ygap, the user must provide a scaffolds file from the new species. this is the only sequence file whose input is mandatory, but if contigs and reads files are also available ygap can use them for optional steps. the user must also specify whether the new genome comes from a post-wgd or a non-wgd species, which can usually be predicted from the species' phylogenetic position.

ygap also requires access to the ygob database. this database consists of previously annotated yeast genome sequences, and lists of the gene names that comprise each of its ~ <dig> homology pillars
 <cit> . a pillar consists of a manually curated set of genes that are orthologs, or paralogs resulting from wgd, among the species in the database. prior to our sequencing project
 <cit> , ygob contained data from  <dig> species: s. cerevisiae <cit> , s. bayanus <cit> , naumovozyma castellii 
 <cit> , vanderwaltozyma polyspora 
 <cit> , candida glabrata <cit> , zygosaccharomyces rouxii <cit> , kluyveromyces lactis <cit> , eremothecium gossypii 
 <cit> , lachancea kluyveri 
 <cit> , lachancea thermotolerans <cit> , and lachancea waltii 
 <cit> .

in the tests of ygap described here, to avoid circular reasoning we omitted s. cerevisiae data from ygob pillars when annotating the s. cerevisiae genome, and we omitted n. castellii data  when annotating our new sequence of the n. castellii genome.

checking the integrity of scaffolds
ygap will report on the consistency between the primary data and the scaffold structure, if the user provides a reads file that includes 'paired' reads that are expected to be close together in the genome. the user must also provide a contigs file for this step. using blastn, ygap maps each read from a pair onto a contig, provided that the read has a unique hit in the genome . pairs of reads that map to different contigs identify possible physical links between contigs, which should correspond to the scaffold organization deduced by the assembly program. ygap summarizes these data in the form of a matrix listing the number of read-pairs that support a connection between any two contigs. it sorts the contigs in the order that they occur in the scaffolds. this analysis allows the user to see the amount of support for any connection between two contigs in the scaffold structure, and the support for possible alternatives.

locating genes
in an initial annotation step, trnascan-se
 <cit>  is used to detect  and annotate trna genes. in the later steps of ygap's annotation process, no protein-coding gene will be allowed to overlap with a trna gene.

annotation of protein-coding genes is largely based on tblastn searches
 <cit> . we use every protein from every ygob pillar as a query in a tblastn search against the genome , and initially store all hits with expect values e < 1e- <dig>  for each pillar, we then identify the place in the genome where that pillar has its strongest hit, and other places where it has weaker hits. that is, among the proteins encoded by the pillar  we identify the query protein  that gives the lowest tblastn e-value  versus the genome and store the location of that hit. it is likely that query q comes from the species that is most closely related to the new genome. we also store the location of weaker hits between q and the genome, provided that the exponent of their e-values is lower than − <dig> and lower than e/ <dig> . for each stored location for a hit by query q, we build a gene model as described later below.

several ygob pillars can match the same location in the new genome due to the existence of paralogous genes. thus two  pillars might hit identical or overlapping regions of the genome, and gene models would initially be constructed for both of them. after the tblastn searches are complete, we use synteny information to determine which pillar is the correct match for this genomic location. specifically, if locus l in the new genome is hit by queries from two pillars p <dig> and p <dig>  we examine the regions of the new genome upstream and downstream of l and identify neighboring pillars  that have been mapped unambiguously to these flanking regions. we then ask whether, in the ancestral genome
 <cit>  or in s. cerevisiae, p <dig> or p <dig> occurs in the interval between pleft and pright; if this is true for p <dig> but not p <dig>  we assign locus l to pillar p <dig> and discard p <dig> as a candidate for l. note that this assignment is based on synteny, without regard to the tblastn e-values for p <dig> and p <dig> 

when a post-wgd species is being analyzed, the software allows two candidate genomic loci to be assigned to a single pillar, whereas in a non-wgd species only one locus can be assigned to a pillar. where a tandem duplication has occurred, only one of the duplicates is assigned to the pillar while the other is assigned to a separate pillar containing the second copy in any species in which the tandem duplication has occurred. if a locus is hit by several pillars, but none of them has conserved synteny, the location is annotated as a gene but is not assigned to any existing pillar.

gene models
for each stored hit between a query protein q from a pillar p and a genomic location l, we make a gene structure prediction, based on ygob's information about intron/exon structures in pillar p. we choose a reference gene r from pillar p to use as a basis for the model, giving preference where possible to genes from the same species group  as the new genome. we also give preference to intron-containing gene models over gene models without introns, because we want to consider the possibility that the new gene might contain an intron if any of the existing annotated genes in the same pillar and species group contains an intron. for example, if the new genome comes from a post-wgd species, and some of the genes from post-wgd species in pillar p contain an intron, r is chosen to be the post-wgd intron-containing gene with the best tblastn e-value. if no such gene exists, the order of preference in choosing r from the set of genes in p is as follows:  the post-wgd gene with the best hit;  the intron-containing gene with the best hit;  the gene with the best hit. if more than one gene has the same blast e-value , the gene with the best score is used. the mean lengths of the non-wgd genes and post-wgd genes in p are also calculated at this step. once a reference gene r has been defined for locus l, we store the coordinates of the best tblastn hit between r and locus l regardless of its e-value.

the next step in creating a gene model at locus l depends on the number of blast hsps  generated between the reference gene r and the genome in the vicinity of locus l. if only one hsp is present, the endpoints of this hsp are used directly as seed coordinates to build a gene model. if two or more hsps are detected on the same strand, we evaluate them in pairs in order of location . we classify the relationship between each pair of consecutive hsps as one of the following four situations :  frameshift ;  low similarity ;  intron ;  gene duplication . in situations i-iii, the outer edges of the two hsps are used as seeds for the gene model; in situation iv, two separate models are created.

when these possibilities have been evaluated, the seed coordinates derived from the hsps are then used to construct a gene model. we attempt to extend the seed coordinates upstream and downstream to find start and stop codons for the gene , by matching the hsp's location and frame to a map of all open reading frames in the genome . if we fail to find a suitable start position by elongating the hsp in this way, we instead look for the requisite codon within the hsp. for instance, if no possible start codon is found upstream of the hsp, we will trim the 5' end of the hsp by up to  <dig> nucleotides in order to find a suitable start codon. in the event that a suitable start codon is still lacking after this step, the gene is instead annotated with the seed coordinates and is tagged for manual curation . 

intron annotation
because introns in yeast genes are rare, we only consider the possibility that a gene model may require an intron if another gene pillar p already contains an annotated intron. this other gene must come from the same species group  as the new genome; the user specifies whether the new genome is post-wgd or non-wgd when launching ygap. we use the hsps generated in the tblastn search to test for the existence and location of the intron. if there are two hsps, we search for a possible 5’ splice site , branchpoint site  and 3’ splice site 
 <cit> . in many cases, however, the first exon of a gene is too small to generate a tblastn hit so there is only one hsp, corresponding to exon  <dig>  in these cases we attempt to identify a suitable intron and a suitable start codon, in order to make a protein similar to that of other species. as almost all intron-containing genes in ygob have only one intron , we search only for one intron per gene. restricting the search to one intron per gene greatly simplifies the process, as without hsp data the number of combinations of exon features that could be generated to make a feasible multi-intron gene is too large to make an accurate prediction. in practice, this limitation means that any 2-intron genes in the genome will be flagged by ygap as requiring manual intervention.

frameshift correction
if the analysis of hsp pairs detects an apparent frameshift sequencing error  in the scaffold data, ygap can try to correct the error automatically. this option can be enabled or disabled by the user when ygap is launched. if enabled, the output from ygap will include a modified version of the scaffolds file in which bases have been added, or more rarely removed, at particular sites in order to correct frameshifts. ygap's output also includes lists of the genes in which frameshifts have been automatically corrected, and lists of genes in which a probable frameshift was detected but no automated correction was possible. the user can also choose to disable automatic frameshift correction, but still generate a list of genes in which probable frameshift errors have been detected.

the presence of a frameshift error usually results in two hsps in different frames. ygap provides the option of making two types of automatic correction:  if a file of primary sequence reads from the same species was provided as part of the input, we carry out a blastn search against the reads file using as a query the region from the scaffolds file corresponding to  <dig> bp upstream of the end of the first hsp to  <dig> bp downstream of the start of the second hsp. for blastn hits with e < 1e- <dig>  we examine the match between the query and the read, noting the indels . for each indel seen in the search, we count how many reads contain it. we take the most common indel and test whether it would result in creation of an intact orf. if it does, we make the corresponding change in the scaffold sequence and the frameshift has been fixed. if not, we do not make the change and instead we examine the next-most common indel. we continue this process until the frameshift has been fixed or until there are no more indels that were seen in at least  <dig> reads.  if no reads file is available, one or two n nucleotides are inserted into the gene containing a frameshift, at the estimated site, in order to fix it approximately.

searchdogs and large orf steps
two final steps of searching for protein-coding genes are carried out after the initial annotation has been completed. first, we run a version of searchdogs
 <cit>  to look for small, highly-divergent genes that can be recognized based on their conserved synteny to orthologs in other species. searchdogs does not employ any threshold for blast similarities, so it can find weak hits that were missed by the tblastn method described above , provided that they are in a conserved genomic location and do not contain introns. second, we use getorf
 <cit>  to identify any large orfs  that remain unannotated in the genome. genes predicted by searchdogs and getorf are included in the genome annotation and also listed separately in the ygap output to allow them to be examined manually.

retrotransposons
retrotransposons  pose a particular challenge to automated annotation because:  they are mobile, so their locations are usually not conserved across species or even among different strains of the same species;  they occur in multiple copies in most species, with copies in different places in the genome often being highly similar in sequence. tandem arrays of integrated retrotransposons are also common, as are solo ltr  units;  their repetitive nature tends to cause problems to sequence assembly software, so they often occur at the ends of contigs and their sequences are often incomplete;  some copies of these elements are inactive and their protein-coding regions are pseudogenes. in ygob, annotated protein-coding genes that are parts of retrotransposons are flagged with a special 'ty' label and displayed in a dark gray color. ygob always leaves these genes as singletons and does not put them into pillars with genes from other species
 <cit> .

during protein-coding gene annotation in ygap, if a ygob gene carrying the 'ty' label hits a region of the new genome , that region will be flagged as ty-like. ygap will attempt to identify coordinates for the gene as described above, but the gene will be flagged as 'ty' and will be left as a singleton. ygap does not attempt to work out the detailed structure of retrotransposons.

mini-ygob browser
the output from ygap is presented in an individual webpage with links to a set of files including the full annotation file , files of genes tagged for manual attention , and other files depending on what options the user has selected. additionally, we provide the user with a private browser interface to inspect the new genome. this browser is a simplified version of ygob, in which the only species displayed are the new genome, s. cerevisiae , e. gossypii , and the inferred ancestral genome
 <cit> . this 'mini-ygob' view allows the user to examine the structure of the annotated genome in the region around any gene of interest, for example to examine the context of singleton genes, and it provides an easy way to retrieve the predicted protein sequence of any gene of interest. the mini-ygob interface also helps the user judge the quality of the genome assembly and annotation by showing the extent of colinearity between the new genome and the reference genomes, and by allowing the user to see the extent to which genes conserved among other species are missing  from the new genome.

we anticipate that a user might run ygap to produce an initial annotation of the genome, then use the mini-ygob interface to look for structural problems in the assembly , and then perhaps modify the scaffolds file and re-run ygap. the mini-ygob browser is only accessible to the user, and only for a period of  <dig> months after ygap is run, because we intend it to be used for initial inspection of the genome and annotation, rather than as a permanent database for the genome. new genomes can be added into ygob proper once they are finalized.

RESULTS
ygap was designed to have a simple interface to our webserver. an upload screen  allows the user to upload the sequence files , to provide a prefix that will be used for gene names, to designate the species as post-wgd or non-wgd, and to select options related to automated frameshift correction. after the run is complete, the user receives an email directing them to a results page . a sample results page can be viewed at
http://wolfe.gen.tcd.ie/annotation/example.html. the results page includes links to several types of output files and gene lists, as well as a link to a “mini-ygob” browser .

tests with s. cerevisiae
to test ygap's performance we ran an automatic annotation of the genome of s. cerevisiae, which is very well studied and annotated. to do this, we retrieved the chromosomal dna sequences of same version of the s. cerevisiae genome that is currently used in ygob . to avoid using the annotated s. cerevisiae gene set as a source of information, we removed all s. cerevisiae genes from the ygob pillar set for this experiment. we then ran ygap using the s. cerevisiae genome dna as input, and with the frameshift correction option disabled. this setup replicates the simplest scenario that the pipeline may encounter, where no file of primary sequence reads is available but the scaffolds are expected to be highly accurate.

the whole annotation took approximately  <dig> hours on a  <dig> ghz processor with access to  <dig> gb of ram and was then compared with the curated s. cerevisiae annotation in ygob. for comparison, we did a similar annotation using augustus
 <cit>  with default options set. augustus is a widely used automatic annotation tool that has been specifically trained for s. cerevisiae. ygap predicted  <dig> potential genes in s. cerevisiae, compared with  <dig> predicted by augustus and  <dig> curated genes in ygob . to assess the accuracy of the gene models, we compared the predicted gene coordinates to those in the ygob database . the analysis of coordinates  shows that our pipeline predicted the structures of  <dig> genes completely correctly, which is  <dig> more than augustus and 91% of the genes in ygob. however if we consider only start and stop codon positions and ignore intron structures, the gap between the ygap and augustus predictions is reduced to about  <dig> genes. 

columns show the numbers of genes in each category, when compared to genes in the reference ygob annotation of the s. cerevisiae genome .

the numbers of false negative and false positive gene predictions by ygap also compare favorably to augustus. the numbers of false negatives  for ygap was four times lower than for augustus . a second category of false negatives consists of “overlap” cases, where the automated programs failed to annotate a gene and instead extended a neighboring gene  so that it overlapped with the range of the unannotated gene. ygap overlooked  <dig> genes for this reason, compared to  <dig> for augustus. combined, these two false negative categories amount to  <dig> genes for ygap and  <dig> for augustus. the numbers of false positives  were more similar:  <dig> for ygap and  <dig> for augustus. of the remaining gene predictions whose structures were incorrect, most had either a wrong start or stop coordinate .

we also compared the performance of ygap and augustus in predicting the intron/exon structures of genes in s. cerevisiae . in the s. cerevisiae genome there are  <dig> introns in the protein-coding regions of  <dig> genes
 <cit> . ygap predicted a total of  <dig> introns, of which  <dig> were false positives . the main problem was that ygap's false negative rate  is high. of the  <dig> true-positive predictions from ygap, the predicted intron coordinates were completely correct for  <dig> . augustus had a similarly high false negative rate, and predicted more introns in total due to a higher false positive rate . 

note that false negatives in ygap include not only those genes for which no intron was predicted by the software, but also those for which intron coordinates could not be defined and were tagged for manual curation. the total number of introns studied  differs between ygap and augustus because some genes were not predicted by both methods.

automatic annotations of naumovozyma castellii and tetrapisispora blattae
we used ygap to automatically annotate the genome of naumovozyma castellii. this species has previously been called saccharomyces castellii and naumovia castellii. its genome was originally sequenced, by sanger sequencing to draft  coverage by cliften et al.  which resulted in hundreds of contigs. genes in these contigs were annotated manually by our laboratory as part of the ygob project
 <cit> , and we later added  <dig> genes using searchdogs
 <cit> . we refer to this annotation as the 'scas' annotation . the total number of protein-coding genes in the scas dataset is  <dig> 

we recently resequenced the same strain of n. castellii using the roche- <dig> platform with 20x coverage, with a strategy designed to maximize the size of scaffolds. this genome was assembled without making use of the sanger data. the resequenced genome comprises only  <dig> scaffolds, which compares reasonably well to a pulsed-field gel electrophoresis estimate that this species has  <dig> chromosomes
 <cit> . we then used these n. castellii scaffolds as input to ygap. as before, to avoid circular reasoning we ignored annotated n. castellii  genes from the input ygob pillars, but we included s. cerevisiae genes. for this run of ygap, we included the sequence reads file and allowed automatic correction of frameshifts. the whole annotation took  <dig>  hours on the same server, and  <dig> protein-coding genes  were predicted . we refer to this dataset as the 'ncas' dataset . in this run, ygap identified  <dig> positions in the genome as frameshift sites, and it automatically corrected  <dig> of these ; it flagged the remaining  <dig> sites as probable frameshift sites that it was unable to correct. 

columns show the numbers of genes in each category, when compared to genes in the reference  manual annotation of n. castellii genes.

a confirmed by comparison to the curated annotations of s. cerevisiae and n. castellii.

b frameshifts corrected using the reads file.

c either because the reads were not helpful or there were no frameshift .

d these potential genes may contain undetected introns, untranslatable sequences due to inaccurate prediction of exon locations, or may begin or end in undefined  nucleotides.

comparing the annotations shows that ygap's predictions were identical to the manually predicted gene structures for  <dig> genes , with  <dig> false positives and  <dig> false negatives , while augustus gets right  <dig> genes , with  <dig> false positives and  <dig> false negatives. as with the s. cerevisiae annotation, the numbers of false positives, false negatives and incorrect start/stop codons from ygap were consistently lower than from augustus. ygap also outperformed in the prediction of intron coordinates, predicting far fewer false positive introns and getting the coordinates completely correct more often .

we also used ygap to annotate the genome of tetrapisispora blattae, a post-wgd species for which no previous genomic data existed so there is no reference annotation to which we can directly compare ygap's results. as input to ygap we used the  <dig> large scaffolds and  <dig> contigs obtained from the celera assembler, as well as  <dig>  pairs of primary sequence reads. automated frameshift correction and scaffold integrity checking were enabled in the ygap run, which took  <dig>  hours. the genome integrity checking steps identified two joins in the scaffold data that were not well supported by nonrepetitive paired sequence reads, so in the final version of the genome we broke these joins. the frameshift correction steps inserted a total of  <dig> nucleotides  and deleted  <dig> nucleotides from the  <dig>  mb genome, affecting the structures of  <dig> genes. ygap predicted  <dig> protein-coding genes in t. blattae, corresponding to  <dig> loci in the ancestral genome
 <cit> . there are  <dig> loci in the ancestral genome at which t. blattae has no annotated gene, and there are  <dig> annotated singletons in t. blattae.

discussion
our aim was to develop a new bioinformatics pipeline for the automated annotation of yeast genomes, exploiting information from existing genomes to the greatest extent possible. the pipeline has been specifically designed for the de novo annotation  of genomes of new yeast species. ygap is very much a yeast-specific tool, designed to cope with the specific challenges  and opportunities  that yeast species present. we recently adapted ygap to annotate the genome sequence of candida orthopsilosis <cit>  using other candida clade genomes from the cgob database
 <cit>  as a reference set, but ygap will not be readily adaptable to more distantly related, intron-rich fungi or other eukaryotes.

the full ygap pipeline includes not only de novo genome annotation but also some error-checking tools that use all the outputs from high-throughput sequencing methods, i.e. files of scaffolds, contigs, and reads. these tools include a verification that scaffold structure is well supported by the paired primary sequencing reads, and identification of any large contigs that were not included in the scaffolds. these steps are not essential in order to run the automatic annotation, but they can improve the quality of the sequenced genome and thus the quality of the annotation. ygap is also unique in its ability to make use of a file of primary sequence reads to try to correct apparent frameshift errors in the assembly. however, these features require the user to upload the primary reads data, and at the moment this is only possible for roche- <dig> or sanger projects . nevertheless, we expect that these additional quality-control steps will eventually become unnecessary because they are largely dependent on the quality of the sequence and the assembly, so the need for them should decline as the quality of next-generation sequencing techniques improves. the basic annotation steps in ygap require only a scaffolds file, which can come from any sequencing platform.

a key feature of ygap is that it tries to use the orthologous genes from other species, identified by a synteny method, to make gene structure predictions. some other previous automatic genome annotation tools have also been based on the identification of orthologs. some of these are quite specific, such as dogma
 <cit> , an annotation tool designed to annotate organellar genomes, and mage
 <cit>  which annotates microbial genomes. other automatic genome annotation tools can be more widely used and can annotate both prokaryotic and eukaryotic genomes. rapyd
 <cit>  is an annotation platform that has been developed specifically for yeast species and uses augustus
 <cit>  as its main tool for gene prediction.

we tested ygap using the s. cerevisiae annotation in ygob as a 'gold standard' for reference and compared the results to predictions made by augustus using its s. cerevisiae model. the results showed that ygap was able to correctly predict more than 90% of s. cerevisiae gene structures correctly. importantly, the use of multi-species annotations in ygob together with synteny information resulted in a significant reduction in the numbers of both false-positive and false-negative gene predictions. a manual check showed that most spurious ygap gene annotations  correspond to annotated pseudogene features. ygap’s failure to detect certain genes  was due to:  the genes being species-specific gene gains or species-specific families,  the genes being located in subtelomeric regions where rapid gene family expansion has resulted in multiple gene duplications, and  in post-wgd species, occasional failure to annotate both copies of a gene retained in duplicate after wgd if both copies are located on the same scaffold.

ygap's performance on intron-containing genes is less impressive, resulting in correct prediction of both the presence of an intron and the locations of its boundaries only about half the time, but it nonetheless outperforms augustus and makes few false-positive predictions of introns. one cause of the poor performance on introns may be inaccurate annotation of intron-containing loci in the existing genome annotations in ygob. it should also be noted that ygap will only predict a maximum of one intron per gene, whereas in fact a small number of genes  are known to have two introns in their coding regions.

CONCLUSIONS
ygap has been able to correctly annotate 90% and 93% of the genes in saccharomyces cerevisiae and naumovozyma castellii respectively. it is more difficult to quantify ygap's performance on the other genomes we sequenced de novo <cit>  because there is no other annotation to which its output can be compared. all ygap's results are provided to the user for manual inspection in different lists of tagged genes. these include a list of genes in which frameshifts have been automatically corrected; a list of those in which a frameshift probably exists but was not automatically corrected; a list of genes whose dna sequences are not properly translatable ; and list of genes that extend into regions of scaffolds that contain continuous runs of n nucleotides, making identification of start/stop codons impossible. ygap proved effective in the annotation of seven new genomes from saccharomycetaceae species
 <cit>  and we anticipate that it will be applicable to many other genomes in the future. nevertheless, manual refinement of the results remains necessary and we are still some distance from our ultimate goal of being able to turn a sample of genomic dna from an uncharacterized yeast species into a complete and fully annotated genome sequence without any human intervention.

availability
ygap's webserver is available without restrictions on use at
http://wolfe.gen.tcd.ie/annotation.

abbreviations
ygap: yeast genome annotation pipeline; ygob: yeast gene order browser; wgd: whole genome duplication.

competing interests
the author declared that they have no competing interest.

authors’ contributions
epw designed and implemented ygap software with supervision from khw. da made the webserver interface. kpb integrated ygap with ygob. epw and khw wrote the manuscript, which was read and approved by all authors.

