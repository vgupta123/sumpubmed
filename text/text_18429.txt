BACKGROUND
constructing the evolutionary history of a set of species is an important problem in the study of biological evolution. phylogenetic trees are used in biology to represent the ancestral history of a collection of existing species. this is appropriate for many groups of species. however, there are some groups for which the ancestral history cannot be represented by a tree. this is caused by processes such as hybridization, recombination, and lateral gene transfer. we refer to those processes as reticulation events. for this kind of groups of species, it is more appropriate to represent their ancestral history by rooted acyclic digraphs, where vertices of in-degree at least two represent reticulation events.

when studying the evolutionary history of a set of existing species, one can obtain a phylogenetic tree of the set of species with high confidence by looking at a segment of sequences or a set of genes. when looking at another segment of sequences, a different phylogenetic tree can be obtained with high confidence, too. this indicates that reticulation events may occur. thus, we have the following problem: given two rooted phylogenetic trees on a set of species that correctly represent the tree-like evolution of different parts of their genomes, what is the smallest number of reticulation events needed to explain the evolution of the species under consideration?

the subtree prune and regraft  distance and the hybridization number are two important measures for evolutionary tree comparison and hybridization network construction. since both problems are np-hard  <cit> , it is challenging to develop programs that can give exact solutions when the two given trees are large or have a large rspr distance or hybridization number. previously, several software packages have been developed for these problems  <cit> . this new breakthrough brings us a hope that one can routinely solve these hard problems for two given large trees. however, the previously fastest software packages can still take hours to finish even when the given trees are of moderate sizes. thus, a faster software tool for these problems is in need.

in general, there may exist two or more minimum hybridization networks displaying two given phylogenetic trees t <dig> and t <dig> with the same leaf set x. in some cases, we may want to enumerate all minimum hybridization networks displaying both t <dig> and t <dig>  unfortunately, it is not hard to construct two example phylogenetic trees t <dig> and t <dig> such that there are too many minimum hybridization networks displaying both t <dig> and t <dig>  so, we instead want to enumerate only a representative set of minimum hybridization networks displaying both t <dig> and t <dig>  here, a hybridization network nrepresents another hybridization network n’ if for every pair  of species in xx and y fall into the same connected component of fn if and only if they fall into the same connected component of f’n, where fn  is the forest obtained from n  by removing all the edges entering reticulate nodes. hybridnet <cit>  and dendroscope  <dig> <cit>  are able to enumerate a representative set of of minimum hybridization networks for two given phylogenetic trees. if the problem for the two given trees can be reduced to relatively smaller independent subproblems , dendroscope is much faster than hybridnet; otherwise, the two have almost the same speed. unfortunately, both tools run very slowly when the minimum hybridization number of a hybridization network of two given trees is large  and the problem for the trees cannot be reduced to relatively smaller independent subproblems. thus, a much faster tool is in need.

RESULTS
we have developed a new tool  for the problem of enumerating a representative set of minimum hybridization networks of two given phylognetic trees. of course, fasthn can also compute the minimum hybridization number of a hybridization network of two given phylognetic trees and construct a single minimum hybridization network of two given phylognetic trees. fasthn is implemented in ansi c and is available at http://rnc.r.dendai.ac.jp/∼chen/fasthn.html, or http://www.cs.cityu.edu.hk/∼lwang/software/fasthn/fasthn.html, where one can download executables for windows xp , windows  <dig> , linux, and mac os.

after downloading fasthn, one can run it as follows:

fasthn t <dig> t <dig> option heuristic or simply fasthn t <dig> t <dig> option

here, t <dig> and t <dig> are two text files each containing a phylogenetic tree in the newick format . the label of each leaf in an input tree should be a string consisting of letters in { <dig> ,…, <dig> a,b,…,z,a,b,…,z,_,.}. there is no limit on the length of the label of each leaf.

option is a string in the set {hn, maaf, maafs} controlling the output as follows: 

· hn: the output is the hybridization number of t <dig> and t <dig> 

· maaf: the output is one maaf of t <dig> and t <dig> together with one minimum hybridization network for the maaf.

· maafs: the output is all maafs of t <dig> and t <dig> together with one minimum hybridization network for each maaf.

fasthn outputs an maaf  by printing out the leaf sets of the trees in the maaf , while it outputs a hybridization network in its extended newick format  <cit> . when option is maafs , fasthn outputs the maafs  without repetition. we remind the reader that one can view a tree in the newick format and a network in the extended newick format by using dendroscope due to  <cit> .

heuristic is a 3-bit binary string specifying the version of fasthn as follows: 

· the first bit is  <dig> if and only if fasthn adopts initial cluster reductions.

· the second bit is  <dig> if and only if fasthn adopts heuristic  <dig> 

· the last bit is  <dig> if and only if fasthn adopts heuristic  <dig> 

heuristic can be omitted; in that case, it is set to be  <dig> 

to compare the efficiency of fasthn with the previous bests , we have run them on both simulated datasets and biological datasets for the problem of computing all maafs of two given phylogenetic trees. the experiment has been performed on a windows- <dig>  desktop pc with i7- <dig> cpu and 4gb ram. it is worth mentioning that in our experiments, we have used the total elapsed time  to measure the running time of fasthn. since fasthn is single-threaded, its total elapsed time is usually more than its cpu time. in contrast, dendroscope  <dig> is multi-threaded, its total elapsed time can be less than its cpu time. because it is not clear how dendroscope  <dig> measures its running time, we have pessimistically measured the running time of fasthn using the total elapsed time .

simulated data
to generate simulated datasets, we use a program due to beiko and hamilton  <cit> . to obtain a pair  of trees, their program first generates t randomly and then obtains t’ from t by performing a specified number r  of random rspr operations on t. recall that an rspr operation on a tree t first removes an edge  from t, then contracts p ), and further re-attaches the subtree rooted at c to an edge  of t  into two edges  and , and adding a new edge ). so, the actual rspr distance of t and t’ is at most r. moreover, the hybridization number of t and t’ can be r, smaller than r, or larger than r.

we first use beiko and hamilton’s program to generate  <dig> pairs of trees each of which has  <dig> leaves. the first   <dig> pairs are generated by setting r =  <dig> . it turns out that among the  <dig> generated tree-pairs,  <dig>  tree-pairs have hybridization number  <dig> . figure  <dig> summarizes the average running time of the programs for the generated tree-pairs, where each average is taken over those tree-pairs with the same hybridization number. as can be seen from the figure, fasthn with heuristic  <dig> and/or heuristic  <dig> is much faster than hybridnet and dendroscope  <dig>  this difference in speed becomes more significant as the hybridization number becomes larger. moreover, heuristic  <dig> contributes the most to the saving of running time. indeed, when heuristic  <dig> is used, both heuristic  <dig> and initial cluster reductions do not help much. it is worth noting that beiko and hamilton’s program tends to create a pair of trees without a relatively large common clusters. this is why initial cluster reductions do not help much for tree-pairs randomly generated by their program.

the comparison is done on  <dig> randomly generated tree-pairs with relatively small hybridization numbers, where each tree has  <dig> leaves. if the running time of a program for a tree-pair is more than  <dig> seconds, then it has been rounded down to  <dig> seconds. among the  <dig> pairs, dendroscope  <dig> takes more than  <dig> seconds for  <dig> pairs, fasthn without heuristic  <dig>   <dig>  or initial cluster reductions takes more than  <dig> seconds for  <dig> pairs, fasthn with only initial cluster reductions takes more than  <dig> seconds for  <dig> pairs, and fasthn with heuristic  <dig> or  <dig> takes less than  <dig> seconds for every pair.

to test how the number of leaves in an input tree influences the running time of the algorithms, we next use beiko and hamilton’s program to generate  <dig> pairs of trees each of which has  <dig> leaves. the first   <dig> pairs are generated by setting r =  <dig> . it turns out that among the  <dig> generated tree-pairs,  <dig>  tree-pairs have hybridization number  <dig> . moreover, for each h∈{ <dig> }, there is exactly one generated tree-pair with hybridization number h. figure  <dig> summarizes the average running time of the programs for those generated tree-pairs with hybridization number in the range , where each average is taken over those tree-pairs with the same hybridization number. as can be seen from the figure, the superiority of fasthn over hybridnet and dendroscope  <dig> remains the same  if heuristic  <dig> or  <dig> is used. moreover, heuristic  <dig> contributes the most to the saving of running time.

the comparison is done on  <dig> randomly generated tree-pairs with relatively small hybridization numbers, where each tree has  <dig> leaves.

to compare the performance of the algorithms for tree-pairs with relatively large hybridization numbers, we further use beiko and hamilton’s program to generate  <dig> pairs of trees by setting r =  <dig>  where each tree has  <dig> leaves. it turns out that among the  <dig> generated tree-pairs,  <dig>  tree-pairs have hybridization number  <dig> . moreover, there is exactly one generated tree-pair with hybridization number  <dig>  figure  <dig> summarizes the average running time of the two best versions of fasthn for the generated tree-pairs, where each average is taken over those tree-pairs with the same hybridization number. as can be seen from the figure, both versions take less than  <dig> minutes  even when the hybridization number is as large as  <dig>  while fasthn with both heuristics  <dig> and  <dig> is the faster version. in contrast, dendroscope  <dig> fails to complete for each of the  <dig> tree-pairs.

the time is measured on  <dig> randomly generated tree-pairs with relatively large hybridization numbers, where each tree has  <dig> leaves. 

biological data
we use the poaceae dataset from the grass phylogeny working group  <cit> ). the dataset contains sequences for six loci: internal transcribed spacer of ribosomal dna ; nadh dehydrogenase, subunit f ; phytochrome b ; ribulose  <dig> -biphosphate carboxylase/oxygenase, large subunit ; rna polymerase ii, subunit β′ ; and granule bound starch synthase i . the poaceae dataset was previously analyzed by  <cit> , who generated the inferred rooted binary trees for these loci. see table  <dig> for the experimental results. in this table, column pair shows the tree-pairs, column #taxashows the number of leaves in an input tree, and column h shows the hybridization number of each tree-pair. moreover, columns fasthn and dendroscope show the running times  of fasthn and dendroscope  <dig>  respectively. furthermore, column fasthn has  <dig> sub-columns each labeled by  <dig> bits, where the first  bit is  <dig> if and only if initial cluster reductions  are adopted. in particular, the sub-column labeled  <dig> corresponds to hybridnet.

as can be seen from table  <dig>  for most of the tree-pairs, there is not much difference in speed between dendroscope  <dig> and fasthn with initial cluster reductions. this is because most of the tree-pairs have small hybridization numbers. for the tree-pair , fasthn with cluster reductions runs substantially faster than fasthn without cluster reductions. this is because the problem for this pair can be reduced to two tree-pairs of roughly equal sizes by initial cluster reductions in the preprocessing stage of the algorithm.

discussion
roughly speaking, fasthn consists of two stages, namely, the preprocessing stage and the exhaustive-search stage. in the preprocessing stage, fasthn performs only subtree reductions and cluster reductions. indeed, other kinds of reductions are also known. one of them is chain reduction  <cit> . performing chain reductions on the input trees results in trees whose nodes are weighted. unfortunately, it seems that whidden et al.’s o-time algorithm for computing the rspr distance d of two given phylognetic trees with n leaves does not work when the trees are weighted. this is why fasthn does not perform chain reductions.

in the exhaustive-search stage, fasthn also performs subtree reductions whenever possible, but does not perform cluster reductions. the main reason of not performing cluster reductions in the 2nd stage is that performing a cluster reduction is too time-consuming  time, where n is the number of leaves in the trees).

when running fasthn, one can decide whether to adopt initial cluster reductions, heuristic  <dig>  or heuristic  <dig>  if two input trees have relatively large common clusters, performing initial cluster reductions on them lead to solving independent and significantly smaller subproblems. so, we should always choose to adopt initial cluster reductions. moreover, as can be seen from our simulated results, we should always choose to adopt heuristic  <dig> because it enables the algorithm to save a lot of time by cutting more branches of the search tree in the exhaustive-search stage. our simulated results also show that adopting both heuristics  <dig> and  <dig> makes fasthn run faster  than adopting only heuristic  <dig>  thus, in general, we should choose to adopt heuristic  <dig> as well. however, in our experiments, we have found some tree-pairs for which fasthn with heuristic  <dig> but without heuristic  <dig> runs significantly faster than fasthn with both heuristics  <dig> and  <dig>  hence, as long as heuristic  <dig> is adopted, there is still room to decide whether to adopt heuristic  <dig> as well.

CONCLUSIONS
our experiments show that fasthn runs substantially faster than the previously best tools . the fast speed of fasthn originates from two key new ideas : 

· we use a fast algorithm for computing the rspr distance of two given phylognetic trees to cut more branches of the search tree during the exhaustive-search stage of fasthn.

· during the exhaustive-search stage of fasthn, we always try to find a pair of sibling leaves in one of the two forests  such that the two leaves is as far apart as possible in the other forest.

